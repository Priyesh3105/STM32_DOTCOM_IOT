
USB_HID_KEYBOARD_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000779c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800785c  0800785c  0001785c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007928  08007928  00020158  2**0
                  CONTENTS
  4 .ARM          00000008  08007928  08007928  00017928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007930  08007930  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007930  08007930  00017930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007934  08007934  00017934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  08007938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000085c  20000158  08007a90  00020158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009b4  08007a90  000209b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b10a  00000000  00000000  000201c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027b2  00000000  00000000  0002b2cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a00  00000000  00000000  0002da80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000074e  00000000  00000000  0002e480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001574c  00000000  00000000  0002ebce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e449  00000000  00000000  0004431a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00076f58  00000000  00000000  00052763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000021c4  00000000  00000000  000c96bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000cb880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000158 	.word	0x20000158
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007844 	.word	0x08007844

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000015c 	.word	0x2000015c
 8000104:	08007844 	.word	0x08007844

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f834 	bl	80002cc <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46ce      	mov	lr, r9
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	469c      	mov	ip, r3
 800027a:	0413      	lsls	r3, r2, #16
 800027c:	4647      	mov	r7, r8
 800027e:	0c1b      	lsrs	r3, r3, #16
 8000280:	001d      	movs	r5, r3
 8000282:	000e      	movs	r6, r1
 8000284:	4661      	mov	r1, ip
 8000286:	0404      	lsls	r4, r0, #16
 8000288:	0c24      	lsrs	r4, r4, #16
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	0c10      	lsrs	r0, r2, #16
 8000290:	434b      	muls	r3, r1
 8000292:	4365      	muls	r5, r4
 8000294:	4341      	muls	r1, r0
 8000296:	4360      	muls	r0, r4
 8000298:	0c2c      	lsrs	r4, r5, #16
 800029a:	18c0      	adds	r0, r0, r3
 800029c:	1820      	adds	r0, r4, r0
 800029e:	468c      	mov	ip, r1
 80002a0:	4283      	cmp	r3, r0
 80002a2:	d903      	bls.n	80002ac <__aeabi_lmul+0x3c>
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	025b      	lsls	r3, r3, #9
 80002a8:	4698      	mov	r8, r3
 80002aa:	44c4      	add	ip, r8
 80002ac:	4649      	mov	r1, r9
 80002ae:	4379      	muls	r1, r7
 80002b0:	4356      	muls	r6, r2
 80002b2:	0c03      	lsrs	r3, r0, #16
 80002b4:	042d      	lsls	r5, r5, #16
 80002b6:	0c2d      	lsrs	r5, r5, #16
 80002b8:	1989      	adds	r1, r1, r6
 80002ba:	4463      	add	r3, ip
 80002bc:	0400      	lsls	r0, r0, #16
 80002be:	1940      	adds	r0, r0, r5
 80002c0:	18c9      	adds	r1, r1, r3
 80002c2:	bcc0      	pop	{r6, r7}
 80002c4:	46b9      	mov	r9, r7
 80002c6:	46b0      	mov	r8, r6
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)

080002cc <__udivmoddi4>:
 80002cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ce:	4657      	mov	r7, sl
 80002d0:	464e      	mov	r6, r9
 80002d2:	4645      	mov	r5, r8
 80002d4:	46de      	mov	lr, fp
 80002d6:	b5e0      	push	{r5, r6, r7, lr}
 80002d8:	0004      	movs	r4, r0
 80002da:	000d      	movs	r5, r1
 80002dc:	4692      	mov	sl, r2
 80002de:	4699      	mov	r9, r3
 80002e0:	b083      	sub	sp, #12
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d830      	bhi.n	8000348 <__udivmoddi4+0x7c>
 80002e6:	d02d      	beq.n	8000344 <__udivmoddi4+0x78>
 80002e8:	4649      	mov	r1, r9
 80002ea:	4650      	mov	r0, sl
 80002ec:	f000 f8ba 	bl	8000464 <__clzdi2>
 80002f0:	0029      	movs	r1, r5
 80002f2:	0006      	movs	r6, r0
 80002f4:	0020      	movs	r0, r4
 80002f6:	f000 f8b5 	bl	8000464 <__clzdi2>
 80002fa:	1a33      	subs	r3, r6, r0
 80002fc:	4698      	mov	r8, r3
 80002fe:	3b20      	subs	r3, #32
 8000300:	d434      	bmi.n	800036c <__udivmoddi4+0xa0>
 8000302:	469b      	mov	fp, r3
 8000304:	4653      	mov	r3, sl
 8000306:	465a      	mov	r2, fp
 8000308:	4093      	lsls	r3, r2
 800030a:	4642      	mov	r2, r8
 800030c:	001f      	movs	r7, r3
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	001e      	movs	r6, r3
 8000314:	42af      	cmp	r7, r5
 8000316:	d83b      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000318:	42af      	cmp	r7, r5
 800031a:	d100      	bne.n	800031e <__udivmoddi4+0x52>
 800031c:	e079      	b.n	8000412 <__udivmoddi4+0x146>
 800031e:	465b      	mov	r3, fp
 8000320:	1ba4      	subs	r4, r4, r6
 8000322:	41bd      	sbcs	r5, r7
 8000324:	2b00      	cmp	r3, #0
 8000326:	da00      	bge.n	800032a <__udivmoddi4+0x5e>
 8000328:	e076      	b.n	8000418 <__udivmoddi4+0x14c>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	465a      	mov	r2, fp
 8000336:	4093      	lsls	r3, r2
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	4642      	mov	r2, r8
 800033e:	4093      	lsls	r3, r2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	e029      	b.n	8000398 <__udivmoddi4+0xcc>
 8000344:	4282      	cmp	r2, r0
 8000346:	d9cf      	bls.n	80002e8 <__udivmoddi4+0x1c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <__udivmoddi4+0x8e>
 8000356:	601c      	str	r4, [r3, #0]
 8000358:	605d      	str	r5, [r3, #4]
 800035a:	9800      	ldr	r0, [sp, #0]
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	b003      	add	sp, #12
 8000360:	bcf0      	pop	{r4, r5, r6, r7}
 8000362:	46bb      	mov	fp, r7
 8000364:	46b2      	mov	sl, r6
 8000366:	46a9      	mov	r9, r5
 8000368:	46a0      	mov	r8, r4
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	4642      	mov	r2, r8
 800036e:	469b      	mov	fp, r3
 8000370:	2320      	movs	r3, #32
 8000372:	1a9b      	subs	r3, r3, r2
 8000374:	4652      	mov	r2, sl
 8000376:	40da      	lsrs	r2, r3
 8000378:	4641      	mov	r1, r8
 800037a:	0013      	movs	r3, r2
 800037c:	464a      	mov	r2, r9
 800037e:	408a      	lsls	r2, r1
 8000380:	0017      	movs	r7, r2
 8000382:	4642      	mov	r2, r8
 8000384:	431f      	orrs	r7, r3
 8000386:	4653      	mov	r3, sl
 8000388:	4093      	lsls	r3, r2
 800038a:	001e      	movs	r6, r3
 800038c:	42af      	cmp	r7, r5
 800038e:	d9c3      	bls.n	8000318 <__udivmoddi4+0x4c>
 8000390:	2200      	movs	r2, #0
 8000392:	2300      	movs	r3, #0
 8000394:	9200      	str	r2, [sp, #0]
 8000396:	9301      	str	r3, [sp, #4]
 8000398:	4643      	mov	r3, r8
 800039a:	2b00      	cmp	r3, #0
 800039c:	d0d8      	beq.n	8000350 <__udivmoddi4+0x84>
 800039e:	07fb      	lsls	r3, r7, #31
 80003a0:	0872      	lsrs	r2, r6, #1
 80003a2:	431a      	orrs	r2, r3
 80003a4:	4646      	mov	r6, r8
 80003a6:	087b      	lsrs	r3, r7, #1
 80003a8:	e00e      	b.n	80003c8 <__udivmoddi4+0xfc>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d101      	bne.n	80003b2 <__udivmoddi4+0xe6>
 80003ae:	42a2      	cmp	r2, r4
 80003b0:	d80c      	bhi.n	80003cc <__udivmoddi4+0x100>
 80003b2:	1aa4      	subs	r4, r4, r2
 80003b4:	419d      	sbcs	r5, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	1924      	adds	r4, r4, r4
 80003ba:	416d      	adcs	r5, r5
 80003bc:	2100      	movs	r1, #0
 80003be:	3e01      	subs	r6, #1
 80003c0:	1824      	adds	r4, r4, r0
 80003c2:	414d      	adcs	r5, r1
 80003c4:	2e00      	cmp	r6, #0
 80003c6:	d006      	beq.n	80003d6 <__udivmoddi4+0x10a>
 80003c8:	42ab      	cmp	r3, r5
 80003ca:	d9ee      	bls.n	80003aa <__udivmoddi4+0xde>
 80003cc:	3e01      	subs	r6, #1
 80003ce:	1924      	adds	r4, r4, r4
 80003d0:	416d      	adcs	r5, r5
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d1f8      	bne.n	80003c8 <__udivmoddi4+0xfc>
 80003d6:	9800      	ldr	r0, [sp, #0]
 80003d8:	9901      	ldr	r1, [sp, #4]
 80003da:	465b      	mov	r3, fp
 80003dc:	1900      	adds	r0, r0, r4
 80003de:	4169      	adcs	r1, r5
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	db24      	blt.n	800042e <__udivmoddi4+0x162>
 80003e4:	002b      	movs	r3, r5
 80003e6:	465a      	mov	r2, fp
 80003e8:	4644      	mov	r4, r8
 80003ea:	40d3      	lsrs	r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	40e2      	lsrs	r2, r4
 80003f0:	001c      	movs	r4, r3
 80003f2:	465b      	mov	r3, fp
 80003f4:	0015      	movs	r5, r2
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	db2a      	blt.n	8000450 <__udivmoddi4+0x184>
 80003fa:	0026      	movs	r6, r4
 80003fc:	409e      	lsls	r6, r3
 80003fe:	0033      	movs	r3, r6
 8000400:	0026      	movs	r6, r4
 8000402:	4647      	mov	r7, r8
 8000404:	40be      	lsls	r6, r7
 8000406:	0032      	movs	r2, r6
 8000408:	1a80      	subs	r0, r0, r2
 800040a:	4199      	sbcs	r1, r3
 800040c:	9000      	str	r0, [sp, #0]
 800040e:	9101      	str	r1, [sp, #4]
 8000410:	e79e      	b.n	8000350 <__udivmoddi4+0x84>
 8000412:	42a3      	cmp	r3, r4
 8000414:	d8bc      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000416:	e782      	b.n	800031e <__udivmoddi4+0x52>
 8000418:	4642      	mov	r2, r8
 800041a:	2320      	movs	r3, #32
 800041c:	2100      	movs	r1, #0
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	9100      	str	r1, [sp, #0]
 8000424:	9201      	str	r2, [sp, #4]
 8000426:	2201      	movs	r2, #1
 8000428:	40da      	lsrs	r2, r3
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	e785      	b.n	800033a <__udivmoddi4+0x6e>
 800042e:	4642      	mov	r2, r8
 8000430:	2320      	movs	r3, #32
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	002a      	movs	r2, r5
 8000436:	4646      	mov	r6, r8
 8000438:	409a      	lsls	r2, r3
 800043a:	0023      	movs	r3, r4
 800043c:	40f3      	lsrs	r3, r6
 800043e:	4644      	mov	r4, r8
 8000440:	4313      	orrs	r3, r2
 8000442:	002a      	movs	r2, r5
 8000444:	40e2      	lsrs	r2, r4
 8000446:	001c      	movs	r4, r3
 8000448:	465b      	mov	r3, fp
 800044a:	0015      	movs	r5, r2
 800044c:	2b00      	cmp	r3, #0
 800044e:	dad4      	bge.n	80003fa <__udivmoddi4+0x12e>
 8000450:	4642      	mov	r2, r8
 8000452:	002f      	movs	r7, r5
 8000454:	2320      	movs	r3, #32
 8000456:	0026      	movs	r6, r4
 8000458:	4097      	lsls	r7, r2
 800045a:	1a9b      	subs	r3, r3, r2
 800045c:	40de      	lsrs	r6, r3
 800045e:	003b      	movs	r3, r7
 8000460:	4333      	orrs	r3, r6
 8000462:	e7cd      	b.n	8000400 <__udivmoddi4+0x134>

08000464 <__clzdi2>:
 8000464:	b510      	push	{r4, lr}
 8000466:	2900      	cmp	r1, #0
 8000468:	d103      	bne.n	8000472 <__clzdi2+0xe>
 800046a:	f000 f807 	bl	800047c <__clzsi2>
 800046e:	3020      	adds	r0, #32
 8000470:	e002      	b.n	8000478 <__clzdi2+0x14>
 8000472:	0008      	movs	r0, r1
 8000474:	f000 f802 	bl	800047c <__clzsi2>
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__clzsi2>:
 800047c:	211c      	movs	r1, #28
 800047e:	2301      	movs	r3, #1
 8000480:	041b      	lsls	r3, r3, #16
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0xe>
 8000486:	0c00      	lsrs	r0, r0, #16
 8000488:	3910      	subs	r1, #16
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	4298      	cmp	r0, r3
 800048e:	d301      	bcc.n	8000494 <__clzsi2+0x18>
 8000490:	0a00      	lsrs	r0, r0, #8
 8000492:	3908      	subs	r1, #8
 8000494:	091b      	lsrs	r3, r3, #4
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0x22>
 800049a:	0900      	lsrs	r0, r0, #4
 800049c:	3904      	subs	r1, #4
 800049e:	a202      	add	r2, pc, #8	; (adr r2, 80004a8 <__clzsi2+0x2c>)
 80004a0:	5c10      	ldrb	r0, [r2, r0]
 80004a2:	1840      	adds	r0, r0, r1
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	02020304 	.word	0x02020304
 80004ac:	01010101 	.word	0x01010101
	...

080004b8 <KeyBoardPrint>:
	uint8_t KEYCODE6;
} subKeyBoard;

subKeyBoard keyBoardHIDsub = { 0, 0, 0, 0, 0, 0, 0, 0 };

void KeyBoardPrint(char *data, uint16_t length) {
 80004b8:	b590      	push	{r4, r7, lr}
 80004ba:	b087      	sub	sp, #28
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	000a      	movs	r2, r1
 80004c2:	1cbb      	adds	r3, r7, #2
 80004c4:	801a      	strh	r2, [r3, #0]
    uint8_t reportBuffer[sizeof(subKeyBoard)] = {0}; // Create a buffer for the HID report
 80004c6:	230c      	movs	r3, #12
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	2200      	movs	r2, #0
 80004d0:	605a      	str	r2, [r3, #4]

    for (uint16_t count = 0; count < length; count++) {
 80004d2:	2316      	movs	r3, #22
 80004d4:	18fb      	adds	r3, r7, r3
 80004d6:	2200      	movs	r2, #0
 80004d8:	801a      	strh	r2, [r3, #0]
 80004da:	e06e      	b.n	80005ba <KeyBoardPrint+0x102>
        if (data[count] >= 0x41 && data[count] <= 0x5A) {
 80004dc:	2116      	movs	r1, #22
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	881b      	ldrh	r3, [r3, #0]
 80004e2:	687a      	ldr	r2, [r7, #4]
 80004e4:	18d3      	adds	r3, r2, r3
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b40      	cmp	r3, #64	; 0x40
 80004ea:	d913      	bls.n	8000514 <KeyBoardPrint+0x5c>
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	881b      	ldrh	r3, [r3, #0]
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	18d3      	adds	r3, r2, r3
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	2b5a      	cmp	r3, #90	; 0x5a
 80004f8:	d80c      	bhi.n	8000514 <KeyBoardPrint+0x5c>
            keyBoardHIDsub.MODIFIER = 0x02;
 80004fa:	4b36      	ldr	r3, [pc, #216]	; (80005d4 <KeyBoardPrint+0x11c>)
 80004fc:	2202      	movs	r2, #2
 80004fe:	701a      	strb	r2, [r3, #0]
            keyBoardHIDsub.KEYCODE1 = data[count] - 0x3D;
 8000500:	187b      	adds	r3, r7, r1
 8000502:	881b      	ldrh	r3, [r3, #0]
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	18d3      	adds	r3, r2, r3
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	3b3d      	subs	r3, #61	; 0x3d
 800050c:	b2da      	uxtb	r2, r3
 800050e:	4b31      	ldr	r3, [pc, #196]	; (80005d4 <KeyBoardPrint+0x11c>)
 8000510:	709a      	strb	r2, [r3, #2]
 8000512:	e02f      	b.n	8000574 <KeyBoardPrint+0xbc>
        } else if (data[count] >= 0x61 && data[count] <= 0x7A) {
 8000514:	2116      	movs	r1, #22
 8000516:	187b      	adds	r3, r7, r1
 8000518:	881b      	ldrh	r3, [r3, #0]
 800051a:	687a      	ldr	r2, [r7, #4]
 800051c:	18d3      	adds	r3, r2, r3
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b60      	cmp	r3, #96	; 0x60
 8000522:	d910      	bls.n	8000546 <KeyBoardPrint+0x8e>
 8000524:	187b      	adds	r3, r7, r1
 8000526:	881b      	ldrh	r3, [r3, #0]
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	18d3      	adds	r3, r2, r3
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b7a      	cmp	r3, #122	; 0x7a
 8000530:	d809      	bhi.n	8000546 <KeyBoardPrint+0x8e>
            keyBoardHIDsub.KEYCODE1 = data[count] - 0x5D;
 8000532:	187b      	adds	r3, r7, r1
 8000534:	881b      	ldrh	r3, [r3, #0]
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	18d3      	adds	r3, r2, r3
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	3b5d      	subs	r3, #93	; 0x5d
 800053e:	b2da      	uxtb	r2, r3
 8000540:	4b24      	ldr	r3, [pc, #144]	; (80005d4 <KeyBoardPrint+0x11c>)
 8000542:	709a      	strb	r2, [r3, #2]
 8000544:	e016      	b.n	8000574 <KeyBoardPrint+0xbc>
        } else if (data[count] == 0x20) {
 8000546:	2316      	movs	r3, #22
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	881b      	ldrh	r3, [r3, #0]
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	18d3      	adds	r3, r2, r3
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	2b20      	cmp	r3, #32
 8000554:	d103      	bne.n	800055e <KeyBoardPrint+0xa6>
            keyBoardHIDsub.KEYCODE1 = 0x2C;
 8000556:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <KeyBoardPrint+0x11c>)
 8000558:	222c      	movs	r2, #44	; 0x2c
 800055a:	709a      	strb	r2, [r3, #2]
 800055c:	e00a      	b.n	8000574 <KeyBoardPrint+0xbc>
        } else if (data[count] == 0x0A) {
 800055e:	2316      	movs	r3, #22
 8000560:	18fb      	adds	r3, r7, r3
 8000562:	881b      	ldrh	r3, [r3, #0]
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	18d3      	adds	r3, r2, r3
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b0a      	cmp	r3, #10
 800056c:	d102      	bne.n	8000574 <KeyBoardPrint+0xbc>
            keyBoardHIDsub.KEYCODE1 = 0x28;
 800056e:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <KeyBoardPrint+0x11c>)
 8000570:	2228      	movs	r2, #40	; 0x28
 8000572:	709a      	strb	r2, [r3, #2]
        }

        // Populate the report buffer with the appropriate values
        memcpy(reportBuffer, &keyBoardHIDsub, sizeof(keyBoardHIDsub));
 8000574:	240c      	movs	r4, #12
 8000576:	193b      	adds	r3, r7, r4
 8000578:	4a16      	ldr	r2, [pc, #88]	; (80005d4 <KeyBoardPrint+0x11c>)
 800057a:	ca03      	ldmia	r2!, {r0, r1}
 800057c:	c303      	stmia	r3!, {r0, r1}

        // Send the report buffer using USBD_HID_SendReport
        USBD_HID_SendReport(&hUsbDeviceFS, reportBuffer, sizeof(reportBuffer));
 800057e:	1939      	adds	r1, r7, r4
 8000580:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <KeyBoardPrint+0x120>)
 8000582:	2208      	movs	r2, #8
 8000584:	0018      	movs	r0, r3
 8000586:	f005 fa55 	bl	8005a34 <USBD_HID_SendReport>

        HAL_Delay(15);
 800058a:	200f      	movs	r0, #15
 800058c:	f000 f9b4 	bl	80008f8 <HAL_Delay>
        keyBoardHIDsub.MODIFIER = 0x00;
 8000590:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <KeyBoardPrint+0x11c>)
 8000592:	2200      	movs	r2, #0
 8000594:	701a      	strb	r2, [r3, #0]
        keyBoardHIDsub.KEYCODE1 = 0x00;
 8000596:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <KeyBoardPrint+0x11c>)
 8000598:	2200      	movs	r2, #0
 800059a:	709a      	strb	r2, [r3, #2]
        USBD_HID_SendReport(&hUsbDeviceFS, reportBuffer, sizeof(reportBuffer));
 800059c:	1939      	adds	r1, r7, r4
 800059e:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <KeyBoardPrint+0x120>)
 80005a0:	2208      	movs	r2, #8
 80005a2:	0018      	movs	r0, r3
 80005a4:	f005 fa46 	bl	8005a34 <USBD_HID_SendReport>

        HAL_Delay(25);
 80005a8:	2019      	movs	r0, #25
 80005aa:	f000 f9a5 	bl	80008f8 <HAL_Delay>
    for (uint16_t count = 0; count < length; count++) {
 80005ae:	2116      	movs	r1, #22
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	881a      	ldrh	r2, [r3, #0]
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	3201      	adds	r2, #1
 80005b8:	801a      	strh	r2, [r3, #0]
 80005ba:	2316      	movs	r3, #22
 80005bc:	18fa      	adds	r2, r7, r3
 80005be:	1cbb      	adds	r3, r7, #2
 80005c0:	8812      	ldrh	r2, [r2, #0]
 80005c2:	881b      	ldrh	r3, [r3, #0]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d200      	bcs.n	80005ca <KeyBoardPrint+0x112>
 80005c8:	e788      	b.n	80004dc <KeyBoardPrint+0x24>
    }
}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	46c0      	nop			; (mov r8, r8)
 80005ce:	46bd      	mov	sp, r7
 80005d0:	b007      	add	sp, #28
 80005d2:	bd90      	pop	{r4, r7, pc}
 80005d4:	20000174 	.word	0x20000174
 80005d8:	200001e8 	.word	0x200001e8

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b5b0      	push	{r4, r5, r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 f91a 	bl	8000818 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f81e 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 f892 	bl	8000710 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005ec:	f006 fc7c 	bl	8006ee8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  strcpy(msg, "God's Favorite me\r\n"); // Use strcpy to initialize msg
 80005f0:	4b0a      	ldr	r3, [pc, #40]	; (800061c <main+0x40>)
 80005f2:	4a0b      	ldr	r2, [pc, #44]	; (8000620 <main+0x44>)
 80005f4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80005f6:	c313      	stmia	r3!, {r0, r1, r4}
 80005f8:	ca03      	ldmia	r2!, {r0, r1}
 80005fa:	c303      	stmia	r3!, {r0, r1}
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  KeyBoardPrint(msg, strlen(msg));
 80005fc:	4b07      	ldr	r3, [pc, #28]	; (800061c <main+0x40>)
 80005fe:	0018      	movs	r0, r3
 8000600:	f7ff fd82 	bl	8000108 <strlen>
 8000604:	0003      	movs	r3, r0
 8000606:	b29a      	uxth	r2, r3
 8000608:	4b04      	ldr	r3, [pc, #16]	; (800061c <main+0x40>)
 800060a:	0011      	movs	r1, r2
 800060c:	0018      	movs	r0, r3
 800060e:	f7ff ff53 	bl	80004b8 <KeyBoardPrint>
	  HAL_Delay(100);
 8000612:	2064      	movs	r0, #100	; 0x64
 8000614:	f000 f970 	bl	80008f8 <HAL_Delay>
	  KeyBoardPrint(msg, strlen(msg));
 8000618:	e7f0      	b.n	80005fc <main+0x20>
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	2000017c 	.word	0x2000017c
 8000620:	0800785c 	.word	0x0800785c

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b590      	push	{r4, r7, lr}
 8000626:	b09d      	sub	sp, #116	; 0x74
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	2438      	movs	r4, #56	; 0x38
 800062c:	193b      	adds	r3, r7, r4
 800062e:	0018      	movs	r0, r3
 8000630:	2338      	movs	r3, #56	; 0x38
 8000632:	001a      	movs	r2, r3
 8000634:	2100      	movs	r1, #0
 8000636:	f007 f8d9 	bl	80077ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063a:	2324      	movs	r3, #36	; 0x24
 800063c:	18fb      	adds	r3, r7, r3
 800063e:	0018      	movs	r0, r3
 8000640:	2314      	movs	r3, #20
 8000642:	001a      	movs	r2, r3
 8000644:	2100      	movs	r1, #0
 8000646:	f007 f8d1 	bl	80077ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800064a:	003b      	movs	r3, r7
 800064c:	0018      	movs	r0, r3
 800064e:	2324      	movs	r3, #36	; 0x24
 8000650:	001a      	movs	r2, r3
 8000652:	2100      	movs	r1, #0
 8000654:	f007 f8ca 	bl	80077ec <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000658:	4b2b      	ldr	r3, [pc, #172]	; (8000708 <SystemClock_Config+0xe4>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a2b      	ldr	r2, [pc, #172]	; (800070c <SystemClock_Config+0xe8>)
 800065e:	401a      	ands	r2, r3
 8000660:	4b29      	ldr	r3, [pc, #164]	; (8000708 <SystemClock_Config+0xe4>)
 8000662:	2180      	movs	r1, #128	; 0x80
 8000664:	0109      	lsls	r1, r1, #4
 8000666:	430a      	orrs	r2, r1
 8000668:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800066a:	0021      	movs	r1, r4
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2222      	movs	r2, #34	; 0x22
 8000670:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2201      	movs	r2, #1
 8000676:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2210      	movs	r2, #16
 800067c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2201      	movs	r2, #1
 8000682:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2202      	movs	r2, #2
 8000688:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2200      	movs	r2, #0
 800068e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2280      	movs	r2, #128	; 0x80
 8000694:	02d2      	lsls	r2, r2, #11
 8000696:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2280      	movs	r2, #128	; 0x80
 800069c:	03d2      	lsls	r2, r2, #15
 800069e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	0018      	movs	r0, r3
 80006a4:	f002 f862 	bl	800276c <HAL_RCC_OscConfig>
 80006a8:	1e03      	subs	r3, r0, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006ac:	f000 f846 	bl	800073c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	2124      	movs	r1, #36	; 0x24
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	220f      	movs	r2, #15
 80006b6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2203      	movs	r2, #3
 80006bc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	2101      	movs	r1, #1
 80006d4:	0018      	movs	r0, r3
 80006d6:	f002 fc0d 	bl	8002ef4 <HAL_RCC_ClockConfig>
 80006da:	1e03      	subs	r3, r0, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80006de:	f000 f82d 	bl	800073c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80006e2:	003b      	movs	r3, r7
 80006e4:	2240      	movs	r2, #64	; 0x40
 80006e6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80006e8:	003b      	movs	r3, r7
 80006ea:	2280      	movs	r2, #128	; 0x80
 80006ec:	04d2      	lsls	r2, r2, #19
 80006ee:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f0:	003b      	movs	r3, r7
 80006f2:	0018      	movs	r0, r3
 80006f4:	f002 fdec 	bl	80032d0 <HAL_RCCEx_PeriphCLKConfig>
 80006f8:	1e03      	subs	r3, r0, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80006fc:	f000 f81e 	bl	800073c <Error_Handler>
  }
}
 8000700:	46c0      	nop			; (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	b01d      	add	sp, #116	; 0x74
 8000706:	bd90      	pop	{r4, r7, pc}
 8000708:	40007000 	.word	0x40007000
 800070c:	ffffe7ff 	.word	0xffffe7ff

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <MX_GPIO_Init+0x28>)
 8000718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800071a:	4b07      	ldr	r3, [pc, #28]	; (8000738 <MX_GPIO_Init+0x28>)
 800071c:	2101      	movs	r1, #1
 800071e:	430a      	orrs	r2, r1
 8000720:	62da      	str	r2, [r3, #44]	; 0x2c
 8000722:	4b05      	ldr	r3, [pc, #20]	; (8000738 <MX_GPIO_Init+0x28>)
 8000724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000726:	2201      	movs	r2, #1
 8000728:	4013      	ands	r3, r2
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	b002      	add	sp, #8
 8000734:	bd80      	pop	{r7, pc}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	40021000 	.word	0x40021000

0800073c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000740:	b672      	cpsid	i
}
 8000742:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000744:	e7fe      	b.n	8000744 <Error_Handler+0x8>
	...

08000748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <HAL_MspInit+0x24>)
 800074e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <HAL_MspInit+0x24>)
 8000752:	2101      	movs	r1, #1
 8000754:	430a      	orrs	r2, r1
 8000756:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000758:	4b04      	ldr	r3, [pc, #16]	; (800076c <HAL_MspInit+0x24>)
 800075a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800075c:	4b03      	ldr	r3, [pc, #12]	; (800076c <HAL_MspInit+0x24>)
 800075e:	2180      	movs	r1, #128	; 0x80
 8000760:	0549      	lsls	r1, r1, #21
 8000762:	430a      	orrs	r2, r1
 8000764:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40021000 	.word	0x40021000

08000770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <NMI_Handler+0x4>

08000776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077a:	e7fe      	b.n	800077a <HardFault_Handler+0x4>

0800077c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000794:	f000 f894 	bl	80008c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000798:	46c0      	nop			; (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
	...

080007a0 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80007a4:	4b03      	ldr	r3, [pc, #12]	; (80007b4 <USB_IRQHandler+0x14>)
 80007a6:	0018      	movs	r0, r3
 80007a8:	f000 face 	bl	8000d48 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80007ac:	46c0      	nop			; (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	200006ac 	.word	0x200006ac

080007b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007bc:	46c0      	nop			; (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80007c4:	480d      	ldr	r0, [pc, #52]	; (80007fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007c6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007c8:	f7ff fff6 	bl	80007b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007cc:	480c      	ldr	r0, [pc, #48]	; (8000800 <LoopForever+0x6>)
  ldr r1, =_edata
 80007ce:	490d      	ldr	r1, [pc, #52]	; (8000804 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007d0:	4a0d      	ldr	r2, [pc, #52]	; (8000808 <LoopForever+0xe>)
  movs r3, #0
 80007d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d4:	e002      	b.n	80007dc <LoopCopyDataInit>

080007d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007da:	3304      	adds	r3, #4

080007dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e0:	d3f9      	bcc.n	80007d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007e2:	4a0a      	ldr	r2, [pc, #40]	; (800080c <LoopForever+0x12>)
  ldr r4, =_ebss
 80007e4:	4c0a      	ldr	r4, [pc, #40]	; (8000810 <LoopForever+0x16>)
  movs r3, #0
 80007e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e8:	e001      	b.n	80007ee <LoopFillZerobss>

080007ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007ec:	3204      	adds	r2, #4

080007ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f0:	d3fb      	bcc.n	80007ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007f2:	f007 f803 	bl	80077fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007f6:	f7ff fef1 	bl	80005dc <main>

080007fa <LoopForever>:

LoopForever:
    b LoopForever
 80007fa:	e7fe      	b.n	80007fa <LoopForever>
  ldr   r0, =_estack
 80007fc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000804:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8000808:	08007938 	.word	0x08007938
  ldr r2, =_sbss
 800080c:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8000810:	200009b4 	.word	0x200009b4

08000814 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000814:	e7fe      	b.n	8000814 <ADC1_COMP_IRQHandler>
	...

08000818 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800081e:	1dfb      	adds	r3, r7, #7
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000824:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <HAL_Init+0x3c>)
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <HAL_Init+0x3c>)
 800082a:	2140      	movs	r1, #64	; 0x40
 800082c:	430a      	orrs	r2, r1
 800082e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000830:	2000      	movs	r0, #0
 8000832:	f000 f811 	bl	8000858 <HAL_InitTick>
 8000836:	1e03      	subs	r3, r0, #0
 8000838:	d003      	beq.n	8000842 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800083a:	1dfb      	adds	r3, r7, #7
 800083c:	2201      	movs	r2, #1
 800083e:	701a      	strb	r2, [r3, #0]
 8000840:	e001      	b.n	8000846 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000842:	f7ff ff81 	bl	8000748 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000846:	1dfb      	adds	r3, r7, #7
 8000848:	781b      	ldrb	r3, [r3, #0]
}
 800084a:	0018      	movs	r0, r3
 800084c:	46bd      	mov	sp, r7
 800084e:	b002      	add	sp, #8
 8000850:	bd80      	pop	{r7, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	40022000 	.word	0x40022000

08000858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <HAL_InitTick+0x5c>)
 8000862:	681c      	ldr	r4, [r3, #0]
 8000864:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <HAL_InitTick+0x60>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	0019      	movs	r1, r3
 800086a:	23fa      	movs	r3, #250	; 0xfa
 800086c:	0098      	lsls	r0, r3, #2
 800086e:	f7ff fc53 	bl	8000118 <__udivsi3>
 8000872:	0003      	movs	r3, r0
 8000874:	0019      	movs	r1, r3
 8000876:	0020      	movs	r0, r4
 8000878:	f7ff fc4e 	bl	8000118 <__udivsi3>
 800087c:	0003      	movs	r3, r0
 800087e:	0018      	movs	r0, r3
 8000880:	f000 f92f 	bl	8000ae2 <HAL_SYSTICK_Config>
 8000884:	1e03      	subs	r3, r0, #0
 8000886:	d001      	beq.n	800088c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000888:	2301      	movs	r3, #1
 800088a:	e00f      	b.n	80008ac <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2b03      	cmp	r3, #3
 8000890:	d80b      	bhi.n	80008aa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000892:	6879      	ldr	r1, [r7, #4]
 8000894:	2301      	movs	r3, #1
 8000896:	425b      	negs	r3, r3
 8000898:	2200      	movs	r2, #0
 800089a:	0018      	movs	r0, r3
 800089c:	f000 f8fc 	bl	8000a98 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <HAL_InitTick+0x64>)
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008a6:	2300      	movs	r3, #0
 80008a8:	e000      	b.n	80008ac <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008aa:	2301      	movs	r3, #1
}
 80008ac:	0018      	movs	r0, r3
 80008ae:	46bd      	mov	sp, r7
 80008b0:	b003      	add	sp, #12
 80008b2:	bd90      	pop	{r4, r7, pc}
 80008b4:	20000000 	.word	0x20000000
 80008b8:	20000008 	.word	0x20000008
 80008bc:	20000004 	.word	0x20000004

080008c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c4:	4b05      	ldr	r3, [pc, #20]	; (80008dc <HAL_IncTick+0x1c>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	001a      	movs	r2, r3
 80008ca:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <HAL_IncTick+0x20>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	18d2      	adds	r2, r2, r3
 80008d0:	4b03      	ldr	r3, [pc, #12]	; (80008e0 <HAL_IncTick+0x20>)
 80008d2:	601a      	str	r2, [r3, #0]
}
 80008d4:	46c0      	nop			; (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	20000008 	.word	0x20000008
 80008e0:	200001e0 	.word	0x200001e0

080008e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  return uwTick;
 80008e8:	4b02      	ldr	r3, [pc, #8]	; (80008f4 <HAL_GetTick+0x10>)
 80008ea:	681b      	ldr	r3, [r3, #0]
}
 80008ec:	0018      	movs	r0, r3
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	200001e0 	.word	0x200001e0

080008f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000900:	f7ff fff0 	bl	80008e4 <HAL_GetTick>
 8000904:	0003      	movs	r3, r0
 8000906:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	3301      	adds	r3, #1
 8000910:	d005      	beq.n	800091e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000912:	4b0a      	ldr	r3, [pc, #40]	; (800093c <HAL_Delay+0x44>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	001a      	movs	r2, r3
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	189b      	adds	r3, r3, r2
 800091c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	f7ff ffe0 	bl	80008e4 <HAL_GetTick>
 8000924:	0002      	movs	r2, r0
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	68fa      	ldr	r2, [r7, #12]
 800092c:	429a      	cmp	r2, r3
 800092e:	d8f7      	bhi.n	8000920 <HAL_Delay+0x28>
  {
  }
}
 8000930:	46c0      	nop			; (mov r8, r8)
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	46bd      	mov	sp, r7
 8000936:	b004      	add	sp, #16
 8000938:	bd80      	pop	{r7, pc}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	20000008 	.word	0x20000008

08000940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	0002      	movs	r2, r0
 8000948:	1dfb      	adds	r3, r7, #7
 800094a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800094c:	1dfb      	adds	r3, r7, #7
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b7f      	cmp	r3, #127	; 0x7f
 8000952:	d809      	bhi.n	8000968 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000954:	1dfb      	adds	r3, r7, #7
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	001a      	movs	r2, r3
 800095a:	231f      	movs	r3, #31
 800095c:	401a      	ands	r2, r3
 800095e:	4b04      	ldr	r3, [pc, #16]	; (8000970 <__NVIC_EnableIRQ+0x30>)
 8000960:	2101      	movs	r1, #1
 8000962:	4091      	lsls	r1, r2
 8000964:	000a      	movs	r2, r1
 8000966:	601a      	str	r2, [r3, #0]
  }
}
 8000968:	46c0      	nop			; (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	b002      	add	sp, #8
 800096e:	bd80      	pop	{r7, pc}
 8000970:	e000e100 	.word	0xe000e100

08000974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000974:	b590      	push	{r4, r7, lr}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	0002      	movs	r2, r0
 800097c:	6039      	str	r1, [r7, #0]
 800097e:	1dfb      	adds	r3, r7, #7
 8000980:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000982:	1dfb      	adds	r3, r7, #7
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b7f      	cmp	r3, #127	; 0x7f
 8000988:	d828      	bhi.n	80009dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800098a:	4a2f      	ldr	r2, [pc, #188]	; (8000a48 <__NVIC_SetPriority+0xd4>)
 800098c:	1dfb      	adds	r3, r7, #7
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	b25b      	sxtb	r3, r3
 8000992:	089b      	lsrs	r3, r3, #2
 8000994:	33c0      	adds	r3, #192	; 0xc0
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	589b      	ldr	r3, [r3, r2]
 800099a:	1dfa      	adds	r2, r7, #7
 800099c:	7812      	ldrb	r2, [r2, #0]
 800099e:	0011      	movs	r1, r2
 80009a0:	2203      	movs	r2, #3
 80009a2:	400a      	ands	r2, r1
 80009a4:	00d2      	lsls	r2, r2, #3
 80009a6:	21ff      	movs	r1, #255	; 0xff
 80009a8:	4091      	lsls	r1, r2
 80009aa:	000a      	movs	r2, r1
 80009ac:	43d2      	mvns	r2, r2
 80009ae:	401a      	ands	r2, r3
 80009b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	019b      	lsls	r3, r3, #6
 80009b6:	22ff      	movs	r2, #255	; 0xff
 80009b8:	401a      	ands	r2, r3
 80009ba:	1dfb      	adds	r3, r7, #7
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	0018      	movs	r0, r3
 80009c0:	2303      	movs	r3, #3
 80009c2:	4003      	ands	r3, r0
 80009c4:	00db      	lsls	r3, r3, #3
 80009c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009c8:	481f      	ldr	r0, [pc, #124]	; (8000a48 <__NVIC_SetPriority+0xd4>)
 80009ca:	1dfb      	adds	r3, r7, #7
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b25b      	sxtb	r3, r3
 80009d0:	089b      	lsrs	r3, r3, #2
 80009d2:	430a      	orrs	r2, r1
 80009d4:	33c0      	adds	r3, #192	; 0xc0
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009da:	e031      	b.n	8000a40 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009dc:	4a1b      	ldr	r2, [pc, #108]	; (8000a4c <__NVIC_SetPriority+0xd8>)
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	0019      	movs	r1, r3
 80009e4:	230f      	movs	r3, #15
 80009e6:	400b      	ands	r3, r1
 80009e8:	3b08      	subs	r3, #8
 80009ea:	089b      	lsrs	r3, r3, #2
 80009ec:	3306      	adds	r3, #6
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	18d3      	adds	r3, r2, r3
 80009f2:	3304      	adds	r3, #4
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	1dfa      	adds	r2, r7, #7
 80009f8:	7812      	ldrb	r2, [r2, #0]
 80009fa:	0011      	movs	r1, r2
 80009fc:	2203      	movs	r2, #3
 80009fe:	400a      	ands	r2, r1
 8000a00:	00d2      	lsls	r2, r2, #3
 8000a02:	21ff      	movs	r1, #255	; 0xff
 8000a04:	4091      	lsls	r1, r2
 8000a06:	000a      	movs	r2, r1
 8000a08:	43d2      	mvns	r2, r2
 8000a0a:	401a      	ands	r2, r3
 8000a0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	019b      	lsls	r3, r3, #6
 8000a12:	22ff      	movs	r2, #255	; 0xff
 8000a14:	401a      	ands	r2, r3
 8000a16:	1dfb      	adds	r3, r7, #7
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	4003      	ands	r3, r0
 8000a20:	00db      	lsls	r3, r3, #3
 8000a22:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a24:	4809      	ldr	r0, [pc, #36]	; (8000a4c <__NVIC_SetPriority+0xd8>)
 8000a26:	1dfb      	adds	r3, r7, #7
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	001c      	movs	r4, r3
 8000a2c:	230f      	movs	r3, #15
 8000a2e:	4023      	ands	r3, r4
 8000a30:	3b08      	subs	r3, #8
 8000a32:	089b      	lsrs	r3, r3, #2
 8000a34:	430a      	orrs	r2, r1
 8000a36:	3306      	adds	r3, #6
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	18c3      	adds	r3, r0, r3
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	601a      	str	r2, [r3, #0]
}
 8000a40:	46c0      	nop			; (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	b003      	add	sp, #12
 8000a46:	bd90      	pop	{r4, r7, pc}
 8000a48:	e000e100 	.word	0xe000e100
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	1e5a      	subs	r2, r3, #1
 8000a5c:	2380      	movs	r3, #128	; 0x80
 8000a5e:	045b      	lsls	r3, r3, #17
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d301      	bcc.n	8000a68 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a64:	2301      	movs	r3, #1
 8000a66:	e010      	b.n	8000a8a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a68:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <SysTick_Config+0x44>)
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	3a01      	subs	r2, #1
 8000a6e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a70:	2301      	movs	r3, #1
 8000a72:	425b      	negs	r3, r3
 8000a74:	2103      	movs	r1, #3
 8000a76:	0018      	movs	r0, r3
 8000a78:	f7ff ff7c 	bl	8000974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <SysTick_Config+0x44>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a82:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <SysTick_Config+0x44>)
 8000a84:	2207      	movs	r2, #7
 8000a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b002      	add	sp, #8
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	e000e010 	.word	0xe000e010

08000a98 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60b9      	str	r1, [r7, #8]
 8000aa0:	607a      	str	r2, [r7, #4]
 8000aa2:	210f      	movs	r1, #15
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	1c02      	adds	r2, r0, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	b25b      	sxtb	r3, r3
 8000ab2:	0011      	movs	r1, r2
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f7ff ff5d 	bl	8000974 <__NVIC_SetPriority>
}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	46bd      	mov	sp, r7
 8000abe:	b004      	add	sp, #16
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b082      	sub	sp, #8
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	0002      	movs	r2, r0
 8000aca:	1dfb      	adds	r3, r7, #7
 8000acc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ace:	1dfb      	adds	r3, r7, #7
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	b25b      	sxtb	r3, r3
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f7ff ff33 	bl	8000940 <__NVIC_EnableIRQ>
}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b002      	add	sp, #8
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b082      	sub	sp, #8
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	0018      	movs	r0, r3
 8000aee:	f7ff ffaf 	bl	8000a50 <SysTick_Config>
 8000af2:	0003      	movs	r3, r0
}
 8000af4:	0018      	movs	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	b002      	add	sp, #8
 8000afa:	bd80      	pop	{r7, pc}

08000afc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000afe:	b08b      	sub	sp, #44	; 0x2c
 8000b00:	af06      	add	r7, sp, #24
 8000b02:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d101      	bne.n	8000b0e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e0f0      	b.n	8000cf0 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a79      	ldr	r2, [pc, #484]	; (8000cf8 <HAL_PCD_Init+0x1fc>)
 8000b12:	5c9b      	ldrb	r3, [r3, r2]
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d108      	bne.n	8000b2c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	23aa      	movs	r3, #170	; 0xaa
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	2100      	movs	r1, #0
 8000b22:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	0018      	movs	r0, r3
 8000b28:	f006 fb34 	bl	8007194 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a72      	ldr	r2, [pc, #456]	; (8000cf8 <HAL_PCD_Init+0x1fc>)
 8000b30:	2103      	movs	r1, #3
 8000b32:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f002 fd6d 	bl	8003618 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b3e:	230f      	movs	r3, #15
 8000b40:	18fb      	adds	r3, r7, r3
 8000b42:	2200      	movs	r2, #0
 8000b44:	701a      	strb	r2, [r3, #0]
 8000b46:	e049      	b.n	8000bdc <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000b48:	200f      	movs	r0, #15
 8000b4a:	183b      	adds	r3, r7, r0
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	1c5a      	adds	r2, r3, #1
 8000b52:	0013      	movs	r3, r2
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	189b      	adds	r3, r3, r2
 8000b58:	00db      	lsls	r3, r3, #3
 8000b5a:	18cb      	adds	r3, r1, r3
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	2201      	movs	r2, #1
 8000b60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000b62:	183b      	adds	r3, r7, r0
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	6879      	ldr	r1, [r7, #4]
 8000b68:	1c5a      	adds	r2, r3, #1
 8000b6a:	0013      	movs	r3, r2
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	189b      	adds	r3, r3, r2
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	183a      	adds	r2, r7, r0
 8000b74:	7812      	ldrb	r2, [r2, #0]
 8000b76:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000b78:	183b      	adds	r3, r7, r0
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	6879      	ldr	r1, [r7, #4]
 8000b7e:	1c5a      	adds	r2, r3, #1
 8000b80:	0013      	movs	r3, r2
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	189b      	adds	r3, r3, r2
 8000b86:	00db      	lsls	r3, r3, #3
 8000b88:	18cb      	adds	r3, r1, r3
 8000b8a:	3303      	adds	r3, #3
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000b90:	183b      	adds	r3, r7, r0
 8000b92:	781a      	ldrb	r2, [r3, #0]
 8000b94:	6879      	ldr	r1, [r7, #4]
 8000b96:	0013      	movs	r3, r2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	189b      	adds	r3, r3, r2
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	18cb      	adds	r3, r1, r3
 8000ba0:	3338      	adds	r3, #56	; 0x38
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ba6:	183b      	adds	r3, r7, r0
 8000ba8:	781a      	ldrb	r2, [r3, #0]
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	0013      	movs	r3, r2
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	189b      	adds	r3, r3, r2
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	18cb      	adds	r3, r1, r3
 8000bb6:	333c      	adds	r3, #60	; 0x3c
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000bbc:	183b      	adds	r3, r7, r0
 8000bbe:	781a      	ldrb	r2, [r3, #0]
 8000bc0:	6879      	ldr	r1, [r7, #4]
 8000bc2:	0013      	movs	r3, r2
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	189b      	adds	r3, r3, r2
 8000bc8:	00db      	lsls	r3, r3, #3
 8000bca:	18cb      	adds	r3, r1, r3
 8000bcc:	3340      	adds	r3, #64	; 0x40
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bd2:	183b      	adds	r3, r7, r0
 8000bd4:	781a      	ldrb	r2, [r3, #0]
 8000bd6:	183b      	adds	r3, r7, r0
 8000bd8:	3201      	adds	r2, #1
 8000bda:	701a      	strb	r2, [r3, #0]
 8000bdc:	210f      	movs	r1, #15
 8000bde:	187b      	adds	r3, r7, r1
 8000be0:	781a      	ldrb	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d3ae      	bcc.n	8000b48 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	2200      	movs	r2, #0
 8000bee:	701a      	strb	r2, [r3, #0]
 8000bf0:	e056      	b.n	8000ca0 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000bf2:	240f      	movs	r4, #15
 8000bf4:	193b      	adds	r3, r7, r4
 8000bf6:	781a      	ldrb	r2, [r3, #0]
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	236a      	movs	r3, #106	; 0x6a
 8000bfc:	33ff      	adds	r3, #255	; 0xff
 8000bfe:	0019      	movs	r1, r3
 8000c00:	0013      	movs	r3, r2
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	189b      	adds	r3, r3, r2
 8000c06:	00db      	lsls	r3, r3, #3
 8000c08:	18c3      	adds	r3, r0, r3
 8000c0a:	185b      	adds	r3, r3, r1
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000c10:	193b      	adds	r3, r7, r4
 8000c12:	781a      	ldrb	r2, [r3, #0]
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	23b4      	movs	r3, #180	; 0xb4
 8000c18:	0059      	lsls	r1, r3, #1
 8000c1a:	0013      	movs	r3, r2
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	189b      	adds	r3, r3, r2
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	18c3      	adds	r3, r0, r3
 8000c24:	185b      	adds	r3, r3, r1
 8000c26:	193a      	adds	r2, r7, r4
 8000c28:	7812      	ldrb	r2, [r2, #0]
 8000c2a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000c2c:	193b      	adds	r3, r7, r4
 8000c2e:	781a      	ldrb	r2, [r3, #0]
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	236c      	movs	r3, #108	; 0x6c
 8000c34:	33ff      	adds	r3, #255	; 0xff
 8000c36:	0019      	movs	r1, r3
 8000c38:	0013      	movs	r3, r2
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	189b      	adds	r3, r3, r2
 8000c3e:	00db      	lsls	r3, r3, #3
 8000c40:	18c3      	adds	r3, r0, r3
 8000c42:	185b      	adds	r3, r3, r1
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000c48:	193b      	adds	r3, r7, r4
 8000c4a:	781a      	ldrb	r2, [r3, #0]
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	23bc      	movs	r3, #188	; 0xbc
 8000c50:	0059      	lsls	r1, r3, #1
 8000c52:	0013      	movs	r3, r2
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	189b      	adds	r3, r3, r2
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	18c3      	adds	r3, r0, r3
 8000c5c:	185b      	adds	r3, r3, r1
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000c62:	193b      	adds	r3, r7, r4
 8000c64:	781a      	ldrb	r2, [r3, #0]
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	23be      	movs	r3, #190	; 0xbe
 8000c6a:	0059      	lsls	r1, r3, #1
 8000c6c:	0013      	movs	r3, r2
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	189b      	adds	r3, r3, r2
 8000c72:	00db      	lsls	r3, r3, #3
 8000c74:	18c3      	adds	r3, r0, r3
 8000c76:	185b      	adds	r3, r3, r1
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000c7c:	193b      	adds	r3, r7, r4
 8000c7e:	781a      	ldrb	r2, [r3, #0]
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	23c0      	movs	r3, #192	; 0xc0
 8000c84:	0059      	lsls	r1, r3, #1
 8000c86:	0013      	movs	r3, r2
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	189b      	adds	r3, r3, r2
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	18c3      	adds	r3, r0, r3
 8000c90:	185b      	adds	r3, r3, r1
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c96:	193b      	adds	r3, r7, r4
 8000c98:	781a      	ldrb	r2, [r3, #0]
 8000c9a:	193b      	adds	r3, r7, r4
 8000c9c:	3201      	adds	r2, #1
 8000c9e:	701a      	strb	r2, [r3, #0]
 8000ca0:	230f      	movs	r3, #15
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	781a      	ldrb	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d3a1      	bcc.n	8000bf2 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6818      	ldr	r0, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	466a      	mov	r2, sp
 8000cb6:	0011      	movs	r1, r2
 8000cb8:	001a      	movs	r2, r3
 8000cba:	3210      	adds	r2, #16
 8000cbc:	ca70      	ldmia	r2!, {r4, r5, r6}
 8000cbe:	c170      	stmia	r1!, {r4, r5, r6}
 8000cc0:	ca30      	ldmia	r2!, {r4, r5}
 8000cc2:	c130      	stmia	r1!, {r4, r5}
 8000cc4:	6859      	ldr	r1, [r3, #4]
 8000cc6:	689a      	ldr	r2, [r3, #8]
 8000cc8:	68db      	ldr	r3, [r3, #12]
 8000cca:	f002 fcbf 	bl	800364c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2224      	movs	r2, #36	; 0x24
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a07      	ldr	r2, [pc, #28]	; (8000cf8 <HAL_PCD_Init+0x1fc>)
 8000cda:	2101      	movs	r1, #1
 8000cdc:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	69db      	ldr	r3, [r3, #28]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d103      	bne.n	8000cee <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f001 fd09 	bl	8002700 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000cee:	2300      	movs	r3, #0
}
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	b005      	add	sp, #20
 8000cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cf8:	000002a9 	.word	0x000002a9

08000cfc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	23aa      	movs	r3, #170	; 0xaa
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	5cd3      	ldrb	r3, [r2, r3]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d101      	bne.n	8000d14 <HAL_PCD_Start+0x18>
 8000d10:	2302      	movs	r3, #2
 8000d12:	e014      	b.n	8000d3e <HAL_PCD_Start+0x42>
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	23aa      	movs	r3, #170	; 0xaa
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	0018      	movs	r0, r3
 8000d24:	f002 fc62 	bl	80035ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f004 fc65 	bl	80055fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	23aa      	movs	r3, #170	; 0xaa
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	2100      	movs	r1, #0
 8000d3a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	0018      	movs	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	b002      	add	sp, #8
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	0018      	movs	r0, r3
 8000d56:	f004 fc67 	bl	8005628 <USB_ReadInterrupts>
 8000d5a:	0003      	movs	r3, r0
 8000d5c:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	2380      	movs	r3, #128	; 0x80
 8000d62:	021b      	lsls	r3, r3, #8
 8000d64:	4013      	ands	r3, r2
 8000d66:	d004      	beq.n	8000d72 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f000 fb48 	bl	8001400 <PCD_EP_ISR_Handler>

    return;
 8000d70:	e11d      	b.n	8000fae <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	2380      	movs	r3, #128	; 0x80
 8000d76:	00db      	lsls	r3, r3, #3
 8000d78:	4013      	ands	r3, r2
 8000d7a:	d015      	beq.n	8000da8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2244      	movs	r2, #68	; 0x44
 8000d82:	5a9b      	ldrh	r3, [r3, r2]
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	498a      	ldr	r1, [pc, #552]	; (8000fb4 <HAL_PCD_IRQHandler+0x26c>)
 8000d8c:	400a      	ands	r2, r1
 8000d8e:	b291      	uxth	r1, r2
 8000d90:	2244      	movs	r2, #68	; 0x44
 8000d92:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	0018      	movs	r0, r3
 8000d98:	f006 fa7f 	bl	800729a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2100      	movs	r1, #0
 8000da0:	0018      	movs	r0, r3
 8000da2:	f000 f915 	bl	8000fd0 <HAL_PCD_SetAddress>

    return;
 8000da6:	e102      	b.n	8000fae <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000da8:	68fa      	ldr	r2, [r7, #12]
 8000daa:	2380      	movs	r3, #128	; 0x80
 8000dac:	01db      	lsls	r3, r3, #7
 8000dae:	4013      	ands	r3, r2
 8000db0:	d00c      	beq.n	8000dcc <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2244      	movs	r2, #68	; 0x44
 8000db8:	5a9b      	ldrh	r3, [r3, r2]
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	497d      	ldr	r1, [pc, #500]	; (8000fb8 <HAL_PCD_IRQHandler+0x270>)
 8000dc2:	400a      	ands	r2, r1
 8000dc4:	b291      	uxth	r1, r2
 8000dc6:	2244      	movs	r2, #68	; 0x44
 8000dc8:	5299      	strh	r1, [r3, r2]

    return;
 8000dca:	e0f0      	b.n	8000fae <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000dcc:	68fa      	ldr	r2, [r7, #12]
 8000dce:	2380      	movs	r3, #128	; 0x80
 8000dd0:	019b      	lsls	r3, r3, #6
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	d00c      	beq.n	8000df0 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2244      	movs	r2, #68	; 0x44
 8000ddc:	5a9b      	ldrh	r3, [r3, r2]
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4975      	ldr	r1, [pc, #468]	; (8000fbc <HAL_PCD_IRQHandler+0x274>)
 8000de6:	400a      	ands	r2, r1
 8000de8:	b291      	uxth	r1, r2
 8000dea:	2244      	movs	r2, #68	; 0x44
 8000dec:	5299      	strh	r1, [r3, r2]

    return;
 8000dee:	e0de      	b.n	8000fae <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000df0:	68fa      	ldr	r2, [r7, #12]
 8000df2:	2380      	movs	r3, #128	; 0x80
 8000df4:	015b      	lsls	r3, r3, #5
 8000df6:	4013      	ands	r3, r2
 8000df8:	d038      	beq.n	8000e6c <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2240      	movs	r2, #64	; 0x40
 8000e00:	5a9b      	ldrh	r3, [r3, r2]
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2104      	movs	r1, #4
 8000e0a:	438a      	bics	r2, r1
 8000e0c:	b291      	uxth	r1, r2
 8000e0e:	2240      	movs	r2, #64	; 0x40
 8000e10:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2240      	movs	r2, #64	; 0x40
 8000e18:	5a9b      	ldrh	r3, [r3, r2]
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2108      	movs	r1, #8
 8000e22:	438a      	bics	r2, r1
 8000e24:	b291      	uxth	r1, r2
 8000e26:	2240      	movs	r2, #64	; 0x40
 8000e28:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	23b8      	movs	r3, #184	; 0xb8
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	5cd3      	ldrb	r3, [r2, r3]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d109      	bne.n	8000e4a <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	23b8      	movs	r3, #184	; 0xb8
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2100      	movs	r1, #0
 8000e44:	0018      	movs	r0, r3
 8000e46:	f001 fc85 	bl	8002754 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f006 fa65 	bl	800731c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2244      	movs	r2, #68	; 0x44
 8000e58:	5a9b      	ldrh	r3, [r3, r2]
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4957      	ldr	r1, [pc, #348]	; (8000fc0 <HAL_PCD_IRQHandler+0x278>)
 8000e62:	400a      	ands	r2, r1
 8000e64:	b291      	uxth	r1, r2
 8000e66:	2244      	movs	r2, #68	; 0x44
 8000e68:	5299      	strh	r1, [r3, r2]

    return;
 8000e6a:	e0a0      	b.n	8000fae <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	2380      	movs	r3, #128	; 0x80
 8000e70:	011b      	lsls	r3, r3, #4
 8000e72:	4013      	ands	r3, r2
 8000e74:	d028      	beq.n	8000ec8 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2240      	movs	r2, #64	; 0x40
 8000e7c:	5a9b      	ldrh	r3, [r3, r2]
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2108      	movs	r1, #8
 8000e86:	430a      	orrs	r2, r1
 8000e88:	b291      	uxth	r1, r2
 8000e8a:	2240      	movs	r2, #64	; 0x40
 8000e8c:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2244      	movs	r2, #68	; 0x44
 8000e94:	5a9b      	ldrh	r3, [r3, r2]
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4949      	ldr	r1, [pc, #292]	; (8000fc4 <HAL_PCD_IRQHandler+0x27c>)
 8000e9e:	400a      	ands	r2, r1
 8000ea0:	b291      	uxth	r1, r2
 8000ea2:	2244      	movs	r2, #68	; 0x44
 8000ea4:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2240      	movs	r2, #64	; 0x40
 8000eac:	5a9b      	ldrh	r3, [r3, r2]
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2104      	movs	r1, #4
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	b291      	uxth	r1, r2
 8000eba:	2240      	movs	r2, #64	; 0x40
 8000ebc:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f006 fa0f 	bl	80072e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000ec6:	e072      	b.n	8000fae <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2280      	movs	r2, #128	; 0x80
 8000ecc:	4013      	ands	r3, r2
 8000ece:	d046      	beq.n	8000f5e <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2244      	movs	r2, #68	; 0x44
 8000ed6:	5a9b      	ldrh	r3, [r3, r2]
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2180      	movs	r1, #128	; 0x80
 8000ee0:	438a      	bics	r2, r1
 8000ee2:	b291      	uxth	r1, r2
 8000ee4:	2244      	movs	r2, #68	; 0x44
 8000ee6:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	23b8      	movs	r3, #184	; 0xb8
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	5cd3      	ldrb	r3, [r2, r3]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d12f      	bne.n	8000f54 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2240      	movs	r2, #64	; 0x40
 8000efa:	5a9b      	ldrh	r3, [r3, r2]
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2104      	movs	r1, #4
 8000f04:	430a      	orrs	r2, r1
 8000f06:	b291      	uxth	r1, r2
 8000f08:	2240      	movs	r2, #64	; 0x40
 8000f0a:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2240      	movs	r2, #64	; 0x40
 8000f12:	5a9b      	ldrh	r3, [r3, r2]
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2108      	movs	r1, #8
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	b291      	uxth	r1, r2
 8000f20:	2240      	movs	r2, #64	; 0x40
 8000f22:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	23b8      	movs	r3, #184	; 0xb8
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2254      	movs	r2, #84	; 0x54
 8000f34:	5a9b      	ldrh	r3, [r3, r2]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	089b      	lsrs	r3, r3, #2
 8000f3a:	223c      	movs	r2, #60	; 0x3c
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	0019      	movs	r1, r3
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	23b9      	movs	r3, #185	; 0xb9
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f001 fc01 	bl	8002754 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8000f52:	e02c      	b.n	8000fae <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	0018      	movs	r0, r3
 8000f58:	f006 f9c4 	bl	80072e4 <HAL_PCD_SuspendCallback>
    return;
 8000f5c:	e027      	b.n	8000fae <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000f5e:	68fa      	ldr	r2, [r7, #12]
 8000f60:	2380      	movs	r3, #128	; 0x80
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	4013      	ands	r3, r2
 8000f66:	d010      	beq.n	8000f8a <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2244      	movs	r2, #68	; 0x44
 8000f6e:	5a9b      	ldrh	r3, [r3, r2]
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4914      	ldr	r1, [pc, #80]	; (8000fc8 <HAL_PCD_IRQHandler+0x280>)
 8000f78:	400a      	ands	r2, r1
 8000f7a:	b291      	uxth	r1, r2
 8000f7c:	2244      	movs	r2, #68	; 0x44
 8000f7e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	0018      	movs	r0, r3
 8000f84:	f006 f97a 	bl	800727c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000f88:	e011      	b.n	8000fae <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	2380      	movs	r3, #128	; 0x80
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	4013      	ands	r3, r2
 8000f92:	d00c      	beq.n	8000fae <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2244      	movs	r2, #68	; 0x44
 8000f9a:	5a9b      	ldrh	r3, [r3, r2]
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	490a      	ldr	r1, [pc, #40]	; (8000fcc <HAL_PCD_IRQHandler+0x284>)
 8000fa4:	400a      	ands	r2, r1
 8000fa6:	b291      	uxth	r1, r2
 8000fa8:	2244      	movs	r2, #68	; 0x44
 8000faa:	5299      	strh	r1, [r3, r2]

    return;
 8000fac:	46c0      	nop			; (mov r8, r8)
  }
}
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b004      	add	sp, #16
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	fffffbff 	.word	0xfffffbff
 8000fb8:	ffffbfff 	.word	0xffffbfff
 8000fbc:	ffffdfff 	.word	0xffffdfff
 8000fc0:	ffffefff 	.word	0xffffefff
 8000fc4:	fffff7ff 	.word	0xfffff7ff
 8000fc8:	fffffdff 	.word	0xfffffdff
 8000fcc:	fffffeff 	.word	0xfffffeff

08000fd0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	000a      	movs	r2, r1
 8000fda:	1cfb      	adds	r3, r7, #3
 8000fdc:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	23aa      	movs	r3, #170	; 0xaa
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	5cd3      	ldrb	r3, [r2, r3]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d101      	bne.n	8000fee <HAL_PCD_SetAddress+0x1e>
 8000fea:	2302      	movs	r3, #2
 8000fec:	e017      	b.n	800101e <HAL_PCD_SetAddress+0x4e>
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	23aa      	movs	r3, #170	; 0xaa
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	1cfa      	adds	r2, r7, #3
 8000ffc:	2124      	movs	r1, #36	; 0x24
 8000ffe:	7812      	ldrb	r2, [r2, #0]
 8001000:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	1cfb      	adds	r3, r7, #3
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	0019      	movs	r1, r3
 800100c:	0010      	movs	r0, r2
 800100e:	f004 fae1 	bl	80055d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	23aa      	movs	r3, #170	; 0xaa
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	2100      	movs	r1, #0
 800101a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800101c:	2300      	movs	r3, #0
}
 800101e:	0018      	movs	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	b002      	add	sp, #8
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001026:	b590      	push	{r4, r7, lr}
 8001028:	b085      	sub	sp, #20
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	000c      	movs	r4, r1
 8001030:	0010      	movs	r0, r2
 8001032:	0019      	movs	r1, r3
 8001034:	1cfb      	adds	r3, r7, #3
 8001036:	1c22      	adds	r2, r4, #0
 8001038:	701a      	strb	r2, [r3, #0]
 800103a:	003b      	movs	r3, r7
 800103c:	1c02      	adds	r2, r0, #0
 800103e:	801a      	strh	r2, [r3, #0]
 8001040:	1cbb      	adds	r3, r7, #2
 8001042:	1c0a      	adds	r2, r1, #0
 8001044:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001046:	230b      	movs	r3, #11
 8001048:	18fb      	adds	r3, r7, r3
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800104e:	1cfb      	adds	r3, r7, #3
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	b25b      	sxtb	r3, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	da0f      	bge.n	8001078 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001058:	1cfb      	adds	r3, r7, #3
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2207      	movs	r2, #7
 800105e:	4013      	ands	r3, r2
 8001060:	1c5a      	adds	r2, r3, #1
 8001062:	0013      	movs	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	189b      	adds	r3, r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	18d3      	adds	r3, r2, r3
 800106e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2201      	movs	r2, #1
 8001074:	705a      	strb	r2, [r3, #1]
 8001076:	e00f      	b.n	8001098 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001078:	1cfb      	adds	r3, r7, #3
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2207      	movs	r2, #7
 800107e:	401a      	ands	r2, r3
 8001080:	0013      	movs	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	189b      	adds	r3, r3, r2
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	3369      	adds	r3, #105	; 0x69
 800108a:	33ff      	adds	r3, #255	; 0xff
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	18d3      	adds	r3, r2, r3
 8001090:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2200      	movs	r2, #0
 8001096:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001098:	1cfb      	adds	r3, r7, #3
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2207      	movs	r2, #7
 800109e:	4013      	ands	r3, r2
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80010a6:	003b      	movs	r3, r7
 80010a8:	881a      	ldrh	r2, [r3, #0]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	1cba      	adds	r2, r7, #2
 80010b2:	7812      	ldrb	r2, [r2, #0]
 80010b4:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80010b6:	1cbb      	adds	r3, r7, #2
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d102      	bne.n	80010c4 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2200      	movs	r2, #0
 80010c2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	23aa      	movs	r3, #170	; 0xaa
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	5cd3      	ldrb	r3, [r2, r3]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d101      	bne.n	80010d4 <HAL_PCD_EP_Open+0xae>
 80010d0:	2302      	movs	r3, #2
 80010d2:	e013      	b.n	80010fc <HAL_PCD_EP_Open+0xd6>
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	23aa      	movs	r3, #170	; 0xaa
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	2101      	movs	r1, #1
 80010dc:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	0011      	movs	r1, r2
 80010e6:	0018      	movs	r0, r3
 80010e8:	f002 fad8 	bl	800369c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	23aa      	movs	r3, #170	; 0xaa
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	2100      	movs	r1, #0
 80010f4:	54d1      	strb	r1, [r2, r3]

  return ret;
 80010f6:	230b      	movs	r3, #11
 80010f8:	18fb      	adds	r3, r7, r3
 80010fa:	781b      	ldrb	r3, [r3, #0]
}
 80010fc:	0018      	movs	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	b005      	add	sp, #20
 8001102:	bd90      	pop	{r4, r7, pc}

08001104 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	000a      	movs	r2, r1
 800110e:	1cfb      	adds	r3, r7, #3
 8001110:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001112:	1cfb      	adds	r3, r7, #3
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	b25b      	sxtb	r3, r3
 8001118:	2b00      	cmp	r3, #0
 800111a:	da0f      	bge.n	800113c <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800111c:	1cfb      	adds	r3, r7, #3
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2207      	movs	r2, #7
 8001122:	4013      	ands	r3, r2
 8001124:	1c5a      	adds	r2, r3, #1
 8001126:	0013      	movs	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	189b      	adds	r3, r3, r2
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	18d3      	adds	r3, r2, r3
 8001132:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2201      	movs	r2, #1
 8001138:	705a      	strb	r2, [r3, #1]
 800113a:	e00f      	b.n	800115c <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800113c:	1cfb      	adds	r3, r7, #3
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2207      	movs	r2, #7
 8001142:	401a      	ands	r2, r3
 8001144:	0013      	movs	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	189b      	adds	r3, r3, r2
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	3369      	adds	r3, #105	; 0x69
 800114e:	33ff      	adds	r3, #255	; 0xff
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	18d3      	adds	r3, r2, r3
 8001154:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	2200      	movs	r2, #0
 800115a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800115c:	1cfb      	adds	r3, r7, #3
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2207      	movs	r2, #7
 8001162:	4013      	ands	r3, r2
 8001164:	b2da      	uxtb	r2, r3
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	23aa      	movs	r3, #170	; 0xaa
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	5cd3      	ldrb	r3, [r2, r3]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d101      	bne.n	800117a <HAL_PCD_EP_Close+0x76>
 8001176:	2302      	movs	r3, #2
 8001178:	e011      	b.n	800119e <HAL_PCD_EP_Close+0x9a>
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	23aa      	movs	r3, #170	; 0xaa
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	2101      	movs	r1, #1
 8001182:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	0011      	movs	r1, r2
 800118c:	0018      	movs	r0, r3
 800118e:	f002 fe27 	bl	8003de0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	23aa      	movs	r3, #170	; 0xaa
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	2100      	movs	r1, #0
 800119a:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	0018      	movs	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	b004      	add	sp, #16
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b086      	sub	sp, #24
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	60f8      	str	r0, [r7, #12]
 80011ae:	607a      	str	r2, [r7, #4]
 80011b0:	603b      	str	r3, [r7, #0]
 80011b2:	200b      	movs	r0, #11
 80011b4:	183b      	adds	r3, r7, r0
 80011b6:	1c0a      	adds	r2, r1, #0
 80011b8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011ba:	0001      	movs	r1, r0
 80011bc:	187b      	adds	r3, r7, r1
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2207      	movs	r2, #7
 80011c2:	401a      	ands	r2, r3
 80011c4:	0013      	movs	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	189b      	adds	r3, r3, r2
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	3369      	adds	r3, #105	; 0x69
 80011ce:	33ff      	adds	r3, #255	; 0xff
 80011d0:	68fa      	ldr	r2, [r7, #12]
 80011d2:	18d3      	adds	r3, r2, r3
 80011d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	2200      	movs	r2, #0
 80011e6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	2200      	movs	r2, #0
 80011ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80011ee:	187b      	adds	r3, r7, r1
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2207      	movs	r2, #7
 80011f4:	4013      	ands	r3, r2
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	0011      	movs	r1, r2
 8001204:	0018      	movs	r0, r3
 8001206:	f002 ffab 	bl	8004160 <USB_EPStartXfer>

  return HAL_OK;
 800120a:	2300      	movs	r3, #0
}
 800120c:	0018      	movs	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	b006      	add	sp, #24
 8001212:	bd80      	pop	{r7, pc}

08001214 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	607a      	str	r2, [r7, #4]
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	200b      	movs	r0, #11
 8001222:	183b      	adds	r3, r7, r0
 8001224:	1c0a      	adds	r2, r1, #0
 8001226:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001228:	183b      	adds	r3, r7, r0
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2207      	movs	r2, #7
 800122e:	4013      	ands	r3, r2
 8001230:	1c5a      	adds	r2, r3, #1
 8001232:	0013      	movs	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	189b      	adds	r3, r3, r2
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	18d3      	adds	r3, r2, r3
 800123e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	683a      	ldr	r2, [r7, #0]
 800124a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	2224      	movs	r2, #36	; 0x24
 8001250:	2101      	movs	r1, #1
 8001252:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	2200      	movs	r2, #0
 800125e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	2201      	movs	r2, #1
 8001264:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001266:	183b      	adds	r3, r7, r0
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2207      	movs	r2, #7
 800126c:	4013      	ands	r3, r2
 800126e:	b2da      	uxtb	r2, r3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	697a      	ldr	r2, [r7, #20]
 800127a:	0011      	movs	r1, r2
 800127c:	0018      	movs	r0, r3
 800127e:	f002 ff6f 	bl	8004160 <USB_EPStartXfer>

  return HAL_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	0018      	movs	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	b006      	add	sp, #24
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	000a      	movs	r2, r1
 8001296:	1cfb      	adds	r3, r7, #3
 8001298:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800129a:	1cfb      	adds	r3, r7, #3
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2207      	movs	r2, #7
 80012a0:	401a      	ands	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d901      	bls.n	80012ae <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e046      	b.n	800133c <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80012ae:	1cfb      	adds	r3, r7, #3
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	b25b      	sxtb	r3, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	da0f      	bge.n	80012d8 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012b8:	1cfb      	adds	r3, r7, #3
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2207      	movs	r2, #7
 80012be:	4013      	ands	r3, r2
 80012c0:	1c5a      	adds	r2, r3, #1
 80012c2:	0013      	movs	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	189b      	adds	r3, r3, r2
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	18d3      	adds	r3, r2, r3
 80012ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2201      	movs	r2, #1
 80012d4:	705a      	strb	r2, [r3, #1]
 80012d6:	e00d      	b.n	80012f4 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80012d8:	1cfb      	adds	r3, r7, #3
 80012da:	781a      	ldrb	r2, [r3, #0]
 80012dc:	0013      	movs	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	189b      	adds	r3, r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	3369      	adds	r3, #105	; 0x69
 80012e6:	33ff      	adds	r3, #255	; 0xff
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	18d3      	adds	r3, r2, r3
 80012ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2200      	movs	r2, #0
 80012f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2201      	movs	r2, #1
 80012f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012fa:	1cfb      	adds	r3, r7, #3
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2207      	movs	r2, #7
 8001300:	4013      	ands	r3, r2
 8001302:	b2da      	uxtb	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	23aa      	movs	r3, #170	; 0xaa
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	5cd3      	ldrb	r3, [r2, r3]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d101      	bne.n	8001318 <HAL_PCD_EP_SetStall+0x8c>
 8001314:	2302      	movs	r3, #2
 8001316:	e011      	b.n	800133c <HAL_PCD_EP_SetStall+0xb0>
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	23aa      	movs	r3, #170	; 0xaa
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	2101      	movs	r1, #1
 8001320:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	0011      	movs	r1, r2
 800132a:	0018      	movs	r0, r3
 800132c:	f004 f850 	bl	80053d0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	23aa      	movs	r3, #170	; 0xaa
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	2100      	movs	r1, #0
 8001338:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800133a:	2300      	movs	r3, #0
}
 800133c:	0018      	movs	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	b004      	add	sp, #16
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	000a      	movs	r2, r1
 800134e:	1cfb      	adds	r3, r7, #3
 8001350:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001352:	1cfb      	adds	r3, r7, #3
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	220f      	movs	r2, #15
 8001358:	401a      	ands	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	429a      	cmp	r2, r3
 8001360:	d901      	bls.n	8001366 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e048      	b.n	80013f8 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001366:	1cfb      	adds	r3, r7, #3
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	b25b      	sxtb	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	da0f      	bge.n	8001390 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001370:	1cfb      	adds	r3, r7, #3
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2207      	movs	r2, #7
 8001376:	4013      	ands	r3, r2
 8001378:	1c5a      	adds	r2, r3, #1
 800137a:	0013      	movs	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	189b      	adds	r3, r3, r2
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	18d3      	adds	r3, r2, r3
 8001386:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2201      	movs	r2, #1
 800138c:	705a      	strb	r2, [r3, #1]
 800138e:	e00f      	b.n	80013b0 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001390:	1cfb      	adds	r3, r7, #3
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2207      	movs	r2, #7
 8001396:	401a      	ands	r2, r3
 8001398:	0013      	movs	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	189b      	adds	r3, r3, r2
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	3369      	adds	r3, #105	; 0x69
 80013a2:	33ff      	adds	r3, #255	; 0xff
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	18d3      	adds	r3, r2, r3
 80013a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2200      	movs	r2, #0
 80013ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2200      	movs	r2, #0
 80013b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013b6:	1cfb      	adds	r3, r7, #3
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2207      	movs	r2, #7
 80013bc:	4013      	ands	r3, r2
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	23aa      	movs	r3, #170	; 0xaa
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	5cd3      	ldrb	r3, [r2, r3]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d101      	bne.n	80013d4 <HAL_PCD_EP_ClrStall+0x90>
 80013d0:	2302      	movs	r3, #2
 80013d2:	e011      	b.n	80013f8 <HAL_PCD_EP_ClrStall+0xb4>
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	23aa      	movs	r3, #170	; 0xaa
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	2101      	movs	r1, #1
 80013dc:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	0011      	movs	r1, r2
 80013e6:	0018      	movs	r0, r3
 80013e8:	f004 f842 	bl	8005470 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	23aa      	movs	r3, #170	; 0xaa
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	2100      	movs	r1, #0
 80013f4:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	0018      	movs	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b004      	add	sp, #16
 80013fe:	bd80      	pop	{r7, pc}

08001400 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001400:	b5b0      	push	{r4, r5, r7, lr}
 8001402:	b096      	sub	sp, #88	; 0x58
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001408:	f000 fbec 	bl	8001be4 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	204e      	movs	r0, #78	; 0x4e
 8001412:	183b      	adds	r3, r7, r0
 8001414:	2144      	movs	r1, #68	; 0x44
 8001416:	5a52      	ldrh	r2, [r2, r1]
 8001418:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800141a:	183b      	adds	r3, r7, r0
 800141c:	881b      	ldrh	r3, [r3, #0]
 800141e:	b2da      	uxtb	r2, r3
 8001420:	244d      	movs	r4, #77	; 0x4d
 8001422:	193b      	adds	r3, r7, r4
 8001424:	210f      	movs	r1, #15
 8001426:	400a      	ands	r2, r1
 8001428:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800142a:	193b      	adds	r3, r7, r4
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d000      	beq.n	8001434 <PCD_EP_ISR_Handler+0x34>
 8001432:	e18f      	b.n	8001754 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001434:	183b      	adds	r3, r7, r0
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	2210      	movs	r2, #16
 800143a:	4013      	ands	r3, r2
 800143c:	d155      	bne.n	80014ea <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	b29a      	uxth	r2, r3
 8001446:	200e      	movs	r0, #14
 8001448:	183b      	adds	r3, r7, r0
 800144a:	49bb      	ldr	r1, [pc, #748]	; (8001738 <PCD_EP_ISR_Handler+0x338>)
 800144c:	400a      	ands	r2, r1
 800144e:	801a      	strh	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	183a      	adds	r2, r7, r0
 8001456:	8812      	ldrh	r2, [r2, #0]
 8001458:	49b8      	ldr	r1, [pc, #736]	; (800173c <PCD_EP_ISR_Handler+0x33c>)
 800145a:	430a      	orrs	r2, r1
 800145c:	b292      	uxth	r2, r2
 800145e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3328      	adds	r3, #40	; 0x28
 8001464:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2250      	movs	r2, #80	; 0x50
 800146c:	5a9b      	ldrh	r3, [r3, r2]
 800146e:	b29b      	uxth	r3, r3
 8001470:	001a      	movs	r2, r3
 8001472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	18d2      	adds	r2, r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	18d3      	adds	r3, r2, r3
 8001480:	4aaf      	ldr	r2, [pc, #700]	; (8001740 <PCD_EP_ISR_Handler+0x340>)
 8001482:	4694      	mov	ip, r2
 8001484:	4463      	add	r3, ip
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	059b      	lsls	r3, r3, #22
 800148a:	0d9a      	lsrs	r2, r3, #22
 800148c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800148e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001492:	695a      	ldr	r2, [r3, #20]
 8001494:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001496:	69db      	ldr	r3, [r3, #28]
 8001498:	18d2      	adds	r2, r2, r3
 800149a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800149c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2100      	movs	r1, #0
 80014a2:	0018      	movs	r0, r3
 80014a4:	f005 fecc 	bl	8007240 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2224      	movs	r2, #36	; 0x24
 80014ac:	5c9b      	ldrb	r3, [r3, r2]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <PCD_EP_ISR_Handler+0xb8>
 80014b4:	f000 fb96 	bl	8001be4 <PCD_EP_ISR_Handler+0x7e4>
 80014b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <PCD_EP_ISR_Handler+0xc4>
 80014c0:	f000 fb90 	bl	8001be4 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2224      	movs	r2, #36	; 0x24
 80014c8:	5c9b      	ldrb	r3, [r3, r2]
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2280      	movs	r2, #128	; 0x80
 80014ce:	4252      	negs	r2, r2
 80014d0:	4313      	orrs	r3, r2
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	b291      	uxth	r1, r2
 80014da:	224c      	movs	r2, #76	; 0x4c
 80014dc:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2224      	movs	r2, #36	; 0x24
 80014e2:	2100      	movs	r1, #0
 80014e4:	5499      	strb	r1, [r3, r2]
 80014e6:	f000 fb7d 	bl	8001be4 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	3369      	adds	r3, #105	; 0x69
 80014ee:	33ff      	adds	r3, #255	; 0xff
 80014f0:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	214a      	movs	r1, #74	; 0x4a
 80014f8:	187b      	adds	r3, r7, r1
 80014fa:	8812      	ldrh	r2, [r2, #0]
 80014fc:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80014fe:	187b      	adds	r3, r7, r1
 8001500:	881a      	ldrh	r2, [r3, #0]
 8001502:	2380      	movs	r3, #128	; 0x80
 8001504:	011b      	lsls	r3, r3, #4
 8001506:	4013      	ands	r3, r2
 8001508:	d037      	beq.n	800157a <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2250      	movs	r2, #80	; 0x50
 8001510:	5a9b      	ldrh	r3, [r3, r2]
 8001512:	b29b      	uxth	r3, r3
 8001514:	001a      	movs	r2, r3
 8001516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	18d2      	adds	r2, r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	18d3      	adds	r3, r2, r3
 8001524:	4a87      	ldr	r2, [pc, #540]	; (8001744 <PCD_EP_ISR_Handler+0x344>)
 8001526:	4694      	mov	ip, r2
 8001528:	4463      	add	r3, ip
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	059b      	lsls	r3, r3, #22
 800152e:	0d9a      	lsrs	r2, r3, #22
 8001530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001532:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6818      	ldr	r0, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	22ac      	movs	r2, #172	; 0xac
 800153c:	0092      	lsls	r2, r2, #2
 800153e:	1899      	adds	r1, r3, r2
 8001540:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001542:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001546:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001548:	b29b      	uxth	r3, r3
 800154a:	f004 f8c4 	bl	80056d6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	b29a      	uxth	r2, r3
 8001556:	2010      	movs	r0, #16
 8001558:	183b      	adds	r3, r7, r0
 800155a:	497b      	ldr	r1, [pc, #492]	; (8001748 <PCD_EP_ISR_Handler+0x348>)
 800155c:	400a      	ands	r2, r1
 800155e:	801a      	strh	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	183a      	adds	r2, r7, r0
 8001566:	8812      	ldrh	r2, [r2, #0]
 8001568:	2180      	movs	r1, #128	; 0x80
 800156a:	430a      	orrs	r2, r1
 800156c:	b292      	uxth	r2, r2
 800156e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	0018      	movs	r0, r3
 8001574:	f005 fe2e 	bl	80071d4 <HAL_PCD_SetupStageCallback>
 8001578:	e334      	b.n	8001be4 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800157a:	234a      	movs	r3, #74	; 0x4a
 800157c:	18fb      	adds	r3, r7, r3
 800157e:	2200      	movs	r2, #0
 8001580:	5e9b      	ldrsh	r3, [r3, r2]
 8001582:	2b00      	cmp	r3, #0
 8001584:	db00      	blt.n	8001588 <PCD_EP_ISR_Handler+0x188>
 8001586:	e32d      	b.n	8001be4 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	b29a      	uxth	r2, r3
 8001590:	201e      	movs	r0, #30
 8001592:	183b      	adds	r3, r7, r0
 8001594:	496c      	ldr	r1, [pc, #432]	; (8001748 <PCD_EP_ISR_Handler+0x348>)
 8001596:	400a      	ands	r2, r1
 8001598:	801a      	strh	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	183a      	adds	r2, r7, r0
 80015a0:	8812      	ldrh	r2, [r2, #0]
 80015a2:	2180      	movs	r1, #128	; 0x80
 80015a4:	430a      	orrs	r2, r1
 80015a6:	b292      	uxth	r2, r2
 80015a8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2250      	movs	r2, #80	; 0x50
 80015b0:	5a9b      	ldrh	r3, [r3, r2]
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	001a      	movs	r2, r3
 80015b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	18d2      	adds	r2, r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	18d3      	adds	r3, r2, r3
 80015c4:	4a5f      	ldr	r2, [pc, #380]	; (8001744 <PCD_EP_ISR_Handler+0x344>)
 80015c6:	4694      	mov	ip, r2
 80015c8:	4463      	add	r3, ip
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	059b      	lsls	r3, r3, #22
 80015ce:	0d9a      	lsrs	r2, r3, #22
 80015d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015d2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80015d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015d6:	69db      	ldr	r3, [r3, #28]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d01a      	beq.n	8001612 <PCD_EP_ISR_Handler+0x212>
 80015dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015de:	695b      	ldr	r3, [r3, #20]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d016      	beq.n	8001612 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6818      	ldr	r0, [r3, #0]
 80015e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015ea:	6959      	ldr	r1, [r3, #20]
 80015ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015ee:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80015f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015f2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	f004 f86e 	bl	80056d6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80015fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015fc:	695a      	ldr	r2, [r3, #20]
 80015fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	18d2      	adds	r2, r2, r3
 8001604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001606:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2100      	movs	r1, #0
 800160c:	0018      	movs	r0, r3
 800160e:	f005 fdf6 	bl	80071fe <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	214a      	movs	r1, #74	; 0x4a
 8001618:	187b      	adds	r3, r7, r1
 800161a:	8812      	ldrh	r2, [r2, #0]
 800161c:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800161e:	187b      	adds	r3, r7, r1
 8001620:	881a      	ldrh	r2, [r3, #0]
 8001622:	2380      	movs	r3, #128	; 0x80
 8001624:	011b      	lsls	r3, r3, #4
 8001626:	4013      	ands	r3, r2
 8001628:	d000      	beq.n	800162c <PCD_EP_ISR_Handler+0x22c>
 800162a:	e2db      	b.n	8001be4 <PCD_EP_ISR_Handler+0x7e4>
 800162c:	187b      	adds	r3, r7, r1
 800162e:	881a      	ldrh	r2, [r3, #0]
 8001630:	23c0      	movs	r3, #192	; 0xc0
 8001632:	019b      	lsls	r3, r3, #6
 8001634:	401a      	ands	r2, r3
 8001636:	23c0      	movs	r3, #192	; 0xc0
 8001638:	019b      	lsls	r3, r3, #6
 800163a:	429a      	cmp	r2, r3
 800163c:	d100      	bne.n	8001640 <PCD_EP_ISR_Handler+0x240>
 800163e:	e2d1      	b.n	8001be4 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2250      	movs	r2, #80	; 0x50
 800164c:	5a9b      	ldrh	r3, [r3, r2]
 800164e:	b29b      	uxth	r3, r3
 8001650:	001a      	movs	r2, r3
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	189b      	adds	r3, r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	4a3a      	ldr	r2, [pc, #232]	; (8001744 <PCD_EP_ISR_Handler+0x344>)
 800165c:	4694      	mov	ip, r2
 800165e:	4463      	add	r3, ip
 8001660:	617b      	str	r3, [r7, #20]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	881b      	ldrh	r3, [r3, #0]
 8001666:	b29b      	uxth	r3, r3
 8001668:	059b      	lsls	r3, r3, #22
 800166a:	0d9b      	lsrs	r3, r3, #22
 800166c:	b29a      	uxth	r2, r3
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	801a      	strh	r2, [r3, #0]
 8001672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	2b3e      	cmp	r3, #62	; 0x3e
 8001678:	d91a      	bls.n	80016b0 <PCD_EP_ISR_Handler+0x2b0>
 800167a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	095b      	lsrs	r3, r3, #5
 8001680:	647b      	str	r3, [r7, #68]	; 0x44
 8001682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	221f      	movs	r2, #31
 8001688:	4013      	ands	r3, r2
 800168a:	d102      	bne.n	8001692 <PCD_EP_ISR_Handler+0x292>
 800168c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800168e:	3b01      	subs	r3, #1
 8001690:	647b      	str	r3, [r7, #68]	; 0x44
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	b29a      	uxth	r2, r3
 8001698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800169a:	b29b      	uxth	r3, r3
 800169c:	029b      	lsls	r3, r3, #10
 800169e:	b29b      	uxth	r3, r3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	4a25      	ldr	r2, [pc, #148]	; (800173c <PCD_EP_ISR_Handler+0x33c>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	801a      	strh	r2, [r3, #0]
 80016ae:	e023      	b.n	80016f8 <PCD_EP_ISR_Handler+0x2f8>
 80016b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d108      	bne.n	80016ca <PCD_EP_ISR_Handler+0x2ca>
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	b29b      	uxth	r3, r3
 80016be:	4a1f      	ldr	r2, [pc, #124]	; (800173c <PCD_EP_ISR_Handler+0x33c>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	801a      	strh	r2, [r3, #0]
 80016c8:	e016      	b.n	80016f8 <PCD_EP_ISR_Handler+0x2f8>
 80016ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	085b      	lsrs	r3, r3, #1
 80016d0:	647b      	str	r3, [r7, #68]	; 0x44
 80016d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	2201      	movs	r2, #1
 80016d8:	4013      	ands	r3, r2
 80016da:	d002      	beq.n	80016e2 <PCD_EP_ISR_Handler+0x2e2>
 80016dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016de:	3301      	adds	r3, #1
 80016e0:	647b      	str	r3, [r7, #68]	; 0x44
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	029b      	lsls	r3, r3, #10
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	4313      	orrs	r3, r2
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	b29a      	uxth	r2, r3
 8001700:	2012      	movs	r0, #18
 8001702:	183b      	adds	r3, r7, r0
 8001704:	4911      	ldr	r1, [pc, #68]	; (800174c <PCD_EP_ISR_Handler+0x34c>)
 8001706:	400a      	ands	r2, r1
 8001708:	801a      	strh	r2, [r3, #0]
 800170a:	183b      	adds	r3, r7, r0
 800170c:	183a      	adds	r2, r7, r0
 800170e:	8812      	ldrh	r2, [r2, #0]
 8001710:	2180      	movs	r1, #128	; 0x80
 8001712:	0149      	lsls	r1, r1, #5
 8001714:	404a      	eors	r2, r1
 8001716:	801a      	strh	r2, [r3, #0]
 8001718:	183b      	adds	r3, r7, r0
 800171a:	183a      	adds	r2, r7, r0
 800171c:	8812      	ldrh	r2, [r2, #0]
 800171e:	2180      	movs	r1, #128	; 0x80
 8001720:	0189      	lsls	r1, r1, #6
 8001722:	404a      	eors	r2, r1
 8001724:	801a      	strh	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	183a      	adds	r2, r7, r0
 800172c:	8812      	ldrh	r2, [r2, #0]
 800172e:	4908      	ldr	r1, [pc, #32]	; (8001750 <PCD_EP_ISR_Handler+0x350>)
 8001730:	430a      	orrs	r2, r1
 8001732:	b292      	uxth	r2, r2
 8001734:	801a      	strh	r2, [r3, #0]
 8001736:	e255      	b.n	8001be4 <PCD_EP_ISR_Handler+0x7e4>
 8001738:	ffff8f0f 	.word	0xffff8f0f
 800173c:	ffff8000 	.word	0xffff8000
 8001740:	00000402 	.word	0x00000402
 8001744:	00000406 	.word	0x00000406
 8001748:	00000f8f 	.word	0x00000f8f
 800174c:	ffffbf8f 	.word	0xffffbf8f
 8001750:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	001a      	movs	r2, r3
 800175a:	204d      	movs	r0, #77	; 0x4d
 800175c:	183b      	adds	r3, r7, r0
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	18d2      	adds	r2, r2, r3
 8001764:	214a      	movs	r1, #74	; 0x4a
 8001766:	187b      	adds	r3, r7, r1
 8001768:	8812      	ldrh	r2, [r2, #0]
 800176a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800176c:	187b      	adds	r3, r7, r1
 800176e:	2200      	movs	r2, #0
 8001770:	5e9b      	ldrsh	r3, [r3, r2]
 8001772:	2b00      	cmp	r3, #0
 8001774:	db00      	blt.n	8001778 <PCD_EP_ISR_Handler+0x378>
 8001776:	e0fa      	b.n	800196e <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	001a      	movs	r2, r3
 800177e:	183b      	adds	r3, r7, r0
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	18d3      	adds	r3, r2, r3
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	b29a      	uxth	r2, r3
 800178a:	2448      	movs	r4, #72	; 0x48
 800178c:	193b      	adds	r3, r7, r4
 800178e:	49d1      	ldr	r1, [pc, #836]	; (8001ad4 <PCD_EP_ISR_Handler+0x6d4>)
 8001790:	400a      	ands	r2, r1
 8001792:	801a      	strh	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	001a      	movs	r2, r3
 800179a:	183b      	adds	r3, r7, r0
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	18d3      	adds	r3, r2, r3
 80017a2:	193a      	adds	r2, r7, r4
 80017a4:	8812      	ldrh	r2, [r2, #0]
 80017a6:	2180      	movs	r1, #128	; 0x80
 80017a8:	430a      	orrs	r2, r1
 80017aa:	b292      	uxth	r2, r2
 80017ac:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80017ae:	183b      	adds	r3, r7, r0
 80017b0:	781a      	ldrb	r2, [r3, #0]
 80017b2:	0013      	movs	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	189b      	adds	r3, r3, r2
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	3369      	adds	r3, #105	; 0x69
 80017bc:	33ff      	adds	r3, #255	; 0xff
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	18d3      	adds	r3, r2, r3
 80017c2:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80017c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c6:	7b1b      	ldrb	r3, [r3, #12]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d125      	bne.n	8001818 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2250      	movs	r2, #80	; 0x50
 80017d2:	5a9b      	ldrh	r3, [r3, r2]
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	001a      	movs	r2, r3
 80017d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	18d2      	adds	r2, r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	18d3      	adds	r3, r2, r3
 80017e6:	4abc      	ldr	r2, [pc, #752]	; (8001ad8 <PCD_EP_ISR_Handler+0x6d8>)
 80017e8:	4694      	mov	ip, r2
 80017ea:	4463      	add	r3, ip
 80017ec:	881a      	ldrh	r2, [r3, #0]
 80017ee:	2450      	movs	r4, #80	; 0x50
 80017f0:	193b      	adds	r3, r7, r4
 80017f2:	0592      	lsls	r2, r2, #22
 80017f4:	0d92      	lsrs	r2, r2, #22
 80017f6:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80017f8:	193b      	adds	r3, r7, r4
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d100      	bne.n	8001802 <PCD_EP_ISR_Handler+0x402>
 8001800:	e08d      	b.n	800191e <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6818      	ldr	r0, [r3, #0]
 8001806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001808:	6959      	ldr	r1, [r3, #20]
 800180a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800180c:	88da      	ldrh	r2, [r3, #6]
 800180e:	193b      	adds	r3, r7, r4
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	f003 ff60 	bl	80056d6 <USB_ReadPMA>
 8001816:	e082      	b.n	800191e <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800181a:	78db      	ldrb	r3, [r3, #3]
 800181c:	2b02      	cmp	r3, #2
 800181e:	d10c      	bne.n	800183a <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001820:	2350      	movs	r3, #80	; 0x50
 8001822:	18fc      	adds	r4, r7, r3
 8001824:	234a      	movs	r3, #74	; 0x4a
 8001826:	18fb      	adds	r3, r7, r3
 8001828:	881a      	ldrh	r2, [r3, #0]
 800182a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	0018      	movs	r0, r3
 8001830:	f000 f9ec 	bl	8001c0c <HAL_PCD_EP_DB_Receive>
 8001834:	0003      	movs	r3, r0
 8001836:	8023      	strh	r3, [r4, #0]
 8001838:	e071      	b.n	800191e <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	001a      	movs	r2, r3
 8001840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	18d3      	adds	r3, r2, r3
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	b29a      	uxth	r2, r3
 800184c:	2052      	movs	r0, #82	; 0x52
 800184e:	183b      	adds	r3, r7, r0
 8001850:	49a2      	ldr	r1, [pc, #648]	; (8001adc <PCD_EP_ISR_Handler+0x6dc>)
 8001852:	400a      	ands	r2, r1
 8001854:	801a      	strh	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	001a      	movs	r2, r3
 800185c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	18d3      	adds	r3, r2, r3
 8001864:	183a      	adds	r2, r7, r0
 8001866:	8812      	ldrh	r2, [r2, #0]
 8001868:	499d      	ldr	r1, [pc, #628]	; (8001ae0 <PCD_EP_ISR_Handler+0x6e0>)
 800186a:	430a      	orrs	r2, r1
 800186c:	b292      	uxth	r2, r2
 800186e:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	001a      	movs	r2, r3
 8001876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	18d3      	adds	r3, r2, r3
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	b29b      	uxth	r3, r3
 8001882:	001a      	movs	r2, r3
 8001884:	2380      	movs	r3, #128	; 0x80
 8001886:	01db      	lsls	r3, r3, #7
 8001888:	4013      	ands	r3, r2
 800188a:	d024      	beq.n	80018d6 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2250      	movs	r2, #80	; 0x50
 8001892:	5a9b      	ldrh	r3, [r3, r2]
 8001894:	b29b      	uxth	r3, r3
 8001896:	001a      	movs	r2, r3
 8001898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	18d2      	adds	r2, r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	18d3      	adds	r3, r2, r3
 80018a6:	4a8f      	ldr	r2, [pc, #572]	; (8001ae4 <PCD_EP_ISR_Handler+0x6e4>)
 80018a8:	4694      	mov	ip, r2
 80018aa:	4463      	add	r3, ip
 80018ac:	881a      	ldrh	r2, [r3, #0]
 80018ae:	2450      	movs	r4, #80	; 0x50
 80018b0:	193b      	adds	r3, r7, r4
 80018b2:	0592      	lsls	r2, r2, #22
 80018b4:	0d92      	lsrs	r2, r2, #22
 80018b6:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80018b8:	193b      	adds	r3, r7, r4
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d02e      	beq.n	800191e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6818      	ldr	r0, [r3, #0]
 80018c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018c6:	6959      	ldr	r1, [r3, #20]
 80018c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ca:	891a      	ldrh	r2, [r3, #8]
 80018cc:	193b      	adds	r3, r7, r4
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	f003 ff01 	bl	80056d6 <USB_ReadPMA>
 80018d4:	e023      	b.n	800191e <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2250      	movs	r2, #80	; 0x50
 80018dc:	5a9b      	ldrh	r3, [r3, r2]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	001a      	movs	r2, r3
 80018e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	18d2      	adds	r2, r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	18d3      	adds	r3, r2, r3
 80018f0:	4a79      	ldr	r2, [pc, #484]	; (8001ad8 <PCD_EP_ISR_Handler+0x6d8>)
 80018f2:	4694      	mov	ip, r2
 80018f4:	4463      	add	r3, ip
 80018f6:	881a      	ldrh	r2, [r3, #0]
 80018f8:	2450      	movs	r4, #80	; 0x50
 80018fa:	193b      	adds	r3, r7, r4
 80018fc:	0592      	lsls	r2, r2, #22
 80018fe:	0d92      	lsrs	r2, r2, #22
 8001900:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001902:	193b      	adds	r3, r7, r4
 8001904:	881b      	ldrh	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d009      	beq.n	800191e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6818      	ldr	r0, [r3, #0]
 800190e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001910:	6959      	ldr	r1, [r3, #20]
 8001912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001914:	895a      	ldrh	r2, [r3, #10]
 8001916:	193b      	adds	r3, r7, r4
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	f003 fedc 	bl	80056d6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800191e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001920:	69da      	ldr	r2, [r3, #28]
 8001922:	2150      	movs	r1, #80	; 0x50
 8001924:	187b      	adds	r3, r7, r1
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	18d2      	adds	r2, r2, r3
 800192a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800192c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800192e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001930:	695a      	ldr	r2, [r3, #20]
 8001932:	187b      	adds	r3, r7, r1
 8001934:	881b      	ldrh	r3, [r3, #0]
 8001936:	18d2      	adds	r2, r2, r3
 8001938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800193a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800193c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d005      	beq.n	8001950 <PCD_EP_ISR_Handler+0x550>
 8001944:	187b      	adds	r3, r7, r1
 8001946:	881a      	ldrh	r2, [r3, #0]
 8001948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	429a      	cmp	r2, r3
 800194e:	d207      	bcs.n	8001960 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001952:	781a      	ldrb	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	0011      	movs	r1, r2
 8001958:	0018      	movs	r0, r3
 800195a:	f005 fc50 	bl	80071fe <HAL_PCD_DataOutStageCallback>
 800195e:	e006      	b.n	800196e <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001966:	0011      	movs	r1, r2
 8001968:	0018      	movs	r0, r3
 800196a:	f002 fbf9 	bl	8004160 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800196e:	244a      	movs	r4, #74	; 0x4a
 8001970:	193b      	adds	r3, r7, r4
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	2280      	movs	r2, #128	; 0x80
 8001976:	4013      	ands	r3, r2
 8001978:	d100      	bne.n	800197c <PCD_EP_ISR_Handler+0x57c>
 800197a:	e133      	b.n	8001be4 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800197c:	204d      	movs	r0, #77	; 0x4d
 800197e:	183b      	adds	r3, r7, r0
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	1c5a      	adds	r2, r3, #1
 8001984:	0013      	movs	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	189b      	adds	r3, r3, r2
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	18d3      	adds	r3, r2, r3
 8001990:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	001a      	movs	r2, r3
 8001998:	183b      	adds	r3, r7, r0
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	18d3      	adds	r3, r2, r3
 80019a0:	881b      	ldrh	r3, [r3, #0]
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	2542      	movs	r5, #66	; 0x42
 80019a6:	197b      	adds	r3, r7, r5
 80019a8:	494f      	ldr	r1, [pc, #316]	; (8001ae8 <PCD_EP_ISR_Handler+0x6e8>)
 80019aa:	400a      	ands	r2, r1
 80019ac:	801a      	strh	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	001a      	movs	r2, r3
 80019b4:	183b      	adds	r3, r7, r0
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	18d3      	adds	r3, r2, r3
 80019bc:	197a      	adds	r2, r7, r5
 80019be:	8812      	ldrh	r2, [r2, #0]
 80019c0:	494a      	ldr	r1, [pc, #296]	; (8001aec <PCD_EP_ISR_Handler+0x6ec>)
 80019c2:	430a      	orrs	r2, r1
 80019c4:	b292      	uxth	r2, r2
 80019c6:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80019c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ca:	78db      	ldrb	r3, [r3, #3]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d000      	beq.n	80019d2 <PCD_EP_ISR_Handler+0x5d2>
 80019d0:	e0af      	b.n	8001b32 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 80019d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80019d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019da:	7b1b      	ldrb	r3, [r3, #12]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d100      	bne.n	80019e2 <PCD_EP_ISR_Handler+0x5e2>
 80019e0:	e09f      	b.n	8001b22 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80019e2:	193b      	adds	r3, r7, r4
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	2240      	movs	r2, #64	; 0x40
 80019e8:	4013      	ands	r3, r2
 80019ea:	d046      	beq.n	8001a7a <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80019ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ee:	785b      	ldrb	r3, [r3, #1]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d125      	bne.n	8001a40 <PCD_EP_ISR_Handler+0x640>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2250      	movs	r2, #80	; 0x50
 8001a00:	5a9b      	ldrh	r3, [r3, r2]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	001a      	movs	r2, r3
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	189b      	adds	r3, r3, r2
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	00da      	lsls	r2, r3, #3
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	18d3      	adds	r3, r2, r3
 8001a16:	4a33      	ldr	r2, [pc, #204]	; (8001ae4 <PCD_EP_ISR_Handler+0x6e4>)
 8001a18:	4694      	mov	ip, r2
 8001a1a:	4463      	add	r3, ip
 8001a1c:	623b      	str	r3, [r7, #32]
 8001a1e:	6a3b      	ldr	r3, [r7, #32]
 8001a20:	881b      	ldrh	r3, [r3, #0]
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	059b      	lsls	r3, r3, #22
 8001a26:	0d9b      	lsrs	r3, r3, #22
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	6a3b      	ldr	r3, [r7, #32]
 8001a2c:	801a      	strh	r2, [r3, #0]
 8001a2e:	6a3b      	ldr	r3, [r7, #32]
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	4a2d      	ldr	r2, [pc, #180]	; (8001aec <PCD_EP_ISR_Handler+0x6ec>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	6a3b      	ldr	r3, [r7, #32]
 8001a3c:	801a      	strh	r2, [r3, #0]
 8001a3e:	e070      	b.n	8001b22 <PCD_EP_ISR_Handler+0x722>
 8001a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a42:	785b      	ldrb	r3, [r3, #1]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d16c      	bne.n	8001b22 <PCD_EP_ISR_Handler+0x722>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2250      	movs	r2, #80	; 0x50
 8001a54:	5a9b      	ldrh	r3, [r3, r2]
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	001a      	movs	r2, r3
 8001a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a5c:	189b      	adds	r3, r3, r2
 8001a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	00da      	lsls	r2, r3, #3
 8001a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a68:	18d3      	adds	r3, r2, r3
 8001a6a:	4a1e      	ldr	r2, [pc, #120]	; (8001ae4 <PCD_EP_ISR_Handler+0x6e4>)
 8001a6c:	4694      	mov	ip, r2
 8001a6e:	4463      	add	r3, ip
 8001a70:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a74:	2200      	movs	r2, #0
 8001a76:	801a      	strh	r2, [r3, #0]
 8001a78:	e053      	b.n	8001b22 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a82:	785b      	ldrb	r3, [r3, #1]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d133      	bne.n	8001af0 <PCD_EP_ISR_Handler+0x6f0>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2250      	movs	r2, #80	; 0x50
 8001a94:	5a9b      	ldrh	r3, [r3, r2]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	001a      	movs	r2, r3
 8001a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a9c:	189b      	adds	r3, r3, r2
 8001a9e:	637b      	str	r3, [r7, #52]	; 0x34
 8001aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	00da      	lsls	r2, r3, #3
 8001aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aa8:	18d3      	adds	r3, r2, r3
 8001aaa:	4a0b      	ldr	r2, [pc, #44]	; (8001ad8 <PCD_EP_ISR_Handler+0x6d8>)
 8001aac:	4694      	mov	ip, r2
 8001aae:	4463      	add	r3, ip
 8001ab0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ab4:	881b      	ldrh	r3, [r3, #0]
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	059b      	lsls	r3, r3, #22
 8001aba:	0d9b      	lsrs	r3, r3, #22
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ac0:	801a      	strh	r2, [r3, #0]
 8001ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	4a08      	ldr	r2, [pc, #32]	; (8001aec <PCD_EP_ISR_Handler+0x6ec>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad0:	801a      	strh	r2, [r3, #0]
 8001ad2:	e026      	b.n	8001b22 <PCD_EP_ISR_Handler+0x722>
 8001ad4:	00000f8f 	.word	0x00000f8f
 8001ad8:	00000406 	.word	0x00000406
 8001adc:	ffff8f8f 	.word	0xffff8f8f
 8001ae0:	ffff80c0 	.word	0xffff80c0
 8001ae4:	00000402 	.word	0x00000402
 8001ae8:	ffff8f0f 	.word	0xffff8f0f
 8001aec:	ffff8000 	.word	0xffff8000
 8001af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001af2:	785b      	ldrb	r3, [r3, #1]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d114      	bne.n	8001b22 <PCD_EP_ISR_Handler+0x722>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2250      	movs	r2, #80	; 0x50
 8001afe:	5a9b      	ldrh	r3, [r3, r2]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b06:	189b      	adds	r3, r3, r2
 8001b08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	00da      	lsls	r2, r3, #3
 8001b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b12:	18d3      	adds	r3, r2, r3
 8001b14:	4a3b      	ldr	r2, [pc, #236]	; (8001c04 <PCD_EP_ISR_Handler+0x804>)
 8001b16:	4694      	mov	ip, r2
 8001b18:	4463      	add	r3, ip
 8001b1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b1e:	2200      	movs	r2, #0
 8001b20:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001b22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b24:	781a      	ldrb	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	0011      	movs	r1, r2
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	f005 fb88 	bl	8007240 <HAL_PCD_DataInStageCallback>
 8001b30:	e058      	b.n	8001be4 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001b32:	234a      	movs	r3, #74	; 0x4a
 8001b34:	18fb      	adds	r3, r7, r3
 8001b36:	881a      	ldrh	r2, [r3, #0]
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d149      	bne.n	8001bd4 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2250      	movs	r2, #80	; 0x50
 8001b46:	5a9b      	ldrh	r3, [r3, r2]
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	001a      	movs	r2, r3
 8001b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	18d2      	adds	r2, r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	18d3      	adds	r3, r2, r3
 8001b5a:	4a2b      	ldr	r2, [pc, #172]	; (8001c08 <PCD_EP_ISR_Handler+0x808>)
 8001b5c:	4694      	mov	ip, r2
 8001b5e:	4463      	add	r3, ip
 8001b60:	881a      	ldrh	r2, [r3, #0]
 8001b62:	2140      	movs	r1, #64	; 0x40
 8001b64:	187b      	adds	r3, r7, r1
 8001b66:	0592      	lsls	r2, r2, #22
 8001b68:	0d92      	lsrs	r2, r2, #22
 8001b6a:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8001b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6e:	699a      	ldr	r2, [r3, #24]
 8001b70:	187b      	adds	r3, r7, r1
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d907      	bls.n	8001b88 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8001b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b7a:	699a      	ldr	r2, [r3, #24]
 8001b7c:	187b      	adds	r3, r7, r1
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	1ad2      	subs	r2, r2, r3
 8001b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b84:	619a      	str	r2, [r3, #24]
 8001b86:	e002      	b.n	8001b8e <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8001b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d107      	bne.n	8001ba6 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b98:	781a      	ldrb	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	0011      	movs	r1, r2
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	f005 fb4e 	bl	8007240 <HAL_PCD_DataInStageCallback>
 8001ba4:	e01e      	b.n	8001be4 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ba8:	695a      	ldr	r2, [r3, #20]
 8001baa:	2140      	movs	r1, #64	; 0x40
 8001bac:	187b      	adds	r3, r7, r1
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	18d2      	adds	r2, r2, r3
 8001bb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bb4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001bb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bb8:	69da      	ldr	r2, [r3, #28]
 8001bba:	187b      	adds	r3, r7, r1
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	18d2      	adds	r2, r2, r3
 8001bc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bc2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001bca:	0011      	movs	r1, r2
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f002 fac7 	bl	8004160 <USB_EPStartXfer>
 8001bd2:	e007      	b.n	8001be4 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001bd4:	234a      	movs	r3, #74	; 0x4a
 8001bd6:	18fb      	adds	r3, r7, r3
 8001bd8:	881a      	ldrh	r2, [r3, #0]
 8001bda:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	0018      	movs	r0, r3
 8001be0:	f000 f930 	bl	8001e44 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2244      	movs	r2, #68	; 0x44
 8001bea:	5a9b      	ldrh	r3, [r3, r2]
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	b21b      	sxth	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	da01      	bge.n	8001bf8 <PCD_EP_ISR_Handler+0x7f8>
 8001bf4:	f7ff fc0a 	bl	800140c <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	b016      	add	sp, #88	; 0x58
 8001c00:	bdb0      	pop	{r4, r5, r7, pc}
 8001c02:	46c0      	nop			; (mov r8, r8)
 8001c04:	00000406 	.word	0x00000406
 8001c08:	00000402 	.word	0x00000402

08001c0c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001c0c:	b590      	push	{r4, r7, lr}
 8001c0e:	b089      	sub	sp, #36	; 0x24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	1dbb      	adds	r3, r7, #6
 8001c18:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001c1a:	1dbb      	adds	r3, r7, #6
 8001c1c:	881a      	ldrh	r2, [r3, #0]
 8001c1e:	2380      	movs	r3, #128	; 0x80
 8001c20:	01db      	lsls	r3, r3, #7
 8001c22:	4013      	ands	r3, r2
 8001c24:	d100      	bne.n	8001c28 <HAL_PCD_EP_DB_Receive+0x1c>
 8001c26:	e07d      	b.n	8001d24 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2250      	movs	r2, #80	; 0x50
 8001c2e:	5a9b      	ldrh	r3, [r3, r2]
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	001a      	movs	r2, r3
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	18d2      	adds	r2, r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	18d3      	adds	r3, r2, r3
 8001c42:	4a7a      	ldr	r2, [pc, #488]	; (8001e2c <HAL_PCD_EP_DB_Receive+0x220>)
 8001c44:	4694      	mov	ip, r2
 8001c46:	4463      	add	r3, ip
 8001c48:	881a      	ldrh	r2, [r3, #0]
 8001c4a:	211a      	movs	r1, #26
 8001c4c:	187b      	adds	r3, r7, r1
 8001c4e:	0592      	lsls	r2, r2, #22
 8001c50:	0d92      	lsrs	r2, r2, #22
 8001c52:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	699a      	ldr	r2, [r3, #24]
 8001c58:	187b      	adds	r3, r7, r1
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d307      	bcc.n	8001c70 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	699a      	ldr	r2, [r3, #24]
 8001c64:	187b      	adds	r3, r7, r1
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	1ad2      	subs	r2, r2, r3
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	619a      	str	r2, [r3, #24]
 8001c6e:	e002      	b.n	8001c76 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	2200      	movs	r2, #0
 8001c74:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d121      	bne.n	8001cc2 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	001a      	movs	r2, r3
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	18d3      	adds	r3, r2, r3
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	2018      	movs	r0, #24
 8001c92:	183b      	adds	r3, r7, r0
 8001c94:	4966      	ldr	r1, [pc, #408]	; (8001e30 <HAL_PCD_EP_DB_Receive+0x224>)
 8001c96:	400a      	ands	r2, r1
 8001c98:	801a      	strh	r2, [r3, #0]
 8001c9a:	183b      	adds	r3, r7, r0
 8001c9c:	183a      	adds	r2, r7, r0
 8001c9e:	8812      	ldrh	r2, [r2, #0]
 8001ca0:	2180      	movs	r1, #128	; 0x80
 8001ca2:	0189      	lsls	r1, r1, #6
 8001ca4:	404a      	eors	r2, r1
 8001ca6:	801a      	strh	r2, [r3, #0]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	001a      	movs	r2, r3
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	18d3      	adds	r3, r2, r3
 8001cb6:	183a      	adds	r2, r7, r0
 8001cb8:	8812      	ldrh	r2, [r2, #0]
 8001cba:	495e      	ldr	r1, [pc, #376]	; (8001e34 <HAL_PCD_EP_DB_Receive+0x228>)
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	b292      	uxth	r2, r2
 8001cc0:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001cc2:	1dbb      	adds	r3, r7, #6
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	2240      	movs	r2, #64	; 0x40
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d01a      	beq.n	8001d02 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	001a      	movs	r2, r3
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	18d3      	adds	r3, r2, r3
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	2016      	movs	r0, #22
 8001ce0:	183b      	adds	r3, r7, r0
 8001ce2:	4955      	ldr	r1, [pc, #340]	; (8001e38 <HAL_PCD_EP_DB_Receive+0x22c>)
 8001ce4:	400a      	ands	r2, r1
 8001ce6:	801a      	strh	r2, [r3, #0]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	001a      	movs	r2, r3
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	18d3      	adds	r3, r2, r3
 8001cf6:	183a      	adds	r2, r7, r0
 8001cf8:	8812      	ldrh	r2, [r2, #0]
 8001cfa:	4950      	ldr	r1, [pc, #320]	; (8001e3c <HAL_PCD_EP_DB_Receive+0x230>)
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	b292      	uxth	r2, r2
 8001d00:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001d02:	241a      	movs	r4, #26
 8001d04:	193b      	adds	r3, r7, r4
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d100      	bne.n	8001d0e <HAL_PCD_EP_DB_Receive+0x102>
 8001d0c:	e086      	b.n	8001e1c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6818      	ldr	r0, [r3, #0]
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	6959      	ldr	r1, [r3, #20]
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	891a      	ldrh	r2, [r3, #8]
 8001d1a:	193b      	adds	r3, r7, r4
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	f003 fcda 	bl	80056d6 <USB_ReadPMA>
 8001d22:	e07b      	b.n	8001e1c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2250      	movs	r2, #80	; 0x50
 8001d2a:	5a9b      	ldrh	r3, [r3, r2]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	001a      	movs	r2, r3
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	18d2      	adds	r2, r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	18d3      	adds	r3, r2, r3
 8001d3e:	4a40      	ldr	r2, [pc, #256]	; (8001e40 <HAL_PCD_EP_DB_Receive+0x234>)
 8001d40:	4694      	mov	ip, r2
 8001d42:	4463      	add	r3, ip
 8001d44:	881a      	ldrh	r2, [r3, #0]
 8001d46:	211a      	movs	r1, #26
 8001d48:	187b      	adds	r3, r7, r1
 8001d4a:	0592      	lsls	r2, r2, #22
 8001d4c:	0d92      	lsrs	r2, r2, #22
 8001d4e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	699a      	ldr	r2, [r3, #24]
 8001d54:	187b      	adds	r3, r7, r1
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d307      	bcc.n	8001d6c <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	699a      	ldr	r2, [r3, #24]
 8001d60:	187b      	adds	r3, r7, r1
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	1ad2      	subs	r2, r2, r3
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	619a      	str	r2, [r3, #24]
 8001d6a:	e002      	b.n	8001d72 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d121      	bne.n	8001dbe <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	001a      	movs	r2, r3
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	18d3      	adds	r3, r2, r3
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	201e      	movs	r0, #30
 8001d8e:	183b      	adds	r3, r7, r0
 8001d90:	4927      	ldr	r1, [pc, #156]	; (8001e30 <HAL_PCD_EP_DB_Receive+0x224>)
 8001d92:	400a      	ands	r2, r1
 8001d94:	801a      	strh	r2, [r3, #0]
 8001d96:	183b      	adds	r3, r7, r0
 8001d98:	183a      	adds	r2, r7, r0
 8001d9a:	8812      	ldrh	r2, [r2, #0]
 8001d9c:	2180      	movs	r1, #128	; 0x80
 8001d9e:	0189      	lsls	r1, r1, #6
 8001da0:	404a      	eors	r2, r1
 8001da2:	801a      	strh	r2, [r3, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	001a      	movs	r2, r3
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	18d3      	adds	r3, r2, r3
 8001db2:	183a      	adds	r2, r7, r0
 8001db4:	8812      	ldrh	r2, [r2, #0]
 8001db6:	491f      	ldr	r1, [pc, #124]	; (8001e34 <HAL_PCD_EP_DB_Receive+0x228>)
 8001db8:	430a      	orrs	r2, r1
 8001dba:	b292      	uxth	r2, r2
 8001dbc:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001dbe:	1dbb      	adds	r3, r7, #6
 8001dc0:	881b      	ldrh	r3, [r3, #0]
 8001dc2:	2240      	movs	r2, #64	; 0x40
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d11a      	bne.n	8001dfe <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	001a      	movs	r2, r3
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	18d3      	adds	r3, r2, r3
 8001dd6:	881b      	ldrh	r3, [r3, #0]
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	201c      	movs	r0, #28
 8001ddc:	183b      	adds	r3, r7, r0
 8001dde:	4916      	ldr	r1, [pc, #88]	; (8001e38 <HAL_PCD_EP_DB_Receive+0x22c>)
 8001de0:	400a      	ands	r2, r1
 8001de2:	801a      	strh	r2, [r3, #0]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	001a      	movs	r2, r3
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	18d3      	adds	r3, r2, r3
 8001df2:	183a      	adds	r2, r7, r0
 8001df4:	8812      	ldrh	r2, [r2, #0]
 8001df6:	4911      	ldr	r1, [pc, #68]	; (8001e3c <HAL_PCD_EP_DB_Receive+0x230>)
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	b292      	uxth	r2, r2
 8001dfc:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001dfe:	241a      	movs	r4, #26
 8001e00:	193b      	adds	r3, r7, r4
 8001e02:	881b      	ldrh	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d009      	beq.n	8001e1c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6818      	ldr	r0, [r3, #0]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	6959      	ldr	r1, [r3, #20]
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	895a      	ldrh	r2, [r3, #10]
 8001e14:	193b      	adds	r3, r7, r4
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	f003 fc5d 	bl	80056d6 <USB_ReadPMA>
    }
  }

  return count;
 8001e1c:	231a      	movs	r3, #26
 8001e1e:	18fb      	adds	r3, r7, r3
 8001e20:	881b      	ldrh	r3, [r3, #0]
}
 8001e22:	0018      	movs	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	b009      	add	sp, #36	; 0x24
 8001e28:	bd90      	pop	{r4, r7, pc}
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	00000402 	.word	0x00000402
 8001e30:	ffffbf8f 	.word	0xffffbf8f
 8001e34:	ffff8080 	.word	0xffff8080
 8001e38:	ffff8f8f 	.word	0xffff8f8f
 8001e3c:	ffff80c0 	.word	0xffff80c0
 8001e40:	00000406 	.word	0x00000406

08001e44 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b0a4      	sub	sp, #144	; 0x90
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	1dbb      	adds	r3, r7, #6
 8001e50:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e52:	1dbb      	adds	r3, r7, #6
 8001e54:	881b      	ldrh	r3, [r3, #0]
 8001e56:	2240      	movs	r2, #64	; 0x40
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d100      	bne.n	8001e5e <HAL_PCD_EP_DB_Transmit+0x1a>
 8001e5c:	e1e4      	b.n	8002228 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2250      	movs	r2, #80	; 0x50
 8001e64:	5a9b      	ldrh	r3, [r3, r2]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	001a      	movs	r2, r3
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	18d2      	adds	r2, r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	18d3      	adds	r3, r2, r3
 8001e78:	4ad0      	ldr	r2, [pc, #832]	; (80021bc <HAL_PCD_EP_DB_Transmit+0x378>)
 8001e7a:	4694      	mov	ip, r2
 8001e7c:	4463      	add	r3, ip
 8001e7e:	881a      	ldrh	r2, [r3, #0]
 8001e80:	2186      	movs	r1, #134	; 0x86
 8001e82:	187b      	adds	r3, r7, r1
 8001e84:	0592      	lsls	r2, r2, #22
 8001e86:	0d92      	lsrs	r2, r2, #22
 8001e88:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	699a      	ldr	r2, [r3, #24]
 8001e8e:	187b      	adds	r3, r7, r1
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d907      	bls.n	8001ea6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	699a      	ldr	r2, [r3, #24]
 8001e9a:	187b      	adds	r3, r7, r1
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	1ad2      	subs	r2, r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	619a      	str	r2, [r3, #24]
 8001ea4:	e002      	b.n	8001eac <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d000      	beq.n	8001eb6 <HAL_PCD_EP_DB_Transmit+0x72>
 8001eb4:	e0b5      	b.n	8002022 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	785b      	ldrb	r3, [r3, #1]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d125      	bne.n	8001f0a <HAL_PCD_EP_DB_Transmit+0xc6>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2250      	movs	r2, #80	; 0x50
 8001eca:	5a9b      	ldrh	r3, [r3, r2]
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	001a      	movs	r2, r3
 8001ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed2:	189b      	adds	r3, r3, r2
 8001ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	00da      	lsls	r2, r3, #3
 8001edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ede:	18d3      	adds	r3, r2, r3
 8001ee0:	4ab6      	ldr	r2, [pc, #728]	; (80021bc <HAL_PCD_EP_DB_Transmit+0x378>)
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	4463      	add	r3, ip
 8001ee6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	059b      	lsls	r3, r3, #22
 8001ef0:	0d9b      	lsrs	r3, r3, #22
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef6:	801a      	strh	r2, [r3, #0]
 8001ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	4ab0      	ldr	r2, [pc, #704]	; (80021c0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f06:	801a      	strh	r2, [r3, #0]
 8001f08:	e01b      	b.n	8001f42 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	785b      	ldrb	r3, [r3, #1]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d117      	bne.n	8001f42 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	637b      	str	r3, [r7, #52]	; 0x34
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2250      	movs	r2, #80	; 0x50
 8001f1e:	5a9b      	ldrh	r3, [r3, r2]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	001a      	movs	r2, r3
 8001f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f26:	189b      	adds	r3, r3, r2
 8001f28:	637b      	str	r3, [r7, #52]	; 0x34
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	00da      	lsls	r2, r3, #3
 8001f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f32:	18d3      	adds	r3, r2, r3
 8001f34:	4aa1      	ldr	r2, [pc, #644]	; (80021bc <HAL_PCD_EP_DB_Transmit+0x378>)
 8001f36:	4694      	mov	ip, r2
 8001f38:	4463      	add	r3, ip
 8001f3a:	633b      	str	r3, [r7, #48]	; 0x30
 8001f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f3e:	2200      	movs	r2, #0
 8001f40:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	785b      	ldrb	r3, [r3, #1]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d125      	bne.n	8001f9c <HAL_PCD_EP_DB_Transmit+0x158>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	61fb      	str	r3, [r7, #28]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2250      	movs	r2, #80	; 0x50
 8001f5c:	5a9b      	ldrh	r3, [r3, r2]
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	001a      	movs	r2, r3
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	189b      	adds	r3, r3, r2
 8001f66:	61fb      	str	r3, [r7, #28]
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	00da      	lsls	r2, r3, #3
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	18d3      	adds	r3, r2, r3
 8001f72:	4a94      	ldr	r2, [pc, #592]	; (80021c4 <HAL_PCD_EP_DB_Transmit+0x380>)
 8001f74:	4694      	mov	ip, r2
 8001f76:	4463      	add	r3, ip
 8001f78:	61bb      	str	r3, [r7, #24]
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	059b      	lsls	r3, r3, #22
 8001f82:	0d9b      	lsrs	r3, r3, #22
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	801a      	strh	r2, [r3, #0]
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	4a8b      	ldr	r2, [pc, #556]	; (80021c0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	801a      	strh	r2, [r3, #0]
 8001f9a:	e018      	b.n	8001fce <HAL_PCD_EP_DB_Transmit+0x18a>
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	785b      	ldrb	r3, [r3, #1]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d114      	bne.n	8001fce <HAL_PCD_EP_DB_Transmit+0x18a>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2250      	movs	r2, #80	; 0x50
 8001faa:	5a9b      	ldrh	r3, [r3, r2]
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	001a      	movs	r2, r3
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	189b      	adds	r3, r3, r2
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	00da      	lsls	r2, r3, #3
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	18d3      	adds	r3, r2, r3
 8001fc0:	4a80      	ldr	r2, [pc, #512]	; (80021c4 <HAL_PCD_EP_DB_Transmit+0x380>)
 8001fc2:	4694      	mov	ip, r2
 8001fc4:	4463      	add	r3, ip
 8001fc6:	623b      	str	r3, [r7, #32]
 8001fc8:	6a3b      	ldr	r3, [r7, #32]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	781a      	ldrb	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	0011      	movs	r1, r2
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	f005 f932 	bl	8007240 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001fdc:	1dbb      	adds	r3, r7, #6
 8001fde:	881a      	ldrh	r2, [r3, #0]
 8001fe0:	2380      	movs	r3, #128	; 0x80
 8001fe2:	01db      	lsls	r3, r3, #7
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d100      	bne.n	8001fea <HAL_PCD_EP_DB_Transmit+0x1a6>
 8001fe8:	e309      	b.n	80025fe <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	001a      	movs	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	18d3      	adds	r3, r2, r3
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	2016      	movs	r0, #22
 8001ffe:	183b      	adds	r3, r7, r0
 8002000:	4971      	ldr	r1, [pc, #452]	; (80021c8 <HAL_PCD_EP_DB_Transmit+0x384>)
 8002002:	400a      	ands	r2, r1
 8002004:	801a      	strh	r2, [r3, #0]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	001a      	movs	r2, r3
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	18d3      	adds	r3, r2, r3
 8002014:	183a      	adds	r2, r7, r0
 8002016:	8812      	ldrh	r2, [r2, #0]
 8002018:	496c      	ldr	r1, [pc, #432]	; (80021cc <HAL_PCD_EP_DB_Transmit+0x388>)
 800201a:	430a      	orrs	r2, r1
 800201c:	b292      	uxth	r2, r2
 800201e:	801a      	strh	r2, [r3, #0]
 8002020:	e2ed      	b.n	80025fe <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002022:	1dbb      	adds	r3, r7, #6
 8002024:	881a      	ldrh	r2, [r3, #0]
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	01db      	lsls	r3, r3, #7
 800202a:	4013      	ands	r3, r2
 800202c:	d01a      	beq.n	8002064 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	001a      	movs	r2, r3
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	18d3      	adds	r3, r2, r3
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	b29a      	uxth	r2, r3
 8002040:	208a      	movs	r0, #138	; 0x8a
 8002042:	183b      	adds	r3, r7, r0
 8002044:	4960      	ldr	r1, [pc, #384]	; (80021c8 <HAL_PCD_EP_DB_Transmit+0x384>)
 8002046:	400a      	ands	r2, r1
 8002048:	801a      	strh	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	001a      	movs	r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	18d3      	adds	r3, r2, r3
 8002058:	183a      	adds	r2, r7, r0
 800205a:	8812      	ldrh	r2, [r2, #0]
 800205c:	495b      	ldr	r1, [pc, #364]	; (80021cc <HAL_PCD_EP_DB_Transmit+0x388>)
 800205e:	430a      	orrs	r2, r1
 8002060:	b292      	uxth	r2, r2
 8002062:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	2224      	movs	r2, #36	; 0x24
 8002068:	5c9b      	ldrb	r3, [r3, r2]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d000      	beq.n	8002070 <HAL_PCD_EP_DB_Transmit+0x22c>
 800206e:	e2c6      	b.n	80025fe <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	695a      	ldr	r2, [r3, #20]
 8002074:	2186      	movs	r1, #134	; 0x86
 8002076:	187b      	adds	r3, r7, r1
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	18d2      	adds	r2, r2, r3
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	69da      	ldr	r2, [r3, #28]
 8002084:	187b      	adds	r3, r7, r1
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	18d2      	adds	r2, r2, r3
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	6a1a      	ldr	r2, [r3, #32]
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	429a      	cmp	r2, r3
 8002098:	d30c      	bcc.n	80020b4 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	218c      	movs	r1, #140	; 0x8c
 80020a0:	187a      	adds	r2, r7, r1
 80020a2:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	6a1a      	ldr	r2, [r3, #32]
 80020a8:	187b      	adds	r3, r7, r1
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	1ad2      	subs	r2, r2, r3
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	621a      	str	r2, [r3, #32]
 80020b2:	e01a      	b.n	80020ea <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d10a      	bne.n	80020d2 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80020bc:	2386      	movs	r3, #134	; 0x86
 80020be:	18fb      	adds	r3, r7, r3
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	228c      	movs	r2, #140	; 0x8c
 80020c4:	18ba      	adds	r2, r7, r2
 80020c6:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2224      	movs	r2, #36	; 0x24
 80020cc:	2100      	movs	r1, #0
 80020ce:	5499      	strb	r1, [r3, r2]
 80020d0:	e00b      	b.n	80020ea <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2224      	movs	r2, #36	; 0x24
 80020d6:	2100      	movs	r1, #0
 80020d8:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	228c      	movs	r2, #140	; 0x8c
 80020e0:	18ba      	adds	r2, r7, r2
 80020e2:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2200      	movs	r2, #0
 80020e8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	785b      	ldrb	r3, [r3, #1]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d000      	beq.n	80020f4 <HAL_PCD_EP_DB_Transmit+0x2b0>
 80020f2:	e06d      	b.n	80021d0 <HAL_PCD_EP_DB_Transmit+0x38c>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2250      	movs	r2, #80	; 0x50
 8002100:	5a9b      	ldrh	r3, [r3, r2]
 8002102:	b29b      	uxth	r3, r3
 8002104:	001a      	movs	r2, r3
 8002106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002108:	189b      	adds	r3, r3, r2
 800210a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	00da      	lsls	r2, r3, #3
 8002112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002114:	18d3      	adds	r3, r2, r3
 8002116:	4a29      	ldr	r2, [pc, #164]	; (80021bc <HAL_PCD_EP_DB_Transmit+0x378>)
 8002118:	4694      	mov	ip, r2
 800211a:	4463      	add	r3, ip
 800211c:	63bb      	str	r3, [r7, #56]	; 0x38
 800211e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	b29b      	uxth	r3, r3
 8002124:	059b      	lsls	r3, r3, #22
 8002126:	0d9b      	lsrs	r3, r3, #22
 8002128:	b29a      	uxth	r2, r3
 800212a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800212c:	801a      	strh	r2, [r3, #0]
 800212e:	228c      	movs	r2, #140	; 0x8c
 8002130:	18bb      	adds	r3, r7, r2
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b3e      	cmp	r3, #62	; 0x3e
 8002136:	d91a      	bls.n	800216e <HAL_PCD_EP_DB_Transmit+0x32a>
 8002138:	18bb      	adds	r3, r7, r2
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	095b      	lsrs	r3, r3, #5
 800213e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002140:	18bb      	adds	r3, r7, r2
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	221f      	movs	r2, #31
 8002146:	4013      	ands	r3, r2
 8002148:	d102      	bne.n	8002150 <HAL_PCD_EP_DB_Transmit+0x30c>
 800214a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800214c:	3b01      	subs	r3, #1
 800214e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	b29a      	uxth	r2, r3
 8002156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002158:	b29b      	uxth	r3, r3
 800215a:	029b      	lsls	r3, r3, #10
 800215c:	b29b      	uxth	r3, r3
 800215e:	4313      	orrs	r3, r2
 8002160:	b29b      	uxth	r3, r3
 8002162:	4a17      	ldr	r2, [pc, #92]	; (80021c0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8002164:	4313      	orrs	r3, r2
 8002166:	b29a      	uxth	r2, r3
 8002168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800216a:	801a      	strh	r2, [r3, #0]
 800216c:	e04f      	b.n	800220e <HAL_PCD_EP_DB_Transmit+0x3ca>
 800216e:	238c      	movs	r3, #140	; 0x8c
 8002170:	18fb      	adds	r3, r7, r3
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d108      	bne.n	800218a <HAL_PCD_EP_DB_Transmit+0x346>
 8002178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800217a:	881b      	ldrh	r3, [r3, #0]
 800217c:	b29b      	uxth	r3, r3
 800217e:	4a10      	ldr	r2, [pc, #64]	; (80021c0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8002180:	4313      	orrs	r3, r2
 8002182:	b29a      	uxth	r2, r3
 8002184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002186:	801a      	strh	r2, [r3, #0]
 8002188:	e041      	b.n	800220e <HAL_PCD_EP_DB_Transmit+0x3ca>
 800218a:	228c      	movs	r2, #140	; 0x8c
 800218c:	18bb      	adds	r3, r7, r2
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	085b      	lsrs	r3, r3, #1
 8002192:	64bb      	str	r3, [r7, #72]	; 0x48
 8002194:	18bb      	adds	r3, r7, r2
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2201      	movs	r2, #1
 800219a:	4013      	ands	r3, r2
 800219c:	d002      	beq.n	80021a4 <HAL_PCD_EP_DB_Transmit+0x360>
 800219e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021a0:	3301      	adds	r3, #1
 80021a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80021a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	029b      	lsls	r3, r3, #10
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	4313      	orrs	r3, r2
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b8:	801a      	strh	r2, [r3, #0]
 80021ba:	e028      	b.n	800220e <HAL_PCD_EP_DB_Transmit+0x3ca>
 80021bc:	00000402 	.word	0x00000402
 80021c0:	ffff8000 	.word	0xffff8000
 80021c4:	00000406 	.word	0x00000406
 80021c8:	ffff8f8f 	.word	0xffff8f8f
 80021cc:	ffffc080 	.word	0xffffc080
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	785b      	ldrb	r3, [r3, #1]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d11a      	bne.n	800220e <HAL_PCD_EP_DB_Transmit+0x3ca>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	647b      	str	r3, [r7, #68]	; 0x44
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2250      	movs	r2, #80	; 0x50
 80021e4:	5a9b      	ldrh	r3, [r3, r2]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	001a      	movs	r2, r3
 80021ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021ec:	189b      	adds	r3, r3, r2
 80021ee:	647b      	str	r3, [r7, #68]	; 0x44
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	00da      	lsls	r2, r3, #3
 80021f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021f8:	18d3      	adds	r3, r2, r3
 80021fa:	4adb      	ldr	r2, [pc, #876]	; (8002568 <HAL_PCD_EP_DB_Transmit+0x724>)
 80021fc:	4694      	mov	ip, r2
 80021fe:	4463      	add	r3, ip
 8002200:	643b      	str	r3, [r7, #64]	; 0x40
 8002202:	238c      	movs	r3, #140	; 0x8c
 8002204:	18fb      	adds	r3, r7, r3
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	b29a      	uxth	r2, r3
 800220a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800220c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6818      	ldr	r0, [r3, #0]
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	6959      	ldr	r1, [r3, #20]
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	891a      	ldrh	r2, [r3, #8]
 800221a:	238c      	movs	r3, #140	; 0x8c
 800221c:	18fb      	adds	r3, r7, r3
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	b29b      	uxth	r3, r3
 8002222:	f003 fa0f 	bl	8005644 <USB_WritePMA>
 8002226:	e1ea      	b.n	80025fe <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2250      	movs	r2, #80	; 0x50
 800222e:	5a9b      	ldrh	r3, [r3, r2]
 8002230:	b29b      	uxth	r3, r3
 8002232:	001a      	movs	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	18d2      	adds	r2, r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	18d3      	adds	r3, r2, r3
 8002242:	4aca      	ldr	r2, [pc, #808]	; (800256c <HAL_PCD_EP_DB_Transmit+0x728>)
 8002244:	4694      	mov	ip, r2
 8002246:	4463      	add	r3, ip
 8002248:	881a      	ldrh	r2, [r3, #0]
 800224a:	2186      	movs	r1, #134	; 0x86
 800224c:	187b      	adds	r3, r7, r1
 800224e:	0592      	lsls	r2, r2, #22
 8002250:	0d92      	lsrs	r2, r2, #22
 8002252:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	699a      	ldr	r2, [r3, #24]
 8002258:	187b      	adds	r3, r7, r1
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	429a      	cmp	r2, r3
 800225e:	d307      	bcc.n	8002270 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	699a      	ldr	r2, [r3, #24]
 8002264:	187b      	adds	r3, r7, r1
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	1ad2      	subs	r2, r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	619a      	str	r2, [r3, #24]
 800226e:	e002      	b.n	8002276 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2200      	movs	r2, #0
 8002274:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d000      	beq.n	8002280 <HAL_PCD_EP_DB_Transmit+0x43c>
 800227e:	e0bb      	b.n	80023f8 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	785b      	ldrb	r3, [r3, #1]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d125      	bne.n	80022d4 <HAL_PCD_EP_DB_Transmit+0x490>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2250      	movs	r2, #80	; 0x50
 8002294:	5a9b      	ldrh	r3, [r3, r2]
 8002296:	b29b      	uxth	r3, r3
 8002298:	001a      	movs	r2, r3
 800229a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800229c:	189b      	adds	r3, r3, r2
 800229e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	00da      	lsls	r2, r3, #3
 80022a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022a8:	18d3      	adds	r3, r2, r3
 80022aa:	4aaf      	ldr	r2, [pc, #700]	; (8002568 <HAL_PCD_EP_DB_Transmit+0x724>)
 80022ac:	4694      	mov	ip, r2
 80022ae:	4463      	add	r3, ip
 80022b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80022b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	059b      	lsls	r3, r3, #22
 80022ba:	0d9b      	lsrs	r3, r3, #22
 80022bc:	b29a      	uxth	r2, r3
 80022be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022c0:	801a      	strh	r2, [r3, #0]
 80022c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022c4:	881b      	ldrh	r3, [r3, #0]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	4aa9      	ldr	r2, [pc, #676]	; (8002570 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022d0:	801a      	strh	r2, [r3, #0]
 80022d2:	e01b      	b.n	800230c <HAL_PCD_EP_DB_Transmit+0x4c8>
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	785b      	ldrb	r3, [r3, #1]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d117      	bne.n	800230c <HAL_PCD_EP_DB_Transmit+0x4c8>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	667b      	str	r3, [r7, #100]	; 0x64
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2250      	movs	r2, #80	; 0x50
 80022e8:	5a9b      	ldrh	r3, [r3, r2]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	001a      	movs	r2, r3
 80022ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022f0:	189b      	adds	r3, r3, r2
 80022f2:	667b      	str	r3, [r7, #100]	; 0x64
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	00da      	lsls	r2, r3, #3
 80022fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022fc:	18d3      	adds	r3, r2, r3
 80022fe:	4a9a      	ldr	r2, [pc, #616]	; (8002568 <HAL_PCD_EP_DB_Transmit+0x724>)
 8002300:	4694      	mov	ip, r2
 8002302:	4463      	add	r3, ip
 8002304:	663b      	str	r3, [r7, #96]	; 0x60
 8002306:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002308:	2200      	movs	r2, #0
 800230a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	677b      	str	r3, [r7, #116]	; 0x74
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	785b      	ldrb	r3, [r3, #1]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d12b      	bne.n	8002372 <HAL_PCD_EP_DB_Transmit+0x52e>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2250      	movs	r2, #80	; 0x50
 8002326:	5a9b      	ldrh	r3, [r3, r2]
 8002328:	b29b      	uxth	r3, r3
 800232a:	001a      	movs	r2, r3
 800232c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800232e:	189b      	adds	r3, r3, r2
 8002330:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	00da      	lsls	r2, r3, #3
 8002338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800233a:	18d3      	adds	r3, r2, r3
 800233c:	4a8b      	ldr	r2, [pc, #556]	; (800256c <HAL_PCD_EP_DB_Transmit+0x728>)
 800233e:	4694      	mov	ip, r2
 8002340:	4463      	add	r3, ip
 8002342:	2180      	movs	r1, #128	; 0x80
 8002344:	187a      	adds	r2, r7, r1
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	187b      	adds	r3, r7, r1
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	b29b      	uxth	r3, r3
 8002350:	059b      	lsls	r3, r3, #22
 8002352:	0d9b      	lsrs	r3, r3, #22
 8002354:	b29a      	uxth	r2, r3
 8002356:	187b      	adds	r3, r7, r1
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	801a      	strh	r2, [r3, #0]
 800235c:	187b      	adds	r3, r7, r1
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	b29b      	uxth	r3, r3
 8002364:	4a82      	ldr	r2, [pc, #520]	; (8002570 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002366:	4313      	orrs	r3, r2
 8002368:	b29a      	uxth	r2, r3
 800236a:	187b      	adds	r3, r7, r1
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	801a      	strh	r2, [r3, #0]
 8002370:	e018      	b.n	80023a4 <HAL_PCD_EP_DB_Transmit+0x560>
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	785b      	ldrb	r3, [r3, #1]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d114      	bne.n	80023a4 <HAL_PCD_EP_DB_Transmit+0x560>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2250      	movs	r2, #80	; 0x50
 8002380:	5a9b      	ldrh	r3, [r3, r2]
 8002382:	b29b      	uxth	r3, r3
 8002384:	001a      	movs	r2, r3
 8002386:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002388:	189b      	adds	r3, r3, r2
 800238a:	677b      	str	r3, [r7, #116]	; 0x74
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	00da      	lsls	r2, r3, #3
 8002392:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002394:	18d3      	adds	r3, r2, r3
 8002396:	4a75      	ldr	r2, [pc, #468]	; (800256c <HAL_PCD_EP_DB_Transmit+0x728>)
 8002398:	4694      	mov	ip, r2
 800239a:	4463      	add	r3, ip
 800239c:	673b      	str	r3, [r7, #112]	; 0x70
 800239e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023a0:	2200      	movs	r2, #0
 80023a2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	781a      	ldrb	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	0011      	movs	r1, r2
 80023ac:	0018      	movs	r0, r3
 80023ae:	f004 ff47 	bl	8007240 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80023b2:	1dbb      	adds	r3, r7, #6
 80023b4:	881a      	ldrh	r2, [r3, #0]
 80023b6:	2380      	movs	r3, #128	; 0x80
 80023b8:	01db      	lsls	r3, r3, #7
 80023ba:	4013      	ands	r3, r2
 80023bc:	d000      	beq.n	80023c0 <HAL_PCD_EP_DB_Transmit+0x57c>
 80023be:	e11e      	b.n	80025fe <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	001a      	movs	r2, r3
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	18d3      	adds	r3, r2, r3
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	2088      	movs	r0, #136	; 0x88
 80023d4:	183b      	adds	r3, r7, r0
 80023d6:	4967      	ldr	r1, [pc, #412]	; (8002574 <HAL_PCD_EP_DB_Transmit+0x730>)
 80023d8:	400a      	ands	r2, r1
 80023da:	801a      	strh	r2, [r3, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	001a      	movs	r2, r3
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	18d3      	adds	r3, r2, r3
 80023ea:	183a      	adds	r2, r7, r0
 80023ec:	8812      	ldrh	r2, [r2, #0]
 80023ee:	4962      	ldr	r1, [pc, #392]	; (8002578 <HAL_PCD_EP_DB_Transmit+0x734>)
 80023f0:	430a      	orrs	r2, r1
 80023f2:	b292      	uxth	r2, r2
 80023f4:	801a      	strh	r2, [r3, #0]
 80023f6:	e102      	b.n	80025fe <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80023f8:	1dbb      	adds	r3, r7, #6
 80023fa:	881a      	ldrh	r2, [r3, #0]
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	01db      	lsls	r3, r3, #7
 8002400:	4013      	ands	r3, r2
 8002402:	d11a      	bne.n	800243a <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	001a      	movs	r2, r3
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	18d3      	adds	r3, r2, r3
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	b29a      	uxth	r2, r3
 8002416:	204e      	movs	r0, #78	; 0x4e
 8002418:	183b      	adds	r3, r7, r0
 800241a:	4956      	ldr	r1, [pc, #344]	; (8002574 <HAL_PCD_EP_DB_Transmit+0x730>)
 800241c:	400a      	ands	r2, r1
 800241e:	801a      	strh	r2, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	001a      	movs	r2, r3
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	18d3      	adds	r3, r2, r3
 800242e:	183a      	adds	r2, r7, r0
 8002430:	8812      	ldrh	r2, [r2, #0]
 8002432:	4951      	ldr	r1, [pc, #324]	; (8002578 <HAL_PCD_EP_DB_Transmit+0x734>)
 8002434:	430a      	orrs	r2, r1
 8002436:	b292      	uxth	r2, r2
 8002438:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2224      	movs	r2, #36	; 0x24
 800243e:	5c9b      	ldrb	r3, [r3, r2]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d000      	beq.n	8002446 <HAL_PCD_EP_DB_Transmit+0x602>
 8002444:	e0db      	b.n	80025fe <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	695a      	ldr	r2, [r3, #20]
 800244a:	2186      	movs	r1, #134	; 0x86
 800244c:	187b      	adds	r3, r7, r1
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	18d2      	adds	r2, r2, r3
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	69da      	ldr	r2, [r3, #28]
 800245a:	187b      	adds	r3, r7, r1
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	18d2      	adds	r2, r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	6a1a      	ldr	r2, [r3, #32]
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	429a      	cmp	r2, r3
 800246e:	d30c      	bcc.n	800248a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	218c      	movs	r1, #140	; 0x8c
 8002476:	187a      	adds	r2, r7, r1
 8002478:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	6a1a      	ldr	r2, [r3, #32]
 800247e:	187b      	adds	r3, r7, r1
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	1ad2      	subs	r2, r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	621a      	str	r2, [r3, #32]
 8002488:	e01a      	b.n	80024c0 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10a      	bne.n	80024a8 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8002492:	2386      	movs	r3, #134	; 0x86
 8002494:	18fb      	adds	r3, r7, r3
 8002496:	881b      	ldrh	r3, [r3, #0]
 8002498:	228c      	movs	r2, #140	; 0x8c
 800249a:	18ba      	adds	r2, r7, r2
 800249c:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2224      	movs	r2, #36	; 0x24
 80024a2:	2100      	movs	r1, #0
 80024a4:	5499      	strb	r1, [r3, r2]
 80024a6:	e00b      	b.n	80024c0 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	228c      	movs	r2, #140	; 0x8c
 80024ae:	18ba      	adds	r2, r7, r2
 80024b0:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2200      	movs	r2, #0
 80024b6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2224      	movs	r2, #36	; 0x24
 80024bc:	2100      	movs	r1, #0
 80024be:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	657b      	str	r3, [r7, #84]	; 0x54
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	785b      	ldrb	r3, [r3, #1]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d000      	beq.n	80024d0 <HAL_PCD_EP_DB_Transmit+0x68c>
 80024ce:	e06e      	b.n	80025ae <HAL_PCD_EP_DB_Transmit+0x76a>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2250      	movs	r2, #80	; 0x50
 80024dc:	5a9b      	ldrh	r3, [r3, r2]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	001a      	movs	r2, r3
 80024e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024e4:	189b      	adds	r3, r3, r2
 80024e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	00da      	lsls	r2, r3, #3
 80024ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024f0:	18d3      	adds	r3, r2, r3
 80024f2:	4a1e      	ldr	r2, [pc, #120]	; (800256c <HAL_PCD_EP_DB_Transmit+0x728>)
 80024f4:	4694      	mov	ip, r2
 80024f6:	4463      	add	r3, ip
 80024f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80024fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	b29b      	uxth	r3, r3
 8002500:	059b      	lsls	r3, r3, #22
 8002502:	0d9b      	lsrs	r3, r3, #22
 8002504:	b29a      	uxth	r2, r3
 8002506:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002508:	801a      	strh	r2, [r3, #0]
 800250a:	228c      	movs	r2, #140	; 0x8c
 800250c:	18bb      	adds	r3, r7, r2
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b3e      	cmp	r3, #62	; 0x3e
 8002512:	d91a      	bls.n	800254a <HAL_PCD_EP_DB_Transmit+0x706>
 8002514:	18bb      	adds	r3, r7, r2
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	095b      	lsrs	r3, r3, #5
 800251a:	66bb      	str	r3, [r7, #104]	; 0x68
 800251c:	18bb      	adds	r3, r7, r2
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	221f      	movs	r2, #31
 8002522:	4013      	ands	r3, r2
 8002524:	d102      	bne.n	800252c <HAL_PCD_EP_DB_Transmit+0x6e8>
 8002526:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002528:	3b01      	subs	r3, #1
 800252a:	66bb      	str	r3, [r7, #104]	; 0x68
 800252c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	b29a      	uxth	r2, r3
 8002532:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002534:	b29b      	uxth	r3, r3
 8002536:	029b      	lsls	r3, r3, #10
 8002538:	b29b      	uxth	r3, r3
 800253a:	4313      	orrs	r3, r2
 800253c:	b29b      	uxth	r3, r3
 800253e:	4a0c      	ldr	r2, [pc, #48]	; (8002570 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002540:	4313      	orrs	r3, r2
 8002542:	b29a      	uxth	r2, r3
 8002544:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002546:	801a      	strh	r2, [r3, #0]
 8002548:	e04d      	b.n	80025e6 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800254a:	238c      	movs	r3, #140	; 0x8c
 800254c:	18fb      	adds	r3, r7, r3
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d113      	bne.n	800257c <HAL_PCD_EP_DB_Transmit+0x738>
 8002554:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	b29b      	uxth	r3, r3
 800255a:	4a05      	ldr	r2, [pc, #20]	; (8002570 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800255c:	4313      	orrs	r3, r2
 800255e:	b29a      	uxth	r2, r3
 8002560:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002562:	801a      	strh	r2, [r3, #0]
 8002564:	e03f      	b.n	80025e6 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	00000402 	.word	0x00000402
 800256c:	00000406 	.word	0x00000406
 8002570:	ffff8000 	.word	0xffff8000
 8002574:	ffff8f8f 	.word	0xffff8f8f
 8002578:	ffffc080 	.word	0xffffc080
 800257c:	228c      	movs	r2, #140	; 0x8c
 800257e:	18bb      	adds	r3, r7, r2
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	085b      	lsrs	r3, r3, #1
 8002584:	66bb      	str	r3, [r7, #104]	; 0x68
 8002586:	18bb      	adds	r3, r7, r2
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2201      	movs	r2, #1
 800258c:	4013      	ands	r3, r2
 800258e:	d002      	beq.n	8002596 <HAL_PCD_EP_DB_Transmit+0x752>
 8002590:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002592:	3301      	adds	r3, #1
 8002594:	66bb      	str	r3, [r7, #104]	; 0x68
 8002596:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	b29a      	uxth	r2, r3
 800259c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800259e:	b29b      	uxth	r3, r3
 80025a0:	029b      	lsls	r3, r3, #10
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	4313      	orrs	r3, r2
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025aa:	801a      	strh	r2, [r3, #0]
 80025ac:	e01b      	b.n	80025e6 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	785b      	ldrb	r3, [r3, #1]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d117      	bne.n	80025e6 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2250      	movs	r2, #80	; 0x50
 80025bc:	5a9b      	ldrh	r3, [r3, r2]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	001a      	movs	r2, r3
 80025c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c4:	189b      	adds	r3, r3, r2
 80025c6:	657b      	str	r3, [r7, #84]	; 0x54
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	00da      	lsls	r2, r3, #3
 80025ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025d0:	18d3      	adds	r3, r2, r3
 80025d2:	4a21      	ldr	r2, [pc, #132]	; (8002658 <HAL_PCD_EP_DB_Transmit+0x814>)
 80025d4:	4694      	mov	ip, r2
 80025d6:	4463      	add	r3, ip
 80025d8:	653b      	str	r3, [r7, #80]	; 0x50
 80025da:	238c      	movs	r3, #140	; 0x8c
 80025dc:	18fb      	adds	r3, r7, r3
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025e4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6818      	ldr	r0, [r3, #0]
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	6959      	ldr	r1, [r3, #20]
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	895a      	ldrh	r2, [r3, #10]
 80025f2:	238c      	movs	r3, #140	; 0x8c
 80025f4:	18fb      	adds	r3, r7, r3
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	f003 f823 	bl	8005644 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	001a      	movs	r2, r3
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	18d3      	adds	r3, r2, r3
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	b29a      	uxth	r2, r3
 8002610:	2014      	movs	r0, #20
 8002612:	183b      	adds	r3, r7, r0
 8002614:	4911      	ldr	r1, [pc, #68]	; (800265c <HAL_PCD_EP_DB_Transmit+0x818>)
 8002616:	400a      	ands	r2, r1
 8002618:	801a      	strh	r2, [r3, #0]
 800261a:	183b      	adds	r3, r7, r0
 800261c:	183a      	adds	r2, r7, r0
 800261e:	8812      	ldrh	r2, [r2, #0]
 8002620:	2110      	movs	r1, #16
 8002622:	404a      	eors	r2, r1
 8002624:	801a      	strh	r2, [r3, #0]
 8002626:	183b      	adds	r3, r7, r0
 8002628:	183a      	adds	r2, r7, r0
 800262a:	8812      	ldrh	r2, [r2, #0]
 800262c:	2120      	movs	r1, #32
 800262e:	404a      	eors	r2, r1
 8002630:	801a      	strh	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	001a      	movs	r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	18d3      	adds	r3, r2, r3
 8002640:	183a      	adds	r2, r7, r0
 8002642:	8812      	ldrh	r2, [r2, #0]
 8002644:	4906      	ldr	r1, [pc, #24]	; (8002660 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8002646:	430a      	orrs	r2, r1
 8002648:	b292      	uxth	r2, r2
 800264a:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	0018      	movs	r0, r3
 8002650:	46bd      	mov	sp, r7
 8002652:	b024      	add	sp, #144	; 0x90
 8002654:	bd80      	pop	{r7, pc}
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	00000406 	.word	0x00000406
 800265c:	ffff8fbf 	.word	0xffff8fbf
 8002660:	ffff8080 	.word	0xffff8080

08002664 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002664:	b590      	push	{r4, r7, lr}
 8002666:	b087      	sub	sp, #28
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	0008      	movs	r0, r1
 800266e:	0011      	movs	r1, r2
 8002670:	607b      	str	r3, [r7, #4]
 8002672:	240a      	movs	r4, #10
 8002674:	193b      	adds	r3, r7, r4
 8002676:	1c02      	adds	r2, r0, #0
 8002678:	801a      	strh	r2, [r3, #0]
 800267a:	2308      	movs	r3, #8
 800267c:	18fb      	adds	r3, r7, r3
 800267e:	1c0a      	adds	r2, r1, #0
 8002680:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002682:	0021      	movs	r1, r4
 8002684:	187b      	adds	r3, r7, r1
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	2280      	movs	r2, #128	; 0x80
 800268a:	4013      	ands	r3, r2
 800268c:	b29b      	uxth	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00c      	beq.n	80026ac <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002692:	187b      	adds	r3, r7, r1
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	2207      	movs	r2, #7
 8002698:	4013      	ands	r3, r2
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	0013      	movs	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	189b      	adds	r3, r3, r2
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	18d3      	adds	r3, r2, r3
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	e00b      	b.n	80026c4 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026ac:	230a      	movs	r3, #10
 80026ae:	18fb      	adds	r3, r7, r3
 80026b0:	881a      	ldrh	r2, [r3, #0]
 80026b2:	0013      	movs	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	189b      	adds	r3, r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	3369      	adds	r3, #105	; 0x69
 80026bc:	33ff      	adds	r3, #255	; 0xff
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	18d3      	adds	r3, r2, r3
 80026c2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80026c4:	2308      	movs	r3, #8
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d107      	bne.n	80026de <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	2200      	movs	r2, #0
 80026d2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	80da      	strh	r2, [r3, #6]
 80026dc:	e00b      	b.n	80026f6 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	2201      	movs	r2, #1
 80026e2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	0c1b      	lsrs	r3, r3, #16
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	0018      	movs	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b007      	add	sp, #28
 80026fe:	bd90      	pop	{r4, r7, pc}

08002700 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	23ba      	movs	r3, #186	; 0xba
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	2101      	movs	r1, #1
 8002716:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	23b8      	movs	r3, #184	; 0xb8
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	2100      	movs	r1, #0
 8002720:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2254      	movs	r2, #84	; 0x54
 8002726:	5a9b      	ldrh	r3, [r3, r2]
 8002728:	b29b      	uxth	r3, r3
 800272a:	2201      	movs	r2, #1
 800272c:	4313      	orrs	r3, r2
 800272e:	b299      	uxth	r1, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2254      	movs	r2, #84	; 0x54
 8002734:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2254      	movs	r2, #84	; 0x54
 800273a:	5a9b      	ldrh	r3, [r3, r2]
 800273c:	b29b      	uxth	r3, r3
 800273e:	2202      	movs	r2, #2
 8002740:	4313      	orrs	r3, r2
 8002742:	b299      	uxth	r1, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2254      	movs	r2, #84	; 0x54
 8002748:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	0018      	movs	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	b004      	add	sp, #16
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	000a      	movs	r2, r1
 800275e:	1cfb      	adds	r3, r7, #3
 8002760:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	46bd      	mov	sp, r7
 8002766:	b002      	add	sp, #8
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800276c:	b5b0      	push	{r4, r5, r7, lr}
 800276e:	b08a      	sub	sp, #40	; 0x28
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d102      	bne.n	8002780 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	f000 fbaf 	bl	8002ede <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002780:	4bcf      	ldr	r3, [pc, #828]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	220c      	movs	r2, #12
 8002786:	4013      	ands	r3, r2
 8002788:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800278a:	4bcd      	ldr	r3, [pc, #820]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	2380      	movs	r3, #128	; 0x80
 8002790:	025b      	lsls	r3, r3, #9
 8002792:	4013      	ands	r3, r2
 8002794:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2201      	movs	r2, #1
 800279c:	4013      	ands	r3, r2
 800279e:	d100      	bne.n	80027a2 <HAL_RCC_OscConfig+0x36>
 80027a0:	e07e      	b.n	80028a0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	d007      	beq.n	80027b8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	2b0c      	cmp	r3, #12
 80027ac:	d112      	bne.n	80027d4 <HAL_RCC_OscConfig+0x68>
 80027ae:	69fa      	ldr	r2, [r7, #28]
 80027b0:	2380      	movs	r3, #128	; 0x80
 80027b2:	025b      	lsls	r3, r3, #9
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d10d      	bne.n	80027d4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b8:	4bc1      	ldr	r3, [pc, #772]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	2380      	movs	r3, #128	; 0x80
 80027be:	029b      	lsls	r3, r3, #10
 80027c0:	4013      	ands	r3, r2
 80027c2:	d100      	bne.n	80027c6 <HAL_RCC_OscConfig+0x5a>
 80027c4:	e06b      	b.n	800289e <HAL_RCC_OscConfig+0x132>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d167      	bne.n	800289e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	f000 fb85 	bl	8002ede <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	2380      	movs	r3, #128	; 0x80
 80027da:	025b      	lsls	r3, r3, #9
 80027dc:	429a      	cmp	r2, r3
 80027de:	d107      	bne.n	80027f0 <HAL_RCC_OscConfig+0x84>
 80027e0:	4bb7      	ldr	r3, [pc, #732]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4bb6      	ldr	r3, [pc, #728]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 80027e6:	2180      	movs	r1, #128	; 0x80
 80027e8:	0249      	lsls	r1, r1, #9
 80027ea:	430a      	orrs	r2, r1
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	e027      	b.n	8002840 <HAL_RCC_OscConfig+0xd4>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	23a0      	movs	r3, #160	; 0xa0
 80027f6:	02db      	lsls	r3, r3, #11
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d10e      	bne.n	800281a <HAL_RCC_OscConfig+0xae>
 80027fc:	4bb0      	ldr	r3, [pc, #704]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	4baf      	ldr	r3, [pc, #700]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 8002802:	2180      	movs	r1, #128	; 0x80
 8002804:	02c9      	lsls	r1, r1, #11
 8002806:	430a      	orrs	r2, r1
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	4bad      	ldr	r3, [pc, #692]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	4bac      	ldr	r3, [pc, #688]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 8002810:	2180      	movs	r1, #128	; 0x80
 8002812:	0249      	lsls	r1, r1, #9
 8002814:	430a      	orrs	r2, r1
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	e012      	b.n	8002840 <HAL_RCC_OscConfig+0xd4>
 800281a:	4ba9      	ldr	r3, [pc, #676]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	4ba8      	ldr	r3, [pc, #672]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 8002820:	49a8      	ldr	r1, [pc, #672]	; (8002ac4 <HAL_RCC_OscConfig+0x358>)
 8002822:	400a      	ands	r2, r1
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	4ba6      	ldr	r3, [pc, #664]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	2380      	movs	r3, #128	; 0x80
 800282c:	025b      	lsls	r3, r3, #9
 800282e:	4013      	ands	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4ba2      	ldr	r3, [pc, #648]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	4ba1      	ldr	r3, [pc, #644]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 800283a:	49a3      	ldr	r1, [pc, #652]	; (8002ac8 <HAL_RCC_OscConfig+0x35c>)
 800283c:	400a      	ands	r2, r1
 800283e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d015      	beq.n	8002874 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002848:	f7fe f84c 	bl	80008e4 <HAL_GetTick>
 800284c:	0003      	movs	r3, r0
 800284e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002850:	e009      	b.n	8002866 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002852:	f7fe f847 	bl	80008e4 <HAL_GetTick>
 8002856:	0002      	movs	r2, r0
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b64      	cmp	r3, #100	; 0x64
 800285e:	d902      	bls.n	8002866 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	f000 fb3c 	bl	8002ede <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002866:	4b96      	ldr	r3, [pc, #600]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	2380      	movs	r3, #128	; 0x80
 800286c:	029b      	lsls	r3, r3, #10
 800286e:	4013      	ands	r3, r2
 8002870:	d0ef      	beq.n	8002852 <HAL_RCC_OscConfig+0xe6>
 8002872:	e015      	b.n	80028a0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002874:	f7fe f836 	bl	80008e4 <HAL_GetTick>
 8002878:	0003      	movs	r3, r0
 800287a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800287e:	f7fe f831 	bl	80008e4 <HAL_GetTick>
 8002882:	0002      	movs	r2, r0
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b64      	cmp	r3, #100	; 0x64
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e326      	b.n	8002ede <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002890:	4b8b      	ldr	r3, [pc, #556]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	2380      	movs	r3, #128	; 0x80
 8002896:	029b      	lsls	r3, r3, #10
 8002898:	4013      	ands	r3, r2
 800289a:	d1f0      	bne.n	800287e <HAL_RCC_OscConfig+0x112>
 800289c:	e000      	b.n	80028a0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800289e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2202      	movs	r2, #2
 80028a6:	4013      	ands	r3, r2
 80028a8:	d100      	bne.n	80028ac <HAL_RCC_OscConfig+0x140>
 80028aa:	e08b      	b.n	80029c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d005      	beq.n	80028c4 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	2b0c      	cmp	r3, #12
 80028bc:	d13e      	bne.n	800293c <HAL_RCC_OscConfig+0x1d0>
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d13b      	bne.n	800293c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80028c4:	4b7e      	ldr	r3, [pc, #504]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2204      	movs	r2, #4
 80028ca:	4013      	ands	r3, r2
 80028cc:	d004      	beq.n	80028d8 <HAL_RCC_OscConfig+0x16c>
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e302      	b.n	8002ede <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d8:	4b79      	ldr	r3, [pc, #484]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	4a7b      	ldr	r2, [pc, #492]	; (8002acc <HAL_RCC_OscConfig+0x360>)
 80028de:	4013      	ands	r3, r2
 80028e0:	0019      	movs	r1, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	021a      	lsls	r2, r3, #8
 80028e8:	4b75      	ldr	r3, [pc, #468]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 80028ea:	430a      	orrs	r2, r1
 80028ec:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80028ee:	4b74      	ldr	r3, [pc, #464]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2209      	movs	r2, #9
 80028f4:	4393      	bics	r3, r2
 80028f6:	0019      	movs	r1, r3
 80028f8:	4b71      	ldr	r3, [pc, #452]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002900:	f000 fc40 	bl	8003184 <HAL_RCC_GetSysClockFreq>
 8002904:	0001      	movs	r1, r0
 8002906:	4b6e      	ldr	r3, [pc, #440]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	091b      	lsrs	r3, r3, #4
 800290c:	220f      	movs	r2, #15
 800290e:	4013      	ands	r3, r2
 8002910:	4a6f      	ldr	r2, [pc, #444]	; (8002ad0 <HAL_RCC_OscConfig+0x364>)
 8002912:	5cd3      	ldrb	r3, [r2, r3]
 8002914:	000a      	movs	r2, r1
 8002916:	40da      	lsrs	r2, r3
 8002918:	4b6e      	ldr	r3, [pc, #440]	; (8002ad4 <HAL_RCC_OscConfig+0x368>)
 800291a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800291c:	4b6e      	ldr	r3, [pc, #440]	; (8002ad8 <HAL_RCC_OscConfig+0x36c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2513      	movs	r5, #19
 8002922:	197c      	adds	r4, r7, r5
 8002924:	0018      	movs	r0, r3
 8002926:	f7fd ff97 	bl	8000858 <HAL_InitTick>
 800292a:	0003      	movs	r3, r0
 800292c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800292e:	197b      	adds	r3, r7, r5
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d046      	beq.n	80029c4 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8002936:	197b      	adds	r3, r7, r5
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	e2d0      	b.n	8002ede <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d027      	beq.n	8002992 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002942:	4b5f      	ldr	r3, [pc, #380]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2209      	movs	r2, #9
 8002948:	4393      	bics	r3, r2
 800294a:	0019      	movs	r1, r3
 800294c:	4b5c      	ldr	r3, [pc, #368]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	430a      	orrs	r2, r1
 8002952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7fd ffc6 	bl	80008e4 <HAL_GetTick>
 8002958:	0003      	movs	r3, r0
 800295a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800295e:	f7fd ffc1 	bl	80008e4 <HAL_GetTick>
 8002962:	0002      	movs	r2, r0
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e2b6      	b.n	8002ede <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002970:	4b53      	ldr	r3, [pc, #332]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2204      	movs	r2, #4
 8002976:	4013      	ands	r3, r2
 8002978:	d0f1      	beq.n	800295e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800297a:	4b51      	ldr	r3, [pc, #324]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	4a53      	ldr	r2, [pc, #332]	; (8002acc <HAL_RCC_OscConfig+0x360>)
 8002980:	4013      	ands	r3, r2
 8002982:	0019      	movs	r1, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	021a      	lsls	r2, r3, #8
 800298a:	4b4d      	ldr	r3, [pc, #308]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 800298c:	430a      	orrs	r2, r1
 800298e:	605a      	str	r2, [r3, #4]
 8002990:	e018      	b.n	80029c4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002992:	4b4b      	ldr	r3, [pc, #300]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	4b4a      	ldr	r3, [pc, #296]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 8002998:	2101      	movs	r1, #1
 800299a:	438a      	bics	r2, r1
 800299c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299e:	f7fd ffa1 	bl	80008e4 <HAL_GetTick>
 80029a2:	0003      	movs	r3, r0
 80029a4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029a8:	f7fd ff9c 	bl	80008e4 <HAL_GetTick>
 80029ac:	0002      	movs	r2, r0
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e291      	b.n	8002ede <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029ba:	4b41      	ldr	r3, [pc, #260]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2204      	movs	r2, #4
 80029c0:	4013      	ands	r3, r2
 80029c2:	d1f1      	bne.n	80029a8 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2210      	movs	r2, #16
 80029ca:	4013      	ands	r3, r2
 80029cc:	d100      	bne.n	80029d0 <HAL_RCC_OscConfig+0x264>
 80029ce:	e0a1      	b.n	8002b14 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029d0:	6a3b      	ldr	r3, [r7, #32]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d140      	bne.n	8002a58 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029d6:	4b3a      	ldr	r3, [pc, #232]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	2380      	movs	r3, #128	; 0x80
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4013      	ands	r3, r2
 80029e0:	d005      	beq.n	80029ee <HAL_RCC_OscConfig+0x282>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e277      	b.n	8002ede <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029ee:	4b34      	ldr	r3, [pc, #208]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	4a3a      	ldr	r2, [pc, #232]	; (8002adc <HAL_RCC_OscConfig+0x370>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	0019      	movs	r1, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029fc:	4b30      	ldr	r3, [pc, #192]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 80029fe:	430a      	orrs	r2, r1
 8002a00:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a02:	4b2f      	ldr	r3, [pc, #188]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	021b      	lsls	r3, r3, #8
 8002a08:	0a19      	lsrs	r1, r3, #8
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	061a      	lsls	r2, r3, #24
 8002a10:	4b2b      	ldr	r3, [pc, #172]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 8002a12:	430a      	orrs	r2, r1
 8002a14:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	0b5b      	lsrs	r3, r3, #13
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	2280      	movs	r2, #128	; 0x80
 8002a20:	0212      	lsls	r2, r2, #8
 8002a22:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002a24:	4b26      	ldr	r3, [pc, #152]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	091b      	lsrs	r3, r3, #4
 8002a2a:	210f      	movs	r1, #15
 8002a2c:	400b      	ands	r3, r1
 8002a2e:	4928      	ldr	r1, [pc, #160]	; (8002ad0 <HAL_RCC_OscConfig+0x364>)
 8002a30:	5ccb      	ldrb	r3, [r1, r3]
 8002a32:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002a34:	4b27      	ldr	r3, [pc, #156]	; (8002ad4 <HAL_RCC_OscConfig+0x368>)
 8002a36:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002a38:	4b27      	ldr	r3, [pc, #156]	; (8002ad8 <HAL_RCC_OscConfig+0x36c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2513      	movs	r5, #19
 8002a3e:	197c      	adds	r4, r7, r5
 8002a40:	0018      	movs	r0, r3
 8002a42:	f7fd ff09 	bl	8000858 <HAL_InitTick>
 8002a46:	0003      	movs	r3, r0
 8002a48:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002a4a:	197b      	adds	r3, r7, r5
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d060      	beq.n	8002b14 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8002a52:	197b      	adds	r3, r7, r5
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	e242      	b.n	8002ede <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d03f      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a60:	4b17      	ldr	r3, [pc, #92]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	4b16      	ldr	r3, [pc, #88]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 8002a66:	2180      	movs	r1, #128	; 0x80
 8002a68:	0049      	lsls	r1, r1, #1
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6e:	f7fd ff39 	bl	80008e4 <HAL_GetTick>
 8002a72:	0003      	movs	r3, r0
 8002a74:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a78:	f7fd ff34 	bl	80008e4 <HAL_GetTick>
 8002a7c:	0002      	movs	r2, r0
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e229      	b.n	8002ede <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	2380      	movs	r3, #128	; 0x80
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4013      	ands	r3, r2
 8002a94:	d0f0      	beq.n	8002a78 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a96:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	4a10      	ldr	r2, [pc, #64]	; (8002adc <HAL_RCC_OscConfig+0x370>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	0019      	movs	r1, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aa4:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aaa:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	021b      	lsls	r3, r3, #8
 8002ab0:	0a19      	lsrs	r1, r3, #8
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	061a      	lsls	r2, r3, #24
 8002ab8:	4b01      	ldr	r3, [pc, #4]	; (8002ac0 <HAL_RCC_OscConfig+0x354>)
 8002aba:	430a      	orrs	r2, r1
 8002abc:	605a      	str	r2, [r3, #4]
 8002abe:	e029      	b.n	8002b14 <HAL_RCC_OscConfig+0x3a8>
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	fffeffff 	.word	0xfffeffff
 8002ac8:	fffbffff 	.word	0xfffbffff
 8002acc:	ffffe0ff 	.word	0xffffe0ff
 8002ad0:	080078ac 	.word	0x080078ac
 8002ad4:	20000000 	.word	0x20000000
 8002ad8:	20000004 	.word	0x20000004
 8002adc:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ae0:	4bbd      	ldr	r3, [pc, #756]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	4bbc      	ldr	r3, [pc, #752]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002ae6:	49bd      	ldr	r1, [pc, #756]	; (8002ddc <HAL_RCC_OscConfig+0x670>)
 8002ae8:	400a      	ands	r2, r1
 8002aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aec:	f7fd fefa 	bl	80008e4 <HAL_GetTick>
 8002af0:	0003      	movs	r3, r0
 8002af2:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002af6:	f7fd fef5 	bl	80008e4 <HAL_GetTick>
 8002afa:	0002      	movs	r2, r0
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e1ea      	b.n	8002ede <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b08:	4bb3      	ldr	r3, [pc, #716]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	2380      	movs	r3, #128	; 0x80
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4013      	ands	r3, r2
 8002b12:	d1f0      	bne.n	8002af6 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2208      	movs	r2, #8
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d036      	beq.n	8002b8c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d019      	beq.n	8002b5a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b26:	4bac      	ldr	r3, [pc, #688]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002b28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b2a:	4bab      	ldr	r3, [pc, #684]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b32:	f7fd fed7 	bl	80008e4 <HAL_GetTick>
 8002b36:	0003      	movs	r3, r0
 8002b38:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b3c:	f7fd fed2 	bl	80008e4 <HAL_GetTick>
 8002b40:	0002      	movs	r2, r0
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e1c7      	b.n	8002ede <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b4e:	4ba2      	ldr	r3, [pc, #648]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b52:	2202      	movs	r2, #2
 8002b54:	4013      	ands	r3, r2
 8002b56:	d0f1      	beq.n	8002b3c <HAL_RCC_OscConfig+0x3d0>
 8002b58:	e018      	b.n	8002b8c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b5a:	4b9f      	ldr	r3, [pc, #636]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002b5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b5e:	4b9e      	ldr	r3, [pc, #632]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002b60:	2101      	movs	r1, #1
 8002b62:	438a      	bics	r2, r1
 8002b64:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b66:	f7fd febd 	bl	80008e4 <HAL_GetTick>
 8002b6a:	0003      	movs	r3, r0
 8002b6c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b70:	f7fd feb8 	bl	80008e4 <HAL_GetTick>
 8002b74:	0002      	movs	r2, r0
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e1ad      	b.n	8002ede <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b82:	4b95      	ldr	r3, [pc, #596]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b86:	2202      	movs	r2, #2
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d1f1      	bne.n	8002b70 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2204      	movs	r2, #4
 8002b92:	4013      	ands	r3, r2
 8002b94:	d100      	bne.n	8002b98 <HAL_RCC_OscConfig+0x42c>
 8002b96:	e0ae      	b.n	8002cf6 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b98:	2027      	movs	r0, #39	; 0x27
 8002b9a:	183b      	adds	r3, r7, r0
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ba0:	4b8d      	ldr	r3, [pc, #564]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002ba2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ba4:	2380      	movs	r3, #128	; 0x80
 8002ba6:	055b      	lsls	r3, r3, #21
 8002ba8:	4013      	ands	r3, r2
 8002baa:	d109      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bac:	4b8a      	ldr	r3, [pc, #552]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002bae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bb0:	4b89      	ldr	r3, [pc, #548]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002bb2:	2180      	movs	r1, #128	; 0x80
 8002bb4:	0549      	lsls	r1, r1, #21
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002bba:	183b      	adds	r3, r7, r0
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc0:	4b87      	ldr	r3, [pc, #540]	; (8002de0 <HAL_RCC_OscConfig+0x674>)
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	2380      	movs	r3, #128	; 0x80
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d11a      	bne.n	8002c02 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bcc:	4b84      	ldr	r3, [pc, #528]	; (8002de0 <HAL_RCC_OscConfig+0x674>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4b83      	ldr	r3, [pc, #524]	; (8002de0 <HAL_RCC_OscConfig+0x674>)
 8002bd2:	2180      	movs	r1, #128	; 0x80
 8002bd4:	0049      	lsls	r1, r1, #1
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bda:	f7fd fe83 	bl	80008e4 <HAL_GetTick>
 8002bde:	0003      	movs	r3, r0
 8002be0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002be4:	f7fd fe7e 	bl	80008e4 <HAL_GetTick>
 8002be8:	0002      	movs	r2, r0
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b64      	cmp	r3, #100	; 0x64
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e173      	b.n	8002ede <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf6:	4b7a      	ldr	r3, [pc, #488]	; (8002de0 <HAL_RCC_OscConfig+0x674>)
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	2380      	movs	r3, #128	; 0x80
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	4013      	ands	r3, r2
 8002c00:	d0f0      	beq.n	8002be4 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689a      	ldr	r2, [r3, #8]
 8002c06:	2380      	movs	r3, #128	; 0x80
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d107      	bne.n	8002c1e <HAL_RCC_OscConfig+0x4b2>
 8002c0e:	4b72      	ldr	r3, [pc, #456]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002c10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c12:	4b71      	ldr	r3, [pc, #452]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002c14:	2180      	movs	r1, #128	; 0x80
 8002c16:	0049      	lsls	r1, r1, #1
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	651a      	str	r2, [r3, #80]	; 0x50
 8002c1c:	e031      	b.n	8002c82 <HAL_RCC_OscConfig+0x516>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10c      	bne.n	8002c40 <HAL_RCC_OscConfig+0x4d4>
 8002c26:	4b6c      	ldr	r3, [pc, #432]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002c28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c2a:	4b6b      	ldr	r3, [pc, #428]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002c2c:	496b      	ldr	r1, [pc, #428]	; (8002ddc <HAL_RCC_OscConfig+0x670>)
 8002c2e:	400a      	ands	r2, r1
 8002c30:	651a      	str	r2, [r3, #80]	; 0x50
 8002c32:	4b69      	ldr	r3, [pc, #420]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002c34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c36:	4b68      	ldr	r3, [pc, #416]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002c38:	496a      	ldr	r1, [pc, #424]	; (8002de4 <HAL_RCC_OscConfig+0x678>)
 8002c3a:	400a      	ands	r2, r1
 8002c3c:	651a      	str	r2, [r3, #80]	; 0x50
 8002c3e:	e020      	b.n	8002c82 <HAL_RCC_OscConfig+0x516>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	23a0      	movs	r3, #160	; 0xa0
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d10e      	bne.n	8002c6a <HAL_RCC_OscConfig+0x4fe>
 8002c4c:	4b62      	ldr	r3, [pc, #392]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002c4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c50:	4b61      	ldr	r3, [pc, #388]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002c52:	2180      	movs	r1, #128	; 0x80
 8002c54:	00c9      	lsls	r1, r1, #3
 8002c56:	430a      	orrs	r2, r1
 8002c58:	651a      	str	r2, [r3, #80]	; 0x50
 8002c5a:	4b5f      	ldr	r3, [pc, #380]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002c5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c5e:	4b5e      	ldr	r3, [pc, #376]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002c60:	2180      	movs	r1, #128	; 0x80
 8002c62:	0049      	lsls	r1, r1, #1
 8002c64:	430a      	orrs	r2, r1
 8002c66:	651a      	str	r2, [r3, #80]	; 0x50
 8002c68:	e00b      	b.n	8002c82 <HAL_RCC_OscConfig+0x516>
 8002c6a:	4b5b      	ldr	r3, [pc, #364]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002c6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c6e:	4b5a      	ldr	r3, [pc, #360]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002c70:	495a      	ldr	r1, [pc, #360]	; (8002ddc <HAL_RCC_OscConfig+0x670>)
 8002c72:	400a      	ands	r2, r1
 8002c74:	651a      	str	r2, [r3, #80]	; 0x50
 8002c76:	4b58      	ldr	r3, [pc, #352]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002c78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c7a:	4b57      	ldr	r3, [pc, #348]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002c7c:	4959      	ldr	r1, [pc, #356]	; (8002de4 <HAL_RCC_OscConfig+0x678>)
 8002c7e:	400a      	ands	r2, r1
 8002c80:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d015      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c8a:	f7fd fe2b 	bl	80008e4 <HAL_GetTick>
 8002c8e:	0003      	movs	r3, r0
 8002c90:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c92:	e009      	b.n	8002ca8 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c94:	f7fd fe26 	bl	80008e4 <HAL_GetTick>
 8002c98:	0002      	movs	r2, r0
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	4a52      	ldr	r2, [pc, #328]	; (8002de8 <HAL_RCC_OscConfig+0x67c>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e11a      	b.n	8002ede <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ca8:	4b4b      	ldr	r3, [pc, #300]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002caa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cac:	2380      	movs	r3, #128	; 0x80
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	d0ef      	beq.n	8002c94 <HAL_RCC_OscConfig+0x528>
 8002cb4:	e014      	b.n	8002ce0 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb6:	f7fd fe15 	bl	80008e4 <HAL_GetTick>
 8002cba:	0003      	movs	r3, r0
 8002cbc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cbe:	e009      	b.n	8002cd4 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc0:	f7fd fe10 	bl	80008e4 <HAL_GetTick>
 8002cc4:	0002      	movs	r2, r0
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	4a47      	ldr	r2, [pc, #284]	; (8002de8 <HAL_RCC_OscConfig+0x67c>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e104      	b.n	8002ede <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cd4:	4b40      	ldr	r3, [pc, #256]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002cd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cd8:	2380      	movs	r3, #128	; 0x80
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4013      	ands	r3, r2
 8002cde:	d1ef      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ce0:	2327      	movs	r3, #39	; 0x27
 8002ce2:	18fb      	adds	r3, r7, r3
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d105      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cea:	4b3b      	ldr	r3, [pc, #236]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002cec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cee:	4b3a      	ldr	r3, [pc, #232]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002cf0:	493e      	ldr	r1, [pc, #248]	; (8002dec <HAL_RCC_OscConfig+0x680>)
 8002cf2:	400a      	ands	r2, r1
 8002cf4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	d049      	beq.n	8002d94 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d026      	beq.n	8002d56 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002d08:	4b33      	ldr	r3, [pc, #204]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	4b32      	ldr	r3, [pc, #200]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002d0e:	2101      	movs	r1, #1
 8002d10:	430a      	orrs	r2, r1
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	4b30      	ldr	r3, [pc, #192]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002d16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d18:	4b2f      	ldr	r3, [pc, #188]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	635a      	str	r2, [r3, #52]	; 0x34
 8002d20:	4b33      	ldr	r3, [pc, #204]	; (8002df0 <HAL_RCC_OscConfig+0x684>)
 8002d22:	6a1a      	ldr	r2, [r3, #32]
 8002d24:	4b32      	ldr	r3, [pc, #200]	; (8002df0 <HAL_RCC_OscConfig+0x684>)
 8002d26:	2180      	movs	r1, #128	; 0x80
 8002d28:	0189      	lsls	r1, r1, #6
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2e:	f7fd fdd9 	bl	80008e4 <HAL_GetTick>
 8002d32:	0003      	movs	r3, r0
 8002d34:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d38:	f7fd fdd4 	bl	80008e4 <HAL_GetTick>
 8002d3c:	0002      	movs	r2, r0
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e0c9      	b.n	8002ede <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d4a:	4b23      	ldr	r3, [pc, #140]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	4013      	ands	r3, r2
 8002d52:	d0f1      	beq.n	8002d38 <HAL_RCC_OscConfig+0x5cc>
 8002d54:	e01e      	b.n	8002d94 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002d56:	4b20      	ldr	r3, [pc, #128]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	4b1f      	ldr	r3, [pc, #124]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	438a      	bics	r2, r1
 8002d60:	609a      	str	r2, [r3, #8]
 8002d62:	4b23      	ldr	r3, [pc, #140]	; (8002df0 <HAL_RCC_OscConfig+0x684>)
 8002d64:	6a1a      	ldr	r2, [r3, #32]
 8002d66:	4b22      	ldr	r3, [pc, #136]	; (8002df0 <HAL_RCC_OscConfig+0x684>)
 8002d68:	4922      	ldr	r1, [pc, #136]	; (8002df4 <HAL_RCC_OscConfig+0x688>)
 8002d6a:	400a      	ands	r2, r1
 8002d6c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6e:	f7fd fdb9 	bl	80008e4 <HAL_GetTick>
 8002d72:	0003      	movs	r3, r0
 8002d74:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d78:	f7fd fdb4 	bl	80008e4 <HAL_GetTick>
 8002d7c:	0002      	movs	r2, r0
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e0a9      	b.n	8002ede <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d8a:	4b13      	ldr	r3, [pc, #76]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	4013      	ands	r3, r2
 8002d92:	d1f1      	bne.n	8002d78 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d100      	bne.n	8002d9e <HAL_RCC_OscConfig+0x632>
 8002d9c:	e09e      	b.n	8002edc <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	2b0c      	cmp	r3, #12
 8002da2:	d100      	bne.n	8002da6 <HAL_RCC_OscConfig+0x63a>
 8002da4:	e077      	b.n	8002e96 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d158      	bne.n	8002e60 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dae:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <HAL_RCC_OscConfig+0x66c>)
 8002db4:	4910      	ldr	r1, [pc, #64]	; (8002df8 <HAL_RCC_OscConfig+0x68c>)
 8002db6:	400a      	ands	r2, r1
 8002db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dba:	f7fd fd93 	bl	80008e4 <HAL_GetTick>
 8002dbe:	0003      	movs	r3, r0
 8002dc0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002dc2:	e01b      	b.n	8002dfc <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc4:	f7fd fd8e 	bl	80008e4 <HAL_GetTick>
 8002dc8:	0002      	movs	r2, r0
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d914      	bls.n	8002dfc <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e083      	b.n	8002ede <HAL_RCC_OscConfig+0x772>
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	fffffeff 	.word	0xfffffeff
 8002de0:	40007000 	.word	0x40007000
 8002de4:	fffffbff 	.word	0xfffffbff
 8002de8:	00001388 	.word	0x00001388
 8002dec:	efffffff 	.word	0xefffffff
 8002df0:	40010000 	.word	0x40010000
 8002df4:	ffffdfff 	.word	0xffffdfff
 8002df8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002dfc:	4b3a      	ldr	r3, [pc, #232]	; (8002ee8 <HAL_RCC_OscConfig+0x77c>)
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	2380      	movs	r3, #128	; 0x80
 8002e02:	049b      	lsls	r3, r3, #18
 8002e04:	4013      	ands	r3, r2
 8002e06:	d1dd      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e08:	4b37      	ldr	r3, [pc, #220]	; (8002ee8 <HAL_RCC_OscConfig+0x77c>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	4a37      	ldr	r2, [pc, #220]	; (8002eec <HAL_RCC_OscConfig+0x780>)
 8002e0e:	4013      	ands	r3, r2
 8002e10:	0019      	movs	r1, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e20:	431a      	orrs	r2, r3
 8002e22:	4b31      	ldr	r3, [pc, #196]	; (8002ee8 <HAL_RCC_OscConfig+0x77c>)
 8002e24:	430a      	orrs	r2, r1
 8002e26:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e28:	4b2f      	ldr	r3, [pc, #188]	; (8002ee8 <HAL_RCC_OscConfig+0x77c>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	4b2e      	ldr	r3, [pc, #184]	; (8002ee8 <HAL_RCC_OscConfig+0x77c>)
 8002e2e:	2180      	movs	r1, #128	; 0x80
 8002e30:	0449      	lsls	r1, r1, #17
 8002e32:	430a      	orrs	r2, r1
 8002e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e36:	f7fd fd55 	bl	80008e4 <HAL_GetTick>
 8002e3a:	0003      	movs	r3, r0
 8002e3c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e40:	f7fd fd50 	bl	80008e4 <HAL_GetTick>
 8002e44:	0002      	movs	r2, r0
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e045      	b.n	8002ede <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002e52:	4b25      	ldr	r3, [pc, #148]	; (8002ee8 <HAL_RCC_OscConfig+0x77c>)
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	2380      	movs	r3, #128	; 0x80
 8002e58:	049b      	lsls	r3, r3, #18
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d0f0      	beq.n	8002e40 <HAL_RCC_OscConfig+0x6d4>
 8002e5e:	e03d      	b.n	8002edc <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e60:	4b21      	ldr	r3, [pc, #132]	; (8002ee8 <HAL_RCC_OscConfig+0x77c>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	4b20      	ldr	r3, [pc, #128]	; (8002ee8 <HAL_RCC_OscConfig+0x77c>)
 8002e66:	4922      	ldr	r1, [pc, #136]	; (8002ef0 <HAL_RCC_OscConfig+0x784>)
 8002e68:	400a      	ands	r2, r1
 8002e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6c:	f7fd fd3a 	bl	80008e4 <HAL_GetTick>
 8002e70:	0003      	movs	r3, r0
 8002e72:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e76:	f7fd fd35 	bl	80008e4 <HAL_GetTick>
 8002e7a:	0002      	movs	r2, r0
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e02a      	b.n	8002ede <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e88:	4b17      	ldr	r3, [pc, #92]	; (8002ee8 <HAL_RCC_OscConfig+0x77c>)
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	2380      	movs	r3, #128	; 0x80
 8002e8e:	049b      	lsls	r3, r3, #18
 8002e90:	4013      	ands	r3, r2
 8002e92:	d1f0      	bne.n	8002e76 <HAL_RCC_OscConfig+0x70a>
 8002e94:	e022      	b.n	8002edc <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d101      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e01d      	b.n	8002ede <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ea2:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <HAL_RCC_OscConfig+0x77c>)
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea8:	69fa      	ldr	r2, [r7, #28]
 8002eaa:	2380      	movs	r3, #128	; 0x80
 8002eac:	025b      	lsls	r3, r3, #9
 8002eae:	401a      	ands	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d10f      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002eb8:	69fa      	ldr	r2, [r7, #28]
 8002eba:	23f0      	movs	r3, #240	; 0xf0
 8002ebc:	039b      	lsls	r3, r3, #14
 8002ebe:	401a      	ands	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d107      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002ec8:	69fa      	ldr	r2, [r7, #28]
 8002eca:	23c0      	movs	r3, #192	; 0xc0
 8002ecc:	041b      	lsls	r3, r3, #16
 8002ece:	401a      	ands	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d001      	beq.n	8002edc <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e000      	b.n	8002ede <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	0018      	movs	r0, r3
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	b00a      	add	sp, #40	; 0x28
 8002ee4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	ff02ffff 	.word	0xff02ffff
 8002ef0:	feffffff 	.word	0xfeffffff

08002ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef4:	b5b0      	push	{r4, r5, r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e128      	b.n	800315a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f08:	4b96      	ldr	r3, [pc, #600]	; (8003164 <HAL_RCC_ClockConfig+0x270>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	4013      	ands	r3, r2
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d91e      	bls.n	8002f54 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f16:	4b93      	ldr	r3, [pc, #588]	; (8003164 <HAL_RCC_ClockConfig+0x270>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	4393      	bics	r3, r2
 8002f1e:	0019      	movs	r1, r3
 8002f20:	4b90      	ldr	r3, [pc, #576]	; (8003164 <HAL_RCC_ClockConfig+0x270>)
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f28:	f7fd fcdc 	bl	80008e4 <HAL_GetTick>
 8002f2c:	0003      	movs	r3, r0
 8002f2e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f30:	e009      	b.n	8002f46 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f32:	f7fd fcd7 	bl	80008e4 <HAL_GetTick>
 8002f36:	0002      	movs	r2, r0
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	4a8a      	ldr	r2, [pc, #552]	; (8003168 <HAL_RCC_ClockConfig+0x274>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e109      	b.n	800315a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f46:	4b87      	ldr	r3, [pc, #540]	; (8003164 <HAL_RCC_ClockConfig+0x270>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d1ee      	bne.n	8002f32 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2202      	movs	r2, #2
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d009      	beq.n	8002f72 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f5e:	4b83      	ldr	r3, [pc, #524]	; (800316c <HAL_RCC_ClockConfig+0x278>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	22f0      	movs	r2, #240	; 0xf0
 8002f64:	4393      	bics	r3, r2
 8002f66:	0019      	movs	r1, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	4b7f      	ldr	r3, [pc, #508]	; (800316c <HAL_RCC_ClockConfig+0x278>)
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2201      	movs	r2, #1
 8002f78:	4013      	ands	r3, r2
 8002f7a:	d100      	bne.n	8002f7e <HAL_RCC_ClockConfig+0x8a>
 8002f7c:	e089      	b.n	8003092 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d107      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f86:	4b79      	ldr	r3, [pc, #484]	; (800316c <HAL_RCC_ClockConfig+0x278>)
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	2380      	movs	r3, #128	; 0x80
 8002f8c:	029b      	lsls	r3, r3, #10
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d120      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e0e1      	b.n	800315a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d107      	bne.n	8002fae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f9e:	4b73      	ldr	r3, [pc, #460]	; (800316c <HAL_RCC_ClockConfig+0x278>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	2380      	movs	r3, #128	; 0x80
 8002fa4:	049b      	lsls	r3, r3, #18
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	d114      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e0d5      	b.n	800315a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d106      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fb6:	4b6d      	ldr	r3, [pc, #436]	; (800316c <HAL_RCC_ClockConfig+0x278>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2204      	movs	r2, #4
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	d109      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0ca      	b.n	800315a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002fc4:	4b69      	ldr	r3, [pc, #420]	; (800316c <HAL_RCC_ClockConfig+0x278>)
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	2380      	movs	r3, #128	; 0x80
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d101      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e0c2      	b.n	800315a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fd4:	4b65      	ldr	r3, [pc, #404]	; (800316c <HAL_RCC_ClockConfig+0x278>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	2203      	movs	r2, #3
 8002fda:	4393      	bics	r3, r2
 8002fdc:	0019      	movs	r1, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	4b62      	ldr	r3, [pc, #392]	; (800316c <HAL_RCC_ClockConfig+0x278>)
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fe8:	f7fd fc7c 	bl	80008e4 <HAL_GetTick>
 8002fec:	0003      	movs	r3, r0
 8002fee:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d111      	bne.n	800301c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ff8:	e009      	b.n	800300e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ffa:	f7fd fc73 	bl	80008e4 <HAL_GetTick>
 8002ffe:	0002      	movs	r2, r0
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	4a58      	ldr	r2, [pc, #352]	; (8003168 <HAL_RCC_ClockConfig+0x274>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d901      	bls.n	800300e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e0a5      	b.n	800315a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800300e:	4b57      	ldr	r3, [pc, #348]	; (800316c <HAL_RCC_ClockConfig+0x278>)
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	220c      	movs	r2, #12
 8003014:	4013      	ands	r3, r2
 8003016:	2b08      	cmp	r3, #8
 8003018:	d1ef      	bne.n	8002ffa <HAL_RCC_ClockConfig+0x106>
 800301a:	e03a      	b.n	8003092 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2b03      	cmp	r3, #3
 8003022:	d111      	bne.n	8003048 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003024:	e009      	b.n	800303a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003026:	f7fd fc5d 	bl	80008e4 <HAL_GetTick>
 800302a:	0002      	movs	r2, r0
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	4a4d      	ldr	r2, [pc, #308]	; (8003168 <HAL_RCC_ClockConfig+0x274>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d901      	bls.n	800303a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e08f      	b.n	800315a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800303a:	4b4c      	ldr	r3, [pc, #304]	; (800316c <HAL_RCC_ClockConfig+0x278>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	220c      	movs	r2, #12
 8003040:	4013      	ands	r3, r2
 8003042:	2b0c      	cmp	r3, #12
 8003044:	d1ef      	bne.n	8003026 <HAL_RCC_ClockConfig+0x132>
 8003046:	e024      	b.n	8003092 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d11b      	bne.n	8003088 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003050:	e009      	b.n	8003066 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003052:	f7fd fc47 	bl	80008e4 <HAL_GetTick>
 8003056:	0002      	movs	r2, r0
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	4a42      	ldr	r2, [pc, #264]	; (8003168 <HAL_RCC_ClockConfig+0x274>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e079      	b.n	800315a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003066:	4b41      	ldr	r3, [pc, #260]	; (800316c <HAL_RCC_ClockConfig+0x278>)
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	220c      	movs	r2, #12
 800306c:	4013      	ands	r3, r2
 800306e:	2b04      	cmp	r3, #4
 8003070:	d1ef      	bne.n	8003052 <HAL_RCC_ClockConfig+0x15e>
 8003072:	e00e      	b.n	8003092 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003074:	f7fd fc36 	bl	80008e4 <HAL_GetTick>
 8003078:	0002      	movs	r2, r0
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	4a3a      	ldr	r2, [pc, #232]	; (8003168 <HAL_RCC_ClockConfig+0x274>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e068      	b.n	800315a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003088:	4b38      	ldr	r3, [pc, #224]	; (800316c <HAL_RCC_ClockConfig+0x278>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	220c      	movs	r2, #12
 800308e:	4013      	ands	r3, r2
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003092:	4b34      	ldr	r3, [pc, #208]	; (8003164 <HAL_RCC_ClockConfig+0x270>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2201      	movs	r2, #1
 8003098:	4013      	ands	r3, r2
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	429a      	cmp	r2, r3
 800309e:	d21e      	bcs.n	80030de <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a0:	4b30      	ldr	r3, [pc, #192]	; (8003164 <HAL_RCC_ClockConfig+0x270>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2201      	movs	r2, #1
 80030a6:	4393      	bics	r3, r2
 80030a8:	0019      	movs	r1, r3
 80030aa:	4b2e      	ldr	r3, [pc, #184]	; (8003164 <HAL_RCC_ClockConfig+0x270>)
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80030b2:	f7fd fc17 	bl	80008e4 <HAL_GetTick>
 80030b6:	0003      	movs	r3, r0
 80030b8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ba:	e009      	b.n	80030d0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030bc:	f7fd fc12 	bl	80008e4 <HAL_GetTick>
 80030c0:	0002      	movs	r2, r0
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	4a28      	ldr	r2, [pc, #160]	; (8003168 <HAL_RCC_ClockConfig+0x274>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e044      	b.n	800315a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d0:	4b24      	ldr	r3, [pc, #144]	; (8003164 <HAL_RCC_ClockConfig+0x270>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2201      	movs	r2, #1
 80030d6:	4013      	ands	r3, r2
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d1ee      	bne.n	80030bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2204      	movs	r2, #4
 80030e4:	4013      	ands	r3, r2
 80030e6:	d009      	beq.n	80030fc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030e8:	4b20      	ldr	r3, [pc, #128]	; (800316c <HAL_RCC_ClockConfig+0x278>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	4a20      	ldr	r2, [pc, #128]	; (8003170 <HAL_RCC_ClockConfig+0x27c>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	0019      	movs	r1, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	4b1d      	ldr	r3, [pc, #116]	; (800316c <HAL_RCC_ClockConfig+0x278>)
 80030f8:	430a      	orrs	r2, r1
 80030fa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2208      	movs	r2, #8
 8003102:	4013      	ands	r3, r2
 8003104:	d00a      	beq.n	800311c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003106:	4b19      	ldr	r3, [pc, #100]	; (800316c <HAL_RCC_ClockConfig+0x278>)
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	4a1a      	ldr	r2, [pc, #104]	; (8003174 <HAL_RCC_ClockConfig+0x280>)
 800310c:	4013      	ands	r3, r2
 800310e:	0019      	movs	r1, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	00da      	lsls	r2, r3, #3
 8003116:	4b15      	ldr	r3, [pc, #84]	; (800316c <HAL_RCC_ClockConfig+0x278>)
 8003118:	430a      	orrs	r2, r1
 800311a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800311c:	f000 f832 	bl	8003184 <HAL_RCC_GetSysClockFreq>
 8003120:	0001      	movs	r1, r0
 8003122:	4b12      	ldr	r3, [pc, #72]	; (800316c <HAL_RCC_ClockConfig+0x278>)
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	091b      	lsrs	r3, r3, #4
 8003128:	220f      	movs	r2, #15
 800312a:	4013      	ands	r3, r2
 800312c:	4a12      	ldr	r2, [pc, #72]	; (8003178 <HAL_RCC_ClockConfig+0x284>)
 800312e:	5cd3      	ldrb	r3, [r2, r3]
 8003130:	000a      	movs	r2, r1
 8003132:	40da      	lsrs	r2, r3
 8003134:	4b11      	ldr	r3, [pc, #68]	; (800317c <HAL_RCC_ClockConfig+0x288>)
 8003136:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003138:	4b11      	ldr	r3, [pc, #68]	; (8003180 <HAL_RCC_ClockConfig+0x28c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	250b      	movs	r5, #11
 800313e:	197c      	adds	r4, r7, r5
 8003140:	0018      	movs	r0, r3
 8003142:	f7fd fb89 	bl	8000858 <HAL_InitTick>
 8003146:	0003      	movs	r3, r0
 8003148:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800314a:	197b      	adds	r3, r7, r5
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003152:	197b      	adds	r3, r7, r5
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	e000      	b.n	800315a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	0018      	movs	r0, r3
 800315c:	46bd      	mov	sp, r7
 800315e:	b004      	add	sp, #16
 8003160:	bdb0      	pop	{r4, r5, r7, pc}
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	40022000 	.word	0x40022000
 8003168:	00001388 	.word	0x00001388
 800316c:	40021000 	.word	0x40021000
 8003170:	fffff8ff 	.word	0xfffff8ff
 8003174:	ffffc7ff 	.word	0xffffc7ff
 8003178:	080078ac 	.word	0x080078ac
 800317c:	20000000 	.word	0x20000000
 8003180:	20000004 	.word	0x20000004

08003184 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003184:	b5b0      	push	{r4, r5, r7, lr}
 8003186:	b08e      	sub	sp, #56	; 0x38
 8003188:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800318a:	4b4c      	ldr	r3, [pc, #304]	; (80032bc <HAL_RCC_GetSysClockFreq+0x138>)
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003192:	230c      	movs	r3, #12
 8003194:	4013      	ands	r3, r2
 8003196:	2b0c      	cmp	r3, #12
 8003198:	d014      	beq.n	80031c4 <HAL_RCC_GetSysClockFreq+0x40>
 800319a:	d900      	bls.n	800319e <HAL_RCC_GetSysClockFreq+0x1a>
 800319c:	e07b      	b.n	8003296 <HAL_RCC_GetSysClockFreq+0x112>
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d002      	beq.n	80031a8 <HAL_RCC_GetSysClockFreq+0x24>
 80031a2:	2b08      	cmp	r3, #8
 80031a4:	d00b      	beq.n	80031be <HAL_RCC_GetSysClockFreq+0x3a>
 80031a6:	e076      	b.n	8003296 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80031a8:	4b44      	ldr	r3, [pc, #272]	; (80032bc <HAL_RCC_GetSysClockFreq+0x138>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2210      	movs	r2, #16
 80031ae:	4013      	ands	r3, r2
 80031b0:	d002      	beq.n	80031b8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80031b2:	4b43      	ldr	r3, [pc, #268]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80031b4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80031b6:	e07c      	b.n	80032b2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80031b8:	4b42      	ldr	r3, [pc, #264]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x140>)
 80031ba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80031bc:	e079      	b.n	80032b2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031be:	4b42      	ldr	r3, [pc, #264]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x144>)
 80031c0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80031c2:	e076      	b.n	80032b2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80031c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c6:	0c9a      	lsrs	r2, r3, #18
 80031c8:	230f      	movs	r3, #15
 80031ca:	401a      	ands	r2, r3
 80031cc:	4b3f      	ldr	r3, [pc, #252]	; (80032cc <HAL_RCC_GetSysClockFreq+0x148>)
 80031ce:	5c9b      	ldrb	r3, [r3, r2]
 80031d0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80031d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d4:	0d9a      	lsrs	r2, r3, #22
 80031d6:	2303      	movs	r3, #3
 80031d8:	4013      	ands	r3, r2
 80031da:	3301      	adds	r3, #1
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031de:	4b37      	ldr	r3, [pc, #220]	; (80032bc <HAL_RCC_GetSysClockFreq+0x138>)
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	2380      	movs	r3, #128	; 0x80
 80031e4:	025b      	lsls	r3, r3, #9
 80031e6:	4013      	ands	r3, r2
 80031e8:	d01a      	beq.n	8003220 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80031ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ec:	61bb      	str	r3, [r7, #24]
 80031ee:	2300      	movs	r3, #0
 80031f0:	61fb      	str	r3, [r7, #28]
 80031f2:	4a35      	ldr	r2, [pc, #212]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x144>)
 80031f4:	2300      	movs	r3, #0
 80031f6:	69b8      	ldr	r0, [r7, #24]
 80031f8:	69f9      	ldr	r1, [r7, #28]
 80031fa:	f7fd f839 	bl	8000270 <__aeabi_lmul>
 80031fe:	0002      	movs	r2, r0
 8003200:	000b      	movs	r3, r1
 8003202:	0010      	movs	r0, r2
 8003204:	0019      	movs	r1, r3
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	613b      	str	r3, [r7, #16]
 800320a:	2300      	movs	r3, #0
 800320c:	617b      	str	r3, [r7, #20]
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f7fd f80d 	bl	8000230 <__aeabi_uldivmod>
 8003216:	0002      	movs	r2, r0
 8003218:	000b      	movs	r3, r1
 800321a:	0013      	movs	r3, r2
 800321c:	637b      	str	r3, [r7, #52]	; 0x34
 800321e:	e037      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003220:	4b26      	ldr	r3, [pc, #152]	; (80032bc <HAL_RCC_GetSysClockFreq+0x138>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2210      	movs	r2, #16
 8003226:	4013      	ands	r3, r2
 8003228:	d01a      	beq.n	8003260 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800322a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322c:	60bb      	str	r3, [r7, #8]
 800322e:	2300      	movs	r3, #0
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	4a23      	ldr	r2, [pc, #140]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003234:	2300      	movs	r3, #0
 8003236:	68b8      	ldr	r0, [r7, #8]
 8003238:	68f9      	ldr	r1, [r7, #12]
 800323a:	f7fd f819 	bl	8000270 <__aeabi_lmul>
 800323e:	0002      	movs	r2, r0
 8003240:	000b      	movs	r3, r1
 8003242:	0010      	movs	r0, r2
 8003244:	0019      	movs	r1, r3
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	603b      	str	r3, [r7, #0]
 800324a:	2300      	movs	r3, #0
 800324c:	607b      	str	r3, [r7, #4]
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f7fc ffed 	bl	8000230 <__aeabi_uldivmod>
 8003256:	0002      	movs	r2, r0
 8003258:	000b      	movs	r3, r1
 800325a:	0013      	movs	r3, r2
 800325c:	637b      	str	r3, [r7, #52]	; 0x34
 800325e:	e017      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003262:	0018      	movs	r0, r3
 8003264:	2300      	movs	r3, #0
 8003266:	0019      	movs	r1, r3
 8003268:	4a16      	ldr	r2, [pc, #88]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x140>)
 800326a:	2300      	movs	r3, #0
 800326c:	f7fd f800 	bl	8000270 <__aeabi_lmul>
 8003270:	0002      	movs	r2, r0
 8003272:	000b      	movs	r3, r1
 8003274:	0010      	movs	r0, r2
 8003276:	0019      	movs	r1, r3
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	001c      	movs	r4, r3
 800327c:	2300      	movs	r3, #0
 800327e:	001d      	movs	r5, r3
 8003280:	0022      	movs	r2, r4
 8003282:	002b      	movs	r3, r5
 8003284:	f7fc ffd4 	bl	8000230 <__aeabi_uldivmod>
 8003288:	0002      	movs	r2, r0
 800328a:	000b      	movs	r3, r1
 800328c:	0013      	movs	r3, r2
 800328e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003292:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003294:	e00d      	b.n	80032b2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003296:	4b09      	ldr	r3, [pc, #36]	; (80032bc <HAL_RCC_GetSysClockFreq+0x138>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	0b5b      	lsrs	r3, r3, #13
 800329c:	2207      	movs	r2, #7
 800329e:	4013      	ands	r3, r2
 80032a0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	3301      	adds	r3, #1
 80032a6:	2280      	movs	r2, #128	; 0x80
 80032a8:	0212      	lsls	r2, r2, #8
 80032aa:	409a      	lsls	r2, r3
 80032ac:	0013      	movs	r3, r2
 80032ae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80032b0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80032b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80032b4:	0018      	movs	r0, r3
 80032b6:	46bd      	mov	sp, r7
 80032b8:	b00e      	add	sp, #56	; 0x38
 80032ba:	bdb0      	pop	{r4, r5, r7, pc}
 80032bc:	40021000 	.word	0x40021000
 80032c0:	003d0900 	.word	0x003d0900
 80032c4:	00f42400 	.word	0x00f42400
 80032c8:	007a1200 	.word	0x007a1200
 80032cc:	080078bc 	.word	0x080078bc

080032d0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80032d8:	2317      	movs	r3, #23
 80032da:	18fb      	adds	r3, r7, r3
 80032dc:	2200      	movs	r2, #0
 80032de:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2220      	movs	r2, #32
 80032e6:	4013      	ands	r3, r2
 80032e8:	d106      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	2380      	movs	r3, #128	; 0x80
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	4013      	ands	r3, r2
 80032f4:	d100      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80032f6:	e104      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032f8:	4bb1      	ldr	r3, [pc, #708]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032fc:	2380      	movs	r3, #128	; 0x80
 80032fe:	055b      	lsls	r3, r3, #21
 8003300:	4013      	ands	r3, r2
 8003302:	d10a      	bne.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003304:	4bae      	ldr	r3, [pc, #696]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003306:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003308:	4bad      	ldr	r3, [pc, #692]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800330a:	2180      	movs	r1, #128	; 0x80
 800330c:	0549      	lsls	r1, r1, #21
 800330e:	430a      	orrs	r2, r1
 8003310:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003312:	2317      	movs	r3, #23
 8003314:	18fb      	adds	r3, r7, r3
 8003316:	2201      	movs	r2, #1
 8003318:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331a:	4baa      	ldr	r3, [pc, #680]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	2380      	movs	r3, #128	; 0x80
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	4013      	ands	r3, r2
 8003324:	d11a      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003326:	4ba7      	ldr	r3, [pc, #668]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	4ba6      	ldr	r3, [pc, #664]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800332c:	2180      	movs	r1, #128	; 0x80
 800332e:	0049      	lsls	r1, r1, #1
 8003330:	430a      	orrs	r2, r1
 8003332:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003334:	f7fd fad6 	bl	80008e4 <HAL_GetTick>
 8003338:	0003      	movs	r3, r0
 800333a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333c:	e008      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800333e:	f7fd fad1 	bl	80008e4 <HAL_GetTick>
 8003342:	0002      	movs	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b64      	cmp	r3, #100	; 0x64
 800334a:	d901      	bls.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e133      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003350:	4b9c      	ldr	r3, [pc, #624]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	2380      	movs	r3, #128	; 0x80
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	4013      	ands	r3, r2
 800335a:	d0f0      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800335c:	4b98      	ldr	r3, [pc, #608]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	23c0      	movs	r3, #192	; 0xc0
 8003362:	039b      	lsls	r3, r3, #14
 8003364:	4013      	ands	r3, r2
 8003366:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	23c0      	movs	r3, #192	; 0xc0
 800336e:	039b      	lsls	r3, r3, #14
 8003370:	4013      	ands	r3, r2
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	429a      	cmp	r2, r3
 8003376:	d107      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	23c0      	movs	r3, #192	; 0xc0
 800337e:	039b      	lsls	r3, r3, #14
 8003380:	4013      	ands	r3, r2
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	429a      	cmp	r2, r3
 8003386:	d013      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	23c0      	movs	r3, #192	; 0xc0
 800338e:	029b      	lsls	r3, r3, #10
 8003390:	401a      	ands	r2, r3
 8003392:	23c0      	movs	r3, #192	; 0xc0
 8003394:	029b      	lsls	r3, r3, #10
 8003396:	429a      	cmp	r2, r3
 8003398:	d10a      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800339a:	4b89      	ldr	r3, [pc, #548]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	2380      	movs	r3, #128	; 0x80
 80033a0:	029b      	lsls	r3, r3, #10
 80033a2:	401a      	ands	r2, r3
 80033a4:	2380      	movs	r3, #128	; 0x80
 80033a6:	029b      	lsls	r3, r3, #10
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d101      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e103      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80033b0:	4b83      	ldr	r3, [pc, #524]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033b4:	23c0      	movs	r3, #192	; 0xc0
 80033b6:	029b      	lsls	r3, r3, #10
 80033b8:	4013      	ands	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d049      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	23c0      	movs	r3, #192	; 0xc0
 80033c8:	029b      	lsls	r3, r3, #10
 80033ca:	4013      	ands	r3, r2
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d004      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2220      	movs	r2, #32
 80033d8:	4013      	ands	r3, r2
 80033da:	d10d      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	23c0      	movs	r3, #192	; 0xc0
 80033e2:	029b      	lsls	r3, r3, #10
 80033e4:	4013      	ands	r3, r2
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d034      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	2380      	movs	r3, #128	; 0x80
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	4013      	ands	r3, r2
 80033f6:	d02e      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80033f8:	4b71      	ldr	r3, [pc, #452]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033fc:	4a72      	ldr	r2, [pc, #456]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80033fe:	4013      	ands	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003402:	4b6f      	ldr	r3, [pc, #444]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003404:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003406:	4b6e      	ldr	r3, [pc, #440]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003408:	2180      	movs	r1, #128	; 0x80
 800340a:	0309      	lsls	r1, r1, #12
 800340c:	430a      	orrs	r2, r1
 800340e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003410:	4b6b      	ldr	r3, [pc, #428]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003412:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003414:	4b6a      	ldr	r3, [pc, #424]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003416:	496d      	ldr	r1, [pc, #436]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003418:	400a      	ands	r2, r1
 800341a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800341c:	4b68      	ldr	r3, [pc, #416]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	2380      	movs	r3, #128	; 0x80
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	4013      	ands	r3, r2
 800342a:	d014      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342c:	f7fd fa5a 	bl	80008e4 <HAL_GetTick>
 8003430:	0003      	movs	r3, r0
 8003432:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003434:	e009      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003436:	f7fd fa55 	bl	80008e4 <HAL_GetTick>
 800343a:	0002      	movs	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	4a63      	ldr	r2, [pc, #396]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d901      	bls.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e0b6      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800344a:	4b5d      	ldr	r3, [pc, #372]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800344c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800344e:	2380      	movs	r3, #128	; 0x80
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4013      	ands	r3, r2
 8003454:	d0ef      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	2380      	movs	r3, #128	; 0x80
 800345c:	011b      	lsls	r3, r3, #4
 800345e:	4013      	ands	r3, r2
 8003460:	d01f      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	23c0      	movs	r3, #192	; 0xc0
 8003468:	029b      	lsls	r3, r3, #10
 800346a:	401a      	ands	r2, r3
 800346c:	23c0      	movs	r3, #192	; 0xc0
 800346e:	029b      	lsls	r3, r3, #10
 8003470:	429a      	cmp	r2, r3
 8003472:	d10c      	bne.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003474:	4b52      	ldr	r3, [pc, #328]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a56      	ldr	r2, [pc, #344]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800347a:	4013      	ands	r3, r2
 800347c:	0019      	movs	r1, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	23c0      	movs	r3, #192	; 0xc0
 8003484:	039b      	lsls	r3, r3, #14
 8003486:	401a      	ands	r2, r3
 8003488:	4b4d      	ldr	r3, [pc, #308]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800348a:	430a      	orrs	r2, r1
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	4b4c      	ldr	r3, [pc, #304]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003490:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	23c0      	movs	r3, #192	; 0xc0
 8003498:	029b      	lsls	r3, r3, #10
 800349a:	401a      	ands	r2, r3
 800349c:	4b48      	ldr	r3, [pc, #288]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800349e:	430a      	orrs	r2, r1
 80034a0:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2220      	movs	r2, #32
 80034a8:	4013      	ands	r3, r2
 80034aa:	d01f      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	23c0      	movs	r3, #192	; 0xc0
 80034b2:	029b      	lsls	r3, r3, #10
 80034b4:	401a      	ands	r2, r3
 80034b6:	23c0      	movs	r3, #192	; 0xc0
 80034b8:	029b      	lsls	r3, r3, #10
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d10c      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80034be:	4b40      	ldr	r3, [pc, #256]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a44      	ldr	r2, [pc, #272]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034c4:	4013      	ands	r3, r2
 80034c6:	0019      	movs	r1, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	23c0      	movs	r3, #192	; 0xc0
 80034ce:	039b      	lsls	r3, r3, #14
 80034d0:	401a      	ands	r2, r3
 80034d2:	4b3b      	ldr	r3, [pc, #236]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034d4:	430a      	orrs	r2, r1
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	4b39      	ldr	r3, [pc, #228]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034da:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	23c0      	movs	r3, #192	; 0xc0
 80034e2:	029b      	lsls	r3, r3, #10
 80034e4:	401a      	ands	r2, r3
 80034e6:	4b36      	ldr	r3, [pc, #216]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034e8:	430a      	orrs	r2, r1
 80034ea:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034ec:	2317      	movs	r3, #23
 80034ee:	18fb      	adds	r3, r7, r3
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d105      	bne.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034f6:	4b32      	ldr	r3, [pc, #200]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034fa:	4b31      	ldr	r3, [pc, #196]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034fc:	4936      	ldr	r1, [pc, #216]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034fe:	400a      	ands	r2, r1
 8003500:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2201      	movs	r2, #1
 8003508:	4013      	ands	r3, r2
 800350a:	d009      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800350c:	4b2c      	ldr	r3, [pc, #176]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800350e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003510:	2203      	movs	r2, #3
 8003512:	4393      	bics	r3, r2
 8003514:	0019      	movs	r1, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	4b29      	ldr	r3, [pc, #164]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800351c:	430a      	orrs	r2, r1
 800351e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2202      	movs	r2, #2
 8003526:	4013      	ands	r3, r2
 8003528:	d009      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800352a:	4b25      	ldr	r3, [pc, #148]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800352c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800352e:	220c      	movs	r2, #12
 8003530:	4393      	bics	r3, r2
 8003532:	0019      	movs	r1, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	691a      	ldr	r2, [r3, #16]
 8003538:	4b21      	ldr	r3, [pc, #132]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800353a:	430a      	orrs	r2, r1
 800353c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2204      	movs	r2, #4
 8003544:	4013      	ands	r3, r2
 8003546:	d009      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003548:	4b1d      	ldr	r3, [pc, #116]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800354a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800354c:	4a23      	ldr	r2, [pc, #140]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800354e:	4013      	ands	r3, r2
 8003550:	0019      	movs	r1, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695a      	ldr	r2, [r3, #20]
 8003556:	4b1a      	ldr	r3, [pc, #104]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003558:	430a      	orrs	r2, r1
 800355a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2208      	movs	r2, #8
 8003562:	4013      	ands	r3, r2
 8003564:	d009      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003566:	4b16      	ldr	r3, [pc, #88]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800356a:	4a1d      	ldr	r2, [pc, #116]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800356c:	4013      	ands	r3, r2
 800356e:	0019      	movs	r1, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	699a      	ldr	r2, [r3, #24]
 8003574:	4b12      	ldr	r3, [pc, #72]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003576:	430a      	orrs	r2, r1
 8003578:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2240      	movs	r2, #64	; 0x40
 8003580:	4013      	ands	r3, r2
 8003582:	d009      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003584:	4b0e      	ldr	r3, [pc, #56]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003588:	4a16      	ldr	r2, [pc, #88]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800358a:	4013      	ands	r3, r2
 800358c:	0019      	movs	r1, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1a      	ldr	r2, [r3, #32]
 8003592:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003594:	430a      	orrs	r2, r1
 8003596:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2280      	movs	r2, #128	; 0x80
 800359e:	4013      	ands	r3, r2
 80035a0:	d009      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80035a2:	4b07      	ldr	r3, [pc, #28]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a6:	4a10      	ldr	r2, [pc, #64]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80035a8:	4013      	ands	r3, r2
 80035aa:	0019      	movs	r1, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	69da      	ldr	r2, [r3, #28]
 80035b0:	4b03      	ldr	r3, [pc, #12]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035b2:	430a      	orrs	r2, r1
 80035b4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	0018      	movs	r0, r3
 80035ba:	46bd      	mov	sp, r7
 80035bc:	b006      	add	sp, #24
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40021000 	.word	0x40021000
 80035c4:	40007000 	.word	0x40007000
 80035c8:	fffcffff 	.word	0xfffcffff
 80035cc:	fff7ffff 	.word	0xfff7ffff
 80035d0:	00001388 	.word	0x00001388
 80035d4:	ffcfffff 	.word	0xffcfffff
 80035d8:	efffffff 	.word	0xefffffff
 80035dc:	fffff3ff 	.word	0xfffff3ff
 80035e0:	ffffcfff 	.word	0xffffcfff
 80035e4:	fbffffff 	.word	0xfbffffff
 80035e8:	fff3ffff 	.word	0xfff3ffff

080035ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2244      	movs	r2, #68	; 0x44
 80035f8:	2100      	movs	r1, #0
 80035fa:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80035fc:	4b05      	ldr	r3, [pc, #20]	; (8003614 <USB_EnableGlobalInt+0x28>)
 80035fe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	b299      	uxth	r1, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2240      	movs	r2, #64	; 0x40
 8003608:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	0018      	movs	r0, r3
 800360e:	46bd      	mov	sp, r7
 8003610:	b004      	add	sp, #16
 8003612:	bd80      	pop	{r7, pc}
 8003614:	0000bf80 	.word	0x0000bf80

08003618 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003620:	4b09      	ldr	r3, [pc, #36]	; (8003648 <USB_DisableGlobalInt+0x30>)
 8003622:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2240      	movs	r2, #64	; 0x40
 8003628:	5a9b      	ldrh	r3, [r3, r2]
 800362a:	b29b      	uxth	r3, r3
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	b292      	uxth	r2, r2
 8003630:	43d2      	mvns	r2, r2
 8003632:	b292      	uxth	r2, r2
 8003634:	4013      	ands	r3, r2
 8003636:	b299      	uxth	r1, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2240      	movs	r2, #64	; 0x40
 800363c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	0018      	movs	r0, r3
 8003642:	46bd      	mov	sp, r7
 8003644:	b004      	add	sp, #16
 8003646:	bd80      	pop	{r7, pc}
 8003648:	0000bf80 	.word	0x0000bf80

0800364c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800364c:	b084      	sub	sp, #16
 800364e:	b590      	push	{r4, r7, lr}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
 8003656:	2004      	movs	r0, #4
 8003658:	2410      	movs	r4, #16
 800365a:	1900      	adds	r0, r0, r4
 800365c:	2408      	movs	r4, #8
 800365e:	46a4      	mov	ip, r4
 8003660:	44bc      	add	ip, r7
 8003662:	4460      	add	r0, ip
 8003664:	6001      	str	r1, [r0, #0]
 8003666:	6042      	str	r2, [r0, #4]
 8003668:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2240      	movs	r2, #64	; 0x40
 800366e:	2101      	movs	r1, #1
 8003670:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2240      	movs	r2, #64	; 0x40
 8003676:	2100      	movs	r1, #0
 8003678:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2244      	movs	r2, #68	; 0x44
 800367e:	2100      	movs	r1, #0
 8003680:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2250      	movs	r2, #80	; 0x50
 8003686:	2100      	movs	r1, #0
 8003688:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	0018      	movs	r0, r3
 800368e:	46bd      	mov	sp, r7
 8003690:	b003      	add	sp, #12
 8003692:	bc90      	pop	{r4, r7}
 8003694:	bc08      	pop	{r3}
 8003696:	b004      	add	sp, #16
 8003698:	4718      	bx	r3
	...

0800369c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b09c      	sub	sp, #112	; 0x70
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80036a6:	236f      	movs	r3, #111	; 0x6f
 80036a8:	18fb      	adds	r3, r7, r3
 80036aa:	2200      	movs	r2, #0
 80036ac:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	18d3      	adds	r3, r2, r3
 80036b8:	881b      	ldrh	r3, [r3, #0]
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	236c      	movs	r3, #108	; 0x6c
 80036be:	18fb      	adds	r3, r7, r3
 80036c0:	49a3      	ldr	r1, [pc, #652]	; (8003950 <USB_ActivateEndpoint+0x2b4>)
 80036c2:	400a      	ands	r2, r1
 80036c4:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	78db      	ldrb	r3, [r3, #3]
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	d017      	beq.n	80036fe <USB_ActivateEndpoint+0x62>
 80036ce:	dc28      	bgt.n	8003722 <USB_ActivateEndpoint+0x86>
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d00e      	beq.n	80036f2 <USB_ActivateEndpoint+0x56>
 80036d4:	dc25      	bgt.n	8003722 <USB_ActivateEndpoint+0x86>
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d002      	beq.n	80036e0 <USB_ActivateEndpoint+0x44>
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d018      	beq.n	8003710 <USB_ActivateEndpoint+0x74>
 80036de:	e020      	b.n	8003722 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80036e0:	226c      	movs	r2, #108	; 0x6c
 80036e2:	18bb      	adds	r3, r7, r2
 80036e4:	18ba      	adds	r2, r7, r2
 80036e6:	8812      	ldrh	r2, [r2, #0]
 80036e8:	2180      	movs	r1, #128	; 0x80
 80036ea:	0089      	lsls	r1, r1, #2
 80036ec:	430a      	orrs	r2, r1
 80036ee:	801a      	strh	r2, [r3, #0]
      break;
 80036f0:	e01c      	b.n	800372c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80036f2:	226c      	movs	r2, #108	; 0x6c
 80036f4:	18bb      	adds	r3, r7, r2
 80036f6:	18ba      	adds	r2, r7, r2
 80036f8:	8812      	ldrh	r2, [r2, #0]
 80036fa:	801a      	strh	r2, [r3, #0]
      break;
 80036fc:	e016      	b.n	800372c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80036fe:	226c      	movs	r2, #108	; 0x6c
 8003700:	18bb      	adds	r3, r7, r2
 8003702:	18ba      	adds	r2, r7, r2
 8003704:	8812      	ldrh	r2, [r2, #0]
 8003706:	21c0      	movs	r1, #192	; 0xc0
 8003708:	00c9      	lsls	r1, r1, #3
 800370a:	430a      	orrs	r2, r1
 800370c:	801a      	strh	r2, [r3, #0]
      break;
 800370e:	e00d      	b.n	800372c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003710:	226c      	movs	r2, #108	; 0x6c
 8003712:	18bb      	adds	r3, r7, r2
 8003714:	18ba      	adds	r2, r7, r2
 8003716:	8812      	ldrh	r2, [r2, #0]
 8003718:	2180      	movs	r1, #128	; 0x80
 800371a:	00c9      	lsls	r1, r1, #3
 800371c:	430a      	orrs	r2, r1
 800371e:	801a      	strh	r2, [r3, #0]
      break;
 8003720:	e004      	b.n	800372c <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8003722:	236f      	movs	r3, #111	; 0x6f
 8003724:	18fb      	adds	r3, r7, r3
 8003726:	2201      	movs	r2, #1
 8003728:	701a      	strb	r2, [r3, #0]
      break;
 800372a:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	18d3      	adds	r3, r2, r3
 8003736:	226c      	movs	r2, #108	; 0x6c
 8003738:	18ba      	adds	r2, r7, r2
 800373a:	8812      	ldrh	r2, [r2, #0]
 800373c:	4985      	ldr	r1, [pc, #532]	; (8003954 <USB_ActivateEndpoint+0x2b8>)
 800373e:	430a      	orrs	r2, r1
 8003740:	b292      	uxth	r2, r2
 8003742:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	18d3      	adds	r3, r2, r3
 800374e:	881b      	ldrh	r3, [r3, #0]
 8003750:	b29b      	uxth	r3, r3
 8003752:	b21b      	sxth	r3, r3
 8003754:	4a80      	ldr	r2, [pc, #512]	; (8003958 <USB_ActivateEndpoint+0x2bc>)
 8003756:	4013      	ands	r3, r2
 8003758:	b21a      	sxth	r2, r3
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	b21b      	sxth	r3, r3
 8003760:	4313      	orrs	r3, r2
 8003762:	b21a      	sxth	r2, r3
 8003764:	2166      	movs	r1, #102	; 0x66
 8003766:	187b      	adds	r3, r7, r1
 8003768:	801a      	strh	r2, [r3, #0]
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	18d3      	adds	r3, r2, r3
 8003774:	187a      	adds	r2, r7, r1
 8003776:	8812      	ldrh	r2, [r2, #0]
 8003778:	4976      	ldr	r1, [pc, #472]	; (8003954 <USB_ActivateEndpoint+0x2b8>)
 800377a:	430a      	orrs	r2, r1
 800377c:	b292      	uxth	r2, r2
 800377e:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	7b1b      	ldrb	r3, [r3, #12]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d000      	beq.n	800378a <USB_ActivateEndpoint+0xee>
 8003788:	e178      	b.n	8003a7c <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	785b      	ldrb	r3, [r3, #1]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d100      	bne.n	8003794 <USB_ActivateEndpoint+0xf8>
 8003792:	e07a      	b.n	800388a <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	61bb      	str	r3, [r7, #24]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2250      	movs	r2, #80	; 0x50
 800379c:	5a9b      	ldrh	r3, [r3, r2]
 800379e:	b29b      	uxth	r3, r3
 80037a0:	001a      	movs	r2, r3
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	189b      	adds	r3, r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	00da      	lsls	r2, r3, #3
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	18d3      	adds	r3, r2, r3
 80037b2:	2280      	movs	r2, #128	; 0x80
 80037b4:	00d2      	lsls	r2, r2, #3
 80037b6:	4694      	mov	ip, r2
 80037b8:	4463      	add	r3, ip
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	88db      	ldrh	r3, [r3, #6]
 80037c0:	085b      	lsrs	r3, r3, #1
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	18db      	adds	r3, r3, r3
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	18d2      	adds	r2, r2, r3
 80037d6:	2112      	movs	r1, #18
 80037d8:	187b      	adds	r3, r7, r1
 80037da:	8812      	ldrh	r2, [r2, #0]
 80037dc:	801a      	strh	r2, [r3, #0]
 80037de:	187b      	adds	r3, r7, r1
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	2240      	movs	r2, #64	; 0x40
 80037e4:	4013      	ands	r3, r2
 80037e6:	d016      	beq.n	8003816 <USB_ActivateEndpoint+0x17a>
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	18d3      	adds	r3, r2, r3
 80037f2:	881b      	ldrh	r3, [r3, #0]
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	2010      	movs	r0, #16
 80037f8:	183b      	adds	r3, r7, r0
 80037fa:	4957      	ldr	r1, [pc, #348]	; (8003958 <USB_ActivateEndpoint+0x2bc>)
 80037fc:	400a      	ands	r2, r1
 80037fe:	801a      	strh	r2, [r3, #0]
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	18d3      	adds	r3, r2, r3
 800380a:	183a      	adds	r2, r7, r0
 800380c:	8812      	ldrh	r2, [r2, #0]
 800380e:	4953      	ldr	r1, [pc, #332]	; (800395c <USB_ActivateEndpoint+0x2c0>)
 8003810:	430a      	orrs	r2, r1
 8003812:	b292      	uxth	r2, r2
 8003814:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	78db      	ldrb	r3, [r3, #3]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d01d      	beq.n	800385a <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	18d3      	adds	r3, r2, r3
 8003828:	881b      	ldrh	r3, [r3, #0]
 800382a:	b29a      	uxth	r2, r3
 800382c:	200c      	movs	r0, #12
 800382e:	183b      	adds	r3, r7, r0
 8003830:	494b      	ldr	r1, [pc, #300]	; (8003960 <USB_ActivateEndpoint+0x2c4>)
 8003832:	400a      	ands	r2, r1
 8003834:	801a      	strh	r2, [r3, #0]
 8003836:	183b      	adds	r3, r7, r0
 8003838:	183a      	adds	r2, r7, r0
 800383a:	8812      	ldrh	r2, [r2, #0]
 800383c:	2120      	movs	r1, #32
 800383e:	404a      	eors	r2, r1
 8003840:	801a      	strh	r2, [r3, #0]
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	18d3      	adds	r3, r2, r3
 800384c:	183a      	adds	r2, r7, r0
 800384e:	8812      	ldrh	r2, [r2, #0]
 8003850:	4940      	ldr	r1, [pc, #256]	; (8003954 <USB_ActivateEndpoint+0x2b8>)
 8003852:	430a      	orrs	r2, r1
 8003854:	b292      	uxth	r2, r2
 8003856:	801a      	strh	r2, [r3, #0]
 8003858:	e2b4      	b.n	8003dc4 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	18d3      	adds	r3, r2, r3
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	b29a      	uxth	r2, r3
 8003868:	200e      	movs	r0, #14
 800386a:	183b      	adds	r3, r7, r0
 800386c:	493c      	ldr	r1, [pc, #240]	; (8003960 <USB_ActivateEndpoint+0x2c4>)
 800386e:	400a      	ands	r2, r1
 8003870:	801a      	strh	r2, [r3, #0]
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	18d3      	adds	r3, r2, r3
 800387c:	183a      	adds	r2, r7, r0
 800387e:	8812      	ldrh	r2, [r2, #0]
 8003880:	4934      	ldr	r1, [pc, #208]	; (8003954 <USB_ActivateEndpoint+0x2b8>)
 8003882:	430a      	orrs	r2, r1
 8003884:	b292      	uxth	r2, r2
 8003886:	801a      	strh	r2, [r3, #0]
 8003888:	e29c      	b.n	8003dc4 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	633b      	str	r3, [r7, #48]	; 0x30
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2250      	movs	r2, #80	; 0x50
 8003892:	5a9b      	ldrh	r3, [r3, r2]
 8003894:	b29b      	uxth	r3, r3
 8003896:	001a      	movs	r2, r3
 8003898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389a:	189b      	adds	r3, r3, r2
 800389c:	633b      	str	r3, [r7, #48]	; 0x30
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	00da      	lsls	r2, r3, #3
 80038a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a6:	18d3      	adds	r3, r2, r3
 80038a8:	4a2e      	ldr	r2, [pc, #184]	; (8003964 <USB_ActivateEndpoint+0x2c8>)
 80038aa:	4694      	mov	ip, r2
 80038ac:	4463      	add	r3, ip
 80038ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	88db      	ldrh	r3, [r3, #6]
 80038b4:	085b      	lsrs	r3, r3, #1
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	18db      	adds	r3, r3, r3
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038be:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2250      	movs	r2, #80	; 0x50
 80038c8:	5a9b      	ldrh	r3, [r3, r2]
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	001a      	movs	r2, r3
 80038ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d0:	189b      	adds	r3, r3, r2
 80038d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	00da      	lsls	r2, r3, #3
 80038da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038dc:	18d3      	adds	r3, r2, r3
 80038de:	4a22      	ldr	r2, [pc, #136]	; (8003968 <USB_ActivateEndpoint+0x2cc>)
 80038e0:	4694      	mov	ip, r2
 80038e2:	4463      	add	r3, ip
 80038e4:	627b      	str	r3, [r7, #36]	; 0x24
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	881b      	ldrh	r3, [r3, #0]
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	059b      	lsls	r3, r3, #22
 80038ee:	0d9b      	lsrs	r3, r3, #22
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	801a      	strh	r2, [r3, #0]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	2b3e      	cmp	r3, #62	; 0x3e
 80038fc:	d91a      	bls.n	8003934 <USB_ActivateEndpoint+0x298>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	095b      	lsrs	r3, r3, #5
 8003904:	66bb      	str	r3, [r7, #104]	; 0x68
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	221f      	movs	r2, #31
 800390c:	4013      	ands	r3, r2
 800390e:	d102      	bne.n	8003916 <USB_ActivateEndpoint+0x27a>
 8003910:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003912:	3b01      	subs	r3, #1
 8003914:	66bb      	str	r3, [r7, #104]	; 0x68
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	b29a      	uxth	r2, r3
 800391c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800391e:	b29b      	uxth	r3, r3
 8003920:	029b      	lsls	r3, r3, #10
 8003922:	b29b      	uxth	r3, r3
 8003924:	4313      	orrs	r3, r2
 8003926:	b29b      	uxth	r3, r3
 8003928:	4a10      	ldr	r2, [pc, #64]	; (800396c <USB_ActivateEndpoint+0x2d0>)
 800392a:	4313      	orrs	r3, r2
 800392c:	b29a      	uxth	r2, r3
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	801a      	strh	r2, [r3, #0]
 8003932:	e034      	b.n	800399e <USB_ActivateEndpoint+0x302>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d119      	bne.n	8003970 <USB_ActivateEndpoint+0x2d4>
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	881b      	ldrh	r3, [r3, #0]
 8003940:	b29b      	uxth	r3, r3
 8003942:	4a0a      	ldr	r2, [pc, #40]	; (800396c <USB_ActivateEndpoint+0x2d0>)
 8003944:	4313      	orrs	r3, r2
 8003946:	b29a      	uxth	r2, r3
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	801a      	strh	r2, [r3, #0]
 800394c:	e027      	b.n	800399e <USB_ActivateEndpoint+0x302>
 800394e:	46c0      	nop			; (mov r8, r8)
 8003950:	ffff898f 	.word	0xffff898f
 8003954:	ffff8080 	.word	0xffff8080
 8003958:	ffff8f8f 	.word	0xffff8f8f
 800395c:	ffff80c0 	.word	0xffff80c0
 8003960:	ffff8fbf 	.word	0xffff8fbf
 8003964:	00000404 	.word	0x00000404
 8003968:	00000406 	.word	0x00000406
 800396c:	ffff8000 	.word	0xffff8000
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	085b      	lsrs	r3, r3, #1
 8003976:	66bb      	str	r3, [r7, #104]	; 0x68
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	2201      	movs	r2, #1
 800397e:	4013      	ands	r3, r2
 8003980:	d002      	beq.n	8003988 <USB_ActivateEndpoint+0x2ec>
 8003982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003984:	3301      	adds	r3, #1
 8003986:	66bb      	str	r3, [r7, #104]	; 0x68
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	b29a      	uxth	r2, r3
 800398e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003990:	b29b      	uxth	r3, r3
 8003992:	029b      	lsls	r3, r3, #10
 8003994:	b29b      	uxth	r3, r3
 8003996:	4313      	orrs	r3, r2
 8003998:	b29a      	uxth	r2, r3
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	18d2      	adds	r2, r2, r3
 80039a8:	2122      	movs	r1, #34	; 0x22
 80039aa:	187b      	adds	r3, r7, r1
 80039ac:	8812      	ldrh	r2, [r2, #0]
 80039ae:	801a      	strh	r2, [r3, #0]
 80039b0:	187b      	adds	r3, r7, r1
 80039b2:	881a      	ldrh	r2, [r3, #0]
 80039b4:	2380      	movs	r3, #128	; 0x80
 80039b6:	01db      	lsls	r3, r3, #7
 80039b8:	4013      	ands	r3, r2
 80039ba:	d016      	beq.n	80039ea <USB_ActivateEndpoint+0x34e>
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	18d3      	adds	r3, r2, r3
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	2020      	movs	r0, #32
 80039cc:	183b      	adds	r3, r7, r0
 80039ce:	49dd      	ldr	r1, [pc, #884]	; (8003d44 <USB_ActivateEndpoint+0x6a8>)
 80039d0:	400a      	ands	r2, r1
 80039d2:	801a      	strh	r2, [r3, #0]
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	18d3      	adds	r3, r2, r3
 80039de:	183a      	adds	r2, r7, r0
 80039e0:	8812      	ldrh	r2, [r2, #0]
 80039e2:	49d9      	ldr	r1, [pc, #868]	; (8003d48 <USB_ActivateEndpoint+0x6ac>)
 80039e4:	430a      	orrs	r2, r1
 80039e6:	b292      	uxth	r2, r2
 80039e8:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d125      	bne.n	8003a3e <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	18d3      	adds	r3, r2, r3
 80039fc:	881b      	ldrh	r3, [r3, #0]
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	201c      	movs	r0, #28
 8003a02:	183b      	adds	r3, r7, r0
 8003a04:	49d1      	ldr	r1, [pc, #836]	; (8003d4c <USB_ActivateEndpoint+0x6b0>)
 8003a06:	400a      	ands	r2, r1
 8003a08:	801a      	strh	r2, [r3, #0]
 8003a0a:	183b      	adds	r3, r7, r0
 8003a0c:	183a      	adds	r2, r7, r0
 8003a0e:	8812      	ldrh	r2, [r2, #0]
 8003a10:	2180      	movs	r1, #128	; 0x80
 8003a12:	0149      	lsls	r1, r1, #5
 8003a14:	404a      	eors	r2, r1
 8003a16:	801a      	strh	r2, [r3, #0]
 8003a18:	183b      	adds	r3, r7, r0
 8003a1a:	183a      	adds	r2, r7, r0
 8003a1c:	8812      	ldrh	r2, [r2, #0]
 8003a1e:	2180      	movs	r1, #128	; 0x80
 8003a20:	0189      	lsls	r1, r1, #6
 8003a22:	404a      	eors	r2, r1
 8003a24:	801a      	strh	r2, [r3, #0]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	18d3      	adds	r3, r2, r3
 8003a30:	183a      	adds	r2, r7, r0
 8003a32:	8812      	ldrh	r2, [r2, #0]
 8003a34:	49c6      	ldr	r1, [pc, #792]	; (8003d50 <USB_ActivateEndpoint+0x6b4>)
 8003a36:	430a      	orrs	r2, r1
 8003a38:	b292      	uxth	r2, r2
 8003a3a:	801a      	strh	r2, [r3, #0]
 8003a3c:	e1c2      	b.n	8003dc4 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	18d3      	adds	r3, r2, r3
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	201e      	movs	r0, #30
 8003a4e:	183b      	adds	r3, r7, r0
 8003a50:	49be      	ldr	r1, [pc, #760]	; (8003d4c <USB_ActivateEndpoint+0x6b0>)
 8003a52:	400a      	ands	r2, r1
 8003a54:	801a      	strh	r2, [r3, #0]
 8003a56:	183b      	adds	r3, r7, r0
 8003a58:	183a      	adds	r2, r7, r0
 8003a5a:	8812      	ldrh	r2, [r2, #0]
 8003a5c:	2180      	movs	r1, #128	; 0x80
 8003a5e:	0189      	lsls	r1, r1, #6
 8003a60:	404a      	eors	r2, r1
 8003a62:	801a      	strh	r2, [r3, #0]
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	18d3      	adds	r3, r2, r3
 8003a6e:	183a      	adds	r2, r7, r0
 8003a70:	8812      	ldrh	r2, [r2, #0]
 8003a72:	49b7      	ldr	r1, [pc, #732]	; (8003d50 <USB_ActivateEndpoint+0x6b4>)
 8003a74:	430a      	orrs	r2, r1
 8003a76:	b292      	uxth	r2, r2
 8003a78:	801a      	strh	r2, [r3, #0]
 8003a7a:	e1a3      	b.n	8003dc4 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	78db      	ldrb	r3, [r3, #3]
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d117      	bne.n	8003ab4 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	18d3      	adds	r3, r2, r3
 8003a8e:	881b      	ldrh	r3, [r3, #0]
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	2062      	movs	r0, #98	; 0x62
 8003a94:	183b      	adds	r3, r7, r0
 8003a96:	49ab      	ldr	r1, [pc, #684]	; (8003d44 <USB_ActivateEndpoint+0x6a8>)
 8003a98:	400a      	ands	r2, r1
 8003a9a:	801a      	strh	r2, [r3, #0]
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	18d3      	adds	r3, r2, r3
 8003aa6:	183a      	adds	r2, r7, r0
 8003aa8:	8812      	ldrh	r2, [r2, #0]
 8003aaa:	49aa      	ldr	r1, [pc, #680]	; (8003d54 <USB_ActivateEndpoint+0x6b8>)
 8003aac:	430a      	orrs	r2, r1
 8003aae:	b292      	uxth	r2, r2
 8003ab0:	801a      	strh	r2, [r3, #0]
 8003ab2:	e016      	b.n	8003ae2 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	18d3      	adds	r3, r2, r3
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	2064      	movs	r0, #100	; 0x64
 8003ac4:	183b      	adds	r3, r7, r0
 8003ac6:	49a4      	ldr	r1, [pc, #656]	; (8003d58 <USB_ActivateEndpoint+0x6bc>)
 8003ac8:	400a      	ands	r2, r1
 8003aca:	801a      	strh	r2, [r3, #0]
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	18d3      	adds	r3, r2, r3
 8003ad6:	183a      	adds	r2, r7, r0
 8003ad8:	8812      	ldrh	r2, [r2, #0]
 8003ada:	499d      	ldr	r1, [pc, #628]	; (8003d50 <USB_ActivateEndpoint+0x6b4>)
 8003adc:	430a      	orrs	r2, r1
 8003ade:	b292      	uxth	r2, r2
 8003ae0:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2250      	movs	r2, #80	; 0x50
 8003aea:	5a9b      	ldrh	r3, [r3, r2]
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	001a      	movs	r2, r3
 8003af0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003af2:	189b      	adds	r3, r3, r2
 8003af4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	00da      	lsls	r2, r3, #3
 8003afc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003afe:	18d3      	adds	r3, r2, r3
 8003b00:	2280      	movs	r2, #128	; 0x80
 8003b02:	00d2      	lsls	r2, r2, #3
 8003b04:	4694      	mov	ip, r2
 8003b06:	4463      	add	r3, ip
 8003b08:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	891b      	ldrh	r3, [r3, #8]
 8003b0e:	085b      	lsrs	r3, r3, #1
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	18db      	adds	r3, r3, r3
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b18:	801a      	strh	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	657b      	str	r3, [r7, #84]	; 0x54
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2250      	movs	r2, #80	; 0x50
 8003b22:	5a9b      	ldrh	r3, [r3, r2]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	001a      	movs	r2, r3
 8003b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b2a:	189b      	adds	r3, r3, r2
 8003b2c:	657b      	str	r3, [r7, #84]	; 0x54
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	00da      	lsls	r2, r3, #3
 8003b34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b36:	18d3      	adds	r3, r2, r3
 8003b38:	4a88      	ldr	r2, [pc, #544]	; (8003d5c <USB_ActivateEndpoint+0x6c0>)
 8003b3a:	4694      	mov	ip, r2
 8003b3c:	4463      	add	r3, ip
 8003b3e:	653b      	str	r3, [r7, #80]	; 0x50
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	895b      	ldrh	r3, [r3, #10]
 8003b44:	085b      	lsrs	r3, r3, #1
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	18db      	adds	r3, r3, r3
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b4e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	785b      	ldrb	r3, [r3, #1]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d000      	beq.n	8003b5a <USB_ActivateEndpoint+0x4be>
 8003b58:	e087      	b.n	8003c6a <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	18d2      	adds	r2, r2, r3
 8003b64:	2140      	movs	r1, #64	; 0x40
 8003b66:	187b      	adds	r3, r7, r1
 8003b68:	8812      	ldrh	r2, [r2, #0]
 8003b6a:	801a      	strh	r2, [r3, #0]
 8003b6c:	187b      	adds	r3, r7, r1
 8003b6e:	881a      	ldrh	r2, [r3, #0]
 8003b70:	2380      	movs	r3, #128	; 0x80
 8003b72:	01db      	lsls	r3, r3, #7
 8003b74:	4013      	ands	r3, r2
 8003b76:	d016      	beq.n	8003ba6 <USB_ActivateEndpoint+0x50a>
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	18d3      	adds	r3, r2, r3
 8003b82:	881b      	ldrh	r3, [r3, #0]
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	203e      	movs	r0, #62	; 0x3e
 8003b88:	183b      	adds	r3, r7, r0
 8003b8a:	496e      	ldr	r1, [pc, #440]	; (8003d44 <USB_ActivateEndpoint+0x6a8>)
 8003b8c:	400a      	ands	r2, r1
 8003b8e:	801a      	strh	r2, [r3, #0]
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	18d3      	adds	r3, r2, r3
 8003b9a:	183a      	adds	r2, r7, r0
 8003b9c:	8812      	ldrh	r2, [r2, #0]
 8003b9e:	496a      	ldr	r1, [pc, #424]	; (8003d48 <USB_ActivateEndpoint+0x6ac>)
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	b292      	uxth	r2, r2
 8003ba4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	18d2      	adds	r2, r2, r3
 8003bb0:	213c      	movs	r1, #60	; 0x3c
 8003bb2:	187b      	adds	r3, r7, r1
 8003bb4:	8812      	ldrh	r2, [r2, #0]
 8003bb6:	801a      	strh	r2, [r3, #0]
 8003bb8:	187b      	adds	r3, r7, r1
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	2240      	movs	r2, #64	; 0x40
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	d016      	beq.n	8003bf0 <USB_ActivateEndpoint+0x554>
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	18d3      	adds	r3, r2, r3
 8003bcc:	881b      	ldrh	r3, [r3, #0]
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	203a      	movs	r0, #58	; 0x3a
 8003bd2:	183b      	adds	r3, r7, r0
 8003bd4:	495b      	ldr	r1, [pc, #364]	; (8003d44 <USB_ActivateEndpoint+0x6a8>)
 8003bd6:	400a      	ands	r2, r1
 8003bd8:	801a      	strh	r2, [r3, #0]
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	18d3      	adds	r3, r2, r3
 8003be4:	183a      	adds	r2, r7, r0
 8003be6:	8812      	ldrh	r2, [r2, #0]
 8003be8:	495d      	ldr	r1, [pc, #372]	; (8003d60 <USB_ActivateEndpoint+0x6c4>)
 8003bea:	430a      	orrs	r2, r1
 8003bec:	b292      	uxth	r2, r2
 8003bee:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	18d3      	adds	r3, r2, r3
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	2038      	movs	r0, #56	; 0x38
 8003c00:	183b      	adds	r3, r7, r0
 8003c02:	4952      	ldr	r1, [pc, #328]	; (8003d4c <USB_ActivateEndpoint+0x6b0>)
 8003c04:	400a      	ands	r2, r1
 8003c06:	801a      	strh	r2, [r3, #0]
 8003c08:	183b      	adds	r3, r7, r0
 8003c0a:	183a      	adds	r2, r7, r0
 8003c0c:	8812      	ldrh	r2, [r2, #0]
 8003c0e:	2180      	movs	r1, #128	; 0x80
 8003c10:	0149      	lsls	r1, r1, #5
 8003c12:	404a      	eors	r2, r1
 8003c14:	801a      	strh	r2, [r3, #0]
 8003c16:	183b      	adds	r3, r7, r0
 8003c18:	183a      	adds	r2, r7, r0
 8003c1a:	8812      	ldrh	r2, [r2, #0]
 8003c1c:	2180      	movs	r1, #128	; 0x80
 8003c1e:	0189      	lsls	r1, r1, #6
 8003c20:	404a      	eors	r2, r1
 8003c22:	801a      	strh	r2, [r3, #0]
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	18d3      	adds	r3, r2, r3
 8003c2e:	183a      	adds	r2, r7, r0
 8003c30:	8812      	ldrh	r2, [r2, #0]
 8003c32:	4947      	ldr	r1, [pc, #284]	; (8003d50 <USB_ActivateEndpoint+0x6b4>)
 8003c34:	430a      	orrs	r2, r1
 8003c36:	b292      	uxth	r2, r2
 8003c38:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	18d3      	adds	r3, r2, r3
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	2036      	movs	r0, #54	; 0x36
 8003c4a:	183b      	adds	r3, r7, r0
 8003c4c:	4945      	ldr	r1, [pc, #276]	; (8003d64 <USB_ActivateEndpoint+0x6c8>)
 8003c4e:	400a      	ands	r2, r1
 8003c50:	801a      	strh	r2, [r3, #0]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	18d3      	adds	r3, r2, r3
 8003c5c:	183a      	adds	r2, r7, r0
 8003c5e:	8812      	ldrh	r2, [r2, #0]
 8003c60:	493b      	ldr	r1, [pc, #236]	; (8003d50 <USB_ActivateEndpoint+0x6b4>)
 8003c62:	430a      	orrs	r2, r1
 8003c64:	b292      	uxth	r2, r2
 8003c66:	801a      	strh	r2, [r3, #0]
 8003c68:	e0ac      	b.n	8003dc4 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	18d2      	adds	r2, r2, r3
 8003c74:	214e      	movs	r1, #78	; 0x4e
 8003c76:	187b      	adds	r3, r7, r1
 8003c78:	8812      	ldrh	r2, [r2, #0]
 8003c7a:	801a      	strh	r2, [r3, #0]
 8003c7c:	187b      	adds	r3, r7, r1
 8003c7e:	881a      	ldrh	r2, [r3, #0]
 8003c80:	2380      	movs	r3, #128	; 0x80
 8003c82:	01db      	lsls	r3, r3, #7
 8003c84:	4013      	ands	r3, r2
 8003c86:	d016      	beq.n	8003cb6 <USB_ActivateEndpoint+0x61a>
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	18d3      	adds	r3, r2, r3
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	204c      	movs	r0, #76	; 0x4c
 8003c98:	183b      	adds	r3, r7, r0
 8003c9a:	492a      	ldr	r1, [pc, #168]	; (8003d44 <USB_ActivateEndpoint+0x6a8>)
 8003c9c:	400a      	ands	r2, r1
 8003c9e:	801a      	strh	r2, [r3, #0]
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	18d3      	adds	r3, r2, r3
 8003caa:	183a      	adds	r2, r7, r0
 8003cac:	8812      	ldrh	r2, [r2, #0]
 8003cae:	4926      	ldr	r1, [pc, #152]	; (8003d48 <USB_ActivateEndpoint+0x6ac>)
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	b292      	uxth	r2, r2
 8003cb4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	18d2      	adds	r2, r2, r3
 8003cc0:	214a      	movs	r1, #74	; 0x4a
 8003cc2:	187b      	adds	r3, r7, r1
 8003cc4:	8812      	ldrh	r2, [r2, #0]
 8003cc6:	801a      	strh	r2, [r3, #0]
 8003cc8:	187b      	adds	r3, r7, r1
 8003cca:	881b      	ldrh	r3, [r3, #0]
 8003ccc:	2240      	movs	r2, #64	; 0x40
 8003cce:	4013      	ands	r3, r2
 8003cd0:	d016      	beq.n	8003d00 <USB_ActivateEndpoint+0x664>
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	18d3      	adds	r3, r2, r3
 8003cdc:	881b      	ldrh	r3, [r3, #0]
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	2048      	movs	r0, #72	; 0x48
 8003ce2:	183b      	adds	r3, r7, r0
 8003ce4:	4917      	ldr	r1, [pc, #92]	; (8003d44 <USB_ActivateEndpoint+0x6a8>)
 8003ce6:	400a      	ands	r2, r1
 8003ce8:	801a      	strh	r2, [r3, #0]
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	18d3      	adds	r3, r2, r3
 8003cf4:	183a      	adds	r2, r7, r0
 8003cf6:	8812      	ldrh	r2, [r2, #0]
 8003cf8:	4919      	ldr	r1, [pc, #100]	; (8003d60 <USB_ActivateEndpoint+0x6c4>)
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	b292      	uxth	r2, r2
 8003cfe:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	78db      	ldrb	r3, [r3, #3]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d02f      	beq.n	8003d68 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	18d3      	adds	r3, r2, r3
 8003d12:	881b      	ldrh	r3, [r3, #0]
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	2044      	movs	r0, #68	; 0x44
 8003d18:	183b      	adds	r3, r7, r0
 8003d1a:	4912      	ldr	r1, [pc, #72]	; (8003d64 <USB_ActivateEndpoint+0x6c8>)
 8003d1c:	400a      	ands	r2, r1
 8003d1e:	801a      	strh	r2, [r3, #0]
 8003d20:	183b      	adds	r3, r7, r0
 8003d22:	183a      	adds	r2, r7, r0
 8003d24:	8812      	ldrh	r2, [r2, #0]
 8003d26:	2120      	movs	r1, #32
 8003d28:	404a      	eors	r2, r1
 8003d2a:	801a      	strh	r2, [r3, #0]
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	18d3      	adds	r3, r2, r3
 8003d36:	183a      	adds	r2, r7, r0
 8003d38:	8812      	ldrh	r2, [r2, #0]
 8003d3a:	4905      	ldr	r1, [pc, #20]	; (8003d50 <USB_ActivateEndpoint+0x6b4>)
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	b292      	uxth	r2, r2
 8003d40:	801a      	strh	r2, [r3, #0]
 8003d42:	e028      	b.n	8003d96 <USB_ActivateEndpoint+0x6fa>
 8003d44:	ffff8f8f 	.word	0xffff8f8f
 8003d48:	ffffc080 	.word	0xffffc080
 8003d4c:	ffffbf8f 	.word	0xffffbf8f
 8003d50:	ffff8080 	.word	0xffff8080
 8003d54:	ffff8180 	.word	0xffff8180
 8003d58:	ffff8e8f 	.word	0xffff8e8f
 8003d5c:	00000404 	.word	0x00000404
 8003d60:	ffff80c0 	.word	0xffff80c0
 8003d64:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	18d3      	adds	r3, r2, r3
 8003d72:	881b      	ldrh	r3, [r3, #0]
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	2046      	movs	r0, #70	; 0x46
 8003d78:	183b      	adds	r3, r7, r0
 8003d7a:	4916      	ldr	r1, [pc, #88]	; (8003dd4 <USB_ActivateEndpoint+0x738>)
 8003d7c:	400a      	ands	r2, r1
 8003d7e:	801a      	strh	r2, [r3, #0]
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	18d3      	adds	r3, r2, r3
 8003d8a:	183a      	adds	r2, r7, r0
 8003d8c:	8812      	ldrh	r2, [r2, #0]
 8003d8e:	4912      	ldr	r1, [pc, #72]	; (8003dd8 <USB_ActivateEndpoint+0x73c>)
 8003d90:	430a      	orrs	r2, r1
 8003d92:	b292      	uxth	r2, r2
 8003d94:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	18d3      	adds	r3, r2, r3
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	2042      	movs	r0, #66	; 0x42
 8003da6:	183b      	adds	r3, r7, r0
 8003da8:	490c      	ldr	r1, [pc, #48]	; (8003ddc <USB_ActivateEndpoint+0x740>)
 8003daa:	400a      	ands	r2, r1
 8003dac:	801a      	strh	r2, [r3, #0]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	18d3      	adds	r3, r2, r3
 8003db8:	183a      	adds	r2, r7, r0
 8003dba:	8812      	ldrh	r2, [r2, #0]
 8003dbc:	4906      	ldr	r1, [pc, #24]	; (8003dd8 <USB_ActivateEndpoint+0x73c>)
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	b292      	uxth	r2, r2
 8003dc2:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8003dc4:	236f      	movs	r3, #111	; 0x6f
 8003dc6:	18fb      	adds	r3, r7, r3
 8003dc8:	781b      	ldrb	r3, [r3, #0]
}
 8003dca:	0018      	movs	r0, r3
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	b01c      	add	sp, #112	; 0x70
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	46c0      	nop			; (mov r8, r8)
 8003dd4:	ffff8fbf 	.word	0xffff8fbf
 8003dd8:	ffff8080 	.word	0xffff8080
 8003ddc:	ffffbf8f 	.word	0xffffbf8f

08003de0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b08c      	sub	sp, #48	; 0x30
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	7b1b      	ldrb	r3, [r3, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d000      	beq.n	8003df4 <USB_DeactivateEndpoint+0x14>
 8003df2:	e07e      	b.n	8003ef2 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	785b      	ldrb	r3, [r3, #1]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d03c      	beq.n	8003e76 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	18d2      	adds	r2, r2, r3
 8003e06:	210c      	movs	r1, #12
 8003e08:	187b      	adds	r3, r7, r1
 8003e0a:	8812      	ldrh	r2, [r2, #0]
 8003e0c:	801a      	strh	r2, [r3, #0]
 8003e0e:	187b      	adds	r3, r7, r1
 8003e10:	881b      	ldrh	r3, [r3, #0]
 8003e12:	2240      	movs	r2, #64	; 0x40
 8003e14:	4013      	ands	r3, r2
 8003e16:	d016      	beq.n	8003e46 <USB_DeactivateEndpoint+0x66>
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	18d3      	adds	r3, r2, r3
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	200a      	movs	r0, #10
 8003e28:	183b      	adds	r3, r7, r0
 8003e2a:	49c7      	ldr	r1, [pc, #796]	; (8004148 <USB_DeactivateEndpoint+0x368>)
 8003e2c:	400a      	ands	r2, r1
 8003e2e:	801a      	strh	r2, [r3, #0]
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	18d3      	adds	r3, r2, r3
 8003e3a:	183a      	adds	r2, r7, r0
 8003e3c:	8812      	ldrh	r2, [r2, #0]
 8003e3e:	49c3      	ldr	r1, [pc, #780]	; (800414c <USB_DeactivateEndpoint+0x36c>)
 8003e40:	430a      	orrs	r2, r1
 8003e42:	b292      	uxth	r2, r2
 8003e44:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	18d3      	adds	r3, r2, r3
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	2008      	movs	r0, #8
 8003e56:	183b      	adds	r3, r7, r0
 8003e58:	49bd      	ldr	r1, [pc, #756]	; (8004150 <USB_DeactivateEndpoint+0x370>)
 8003e5a:	400a      	ands	r2, r1
 8003e5c:	801a      	strh	r2, [r3, #0]
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	18d3      	adds	r3, r2, r3
 8003e68:	183a      	adds	r2, r7, r0
 8003e6a:	8812      	ldrh	r2, [r2, #0]
 8003e6c:	49b9      	ldr	r1, [pc, #740]	; (8004154 <USB_DeactivateEndpoint+0x374>)
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	b292      	uxth	r2, r2
 8003e72:	801a      	strh	r2, [r3, #0]
 8003e74:	e163      	b.n	800413e <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	18d2      	adds	r2, r2, r3
 8003e80:	2112      	movs	r1, #18
 8003e82:	187b      	adds	r3, r7, r1
 8003e84:	8812      	ldrh	r2, [r2, #0]
 8003e86:	801a      	strh	r2, [r3, #0]
 8003e88:	187b      	adds	r3, r7, r1
 8003e8a:	881a      	ldrh	r2, [r3, #0]
 8003e8c:	2380      	movs	r3, #128	; 0x80
 8003e8e:	01db      	lsls	r3, r3, #7
 8003e90:	4013      	ands	r3, r2
 8003e92:	d016      	beq.n	8003ec2 <USB_DeactivateEndpoint+0xe2>
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	18d3      	adds	r3, r2, r3
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	2010      	movs	r0, #16
 8003ea4:	183b      	adds	r3, r7, r0
 8003ea6:	49a8      	ldr	r1, [pc, #672]	; (8004148 <USB_DeactivateEndpoint+0x368>)
 8003ea8:	400a      	ands	r2, r1
 8003eaa:	801a      	strh	r2, [r3, #0]
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	18d3      	adds	r3, r2, r3
 8003eb6:	183a      	adds	r2, r7, r0
 8003eb8:	8812      	ldrh	r2, [r2, #0]
 8003eba:	49a7      	ldr	r1, [pc, #668]	; (8004158 <USB_DeactivateEndpoint+0x378>)
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	b292      	uxth	r2, r2
 8003ec0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	18d3      	adds	r3, r2, r3
 8003ecc:	881b      	ldrh	r3, [r3, #0]
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	200e      	movs	r0, #14
 8003ed2:	183b      	adds	r3, r7, r0
 8003ed4:	49a1      	ldr	r1, [pc, #644]	; (800415c <USB_DeactivateEndpoint+0x37c>)
 8003ed6:	400a      	ands	r2, r1
 8003ed8:	801a      	strh	r2, [r3, #0]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	18d3      	adds	r3, r2, r3
 8003ee4:	183a      	adds	r2, r7, r0
 8003ee6:	8812      	ldrh	r2, [r2, #0]
 8003ee8:	499a      	ldr	r1, [pc, #616]	; (8004154 <USB_DeactivateEndpoint+0x374>)
 8003eea:	430a      	orrs	r2, r1
 8003eec:	b292      	uxth	r2, r2
 8003eee:	801a      	strh	r2, [r3, #0]
 8003ef0:	e125      	b.n	800413e <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	785b      	ldrb	r3, [r3, #1]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d000      	beq.n	8003efc <USB_DeactivateEndpoint+0x11c>
 8003efa:	e090      	b.n	800401e <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	18d2      	adds	r2, r2, r3
 8003f06:	2120      	movs	r1, #32
 8003f08:	187b      	adds	r3, r7, r1
 8003f0a:	8812      	ldrh	r2, [r2, #0]
 8003f0c:	801a      	strh	r2, [r3, #0]
 8003f0e:	187b      	adds	r3, r7, r1
 8003f10:	881a      	ldrh	r2, [r3, #0]
 8003f12:	2380      	movs	r3, #128	; 0x80
 8003f14:	01db      	lsls	r3, r3, #7
 8003f16:	4013      	ands	r3, r2
 8003f18:	d016      	beq.n	8003f48 <USB_DeactivateEndpoint+0x168>
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	18d3      	adds	r3, r2, r3
 8003f24:	881b      	ldrh	r3, [r3, #0]
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	201e      	movs	r0, #30
 8003f2a:	183b      	adds	r3, r7, r0
 8003f2c:	4986      	ldr	r1, [pc, #536]	; (8004148 <USB_DeactivateEndpoint+0x368>)
 8003f2e:	400a      	ands	r2, r1
 8003f30:	801a      	strh	r2, [r3, #0]
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	18d3      	adds	r3, r2, r3
 8003f3c:	183a      	adds	r2, r7, r0
 8003f3e:	8812      	ldrh	r2, [r2, #0]
 8003f40:	4985      	ldr	r1, [pc, #532]	; (8004158 <USB_DeactivateEndpoint+0x378>)
 8003f42:	430a      	orrs	r2, r1
 8003f44:	b292      	uxth	r2, r2
 8003f46:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	18d2      	adds	r2, r2, r3
 8003f52:	211c      	movs	r1, #28
 8003f54:	187b      	adds	r3, r7, r1
 8003f56:	8812      	ldrh	r2, [r2, #0]
 8003f58:	801a      	strh	r2, [r3, #0]
 8003f5a:	187b      	adds	r3, r7, r1
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	2240      	movs	r2, #64	; 0x40
 8003f60:	4013      	ands	r3, r2
 8003f62:	d016      	beq.n	8003f92 <USB_DeactivateEndpoint+0x1b2>
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	18d3      	adds	r3, r2, r3
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	201a      	movs	r0, #26
 8003f74:	183b      	adds	r3, r7, r0
 8003f76:	4974      	ldr	r1, [pc, #464]	; (8004148 <USB_DeactivateEndpoint+0x368>)
 8003f78:	400a      	ands	r2, r1
 8003f7a:	801a      	strh	r2, [r3, #0]
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	18d3      	adds	r3, r2, r3
 8003f86:	183a      	adds	r2, r7, r0
 8003f88:	8812      	ldrh	r2, [r2, #0]
 8003f8a:	4970      	ldr	r1, [pc, #448]	; (800414c <USB_DeactivateEndpoint+0x36c>)
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	b292      	uxth	r2, r2
 8003f90:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	18d3      	adds	r3, r2, r3
 8003f9c:	881b      	ldrh	r3, [r3, #0]
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	2018      	movs	r0, #24
 8003fa2:	183b      	adds	r3, r7, r0
 8003fa4:	4968      	ldr	r1, [pc, #416]	; (8004148 <USB_DeactivateEndpoint+0x368>)
 8003fa6:	400a      	ands	r2, r1
 8003fa8:	801a      	strh	r2, [r3, #0]
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	18d3      	adds	r3, r2, r3
 8003fb4:	183a      	adds	r2, r7, r0
 8003fb6:	8812      	ldrh	r2, [r2, #0]
 8003fb8:	4964      	ldr	r1, [pc, #400]	; (800414c <USB_DeactivateEndpoint+0x36c>)
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	b292      	uxth	r2, r2
 8003fbe:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	18d3      	adds	r3, r2, r3
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	2016      	movs	r0, #22
 8003fd0:	183b      	adds	r3, r7, r0
 8003fd2:	4962      	ldr	r1, [pc, #392]	; (800415c <USB_DeactivateEndpoint+0x37c>)
 8003fd4:	400a      	ands	r2, r1
 8003fd6:	801a      	strh	r2, [r3, #0]
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	18d3      	adds	r3, r2, r3
 8003fe2:	183a      	adds	r2, r7, r0
 8003fe4:	8812      	ldrh	r2, [r2, #0]
 8003fe6:	495b      	ldr	r1, [pc, #364]	; (8004154 <USB_DeactivateEndpoint+0x374>)
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	b292      	uxth	r2, r2
 8003fec:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	18d3      	adds	r3, r2, r3
 8003ff8:	881b      	ldrh	r3, [r3, #0]
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	2014      	movs	r0, #20
 8003ffe:	183b      	adds	r3, r7, r0
 8004000:	4953      	ldr	r1, [pc, #332]	; (8004150 <USB_DeactivateEndpoint+0x370>)
 8004002:	400a      	ands	r2, r1
 8004004:	801a      	strh	r2, [r3, #0]
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	18d3      	adds	r3, r2, r3
 8004010:	183a      	adds	r2, r7, r0
 8004012:	8812      	ldrh	r2, [r2, #0]
 8004014:	494f      	ldr	r1, [pc, #316]	; (8004154 <USB_DeactivateEndpoint+0x374>)
 8004016:	430a      	orrs	r2, r1
 8004018:	b292      	uxth	r2, r2
 800401a:	801a      	strh	r2, [r3, #0]
 800401c:	e08f      	b.n	800413e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	18d2      	adds	r2, r2, r3
 8004028:	212e      	movs	r1, #46	; 0x2e
 800402a:	187b      	adds	r3, r7, r1
 800402c:	8812      	ldrh	r2, [r2, #0]
 800402e:	801a      	strh	r2, [r3, #0]
 8004030:	187b      	adds	r3, r7, r1
 8004032:	881a      	ldrh	r2, [r3, #0]
 8004034:	2380      	movs	r3, #128	; 0x80
 8004036:	01db      	lsls	r3, r3, #7
 8004038:	4013      	ands	r3, r2
 800403a:	d016      	beq.n	800406a <USB_DeactivateEndpoint+0x28a>
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	18d3      	adds	r3, r2, r3
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	b29a      	uxth	r2, r3
 800404a:	202c      	movs	r0, #44	; 0x2c
 800404c:	183b      	adds	r3, r7, r0
 800404e:	493e      	ldr	r1, [pc, #248]	; (8004148 <USB_DeactivateEndpoint+0x368>)
 8004050:	400a      	ands	r2, r1
 8004052:	801a      	strh	r2, [r3, #0]
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	18d3      	adds	r3, r2, r3
 800405e:	183a      	adds	r2, r7, r0
 8004060:	8812      	ldrh	r2, [r2, #0]
 8004062:	493d      	ldr	r1, [pc, #244]	; (8004158 <USB_DeactivateEndpoint+0x378>)
 8004064:	430a      	orrs	r2, r1
 8004066:	b292      	uxth	r2, r2
 8004068:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	18d2      	adds	r2, r2, r3
 8004074:	212a      	movs	r1, #42	; 0x2a
 8004076:	187b      	adds	r3, r7, r1
 8004078:	8812      	ldrh	r2, [r2, #0]
 800407a:	801a      	strh	r2, [r3, #0]
 800407c:	187b      	adds	r3, r7, r1
 800407e:	881b      	ldrh	r3, [r3, #0]
 8004080:	2240      	movs	r2, #64	; 0x40
 8004082:	4013      	ands	r3, r2
 8004084:	d016      	beq.n	80040b4 <USB_DeactivateEndpoint+0x2d4>
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	18d3      	adds	r3, r2, r3
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	b29a      	uxth	r2, r3
 8004094:	2028      	movs	r0, #40	; 0x28
 8004096:	183b      	adds	r3, r7, r0
 8004098:	492b      	ldr	r1, [pc, #172]	; (8004148 <USB_DeactivateEndpoint+0x368>)
 800409a:	400a      	ands	r2, r1
 800409c:	801a      	strh	r2, [r3, #0]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	18d3      	adds	r3, r2, r3
 80040a8:	183a      	adds	r2, r7, r0
 80040aa:	8812      	ldrh	r2, [r2, #0]
 80040ac:	4927      	ldr	r1, [pc, #156]	; (800414c <USB_DeactivateEndpoint+0x36c>)
 80040ae:	430a      	orrs	r2, r1
 80040b0:	b292      	uxth	r2, r2
 80040b2:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	18d3      	adds	r3, r2, r3
 80040be:	881b      	ldrh	r3, [r3, #0]
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	2026      	movs	r0, #38	; 0x26
 80040c4:	183b      	adds	r3, r7, r0
 80040c6:	4920      	ldr	r1, [pc, #128]	; (8004148 <USB_DeactivateEndpoint+0x368>)
 80040c8:	400a      	ands	r2, r1
 80040ca:	801a      	strh	r2, [r3, #0]
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	18d3      	adds	r3, r2, r3
 80040d6:	183a      	adds	r2, r7, r0
 80040d8:	8812      	ldrh	r2, [r2, #0]
 80040da:	491f      	ldr	r1, [pc, #124]	; (8004158 <USB_DeactivateEndpoint+0x378>)
 80040dc:	430a      	orrs	r2, r1
 80040de:	b292      	uxth	r2, r2
 80040e0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	18d3      	adds	r3, r2, r3
 80040ec:	881b      	ldrh	r3, [r3, #0]
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	2024      	movs	r0, #36	; 0x24
 80040f2:	183b      	adds	r3, r7, r0
 80040f4:	4916      	ldr	r1, [pc, #88]	; (8004150 <USB_DeactivateEndpoint+0x370>)
 80040f6:	400a      	ands	r2, r1
 80040f8:	801a      	strh	r2, [r3, #0]
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	18d3      	adds	r3, r2, r3
 8004104:	183a      	adds	r2, r7, r0
 8004106:	8812      	ldrh	r2, [r2, #0]
 8004108:	4912      	ldr	r1, [pc, #72]	; (8004154 <USB_DeactivateEndpoint+0x374>)
 800410a:	430a      	orrs	r2, r1
 800410c:	b292      	uxth	r2, r2
 800410e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	18d3      	adds	r3, r2, r3
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	b29a      	uxth	r2, r3
 800411e:	2022      	movs	r0, #34	; 0x22
 8004120:	183b      	adds	r3, r7, r0
 8004122:	490e      	ldr	r1, [pc, #56]	; (800415c <USB_DeactivateEndpoint+0x37c>)
 8004124:	400a      	ands	r2, r1
 8004126:	801a      	strh	r2, [r3, #0]
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	18d3      	adds	r3, r2, r3
 8004132:	183a      	adds	r2, r7, r0
 8004134:	8812      	ldrh	r2, [r2, #0]
 8004136:	4907      	ldr	r1, [pc, #28]	; (8004154 <USB_DeactivateEndpoint+0x374>)
 8004138:	430a      	orrs	r2, r1
 800413a:	b292      	uxth	r2, r2
 800413c:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	0018      	movs	r0, r3
 8004142:	46bd      	mov	sp, r7
 8004144:	b00c      	add	sp, #48	; 0x30
 8004146:	bd80      	pop	{r7, pc}
 8004148:	ffff8f8f 	.word	0xffff8f8f
 800414c:	ffff80c0 	.word	0xffff80c0
 8004150:	ffff8fbf 	.word	0xffff8fbf
 8004154:	ffff8080 	.word	0xffff8080
 8004158:	ffffc080 	.word	0xffffc080
 800415c:	ffffbf8f 	.word	0xffffbf8f

08004160 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004160:	b590      	push	{r4, r7, lr}
 8004162:	b0c3      	sub	sp, #268	; 0x10c
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	785b      	ldrb	r3, [r3, #1]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d001      	beq.n	8004176 <USB_EPStartXfer+0x16>
 8004172:	f000 fd2d 	bl	8004bd0 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	699a      	ldr	r2, [r3, #24]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	429a      	cmp	r2, r3
 8004180:	d905      	bls.n	800418e <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	1d7a      	adds	r2, r7, #5
 8004188:	32ff      	adds	r2, #255	; 0xff
 800418a:	6013      	str	r3, [r2, #0]
 800418c:	e004      	b.n	8004198 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	1d7a      	adds	r2, r7, #5
 8004194:	32ff      	adds	r2, #255	; 0xff
 8004196:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	7b1b      	ldrb	r3, [r3, #12]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d125      	bne.n	80041ec <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	6959      	ldr	r1, [r3, #20]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	88da      	ldrh	r2, [r3, #6]
 80041a8:	1d7b      	adds	r3, r7, #5
 80041aa:	33ff      	adds	r3, #255	; 0xff
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f001 fa47 	bl	8005644 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	613b      	str	r3, [r7, #16]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2250      	movs	r2, #80	; 0x50
 80041be:	5a9b      	ldrh	r3, [r3, r2]
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	001a      	movs	r2, r3
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	189b      	adds	r3, r3, r2
 80041c8:	613b      	str	r3, [r7, #16]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	00da      	lsls	r2, r3, #3
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	18d3      	adds	r3, r2, r3
 80041d4:	4ad7      	ldr	r2, [pc, #860]	; (8004534 <USB_EPStartXfer+0x3d4>)
 80041d6:	4694      	mov	ip, r2
 80041d8:	4463      	add	r3, ip
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	1d7b      	adds	r3, r7, #5
 80041de:	33ff      	adds	r3, #255	; 0xff
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	801a      	strh	r2, [r3, #0]
 80041e8:	f000 fccd 	bl	8004b86 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	78db      	ldrb	r3, [r3, #3]
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d000      	beq.n	80041f6 <USB_EPStartXfer+0x96>
 80041f4:	e362      	b.n	80048bc <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	6a1a      	ldr	r2, [r3, #32]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d800      	bhi.n	8004204 <USB_EPStartXfer+0xa4>
 8004202:	e309      	b.n	8004818 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	18d3      	adds	r3, r2, r3
 800420e:	881b      	ldrh	r3, [r3, #0]
 8004210:	b29a      	uxth	r2, r3
 8004212:	2056      	movs	r0, #86	; 0x56
 8004214:	183b      	adds	r3, r7, r0
 8004216:	49c8      	ldr	r1, [pc, #800]	; (8004538 <USB_EPStartXfer+0x3d8>)
 8004218:	400a      	ands	r2, r1
 800421a:	801a      	strh	r2, [r3, #0]
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	18d3      	adds	r3, r2, r3
 8004226:	183a      	adds	r2, r7, r0
 8004228:	8812      	ldrh	r2, [r2, #0]
 800422a:	49c4      	ldr	r1, [pc, #784]	; (800453c <USB_EPStartXfer+0x3dc>)
 800422c:	430a      	orrs	r2, r1
 800422e:	b292      	uxth	r2, r2
 8004230:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	6a1a      	ldr	r2, [r3, #32]
 8004236:	1d7b      	adds	r3, r7, #5
 8004238:	33ff      	adds	r3, #255	; 0xff
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	1ad2      	subs	r2, r2, r3
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	18d3      	adds	r3, r2, r3
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	b29b      	uxth	r3, r3
 8004250:	001a      	movs	r2, r3
 8004252:	2340      	movs	r3, #64	; 0x40
 8004254:	4013      	ands	r3, r2
 8004256:	d100      	bne.n	800425a <USB_EPStartXfer+0xfa>
 8004258:	e176      	b.n	8004548 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	633b      	str	r3, [r7, #48]	; 0x30
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	785b      	ldrb	r3, [r3, #1]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d000      	beq.n	8004268 <USB_EPStartXfer+0x108>
 8004266:	e074      	b.n	8004352 <USB_EPStartXfer+0x1f2>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	62bb      	str	r3, [r7, #40]	; 0x28
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2250      	movs	r2, #80	; 0x50
 8004270:	5a9b      	ldrh	r3, [r3, r2]
 8004272:	b29b      	uxth	r3, r3
 8004274:	001a      	movs	r2, r3
 8004276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004278:	189b      	adds	r3, r3, r2
 800427a:	62bb      	str	r3, [r7, #40]	; 0x28
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	00da      	lsls	r2, r3, #3
 8004282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004284:	18d3      	adds	r3, r2, r3
 8004286:	4aae      	ldr	r2, [pc, #696]	; (8004540 <USB_EPStartXfer+0x3e0>)
 8004288:	4694      	mov	ip, r2
 800428a:	4463      	add	r3, ip
 800428c:	627b      	str	r3, [r7, #36]	; 0x24
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	881b      	ldrh	r3, [r3, #0]
 8004292:	b29b      	uxth	r3, r3
 8004294:	059b      	lsls	r3, r3, #22
 8004296:	0d9b      	lsrs	r3, r3, #22
 8004298:	b29a      	uxth	r2, r3
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	801a      	strh	r2, [r3, #0]
 800429e:	1d7b      	adds	r3, r7, #5
 80042a0:	33ff      	adds	r3, #255	; 0xff
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b3e      	cmp	r3, #62	; 0x3e
 80042a6:	d924      	bls.n	80042f2 <USB_EPStartXfer+0x192>
 80042a8:	1d7b      	adds	r3, r7, #5
 80042aa:	33ff      	adds	r3, #255	; 0xff
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	095b      	lsrs	r3, r3, #5
 80042b0:	1c7a      	adds	r2, r7, #1
 80042b2:	32ff      	adds	r2, #255	; 0xff
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	1d7b      	adds	r3, r7, #5
 80042b8:	33ff      	adds	r3, #255	; 0xff
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	221f      	movs	r2, #31
 80042be:	4013      	ands	r3, r2
 80042c0:	d106      	bne.n	80042d0 <USB_EPStartXfer+0x170>
 80042c2:	1c7b      	adds	r3, r7, #1
 80042c4:	33ff      	adds	r3, #255	; 0xff
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3b01      	subs	r3, #1
 80042ca:	1c7a      	adds	r2, r7, #1
 80042cc:	32ff      	adds	r2, #255	; 0xff
 80042ce:	6013      	str	r3, [r2, #0]
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	881b      	ldrh	r3, [r3, #0]
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	1c7b      	adds	r3, r7, #1
 80042d8:	33ff      	adds	r3, #255	; 0xff
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	b29b      	uxth	r3, r3
 80042de:	029b      	lsls	r3, r3, #10
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	4313      	orrs	r3, r2
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	4a97      	ldr	r2, [pc, #604]	; (8004544 <USB_EPStartXfer+0x3e4>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	801a      	strh	r2, [r3, #0]
 80042f0:	e04a      	b.n	8004388 <USB_EPStartXfer+0x228>
 80042f2:	1d7b      	adds	r3, r7, #5
 80042f4:	33ff      	adds	r3, #255	; 0xff
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d108      	bne.n	800430e <USB_EPStartXfer+0x1ae>
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	881b      	ldrh	r3, [r3, #0]
 8004300:	b29b      	uxth	r3, r3
 8004302:	4a90      	ldr	r2, [pc, #576]	; (8004544 <USB_EPStartXfer+0x3e4>)
 8004304:	4313      	orrs	r3, r2
 8004306:	b29a      	uxth	r2, r3
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	801a      	strh	r2, [r3, #0]
 800430c:	e03c      	b.n	8004388 <USB_EPStartXfer+0x228>
 800430e:	1d7b      	adds	r3, r7, #5
 8004310:	33ff      	adds	r3, #255	; 0xff
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	085b      	lsrs	r3, r3, #1
 8004316:	1c7a      	adds	r2, r7, #1
 8004318:	32ff      	adds	r2, #255	; 0xff
 800431a:	6013      	str	r3, [r2, #0]
 800431c:	1d7b      	adds	r3, r7, #5
 800431e:	33ff      	adds	r3, #255	; 0xff
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2201      	movs	r2, #1
 8004324:	4013      	ands	r3, r2
 8004326:	d006      	beq.n	8004336 <USB_EPStartXfer+0x1d6>
 8004328:	1c7b      	adds	r3, r7, #1
 800432a:	33ff      	adds	r3, #255	; 0xff
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	3301      	adds	r3, #1
 8004330:	1c7a      	adds	r2, r7, #1
 8004332:	32ff      	adds	r2, #255	; 0xff
 8004334:	6013      	str	r3, [r2, #0]
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	881b      	ldrh	r3, [r3, #0]
 800433a:	b29a      	uxth	r2, r3
 800433c:	1c7b      	adds	r3, r7, #1
 800433e:	33ff      	adds	r3, #255	; 0xff
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	b29b      	uxth	r3, r3
 8004344:	029b      	lsls	r3, r3, #10
 8004346:	b29b      	uxth	r3, r3
 8004348:	4313      	orrs	r3, r2
 800434a:	b29a      	uxth	r2, r3
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	801a      	strh	r2, [r3, #0]
 8004350:	e01a      	b.n	8004388 <USB_EPStartXfer+0x228>
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	785b      	ldrb	r3, [r3, #1]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d116      	bne.n	8004388 <USB_EPStartXfer+0x228>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2250      	movs	r2, #80	; 0x50
 800435e:	5a9b      	ldrh	r3, [r3, r2]
 8004360:	b29b      	uxth	r3, r3
 8004362:	001a      	movs	r2, r3
 8004364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004366:	189b      	adds	r3, r3, r2
 8004368:	633b      	str	r3, [r7, #48]	; 0x30
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	00da      	lsls	r2, r3, #3
 8004370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004372:	18d3      	adds	r3, r2, r3
 8004374:	4a72      	ldr	r2, [pc, #456]	; (8004540 <USB_EPStartXfer+0x3e0>)
 8004376:	4694      	mov	ip, r2
 8004378:	4463      	add	r3, ip
 800437a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800437c:	1d7b      	adds	r3, r7, #5
 800437e:	33ff      	adds	r3, #255	; 0xff
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	b29a      	uxth	r2, r3
 8004384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004386:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004388:	2076      	movs	r0, #118	; 0x76
 800438a:	183b      	adds	r3, r7, r0
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	8952      	ldrh	r2, [r2, #10]
 8004390:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	6959      	ldr	r1, [r3, #20]
 8004396:	1d7b      	adds	r3, r7, #5
 8004398:	33ff      	adds	r3, #255	; 0xff
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	b29c      	uxth	r4, r3
 800439e:	183b      	adds	r3, r7, r0
 80043a0:	881a      	ldrh	r2, [r3, #0]
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	0023      	movs	r3, r4
 80043a6:	f001 f94d 	bl	8005644 <USB_WritePMA>
            ep->xfer_buff += len;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	695a      	ldr	r2, [r3, #20]
 80043ae:	1d7b      	adds	r3, r7, #5
 80043b0:	33ff      	adds	r3, #255	; 0xff
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	18d2      	adds	r2, r2, r3
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	6a1a      	ldr	r2, [r3, #32]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d908      	bls.n	80043d8 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	6a1a      	ldr	r2, [r3, #32]
 80043ca:	1d7b      	adds	r3, r7, #5
 80043cc:	33ff      	adds	r3, #255	; 0xff
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	1ad2      	subs	r2, r2, r3
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	621a      	str	r2, [r3, #32]
 80043d6:	e007      	b.n	80043e8 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	1d7a      	adds	r2, r7, #5
 80043de:	32ff      	adds	r2, #255	; 0xff
 80043e0:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2200      	movs	r2, #0
 80043e6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	785b      	ldrb	r3, [r3, #1]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d000      	beq.n	80043f2 <USB_EPStartXfer+0x292>
 80043f0:	e070      	b.n	80044d4 <USB_EPStartXfer+0x374>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	61bb      	str	r3, [r7, #24]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2250      	movs	r2, #80	; 0x50
 80043fa:	5a9b      	ldrh	r3, [r3, r2]
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	001a      	movs	r2, r3
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	189b      	adds	r3, r3, r2
 8004404:	61bb      	str	r3, [r7, #24]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	00da      	lsls	r2, r3, #3
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	18d3      	adds	r3, r2, r3
 8004410:	4a48      	ldr	r2, [pc, #288]	; (8004534 <USB_EPStartXfer+0x3d4>)
 8004412:	4694      	mov	ip, r2
 8004414:	4463      	add	r3, ip
 8004416:	617b      	str	r3, [r7, #20]
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	881b      	ldrh	r3, [r3, #0]
 800441c:	b29b      	uxth	r3, r3
 800441e:	059b      	lsls	r3, r3, #22
 8004420:	0d9b      	lsrs	r3, r3, #22
 8004422:	b29a      	uxth	r2, r3
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	801a      	strh	r2, [r3, #0]
 8004428:	1d7b      	adds	r3, r7, #5
 800442a:	33ff      	adds	r3, #255	; 0xff
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b3e      	cmp	r3, #62	; 0x3e
 8004430:	d922      	bls.n	8004478 <USB_EPStartXfer+0x318>
 8004432:	1d7b      	adds	r3, r7, #5
 8004434:	33ff      	adds	r3, #255	; 0xff
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	095b      	lsrs	r3, r3, #5
 800443a:	21fc      	movs	r1, #252	; 0xfc
 800443c:	187a      	adds	r2, r7, r1
 800443e:	6013      	str	r3, [r2, #0]
 8004440:	1d7b      	adds	r3, r7, #5
 8004442:	33ff      	adds	r3, #255	; 0xff
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	221f      	movs	r2, #31
 8004448:	4013      	ands	r3, r2
 800444a:	d104      	bne.n	8004456 <USB_EPStartXfer+0x2f6>
 800444c:	187b      	adds	r3, r7, r1
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	3b01      	subs	r3, #1
 8004452:	187a      	adds	r2, r7, r1
 8004454:	6013      	str	r3, [r2, #0]
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	881b      	ldrh	r3, [r3, #0]
 800445a:	b29a      	uxth	r2, r3
 800445c:	23fc      	movs	r3, #252	; 0xfc
 800445e:	18fb      	adds	r3, r7, r3
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	b29b      	uxth	r3, r3
 8004464:	029b      	lsls	r3, r3, #10
 8004466:	b29b      	uxth	r3, r3
 8004468:	4313      	orrs	r3, r2
 800446a:	b29b      	uxth	r3, r3
 800446c:	4a35      	ldr	r2, [pc, #212]	; (8004544 <USB_EPStartXfer+0x3e4>)
 800446e:	4313      	orrs	r3, r2
 8004470:	b29a      	uxth	r2, r3
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	801a      	strh	r2, [r3, #0]
 8004476:	e04a      	b.n	800450e <USB_EPStartXfer+0x3ae>
 8004478:	1d7b      	adds	r3, r7, #5
 800447a:	33ff      	adds	r3, #255	; 0xff
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d108      	bne.n	8004494 <USB_EPStartXfer+0x334>
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	b29b      	uxth	r3, r3
 8004488:	4a2e      	ldr	r2, [pc, #184]	; (8004544 <USB_EPStartXfer+0x3e4>)
 800448a:	4313      	orrs	r3, r2
 800448c:	b29a      	uxth	r2, r3
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	801a      	strh	r2, [r3, #0]
 8004492:	e03c      	b.n	800450e <USB_EPStartXfer+0x3ae>
 8004494:	1d7b      	adds	r3, r7, #5
 8004496:	33ff      	adds	r3, #255	; 0xff
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	085b      	lsrs	r3, r3, #1
 800449c:	21fc      	movs	r1, #252	; 0xfc
 800449e:	187a      	adds	r2, r7, r1
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	1d7b      	adds	r3, r7, #5
 80044a4:	33ff      	adds	r3, #255	; 0xff
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2201      	movs	r2, #1
 80044aa:	4013      	ands	r3, r2
 80044ac:	d004      	beq.n	80044b8 <USB_EPStartXfer+0x358>
 80044ae:	187b      	adds	r3, r7, r1
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	3301      	adds	r3, #1
 80044b4:	187a      	adds	r2, r7, r1
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	881b      	ldrh	r3, [r3, #0]
 80044bc:	b29a      	uxth	r2, r3
 80044be:	23fc      	movs	r3, #252	; 0xfc
 80044c0:	18fb      	adds	r3, r7, r3
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	029b      	lsls	r3, r3, #10
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	4313      	orrs	r3, r2
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	801a      	strh	r2, [r3, #0]
 80044d2:	e01c      	b.n	800450e <USB_EPStartXfer+0x3ae>
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	785b      	ldrb	r3, [r3, #1]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d118      	bne.n	800450e <USB_EPStartXfer+0x3ae>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	623b      	str	r3, [r7, #32]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2250      	movs	r2, #80	; 0x50
 80044e4:	5a9b      	ldrh	r3, [r3, r2]
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	001a      	movs	r2, r3
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	189b      	adds	r3, r3, r2
 80044ee:	623b      	str	r3, [r7, #32]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	00da      	lsls	r2, r3, #3
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	18d3      	adds	r3, r2, r3
 80044fa:	4a0e      	ldr	r2, [pc, #56]	; (8004534 <USB_EPStartXfer+0x3d4>)
 80044fc:	4694      	mov	ip, r2
 80044fe:	4463      	add	r3, ip
 8004500:	61fb      	str	r3, [r7, #28]
 8004502:	1d7b      	adds	r3, r7, #5
 8004504:	33ff      	adds	r3, #255	; 0xff
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	b29a      	uxth	r2, r3
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800450e:	2076      	movs	r0, #118	; 0x76
 8004510:	183b      	adds	r3, r7, r0
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	8912      	ldrh	r2, [r2, #8]
 8004516:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	6959      	ldr	r1, [r3, #20]
 800451c:	1d7b      	adds	r3, r7, #5
 800451e:	33ff      	adds	r3, #255	; 0xff
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	b29c      	uxth	r4, r3
 8004524:	183b      	adds	r3, r7, r0
 8004526:	881a      	ldrh	r2, [r3, #0]
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	0023      	movs	r3, r4
 800452c:	f001 f88a 	bl	8005644 <USB_WritePMA>
 8004530:	e329      	b.n	8004b86 <USB_EPStartXfer+0xa26>
 8004532:	46c0      	nop			; (mov r8, r8)
 8004534:	00000402 	.word	0x00000402
 8004538:	ffff8f8f 	.word	0xffff8f8f
 800453c:	ffff8180 	.word	0xffff8180
 8004540:	00000406 	.word	0x00000406
 8004544:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	785b      	ldrb	r3, [r3, #1]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d000      	beq.n	8004552 <USB_EPStartXfer+0x3f2>
 8004550:	e070      	b.n	8004634 <USB_EPStartXfer+0x4d4>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	64bb      	str	r3, [r7, #72]	; 0x48
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2250      	movs	r2, #80	; 0x50
 800455a:	5a9b      	ldrh	r3, [r3, r2]
 800455c:	b29b      	uxth	r3, r3
 800455e:	001a      	movs	r2, r3
 8004560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004562:	189b      	adds	r3, r3, r2
 8004564:	64bb      	str	r3, [r7, #72]	; 0x48
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	00da      	lsls	r2, r3, #3
 800456c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800456e:	18d3      	adds	r3, r2, r3
 8004570:	4acd      	ldr	r2, [pc, #820]	; (80048a8 <USB_EPStartXfer+0x748>)
 8004572:	4694      	mov	ip, r2
 8004574:	4463      	add	r3, ip
 8004576:	647b      	str	r3, [r7, #68]	; 0x44
 8004578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800457a:	881b      	ldrh	r3, [r3, #0]
 800457c:	b29b      	uxth	r3, r3
 800457e:	059b      	lsls	r3, r3, #22
 8004580:	0d9b      	lsrs	r3, r3, #22
 8004582:	b29a      	uxth	r2, r3
 8004584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004586:	801a      	strh	r2, [r3, #0]
 8004588:	1d7b      	adds	r3, r7, #5
 800458a:	33ff      	adds	r3, #255	; 0xff
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b3e      	cmp	r3, #62	; 0x3e
 8004590:	d922      	bls.n	80045d8 <USB_EPStartXfer+0x478>
 8004592:	1d7b      	adds	r3, r7, #5
 8004594:	33ff      	adds	r3, #255	; 0xff
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	095b      	lsrs	r3, r3, #5
 800459a:	21f8      	movs	r1, #248	; 0xf8
 800459c:	187a      	adds	r2, r7, r1
 800459e:	6013      	str	r3, [r2, #0]
 80045a0:	1d7b      	adds	r3, r7, #5
 80045a2:	33ff      	adds	r3, #255	; 0xff
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	221f      	movs	r2, #31
 80045a8:	4013      	ands	r3, r2
 80045aa:	d104      	bne.n	80045b6 <USB_EPStartXfer+0x456>
 80045ac:	187b      	adds	r3, r7, r1
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3b01      	subs	r3, #1
 80045b2:	187a      	adds	r2, r7, r1
 80045b4:	6013      	str	r3, [r2, #0]
 80045b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	23f8      	movs	r3, #248	; 0xf8
 80045be:	18fb      	adds	r3, r7, r3
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	029b      	lsls	r3, r3, #10
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	4313      	orrs	r3, r2
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	4ab7      	ldr	r2, [pc, #732]	; (80048ac <USB_EPStartXfer+0x74c>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045d4:	801a      	strh	r2, [r3, #0]
 80045d6:	e04a      	b.n	800466e <USB_EPStartXfer+0x50e>
 80045d8:	1d7b      	adds	r3, r7, #5
 80045da:	33ff      	adds	r3, #255	; 0xff
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d108      	bne.n	80045f4 <USB_EPStartXfer+0x494>
 80045e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045e4:	881b      	ldrh	r3, [r3, #0]
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	4ab0      	ldr	r2, [pc, #704]	; (80048ac <USB_EPStartXfer+0x74c>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045f0:	801a      	strh	r2, [r3, #0]
 80045f2:	e03c      	b.n	800466e <USB_EPStartXfer+0x50e>
 80045f4:	1d7b      	adds	r3, r7, #5
 80045f6:	33ff      	adds	r3, #255	; 0xff
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	085b      	lsrs	r3, r3, #1
 80045fc:	21f8      	movs	r1, #248	; 0xf8
 80045fe:	187a      	adds	r2, r7, r1
 8004600:	6013      	str	r3, [r2, #0]
 8004602:	1d7b      	adds	r3, r7, #5
 8004604:	33ff      	adds	r3, #255	; 0xff
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2201      	movs	r2, #1
 800460a:	4013      	ands	r3, r2
 800460c:	d004      	beq.n	8004618 <USB_EPStartXfer+0x4b8>
 800460e:	187b      	adds	r3, r7, r1
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3301      	adds	r3, #1
 8004614:	187a      	adds	r2, r7, r1
 8004616:	6013      	str	r3, [r2, #0]
 8004618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800461a:	881b      	ldrh	r3, [r3, #0]
 800461c:	b29a      	uxth	r2, r3
 800461e:	23f8      	movs	r3, #248	; 0xf8
 8004620:	18fb      	adds	r3, r7, r3
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	b29b      	uxth	r3, r3
 8004626:	029b      	lsls	r3, r3, #10
 8004628:	b29b      	uxth	r3, r3
 800462a:	4313      	orrs	r3, r2
 800462c:	b29a      	uxth	r2, r3
 800462e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004630:	801a      	strh	r2, [r3, #0]
 8004632:	e01c      	b.n	800466e <USB_EPStartXfer+0x50e>
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	785b      	ldrb	r3, [r3, #1]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d118      	bne.n	800466e <USB_EPStartXfer+0x50e>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	653b      	str	r3, [r7, #80]	; 0x50
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2250      	movs	r2, #80	; 0x50
 8004644:	5a9b      	ldrh	r3, [r3, r2]
 8004646:	b29b      	uxth	r3, r3
 8004648:	001a      	movs	r2, r3
 800464a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800464c:	189b      	adds	r3, r3, r2
 800464e:	653b      	str	r3, [r7, #80]	; 0x50
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	00da      	lsls	r2, r3, #3
 8004656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004658:	18d3      	adds	r3, r2, r3
 800465a:	4a93      	ldr	r2, [pc, #588]	; (80048a8 <USB_EPStartXfer+0x748>)
 800465c:	4694      	mov	ip, r2
 800465e:	4463      	add	r3, ip
 8004660:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004662:	1d7b      	adds	r3, r7, #5
 8004664:	33ff      	adds	r3, #255	; 0xff
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	b29a      	uxth	r2, r3
 800466a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800466c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800466e:	2076      	movs	r0, #118	; 0x76
 8004670:	183b      	adds	r3, r7, r0
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	8912      	ldrh	r2, [r2, #8]
 8004676:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	6959      	ldr	r1, [r3, #20]
 800467c:	1d7b      	adds	r3, r7, #5
 800467e:	33ff      	adds	r3, #255	; 0xff
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	b29c      	uxth	r4, r3
 8004684:	183b      	adds	r3, r7, r0
 8004686:	881a      	ldrh	r2, [r3, #0]
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	0023      	movs	r3, r4
 800468c:	f000 ffda 	bl	8005644 <USB_WritePMA>
            ep->xfer_buff += len;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	695a      	ldr	r2, [r3, #20]
 8004694:	1d7b      	adds	r3, r7, #5
 8004696:	33ff      	adds	r3, #255	; 0xff
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	18d2      	adds	r2, r2, r3
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	6a1a      	ldr	r2, [r3, #32]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d908      	bls.n	80046be <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	6a1a      	ldr	r2, [r3, #32]
 80046b0:	1d7b      	adds	r3, r7, #5
 80046b2:	33ff      	adds	r3, #255	; 0xff
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	1ad2      	subs	r2, r2, r3
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	621a      	str	r2, [r3, #32]
 80046bc:	e007      	b.n	80046ce <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	1d7a      	adds	r2, r7, #5
 80046c4:	32ff      	adds	r2, #255	; 0xff
 80046c6:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	2200      	movs	r2, #0
 80046cc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	643b      	str	r3, [r7, #64]	; 0x40
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	785b      	ldrb	r3, [r3, #1]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d000      	beq.n	80046dc <USB_EPStartXfer+0x57c>
 80046da:	e070      	b.n	80047be <USB_EPStartXfer+0x65e>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	63bb      	str	r3, [r7, #56]	; 0x38
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2250      	movs	r2, #80	; 0x50
 80046e4:	5a9b      	ldrh	r3, [r3, r2]
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	001a      	movs	r2, r3
 80046ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ec:	189b      	adds	r3, r3, r2
 80046ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	00da      	lsls	r2, r3, #3
 80046f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f8:	18d3      	adds	r3, r2, r3
 80046fa:	4a6d      	ldr	r2, [pc, #436]	; (80048b0 <USB_EPStartXfer+0x750>)
 80046fc:	4694      	mov	ip, r2
 80046fe:	4463      	add	r3, ip
 8004700:	637b      	str	r3, [r7, #52]	; 0x34
 8004702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004704:	881b      	ldrh	r3, [r3, #0]
 8004706:	b29b      	uxth	r3, r3
 8004708:	059b      	lsls	r3, r3, #22
 800470a:	0d9b      	lsrs	r3, r3, #22
 800470c:	b29a      	uxth	r2, r3
 800470e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004710:	801a      	strh	r2, [r3, #0]
 8004712:	1d7b      	adds	r3, r7, #5
 8004714:	33ff      	adds	r3, #255	; 0xff
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2b3e      	cmp	r3, #62	; 0x3e
 800471a:	d922      	bls.n	8004762 <USB_EPStartXfer+0x602>
 800471c:	1d7b      	adds	r3, r7, #5
 800471e:	33ff      	adds	r3, #255	; 0xff
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	095b      	lsrs	r3, r3, #5
 8004724:	21f4      	movs	r1, #244	; 0xf4
 8004726:	187a      	adds	r2, r7, r1
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	1d7b      	adds	r3, r7, #5
 800472c:	33ff      	adds	r3, #255	; 0xff
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	221f      	movs	r2, #31
 8004732:	4013      	ands	r3, r2
 8004734:	d104      	bne.n	8004740 <USB_EPStartXfer+0x5e0>
 8004736:	187b      	adds	r3, r7, r1
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	3b01      	subs	r3, #1
 800473c:	187a      	adds	r2, r7, r1
 800473e:	6013      	str	r3, [r2, #0]
 8004740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004742:	881b      	ldrh	r3, [r3, #0]
 8004744:	b29a      	uxth	r2, r3
 8004746:	23f4      	movs	r3, #244	; 0xf4
 8004748:	18fb      	adds	r3, r7, r3
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	b29b      	uxth	r3, r3
 800474e:	029b      	lsls	r3, r3, #10
 8004750:	b29b      	uxth	r3, r3
 8004752:	4313      	orrs	r3, r2
 8004754:	b29b      	uxth	r3, r3
 8004756:	4a55      	ldr	r2, [pc, #340]	; (80048ac <USB_EPStartXfer+0x74c>)
 8004758:	4313      	orrs	r3, r2
 800475a:	b29a      	uxth	r2, r3
 800475c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800475e:	801a      	strh	r2, [r3, #0]
 8004760:	e048      	b.n	80047f4 <USB_EPStartXfer+0x694>
 8004762:	1d7b      	adds	r3, r7, #5
 8004764:	33ff      	adds	r3, #255	; 0xff
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d108      	bne.n	800477e <USB_EPStartXfer+0x61e>
 800476c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800476e:	881b      	ldrh	r3, [r3, #0]
 8004770:	b29b      	uxth	r3, r3
 8004772:	4a4e      	ldr	r2, [pc, #312]	; (80048ac <USB_EPStartXfer+0x74c>)
 8004774:	4313      	orrs	r3, r2
 8004776:	b29a      	uxth	r2, r3
 8004778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800477a:	801a      	strh	r2, [r3, #0]
 800477c:	e03a      	b.n	80047f4 <USB_EPStartXfer+0x694>
 800477e:	1d7b      	adds	r3, r7, #5
 8004780:	33ff      	adds	r3, #255	; 0xff
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	085b      	lsrs	r3, r3, #1
 8004786:	21f4      	movs	r1, #244	; 0xf4
 8004788:	187a      	adds	r2, r7, r1
 800478a:	6013      	str	r3, [r2, #0]
 800478c:	1d7b      	adds	r3, r7, #5
 800478e:	33ff      	adds	r3, #255	; 0xff
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2201      	movs	r2, #1
 8004794:	4013      	ands	r3, r2
 8004796:	d004      	beq.n	80047a2 <USB_EPStartXfer+0x642>
 8004798:	187b      	adds	r3, r7, r1
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3301      	adds	r3, #1
 800479e:	187a      	adds	r2, r7, r1
 80047a0:	6013      	str	r3, [r2, #0]
 80047a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a4:	881b      	ldrh	r3, [r3, #0]
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	23f4      	movs	r3, #244	; 0xf4
 80047aa:	18fb      	adds	r3, r7, r3
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	029b      	lsls	r3, r3, #10
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	4313      	orrs	r3, r2
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ba:	801a      	strh	r2, [r3, #0]
 80047bc:	e01a      	b.n	80047f4 <USB_EPStartXfer+0x694>
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	785b      	ldrb	r3, [r3, #1]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d116      	bne.n	80047f4 <USB_EPStartXfer+0x694>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2250      	movs	r2, #80	; 0x50
 80047ca:	5a9b      	ldrh	r3, [r3, r2]
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	001a      	movs	r2, r3
 80047d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047d2:	189b      	adds	r3, r3, r2
 80047d4:	643b      	str	r3, [r7, #64]	; 0x40
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	00da      	lsls	r2, r3, #3
 80047dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047de:	18d3      	adds	r3, r2, r3
 80047e0:	4a33      	ldr	r2, [pc, #204]	; (80048b0 <USB_EPStartXfer+0x750>)
 80047e2:	4694      	mov	ip, r2
 80047e4:	4463      	add	r3, ip
 80047e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047e8:	1d7b      	adds	r3, r7, #5
 80047ea:	33ff      	adds	r3, #255	; 0xff
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047f2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80047f4:	2076      	movs	r0, #118	; 0x76
 80047f6:	183b      	adds	r3, r7, r0
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	8952      	ldrh	r2, [r2, #10]
 80047fc:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	6959      	ldr	r1, [r3, #20]
 8004802:	1d7b      	adds	r3, r7, #5
 8004804:	33ff      	adds	r3, #255	; 0xff
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	b29c      	uxth	r4, r3
 800480a:	183b      	adds	r3, r7, r0
 800480c:	881a      	ldrh	r2, [r3, #0]
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	0023      	movs	r3, r4
 8004812:	f000 ff17 	bl	8005644 <USB_WritePMA>
 8004816:	e1b6      	b.n	8004b86 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	1d7a      	adds	r2, r7, #5
 800481e:	32ff      	adds	r2, #255	; 0xff
 8004820:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	18d3      	adds	r3, r2, r3
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	b29a      	uxth	r2, r3
 8004830:	2062      	movs	r0, #98	; 0x62
 8004832:	183b      	adds	r3, r7, r0
 8004834:	491f      	ldr	r1, [pc, #124]	; (80048b4 <USB_EPStartXfer+0x754>)
 8004836:	400a      	ands	r2, r1
 8004838:	801a      	strh	r2, [r3, #0]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	18d3      	adds	r3, r2, r3
 8004844:	183a      	adds	r2, r7, r0
 8004846:	8812      	ldrh	r2, [r2, #0]
 8004848:	491b      	ldr	r1, [pc, #108]	; (80048b8 <USB_EPStartXfer+0x758>)
 800484a:	430a      	orrs	r2, r1
 800484c:	b292      	uxth	r2, r2
 800484e:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2250      	movs	r2, #80	; 0x50
 8004858:	5a9b      	ldrh	r3, [r3, r2]
 800485a:	b29b      	uxth	r3, r3
 800485c:	001a      	movs	r2, r3
 800485e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004860:	189b      	adds	r3, r3, r2
 8004862:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	00da      	lsls	r2, r3, #3
 800486a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800486c:	18d3      	adds	r3, r2, r3
 800486e:	4a0e      	ldr	r2, [pc, #56]	; (80048a8 <USB_EPStartXfer+0x748>)
 8004870:	4694      	mov	ip, r2
 8004872:	4463      	add	r3, ip
 8004874:	65bb      	str	r3, [r7, #88]	; 0x58
 8004876:	1d7b      	adds	r3, r7, #5
 8004878:	33ff      	adds	r3, #255	; 0xff
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	b29a      	uxth	r2, r3
 800487e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004880:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004882:	2076      	movs	r0, #118	; 0x76
 8004884:	183b      	adds	r3, r7, r0
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	8912      	ldrh	r2, [r2, #8]
 800488a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	6959      	ldr	r1, [r3, #20]
 8004890:	1d7b      	adds	r3, r7, #5
 8004892:	33ff      	adds	r3, #255	; 0xff
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	b29c      	uxth	r4, r3
 8004898:	183b      	adds	r3, r7, r0
 800489a:	881a      	ldrh	r2, [r3, #0]
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	0023      	movs	r3, r4
 80048a0:	f000 fed0 	bl	8005644 <USB_WritePMA>
 80048a4:	e16f      	b.n	8004b86 <USB_EPStartXfer+0xa26>
 80048a6:	46c0      	nop			; (mov r8, r8)
 80048a8:	00000402 	.word	0x00000402
 80048ac:	ffff8000 	.word	0xffff8000
 80048b0:	00000406 	.word	0x00000406
 80048b4:	ffff8e8f 	.word	0xffff8e8f
 80048b8:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	6a1a      	ldr	r2, [r3, #32]
 80048c0:	1d7b      	adds	r3, r7, #5
 80048c2:	33ff      	adds	r3, #255	; 0xff
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	1ad2      	subs	r2, r2, r3
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	18d3      	adds	r3, r2, r3
 80048d6:	881b      	ldrh	r3, [r3, #0]
 80048d8:	b29b      	uxth	r3, r3
 80048da:	001a      	movs	r2, r3
 80048dc:	2340      	movs	r3, #64	; 0x40
 80048de:	4013      	ands	r3, r2
 80048e0:	d100      	bne.n	80048e4 <USB_EPStartXfer+0x784>
 80048e2:	e0a4      	b.n	8004a2e <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	673b      	str	r3, [r7, #112]	; 0x70
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	785b      	ldrb	r3, [r3, #1]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d000      	beq.n	80048f2 <USB_EPStartXfer+0x792>
 80048f0:	e070      	b.n	80049d4 <USB_EPStartXfer+0x874>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2250      	movs	r2, #80	; 0x50
 80048fa:	5a9b      	ldrh	r3, [r3, r2]
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	001a      	movs	r2, r3
 8004900:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004902:	189b      	adds	r3, r3, r2
 8004904:	66bb      	str	r3, [r7, #104]	; 0x68
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	00da      	lsls	r2, r3, #3
 800490c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800490e:	18d3      	adds	r3, r2, r3
 8004910:	4abc      	ldr	r2, [pc, #752]	; (8004c04 <USB_EPStartXfer+0xaa4>)
 8004912:	4694      	mov	ip, r2
 8004914:	4463      	add	r3, ip
 8004916:	667b      	str	r3, [r7, #100]	; 0x64
 8004918:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800491a:	881b      	ldrh	r3, [r3, #0]
 800491c:	b29b      	uxth	r3, r3
 800491e:	059b      	lsls	r3, r3, #22
 8004920:	0d9b      	lsrs	r3, r3, #22
 8004922:	b29a      	uxth	r2, r3
 8004924:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004926:	801a      	strh	r2, [r3, #0]
 8004928:	1d7b      	adds	r3, r7, #5
 800492a:	33ff      	adds	r3, #255	; 0xff
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2b3e      	cmp	r3, #62	; 0x3e
 8004930:	d922      	bls.n	8004978 <USB_EPStartXfer+0x818>
 8004932:	1d7b      	adds	r3, r7, #5
 8004934:	33ff      	adds	r3, #255	; 0xff
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	095b      	lsrs	r3, r3, #5
 800493a:	21f0      	movs	r1, #240	; 0xf0
 800493c:	187a      	adds	r2, r7, r1
 800493e:	6013      	str	r3, [r2, #0]
 8004940:	1d7b      	adds	r3, r7, #5
 8004942:	33ff      	adds	r3, #255	; 0xff
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	221f      	movs	r2, #31
 8004948:	4013      	ands	r3, r2
 800494a:	d104      	bne.n	8004956 <USB_EPStartXfer+0x7f6>
 800494c:	187b      	adds	r3, r7, r1
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3b01      	subs	r3, #1
 8004952:	187a      	adds	r2, r7, r1
 8004954:	6013      	str	r3, [r2, #0]
 8004956:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004958:	881b      	ldrh	r3, [r3, #0]
 800495a:	b29a      	uxth	r2, r3
 800495c:	23f0      	movs	r3, #240	; 0xf0
 800495e:	18fb      	adds	r3, r7, r3
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	b29b      	uxth	r3, r3
 8004964:	029b      	lsls	r3, r3, #10
 8004966:	b29b      	uxth	r3, r3
 8004968:	4313      	orrs	r3, r2
 800496a:	b29b      	uxth	r3, r3
 800496c:	4aa6      	ldr	r2, [pc, #664]	; (8004c08 <USB_EPStartXfer+0xaa8>)
 800496e:	4313      	orrs	r3, r2
 8004970:	b29a      	uxth	r2, r3
 8004972:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004974:	801a      	strh	r2, [r3, #0]
 8004976:	e048      	b.n	8004a0a <USB_EPStartXfer+0x8aa>
 8004978:	1d7b      	adds	r3, r7, #5
 800497a:	33ff      	adds	r3, #255	; 0xff
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d108      	bne.n	8004994 <USB_EPStartXfer+0x834>
 8004982:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004984:	881b      	ldrh	r3, [r3, #0]
 8004986:	b29b      	uxth	r3, r3
 8004988:	4a9f      	ldr	r2, [pc, #636]	; (8004c08 <USB_EPStartXfer+0xaa8>)
 800498a:	4313      	orrs	r3, r2
 800498c:	b29a      	uxth	r2, r3
 800498e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004990:	801a      	strh	r2, [r3, #0]
 8004992:	e03a      	b.n	8004a0a <USB_EPStartXfer+0x8aa>
 8004994:	1d7b      	adds	r3, r7, #5
 8004996:	33ff      	adds	r3, #255	; 0xff
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	085b      	lsrs	r3, r3, #1
 800499c:	21f0      	movs	r1, #240	; 0xf0
 800499e:	187a      	adds	r2, r7, r1
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	1d7b      	adds	r3, r7, #5
 80049a4:	33ff      	adds	r3, #255	; 0xff
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2201      	movs	r2, #1
 80049aa:	4013      	ands	r3, r2
 80049ac:	d004      	beq.n	80049b8 <USB_EPStartXfer+0x858>
 80049ae:	187b      	adds	r3, r7, r1
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3301      	adds	r3, #1
 80049b4:	187a      	adds	r2, r7, r1
 80049b6:	6013      	str	r3, [r2, #0]
 80049b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049ba:	881b      	ldrh	r3, [r3, #0]
 80049bc:	b29a      	uxth	r2, r3
 80049be:	23f0      	movs	r3, #240	; 0xf0
 80049c0:	18fb      	adds	r3, r7, r3
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	029b      	lsls	r3, r3, #10
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	4313      	orrs	r3, r2
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049d0:	801a      	strh	r2, [r3, #0]
 80049d2:	e01a      	b.n	8004a0a <USB_EPStartXfer+0x8aa>
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	785b      	ldrb	r3, [r3, #1]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d116      	bne.n	8004a0a <USB_EPStartXfer+0x8aa>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2250      	movs	r2, #80	; 0x50
 80049e0:	5a9b      	ldrh	r3, [r3, r2]
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	001a      	movs	r2, r3
 80049e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049e8:	189b      	adds	r3, r3, r2
 80049ea:	673b      	str	r3, [r7, #112]	; 0x70
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	00da      	lsls	r2, r3, #3
 80049f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049f4:	18d3      	adds	r3, r2, r3
 80049f6:	4a83      	ldr	r2, [pc, #524]	; (8004c04 <USB_EPStartXfer+0xaa4>)
 80049f8:	4694      	mov	ip, r2
 80049fa:	4463      	add	r3, ip
 80049fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049fe:	1d7b      	adds	r3, r7, #5
 8004a00:	33ff      	adds	r3, #255	; 0xff
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a08:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004a0a:	2076      	movs	r0, #118	; 0x76
 8004a0c:	183b      	adds	r3, r7, r0
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	8952      	ldrh	r2, [r2, #10]
 8004a12:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	6959      	ldr	r1, [r3, #20]
 8004a18:	1d7b      	adds	r3, r7, #5
 8004a1a:	33ff      	adds	r3, #255	; 0xff
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	b29c      	uxth	r4, r3
 8004a20:	183b      	adds	r3, r7, r0
 8004a22:	881a      	ldrh	r2, [r3, #0]
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	0023      	movs	r3, r4
 8004a28:	f000 fe0c 	bl	8005644 <USB_WritePMA>
 8004a2c:	e0ab      	b.n	8004b86 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	785b      	ldrb	r3, [r3, #1]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d000      	beq.n	8004a38 <USB_EPStartXfer+0x8d8>
 8004a36:	e070      	b.n	8004b1a <USB_EPStartXfer+0x9ba>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2250      	movs	r2, #80	; 0x50
 8004a40:	5a9b      	ldrh	r3, [r3, r2]
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	001a      	movs	r2, r3
 8004a46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a48:	189b      	adds	r3, r3, r2
 8004a4a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	00da      	lsls	r2, r3, #3
 8004a52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a54:	18d3      	adds	r3, r2, r3
 8004a56:	4a6d      	ldr	r2, [pc, #436]	; (8004c0c <USB_EPStartXfer+0xaac>)
 8004a58:	4694      	mov	ip, r2
 8004a5a:	4463      	add	r3, ip
 8004a5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a60:	881b      	ldrh	r3, [r3, #0]
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	059b      	lsls	r3, r3, #22
 8004a66:	0d9b      	lsrs	r3, r3, #22
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a6c:	801a      	strh	r2, [r3, #0]
 8004a6e:	1d7b      	adds	r3, r7, #5
 8004a70:	33ff      	adds	r3, #255	; 0xff
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b3e      	cmp	r3, #62	; 0x3e
 8004a76:	d922      	bls.n	8004abe <USB_EPStartXfer+0x95e>
 8004a78:	1d7b      	adds	r3, r7, #5
 8004a7a:	33ff      	adds	r3, #255	; 0xff
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	095b      	lsrs	r3, r3, #5
 8004a80:	21ec      	movs	r1, #236	; 0xec
 8004a82:	187a      	adds	r2, r7, r1
 8004a84:	6013      	str	r3, [r2, #0]
 8004a86:	1d7b      	adds	r3, r7, #5
 8004a88:	33ff      	adds	r3, #255	; 0xff
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	221f      	movs	r2, #31
 8004a8e:	4013      	ands	r3, r2
 8004a90:	d104      	bne.n	8004a9c <USB_EPStartXfer+0x93c>
 8004a92:	187b      	adds	r3, r7, r1
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	3b01      	subs	r3, #1
 8004a98:	187a      	adds	r2, r7, r1
 8004a9a:	6013      	str	r3, [r2, #0]
 8004a9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a9e:	881b      	ldrh	r3, [r3, #0]
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	23ec      	movs	r3, #236	; 0xec
 8004aa4:	18fb      	adds	r3, r7, r3
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	029b      	lsls	r3, r3, #10
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	4a55      	ldr	r2, [pc, #340]	; (8004c08 <USB_EPStartXfer+0xaa8>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004aba:	801a      	strh	r2, [r3, #0]
 8004abc:	e052      	b.n	8004b64 <USB_EPStartXfer+0xa04>
 8004abe:	1d7b      	adds	r3, r7, #5
 8004ac0:	33ff      	adds	r3, #255	; 0xff
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d108      	bne.n	8004ada <USB_EPStartXfer+0x97a>
 8004ac8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004aca:	881b      	ldrh	r3, [r3, #0]
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	4a4e      	ldr	r2, [pc, #312]	; (8004c08 <USB_EPStartXfer+0xaa8>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ad6:	801a      	strh	r2, [r3, #0]
 8004ad8:	e044      	b.n	8004b64 <USB_EPStartXfer+0xa04>
 8004ada:	1d7b      	adds	r3, r7, #5
 8004adc:	33ff      	adds	r3, #255	; 0xff
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	085b      	lsrs	r3, r3, #1
 8004ae2:	21ec      	movs	r1, #236	; 0xec
 8004ae4:	187a      	adds	r2, r7, r1
 8004ae6:	6013      	str	r3, [r2, #0]
 8004ae8:	1d7b      	adds	r3, r7, #5
 8004aea:	33ff      	adds	r3, #255	; 0xff
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2201      	movs	r2, #1
 8004af0:	4013      	ands	r3, r2
 8004af2:	d004      	beq.n	8004afe <USB_EPStartXfer+0x99e>
 8004af4:	187b      	adds	r3, r7, r1
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3301      	adds	r3, #1
 8004afa:	187a      	adds	r2, r7, r1
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	23ec      	movs	r3, #236	; 0xec
 8004b06:	18fb      	adds	r3, r7, r3
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	029b      	lsls	r3, r3, #10
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	4313      	orrs	r3, r2
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b16:	801a      	strh	r2, [r3, #0]
 8004b18:	e024      	b.n	8004b64 <USB_EPStartXfer+0xa04>
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	785b      	ldrb	r3, [r3, #1]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d120      	bne.n	8004b64 <USB_EPStartXfer+0xa04>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2184      	movs	r1, #132	; 0x84
 8004b26:	187a      	adds	r2, r7, r1
 8004b28:	6013      	str	r3, [r2, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2250      	movs	r2, #80	; 0x50
 8004b2e:	5a9b      	ldrh	r3, [r3, r2]
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	001a      	movs	r2, r3
 8004b34:	187b      	adds	r3, r7, r1
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	189b      	adds	r3, r3, r2
 8004b3a:	187a      	adds	r2, r7, r1
 8004b3c:	6013      	str	r3, [r2, #0]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	00da      	lsls	r2, r3, #3
 8004b44:	187b      	adds	r3, r7, r1
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	18d3      	adds	r3, r2, r3
 8004b4a:	4a30      	ldr	r2, [pc, #192]	; (8004c0c <USB_EPStartXfer+0xaac>)
 8004b4c:	4694      	mov	ip, r2
 8004b4e:	4463      	add	r3, ip
 8004b50:	2180      	movs	r1, #128	; 0x80
 8004b52:	187a      	adds	r2, r7, r1
 8004b54:	6013      	str	r3, [r2, #0]
 8004b56:	1d7b      	adds	r3, r7, #5
 8004b58:	33ff      	adds	r3, #255	; 0xff
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	187b      	adds	r3, r7, r1
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004b64:	2076      	movs	r0, #118	; 0x76
 8004b66:	183b      	adds	r3, r7, r0
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	8912      	ldrh	r2, [r2, #8]
 8004b6c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	6959      	ldr	r1, [r3, #20]
 8004b72:	1d7b      	adds	r3, r7, #5
 8004b74:	33ff      	adds	r3, #255	; 0xff
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	b29c      	uxth	r4, r3
 8004b7a:	183b      	adds	r3, r7, r0
 8004b7c:	881a      	ldrh	r2, [r3, #0]
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	0023      	movs	r3, r4
 8004b82:	f000 fd5f 	bl	8005644 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	18d3      	adds	r3, r2, r3
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	200a      	movs	r0, #10
 8004b96:	183b      	adds	r3, r7, r0
 8004b98:	491d      	ldr	r1, [pc, #116]	; (8004c10 <USB_EPStartXfer+0xab0>)
 8004b9a:	400a      	ands	r2, r1
 8004b9c:	801a      	strh	r2, [r3, #0]
 8004b9e:	183b      	adds	r3, r7, r0
 8004ba0:	183a      	adds	r2, r7, r0
 8004ba2:	8812      	ldrh	r2, [r2, #0]
 8004ba4:	2110      	movs	r1, #16
 8004ba6:	404a      	eors	r2, r1
 8004ba8:	801a      	strh	r2, [r3, #0]
 8004baa:	183b      	adds	r3, r7, r0
 8004bac:	183a      	adds	r2, r7, r0
 8004bae:	8812      	ldrh	r2, [r2, #0]
 8004bb0:	2120      	movs	r1, #32
 8004bb2:	404a      	eors	r2, r1
 8004bb4:	801a      	strh	r2, [r3, #0]
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	18d3      	adds	r3, r2, r3
 8004bc0:	183a      	adds	r2, r7, r0
 8004bc2:	8812      	ldrh	r2, [r2, #0]
 8004bc4:	4913      	ldr	r1, [pc, #76]	; (8004c14 <USB_EPStartXfer+0xab4>)
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	b292      	uxth	r2, r2
 8004bca:	801a      	strh	r2, [r3, #0]
 8004bcc:	f000 fbf4 	bl	80053b8 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	7b1b      	ldrb	r3, [r3, #12]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d000      	beq.n	8004bda <USB_EPStartXfer+0xa7a>
 8004bd8:	e0a9      	b.n	8004d2e <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	699a      	ldr	r2, [r3, #24]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d918      	bls.n	8004c18 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	1d7a      	adds	r2, r7, #5
 8004bec:	32ff      	adds	r2, #255	; 0xff
 8004bee:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	699a      	ldr	r2, [r3, #24]
 8004bf4:	1d7b      	adds	r3, r7, #5
 8004bf6:	33ff      	adds	r3, #255	; 0xff
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	1ad2      	subs	r2, r2, r3
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	619a      	str	r2, [r3, #24]
 8004c00:	e012      	b.n	8004c28 <USB_EPStartXfer+0xac8>
 8004c02:	46c0      	nop			; (mov r8, r8)
 8004c04:	00000406 	.word	0x00000406
 8004c08:	ffff8000 	.word	0xffff8000
 8004c0c:	00000402 	.word	0x00000402
 8004c10:	ffff8fbf 	.word	0xffff8fbf
 8004c14:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	1d7a      	adds	r2, r7, #5
 8004c1e:	32ff      	adds	r2, #255	; 0xff
 8004c20:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2200      	movs	r2, #0
 8004c26:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2190      	movs	r1, #144	; 0x90
 8004c2c:	187a      	adds	r2, r7, r1
 8004c2e:	6013      	str	r3, [r2, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2250      	movs	r2, #80	; 0x50
 8004c34:	5a9b      	ldrh	r3, [r3, r2]
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	001a      	movs	r2, r3
 8004c3a:	187b      	adds	r3, r7, r1
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	189b      	adds	r3, r3, r2
 8004c40:	187a      	adds	r2, r7, r1
 8004c42:	6013      	str	r3, [r2, #0]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	00da      	lsls	r2, r3, #3
 8004c4a:	187b      	adds	r3, r7, r1
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	18d3      	adds	r3, r2, r3
 8004c50:	4acf      	ldr	r2, [pc, #828]	; (8004f90 <USB_EPStartXfer+0xe30>)
 8004c52:	4694      	mov	ip, r2
 8004c54:	4463      	add	r3, ip
 8004c56:	218c      	movs	r1, #140	; 0x8c
 8004c58:	187a      	adds	r2, r7, r1
 8004c5a:	6013      	str	r3, [r2, #0]
 8004c5c:	187b      	adds	r3, r7, r1
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	059b      	lsls	r3, r3, #22
 8004c66:	0d9b      	lsrs	r3, r3, #22
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	187b      	adds	r3, r7, r1
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	801a      	strh	r2, [r3, #0]
 8004c70:	1d7b      	adds	r3, r7, #5
 8004c72:	33ff      	adds	r3, #255	; 0xff
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b3e      	cmp	r3, #62	; 0x3e
 8004c78:	d925      	bls.n	8004cc6 <USB_EPStartXfer+0xb66>
 8004c7a:	1d7b      	adds	r3, r7, #5
 8004c7c:	33ff      	adds	r3, #255	; 0xff
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	095b      	lsrs	r3, r3, #5
 8004c82:	21e8      	movs	r1, #232	; 0xe8
 8004c84:	187a      	adds	r2, r7, r1
 8004c86:	6013      	str	r3, [r2, #0]
 8004c88:	1d7b      	adds	r3, r7, #5
 8004c8a:	33ff      	adds	r3, #255	; 0xff
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	221f      	movs	r2, #31
 8004c90:	4013      	ands	r3, r2
 8004c92:	d104      	bne.n	8004c9e <USB_EPStartXfer+0xb3e>
 8004c94:	187b      	adds	r3, r7, r1
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	187a      	adds	r2, r7, r1
 8004c9c:	6013      	str	r3, [r2, #0]
 8004c9e:	218c      	movs	r1, #140	; 0x8c
 8004ca0:	187b      	adds	r3, r7, r1
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	881b      	ldrh	r3, [r3, #0]
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	23e8      	movs	r3, #232	; 0xe8
 8004caa:	18fb      	adds	r3, r7, r3
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	029b      	lsls	r3, r3, #10
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	4ab6      	ldr	r2, [pc, #728]	; (8004f94 <USB_EPStartXfer+0xe34>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	187b      	adds	r3, r7, r1
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	801a      	strh	r2, [r3, #0]
 8004cc4:	e353      	b.n	800536e <USB_EPStartXfer+0x120e>
 8004cc6:	1d7b      	adds	r3, r7, #5
 8004cc8:	33ff      	adds	r3, #255	; 0xff
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10b      	bne.n	8004ce8 <USB_EPStartXfer+0xb88>
 8004cd0:	218c      	movs	r1, #140	; 0x8c
 8004cd2:	187b      	adds	r3, r7, r1
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	4aae      	ldr	r2, [pc, #696]	; (8004f94 <USB_EPStartXfer+0xe34>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	187b      	adds	r3, r7, r1
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	801a      	strh	r2, [r3, #0]
 8004ce6:	e342      	b.n	800536e <USB_EPStartXfer+0x120e>
 8004ce8:	1d7b      	adds	r3, r7, #5
 8004cea:	33ff      	adds	r3, #255	; 0xff
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	085b      	lsrs	r3, r3, #1
 8004cf0:	21e8      	movs	r1, #232	; 0xe8
 8004cf2:	187a      	adds	r2, r7, r1
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	1d7b      	adds	r3, r7, #5
 8004cf8:	33ff      	adds	r3, #255	; 0xff
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	4013      	ands	r3, r2
 8004d00:	d004      	beq.n	8004d0c <USB_EPStartXfer+0xbac>
 8004d02:	187b      	adds	r3, r7, r1
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	3301      	adds	r3, #1
 8004d08:	187a      	adds	r2, r7, r1
 8004d0a:	6013      	str	r3, [r2, #0]
 8004d0c:	218c      	movs	r1, #140	; 0x8c
 8004d0e:	187b      	adds	r3, r7, r1
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	881b      	ldrh	r3, [r3, #0]
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	23e8      	movs	r3, #232	; 0xe8
 8004d18:	18fb      	adds	r3, r7, r3
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	029b      	lsls	r3, r3, #10
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	4313      	orrs	r3, r2
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	187b      	adds	r3, r7, r1
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	801a      	strh	r2, [r3, #0]
 8004d2c:	e31f      	b.n	800536e <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	78db      	ldrb	r3, [r3, #3]
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d000      	beq.n	8004d38 <USB_EPStartXfer+0xbd8>
 8004d36:	e191      	b.n	800505c <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	785b      	ldrb	r3, [r3, #1]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d000      	beq.n	8004d42 <USB_EPStartXfer+0xbe2>
 8004d40:	e07c      	b.n	8004e3c <USB_EPStartXfer+0xcdc>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	21ac      	movs	r1, #172	; 0xac
 8004d46:	187a      	adds	r2, r7, r1
 8004d48:	6013      	str	r3, [r2, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2250      	movs	r2, #80	; 0x50
 8004d4e:	5a9b      	ldrh	r3, [r3, r2]
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	001a      	movs	r2, r3
 8004d54:	187b      	adds	r3, r7, r1
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	189b      	adds	r3, r3, r2
 8004d5a:	187a      	adds	r2, r7, r1
 8004d5c:	6013      	str	r3, [r2, #0]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	00da      	lsls	r2, r3, #3
 8004d64:	187b      	adds	r3, r7, r1
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	18d3      	adds	r3, r2, r3
 8004d6a:	4a8b      	ldr	r2, [pc, #556]	; (8004f98 <USB_EPStartXfer+0xe38>)
 8004d6c:	4694      	mov	ip, r2
 8004d6e:	4463      	add	r3, ip
 8004d70:	21a8      	movs	r1, #168	; 0xa8
 8004d72:	187a      	adds	r2, r7, r1
 8004d74:	6013      	str	r3, [r2, #0]
 8004d76:	187b      	adds	r3, r7, r1
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	059b      	lsls	r3, r3, #22
 8004d80:	0d9b      	lsrs	r3, r3, #22
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	187b      	adds	r3, r7, r1
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	801a      	strh	r2, [r3, #0]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	2b3e      	cmp	r3, #62	; 0x3e
 8004d90:	d923      	bls.n	8004dda <USB_EPStartXfer+0xc7a>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	095b      	lsrs	r3, r3, #5
 8004d98:	21e4      	movs	r1, #228	; 0xe4
 8004d9a:	187a      	adds	r2, r7, r1
 8004d9c:	6013      	str	r3, [r2, #0]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	221f      	movs	r2, #31
 8004da4:	4013      	ands	r3, r2
 8004da6:	d104      	bne.n	8004db2 <USB_EPStartXfer+0xc52>
 8004da8:	187b      	adds	r3, r7, r1
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	3b01      	subs	r3, #1
 8004dae:	187a      	adds	r2, r7, r1
 8004db0:	6013      	str	r3, [r2, #0]
 8004db2:	21a8      	movs	r1, #168	; 0xa8
 8004db4:	187b      	adds	r3, r7, r1
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	881b      	ldrh	r3, [r3, #0]
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	23e4      	movs	r3, #228	; 0xe4
 8004dbe:	18fb      	adds	r3, r7, r3
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	029b      	lsls	r3, r3, #10
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	4a71      	ldr	r2, [pc, #452]	; (8004f94 <USB_EPStartXfer+0xe34>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	187b      	adds	r3, r7, r1
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	801a      	strh	r2, [r3, #0]
 8004dd8:	e054      	b.n	8004e84 <USB_EPStartXfer+0xd24>
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10b      	bne.n	8004dfa <USB_EPStartXfer+0xc9a>
 8004de2:	21a8      	movs	r1, #168	; 0xa8
 8004de4:	187b      	adds	r3, r7, r1
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	881b      	ldrh	r3, [r3, #0]
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	4a69      	ldr	r2, [pc, #420]	; (8004f94 <USB_EPStartXfer+0xe34>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	187b      	adds	r3, r7, r1
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	801a      	strh	r2, [r3, #0]
 8004df8:	e044      	b.n	8004e84 <USB_EPStartXfer+0xd24>
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	085b      	lsrs	r3, r3, #1
 8004e00:	21e4      	movs	r1, #228	; 0xe4
 8004e02:	187a      	adds	r2, r7, r1
 8004e04:	6013      	str	r3, [r2, #0]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	d004      	beq.n	8004e1a <USB_EPStartXfer+0xcba>
 8004e10:	187b      	adds	r3, r7, r1
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3301      	adds	r3, #1
 8004e16:	187a      	adds	r2, r7, r1
 8004e18:	6013      	str	r3, [r2, #0]
 8004e1a:	21a8      	movs	r1, #168	; 0xa8
 8004e1c:	187b      	adds	r3, r7, r1
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	23e4      	movs	r3, #228	; 0xe4
 8004e26:	18fb      	adds	r3, r7, r3
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	029b      	lsls	r3, r3, #10
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	4313      	orrs	r3, r2
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	187b      	adds	r3, r7, r1
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	801a      	strh	r2, [r3, #0]
 8004e3a:	e023      	b.n	8004e84 <USB_EPStartXfer+0xd24>
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	785b      	ldrb	r3, [r3, #1]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d11f      	bne.n	8004e84 <USB_EPStartXfer+0xd24>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	21b4      	movs	r1, #180	; 0xb4
 8004e48:	187a      	adds	r2, r7, r1
 8004e4a:	6013      	str	r3, [r2, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2250      	movs	r2, #80	; 0x50
 8004e50:	5a9b      	ldrh	r3, [r3, r2]
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	001a      	movs	r2, r3
 8004e56:	187b      	adds	r3, r7, r1
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	189b      	adds	r3, r3, r2
 8004e5c:	187a      	adds	r2, r7, r1
 8004e5e:	6013      	str	r3, [r2, #0]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	00da      	lsls	r2, r3, #3
 8004e66:	187b      	adds	r3, r7, r1
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	18d3      	adds	r3, r2, r3
 8004e6c:	4a4a      	ldr	r2, [pc, #296]	; (8004f98 <USB_EPStartXfer+0xe38>)
 8004e6e:	4694      	mov	ip, r2
 8004e70:	4463      	add	r3, ip
 8004e72:	21b0      	movs	r1, #176	; 0xb0
 8004e74:	187a      	adds	r2, r7, r1
 8004e76:	6013      	str	r3, [r2, #0]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	187b      	adds	r3, r7, r1
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	801a      	strh	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	22a4      	movs	r2, #164	; 0xa4
 8004e88:	18ba      	adds	r2, r7, r2
 8004e8a:	6013      	str	r3, [r2, #0]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	785b      	ldrb	r3, [r3, #1]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d000      	beq.n	8004e96 <USB_EPStartXfer+0xd36>
 8004e94:	e082      	b.n	8004f9c <USB_EPStartXfer+0xe3c>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	219c      	movs	r1, #156	; 0x9c
 8004e9a:	187a      	adds	r2, r7, r1
 8004e9c:	6013      	str	r3, [r2, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2250      	movs	r2, #80	; 0x50
 8004ea2:	5a9b      	ldrh	r3, [r3, r2]
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	001a      	movs	r2, r3
 8004ea8:	187b      	adds	r3, r7, r1
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	189b      	adds	r3, r3, r2
 8004eae:	187a      	adds	r2, r7, r1
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	00da      	lsls	r2, r3, #3
 8004eb8:	187b      	adds	r3, r7, r1
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	18d3      	adds	r3, r2, r3
 8004ebe:	4a34      	ldr	r2, [pc, #208]	; (8004f90 <USB_EPStartXfer+0xe30>)
 8004ec0:	4694      	mov	ip, r2
 8004ec2:	4463      	add	r3, ip
 8004ec4:	2198      	movs	r1, #152	; 0x98
 8004ec6:	187a      	adds	r2, r7, r1
 8004ec8:	6013      	str	r3, [r2, #0]
 8004eca:	187b      	adds	r3, r7, r1
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	881b      	ldrh	r3, [r3, #0]
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	059b      	lsls	r3, r3, #22
 8004ed4:	0d9b      	lsrs	r3, r3, #22
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	187b      	adds	r3, r7, r1
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	801a      	strh	r2, [r3, #0]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	2b3e      	cmp	r3, #62	; 0x3e
 8004ee4:	d923      	bls.n	8004f2e <USB_EPStartXfer+0xdce>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	095b      	lsrs	r3, r3, #5
 8004eec:	21e0      	movs	r1, #224	; 0xe0
 8004eee:	187a      	adds	r2, r7, r1
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	221f      	movs	r2, #31
 8004ef8:	4013      	ands	r3, r2
 8004efa:	d104      	bne.n	8004f06 <USB_EPStartXfer+0xda6>
 8004efc:	187b      	adds	r3, r7, r1
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	3b01      	subs	r3, #1
 8004f02:	187a      	adds	r2, r7, r1
 8004f04:	6013      	str	r3, [r2, #0]
 8004f06:	2198      	movs	r1, #152	; 0x98
 8004f08:	187b      	adds	r3, r7, r1
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	881b      	ldrh	r3, [r3, #0]
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	23e0      	movs	r3, #224	; 0xe0
 8004f12:	18fb      	adds	r3, r7, r3
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	029b      	lsls	r3, r3, #10
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	4a1c      	ldr	r2, [pc, #112]	; (8004f94 <USB_EPStartXfer+0xe34>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	187b      	adds	r3, r7, r1
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	801a      	strh	r2, [r3, #0]
 8004f2c:	e057      	b.n	8004fde <USB_EPStartXfer+0xe7e>
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10b      	bne.n	8004f4e <USB_EPStartXfer+0xdee>
 8004f36:	2198      	movs	r1, #152	; 0x98
 8004f38:	187b      	adds	r3, r7, r1
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	4a14      	ldr	r2, [pc, #80]	; (8004f94 <USB_EPStartXfer+0xe34>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	187b      	adds	r3, r7, r1
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	801a      	strh	r2, [r3, #0]
 8004f4c:	e047      	b.n	8004fde <USB_EPStartXfer+0xe7e>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	085b      	lsrs	r3, r3, #1
 8004f54:	21e0      	movs	r1, #224	; 0xe0
 8004f56:	187a      	adds	r2, r7, r1
 8004f58:	6013      	str	r3, [r2, #0]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	4013      	ands	r3, r2
 8004f62:	d004      	beq.n	8004f6e <USB_EPStartXfer+0xe0e>
 8004f64:	187b      	adds	r3, r7, r1
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	187a      	adds	r2, r7, r1
 8004f6c:	6013      	str	r3, [r2, #0]
 8004f6e:	2198      	movs	r1, #152	; 0x98
 8004f70:	187b      	adds	r3, r7, r1
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	881b      	ldrh	r3, [r3, #0]
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	23e0      	movs	r3, #224	; 0xe0
 8004f7a:	18fb      	adds	r3, r7, r3
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	029b      	lsls	r3, r3, #10
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	4313      	orrs	r3, r2
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	187b      	adds	r3, r7, r1
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	801a      	strh	r2, [r3, #0]
 8004f8e:	e026      	b.n	8004fde <USB_EPStartXfer+0xe7e>
 8004f90:	00000406 	.word	0x00000406
 8004f94:	ffff8000 	.word	0xffff8000
 8004f98:	00000402 	.word	0x00000402
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	785b      	ldrb	r3, [r3, #1]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d11c      	bne.n	8004fde <USB_EPStartXfer+0xe7e>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2250      	movs	r2, #80	; 0x50
 8004fa8:	5a9b      	ldrh	r3, [r3, r2]
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	001a      	movs	r2, r3
 8004fae:	21a4      	movs	r1, #164	; 0xa4
 8004fb0:	187b      	adds	r3, r7, r1
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	189b      	adds	r3, r3, r2
 8004fb6:	187a      	adds	r2, r7, r1
 8004fb8:	6013      	str	r3, [r2, #0]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	00da      	lsls	r2, r3, #3
 8004fc0:	187b      	adds	r3, r7, r1
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	18d3      	adds	r3, r2, r3
 8004fc6:	4ad2      	ldr	r2, [pc, #840]	; (8005310 <USB_EPStartXfer+0x11b0>)
 8004fc8:	4694      	mov	ip, r2
 8004fca:	4463      	add	r3, ip
 8004fcc:	21a0      	movs	r1, #160	; 0xa0
 8004fce:	187a      	adds	r2, r7, r1
 8004fd0:	6013      	str	r3, [r2, #0]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	187b      	adds	r3, r7, r1
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d100      	bne.n	8004fe8 <USB_EPStartXfer+0xe88>
 8004fe6:	e1c2      	b.n	800536e <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	18d2      	adds	r2, r2, r3
 8004ff2:	2196      	movs	r1, #150	; 0x96
 8004ff4:	187b      	adds	r3, r7, r1
 8004ff6:	8812      	ldrh	r2, [r2, #0]
 8004ff8:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004ffa:	187b      	adds	r3, r7, r1
 8004ffc:	881a      	ldrh	r2, [r3, #0]
 8004ffe:	2380      	movs	r3, #128	; 0x80
 8005000:	01db      	lsls	r3, r3, #7
 8005002:	4013      	ands	r3, r2
 8005004:	d004      	beq.n	8005010 <USB_EPStartXfer+0xeb0>
 8005006:	187b      	adds	r3, r7, r1
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	2240      	movs	r2, #64	; 0x40
 800500c:	4013      	ands	r3, r2
 800500e:	d10d      	bne.n	800502c <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005010:	2196      	movs	r1, #150	; 0x96
 8005012:	187b      	adds	r3, r7, r1
 8005014:	881a      	ldrh	r2, [r3, #0]
 8005016:	2380      	movs	r3, #128	; 0x80
 8005018:	01db      	lsls	r3, r3, #7
 800501a:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800501c:	d000      	beq.n	8005020 <USB_EPStartXfer+0xec0>
 800501e:	e1a6      	b.n	800536e <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005020:	187b      	adds	r3, r7, r1
 8005022:	881b      	ldrh	r3, [r3, #0]
 8005024:	2240      	movs	r2, #64	; 0x40
 8005026:	4013      	ands	r3, r2
 8005028:	d000      	beq.n	800502c <USB_EPStartXfer+0xecc>
 800502a:	e1a0      	b.n	800536e <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	18d3      	adds	r3, r2, r3
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	b29a      	uxth	r2, r3
 800503a:	2094      	movs	r0, #148	; 0x94
 800503c:	183b      	adds	r3, r7, r0
 800503e:	49b5      	ldr	r1, [pc, #724]	; (8005314 <USB_EPStartXfer+0x11b4>)
 8005040:	400a      	ands	r2, r1
 8005042:	801a      	strh	r2, [r3, #0]
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	18d3      	adds	r3, r2, r3
 800504e:	183a      	adds	r2, r7, r0
 8005050:	8812      	ldrh	r2, [r2, #0]
 8005052:	49b1      	ldr	r1, [pc, #708]	; (8005318 <USB_EPStartXfer+0x11b8>)
 8005054:	430a      	orrs	r2, r1
 8005056:	b292      	uxth	r2, r2
 8005058:	801a      	strh	r2, [r3, #0]
 800505a:	e188      	b.n	800536e <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	78db      	ldrb	r3, [r3, #3]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d000      	beq.n	8005066 <USB_EPStartXfer+0xf06>
 8005064:	e181      	b.n	800536a <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	699a      	ldr	r2, [r3, #24]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	429a      	cmp	r2, r3
 8005070:	d90d      	bls.n	800508e <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	1d7a      	adds	r2, r7, #5
 8005078:	32ff      	adds	r2, #255	; 0xff
 800507a:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	699a      	ldr	r2, [r3, #24]
 8005080:	1d7b      	adds	r3, r7, #5
 8005082:	33ff      	adds	r3, #255	; 0xff
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	1ad2      	subs	r2, r2, r3
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	619a      	str	r2, [r3, #24]
 800508c:	e007      	b.n	800509e <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	1d7a      	adds	r2, r7, #5
 8005094:	32ff      	adds	r2, #255	; 0xff
 8005096:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	2200      	movs	r2, #0
 800509c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	785b      	ldrb	r3, [r3, #1]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d000      	beq.n	80050a8 <USB_EPStartXfer+0xf48>
 80050a6:	e082      	b.n	80051ae <USB_EPStartXfer+0x104e>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	21cc      	movs	r1, #204	; 0xcc
 80050ac:	187a      	adds	r2, r7, r1
 80050ae:	6013      	str	r3, [r2, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2250      	movs	r2, #80	; 0x50
 80050b4:	5a9b      	ldrh	r3, [r3, r2]
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	001a      	movs	r2, r3
 80050ba:	187b      	adds	r3, r7, r1
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	189b      	adds	r3, r3, r2
 80050c0:	187a      	adds	r2, r7, r1
 80050c2:	6013      	str	r3, [r2, #0]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	00da      	lsls	r2, r3, #3
 80050ca:	187b      	adds	r3, r7, r1
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	18d3      	adds	r3, r2, r3
 80050d0:	4a92      	ldr	r2, [pc, #584]	; (800531c <USB_EPStartXfer+0x11bc>)
 80050d2:	4694      	mov	ip, r2
 80050d4:	4463      	add	r3, ip
 80050d6:	21c8      	movs	r1, #200	; 0xc8
 80050d8:	187a      	adds	r2, r7, r1
 80050da:	6013      	str	r3, [r2, #0]
 80050dc:	187b      	adds	r3, r7, r1
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	881b      	ldrh	r3, [r3, #0]
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	059b      	lsls	r3, r3, #22
 80050e6:	0d9b      	lsrs	r3, r3, #22
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	187b      	adds	r3, r7, r1
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	801a      	strh	r2, [r3, #0]
 80050f0:	1d7b      	adds	r3, r7, #5
 80050f2:	33ff      	adds	r3, #255	; 0xff
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b3e      	cmp	r3, #62	; 0x3e
 80050f8:	d925      	bls.n	8005146 <USB_EPStartXfer+0xfe6>
 80050fa:	1d7b      	adds	r3, r7, #5
 80050fc:	33ff      	adds	r3, #255	; 0xff
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	095b      	lsrs	r3, r3, #5
 8005102:	21dc      	movs	r1, #220	; 0xdc
 8005104:	187a      	adds	r2, r7, r1
 8005106:	6013      	str	r3, [r2, #0]
 8005108:	1d7b      	adds	r3, r7, #5
 800510a:	33ff      	adds	r3, #255	; 0xff
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	221f      	movs	r2, #31
 8005110:	4013      	ands	r3, r2
 8005112:	d104      	bne.n	800511e <USB_EPStartXfer+0xfbe>
 8005114:	187b      	adds	r3, r7, r1
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	3b01      	subs	r3, #1
 800511a:	187a      	adds	r2, r7, r1
 800511c:	6013      	str	r3, [r2, #0]
 800511e:	21c8      	movs	r1, #200	; 0xc8
 8005120:	187b      	adds	r3, r7, r1
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	881b      	ldrh	r3, [r3, #0]
 8005126:	b29a      	uxth	r2, r3
 8005128:	23dc      	movs	r3, #220	; 0xdc
 800512a:	18fb      	adds	r3, r7, r3
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	b29b      	uxth	r3, r3
 8005130:	029b      	lsls	r3, r3, #10
 8005132:	b29b      	uxth	r3, r3
 8005134:	4313      	orrs	r3, r2
 8005136:	b29b      	uxth	r3, r3
 8005138:	4a79      	ldr	r2, [pc, #484]	; (8005320 <USB_EPStartXfer+0x11c0>)
 800513a:	4313      	orrs	r3, r2
 800513c:	b29a      	uxth	r2, r3
 800513e:	187b      	adds	r3, r7, r1
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	801a      	strh	r2, [r3, #0]
 8005144:	e058      	b.n	80051f8 <USB_EPStartXfer+0x1098>
 8005146:	1d7b      	adds	r3, r7, #5
 8005148:	33ff      	adds	r3, #255	; 0xff
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10b      	bne.n	8005168 <USB_EPStartXfer+0x1008>
 8005150:	21c8      	movs	r1, #200	; 0xc8
 8005152:	187b      	adds	r3, r7, r1
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	881b      	ldrh	r3, [r3, #0]
 8005158:	b29b      	uxth	r3, r3
 800515a:	4a71      	ldr	r2, [pc, #452]	; (8005320 <USB_EPStartXfer+0x11c0>)
 800515c:	4313      	orrs	r3, r2
 800515e:	b29a      	uxth	r2, r3
 8005160:	187b      	adds	r3, r7, r1
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	801a      	strh	r2, [r3, #0]
 8005166:	e047      	b.n	80051f8 <USB_EPStartXfer+0x1098>
 8005168:	1d7b      	adds	r3, r7, #5
 800516a:	33ff      	adds	r3, #255	; 0xff
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	085b      	lsrs	r3, r3, #1
 8005170:	21dc      	movs	r1, #220	; 0xdc
 8005172:	187a      	adds	r2, r7, r1
 8005174:	6013      	str	r3, [r2, #0]
 8005176:	1d7b      	adds	r3, r7, #5
 8005178:	33ff      	adds	r3, #255	; 0xff
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2201      	movs	r2, #1
 800517e:	4013      	ands	r3, r2
 8005180:	d004      	beq.n	800518c <USB_EPStartXfer+0x102c>
 8005182:	187b      	adds	r3, r7, r1
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	3301      	adds	r3, #1
 8005188:	187a      	adds	r2, r7, r1
 800518a:	6013      	str	r3, [r2, #0]
 800518c:	21c8      	movs	r1, #200	; 0xc8
 800518e:	187b      	adds	r3, r7, r1
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	881b      	ldrh	r3, [r3, #0]
 8005194:	b29a      	uxth	r2, r3
 8005196:	23dc      	movs	r3, #220	; 0xdc
 8005198:	18fb      	adds	r3, r7, r3
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	b29b      	uxth	r3, r3
 800519e:	029b      	lsls	r3, r3, #10
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	4313      	orrs	r3, r2
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	187b      	adds	r3, r7, r1
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	801a      	strh	r2, [r3, #0]
 80051ac:	e024      	b.n	80051f8 <USB_EPStartXfer+0x1098>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	785b      	ldrb	r3, [r3, #1]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d120      	bne.n	80051f8 <USB_EPStartXfer+0x1098>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	21d4      	movs	r1, #212	; 0xd4
 80051ba:	187a      	adds	r2, r7, r1
 80051bc:	6013      	str	r3, [r2, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2250      	movs	r2, #80	; 0x50
 80051c2:	5a9b      	ldrh	r3, [r3, r2]
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	001a      	movs	r2, r3
 80051c8:	187b      	adds	r3, r7, r1
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	189b      	adds	r3, r3, r2
 80051ce:	187a      	adds	r2, r7, r1
 80051d0:	6013      	str	r3, [r2, #0]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	00da      	lsls	r2, r3, #3
 80051d8:	187b      	adds	r3, r7, r1
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	18d3      	adds	r3, r2, r3
 80051de:	4a4f      	ldr	r2, [pc, #316]	; (800531c <USB_EPStartXfer+0x11bc>)
 80051e0:	4694      	mov	ip, r2
 80051e2:	4463      	add	r3, ip
 80051e4:	21d0      	movs	r1, #208	; 0xd0
 80051e6:	187a      	adds	r2, r7, r1
 80051e8:	6013      	str	r3, [r2, #0]
 80051ea:	1d7b      	adds	r3, r7, #5
 80051ec:	33ff      	adds	r3, #255	; 0xff
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	187b      	adds	r3, r7, r1
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	801a      	strh	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	22c4      	movs	r2, #196	; 0xc4
 80051fc:	18ba      	adds	r2, r7, r2
 80051fe:	6013      	str	r3, [r2, #0]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	785b      	ldrb	r3, [r3, #1]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d000      	beq.n	800520a <USB_EPStartXfer+0x10aa>
 8005208:	e08c      	b.n	8005324 <USB_EPStartXfer+0x11c4>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	21bc      	movs	r1, #188	; 0xbc
 800520e:	187a      	adds	r2, r7, r1
 8005210:	6013      	str	r3, [r2, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2250      	movs	r2, #80	; 0x50
 8005216:	5a9b      	ldrh	r3, [r3, r2]
 8005218:	b29b      	uxth	r3, r3
 800521a:	001a      	movs	r2, r3
 800521c:	187b      	adds	r3, r7, r1
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	189b      	adds	r3, r3, r2
 8005222:	187a      	adds	r2, r7, r1
 8005224:	6013      	str	r3, [r2, #0]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	00da      	lsls	r2, r3, #3
 800522c:	187b      	adds	r3, r7, r1
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	18d3      	adds	r3, r2, r3
 8005232:	4a37      	ldr	r2, [pc, #220]	; (8005310 <USB_EPStartXfer+0x11b0>)
 8005234:	4694      	mov	ip, r2
 8005236:	4463      	add	r3, ip
 8005238:	21b8      	movs	r1, #184	; 0xb8
 800523a:	187a      	adds	r2, r7, r1
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	187b      	adds	r3, r7, r1
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	b29b      	uxth	r3, r3
 8005246:	059b      	lsls	r3, r3, #22
 8005248:	0d9b      	lsrs	r3, r3, #22
 800524a:	b29a      	uxth	r2, r3
 800524c:	187b      	adds	r3, r7, r1
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	801a      	strh	r2, [r3, #0]
 8005252:	1d7b      	adds	r3, r7, #5
 8005254:	33ff      	adds	r3, #255	; 0xff
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2b3e      	cmp	r3, #62	; 0x3e
 800525a:	d925      	bls.n	80052a8 <USB_EPStartXfer+0x1148>
 800525c:	1d7b      	adds	r3, r7, #5
 800525e:	33ff      	adds	r3, #255	; 0xff
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	095b      	lsrs	r3, r3, #5
 8005264:	21d8      	movs	r1, #216	; 0xd8
 8005266:	187a      	adds	r2, r7, r1
 8005268:	6013      	str	r3, [r2, #0]
 800526a:	1d7b      	adds	r3, r7, #5
 800526c:	33ff      	adds	r3, #255	; 0xff
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	221f      	movs	r2, #31
 8005272:	4013      	ands	r3, r2
 8005274:	d104      	bne.n	8005280 <USB_EPStartXfer+0x1120>
 8005276:	187b      	adds	r3, r7, r1
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	3b01      	subs	r3, #1
 800527c:	187a      	adds	r2, r7, r1
 800527e:	6013      	str	r3, [r2, #0]
 8005280:	21b8      	movs	r1, #184	; 0xb8
 8005282:	187b      	adds	r3, r7, r1
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	b29a      	uxth	r2, r3
 800528a:	23d8      	movs	r3, #216	; 0xd8
 800528c:	18fb      	adds	r3, r7, r3
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	b29b      	uxth	r3, r3
 8005292:	029b      	lsls	r3, r3, #10
 8005294:	b29b      	uxth	r3, r3
 8005296:	4313      	orrs	r3, r2
 8005298:	b29b      	uxth	r3, r3
 800529a:	4a21      	ldr	r2, [pc, #132]	; (8005320 <USB_EPStartXfer+0x11c0>)
 800529c:	4313      	orrs	r3, r2
 800529e:	b29a      	uxth	r2, r3
 80052a0:	187b      	adds	r3, r7, r1
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	801a      	strh	r2, [r3, #0]
 80052a6:	e062      	b.n	800536e <USB_EPStartXfer+0x120e>
 80052a8:	1d7b      	adds	r3, r7, #5
 80052aa:	33ff      	adds	r3, #255	; 0xff
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10b      	bne.n	80052ca <USB_EPStartXfer+0x116a>
 80052b2:	21b8      	movs	r1, #184	; 0xb8
 80052b4:	187b      	adds	r3, r7, r1
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	881b      	ldrh	r3, [r3, #0]
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	4a18      	ldr	r2, [pc, #96]	; (8005320 <USB_EPStartXfer+0x11c0>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	187b      	adds	r3, r7, r1
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	801a      	strh	r2, [r3, #0]
 80052c8:	e051      	b.n	800536e <USB_EPStartXfer+0x120e>
 80052ca:	1d7b      	adds	r3, r7, #5
 80052cc:	33ff      	adds	r3, #255	; 0xff
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	085b      	lsrs	r3, r3, #1
 80052d2:	21d8      	movs	r1, #216	; 0xd8
 80052d4:	187a      	adds	r2, r7, r1
 80052d6:	6013      	str	r3, [r2, #0]
 80052d8:	1d7b      	adds	r3, r7, #5
 80052da:	33ff      	adds	r3, #255	; 0xff
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2201      	movs	r2, #1
 80052e0:	4013      	ands	r3, r2
 80052e2:	d004      	beq.n	80052ee <USB_EPStartXfer+0x118e>
 80052e4:	187b      	adds	r3, r7, r1
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3301      	adds	r3, #1
 80052ea:	187a      	adds	r2, r7, r1
 80052ec:	6013      	str	r3, [r2, #0]
 80052ee:	21b8      	movs	r1, #184	; 0xb8
 80052f0:	187b      	adds	r3, r7, r1
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	23d8      	movs	r3, #216	; 0xd8
 80052fa:	18fb      	adds	r3, r7, r3
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	b29b      	uxth	r3, r3
 8005300:	029b      	lsls	r3, r3, #10
 8005302:	b29b      	uxth	r3, r3
 8005304:	4313      	orrs	r3, r2
 8005306:	b29a      	uxth	r2, r3
 8005308:	187b      	adds	r3, r7, r1
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	801a      	strh	r2, [r3, #0]
 800530e:	e02e      	b.n	800536e <USB_EPStartXfer+0x120e>
 8005310:	00000406 	.word	0x00000406
 8005314:	ffff8f8f 	.word	0xffff8f8f
 8005318:	ffff80c0 	.word	0xffff80c0
 800531c:	00000402 	.word	0x00000402
 8005320:	ffff8000 	.word	0xffff8000
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	785b      	ldrb	r3, [r3, #1]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d120      	bne.n	800536e <USB_EPStartXfer+0x120e>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2250      	movs	r2, #80	; 0x50
 8005330:	5a9b      	ldrh	r3, [r3, r2]
 8005332:	b29b      	uxth	r3, r3
 8005334:	001a      	movs	r2, r3
 8005336:	21c4      	movs	r1, #196	; 0xc4
 8005338:	187b      	adds	r3, r7, r1
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	189b      	adds	r3, r3, r2
 800533e:	187a      	adds	r2, r7, r1
 8005340:	6013      	str	r3, [r2, #0]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	00da      	lsls	r2, r3, #3
 8005348:	187b      	adds	r3, r7, r1
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	18d3      	adds	r3, r2, r3
 800534e:	4a1d      	ldr	r2, [pc, #116]	; (80053c4 <USB_EPStartXfer+0x1264>)
 8005350:	4694      	mov	ip, r2
 8005352:	4463      	add	r3, ip
 8005354:	21c0      	movs	r1, #192	; 0xc0
 8005356:	187a      	adds	r2, r7, r1
 8005358:	6013      	str	r3, [r2, #0]
 800535a:	1d7b      	adds	r3, r7, #5
 800535c:	33ff      	adds	r3, #255	; 0xff
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	b29a      	uxth	r2, r3
 8005362:	187b      	adds	r3, r7, r1
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	801a      	strh	r2, [r3, #0]
 8005368:	e001      	b.n	800536e <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e025      	b.n	80053ba <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	18d3      	adds	r3, r2, r3
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	b29a      	uxth	r2, r3
 800537c:	208a      	movs	r0, #138	; 0x8a
 800537e:	183b      	adds	r3, r7, r0
 8005380:	4911      	ldr	r1, [pc, #68]	; (80053c8 <USB_EPStartXfer+0x1268>)
 8005382:	400a      	ands	r2, r1
 8005384:	801a      	strh	r2, [r3, #0]
 8005386:	183b      	adds	r3, r7, r0
 8005388:	183a      	adds	r2, r7, r0
 800538a:	8812      	ldrh	r2, [r2, #0]
 800538c:	2180      	movs	r1, #128	; 0x80
 800538e:	0149      	lsls	r1, r1, #5
 8005390:	404a      	eors	r2, r1
 8005392:	801a      	strh	r2, [r3, #0]
 8005394:	183b      	adds	r3, r7, r0
 8005396:	183a      	adds	r2, r7, r0
 8005398:	8812      	ldrh	r2, [r2, #0]
 800539a:	2180      	movs	r1, #128	; 0x80
 800539c:	0189      	lsls	r1, r1, #6
 800539e:	404a      	eors	r2, r1
 80053a0:	801a      	strh	r2, [r3, #0]
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	18d3      	adds	r3, r2, r3
 80053ac:	183a      	adds	r2, r7, r0
 80053ae:	8812      	ldrh	r2, [r2, #0]
 80053b0:	4906      	ldr	r1, [pc, #24]	; (80053cc <USB_EPStartXfer+0x126c>)
 80053b2:	430a      	orrs	r2, r1
 80053b4:	b292      	uxth	r2, r2
 80053b6:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	0018      	movs	r0, r3
 80053bc:	46bd      	mov	sp, r7
 80053be:	b043      	add	sp, #268	; 0x10c
 80053c0:	bd90      	pop	{r4, r7, pc}
 80053c2:	46c0      	nop			; (mov r8, r8)
 80053c4:	00000406 	.word	0x00000406
 80053c8:	ffffbf8f 	.word	0xffffbf8f
 80053cc:	ffff8080 	.word	0xffff8080

080053d0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	785b      	ldrb	r3, [r3, #1]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d01d      	beq.n	800541e <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	18d3      	adds	r3, r2, r3
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	200c      	movs	r0, #12
 80053f2:	183b      	adds	r3, r7, r0
 80053f4:	491b      	ldr	r1, [pc, #108]	; (8005464 <USB_EPSetStall+0x94>)
 80053f6:	400a      	ands	r2, r1
 80053f8:	801a      	strh	r2, [r3, #0]
 80053fa:	183b      	adds	r3, r7, r0
 80053fc:	183a      	adds	r2, r7, r0
 80053fe:	8812      	ldrh	r2, [r2, #0]
 8005400:	2110      	movs	r1, #16
 8005402:	404a      	eors	r2, r1
 8005404:	801a      	strh	r2, [r3, #0]
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	18d3      	adds	r3, r2, r3
 8005410:	183a      	adds	r2, r7, r0
 8005412:	8812      	ldrh	r2, [r2, #0]
 8005414:	4914      	ldr	r1, [pc, #80]	; (8005468 <USB_EPSetStall+0x98>)
 8005416:	430a      	orrs	r2, r1
 8005418:	b292      	uxth	r2, r2
 800541a:	801a      	strh	r2, [r3, #0]
 800541c:	e01d      	b.n	800545a <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	18d3      	adds	r3, r2, r3
 8005428:	881b      	ldrh	r3, [r3, #0]
 800542a:	b29a      	uxth	r2, r3
 800542c:	200e      	movs	r0, #14
 800542e:	183b      	adds	r3, r7, r0
 8005430:	490e      	ldr	r1, [pc, #56]	; (800546c <USB_EPSetStall+0x9c>)
 8005432:	400a      	ands	r2, r1
 8005434:	801a      	strh	r2, [r3, #0]
 8005436:	183b      	adds	r3, r7, r0
 8005438:	183a      	adds	r2, r7, r0
 800543a:	8812      	ldrh	r2, [r2, #0]
 800543c:	2180      	movs	r1, #128	; 0x80
 800543e:	0149      	lsls	r1, r1, #5
 8005440:	404a      	eors	r2, r1
 8005442:	801a      	strh	r2, [r3, #0]
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	18d3      	adds	r3, r2, r3
 800544e:	183a      	adds	r2, r7, r0
 8005450:	8812      	ldrh	r2, [r2, #0]
 8005452:	4905      	ldr	r1, [pc, #20]	; (8005468 <USB_EPSetStall+0x98>)
 8005454:	430a      	orrs	r2, r1
 8005456:	b292      	uxth	r2, r2
 8005458:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	0018      	movs	r0, r3
 800545e:	46bd      	mov	sp, r7
 8005460:	b004      	add	sp, #16
 8005462:	bd80      	pop	{r7, pc}
 8005464:	ffff8fbf 	.word	0xffff8fbf
 8005468:	ffff8080 	.word	0xffff8080
 800546c:	ffffbf8f 	.word	0xffffbf8f

08005470 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	7b1b      	ldrb	r3, [r3, #12]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d000      	beq.n	8005484 <USB_EPClearStall+0x14>
 8005482:	e095      	b.n	80055b0 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	785b      	ldrb	r3, [r3, #1]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d046      	beq.n	800551a <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	18d2      	adds	r2, r2, r3
 8005496:	2110      	movs	r1, #16
 8005498:	187b      	adds	r3, r7, r1
 800549a:	8812      	ldrh	r2, [r2, #0]
 800549c:	801a      	strh	r2, [r3, #0]
 800549e:	187b      	adds	r3, r7, r1
 80054a0:	881b      	ldrh	r3, [r3, #0]
 80054a2:	2240      	movs	r2, #64	; 0x40
 80054a4:	4013      	ands	r3, r2
 80054a6:	d016      	beq.n	80054d6 <USB_EPClearStall+0x66>
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	18d3      	adds	r3, r2, r3
 80054b2:	881b      	ldrh	r3, [r3, #0]
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	200e      	movs	r0, #14
 80054b8:	183b      	adds	r3, r7, r0
 80054ba:	4940      	ldr	r1, [pc, #256]	; (80055bc <USB_EPClearStall+0x14c>)
 80054bc:	400a      	ands	r2, r1
 80054be:	801a      	strh	r2, [r3, #0]
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	18d3      	adds	r3, r2, r3
 80054ca:	183a      	adds	r2, r7, r0
 80054cc:	8812      	ldrh	r2, [r2, #0]
 80054ce:	493c      	ldr	r1, [pc, #240]	; (80055c0 <USB_EPClearStall+0x150>)
 80054d0:	430a      	orrs	r2, r1
 80054d2:	b292      	uxth	r2, r2
 80054d4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	78db      	ldrb	r3, [r3, #3]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d068      	beq.n	80055b0 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	18d3      	adds	r3, r2, r3
 80054e8:	881b      	ldrh	r3, [r3, #0]
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	200c      	movs	r0, #12
 80054ee:	183b      	adds	r3, r7, r0
 80054f0:	4934      	ldr	r1, [pc, #208]	; (80055c4 <USB_EPClearStall+0x154>)
 80054f2:	400a      	ands	r2, r1
 80054f4:	801a      	strh	r2, [r3, #0]
 80054f6:	183b      	adds	r3, r7, r0
 80054f8:	183a      	adds	r2, r7, r0
 80054fa:	8812      	ldrh	r2, [r2, #0]
 80054fc:	2120      	movs	r1, #32
 80054fe:	404a      	eors	r2, r1
 8005500:	801a      	strh	r2, [r3, #0]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	18d3      	adds	r3, r2, r3
 800550c:	183a      	adds	r2, r7, r0
 800550e:	8812      	ldrh	r2, [r2, #0]
 8005510:	492d      	ldr	r1, [pc, #180]	; (80055c8 <USB_EPClearStall+0x158>)
 8005512:	430a      	orrs	r2, r1
 8005514:	b292      	uxth	r2, r2
 8005516:	801a      	strh	r2, [r3, #0]
 8005518:	e04a      	b.n	80055b0 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	18d2      	adds	r2, r2, r3
 8005524:	2116      	movs	r1, #22
 8005526:	187b      	adds	r3, r7, r1
 8005528:	8812      	ldrh	r2, [r2, #0]
 800552a:	801a      	strh	r2, [r3, #0]
 800552c:	187b      	adds	r3, r7, r1
 800552e:	881a      	ldrh	r2, [r3, #0]
 8005530:	2380      	movs	r3, #128	; 0x80
 8005532:	01db      	lsls	r3, r3, #7
 8005534:	4013      	ands	r3, r2
 8005536:	d016      	beq.n	8005566 <USB_EPClearStall+0xf6>
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	18d3      	adds	r3, r2, r3
 8005542:	881b      	ldrh	r3, [r3, #0]
 8005544:	b29a      	uxth	r2, r3
 8005546:	2014      	movs	r0, #20
 8005548:	183b      	adds	r3, r7, r0
 800554a:	491c      	ldr	r1, [pc, #112]	; (80055bc <USB_EPClearStall+0x14c>)
 800554c:	400a      	ands	r2, r1
 800554e:	801a      	strh	r2, [r3, #0]
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	18d3      	adds	r3, r2, r3
 800555a:	183a      	adds	r2, r7, r0
 800555c:	8812      	ldrh	r2, [r2, #0]
 800555e:	491b      	ldr	r1, [pc, #108]	; (80055cc <USB_EPClearStall+0x15c>)
 8005560:	430a      	orrs	r2, r1
 8005562:	b292      	uxth	r2, r2
 8005564:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	18d3      	adds	r3, r2, r3
 8005570:	881b      	ldrh	r3, [r3, #0]
 8005572:	b29a      	uxth	r2, r3
 8005574:	2012      	movs	r0, #18
 8005576:	183b      	adds	r3, r7, r0
 8005578:	4915      	ldr	r1, [pc, #84]	; (80055d0 <USB_EPClearStall+0x160>)
 800557a:	400a      	ands	r2, r1
 800557c:	801a      	strh	r2, [r3, #0]
 800557e:	183b      	adds	r3, r7, r0
 8005580:	183a      	adds	r2, r7, r0
 8005582:	8812      	ldrh	r2, [r2, #0]
 8005584:	2180      	movs	r1, #128	; 0x80
 8005586:	0149      	lsls	r1, r1, #5
 8005588:	404a      	eors	r2, r1
 800558a:	801a      	strh	r2, [r3, #0]
 800558c:	183b      	adds	r3, r7, r0
 800558e:	183a      	adds	r2, r7, r0
 8005590:	8812      	ldrh	r2, [r2, #0]
 8005592:	2180      	movs	r1, #128	; 0x80
 8005594:	0189      	lsls	r1, r1, #6
 8005596:	404a      	eors	r2, r1
 8005598:	801a      	strh	r2, [r3, #0]
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	18d3      	adds	r3, r2, r3
 80055a4:	183a      	adds	r2, r7, r0
 80055a6:	8812      	ldrh	r2, [r2, #0]
 80055a8:	4907      	ldr	r1, [pc, #28]	; (80055c8 <USB_EPClearStall+0x158>)
 80055aa:	430a      	orrs	r2, r1
 80055ac:	b292      	uxth	r2, r2
 80055ae:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	0018      	movs	r0, r3
 80055b4:	46bd      	mov	sp, r7
 80055b6:	b006      	add	sp, #24
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	46c0      	nop			; (mov r8, r8)
 80055bc:	ffff8f8f 	.word	0xffff8f8f
 80055c0:	ffff80c0 	.word	0xffff80c0
 80055c4:	ffff8fbf 	.word	0xffff8fbf
 80055c8:	ffff8080 	.word	0xffff8080
 80055cc:	ffffc080 	.word	0xffffc080
 80055d0:	ffffbf8f 	.word	0xffffbf8f

080055d4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	000a      	movs	r2, r1
 80055de:	1cfb      	adds	r3, r7, #3
 80055e0:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80055e2:	1cfb      	adds	r3, r7, #3
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d103      	bne.n	80055f2 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	224c      	movs	r2, #76	; 0x4c
 80055ee:	2180      	movs	r1, #128	; 0x80
 80055f0:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	0018      	movs	r0, r3
 80055f6:	46bd      	mov	sp, r7
 80055f8:	b002      	add	sp, #8
 80055fa:	bd80      	pop	{r7, pc}

080055fc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2258      	movs	r2, #88	; 0x58
 8005608:	5a9b      	ldrh	r3, [r3, r2]
 800560a:	b29b      	uxth	r3, r3
 800560c:	4a05      	ldr	r2, [pc, #20]	; (8005624 <USB_DevConnect+0x28>)
 800560e:	4313      	orrs	r3, r2
 8005610:	b299      	uxth	r1, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2258      	movs	r2, #88	; 0x58
 8005616:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	0018      	movs	r0, r3
 800561c:	46bd      	mov	sp, r7
 800561e:	b002      	add	sp, #8
 8005620:	bd80      	pop	{r7, pc}
 8005622:	46c0      	nop			; (mov r8, r8)
 8005624:	ffff8000 	.word	0xffff8000

08005628 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2244      	movs	r2, #68	; 0x44
 8005634:	5a9b      	ldrh	r3, [r3, r2]
 8005636:	b29b      	uxth	r3, r3
 8005638:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800563a:	68fb      	ldr	r3, [r7, #12]
}
 800563c:	0018      	movs	r0, r3
 800563e:	46bd      	mov	sp, r7
 8005640:	b004      	add	sp, #16
 8005642:	bd80      	pop	{r7, pc}

08005644 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b08a      	sub	sp, #40	; 0x28
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	0019      	movs	r1, r3
 8005650:	1dbb      	adds	r3, r7, #6
 8005652:	801a      	strh	r2, [r3, #0]
 8005654:	1d3b      	adds	r3, r7, #4
 8005656:	1c0a      	adds	r2, r1, #0
 8005658:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800565a:	1d3b      	adds	r3, r7, #4
 800565c:	881b      	ldrh	r3, [r3, #0]
 800565e:	3301      	adds	r3, #1
 8005660:	085b      	lsrs	r3, r3, #1
 8005662:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800566c:	1dbb      	adds	r3, r7, #6
 800566e:	881a      	ldrh	r2, [r3, #0]
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	18d3      	adds	r3, r2, r3
 8005674:	2280      	movs	r2, #128	; 0x80
 8005676:	00d2      	lsls	r2, r2, #3
 8005678:	4694      	mov	ip, r2
 800567a:	4463      	add	r3, ip
 800567c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	627b      	str	r3, [r7, #36]	; 0x24
 8005682:	e020      	b.n	80056c6 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	781a      	ldrb	r2, [r3, #0]
 8005688:	2112      	movs	r1, #18
 800568a:	187b      	adds	r3, r7, r1
 800568c:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	3301      	adds	r3, #1
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	021b      	lsls	r3, r3, #8
 8005696:	b21a      	sxth	r2, r3
 8005698:	187b      	adds	r3, r7, r1
 800569a:	2000      	movs	r0, #0
 800569c:	5e1b      	ldrsh	r3, [r3, r0]
 800569e:	4313      	orrs	r3, r2
 80056a0:	b21a      	sxth	r2, r3
 80056a2:	187b      	adds	r3, r7, r1
 80056a4:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80056a6:	6a3b      	ldr	r3, [r7, #32]
 80056a8:	187a      	adds	r2, r7, r1
 80056aa:	8812      	ldrh	r2, [r2, #0]
 80056ac:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80056ae:	6a3b      	ldr	r3, [r7, #32]
 80056b0:	3302      	adds	r3, #2
 80056b2:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	3301      	adds	r3, #1
 80056b8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	3301      	adds	r3, #1
 80056be:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80056c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c2:	3b01      	subs	r3, #1
 80056c4:	627b      	str	r3, [r7, #36]	; 0x24
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1db      	bne.n	8005684 <USB_WritePMA+0x40>
  }
}
 80056cc:	46c0      	nop			; (mov r8, r8)
 80056ce:	46c0      	nop			; (mov r8, r8)
 80056d0:	46bd      	mov	sp, r7
 80056d2:	b00a      	add	sp, #40	; 0x28
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b08a      	sub	sp, #40	; 0x28
 80056da:	af00      	add	r7, sp, #0
 80056dc:	60f8      	str	r0, [r7, #12]
 80056de:	60b9      	str	r1, [r7, #8]
 80056e0:	0019      	movs	r1, r3
 80056e2:	1dbb      	adds	r3, r7, #6
 80056e4:	801a      	strh	r2, [r3, #0]
 80056e6:	1d3b      	adds	r3, r7, #4
 80056e8:	1c0a      	adds	r2, r1, #0
 80056ea:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80056ec:	1d3b      	adds	r3, r7, #4
 80056ee:	881b      	ldrh	r3, [r3, #0]
 80056f0:	085b      	lsrs	r3, r3, #1
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80056fe:	1dbb      	adds	r3, r7, #6
 8005700:	881a      	ldrh	r2, [r3, #0]
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	18d3      	adds	r3, r2, r3
 8005706:	2280      	movs	r2, #128	; 0x80
 8005708:	00d2      	lsls	r2, r2, #3
 800570a:	4694      	mov	ip, r2
 800570c:	4463      	add	r3, ip
 800570e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	627b      	str	r3, [r7, #36]	; 0x24
 8005714:	e018      	b.n	8005748 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005716:	6a3b      	ldr	r3, [r7, #32]
 8005718:	881b      	ldrh	r3, [r3, #0]
 800571a:	b29b      	uxth	r3, r3
 800571c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	3302      	adds	r3, #2
 8005722:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	b2da      	uxtb	r2, r3
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	3301      	adds	r3, #1
 8005730:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	0a1b      	lsrs	r3, r3, #8
 8005736:	b2da      	uxtb	r2, r3
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	3301      	adds	r3, #1
 8005740:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005744:	3b01      	subs	r3, #1
 8005746:	627b      	str	r3, [r7, #36]	; 0x24
 8005748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1e3      	bne.n	8005716 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800574e:	1d3b      	adds	r3, r7, #4
 8005750:	881b      	ldrh	r3, [r3, #0]
 8005752:	2201      	movs	r2, #1
 8005754:	4013      	ands	r3, r2
 8005756:	b29b      	uxth	r3, r3
 8005758:	2b00      	cmp	r3, #0
 800575a:	d007      	beq.n	800576c <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 800575c:	6a3b      	ldr	r3, [r7, #32]
 800575e:	881b      	ldrh	r3, [r3, #0]
 8005760:	b29b      	uxth	r3, r3
 8005762:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	b2da      	uxtb	r2, r3
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	701a      	strb	r2, [r3, #0]
  }
}
 800576c:	46c0      	nop			; (mov r8, r8)
 800576e:	46bd      	mov	sp, r7
 8005770:	b00a      	add	sp, #40	; 0x28
 8005772:	bd80      	pop	{r7, pc}

08005774 <USBD_HID_Init>:
 *         Initialize the HID interface
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	000a      	movs	r2, r1
 800577e:	1cfb      	adds	r3, r7, #3
 8005780:	701a      	strb	r2, [r3, #0]
	/* Open EP IN */
	USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	2304      	movs	r3, #4
 8005786:	2203      	movs	r2, #3
 8005788:	2181      	movs	r1, #129	; 0x81
 800578a:	f001 fe5a 	bl	8007442 <USBD_LL_OpenEP>
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	62da      	str	r2, [r3, #44]	; 0x2c

	pdev->pClassData = USBD_malloc (sizeof(USBD_HID_HandleTypeDef));
 8005794:	2010      	movs	r0, #16
 8005796:	f001 ffd7 	bl	8007748 <USBD_static_malloc>
 800579a:	0001      	movs	r1, r0
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	23ae      	movs	r3, #174	; 0xae
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	50d1      	str	r1, [r2, r3]

	if (pdev->pClassData == NULL) {
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	23ae      	movs	r3, #174	; 0xae
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	58d3      	ldr	r3, [r2, r3]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d101      	bne.n	80057b4 <USBD_HID_Init+0x40>
		return USBD_FAIL;
 80057b0:	2302      	movs	r3, #2
 80057b2:	e006      	b.n	80057c2 <USBD_HID_Init+0x4e>
	}

	((USBD_HID_HandleTypeDef*) pdev->pClassData)->state = HID_IDLE;
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	23ae      	movs	r3, #174	; 0xae
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	58d3      	ldr	r3, [r2, r3]
 80057bc:	2200      	movs	r2, #0
 80057be:	731a      	strb	r2, [r3, #12]

	return USBD_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	0018      	movs	r0, r3
 80057c4:	46bd      	mov	sp, r7
 80057c6:	b002      	add	sp, #8
 80057c8:	bd80      	pop	{r7, pc}

080057ca <USBD_HID_DeInit>:
 *         DeInitialize the HID layer
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b082      	sub	sp, #8
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
 80057d2:	000a      	movs	r2, r1
 80057d4:	1cfb      	adds	r3, r7, #3
 80057d6:	701a      	strb	r2, [r3, #0]
	/* Close HID EPs */
	USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2181      	movs	r1, #129	; 0x81
 80057dc:	0018      	movs	r0, r3
 80057de:	f001 fe67 	bl	80074b0 <USBD_LL_CloseEP>
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	62da      	str	r2, [r3, #44]	; 0x2c

	/* FRee allocated memory */
	if (pdev->pClassData != NULL) {
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	23ae      	movs	r3, #174	; 0xae
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	58d3      	ldr	r3, [r2, r3]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00b      	beq.n	800580c <USBD_HID_DeInit+0x42>
		USBD_free(pdev->pClassData);
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	23ae      	movs	r3, #174	; 0xae
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	58d3      	ldr	r3, [r2, r3]
 80057fc:	0018      	movs	r0, r3
 80057fe:	f001 ffaf 	bl	8007760 <USBD_static_free>
		pdev->pClassData = NULL;
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	23ae      	movs	r3, #174	; 0xae
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	2100      	movs	r1, #0
 800580a:	50d1      	str	r1, [r2, r3]
	}

	return USBD_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	0018      	movs	r0, r3
 8005810:	46bd      	mov	sp, r7
 8005812:	b002      	add	sp, #8
 8005814:	bd80      	pop	{r7, pc}
	...

08005818 <USBD_HID_Setup>:
 * @param  pdev: instance
 * @param  req: usb requests
 * @retval status
 */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev,
		USBD_SetupReqTypedef *req) {
 8005818:	b580      	push	{r7, lr}
 800581a:	b088      	sub	sp, #32
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
	USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	23ae      	movs	r3, #174	; 0xae
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	58d3      	ldr	r3, [r2, r3]
 800582a:	613b      	str	r3, [r7, #16]
	uint16_t len = 0U;
 800582c:	231e      	movs	r3, #30
 800582e:	18fb      	adds	r3, r7, r3
 8005830:	2200      	movs	r2, #0
 8005832:	801a      	strh	r2, [r3, #0]
	uint8_t *pbuf = NULL;
 8005834:	2300      	movs	r3, #0
 8005836:	61bb      	str	r3, [r7, #24]
	uint16_t status_info = 0U;
 8005838:	230e      	movs	r3, #14
 800583a:	18fb      	adds	r3, r7, r3
 800583c:	2200      	movs	r2, #0
 800583e:	801a      	strh	r2, [r3, #0]
	USBD_StatusTypeDef ret = USBD_OK;
 8005840:	2317      	movs	r3, #23
 8005842:	18fb      	adds	r3, r7, r3
 8005844:	2200      	movs	r2, #0
 8005846:	701a      	strb	r2, [r3, #0]

	switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	001a      	movs	r2, r3
 800584e:	2360      	movs	r3, #96	; 0x60
 8005850:	4013      	ands	r3, r2
 8005852:	d03a      	beq.n	80058ca <USBD_HID_Setup+0xb2>
 8005854:	2b20      	cmp	r3, #32
 8005856:	d000      	beq.n	800585a <USBD_HID_Setup+0x42>
 8005858:	e0d6      	b.n	8005a08 <USBD_HID_Setup+0x1f0>
	case USB_REQ_TYPE_CLASS:
		switch (req->bRequest) {
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	785b      	ldrb	r3, [r3, #1]
 800585e:	2b0b      	cmp	r3, #11
 8005860:	d008      	beq.n	8005874 <USBD_HID_Setup+0x5c>
 8005862:	dc26      	bgt.n	80058b2 <USBD_HID_Setup+0x9a>
 8005864:	2b0a      	cmp	r3, #10
 8005866:	d013      	beq.n	8005890 <USBD_HID_Setup+0x78>
 8005868:	dc23      	bgt.n	80058b2 <USBD_HID_Setup+0x9a>
 800586a:	2b02      	cmp	r3, #2
 800586c:	d019      	beq.n	80058a2 <USBD_HID_Setup+0x8a>
 800586e:	2b03      	cmp	r3, #3
 8005870:	d007      	beq.n	8005882 <USBD_HID_Setup+0x6a>
 8005872:	e01e      	b.n	80058b2 <USBD_HID_Setup+0x9a>
		case HID_REQ_SET_PROTOCOL:
			hhid->Protocol = (uint8_t) (req->wValue);
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	885b      	ldrh	r3, [r3, #2]
 8005878:	b2db      	uxtb	r3, r3
 800587a:	001a      	movs	r2, r3
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	601a      	str	r2, [r3, #0]
			break;
 8005880:	e022      	b.n	80058c8 <USBD_HID_Setup+0xb0>

		case HID_REQ_GET_PROTOCOL:
			USBD_CtlSendData(pdev, (uint8_t*) (void*) &hhid->Protocol, 1U);
 8005882:	6939      	ldr	r1, [r7, #16]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	0018      	movs	r0, r3
 800588a:	f001 fabf 	bl	8006e0c <USBD_CtlSendData>
			break;
 800588e:	e01b      	b.n	80058c8 <USBD_HID_Setup+0xb0>

		case HID_REQ_SET_IDLE:
			hhid->IdleState = (uint8_t) (req->wValue >> 8);
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	885b      	ldrh	r3, [r3, #2]
 8005894:	0a1b      	lsrs	r3, r3, #8
 8005896:	b29b      	uxth	r3, r3
 8005898:	b2db      	uxtb	r3, r3
 800589a:	001a      	movs	r2, r3
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	605a      	str	r2, [r3, #4]
			break;
 80058a0:	e012      	b.n	80058c8 <USBD_HID_Setup+0xb0>

		case HID_REQ_GET_IDLE:
			USBD_CtlSendData(pdev, (uint8_t*) (void*) &hhid->IdleState, 1U);
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	1d19      	adds	r1, r3, #4
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	0018      	movs	r0, r3
 80058ac:	f001 faae 	bl	8006e0c <USBD_CtlSendData>
			break;
 80058b0:	e00a      	b.n	80058c8 <USBD_HID_Setup+0xb0>

		default:
			USBD_CtlError(pdev, req);
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	0011      	movs	r1, r2
 80058b8:	0018      	movs	r0, r3
 80058ba:	f001 fa29 	bl	8006d10 <USBD_CtlError>
			ret = USBD_FAIL;
 80058be:	2317      	movs	r3, #23
 80058c0:	18fb      	adds	r3, r7, r3
 80058c2:	2202      	movs	r2, #2
 80058c4:	701a      	strb	r2, [r3, #0]
			break;
 80058c6:	46c0      	nop			; (mov r8, r8)
		}
		break;
 80058c8:	e0a9      	b.n	8005a1e <USBD_HID_Setup+0x206>
	case USB_REQ_TYPE_STANDARD:
		switch (req->bRequest) {
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	785b      	ldrb	r3, [r3, #1]
 80058ce:	2b0b      	cmp	r3, #11
 80058d0:	d100      	bne.n	80058d4 <USBD_HID_Setup+0xbc>
 80058d2:	e075      	b.n	80059c0 <USBD_HID_Setup+0x1a8>
 80058d4:	dd00      	ble.n	80058d8 <USBD_HID_Setup+0xc0>
 80058d6:	e08b      	b.n	80059f0 <USBD_HID_Setup+0x1d8>
 80058d8:	2b0a      	cmp	r3, #10
 80058da:	d057      	beq.n	800598c <USBD_HID_Setup+0x174>
 80058dc:	dd00      	ble.n	80058e0 <USBD_HID_Setup+0xc8>
 80058de:	e087      	b.n	80059f0 <USBD_HID_Setup+0x1d8>
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d002      	beq.n	80058ea <USBD_HID_Setup+0xd2>
 80058e4:	2b06      	cmp	r3, #6
 80058e6:	d019      	beq.n	800591c <USBD_HID_Setup+0x104>
 80058e8:	e082      	b.n	80059f0 <USBD_HID_Setup+0x1d8>
		case USB_REQ_GET_STATUS:
			if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	23a7      	movs	r3, #167	; 0xa7
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	5cd3      	ldrb	r3, [r2, r3]
 80058f2:	2b03      	cmp	r3, #3
 80058f4:	d107      	bne.n	8005906 <USBD_HID_Setup+0xee>
				USBD_CtlSendData(pdev, (uint8_t*) (void*) &status_info, 2U);
 80058f6:	230e      	movs	r3, #14
 80058f8:	18f9      	adds	r1, r7, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2202      	movs	r2, #2
 80058fe:	0018      	movs	r0, r3
 8005900:	f001 fa84 	bl	8006e0c <USBD_CtlSendData>
			} else {
				USBD_CtlError(pdev, req);
				ret = USBD_FAIL;
			}
			break;
 8005904:	e07f      	b.n	8005a06 <USBD_HID_Setup+0x1ee>
				USBD_CtlError(pdev, req);
 8005906:	683a      	ldr	r2, [r7, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	0011      	movs	r1, r2
 800590c:	0018      	movs	r0, r3
 800590e:	f001 f9ff 	bl	8006d10 <USBD_CtlError>
				ret = USBD_FAIL;
 8005912:	2317      	movs	r3, #23
 8005914:	18fb      	adds	r3, r7, r3
 8005916:	2202      	movs	r2, #2
 8005918:	701a      	strb	r2, [r3, #0]
			break;
 800591a:	e074      	b.n	8005a06 <USBD_HID_Setup+0x1ee>

		case USB_REQ_GET_DESCRIPTOR:
			if (req->wValue >> 8 == HID_REPORT_DESC) {
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	885b      	ldrh	r3, [r3, #2]
 8005920:	0a1b      	lsrs	r3, r3, #8
 8005922:	b29b      	uxth	r3, r3
 8005924:	2b22      	cmp	r3, #34	; 0x22
 8005926:	d10b      	bne.n	8005940 <USBD_HID_Setup+0x128>
				len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	88db      	ldrh	r3, [r3, #6]
 800592c:	221e      	movs	r2, #30
 800592e:	18ba      	adds	r2, r7, r2
 8005930:	b299      	uxth	r1, r3
 8005932:	293f      	cmp	r1, #63	; 0x3f
 8005934:	d900      	bls.n	8005938 <USBD_HID_Setup+0x120>
 8005936:	233f      	movs	r3, #63	; 0x3f
 8005938:	8013      	strh	r3, [r2, #0]
				pbuf = HID_MOUSE_ReportDesc;
 800593a:	4b3c      	ldr	r3, [pc, #240]	; (8005a2c <USBD_HID_Setup+0x214>)
 800593c:	61bb      	str	r3, [r7, #24]
 800593e:	e01c      	b.n	800597a <USBD_HID_Setup+0x162>
			} else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE) {
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	885b      	ldrh	r3, [r3, #2]
 8005944:	0a1b      	lsrs	r3, r3, #8
 8005946:	b29b      	uxth	r3, r3
 8005948:	2b21      	cmp	r3, #33	; 0x21
 800594a:	d10b      	bne.n	8005964 <USBD_HID_Setup+0x14c>
				pbuf = USBD_HID_Desc;
 800594c:	4b38      	ldr	r3, [pc, #224]	; (8005a30 <USBD_HID_Setup+0x218>)
 800594e:	61bb      	str	r3, [r7, #24]
				len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	88db      	ldrh	r3, [r3, #6]
 8005954:	221e      	movs	r2, #30
 8005956:	18ba      	adds	r2, r7, r2
 8005958:	b299      	uxth	r1, r3
 800595a:	2909      	cmp	r1, #9
 800595c:	d900      	bls.n	8005960 <USBD_HID_Setup+0x148>
 800595e:	2309      	movs	r3, #9
 8005960:	8013      	strh	r3, [r2, #0]
 8005962:	e00a      	b.n	800597a <USBD_HID_Setup+0x162>
			} else {
				USBD_CtlError(pdev, req);
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	0011      	movs	r1, r2
 800596a:	0018      	movs	r0, r3
 800596c:	f001 f9d0 	bl	8006d10 <USBD_CtlError>
				ret = USBD_FAIL;
 8005970:	2317      	movs	r3, #23
 8005972:	18fb      	adds	r3, r7, r3
 8005974:	2202      	movs	r2, #2
 8005976:	701a      	strb	r2, [r3, #0]
				break;
 8005978:	e045      	b.n	8005a06 <USBD_HID_Setup+0x1ee>
			}
			USBD_CtlSendData(pdev, pbuf, len);
 800597a:	231e      	movs	r3, #30
 800597c:	18fb      	adds	r3, r7, r3
 800597e:	881a      	ldrh	r2, [r3, #0]
 8005980:	69b9      	ldr	r1, [r7, #24]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	0018      	movs	r0, r3
 8005986:	f001 fa41 	bl	8006e0c <USBD_CtlSendData>
			break;
 800598a:	e03c      	b.n	8005a06 <USBD_HID_Setup+0x1ee>

		case USB_REQ_GET_INTERFACE:
			if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	23a7      	movs	r3, #167	; 0xa7
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	5cd3      	ldrb	r3, [r2, r3]
 8005994:	2b03      	cmp	r3, #3
 8005996:	d108      	bne.n	80059aa <USBD_HID_Setup+0x192>
				USBD_CtlSendData(pdev, (uint8_t*) (void*) &hhid->AltSetting,
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	3308      	adds	r3, #8
 800599c:	0019      	movs	r1, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	0018      	movs	r0, r3
 80059a4:	f001 fa32 	bl	8006e0c <USBD_CtlSendData>
						1U);
			} else {
				USBD_CtlError(pdev, req);
				ret = USBD_FAIL;
			}
			break;
 80059a8:	e02d      	b.n	8005a06 <USBD_HID_Setup+0x1ee>
				USBD_CtlError(pdev, req);
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	0011      	movs	r1, r2
 80059b0:	0018      	movs	r0, r3
 80059b2:	f001 f9ad 	bl	8006d10 <USBD_CtlError>
				ret = USBD_FAIL;
 80059b6:	2317      	movs	r3, #23
 80059b8:	18fb      	adds	r3, r7, r3
 80059ba:	2202      	movs	r2, #2
 80059bc:	701a      	strb	r2, [r3, #0]
			break;
 80059be:	e022      	b.n	8005a06 <USBD_HID_Setup+0x1ee>

		case USB_REQ_SET_INTERFACE:
			if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	23a7      	movs	r3, #167	; 0xa7
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	5cd3      	ldrb	r3, [r2, r3]
 80059c8:	2b03      	cmp	r3, #3
 80059ca:	d106      	bne.n	80059da <USBD_HID_Setup+0x1c2>
				hhid->AltSetting = (uint8_t) (req->wValue);
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	885b      	ldrh	r3, [r3, #2]
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	001a      	movs	r2, r3
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	609a      	str	r2, [r3, #8]
			} else {
				USBD_CtlError(pdev, req);
				ret = USBD_FAIL;
			}
			break;
 80059d8:	e015      	b.n	8005a06 <USBD_HID_Setup+0x1ee>
				USBD_CtlError(pdev, req);
 80059da:	683a      	ldr	r2, [r7, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	0011      	movs	r1, r2
 80059e0:	0018      	movs	r0, r3
 80059e2:	f001 f995 	bl	8006d10 <USBD_CtlError>
				ret = USBD_FAIL;
 80059e6:	2317      	movs	r3, #23
 80059e8:	18fb      	adds	r3, r7, r3
 80059ea:	2202      	movs	r2, #2
 80059ec:	701a      	strb	r2, [r3, #0]
			break;
 80059ee:	e00a      	b.n	8005a06 <USBD_HID_Setup+0x1ee>

		default:
			USBD_CtlError(pdev, req);
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	0011      	movs	r1, r2
 80059f6:	0018      	movs	r0, r3
 80059f8:	f001 f98a 	bl	8006d10 <USBD_CtlError>
			ret = USBD_FAIL;
 80059fc:	2317      	movs	r3, #23
 80059fe:	18fb      	adds	r3, r7, r3
 8005a00:	2202      	movs	r2, #2
 8005a02:	701a      	strb	r2, [r3, #0]
			break;
 8005a04:	46c0      	nop			; (mov r8, r8)
		}
		break;
 8005a06:	e00a      	b.n	8005a1e <USBD_HID_Setup+0x206>

	default:
		USBD_CtlError(pdev, req);
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	0011      	movs	r1, r2
 8005a0e:	0018      	movs	r0, r3
 8005a10:	f001 f97e 	bl	8006d10 <USBD_CtlError>
		ret = USBD_FAIL;
 8005a14:	2317      	movs	r3, #23
 8005a16:	18fb      	adds	r3, r7, r3
 8005a18:	2202      	movs	r2, #2
 8005a1a:	701a      	strb	r2, [r3, #0]
		break;
 8005a1c:	46c0      	nop			; (mov r8, r8)
	}

	return ret;
 8005a1e:	2317      	movs	r3, #23
 8005a20:	18fb      	adds	r3, r7, r3
 8005a22:	781b      	ldrb	r3, [r3, #0]
}
 8005a24:	0018      	movs	r0, r3
 8005a26:	46bd      	mov	sp, r7
 8005a28:	b008      	add	sp, #32
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	200000c8 	.word	0x200000c8
 8005a30:	200000b0 	.word	0x200000b0

08005a34 <USBD_HID_SendReport>:
 * @param  pdev: device instance
 * @param  buff: pointer to report
 * @retval status
 */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report,
		uint16_t len) {
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	1dbb      	adds	r3, r7, #6
 8005a40:	801a      	strh	r2, [r3, #0]
	USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	23ae      	movs	r3, #174	; 0xae
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	58d3      	ldr	r3, [r2, r3]
 8005a4a:	617b      	str	r3, [r7, #20]

	if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	23a7      	movs	r3, #167	; 0xa7
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	5cd3      	ldrb	r3, [r2, r3]
 8005a54:	2b03      	cmp	r3, #3
 8005a56:	d10d      	bne.n	8005a74 <USBD_HID_SendReport+0x40>
		if (hhid->state == HID_IDLE) {
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	7b1b      	ldrb	r3, [r3, #12]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d109      	bne.n	8005a74 <USBD_HID_SendReport+0x40>
			hhid->state = HID_BUSY;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	2201      	movs	r2, #1
 8005a64:	731a      	strb	r2, [r3, #12]
			USBD_LL_Transmit(pdev,
 8005a66:	1dbb      	adds	r3, r7, #6
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	2181      	movs	r1, #129	; 0x81
 8005a70:	f001 fdfb 	bl	800766a <USBD_LL_Transmit>
			HID_EPIN_ADDR, report, len);
		}
	}
	return USBD_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	0018      	movs	r0, r3
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	b006      	add	sp, #24
 8005a7c:	bd80      	pop	{r7, pc}
	...

08005a80 <USBD_HID_GetFSCfgDesc>:
 *         return FS configuration descriptor
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_HID_GetFSCfgDesc(uint16_t *length) {
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
	*length = sizeof(USBD_HID_CfgFSDesc);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2222      	movs	r2, #34	; 0x22
 8005a8c:	801a      	strh	r2, [r3, #0]
	return USBD_HID_CfgFSDesc;
 8005a8e:	4b02      	ldr	r3, [pc, #8]	; (8005a98 <USBD_HID_GetFSCfgDesc+0x18>)
}
 8005a90:	0018      	movs	r0, r3
 8005a92:	46bd      	mov	sp, r7
 8005a94:	b002      	add	sp, #8
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	20000044 	.word	0x20000044

08005a9c <USBD_HID_GetHSCfgDesc>:
 *         return HS configuration descriptor
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_HID_GetHSCfgDesc(uint16_t *length) {
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
	*length = sizeof(USBD_HID_CfgHSDesc);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2222      	movs	r2, #34	; 0x22
 8005aa8:	801a      	strh	r2, [r3, #0]
	return USBD_HID_CfgHSDesc;
 8005aaa:	4b02      	ldr	r3, [pc, #8]	; (8005ab4 <USBD_HID_GetHSCfgDesc+0x18>)
}
 8005aac:	0018      	movs	r0, r3
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	b002      	add	sp, #8
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	20000068 	.word	0x20000068

08005ab8 <USBD_HID_GetOtherSpeedCfgDesc>:
 *         return other speed configuration descriptor
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length) {
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
	*length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2222      	movs	r2, #34	; 0x22
 8005ac4:	801a      	strh	r2, [r3, #0]
	return USBD_HID_OtherSpeedCfgDesc;
 8005ac6:	4b02      	ldr	r3, [pc, #8]	; (8005ad0 <USBD_HID_GetOtherSpeedCfgDesc+0x18>)
}
 8005ac8:	0018      	movs	r0, r3
 8005aca:	46bd      	mov	sp, r7
 8005acc:	b002      	add	sp, #8
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	2000008c 	.word	0x2000008c

08005ad4 <USBD_HID_DataIn>:
 *         handle data IN Stage
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum) {
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	000a      	movs	r2, r1
 8005ade:	1cfb      	adds	r3, r7, #3
 8005ae0:	701a      	strb	r2, [r3, #0]

	/* Ensure that the FIFO is empty before a new transfer, this condition could
	 be caused by  a new transfer before the end of the previous transfer */
	((USBD_HID_HandleTypeDef*) pdev->pClassData)->state = HID_IDLE;
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	23ae      	movs	r3, #174	; 0xae
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	58d3      	ldr	r3, [r2, r3]
 8005aea:	2200      	movs	r2, #0
 8005aec:	731a      	strb	r2, [r3, #12]
	return USBD_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	0018      	movs	r0, r3
 8005af2:	46bd      	mov	sp, r7
 8005af4:	b002      	add	sp, #8
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <USBD_HID_GetDeviceQualifierDesc>:
 * @brief  DeviceQualifierDescriptor
 *         return Device Qualifier descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_HID_GetDeviceQualifierDesc(uint16_t *length) {
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
	*length = sizeof(USBD_HID_DeviceQualifierDesc);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	220a      	movs	r2, #10
 8005b04:	801a      	strh	r2, [r3, #0]
	return USBD_HID_DeviceQualifierDesc;
 8005b06:	4b02      	ldr	r3, [pc, #8]	; (8005b10 <USBD_HID_GetDeviceQualifierDesc+0x18>)
}
 8005b08:	0018      	movs	r0, r3
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	b002      	add	sp, #8
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	200000bc 	.word	0x200000bc

08005b14 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	1dfb      	adds	r3, r7, #7
 8005b20:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d101      	bne.n	8005b2c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005b28:	2302      	movs	r3, #2
 8005b2a:	e020      	b.n	8005b6e <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	23ad      	movs	r3, #173	; 0xad
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	58d3      	ldr	r3, [r2, r3]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d004      	beq.n	8005b42 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	23ad      	movs	r3, #173	; 0xad
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	2100      	movs	r1, #0
 8005b40:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d004      	beq.n	8005b52 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	23ac      	movs	r3, #172	; 0xac
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	68b9      	ldr	r1, [r7, #8]
 8005b50:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	23a7      	movs	r3, #167	; 0xa7
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	2101      	movs	r1, #1
 8005b5a:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	1dfa      	adds	r2, r7, #7
 8005b60:	7812      	ldrb	r2, [r2, #0]
 8005b62:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	0018      	movs	r0, r3
 8005b68:	f001 fbf6 	bl	8007358 <USBD_LL_Init>

  return USBD_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	0018      	movs	r0, r3
 8005b70:	46bd      	mov	sp, r7
 8005b72:	b004      	add	sp, #16
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b084      	sub	sp, #16
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005b80:	200f      	movs	r0, #15
 8005b82:	183b      	adds	r3, r7, r0
 8005b84:	2200      	movs	r2, #0
 8005b86:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d008      	beq.n	8005ba0 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	23ad      	movs	r3, #173	; 0xad
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	6839      	ldr	r1, [r7, #0]
 8005b96:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8005b98:	183b      	adds	r3, r7, r0
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	701a      	strb	r2, [r3, #0]
 8005b9e:	e003      	b.n	8005ba8 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005ba0:	230f      	movs	r3, #15
 8005ba2:	18fb      	adds	r3, r7, r3
 8005ba4:	2202      	movs	r2, #2
 8005ba6:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005ba8:	230f      	movs	r3, #15
 8005baa:	18fb      	adds	r3, r7, r3
 8005bac:	781b      	ldrb	r3, [r3, #0]
}
 8005bae:	0018      	movs	r0, r3
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	b004      	add	sp, #16
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b082      	sub	sp, #8
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	0018      	movs	r0, r3
 8005bc2:	f001 fc19 	bl	80073f8 <USBD_LL_Start>

  return USBD_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	0018      	movs	r0, r3
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	b002      	add	sp, #8
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	0018      	movs	r0, r3
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	b002      	add	sp, #8
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005be2:	b590      	push	{r4, r7, lr}
 8005be4:	b085      	sub	sp, #20
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
 8005bea:	000a      	movs	r2, r1
 8005bec:	1cfb      	adds	r3, r7, #3
 8005bee:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005bf0:	240f      	movs	r4, #15
 8005bf2:	193b      	adds	r3, r7, r4
 8005bf4:	2202      	movs	r2, #2
 8005bf6:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	23ad      	movs	r3, #173	; 0xad
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	58d3      	ldr	r3, [r2, r3]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00e      	beq.n	8005c22 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	23ad      	movs	r3, #173	; 0xad
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	58d3      	ldr	r3, [r2, r3]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	1cfa      	adds	r2, r7, #3
 8005c10:	7811      	ldrb	r1, [r2, #0]
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	0010      	movs	r0, r2
 8005c16:	4798      	blx	r3
 8005c18:	1e03      	subs	r3, r0, #0
 8005c1a:	d102      	bne.n	8005c22 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8005c1c:	193b      	adds	r3, r7, r4
 8005c1e:	2200      	movs	r2, #0
 8005c20:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8005c22:	230f      	movs	r3, #15
 8005c24:	18fb      	adds	r3, r7, r3
 8005c26:	781b      	ldrb	r3, [r3, #0]
}
 8005c28:	0018      	movs	r0, r3
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	b005      	add	sp, #20
 8005c2e:	bd90      	pop	{r4, r7, pc}

08005c30 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	000a      	movs	r2, r1
 8005c3a:	1cfb      	adds	r3, r7, #3
 8005c3c:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	23ad      	movs	r3, #173	; 0xad
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	58d3      	ldr	r3, [r2, r3]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	1cfa      	adds	r2, r7, #3
 8005c4a:	7811      	ldrb	r1, [r2, #0]
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	0010      	movs	r0, r2
 8005c50:	4798      	blx	r3

  return USBD_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	0018      	movs	r0, r3
 8005c56:	46bd      	mov	sp, r7
 8005c58:	b002      	add	sp, #8
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	22aa      	movs	r2, #170	; 0xaa
 8005c6a:	0092      	lsls	r2, r2, #2
 8005c6c:	4694      	mov	ip, r2
 8005c6e:	4463      	add	r3, ip
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	0011      	movs	r1, r2
 8005c74:	0018      	movs	r0, r3
 8005c76:	f001 f810 	bl	8006c9a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	23a5      	movs	r3, #165	; 0xa5
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	2101      	movs	r1, #1
 8005c82:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a23      	ldr	r2, [pc, #140]	; (8005d14 <USBD_LL_SetupStage+0xb8>)
 8005c88:	5a9b      	ldrh	r3, [r3, r2]
 8005c8a:	0019      	movs	r1, r3
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	23a6      	movs	r3, #166	; 0xa6
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	23aa      	movs	r3, #170	; 0xaa
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	5cd3      	ldrb	r3, [r2, r3]
 8005c9c:	001a      	movs	r2, r3
 8005c9e:	231f      	movs	r3, #31
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d019      	beq.n	8005cda <USBD_LL_SetupStage+0x7e>
 8005ca6:	d822      	bhi.n	8005cee <USBD_LL_SetupStage+0x92>
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d002      	beq.n	8005cb2 <USBD_LL_SetupStage+0x56>
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d00a      	beq.n	8005cc6 <USBD_LL_SetupStage+0x6a>
 8005cb0:	e01d      	b.n	8005cee <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	22aa      	movs	r2, #170	; 0xaa
 8005cb6:	0092      	lsls	r2, r2, #2
 8005cb8:	189a      	adds	r2, r3, r2
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	0011      	movs	r1, r2
 8005cbe:	0018      	movs	r0, r3
 8005cc0:	f000 fa10 	bl	80060e4 <USBD_StdDevReq>
      break;
 8005cc4:	e020      	b.n	8005d08 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	22aa      	movs	r2, #170	; 0xaa
 8005cca:	0092      	lsls	r2, r2, #2
 8005ccc:	189a      	adds	r2, r3, r2
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	0011      	movs	r1, r2
 8005cd2:	0018      	movs	r0, r3
 8005cd4:	f000 fa78 	bl	80061c8 <USBD_StdItfReq>
      break;
 8005cd8:	e016      	b.n	8005d08 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	22aa      	movs	r2, #170	; 0xaa
 8005cde:	0092      	lsls	r2, r2, #2
 8005ce0:	189a      	adds	r2, r3, r2
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	0011      	movs	r1, r2
 8005ce6:	0018      	movs	r0, r3
 8005ce8:	f000 fac5 	bl	8006276 <USBD_StdEPReq>
      break;
 8005cec:	e00c      	b.n	8005d08 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	23aa      	movs	r3, #170	; 0xaa
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	5cd3      	ldrb	r3, [r2, r3]
 8005cf6:	227f      	movs	r2, #127	; 0x7f
 8005cf8:	4393      	bics	r3, r2
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	0011      	movs	r1, r2
 8005d00:	0018      	movs	r0, r3
 8005d02:	f001 fc00 	bl	8007506 <USBD_LL_StallEP>
      break;
 8005d06:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	0018      	movs	r0, r3
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	b002      	add	sp, #8
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	46c0      	nop			; (mov r8, r8)
 8005d14:	000002ae 	.word	0x000002ae

08005d18 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	607a      	str	r2, [r7, #4]
 8005d22:	200b      	movs	r0, #11
 8005d24:	183b      	adds	r3, r7, r0
 8005d26:	1c0a      	adds	r2, r1, #0
 8005d28:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005d2a:	183b      	adds	r3, r7, r0
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d154      	bne.n	8005ddc <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	3355      	adds	r3, #85	; 0x55
 8005d36:	33ff      	adds	r3, #255	; 0xff
 8005d38:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	23a5      	movs	r3, #165	; 0xa5
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	58d3      	ldr	r3, [r2, r3]
 8005d42:	2b03      	cmp	r3, #3
 8005d44:	d139      	bne.n	8005dba <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d919      	bls.n	8005d86 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	68da      	ldr	r2, [r3, #12]
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	1ad2      	subs	r2, r2, r3
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	68da      	ldr	r2, [r3, #12]
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d203      	bcs.n	8005d74 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	e002      	b.n	8005d7a <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	6879      	ldr	r1, [r7, #4]
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	001a      	movs	r2, r3
 8005d80:	f001 f877 	bl	8006e72 <USBD_CtlContinueRx>
 8005d84:	e045      	b.n	8005e12 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	23ad      	movs	r3, #173	; 0xad
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	58d3      	ldr	r3, [r2, r3]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00d      	beq.n	8005db0 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	23a7      	movs	r3, #167	; 0xa7
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005d9c:	2b03      	cmp	r3, #3
 8005d9e:	d107      	bne.n	8005db0 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	23ad      	movs	r3, #173	; 0xad
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	58d3      	ldr	r3, [r2, r3]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	0010      	movs	r0, r2
 8005dae:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	0018      	movs	r0, r3
 8005db4:	f001 f870 	bl	8006e98 <USBD_CtlSendStatus>
 8005db8:	e02b      	b.n	8005e12 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	23a5      	movs	r3, #165	; 0xa5
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	58d3      	ldr	r3, [r2, r3]
 8005dc2:	2b05      	cmp	r3, #5
 8005dc4:	d125      	bne.n	8005e12 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	23a5      	movs	r3, #165	; 0xa5
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	2100      	movs	r1, #0
 8005dce:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	0018      	movs	r0, r3
 8005dd6:	f001 fb96 	bl	8007506 <USBD_LL_StallEP>
 8005dda:	e01a      	b.n	8005e12 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	23ad      	movs	r3, #173	; 0xad
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	58d3      	ldr	r3, [r2, r3]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d011      	beq.n	8005e0e <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	23a7      	movs	r3, #167	; 0xa7
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8005df2:	2b03      	cmp	r3, #3
 8005df4:	d10b      	bne.n	8005e0e <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	23ad      	movs	r3, #173	; 0xad
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	58d3      	ldr	r3, [r2, r3]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	220b      	movs	r2, #11
 8005e02:	18ba      	adds	r2, r7, r2
 8005e04:	7811      	ldrb	r1, [r2, #0]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	0010      	movs	r0, r2
 8005e0a:	4798      	blx	r3
 8005e0c:	e001      	b.n	8005e12 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005e0e:	2302      	movs	r3, #2
 8005e10:	e000      	b.n	8005e14 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	0018      	movs	r0, r3
 8005e16:	46bd      	mov	sp, r7
 8005e18:	b006      	add	sp, #24
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	607a      	str	r2, [r7, #4]
 8005e26:	200b      	movs	r0, #11
 8005e28:	183b      	adds	r3, r7, r0
 8005e2a:	1c0a      	adds	r2, r1, #0
 8005e2c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005e2e:	183b      	adds	r3, r7, r0
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d000      	beq.n	8005e38 <USBD_LL_DataInStage+0x1c>
 8005e36:	e08e      	b.n	8005f56 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	3314      	adds	r3, #20
 8005e3c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	23a5      	movs	r3, #165	; 0xa5
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	58d3      	ldr	r3, [r2, r3]
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d164      	bne.n	8005f14 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	68da      	ldr	r2, [r3, #12]
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d915      	bls.n	8005e82 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	68da      	ldr	r2, [r3, #12]
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	1ad2      	subs	r2, r2, r3
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	6879      	ldr	r1, [r7, #4]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	0018      	movs	r0, r3
 8005e70:	f000 ffec 	bl	8006e4c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	2300      	movs	r3, #0
 8005e78:	2200      	movs	r2, #0
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	f001 fc2c 	bl	80076d8 <USBD_LL_PrepareReceive>
 8005e80:	e059      	b.n	8005f36 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	689a      	ldr	r2, [r3, #8]
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	0019      	movs	r1, r3
 8005e8c:	0010      	movs	r0, r2
 8005e8e:	f7fa f9c9 	bl	8000224 <__aeabi_uidivmod>
 8005e92:	1e0b      	subs	r3, r1, #0
 8005e94:	d11f      	bne.n	8005ed6 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	689a      	ldr	r2, [r3, #8]
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d319      	bcc.n	8005ed6 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	689a      	ldr	r2, [r3, #8]
 8005ea6:	68f9      	ldr	r1, [r7, #12]
 8005ea8:	23a6      	movs	r3, #166	; 0xa6
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d211      	bcs.n	8005ed6 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	2100      	movs	r1, #0
 8005eb8:	0018      	movs	r0, r3
 8005eba:	f000 ffc7 	bl	8006e4c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	23a6      	movs	r3, #166	; 0xa6
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	2300      	movs	r3, #0
 8005ecc:	2200      	movs	r2, #0
 8005ece:	2100      	movs	r1, #0
 8005ed0:	f001 fc02 	bl	80076d8 <USBD_LL_PrepareReceive>
 8005ed4:	e02f      	b.n	8005f36 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	23ad      	movs	r3, #173	; 0xad
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	58d3      	ldr	r3, [r2, r3]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00d      	beq.n	8005f00 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	23a7      	movs	r3, #167	; 0xa7
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005eec:	2b03      	cmp	r3, #3
 8005eee:	d107      	bne.n	8005f00 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	23ad      	movs	r3, #173	; 0xad
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	58d3      	ldr	r3, [r2, r3]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	0010      	movs	r0, r2
 8005efe:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2180      	movs	r1, #128	; 0x80
 8005f04:	0018      	movs	r0, r3
 8005f06:	f001 fafe 	bl	8007506 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	0018      	movs	r0, r3
 8005f0e:	f000 ffd7 	bl	8006ec0 <USBD_CtlReceiveStatus>
 8005f12:	e010      	b.n	8005f36 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	23a5      	movs	r3, #165	; 0xa5
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	58d3      	ldr	r3, [r2, r3]
 8005f1c:	2b04      	cmp	r3, #4
 8005f1e:	d005      	beq.n	8005f2c <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	23a5      	movs	r3, #165	; 0xa5
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d104      	bne.n	8005f36 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2180      	movs	r1, #128	; 0x80
 8005f30:	0018      	movs	r0, r3
 8005f32:	f001 fae8 	bl	8007506 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	23a8      	movs	r3, #168	; 0xa8
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	5cd3      	ldrb	r3, [r2, r3]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d124      	bne.n	8005f8c <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	0018      	movs	r0, r3
 8005f46:	f7ff fe43 	bl	8005bd0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	23a8      	movs	r3, #168	; 0xa8
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	2100      	movs	r1, #0
 8005f52:	54d1      	strb	r1, [r2, r3]
 8005f54:	e01a      	b.n	8005f8c <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	23ad      	movs	r3, #173	; 0xad
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	58d3      	ldr	r3, [r2, r3]
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d011      	beq.n	8005f88 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	23a7      	movs	r3, #167	; 0xa7
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8005f6c:	2b03      	cmp	r3, #3
 8005f6e:	d10b      	bne.n	8005f88 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	23ad      	movs	r3, #173	; 0xad
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	58d3      	ldr	r3, [r2, r3]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	220b      	movs	r2, #11
 8005f7c:	18ba      	adds	r2, r7, r2
 8005f7e:	7811      	ldrb	r1, [r2, #0]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	0010      	movs	r0, r2
 8005f84:	4798      	blx	r3
 8005f86:	e001      	b.n	8005f8c <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005f88:	2302      	movs	r3, #2
 8005f8a:	e000      	b.n	8005f8e <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	0018      	movs	r0, r3
 8005f90:	46bd      	mov	sp, r7
 8005f92:	b006      	add	sp, #24
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b082      	sub	sp, #8
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	2340      	movs	r3, #64	; 0x40
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	f001 fa4c 	bl	8007442 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	23ac      	movs	r3, #172	; 0xac
 8005fae:	005b      	lsls	r3, r3, #1
 8005fb0:	2101      	movs	r1, #1
 8005fb2:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	23b2      	movs	r3, #178	; 0xb2
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	2140      	movs	r1, #64	; 0x40
 8005fbc:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	2340      	movs	r3, #64	; 0x40
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	2180      	movs	r1, #128	; 0x80
 8005fc6:	f001 fa3c 	bl	8007442 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2240      	movs	r2, #64	; 0x40
 8005fd4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	23a7      	movs	r3, #167	; 0xa7
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	2101      	movs	r1, #1
 8005fde:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	23a5      	movs	r3, #165	; 0xa5
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	23a9      	movs	r3, #169	; 0xa9
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	2100      	movs	r1, #0
 8005ff8:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	23ae      	movs	r3, #174	; 0xae
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	58d3      	ldr	r3, [r2, r3]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00a      	beq.n	800601c <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	23ad      	movs	r3, #173	; 0xad
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	58d3      	ldr	r3, [r2, r3]
 800600e:	685a      	ldr	r2, [r3, #4]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	b2d9      	uxtb	r1, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	0018      	movs	r0, r3
 800601a:	4790      	blx	r2
  }

  return USBD_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	0018      	movs	r0, r3
 8006020:	46bd      	mov	sp, r7
 8006022:	b002      	add	sp, #8
 8006024:	bd80      	pop	{r7, pc}

08006026 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b082      	sub	sp, #8
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	000a      	movs	r2, r1
 8006030:	1cfb      	adds	r3, r7, #3
 8006032:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	1cfa      	adds	r2, r7, #3
 8006038:	7812      	ldrb	r2, [r2, #0]
 800603a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	0018      	movs	r0, r3
 8006040:	46bd      	mov	sp, r7
 8006042:	b002      	add	sp, #8
 8006044:	bd80      	pop	{r7, pc}
	...

08006048 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	23a7      	movs	r3, #167	; 0xa7
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	5cd1      	ldrb	r1, [r2, r3]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a06      	ldr	r2, [pc, #24]	; (8006074 <USBD_LL_Suspend+0x2c>)
 800605c:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	23a7      	movs	r3, #167	; 0xa7
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	2104      	movs	r1, #4
 8006066:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	0018      	movs	r0, r3
 800606c:	46bd      	mov	sp, r7
 800606e:	b002      	add	sp, #8
 8006070:	bd80      	pop	{r7, pc}
 8006072:	46c0      	nop			; (mov r8, r8)
 8006074:	0000029d 	.word	0x0000029d

08006078 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	23a7      	movs	r3, #167	; 0xa7
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	5cd3      	ldrb	r3, [r2, r3]
 8006088:	2b04      	cmp	r3, #4
 800608a:	d106      	bne.n	800609a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a05      	ldr	r2, [pc, #20]	; (80060a4 <USBD_LL_Resume+0x2c>)
 8006090:	5c99      	ldrb	r1, [r3, r2]
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	23a7      	movs	r3, #167	; 0xa7
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	0018      	movs	r0, r3
 800609e:	46bd      	mov	sp, r7
 80060a0:	b002      	add	sp, #8
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	0000029d 	.word	0x0000029d

080060a8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	23a7      	movs	r3, #167	; 0xa7
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	5cd3      	ldrb	r3, [r2, r3]
 80060b8:	2b03      	cmp	r3, #3
 80060ba:	d10e      	bne.n	80060da <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	23ad      	movs	r3, #173	; 0xad
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	58d3      	ldr	r3, [r2, r3]
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d007      	beq.n	80060da <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	23ad      	movs	r3, #173	; 0xad
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	58d3      	ldr	r3, [r2, r3]
 80060d2:	69db      	ldr	r3, [r3, #28]
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	0010      	movs	r0, r2
 80060d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	0018      	movs	r0, r3
 80060de:	46bd      	mov	sp, r7
 80060e0:	b002      	add	sp, #8
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80060ee:	230f      	movs	r3, #15
 80060f0:	18fb      	adds	r3, r7, r3
 80060f2:	2200      	movs	r2, #0
 80060f4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	001a      	movs	r2, r3
 80060fc:	2360      	movs	r3, #96	; 0x60
 80060fe:	4013      	ands	r3, r2
 8006100:	2b40      	cmp	r3, #64	; 0x40
 8006102:	d004      	beq.n	800610e <USBD_StdDevReq+0x2a>
 8006104:	d84f      	bhi.n	80061a6 <USBD_StdDevReq+0xc2>
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00b      	beq.n	8006122 <USBD_StdDevReq+0x3e>
 800610a:	2b20      	cmp	r3, #32
 800610c:	d14b      	bne.n	80061a6 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	23ad      	movs	r3, #173	; 0xad
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	58d3      	ldr	r3, [r2, r3]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	6839      	ldr	r1, [r7, #0]
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	0010      	movs	r0, r2
 800611e:	4798      	blx	r3
      break;
 8006120:	e048      	b.n	80061b4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	785b      	ldrb	r3, [r3, #1]
 8006126:	2b09      	cmp	r3, #9
 8006128:	d835      	bhi.n	8006196 <USBD_StdDevReq+0xb2>
 800612a:	009a      	lsls	r2, r3, #2
 800612c:	4b25      	ldr	r3, [pc, #148]	; (80061c4 <USBD_StdDevReq+0xe0>)
 800612e:	18d3      	adds	r3, r2, r3
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006134:	683a      	ldr	r2, [r7, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	0011      	movs	r1, r2
 800613a:	0018      	movs	r0, r3
 800613c:	f000 fa52 	bl	80065e4 <USBD_GetDescriptor>
          break;
 8006140:	e030      	b.n	80061a4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	0011      	movs	r1, r2
 8006148:	0018      	movs	r0, r3
 800614a:	f000 fbfd 	bl	8006948 <USBD_SetAddress>
          break;
 800614e:	e029      	b.n	80061a4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	0011      	movs	r1, r2
 8006156:	0018      	movs	r0, r3
 8006158:	f000 fc4a 	bl	80069f0 <USBD_SetConfig>
          break;
 800615c:	e022      	b.n	80061a4 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	0011      	movs	r1, r2
 8006164:	0018      	movs	r0, r3
 8006166:	f000 fce7 	bl	8006b38 <USBD_GetConfig>
          break;
 800616a:	e01b      	b.n	80061a4 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800616c:	683a      	ldr	r2, [r7, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	0011      	movs	r1, r2
 8006172:	0018      	movs	r0, r3
 8006174:	f000 fd1b 	bl	8006bae <USBD_GetStatus>
          break;
 8006178:	e014      	b.n	80061a4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	0011      	movs	r1, r2
 8006180:	0018      	movs	r0, r3
 8006182:	f000 fd4e 	bl	8006c22 <USBD_SetFeature>
          break;
 8006186:	e00d      	b.n	80061a4 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	0011      	movs	r1, r2
 800618e:	0018      	movs	r0, r3
 8006190:	f000 fd5d 	bl	8006c4e <USBD_ClrFeature>
          break;
 8006194:	e006      	b.n	80061a4 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006196:	683a      	ldr	r2, [r7, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	0011      	movs	r1, r2
 800619c:	0018      	movs	r0, r3
 800619e:	f000 fdb7 	bl	8006d10 <USBD_CtlError>
          break;
 80061a2:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80061a4:	e006      	b.n	80061b4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	0011      	movs	r1, r2
 80061ac:	0018      	movs	r0, r3
 80061ae:	f000 fdaf 	bl	8006d10 <USBD_CtlError>
      break;
 80061b2:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80061b4:	230f      	movs	r3, #15
 80061b6:	18fb      	adds	r3, r7, r3
 80061b8:	781b      	ldrb	r3, [r3, #0]
}
 80061ba:	0018      	movs	r0, r3
 80061bc:	46bd      	mov	sp, r7
 80061be:	b004      	add	sp, #16
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	46c0      	nop			; (mov r8, r8)
 80061c4:	080078c8 	.word	0x080078c8

080061c8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80061c8:	b5b0      	push	{r4, r5, r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80061d2:	230f      	movs	r3, #15
 80061d4:	18fb      	adds	r3, r7, r3
 80061d6:	2200      	movs	r2, #0
 80061d8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	001a      	movs	r2, r3
 80061e0:	2360      	movs	r3, #96	; 0x60
 80061e2:	4013      	ands	r3, r2
 80061e4:	2b40      	cmp	r3, #64	; 0x40
 80061e6:	d004      	beq.n	80061f2 <USBD_StdItfReq+0x2a>
 80061e8:	d839      	bhi.n	800625e <USBD_StdItfReq+0x96>
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d001      	beq.n	80061f2 <USBD_StdItfReq+0x2a>
 80061ee:	2b20      	cmp	r3, #32
 80061f0:	d135      	bne.n	800625e <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	23a7      	movs	r3, #167	; 0xa7
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	5cd3      	ldrb	r3, [r2, r3]
 80061fa:	3b01      	subs	r3, #1
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d825      	bhi.n	800624c <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	889b      	ldrh	r3, [r3, #4]
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b01      	cmp	r3, #1
 8006208:	d819      	bhi.n	800623e <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	23ad      	movs	r3, #173	; 0xad
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	58d3      	ldr	r3, [r2, r3]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	250f      	movs	r5, #15
 8006216:	197c      	adds	r4, r7, r5
 8006218:	6839      	ldr	r1, [r7, #0]
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	0010      	movs	r0, r2
 800621e:	4798      	blx	r3
 8006220:	0003      	movs	r3, r0
 8006222:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	88db      	ldrh	r3, [r3, #6]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d116      	bne.n	800625a <USBD_StdItfReq+0x92>
 800622c:	197b      	adds	r3, r7, r5
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d112      	bne.n	800625a <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	0018      	movs	r0, r3
 8006238:	f000 fe2e 	bl	8006e98 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800623c:	e00d      	b.n	800625a <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800623e:	683a      	ldr	r2, [r7, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	0011      	movs	r1, r2
 8006244:	0018      	movs	r0, r3
 8006246:	f000 fd63 	bl	8006d10 <USBD_CtlError>
          break;
 800624a:	e006      	b.n	800625a <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800624c:	683a      	ldr	r2, [r7, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	0011      	movs	r1, r2
 8006252:	0018      	movs	r0, r3
 8006254:	f000 fd5c 	bl	8006d10 <USBD_CtlError>
          break;
 8006258:	e000      	b.n	800625c <USBD_StdItfReq+0x94>
          break;
 800625a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800625c:	e006      	b.n	800626c <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	0011      	movs	r1, r2
 8006264:	0018      	movs	r0, r3
 8006266:	f000 fd53 	bl	8006d10 <USBD_CtlError>
      break;
 800626a:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	0018      	movs	r0, r3
 8006270:	46bd      	mov	sp, r7
 8006272:	b004      	add	sp, #16
 8006274:	bdb0      	pop	{r4, r5, r7, pc}

08006276 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006276:	b5b0      	push	{r4, r5, r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006280:	230f      	movs	r3, #15
 8006282:	18fb      	adds	r3, r7, r3
 8006284:	2200      	movs	r2, #0
 8006286:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	889a      	ldrh	r2, [r3, #4]
 800628c:	230e      	movs	r3, #14
 800628e:	18fb      	adds	r3, r7, r3
 8006290:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	001a      	movs	r2, r3
 8006298:	2360      	movs	r3, #96	; 0x60
 800629a:	4013      	ands	r3, r2
 800629c:	2b40      	cmp	r3, #64	; 0x40
 800629e:	d006      	beq.n	80062ae <USBD_StdEPReq+0x38>
 80062a0:	d900      	bls.n	80062a4 <USBD_StdEPReq+0x2e>
 80062a2:	e190      	b.n	80065c6 <USBD_StdEPReq+0x350>
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00c      	beq.n	80062c2 <USBD_StdEPReq+0x4c>
 80062a8:	2b20      	cmp	r3, #32
 80062aa:	d000      	beq.n	80062ae <USBD_StdEPReq+0x38>
 80062ac:	e18b      	b.n	80065c6 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	23ad      	movs	r3, #173	; 0xad
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	58d3      	ldr	r3, [r2, r3]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	6839      	ldr	r1, [r7, #0]
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	0010      	movs	r0, r2
 80062be:	4798      	blx	r3
      break;
 80062c0:	e188      	b.n	80065d4 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	001a      	movs	r2, r3
 80062c8:	2360      	movs	r3, #96	; 0x60
 80062ca:	4013      	ands	r3, r2
 80062cc:	2b20      	cmp	r3, #32
 80062ce:	d10f      	bne.n	80062f0 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	23ad      	movs	r3, #173	; 0xad
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	58d3      	ldr	r3, [r2, r3]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	250f      	movs	r5, #15
 80062dc:	197c      	adds	r4, r7, r5
 80062de:	6839      	ldr	r1, [r7, #0]
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	0010      	movs	r0, r2
 80062e4:	4798      	blx	r3
 80062e6:	0003      	movs	r3, r0
 80062e8:	7023      	strb	r3, [r4, #0]

        return ret;
 80062ea:	197b      	adds	r3, r7, r5
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	e174      	b.n	80065da <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	785b      	ldrb	r3, [r3, #1]
 80062f4:	2b03      	cmp	r3, #3
 80062f6:	d007      	beq.n	8006308 <USBD_StdEPReq+0x92>
 80062f8:	dd00      	ble.n	80062fc <USBD_StdEPReq+0x86>
 80062fa:	e15c      	b.n	80065b6 <USBD_StdEPReq+0x340>
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d100      	bne.n	8006302 <USBD_StdEPReq+0x8c>
 8006300:	e092      	b.n	8006428 <USBD_StdEPReq+0x1b2>
 8006302:	2b01      	cmp	r3, #1
 8006304:	d04b      	beq.n	800639e <USBD_StdEPReq+0x128>
 8006306:	e156      	b.n	80065b6 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	23a7      	movs	r3, #167	; 0xa7
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	5cd3      	ldrb	r3, [r2, r3]
 8006310:	2b02      	cmp	r3, #2
 8006312:	d002      	beq.n	800631a <USBD_StdEPReq+0xa4>
 8006314:	2b03      	cmp	r3, #3
 8006316:	d01d      	beq.n	8006354 <USBD_StdEPReq+0xde>
 8006318:	e039      	b.n	800638e <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800631a:	220e      	movs	r2, #14
 800631c:	18bb      	adds	r3, r7, r2
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d010      	beq.n	8006346 <USBD_StdEPReq+0xd0>
 8006324:	18bb      	adds	r3, r7, r2
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	2b80      	cmp	r3, #128	; 0x80
 800632a:	d00c      	beq.n	8006346 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800632c:	18bb      	adds	r3, r7, r2
 800632e:	781a      	ldrb	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	0011      	movs	r1, r2
 8006334:	0018      	movs	r0, r3
 8006336:	f001 f8e6 	bl	8007506 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2180      	movs	r1, #128	; 0x80
 800633e:	0018      	movs	r0, r3
 8006340:	f001 f8e1 	bl	8007506 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006344:	e02a      	b.n	800639c <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	0011      	movs	r1, r2
 800634c:	0018      	movs	r0, r3
 800634e:	f000 fcdf 	bl	8006d10 <USBD_CtlError>
              break;
 8006352:	e023      	b.n	800639c <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	885b      	ldrh	r3, [r3, #2]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d113      	bne.n	8006384 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800635c:	220e      	movs	r2, #14
 800635e:	18bb      	adds	r3, r7, r2
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00e      	beq.n	8006384 <USBD_StdEPReq+0x10e>
 8006366:	18bb      	adds	r3, r7, r2
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	2b80      	cmp	r3, #128	; 0x80
 800636c:	d00a      	beq.n	8006384 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	88db      	ldrh	r3, [r3, #6]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d106      	bne.n	8006384 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006376:	18bb      	adds	r3, r7, r2
 8006378:	781a      	ldrb	r2, [r3, #0]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	0011      	movs	r1, r2
 800637e:	0018      	movs	r0, r3
 8006380:	f001 f8c1 	bl	8007506 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	0018      	movs	r0, r3
 8006388:	f000 fd86 	bl	8006e98 <USBD_CtlSendStatus>

              break;
 800638c:	e006      	b.n	800639c <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800638e:	683a      	ldr	r2, [r7, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	0011      	movs	r1, r2
 8006394:	0018      	movs	r0, r3
 8006396:	f000 fcbb 	bl	8006d10 <USBD_CtlError>
              break;
 800639a:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800639c:	e112      	b.n	80065c4 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	23a7      	movs	r3, #167	; 0xa7
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	5cd3      	ldrb	r3, [r2, r3]
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d002      	beq.n	80063b0 <USBD_StdEPReq+0x13a>
 80063aa:	2b03      	cmp	r3, #3
 80063ac:	d01d      	beq.n	80063ea <USBD_StdEPReq+0x174>
 80063ae:	e032      	b.n	8006416 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063b0:	220e      	movs	r2, #14
 80063b2:	18bb      	adds	r3, r7, r2
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d010      	beq.n	80063dc <USBD_StdEPReq+0x166>
 80063ba:	18bb      	adds	r3, r7, r2
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	2b80      	cmp	r3, #128	; 0x80
 80063c0:	d00c      	beq.n	80063dc <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80063c2:	18bb      	adds	r3, r7, r2
 80063c4:	781a      	ldrb	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	0011      	movs	r1, r2
 80063ca:	0018      	movs	r0, r3
 80063cc:	f001 f89b 	bl	8007506 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2180      	movs	r1, #128	; 0x80
 80063d4:	0018      	movs	r0, r3
 80063d6:	f001 f896 	bl	8007506 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80063da:	e024      	b.n	8006426 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 80063dc:	683a      	ldr	r2, [r7, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	0011      	movs	r1, r2
 80063e2:	0018      	movs	r0, r3
 80063e4:	f000 fc94 	bl	8006d10 <USBD_CtlError>
              break;
 80063e8:	e01d      	b.n	8006426 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	885b      	ldrh	r3, [r3, #2]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d118      	bne.n	8006424 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80063f2:	210e      	movs	r1, #14
 80063f4:	187b      	adds	r3, r7, r1
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	227f      	movs	r2, #127	; 0x7f
 80063fa:	4013      	ands	r3, r2
 80063fc:	d006      	beq.n	800640c <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80063fe:	187b      	adds	r3, r7, r1
 8006400:	781a      	ldrb	r2, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	0011      	movs	r1, r2
 8006406:	0018      	movs	r0, r3
 8006408:	f001 f8a8 	bl	800755c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	0018      	movs	r0, r3
 8006410:	f000 fd42 	bl	8006e98 <USBD_CtlSendStatus>
              }
              break;
 8006414:	e006      	b.n	8006424 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	0011      	movs	r1, r2
 800641c:	0018      	movs	r0, r3
 800641e:	f000 fc77 	bl	8006d10 <USBD_CtlError>
              break;
 8006422:	e000      	b.n	8006426 <USBD_StdEPReq+0x1b0>
              break;
 8006424:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8006426:	e0cd      	b.n	80065c4 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	23a7      	movs	r3, #167	; 0xa7
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	5cd3      	ldrb	r3, [r2, r3]
 8006430:	2b02      	cmp	r3, #2
 8006432:	d002      	beq.n	800643a <USBD_StdEPReq+0x1c4>
 8006434:	2b03      	cmp	r3, #3
 8006436:	d03c      	beq.n	80064b2 <USBD_StdEPReq+0x23c>
 8006438:	e0b5      	b.n	80065a6 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800643a:	220e      	movs	r2, #14
 800643c:	18bb      	adds	r3, r7, r2
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00a      	beq.n	800645a <USBD_StdEPReq+0x1e4>
 8006444:	18bb      	adds	r3, r7, r2
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	2b80      	cmp	r3, #128	; 0x80
 800644a:	d006      	beq.n	800645a <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	0011      	movs	r1, r2
 8006452:	0018      	movs	r0, r3
 8006454:	f000 fc5c 	bl	8006d10 <USBD_CtlError>
                break;
 8006458:	e0ac      	b.n	80065b4 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800645a:	220e      	movs	r2, #14
 800645c:	18bb      	adds	r3, r7, r2
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	b25b      	sxtb	r3, r3
 8006462:	2b00      	cmp	r3, #0
 8006464:	da0c      	bge.n	8006480 <USBD_StdEPReq+0x20a>
 8006466:	18bb      	adds	r3, r7, r2
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	227f      	movs	r2, #127	; 0x7f
 800646c:	401a      	ands	r2, r3
 800646e:	0013      	movs	r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	189b      	adds	r3, r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	3310      	adds	r3, #16
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	18d3      	adds	r3, r2, r3
 800647c:	3304      	adds	r3, #4
 800647e:	e00d      	b.n	800649c <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006480:	230e      	movs	r3, #14
 8006482:	18fb      	adds	r3, r7, r3
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	227f      	movs	r2, #127	; 0x7f
 8006488:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800648a:	0013      	movs	r3, r2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	189b      	adds	r3, r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	3351      	adds	r3, #81	; 0x51
 8006494:	33ff      	adds	r3, #255	; 0xff
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	18d3      	adds	r3, r2, r3
 800649a:	3304      	adds	r3, #4
 800649c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	2200      	movs	r2, #0
 80064a2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80064a4:	68b9      	ldr	r1, [r7, #8]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2202      	movs	r2, #2
 80064aa:	0018      	movs	r0, r3
 80064ac:	f000 fcae 	bl	8006e0c <USBD_CtlSendData>
              break;
 80064b0:	e080      	b.n	80065b4 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80064b2:	220e      	movs	r2, #14
 80064b4:	18bb      	adds	r3, r7, r2
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	b25b      	sxtb	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	da14      	bge.n	80064e8 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80064be:	18bb      	adds	r3, r7, r2
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	220f      	movs	r2, #15
 80064c4:	401a      	ands	r2, r3
 80064c6:	6879      	ldr	r1, [r7, #4]
 80064c8:	0013      	movs	r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	189b      	adds	r3, r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	18cb      	adds	r3, r1, r3
 80064d2:	3318      	adds	r3, #24
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d11e      	bne.n	8006518 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80064da:	683a      	ldr	r2, [r7, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	0011      	movs	r1, r2
 80064e0:	0018      	movs	r0, r3
 80064e2:	f000 fc15 	bl	8006d10 <USBD_CtlError>
                  break;
 80064e6:	e065      	b.n	80065b4 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80064e8:	230e      	movs	r3, #14
 80064ea:	18fb      	adds	r3, r7, r3
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	220f      	movs	r2, #15
 80064f0:	401a      	ands	r2, r3
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	23ac      	movs	r3, #172	; 0xac
 80064f6:	0059      	lsls	r1, r3, #1
 80064f8:	0013      	movs	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	189b      	adds	r3, r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	18c3      	adds	r3, r0, r3
 8006502:	185b      	adds	r3, r3, r1
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d106      	bne.n	8006518 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	0011      	movs	r1, r2
 8006510:	0018      	movs	r0, r3
 8006512:	f000 fbfd 	bl	8006d10 <USBD_CtlError>
                  break;
 8006516:	e04d      	b.n	80065b4 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006518:	220e      	movs	r2, #14
 800651a:	18bb      	adds	r3, r7, r2
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	b25b      	sxtb	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	da0c      	bge.n	800653e <USBD_StdEPReq+0x2c8>
 8006524:	18bb      	adds	r3, r7, r2
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	227f      	movs	r2, #127	; 0x7f
 800652a:	401a      	ands	r2, r3
 800652c:	0013      	movs	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	189b      	adds	r3, r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	3310      	adds	r3, #16
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	18d3      	adds	r3, r2, r3
 800653a:	3304      	adds	r3, #4
 800653c:	e00d      	b.n	800655a <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800653e:	230e      	movs	r3, #14
 8006540:	18fb      	adds	r3, r7, r3
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	227f      	movs	r2, #127	; 0x7f
 8006546:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006548:	0013      	movs	r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	189b      	adds	r3, r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	3351      	adds	r3, #81	; 0x51
 8006552:	33ff      	adds	r3, #255	; 0xff
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	18d3      	adds	r3, r2, r3
 8006558:	3304      	adds	r3, #4
 800655a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800655c:	220e      	movs	r2, #14
 800655e:	18bb      	adds	r3, r7, r2
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <USBD_StdEPReq+0x2f8>
 8006566:	18bb      	adds	r3, r7, r2
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	2b80      	cmp	r3, #128	; 0x80
 800656c:	d103      	bne.n	8006576 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	2200      	movs	r2, #0
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	e010      	b.n	8006598 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006576:	230e      	movs	r3, #14
 8006578:	18fb      	adds	r3, r7, r3
 800657a:	781a      	ldrb	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	0011      	movs	r1, r2
 8006580:	0018      	movs	r0, r3
 8006582:	f001 f816 	bl	80075b2 <USBD_LL_IsStallEP>
 8006586:	1e03      	subs	r3, r0, #0
 8006588:	d003      	beq.n	8006592 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	2201      	movs	r2, #1
 800658e:	601a      	str	r2, [r3, #0]
 8006590:	e002      	b.n	8006598 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	2200      	movs	r2, #0
 8006596:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006598:	68b9      	ldr	r1, [r7, #8]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2202      	movs	r2, #2
 800659e:	0018      	movs	r0, r3
 80065a0:	f000 fc34 	bl	8006e0c <USBD_CtlSendData>
              break;
 80065a4:	e006      	b.n	80065b4 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 80065a6:	683a      	ldr	r2, [r7, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	0011      	movs	r1, r2
 80065ac:	0018      	movs	r0, r3
 80065ae:	f000 fbaf 	bl	8006d10 <USBD_CtlError>
              break;
 80065b2:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80065b4:	e006      	b.n	80065c4 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 80065b6:	683a      	ldr	r2, [r7, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	0011      	movs	r1, r2
 80065bc:	0018      	movs	r0, r3
 80065be:	f000 fba7 	bl	8006d10 <USBD_CtlError>
          break;
 80065c2:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80065c4:	e006      	b.n	80065d4 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 80065c6:	683a      	ldr	r2, [r7, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	0011      	movs	r1, r2
 80065cc:	0018      	movs	r0, r3
 80065ce:	f000 fb9f 	bl	8006d10 <USBD_CtlError>
      break;
 80065d2:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80065d4:	230f      	movs	r3, #15
 80065d6:	18fb      	adds	r3, r7, r3
 80065d8:	781b      	ldrb	r3, [r3, #0]
}
 80065da:	0018      	movs	r0, r3
 80065dc:	46bd      	mov	sp, r7
 80065de:	b004      	add	sp, #16
 80065e0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080065e4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80065ee:	2308      	movs	r3, #8
 80065f0:	18fb      	adds	r3, r7, r3
 80065f2:	2200      	movs	r2, #0
 80065f4:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80065f6:	2300      	movs	r3, #0
 80065f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80065fa:	230b      	movs	r3, #11
 80065fc:	18fb      	adds	r3, r7, r3
 80065fe:	2200      	movs	r2, #0
 8006600:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	885b      	ldrh	r3, [r3, #2]
 8006606:	0a1b      	lsrs	r3, r3, #8
 8006608:	b29b      	uxth	r3, r3
 800660a:	2b07      	cmp	r3, #7
 800660c:	d900      	bls.n	8006610 <USBD_GetDescriptor+0x2c>
 800660e:	e159      	b.n	80068c4 <USBD_GetDescriptor+0x2e0>
 8006610:	009a      	lsls	r2, r3, #2
 8006612:	4bcb      	ldr	r3, [pc, #812]	; (8006940 <USBD_GetDescriptor+0x35c>)
 8006614:	18d3      	adds	r3, r2, r3
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	23ac      	movs	r3, #172	; 0xac
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	58d3      	ldr	r3, [r2, r3]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	7c12      	ldrb	r2, [r2, #16]
 8006628:	2108      	movs	r1, #8
 800662a:	1879      	adds	r1, r7, r1
 800662c:	0010      	movs	r0, r2
 800662e:	4798      	blx	r3
 8006630:	0003      	movs	r3, r0
 8006632:	60fb      	str	r3, [r7, #12]
      break;
 8006634:	e153      	b.n	80068de <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	7c1b      	ldrb	r3, [r3, #16]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10f      	bne.n	800665e <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	23ad      	movs	r3, #173	; 0xad
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	58d3      	ldr	r3, [r2, r3]
 8006646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006648:	2208      	movs	r2, #8
 800664a:	18ba      	adds	r2, r7, r2
 800664c:	0010      	movs	r0, r2
 800664e:	4798      	blx	r3
 8006650:	0003      	movs	r3, r0
 8006652:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	3301      	adds	r3, #1
 8006658:	2202      	movs	r2, #2
 800665a:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800665c:	e13f      	b.n	80068de <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	23ad      	movs	r3, #173	; 0xad
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	58d3      	ldr	r3, [r2, r3]
 8006666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006668:	2208      	movs	r2, #8
 800666a:	18ba      	adds	r2, r7, r2
 800666c:	0010      	movs	r0, r2
 800666e:	4798      	blx	r3
 8006670:	0003      	movs	r3, r0
 8006672:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	3301      	adds	r3, #1
 8006678:	2202      	movs	r2, #2
 800667a:	701a      	strb	r2, [r3, #0]
      break;
 800667c:	e12f      	b.n	80068de <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	885b      	ldrh	r3, [r3, #2]
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b05      	cmp	r3, #5
 8006686:	d900      	bls.n	800668a <USBD_GetDescriptor+0xa6>
 8006688:	e0d0      	b.n	800682c <USBD_GetDescriptor+0x248>
 800668a:	009a      	lsls	r2, r3, #2
 800668c:	4bad      	ldr	r3, [pc, #692]	; (8006944 <USBD_GetDescriptor+0x360>)
 800668e:	18d3      	adds	r3, r2, r3
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	23ac      	movs	r3, #172	; 0xac
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	58d3      	ldr	r3, [r2, r3]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00d      	beq.n	80066be <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	23ac      	movs	r3, #172	; 0xac
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	58d3      	ldr	r3, [r2, r3]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	7c12      	ldrb	r2, [r2, #16]
 80066b0:	2108      	movs	r1, #8
 80066b2:	1879      	adds	r1, r7, r1
 80066b4:	0010      	movs	r0, r2
 80066b6:	4798      	blx	r3
 80066b8:	0003      	movs	r3, r0
 80066ba:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066bc:	e0c3      	b.n	8006846 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80066be:	683a      	ldr	r2, [r7, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	0011      	movs	r1, r2
 80066c4:	0018      	movs	r0, r3
 80066c6:	f000 fb23 	bl	8006d10 <USBD_CtlError>
            err++;
 80066ca:	210b      	movs	r1, #11
 80066cc:	187b      	adds	r3, r7, r1
 80066ce:	781a      	ldrb	r2, [r3, #0]
 80066d0:	187b      	adds	r3, r7, r1
 80066d2:	3201      	adds	r2, #1
 80066d4:	701a      	strb	r2, [r3, #0]
          break;
 80066d6:	e0b6      	b.n	8006846 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	23ac      	movs	r3, #172	; 0xac
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	58d3      	ldr	r3, [r2, r3]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00d      	beq.n	8006702 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	23ac      	movs	r3, #172	; 0xac
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	58d3      	ldr	r3, [r2, r3]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	7c12      	ldrb	r2, [r2, #16]
 80066f4:	2108      	movs	r1, #8
 80066f6:	1879      	adds	r1, r7, r1
 80066f8:	0010      	movs	r0, r2
 80066fa:	4798      	blx	r3
 80066fc:	0003      	movs	r3, r0
 80066fe:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006700:	e0a1      	b.n	8006846 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006702:	683a      	ldr	r2, [r7, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	0011      	movs	r1, r2
 8006708:	0018      	movs	r0, r3
 800670a:	f000 fb01 	bl	8006d10 <USBD_CtlError>
            err++;
 800670e:	210b      	movs	r1, #11
 8006710:	187b      	adds	r3, r7, r1
 8006712:	781a      	ldrb	r2, [r3, #0]
 8006714:	187b      	adds	r3, r7, r1
 8006716:	3201      	adds	r2, #1
 8006718:	701a      	strb	r2, [r3, #0]
          break;
 800671a:	e094      	b.n	8006846 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	23ac      	movs	r3, #172	; 0xac
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	58d3      	ldr	r3, [r2, r3]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00d      	beq.n	8006746 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	23ac      	movs	r3, #172	; 0xac
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	58d3      	ldr	r3, [r2, r3]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	7c12      	ldrb	r2, [r2, #16]
 8006738:	2108      	movs	r1, #8
 800673a:	1879      	adds	r1, r7, r1
 800673c:	0010      	movs	r0, r2
 800673e:	4798      	blx	r3
 8006740:	0003      	movs	r3, r0
 8006742:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006744:	e07f      	b.n	8006846 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	0011      	movs	r1, r2
 800674c:	0018      	movs	r0, r3
 800674e:	f000 fadf 	bl	8006d10 <USBD_CtlError>
            err++;
 8006752:	210b      	movs	r1, #11
 8006754:	187b      	adds	r3, r7, r1
 8006756:	781a      	ldrb	r2, [r3, #0]
 8006758:	187b      	adds	r3, r7, r1
 800675a:	3201      	adds	r2, #1
 800675c:	701a      	strb	r2, [r3, #0]
          break;
 800675e:	e072      	b.n	8006846 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	23ac      	movs	r3, #172	; 0xac
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	58d3      	ldr	r3, [r2, r3]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00d      	beq.n	800678a <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	23ac      	movs	r3, #172	; 0xac
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	58d3      	ldr	r3, [r2, r3]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	7c12      	ldrb	r2, [r2, #16]
 800677c:	2108      	movs	r1, #8
 800677e:	1879      	adds	r1, r7, r1
 8006780:	0010      	movs	r0, r2
 8006782:	4798      	blx	r3
 8006784:	0003      	movs	r3, r0
 8006786:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006788:	e05d      	b.n	8006846 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	0011      	movs	r1, r2
 8006790:	0018      	movs	r0, r3
 8006792:	f000 fabd 	bl	8006d10 <USBD_CtlError>
            err++;
 8006796:	210b      	movs	r1, #11
 8006798:	187b      	adds	r3, r7, r1
 800679a:	781a      	ldrb	r2, [r3, #0]
 800679c:	187b      	adds	r3, r7, r1
 800679e:	3201      	adds	r2, #1
 80067a0:	701a      	strb	r2, [r3, #0]
          break;
 80067a2:	e050      	b.n	8006846 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	23ac      	movs	r3, #172	; 0xac
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	58d3      	ldr	r3, [r2, r3]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00d      	beq.n	80067ce <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	23ac      	movs	r3, #172	; 0xac
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	58d3      	ldr	r3, [r2, r3]
 80067ba:	695b      	ldr	r3, [r3, #20]
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	7c12      	ldrb	r2, [r2, #16]
 80067c0:	2108      	movs	r1, #8
 80067c2:	1879      	adds	r1, r7, r1
 80067c4:	0010      	movs	r0, r2
 80067c6:	4798      	blx	r3
 80067c8:	0003      	movs	r3, r0
 80067ca:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067cc:	e03b      	b.n	8006846 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80067ce:	683a      	ldr	r2, [r7, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	0011      	movs	r1, r2
 80067d4:	0018      	movs	r0, r3
 80067d6:	f000 fa9b 	bl	8006d10 <USBD_CtlError>
            err++;
 80067da:	210b      	movs	r1, #11
 80067dc:	187b      	adds	r3, r7, r1
 80067de:	781a      	ldrb	r2, [r3, #0]
 80067e0:	187b      	adds	r3, r7, r1
 80067e2:	3201      	adds	r2, #1
 80067e4:	701a      	strb	r2, [r3, #0]
          break;
 80067e6:	e02e      	b.n	8006846 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	23ac      	movs	r3, #172	; 0xac
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	58d3      	ldr	r3, [r2, r3]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00d      	beq.n	8006812 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	23ac      	movs	r3, #172	; 0xac
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	58d3      	ldr	r3, [r2, r3]
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	7c12      	ldrb	r2, [r2, #16]
 8006804:	2108      	movs	r1, #8
 8006806:	1879      	adds	r1, r7, r1
 8006808:	0010      	movs	r0, r2
 800680a:	4798      	blx	r3
 800680c:	0003      	movs	r3, r0
 800680e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006810:	e019      	b.n	8006846 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006812:	683a      	ldr	r2, [r7, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	0011      	movs	r1, r2
 8006818:	0018      	movs	r0, r3
 800681a:	f000 fa79 	bl	8006d10 <USBD_CtlError>
            err++;
 800681e:	210b      	movs	r1, #11
 8006820:	187b      	adds	r3, r7, r1
 8006822:	781a      	ldrb	r2, [r3, #0]
 8006824:	187b      	adds	r3, r7, r1
 8006826:	3201      	adds	r2, #1
 8006828:	701a      	strb	r2, [r3, #0]
          break;
 800682a:	e00c      	b.n	8006846 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800682c:	683a      	ldr	r2, [r7, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	0011      	movs	r1, r2
 8006832:	0018      	movs	r0, r3
 8006834:	f000 fa6c 	bl	8006d10 <USBD_CtlError>
          err++;
 8006838:	210b      	movs	r1, #11
 800683a:	187b      	adds	r3, r7, r1
 800683c:	781a      	ldrb	r2, [r3, #0]
 800683e:	187b      	adds	r3, r7, r1
 8006840:	3201      	adds	r2, #1
 8006842:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8006844:	e04b      	b.n	80068de <USBD_GetDescriptor+0x2fa>
 8006846:	e04a      	b.n	80068de <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	7c1b      	ldrb	r3, [r3, #16]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d10b      	bne.n	8006868 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	23ad      	movs	r3, #173	; 0xad
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	58d3      	ldr	r3, [r2, r3]
 8006858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800685a:	2208      	movs	r2, #8
 800685c:	18ba      	adds	r2, r7, r2
 800685e:	0010      	movs	r0, r2
 8006860:	4798      	blx	r3
 8006862:	0003      	movs	r3, r0
 8006864:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006866:	e03a      	b.n	80068de <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	0011      	movs	r1, r2
 800686e:	0018      	movs	r0, r3
 8006870:	f000 fa4e 	bl	8006d10 <USBD_CtlError>
        err++;
 8006874:	210b      	movs	r1, #11
 8006876:	187b      	adds	r3, r7, r1
 8006878:	781a      	ldrb	r2, [r3, #0]
 800687a:	187b      	adds	r3, r7, r1
 800687c:	3201      	adds	r2, #1
 800687e:	701a      	strb	r2, [r3, #0]
      break;
 8006880:	e02d      	b.n	80068de <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	7c1b      	ldrb	r3, [r3, #16]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10f      	bne.n	80068aa <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	23ad      	movs	r3, #173	; 0xad
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	58d3      	ldr	r3, [r2, r3]
 8006892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006894:	2208      	movs	r2, #8
 8006896:	18ba      	adds	r2, r7, r2
 8006898:	0010      	movs	r0, r2
 800689a:	4798      	blx	r3
 800689c:	0003      	movs	r3, r0
 800689e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	3301      	adds	r3, #1
 80068a4:	2207      	movs	r2, #7
 80068a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068a8:	e019      	b.n	80068de <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80068aa:	683a      	ldr	r2, [r7, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	0011      	movs	r1, r2
 80068b0:	0018      	movs	r0, r3
 80068b2:	f000 fa2d 	bl	8006d10 <USBD_CtlError>
        err++;
 80068b6:	210b      	movs	r1, #11
 80068b8:	187b      	adds	r3, r7, r1
 80068ba:	781a      	ldrb	r2, [r3, #0]
 80068bc:	187b      	adds	r3, r7, r1
 80068be:	3201      	adds	r2, #1
 80068c0:	701a      	strb	r2, [r3, #0]
      break;
 80068c2:	e00c      	b.n	80068de <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 80068c4:	683a      	ldr	r2, [r7, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	0011      	movs	r1, r2
 80068ca:	0018      	movs	r0, r3
 80068cc:	f000 fa20 	bl	8006d10 <USBD_CtlError>
      err++;
 80068d0:	210b      	movs	r1, #11
 80068d2:	187b      	adds	r3, r7, r1
 80068d4:	781a      	ldrb	r2, [r3, #0]
 80068d6:	187b      	adds	r3, r7, r1
 80068d8:	3201      	adds	r2, #1
 80068da:	701a      	strb	r2, [r3, #0]
      break;
 80068dc:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 80068de:	230b      	movs	r3, #11
 80068e0:	18fb      	adds	r3, r7, r3
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d127      	bne.n	8006938 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80068e8:	2108      	movs	r1, #8
 80068ea:	187b      	adds	r3, r7, r1
 80068ec:	881b      	ldrh	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d019      	beq.n	8006926 <USBD_GetDescriptor+0x342>
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	88db      	ldrh	r3, [r3, #6]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d015      	beq.n	8006926 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	88da      	ldrh	r2, [r3, #6]
 80068fe:	187b      	adds	r3, r7, r1
 8006900:	881b      	ldrh	r3, [r3, #0]
 8006902:	1c18      	adds	r0, r3, #0
 8006904:	1c11      	adds	r1, r2, #0
 8006906:	b28a      	uxth	r2, r1
 8006908:	b283      	uxth	r3, r0
 800690a:	429a      	cmp	r2, r3
 800690c:	d900      	bls.n	8006910 <USBD_GetDescriptor+0x32c>
 800690e:	1c01      	adds	r1, r0, #0
 8006910:	b28a      	uxth	r2, r1
 8006912:	2108      	movs	r1, #8
 8006914:	187b      	adds	r3, r7, r1
 8006916:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006918:	187b      	adds	r3, r7, r1
 800691a:	881a      	ldrh	r2, [r3, #0]
 800691c:	68f9      	ldr	r1, [r7, #12]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	0018      	movs	r0, r3
 8006922:	f000 fa73 	bl	8006e0c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	88db      	ldrh	r3, [r3, #6]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d105      	bne.n	800693a <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	0018      	movs	r0, r3
 8006932:	f000 fab1 	bl	8006e98 <USBD_CtlSendStatus>
 8006936:	e000      	b.n	800693a <USBD_GetDescriptor+0x356>
    return;
 8006938:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800693a:	46bd      	mov	sp, r7
 800693c:	b004      	add	sp, #16
 800693e:	bd80      	pop	{r7, pc}
 8006940:	080078f0 	.word	0x080078f0
 8006944:	08007910 	.word	0x08007910

08006948 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006948:	b590      	push	{r4, r7, lr}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	889b      	ldrh	r3, [r3, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d13d      	bne.n	80069d6 <USBD_SetAddress+0x8e>
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	88db      	ldrh	r3, [r3, #6]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d139      	bne.n	80069d6 <USBD_SetAddress+0x8e>
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	885b      	ldrh	r3, [r3, #2]
 8006966:	2b7f      	cmp	r3, #127	; 0x7f
 8006968:	d835      	bhi.n	80069d6 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	885b      	ldrh	r3, [r3, #2]
 800696e:	b2da      	uxtb	r2, r3
 8006970:	230f      	movs	r3, #15
 8006972:	18fb      	adds	r3, r7, r3
 8006974:	217f      	movs	r1, #127	; 0x7f
 8006976:	400a      	ands	r2, r1
 8006978:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	23a7      	movs	r3, #167	; 0xa7
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	5cd3      	ldrb	r3, [r2, r3]
 8006982:	2b03      	cmp	r3, #3
 8006984:	d106      	bne.n	8006994 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	0011      	movs	r1, r2
 800698c:	0018      	movs	r0, r3
 800698e:	f000 f9bf 	bl	8006d10 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006992:	e027      	b.n	80069e4 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	240f      	movs	r4, #15
 8006998:	193a      	adds	r2, r7, r4
 800699a:	4914      	ldr	r1, [pc, #80]	; (80069ec <USBD_SetAddress+0xa4>)
 800699c:	7812      	ldrb	r2, [r2, #0]
 800699e:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80069a0:	193b      	adds	r3, r7, r4
 80069a2:	781a      	ldrb	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	0011      	movs	r1, r2
 80069a8:	0018      	movs	r0, r3
 80069aa:	f000 fe33 	bl	8007614 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	0018      	movs	r0, r3
 80069b2:	f000 fa71 	bl	8006e98 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80069b6:	193b      	adds	r3, r7, r4
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d005      	beq.n	80069ca <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	23a7      	movs	r3, #167	; 0xa7
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	2102      	movs	r1, #2
 80069c6:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069c8:	e00c      	b.n	80069e4 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	23a7      	movs	r3, #167	; 0xa7
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	2101      	movs	r1, #1
 80069d2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069d4:	e006      	b.n	80069e4 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80069d6:	683a      	ldr	r2, [r7, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	0011      	movs	r1, r2
 80069dc:	0018      	movs	r0, r3
 80069de:	f000 f997 	bl	8006d10 <USBD_CtlError>
  }
}
 80069e2:	46c0      	nop			; (mov r8, r8)
 80069e4:	46c0      	nop			; (mov r8, r8)
 80069e6:	46bd      	mov	sp, r7
 80069e8:	b005      	add	sp, #20
 80069ea:	bd90      	pop	{r4, r7, pc}
 80069ec:	0000029e 	.word	0x0000029e

080069f0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	885b      	ldrh	r3, [r3, #2]
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	4b4c      	ldr	r3, [pc, #304]	; (8006b34 <USBD_SetConfig+0x144>)
 8006a02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006a04:	4b4b      	ldr	r3, [pc, #300]	; (8006b34 <USBD_SetConfig+0x144>)
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d906      	bls.n	8006a1a <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8006a0c:	683a      	ldr	r2, [r7, #0]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	0011      	movs	r1, r2
 8006a12:	0018      	movs	r0, r3
 8006a14:	f000 f97c 	bl	8006d10 <USBD_CtlError>
 8006a18:	e088      	b.n	8006b2c <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	23a7      	movs	r3, #167	; 0xa7
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	5cd3      	ldrb	r3, [r2, r3]
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d002      	beq.n	8006a2c <USBD_SetConfig+0x3c>
 8006a26:	2b03      	cmp	r3, #3
 8006a28:	d029      	beq.n	8006a7e <USBD_SetConfig+0x8e>
 8006a2a:	e071      	b.n	8006b10 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006a2c:	4b41      	ldr	r3, [pc, #260]	; (8006b34 <USBD_SetConfig+0x144>)
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d01f      	beq.n	8006a74 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8006a34:	4b3f      	ldr	r3, [pc, #252]	; (8006b34 <USBD_SetConfig+0x144>)
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	001a      	movs	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	23a7      	movs	r3, #167	; 0xa7
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	2103      	movs	r1, #3
 8006a46:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006a48:	4b3a      	ldr	r3, [pc, #232]	; (8006b34 <USBD_SetConfig+0x144>)
 8006a4a:	781a      	ldrb	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	0011      	movs	r1, r2
 8006a50:	0018      	movs	r0, r3
 8006a52:	f7ff f8c6 	bl	8005be2 <USBD_SetClassConfig>
 8006a56:	0003      	movs	r3, r0
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d106      	bne.n	8006a6a <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8006a5c:	683a      	ldr	r2, [r7, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	0011      	movs	r1, r2
 8006a62:	0018      	movs	r0, r3
 8006a64:	f000 f954 	bl	8006d10 <USBD_CtlError>
            return;
 8006a68:	e060      	b.n	8006b2c <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	0018      	movs	r0, r3
 8006a6e:	f000 fa13 	bl	8006e98 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006a72:	e05b      	b.n	8006b2c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	0018      	movs	r0, r3
 8006a78:	f000 fa0e 	bl	8006e98 <USBD_CtlSendStatus>
        break;
 8006a7c:	e056      	b.n	8006b2c <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006a7e:	4b2d      	ldr	r3, [pc, #180]	; (8006b34 <USBD_SetConfig+0x144>)
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d115      	bne.n	8006ab2 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	23a7      	movs	r3, #167	; 0xa7
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	2102      	movs	r1, #2
 8006a8e:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8006a90:	4b28      	ldr	r3, [pc, #160]	; (8006b34 <USBD_SetConfig+0x144>)
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	001a      	movs	r2, r3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006a9a:	4b26      	ldr	r3, [pc, #152]	; (8006b34 <USBD_SetConfig+0x144>)
 8006a9c:	781a      	ldrb	r2, [r3, #0]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	0011      	movs	r1, r2
 8006aa2:	0018      	movs	r0, r3
 8006aa4:	f7ff f8c4 	bl	8005c30 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	0018      	movs	r0, r3
 8006aac:	f000 f9f4 	bl	8006e98 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006ab0:	e03c      	b.n	8006b2c <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8006ab2:	4b20      	ldr	r3, [pc, #128]	; (8006b34 <USBD_SetConfig+0x144>)
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	001a      	movs	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d022      	beq.n	8006b06 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	b2da      	uxtb	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	0011      	movs	r1, r2
 8006aca:	0018      	movs	r0, r3
 8006acc:	f7ff f8b0 	bl	8005c30 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006ad0:	4b18      	ldr	r3, [pc, #96]	; (8006b34 <USBD_SetConfig+0x144>)
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	001a      	movs	r2, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006ada:	4b16      	ldr	r3, [pc, #88]	; (8006b34 <USBD_SetConfig+0x144>)
 8006adc:	781a      	ldrb	r2, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	0011      	movs	r1, r2
 8006ae2:	0018      	movs	r0, r3
 8006ae4:	f7ff f87d 	bl	8005be2 <USBD_SetClassConfig>
 8006ae8:	0003      	movs	r3, r0
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d106      	bne.n	8006afc <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	0011      	movs	r1, r2
 8006af4:	0018      	movs	r0, r3
 8006af6:	f000 f90b 	bl	8006d10 <USBD_CtlError>
            return;
 8006afa:	e017      	b.n	8006b2c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	0018      	movs	r0, r3
 8006b00:	f000 f9ca 	bl	8006e98 <USBD_CtlSendStatus>
        break;
 8006b04:	e012      	b.n	8006b2c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	0018      	movs	r0, r3
 8006b0a:	f000 f9c5 	bl	8006e98 <USBD_CtlSendStatus>
        break;
 8006b0e:	e00d      	b.n	8006b2c <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8006b10:	683a      	ldr	r2, [r7, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	0011      	movs	r1, r2
 8006b16:	0018      	movs	r0, r3
 8006b18:	f000 f8fa 	bl	8006d10 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006b1c:	4b05      	ldr	r3, [pc, #20]	; (8006b34 <USBD_SetConfig+0x144>)
 8006b1e:	781a      	ldrb	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	0011      	movs	r1, r2
 8006b24:	0018      	movs	r0, r3
 8006b26:	f7ff f883 	bl	8005c30 <USBD_ClrClassConfig>
        break;
 8006b2a:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	b002      	add	sp, #8
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	46c0      	nop			; (mov r8, r8)
 8006b34:	200001e4 	.word	0x200001e4

08006b38 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	88db      	ldrh	r3, [r3, #6]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d006      	beq.n	8006b58 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8006b4a:	683a      	ldr	r2, [r7, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	0011      	movs	r1, r2
 8006b50:	0018      	movs	r0, r3
 8006b52:	f000 f8dd 	bl	8006d10 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006b56:	e026      	b.n	8006ba6 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	23a7      	movs	r3, #167	; 0xa7
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	5cd3      	ldrb	r3, [r2, r3]
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	dc02      	bgt.n	8006b6a <USBD_GetConfig+0x32>
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	dc03      	bgt.n	8006b70 <USBD_GetConfig+0x38>
 8006b68:	e016      	b.n	8006b98 <USBD_GetConfig+0x60>
 8006b6a:	2b03      	cmp	r3, #3
 8006b6c:	d00c      	beq.n	8006b88 <USBD_GetConfig+0x50>
 8006b6e:	e013      	b.n	8006b98 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	3308      	adds	r3, #8
 8006b7a:	0019      	movs	r1, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	0018      	movs	r0, r3
 8006b82:	f000 f943 	bl	8006e0c <USBD_CtlSendData>
        break;
 8006b86:	e00e      	b.n	8006ba6 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	1d19      	adds	r1, r3, #4
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	0018      	movs	r0, r3
 8006b92:	f000 f93b 	bl	8006e0c <USBD_CtlSendData>
        break;
 8006b96:	e006      	b.n	8006ba6 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8006b98:	683a      	ldr	r2, [r7, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	0011      	movs	r1, r2
 8006b9e:	0018      	movs	r0, r3
 8006ba0:	f000 f8b6 	bl	8006d10 <USBD_CtlError>
        break;
 8006ba4:	46c0      	nop			; (mov r8, r8)
}
 8006ba6:	46c0      	nop			; (mov r8, r8)
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	b002      	add	sp, #8
 8006bac:	bd80      	pop	{r7, pc}

08006bae <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b082      	sub	sp, #8
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	23a7      	movs	r3, #167	; 0xa7
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	5cd3      	ldrb	r3, [r2, r3]
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d822      	bhi.n	8006c0c <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	88db      	ldrh	r3, [r3, #6]
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d006      	beq.n	8006bdc <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8006bce:	683a      	ldr	r2, [r7, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	0011      	movs	r1, r2
 8006bd4:	0018      	movs	r0, r3
 8006bd6:	f000 f89b 	bl	8006d10 <USBD_CtlError>
        break;
 8006bda:	e01e      	b.n	8006c1a <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	23a9      	movs	r3, #169	; 0xa9
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	58d3      	ldr	r3, [r2, r3]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d005      	beq.n	8006bfa <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	330c      	adds	r3, #12
 8006bfe:	0019      	movs	r1, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2202      	movs	r2, #2
 8006c04:	0018      	movs	r0, r3
 8006c06:	f000 f901 	bl	8006e0c <USBD_CtlSendData>
      break;
 8006c0a:	e006      	b.n	8006c1a <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8006c0c:	683a      	ldr	r2, [r7, #0]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	0011      	movs	r1, r2
 8006c12:	0018      	movs	r0, r3
 8006c14:	f000 f87c 	bl	8006d10 <USBD_CtlError>
      break;
 8006c18:	46c0      	nop			; (mov r8, r8)
  }
}
 8006c1a:	46c0      	nop			; (mov r8, r8)
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	b002      	add	sp, #8
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b082      	sub	sp, #8
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	885b      	ldrh	r3, [r3, #2]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d108      	bne.n	8006c46 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	23a9      	movs	r3, #169	; 0xa9
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	2101      	movs	r1, #1
 8006c3c:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	0018      	movs	r0, r3
 8006c42:	f000 f929 	bl	8006e98 <USBD_CtlSendStatus>
  }
}
 8006c46:	46c0      	nop			; (mov r8, r8)
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	b002      	add	sp, #8
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b082      	sub	sp, #8
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
 8006c56:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	23a7      	movs	r3, #167	; 0xa7
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	5cd3      	ldrb	r3, [r2, r3]
 8006c60:	3b01      	subs	r3, #1
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d80d      	bhi.n	8006c82 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	885b      	ldrh	r3, [r3, #2]
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d110      	bne.n	8006c90 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	23a9      	movs	r3, #169	; 0xa9
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	2100      	movs	r1, #0
 8006c76:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	0018      	movs	r0, r3
 8006c7c:	f000 f90c 	bl	8006e98 <USBD_CtlSendStatus>
      }
      break;
 8006c80:	e006      	b.n	8006c90 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	0011      	movs	r1, r2
 8006c88:	0018      	movs	r0, r3
 8006c8a:	f000 f841 	bl	8006d10 <USBD_CtlError>
      break;
 8006c8e:	e000      	b.n	8006c92 <USBD_ClrFeature+0x44>
      break;
 8006c90:	46c0      	nop			; (mov r8, r8)
  }
}
 8006c92:	46c0      	nop			; (mov r8, r8)
 8006c94:	46bd      	mov	sp, r7
 8006c96:	b002      	add	sp, #8
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b082      	sub	sp, #8
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
 8006ca2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	781a      	ldrb	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	785a      	ldrb	r2, [r3, #1]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	3302      	adds	r3, #2
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	3303      	adds	r3, #3
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	021b      	lsls	r3, r3, #8
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	18d3      	adds	r3, r2, r3
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	3304      	adds	r3, #4
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	b29a      	uxth	r2, r3
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	3305      	adds	r3, #5
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	021b      	lsls	r3, r3, #8
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	18d3      	adds	r3, r2, r3
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	3306      	adds	r3, #6
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	b29a      	uxth	r2, r3
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	3307      	adds	r3, #7
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	021b      	lsls	r3, r3, #8
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	18d3      	adds	r3, r2, r3
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	80da      	strh	r2, [r3, #6]

}
 8006d08:	46c0      	nop			; (mov r8, r8)
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	b002      	add	sp, #8
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2180      	movs	r1, #128	; 0x80
 8006d1e:	0018      	movs	r0, r3
 8006d20:	f000 fbf1 	bl	8007506 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2100      	movs	r1, #0
 8006d28:	0018      	movs	r0, r3
 8006d2a:	f000 fbec 	bl	8007506 <USBD_LL_StallEP>
}
 8006d2e:	46c0      	nop			; (mov r8, r8)
 8006d30:	46bd      	mov	sp, r7
 8006d32:	b002      	add	sp, #8
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006d36:	b590      	push	{r4, r7, lr}
 8006d38:	b087      	sub	sp, #28
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	60f8      	str	r0, [r7, #12]
 8006d3e:	60b9      	str	r1, [r7, #8]
 8006d40:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006d42:	2417      	movs	r4, #23
 8006d44:	193b      	adds	r3, r7, r4
 8006d46:	2200      	movs	r2, #0
 8006d48:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d03c      	beq.n	8006dca <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	0018      	movs	r0, r3
 8006d54:	f000 f83d 	bl	8006dd2 <USBD_GetLen>
 8006d58:	0003      	movs	r3, r0
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	18db      	adds	r3, r3, r3
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006d66:	193b      	adds	r3, r7, r4
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	193a      	adds	r2, r7, r4
 8006d6c:	1c59      	adds	r1, r3, #1
 8006d6e:	7011      	strb	r1, [r2, #0]
 8006d70:	001a      	movs	r2, r3
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	189b      	adds	r3, r3, r2
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	7812      	ldrb	r2, [r2, #0]
 8006d7a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006d7c:	193b      	adds	r3, r7, r4
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	193a      	adds	r2, r7, r4
 8006d82:	1c59      	adds	r1, r3, #1
 8006d84:	7011      	strb	r1, [r2, #0]
 8006d86:	001a      	movs	r2, r3
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	189b      	adds	r3, r3, r2
 8006d8c:	2203      	movs	r2, #3
 8006d8e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006d90:	e017      	b.n	8006dc2 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	1c5a      	adds	r2, r3, #1
 8006d96:	60fa      	str	r2, [r7, #12]
 8006d98:	2417      	movs	r4, #23
 8006d9a:	193a      	adds	r2, r7, r4
 8006d9c:	7812      	ldrb	r2, [r2, #0]
 8006d9e:	1939      	adds	r1, r7, r4
 8006da0:	1c50      	adds	r0, r2, #1
 8006da2:	7008      	strb	r0, [r1, #0]
 8006da4:	0011      	movs	r1, r2
 8006da6:	68ba      	ldr	r2, [r7, #8]
 8006da8:	1852      	adds	r2, r2, r1
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006dae:	193b      	adds	r3, r7, r4
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	193a      	adds	r2, r7, r4
 8006db4:	1c59      	adds	r1, r3, #1
 8006db6:	7011      	strb	r1, [r2, #0]
 8006db8:	001a      	movs	r2, r3
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	189b      	adds	r3, r3, r2
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1e3      	bne.n	8006d92 <USBD_GetString+0x5c>
    }
  }
}
 8006dca:	46c0      	nop			; (mov r8, r8)
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	b007      	add	sp, #28
 8006dd0:	bd90      	pop	{r4, r7, pc}

08006dd2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b084      	sub	sp, #16
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006dda:	230f      	movs	r3, #15
 8006ddc:	18fb      	adds	r3, r7, r3
 8006dde:	2200      	movs	r2, #0
 8006de0:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8006de2:	e008      	b.n	8006df6 <USBD_GetLen+0x24>
  {
    len++;
 8006de4:	210f      	movs	r1, #15
 8006de6:	187b      	adds	r3, r7, r1
 8006de8:	781a      	ldrb	r2, [r3, #0]
 8006dea:	187b      	adds	r3, r7, r1
 8006dec:	3201      	adds	r2, #1
 8006dee:	701a      	strb	r2, [r3, #0]
    buf++;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	3301      	adds	r3, #1
 8006df4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1f2      	bne.n	8006de4 <USBD_GetLen+0x12>
  }

  return len;
 8006dfe:	230f      	movs	r3, #15
 8006e00:	18fb      	adds	r3, r7, r3
 8006e02:	781b      	ldrb	r3, [r3, #0]
}
 8006e04:	0018      	movs	r0, r3
 8006e06:	46bd      	mov	sp, r7
 8006e08:	b004      	add	sp, #16
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	1dbb      	adds	r3, r7, #6
 8006e18:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	23a5      	movs	r3, #165	; 0xa5
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	2102      	movs	r1, #2
 8006e22:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8006e24:	1dbb      	adds	r3, r7, #6
 8006e26:	881a      	ldrh	r2, [r3, #0]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006e2c:	1dbb      	adds	r3, r7, #6
 8006e2e:	881a      	ldrh	r2, [r3, #0]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e34:	1dbb      	adds	r3, r7, #6
 8006e36:	881b      	ldrh	r3, [r3, #0]
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	f000 fc14 	bl	800766a <USBD_LL_Transmit>

  return USBD_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	0018      	movs	r0, r3
 8006e46:	46bd      	mov	sp, r7
 8006e48:	b004      	add	sp, #16
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	1dbb      	adds	r3, r7, #6
 8006e58:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e5a:	1dbb      	adds	r3, r7, #6
 8006e5c:	881b      	ldrh	r3, [r3, #0]
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	2100      	movs	r1, #0
 8006e64:	f000 fc01 	bl	800766a <USBD_LL_Transmit>

  return USBD_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	0018      	movs	r0, r3
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	b004      	add	sp, #16
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b084      	sub	sp, #16
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	60f8      	str	r0, [r7, #12]
 8006e7a:	60b9      	str	r1, [r7, #8]
 8006e7c:	1dbb      	adds	r3, r7, #6
 8006e7e:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e80:	1dbb      	adds	r3, r7, #6
 8006e82:	881b      	ldrh	r3, [r3, #0]
 8006e84:	68ba      	ldr	r2, [r7, #8]
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	2100      	movs	r1, #0
 8006e8a:	f000 fc25 	bl	80076d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	0018      	movs	r0, r3
 8006e92:	46bd      	mov	sp, r7
 8006e94:	b004      	add	sp, #16
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	23a5      	movs	r3, #165	; 0xa5
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	2104      	movs	r1, #4
 8006ea8:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	2300      	movs	r3, #0
 8006eae:	2200      	movs	r2, #0
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	f000 fbda 	bl	800766a <USBD_LL_Transmit>

  return USBD_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	0018      	movs	r0, r3
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	b002      	add	sp, #8
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	23a5      	movs	r3, #165	; 0xa5
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	2105      	movs	r1, #5
 8006ed0:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	2100      	movs	r1, #0
 8006eda:	f000 fbfd 	bl	80076d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	0018      	movs	r0, r3
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	b002      	add	sp, #8
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006eec:	490f      	ldr	r1, [pc, #60]	; (8006f2c <MX_USB_DEVICE_Init+0x44>)
 8006eee:	4b10      	ldr	r3, [pc, #64]	; (8006f30 <MX_USB_DEVICE_Init+0x48>)
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	0018      	movs	r0, r3
 8006ef4:	f7fe fe0e 	bl	8005b14 <USBD_Init>
 8006ef8:	1e03      	subs	r3, r0, #0
 8006efa:	d001      	beq.n	8006f00 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006efc:	f7f9 fc1e 	bl	800073c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006f00:	4a0c      	ldr	r2, [pc, #48]	; (8006f34 <MX_USB_DEVICE_Init+0x4c>)
 8006f02:	4b0b      	ldr	r3, [pc, #44]	; (8006f30 <MX_USB_DEVICE_Init+0x48>)
 8006f04:	0011      	movs	r1, r2
 8006f06:	0018      	movs	r0, r3
 8006f08:	f7fe fe35 	bl	8005b76 <USBD_RegisterClass>
 8006f0c:	1e03      	subs	r3, r0, #0
 8006f0e:	d001      	beq.n	8006f14 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8006f10:	f7f9 fc14 	bl	800073c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006f14:	4b06      	ldr	r3, [pc, #24]	; (8006f30 <MX_USB_DEVICE_Init+0x48>)
 8006f16:	0018      	movs	r0, r3
 8006f18:	f7fe fe4d 	bl	8005bb6 <USBD_Start>
 8006f1c:	1e03      	subs	r3, r0, #0
 8006f1e:	d001      	beq.n	8006f24 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006f20:	f7f9 fc0c 	bl	800073c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006f24:	46c0      	nop			; (mov r8, r8)
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	46c0      	nop			; (mov r8, r8)
 8006f2c:	20000108 	.word	0x20000108
 8006f30:	200001e8 	.word	0x200001e8
 8006f34:	2000000c 	.word	0x2000000c

08006f38 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	0002      	movs	r2, r0
 8006f40:	6039      	str	r1, [r7, #0]
 8006f42:	1dfb      	adds	r3, r7, #7
 8006f44:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	2212      	movs	r2, #18
 8006f4a:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006f4c:	4b02      	ldr	r3, [pc, #8]	; (8006f58 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006f4e:	0018      	movs	r0, r3
 8006f50:	46bd      	mov	sp, r7
 8006f52:	b002      	add	sp, #8
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	46c0      	nop			; (mov r8, r8)
 8006f58:	20000124 	.word	0x20000124

08006f5c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	0002      	movs	r2, r0
 8006f64:	6039      	str	r1, [r7, #0]
 8006f66:	1dfb      	adds	r3, r7, #7
 8006f68:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	2204      	movs	r2, #4
 8006f6e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006f70:	4b02      	ldr	r3, [pc, #8]	; (8006f7c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006f72:	0018      	movs	r0, r3
 8006f74:	46bd      	mov	sp, r7
 8006f76:	b002      	add	sp, #8
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	46c0      	nop			; (mov r8, r8)
 8006f7c:	20000138 	.word	0x20000138

08006f80 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	0002      	movs	r2, r0
 8006f88:	6039      	str	r1, [r7, #0]
 8006f8a:	1dfb      	adds	r3, r7, #7
 8006f8c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8006f8e:	1dfb      	adds	r3, r7, #7
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d106      	bne.n	8006fa4 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	4908      	ldr	r1, [pc, #32]	; (8006fbc <USBD_FS_ProductStrDescriptor+0x3c>)
 8006f9a:	4b09      	ldr	r3, [pc, #36]	; (8006fc0 <USBD_FS_ProductStrDescriptor+0x40>)
 8006f9c:	0018      	movs	r0, r3
 8006f9e:	f7ff feca 	bl	8006d36 <USBD_GetString>
 8006fa2:	e005      	b.n	8006fb0 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006fa4:	683a      	ldr	r2, [r7, #0]
 8006fa6:	4905      	ldr	r1, [pc, #20]	; (8006fbc <USBD_FS_ProductStrDescriptor+0x3c>)
 8006fa8:	4b05      	ldr	r3, [pc, #20]	; (8006fc0 <USBD_FS_ProductStrDescriptor+0x40>)
 8006faa:	0018      	movs	r0, r3
 8006fac:	f7ff fec3 	bl	8006d36 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006fb0:	4b02      	ldr	r3, [pc, #8]	; (8006fbc <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8006fb2:	0018      	movs	r0, r3
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	b002      	add	sp, #8
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	46c0      	nop			; (mov r8, r8)
 8006fbc:	200004ac 	.word	0x200004ac
 8006fc0:	08007870 	.word	0x08007870

08006fc4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	0002      	movs	r2, r0
 8006fcc:	6039      	str	r1, [r7, #0]
 8006fce:	1dfb      	adds	r3, r7, #7
 8006fd0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006fd2:	683a      	ldr	r2, [r7, #0]
 8006fd4:	4904      	ldr	r1, [pc, #16]	; (8006fe8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006fd6:	4b05      	ldr	r3, [pc, #20]	; (8006fec <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8006fd8:	0018      	movs	r0, r3
 8006fda:	f7ff feac 	bl	8006d36 <USBD_GetString>
  return USBD_StrDesc;
 8006fde:	4b02      	ldr	r3, [pc, #8]	; (8006fe8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8006fe0:	0018      	movs	r0, r3
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	b002      	add	sp, #8
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	200004ac 	.word	0x200004ac
 8006fec:	0800787c 	.word	0x0800787c

08006ff0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	0002      	movs	r2, r0
 8006ff8:	6039      	str	r1, [r7, #0]
 8006ffa:	1dfb      	adds	r3, r7, #7
 8006ffc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	221a      	movs	r2, #26
 8007002:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007004:	f000 f84c 	bl	80070a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007008:	4b02      	ldr	r3, [pc, #8]	; (8007014 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800700a:	0018      	movs	r0, r3
 800700c:	46bd      	mov	sp, r7
 800700e:	b002      	add	sp, #8
 8007010:	bd80      	pop	{r7, pc}
 8007012:	46c0      	nop			; (mov r8, r8)
 8007014:	2000013c 	.word	0x2000013c

08007018 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	0002      	movs	r2, r0
 8007020:	6039      	str	r1, [r7, #0]
 8007022:	1dfb      	adds	r3, r7, #7
 8007024:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8007026:	1dfb      	adds	r3, r7, #7
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d106      	bne.n	800703c <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800702e:	683a      	ldr	r2, [r7, #0]
 8007030:	4908      	ldr	r1, [pc, #32]	; (8007054 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8007032:	4b09      	ldr	r3, [pc, #36]	; (8007058 <USBD_FS_ConfigStrDescriptor+0x40>)
 8007034:	0018      	movs	r0, r3
 8007036:	f7ff fe7e 	bl	8006d36 <USBD_GetString>
 800703a:	e005      	b.n	8007048 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800703c:	683a      	ldr	r2, [r7, #0]
 800703e:	4905      	ldr	r1, [pc, #20]	; (8007054 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8007040:	4b05      	ldr	r3, [pc, #20]	; (8007058 <USBD_FS_ConfigStrDescriptor+0x40>)
 8007042:	0018      	movs	r0, r3
 8007044:	f7ff fe77 	bl	8006d36 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007048:	4b02      	ldr	r3, [pc, #8]	; (8007054 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800704a:	0018      	movs	r0, r3
 800704c:	46bd      	mov	sp, r7
 800704e:	b002      	add	sp, #8
 8007050:	bd80      	pop	{r7, pc}
 8007052:	46c0      	nop			; (mov r8, r8)
 8007054:	200004ac 	.word	0x200004ac
 8007058:	08007890 	.word	0x08007890

0800705c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	0002      	movs	r2, r0
 8007064:	6039      	str	r1, [r7, #0]
 8007066:	1dfb      	adds	r3, r7, #7
 8007068:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800706a:	1dfb      	adds	r3, r7, #7
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d106      	bne.n	8007080 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007072:	683a      	ldr	r2, [r7, #0]
 8007074:	4908      	ldr	r1, [pc, #32]	; (8007098 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8007076:	4b09      	ldr	r3, [pc, #36]	; (800709c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8007078:	0018      	movs	r0, r3
 800707a:	f7ff fe5c 	bl	8006d36 <USBD_GetString>
 800707e:	e005      	b.n	800708c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007080:	683a      	ldr	r2, [r7, #0]
 8007082:	4905      	ldr	r1, [pc, #20]	; (8007098 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8007084:	4b05      	ldr	r3, [pc, #20]	; (800709c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8007086:	0018      	movs	r0, r3
 8007088:	f7ff fe55 	bl	8006d36 <USBD_GetString>
  }
  return USBD_StrDesc;
 800708c:	4b02      	ldr	r3, [pc, #8]	; (8007098 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800708e:	0018      	movs	r0, r3
 8007090:	46bd      	mov	sp, r7
 8007092:	b002      	add	sp, #8
 8007094:	bd80      	pop	{r7, pc}
 8007096:	46c0      	nop			; (mov r8, r8)
 8007098:	200004ac 	.word	0x200004ac
 800709c:	0800789c 	.word	0x0800789c

080070a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80070a6:	4b10      	ldr	r3, [pc, #64]	; (80070e8 <Get_SerialNum+0x48>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80070ac:	4b0f      	ldr	r3, [pc, #60]	; (80070ec <Get_SerialNum+0x4c>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80070b2:	4b0f      	ldr	r3, [pc, #60]	; (80070f0 <Get_SerialNum+0x50>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	18d3      	adds	r3, r2, r3
 80070be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00b      	beq.n	80070de <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80070c6:	490b      	ldr	r1, [pc, #44]	; (80070f4 <Get_SerialNum+0x54>)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2208      	movs	r2, #8
 80070cc:	0018      	movs	r0, r3
 80070ce:	f000 f815 	bl	80070fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80070d2:	4909      	ldr	r1, [pc, #36]	; (80070f8 <Get_SerialNum+0x58>)
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	2204      	movs	r2, #4
 80070d8:	0018      	movs	r0, r3
 80070da:	f000 f80f 	bl	80070fc <IntToUnicode>
  }
}
 80070de:	46c0      	nop			; (mov r8, r8)
 80070e0:	46bd      	mov	sp, r7
 80070e2:	b004      	add	sp, #16
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	46c0      	nop			; (mov r8, r8)
 80070e8:	1ff80050 	.word	0x1ff80050
 80070ec:	1ff80054 	.word	0x1ff80054
 80070f0:	1ff80058 	.word	0x1ff80058
 80070f4:	2000013e 	.word	0x2000013e
 80070f8:	2000014e 	.word	0x2000014e

080070fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b086      	sub	sp, #24
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	1dfb      	adds	r3, r7, #7
 8007108:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800710a:	2117      	movs	r1, #23
 800710c:	187b      	adds	r3, r7, r1
 800710e:	2200      	movs	r2, #0
 8007110:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8007112:	187b      	adds	r3, r7, r1
 8007114:	2200      	movs	r2, #0
 8007116:	701a      	strb	r2, [r3, #0]
 8007118:	e02f      	b.n	800717a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	0f1b      	lsrs	r3, r3, #28
 800711e:	2b09      	cmp	r3, #9
 8007120:	d80d      	bhi.n	800713e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	0f1b      	lsrs	r3, r3, #28
 8007126:	b2da      	uxtb	r2, r3
 8007128:	2317      	movs	r3, #23
 800712a:	18fb      	adds	r3, r7, r3
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	005b      	lsls	r3, r3, #1
 8007130:	0019      	movs	r1, r3
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	185b      	adds	r3, r3, r1
 8007136:	3230      	adds	r2, #48	; 0x30
 8007138:	b2d2      	uxtb	r2, r2
 800713a:	701a      	strb	r2, [r3, #0]
 800713c:	e00c      	b.n	8007158 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	0f1b      	lsrs	r3, r3, #28
 8007142:	b2da      	uxtb	r2, r3
 8007144:	2317      	movs	r3, #23
 8007146:	18fb      	adds	r3, r7, r3
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	005b      	lsls	r3, r3, #1
 800714c:	0019      	movs	r1, r3
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	185b      	adds	r3, r3, r1
 8007152:	3237      	adds	r2, #55	; 0x37
 8007154:	b2d2      	uxtb	r2, r2
 8007156:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	011b      	lsls	r3, r3, #4
 800715c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800715e:	2117      	movs	r1, #23
 8007160:	187b      	adds	r3, r7, r1
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	005b      	lsls	r3, r3, #1
 8007166:	3301      	adds	r3, #1
 8007168:	68ba      	ldr	r2, [r7, #8]
 800716a:	18d3      	adds	r3, r2, r3
 800716c:	2200      	movs	r2, #0
 800716e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007170:	187b      	adds	r3, r7, r1
 8007172:	781a      	ldrb	r2, [r3, #0]
 8007174:	187b      	adds	r3, r7, r1
 8007176:	3201      	adds	r2, #1
 8007178:	701a      	strb	r2, [r3, #0]
 800717a:	2317      	movs	r3, #23
 800717c:	18fa      	adds	r2, r7, r3
 800717e:	1dfb      	adds	r3, r7, #7
 8007180:	7812      	ldrb	r2, [r2, #0]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	429a      	cmp	r2, r3
 8007186:	d3c8      	bcc.n	800711a <IntToUnicode+0x1e>
  }
}
 8007188:	46c0      	nop			; (mov r8, r8)
 800718a:	46c0      	nop			; (mov r8, r8)
 800718c:	46bd      	mov	sp, r7
 800718e:	b006      	add	sp, #24
 8007190:	bd80      	pop	{r7, pc}
	...

08007194 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a0a      	ldr	r2, [pc, #40]	; (80071cc <HAL_PCD_MspInit+0x38>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d10e      	bne.n	80071c4 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80071a6:	4b0a      	ldr	r3, [pc, #40]	; (80071d0 <HAL_PCD_MspInit+0x3c>)
 80071a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071aa:	4b09      	ldr	r3, [pc, #36]	; (80071d0 <HAL_PCD_MspInit+0x3c>)
 80071ac:	2180      	movs	r1, #128	; 0x80
 80071ae:	0409      	lsls	r1, r1, #16
 80071b0:	430a      	orrs	r2, r1
 80071b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80071b4:	2200      	movs	r2, #0
 80071b6:	2100      	movs	r1, #0
 80071b8:	201f      	movs	r0, #31
 80071ba:	f7f9 fc6d 	bl	8000a98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80071be:	201f      	movs	r0, #31
 80071c0:	f7f9 fc7f 	bl	8000ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80071c4:	46c0      	nop			; (mov r8, r8)
 80071c6:	46bd      	mov	sp, r7
 80071c8:	b002      	add	sp, #8
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	40005c00 	.word	0x40005c00
 80071d0:	40021000 	.word	0x40021000

080071d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	23bc      	movs	r3, #188	; 0xbc
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	58d2      	ldr	r2, [r2, r3]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	21ac      	movs	r1, #172	; 0xac
 80071e8:	0089      	lsls	r1, r1, #2
 80071ea:	468c      	mov	ip, r1
 80071ec:	4463      	add	r3, ip
 80071ee:	0019      	movs	r1, r3
 80071f0:	0010      	movs	r0, r2
 80071f2:	f7fe fd33 	bl	8005c5c <USBD_LL_SetupStage>
}
 80071f6:	46c0      	nop			; (mov r8, r8)
 80071f8:	46bd      	mov	sp, r7
 80071fa:	b002      	add	sp, #8
 80071fc:	bd80      	pop	{r7, pc}

080071fe <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071fe:	b590      	push	{r4, r7, lr}
 8007200:	b083      	sub	sp, #12
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
 8007206:	000a      	movs	r2, r1
 8007208:	1cfb      	adds	r3, r7, #3
 800720a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	23bc      	movs	r3, #188	; 0xbc
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	58d4      	ldr	r4, [r2, r3]
 8007214:	1cfb      	adds	r3, r7, #3
 8007216:	781a      	ldrb	r2, [r3, #0]
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	23be      	movs	r3, #190	; 0xbe
 800721c:	0059      	lsls	r1, r3, #1
 800721e:	0013      	movs	r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	189b      	adds	r3, r3, r2
 8007224:	00db      	lsls	r3, r3, #3
 8007226:	18c3      	adds	r3, r0, r3
 8007228:	185b      	adds	r3, r3, r1
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	1cfb      	adds	r3, r7, #3
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	0019      	movs	r1, r3
 8007232:	0020      	movs	r0, r4
 8007234:	f7fe fd70 	bl	8005d18 <USBD_LL_DataOutStage>
}
 8007238:	46c0      	nop			; (mov r8, r8)
 800723a:	46bd      	mov	sp, r7
 800723c:	b003      	add	sp, #12
 800723e:	bd90      	pop	{r4, r7, pc}

08007240 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	000a      	movs	r2, r1
 800724a:	1cfb      	adds	r3, r7, #3
 800724c:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	23bc      	movs	r3, #188	; 0xbc
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	58d0      	ldr	r0, [r2, r3]
 8007256:	1cfb      	adds	r3, r7, #3
 8007258:	781a      	ldrb	r2, [r3, #0]
 800725a:	6879      	ldr	r1, [r7, #4]
 800725c:	0013      	movs	r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	189b      	adds	r3, r3, r2
 8007262:	00db      	lsls	r3, r3, #3
 8007264:	18cb      	adds	r3, r1, r3
 8007266:	333c      	adds	r3, #60	; 0x3c
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	1cfb      	adds	r3, r7, #3
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	0019      	movs	r1, r3
 8007270:	f7fe fdd4 	bl	8005e1c <USBD_LL_DataInStage>
}
 8007274:	46c0      	nop			; (mov r8, r8)
 8007276:	46bd      	mov	sp, r7
 8007278:	b002      	add	sp, #8
 800727a:	bd80      	pop	{r7, pc}

0800727c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	23bc      	movs	r3, #188	; 0xbc
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	58d3      	ldr	r3, [r2, r3]
 800728c:	0018      	movs	r0, r3
 800728e:	f7fe ff0b 	bl	80060a8 <USBD_LL_SOF>
}
 8007292:	46c0      	nop			; (mov r8, r8)
 8007294:	46bd      	mov	sp, r7
 8007296:	b002      	add	sp, #8
 8007298:	bd80      	pop	{r7, pc}

0800729a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b084      	sub	sp, #16
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80072a2:	230f      	movs	r3, #15
 80072a4:	18fb      	adds	r3, r7, r3
 80072a6:	2201      	movs	r2, #1
 80072a8:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d001      	beq.n	80072b6 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 80072b2:	f7f9 fa43 	bl	800073c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	23bc      	movs	r3, #188	; 0xbc
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	58d2      	ldr	r2, [r2, r3]
 80072be:	230f      	movs	r3, #15
 80072c0:	18fb      	adds	r3, r7, r3
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	0019      	movs	r1, r3
 80072c6:	0010      	movs	r0, r2
 80072c8:	f7fe fead 	bl	8006026 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	23bc      	movs	r3, #188	; 0xbc
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	58d3      	ldr	r3, [r2, r3]
 80072d4:	0018      	movs	r0, r3
 80072d6:	f7fe fe5e 	bl	8005f96 <USBD_LL_Reset>
}
 80072da:	46c0      	nop			; (mov r8, r8)
 80072dc:	46bd      	mov	sp, r7
 80072de:	b004      	add	sp, #16
 80072e0:	bd80      	pop	{r7, pc}
	...

080072e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	23bc      	movs	r3, #188	; 0xbc
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	58d3      	ldr	r3, [r2, r3]
 80072f4:	0018      	movs	r0, r3
 80072f6:	f7fe fea7 	bl	8006048 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d005      	beq.n	800730e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007302:	4b05      	ldr	r3, [pc, #20]	; (8007318 <HAL_PCD_SuspendCallback+0x34>)
 8007304:	691a      	ldr	r2, [r3, #16]
 8007306:	4b04      	ldr	r3, [pc, #16]	; (8007318 <HAL_PCD_SuspendCallback+0x34>)
 8007308:	2106      	movs	r1, #6
 800730a:	430a      	orrs	r2, r1
 800730c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800730e:	46c0      	nop			; (mov r8, r8)
 8007310:	46bd      	mov	sp, r7
 8007312:	b002      	add	sp, #8
 8007314:	bd80      	pop	{r7, pc}
 8007316:	46c0      	nop			; (mov r8, r8)
 8007318:	e000ed00 	.word	0xe000ed00

0800731c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	699b      	ldr	r3, [r3, #24]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d007      	beq.n	800733c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800732c:	4b09      	ldr	r3, [pc, #36]	; (8007354 <HAL_PCD_ResumeCallback+0x38>)
 800732e:	691a      	ldr	r2, [r3, #16]
 8007330:	4b08      	ldr	r3, [pc, #32]	; (8007354 <HAL_PCD_ResumeCallback+0x38>)
 8007332:	2106      	movs	r1, #6
 8007334:	438a      	bics	r2, r1
 8007336:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8007338:	f000 fa1a 	bl	8007770 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	23bc      	movs	r3, #188	; 0xbc
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	58d3      	ldr	r3, [r2, r3]
 8007344:	0018      	movs	r0, r3
 8007346:	f7fe fe97 	bl	8006078 <USBD_LL_Resume>
}
 800734a:	46c0      	nop			; (mov r8, r8)
 800734c:	46bd      	mov	sp, r7
 800734e:	b002      	add	sp, #8
 8007350:	bd80      	pop	{r7, pc}
 8007352:	46c0      	nop			; (mov r8, r8)
 8007354:	e000ed00 	.word	0xe000ed00

08007358 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007360:	4a23      	ldr	r2, [pc, #140]	; (80073f0 <USBD_LL_Init+0x98>)
 8007362:	23bc      	movs	r3, #188	; 0xbc
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	6879      	ldr	r1, [r7, #4]
 8007368:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	23b0      	movs	r3, #176	; 0xb0
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	491f      	ldr	r1, [pc, #124]	; (80073f0 <USBD_LL_Init+0x98>)
 8007372:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8007374:	4b1e      	ldr	r3, [pc, #120]	; (80073f0 <USBD_LL_Init+0x98>)
 8007376:	4a1f      	ldr	r2, [pc, #124]	; (80073f4 <USBD_LL_Init+0x9c>)
 8007378:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800737a:	4b1d      	ldr	r3, [pc, #116]	; (80073f0 <USBD_LL_Init+0x98>)
 800737c:	2208      	movs	r2, #8
 800737e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007380:	4b1b      	ldr	r3, [pc, #108]	; (80073f0 <USBD_LL_Init+0x98>)
 8007382:	2202      	movs	r2, #2
 8007384:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007386:	4b1a      	ldr	r3, [pc, #104]	; (80073f0 <USBD_LL_Init+0x98>)
 8007388:	2202      	movs	r2, #2
 800738a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800738c:	4b18      	ldr	r3, [pc, #96]	; (80073f0 <USBD_LL_Init+0x98>)
 800738e:	2200      	movs	r2, #0
 8007390:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007392:	4b17      	ldr	r3, [pc, #92]	; (80073f0 <USBD_LL_Init+0x98>)
 8007394:	2200      	movs	r2, #0
 8007396:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007398:	4b15      	ldr	r3, [pc, #84]	; (80073f0 <USBD_LL_Init+0x98>)
 800739a:	2200      	movs	r2, #0
 800739c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800739e:	4b14      	ldr	r3, [pc, #80]	; (80073f0 <USBD_LL_Init+0x98>)
 80073a0:	0018      	movs	r0, r3
 80073a2:	f7f9 fbab 	bl	8000afc <HAL_PCD_Init>
 80073a6:	1e03      	subs	r3, r0, #0
 80073a8:	d001      	beq.n	80073ae <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 80073aa:	f7f9 f9c7 	bl	800073c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	23b0      	movs	r3, #176	; 0xb0
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	58d0      	ldr	r0, [r2, r3]
 80073b6:	2318      	movs	r3, #24
 80073b8:	2200      	movs	r2, #0
 80073ba:	2100      	movs	r1, #0
 80073bc:	f7fb f952 	bl	8002664 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	23b0      	movs	r3, #176	; 0xb0
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	58d0      	ldr	r0, [r2, r3]
 80073c8:	2358      	movs	r3, #88	; 0x58
 80073ca:	2200      	movs	r2, #0
 80073cc:	2180      	movs	r1, #128	; 0x80
 80073ce:	f7fb f949 	bl	8002664 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	23b0      	movs	r3, #176	; 0xb0
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	58d0      	ldr	r0, [r2, r3]
 80073da:	2380      	movs	r3, #128	; 0x80
 80073dc:	005b      	lsls	r3, r3, #1
 80073de:	2200      	movs	r2, #0
 80073e0:	2181      	movs	r1, #129	; 0x81
 80073e2:	f7fb f93f 	bl	8002664 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	0018      	movs	r0, r3
 80073ea:	46bd      	mov	sp, r7
 80073ec:	b002      	add	sp, #8
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	200006ac 	.word	0x200006ac
 80073f4:	40005c00 	.word	0x40005c00

080073f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80073f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007400:	210f      	movs	r1, #15
 8007402:	187b      	adds	r3, r7, r1
 8007404:	2200      	movs	r2, #0
 8007406:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007408:	260e      	movs	r6, #14
 800740a:	19bb      	adds	r3, r7, r6
 800740c:	2200      	movs	r2, #0
 800740e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	23b0      	movs	r3, #176	; 0xb0
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	58d3      	ldr	r3, [r2, r3]
 8007418:	000d      	movs	r5, r1
 800741a:	187c      	adds	r4, r7, r1
 800741c:	0018      	movs	r0, r3
 800741e:	f7f9 fc6d 	bl	8000cfc <HAL_PCD_Start>
 8007422:	0003      	movs	r3, r0
 8007424:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007426:	19bc      	adds	r4, r7, r6
 8007428:	197b      	adds	r3, r7, r5
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	0018      	movs	r0, r3
 800742e:	f000 f9a6 	bl	800777e <USBD_Get_USB_Status>
 8007432:	0003      	movs	r3, r0
 8007434:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007436:	19bb      	adds	r3, r7, r6
 8007438:	781b      	ldrb	r3, [r3, #0]
}
 800743a:	0018      	movs	r0, r3
 800743c:	46bd      	mov	sp, r7
 800743e:	b005      	add	sp, #20
 8007440:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007442 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007442:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007444:	b085      	sub	sp, #20
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
 800744a:	000c      	movs	r4, r1
 800744c:	0010      	movs	r0, r2
 800744e:	0019      	movs	r1, r3
 8007450:	1cfb      	adds	r3, r7, #3
 8007452:	1c22      	adds	r2, r4, #0
 8007454:	701a      	strb	r2, [r3, #0]
 8007456:	1cbb      	adds	r3, r7, #2
 8007458:	1c02      	adds	r2, r0, #0
 800745a:	701a      	strb	r2, [r3, #0]
 800745c:	003b      	movs	r3, r7
 800745e:	1c0a      	adds	r2, r1, #0
 8007460:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007462:	260f      	movs	r6, #15
 8007464:	19bb      	adds	r3, r7, r6
 8007466:	2200      	movs	r2, #0
 8007468:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800746a:	250e      	movs	r5, #14
 800746c:	197b      	adds	r3, r7, r5
 800746e:	2200      	movs	r2, #0
 8007470:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	23b0      	movs	r3, #176	; 0xb0
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	58d0      	ldr	r0, [r2, r3]
 800747a:	19bc      	adds	r4, r7, r6
 800747c:	1cbb      	adds	r3, r7, #2
 800747e:	781d      	ldrb	r5, [r3, #0]
 8007480:	003b      	movs	r3, r7
 8007482:	881a      	ldrh	r2, [r3, #0]
 8007484:	1cfb      	adds	r3, r7, #3
 8007486:	7819      	ldrb	r1, [r3, #0]
 8007488:	002b      	movs	r3, r5
 800748a:	f7f9 fdcc 	bl	8001026 <HAL_PCD_EP_Open>
 800748e:	0003      	movs	r3, r0
 8007490:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007492:	250e      	movs	r5, #14
 8007494:	197c      	adds	r4, r7, r5
 8007496:	19bb      	adds	r3, r7, r6
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	0018      	movs	r0, r3
 800749c:	f000 f96f 	bl	800777e <USBD_Get_USB_Status>
 80074a0:	0003      	movs	r3, r0
 80074a2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80074a4:	197b      	adds	r3, r7, r5
 80074a6:	781b      	ldrb	r3, [r3, #0]
}
 80074a8:	0018      	movs	r0, r3
 80074aa:	46bd      	mov	sp, r7
 80074ac:	b005      	add	sp, #20
 80074ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080074b0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	000a      	movs	r2, r1
 80074ba:	1cfb      	adds	r3, r7, #3
 80074bc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074be:	210f      	movs	r1, #15
 80074c0:	187b      	adds	r3, r7, r1
 80074c2:	2200      	movs	r2, #0
 80074c4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074c6:	260e      	movs	r6, #14
 80074c8:	19bb      	adds	r3, r7, r6
 80074ca:	2200      	movs	r2, #0
 80074cc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	23b0      	movs	r3, #176	; 0xb0
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	58d2      	ldr	r2, [r2, r3]
 80074d6:	000d      	movs	r5, r1
 80074d8:	187c      	adds	r4, r7, r1
 80074da:	1cfb      	adds	r3, r7, #3
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	0019      	movs	r1, r3
 80074e0:	0010      	movs	r0, r2
 80074e2:	f7f9 fe0f 	bl	8001104 <HAL_PCD_EP_Close>
 80074e6:	0003      	movs	r3, r0
 80074e8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074ea:	19bc      	adds	r4, r7, r6
 80074ec:	197b      	adds	r3, r7, r5
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	0018      	movs	r0, r3
 80074f2:	f000 f944 	bl	800777e <USBD_Get_USB_Status>
 80074f6:	0003      	movs	r3, r0
 80074f8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80074fa:	19bb      	adds	r3, r7, r6
 80074fc:	781b      	ldrb	r3, [r3, #0]
}
 80074fe:	0018      	movs	r0, r3
 8007500:	46bd      	mov	sp, r7
 8007502:	b005      	add	sp, #20
 8007504:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007506 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007506:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007508:	b085      	sub	sp, #20
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	000a      	movs	r2, r1
 8007510:	1cfb      	adds	r3, r7, #3
 8007512:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007514:	210f      	movs	r1, #15
 8007516:	187b      	adds	r3, r7, r1
 8007518:	2200      	movs	r2, #0
 800751a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800751c:	260e      	movs	r6, #14
 800751e:	19bb      	adds	r3, r7, r6
 8007520:	2200      	movs	r2, #0
 8007522:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	23b0      	movs	r3, #176	; 0xb0
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	58d2      	ldr	r2, [r2, r3]
 800752c:	000d      	movs	r5, r1
 800752e:	187c      	adds	r4, r7, r1
 8007530:	1cfb      	adds	r3, r7, #3
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	0019      	movs	r1, r3
 8007536:	0010      	movs	r0, r2
 8007538:	f7f9 fea8 	bl	800128c <HAL_PCD_EP_SetStall>
 800753c:	0003      	movs	r3, r0
 800753e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007540:	19bc      	adds	r4, r7, r6
 8007542:	197b      	adds	r3, r7, r5
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	0018      	movs	r0, r3
 8007548:	f000 f919 	bl	800777e <USBD_Get_USB_Status>
 800754c:	0003      	movs	r3, r0
 800754e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007550:	19bb      	adds	r3, r7, r6
 8007552:	781b      	ldrb	r3, [r3, #0]
}
 8007554:	0018      	movs	r0, r3
 8007556:	46bd      	mov	sp, r7
 8007558:	b005      	add	sp, #20
 800755a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800755c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800755c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	000a      	movs	r2, r1
 8007566:	1cfb      	adds	r3, r7, #3
 8007568:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800756a:	210f      	movs	r1, #15
 800756c:	187b      	adds	r3, r7, r1
 800756e:	2200      	movs	r2, #0
 8007570:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007572:	260e      	movs	r6, #14
 8007574:	19bb      	adds	r3, r7, r6
 8007576:	2200      	movs	r2, #0
 8007578:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	23b0      	movs	r3, #176	; 0xb0
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	58d2      	ldr	r2, [r2, r3]
 8007582:	000d      	movs	r5, r1
 8007584:	187c      	adds	r4, r7, r1
 8007586:	1cfb      	adds	r3, r7, #3
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	0019      	movs	r1, r3
 800758c:	0010      	movs	r0, r2
 800758e:	f7f9 fed9 	bl	8001344 <HAL_PCD_EP_ClrStall>
 8007592:	0003      	movs	r3, r0
 8007594:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007596:	19bc      	adds	r4, r7, r6
 8007598:	197b      	adds	r3, r7, r5
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	0018      	movs	r0, r3
 800759e:	f000 f8ee 	bl	800777e <USBD_Get_USB_Status>
 80075a2:	0003      	movs	r3, r0
 80075a4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80075a6:	19bb      	adds	r3, r7, r6
 80075a8:	781b      	ldrb	r3, [r3, #0]
}
 80075aa:	0018      	movs	r0, r3
 80075ac:	46bd      	mov	sp, r7
 80075ae:	b005      	add	sp, #20
 80075b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080075b2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b084      	sub	sp, #16
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
 80075ba:	000a      	movs	r2, r1
 80075bc:	1cfb      	adds	r3, r7, #3
 80075be:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	23b0      	movs	r3, #176	; 0xb0
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	58d3      	ldr	r3, [r2, r3]
 80075c8:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80075ca:	1cfb      	adds	r3, r7, #3
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	b25b      	sxtb	r3, r3
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	da0d      	bge.n	80075f0 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80075d4:	1cfb      	adds	r3, r7, #3
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	227f      	movs	r2, #127	; 0x7f
 80075da:	4013      	ands	r3, r2
 80075dc:	68f9      	ldr	r1, [r7, #12]
 80075de:	1c5a      	adds	r2, r3, #1
 80075e0:	0013      	movs	r3, r2
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	189b      	adds	r3, r3, r2
 80075e6:	00db      	lsls	r3, r3, #3
 80075e8:	18cb      	adds	r3, r1, r3
 80075ea:	3302      	adds	r3, #2
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	e00d      	b.n	800760c <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80075f0:	1cfb      	adds	r3, r7, #3
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	227f      	movs	r2, #127	; 0x7f
 80075f6:	401a      	ands	r2, r3
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	23b5      	movs	r3, #181	; 0xb5
 80075fc:	0059      	lsls	r1, r3, #1
 80075fe:	0013      	movs	r3, r2
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	189b      	adds	r3, r3, r2
 8007604:	00db      	lsls	r3, r3, #3
 8007606:	18c3      	adds	r3, r0, r3
 8007608:	185b      	adds	r3, r3, r1
 800760a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800760c:	0018      	movs	r0, r3
 800760e:	46bd      	mov	sp, r7
 8007610:	b004      	add	sp, #16
 8007612:	bd80      	pop	{r7, pc}

08007614 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	000a      	movs	r2, r1
 800761e:	1cfb      	adds	r3, r7, #3
 8007620:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007622:	210f      	movs	r1, #15
 8007624:	187b      	adds	r3, r7, r1
 8007626:	2200      	movs	r2, #0
 8007628:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800762a:	260e      	movs	r6, #14
 800762c:	19bb      	adds	r3, r7, r6
 800762e:	2200      	movs	r2, #0
 8007630:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	23b0      	movs	r3, #176	; 0xb0
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	58d2      	ldr	r2, [r2, r3]
 800763a:	000d      	movs	r5, r1
 800763c:	187c      	adds	r4, r7, r1
 800763e:	1cfb      	adds	r3, r7, #3
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	0019      	movs	r1, r3
 8007644:	0010      	movs	r0, r2
 8007646:	f7f9 fcc3 	bl	8000fd0 <HAL_PCD_SetAddress>
 800764a:	0003      	movs	r3, r0
 800764c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800764e:	19bc      	adds	r4, r7, r6
 8007650:	197b      	adds	r3, r7, r5
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	0018      	movs	r0, r3
 8007656:	f000 f892 	bl	800777e <USBD_Get_USB_Status>
 800765a:	0003      	movs	r3, r0
 800765c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800765e:	19bb      	adds	r3, r7, r6
 8007660:	781b      	ldrb	r3, [r3, #0]
}
 8007662:	0018      	movs	r0, r3
 8007664:	46bd      	mov	sp, r7
 8007666:	b005      	add	sp, #20
 8007668:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800766a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800766a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800766c:	b087      	sub	sp, #28
 800766e:	af00      	add	r7, sp, #0
 8007670:	60f8      	str	r0, [r7, #12]
 8007672:	0008      	movs	r0, r1
 8007674:	607a      	str	r2, [r7, #4]
 8007676:	0019      	movs	r1, r3
 8007678:	230b      	movs	r3, #11
 800767a:	18fb      	adds	r3, r7, r3
 800767c:	1c02      	adds	r2, r0, #0
 800767e:	701a      	strb	r2, [r3, #0]
 8007680:	2408      	movs	r4, #8
 8007682:	193b      	adds	r3, r7, r4
 8007684:	1c0a      	adds	r2, r1, #0
 8007686:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007688:	2117      	movs	r1, #23
 800768a:	187b      	adds	r3, r7, r1
 800768c:	2200      	movs	r2, #0
 800768e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007690:	2516      	movs	r5, #22
 8007692:	197b      	adds	r3, r7, r5
 8007694:	2200      	movs	r2, #0
 8007696:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007698:	68fa      	ldr	r2, [r7, #12]
 800769a:	23b0      	movs	r3, #176	; 0xb0
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	58d0      	ldr	r0, [r2, r3]
 80076a0:	193b      	adds	r3, r7, r4
 80076a2:	881d      	ldrh	r5, [r3, #0]
 80076a4:	000e      	movs	r6, r1
 80076a6:	187c      	adds	r4, r7, r1
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	230b      	movs	r3, #11
 80076ac:	18fb      	adds	r3, r7, r3
 80076ae:	7819      	ldrb	r1, [r3, #0]
 80076b0:	002b      	movs	r3, r5
 80076b2:	f7f9 fdaf 	bl	8001214 <HAL_PCD_EP_Transmit>
 80076b6:	0003      	movs	r3, r0
 80076b8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076ba:	2516      	movs	r5, #22
 80076bc:	197c      	adds	r4, r7, r5
 80076be:	19bb      	adds	r3, r7, r6
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	0018      	movs	r0, r3
 80076c4:	f000 f85b 	bl	800777e <USBD_Get_USB_Status>
 80076c8:	0003      	movs	r3, r0
 80076ca:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80076cc:	197b      	adds	r3, r7, r5
 80076ce:	781b      	ldrb	r3, [r3, #0]
}
 80076d0:	0018      	movs	r0, r3
 80076d2:	46bd      	mov	sp, r7
 80076d4:	b007      	add	sp, #28
 80076d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080076d8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80076d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076da:	b087      	sub	sp, #28
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	0008      	movs	r0, r1
 80076e2:	607a      	str	r2, [r7, #4]
 80076e4:	0019      	movs	r1, r3
 80076e6:	230b      	movs	r3, #11
 80076e8:	18fb      	adds	r3, r7, r3
 80076ea:	1c02      	adds	r2, r0, #0
 80076ec:	701a      	strb	r2, [r3, #0]
 80076ee:	2408      	movs	r4, #8
 80076f0:	193b      	adds	r3, r7, r4
 80076f2:	1c0a      	adds	r2, r1, #0
 80076f4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076f6:	2117      	movs	r1, #23
 80076f8:	187b      	adds	r3, r7, r1
 80076fa:	2200      	movs	r2, #0
 80076fc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076fe:	2516      	movs	r5, #22
 8007700:	197b      	adds	r3, r7, r5
 8007702:	2200      	movs	r2, #0
 8007704:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	23b0      	movs	r3, #176	; 0xb0
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	58d0      	ldr	r0, [r2, r3]
 800770e:	193b      	adds	r3, r7, r4
 8007710:	881d      	ldrh	r5, [r3, #0]
 8007712:	000e      	movs	r6, r1
 8007714:	187c      	adds	r4, r7, r1
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	230b      	movs	r3, #11
 800771a:	18fb      	adds	r3, r7, r3
 800771c:	7819      	ldrb	r1, [r3, #0]
 800771e:	002b      	movs	r3, r5
 8007720:	f7f9 fd41 	bl	80011a6 <HAL_PCD_EP_Receive>
 8007724:	0003      	movs	r3, r0
 8007726:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007728:	2516      	movs	r5, #22
 800772a:	197c      	adds	r4, r7, r5
 800772c:	19bb      	adds	r3, r7, r6
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	0018      	movs	r0, r3
 8007732:	f000 f824 	bl	800777e <USBD_Get_USB_Status>
 8007736:	0003      	movs	r3, r0
 8007738:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800773a:	197b      	adds	r3, r7, r5
 800773c:	781b      	ldrb	r3, [r3, #0]
}
 800773e:	0018      	movs	r0, r3
 8007740:	46bd      	mov	sp, r7
 8007742:	b007      	add	sp, #28
 8007744:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007748 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007750:	4b02      	ldr	r3, [pc, #8]	; (800775c <USBD_static_malloc+0x14>)
}
 8007752:	0018      	movs	r0, r3
 8007754:	46bd      	mov	sp, r7
 8007756:	b002      	add	sp, #8
 8007758:	bd80      	pop	{r7, pc}
 800775a:	46c0      	nop			; (mov r8, r8)
 800775c:	200009a0 	.word	0x200009a0

08007760 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]

}
 8007768:	46c0      	nop			; (mov r8, r8)
 800776a:	46bd      	mov	sp, r7
 800776c:	b002      	add	sp, #8
 800776e:	bd80      	pop	{r7, pc}

08007770 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007774:	f7f8 ff56 	bl	8000624 <SystemClock_Config>
}
 8007778:	46c0      	nop			; (mov r8, r8)
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b084      	sub	sp, #16
 8007782:	af00      	add	r7, sp, #0
 8007784:	0002      	movs	r2, r0
 8007786:	1dfb      	adds	r3, r7, #7
 8007788:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800778a:	230f      	movs	r3, #15
 800778c:	18fb      	adds	r3, r7, r3
 800778e:	2200      	movs	r2, #0
 8007790:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8007792:	1dfb      	adds	r3, r7, #7
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	2b03      	cmp	r3, #3
 8007798:	d017      	beq.n	80077ca <USBD_Get_USB_Status+0x4c>
 800779a:	dc1b      	bgt.n	80077d4 <USBD_Get_USB_Status+0x56>
 800779c:	2b02      	cmp	r3, #2
 800779e:	d00f      	beq.n	80077c0 <USBD_Get_USB_Status+0x42>
 80077a0:	dc18      	bgt.n	80077d4 <USBD_Get_USB_Status+0x56>
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d002      	beq.n	80077ac <USBD_Get_USB_Status+0x2e>
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d005      	beq.n	80077b6 <USBD_Get_USB_Status+0x38>
 80077aa:	e013      	b.n	80077d4 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80077ac:	230f      	movs	r3, #15
 80077ae:	18fb      	adds	r3, r7, r3
 80077b0:	2200      	movs	r2, #0
 80077b2:	701a      	strb	r2, [r3, #0]
    break;
 80077b4:	e013      	b.n	80077de <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80077b6:	230f      	movs	r3, #15
 80077b8:	18fb      	adds	r3, r7, r3
 80077ba:	2202      	movs	r2, #2
 80077bc:	701a      	strb	r2, [r3, #0]
    break;
 80077be:	e00e      	b.n	80077de <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80077c0:	230f      	movs	r3, #15
 80077c2:	18fb      	adds	r3, r7, r3
 80077c4:	2201      	movs	r2, #1
 80077c6:	701a      	strb	r2, [r3, #0]
    break;
 80077c8:	e009      	b.n	80077de <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80077ca:	230f      	movs	r3, #15
 80077cc:	18fb      	adds	r3, r7, r3
 80077ce:	2202      	movs	r2, #2
 80077d0:	701a      	strb	r2, [r3, #0]
    break;
 80077d2:	e004      	b.n	80077de <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80077d4:	230f      	movs	r3, #15
 80077d6:	18fb      	adds	r3, r7, r3
 80077d8:	2202      	movs	r2, #2
 80077da:	701a      	strb	r2, [r3, #0]
    break;
 80077dc:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 80077de:	230f      	movs	r3, #15
 80077e0:	18fb      	adds	r3, r7, r3
 80077e2:	781b      	ldrb	r3, [r3, #0]
}
 80077e4:	0018      	movs	r0, r3
 80077e6:	46bd      	mov	sp, r7
 80077e8:	b004      	add	sp, #16
 80077ea:	bd80      	pop	{r7, pc}

080077ec <memset>:
 80077ec:	0003      	movs	r3, r0
 80077ee:	1882      	adds	r2, r0, r2
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d100      	bne.n	80077f6 <memset+0xa>
 80077f4:	4770      	bx	lr
 80077f6:	7019      	strb	r1, [r3, #0]
 80077f8:	3301      	adds	r3, #1
 80077fa:	e7f9      	b.n	80077f0 <memset+0x4>

080077fc <__libc_init_array>:
 80077fc:	b570      	push	{r4, r5, r6, lr}
 80077fe:	2600      	movs	r6, #0
 8007800:	4c0c      	ldr	r4, [pc, #48]	; (8007834 <__libc_init_array+0x38>)
 8007802:	4d0d      	ldr	r5, [pc, #52]	; (8007838 <__libc_init_array+0x3c>)
 8007804:	1b64      	subs	r4, r4, r5
 8007806:	10a4      	asrs	r4, r4, #2
 8007808:	42a6      	cmp	r6, r4
 800780a:	d109      	bne.n	8007820 <__libc_init_array+0x24>
 800780c:	2600      	movs	r6, #0
 800780e:	f000 f819 	bl	8007844 <_init>
 8007812:	4c0a      	ldr	r4, [pc, #40]	; (800783c <__libc_init_array+0x40>)
 8007814:	4d0a      	ldr	r5, [pc, #40]	; (8007840 <__libc_init_array+0x44>)
 8007816:	1b64      	subs	r4, r4, r5
 8007818:	10a4      	asrs	r4, r4, #2
 800781a:	42a6      	cmp	r6, r4
 800781c:	d105      	bne.n	800782a <__libc_init_array+0x2e>
 800781e:	bd70      	pop	{r4, r5, r6, pc}
 8007820:	00b3      	lsls	r3, r6, #2
 8007822:	58eb      	ldr	r3, [r5, r3]
 8007824:	4798      	blx	r3
 8007826:	3601      	adds	r6, #1
 8007828:	e7ee      	b.n	8007808 <__libc_init_array+0xc>
 800782a:	00b3      	lsls	r3, r6, #2
 800782c:	58eb      	ldr	r3, [r5, r3]
 800782e:	4798      	blx	r3
 8007830:	3601      	adds	r6, #1
 8007832:	e7f2      	b.n	800781a <__libc_init_array+0x1e>
 8007834:	08007930 	.word	0x08007930
 8007838:	08007930 	.word	0x08007930
 800783c:	08007934 	.word	0x08007934
 8007840:	08007930 	.word	0x08007930

08007844 <_init>:
 8007844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007846:	46c0      	nop			; (mov r8, r8)
 8007848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800784a:	bc08      	pop	{r3}
 800784c:	469e      	mov	lr, r3
 800784e:	4770      	bx	lr

08007850 <_fini>:
 8007850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007852:	46c0      	nop			; (mov r8, r8)
 8007854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007856:	bc08      	pop	{r3}
 8007858:	469e      	mov	lr, r3
 800785a:	4770      	bx	lr

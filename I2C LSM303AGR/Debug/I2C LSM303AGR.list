
I2C LSM303AGR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ec8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000624  08009f88  08009f88  00019f88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5ac  0800a5ac  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5ac  0800a5ac  0001a5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5b4  0800a5b4  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5b4  0800a5b4  0001a5b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5b8  0800a5b8  0001a5b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800a5bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000528  200001fc  0800a7b8  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000724  0800a7b8  00020724  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000124f3  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e9d  00000000  00000000  00032717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f70  00000000  00000000  000345b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea8  00000000  00000000  00035528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001510e  00000000  00000000  000363d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f7a9  00000000  00000000  0004b4de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007d3ca  00000000  00000000  0005ac87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d8051  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c78  00000000  00000000  000d80a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001fc 	.word	0x200001fc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009f70 	.word	0x08009f70

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000200 	.word	0x20000200
 8000104:	08009f70 	.word	0x08009f70

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fc51 	bl	8001ce4 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fba1 	bl	8001b94 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fc43 	bl	8001ce4 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fc39 	bl	8001ce4 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fbc9 	bl	8001c18 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fbbf 	bl	8001c18 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f834 	bl	8000544 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4647      	mov	r7, r8
 80004ee:	b580      	push	{r7, lr}
 80004f0:	0007      	movs	r7, r0
 80004f2:	4699      	mov	r9, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	469c      	mov	ip, r3
 80004f8:	0413      	lsls	r3, r2, #16
 80004fa:	0c1b      	lsrs	r3, r3, #16
 80004fc:	001d      	movs	r5, r3
 80004fe:	000e      	movs	r6, r1
 8000500:	4661      	mov	r1, ip
 8000502:	0400      	lsls	r0, r0, #16
 8000504:	0c14      	lsrs	r4, r2, #16
 8000506:	0c00      	lsrs	r0, r0, #16
 8000508:	4345      	muls	r5, r0
 800050a:	434b      	muls	r3, r1
 800050c:	4360      	muls	r0, r4
 800050e:	4361      	muls	r1, r4
 8000510:	18c0      	adds	r0, r0, r3
 8000512:	0c2c      	lsrs	r4, r5, #16
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4372      	muls	r2, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	4463      	add	r3, ip
 800052e:	042d      	lsls	r5, r5, #16
 8000530:	0c2d      	lsrs	r5, r5, #16
 8000532:	18c9      	adds	r1, r1, r3
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	1889      	adds	r1, r1, r2
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__udivmoddi4>:
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	4657      	mov	r7, sl
 8000548:	464e      	mov	r6, r9
 800054a:	4645      	mov	r5, r8
 800054c:	46de      	mov	lr, fp
 800054e:	b5e0      	push	{r5, r6, r7, lr}
 8000550:	0004      	movs	r4, r0
 8000552:	000d      	movs	r5, r1
 8000554:	4692      	mov	sl, r2
 8000556:	4699      	mov	r9, r3
 8000558:	b083      	sub	sp, #12
 800055a:	428b      	cmp	r3, r1
 800055c:	d830      	bhi.n	80005c0 <__udivmoddi4+0x7c>
 800055e:	d02d      	beq.n	80005bc <__udivmoddi4+0x78>
 8000560:	4649      	mov	r1, r9
 8000562:	4650      	mov	r0, sl
 8000564:	f002 fb30 	bl	8002bc8 <__clzdi2>
 8000568:	0029      	movs	r1, r5
 800056a:	0006      	movs	r6, r0
 800056c:	0020      	movs	r0, r4
 800056e:	f002 fb2b 	bl	8002bc8 <__clzdi2>
 8000572:	1a33      	subs	r3, r6, r0
 8000574:	4698      	mov	r8, r3
 8000576:	3b20      	subs	r3, #32
 8000578:	469b      	mov	fp, r3
 800057a:	d433      	bmi.n	80005e4 <__udivmoddi4+0xa0>
 800057c:	465a      	mov	r2, fp
 800057e:	4653      	mov	r3, sl
 8000580:	4093      	lsls	r3, r2
 8000582:	4642      	mov	r2, r8
 8000584:	001f      	movs	r7, r3
 8000586:	4653      	mov	r3, sl
 8000588:	4093      	lsls	r3, r2
 800058a:	001e      	movs	r6, r3
 800058c:	42af      	cmp	r7, r5
 800058e:	d83a      	bhi.n	8000606 <__udivmoddi4+0xc2>
 8000590:	42af      	cmp	r7, r5
 8000592:	d100      	bne.n	8000596 <__udivmoddi4+0x52>
 8000594:	e078      	b.n	8000688 <__udivmoddi4+0x144>
 8000596:	465b      	mov	r3, fp
 8000598:	1ba4      	subs	r4, r4, r6
 800059a:	41bd      	sbcs	r5, r7
 800059c:	2b00      	cmp	r3, #0
 800059e:	da00      	bge.n	80005a2 <__udivmoddi4+0x5e>
 80005a0:	e075      	b.n	800068e <__udivmoddi4+0x14a>
 80005a2:	2200      	movs	r2, #0
 80005a4:	2300      	movs	r3, #0
 80005a6:	9200      	str	r2, [sp, #0]
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2301      	movs	r3, #1
 80005ac:	465a      	mov	r2, fp
 80005ae:	4093      	lsls	r3, r2
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2301      	movs	r3, #1
 80005b4:	4642      	mov	r2, r8
 80005b6:	4093      	lsls	r3, r2
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	e028      	b.n	800060e <__udivmoddi4+0xca>
 80005bc:	4282      	cmp	r2, r0
 80005be:	d9cf      	bls.n	8000560 <__udivmoddi4+0x1c>
 80005c0:	2200      	movs	r2, #0
 80005c2:	2300      	movs	r3, #0
 80005c4:	9200      	str	r2, [sp, #0]
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <__udivmoddi4+0x8e>
 80005ce:	601c      	str	r4, [r3, #0]
 80005d0:	605d      	str	r5, [r3, #4]
 80005d2:	9800      	ldr	r0, [sp, #0]
 80005d4:	9901      	ldr	r1, [sp, #4]
 80005d6:	b003      	add	sp, #12
 80005d8:	bcf0      	pop	{r4, r5, r6, r7}
 80005da:	46bb      	mov	fp, r7
 80005dc:	46b2      	mov	sl, r6
 80005de:	46a9      	mov	r9, r5
 80005e0:	46a0      	mov	r8, r4
 80005e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e4:	4642      	mov	r2, r8
 80005e6:	2320      	movs	r3, #32
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	4652      	mov	r2, sl
 80005ec:	40da      	lsrs	r2, r3
 80005ee:	4641      	mov	r1, r8
 80005f0:	0013      	movs	r3, r2
 80005f2:	464a      	mov	r2, r9
 80005f4:	408a      	lsls	r2, r1
 80005f6:	0017      	movs	r7, r2
 80005f8:	4642      	mov	r2, r8
 80005fa:	431f      	orrs	r7, r3
 80005fc:	4653      	mov	r3, sl
 80005fe:	4093      	lsls	r3, r2
 8000600:	001e      	movs	r6, r3
 8000602:	42af      	cmp	r7, r5
 8000604:	d9c4      	bls.n	8000590 <__udivmoddi4+0x4c>
 8000606:	2200      	movs	r2, #0
 8000608:	2300      	movs	r3, #0
 800060a:	9200      	str	r2, [sp, #0]
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	4643      	mov	r3, r8
 8000610:	2b00      	cmp	r3, #0
 8000612:	d0d9      	beq.n	80005c8 <__udivmoddi4+0x84>
 8000614:	07fb      	lsls	r3, r7, #31
 8000616:	0872      	lsrs	r2, r6, #1
 8000618:	431a      	orrs	r2, r3
 800061a:	4646      	mov	r6, r8
 800061c:	087b      	lsrs	r3, r7, #1
 800061e:	e00e      	b.n	800063e <__udivmoddi4+0xfa>
 8000620:	42ab      	cmp	r3, r5
 8000622:	d101      	bne.n	8000628 <__udivmoddi4+0xe4>
 8000624:	42a2      	cmp	r2, r4
 8000626:	d80c      	bhi.n	8000642 <__udivmoddi4+0xfe>
 8000628:	1aa4      	subs	r4, r4, r2
 800062a:	419d      	sbcs	r5, r3
 800062c:	2001      	movs	r0, #1
 800062e:	1924      	adds	r4, r4, r4
 8000630:	416d      	adcs	r5, r5
 8000632:	2100      	movs	r1, #0
 8000634:	3e01      	subs	r6, #1
 8000636:	1824      	adds	r4, r4, r0
 8000638:	414d      	adcs	r5, r1
 800063a:	2e00      	cmp	r6, #0
 800063c:	d006      	beq.n	800064c <__udivmoddi4+0x108>
 800063e:	42ab      	cmp	r3, r5
 8000640:	d9ee      	bls.n	8000620 <__udivmoddi4+0xdc>
 8000642:	3e01      	subs	r6, #1
 8000644:	1924      	adds	r4, r4, r4
 8000646:	416d      	adcs	r5, r5
 8000648:	2e00      	cmp	r6, #0
 800064a:	d1f8      	bne.n	800063e <__udivmoddi4+0xfa>
 800064c:	9800      	ldr	r0, [sp, #0]
 800064e:	9901      	ldr	r1, [sp, #4]
 8000650:	465b      	mov	r3, fp
 8000652:	1900      	adds	r0, r0, r4
 8000654:	4169      	adcs	r1, r5
 8000656:	2b00      	cmp	r3, #0
 8000658:	db24      	blt.n	80006a4 <__udivmoddi4+0x160>
 800065a:	002b      	movs	r3, r5
 800065c:	465a      	mov	r2, fp
 800065e:	4644      	mov	r4, r8
 8000660:	40d3      	lsrs	r3, r2
 8000662:	002a      	movs	r2, r5
 8000664:	40e2      	lsrs	r2, r4
 8000666:	001c      	movs	r4, r3
 8000668:	465b      	mov	r3, fp
 800066a:	0015      	movs	r5, r2
 800066c:	2b00      	cmp	r3, #0
 800066e:	db2a      	blt.n	80006c6 <__udivmoddi4+0x182>
 8000670:	0026      	movs	r6, r4
 8000672:	409e      	lsls	r6, r3
 8000674:	0033      	movs	r3, r6
 8000676:	0026      	movs	r6, r4
 8000678:	4647      	mov	r7, r8
 800067a:	40be      	lsls	r6, r7
 800067c:	0032      	movs	r2, r6
 800067e:	1a80      	subs	r0, r0, r2
 8000680:	4199      	sbcs	r1, r3
 8000682:	9000      	str	r0, [sp, #0]
 8000684:	9101      	str	r1, [sp, #4]
 8000686:	e79f      	b.n	80005c8 <__udivmoddi4+0x84>
 8000688:	42a3      	cmp	r3, r4
 800068a:	d8bc      	bhi.n	8000606 <__udivmoddi4+0xc2>
 800068c:	e783      	b.n	8000596 <__udivmoddi4+0x52>
 800068e:	4642      	mov	r2, r8
 8000690:	2320      	movs	r3, #32
 8000692:	2100      	movs	r1, #0
 8000694:	1a9b      	subs	r3, r3, r2
 8000696:	2200      	movs	r2, #0
 8000698:	9100      	str	r1, [sp, #0]
 800069a:	9201      	str	r2, [sp, #4]
 800069c:	2201      	movs	r2, #1
 800069e:	40da      	lsrs	r2, r3
 80006a0:	9201      	str	r2, [sp, #4]
 80006a2:	e786      	b.n	80005b2 <__udivmoddi4+0x6e>
 80006a4:	4642      	mov	r2, r8
 80006a6:	2320      	movs	r3, #32
 80006a8:	1a9b      	subs	r3, r3, r2
 80006aa:	002a      	movs	r2, r5
 80006ac:	4646      	mov	r6, r8
 80006ae:	409a      	lsls	r2, r3
 80006b0:	0023      	movs	r3, r4
 80006b2:	40f3      	lsrs	r3, r6
 80006b4:	4644      	mov	r4, r8
 80006b6:	4313      	orrs	r3, r2
 80006b8:	002a      	movs	r2, r5
 80006ba:	40e2      	lsrs	r2, r4
 80006bc:	001c      	movs	r4, r3
 80006be:	465b      	mov	r3, fp
 80006c0:	0015      	movs	r5, r2
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	dad4      	bge.n	8000670 <__udivmoddi4+0x12c>
 80006c6:	4642      	mov	r2, r8
 80006c8:	002f      	movs	r7, r5
 80006ca:	2320      	movs	r3, #32
 80006cc:	0026      	movs	r6, r4
 80006ce:	4097      	lsls	r7, r2
 80006d0:	1a9b      	subs	r3, r3, r2
 80006d2:	40de      	lsrs	r6, r3
 80006d4:	003b      	movs	r3, r7
 80006d6:	4333      	orrs	r3, r6
 80006d8:	e7cd      	b.n	8000676 <__udivmoddi4+0x132>
 80006da:	46c0      	nop			; (mov r8, r8)

080006dc <__aeabi_fadd>:
 80006dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006de:	46c6      	mov	lr, r8
 80006e0:	0243      	lsls	r3, r0, #9
 80006e2:	0a5b      	lsrs	r3, r3, #9
 80006e4:	024e      	lsls	r6, r1, #9
 80006e6:	0045      	lsls	r5, r0, #1
 80006e8:	004f      	lsls	r7, r1, #1
 80006ea:	00da      	lsls	r2, r3, #3
 80006ec:	0fc4      	lsrs	r4, r0, #31
 80006ee:	469c      	mov	ip, r3
 80006f0:	0a70      	lsrs	r0, r6, #9
 80006f2:	4690      	mov	r8, r2
 80006f4:	b500      	push	{lr}
 80006f6:	0e2d      	lsrs	r5, r5, #24
 80006f8:	0e3f      	lsrs	r7, r7, #24
 80006fa:	0fc9      	lsrs	r1, r1, #31
 80006fc:	09b6      	lsrs	r6, r6, #6
 80006fe:	428c      	cmp	r4, r1
 8000700:	d04b      	beq.n	800079a <__aeabi_fadd+0xbe>
 8000702:	1bea      	subs	r2, r5, r7
 8000704:	2a00      	cmp	r2, #0
 8000706:	dd36      	ble.n	8000776 <__aeabi_fadd+0x9a>
 8000708:	2f00      	cmp	r7, #0
 800070a:	d061      	beq.n	80007d0 <__aeabi_fadd+0xf4>
 800070c:	2dff      	cmp	r5, #255	; 0xff
 800070e:	d100      	bne.n	8000712 <__aeabi_fadd+0x36>
 8000710:	e0ad      	b.n	800086e <__aeabi_fadd+0x192>
 8000712:	2380      	movs	r3, #128	; 0x80
 8000714:	04db      	lsls	r3, r3, #19
 8000716:	431e      	orrs	r6, r3
 8000718:	2a1b      	cmp	r2, #27
 800071a:	dc00      	bgt.n	800071e <__aeabi_fadd+0x42>
 800071c:	e0d3      	b.n	80008c6 <__aeabi_fadd+0x1ea>
 800071e:	2001      	movs	r0, #1
 8000720:	4643      	mov	r3, r8
 8000722:	1a18      	subs	r0, r3, r0
 8000724:	0143      	lsls	r3, r0, #5
 8000726:	d400      	bmi.n	800072a <__aeabi_fadd+0x4e>
 8000728:	e08c      	b.n	8000844 <__aeabi_fadd+0x168>
 800072a:	0180      	lsls	r0, r0, #6
 800072c:	0987      	lsrs	r7, r0, #6
 800072e:	0038      	movs	r0, r7
 8000730:	f002 fa2c 	bl	8002b8c <__clzsi2>
 8000734:	3805      	subs	r0, #5
 8000736:	4087      	lsls	r7, r0
 8000738:	4285      	cmp	r5, r0
 800073a:	dc00      	bgt.n	800073e <__aeabi_fadd+0x62>
 800073c:	e0b6      	b.n	80008ac <__aeabi_fadd+0x1d0>
 800073e:	1a2d      	subs	r5, r5, r0
 8000740:	48b3      	ldr	r0, [pc, #716]	; (8000a10 <__aeabi_fadd+0x334>)
 8000742:	4038      	ands	r0, r7
 8000744:	0743      	lsls	r3, r0, #29
 8000746:	d004      	beq.n	8000752 <__aeabi_fadd+0x76>
 8000748:	230f      	movs	r3, #15
 800074a:	4003      	ands	r3, r0
 800074c:	2b04      	cmp	r3, #4
 800074e:	d000      	beq.n	8000752 <__aeabi_fadd+0x76>
 8000750:	3004      	adds	r0, #4
 8000752:	0143      	lsls	r3, r0, #5
 8000754:	d400      	bmi.n	8000758 <__aeabi_fadd+0x7c>
 8000756:	e078      	b.n	800084a <__aeabi_fadd+0x16e>
 8000758:	1c6a      	adds	r2, r5, #1
 800075a:	2dfe      	cmp	r5, #254	; 0xfe
 800075c:	d065      	beq.n	800082a <__aeabi_fadd+0x14e>
 800075e:	0180      	lsls	r0, r0, #6
 8000760:	0a43      	lsrs	r3, r0, #9
 8000762:	469c      	mov	ip, r3
 8000764:	b2d2      	uxtb	r2, r2
 8000766:	4663      	mov	r3, ip
 8000768:	05d0      	lsls	r0, r2, #23
 800076a:	4318      	orrs	r0, r3
 800076c:	07e4      	lsls	r4, r4, #31
 800076e:	4320      	orrs	r0, r4
 8000770:	bc80      	pop	{r7}
 8000772:	46b8      	mov	r8, r7
 8000774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000776:	2a00      	cmp	r2, #0
 8000778:	d035      	beq.n	80007e6 <__aeabi_fadd+0x10a>
 800077a:	1b7a      	subs	r2, r7, r5
 800077c:	2d00      	cmp	r5, #0
 800077e:	d000      	beq.n	8000782 <__aeabi_fadd+0xa6>
 8000780:	e0af      	b.n	80008e2 <__aeabi_fadd+0x206>
 8000782:	4643      	mov	r3, r8
 8000784:	2b00      	cmp	r3, #0
 8000786:	d100      	bne.n	800078a <__aeabi_fadd+0xae>
 8000788:	e0a7      	b.n	80008da <__aeabi_fadd+0x1fe>
 800078a:	1e53      	subs	r3, r2, #1
 800078c:	2a01      	cmp	r2, #1
 800078e:	d100      	bne.n	8000792 <__aeabi_fadd+0xb6>
 8000790:	e12f      	b.n	80009f2 <__aeabi_fadd+0x316>
 8000792:	2aff      	cmp	r2, #255	; 0xff
 8000794:	d069      	beq.n	800086a <__aeabi_fadd+0x18e>
 8000796:	001a      	movs	r2, r3
 8000798:	e0aa      	b.n	80008f0 <__aeabi_fadd+0x214>
 800079a:	1be9      	subs	r1, r5, r7
 800079c:	2900      	cmp	r1, #0
 800079e:	dd70      	ble.n	8000882 <__aeabi_fadd+0x1a6>
 80007a0:	2f00      	cmp	r7, #0
 80007a2:	d037      	beq.n	8000814 <__aeabi_fadd+0x138>
 80007a4:	2dff      	cmp	r5, #255	; 0xff
 80007a6:	d062      	beq.n	800086e <__aeabi_fadd+0x192>
 80007a8:	2380      	movs	r3, #128	; 0x80
 80007aa:	04db      	lsls	r3, r3, #19
 80007ac:	431e      	orrs	r6, r3
 80007ae:	291b      	cmp	r1, #27
 80007b0:	dc00      	bgt.n	80007b4 <__aeabi_fadd+0xd8>
 80007b2:	e0b0      	b.n	8000916 <__aeabi_fadd+0x23a>
 80007b4:	2001      	movs	r0, #1
 80007b6:	4440      	add	r0, r8
 80007b8:	0143      	lsls	r3, r0, #5
 80007ba:	d543      	bpl.n	8000844 <__aeabi_fadd+0x168>
 80007bc:	3501      	adds	r5, #1
 80007be:	2dff      	cmp	r5, #255	; 0xff
 80007c0:	d033      	beq.n	800082a <__aeabi_fadd+0x14e>
 80007c2:	2301      	movs	r3, #1
 80007c4:	4a93      	ldr	r2, [pc, #588]	; (8000a14 <__aeabi_fadd+0x338>)
 80007c6:	4003      	ands	r3, r0
 80007c8:	0840      	lsrs	r0, r0, #1
 80007ca:	4010      	ands	r0, r2
 80007cc:	4318      	orrs	r0, r3
 80007ce:	e7b9      	b.n	8000744 <__aeabi_fadd+0x68>
 80007d0:	2e00      	cmp	r6, #0
 80007d2:	d100      	bne.n	80007d6 <__aeabi_fadd+0xfa>
 80007d4:	e083      	b.n	80008de <__aeabi_fadd+0x202>
 80007d6:	1e51      	subs	r1, r2, #1
 80007d8:	2a01      	cmp	r2, #1
 80007da:	d100      	bne.n	80007de <__aeabi_fadd+0x102>
 80007dc:	e0d8      	b.n	8000990 <__aeabi_fadd+0x2b4>
 80007de:	2aff      	cmp	r2, #255	; 0xff
 80007e0:	d045      	beq.n	800086e <__aeabi_fadd+0x192>
 80007e2:	000a      	movs	r2, r1
 80007e4:	e798      	b.n	8000718 <__aeabi_fadd+0x3c>
 80007e6:	27fe      	movs	r7, #254	; 0xfe
 80007e8:	1c6a      	adds	r2, r5, #1
 80007ea:	4217      	tst	r7, r2
 80007ec:	d000      	beq.n	80007f0 <__aeabi_fadd+0x114>
 80007ee:	e086      	b.n	80008fe <__aeabi_fadd+0x222>
 80007f0:	2d00      	cmp	r5, #0
 80007f2:	d000      	beq.n	80007f6 <__aeabi_fadd+0x11a>
 80007f4:	e0b7      	b.n	8000966 <__aeabi_fadd+0x28a>
 80007f6:	4643      	mov	r3, r8
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d100      	bne.n	80007fe <__aeabi_fadd+0x122>
 80007fc:	e0f3      	b.n	80009e6 <__aeabi_fadd+0x30a>
 80007fe:	2200      	movs	r2, #0
 8000800:	2e00      	cmp	r6, #0
 8000802:	d0b0      	beq.n	8000766 <__aeabi_fadd+0x8a>
 8000804:	1b98      	subs	r0, r3, r6
 8000806:	0143      	lsls	r3, r0, #5
 8000808:	d400      	bmi.n	800080c <__aeabi_fadd+0x130>
 800080a:	e0fa      	b.n	8000a02 <__aeabi_fadd+0x326>
 800080c:	4643      	mov	r3, r8
 800080e:	000c      	movs	r4, r1
 8000810:	1af0      	subs	r0, r6, r3
 8000812:	e797      	b.n	8000744 <__aeabi_fadd+0x68>
 8000814:	2e00      	cmp	r6, #0
 8000816:	d100      	bne.n	800081a <__aeabi_fadd+0x13e>
 8000818:	e0c8      	b.n	80009ac <__aeabi_fadd+0x2d0>
 800081a:	1e4a      	subs	r2, r1, #1
 800081c:	2901      	cmp	r1, #1
 800081e:	d100      	bne.n	8000822 <__aeabi_fadd+0x146>
 8000820:	e0ae      	b.n	8000980 <__aeabi_fadd+0x2a4>
 8000822:	29ff      	cmp	r1, #255	; 0xff
 8000824:	d023      	beq.n	800086e <__aeabi_fadd+0x192>
 8000826:	0011      	movs	r1, r2
 8000828:	e7c1      	b.n	80007ae <__aeabi_fadd+0xd2>
 800082a:	2300      	movs	r3, #0
 800082c:	22ff      	movs	r2, #255	; 0xff
 800082e:	469c      	mov	ip, r3
 8000830:	e799      	b.n	8000766 <__aeabi_fadd+0x8a>
 8000832:	21fe      	movs	r1, #254	; 0xfe
 8000834:	1c6a      	adds	r2, r5, #1
 8000836:	4211      	tst	r1, r2
 8000838:	d077      	beq.n	800092a <__aeabi_fadd+0x24e>
 800083a:	2aff      	cmp	r2, #255	; 0xff
 800083c:	d0f5      	beq.n	800082a <__aeabi_fadd+0x14e>
 800083e:	0015      	movs	r5, r2
 8000840:	4446      	add	r6, r8
 8000842:	0870      	lsrs	r0, r6, #1
 8000844:	0743      	lsls	r3, r0, #29
 8000846:	d000      	beq.n	800084a <__aeabi_fadd+0x16e>
 8000848:	e77e      	b.n	8000748 <__aeabi_fadd+0x6c>
 800084a:	08c3      	lsrs	r3, r0, #3
 800084c:	2dff      	cmp	r5, #255	; 0xff
 800084e:	d00e      	beq.n	800086e <__aeabi_fadd+0x192>
 8000850:	025b      	lsls	r3, r3, #9
 8000852:	0a5b      	lsrs	r3, r3, #9
 8000854:	469c      	mov	ip, r3
 8000856:	b2ea      	uxtb	r2, r5
 8000858:	e785      	b.n	8000766 <__aeabi_fadd+0x8a>
 800085a:	2e00      	cmp	r6, #0
 800085c:	d007      	beq.n	800086e <__aeabi_fadd+0x192>
 800085e:	2280      	movs	r2, #128	; 0x80
 8000860:	03d2      	lsls	r2, r2, #15
 8000862:	4213      	tst	r3, r2
 8000864:	d003      	beq.n	800086e <__aeabi_fadd+0x192>
 8000866:	4210      	tst	r0, r2
 8000868:	d101      	bne.n	800086e <__aeabi_fadd+0x192>
 800086a:	000c      	movs	r4, r1
 800086c:	0003      	movs	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d0db      	beq.n	800082a <__aeabi_fadd+0x14e>
 8000872:	2080      	movs	r0, #128	; 0x80
 8000874:	03c0      	lsls	r0, r0, #15
 8000876:	4318      	orrs	r0, r3
 8000878:	0240      	lsls	r0, r0, #9
 800087a:	0a43      	lsrs	r3, r0, #9
 800087c:	469c      	mov	ip, r3
 800087e:	22ff      	movs	r2, #255	; 0xff
 8000880:	e771      	b.n	8000766 <__aeabi_fadd+0x8a>
 8000882:	2900      	cmp	r1, #0
 8000884:	d0d5      	beq.n	8000832 <__aeabi_fadd+0x156>
 8000886:	1b7a      	subs	r2, r7, r5
 8000888:	2d00      	cmp	r5, #0
 800088a:	d160      	bne.n	800094e <__aeabi_fadd+0x272>
 800088c:	4643      	mov	r3, r8
 800088e:	2b00      	cmp	r3, #0
 8000890:	d024      	beq.n	80008dc <__aeabi_fadd+0x200>
 8000892:	1e53      	subs	r3, r2, #1
 8000894:	2a01      	cmp	r2, #1
 8000896:	d073      	beq.n	8000980 <__aeabi_fadd+0x2a4>
 8000898:	2aff      	cmp	r2, #255	; 0xff
 800089a:	d0e7      	beq.n	800086c <__aeabi_fadd+0x190>
 800089c:	001a      	movs	r2, r3
 800089e:	2a1b      	cmp	r2, #27
 80008a0:	dc00      	bgt.n	80008a4 <__aeabi_fadd+0x1c8>
 80008a2:	e085      	b.n	80009b0 <__aeabi_fadd+0x2d4>
 80008a4:	2001      	movs	r0, #1
 80008a6:	003d      	movs	r5, r7
 80008a8:	1980      	adds	r0, r0, r6
 80008aa:	e785      	b.n	80007b8 <__aeabi_fadd+0xdc>
 80008ac:	2320      	movs	r3, #32
 80008ae:	003a      	movs	r2, r7
 80008b0:	1b45      	subs	r5, r0, r5
 80008b2:	0038      	movs	r0, r7
 80008b4:	3501      	adds	r5, #1
 80008b6:	40ea      	lsrs	r2, r5
 80008b8:	1b5d      	subs	r5, r3, r5
 80008ba:	40a8      	lsls	r0, r5
 80008bc:	1e43      	subs	r3, r0, #1
 80008be:	4198      	sbcs	r0, r3
 80008c0:	2500      	movs	r5, #0
 80008c2:	4310      	orrs	r0, r2
 80008c4:	e73e      	b.n	8000744 <__aeabi_fadd+0x68>
 80008c6:	2320      	movs	r3, #32
 80008c8:	0030      	movs	r0, r6
 80008ca:	1a9b      	subs	r3, r3, r2
 80008cc:	0031      	movs	r1, r6
 80008ce:	4098      	lsls	r0, r3
 80008d0:	40d1      	lsrs	r1, r2
 80008d2:	1e43      	subs	r3, r0, #1
 80008d4:	4198      	sbcs	r0, r3
 80008d6:	4308      	orrs	r0, r1
 80008d8:	e722      	b.n	8000720 <__aeabi_fadd+0x44>
 80008da:	000c      	movs	r4, r1
 80008dc:	0003      	movs	r3, r0
 80008de:	0015      	movs	r5, r2
 80008e0:	e7b4      	b.n	800084c <__aeabi_fadd+0x170>
 80008e2:	2fff      	cmp	r7, #255	; 0xff
 80008e4:	d0c1      	beq.n	800086a <__aeabi_fadd+0x18e>
 80008e6:	2380      	movs	r3, #128	; 0x80
 80008e8:	4640      	mov	r0, r8
 80008ea:	04db      	lsls	r3, r3, #19
 80008ec:	4318      	orrs	r0, r3
 80008ee:	4680      	mov	r8, r0
 80008f0:	2a1b      	cmp	r2, #27
 80008f2:	dd51      	ble.n	8000998 <__aeabi_fadd+0x2bc>
 80008f4:	2001      	movs	r0, #1
 80008f6:	000c      	movs	r4, r1
 80008f8:	003d      	movs	r5, r7
 80008fa:	1a30      	subs	r0, r6, r0
 80008fc:	e712      	b.n	8000724 <__aeabi_fadd+0x48>
 80008fe:	4643      	mov	r3, r8
 8000900:	1b9f      	subs	r7, r3, r6
 8000902:	017b      	lsls	r3, r7, #5
 8000904:	d42b      	bmi.n	800095e <__aeabi_fadd+0x282>
 8000906:	2f00      	cmp	r7, #0
 8000908:	d000      	beq.n	800090c <__aeabi_fadd+0x230>
 800090a:	e710      	b.n	800072e <__aeabi_fadd+0x52>
 800090c:	2300      	movs	r3, #0
 800090e:	2400      	movs	r4, #0
 8000910:	2200      	movs	r2, #0
 8000912:	469c      	mov	ip, r3
 8000914:	e727      	b.n	8000766 <__aeabi_fadd+0x8a>
 8000916:	2320      	movs	r3, #32
 8000918:	0032      	movs	r2, r6
 800091a:	0030      	movs	r0, r6
 800091c:	40ca      	lsrs	r2, r1
 800091e:	1a59      	subs	r1, r3, r1
 8000920:	4088      	lsls	r0, r1
 8000922:	1e43      	subs	r3, r0, #1
 8000924:	4198      	sbcs	r0, r3
 8000926:	4310      	orrs	r0, r2
 8000928:	e745      	b.n	80007b6 <__aeabi_fadd+0xda>
 800092a:	2d00      	cmp	r5, #0
 800092c:	d14a      	bne.n	80009c4 <__aeabi_fadd+0x2e8>
 800092e:	4643      	mov	r3, r8
 8000930:	2b00      	cmp	r3, #0
 8000932:	d063      	beq.n	80009fc <__aeabi_fadd+0x320>
 8000934:	2200      	movs	r2, #0
 8000936:	2e00      	cmp	r6, #0
 8000938:	d100      	bne.n	800093c <__aeabi_fadd+0x260>
 800093a:	e714      	b.n	8000766 <__aeabi_fadd+0x8a>
 800093c:	0030      	movs	r0, r6
 800093e:	4440      	add	r0, r8
 8000940:	0143      	lsls	r3, r0, #5
 8000942:	d400      	bmi.n	8000946 <__aeabi_fadd+0x26a>
 8000944:	e77e      	b.n	8000844 <__aeabi_fadd+0x168>
 8000946:	4b32      	ldr	r3, [pc, #200]	; (8000a10 <__aeabi_fadd+0x334>)
 8000948:	3501      	adds	r5, #1
 800094a:	4018      	ands	r0, r3
 800094c:	e77a      	b.n	8000844 <__aeabi_fadd+0x168>
 800094e:	2fff      	cmp	r7, #255	; 0xff
 8000950:	d08c      	beq.n	800086c <__aeabi_fadd+0x190>
 8000952:	2380      	movs	r3, #128	; 0x80
 8000954:	4641      	mov	r1, r8
 8000956:	04db      	lsls	r3, r3, #19
 8000958:	4319      	orrs	r1, r3
 800095a:	4688      	mov	r8, r1
 800095c:	e79f      	b.n	800089e <__aeabi_fadd+0x1c2>
 800095e:	4643      	mov	r3, r8
 8000960:	000c      	movs	r4, r1
 8000962:	1af7      	subs	r7, r6, r3
 8000964:	e6e3      	b.n	800072e <__aeabi_fadd+0x52>
 8000966:	4642      	mov	r2, r8
 8000968:	2a00      	cmp	r2, #0
 800096a:	d000      	beq.n	800096e <__aeabi_fadd+0x292>
 800096c:	e775      	b.n	800085a <__aeabi_fadd+0x17e>
 800096e:	2e00      	cmp	r6, #0
 8000970:	d000      	beq.n	8000974 <__aeabi_fadd+0x298>
 8000972:	e77a      	b.n	800086a <__aeabi_fadd+0x18e>
 8000974:	2380      	movs	r3, #128	; 0x80
 8000976:	03db      	lsls	r3, r3, #15
 8000978:	2400      	movs	r4, #0
 800097a:	469c      	mov	ip, r3
 800097c:	22ff      	movs	r2, #255	; 0xff
 800097e:	e6f2      	b.n	8000766 <__aeabi_fadd+0x8a>
 8000980:	0030      	movs	r0, r6
 8000982:	4440      	add	r0, r8
 8000984:	2501      	movs	r5, #1
 8000986:	0143      	lsls	r3, r0, #5
 8000988:	d400      	bmi.n	800098c <__aeabi_fadd+0x2b0>
 800098a:	e75b      	b.n	8000844 <__aeabi_fadd+0x168>
 800098c:	2502      	movs	r5, #2
 800098e:	e718      	b.n	80007c2 <__aeabi_fadd+0xe6>
 8000990:	4643      	mov	r3, r8
 8000992:	2501      	movs	r5, #1
 8000994:	1b98      	subs	r0, r3, r6
 8000996:	e6c5      	b.n	8000724 <__aeabi_fadd+0x48>
 8000998:	2320      	movs	r3, #32
 800099a:	4644      	mov	r4, r8
 800099c:	4640      	mov	r0, r8
 800099e:	40d4      	lsrs	r4, r2
 80009a0:	1a9a      	subs	r2, r3, r2
 80009a2:	4090      	lsls	r0, r2
 80009a4:	1e43      	subs	r3, r0, #1
 80009a6:	4198      	sbcs	r0, r3
 80009a8:	4320      	orrs	r0, r4
 80009aa:	e7a4      	b.n	80008f6 <__aeabi_fadd+0x21a>
 80009ac:	000d      	movs	r5, r1
 80009ae:	e74d      	b.n	800084c <__aeabi_fadd+0x170>
 80009b0:	2320      	movs	r3, #32
 80009b2:	4641      	mov	r1, r8
 80009b4:	4640      	mov	r0, r8
 80009b6:	40d1      	lsrs	r1, r2
 80009b8:	1a9a      	subs	r2, r3, r2
 80009ba:	4090      	lsls	r0, r2
 80009bc:	1e43      	subs	r3, r0, #1
 80009be:	4198      	sbcs	r0, r3
 80009c0:	4308      	orrs	r0, r1
 80009c2:	e770      	b.n	80008a6 <__aeabi_fadd+0x1ca>
 80009c4:	4642      	mov	r2, r8
 80009c6:	2a00      	cmp	r2, #0
 80009c8:	d100      	bne.n	80009cc <__aeabi_fadd+0x2f0>
 80009ca:	e74f      	b.n	800086c <__aeabi_fadd+0x190>
 80009cc:	2e00      	cmp	r6, #0
 80009ce:	d100      	bne.n	80009d2 <__aeabi_fadd+0x2f6>
 80009d0:	e74d      	b.n	800086e <__aeabi_fadd+0x192>
 80009d2:	2280      	movs	r2, #128	; 0x80
 80009d4:	03d2      	lsls	r2, r2, #15
 80009d6:	4213      	tst	r3, r2
 80009d8:	d100      	bne.n	80009dc <__aeabi_fadd+0x300>
 80009da:	e748      	b.n	800086e <__aeabi_fadd+0x192>
 80009dc:	4210      	tst	r0, r2
 80009de:	d000      	beq.n	80009e2 <__aeabi_fadd+0x306>
 80009e0:	e745      	b.n	800086e <__aeabi_fadd+0x192>
 80009e2:	0003      	movs	r3, r0
 80009e4:	e743      	b.n	800086e <__aeabi_fadd+0x192>
 80009e6:	2e00      	cmp	r6, #0
 80009e8:	d090      	beq.n	800090c <__aeabi_fadd+0x230>
 80009ea:	000c      	movs	r4, r1
 80009ec:	4684      	mov	ip, r0
 80009ee:	2200      	movs	r2, #0
 80009f0:	e6b9      	b.n	8000766 <__aeabi_fadd+0x8a>
 80009f2:	4643      	mov	r3, r8
 80009f4:	000c      	movs	r4, r1
 80009f6:	1af0      	subs	r0, r6, r3
 80009f8:	3501      	adds	r5, #1
 80009fa:	e693      	b.n	8000724 <__aeabi_fadd+0x48>
 80009fc:	4684      	mov	ip, r0
 80009fe:	2200      	movs	r2, #0
 8000a00:	e6b1      	b.n	8000766 <__aeabi_fadd+0x8a>
 8000a02:	2800      	cmp	r0, #0
 8000a04:	d000      	beq.n	8000a08 <__aeabi_fadd+0x32c>
 8000a06:	e71d      	b.n	8000844 <__aeabi_fadd+0x168>
 8000a08:	2300      	movs	r3, #0
 8000a0a:	2400      	movs	r4, #0
 8000a0c:	469c      	mov	ip, r3
 8000a0e:	e6aa      	b.n	8000766 <__aeabi_fadd+0x8a>
 8000a10:	fbffffff 	.word	0xfbffffff
 8000a14:	7dffffff 	.word	0x7dffffff

08000a18 <__aeabi_fdiv>:
 8000a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a1a:	464f      	mov	r7, r9
 8000a1c:	4646      	mov	r6, r8
 8000a1e:	46d6      	mov	lr, sl
 8000a20:	0245      	lsls	r5, r0, #9
 8000a22:	b5c0      	push	{r6, r7, lr}
 8000a24:	0047      	lsls	r7, r0, #1
 8000a26:	1c0c      	adds	r4, r1, #0
 8000a28:	0a6d      	lsrs	r5, r5, #9
 8000a2a:	0e3f      	lsrs	r7, r7, #24
 8000a2c:	0fc6      	lsrs	r6, r0, #31
 8000a2e:	2f00      	cmp	r7, #0
 8000a30:	d100      	bne.n	8000a34 <__aeabi_fdiv+0x1c>
 8000a32:	e070      	b.n	8000b16 <__aeabi_fdiv+0xfe>
 8000a34:	2fff      	cmp	r7, #255	; 0xff
 8000a36:	d100      	bne.n	8000a3a <__aeabi_fdiv+0x22>
 8000a38:	e075      	b.n	8000b26 <__aeabi_fdiv+0x10e>
 8000a3a:	00eb      	lsls	r3, r5, #3
 8000a3c:	2580      	movs	r5, #128	; 0x80
 8000a3e:	04ed      	lsls	r5, r5, #19
 8000a40:	431d      	orrs	r5, r3
 8000a42:	2300      	movs	r3, #0
 8000a44:	4699      	mov	r9, r3
 8000a46:	469a      	mov	sl, r3
 8000a48:	3f7f      	subs	r7, #127	; 0x7f
 8000a4a:	0260      	lsls	r0, r4, #9
 8000a4c:	0a43      	lsrs	r3, r0, #9
 8000a4e:	4698      	mov	r8, r3
 8000a50:	0063      	lsls	r3, r4, #1
 8000a52:	0e1b      	lsrs	r3, r3, #24
 8000a54:	0fe4      	lsrs	r4, r4, #31
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d04e      	beq.n	8000af8 <__aeabi_fdiv+0xe0>
 8000a5a:	2bff      	cmp	r3, #255	; 0xff
 8000a5c:	d046      	beq.n	8000aec <__aeabi_fdiv+0xd4>
 8000a5e:	4642      	mov	r2, r8
 8000a60:	00d0      	lsls	r0, r2, #3
 8000a62:	2280      	movs	r2, #128	; 0x80
 8000a64:	04d2      	lsls	r2, r2, #19
 8000a66:	4302      	orrs	r2, r0
 8000a68:	4690      	mov	r8, r2
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	3b7f      	subs	r3, #127	; 0x7f
 8000a6e:	0031      	movs	r1, r6
 8000a70:	1aff      	subs	r7, r7, r3
 8000a72:	464b      	mov	r3, r9
 8000a74:	4061      	eors	r1, r4
 8000a76:	b2c9      	uxtb	r1, r1
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	2b0f      	cmp	r3, #15
 8000a7c:	d900      	bls.n	8000a80 <__aeabi_fdiv+0x68>
 8000a7e:	e0b5      	b.n	8000bec <__aeabi_fdiv+0x1d4>
 8000a80:	486e      	ldr	r0, [pc, #440]	; (8000c3c <__aeabi_fdiv+0x224>)
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	58c3      	ldr	r3, [r0, r3]
 8000a86:	469f      	mov	pc, r3
 8000a88:	2300      	movs	r3, #0
 8000a8a:	4698      	mov	r8, r3
 8000a8c:	0026      	movs	r6, r4
 8000a8e:	4645      	mov	r5, r8
 8000a90:	4692      	mov	sl, r2
 8000a92:	4653      	mov	r3, sl
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d100      	bne.n	8000a9a <__aeabi_fdiv+0x82>
 8000a98:	e089      	b.n	8000bae <__aeabi_fdiv+0x196>
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	d100      	bne.n	8000aa0 <__aeabi_fdiv+0x88>
 8000a9e:	e09e      	b.n	8000bde <__aeabi_fdiv+0x1c6>
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d018      	beq.n	8000ad6 <__aeabi_fdiv+0xbe>
 8000aa4:	003b      	movs	r3, r7
 8000aa6:	337f      	adds	r3, #127	; 0x7f
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	dd69      	ble.n	8000b80 <__aeabi_fdiv+0x168>
 8000aac:	076a      	lsls	r2, r5, #29
 8000aae:	d004      	beq.n	8000aba <__aeabi_fdiv+0xa2>
 8000ab0:	220f      	movs	r2, #15
 8000ab2:	402a      	ands	r2, r5
 8000ab4:	2a04      	cmp	r2, #4
 8000ab6:	d000      	beq.n	8000aba <__aeabi_fdiv+0xa2>
 8000ab8:	3504      	adds	r5, #4
 8000aba:	012a      	lsls	r2, r5, #4
 8000abc:	d503      	bpl.n	8000ac6 <__aeabi_fdiv+0xae>
 8000abe:	4b60      	ldr	r3, [pc, #384]	; (8000c40 <__aeabi_fdiv+0x228>)
 8000ac0:	401d      	ands	r5, r3
 8000ac2:	003b      	movs	r3, r7
 8000ac4:	3380      	adds	r3, #128	; 0x80
 8000ac6:	2bfe      	cmp	r3, #254	; 0xfe
 8000ac8:	dd00      	ble.n	8000acc <__aeabi_fdiv+0xb4>
 8000aca:	e070      	b.n	8000bae <__aeabi_fdiv+0x196>
 8000acc:	01ad      	lsls	r5, r5, #6
 8000ace:	0a6d      	lsrs	r5, r5, #9
 8000ad0:	b2d8      	uxtb	r0, r3
 8000ad2:	e002      	b.n	8000ada <__aeabi_fdiv+0xc2>
 8000ad4:	000e      	movs	r6, r1
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	2500      	movs	r5, #0
 8000ada:	05c0      	lsls	r0, r0, #23
 8000adc:	4328      	orrs	r0, r5
 8000ade:	07f6      	lsls	r6, r6, #31
 8000ae0:	4330      	orrs	r0, r6
 8000ae2:	bce0      	pop	{r5, r6, r7}
 8000ae4:	46ba      	mov	sl, r7
 8000ae6:	46b1      	mov	r9, r6
 8000ae8:	46a8      	mov	r8, r5
 8000aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aec:	4643      	mov	r3, r8
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d13f      	bne.n	8000b72 <__aeabi_fdiv+0x15a>
 8000af2:	2202      	movs	r2, #2
 8000af4:	3fff      	subs	r7, #255	; 0xff
 8000af6:	e003      	b.n	8000b00 <__aeabi_fdiv+0xe8>
 8000af8:	4643      	mov	r3, r8
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d12d      	bne.n	8000b5a <__aeabi_fdiv+0x142>
 8000afe:	2201      	movs	r2, #1
 8000b00:	0031      	movs	r1, r6
 8000b02:	464b      	mov	r3, r9
 8000b04:	4061      	eors	r1, r4
 8000b06:	b2c9      	uxtb	r1, r1
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	2b0f      	cmp	r3, #15
 8000b0c:	d834      	bhi.n	8000b78 <__aeabi_fdiv+0x160>
 8000b0e:	484d      	ldr	r0, [pc, #308]	; (8000c44 <__aeabi_fdiv+0x22c>)
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	58c3      	ldr	r3, [r0, r3]
 8000b14:	469f      	mov	pc, r3
 8000b16:	2d00      	cmp	r5, #0
 8000b18:	d113      	bne.n	8000b42 <__aeabi_fdiv+0x12a>
 8000b1a:	2304      	movs	r3, #4
 8000b1c:	4699      	mov	r9, r3
 8000b1e:	3b03      	subs	r3, #3
 8000b20:	2700      	movs	r7, #0
 8000b22:	469a      	mov	sl, r3
 8000b24:	e791      	b.n	8000a4a <__aeabi_fdiv+0x32>
 8000b26:	2d00      	cmp	r5, #0
 8000b28:	d105      	bne.n	8000b36 <__aeabi_fdiv+0x11e>
 8000b2a:	2308      	movs	r3, #8
 8000b2c:	4699      	mov	r9, r3
 8000b2e:	3b06      	subs	r3, #6
 8000b30:	27ff      	movs	r7, #255	; 0xff
 8000b32:	469a      	mov	sl, r3
 8000b34:	e789      	b.n	8000a4a <__aeabi_fdiv+0x32>
 8000b36:	230c      	movs	r3, #12
 8000b38:	4699      	mov	r9, r3
 8000b3a:	3b09      	subs	r3, #9
 8000b3c:	27ff      	movs	r7, #255	; 0xff
 8000b3e:	469a      	mov	sl, r3
 8000b40:	e783      	b.n	8000a4a <__aeabi_fdiv+0x32>
 8000b42:	0028      	movs	r0, r5
 8000b44:	f002 f822 	bl	8002b8c <__clzsi2>
 8000b48:	2776      	movs	r7, #118	; 0x76
 8000b4a:	1f43      	subs	r3, r0, #5
 8000b4c:	409d      	lsls	r5, r3
 8000b4e:	2300      	movs	r3, #0
 8000b50:	427f      	negs	r7, r7
 8000b52:	4699      	mov	r9, r3
 8000b54:	469a      	mov	sl, r3
 8000b56:	1a3f      	subs	r7, r7, r0
 8000b58:	e777      	b.n	8000a4a <__aeabi_fdiv+0x32>
 8000b5a:	4640      	mov	r0, r8
 8000b5c:	f002 f816 	bl	8002b8c <__clzsi2>
 8000b60:	4642      	mov	r2, r8
 8000b62:	1f43      	subs	r3, r0, #5
 8000b64:	409a      	lsls	r2, r3
 8000b66:	2376      	movs	r3, #118	; 0x76
 8000b68:	425b      	negs	r3, r3
 8000b6a:	4690      	mov	r8, r2
 8000b6c:	1a1b      	subs	r3, r3, r0
 8000b6e:	2200      	movs	r2, #0
 8000b70:	e77d      	b.n	8000a6e <__aeabi_fdiv+0x56>
 8000b72:	23ff      	movs	r3, #255	; 0xff
 8000b74:	2203      	movs	r2, #3
 8000b76:	e77a      	b.n	8000a6e <__aeabi_fdiv+0x56>
 8000b78:	000e      	movs	r6, r1
 8000b7a:	20ff      	movs	r0, #255	; 0xff
 8000b7c:	2500      	movs	r5, #0
 8000b7e:	e7ac      	b.n	8000ada <__aeabi_fdiv+0xc2>
 8000b80:	2001      	movs	r0, #1
 8000b82:	1ac0      	subs	r0, r0, r3
 8000b84:	281b      	cmp	r0, #27
 8000b86:	dca6      	bgt.n	8000ad6 <__aeabi_fdiv+0xbe>
 8000b88:	379e      	adds	r7, #158	; 0x9e
 8000b8a:	002a      	movs	r2, r5
 8000b8c:	40bd      	lsls	r5, r7
 8000b8e:	40c2      	lsrs	r2, r0
 8000b90:	1e6b      	subs	r3, r5, #1
 8000b92:	419d      	sbcs	r5, r3
 8000b94:	4315      	orrs	r5, r2
 8000b96:	076b      	lsls	r3, r5, #29
 8000b98:	d004      	beq.n	8000ba4 <__aeabi_fdiv+0x18c>
 8000b9a:	230f      	movs	r3, #15
 8000b9c:	402b      	ands	r3, r5
 8000b9e:	2b04      	cmp	r3, #4
 8000ba0:	d000      	beq.n	8000ba4 <__aeabi_fdiv+0x18c>
 8000ba2:	3504      	adds	r5, #4
 8000ba4:	016b      	lsls	r3, r5, #5
 8000ba6:	d544      	bpl.n	8000c32 <__aeabi_fdiv+0x21a>
 8000ba8:	2001      	movs	r0, #1
 8000baa:	2500      	movs	r5, #0
 8000bac:	e795      	b.n	8000ada <__aeabi_fdiv+0xc2>
 8000bae:	20ff      	movs	r0, #255	; 0xff
 8000bb0:	2500      	movs	r5, #0
 8000bb2:	e792      	b.n	8000ada <__aeabi_fdiv+0xc2>
 8000bb4:	2580      	movs	r5, #128	; 0x80
 8000bb6:	2600      	movs	r6, #0
 8000bb8:	20ff      	movs	r0, #255	; 0xff
 8000bba:	03ed      	lsls	r5, r5, #15
 8000bbc:	e78d      	b.n	8000ada <__aeabi_fdiv+0xc2>
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	4698      	mov	r8, r3
 8000bc2:	2080      	movs	r0, #128	; 0x80
 8000bc4:	03c0      	lsls	r0, r0, #15
 8000bc6:	4205      	tst	r5, r0
 8000bc8:	d009      	beq.n	8000bde <__aeabi_fdiv+0x1c6>
 8000bca:	4643      	mov	r3, r8
 8000bcc:	4203      	tst	r3, r0
 8000bce:	d106      	bne.n	8000bde <__aeabi_fdiv+0x1c6>
 8000bd0:	4645      	mov	r5, r8
 8000bd2:	4305      	orrs	r5, r0
 8000bd4:	026d      	lsls	r5, r5, #9
 8000bd6:	0026      	movs	r6, r4
 8000bd8:	20ff      	movs	r0, #255	; 0xff
 8000bda:	0a6d      	lsrs	r5, r5, #9
 8000bdc:	e77d      	b.n	8000ada <__aeabi_fdiv+0xc2>
 8000bde:	2080      	movs	r0, #128	; 0x80
 8000be0:	03c0      	lsls	r0, r0, #15
 8000be2:	4305      	orrs	r5, r0
 8000be4:	026d      	lsls	r5, r5, #9
 8000be6:	20ff      	movs	r0, #255	; 0xff
 8000be8:	0a6d      	lsrs	r5, r5, #9
 8000bea:	e776      	b.n	8000ada <__aeabi_fdiv+0xc2>
 8000bec:	4642      	mov	r2, r8
 8000bee:	016b      	lsls	r3, r5, #5
 8000bf0:	0150      	lsls	r0, r2, #5
 8000bf2:	4283      	cmp	r3, r0
 8000bf4:	d219      	bcs.n	8000c2a <__aeabi_fdiv+0x212>
 8000bf6:	221b      	movs	r2, #27
 8000bf8:	2500      	movs	r5, #0
 8000bfa:	3f01      	subs	r7, #1
 8000bfc:	2601      	movs	r6, #1
 8000bfe:	001c      	movs	r4, r3
 8000c00:	006d      	lsls	r5, r5, #1
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	2c00      	cmp	r4, #0
 8000c06:	db01      	blt.n	8000c0c <__aeabi_fdiv+0x1f4>
 8000c08:	4298      	cmp	r0, r3
 8000c0a:	d801      	bhi.n	8000c10 <__aeabi_fdiv+0x1f8>
 8000c0c:	1a1b      	subs	r3, r3, r0
 8000c0e:	4335      	orrs	r5, r6
 8000c10:	3a01      	subs	r2, #1
 8000c12:	2a00      	cmp	r2, #0
 8000c14:	d1f3      	bne.n	8000bfe <__aeabi_fdiv+0x1e6>
 8000c16:	1e5a      	subs	r2, r3, #1
 8000c18:	4193      	sbcs	r3, r2
 8000c1a:	431d      	orrs	r5, r3
 8000c1c:	003b      	movs	r3, r7
 8000c1e:	337f      	adds	r3, #127	; 0x7f
 8000c20:	000e      	movs	r6, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	dd00      	ble.n	8000c28 <__aeabi_fdiv+0x210>
 8000c26:	e741      	b.n	8000aac <__aeabi_fdiv+0x94>
 8000c28:	e7aa      	b.n	8000b80 <__aeabi_fdiv+0x168>
 8000c2a:	221a      	movs	r2, #26
 8000c2c:	2501      	movs	r5, #1
 8000c2e:	1a1b      	subs	r3, r3, r0
 8000c30:	e7e4      	b.n	8000bfc <__aeabi_fdiv+0x1e4>
 8000c32:	01ad      	lsls	r5, r5, #6
 8000c34:	2000      	movs	r0, #0
 8000c36:	0a6d      	lsrs	r5, r5, #9
 8000c38:	e74f      	b.n	8000ada <__aeabi_fdiv+0xc2>
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	0800a024 	.word	0x0800a024
 8000c40:	f7ffffff 	.word	0xf7ffffff
 8000c44:	0800a064 	.word	0x0800a064

08000c48 <__aeabi_fmul>:
 8000c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c4a:	464f      	mov	r7, r9
 8000c4c:	4646      	mov	r6, r8
 8000c4e:	46d6      	mov	lr, sl
 8000c50:	0244      	lsls	r4, r0, #9
 8000c52:	0045      	lsls	r5, r0, #1
 8000c54:	b5c0      	push	{r6, r7, lr}
 8000c56:	0a64      	lsrs	r4, r4, #9
 8000c58:	1c0f      	adds	r7, r1, #0
 8000c5a:	0e2d      	lsrs	r5, r5, #24
 8000c5c:	0fc6      	lsrs	r6, r0, #31
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	d100      	bne.n	8000c64 <__aeabi_fmul+0x1c>
 8000c62:	e08d      	b.n	8000d80 <__aeabi_fmul+0x138>
 8000c64:	2dff      	cmp	r5, #255	; 0xff
 8000c66:	d100      	bne.n	8000c6a <__aeabi_fmul+0x22>
 8000c68:	e092      	b.n	8000d90 <__aeabi_fmul+0x148>
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	2080      	movs	r0, #128	; 0x80
 8000c6e:	4699      	mov	r9, r3
 8000c70:	469a      	mov	sl, r3
 8000c72:	00e4      	lsls	r4, r4, #3
 8000c74:	04c0      	lsls	r0, r0, #19
 8000c76:	4304      	orrs	r4, r0
 8000c78:	3d7f      	subs	r5, #127	; 0x7f
 8000c7a:	0278      	lsls	r0, r7, #9
 8000c7c:	0a43      	lsrs	r3, r0, #9
 8000c7e:	4698      	mov	r8, r3
 8000c80:	007b      	lsls	r3, r7, #1
 8000c82:	0e1b      	lsrs	r3, r3, #24
 8000c84:	0fff      	lsrs	r7, r7, #31
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d100      	bne.n	8000c8c <__aeabi_fmul+0x44>
 8000c8a:	e070      	b.n	8000d6e <__aeabi_fmul+0x126>
 8000c8c:	2bff      	cmp	r3, #255	; 0xff
 8000c8e:	d100      	bne.n	8000c92 <__aeabi_fmul+0x4a>
 8000c90:	e086      	b.n	8000da0 <__aeabi_fmul+0x158>
 8000c92:	4642      	mov	r2, r8
 8000c94:	00d0      	lsls	r0, r2, #3
 8000c96:	2280      	movs	r2, #128	; 0x80
 8000c98:	3b7f      	subs	r3, #127	; 0x7f
 8000c9a:	18ed      	adds	r5, r5, r3
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	04d2      	lsls	r2, r2, #19
 8000ca0:	4302      	orrs	r2, r0
 8000ca2:	4690      	mov	r8, r2
 8000ca4:	469c      	mov	ip, r3
 8000ca6:	0031      	movs	r1, r6
 8000ca8:	464b      	mov	r3, r9
 8000caa:	4079      	eors	r1, r7
 8000cac:	1c68      	adds	r0, r5, #1
 8000cae:	2b0f      	cmp	r3, #15
 8000cb0:	d81c      	bhi.n	8000cec <__aeabi_fmul+0xa4>
 8000cb2:	4a76      	ldr	r2, [pc, #472]	; (8000e8c <__aeabi_fmul+0x244>)
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	58d3      	ldr	r3, [r2, r3]
 8000cb8:	469f      	mov	pc, r3
 8000cba:	0039      	movs	r1, r7
 8000cbc:	4644      	mov	r4, r8
 8000cbe:	46e2      	mov	sl, ip
 8000cc0:	4653      	mov	r3, sl
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d00f      	beq.n	8000ce6 <__aeabi_fmul+0x9e>
 8000cc6:	2b03      	cmp	r3, #3
 8000cc8:	d100      	bne.n	8000ccc <__aeabi_fmul+0x84>
 8000cca:	e0d7      	b.n	8000e7c <__aeabi_fmul+0x234>
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d137      	bne.n	8000d40 <__aeabi_fmul+0xf8>
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	2400      	movs	r4, #0
 8000cd4:	05c0      	lsls	r0, r0, #23
 8000cd6:	4320      	orrs	r0, r4
 8000cd8:	07c9      	lsls	r1, r1, #31
 8000cda:	4308      	orrs	r0, r1
 8000cdc:	bce0      	pop	{r5, r6, r7}
 8000cde:	46ba      	mov	sl, r7
 8000ce0:	46b1      	mov	r9, r6
 8000ce2:	46a8      	mov	r8, r5
 8000ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ce6:	20ff      	movs	r0, #255	; 0xff
 8000ce8:	2400      	movs	r4, #0
 8000cea:	e7f3      	b.n	8000cd4 <__aeabi_fmul+0x8c>
 8000cec:	0c26      	lsrs	r6, r4, #16
 8000cee:	0424      	lsls	r4, r4, #16
 8000cf0:	0c22      	lsrs	r2, r4, #16
 8000cf2:	4644      	mov	r4, r8
 8000cf4:	0424      	lsls	r4, r4, #16
 8000cf6:	0c24      	lsrs	r4, r4, #16
 8000cf8:	4643      	mov	r3, r8
 8000cfa:	0027      	movs	r7, r4
 8000cfc:	0c1b      	lsrs	r3, r3, #16
 8000cfe:	4357      	muls	r7, r2
 8000d00:	4374      	muls	r4, r6
 8000d02:	435a      	muls	r2, r3
 8000d04:	435e      	muls	r6, r3
 8000d06:	1912      	adds	r2, r2, r4
 8000d08:	0c3b      	lsrs	r3, r7, #16
 8000d0a:	189b      	adds	r3, r3, r2
 8000d0c:	429c      	cmp	r4, r3
 8000d0e:	d903      	bls.n	8000d18 <__aeabi_fmul+0xd0>
 8000d10:	2280      	movs	r2, #128	; 0x80
 8000d12:	0252      	lsls	r2, r2, #9
 8000d14:	4694      	mov	ip, r2
 8000d16:	4466      	add	r6, ip
 8000d18:	043f      	lsls	r7, r7, #16
 8000d1a:	041a      	lsls	r2, r3, #16
 8000d1c:	0c3f      	lsrs	r7, r7, #16
 8000d1e:	19d2      	adds	r2, r2, r7
 8000d20:	0194      	lsls	r4, r2, #6
 8000d22:	1e67      	subs	r7, r4, #1
 8000d24:	41bc      	sbcs	r4, r7
 8000d26:	0c1b      	lsrs	r3, r3, #16
 8000d28:	0e92      	lsrs	r2, r2, #26
 8000d2a:	199b      	adds	r3, r3, r6
 8000d2c:	4314      	orrs	r4, r2
 8000d2e:	019b      	lsls	r3, r3, #6
 8000d30:	431c      	orrs	r4, r3
 8000d32:	011b      	lsls	r3, r3, #4
 8000d34:	d400      	bmi.n	8000d38 <__aeabi_fmul+0xf0>
 8000d36:	e09b      	b.n	8000e70 <__aeabi_fmul+0x228>
 8000d38:	2301      	movs	r3, #1
 8000d3a:	0862      	lsrs	r2, r4, #1
 8000d3c:	401c      	ands	r4, r3
 8000d3e:	4314      	orrs	r4, r2
 8000d40:	0002      	movs	r2, r0
 8000d42:	327f      	adds	r2, #127	; 0x7f
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	dd64      	ble.n	8000e12 <__aeabi_fmul+0x1ca>
 8000d48:	0763      	lsls	r3, r4, #29
 8000d4a:	d004      	beq.n	8000d56 <__aeabi_fmul+0x10e>
 8000d4c:	230f      	movs	r3, #15
 8000d4e:	4023      	ands	r3, r4
 8000d50:	2b04      	cmp	r3, #4
 8000d52:	d000      	beq.n	8000d56 <__aeabi_fmul+0x10e>
 8000d54:	3404      	adds	r4, #4
 8000d56:	0123      	lsls	r3, r4, #4
 8000d58:	d503      	bpl.n	8000d62 <__aeabi_fmul+0x11a>
 8000d5a:	0002      	movs	r2, r0
 8000d5c:	4b4c      	ldr	r3, [pc, #304]	; (8000e90 <__aeabi_fmul+0x248>)
 8000d5e:	3280      	adds	r2, #128	; 0x80
 8000d60:	401c      	ands	r4, r3
 8000d62:	2afe      	cmp	r2, #254	; 0xfe
 8000d64:	dcbf      	bgt.n	8000ce6 <__aeabi_fmul+0x9e>
 8000d66:	01a4      	lsls	r4, r4, #6
 8000d68:	0a64      	lsrs	r4, r4, #9
 8000d6a:	b2d0      	uxtb	r0, r2
 8000d6c:	e7b2      	b.n	8000cd4 <__aeabi_fmul+0x8c>
 8000d6e:	4643      	mov	r3, r8
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d13d      	bne.n	8000df0 <__aeabi_fmul+0x1a8>
 8000d74:	464a      	mov	r2, r9
 8000d76:	3301      	adds	r3, #1
 8000d78:	431a      	orrs	r2, r3
 8000d7a:	4691      	mov	r9, r2
 8000d7c:	469c      	mov	ip, r3
 8000d7e:	e792      	b.n	8000ca6 <__aeabi_fmul+0x5e>
 8000d80:	2c00      	cmp	r4, #0
 8000d82:	d129      	bne.n	8000dd8 <__aeabi_fmul+0x190>
 8000d84:	2304      	movs	r3, #4
 8000d86:	4699      	mov	r9, r3
 8000d88:	3b03      	subs	r3, #3
 8000d8a:	2500      	movs	r5, #0
 8000d8c:	469a      	mov	sl, r3
 8000d8e:	e774      	b.n	8000c7a <__aeabi_fmul+0x32>
 8000d90:	2c00      	cmp	r4, #0
 8000d92:	d11b      	bne.n	8000dcc <__aeabi_fmul+0x184>
 8000d94:	2308      	movs	r3, #8
 8000d96:	4699      	mov	r9, r3
 8000d98:	3b06      	subs	r3, #6
 8000d9a:	25ff      	movs	r5, #255	; 0xff
 8000d9c:	469a      	mov	sl, r3
 8000d9e:	e76c      	b.n	8000c7a <__aeabi_fmul+0x32>
 8000da0:	4643      	mov	r3, r8
 8000da2:	35ff      	adds	r5, #255	; 0xff
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d10b      	bne.n	8000dc0 <__aeabi_fmul+0x178>
 8000da8:	2302      	movs	r3, #2
 8000daa:	464a      	mov	r2, r9
 8000dac:	431a      	orrs	r2, r3
 8000dae:	4691      	mov	r9, r2
 8000db0:	469c      	mov	ip, r3
 8000db2:	e778      	b.n	8000ca6 <__aeabi_fmul+0x5e>
 8000db4:	4653      	mov	r3, sl
 8000db6:	0031      	movs	r1, r6
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d000      	beq.n	8000dbe <__aeabi_fmul+0x176>
 8000dbc:	e783      	b.n	8000cc6 <__aeabi_fmul+0x7e>
 8000dbe:	e792      	b.n	8000ce6 <__aeabi_fmul+0x9e>
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	464a      	mov	r2, r9
 8000dc4:	431a      	orrs	r2, r3
 8000dc6:	4691      	mov	r9, r2
 8000dc8:	469c      	mov	ip, r3
 8000dca:	e76c      	b.n	8000ca6 <__aeabi_fmul+0x5e>
 8000dcc:	230c      	movs	r3, #12
 8000dce:	4699      	mov	r9, r3
 8000dd0:	3b09      	subs	r3, #9
 8000dd2:	25ff      	movs	r5, #255	; 0xff
 8000dd4:	469a      	mov	sl, r3
 8000dd6:	e750      	b.n	8000c7a <__aeabi_fmul+0x32>
 8000dd8:	0020      	movs	r0, r4
 8000dda:	f001 fed7 	bl	8002b8c <__clzsi2>
 8000dde:	2576      	movs	r5, #118	; 0x76
 8000de0:	1f43      	subs	r3, r0, #5
 8000de2:	409c      	lsls	r4, r3
 8000de4:	2300      	movs	r3, #0
 8000de6:	426d      	negs	r5, r5
 8000de8:	4699      	mov	r9, r3
 8000dea:	469a      	mov	sl, r3
 8000dec:	1a2d      	subs	r5, r5, r0
 8000dee:	e744      	b.n	8000c7a <__aeabi_fmul+0x32>
 8000df0:	4640      	mov	r0, r8
 8000df2:	f001 fecb 	bl	8002b8c <__clzsi2>
 8000df6:	4642      	mov	r2, r8
 8000df8:	1f43      	subs	r3, r0, #5
 8000dfa:	409a      	lsls	r2, r3
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	1a2d      	subs	r5, r5, r0
 8000e00:	4690      	mov	r8, r2
 8000e02:	469c      	mov	ip, r3
 8000e04:	3d76      	subs	r5, #118	; 0x76
 8000e06:	e74e      	b.n	8000ca6 <__aeabi_fmul+0x5e>
 8000e08:	2480      	movs	r4, #128	; 0x80
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	20ff      	movs	r0, #255	; 0xff
 8000e0e:	03e4      	lsls	r4, r4, #15
 8000e10:	e760      	b.n	8000cd4 <__aeabi_fmul+0x8c>
 8000e12:	2301      	movs	r3, #1
 8000e14:	1a9b      	subs	r3, r3, r2
 8000e16:	2b1b      	cmp	r3, #27
 8000e18:	dd00      	ble.n	8000e1c <__aeabi_fmul+0x1d4>
 8000e1a:	e759      	b.n	8000cd0 <__aeabi_fmul+0x88>
 8000e1c:	0022      	movs	r2, r4
 8000e1e:	309e      	adds	r0, #158	; 0x9e
 8000e20:	40da      	lsrs	r2, r3
 8000e22:	4084      	lsls	r4, r0
 8000e24:	0013      	movs	r3, r2
 8000e26:	1e62      	subs	r2, r4, #1
 8000e28:	4194      	sbcs	r4, r2
 8000e2a:	431c      	orrs	r4, r3
 8000e2c:	0763      	lsls	r3, r4, #29
 8000e2e:	d004      	beq.n	8000e3a <__aeabi_fmul+0x1f2>
 8000e30:	230f      	movs	r3, #15
 8000e32:	4023      	ands	r3, r4
 8000e34:	2b04      	cmp	r3, #4
 8000e36:	d000      	beq.n	8000e3a <__aeabi_fmul+0x1f2>
 8000e38:	3404      	adds	r4, #4
 8000e3a:	0163      	lsls	r3, r4, #5
 8000e3c:	d51a      	bpl.n	8000e74 <__aeabi_fmul+0x22c>
 8000e3e:	2001      	movs	r0, #1
 8000e40:	2400      	movs	r4, #0
 8000e42:	e747      	b.n	8000cd4 <__aeabi_fmul+0x8c>
 8000e44:	2080      	movs	r0, #128	; 0x80
 8000e46:	03c0      	lsls	r0, r0, #15
 8000e48:	4204      	tst	r4, r0
 8000e4a:	d009      	beq.n	8000e60 <__aeabi_fmul+0x218>
 8000e4c:	4643      	mov	r3, r8
 8000e4e:	4203      	tst	r3, r0
 8000e50:	d106      	bne.n	8000e60 <__aeabi_fmul+0x218>
 8000e52:	4644      	mov	r4, r8
 8000e54:	4304      	orrs	r4, r0
 8000e56:	0264      	lsls	r4, r4, #9
 8000e58:	0039      	movs	r1, r7
 8000e5a:	20ff      	movs	r0, #255	; 0xff
 8000e5c:	0a64      	lsrs	r4, r4, #9
 8000e5e:	e739      	b.n	8000cd4 <__aeabi_fmul+0x8c>
 8000e60:	2080      	movs	r0, #128	; 0x80
 8000e62:	03c0      	lsls	r0, r0, #15
 8000e64:	4304      	orrs	r4, r0
 8000e66:	0264      	lsls	r4, r4, #9
 8000e68:	0031      	movs	r1, r6
 8000e6a:	20ff      	movs	r0, #255	; 0xff
 8000e6c:	0a64      	lsrs	r4, r4, #9
 8000e6e:	e731      	b.n	8000cd4 <__aeabi_fmul+0x8c>
 8000e70:	0028      	movs	r0, r5
 8000e72:	e765      	b.n	8000d40 <__aeabi_fmul+0xf8>
 8000e74:	01a4      	lsls	r4, r4, #6
 8000e76:	2000      	movs	r0, #0
 8000e78:	0a64      	lsrs	r4, r4, #9
 8000e7a:	e72b      	b.n	8000cd4 <__aeabi_fmul+0x8c>
 8000e7c:	2080      	movs	r0, #128	; 0x80
 8000e7e:	03c0      	lsls	r0, r0, #15
 8000e80:	4304      	orrs	r4, r0
 8000e82:	0264      	lsls	r4, r4, #9
 8000e84:	20ff      	movs	r0, #255	; 0xff
 8000e86:	0a64      	lsrs	r4, r4, #9
 8000e88:	e724      	b.n	8000cd4 <__aeabi_fmul+0x8c>
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	0800a0a4 	.word	0x0800a0a4
 8000e90:	f7ffffff 	.word	0xf7ffffff

08000e94 <__aeabi_i2f>:
 8000e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e96:	2800      	cmp	r0, #0
 8000e98:	d013      	beq.n	8000ec2 <__aeabi_i2f+0x2e>
 8000e9a:	17c3      	asrs	r3, r0, #31
 8000e9c:	18c6      	adds	r6, r0, r3
 8000e9e:	405e      	eors	r6, r3
 8000ea0:	0fc4      	lsrs	r4, r0, #31
 8000ea2:	0030      	movs	r0, r6
 8000ea4:	f001 fe72 	bl	8002b8c <__clzsi2>
 8000ea8:	239e      	movs	r3, #158	; 0x9e
 8000eaa:	0005      	movs	r5, r0
 8000eac:	1a1b      	subs	r3, r3, r0
 8000eae:	2b96      	cmp	r3, #150	; 0x96
 8000eb0:	dc0f      	bgt.n	8000ed2 <__aeabi_i2f+0x3e>
 8000eb2:	2808      	cmp	r0, #8
 8000eb4:	dd01      	ble.n	8000eba <__aeabi_i2f+0x26>
 8000eb6:	3d08      	subs	r5, #8
 8000eb8:	40ae      	lsls	r6, r5
 8000eba:	0276      	lsls	r6, r6, #9
 8000ebc:	0a76      	lsrs	r6, r6, #9
 8000ebe:	b2d8      	uxtb	r0, r3
 8000ec0:	e002      	b.n	8000ec8 <__aeabi_i2f+0x34>
 8000ec2:	2400      	movs	r4, #0
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	2600      	movs	r6, #0
 8000ec8:	05c0      	lsls	r0, r0, #23
 8000eca:	4330      	orrs	r0, r6
 8000ecc:	07e4      	lsls	r4, r4, #31
 8000ece:	4320      	orrs	r0, r4
 8000ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ed2:	2b99      	cmp	r3, #153	; 0x99
 8000ed4:	dd0c      	ble.n	8000ef0 <__aeabi_i2f+0x5c>
 8000ed6:	2205      	movs	r2, #5
 8000ed8:	0031      	movs	r1, r6
 8000eda:	1a12      	subs	r2, r2, r0
 8000edc:	40d1      	lsrs	r1, r2
 8000ede:	000a      	movs	r2, r1
 8000ee0:	0001      	movs	r1, r0
 8000ee2:	0030      	movs	r0, r6
 8000ee4:	311b      	adds	r1, #27
 8000ee6:	4088      	lsls	r0, r1
 8000ee8:	1e41      	subs	r1, r0, #1
 8000eea:	4188      	sbcs	r0, r1
 8000eec:	4302      	orrs	r2, r0
 8000eee:	0016      	movs	r6, r2
 8000ef0:	2d05      	cmp	r5, #5
 8000ef2:	dc12      	bgt.n	8000f1a <__aeabi_i2f+0x86>
 8000ef4:	0031      	movs	r1, r6
 8000ef6:	4f0d      	ldr	r7, [pc, #52]	; (8000f2c <__aeabi_i2f+0x98>)
 8000ef8:	4039      	ands	r1, r7
 8000efa:	0772      	lsls	r2, r6, #29
 8000efc:	d009      	beq.n	8000f12 <__aeabi_i2f+0x7e>
 8000efe:	200f      	movs	r0, #15
 8000f00:	4030      	ands	r0, r6
 8000f02:	2804      	cmp	r0, #4
 8000f04:	d005      	beq.n	8000f12 <__aeabi_i2f+0x7e>
 8000f06:	3104      	adds	r1, #4
 8000f08:	014a      	lsls	r2, r1, #5
 8000f0a:	d502      	bpl.n	8000f12 <__aeabi_i2f+0x7e>
 8000f0c:	239f      	movs	r3, #159	; 0x9f
 8000f0e:	4039      	ands	r1, r7
 8000f10:	1b5b      	subs	r3, r3, r5
 8000f12:	0189      	lsls	r1, r1, #6
 8000f14:	0a4e      	lsrs	r6, r1, #9
 8000f16:	b2d8      	uxtb	r0, r3
 8000f18:	e7d6      	b.n	8000ec8 <__aeabi_i2f+0x34>
 8000f1a:	1f6a      	subs	r2, r5, #5
 8000f1c:	4096      	lsls	r6, r2
 8000f1e:	0031      	movs	r1, r6
 8000f20:	4f02      	ldr	r7, [pc, #8]	; (8000f2c <__aeabi_i2f+0x98>)
 8000f22:	4039      	ands	r1, r7
 8000f24:	0772      	lsls	r2, r6, #29
 8000f26:	d0f4      	beq.n	8000f12 <__aeabi_i2f+0x7e>
 8000f28:	e7e9      	b.n	8000efe <__aeabi_i2f+0x6a>
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	fbffffff 	.word	0xfbffffff

08000f30 <__aeabi_dadd>:
 8000f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f32:	464f      	mov	r7, r9
 8000f34:	4646      	mov	r6, r8
 8000f36:	46d6      	mov	lr, sl
 8000f38:	000d      	movs	r5, r1
 8000f3a:	0004      	movs	r4, r0
 8000f3c:	b5c0      	push	{r6, r7, lr}
 8000f3e:	001f      	movs	r7, r3
 8000f40:	0011      	movs	r1, r2
 8000f42:	0328      	lsls	r0, r5, #12
 8000f44:	0f62      	lsrs	r2, r4, #29
 8000f46:	0a40      	lsrs	r0, r0, #9
 8000f48:	4310      	orrs	r0, r2
 8000f4a:	007a      	lsls	r2, r7, #1
 8000f4c:	0d52      	lsrs	r2, r2, #21
 8000f4e:	00e3      	lsls	r3, r4, #3
 8000f50:	033c      	lsls	r4, r7, #12
 8000f52:	4691      	mov	r9, r2
 8000f54:	0a64      	lsrs	r4, r4, #9
 8000f56:	0ffa      	lsrs	r2, r7, #31
 8000f58:	0f4f      	lsrs	r7, r1, #29
 8000f5a:	006e      	lsls	r6, r5, #1
 8000f5c:	4327      	orrs	r7, r4
 8000f5e:	4692      	mov	sl, r2
 8000f60:	46b8      	mov	r8, r7
 8000f62:	0d76      	lsrs	r6, r6, #21
 8000f64:	0fed      	lsrs	r5, r5, #31
 8000f66:	00c9      	lsls	r1, r1, #3
 8000f68:	4295      	cmp	r5, r2
 8000f6a:	d100      	bne.n	8000f6e <__aeabi_dadd+0x3e>
 8000f6c:	e099      	b.n	80010a2 <__aeabi_dadd+0x172>
 8000f6e:	464c      	mov	r4, r9
 8000f70:	1b34      	subs	r4, r6, r4
 8000f72:	46a4      	mov	ip, r4
 8000f74:	2c00      	cmp	r4, #0
 8000f76:	dc00      	bgt.n	8000f7a <__aeabi_dadd+0x4a>
 8000f78:	e07c      	b.n	8001074 <__aeabi_dadd+0x144>
 8000f7a:	464a      	mov	r2, r9
 8000f7c:	2a00      	cmp	r2, #0
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_dadd+0x52>
 8000f80:	e0b8      	b.n	80010f4 <__aeabi_dadd+0x1c4>
 8000f82:	4ac5      	ldr	r2, [pc, #788]	; (8001298 <__aeabi_dadd+0x368>)
 8000f84:	4296      	cmp	r6, r2
 8000f86:	d100      	bne.n	8000f8a <__aeabi_dadd+0x5a>
 8000f88:	e11c      	b.n	80011c4 <__aeabi_dadd+0x294>
 8000f8a:	2280      	movs	r2, #128	; 0x80
 8000f8c:	003c      	movs	r4, r7
 8000f8e:	0412      	lsls	r2, r2, #16
 8000f90:	4314      	orrs	r4, r2
 8000f92:	46a0      	mov	r8, r4
 8000f94:	4662      	mov	r2, ip
 8000f96:	2a38      	cmp	r2, #56	; 0x38
 8000f98:	dd00      	ble.n	8000f9c <__aeabi_dadd+0x6c>
 8000f9a:	e161      	b.n	8001260 <__aeabi_dadd+0x330>
 8000f9c:	2a1f      	cmp	r2, #31
 8000f9e:	dd00      	ble.n	8000fa2 <__aeabi_dadd+0x72>
 8000fa0:	e1cc      	b.n	800133c <__aeabi_dadd+0x40c>
 8000fa2:	4664      	mov	r4, ip
 8000fa4:	2220      	movs	r2, #32
 8000fa6:	1b12      	subs	r2, r2, r4
 8000fa8:	4644      	mov	r4, r8
 8000faa:	4094      	lsls	r4, r2
 8000fac:	000f      	movs	r7, r1
 8000fae:	46a1      	mov	r9, r4
 8000fb0:	4664      	mov	r4, ip
 8000fb2:	4091      	lsls	r1, r2
 8000fb4:	40e7      	lsrs	r7, r4
 8000fb6:	464c      	mov	r4, r9
 8000fb8:	1e4a      	subs	r2, r1, #1
 8000fba:	4191      	sbcs	r1, r2
 8000fbc:	433c      	orrs	r4, r7
 8000fbe:	4642      	mov	r2, r8
 8000fc0:	4321      	orrs	r1, r4
 8000fc2:	4664      	mov	r4, ip
 8000fc4:	40e2      	lsrs	r2, r4
 8000fc6:	1a80      	subs	r0, r0, r2
 8000fc8:	1a5c      	subs	r4, r3, r1
 8000fca:	42a3      	cmp	r3, r4
 8000fcc:	419b      	sbcs	r3, r3
 8000fce:	425f      	negs	r7, r3
 8000fd0:	1bc7      	subs	r7, r0, r7
 8000fd2:	023b      	lsls	r3, r7, #8
 8000fd4:	d400      	bmi.n	8000fd8 <__aeabi_dadd+0xa8>
 8000fd6:	e0d0      	b.n	800117a <__aeabi_dadd+0x24a>
 8000fd8:	027f      	lsls	r7, r7, #9
 8000fda:	0a7f      	lsrs	r7, r7, #9
 8000fdc:	2f00      	cmp	r7, #0
 8000fde:	d100      	bne.n	8000fe2 <__aeabi_dadd+0xb2>
 8000fe0:	e0ff      	b.n	80011e2 <__aeabi_dadd+0x2b2>
 8000fe2:	0038      	movs	r0, r7
 8000fe4:	f001 fdd2 	bl	8002b8c <__clzsi2>
 8000fe8:	0001      	movs	r1, r0
 8000fea:	3908      	subs	r1, #8
 8000fec:	2320      	movs	r3, #32
 8000fee:	0022      	movs	r2, r4
 8000ff0:	1a5b      	subs	r3, r3, r1
 8000ff2:	408f      	lsls	r7, r1
 8000ff4:	40da      	lsrs	r2, r3
 8000ff6:	408c      	lsls	r4, r1
 8000ff8:	4317      	orrs	r7, r2
 8000ffa:	42b1      	cmp	r1, r6
 8000ffc:	da00      	bge.n	8001000 <__aeabi_dadd+0xd0>
 8000ffe:	e0ff      	b.n	8001200 <__aeabi_dadd+0x2d0>
 8001000:	1b89      	subs	r1, r1, r6
 8001002:	1c4b      	adds	r3, r1, #1
 8001004:	2b1f      	cmp	r3, #31
 8001006:	dd00      	ble.n	800100a <__aeabi_dadd+0xda>
 8001008:	e0a8      	b.n	800115c <__aeabi_dadd+0x22c>
 800100a:	2220      	movs	r2, #32
 800100c:	0039      	movs	r1, r7
 800100e:	1ad2      	subs	r2, r2, r3
 8001010:	0020      	movs	r0, r4
 8001012:	4094      	lsls	r4, r2
 8001014:	4091      	lsls	r1, r2
 8001016:	40d8      	lsrs	r0, r3
 8001018:	1e62      	subs	r2, r4, #1
 800101a:	4194      	sbcs	r4, r2
 800101c:	40df      	lsrs	r7, r3
 800101e:	2600      	movs	r6, #0
 8001020:	4301      	orrs	r1, r0
 8001022:	430c      	orrs	r4, r1
 8001024:	0763      	lsls	r3, r4, #29
 8001026:	d009      	beq.n	800103c <__aeabi_dadd+0x10c>
 8001028:	230f      	movs	r3, #15
 800102a:	4023      	ands	r3, r4
 800102c:	2b04      	cmp	r3, #4
 800102e:	d005      	beq.n	800103c <__aeabi_dadd+0x10c>
 8001030:	1d23      	adds	r3, r4, #4
 8001032:	42a3      	cmp	r3, r4
 8001034:	41a4      	sbcs	r4, r4
 8001036:	4264      	negs	r4, r4
 8001038:	193f      	adds	r7, r7, r4
 800103a:	001c      	movs	r4, r3
 800103c:	023b      	lsls	r3, r7, #8
 800103e:	d400      	bmi.n	8001042 <__aeabi_dadd+0x112>
 8001040:	e09e      	b.n	8001180 <__aeabi_dadd+0x250>
 8001042:	4b95      	ldr	r3, [pc, #596]	; (8001298 <__aeabi_dadd+0x368>)
 8001044:	3601      	adds	r6, #1
 8001046:	429e      	cmp	r6, r3
 8001048:	d100      	bne.n	800104c <__aeabi_dadd+0x11c>
 800104a:	e0b7      	b.n	80011bc <__aeabi_dadd+0x28c>
 800104c:	4a93      	ldr	r2, [pc, #588]	; (800129c <__aeabi_dadd+0x36c>)
 800104e:	08e4      	lsrs	r4, r4, #3
 8001050:	4017      	ands	r7, r2
 8001052:	077b      	lsls	r3, r7, #29
 8001054:	0571      	lsls	r1, r6, #21
 8001056:	027f      	lsls	r7, r7, #9
 8001058:	4323      	orrs	r3, r4
 800105a:	0b3f      	lsrs	r7, r7, #12
 800105c:	0d4a      	lsrs	r2, r1, #21
 800105e:	0512      	lsls	r2, r2, #20
 8001060:	433a      	orrs	r2, r7
 8001062:	07ed      	lsls	r5, r5, #31
 8001064:	432a      	orrs	r2, r5
 8001066:	0018      	movs	r0, r3
 8001068:	0011      	movs	r1, r2
 800106a:	bce0      	pop	{r5, r6, r7}
 800106c:	46ba      	mov	sl, r7
 800106e:	46b1      	mov	r9, r6
 8001070:	46a8      	mov	r8, r5
 8001072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001074:	2c00      	cmp	r4, #0
 8001076:	d04b      	beq.n	8001110 <__aeabi_dadd+0x1e0>
 8001078:	464c      	mov	r4, r9
 800107a:	1ba4      	subs	r4, r4, r6
 800107c:	46a4      	mov	ip, r4
 800107e:	2e00      	cmp	r6, #0
 8001080:	d000      	beq.n	8001084 <__aeabi_dadd+0x154>
 8001082:	e123      	b.n	80012cc <__aeabi_dadd+0x39c>
 8001084:	0004      	movs	r4, r0
 8001086:	431c      	orrs	r4, r3
 8001088:	d100      	bne.n	800108c <__aeabi_dadd+0x15c>
 800108a:	e1af      	b.n	80013ec <__aeabi_dadd+0x4bc>
 800108c:	4662      	mov	r2, ip
 800108e:	1e54      	subs	r4, r2, #1
 8001090:	2a01      	cmp	r2, #1
 8001092:	d100      	bne.n	8001096 <__aeabi_dadd+0x166>
 8001094:	e215      	b.n	80014c2 <__aeabi_dadd+0x592>
 8001096:	4d80      	ldr	r5, [pc, #512]	; (8001298 <__aeabi_dadd+0x368>)
 8001098:	45ac      	cmp	ip, r5
 800109a:	d100      	bne.n	800109e <__aeabi_dadd+0x16e>
 800109c:	e1c8      	b.n	8001430 <__aeabi_dadd+0x500>
 800109e:	46a4      	mov	ip, r4
 80010a0:	e11b      	b.n	80012da <__aeabi_dadd+0x3aa>
 80010a2:	464a      	mov	r2, r9
 80010a4:	1ab2      	subs	r2, r6, r2
 80010a6:	4694      	mov	ip, r2
 80010a8:	2a00      	cmp	r2, #0
 80010aa:	dc00      	bgt.n	80010ae <__aeabi_dadd+0x17e>
 80010ac:	e0ac      	b.n	8001208 <__aeabi_dadd+0x2d8>
 80010ae:	464a      	mov	r2, r9
 80010b0:	2a00      	cmp	r2, #0
 80010b2:	d043      	beq.n	800113c <__aeabi_dadd+0x20c>
 80010b4:	4a78      	ldr	r2, [pc, #480]	; (8001298 <__aeabi_dadd+0x368>)
 80010b6:	4296      	cmp	r6, r2
 80010b8:	d100      	bne.n	80010bc <__aeabi_dadd+0x18c>
 80010ba:	e1af      	b.n	800141c <__aeabi_dadd+0x4ec>
 80010bc:	2280      	movs	r2, #128	; 0x80
 80010be:	003c      	movs	r4, r7
 80010c0:	0412      	lsls	r2, r2, #16
 80010c2:	4314      	orrs	r4, r2
 80010c4:	46a0      	mov	r8, r4
 80010c6:	4662      	mov	r2, ip
 80010c8:	2a38      	cmp	r2, #56	; 0x38
 80010ca:	dc67      	bgt.n	800119c <__aeabi_dadd+0x26c>
 80010cc:	2a1f      	cmp	r2, #31
 80010ce:	dc00      	bgt.n	80010d2 <__aeabi_dadd+0x1a2>
 80010d0:	e15f      	b.n	8001392 <__aeabi_dadd+0x462>
 80010d2:	4647      	mov	r7, r8
 80010d4:	3a20      	subs	r2, #32
 80010d6:	40d7      	lsrs	r7, r2
 80010d8:	4662      	mov	r2, ip
 80010da:	2a20      	cmp	r2, #32
 80010dc:	d005      	beq.n	80010ea <__aeabi_dadd+0x1ba>
 80010de:	4664      	mov	r4, ip
 80010e0:	2240      	movs	r2, #64	; 0x40
 80010e2:	1b12      	subs	r2, r2, r4
 80010e4:	4644      	mov	r4, r8
 80010e6:	4094      	lsls	r4, r2
 80010e8:	4321      	orrs	r1, r4
 80010ea:	1e4a      	subs	r2, r1, #1
 80010ec:	4191      	sbcs	r1, r2
 80010ee:	000c      	movs	r4, r1
 80010f0:	433c      	orrs	r4, r7
 80010f2:	e057      	b.n	80011a4 <__aeabi_dadd+0x274>
 80010f4:	003a      	movs	r2, r7
 80010f6:	430a      	orrs	r2, r1
 80010f8:	d100      	bne.n	80010fc <__aeabi_dadd+0x1cc>
 80010fa:	e105      	b.n	8001308 <__aeabi_dadd+0x3d8>
 80010fc:	0022      	movs	r2, r4
 80010fe:	3a01      	subs	r2, #1
 8001100:	2c01      	cmp	r4, #1
 8001102:	d100      	bne.n	8001106 <__aeabi_dadd+0x1d6>
 8001104:	e182      	b.n	800140c <__aeabi_dadd+0x4dc>
 8001106:	4c64      	ldr	r4, [pc, #400]	; (8001298 <__aeabi_dadd+0x368>)
 8001108:	45a4      	cmp	ip, r4
 800110a:	d05b      	beq.n	80011c4 <__aeabi_dadd+0x294>
 800110c:	4694      	mov	ip, r2
 800110e:	e741      	b.n	8000f94 <__aeabi_dadd+0x64>
 8001110:	4c63      	ldr	r4, [pc, #396]	; (80012a0 <__aeabi_dadd+0x370>)
 8001112:	1c77      	adds	r7, r6, #1
 8001114:	4227      	tst	r7, r4
 8001116:	d000      	beq.n	800111a <__aeabi_dadd+0x1ea>
 8001118:	e0c4      	b.n	80012a4 <__aeabi_dadd+0x374>
 800111a:	0004      	movs	r4, r0
 800111c:	431c      	orrs	r4, r3
 800111e:	2e00      	cmp	r6, #0
 8001120:	d000      	beq.n	8001124 <__aeabi_dadd+0x1f4>
 8001122:	e169      	b.n	80013f8 <__aeabi_dadd+0x4c8>
 8001124:	2c00      	cmp	r4, #0
 8001126:	d100      	bne.n	800112a <__aeabi_dadd+0x1fa>
 8001128:	e1bf      	b.n	80014aa <__aeabi_dadd+0x57a>
 800112a:	4644      	mov	r4, r8
 800112c:	430c      	orrs	r4, r1
 800112e:	d000      	beq.n	8001132 <__aeabi_dadd+0x202>
 8001130:	e1d0      	b.n	80014d4 <__aeabi_dadd+0x5a4>
 8001132:	0742      	lsls	r2, r0, #29
 8001134:	08db      	lsrs	r3, r3, #3
 8001136:	4313      	orrs	r3, r2
 8001138:	08c0      	lsrs	r0, r0, #3
 800113a:	e029      	b.n	8001190 <__aeabi_dadd+0x260>
 800113c:	003a      	movs	r2, r7
 800113e:	430a      	orrs	r2, r1
 8001140:	d100      	bne.n	8001144 <__aeabi_dadd+0x214>
 8001142:	e170      	b.n	8001426 <__aeabi_dadd+0x4f6>
 8001144:	4662      	mov	r2, ip
 8001146:	4664      	mov	r4, ip
 8001148:	3a01      	subs	r2, #1
 800114a:	2c01      	cmp	r4, #1
 800114c:	d100      	bne.n	8001150 <__aeabi_dadd+0x220>
 800114e:	e0e0      	b.n	8001312 <__aeabi_dadd+0x3e2>
 8001150:	4c51      	ldr	r4, [pc, #324]	; (8001298 <__aeabi_dadd+0x368>)
 8001152:	45a4      	cmp	ip, r4
 8001154:	d100      	bne.n	8001158 <__aeabi_dadd+0x228>
 8001156:	e161      	b.n	800141c <__aeabi_dadd+0x4ec>
 8001158:	4694      	mov	ip, r2
 800115a:	e7b4      	b.n	80010c6 <__aeabi_dadd+0x196>
 800115c:	003a      	movs	r2, r7
 800115e:	391f      	subs	r1, #31
 8001160:	40ca      	lsrs	r2, r1
 8001162:	0011      	movs	r1, r2
 8001164:	2b20      	cmp	r3, #32
 8001166:	d003      	beq.n	8001170 <__aeabi_dadd+0x240>
 8001168:	2240      	movs	r2, #64	; 0x40
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	409f      	lsls	r7, r3
 800116e:	433c      	orrs	r4, r7
 8001170:	1e63      	subs	r3, r4, #1
 8001172:	419c      	sbcs	r4, r3
 8001174:	2700      	movs	r7, #0
 8001176:	2600      	movs	r6, #0
 8001178:	430c      	orrs	r4, r1
 800117a:	0763      	lsls	r3, r4, #29
 800117c:	d000      	beq.n	8001180 <__aeabi_dadd+0x250>
 800117e:	e753      	b.n	8001028 <__aeabi_dadd+0xf8>
 8001180:	46b4      	mov	ip, r6
 8001182:	08e4      	lsrs	r4, r4, #3
 8001184:	077b      	lsls	r3, r7, #29
 8001186:	4323      	orrs	r3, r4
 8001188:	08f8      	lsrs	r0, r7, #3
 800118a:	4a43      	ldr	r2, [pc, #268]	; (8001298 <__aeabi_dadd+0x368>)
 800118c:	4594      	cmp	ip, r2
 800118e:	d01d      	beq.n	80011cc <__aeabi_dadd+0x29c>
 8001190:	4662      	mov	r2, ip
 8001192:	0307      	lsls	r7, r0, #12
 8001194:	0552      	lsls	r2, r2, #21
 8001196:	0b3f      	lsrs	r7, r7, #12
 8001198:	0d52      	lsrs	r2, r2, #21
 800119a:	e760      	b.n	800105e <__aeabi_dadd+0x12e>
 800119c:	4644      	mov	r4, r8
 800119e:	430c      	orrs	r4, r1
 80011a0:	1e62      	subs	r2, r4, #1
 80011a2:	4194      	sbcs	r4, r2
 80011a4:	18e4      	adds	r4, r4, r3
 80011a6:	429c      	cmp	r4, r3
 80011a8:	419b      	sbcs	r3, r3
 80011aa:	425f      	negs	r7, r3
 80011ac:	183f      	adds	r7, r7, r0
 80011ae:	023b      	lsls	r3, r7, #8
 80011b0:	d5e3      	bpl.n	800117a <__aeabi_dadd+0x24a>
 80011b2:	4b39      	ldr	r3, [pc, #228]	; (8001298 <__aeabi_dadd+0x368>)
 80011b4:	3601      	adds	r6, #1
 80011b6:	429e      	cmp	r6, r3
 80011b8:	d000      	beq.n	80011bc <__aeabi_dadd+0x28c>
 80011ba:	e0b5      	b.n	8001328 <__aeabi_dadd+0x3f8>
 80011bc:	0032      	movs	r2, r6
 80011be:	2700      	movs	r7, #0
 80011c0:	2300      	movs	r3, #0
 80011c2:	e74c      	b.n	800105e <__aeabi_dadd+0x12e>
 80011c4:	0742      	lsls	r2, r0, #29
 80011c6:	08db      	lsrs	r3, r3, #3
 80011c8:	4313      	orrs	r3, r2
 80011ca:	08c0      	lsrs	r0, r0, #3
 80011cc:	001a      	movs	r2, r3
 80011ce:	4302      	orrs	r2, r0
 80011d0:	d100      	bne.n	80011d4 <__aeabi_dadd+0x2a4>
 80011d2:	e1e1      	b.n	8001598 <__aeabi_dadd+0x668>
 80011d4:	2780      	movs	r7, #128	; 0x80
 80011d6:	033f      	lsls	r7, r7, #12
 80011d8:	4307      	orrs	r7, r0
 80011da:	033f      	lsls	r7, r7, #12
 80011dc:	4a2e      	ldr	r2, [pc, #184]	; (8001298 <__aeabi_dadd+0x368>)
 80011de:	0b3f      	lsrs	r7, r7, #12
 80011e0:	e73d      	b.n	800105e <__aeabi_dadd+0x12e>
 80011e2:	0020      	movs	r0, r4
 80011e4:	f001 fcd2 	bl	8002b8c <__clzsi2>
 80011e8:	0001      	movs	r1, r0
 80011ea:	3118      	adds	r1, #24
 80011ec:	291f      	cmp	r1, #31
 80011ee:	dc00      	bgt.n	80011f2 <__aeabi_dadd+0x2c2>
 80011f0:	e6fc      	b.n	8000fec <__aeabi_dadd+0xbc>
 80011f2:	3808      	subs	r0, #8
 80011f4:	4084      	lsls	r4, r0
 80011f6:	0027      	movs	r7, r4
 80011f8:	2400      	movs	r4, #0
 80011fa:	42b1      	cmp	r1, r6
 80011fc:	db00      	blt.n	8001200 <__aeabi_dadd+0x2d0>
 80011fe:	e6ff      	b.n	8001000 <__aeabi_dadd+0xd0>
 8001200:	4a26      	ldr	r2, [pc, #152]	; (800129c <__aeabi_dadd+0x36c>)
 8001202:	1a76      	subs	r6, r6, r1
 8001204:	4017      	ands	r7, r2
 8001206:	e70d      	b.n	8001024 <__aeabi_dadd+0xf4>
 8001208:	2a00      	cmp	r2, #0
 800120a:	d02f      	beq.n	800126c <__aeabi_dadd+0x33c>
 800120c:	464a      	mov	r2, r9
 800120e:	1b92      	subs	r2, r2, r6
 8001210:	4694      	mov	ip, r2
 8001212:	2e00      	cmp	r6, #0
 8001214:	d100      	bne.n	8001218 <__aeabi_dadd+0x2e8>
 8001216:	e0ad      	b.n	8001374 <__aeabi_dadd+0x444>
 8001218:	4a1f      	ldr	r2, [pc, #124]	; (8001298 <__aeabi_dadd+0x368>)
 800121a:	4591      	cmp	r9, r2
 800121c:	d100      	bne.n	8001220 <__aeabi_dadd+0x2f0>
 800121e:	e10f      	b.n	8001440 <__aeabi_dadd+0x510>
 8001220:	2280      	movs	r2, #128	; 0x80
 8001222:	0412      	lsls	r2, r2, #16
 8001224:	4310      	orrs	r0, r2
 8001226:	4662      	mov	r2, ip
 8001228:	2a38      	cmp	r2, #56	; 0x38
 800122a:	dd00      	ble.n	800122e <__aeabi_dadd+0x2fe>
 800122c:	e10f      	b.n	800144e <__aeabi_dadd+0x51e>
 800122e:	2a1f      	cmp	r2, #31
 8001230:	dd00      	ble.n	8001234 <__aeabi_dadd+0x304>
 8001232:	e180      	b.n	8001536 <__aeabi_dadd+0x606>
 8001234:	4664      	mov	r4, ip
 8001236:	2220      	movs	r2, #32
 8001238:	001e      	movs	r6, r3
 800123a:	1b12      	subs	r2, r2, r4
 800123c:	4667      	mov	r7, ip
 800123e:	0004      	movs	r4, r0
 8001240:	4093      	lsls	r3, r2
 8001242:	4094      	lsls	r4, r2
 8001244:	40fe      	lsrs	r6, r7
 8001246:	1e5a      	subs	r2, r3, #1
 8001248:	4193      	sbcs	r3, r2
 800124a:	40f8      	lsrs	r0, r7
 800124c:	4334      	orrs	r4, r6
 800124e:	431c      	orrs	r4, r3
 8001250:	4480      	add	r8, r0
 8001252:	1864      	adds	r4, r4, r1
 8001254:	428c      	cmp	r4, r1
 8001256:	41bf      	sbcs	r7, r7
 8001258:	427f      	negs	r7, r7
 800125a:	464e      	mov	r6, r9
 800125c:	4447      	add	r7, r8
 800125e:	e7a6      	b.n	80011ae <__aeabi_dadd+0x27e>
 8001260:	4642      	mov	r2, r8
 8001262:	430a      	orrs	r2, r1
 8001264:	0011      	movs	r1, r2
 8001266:	1e4a      	subs	r2, r1, #1
 8001268:	4191      	sbcs	r1, r2
 800126a:	e6ad      	b.n	8000fc8 <__aeabi_dadd+0x98>
 800126c:	4c0c      	ldr	r4, [pc, #48]	; (80012a0 <__aeabi_dadd+0x370>)
 800126e:	1c72      	adds	r2, r6, #1
 8001270:	4222      	tst	r2, r4
 8001272:	d000      	beq.n	8001276 <__aeabi_dadd+0x346>
 8001274:	e0a1      	b.n	80013ba <__aeabi_dadd+0x48a>
 8001276:	0002      	movs	r2, r0
 8001278:	431a      	orrs	r2, r3
 800127a:	2e00      	cmp	r6, #0
 800127c:	d000      	beq.n	8001280 <__aeabi_dadd+0x350>
 800127e:	e0fa      	b.n	8001476 <__aeabi_dadd+0x546>
 8001280:	2a00      	cmp	r2, #0
 8001282:	d100      	bne.n	8001286 <__aeabi_dadd+0x356>
 8001284:	e145      	b.n	8001512 <__aeabi_dadd+0x5e2>
 8001286:	003a      	movs	r2, r7
 8001288:	430a      	orrs	r2, r1
 800128a:	d000      	beq.n	800128e <__aeabi_dadd+0x35e>
 800128c:	e146      	b.n	800151c <__aeabi_dadd+0x5ec>
 800128e:	0742      	lsls	r2, r0, #29
 8001290:	08db      	lsrs	r3, r3, #3
 8001292:	4313      	orrs	r3, r2
 8001294:	08c0      	lsrs	r0, r0, #3
 8001296:	e77b      	b.n	8001190 <__aeabi_dadd+0x260>
 8001298:	000007ff 	.word	0x000007ff
 800129c:	ff7fffff 	.word	0xff7fffff
 80012a0:	000007fe 	.word	0x000007fe
 80012a4:	4647      	mov	r7, r8
 80012a6:	1a5c      	subs	r4, r3, r1
 80012a8:	1bc2      	subs	r2, r0, r7
 80012aa:	42a3      	cmp	r3, r4
 80012ac:	41bf      	sbcs	r7, r7
 80012ae:	427f      	negs	r7, r7
 80012b0:	46b9      	mov	r9, r7
 80012b2:	0017      	movs	r7, r2
 80012b4:	464a      	mov	r2, r9
 80012b6:	1abf      	subs	r7, r7, r2
 80012b8:	023a      	lsls	r2, r7, #8
 80012ba:	d500      	bpl.n	80012be <__aeabi_dadd+0x38e>
 80012bc:	e08d      	b.n	80013da <__aeabi_dadd+0x4aa>
 80012be:	0023      	movs	r3, r4
 80012c0:	433b      	orrs	r3, r7
 80012c2:	d000      	beq.n	80012c6 <__aeabi_dadd+0x396>
 80012c4:	e68a      	b.n	8000fdc <__aeabi_dadd+0xac>
 80012c6:	2000      	movs	r0, #0
 80012c8:	2500      	movs	r5, #0
 80012ca:	e761      	b.n	8001190 <__aeabi_dadd+0x260>
 80012cc:	4cb4      	ldr	r4, [pc, #720]	; (80015a0 <__aeabi_dadd+0x670>)
 80012ce:	45a1      	cmp	r9, r4
 80012d0:	d100      	bne.n	80012d4 <__aeabi_dadd+0x3a4>
 80012d2:	e0ad      	b.n	8001430 <__aeabi_dadd+0x500>
 80012d4:	2480      	movs	r4, #128	; 0x80
 80012d6:	0424      	lsls	r4, r4, #16
 80012d8:	4320      	orrs	r0, r4
 80012da:	4664      	mov	r4, ip
 80012dc:	2c38      	cmp	r4, #56	; 0x38
 80012de:	dc3d      	bgt.n	800135c <__aeabi_dadd+0x42c>
 80012e0:	4662      	mov	r2, ip
 80012e2:	2c1f      	cmp	r4, #31
 80012e4:	dd00      	ble.n	80012e8 <__aeabi_dadd+0x3b8>
 80012e6:	e0b7      	b.n	8001458 <__aeabi_dadd+0x528>
 80012e8:	2520      	movs	r5, #32
 80012ea:	001e      	movs	r6, r3
 80012ec:	1b2d      	subs	r5, r5, r4
 80012ee:	0004      	movs	r4, r0
 80012f0:	40ab      	lsls	r3, r5
 80012f2:	40ac      	lsls	r4, r5
 80012f4:	40d6      	lsrs	r6, r2
 80012f6:	40d0      	lsrs	r0, r2
 80012f8:	4642      	mov	r2, r8
 80012fa:	1e5d      	subs	r5, r3, #1
 80012fc:	41ab      	sbcs	r3, r5
 80012fe:	4334      	orrs	r4, r6
 8001300:	1a12      	subs	r2, r2, r0
 8001302:	4690      	mov	r8, r2
 8001304:	4323      	orrs	r3, r4
 8001306:	e02c      	b.n	8001362 <__aeabi_dadd+0x432>
 8001308:	0742      	lsls	r2, r0, #29
 800130a:	08db      	lsrs	r3, r3, #3
 800130c:	4313      	orrs	r3, r2
 800130e:	08c0      	lsrs	r0, r0, #3
 8001310:	e73b      	b.n	800118a <__aeabi_dadd+0x25a>
 8001312:	185c      	adds	r4, r3, r1
 8001314:	429c      	cmp	r4, r3
 8001316:	419b      	sbcs	r3, r3
 8001318:	4440      	add	r0, r8
 800131a:	425b      	negs	r3, r3
 800131c:	18c7      	adds	r7, r0, r3
 800131e:	2601      	movs	r6, #1
 8001320:	023b      	lsls	r3, r7, #8
 8001322:	d400      	bmi.n	8001326 <__aeabi_dadd+0x3f6>
 8001324:	e729      	b.n	800117a <__aeabi_dadd+0x24a>
 8001326:	2602      	movs	r6, #2
 8001328:	4a9e      	ldr	r2, [pc, #632]	; (80015a4 <__aeabi_dadd+0x674>)
 800132a:	0863      	lsrs	r3, r4, #1
 800132c:	4017      	ands	r7, r2
 800132e:	2201      	movs	r2, #1
 8001330:	4014      	ands	r4, r2
 8001332:	431c      	orrs	r4, r3
 8001334:	07fb      	lsls	r3, r7, #31
 8001336:	431c      	orrs	r4, r3
 8001338:	087f      	lsrs	r7, r7, #1
 800133a:	e673      	b.n	8001024 <__aeabi_dadd+0xf4>
 800133c:	4644      	mov	r4, r8
 800133e:	3a20      	subs	r2, #32
 8001340:	40d4      	lsrs	r4, r2
 8001342:	4662      	mov	r2, ip
 8001344:	2a20      	cmp	r2, #32
 8001346:	d005      	beq.n	8001354 <__aeabi_dadd+0x424>
 8001348:	4667      	mov	r7, ip
 800134a:	2240      	movs	r2, #64	; 0x40
 800134c:	1bd2      	subs	r2, r2, r7
 800134e:	4647      	mov	r7, r8
 8001350:	4097      	lsls	r7, r2
 8001352:	4339      	orrs	r1, r7
 8001354:	1e4a      	subs	r2, r1, #1
 8001356:	4191      	sbcs	r1, r2
 8001358:	4321      	orrs	r1, r4
 800135a:	e635      	b.n	8000fc8 <__aeabi_dadd+0x98>
 800135c:	4303      	orrs	r3, r0
 800135e:	1e58      	subs	r0, r3, #1
 8001360:	4183      	sbcs	r3, r0
 8001362:	1acc      	subs	r4, r1, r3
 8001364:	42a1      	cmp	r1, r4
 8001366:	41bf      	sbcs	r7, r7
 8001368:	4643      	mov	r3, r8
 800136a:	427f      	negs	r7, r7
 800136c:	4655      	mov	r5, sl
 800136e:	464e      	mov	r6, r9
 8001370:	1bdf      	subs	r7, r3, r7
 8001372:	e62e      	b.n	8000fd2 <__aeabi_dadd+0xa2>
 8001374:	0002      	movs	r2, r0
 8001376:	431a      	orrs	r2, r3
 8001378:	d100      	bne.n	800137c <__aeabi_dadd+0x44c>
 800137a:	e0bd      	b.n	80014f8 <__aeabi_dadd+0x5c8>
 800137c:	4662      	mov	r2, ip
 800137e:	4664      	mov	r4, ip
 8001380:	3a01      	subs	r2, #1
 8001382:	2c01      	cmp	r4, #1
 8001384:	d100      	bne.n	8001388 <__aeabi_dadd+0x458>
 8001386:	e0e5      	b.n	8001554 <__aeabi_dadd+0x624>
 8001388:	4c85      	ldr	r4, [pc, #532]	; (80015a0 <__aeabi_dadd+0x670>)
 800138a:	45a4      	cmp	ip, r4
 800138c:	d058      	beq.n	8001440 <__aeabi_dadd+0x510>
 800138e:	4694      	mov	ip, r2
 8001390:	e749      	b.n	8001226 <__aeabi_dadd+0x2f6>
 8001392:	4664      	mov	r4, ip
 8001394:	2220      	movs	r2, #32
 8001396:	1b12      	subs	r2, r2, r4
 8001398:	4644      	mov	r4, r8
 800139a:	4094      	lsls	r4, r2
 800139c:	000f      	movs	r7, r1
 800139e:	46a1      	mov	r9, r4
 80013a0:	4664      	mov	r4, ip
 80013a2:	4091      	lsls	r1, r2
 80013a4:	40e7      	lsrs	r7, r4
 80013a6:	464c      	mov	r4, r9
 80013a8:	1e4a      	subs	r2, r1, #1
 80013aa:	4191      	sbcs	r1, r2
 80013ac:	433c      	orrs	r4, r7
 80013ae:	4642      	mov	r2, r8
 80013b0:	430c      	orrs	r4, r1
 80013b2:	4661      	mov	r1, ip
 80013b4:	40ca      	lsrs	r2, r1
 80013b6:	1880      	adds	r0, r0, r2
 80013b8:	e6f4      	b.n	80011a4 <__aeabi_dadd+0x274>
 80013ba:	4c79      	ldr	r4, [pc, #484]	; (80015a0 <__aeabi_dadd+0x670>)
 80013bc:	42a2      	cmp	r2, r4
 80013be:	d100      	bne.n	80013c2 <__aeabi_dadd+0x492>
 80013c0:	e6fd      	b.n	80011be <__aeabi_dadd+0x28e>
 80013c2:	1859      	adds	r1, r3, r1
 80013c4:	4299      	cmp	r1, r3
 80013c6:	419b      	sbcs	r3, r3
 80013c8:	4440      	add	r0, r8
 80013ca:	425f      	negs	r7, r3
 80013cc:	19c7      	adds	r7, r0, r7
 80013ce:	07fc      	lsls	r4, r7, #31
 80013d0:	0849      	lsrs	r1, r1, #1
 80013d2:	0016      	movs	r6, r2
 80013d4:	430c      	orrs	r4, r1
 80013d6:	087f      	lsrs	r7, r7, #1
 80013d8:	e6cf      	b.n	800117a <__aeabi_dadd+0x24a>
 80013da:	1acc      	subs	r4, r1, r3
 80013dc:	42a1      	cmp	r1, r4
 80013de:	41bf      	sbcs	r7, r7
 80013e0:	4643      	mov	r3, r8
 80013e2:	427f      	negs	r7, r7
 80013e4:	1a18      	subs	r0, r3, r0
 80013e6:	4655      	mov	r5, sl
 80013e8:	1bc7      	subs	r7, r0, r7
 80013ea:	e5f7      	b.n	8000fdc <__aeabi_dadd+0xac>
 80013ec:	08c9      	lsrs	r1, r1, #3
 80013ee:	077b      	lsls	r3, r7, #29
 80013f0:	4655      	mov	r5, sl
 80013f2:	430b      	orrs	r3, r1
 80013f4:	08f8      	lsrs	r0, r7, #3
 80013f6:	e6c8      	b.n	800118a <__aeabi_dadd+0x25a>
 80013f8:	2c00      	cmp	r4, #0
 80013fa:	d000      	beq.n	80013fe <__aeabi_dadd+0x4ce>
 80013fc:	e081      	b.n	8001502 <__aeabi_dadd+0x5d2>
 80013fe:	4643      	mov	r3, r8
 8001400:	430b      	orrs	r3, r1
 8001402:	d115      	bne.n	8001430 <__aeabi_dadd+0x500>
 8001404:	2080      	movs	r0, #128	; 0x80
 8001406:	2500      	movs	r5, #0
 8001408:	0300      	lsls	r0, r0, #12
 800140a:	e6e3      	b.n	80011d4 <__aeabi_dadd+0x2a4>
 800140c:	1a5c      	subs	r4, r3, r1
 800140e:	42a3      	cmp	r3, r4
 8001410:	419b      	sbcs	r3, r3
 8001412:	1bc7      	subs	r7, r0, r7
 8001414:	425b      	negs	r3, r3
 8001416:	2601      	movs	r6, #1
 8001418:	1aff      	subs	r7, r7, r3
 800141a:	e5da      	b.n	8000fd2 <__aeabi_dadd+0xa2>
 800141c:	0742      	lsls	r2, r0, #29
 800141e:	08db      	lsrs	r3, r3, #3
 8001420:	4313      	orrs	r3, r2
 8001422:	08c0      	lsrs	r0, r0, #3
 8001424:	e6d2      	b.n	80011cc <__aeabi_dadd+0x29c>
 8001426:	0742      	lsls	r2, r0, #29
 8001428:	08db      	lsrs	r3, r3, #3
 800142a:	4313      	orrs	r3, r2
 800142c:	08c0      	lsrs	r0, r0, #3
 800142e:	e6ac      	b.n	800118a <__aeabi_dadd+0x25a>
 8001430:	4643      	mov	r3, r8
 8001432:	4642      	mov	r2, r8
 8001434:	08c9      	lsrs	r1, r1, #3
 8001436:	075b      	lsls	r3, r3, #29
 8001438:	4655      	mov	r5, sl
 800143a:	430b      	orrs	r3, r1
 800143c:	08d0      	lsrs	r0, r2, #3
 800143e:	e6c5      	b.n	80011cc <__aeabi_dadd+0x29c>
 8001440:	4643      	mov	r3, r8
 8001442:	4642      	mov	r2, r8
 8001444:	075b      	lsls	r3, r3, #29
 8001446:	08c9      	lsrs	r1, r1, #3
 8001448:	430b      	orrs	r3, r1
 800144a:	08d0      	lsrs	r0, r2, #3
 800144c:	e6be      	b.n	80011cc <__aeabi_dadd+0x29c>
 800144e:	4303      	orrs	r3, r0
 8001450:	001c      	movs	r4, r3
 8001452:	1e63      	subs	r3, r4, #1
 8001454:	419c      	sbcs	r4, r3
 8001456:	e6fc      	b.n	8001252 <__aeabi_dadd+0x322>
 8001458:	0002      	movs	r2, r0
 800145a:	3c20      	subs	r4, #32
 800145c:	40e2      	lsrs	r2, r4
 800145e:	0014      	movs	r4, r2
 8001460:	4662      	mov	r2, ip
 8001462:	2a20      	cmp	r2, #32
 8001464:	d003      	beq.n	800146e <__aeabi_dadd+0x53e>
 8001466:	2540      	movs	r5, #64	; 0x40
 8001468:	1aad      	subs	r5, r5, r2
 800146a:	40a8      	lsls	r0, r5
 800146c:	4303      	orrs	r3, r0
 800146e:	1e58      	subs	r0, r3, #1
 8001470:	4183      	sbcs	r3, r0
 8001472:	4323      	orrs	r3, r4
 8001474:	e775      	b.n	8001362 <__aeabi_dadd+0x432>
 8001476:	2a00      	cmp	r2, #0
 8001478:	d0e2      	beq.n	8001440 <__aeabi_dadd+0x510>
 800147a:	003a      	movs	r2, r7
 800147c:	430a      	orrs	r2, r1
 800147e:	d0cd      	beq.n	800141c <__aeabi_dadd+0x4ec>
 8001480:	0742      	lsls	r2, r0, #29
 8001482:	08db      	lsrs	r3, r3, #3
 8001484:	4313      	orrs	r3, r2
 8001486:	2280      	movs	r2, #128	; 0x80
 8001488:	08c0      	lsrs	r0, r0, #3
 800148a:	0312      	lsls	r2, r2, #12
 800148c:	4210      	tst	r0, r2
 800148e:	d006      	beq.n	800149e <__aeabi_dadd+0x56e>
 8001490:	08fc      	lsrs	r4, r7, #3
 8001492:	4214      	tst	r4, r2
 8001494:	d103      	bne.n	800149e <__aeabi_dadd+0x56e>
 8001496:	0020      	movs	r0, r4
 8001498:	08cb      	lsrs	r3, r1, #3
 800149a:	077a      	lsls	r2, r7, #29
 800149c:	4313      	orrs	r3, r2
 800149e:	0f5a      	lsrs	r2, r3, #29
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	0752      	lsls	r2, r2, #29
 80014a4:	08db      	lsrs	r3, r3, #3
 80014a6:	4313      	orrs	r3, r2
 80014a8:	e690      	b.n	80011cc <__aeabi_dadd+0x29c>
 80014aa:	4643      	mov	r3, r8
 80014ac:	430b      	orrs	r3, r1
 80014ae:	d100      	bne.n	80014b2 <__aeabi_dadd+0x582>
 80014b0:	e709      	b.n	80012c6 <__aeabi_dadd+0x396>
 80014b2:	4643      	mov	r3, r8
 80014b4:	4642      	mov	r2, r8
 80014b6:	08c9      	lsrs	r1, r1, #3
 80014b8:	075b      	lsls	r3, r3, #29
 80014ba:	4655      	mov	r5, sl
 80014bc:	430b      	orrs	r3, r1
 80014be:	08d0      	lsrs	r0, r2, #3
 80014c0:	e666      	b.n	8001190 <__aeabi_dadd+0x260>
 80014c2:	1acc      	subs	r4, r1, r3
 80014c4:	42a1      	cmp	r1, r4
 80014c6:	4189      	sbcs	r1, r1
 80014c8:	1a3f      	subs	r7, r7, r0
 80014ca:	4249      	negs	r1, r1
 80014cc:	4655      	mov	r5, sl
 80014ce:	2601      	movs	r6, #1
 80014d0:	1a7f      	subs	r7, r7, r1
 80014d2:	e57e      	b.n	8000fd2 <__aeabi_dadd+0xa2>
 80014d4:	4642      	mov	r2, r8
 80014d6:	1a5c      	subs	r4, r3, r1
 80014d8:	1a87      	subs	r7, r0, r2
 80014da:	42a3      	cmp	r3, r4
 80014dc:	4192      	sbcs	r2, r2
 80014de:	4252      	negs	r2, r2
 80014e0:	1abf      	subs	r7, r7, r2
 80014e2:	023a      	lsls	r2, r7, #8
 80014e4:	d53d      	bpl.n	8001562 <__aeabi_dadd+0x632>
 80014e6:	1acc      	subs	r4, r1, r3
 80014e8:	42a1      	cmp	r1, r4
 80014ea:	4189      	sbcs	r1, r1
 80014ec:	4643      	mov	r3, r8
 80014ee:	4249      	negs	r1, r1
 80014f0:	1a1f      	subs	r7, r3, r0
 80014f2:	4655      	mov	r5, sl
 80014f4:	1a7f      	subs	r7, r7, r1
 80014f6:	e595      	b.n	8001024 <__aeabi_dadd+0xf4>
 80014f8:	077b      	lsls	r3, r7, #29
 80014fa:	08c9      	lsrs	r1, r1, #3
 80014fc:	430b      	orrs	r3, r1
 80014fe:	08f8      	lsrs	r0, r7, #3
 8001500:	e643      	b.n	800118a <__aeabi_dadd+0x25a>
 8001502:	4644      	mov	r4, r8
 8001504:	08db      	lsrs	r3, r3, #3
 8001506:	430c      	orrs	r4, r1
 8001508:	d130      	bne.n	800156c <__aeabi_dadd+0x63c>
 800150a:	0742      	lsls	r2, r0, #29
 800150c:	4313      	orrs	r3, r2
 800150e:	08c0      	lsrs	r0, r0, #3
 8001510:	e65c      	b.n	80011cc <__aeabi_dadd+0x29c>
 8001512:	077b      	lsls	r3, r7, #29
 8001514:	08c9      	lsrs	r1, r1, #3
 8001516:	430b      	orrs	r3, r1
 8001518:	08f8      	lsrs	r0, r7, #3
 800151a:	e639      	b.n	8001190 <__aeabi_dadd+0x260>
 800151c:	185c      	adds	r4, r3, r1
 800151e:	429c      	cmp	r4, r3
 8001520:	419b      	sbcs	r3, r3
 8001522:	4440      	add	r0, r8
 8001524:	425b      	negs	r3, r3
 8001526:	18c7      	adds	r7, r0, r3
 8001528:	023b      	lsls	r3, r7, #8
 800152a:	d400      	bmi.n	800152e <__aeabi_dadd+0x5fe>
 800152c:	e625      	b.n	800117a <__aeabi_dadd+0x24a>
 800152e:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <__aeabi_dadd+0x674>)
 8001530:	2601      	movs	r6, #1
 8001532:	401f      	ands	r7, r3
 8001534:	e621      	b.n	800117a <__aeabi_dadd+0x24a>
 8001536:	0004      	movs	r4, r0
 8001538:	3a20      	subs	r2, #32
 800153a:	40d4      	lsrs	r4, r2
 800153c:	4662      	mov	r2, ip
 800153e:	2a20      	cmp	r2, #32
 8001540:	d004      	beq.n	800154c <__aeabi_dadd+0x61c>
 8001542:	2240      	movs	r2, #64	; 0x40
 8001544:	4666      	mov	r6, ip
 8001546:	1b92      	subs	r2, r2, r6
 8001548:	4090      	lsls	r0, r2
 800154a:	4303      	orrs	r3, r0
 800154c:	1e5a      	subs	r2, r3, #1
 800154e:	4193      	sbcs	r3, r2
 8001550:	431c      	orrs	r4, r3
 8001552:	e67e      	b.n	8001252 <__aeabi_dadd+0x322>
 8001554:	185c      	adds	r4, r3, r1
 8001556:	428c      	cmp	r4, r1
 8001558:	4189      	sbcs	r1, r1
 800155a:	4440      	add	r0, r8
 800155c:	4249      	negs	r1, r1
 800155e:	1847      	adds	r7, r0, r1
 8001560:	e6dd      	b.n	800131e <__aeabi_dadd+0x3ee>
 8001562:	0023      	movs	r3, r4
 8001564:	433b      	orrs	r3, r7
 8001566:	d100      	bne.n	800156a <__aeabi_dadd+0x63a>
 8001568:	e6ad      	b.n	80012c6 <__aeabi_dadd+0x396>
 800156a:	e606      	b.n	800117a <__aeabi_dadd+0x24a>
 800156c:	0744      	lsls	r4, r0, #29
 800156e:	4323      	orrs	r3, r4
 8001570:	2480      	movs	r4, #128	; 0x80
 8001572:	08c0      	lsrs	r0, r0, #3
 8001574:	0324      	lsls	r4, r4, #12
 8001576:	4220      	tst	r0, r4
 8001578:	d008      	beq.n	800158c <__aeabi_dadd+0x65c>
 800157a:	4642      	mov	r2, r8
 800157c:	08d6      	lsrs	r6, r2, #3
 800157e:	4226      	tst	r6, r4
 8001580:	d104      	bne.n	800158c <__aeabi_dadd+0x65c>
 8001582:	4655      	mov	r5, sl
 8001584:	0030      	movs	r0, r6
 8001586:	08cb      	lsrs	r3, r1, #3
 8001588:	0751      	lsls	r1, r2, #29
 800158a:	430b      	orrs	r3, r1
 800158c:	0f5a      	lsrs	r2, r3, #29
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	08db      	lsrs	r3, r3, #3
 8001592:	0752      	lsls	r2, r2, #29
 8001594:	4313      	orrs	r3, r2
 8001596:	e619      	b.n	80011cc <__aeabi_dadd+0x29c>
 8001598:	2300      	movs	r3, #0
 800159a:	4a01      	ldr	r2, [pc, #4]	; (80015a0 <__aeabi_dadd+0x670>)
 800159c:	001f      	movs	r7, r3
 800159e:	e55e      	b.n	800105e <__aeabi_dadd+0x12e>
 80015a0:	000007ff 	.word	0x000007ff
 80015a4:	ff7fffff 	.word	0xff7fffff

080015a8 <__aeabi_ddiv>:
 80015a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015aa:	4657      	mov	r7, sl
 80015ac:	464e      	mov	r6, r9
 80015ae:	4645      	mov	r5, r8
 80015b0:	46de      	mov	lr, fp
 80015b2:	b5e0      	push	{r5, r6, r7, lr}
 80015b4:	4681      	mov	r9, r0
 80015b6:	0005      	movs	r5, r0
 80015b8:	030c      	lsls	r4, r1, #12
 80015ba:	0048      	lsls	r0, r1, #1
 80015bc:	4692      	mov	sl, r2
 80015be:	001f      	movs	r7, r3
 80015c0:	b085      	sub	sp, #20
 80015c2:	0b24      	lsrs	r4, r4, #12
 80015c4:	0d40      	lsrs	r0, r0, #21
 80015c6:	0fce      	lsrs	r6, r1, #31
 80015c8:	2800      	cmp	r0, #0
 80015ca:	d100      	bne.n	80015ce <__aeabi_ddiv+0x26>
 80015cc:	e156      	b.n	800187c <__aeabi_ddiv+0x2d4>
 80015ce:	4bd4      	ldr	r3, [pc, #848]	; (8001920 <__aeabi_ddiv+0x378>)
 80015d0:	4298      	cmp	r0, r3
 80015d2:	d100      	bne.n	80015d6 <__aeabi_ddiv+0x2e>
 80015d4:	e172      	b.n	80018bc <__aeabi_ddiv+0x314>
 80015d6:	0f6b      	lsrs	r3, r5, #29
 80015d8:	00e4      	lsls	r4, r4, #3
 80015da:	431c      	orrs	r4, r3
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	041b      	lsls	r3, r3, #16
 80015e0:	4323      	orrs	r3, r4
 80015e2:	4698      	mov	r8, r3
 80015e4:	4bcf      	ldr	r3, [pc, #828]	; (8001924 <__aeabi_ddiv+0x37c>)
 80015e6:	00ed      	lsls	r5, r5, #3
 80015e8:	469b      	mov	fp, r3
 80015ea:	2300      	movs	r3, #0
 80015ec:	4699      	mov	r9, r3
 80015ee:	4483      	add	fp, r0
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	033c      	lsls	r4, r7, #12
 80015f4:	007b      	lsls	r3, r7, #1
 80015f6:	4650      	mov	r0, sl
 80015f8:	0b24      	lsrs	r4, r4, #12
 80015fa:	0d5b      	lsrs	r3, r3, #21
 80015fc:	0fff      	lsrs	r7, r7, #31
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d100      	bne.n	8001604 <__aeabi_ddiv+0x5c>
 8001602:	e11f      	b.n	8001844 <__aeabi_ddiv+0x29c>
 8001604:	4ac6      	ldr	r2, [pc, #792]	; (8001920 <__aeabi_ddiv+0x378>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d100      	bne.n	800160c <__aeabi_ddiv+0x64>
 800160a:	e162      	b.n	80018d2 <__aeabi_ddiv+0x32a>
 800160c:	49c5      	ldr	r1, [pc, #788]	; (8001924 <__aeabi_ddiv+0x37c>)
 800160e:	0f42      	lsrs	r2, r0, #29
 8001610:	468c      	mov	ip, r1
 8001612:	00e4      	lsls	r4, r4, #3
 8001614:	4659      	mov	r1, fp
 8001616:	4314      	orrs	r4, r2
 8001618:	2280      	movs	r2, #128	; 0x80
 800161a:	4463      	add	r3, ip
 800161c:	0412      	lsls	r2, r2, #16
 800161e:	1acb      	subs	r3, r1, r3
 8001620:	4314      	orrs	r4, r2
 8001622:	469b      	mov	fp, r3
 8001624:	00c2      	lsls	r2, r0, #3
 8001626:	2000      	movs	r0, #0
 8001628:	0033      	movs	r3, r6
 800162a:	407b      	eors	r3, r7
 800162c:	469a      	mov	sl, r3
 800162e:	464b      	mov	r3, r9
 8001630:	2b0f      	cmp	r3, #15
 8001632:	d827      	bhi.n	8001684 <__aeabi_ddiv+0xdc>
 8001634:	49bc      	ldr	r1, [pc, #752]	; (8001928 <__aeabi_ddiv+0x380>)
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	58cb      	ldr	r3, [r1, r3]
 800163a:	469f      	mov	pc, r3
 800163c:	46b2      	mov	sl, r6
 800163e:	9b00      	ldr	r3, [sp, #0]
 8001640:	2b02      	cmp	r3, #2
 8001642:	d016      	beq.n	8001672 <__aeabi_ddiv+0xca>
 8001644:	2b03      	cmp	r3, #3
 8001646:	d100      	bne.n	800164a <__aeabi_ddiv+0xa2>
 8001648:	e28e      	b.n	8001b68 <__aeabi_ddiv+0x5c0>
 800164a:	2b01      	cmp	r3, #1
 800164c:	d000      	beq.n	8001650 <__aeabi_ddiv+0xa8>
 800164e:	e0d9      	b.n	8001804 <__aeabi_ddiv+0x25c>
 8001650:	2300      	movs	r3, #0
 8001652:	2400      	movs	r4, #0
 8001654:	2500      	movs	r5, #0
 8001656:	4652      	mov	r2, sl
 8001658:	051b      	lsls	r3, r3, #20
 800165a:	4323      	orrs	r3, r4
 800165c:	07d2      	lsls	r2, r2, #31
 800165e:	4313      	orrs	r3, r2
 8001660:	0028      	movs	r0, r5
 8001662:	0019      	movs	r1, r3
 8001664:	b005      	add	sp, #20
 8001666:	bcf0      	pop	{r4, r5, r6, r7}
 8001668:	46bb      	mov	fp, r7
 800166a:	46b2      	mov	sl, r6
 800166c:	46a9      	mov	r9, r5
 800166e:	46a0      	mov	r8, r4
 8001670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001672:	2400      	movs	r4, #0
 8001674:	2500      	movs	r5, #0
 8001676:	4baa      	ldr	r3, [pc, #680]	; (8001920 <__aeabi_ddiv+0x378>)
 8001678:	e7ed      	b.n	8001656 <__aeabi_ddiv+0xae>
 800167a:	46ba      	mov	sl, r7
 800167c:	46a0      	mov	r8, r4
 800167e:	0015      	movs	r5, r2
 8001680:	9000      	str	r0, [sp, #0]
 8001682:	e7dc      	b.n	800163e <__aeabi_ddiv+0x96>
 8001684:	4544      	cmp	r4, r8
 8001686:	d200      	bcs.n	800168a <__aeabi_ddiv+0xe2>
 8001688:	e1c7      	b.n	8001a1a <__aeabi_ddiv+0x472>
 800168a:	d100      	bne.n	800168e <__aeabi_ddiv+0xe6>
 800168c:	e1c2      	b.n	8001a14 <__aeabi_ddiv+0x46c>
 800168e:	2301      	movs	r3, #1
 8001690:	425b      	negs	r3, r3
 8001692:	469c      	mov	ip, r3
 8001694:	002e      	movs	r6, r5
 8001696:	4640      	mov	r0, r8
 8001698:	2500      	movs	r5, #0
 800169a:	44e3      	add	fp, ip
 800169c:	0223      	lsls	r3, r4, #8
 800169e:	0e14      	lsrs	r4, r2, #24
 80016a0:	431c      	orrs	r4, r3
 80016a2:	0c1b      	lsrs	r3, r3, #16
 80016a4:	4699      	mov	r9, r3
 80016a6:	0423      	lsls	r3, r4, #16
 80016a8:	0c1f      	lsrs	r7, r3, #16
 80016aa:	0212      	lsls	r2, r2, #8
 80016ac:	4649      	mov	r1, r9
 80016ae:	9200      	str	r2, [sp, #0]
 80016b0:	9701      	str	r7, [sp, #4]
 80016b2:	f7fe fdcb 	bl	800024c <__aeabi_uidivmod>
 80016b6:	0002      	movs	r2, r0
 80016b8:	437a      	muls	r2, r7
 80016ba:	040b      	lsls	r3, r1, #16
 80016bc:	0c31      	lsrs	r1, r6, #16
 80016be:	4680      	mov	r8, r0
 80016c0:	4319      	orrs	r1, r3
 80016c2:	428a      	cmp	r2, r1
 80016c4:	d907      	bls.n	80016d6 <__aeabi_ddiv+0x12e>
 80016c6:	2301      	movs	r3, #1
 80016c8:	425b      	negs	r3, r3
 80016ca:	469c      	mov	ip, r3
 80016cc:	1909      	adds	r1, r1, r4
 80016ce:	44e0      	add	r8, ip
 80016d0:	428c      	cmp	r4, r1
 80016d2:	d800      	bhi.n	80016d6 <__aeabi_ddiv+0x12e>
 80016d4:	e207      	b.n	8001ae6 <__aeabi_ddiv+0x53e>
 80016d6:	1a88      	subs	r0, r1, r2
 80016d8:	4649      	mov	r1, r9
 80016da:	f7fe fdb7 	bl	800024c <__aeabi_uidivmod>
 80016de:	0409      	lsls	r1, r1, #16
 80016e0:	468c      	mov	ip, r1
 80016e2:	0431      	lsls	r1, r6, #16
 80016e4:	4666      	mov	r6, ip
 80016e6:	9a01      	ldr	r2, [sp, #4]
 80016e8:	0c09      	lsrs	r1, r1, #16
 80016ea:	4342      	muls	r2, r0
 80016ec:	0003      	movs	r3, r0
 80016ee:	4331      	orrs	r1, r6
 80016f0:	428a      	cmp	r2, r1
 80016f2:	d904      	bls.n	80016fe <__aeabi_ddiv+0x156>
 80016f4:	1909      	adds	r1, r1, r4
 80016f6:	3b01      	subs	r3, #1
 80016f8:	428c      	cmp	r4, r1
 80016fa:	d800      	bhi.n	80016fe <__aeabi_ddiv+0x156>
 80016fc:	e1ed      	b.n	8001ada <__aeabi_ddiv+0x532>
 80016fe:	1a88      	subs	r0, r1, r2
 8001700:	4642      	mov	r2, r8
 8001702:	0412      	lsls	r2, r2, #16
 8001704:	431a      	orrs	r2, r3
 8001706:	4690      	mov	r8, r2
 8001708:	4641      	mov	r1, r8
 800170a:	9b00      	ldr	r3, [sp, #0]
 800170c:	040e      	lsls	r6, r1, #16
 800170e:	0c1b      	lsrs	r3, r3, #16
 8001710:	001f      	movs	r7, r3
 8001712:	9302      	str	r3, [sp, #8]
 8001714:	9b00      	ldr	r3, [sp, #0]
 8001716:	0c36      	lsrs	r6, r6, #16
 8001718:	041b      	lsls	r3, r3, #16
 800171a:	0c19      	lsrs	r1, r3, #16
 800171c:	000b      	movs	r3, r1
 800171e:	4373      	muls	r3, r6
 8001720:	0c12      	lsrs	r2, r2, #16
 8001722:	437e      	muls	r6, r7
 8001724:	9103      	str	r1, [sp, #12]
 8001726:	4351      	muls	r1, r2
 8001728:	437a      	muls	r2, r7
 800172a:	0c1f      	lsrs	r7, r3, #16
 800172c:	46bc      	mov	ip, r7
 800172e:	1876      	adds	r6, r6, r1
 8001730:	4466      	add	r6, ip
 8001732:	42b1      	cmp	r1, r6
 8001734:	d903      	bls.n	800173e <__aeabi_ddiv+0x196>
 8001736:	2180      	movs	r1, #128	; 0x80
 8001738:	0249      	lsls	r1, r1, #9
 800173a:	468c      	mov	ip, r1
 800173c:	4462      	add	r2, ip
 800173e:	0c31      	lsrs	r1, r6, #16
 8001740:	188a      	adds	r2, r1, r2
 8001742:	0431      	lsls	r1, r6, #16
 8001744:	041e      	lsls	r6, r3, #16
 8001746:	0c36      	lsrs	r6, r6, #16
 8001748:	198e      	adds	r6, r1, r6
 800174a:	4290      	cmp	r0, r2
 800174c:	d302      	bcc.n	8001754 <__aeabi_ddiv+0x1ac>
 800174e:	d112      	bne.n	8001776 <__aeabi_ddiv+0x1ce>
 8001750:	42b5      	cmp	r5, r6
 8001752:	d210      	bcs.n	8001776 <__aeabi_ddiv+0x1ce>
 8001754:	4643      	mov	r3, r8
 8001756:	1e59      	subs	r1, r3, #1
 8001758:	9b00      	ldr	r3, [sp, #0]
 800175a:	469c      	mov	ip, r3
 800175c:	4465      	add	r5, ip
 800175e:	001f      	movs	r7, r3
 8001760:	429d      	cmp	r5, r3
 8001762:	419b      	sbcs	r3, r3
 8001764:	425b      	negs	r3, r3
 8001766:	191b      	adds	r3, r3, r4
 8001768:	18c0      	adds	r0, r0, r3
 800176a:	4284      	cmp	r4, r0
 800176c:	d200      	bcs.n	8001770 <__aeabi_ddiv+0x1c8>
 800176e:	e1a0      	b.n	8001ab2 <__aeabi_ddiv+0x50a>
 8001770:	d100      	bne.n	8001774 <__aeabi_ddiv+0x1cc>
 8001772:	e19b      	b.n	8001aac <__aeabi_ddiv+0x504>
 8001774:	4688      	mov	r8, r1
 8001776:	1bae      	subs	r6, r5, r6
 8001778:	42b5      	cmp	r5, r6
 800177a:	41ad      	sbcs	r5, r5
 800177c:	1a80      	subs	r0, r0, r2
 800177e:	426d      	negs	r5, r5
 8001780:	1b40      	subs	r0, r0, r5
 8001782:	4284      	cmp	r4, r0
 8001784:	d100      	bne.n	8001788 <__aeabi_ddiv+0x1e0>
 8001786:	e1d5      	b.n	8001b34 <__aeabi_ddiv+0x58c>
 8001788:	4649      	mov	r1, r9
 800178a:	f7fe fd5f 	bl	800024c <__aeabi_uidivmod>
 800178e:	9a01      	ldr	r2, [sp, #4]
 8001790:	040b      	lsls	r3, r1, #16
 8001792:	4342      	muls	r2, r0
 8001794:	0c31      	lsrs	r1, r6, #16
 8001796:	0005      	movs	r5, r0
 8001798:	4319      	orrs	r1, r3
 800179a:	428a      	cmp	r2, r1
 800179c:	d900      	bls.n	80017a0 <__aeabi_ddiv+0x1f8>
 800179e:	e16c      	b.n	8001a7a <__aeabi_ddiv+0x4d2>
 80017a0:	1a88      	subs	r0, r1, r2
 80017a2:	4649      	mov	r1, r9
 80017a4:	f7fe fd52 	bl	800024c <__aeabi_uidivmod>
 80017a8:	9a01      	ldr	r2, [sp, #4]
 80017aa:	0436      	lsls	r6, r6, #16
 80017ac:	4342      	muls	r2, r0
 80017ae:	0409      	lsls	r1, r1, #16
 80017b0:	0c36      	lsrs	r6, r6, #16
 80017b2:	0003      	movs	r3, r0
 80017b4:	430e      	orrs	r6, r1
 80017b6:	42b2      	cmp	r2, r6
 80017b8:	d900      	bls.n	80017bc <__aeabi_ddiv+0x214>
 80017ba:	e153      	b.n	8001a64 <__aeabi_ddiv+0x4bc>
 80017bc:	9803      	ldr	r0, [sp, #12]
 80017be:	1ab6      	subs	r6, r6, r2
 80017c0:	0002      	movs	r2, r0
 80017c2:	042d      	lsls	r5, r5, #16
 80017c4:	431d      	orrs	r5, r3
 80017c6:	9f02      	ldr	r7, [sp, #8]
 80017c8:	042b      	lsls	r3, r5, #16
 80017ca:	0c1b      	lsrs	r3, r3, #16
 80017cc:	435a      	muls	r2, r3
 80017ce:	437b      	muls	r3, r7
 80017d0:	469c      	mov	ip, r3
 80017d2:	0c29      	lsrs	r1, r5, #16
 80017d4:	4348      	muls	r0, r1
 80017d6:	0c13      	lsrs	r3, r2, #16
 80017d8:	4484      	add	ip, r0
 80017da:	4463      	add	r3, ip
 80017dc:	4379      	muls	r1, r7
 80017de:	4298      	cmp	r0, r3
 80017e0:	d903      	bls.n	80017ea <__aeabi_ddiv+0x242>
 80017e2:	2080      	movs	r0, #128	; 0x80
 80017e4:	0240      	lsls	r0, r0, #9
 80017e6:	4684      	mov	ip, r0
 80017e8:	4461      	add	r1, ip
 80017ea:	0c18      	lsrs	r0, r3, #16
 80017ec:	0412      	lsls	r2, r2, #16
 80017ee:	041b      	lsls	r3, r3, #16
 80017f0:	0c12      	lsrs	r2, r2, #16
 80017f2:	1841      	adds	r1, r0, r1
 80017f4:	189b      	adds	r3, r3, r2
 80017f6:	428e      	cmp	r6, r1
 80017f8:	d200      	bcs.n	80017fc <__aeabi_ddiv+0x254>
 80017fa:	e0ff      	b.n	80019fc <__aeabi_ddiv+0x454>
 80017fc:	d100      	bne.n	8001800 <__aeabi_ddiv+0x258>
 80017fe:	e0fa      	b.n	80019f6 <__aeabi_ddiv+0x44e>
 8001800:	2301      	movs	r3, #1
 8001802:	431d      	orrs	r5, r3
 8001804:	4a49      	ldr	r2, [pc, #292]	; (800192c <__aeabi_ddiv+0x384>)
 8001806:	445a      	add	r2, fp
 8001808:	2a00      	cmp	r2, #0
 800180a:	dc00      	bgt.n	800180e <__aeabi_ddiv+0x266>
 800180c:	e0aa      	b.n	8001964 <__aeabi_ddiv+0x3bc>
 800180e:	076b      	lsls	r3, r5, #29
 8001810:	d000      	beq.n	8001814 <__aeabi_ddiv+0x26c>
 8001812:	e13d      	b.n	8001a90 <__aeabi_ddiv+0x4e8>
 8001814:	08ed      	lsrs	r5, r5, #3
 8001816:	4643      	mov	r3, r8
 8001818:	01db      	lsls	r3, r3, #7
 800181a:	d506      	bpl.n	800182a <__aeabi_ddiv+0x282>
 800181c:	4642      	mov	r2, r8
 800181e:	4b44      	ldr	r3, [pc, #272]	; (8001930 <__aeabi_ddiv+0x388>)
 8001820:	401a      	ands	r2, r3
 8001822:	4690      	mov	r8, r2
 8001824:	2280      	movs	r2, #128	; 0x80
 8001826:	00d2      	lsls	r2, r2, #3
 8001828:	445a      	add	r2, fp
 800182a:	4b42      	ldr	r3, [pc, #264]	; (8001934 <__aeabi_ddiv+0x38c>)
 800182c:	429a      	cmp	r2, r3
 800182e:	dd00      	ble.n	8001832 <__aeabi_ddiv+0x28a>
 8001830:	e71f      	b.n	8001672 <__aeabi_ddiv+0xca>
 8001832:	4643      	mov	r3, r8
 8001834:	075b      	lsls	r3, r3, #29
 8001836:	431d      	orrs	r5, r3
 8001838:	4643      	mov	r3, r8
 800183a:	0552      	lsls	r2, r2, #21
 800183c:	025c      	lsls	r4, r3, #9
 800183e:	0b24      	lsrs	r4, r4, #12
 8001840:	0d53      	lsrs	r3, r2, #21
 8001842:	e708      	b.n	8001656 <__aeabi_ddiv+0xae>
 8001844:	4652      	mov	r2, sl
 8001846:	4322      	orrs	r2, r4
 8001848:	d100      	bne.n	800184c <__aeabi_ddiv+0x2a4>
 800184a:	e07b      	b.n	8001944 <__aeabi_ddiv+0x39c>
 800184c:	2c00      	cmp	r4, #0
 800184e:	d100      	bne.n	8001852 <__aeabi_ddiv+0x2aa>
 8001850:	e0fa      	b.n	8001a48 <__aeabi_ddiv+0x4a0>
 8001852:	0020      	movs	r0, r4
 8001854:	f001 f99a 	bl	8002b8c <__clzsi2>
 8001858:	0002      	movs	r2, r0
 800185a:	3a0b      	subs	r2, #11
 800185c:	231d      	movs	r3, #29
 800185e:	0001      	movs	r1, r0
 8001860:	1a9b      	subs	r3, r3, r2
 8001862:	4652      	mov	r2, sl
 8001864:	3908      	subs	r1, #8
 8001866:	40da      	lsrs	r2, r3
 8001868:	408c      	lsls	r4, r1
 800186a:	4314      	orrs	r4, r2
 800186c:	4652      	mov	r2, sl
 800186e:	408a      	lsls	r2, r1
 8001870:	4b31      	ldr	r3, [pc, #196]	; (8001938 <__aeabi_ddiv+0x390>)
 8001872:	4458      	add	r0, fp
 8001874:	469b      	mov	fp, r3
 8001876:	4483      	add	fp, r0
 8001878:	2000      	movs	r0, #0
 800187a:	e6d5      	b.n	8001628 <__aeabi_ddiv+0x80>
 800187c:	464b      	mov	r3, r9
 800187e:	4323      	orrs	r3, r4
 8001880:	4698      	mov	r8, r3
 8001882:	d044      	beq.n	800190e <__aeabi_ddiv+0x366>
 8001884:	2c00      	cmp	r4, #0
 8001886:	d100      	bne.n	800188a <__aeabi_ddiv+0x2e2>
 8001888:	e0ce      	b.n	8001a28 <__aeabi_ddiv+0x480>
 800188a:	0020      	movs	r0, r4
 800188c:	f001 f97e 	bl	8002b8c <__clzsi2>
 8001890:	0001      	movs	r1, r0
 8001892:	0002      	movs	r2, r0
 8001894:	390b      	subs	r1, #11
 8001896:	231d      	movs	r3, #29
 8001898:	1a5b      	subs	r3, r3, r1
 800189a:	4649      	mov	r1, r9
 800189c:	0010      	movs	r0, r2
 800189e:	40d9      	lsrs	r1, r3
 80018a0:	3808      	subs	r0, #8
 80018a2:	4084      	lsls	r4, r0
 80018a4:	000b      	movs	r3, r1
 80018a6:	464d      	mov	r5, r9
 80018a8:	4323      	orrs	r3, r4
 80018aa:	4698      	mov	r8, r3
 80018ac:	4085      	lsls	r5, r0
 80018ae:	4823      	ldr	r0, [pc, #140]	; (800193c <__aeabi_ddiv+0x394>)
 80018b0:	1a83      	subs	r3, r0, r2
 80018b2:	469b      	mov	fp, r3
 80018b4:	2300      	movs	r3, #0
 80018b6:	4699      	mov	r9, r3
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	e69a      	b.n	80015f2 <__aeabi_ddiv+0x4a>
 80018bc:	464b      	mov	r3, r9
 80018be:	4323      	orrs	r3, r4
 80018c0:	4698      	mov	r8, r3
 80018c2:	d11d      	bne.n	8001900 <__aeabi_ddiv+0x358>
 80018c4:	2308      	movs	r3, #8
 80018c6:	4699      	mov	r9, r3
 80018c8:	3b06      	subs	r3, #6
 80018ca:	2500      	movs	r5, #0
 80018cc:	4683      	mov	fp, r0
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	e68f      	b.n	80015f2 <__aeabi_ddiv+0x4a>
 80018d2:	4652      	mov	r2, sl
 80018d4:	4322      	orrs	r2, r4
 80018d6:	d109      	bne.n	80018ec <__aeabi_ddiv+0x344>
 80018d8:	2302      	movs	r3, #2
 80018da:	4649      	mov	r1, r9
 80018dc:	4319      	orrs	r1, r3
 80018de:	4b18      	ldr	r3, [pc, #96]	; (8001940 <__aeabi_ddiv+0x398>)
 80018e0:	4689      	mov	r9, r1
 80018e2:	469c      	mov	ip, r3
 80018e4:	2400      	movs	r4, #0
 80018e6:	2002      	movs	r0, #2
 80018e8:	44e3      	add	fp, ip
 80018ea:	e69d      	b.n	8001628 <__aeabi_ddiv+0x80>
 80018ec:	2303      	movs	r3, #3
 80018ee:	464a      	mov	r2, r9
 80018f0:	431a      	orrs	r2, r3
 80018f2:	4b13      	ldr	r3, [pc, #76]	; (8001940 <__aeabi_ddiv+0x398>)
 80018f4:	4691      	mov	r9, r2
 80018f6:	469c      	mov	ip, r3
 80018f8:	4652      	mov	r2, sl
 80018fa:	2003      	movs	r0, #3
 80018fc:	44e3      	add	fp, ip
 80018fe:	e693      	b.n	8001628 <__aeabi_ddiv+0x80>
 8001900:	230c      	movs	r3, #12
 8001902:	4699      	mov	r9, r3
 8001904:	3b09      	subs	r3, #9
 8001906:	46a0      	mov	r8, r4
 8001908:	4683      	mov	fp, r0
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	e671      	b.n	80015f2 <__aeabi_ddiv+0x4a>
 800190e:	2304      	movs	r3, #4
 8001910:	4699      	mov	r9, r3
 8001912:	2300      	movs	r3, #0
 8001914:	469b      	mov	fp, r3
 8001916:	3301      	adds	r3, #1
 8001918:	2500      	movs	r5, #0
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	e669      	b.n	80015f2 <__aeabi_ddiv+0x4a>
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	000007ff 	.word	0x000007ff
 8001924:	fffffc01 	.word	0xfffffc01
 8001928:	0800a0e4 	.word	0x0800a0e4
 800192c:	000003ff 	.word	0x000003ff
 8001930:	feffffff 	.word	0xfeffffff
 8001934:	000007fe 	.word	0x000007fe
 8001938:	000003f3 	.word	0x000003f3
 800193c:	fffffc0d 	.word	0xfffffc0d
 8001940:	fffff801 	.word	0xfffff801
 8001944:	4649      	mov	r1, r9
 8001946:	2301      	movs	r3, #1
 8001948:	4319      	orrs	r1, r3
 800194a:	4689      	mov	r9, r1
 800194c:	2400      	movs	r4, #0
 800194e:	2001      	movs	r0, #1
 8001950:	e66a      	b.n	8001628 <__aeabi_ddiv+0x80>
 8001952:	2300      	movs	r3, #0
 8001954:	2480      	movs	r4, #128	; 0x80
 8001956:	469a      	mov	sl, r3
 8001958:	2500      	movs	r5, #0
 800195a:	4b8a      	ldr	r3, [pc, #552]	; (8001b84 <__aeabi_ddiv+0x5dc>)
 800195c:	0324      	lsls	r4, r4, #12
 800195e:	e67a      	b.n	8001656 <__aeabi_ddiv+0xae>
 8001960:	2501      	movs	r5, #1
 8001962:	426d      	negs	r5, r5
 8001964:	2301      	movs	r3, #1
 8001966:	1a9b      	subs	r3, r3, r2
 8001968:	2b38      	cmp	r3, #56	; 0x38
 800196a:	dd00      	ble.n	800196e <__aeabi_ddiv+0x3c6>
 800196c:	e670      	b.n	8001650 <__aeabi_ddiv+0xa8>
 800196e:	2b1f      	cmp	r3, #31
 8001970:	dc00      	bgt.n	8001974 <__aeabi_ddiv+0x3cc>
 8001972:	e0bf      	b.n	8001af4 <__aeabi_ddiv+0x54c>
 8001974:	211f      	movs	r1, #31
 8001976:	4249      	negs	r1, r1
 8001978:	1a8a      	subs	r2, r1, r2
 800197a:	4641      	mov	r1, r8
 800197c:	40d1      	lsrs	r1, r2
 800197e:	000a      	movs	r2, r1
 8001980:	2b20      	cmp	r3, #32
 8001982:	d004      	beq.n	800198e <__aeabi_ddiv+0x3e6>
 8001984:	4641      	mov	r1, r8
 8001986:	4b80      	ldr	r3, [pc, #512]	; (8001b88 <__aeabi_ddiv+0x5e0>)
 8001988:	445b      	add	r3, fp
 800198a:	4099      	lsls	r1, r3
 800198c:	430d      	orrs	r5, r1
 800198e:	1e6b      	subs	r3, r5, #1
 8001990:	419d      	sbcs	r5, r3
 8001992:	2307      	movs	r3, #7
 8001994:	432a      	orrs	r2, r5
 8001996:	001d      	movs	r5, r3
 8001998:	2400      	movs	r4, #0
 800199a:	4015      	ands	r5, r2
 800199c:	4213      	tst	r3, r2
 800199e:	d100      	bne.n	80019a2 <__aeabi_ddiv+0x3fa>
 80019a0:	e0d4      	b.n	8001b4c <__aeabi_ddiv+0x5a4>
 80019a2:	210f      	movs	r1, #15
 80019a4:	2300      	movs	r3, #0
 80019a6:	4011      	ands	r1, r2
 80019a8:	2904      	cmp	r1, #4
 80019aa:	d100      	bne.n	80019ae <__aeabi_ddiv+0x406>
 80019ac:	e0cb      	b.n	8001b46 <__aeabi_ddiv+0x59e>
 80019ae:	1d11      	adds	r1, r2, #4
 80019b0:	4291      	cmp	r1, r2
 80019b2:	4192      	sbcs	r2, r2
 80019b4:	4252      	negs	r2, r2
 80019b6:	189b      	adds	r3, r3, r2
 80019b8:	000a      	movs	r2, r1
 80019ba:	0219      	lsls	r1, r3, #8
 80019bc:	d400      	bmi.n	80019c0 <__aeabi_ddiv+0x418>
 80019be:	e0c2      	b.n	8001b46 <__aeabi_ddiv+0x59e>
 80019c0:	2301      	movs	r3, #1
 80019c2:	2400      	movs	r4, #0
 80019c4:	2500      	movs	r5, #0
 80019c6:	e646      	b.n	8001656 <__aeabi_ddiv+0xae>
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	4641      	mov	r1, r8
 80019cc:	031b      	lsls	r3, r3, #12
 80019ce:	4219      	tst	r1, r3
 80019d0:	d008      	beq.n	80019e4 <__aeabi_ddiv+0x43c>
 80019d2:	421c      	tst	r4, r3
 80019d4:	d106      	bne.n	80019e4 <__aeabi_ddiv+0x43c>
 80019d6:	431c      	orrs	r4, r3
 80019d8:	0324      	lsls	r4, r4, #12
 80019da:	46ba      	mov	sl, r7
 80019dc:	0015      	movs	r5, r2
 80019de:	4b69      	ldr	r3, [pc, #420]	; (8001b84 <__aeabi_ddiv+0x5dc>)
 80019e0:	0b24      	lsrs	r4, r4, #12
 80019e2:	e638      	b.n	8001656 <__aeabi_ddiv+0xae>
 80019e4:	2480      	movs	r4, #128	; 0x80
 80019e6:	4643      	mov	r3, r8
 80019e8:	0324      	lsls	r4, r4, #12
 80019ea:	431c      	orrs	r4, r3
 80019ec:	0324      	lsls	r4, r4, #12
 80019ee:	46b2      	mov	sl, r6
 80019f0:	4b64      	ldr	r3, [pc, #400]	; (8001b84 <__aeabi_ddiv+0x5dc>)
 80019f2:	0b24      	lsrs	r4, r4, #12
 80019f4:	e62f      	b.n	8001656 <__aeabi_ddiv+0xae>
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d100      	bne.n	80019fc <__aeabi_ddiv+0x454>
 80019fa:	e703      	b.n	8001804 <__aeabi_ddiv+0x25c>
 80019fc:	19a6      	adds	r6, r4, r6
 80019fe:	1e68      	subs	r0, r5, #1
 8001a00:	42a6      	cmp	r6, r4
 8001a02:	d200      	bcs.n	8001a06 <__aeabi_ddiv+0x45e>
 8001a04:	e08d      	b.n	8001b22 <__aeabi_ddiv+0x57a>
 8001a06:	428e      	cmp	r6, r1
 8001a08:	d200      	bcs.n	8001a0c <__aeabi_ddiv+0x464>
 8001a0a:	e0a3      	b.n	8001b54 <__aeabi_ddiv+0x5ac>
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_ddiv+0x468>
 8001a0e:	e0b3      	b.n	8001b78 <__aeabi_ddiv+0x5d0>
 8001a10:	0005      	movs	r5, r0
 8001a12:	e6f5      	b.n	8001800 <__aeabi_ddiv+0x258>
 8001a14:	42aa      	cmp	r2, r5
 8001a16:	d900      	bls.n	8001a1a <__aeabi_ddiv+0x472>
 8001a18:	e639      	b.n	800168e <__aeabi_ddiv+0xe6>
 8001a1a:	4643      	mov	r3, r8
 8001a1c:	07de      	lsls	r6, r3, #31
 8001a1e:	0858      	lsrs	r0, r3, #1
 8001a20:	086b      	lsrs	r3, r5, #1
 8001a22:	431e      	orrs	r6, r3
 8001a24:	07ed      	lsls	r5, r5, #31
 8001a26:	e639      	b.n	800169c <__aeabi_ddiv+0xf4>
 8001a28:	4648      	mov	r0, r9
 8001a2a:	f001 f8af 	bl	8002b8c <__clzsi2>
 8001a2e:	0001      	movs	r1, r0
 8001a30:	0002      	movs	r2, r0
 8001a32:	3115      	adds	r1, #21
 8001a34:	3220      	adds	r2, #32
 8001a36:	291c      	cmp	r1, #28
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_ddiv+0x494>
 8001a3a:	e72c      	b.n	8001896 <__aeabi_ddiv+0x2ee>
 8001a3c:	464b      	mov	r3, r9
 8001a3e:	3808      	subs	r0, #8
 8001a40:	4083      	lsls	r3, r0
 8001a42:	2500      	movs	r5, #0
 8001a44:	4698      	mov	r8, r3
 8001a46:	e732      	b.n	80018ae <__aeabi_ddiv+0x306>
 8001a48:	f001 f8a0 	bl	8002b8c <__clzsi2>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	001a      	movs	r2, r3
 8001a50:	3215      	adds	r2, #21
 8001a52:	3020      	adds	r0, #32
 8001a54:	2a1c      	cmp	r2, #28
 8001a56:	dc00      	bgt.n	8001a5a <__aeabi_ddiv+0x4b2>
 8001a58:	e700      	b.n	800185c <__aeabi_ddiv+0x2b4>
 8001a5a:	4654      	mov	r4, sl
 8001a5c:	3b08      	subs	r3, #8
 8001a5e:	2200      	movs	r2, #0
 8001a60:	409c      	lsls	r4, r3
 8001a62:	e705      	b.n	8001870 <__aeabi_ddiv+0x2c8>
 8001a64:	1936      	adds	r6, r6, r4
 8001a66:	3b01      	subs	r3, #1
 8001a68:	42b4      	cmp	r4, r6
 8001a6a:	d900      	bls.n	8001a6e <__aeabi_ddiv+0x4c6>
 8001a6c:	e6a6      	b.n	80017bc <__aeabi_ddiv+0x214>
 8001a6e:	42b2      	cmp	r2, r6
 8001a70:	d800      	bhi.n	8001a74 <__aeabi_ddiv+0x4cc>
 8001a72:	e6a3      	b.n	80017bc <__aeabi_ddiv+0x214>
 8001a74:	1e83      	subs	r3, r0, #2
 8001a76:	1936      	adds	r6, r6, r4
 8001a78:	e6a0      	b.n	80017bc <__aeabi_ddiv+0x214>
 8001a7a:	1909      	adds	r1, r1, r4
 8001a7c:	3d01      	subs	r5, #1
 8001a7e:	428c      	cmp	r4, r1
 8001a80:	d900      	bls.n	8001a84 <__aeabi_ddiv+0x4dc>
 8001a82:	e68d      	b.n	80017a0 <__aeabi_ddiv+0x1f8>
 8001a84:	428a      	cmp	r2, r1
 8001a86:	d800      	bhi.n	8001a8a <__aeabi_ddiv+0x4e2>
 8001a88:	e68a      	b.n	80017a0 <__aeabi_ddiv+0x1f8>
 8001a8a:	1e85      	subs	r5, r0, #2
 8001a8c:	1909      	adds	r1, r1, r4
 8001a8e:	e687      	b.n	80017a0 <__aeabi_ddiv+0x1f8>
 8001a90:	230f      	movs	r3, #15
 8001a92:	402b      	ands	r3, r5
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	d100      	bne.n	8001a9a <__aeabi_ddiv+0x4f2>
 8001a98:	e6bc      	b.n	8001814 <__aeabi_ddiv+0x26c>
 8001a9a:	2305      	movs	r3, #5
 8001a9c:	425b      	negs	r3, r3
 8001a9e:	42ab      	cmp	r3, r5
 8001aa0:	419b      	sbcs	r3, r3
 8001aa2:	3504      	adds	r5, #4
 8001aa4:	425b      	negs	r3, r3
 8001aa6:	08ed      	lsrs	r5, r5, #3
 8001aa8:	4498      	add	r8, r3
 8001aaa:	e6b4      	b.n	8001816 <__aeabi_ddiv+0x26e>
 8001aac:	42af      	cmp	r7, r5
 8001aae:	d900      	bls.n	8001ab2 <__aeabi_ddiv+0x50a>
 8001ab0:	e660      	b.n	8001774 <__aeabi_ddiv+0x1cc>
 8001ab2:	4282      	cmp	r2, r0
 8001ab4:	d804      	bhi.n	8001ac0 <__aeabi_ddiv+0x518>
 8001ab6:	d000      	beq.n	8001aba <__aeabi_ddiv+0x512>
 8001ab8:	e65c      	b.n	8001774 <__aeabi_ddiv+0x1cc>
 8001aba:	42ae      	cmp	r6, r5
 8001abc:	d800      	bhi.n	8001ac0 <__aeabi_ddiv+0x518>
 8001abe:	e659      	b.n	8001774 <__aeabi_ddiv+0x1cc>
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	425b      	negs	r3, r3
 8001ac4:	469c      	mov	ip, r3
 8001ac6:	9b00      	ldr	r3, [sp, #0]
 8001ac8:	44e0      	add	r8, ip
 8001aca:	469c      	mov	ip, r3
 8001acc:	4465      	add	r5, ip
 8001ace:	429d      	cmp	r5, r3
 8001ad0:	419b      	sbcs	r3, r3
 8001ad2:	425b      	negs	r3, r3
 8001ad4:	191b      	adds	r3, r3, r4
 8001ad6:	18c0      	adds	r0, r0, r3
 8001ad8:	e64d      	b.n	8001776 <__aeabi_ddiv+0x1ce>
 8001ada:	428a      	cmp	r2, r1
 8001adc:	d800      	bhi.n	8001ae0 <__aeabi_ddiv+0x538>
 8001ade:	e60e      	b.n	80016fe <__aeabi_ddiv+0x156>
 8001ae0:	1e83      	subs	r3, r0, #2
 8001ae2:	1909      	adds	r1, r1, r4
 8001ae4:	e60b      	b.n	80016fe <__aeabi_ddiv+0x156>
 8001ae6:	428a      	cmp	r2, r1
 8001ae8:	d800      	bhi.n	8001aec <__aeabi_ddiv+0x544>
 8001aea:	e5f4      	b.n	80016d6 <__aeabi_ddiv+0x12e>
 8001aec:	1e83      	subs	r3, r0, #2
 8001aee:	4698      	mov	r8, r3
 8001af0:	1909      	adds	r1, r1, r4
 8001af2:	e5f0      	b.n	80016d6 <__aeabi_ddiv+0x12e>
 8001af4:	4925      	ldr	r1, [pc, #148]	; (8001b8c <__aeabi_ddiv+0x5e4>)
 8001af6:	0028      	movs	r0, r5
 8001af8:	4459      	add	r1, fp
 8001afa:	408d      	lsls	r5, r1
 8001afc:	4642      	mov	r2, r8
 8001afe:	408a      	lsls	r2, r1
 8001b00:	1e69      	subs	r1, r5, #1
 8001b02:	418d      	sbcs	r5, r1
 8001b04:	4641      	mov	r1, r8
 8001b06:	40d8      	lsrs	r0, r3
 8001b08:	40d9      	lsrs	r1, r3
 8001b0a:	4302      	orrs	r2, r0
 8001b0c:	432a      	orrs	r2, r5
 8001b0e:	000b      	movs	r3, r1
 8001b10:	0751      	lsls	r1, r2, #29
 8001b12:	d100      	bne.n	8001b16 <__aeabi_ddiv+0x56e>
 8001b14:	e751      	b.n	80019ba <__aeabi_ddiv+0x412>
 8001b16:	210f      	movs	r1, #15
 8001b18:	4011      	ands	r1, r2
 8001b1a:	2904      	cmp	r1, #4
 8001b1c:	d000      	beq.n	8001b20 <__aeabi_ddiv+0x578>
 8001b1e:	e746      	b.n	80019ae <__aeabi_ddiv+0x406>
 8001b20:	e74b      	b.n	80019ba <__aeabi_ddiv+0x412>
 8001b22:	0005      	movs	r5, r0
 8001b24:	428e      	cmp	r6, r1
 8001b26:	d000      	beq.n	8001b2a <__aeabi_ddiv+0x582>
 8001b28:	e66a      	b.n	8001800 <__aeabi_ddiv+0x258>
 8001b2a:	9a00      	ldr	r2, [sp, #0]
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d000      	beq.n	8001b32 <__aeabi_ddiv+0x58a>
 8001b30:	e666      	b.n	8001800 <__aeabi_ddiv+0x258>
 8001b32:	e667      	b.n	8001804 <__aeabi_ddiv+0x25c>
 8001b34:	4a16      	ldr	r2, [pc, #88]	; (8001b90 <__aeabi_ddiv+0x5e8>)
 8001b36:	445a      	add	r2, fp
 8001b38:	2a00      	cmp	r2, #0
 8001b3a:	dc00      	bgt.n	8001b3e <__aeabi_ddiv+0x596>
 8001b3c:	e710      	b.n	8001960 <__aeabi_ddiv+0x3b8>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	2500      	movs	r5, #0
 8001b42:	4498      	add	r8, r3
 8001b44:	e667      	b.n	8001816 <__aeabi_ddiv+0x26e>
 8001b46:	075d      	lsls	r5, r3, #29
 8001b48:	025b      	lsls	r3, r3, #9
 8001b4a:	0b1c      	lsrs	r4, r3, #12
 8001b4c:	08d2      	lsrs	r2, r2, #3
 8001b4e:	2300      	movs	r3, #0
 8001b50:	4315      	orrs	r5, r2
 8001b52:	e580      	b.n	8001656 <__aeabi_ddiv+0xae>
 8001b54:	9800      	ldr	r0, [sp, #0]
 8001b56:	3d02      	subs	r5, #2
 8001b58:	0042      	lsls	r2, r0, #1
 8001b5a:	4282      	cmp	r2, r0
 8001b5c:	41bf      	sbcs	r7, r7
 8001b5e:	427f      	negs	r7, r7
 8001b60:	193c      	adds	r4, r7, r4
 8001b62:	1936      	adds	r6, r6, r4
 8001b64:	9200      	str	r2, [sp, #0]
 8001b66:	e7dd      	b.n	8001b24 <__aeabi_ddiv+0x57c>
 8001b68:	2480      	movs	r4, #128	; 0x80
 8001b6a:	4643      	mov	r3, r8
 8001b6c:	0324      	lsls	r4, r4, #12
 8001b6e:	431c      	orrs	r4, r3
 8001b70:	0324      	lsls	r4, r4, #12
 8001b72:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <__aeabi_ddiv+0x5dc>)
 8001b74:	0b24      	lsrs	r4, r4, #12
 8001b76:	e56e      	b.n	8001656 <__aeabi_ddiv+0xae>
 8001b78:	9a00      	ldr	r2, [sp, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d3ea      	bcc.n	8001b54 <__aeabi_ddiv+0x5ac>
 8001b7e:	0005      	movs	r5, r0
 8001b80:	e7d3      	b.n	8001b2a <__aeabi_ddiv+0x582>
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	000007ff 	.word	0x000007ff
 8001b88:	0000043e 	.word	0x0000043e
 8001b8c:	0000041e 	.word	0x0000041e
 8001b90:	000003ff 	.word	0x000003ff

08001b94 <__eqdf2>:
 8001b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b96:	464e      	mov	r6, r9
 8001b98:	4645      	mov	r5, r8
 8001b9a:	46de      	mov	lr, fp
 8001b9c:	4657      	mov	r7, sl
 8001b9e:	4690      	mov	r8, r2
 8001ba0:	b5e0      	push	{r5, r6, r7, lr}
 8001ba2:	0017      	movs	r7, r2
 8001ba4:	031a      	lsls	r2, r3, #12
 8001ba6:	0b12      	lsrs	r2, r2, #12
 8001ba8:	0005      	movs	r5, r0
 8001baa:	4684      	mov	ip, r0
 8001bac:	4819      	ldr	r0, [pc, #100]	; (8001c14 <__eqdf2+0x80>)
 8001bae:	030e      	lsls	r6, r1, #12
 8001bb0:	004c      	lsls	r4, r1, #1
 8001bb2:	4691      	mov	r9, r2
 8001bb4:	005a      	lsls	r2, r3, #1
 8001bb6:	0fdb      	lsrs	r3, r3, #31
 8001bb8:	469b      	mov	fp, r3
 8001bba:	0b36      	lsrs	r6, r6, #12
 8001bbc:	0d64      	lsrs	r4, r4, #21
 8001bbe:	0fc9      	lsrs	r1, r1, #31
 8001bc0:	0d52      	lsrs	r2, r2, #21
 8001bc2:	4284      	cmp	r4, r0
 8001bc4:	d019      	beq.n	8001bfa <__eqdf2+0x66>
 8001bc6:	4282      	cmp	r2, r0
 8001bc8:	d010      	beq.n	8001bec <__eqdf2+0x58>
 8001bca:	2001      	movs	r0, #1
 8001bcc:	4294      	cmp	r4, r2
 8001bce:	d10e      	bne.n	8001bee <__eqdf2+0x5a>
 8001bd0:	454e      	cmp	r6, r9
 8001bd2:	d10c      	bne.n	8001bee <__eqdf2+0x5a>
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	45c4      	cmp	ip, r8
 8001bd8:	d109      	bne.n	8001bee <__eqdf2+0x5a>
 8001bda:	4559      	cmp	r1, fp
 8001bdc:	d017      	beq.n	8001c0e <__eqdf2+0x7a>
 8001bde:	2c00      	cmp	r4, #0
 8001be0:	d105      	bne.n	8001bee <__eqdf2+0x5a>
 8001be2:	0030      	movs	r0, r6
 8001be4:	4328      	orrs	r0, r5
 8001be6:	1e43      	subs	r3, r0, #1
 8001be8:	4198      	sbcs	r0, r3
 8001bea:	e000      	b.n	8001bee <__eqdf2+0x5a>
 8001bec:	2001      	movs	r0, #1
 8001bee:	bcf0      	pop	{r4, r5, r6, r7}
 8001bf0:	46bb      	mov	fp, r7
 8001bf2:	46b2      	mov	sl, r6
 8001bf4:	46a9      	mov	r9, r5
 8001bf6:	46a0      	mov	r8, r4
 8001bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bfa:	0033      	movs	r3, r6
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	432b      	orrs	r3, r5
 8001c00:	d1f5      	bne.n	8001bee <__eqdf2+0x5a>
 8001c02:	42a2      	cmp	r2, r4
 8001c04:	d1f3      	bne.n	8001bee <__eqdf2+0x5a>
 8001c06:	464b      	mov	r3, r9
 8001c08:	433b      	orrs	r3, r7
 8001c0a:	d1f0      	bne.n	8001bee <__eqdf2+0x5a>
 8001c0c:	e7e2      	b.n	8001bd4 <__eqdf2+0x40>
 8001c0e:	2000      	movs	r0, #0
 8001c10:	e7ed      	b.n	8001bee <__eqdf2+0x5a>
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	000007ff 	.word	0x000007ff

08001c18 <__gedf2>:
 8001c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c1a:	4647      	mov	r7, r8
 8001c1c:	46ce      	mov	lr, r9
 8001c1e:	0004      	movs	r4, r0
 8001c20:	0018      	movs	r0, r3
 8001c22:	0016      	movs	r6, r2
 8001c24:	031b      	lsls	r3, r3, #12
 8001c26:	0b1b      	lsrs	r3, r3, #12
 8001c28:	4d2d      	ldr	r5, [pc, #180]	; (8001ce0 <__gedf2+0xc8>)
 8001c2a:	004a      	lsls	r2, r1, #1
 8001c2c:	4699      	mov	r9, r3
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	0043      	lsls	r3, r0, #1
 8001c32:	030f      	lsls	r7, r1, #12
 8001c34:	46a4      	mov	ip, r4
 8001c36:	46b0      	mov	r8, r6
 8001c38:	0b3f      	lsrs	r7, r7, #12
 8001c3a:	0d52      	lsrs	r2, r2, #21
 8001c3c:	0fc9      	lsrs	r1, r1, #31
 8001c3e:	0d5b      	lsrs	r3, r3, #21
 8001c40:	0fc0      	lsrs	r0, r0, #31
 8001c42:	42aa      	cmp	r2, r5
 8001c44:	d021      	beq.n	8001c8a <__gedf2+0x72>
 8001c46:	42ab      	cmp	r3, r5
 8001c48:	d013      	beq.n	8001c72 <__gedf2+0x5a>
 8001c4a:	2a00      	cmp	r2, #0
 8001c4c:	d122      	bne.n	8001c94 <__gedf2+0x7c>
 8001c4e:	433c      	orrs	r4, r7
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d102      	bne.n	8001c5a <__gedf2+0x42>
 8001c54:	464d      	mov	r5, r9
 8001c56:	432e      	orrs	r6, r5
 8001c58:	d022      	beq.n	8001ca0 <__gedf2+0x88>
 8001c5a:	2c00      	cmp	r4, #0
 8001c5c:	d010      	beq.n	8001c80 <__gedf2+0x68>
 8001c5e:	4281      	cmp	r1, r0
 8001c60:	d022      	beq.n	8001ca8 <__gedf2+0x90>
 8001c62:	2002      	movs	r0, #2
 8001c64:	3901      	subs	r1, #1
 8001c66:	4008      	ands	r0, r1
 8001c68:	3801      	subs	r0, #1
 8001c6a:	bcc0      	pop	{r6, r7}
 8001c6c:	46b9      	mov	r9, r7
 8001c6e:	46b0      	mov	r8, r6
 8001c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c72:	464d      	mov	r5, r9
 8001c74:	432e      	orrs	r6, r5
 8001c76:	d129      	bne.n	8001ccc <__gedf2+0xb4>
 8001c78:	2a00      	cmp	r2, #0
 8001c7a:	d1f0      	bne.n	8001c5e <__gedf2+0x46>
 8001c7c:	433c      	orrs	r4, r7
 8001c7e:	d1ee      	bne.n	8001c5e <__gedf2+0x46>
 8001c80:	2800      	cmp	r0, #0
 8001c82:	d1f2      	bne.n	8001c6a <__gedf2+0x52>
 8001c84:	2001      	movs	r0, #1
 8001c86:	4240      	negs	r0, r0
 8001c88:	e7ef      	b.n	8001c6a <__gedf2+0x52>
 8001c8a:	003d      	movs	r5, r7
 8001c8c:	4325      	orrs	r5, r4
 8001c8e:	d11d      	bne.n	8001ccc <__gedf2+0xb4>
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d0ee      	beq.n	8001c72 <__gedf2+0x5a>
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1e2      	bne.n	8001c5e <__gedf2+0x46>
 8001c98:	464c      	mov	r4, r9
 8001c9a:	4326      	orrs	r6, r4
 8001c9c:	d1df      	bne.n	8001c5e <__gedf2+0x46>
 8001c9e:	e7e0      	b.n	8001c62 <__gedf2+0x4a>
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	2c00      	cmp	r4, #0
 8001ca4:	d0e1      	beq.n	8001c6a <__gedf2+0x52>
 8001ca6:	e7dc      	b.n	8001c62 <__gedf2+0x4a>
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	dc0a      	bgt.n	8001cc2 <__gedf2+0xaa>
 8001cac:	dbe8      	blt.n	8001c80 <__gedf2+0x68>
 8001cae:	454f      	cmp	r7, r9
 8001cb0:	d8d7      	bhi.n	8001c62 <__gedf2+0x4a>
 8001cb2:	d00e      	beq.n	8001cd2 <__gedf2+0xba>
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	454f      	cmp	r7, r9
 8001cb8:	d2d7      	bcs.n	8001c6a <__gedf2+0x52>
 8001cba:	2900      	cmp	r1, #0
 8001cbc:	d0e2      	beq.n	8001c84 <__gedf2+0x6c>
 8001cbe:	0008      	movs	r0, r1
 8001cc0:	e7d3      	b.n	8001c6a <__gedf2+0x52>
 8001cc2:	4243      	negs	r3, r0
 8001cc4:	4158      	adcs	r0, r3
 8001cc6:	0040      	lsls	r0, r0, #1
 8001cc8:	3801      	subs	r0, #1
 8001cca:	e7ce      	b.n	8001c6a <__gedf2+0x52>
 8001ccc:	2002      	movs	r0, #2
 8001cce:	4240      	negs	r0, r0
 8001cd0:	e7cb      	b.n	8001c6a <__gedf2+0x52>
 8001cd2:	45c4      	cmp	ip, r8
 8001cd4:	d8c5      	bhi.n	8001c62 <__gedf2+0x4a>
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	45c4      	cmp	ip, r8
 8001cda:	d2c6      	bcs.n	8001c6a <__gedf2+0x52>
 8001cdc:	e7ed      	b.n	8001cba <__gedf2+0xa2>
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	000007ff 	.word	0x000007ff

08001ce4 <__ledf2>:
 8001ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ce6:	4647      	mov	r7, r8
 8001ce8:	46ce      	mov	lr, r9
 8001cea:	0004      	movs	r4, r0
 8001cec:	0018      	movs	r0, r3
 8001cee:	0016      	movs	r6, r2
 8001cf0:	031b      	lsls	r3, r3, #12
 8001cf2:	0b1b      	lsrs	r3, r3, #12
 8001cf4:	4d2c      	ldr	r5, [pc, #176]	; (8001da8 <__ledf2+0xc4>)
 8001cf6:	004a      	lsls	r2, r1, #1
 8001cf8:	4699      	mov	r9, r3
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	0043      	lsls	r3, r0, #1
 8001cfe:	030f      	lsls	r7, r1, #12
 8001d00:	46a4      	mov	ip, r4
 8001d02:	46b0      	mov	r8, r6
 8001d04:	0b3f      	lsrs	r7, r7, #12
 8001d06:	0d52      	lsrs	r2, r2, #21
 8001d08:	0fc9      	lsrs	r1, r1, #31
 8001d0a:	0d5b      	lsrs	r3, r3, #21
 8001d0c:	0fc0      	lsrs	r0, r0, #31
 8001d0e:	42aa      	cmp	r2, r5
 8001d10:	d00d      	beq.n	8001d2e <__ledf2+0x4a>
 8001d12:	42ab      	cmp	r3, r5
 8001d14:	d010      	beq.n	8001d38 <__ledf2+0x54>
 8001d16:	2a00      	cmp	r2, #0
 8001d18:	d127      	bne.n	8001d6a <__ledf2+0x86>
 8001d1a:	433c      	orrs	r4, r7
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d111      	bne.n	8001d44 <__ledf2+0x60>
 8001d20:	464d      	mov	r5, r9
 8001d22:	432e      	orrs	r6, r5
 8001d24:	d10e      	bne.n	8001d44 <__ledf2+0x60>
 8001d26:	2000      	movs	r0, #0
 8001d28:	2c00      	cmp	r4, #0
 8001d2a:	d015      	beq.n	8001d58 <__ledf2+0x74>
 8001d2c:	e00e      	b.n	8001d4c <__ledf2+0x68>
 8001d2e:	003d      	movs	r5, r7
 8001d30:	4325      	orrs	r5, r4
 8001d32:	d110      	bne.n	8001d56 <__ledf2+0x72>
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d118      	bne.n	8001d6a <__ledf2+0x86>
 8001d38:	464d      	mov	r5, r9
 8001d3a:	432e      	orrs	r6, r5
 8001d3c:	d10b      	bne.n	8001d56 <__ledf2+0x72>
 8001d3e:	2a00      	cmp	r2, #0
 8001d40:	d102      	bne.n	8001d48 <__ledf2+0x64>
 8001d42:	433c      	orrs	r4, r7
 8001d44:	2c00      	cmp	r4, #0
 8001d46:	d00b      	beq.n	8001d60 <__ledf2+0x7c>
 8001d48:	4281      	cmp	r1, r0
 8001d4a:	d014      	beq.n	8001d76 <__ledf2+0x92>
 8001d4c:	2002      	movs	r0, #2
 8001d4e:	3901      	subs	r1, #1
 8001d50:	4008      	ands	r0, r1
 8001d52:	3801      	subs	r0, #1
 8001d54:	e000      	b.n	8001d58 <__ledf2+0x74>
 8001d56:	2002      	movs	r0, #2
 8001d58:	bcc0      	pop	{r6, r7}
 8001d5a:	46b9      	mov	r9, r7
 8001d5c:	46b0      	mov	r8, r6
 8001d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d60:	2800      	cmp	r0, #0
 8001d62:	d1f9      	bne.n	8001d58 <__ledf2+0x74>
 8001d64:	2001      	movs	r0, #1
 8001d66:	4240      	negs	r0, r0
 8001d68:	e7f6      	b.n	8001d58 <__ledf2+0x74>
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1ec      	bne.n	8001d48 <__ledf2+0x64>
 8001d6e:	464c      	mov	r4, r9
 8001d70:	4326      	orrs	r6, r4
 8001d72:	d1e9      	bne.n	8001d48 <__ledf2+0x64>
 8001d74:	e7ea      	b.n	8001d4c <__ledf2+0x68>
 8001d76:	429a      	cmp	r2, r3
 8001d78:	dd04      	ble.n	8001d84 <__ledf2+0xa0>
 8001d7a:	4243      	negs	r3, r0
 8001d7c:	4158      	adcs	r0, r3
 8001d7e:	0040      	lsls	r0, r0, #1
 8001d80:	3801      	subs	r0, #1
 8001d82:	e7e9      	b.n	8001d58 <__ledf2+0x74>
 8001d84:	429a      	cmp	r2, r3
 8001d86:	dbeb      	blt.n	8001d60 <__ledf2+0x7c>
 8001d88:	454f      	cmp	r7, r9
 8001d8a:	d8df      	bhi.n	8001d4c <__ledf2+0x68>
 8001d8c:	d006      	beq.n	8001d9c <__ledf2+0xb8>
 8001d8e:	2000      	movs	r0, #0
 8001d90:	454f      	cmp	r7, r9
 8001d92:	d2e1      	bcs.n	8001d58 <__ledf2+0x74>
 8001d94:	2900      	cmp	r1, #0
 8001d96:	d0e5      	beq.n	8001d64 <__ledf2+0x80>
 8001d98:	0008      	movs	r0, r1
 8001d9a:	e7dd      	b.n	8001d58 <__ledf2+0x74>
 8001d9c:	45c4      	cmp	ip, r8
 8001d9e:	d8d5      	bhi.n	8001d4c <__ledf2+0x68>
 8001da0:	2000      	movs	r0, #0
 8001da2:	45c4      	cmp	ip, r8
 8001da4:	d2d8      	bcs.n	8001d58 <__ledf2+0x74>
 8001da6:	e7f5      	b.n	8001d94 <__ledf2+0xb0>
 8001da8:	000007ff 	.word	0x000007ff

08001dac <__aeabi_dmul>:
 8001dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dae:	4657      	mov	r7, sl
 8001db0:	464e      	mov	r6, r9
 8001db2:	4645      	mov	r5, r8
 8001db4:	46de      	mov	lr, fp
 8001db6:	b5e0      	push	{r5, r6, r7, lr}
 8001db8:	4698      	mov	r8, r3
 8001dba:	030c      	lsls	r4, r1, #12
 8001dbc:	004b      	lsls	r3, r1, #1
 8001dbe:	0006      	movs	r6, r0
 8001dc0:	4692      	mov	sl, r2
 8001dc2:	b087      	sub	sp, #28
 8001dc4:	0b24      	lsrs	r4, r4, #12
 8001dc6:	0d5b      	lsrs	r3, r3, #21
 8001dc8:	0fcf      	lsrs	r7, r1, #31
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d100      	bne.n	8001dd0 <__aeabi_dmul+0x24>
 8001dce:	e15c      	b.n	800208a <__aeabi_dmul+0x2de>
 8001dd0:	4ad9      	ldr	r2, [pc, #868]	; (8002138 <__aeabi_dmul+0x38c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d100      	bne.n	8001dd8 <__aeabi_dmul+0x2c>
 8001dd6:	e175      	b.n	80020c4 <__aeabi_dmul+0x318>
 8001dd8:	0f42      	lsrs	r2, r0, #29
 8001dda:	00e4      	lsls	r4, r4, #3
 8001ddc:	4314      	orrs	r4, r2
 8001dde:	2280      	movs	r2, #128	; 0x80
 8001de0:	0412      	lsls	r2, r2, #16
 8001de2:	4314      	orrs	r4, r2
 8001de4:	4ad5      	ldr	r2, [pc, #852]	; (800213c <__aeabi_dmul+0x390>)
 8001de6:	00c5      	lsls	r5, r0, #3
 8001de8:	4694      	mov	ip, r2
 8001dea:	4463      	add	r3, ip
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	2300      	movs	r3, #0
 8001df0:	4699      	mov	r9, r3
 8001df2:	469b      	mov	fp, r3
 8001df4:	4643      	mov	r3, r8
 8001df6:	4642      	mov	r2, r8
 8001df8:	031e      	lsls	r6, r3, #12
 8001dfa:	0fd2      	lsrs	r2, r2, #31
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	4650      	mov	r0, sl
 8001e00:	4690      	mov	r8, r2
 8001e02:	0b36      	lsrs	r6, r6, #12
 8001e04:	0d5b      	lsrs	r3, r3, #21
 8001e06:	d100      	bne.n	8001e0a <__aeabi_dmul+0x5e>
 8001e08:	e120      	b.n	800204c <__aeabi_dmul+0x2a0>
 8001e0a:	4acb      	ldr	r2, [pc, #812]	; (8002138 <__aeabi_dmul+0x38c>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d100      	bne.n	8001e12 <__aeabi_dmul+0x66>
 8001e10:	e162      	b.n	80020d8 <__aeabi_dmul+0x32c>
 8001e12:	49ca      	ldr	r1, [pc, #808]	; (800213c <__aeabi_dmul+0x390>)
 8001e14:	0f42      	lsrs	r2, r0, #29
 8001e16:	468c      	mov	ip, r1
 8001e18:	9900      	ldr	r1, [sp, #0]
 8001e1a:	4463      	add	r3, ip
 8001e1c:	00f6      	lsls	r6, r6, #3
 8001e1e:	468c      	mov	ip, r1
 8001e20:	4316      	orrs	r6, r2
 8001e22:	2280      	movs	r2, #128	; 0x80
 8001e24:	449c      	add	ip, r3
 8001e26:	0412      	lsls	r2, r2, #16
 8001e28:	4663      	mov	r3, ip
 8001e2a:	4316      	orrs	r6, r2
 8001e2c:	00c2      	lsls	r2, r0, #3
 8001e2e:	2000      	movs	r0, #0
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	9900      	ldr	r1, [sp, #0]
 8001e34:	4643      	mov	r3, r8
 8001e36:	3101      	adds	r1, #1
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4649      	mov	r1, r9
 8001e3c:	407b      	eors	r3, r7
 8001e3e:	9301      	str	r3, [sp, #4]
 8001e40:	290f      	cmp	r1, #15
 8001e42:	d826      	bhi.n	8001e92 <__aeabi_dmul+0xe6>
 8001e44:	4bbe      	ldr	r3, [pc, #760]	; (8002140 <__aeabi_dmul+0x394>)
 8001e46:	0089      	lsls	r1, r1, #2
 8001e48:	5859      	ldr	r1, [r3, r1]
 8001e4a:	468f      	mov	pc, r1
 8001e4c:	4643      	mov	r3, r8
 8001e4e:	9301      	str	r3, [sp, #4]
 8001e50:	0034      	movs	r4, r6
 8001e52:	0015      	movs	r5, r2
 8001e54:	4683      	mov	fp, r0
 8001e56:	465b      	mov	r3, fp
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d016      	beq.n	8001e8a <__aeabi_dmul+0xde>
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	d100      	bne.n	8001e62 <__aeabi_dmul+0xb6>
 8001e60:	e203      	b.n	800226a <__aeabi_dmul+0x4be>
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d000      	beq.n	8001e68 <__aeabi_dmul+0xbc>
 8001e66:	e0cd      	b.n	8002004 <__aeabi_dmul+0x258>
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2400      	movs	r4, #0
 8001e6c:	2500      	movs	r5, #0
 8001e6e:	9b01      	ldr	r3, [sp, #4]
 8001e70:	0512      	lsls	r2, r2, #20
 8001e72:	4322      	orrs	r2, r4
 8001e74:	07db      	lsls	r3, r3, #31
 8001e76:	431a      	orrs	r2, r3
 8001e78:	0028      	movs	r0, r5
 8001e7a:	0011      	movs	r1, r2
 8001e7c:	b007      	add	sp, #28
 8001e7e:	bcf0      	pop	{r4, r5, r6, r7}
 8001e80:	46bb      	mov	fp, r7
 8001e82:	46b2      	mov	sl, r6
 8001e84:	46a9      	mov	r9, r5
 8001e86:	46a0      	mov	r8, r4
 8001e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8a:	2400      	movs	r4, #0
 8001e8c:	2500      	movs	r5, #0
 8001e8e:	4aaa      	ldr	r2, [pc, #680]	; (8002138 <__aeabi_dmul+0x38c>)
 8001e90:	e7ed      	b.n	8001e6e <__aeabi_dmul+0xc2>
 8001e92:	0c28      	lsrs	r0, r5, #16
 8001e94:	042d      	lsls	r5, r5, #16
 8001e96:	0c2d      	lsrs	r5, r5, #16
 8001e98:	002b      	movs	r3, r5
 8001e9a:	0c11      	lsrs	r1, r2, #16
 8001e9c:	0412      	lsls	r2, r2, #16
 8001e9e:	0c12      	lsrs	r2, r2, #16
 8001ea0:	4353      	muls	r3, r2
 8001ea2:	4698      	mov	r8, r3
 8001ea4:	0013      	movs	r3, r2
 8001ea6:	002f      	movs	r7, r5
 8001ea8:	4343      	muls	r3, r0
 8001eaa:	4699      	mov	r9, r3
 8001eac:	434f      	muls	r7, r1
 8001eae:	444f      	add	r7, r9
 8001eb0:	46bb      	mov	fp, r7
 8001eb2:	4647      	mov	r7, r8
 8001eb4:	000b      	movs	r3, r1
 8001eb6:	0c3f      	lsrs	r7, r7, #16
 8001eb8:	46ba      	mov	sl, r7
 8001eba:	4343      	muls	r3, r0
 8001ebc:	44da      	add	sl, fp
 8001ebe:	9302      	str	r3, [sp, #8]
 8001ec0:	45d1      	cmp	r9, sl
 8001ec2:	d904      	bls.n	8001ece <__aeabi_dmul+0x122>
 8001ec4:	2780      	movs	r7, #128	; 0x80
 8001ec6:	027f      	lsls	r7, r7, #9
 8001ec8:	46b9      	mov	r9, r7
 8001eca:	444b      	add	r3, r9
 8001ecc:	9302      	str	r3, [sp, #8]
 8001ece:	4653      	mov	r3, sl
 8001ed0:	0c1b      	lsrs	r3, r3, #16
 8001ed2:	469b      	mov	fp, r3
 8001ed4:	4653      	mov	r3, sl
 8001ed6:	041f      	lsls	r7, r3, #16
 8001ed8:	4643      	mov	r3, r8
 8001eda:	041b      	lsls	r3, r3, #16
 8001edc:	0c1b      	lsrs	r3, r3, #16
 8001ede:	4698      	mov	r8, r3
 8001ee0:	003b      	movs	r3, r7
 8001ee2:	4443      	add	r3, r8
 8001ee4:	9304      	str	r3, [sp, #16]
 8001ee6:	0c33      	lsrs	r3, r6, #16
 8001ee8:	0436      	lsls	r6, r6, #16
 8001eea:	0c36      	lsrs	r6, r6, #16
 8001eec:	4698      	mov	r8, r3
 8001eee:	0033      	movs	r3, r6
 8001ef0:	4343      	muls	r3, r0
 8001ef2:	4699      	mov	r9, r3
 8001ef4:	4643      	mov	r3, r8
 8001ef6:	4343      	muls	r3, r0
 8001ef8:	002f      	movs	r7, r5
 8001efa:	469a      	mov	sl, r3
 8001efc:	4643      	mov	r3, r8
 8001efe:	4377      	muls	r7, r6
 8001f00:	435d      	muls	r5, r3
 8001f02:	0c38      	lsrs	r0, r7, #16
 8001f04:	444d      	add	r5, r9
 8001f06:	1945      	adds	r5, r0, r5
 8001f08:	45a9      	cmp	r9, r5
 8001f0a:	d903      	bls.n	8001f14 <__aeabi_dmul+0x168>
 8001f0c:	2380      	movs	r3, #128	; 0x80
 8001f0e:	025b      	lsls	r3, r3, #9
 8001f10:	4699      	mov	r9, r3
 8001f12:	44ca      	add	sl, r9
 8001f14:	043f      	lsls	r7, r7, #16
 8001f16:	0c28      	lsrs	r0, r5, #16
 8001f18:	0c3f      	lsrs	r7, r7, #16
 8001f1a:	042d      	lsls	r5, r5, #16
 8001f1c:	19ed      	adds	r5, r5, r7
 8001f1e:	0c27      	lsrs	r7, r4, #16
 8001f20:	0424      	lsls	r4, r4, #16
 8001f22:	0c24      	lsrs	r4, r4, #16
 8001f24:	0003      	movs	r3, r0
 8001f26:	0020      	movs	r0, r4
 8001f28:	4350      	muls	r0, r2
 8001f2a:	437a      	muls	r2, r7
 8001f2c:	4691      	mov	r9, r2
 8001f2e:	003a      	movs	r2, r7
 8001f30:	4453      	add	r3, sl
 8001f32:	9305      	str	r3, [sp, #20]
 8001f34:	0c03      	lsrs	r3, r0, #16
 8001f36:	469a      	mov	sl, r3
 8001f38:	434a      	muls	r2, r1
 8001f3a:	4361      	muls	r1, r4
 8001f3c:	4449      	add	r1, r9
 8001f3e:	4451      	add	r1, sl
 8001f40:	44ab      	add	fp, r5
 8001f42:	4589      	cmp	r9, r1
 8001f44:	d903      	bls.n	8001f4e <__aeabi_dmul+0x1a2>
 8001f46:	2380      	movs	r3, #128	; 0x80
 8001f48:	025b      	lsls	r3, r3, #9
 8001f4a:	4699      	mov	r9, r3
 8001f4c:	444a      	add	r2, r9
 8001f4e:	0400      	lsls	r0, r0, #16
 8001f50:	0c0b      	lsrs	r3, r1, #16
 8001f52:	0c00      	lsrs	r0, r0, #16
 8001f54:	0409      	lsls	r1, r1, #16
 8001f56:	1809      	adds	r1, r1, r0
 8001f58:	0020      	movs	r0, r4
 8001f5a:	4699      	mov	r9, r3
 8001f5c:	4643      	mov	r3, r8
 8001f5e:	4370      	muls	r0, r6
 8001f60:	435c      	muls	r4, r3
 8001f62:	437e      	muls	r6, r7
 8001f64:	435f      	muls	r7, r3
 8001f66:	0c03      	lsrs	r3, r0, #16
 8001f68:	4698      	mov	r8, r3
 8001f6a:	19a4      	adds	r4, r4, r6
 8001f6c:	4444      	add	r4, r8
 8001f6e:	444a      	add	r2, r9
 8001f70:	9703      	str	r7, [sp, #12]
 8001f72:	42a6      	cmp	r6, r4
 8001f74:	d904      	bls.n	8001f80 <__aeabi_dmul+0x1d4>
 8001f76:	2380      	movs	r3, #128	; 0x80
 8001f78:	025b      	lsls	r3, r3, #9
 8001f7a:	4698      	mov	r8, r3
 8001f7c:	4447      	add	r7, r8
 8001f7e:	9703      	str	r7, [sp, #12]
 8001f80:	0423      	lsls	r3, r4, #16
 8001f82:	9e02      	ldr	r6, [sp, #8]
 8001f84:	469a      	mov	sl, r3
 8001f86:	9b05      	ldr	r3, [sp, #20]
 8001f88:	445e      	add	r6, fp
 8001f8a:	4698      	mov	r8, r3
 8001f8c:	42ae      	cmp	r6, r5
 8001f8e:	41ad      	sbcs	r5, r5
 8001f90:	1876      	adds	r6, r6, r1
 8001f92:	428e      	cmp	r6, r1
 8001f94:	4189      	sbcs	r1, r1
 8001f96:	0400      	lsls	r0, r0, #16
 8001f98:	0c00      	lsrs	r0, r0, #16
 8001f9a:	4450      	add	r0, sl
 8001f9c:	4440      	add	r0, r8
 8001f9e:	426d      	negs	r5, r5
 8001fa0:	1947      	adds	r7, r0, r5
 8001fa2:	46b8      	mov	r8, r7
 8001fa4:	4693      	mov	fp, r2
 8001fa6:	4249      	negs	r1, r1
 8001fa8:	4689      	mov	r9, r1
 8001faa:	44c3      	add	fp, r8
 8001fac:	44d9      	add	r9, fp
 8001fae:	4298      	cmp	r0, r3
 8001fb0:	4180      	sbcs	r0, r0
 8001fb2:	45a8      	cmp	r8, r5
 8001fb4:	41ad      	sbcs	r5, r5
 8001fb6:	4593      	cmp	fp, r2
 8001fb8:	4192      	sbcs	r2, r2
 8001fba:	4589      	cmp	r9, r1
 8001fbc:	4189      	sbcs	r1, r1
 8001fbe:	426d      	negs	r5, r5
 8001fc0:	4240      	negs	r0, r0
 8001fc2:	4328      	orrs	r0, r5
 8001fc4:	0c24      	lsrs	r4, r4, #16
 8001fc6:	4252      	negs	r2, r2
 8001fc8:	4249      	negs	r1, r1
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	9b03      	ldr	r3, [sp, #12]
 8001fce:	1900      	adds	r0, r0, r4
 8001fd0:	1880      	adds	r0, r0, r2
 8001fd2:	18c7      	adds	r7, r0, r3
 8001fd4:	464b      	mov	r3, r9
 8001fd6:	0ddc      	lsrs	r4, r3, #23
 8001fd8:	9b04      	ldr	r3, [sp, #16]
 8001fda:	0275      	lsls	r5, r6, #9
 8001fdc:	431d      	orrs	r5, r3
 8001fde:	1e6a      	subs	r2, r5, #1
 8001fe0:	4195      	sbcs	r5, r2
 8001fe2:	464b      	mov	r3, r9
 8001fe4:	0df6      	lsrs	r6, r6, #23
 8001fe6:	027f      	lsls	r7, r7, #9
 8001fe8:	4335      	orrs	r5, r6
 8001fea:	025a      	lsls	r2, r3, #9
 8001fec:	433c      	orrs	r4, r7
 8001fee:	4315      	orrs	r5, r2
 8001ff0:	01fb      	lsls	r3, r7, #7
 8001ff2:	d400      	bmi.n	8001ff6 <__aeabi_dmul+0x24a>
 8001ff4:	e11c      	b.n	8002230 <__aeabi_dmul+0x484>
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	086a      	lsrs	r2, r5, #1
 8001ffa:	400d      	ands	r5, r1
 8001ffc:	4315      	orrs	r5, r2
 8001ffe:	07e2      	lsls	r2, r4, #31
 8002000:	4315      	orrs	r5, r2
 8002002:	0864      	lsrs	r4, r4, #1
 8002004:	494f      	ldr	r1, [pc, #316]	; (8002144 <__aeabi_dmul+0x398>)
 8002006:	4461      	add	r1, ip
 8002008:	2900      	cmp	r1, #0
 800200a:	dc00      	bgt.n	800200e <__aeabi_dmul+0x262>
 800200c:	e0b0      	b.n	8002170 <__aeabi_dmul+0x3c4>
 800200e:	076b      	lsls	r3, r5, #29
 8002010:	d009      	beq.n	8002026 <__aeabi_dmul+0x27a>
 8002012:	220f      	movs	r2, #15
 8002014:	402a      	ands	r2, r5
 8002016:	2a04      	cmp	r2, #4
 8002018:	d005      	beq.n	8002026 <__aeabi_dmul+0x27a>
 800201a:	1d2a      	adds	r2, r5, #4
 800201c:	42aa      	cmp	r2, r5
 800201e:	41ad      	sbcs	r5, r5
 8002020:	426d      	negs	r5, r5
 8002022:	1964      	adds	r4, r4, r5
 8002024:	0015      	movs	r5, r2
 8002026:	01e3      	lsls	r3, r4, #7
 8002028:	d504      	bpl.n	8002034 <__aeabi_dmul+0x288>
 800202a:	2180      	movs	r1, #128	; 0x80
 800202c:	4a46      	ldr	r2, [pc, #280]	; (8002148 <__aeabi_dmul+0x39c>)
 800202e:	00c9      	lsls	r1, r1, #3
 8002030:	4014      	ands	r4, r2
 8002032:	4461      	add	r1, ip
 8002034:	4a45      	ldr	r2, [pc, #276]	; (800214c <__aeabi_dmul+0x3a0>)
 8002036:	4291      	cmp	r1, r2
 8002038:	dd00      	ble.n	800203c <__aeabi_dmul+0x290>
 800203a:	e726      	b.n	8001e8a <__aeabi_dmul+0xde>
 800203c:	0762      	lsls	r2, r4, #29
 800203e:	08ed      	lsrs	r5, r5, #3
 8002040:	0264      	lsls	r4, r4, #9
 8002042:	0549      	lsls	r1, r1, #21
 8002044:	4315      	orrs	r5, r2
 8002046:	0b24      	lsrs	r4, r4, #12
 8002048:	0d4a      	lsrs	r2, r1, #21
 800204a:	e710      	b.n	8001e6e <__aeabi_dmul+0xc2>
 800204c:	4652      	mov	r2, sl
 800204e:	4332      	orrs	r2, r6
 8002050:	d100      	bne.n	8002054 <__aeabi_dmul+0x2a8>
 8002052:	e07f      	b.n	8002154 <__aeabi_dmul+0x3a8>
 8002054:	2e00      	cmp	r6, #0
 8002056:	d100      	bne.n	800205a <__aeabi_dmul+0x2ae>
 8002058:	e0dc      	b.n	8002214 <__aeabi_dmul+0x468>
 800205a:	0030      	movs	r0, r6
 800205c:	f000 fd96 	bl	8002b8c <__clzsi2>
 8002060:	0002      	movs	r2, r0
 8002062:	3a0b      	subs	r2, #11
 8002064:	231d      	movs	r3, #29
 8002066:	0001      	movs	r1, r0
 8002068:	1a9b      	subs	r3, r3, r2
 800206a:	4652      	mov	r2, sl
 800206c:	3908      	subs	r1, #8
 800206e:	40da      	lsrs	r2, r3
 8002070:	408e      	lsls	r6, r1
 8002072:	4316      	orrs	r6, r2
 8002074:	4652      	mov	r2, sl
 8002076:	408a      	lsls	r2, r1
 8002078:	9b00      	ldr	r3, [sp, #0]
 800207a:	4935      	ldr	r1, [pc, #212]	; (8002150 <__aeabi_dmul+0x3a4>)
 800207c:	1a18      	subs	r0, r3, r0
 800207e:	0003      	movs	r3, r0
 8002080:	468c      	mov	ip, r1
 8002082:	4463      	add	r3, ip
 8002084:	2000      	movs	r0, #0
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	e6d3      	b.n	8001e32 <__aeabi_dmul+0x86>
 800208a:	0025      	movs	r5, r4
 800208c:	4305      	orrs	r5, r0
 800208e:	d04a      	beq.n	8002126 <__aeabi_dmul+0x37a>
 8002090:	2c00      	cmp	r4, #0
 8002092:	d100      	bne.n	8002096 <__aeabi_dmul+0x2ea>
 8002094:	e0b0      	b.n	80021f8 <__aeabi_dmul+0x44c>
 8002096:	0020      	movs	r0, r4
 8002098:	f000 fd78 	bl	8002b8c <__clzsi2>
 800209c:	0001      	movs	r1, r0
 800209e:	0002      	movs	r2, r0
 80020a0:	390b      	subs	r1, #11
 80020a2:	231d      	movs	r3, #29
 80020a4:	0010      	movs	r0, r2
 80020a6:	1a5b      	subs	r3, r3, r1
 80020a8:	0031      	movs	r1, r6
 80020aa:	0035      	movs	r5, r6
 80020ac:	3808      	subs	r0, #8
 80020ae:	4084      	lsls	r4, r0
 80020b0:	40d9      	lsrs	r1, r3
 80020b2:	4085      	lsls	r5, r0
 80020b4:	430c      	orrs	r4, r1
 80020b6:	4826      	ldr	r0, [pc, #152]	; (8002150 <__aeabi_dmul+0x3a4>)
 80020b8:	1a83      	subs	r3, r0, r2
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	2300      	movs	r3, #0
 80020be:	4699      	mov	r9, r3
 80020c0:	469b      	mov	fp, r3
 80020c2:	e697      	b.n	8001df4 <__aeabi_dmul+0x48>
 80020c4:	0005      	movs	r5, r0
 80020c6:	4325      	orrs	r5, r4
 80020c8:	d126      	bne.n	8002118 <__aeabi_dmul+0x36c>
 80020ca:	2208      	movs	r2, #8
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	2302      	movs	r3, #2
 80020d0:	2400      	movs	r4, #0
 80020d2:	4691      	mov	r9, r2
 80020d4:	469b      	mov	fp, r3
 80020d6:	e68d      	b.n	8001df4 <__aeabi_dmul+0x48>
 80020d8:	4652      	mov	r2, sl
 80020da:	9b00      	ldr	r3, [sp, #0]
 80020dc:	4332      	orrs	r2, r6
 80020de:	d110      	bne.n	8002102 <__aeabi_dmul+0x356>
 80020e0:	4915      	ldr	r1, [pc, #84]	; (8002138 <__aeabi_dmul+0x38c>)
 80020e2:	2600      	movs	r6, #0
 80020e4:	468c      	mov	ip, r1
 80020e6:	4463      	add	r3, ip
 80020e8:	4649      	mov	r1, r9
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	2302      	movs	r3, #2
 80020ee:	4319      	orrs	r1, r3
 80020f0:	4689      	mov	r9, r1
 80020f2:	2002      	movs	r0, #2
 80020f4:	e69d      	b.n	8001e32 <__aeabi_dmul+0x86>
 80020f6:	465b      	mov	r3, fp
 80020f8:	9701      	str	r7, [sp, #4]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d000      	beq.n	8002100 <__aeabi_dmul+0x354>
 80020fe:	e6ad      	b.n	8001e5c <__aeabi_dmul+0xb0>
 8002100:	e6c3      	b.n	8001e8a <__aeabi_dmul+0xde>
 8002102:	4a0d      	ldr	r2, [pc, #52]	; (8002138 <__aeabi_dmul+0x38c>)
 8002104:	2003      	movs	r0, #3
 8002106:	4694      	mov	ip, r2
 8002108:	4463      	add	r3, ip
 800210a:	464a      	mov	r2, r9
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	2303      	movs	r3, #3
 8002110:	431a      	orrs	r2, r3
 8002112:	4691      	mov	r9, r2
 8002114:	4652      	mov	r2, sl
 8002116:	e68c      	b.n	8001e32 <__aeabi_dmul+0x86>
 8002118:	220c      	movs	r2, #12
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	2303      	movs	r3, #3
 800211e:	0005      	movs	r5, r0
 8002120:	4691      	mov	r9, r2
 8002122:	469b      	mov	fp, r3
 8002124:	e666      	b.n	8001df4 <__aeabi_dmul+0x48>
 8002126:	2304      	movs	r3, #4
 8002128:	4699      	mov	r9, r3
 800212a:	2300      	movs	r3, #0
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	3301      	adds	r3, #1
 8002130:	2400      	movs	r4, #0
 8002132:	469b      	mov	fp, r3
 8002134:	e65e      	b.n	8001df4 <__aeabi_dmul+0x48>
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	000007ff 	.word	0x000007ff
 800213c:	fffffc01 	.word	0xfffffc01
 8002140:	0800a124 	.word	0x0800a124
 8002144:	000003ff 	.word	0x000003ff
 8002148:	feffffff 	.word	0xfeffffff
 800214c:	000007fe 	.word	0x000007fe
 8002150:	fffffc0d 	.word	0xfffffc0d
 8002154:	4649      	mov	r1, r9
 8002156:	2301      	movs	r3, #1
 8002158:	4319      	orrs	r1, r3
 800215a:	4689      	mov	r9, r1
 800215c:	2600      	movs	r6, #0
 800215e:	2001      	movs	r0, #1
 8002160:	e667      	b.n	8001e32 <__aeabi_dmul+0x86>
 8002162:	2300      	movs	r3, #0
 8002164:	2480      	movs	r4, #128	; 0x80
 8002166:	2500      	movs	r5, #0
 8002168:	4a43      	ldr	r2, [pc, #268]	; (8002278 <__aeabi_dmul+0x4cc>)
 800216a:	9301      	str	r3, [sp, #4]
 800216c:	0324      	lsls	r4, r4, #12
 800216e:	e67e      	b.n	8001e6e <__aeabi_dmul+0xc2>
 8002170:	2001      	movs	r0, #1
 8002172:	1a40      	subs	r0, r0, r1
 8002174:	2838      	cmp	r0, #56	; 0x38
 8002176:	dd00      	ble.n	800217a <__aeabi_dmul+0x3ce>
 8002178:	e676      	b.n	8001e68 <__aeabi_dmul+0xbc>
 800217a:	281f      	cmp	r0, #31
 800217c:	dd5b      	ble.n	8002236 <__aeabi_dmul+0x48a>
 800217e:	221f      	movs	r2, #31
 8002180:	0023      	movs	r3, r4
 8002182:	4252      	negs	r2, r2
 8002184:	1a51      	subs	r1, r2, r1
 8002186:	40cb      	lsrs	r3, r1
 8002188:	0019      	movs	r1, r3
 800218a:	2820      	cmp	r0, #32
 800218c:	d003      	beq.n	8002196 <__aeabi_dmul+0x3ea>
 800218e:	4a3b      	ldr	r2, [pc, #236]	; (800227c <__aeabi_dmul+0x4d0>)
 8002190:	4462      	add	r2, ip
 8002192:	4094      	lsls	r4, r2
 8002194:	4325      	orrs	r5, r4
 8002196:	1e6a      	subs	r2, r5, #1
 8002198:	4195      	sbcs	r5, r2
 800219a:	002a      	movs	r2, r5
 800219c:	430a      	orrs	r2, r1
 800219e:	2107      	movs	r1, #7
 80021a0:	000d      	movs	r5, r1
 80021a2:	2400      	movs	r4, #0
 80021a4:	4015      	ands	r5, r2
 80021a6:	4211      	tst	r1, r2
 80021a8:	d05b      	beq.n	8002262 <__aeabi_dmul+0x4b6>
 80021aa:	210f      	movs	r1, #15
 80021ac:	2400      	movs	r4, #0
 80021ae:	4011      	ands	r1, r2
 80021b0:	2904      	cmp	r1, #4
 80021b2:	d053      	beq.n	800225c <__aeabi_dmul+0x4b0>
 80021b4:	1d11      	adds	r1, r2, #4
 80021b6:	4291      	cmp	r1, r2
 80021b8:	4192      	sbcs	r2, r2
 80021ba:	4252      	negs	r2, r2
 80021bc:	18a4      	adds	r4, r4, r2
 80021be:	000a      	movs	r2, r1
 80021c0:	0223      	lsls	r3, r4, #8
 80021c2:	d54b      	bpl.n	800225c <__aeabi_dmul+0x4b0>
 80021c4:	2201      	movs	r2, #1
 80021c6:	2400      	movs	r4, #0
 80021c8:	2500      	movs	r5, #0
 80021ca:	e650      	b.n	8001e6e <__aeabi_dmul+0xc2>
 80021cc:	2380      	movs	r3, #128	; 0x80
 80021ce:	031b      	lsls	r3, r3, #12
 80021d0:	421c      	tst	r4, r3
 80021d2:	d009      	beq.n	80021e8 <__aeabi_dmul+0x43c>
 80021d4:	421e      	tst	r6, r3
 80021d6:	d107      	bne.n	80021e8 <__aeabi_dmul+0x43c>
 80021d8:	4333      	orrs	r3, r6
 80021da:	031c      	lsls	r4, r3, #12
 80021dc:	4643      	mov	r3, r8
 80021de:	0015      	movs	r5, r2
 80021e0:	0b24      	lsrs	r4, r4, #12
 80021e2:	4a25      	ldr	r2, [pc, #148]	; (8002278 <__aeabi_dmul+0x4cc>)
 80021e4:	9301      	str	r3, [sp, #4]
 80021e6:	e642      	b.n	8001e6e <__aeabi_dmul+0xc2>
 80021e8:	2280      	movs	r2, #128	; 0x80
 80021ea:	0312      	lsls	r2, r2, #12
 80021ec:	4314      	orrs	r4, r2
 80021ee:	0324      	lsls	r4, r4, #12
 80021f0:	4a21      	ldr	r2, [pc, #132]	; (8002278 <__aeabi_dmul+0x4cc>)
 80021f2:	0b24      	lsrs	r4, r4, #12
 80021f4:	9701      	str	r7, [sp, #4]
 80021f6:	e63a      	b.n	8001e6e <__aeabi_dmul+0xc2>
 80021f8:	f000 fcc8 	bl	8002b8c <__clzsi2>
 80021fc:	0001      	movs	r1, r0
 80021fe:	0002      	movs	r2, r0
 8002200:	3115      	adds	r1, #21
 8002202:	3220      	adds	r2, #32
 8002204:	291c      	cmp	r1, #28
 8002206:	dc00      	bgt.n	800220a <__aeabi_dmul+0x45e>
 8002208:	e74b      	b.n	80020a2 <__aeabi_dmul+0x2f6>
 800220a:	0034      	movs	r4, r6
 800220c:	3808      	subs	r0, #8
 800220e:	2500      	movs	r5, #0
 8002210:	4084      	lsls	r4, r0
 8002212:	e750      	b.n	80020b6 <__aeabi_dmul+0x30a>
 8002214:	f000 fcba 	bl	8002b8c <__clzsi2>
 8002218:	0003      	movs	r3, r0
 800221a:	001a      	movs	r2, r3
 800221c:	3215      	adds	r2, #21
 800221e:	3020      	adds	r0, #32
 8002220:	2a1c      	cmp	r2, #28
 8002222:	dc00      	bgt.n	8002226 <__aeabi_dmul+0x47a>
 8002224:	e71e      	b.n	8002064 <__aeabi_dmul+0x2b8>
 8002226:	4656      	mov	r6, sl
 8002228:	3b08      	subs	r3, #8
 800222a:	2200      	movs	r2, #0
 800222c:	409e      	lsls	r6, r3
 800222e:	e723      	b.n	8002078 <__aeabi_dmul+0x2cc>
 8002230:	9b00      	ldr	r3, [sp, #0]
 8002232:	469c      	mov	ip, r3
 8002234:	e6e6      	b.n	8002004 <__aeabi_dmul+0x258>
 8002236:	4912      	ldr	r1, [pc, #72]	; (8002280 <__aeabi_dmul+0x4d4>)
 8002238:	0022      	movs	r2, r4
 800223a:	4461      	add	r1, ip
 800223c:	002e      	movs	r6, r5
 800223e:	408d      	lsls	r5, r1
 8002240:	408a      	lsls	r2, r1
 8002242:	40c6      	lsrs	r6, r0
 8002244:	1e69      	subs	r1, r5, #1
 8002246:	418d      	sbcs	r5, r1
 8002248:	4332      	orrs	r2, r6
 800224a:	432a      	orrs	r2, r5
 800224c:	40c4      	lsrs	r4, r0
 800224e:	0753      	lsls	r3, r2, #29
 8002250:	d0b6      	beq.n	80021c0 <__aeabi_dmul+0x414>
 8002252:	210f      	movs	r1, #15
 8002254:	4011      	ands	r1, r2
 8002256:	2904      	cmp	r1, #4
 8002258:	d1ac      	bne.n	80021b4 <__aeabi_dmul+0x408>
 800225a:	e7b1      	b.n	80021c0 <__aeabi_dmul+0x414>
 800225c:	0765      	lsls	r5, r4, #29
 800225e:	0264      	lsls	r4, r4, #9
 8002260:	0b24      	lsrs	r4, r4, #12
 8002262:	08d2      	lsrs	r2, r2, #3
 8002264:	4315      	orrs	r5, r2
 8002266:	2200      	movs	r2, #0
 8002268:	e601      	b.n	8001e6e <__aeabi_dmul+0xc2>
 800226a:	2280      	movs	r2, #128	; 0x80
 800226c:	0312      	lsls	r2, r2, #12
 800226e:	4314      	orrs	r4, r2
 8002270:	0324      	lsls	r4, r4, #12
 8002272:	4a01      	ldr	r2, [pc, #4]	; (8002278 <__aeabi_dmul+0x4cc>)
 8002274:	0b24      	lsrs	r4, r4, #12
 8002276:	e5fa      	b.n	8001e6e <__aeabi_dmul+0xc2>
 8002278:	000007ff 	.word	0x000007ff
 800227c:	0000043e 	.word	0x0000043e
 8002280:	0000041e 	.word	0x0000041e

08002284 <__aeabi_dsub>:
 8002284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002286:	4657      	mov	r7, sl
 8002288:	464e      	mov	r6, r9
 800228a:	4645      	mov	r5, r8
 800228c:	46de      	mov	lr, fp
 800228e:	b5e0      	push	{r5, r6, r7, lr}
 8002290:	001e      	movs	r6, r3
 8002292:	0017      	movs	r7, r2
 8002294:	004a      	lsls	r2, r1, #1
 8002296:	030b      	lsls	r3, r1, #12
 8002298:	0d52      	lsrs	r2, r2, #21
 800229a:	0a5b      	lsrs	r3, r3, #9
 800229c:	4690      	mov	r8, r2
 800229e:	0f42      	lsrs	r2, r0, #29
 80022a0:	431a      	orrs	r2, r3
 80022a2:	0fcd      	lsrs	r5, r1, #31
 80022a4:	4ccd      	ldr	r4, [pc, #820]	; (80025dc <__aeabi_dsub+0x358>)
 80022a6:	0331      	lsls	r1, r6, #12
 80022a8:	00c3      	lsls	r3, r0, #3
 80022aa:	4694      	mov	ip, r2
 80022ac:	0070      	lsls	r0, r6, #1
 80022ae:	0f7a      	lsrs	r2, r7, #29
 80022b0:	0a49      	lsrs	r1, r1, #9
 80022b2:	00ff      	lsls	r7, r7, #3
 80022b4:	469a      	mov	sl, r3
 80022b6:	46b9      	mov	r9, r7
 80022b8:	0d40      	lsrs	r0, r0, #21
 80022ba:	0ff6      	lsrs	r6, r6, #31
 80022bc:	4311      	orrs	r1, r2
 80022be:	42a0      	cmp	r0, r4
 80022c0:	d100      	bne.n	80022c4 <__aeabi_dsub+0x40>
 80022c2:	e0b1      	b.n	8002428 <__aeabi_dsub+0x1a4>
 80022c4:	2201      	movs	r2, #1
 80022c6:	4056      	eors	r6, r2
 80022c8:	46b3      	mov	fp, r6
 80022ca:	42b5      	cmp	r5, r6
 80022cc:	d100      	bne.n	80022d0 <__aeabi_dsub+0x4c>
 80022ce:	e088      	b.n	80023e2 <__aeabi_dsub+0x15e>
 80022d0:	4642      	mov	r2, r8
 80022d2:	1a12      	subs	r2, r2, r0
 80022d4:	2a00      	cmp	r2, #0
 80022d6:	dc00      	bgt.n	80022da <__aeabi_dsub+0x56>
 80022d8:	e0ae      	b.n	8002438 <__aeabi_dsub+0x1b4>
 80022da:	2800      	cmp	r0, #0
 80022dc:	d100      	bne.n	80022e0 <__aeabi_dsub+0x5c>
 80022de:	e0c1      	b.n	8002464 <__aeabi_dsub+0x1e0>
 80022e0:	48be      	ldr	r0, [pc, #760]	; (80025dc <__aeabi_dsub+0x358>)
 80022e2:	4580      	cmp	r8, r0
 80022e4:	d100      	bne.n	80022e8 <__aeabi_dsub+0x64>
 80022e6:	e151      	b.n	800258c <__aeabi_dsub+0x308>
 80022e8:	2080      	movs	r0, #128	; 0x80
 80022ea:	0400      	lsls	r0, r0, #16
 80022ec:	4301      	orrs	r1, r0
 80022ee:	2a38      	cmp	r2, #56	; 0x38
 80022f0:	dd00      	ble.n	80022f4 <__aeabi_dsub+0x70>
 80022f2:	e17b      	b.n	80025ec <__aeabi_dsub+0x368>
 80022f4:	2a1f      	cmp	r2, #31
 80022f6:	dd00      	ble.n	80022fa <__aeabi_dsub+0x76>
 80022f8:	e1ee      	b.n	80026d8 <__aeabi_dsub+0x454>
 80022fa:	2020      	movs	r0, #32
 80022fc:	003e      	movs	r6, r7
 80022fe:	1a80      	subs	r0, r0, r2
 8002300:	000c      	movs	r4, r1
 8002302:	40d6      	lsrs	r6, r2
 8002304:	40d1      	lsrs	r1, r2
 8002306:	4087      	lsls	r7, r0
 8002308:	4662      	mov	r2, ip
 800230a:	4084      	lsls	r4, r0
 800230c:	1a52      	subs	r2, r2, r1
 800230e:	1e78      	subs	r0, r7, #1
 8002310:	4187      	sbcs	r7, r0
 8002312:	4694      	mov	ip, r2
 8002314:	4334      	orrs	r4, r6
 8002316:	4327      	orrs	r7, r4
 8002318:	1bdc      	subs	r4, r3, r7
 800231a:	42a3      	cmp	r3, r4
 800231c:	419b      	sbcs	r3, r3
 800231e:	4662      	mov	r2, ip
 8002320:	425b      	negs	r3, r3
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	4699      	mov	r9, r3
 8002326:	464b      	mov	r3, r9
 8002328:	021b      	lsls	r3, r3, #8
 800232a:	d400      	bmi.n	800232e <__aeabi_dsub+0xaa>
 800232c:	e118      	b.n	8002560 <__aeabi_dsub+0x2dc>
 800232e:	464b      	mov	r3, r9
 8002330:	0258      	lsls	r0, r3, #9
 8002332:	0a43      	lsrs	r3, r0, #9
 8002334:	4699      	mov	r9, r3
 8002336:	464b      	mov	r3, r9
 8002338:	2b00      	cmp	r3, #0
 800233a:	d100      	bne.n	800233e <__aeabi_dsub+0xba>
 800233c:	e137      	b.n	80025ae <__aeabi_dsub+0x32a>
 800233e:	4648      	mov	r0, r9
 8002340:	f000 fc24 	bl	8002b8c <__clzsi2>
 8002344:	0001      	movs	r1, r0
 8002346:	3908      	subs	r1, #8
 8002348:	2320      	movs	r3, #32
 800234a:	0022      	movs	r2, r4
 800234c:	4648      	mov	r0, r9
 800234e:	1a5b      	subs	r3, r3, r1
 8002350:	40da      	lsrs	r2, r3
 8002352:	4088      	lsls	r0, r1
 8002354:	408c      	lsls	r4, r1
 8002356:	4643      	mov	r3, r8
 8002358:	4310      	orrs	r0, r2
 800235a:	4588      	cmp	r8, r1
 800235c:	dd00      	ble.n	8002360 <__aeabi_dsub+0xdc>
 800235e:	e136      	b.n	80025ce <__aeabi_dsub+0x34a>
 8002360:	1ac9      	subs	r1, r1, r3
 8002362:	1c4b      	adds	r3, r1, #1
 8002364:	2b1f      	cmp	r3, #31
 8002366:	dd00      	ble.n	800236a <__aeabi_dsub+0xe6>
 8002368:	e0ea      	b.n	8002540 <__aeabi_dsub+0x2bc>
 800236a:	2220      	movs	r2, #32
 800236c:	0026      	movs	r6, r4
 800236e:	1ad2      	subs	r2, r2, r3
 8002370:	0001      	movs	r1, r0
 8002372:	4094      	lsls	r4, r2
 8002374:	40de      	lsrs	r6, r3
 8002376:	40d8      	lsrs	r0, r3
 8002378:	2300      	movs	r3, #0
 800237a:	4091      	lsls	r1, r2
 800237c:	1e62      	subs	r2, r4, #1
 800237e:	4194      	sbcs	r4, r2
 8002380:	4681      	mov	r9, r0
 8002382:	4698      	mov	r8, r3
 8002384:	4331      	orrs	r1, r6
 8002386:	430c      	orrs	r4, r1
 8002388:	0763      	lsls	r3, r4, #29
 800238a:	d009      	beq.n	80023a0 <__aeabi_dsub+0x11c>
 800238c:	230f      	movs	r3, #15
 800238e:	4023      	ands	r3, r4
 8002390:	2b04      	cmp	r3, #4
 8002392:	d005      	beq.n	80023a0 <__aeabi_dsub+0x11c>
 8002394:	1d23      	adds	r3, r4, #4
 8002396:	42a3      	cmp	r3, r4
 8002398:	41a4      	sbcs	r4, r4
 800239a:	4264      	negs	r4, r4
 800239c:	44a1      	add	r9, r4
 800239e:	001c      	movs	r4, r3
 80023a0:	464b      	mov	r3, r9
 80023a2:	021b      	lsls	r3, r3, #8
 80023a4:	d400      	bmi.n	80023a8 <__aeabi_dsub+0x124>
 80023a6:	e0de      	b.n	8002566 <__aeabi_dsub+0x2e2>
 80023a8:	4641      	mov	r1, r8
 80023aa:	4b8c      	ldr	r3, [pc, #560]	; (80025dc <__aeabi_dsub+0x358>)
 80023ac:	3101      	adds	r1, #1
 80023ae:	4299      	cmp	r1, r3
 80023b0:	d100      	bne.n	80023b4 <__aeabi_dsub+0x130>
 80023b2:	e0e7      	b.n	8002584 <__aeabi_dsub+0x300>
 80023b4:	464b      	mov	r3, r9
 80023b6:	488a      	ldr	r0, [pc, #552]	; (80025e0 <__aeabi_dsub+0x35c>)
 80023b8:	08e4      	lsrs	r4, r4, #3
 80023ba:	4003      	ands	r3, r0
 80023bc:	0018      	movs	r0, r3
 80023be:	0549      	lsls	r1, r1, #21
 80023c0:	075b      	lsls	r3, r3, #29
 80023c2:	0240      	lsls	r0, r0, #9
 80023c4:	4323      	orrs	r3, r4
 80023c6:	0d4a      	lsrs	r2, r1, #21
 80023c8:	0b04      	lsrs	r4, r0, #12
 80023ca:	0512      	lsls	r2, r2, #20
 80023cc:	07ed      	lsls	r5, r5, #31
 80023ce:	4322      	orrs	r2, r4
 80023d0:	432a      	orrs	r2, r5
 80023d2:	0018      	movs	r0, r3
 80023d4:	0011      	movs	r1, r2
 80023d6:	bcf0      	pop	{r4, r5, r6, r7}
 80023d8:	46bb      	mov	fp, r7
 80023da:	46b2      	mov	sl, r6
 80023dc:	46a9      	mov	r9, r5
 80023de:	46a0      	mov	r8, r4
 80023e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023e2:	4642      	mov	r2, r8
 80023e4:	1a12      	subs	r2, r2, r0
 80023e6:	2a00      	cmp	r2, #0
 80023e8:	dd52      	ble.n	8002490 <__aeabi_dsub+0x20c>
 80023ea:	2800      	cmp	r0, #0
 80023ec:	d100      	bne.n	80023f0 <__aeabi_dsub+0x16c>
 80023ee:	e09c      	b.n	800252a <__aeabi_dsub+0x2a6>
 80023f0:	45a0      	cmp	r8, r4
 80023f2:	d100      	bne.n	80023f6 <__aeabi_dsub+0x172>
 80023f4:	e0ca      	b.n	800258c <__aeabi_dsub+0x308>
 80023f6:	2080      	movs	r0, #128	; 0x80
 80023f8:	0400      	lsls	r0, r0, #16
 80023fa:	4301      	orrs	r1, r0
 80023fc:	2a38      	cmp	r2, #56	; 0x38
 80023fe:	dd00      	ble.n	8002402 <__aeabi_dsub+0x17e>
 8002400:	e149      	b.n	8002696 <__aeabi_dsub+0x412>
 8002402:	2a1f      	cmp	r2, #31
 8002404:	dc00      	bgt.n	8002408 <__aeabi_dsub+0x184>
 8002406:	e197      	b.n	8002738 <__aeabi_dsub+0x4b4>
 8002408:	0010      	movs	r0, r2
 800240a:	000e      	movs	r6, r1
 800240c:	3820      	subs	r0, #32
 800240e:	40c6      	lsrs	r6, r0
 8002410:	2a20      	cmp	r2, #32
 8002412:	d004      	beq.n	800241e <__aeabi_dsub+0x19a>
 8002414:	2040      	movs	r0, #64	; 0x40
 8002416:	1a82      	subs	r2, r0, r2
 8002418:	4091      	lsls	r1, r2
 800241a:	430f      	orrs	r7, r1
 800241c:	46b9      	mov	r9, r7
 800241e:	464c      	mov	r4, r9
 8002420:	1e62      	subs	r2, r4, #1
 8002422:	4194      	sbcs	r4, r2
 8002424:	4334      	orrs	r4, r6
 8002426:	e13a      	b.n	800269e <__aeabi_dsub+0x41a>
 8002428:	000a      	movs	r2, r1
 800242a:	433a      	orrs	r2, r7
 800242c:	d028      	beq.n	8002480 <__aeabi_dsub+0x1fc>
 800242e:	46b3      	mov	fp, r6
 8002430:	42b5      	cmp	r5, r6
 8002432:	d02b      	beq.n	800248c <__aeabi_dsub+0x208>
 8002434:	4a6b      	ldr	r2, [pc, #428]	; (80025e4 <__aeabi_dsub+0x360>)
 8002436:	4442      	add	r2, r8
 8002438:	2a00      	cmp	r2, #0
 800243a:	d05d      	beq.n	80024f8 <__aeabi_dsub+0x274>
 800243c:	4642      	mov	r2, r8
 800243e:	4644      	mov	r4, r8
 8002440:	1a82      	subs	r2, r0, r2
 8002442:	2c00      	cmp	r4, #0
 8002444:	d000      	beq.n	8002448 <__aeabi_dsub+0x1c4>
 8002446:	e0f5      	b.n	8002634 <__aeabi_dsub+0x3b0>
 8002448:	4665      	mov	r5, ip
 800244a:	431d      	orrs	r5, r3
 800244c:	d100      	bne.n	8002450 <__aeabi_dsub+0x1cc>
 800244e:	e19c      	b.n	800278a <__aeabi_dsub+0x506>
 8002450:	1e55      	subs	r5, r2, #1
 8002452:	2a01      	cmp	r2, #1
 8002454:	d100      	bne.n	8002458 <__aeabi_dsub+0x1d4>
 8002456:	e1fb      	b.n	8002850 <__aeabi_dsub+0x5cc>
 8002458:	4c60      	ldr	r4, [pc, #384]	; (80025dc <__aeabi_dsub+0x358>)
 800245a:	42a2      	cmp	r2, r4
 800245c:	d100      	bne.n	8002460 <__aeabi_dsub+0x1dc>
 800245e:	e1bd      	b.n	80027dc <__aeabi_dsub+0x558>
 8002460:	002a      	movs	r2, r5
 8002462:	e0f0      	b.n	8002646 <__aeabi_dsub+0x3c2>
 8002464:	0008      	movs	r0, r1
 8002466:	4338      	orrs	r0, r7
 8002468:	d100      	bne.n	800246c <__aeabi_dsub+0x1e8>
 800246a:	e0c3      	b.n	80025f4 <__aeabi_dsub+0x370>
 800246c:	1e50      	subs	r0, r2, #1
 800246e:	2a01      	cmp	r2, #1
 8002470:	d100      	bne.n	8002474 <__aeabi_dsub+0x1f0>
 8002472:	e1a8      	b.n	80027c6 <__aeabi_dsub+0x542>
 8002474:	4c59      	ldr	r4, [pc, #356]	; (80025dc <__aeabi_dsub+0x358>)
 8002476:	42a2      	cmp	r2, r4
 8002478:	d100      	bne.n	800247c <__aeabi_dsub+0x1f8>
 800247a:	e087      	b.n	800258c <__aeabi_dsub+0x308>
 800247c:	0002      	movs	r2, r0
 800247e:	e736      	b.n	80022ee <__aeabi_dsub+0x6a>
 8002480:	2201      	movs	r2, #1
 8002482:	4056      	eors	r6, r2
 8002484:	46b3      	mov	fp, r6
 8002486:	42b5      	cmp	r5, r6
 8002488:	d000      	beq.n	800248c <__aeabi_dsub+0x208>
 800248a:	e721      	b.n	80022d0 <__aeabi_dsub+0x4c>
 800248c:	4a55      	ldr	r2, [pc, #340]	; (80025e4 <__aeabi_dsub+0x360>)
 800248e:	4442      	add	r2, r8
 8002490:	2a00      	cmp	r2, #0
 8002492:	d100      	bne.n	8002496 <__aeabi_dsub+0x212>
 8002494:	e0b5      	b.n	8002602 <__aeabi_dsub+0x37e>
 8002496:	4642      	mov	r2, r8
 8002498:	4644      	mov	r4, r8
 800249a:	1a82      	subs	r2, r0, r2
 800249c:	2c00      	cmp	r4, #0
 800249e:	d100      	bne.n	80024a2 <__aeabi_dsub+0x21e>
 80024a0:	e138      	b.n	8002714 <__aeabi_dsub+0x490>
 80024a2:	4e4e      	ldr	r6, [pc, #312]	; (80025dc <__aeabi_dsub+0x358>)
 80024a4:	42b0      	cmp	r0, r6
 80024a6:	d100      	bne.n	80024aa <__aeabi_dsub+0x226>
 80024a8:	e1de      	b.n	8002868 <__aeabi_dsub+0x5e4>
 80024aa:	2680      	movs	r6, #128	; 0x80
 80024ac:	4664      	mov	r4, ip
 80024ae:	0436      	lsls	r6, r6, #16
 80024b0:	4334      	orrs	r4, r6
 80024b2:	46a4      	mov	ip, r4
 80024b4:	2a38      	cmp	r2, #56	; 0x38
 80024b6:	dd00      	ble.n	80024ba <__aeabi_dsub+0x236>
 80024b8:	e196      	b.n	80027e8 <__aeabi_dsub+0x564>
 80024ba:	2a1f      	cmp	r2, #31
 80024bc:	dd00      	ble.n	80024c0 <__aeabi_dsub+0x23c>
 80024be:	e224      	b.n	800290a <__aeabi_dsub+0x686>
 80024c0:	2620      	movs	r6, #32
 80024c2:	1ab4      	subs	r4, r6, r2
 80024c4:	46a2      	mov	sl, r4
 80024c6:	4664      	mov	r4, ip
 80024c8:	4656      	mov	r6, sl
 80024ca:	40b4      	lsls	r4, r6
 80024cc:	46a1      	mov	r9, r4
 80024ce:	001c      	movs	r4, r3
 80024d0:	464e      	mov	r6, r9
 80024d2:	40d4      	lsrs	r4, r2
 80024d4:	4326      	orrs	r6, r4
 80024d6:	0034      	movs	r4, r6
 80024d8:	4656      	mov	r6, sl
 80024da:	40b3      	lsls	r3, r6
 80024dc:	1e5e      	subs	r6, r3, #1
 80024de:	41b3      	sbcs	r3, r6
 80024e0:	431c      	orrs	r4, r3
 80024e2:	4663      	mov	r3, ip
 80024e4:	40d3      	lsrs	r3, r2
 80024e6:	18c9      	adds	r1, r1, r3
 80024e8:	19e4      	adds	r4, r4, r7
 80024ea:	42bc      	cmp	r4, r7
 80024ec:	41bf      	sbcs	r7, r7
 80024ee:	427f      	negs	r7, r7
 80024f0:	46b9      	mov	r9, r7
 80024f2:	4680      	mov	r8, r0
 80024f4:	4489      	add	r9, r1
 80024f6:	e0d8      	b.n	80026aa <__aeabi_dsub+0x426>
 80024f8:	4640      	mov	r0, r8
 80024fa:	4c3b      	ldr	r4, [pc, #236]	; (80025e8 <__aeabi_dsub+0x364>)
 80024fc:	3001      	adds	r0, #1
 80024fe:	4220      	tst	r0, r4
 8002500:	d000      	beq.n	8002504 <__aeabi_dsub+0x280>
 8002502:	e0b4      	b.n	800266e <__aeabi_dsub+0x3ea>
 8002504:	4640      	mov	r0, r8
 8002506:	2800      	cmp	r0, #0
 8002508:	d000      	beq.n	800250c <__aeabi_dsub+0x288>
 800250a:	e144      	b.n	8002796 <__aeabi_dsub+0x512>
 800250c:	4660      	mov	r0, ip
 800250e:	4318      	orrs	r0, r3
 8002510:	d100      	bne.n	8002514 <__aeabi_dsub+0x290>
 8002512:	e190      	b.n	8002836 <__aeabi_dsub+0x5b2>
 8002514:	0008      	movs	r0, r1
 8002516:	4338      	orrs	r0, r7
 8002518:	d000      	beq.n	800251c <__aeabi_dsub+0x298>
 800251a:	e1aa      	b.n	8002872 <__aeabi_dsub+0x5ee>
 800251c:	4661      	mov	r1, ip
 800251e:	08db      	lsrs	r3, r3, #3
 8002520:	0749      	lsls	r1, r1, #29
 8002522:	430b      	orrs	r3, r1
 8002524:	4661      	mov	r1, ip
 8002526:	08cc      	lsrs	r4, r1, #3
 8002528:	e027      	b.n	800257a <__aeabi_dsub+0x2f6>
 800252a:	0008      	movs	r0, r1
 800252c:	4338      	orrs	r0, r7
 800252e:	d061      	beq.n	80025f4 <__aeabi_dsub+0x370>
 8002530:	1e50      	subs	r0, r2, #1
 8002532:	2a01      	cmp	r2, #1
 8002534:	d100      	bne.n	8002538 <__aeabi_dsub+0x2b4>
 8002536:	e139      	b.n	80027ac <__aeabi_dsub+0x528>
 8002538:	42a2      	cmp	r2, r4
 800253a:	d027      	beq.n	800258c <__aeabi_dsub+0x308>
 800253c:	0002      	movs	r2, r0
 800253e:	e75d      	b.n	80023fc <__aeabi_dsub+0x178>
 8002540:	0002      	movs	r2, r0
 8002542:	391f      	subs	r1, #31
 8002544:	40ca      	lsrs	r2, r1
 8002546:	0011      	movs	r1, r2
 8002548:	2b20      	cmp	r3, #32
 800254a:	d003      	beq.n	8002554 <__aeabi_dsub+0x2d0>
 800254c:	2240      	movs	r2, #64	; 0x40
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	4098      	lsls	r0, r3
 8002552:	4304      	orrs	r4, r0
 8002554:	1e63      	subs	r3, r4, #1
 8002556:	419c      	sbcs	r4, r3
 8002558:	2300      	movs	r3, #0
 800255a:	4699      	mov	r9, r3
 800255c:	4698      	mov	r8, r3
 800255e:	430c      	orrs	r4, r1
 8002560:	0763      	lsls	r3, r4, #29
 8002562:	d000      	beq.n	8002566 <__aeabi_dsub+0x2e2>
 8002564:	e712      	b.n	800238c <__aeabi_dsub+0x108>
 8002566:	464b      	mov	r3, r9
 8002568:	464a      	mov	r2, r9
 800256a:	08e4      	lsrs	r4, r4, #3
 800256c:	075b      	lsls	r3, r3, #29
 800256e:	4323      	orrs	r3, r4
 8002570:	08d4      	lsrs	r4, r2, #3
 8002572:	4642      	mov	r2, r8
 8002574:	4919      	ldr	r1, [pc, #100]	; (80025dc <__aeabi_dsub+0x358>)
 8002576:	428a      	cmp	r2, r1
 8002578:	d00e      	beq.n	8002598 <__aeabi_dsub+0x314>
 800257a:	0324      	lsls	r4, r4, #12
 800257c:	0552      	lsls	r2, r2, #21
 800257e:	0b24      	lsrs	r4, r4, #12
 8002580:	0d52      	lsrs	r2, r2, #21
 8002582:	e722      	b.n	80023ca <__aeabi_dsub+0x146>
 8002584:	000a      	movs	r2, r1
 8002586:	2400      	movs	r4, #0
 8002588:	2300      	movs	r3, #0
 800258a:	e71e      	b.n	80023ca <__aeabi_dsub+0x146>
 800258c:	08db      	lsrs	r3, r3, #3
 800258e:	4662      	mov	r2, ip
 8002590:	0752      	lsls	r2, r2, #29
 8002592:	4313      	orrs	r3, r2
 8002594:	4662      	mov	r2, ip
 8002596:	08d4      	lsrs	r4, r2, #3
 8002598:	001a      	movs	r2, r3
 800259a:	4322      	orrs	r2, r4
 800259c:	d100      	bne.n	80025a0 <__aeabi_dsub+0x31c>
 800259e:	e1fc      	b.n	800299a <__aeabi_dsub+0x716>
 80025a0:	2280      	movs	r2, #128	; 0x80
 80025a2:	0312      	lsls	r2, r2, #12
 80025a4:	4314      	orrs	r4, r2
 80025a6:	0324      	lsls	r4, r4, #12
 80025a8:	4a0c      	ldr	r2, [pc, #48]	; (80025dc <__aeabi_dsub+0x358>)
 80025aa:	0b24      	lsrs	r4, r4, #12
 80025ac:	e70d      	b.n	80023ca <__aeabi_dsub+0x146>
 80025ae:	0020      	movs	r0, r4
 80025b0:	f000 faec 	bl	8002b8c <__clzsi2>
 80025b4:	0001      	movs	r1, r0
 80025b6:	3118      	adds	r1, #24
 80025b8:	291f      	cmp	r1, #31
 80025ba:	dc00      	bgt.n	80025be <__aeabi_dsub+0x33a>
 80025bc:	e6c4      	b.n	8002348 <__aeabi_dsub+0xc4>
 80025be:	3808      	subs	r0, #8
 80025c0:	4084      	lsls	r4, r0
 80025c2:	4643      	mov	r3, r8
 80025c4:	0020      	movs	r0, r4
 80025c6:	2400      	movs	r4, #0
 80025c8:	4588      	cmp	r8, r1
 80025ca:	dc00      	bgt.n	80025ce <__aeabi_dsub+0x34a>
 80025cc:	e6c8      	b.n	8002360 <__aeabi_dsub+0xdc>
 80025ce:	4a04      	ldr	r2, [pc, #16]	; (80025e0 <__aeabi_dsub+0x35c>)
 80025d0:	1a5b      	subs	r3, r3, r1
 80025d2:	4010      	ands	r0, r2
 80025d4:	4698      	mov	r8, r3
 80025d6:	4681      	mov	r9, r0
 80025d8:	e6d6      	b.n	8002388 <__aeabi_dsub+0x104>
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	000007ff 	.word	0x000007ff
 80025e0:	ff7fffff 	.word	0xff7fffff
 80025e4:	fffff801 	.word	0xfffff801
 80025e8:	000007fe 	.word	0x000007fe
 80025ec:	430f      	orrs	r7, r1
 80025ee:	1e7a      	subs	r2, r7, #1
 80025f0:	4197      	sbcs	r7, r2
 80025f2:	e691      	b.n	8002318 <__aeabi_dsub+0x94>
 80025f4:	4661      	mov	r1, ip
 80025f6:	08db      	lsrs	r3, r3, #3
 80025f8:	0749      	lsls	r1, r1, #29
 80025fa:	430b      	orrs	r3, r1
 80025fc:	4661      	mov	r1, ip
 80025fe:	08cc      	lsrs	r4, r1, #3
 8002600:	e7b8      	b.n	8002574 <__aeabi_dsub+0x2f0>
 8002602:	4640      	mov	r0, r8
 8002604:	4cd3      	ldr	r4, [pc, #844]	; (8002954 <__aeabi_dsub+0x6d0>)
 8002606:	3001      	adds	r0, #1
 8002608:	4220      	tst	r0, r4
 800260a:	d000      	beq.n	800260e <__aeabi_dsub+0x38a>
 800260c:	e0a2      	b.n	8002754 <__aeabi_dsub+0x4d0>
 800260e:	4640      	mov	r0, r8
 8002610:	2800      	cmp	r0, #0
 8002612:	d000      	beq.n	8002616 <__aeabi_dsub+0x392>
 8002614:	e101      	b.n	800281a <__aeabi_dsub+0x596>
 8002616:	4660      	mov	r0, ip
 8002618:	4318      	orrs	r0, r3
 800261a:	d100      	bne.n	800261e <__aeabi_dsub+0x39a>
 800261c:	e15e      	b.n	80028dc <__aeabi_dsub+0x658>
 800261e:	0008      	movs	r0, r1
 8002620:	4338      	orrs	r0, r7
 8002622:	d000      	beq.n	8002626 <__aeabi_dsub+0x3a2>
 8002624:	e15f      	b.n	80028e6 <__aeabi_dsub+0x662>
 8002626:	4661      	mov	r1, ip
 8002628:	08db      	lsrs	r3, r3, #3
 800262a:	0749      	lsls	r1, r1, #29
 800262c:	430b      	orrs	r3, r1
 800262e:	4661      	mov	r1, ip
 8002630:	08cc      	lsrs	r4, r1, #3
 8002632:	e7a2      	b.n	800257a <__aeabi_dsub+0x2f6>
 8002634:	4dc8      	ldr	r5, [pc, #800]	; (8002958 <__aeabi_dsub+0x6d4>)
 8002636:	42a8      	cmp	r0, r5
 8002638:	d100      	bne.n	800263c <__aeabi_dsub+0x3b8>
 800263a:	e0cf      	b.n	80027dc <__aeabi_dsub+0x558>
 800263c:	2580      	movs	r5, #128	; 0x80
 800263e:	4664      	mov	r4, ip
 8002640:	042d      	lsls	r5, r5, #16
 8002642:	432c      	orrs	r4, r5
 8002644:	46a4      	mov	ip, r4
 8002646:	2a38      	cmp	r2, #56	; 0x38
 8002648:	dc56      	bgt.n	80026f8 <__aeabi_dsub+0x474>
 800264a:	2a1f      	cmp	r2, #31
 800264c:	dd00      	ble.n	8002650 <__aeabi_dsub+0x3cc>
 800264e:	e0d1      	b.n	80027f4 <__aeabi_dsub+0x570>
 8002650:	2520      	movs	r5, #32
 8002652:	001e      	movs	r6, r3
 8002654:	1aad      	subs	r5, r5, r2
 8002656:	4664      	mov	r4, ip
 8002658:	40ab      	lsls	r3, r5
 800265a:	40ac      	lsls	r4, r5
 800265c:	40d6      	lsrs	r6, r2
 800265e:	1e5d      	subs	r5, r3, #1
 8002660:	41ab      	sbcs	r3, r5
 8002662:	4334      	orrs	r4, r6
 8002664:	4323      	orrs	r3, r4
 8002666:	4664      	mov	r4, ip
 8002668:	40d4      	lsrs	r4, r2
 800266a:	1b09      	subs	r1, r1, r4
 800266c:	e049      	b.n	8002702 <__aeabi_dsub+0x47e>
 800266e:	4660      	mov	r0, ip
 8002670:	1bdc      	subs	r4, r3, r7
 8002672:	1a46      	subs	r6, r0, r1
 8002674:	42a3      	cmp	r3, r4
 8002676:	4180      	sbcs	r0, r0
 8002678:	4240      	negs	r0, r0
 800267a:	4681      	mov	r9, r0
 800267c:	0030      	movs	r0, r6
 800267e:	464e      	mov	r6, r9
 8002680:	1b80      	subs	r0, r0, r6
 8002682:	4681      	mov	r9, r0
 8002684:	0200      	lsls	r0, r0, #8
 8002686:	d476      	bmi.n	8002776 <__aeabi_dsub+0x4f2>
 8002688:	464b      	mov	r3, r9
 800268a:	4323      	orrs	r3, r4
 800268c:	d000      	beq.n	8002690 <__aeabi_dsub+0x40c>
 800268e:	e652      	b.n	8002336 <__aeabi_dsub+0xb2>
 8002690:	2400      	movs	r4, #0
 8002692:	2500      	movs	r5, #0
 8002694:	e771      	b.n	800257a <__aeabi_dsub+0x2f6>
 8002696:	4339      	orrs	r1, r7
 8002698:	000c      	movs	r4, r1
 800269a:	1e62      	subs	r2, r4, #1
 800269c:	4194      	sbcs	r4, r2
 800269e:	18e4      	adds	r4, r4, r3
 80026a0:	429c      	cmp	r4, r3
 80026a2:	419b      	sbcs	r3, r3
 80026a4:	425b      	negs	r3, r3
 80026a6:	4463      	add	r3, ip
 80026a8:	4699      	mov	r9, r3
 80026aa:	464b      	mov	r3, r9
 80026ac:	021b      	lsls	r3, r3, #8
 80026ae:	d400      	bmi.n	80026b2 <__aeabi_dsub+0x42e>
 80026b0:	e756      	b.n	8002560 <__aeabi_dsub+0x2dc>
 80026b2:	2301      	movs	r3, #1
 80026b4:	469c      	mov	ip, r3
 80026b6:	4ba8      	ldr	r3, [pc, #672]	; (8002958 <__aeabi_dsub+0x6d4>)
 80026b8:	44e0      	add	r8, ip
 80026ba:	4598      	cmp	r8, r3
 80026bc:	d038      	beq.n	8002730 <__aeabi_dsub+0x4ac>
 80026be:	464b      	mov	r3, r9
 80026c0:	48a6      	ldr	r0, [pc, #664]	; (800295c <__aeabi_dsub+0x6d8>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	4003      	ands	r3, r0
 80026c6:	0018      	movs	r0, r3
 80026c8:	0863      	lsrs	r3, r4, #1
 80026ca:	4014      	ands	r4, r2
 80026cc:	431c      	orrs	r4, r3
 80026ce:	07c3      	lsls	r3, r0, #31
 80026d0:	431c      	orrs	r4, r3
 80026d2:	0843      	lsrs	r3, r0, #1
 80026d4:	4699      	mov	r9, r3
 80026d6:	e657      	b.n	8002388 <__aeabi_dsub+0x104>
 80026d8:	0010      	movs	r0, r2
 80026da:	000e      	movs	r6, r1
 80026dc:	3820      	subs	r0, #32
 80026de:	40c6      	lsrs	r6, r0
 80026e0:	2a20      	cmp	r2, #32
 80026e2:	d004      	beq.n	80026ee <__aeabi_dsub+0x46a>
 80026e4:	2040      	movs	r0, #64	; 0x40
 80026e6:	1a82      	subs	r2, r0, r2
 80026e8:	4091      	lsls	r1, r2
 80026ea:	430f      	orrs	r7, r1
 80026ec:	46b9      	mov	r9, r7
 80026ee:	464f      	mov	r7, r9
 80026f0:	1e7a      	subs	r2, r7, #1
 80026f2:	4197      	sbcs	r7, r2
 80026f4:	4337      	orrs	r7, r6
 80026f6:	e60f      	b.n	8002318 <__aeabi_dsub+0x94>
 80026f8:	4662      	mov	r2, ip
 80026fa:	431a      	orrs	r2, r3
 80026fc:	0013      	movs	r3, r2
 80026fe:	1e5a      	subs	r2, r3, #1
 8002700:	4193      	sbcs	r3, r2
 8002702:	1afc      	subs	r4, r7, r3
 8002704:	42a7      	cmp	r7, r4
 8002706:	41bf      	sbcs	r7, r7
 8002708:	427f      	negs	r7, r7
 800270a:	1bcb      	subs	r3, r1, r7
 800270c:	4699      	mov	r9, r3
 800270e:	465d      	mov	r5, fp
 8002710:	4680      	mov	r8, r0
 8002712:	e608      	b.n	8002326 <__aeabi_dsub+0xa2>
 8002714:	4666      	mov	r6, ip
 8002716:	431e      	orrs	r6, r3
 8002718:	d100      	bne.n	800271c <__aeabi_dsub+0x498>
 800271a:	e0be      	b.n	800289a <__aeabi_dsub+0x616>
 800271c:	1e56      	subs	r6, r2, #1
 800271e:	2a01      	cmp	r2, #1
 8002720:	d100      	bne.n	8002724 <__aeabi_dsub+0x4a0>
 8002722:	e109      	b.n	8002938 <__aeabi_dsub+0x6b4>
 8002724:	4c8c      	ldr	r4, [pc, #560]	; (8002958 <__aeabi_dsub+0x6d4>)
 8002726:	42a2      	cmp	r2, r4
 8002728:	d100      	bne.n	800272c <__aeabi_dsub+0x4a8>
 800272a:	e119      	b.n	8002960 <__aeabi_dsub+0x6dc>
 800272c:	0032      	movs	r2, r6
 800272e:	e6c1      	b.n	80024b4 <__aeabi_dsub+0x230>
 8002730:	4642      	mov	r2, r8
 8002732:	2400      	movs	r4, #0
 8002734:	2300      	movs	r3, #0
 8002736:	e648      	b.n	80023ca <__aeabi_dsub+0x146>
 8002738:	2020      	movs	r0, #32
 800273a:	000c      	movs	r4, r1
 800273c:	1a80      	subs	r0, r0, r2
 800273e:	003e      	movs	r6, r7
 8002740:	4087      	lsls	r7, r0
 8002742:	4084      	lsls	r4, r0
 8002744:	40d6      	lsrs	r6, r2
 8002746:	1e78      	subs	r0, r7, #1
 8002748:	4187      	sbcs	r7, r0
 800274a:	40d1      	lsrs	r1, r2
 800274c:	4334      	orrs	r4, r6
 800274e:	433c      	orrs	r4, r7
 8002750:	448c      	add	ip, r1
 8002752:	e7a4      	b.n	800269e <__aeabi_dsub+0x41a>
 8002754:	4a80      	ldr	r2, [pc, #512]	; (8002958 <__aeabi_dsub+0x6d4>)
 8002756:	4290      	cmp	r0, r2
 8002758:	d100      	bne.n	800275c <__aeabi_dsub+0x4d8>
 800275a:	e0e9      	b.n	8002930 <__aeabi_dsub+0x6ac>
 800275c:	19df      	adds	r7, r3, r7
 800275e:	429f      	cmp	r7, r3
 8002760:	419b      	sbcs	r3, r3
 8002762:	4461      	add	r1, ip
 8002764:	425b      	negs	r3, r3
 8002766:	18c9      	adds	r1, r1, r3
 8002768:	07cc      	lsls	r4, r1, #31
 800276a:	087f      	lsrs	r7, r7, #1
 800276c:	084b      	lsrs	r3, r1, #1
 800276e:	4699      	mov	r9, r3
 8002770:	4680      	mov	r8, r0
 8002772:	433c      	orrs	r4, r7
 8002774:	e6f4      	b.n	8002560 <__aeabi_dsub+0x2dc>
 8002776:	1afc      	subs	r4, r7, r3
 8002778:	42a7      	cmp	r7, r4
 800277a:	41bf      	sbcs	r7, r7
 800277c:	4663      	mov	r3, ip
 800277e:	427f      	negs	r7, r7
 8002780:	1ac9      	subs	r1, r1, r3
 8002782:	1bcb      	subs	r3, r1, r7
 8002784:	4699      	mov	r9, r3
 8002786:	465d      	mov	r5, fp
 8002788:	e5d5      	b.n	8002336 <__aeabi_dsub+0xb2>
 800278a:	08ff      	lsrs	r7, r7, #3
 800278c:	074b      	lsls	r3, r1, #29
 800278e:	465d      	mov	r5, fp
 8002790:	433b      	orrs	r3, r7
 8002792:	08cc      	lsrs	r4, r1, #3
 8002794:	e6ee      	b.n	8002574 <__aeabi_dsub+0x2f0>
 8002796:	4662      	mov	r2, ip
 8002798:	431a      	orrs	r2, r3
 800279a:	d000      	beq.n	800279e <__aeabi_dsub+0x51a>
 800279c:	e082      	b.n	80028a4 <__aeabi_dsub+0x620>
 800279e:	000b      	movs	r3, r1
 80027a0:	433b      	orrs	r3, r7
 80027a2:	d11b      	bne.n	80027dc <__aeabi_dsub+0x558>
 80027a4:	2480      	movs	r4, #128	; 0x80
 80027a6:	2500      	movs	r5, #0
 80027a8:	0324      	lsls	r4, r4, #12
 80027aa:	e6f9      	b.n	80025a0 <__aeabi_dsub+0x31c>
 80027ac:	19dc      	adds	r4, r3, r7
 80027ae:	429c      	cmp	r4, r3
 80027b0:	419b      	sbcs	r3, r3
 80027b2:	4461      	add	r1, ip
 80027b4:	4689      	mov	r9, r1
 80027b6:	425b      	negs	r3, r3
 80027b8:	4499      	add	r9, r3
 80027ba:	464b      	mov	r3, r9
 80027bc:	021b      	lsls	r3, r3, #8
 80027be:	d444      	bmi.n	800284a <__aeabi_dsub+0x5c6>
 80027c0:	2301      	movs	r3, #1
 80027c2:	4698      	mov	r8, r3
 80027c4:	e6cc      	b.n	8002560 <__aeabi_dsub+0x2dc>
 80027c6:	1bdc      	subs	r4, r3, r7
 80027c8:	4662      	mov	r2, ip
 80027ca:	42a3      	cmp	r3, r4
 80027cc:	419b      	sbcs	r3, r3
 80027ce:	1a51      	subs	r1, r2, r1
 80027d0:	425b      	negs	r3, r3
 80027d2:	1acb      	subs	r3, r1, r3
 80027d4:	4699      	mov	r9, r3
 80027d6:	2301      	movs	r3, #1
 80027d8:	4698      	mov	r8, r3
 80027da:	e5a4      	b.n	8002326 <__aeabi_dsub+0xa2>
 80027dc:	08ff      	lsrs	r7, r7, #3
 80027de:	074b      	lsls	r3, r1, #29
 80027e0:	465d      	mov	r5, fp
 80027e2:	433b      	orrs	r3, r7
 80027e4:	08cc      	lsrs	r4, r1, #3
 80027e6:	e6d7      	b.n	8002598 <__aeabi_dsub+0x314>
 80027e8:	4662      	mov	r2, ip
 80027ea:	431a      	orrs	r2, r3
 80027ec:	0014      	movs	r4, r2
 80027ee:	1e63      	subs	r3, r4, #1
 80027f0:	419c      	sbcs	r4, r3
 80027f2:	e679      	b.n	80024e8 <__aeabi_dsub+0x264>
 80027f4:	0015      	movs	r5, r2
 80027f6:	4664      	mov	r4, ip
 80027f8:	3d20      	subs	r5, #32
 80027fa:	40ec      	lsrs	r4, r5
 80027fc:	46a0      	mov	r8, r4
 80027fe:	2a20      	cmp	r2, #32
 8002800:	d005      	beq.n	800280e <__aeabi_dsub+0x58a>
 8002802:	2540      	movs	r5, #64	; 0x40
 8002804:	4664      	mov	r4, ip
 8002806:	1aaa      	subs	r2, r5, r2
 8002808:	4094      	lsls	r4, r2
 800280a:	4323      	orrs	r3, r4
 800280c:	469a      	mov	sl, r3
 800280e:	4654      	mov	r4, sl
 8002810:	1e63      	subs	r3, r4, #1
 8002812:	419c      	sbcs	r4, r3
 8002814:	4643      	mov	r3, r8
 8002816:	4323      	orrs	r3, r4
 8002818:	e773      	b.n	8002702 <__aeabi_dsub+0x47e>
 800281a:	4662      	mov	r2, ip
 800281c:	431a      	orrs	r2, r3
 800281e:	d023      	beq.n	8002868 <__aeabi_dsub+0x5e4>
 8002820:	000a      	movs	r2, r1
 8002822:	433a      	orrs	r2, r7
 8002824:	d000      	beq.n	8002828 <__aeabi_dsub+0x5a4>
 8002826:	e0a0      	b.n	800296a <__aeabi_dsub+0x6e6>
 8002828:	4662      	mov	r2, ip
 800282a:	08db      	lsrs	r3, r3, #3
 800282c:	0752      	lsls	r2, r2, #29
 800282e:	4313      	orrs	r3, r2
 8002830:	4662      	mov	r2, ip
 8002832:	08d4      	lsrs	r4, r2, #3
 8002834:	e6b0      	b.n	8002598 <__aeabi_dsub+0x314>
 8002836:	000b      	movs	r3, r1
 8002838:	433b      	orrs	r3, r7
 800283a:	d100      	bne.n	800283e <__aeabi_dsub+0x5ba>
 800283c:	e728      	b.n	8002690 <__aeabi_dsub+0x40c>
 800283e:	08ff      	lsrs	r7, r7, #3
 8002840:	074b      	lsls	r3, r1, #29
 8002842:	465d      	mov	r5, fp
 8002844:	433b      	orrs	r3, r7
 8002846:	08cc      	lsrs	r4, r1, #3
 8002848:	e697      	b.n	800257a <__aeabi_dsub+0x2f6>
 800284a:	2302      	movs	r3, #2
 800284c:	4698      	mov	r8, r3
 800284e:	e736      	b.n	80026be <__aeabi_dsub+0x43a>
 8002850:	1afc      	subs	r4, r7, r3
 8002852:	42a7      	cmp	r7, r4
 8002854:	41bf      	sbcs	r7, r7
 8002856:	4663      	mov	r3, ip
 8002858:	427f      	negs	r7, r7
 800285a:	1ac9      	subs	r1, r1, r3
 800285c:	1bcb      	subs	r3, r1, r7
 800285e:	4699      	mov	r9, r3
 8002860:	2301      	movs	r3, #1
 8002862:	465d      	mov	r5, fp
 8002864:	4698      	mov	r8, r3
 8002866:	e55e      	b.n	8002326 <__aeabi_dsub+0xa2>
 8002868:	074b      	lsls	r3, r1, #29
 800286a:	08ff      	lsrs	r7, r7, #3
 800286c:	433b      	orrs	r3, r7
 800286e:	08cc      	lsrs	r4, r1, #3
 8002870:	e692      	b.n	8002598 <__aeabi_dsub+0x314>
 8002872:	1bdc      	subs	r4, r3, r7
 8002874:	4660      	mov	r0, ip
 8002876:	42a3      	cmp	r3, r4
 8002878:	41b6      	sbcs	r6, r6
 800287a:	1a40      	subs	r0, r0, r1
 800287c:	4276      	negs	r6, r6
 800287e:	1b80      	subs	r0, r0, r6
 8002880:	4681      	mov	r9, r0
 8002882:	0200      	lsls	r0, r0, #8
 8002884:	d560      	bpl.n	8002948 <__aeabi_dsub+0x6c4>
 8002886:	1afc      	subs	r4, r7, r3
 8002888:	42a7      	cmp	r7, r4
 800288a:	41bf      	sbcs	r7, r7
 800288c:	4663      	mov	r3, ip
 800288e:	427f      	negs	r7, r7
 8002890:	1ac9      	subs	r1, r1, r3
 8002892:	1bcb      	subs	r3, r1, r7
 8002894:	4699      	mov	r9, r3
 8002896:	465d      	mov	r5, fp
 8002898:	e576      	b.n	8002388 <__aeabi_dsub+0x104>
 800289a:	08ff      	lsrs	r7, r7, #3
 800289c:	074b      	lsls	r3, r1, #29
 800289e:	433b      	orrs	r3, r7
 80028a0:	08cc      	lsrs	r4, r1, #3
 80028a2:	e667      	b.n	8002574 <__aeabi_dsub+0x2f0>
 80028a4:	000a      	movs	r2, r1
 80028a6:	08db      	lsrs	r3, r3, #3
 80028a8:	433a      	orrs	r2, r7
 80028aa:	d100      	bne.n	80028ae <__aeabi_dsub+0x62a>
 80028ac:	e66f      	b.n	800258e <__aeabi_dsub+0x30a>
 80028ae:	4662      	mov	r2, ip
 80028b0:	0752      	lsls	r2, r2, #29
 80028b2:	4313      	orrs	r3, r2
 80028b4:	4662      	mov	r2, ip
 80028b6:	08d4      	lsrs	r4, r2, #3
 80028b8:	2280      	movs	r2, #128	; 0x80
 80028ba:	0312      	lsls	r2, r2, #12
 80028bc:	4214      	tst	r4, r2
 80028be:	d007      	beq.n	80028d0 <__aeabi_dsub+0x64c>
 80028c0:	08c8      	lsrs	r0, r1, #3
 80028c2:	4210      	tst	r0, r2
 80028c4:	d104      	bne.n	80028d0 <__aeabi_dsub+0x64c>
 80028c6:	465d      	mov	r5, fp
 80028c8:	0004      	movs	r4, r0
 80028ca:	08fb      	lsrs	r3, r7, #3
 80028cc:	0749      	lsls	r1, r1, #29
 80028ce:	430b      	orrs	r3, r1
 80028d0:	0f5a      	lsrs	r2, r3, #29
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	08db      	lsrs	r3, r3, #3
 80028d6:	0752      	lsls	r2, r2, #29
 80028d8:	4313      	orrs	r3, r2
 80028da:	e65d      	b.n	8002598 <__aeabi_dsub+0x314>
 80028dc:	074b      	lsls	r3, r1, #29
 80028de:	08ff      	lsrs	r7, r7, #3
 80028e0:	433b      	orrs	r3, r7
 80028e2:	08cc      	lsrs	r4, r1, #3
 80028e4:	e649      	b.n	800257a <__aeabi_dsub+0x2f6>
 80028e6:	19dc      	adds	r4, r3, r7
 80028e8:	429c      	cmp	r4, r3
 80028ea:	419b      	sbcs	r3, r3
 80028ec:	4461      	add	r1, ip
 80028ee:	4689      	mov	r9, r1
 80028f0:	425b      	negs	r3, r3
 80028f2:	4499      	add	r9, r3
 80028f4:	464b      	mov	r3, r9
 80028f6:	021b      	lsls	r3, r3, #8
 80028f8:	d400      	bmi.n	80028fc <__aeabi_dsub+0x678>
 80028fa:	e631      	b.n	8002560 <__aeabi_dsub+0x2dc>
 80028fc:	464a      	mov	r2, r9
 80028fe:	4b17      	ldr	r3, [pc, #92]	; (800295c <__aeabi_dsub+0x6d8>)
 8002900:	401a      	ands	r2, r3
 8002902:	2301      	movs	r3, #1
 8002904:	4691      	mov	r9, r2
 8002906:	4698      	mov	r8, r3
 8002908:	e62a      	b.n	8002560 <__aeabi_dsub+0x2dc>
 800290a:	0016      	movs	r6, r2
 800290c:	4664      	mov	r4, ip
 800290e:	3e20      	subs	r6, #32
 8002910:	40f4      	lsrs	r4, r6
 8002912:	46a0      	mov	r8, r4
 8002914:	2a20      	cmp	r2, #32
 8002916:	d005      	beq.n	8002924 <__aeabi_dsub+0x6a0>
 8002918:	2640      	movs	r6, #64	; 0x40
 800291a:	4664      	mov	r4, ip
 800291c:	1ab2      	subs	r2, r6, r2
 800291e:	4094      	lsls	r4, r2
 8002920:	4323      	orrs	r3, r4
 8002922:	469a      	mov	sl, r3
 8002924:	4654      	mov	r4, sl
 8002926:	1e63      	subs	r3, r4, #1
 8002928:	419c      	sbcs	r4, r3
 800292a:	4643      	mov	r3, r8
 800292c:	431c      	orrs	r4, r3
 800292e:	e5db      	b.n	80024e8 <__aeabi_dsub+0x264>
 8002930:	0002      	movs	r2, r0
 8002932:	2400      	movs	r4, #0
 8002934:	2300      	movs	r3, #0
 8002936:	e548      	b.n	80023ca <__aeabi_dsub+0x146>
 8002938:	19dc      	adds	r4, r3, r7
 800293a:	42bc      	cmp	r4, r7
 800293c:	41bf      	sbcs	r7, r7
 800293e:	4461      	add	r1, ip
 8002940:	4689      	mov	r9, r1
 8002942:	427f      	negs	r7, r7
 8002944:	44b9      	add	r9, r7
 8002946:	e738      	b.n	80027ba <__aeabi_dsub+0x536>
 8002948:	464b      	mov	r3, r9
 800294a:	4323      	orrs	r3, r4
 800294c:	d100      	bne.n	8002950 <__aeabi_dsub+0x6cc>
 800294e:	e69f      	b.n	8002690 <__aeabi_dsub+0x40c>
 8002950:	e606      	b.n	8002560 <__aeabi_dsub+0x2dc>
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	000007fe 	.word	0x000007fe
 8002958:	000007ff 	.word	0x000007ff
 800295c:	ff7fffff 	.word	0xff7fffff
 8002960:	08ff      	lsrs	r7, r7, #3
 8002962:	074b      	lsls	r3, r1, #29
 8002964:	433b      	orrs	r3, r7
 8002966:	08cc      	lsrs	r4, r1, #3
 8002968:	e616      	b.n	8002598 <__aeabi_dsub+0x314>
 800296a:	4662      	mov	r2, ip
 800296c:	08db      	lsrs	r3, r3, #3
 800296e:	0752      	lsls	r2, r2, #29
 8002970:	4313      	orrs	r3, r2
 8002972:	4662      	mov	r2, ip
 8002974:	08d4      	lsrs	r4, r2, #3
 8002976:	2280      	movs	r2, #128	; 0x80
 8002978:	0312      	lsls	r2, r2, #12
 800297a:	4214      	tst	r4, r2
 800297c:	d007      	beq.n	800298e <__aeabi_dsub+0x70a>
 800297e:	08c8      	lsrs	r0, r1, #3
 8002980:	4210      	tst	r0, r2
 8002982:	d104      	bne.n	800298e <__aeabi_dsub+0x70a>
 8002984:	465d      	mov	r5, fp
 8002986:	0004      	movs	r4, r0
 8002988:	08fb      	lsrs	r3, r7, #3
 800298a:	0749      	lsls	r1, r1, #29
 800298c:	430b      	orrs	r3, r1
 800298e:	0f5a      	lsrs	r2, r3, #29
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	0752      	lsls	r2, r2, #29
 8002994:	08db      	lsrs	r3, r3, #3
 8002996:	4313      	orrs	r3, r2
 8002998:	e5fe      	b.n	8002598 <__aeabi_dsub+0x314>
 800299a:	2300      	movs	r3, #0
 800299c:	4a01      	ldr	r2, [pc, #4]	; (80029a4 <__aeabi_dsub+0x720>)
 800299e:	001c      	movs	r4, r3
 80029a0:	e513      	b.n	80023ca <__aeabi_dsub+0x146>
 80029a2:	46c0      	nop			; (mov r8, r8)
 80029a4:	000007ff 	.word	0x000007ff

080029a8 <__aeabi_dcmpun>:
 80029a8:	b570      	push	{r4, r5, r6, lr}
 80029aa:	0005      	movs	r5, r0
 80029ac:	480c      	ldr	r0, [pc, #48]	; (80029e0 <__aeabi_dcmpun+0x38>)
 80029ae:	031c      	lsls	r4, r3, #12
 80029b0:	0016      	movs	r6, r2
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	030a      	lsls	r2, r1, #12
 80029b6:	0049      	lsls	r1, r1, #1
 80029b8:	0b12      	lsrs	r2, r2, #12
 80029ba:	0d49      	lsrs	r1, r1, #21
 80029bc:	0b24      	lsrs	r4, r4, #12
 80029be:	0d5b      	lsrs	r3, r3, #21
 80029c0:	4281      	cmp	r1, r0
 80029c2:	d008      	beq.n	80029d6 <__aeabi_dcmpun+0x2e>
 80029c4:	4a06      	ldr	r2, [pc, #24]	; (80029e0 <__aeabi_dcmpun+0x38>)
 80029c6:	2000      	movs	r0, #0
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d103      	bne.n	80029d4 <__aeabi_dcmpun+0x2c>
 80029cc:	0020      	movs	r0, r4
 80029ce:	4330      	orrs	r0, r6
 80029d0:	1e43      	subs	r3, r0, #1
 80029d2:	4198      	sbcs	r0, r3
 80029d4:	bd70      	pop	{r4, r5, r6, pc}
 80029d6:	2001      	movs	r0, #1
 80029d8:	432a      	orrs	r2, r5
 80029da:	d1fb      	bne.n	80029d4 <__aeabi_dcmpun+0x2c>
 80029dc:	e7f2      	b.n	80029c4 <__aeabi_dcmpun+0x1c>
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	000007ff 	.word	0x000007ff

080029e4 <__aeabi_d2iz>:
 80029e4:	000a      	movs	r2, r1
 80029e6:	b530      	push	{r4, r5, lr}
 80029e8:	4c13      	ldr	r4, [pc, #76]	; (8002a38 <__aeabi_d2iz+0x54>)
 80029ea:	0053      	lsls	r3, r2, #1
 80029ec:	0309      	lsls	r1, r1, #12
 80029ee:	0005      	movs	r5, r0
 80029f0:	0b09      	lsrs	r1, r1, #12
 80029f2:	2000      	movs	r0, #0
 80029f4:	0d5b      	lsrs	r3, r3, #21
 80029f6:	0fd2      	lsrs	r2, r2, #31
 80029f8:	42a3      	cmp	r3, r4
 80029fa:	dd04      	ble.n	8002a06 <__aeabi_d2iz+0x22>
 80029fc:	480f      	ldr	r0, [pc, #60]	; (8002a3c <__aeabi_d2iz+0x58>)
 80029fe:	4283      	cmp	r3, r0
 8002a00:	dd02      	ble.n	8002a08 <__aeabi_d2iz+0x24>
 8002a02:	4b0f      	ldr	r3, [pc, #60]	; (8002a40 <__aeabi_d2iz+0x5c>)
 8002a04:	18d0      	adds	r0, r2, r3
 8002a06:	bd30      	pop	{r4, r5, pc}
 8002a08:	2080      	movs	r0, #128	; 0x80
 8002a0a:	0340      	lsls	r0, r0, #13
 8002a0c:	4301      	orrs	r1, r0
 8002a0e:	480d      	ldr	r0, [pc, #52]	; (8002a44 <__aeabi_d2iz+0x60>)
 8002a10:	1ac0      	subs	r0, r0, r3
 8002a12:	281f      	cmp	r0, #31
 8002a14:	dd08      	ble.n	8002a28 <__aeabi_d2iz+0x44>
 8002a16:	480c      	ldr	r0, [pc, #48]	; (8002a48 <__aeabi_d2iz+0x64>)
 8002a18:	1ac3      	subs	r3, r0, r3
 8002a1a:	40d9      	lsrs	r1, r3
 8002a1c:	000b      	movs	r3, r1
 8002a1e:	4258      	negs	r0, r3
 8002a20:	2a00      	cmp	r2, #0
 8002a22:	d1f0      	bne.n	8002a06 <__aeabi_d2iz+0x22>
 8002a24:	0018      	movs	r0, r3
 8002a26:	e7ee      	b.n	8002a06 <__aeabi_d2iz+0x22>
 8002a28:	4c08      	ldr	r4, [pc, #32]	; (8002a4c <__aeabi_d2iz+0x68>)
 8002a2a:	40c5      	lsrs	r5, r0
 8002a2c:	46a4      	mov	ip, r4
 8002a2e:	4463      	add	r3, ip
 8002a30:	4099      	lsls	r1, r3
 8002a32:	000b      	movs	r3, r1
 8002a34:	432b      	orrs	r3, r5
 8002a36:	e7f2      	b.n	8002a1e <__aeabi_d2iz+0x3a>
 8002a38:	000003fe 	.word	0x000003fe
 8002a3c:	0000041d 	.word	0x0000041d
 8002a40:	7fffffff 	.word	0x7fffffff
 8002a44:	00000433 	.word	0x00000433
 8002a48:	00000413 	.word	0x00000413
 8002a4c:	fffffbed 	.word	0xfffffbed

08002a50 <__aeabi_i2d>:
 8002a50:	b570      	push	{r4, r5, r6, lr}
 8002a52:	2800      	cmp	r0, #0
 8002a54:	d016      	beq.n	8002a84 <__aeabi_i2d+0x34>
 8002a56:	17c3      	asrs	r3, r0, #31
 8002a58:	18c5      	adds	r5, r0, r3
 8002a5a:	405d      	eors	r5, r3
 8002a5c:	0fc4      	lsrs	r4, r0, #31
 8002a5e:	0028      	movs	r0, r5
 8002a60:	f000 f894 	bl	8002b8c <__clzsi2>
 8002a64:	4a11      	ldr	r2, [pc, #68]	; (8002aac <__aeabi_i2d+0x5c>)
 8002a66:	1a12      	subs	r2, r2, r0
 8002a68:	280a      	cmp	r0, #10
 8002a6a:	dc16      	bgt.n	8002a9a <__aeabi_i2d+0x4a>
 8002a6c:	0003      	movs	r3, r0
 8002a6e:	002e      	movs	r6, r5
 8002a70:	3315      	adds	r3, #21
 8002a72:	409e      	lsls	r6, r3
 8002a74:	230b      	movs	r3, #11
 8002a76:	1a18      	subs	r0, r3, r0
 8002a78:	40c5      	lsrs	r5, r0
 8002a7a:	0552      	lsls	r2, r2, #21
 8002a7c:	032d      	lsls	r5, r5, #12
 8002a7e:	0b2d      	lsrs	r5, r5, #12
 8002a80:	0d53      	lsrs	r3, r2, #21
 8002a82:	e003      	b.n	8002a8c <__aeabi_i2d+0x3c>
 8002a84:	2400      	movs	r4, #0
 8002a86:	2300      	movs	r3, #0
 8002a88:	2500      	movs	r5, #0
 8002a8a:	2600      	movs	r6, #0
 8002a8c:	051b      	lsls	r3, r3, #20
 8002a8e:	432b      	orrs	r3, r5
 8002a90:	07e4      	lsls	r4, r4, #31
 8002a92:	4323      	orrs	r3, r4
 8002a94:	0030      	movs	r0, r6
 8002a96:	0019      	movs	r1, r3
 8002a98:	bd70      	pop	{r4, r5, r6, pc}
 8002a9a:	380b      	subs	r0, #11
 8002a9c:	4085      	lsls	r5, r0
 8002a9e:	0552      	lsls	r2, r2, #21
 8002aa0:	032d      	lsls	r5, r5, #12
 8002aa2:	2600      	movs	r6, #0
 8002aa4:	0b2d      	lsrs	r5, r5, #12
 8002aa6:	0d53      	lsrs	r3, r2, #21
 8002aa8:	e7f0      	b.n	8002a8c <__aeabi_i2d+0x3c>
 8002aaa:	46c0      	nop			; (mov r8, r8)
 8002aac:	0000041e 	.word	0x0000041e

08002ab0 <__aeabi_ui2d>:
 8002ab0:	b510      	push	{r4, lr}
 8002ab2:	1e04      	subs	r4, r0, #0
 8002ab4:	d010      	beq.n	8002ad8 <__aeabi_ui2d+0x28>
 8002ab6:	f000 f869 	bl	8002b8c <__clzsi2>
 8002aba:	4b0f      	ldr	r3, [pc, #60]	; (8002af8 <__aeabi_ui2d+0x48>)
 8002abc:	1a1b      	subs	r3, r3, r0
 8002abe:	280a      	cmp	r0, #10
 8002ac0:	dc11      	bgt.n	8002ae6 <__aeabi_ui2d+0x36>
 8002ac2:	220b      	movs	r2, #11
 8002ac4:	0021      	movs	r1, r4
 8002ac6:	1a12      	subs	r2, r2, r0
 8002ac8:	40d1      	lsrs	r1, r2
 8002aca:	3015      	adds	r0, #21
 8002acc:	030a      	lsls	r2, r1, #12
 8002ace:	055b      	lsls	r3, r3, #21
 8002ad0:	4084      	lsls	r4, r0
 8002ad2:	0b12      	lsrs	r2, r2, #12
 8002ad4:	0d5b      	lsrs	r3, r3, #21
 8002ad6:	e001      	b.n	8002adc <__aeabi_ui2d+0x2c>
 8002ad8:	2300      	movs	r3, #0
 8002ada:	2200      	movs	r2, #0
 8002adc:	051b      	lsls	r3, r3, #20
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	0020      	movs	r0, r4
 8002ae2:	0019      	movs	r1, r3
 8002ae4:	bd10      	pop	{r4, pc}
 8002ae6:	0022      	movs	r2, r4
 8002ae8:	380b      	subs	r0, #11
 8002aea:	4082      	lsls	r2, r0
 8002aec:	055b      	lsls	r3, r3, #21
 8002aee:	0312      	lsls	r2, r2, #12
 8002af0:	2400      	movs	r4, #0
 8002af2:	0b12      	lsrs	r2, r2, #12
 8002af4:	0d5b      	lsrs	r3, r3, #21
 8002af6:	e7f1      	b.n	8002adc <__aeabi_ui2d+0x2c>
 8002af8:	0000041e 	.word	0x0000041e

08002afc <__aeabi_f2d>:
 8002afc:	b570      	push	{r4, r5, r6, lr}
 8002afe:	0043      	lsls	r3, r0, #1
 8002b00:	0246      	lsls	r6, r0, #9
 8002b02:	0fc4      	lsrs	r4, r0, #31
 8002b04:	20fe      	movs	r0, #254	; 0xfe
 8002b06:	0e1b      	lsrs	r3, r3, #24
 8002b08:	1c59      	adds	r1, r3, #1
 8002b0a:	0a75      	lsrs	r5, r6, #9
 8002b0c:	4208      	tst	r0, r1
 8002b0e:	d00c      	beq.n	8002b2a <__aeabi_f2d+0x2e>
 8002b10:	22e0      	movs	r2, #224	; 0xe0
 8002b12:	0092      	lsls	r2, r2, #2
 8002b14:	4694      	mov	ip, r2
 8002b16:	076d      	lsls	r5, r5, #29
 8002b18:	0b36      	lsrs	r6, r6, #12
 8002b1a:	4463      	add	r3, ip
 8002b1c:	051b      	lsls	r3, r3, #20
 8002b1e:	4333      	orrs	r3, r6
 8002b20:	07e4      	lsls	r4, r4, #31
 8002b22:	4323      	orrs	r3, r4
 8002b24:	0028      	movs	r0, r5
 8002b26:	0019      	movs	r1, r3
 8002b28:	bd70      	pop	{r4, r5, r6, pc}
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d114      	bne.n	8002b58 <__aeabi_f2d+0x5c>
 8002b2e:	2d00      	cmp	r5, #0
 8002b30:	d01b      	beq.n	8002b6a <__aeabi_f2d+0x6e>
 8002b32:	0028      	movs	r0, r5
 8002b34:	f000 f82a 	bl	8002b8c <__clzsi2>
 8002b38:	280a      	cmp	r0, #10
 8002b3a:	dc1c      	bgt.n	8002b76 <__aeabi_f2d+0x7a>
 8002b3c:	230b      	movs	r3, #11
 8002b3e:	002e      	movs	r6, r5
 8002b40:	1a1b      	subs	r3, r3, r0
 8002b42:	40de      	lsrs	r6, r3
 8002b44:	0003      	movs	r3, r0
 8002b46:	3315      	adds	r3, #21
 8002b48:	409d      	lsls	r5, r3
 8002b4a:	4a0e      	ldr	r2, [pc, #56]	; (8002b84 <__aeabi_f2d+0x88>)
 8002b4c:	0336      	lsls	r6, r6, #12
 8002b4e:	1a12      	subs	r2, r2, r0
 8002b50:	0552      	lsls	r2, r2, #21
 8002b52:	0b36      	lsrs	r6, r6, #12
 8002b54:	0d53      	lsrs	r3, r2, #21
 8002b56:	e7e1      	b.n	8002b1c <__aeabi_f2d+0x20>
 8002b58:	2d00      	cmp	r5, #0
 8002b5a:	d009      	beq.n	8002b70 <__aeabi_f2d+0x74>
 8002b5c:	2280      	movs	r2, #128	; 0x80
 8002b5e:	0b36      	lsrs	r6, r6, #12
 8002b60:	0312      	lsls	r2, r2, #12
 8002b62:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <__aeabi_f2d+0x8c>)
 8002b64:	076d      	lsls	r5, r5, #29
 8002b66:	4316      	orrs	r6, r2
 8002b68:	e7d8      	b.n	8002b1c <__aeabi_f2d+0x20>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	2600      	movs	r6, #0
 8002b6e:	e7d5      	b.n	8002b1c <__aeabi_f2d+0x20>
 8002b70:	2600      	movs	r6, #0
 8002b72:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <__aeabi_f2d+0x8c>)
 8002b74:	e7d2      	b.n	8002b1c <__aeabi_f2d+0x20>
 8002b76:	0003      	movs	r3, r0
 8002b78:	3b0b      	subs	r3, #11
 8002b7a:	409d      	lsls	r5, r3
 8002b7c:	002e      	movs	r6, r5
 8002b7e:	2500      	movs	r5, #0
 8002b80:	e7e3      	b.n	8002b4a <__aeabi_f2d+0x4e>
 8002b82:	46c0      	nop			; (mov r8, r8)
 8002b84:	00000389 	.word	0x00000389
 8002b88:	000007ff 	.word	0x000007ff

08002b8c <__clzsi2>:
 8002b8c:	211c      	movs	r1, #28
 8002b8e:	2301      	movs	r3, #1
 8002b90:	041b      	lsls	r3, r3, #16
 8002b92:	4298      	cmp	r0, r3
 8002b94:	d301      	bcc.n	8002b9a <__clzsi2+0xe>
 8002b96:	0c00      	lsrs	r0, r0, #16
 8002b98:	3910      	subs	r1, #16
 8002b9a:	0a1b      	lsrs	r3, r3, #8
 8002b9c:	4298      	cmp	r0, r3
 8002b9e:	d301      	bcc.n	8002ba4 <__clzsi2+0x18>
 8002ba0:	0a00      	lsrs	r0, r0, #8
 8002ba2:	3908      	subs	r1, #8
 8002ba4:	091b      	lsrs	r3, r3, #4
 8002ba6:	4298      	cmp	r0, r3
 8002ba8:	d301      	bcc.n	8002bae <__clzsi2+0x22>
 8002baa:	0900      	lsrs	r0, r0, #4
 8002bac:	3904      	subs	r1, #4
 8002bae:	a202      	add	r2, pc, #8	; (adr r2, 8002bb8 <__clzsi2+0x2c>)
 8002bb0:	5c10      	ldrb	r0, [r2, r0]
 8002bb2:	1840      	adds	r0, r0, r1
 8002bb4:	4770      	bx	lr
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	02020304 	.word	0x02020304
 8002bbc:	01010101 	.word	0x01010101
	...

08002bc8 <__clzdi2>:
 8002bc8:	b510      	push	{r4, lr}
 8002bca:	2900      	cmp	r1, #0
 8002bcc:	d103      	bne.n	8002bd6 <__clzdi2+0xe>
 8002bce:	f7ff ffdd 	bl	8002b8c <__clzsi2>
 8002bd2:	3020      	adds	r0, #32
 8002bd4:	e002      	b.n	8002bdc <__clzdi2+0x14>
 8002bd6:	0008      	movs	r0, r1
 8002bd8:	f7ff ffd8 	bl	8002b8c <__clzsi2>
 8002bdc:	bd10      	pop	{r4, pc}
 8002bde:	46c0      	nop			; (mov r8, r8)

08002be0 <i2c_scanner>:
/* USER CODE BEGIN 0 */
/*-[ I2C Bus Scanning ]-*/



void i2c_scanner(I2C_HandleTypeDef *i2c) {
 8002be0:	b5b0      	push	{r4, r5, r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]

	printf("Scanning I2C bus:\r\n");
 8002be8:	4b21      	ldr	r3, [pc, #132]	; (8002c70 <i2c_scanner+0x90>)
 8002bea:	0018      	movs	r0, r3
 8002bec:	f004 fe40 	bl	8007870 <puts>
	HAL_StatusTypeDef ret;
	uint16_t i = 0;
 8002bf0:	210e      	movs	r1, #14
 8002bf2:	187b      	adds	r3, r7, r1
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	801a      	strh	r2, [r3, #0]

	for (i = 1; i < 128; i++) {
 8002bf8:	187b      	adds	r3, r7, r1
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	801a      	strh	r2, [r3, #0]
 8002bfe:	e029      	b.n	8002c54 <i2c_scanner+0x74>
		ret = HAL_I2C_IsDeviceReady(i2c, (uint16_t) (i << 1), 3, 10);
 8002c00:	230e      	movs	r3, #14
 8002c02:	18fb      	adds	r3, r7, r3
 8002c04:	881b      	ldrh	r3, [r3, #0]
 8002c06:	18db      	adds	r3, r3, r3
 8002c08:	b299      	uxth	r1, r3
 8002c0a:	250d      	movs	r5, #13
 8002c0c:	197c      	adds	r4, r7, r5
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	230a      	movs	r3, #10
 8002c12:	2203      	movs	r2, #3
 8002c14:	f001 ff28 	bl	8004a68 <HAL_I2C_IsDeviceReady>
 8002c18:	0003      	movs	r3, r0
 8002c1a:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) /* No ACK Received At That Address */
 8002c1c:	197b      	adds	r3, r7, r5
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <i2c_scanner+0x4c>
		{
			printf("-");
 8002c24:	202d      	movs	r0, #45	; 0x2d
 8002c26:	f004 fd9d 	bl	8007764 <putchar>
 8002c2a:	e00d      	b.n	8002c48 <i2c_scanner+0x68>
		} else if (ret == HAL_OK) {
 8002c2c:	230d      	movs	r3, #13
 8002c2e:	18fb      	adds	r3, r7, r3
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d108      	bne.n	8002c48 <i2c_scanner+0x68>
			printf("0x%X", i<<1);
 8002c36:	230e      	movs	r3, #14
 8002c38:	18fb      	adds	r3, r7, r3
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	005a      	lsls	r2, r3, #1
 8002c3e:	4b0d      	ldr	r3, [pc, #52]	; (8002c74 <i2c_scanner+0x94>)
 8002c40:	0011      	movs	r1, r2
 8002c42:	0018      	movs	r0, r3
 8002c44:	f004 fd74 	bl	8007730 <iprintf>
	for (i = 1; i < 128; i++) {
 8002c48:	210e      	movs	r1, #14
 8002c4a:	187b      	adds	r3, r7, r1
 8002c4c:	881a      	ldrh	r2, [r3, #0]
 8002c4e:	187b      	adds	r3, r7, r1
 8002c50:	3201      	adds	r2, #1
 8002c52:	801a      	strh	r2, [r3, #0]
 8002c54:	230e      	movs	r3, #14
 8002c56:	18fb      	adds	r3, r7, r3
 8002c58:	881b      	ldrh	r3, [r3, #0]
 8002c5a:	2b7f      	cmp	r3, #127	; 0x7f
 8002c5c:	d9d0      	bls.n	8002c00 <i2c_scanner+0x20>
		}
	}
	printf("\r\n");
 8002c5e:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <i2c_scanner+0x98>)
 8002c60:	0018      	movs	r0, r3
 8002c62:	f004 fe05 	bl	8007870 <puts>
}
 8002c66:	46c0      	nop			; (mov r8, r8)
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	b004      	add	sp, #16
 8002c6c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	08009f88 	.word	0x08009f88
 8002c74:	08009f9c 	.word	0x08009f9c
 8002c78:	08009fa4 	.word	0x08009fa4

08002c7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c80:	f001 f93c 	bl	8003efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c84:	f000 f81a 	bl	8002cbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c88:	f000 f8fe 	bl	8002e88 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002c8c:	f000 f88c 	bl	8002da8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002c90:	f000 f8ca 	bl	8002e28 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  i2c_scanner(&hi2c1);
 8002c94:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <main+0x34>)
 8002c96:	0018      	movs	r0, r3
 8002c98:	f7ff ffa2 	bl	8002be0 <i2c_scanner>
  lsm303agr_read_data_polling();
 8002c9c:	f000 f92e 	bl	8002efc <lsm303agr_read_data_polling>
  /* USER CODE END 2 */
HAL_UART_Transmit(&huart1, "Hello\r\n",7,1000);
 8002ca0:	23fa      	movs	r3, #250	; 0xfa
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4903      	ldr	r1, [pc, #12]	; (8002cb4 <main+0x38>)
 8002ca6:	4804      	ldr	r0, [pc, #16]	; (8002cb8 <main+0x3c>)
 8002ca8:	2207      	movs	r2, #7
 8002caa:	f003 fb53 	bl	8006354 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002cae:	e7fe      	b.n	8002cae <main+0x32>
 8002cb0:	20000218 	.word	0x20000218
 8002cb4:	08009fa8 	.word	0x08009fa8
 8002cb8:	2000026c 	.word	0x2000026c

08002cbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cbc:	b590      	push	{r4, r7, lr}
 8002cbe:	b09d      	sub	sp, #116	; 0x74
 8002cc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cc2:	2438      	movs	r4, #56	; 0x38
 8002cc4:	193b      	adds	r3, r7, r4
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	2338      	movs	r3, #56	; 0x38
 8002cca:	001a      	movs	r2, r3
 8002ccc:	2100      	movs	r1, #0
 8002cce:	f004 f8b9 	bl	8006e44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cd2:	2324      	movs	r3, #36	; 0x24
 8002cd4:	18fb      	adds	r3, r7, r3
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	2314      	movs	r3, #20
 8002cda:	001a      	movs	r2, r3
 8002cdc:	2100      	movs	r1, #0
 8002cde:	f004 f8b1 	bl	8006e44 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ce2:	003b      	movs	r3, r7
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	2324      	movs	r3, #36	; 0x24
 8002ce8:	001a      	movs	r2, r3
 8002cea:	2100      	movs	r1, #0
 8002cec:	f004 f8aa 	bl	8006e44 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cf0:	4b2b      	ldr	r3, [pc, #172]	; (8002da0 <SystemClock_Config+0xe4>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a2b      	ldr	r2, [pc, #172]	; (8002da4 <SystemClock_Config+0xe8>)
 8002cf6:	401a      	ands	r2, r3
 8002cf8:	4b29      	ldr	r3, [pc, #164]	; (8002da0 <SystemClock_Config+0xe4>)
 8002cfa:	2180      	movs	r1, #128	; 0x80
 8002cfc:	0109      	lsls	r1, r1, #4
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d02:	0021      	movs	r1, r4
 8002d04:	187b      	adds	r3, r7, r1
 8002d06:	2202      	movs	r2, #2
 8002d08:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d0a:	187b      	adds	r3, r7, r1
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d10:	187b      	adds	r3, r7, r1
 8002d12:	2210      	movs	r2, #16
 8002d14:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d16:	187b      	adds	r3, r7, r1
 8002d18:	2202      	movs	r2, #2
 8002d1a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d1c:	187b      	adds	r3, r7, r1
 8002d1e:	2200      	movs	r2, #0
 8002d20:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8002d22:	187b      	adds	r3, r7, r1
 8002d24:	2280      	movs	r2, #128	; 0x80
 8002d26:	02d2      	lsls	r2, r2, #11
 8002d28:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002d2a:	187b      	adds	r3, r7, r1
 8002d2c:	2280      	movs	r2, #128	; 0x80
 8002d2e:	03d2      	lsls	r2, r2, #15
 8002d30:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d32:	187b      	adds	r3, r7, r1
 8002d34:	0018      	movs	r0, r3
 8002d36:	f002 fb43 	bl	80053c0 <HAL_RCC_OscConfig>
 8002d3a:	1e03      	subs	r3, r0, #0
 8002d3c:	d001      	beq.n	8002d42 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8002d3e:	f000 fb04 	bl	800334a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d42:	2124      	movs	r1, #36	; 0x24
 8002d44:	187b      	adds	r3, r7, r1
 8002d46:	220f      	movs	r2, #15
 8002d48:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d4a:	187b      	adds	r3, r7, r1
 8002d4c:	2203      	movs	r2, #3
 8002d4e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d50:	187b      	adds	r3, r7, r1
 8002d52:	2200      	movs	r2, #0
 8002d54:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d56:	187b      	adds	r3, r7, r1
 8002d58:	2200      	movs	r2, #0
 8002d5a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d5c:	187b      	adds	r3, r7, r1
 8002d5e:	2200      	movs	r2, #0
 8002d60:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002d62:	187b      	adds	r3, r7, r1
 8002d64:	2101      	movs	r1, #1
 8002d66:	0018      	movs	r0, r3
 8002d68:	f002 feee 	bl	8005b48 <HAL_RCC_ClockConfig>
 8002d6c:	1e03      	subs	r3, r0, #0
 8002d6e:	d001      	beq.n	8002d74 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002d70:	f000 faeb 	bl	800334a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002d74:	003b      	movs	r3, r7
 8002d76:	2209      	movs	r2, #9
 8002d78:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002d7a:	003b      	movs	r3, r7
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002d80:	003b      	movs	r3, r7
 8002d82:	2200      	movs	r2, #0
 8002d84:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d86:	003b      	movs	r3, r7
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f003 f901 	bl	8005f90 <HAL_RCCEx_PeriphCLKConfig>
 8002d8e:	1e03      	subs	r3, r0, #0
 8002d90:	d001      	beq.n	8002d96 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8002d92:	f000 fada 	bl	800334a <Error_Handler>
  }
}
 8002d96:	46c0      	nop			; (mov r8, r8)
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	b01d      	add	sp, #116	; 0x74
 8002d9c:	bd90      	pop	{r4, r7, pc}
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	40007000 	.word	0x40007000
 8002da4:	ffffe7ff 	.word	0xffffe7ff

08002da8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002dac:	4b1b      	ldr	r3, [pc, #108]	; (8002e1c <MX_I2C1_Init+0x74>)
 8002dae:	4a1c      	ldr	r2, [pc, #112]	; (8002e20 <MX_I2C1_Init+0x78>)
 8002db0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8002db2:	4b1a      	ldr	r3, [pc, #104]	; (8002e1c <MX_I2C1_Init+0x74>)
 8002db4:	4a1b      	ldr	r2, [pc, #108]	; (8002e24 <MX_I2C1_Init+0x7c>)
 8002db6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002db8:	4b18      	ldr	r3, [pc, #96]	; (8002e1c <MX_I2C1_Init+0x74>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002dbe:	4b17      	ldr	r3, [pc, #92]	; (8002e1c <MX_I2C1_Init+0x74>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002dc4:	4b15      	ldr	r3, [pc, #84]	; (8002e1c <MX_I2C1_Init+0x74>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002dca:	4b14      	ldr	r3, [pc, #80]	; (8002e1c <MX_I2C1_Init+0x74>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002dd0:	4b12      	ldr	r3, [pc, #72]	; (8002e1c <MX_I2C1_Init+0x74>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002dd6:	4b11      	ldr	r3, [pc, #68]	; (8002e1c <MX_I2C1_Init+0x74>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ddc:	4b0f      	ldr	r3, [pc, #60]	; (8002e1c <MX_I2C1_Init+0x74>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002de2:	4b0e      	ldr	r3, [pc, #56]	; (8002e1c <MX_I2C1_Init+0x74>)
 8002de4:	0018      	movs	r0, r3
 8002de6:	f001 fb47 	bl	8004478 <HAL_I2C_Init>
 8002dea:	1e03      	subs	r3, r0, #0
 8002dec:	d001      	beq.n	8002df2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002dee:	f000 faac 	bl	800334a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002df2:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <MX_I2C1_Init+0x74>)
 8002df4:	2100      	movs	r1, #0
 8002df6:	0018      	movs	r0, r3
 8002df8:	f002 fa4a 	bl	8005290 <HAL_I2CEx_ConfigAnalogFilter>
 8002dfc:	1e03      	subs	r3, r0, #0
 8002dfe:	d001      	beq.n	8002e04 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002e00:	f000 faa3 	bl	800334a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002e04:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <MX_I2C1_Init+0x74>)
 8002e06:	2100      	movs	r1, #0
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f002 fa8d 	bl	8005328 <HAL_I2CEx_ConfigDigitalFilter>
 8002e0e:	1e03      	subs	r3, r0, #0
 8002e10:	d001      	beq.n	8002e16 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002e12:	f000 fa9a 	bl	800334a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	20000218 	.word	0x20000218
 8002e20:	40005400 	.word	0x40005400
 8002e24:	00707cbb 	.word	0x00707cbb

08002e28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e2c:	4b14      	ldr	r3, [pc, #80]	; (8002e80 <MX_USART1_UART_Init+0x58>)
 8002e2e:	4a15      	ldr	r2, [pc, #84]	; (8002e84 <MX_USART1_UART_Init+0x5c>)
 8002e30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e32:	4b13      	ldr	r3, [pc, #76]	; (8002e80 <MX_USART1_UART_Init+0x58>)
 8002e34:	22e1      	movs	r2, #225	; 0xe1
 8002e36:	0252      	lsls	r2, r2, #9
 8002e38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e3a:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <MX_USART1_UART_Init+0x58>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e40:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <MX_USART1_UART_Init+0x58>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e46:	4b0e      	ldr	r3, [pc, #56]	; (8002e80 <MX_USART1_UART_Init+0x58>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <MX_USART1_UART_Init+0x58>)
 8002e4e:	220c      	movs	r2, #12
 8002e50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e52:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <MX_USART1_UART_Init+0x58>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e58:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <MX_USART1_UART_Init+0x58>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e5e:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <MX_USART1_UART_Init+0x58>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e64:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <MX_USART1_UART_Init+0x58>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e6a:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <MX_USART1_UART_Init+0x58>)
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f003 fa1d 	bl	80062ac <HAL_UART_Init>
 8002e72:	1e03      	subs	r3, r0, #0
 8002e74:	d001      	beq.n	8002e7a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002e76:	f000 fa68 	bl	800334a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	2000026c 	.word	0x2000026c
 8002e84:	40013800 	.word	0x40013800

08002e88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e8e:	4b1a      	ldr	r3, [pc, #104]	; (8002ef8 <MX_GPIO_Init+0x70>)
 8002e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e92:	4b19      	ldr	r3, [pc, #100]	; (8002ef8 <MX_GPIO_Init+0x70>)
 8002e94:	2104      	movs	r1, #4
 8002e96:	430a      	orrs	r2, r1
 8002e98:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e9a:	4b17      	ldr	r3, [pc, #92]	; (8002ef8 <MX_GPIO_Init+0x70>)
 8002e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9e:	2204      	movs	r2, #4
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ea6:	4b14      	ldr	r3, [pc, #80]	; (8002ef8 <MX_GPIO_Init+0x70>)
 8002ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eaa:	4b13      	ldr	r3, [pc, #76]	; (8002ef8 <MX_GPIO_Init+0x70>)
 8002eac:	2180      	movs	r1, #128	; 0x80
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002eb2:	4b11      	ldr	r3, [pc, #68]	; (8002ef8 <MX_GPIO_Init+0x70>)
 8002eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb6:	2280      	movs	r2, #128	; 0x80
 8002eb8:	4013      	ands	r3, r2
 8002eba:	60bb      	str	r3, [r7, #8]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ebe:	4b0e      	ldr	r3, [pc, #56]	; (8002ef8 <MX_GPIO_Init+0x70>)
 8002ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec2:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <MX_GPIO_Init+0x70>)
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002eca:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <MX_GPIO_Init+0x70>)
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ece:	2201      	movs	r2, #1
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	607b      	str	r3, [r7, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed6:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <MX_GPIO_Init+0x70>)
 8002ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eda:	4b07      	ldr	r3, [pc, #28]	; (8002ef8 <MX_GPIO_Init+0x70>)
 8002edc:	2102      	movs	r1, #2
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ee2:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <MX_GPIO_Init+0x70>)
 8002ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	4013      	ands	r3, r2
 8002eea:	603b      	str	r3, [r7, #0]
 8002eec:	683b      	ldr	r3, [r7, #0]

}
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	b004      	add	sp, #16
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	40021000 	.word	0x40021000

08002efc <lsm303agr_read_data_polling>:

/* USER CODE BEGIN 4 */
void lsm303agr_read_data_polling(void) {
 8002efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002efe:	b091      	sub	sp, #68	; 0x44
 8002f00:	af04      	add	r7, sp, #16
	/* Initialize mems driver interface */
	stmdev_ctx_t dev_ctx_xl;
	dev_ctx_xl.write_reg = platform_write;
 8002f02:	2418      	movs	r4, #24
 8002f04:	2508      	movs	r5, #8
 8002f06:	1963      	adds	r3, r4, r5
 8002f08:	19db      	adds	r3, r3, r7
 8002f0a:	4abd      	ldr	r2, [pc, #756]	; (8003200 <lsm303agr_read_data_polling+0x304>)
 8002f0c:	601a      	str	r2, [r3, #0]
	dev_ctx_xl.read_reg = platform_read;
 8002f0e:	1963      	adds	r3, r4, r5
 8002f10:	19db      	adds	r3, r3, r7
 8002f12:	4abc      	ldr	r2, [pc, #752]	; (8003204 <lsm303agr_read_data_polling+0x308>)
 8002f14:	605a      	str	r2, [r3, #4]
	dev_ctx_xl.handle = (void*) &xl_bus;
 8002f16:	1963      	adds	r3, r4, r5
 8002f18:	19db      	adds	r3, r3, r7
 8002f1a:	4abb      	ldr	r2, [pc, #748]	; (8003208 <lsm303agr_read_data_polling+0x30c>)
 8002f1c:	60da      	str	r2, [r3, #12]
	stmdev_ctx_t dev_ctx_mg;
	dev_ctx_mg.write_reg = platform_write;
 8002f1e:	2108      	movs	r1, #8
 8002f20:	194b      	adds	r3, r1, r5
 8002f22:	19db      	adds	r3, r3, r7
 8002f24:	4ab6      	ldr	r2, [pc, #728]	; (8003200 <lsm303agr_read_data_polling+0x304>)
 8002f26:	601a      	str	r2, [r3, #0]
	dev_ctx_mg.read_reg = platform_read;
 8002f28:	194b      	adds	r3, r1, r5
 8002f2a:	19db      	adds	r3, r3, r7
 8002f2c:	4ab5      	ldr	r2, [pc, #724]	; (8003204 <lsm303agr_read_data_polling+0x308>)
 8002f2e:	605a      	str	r2, [r3, #4]
	dev_ctx_mg.handle = (void*) &mag_bus;
 8002f30:	194b      	adds	r3, r1, r5
 8002f32:	19db      	adds	r3, r3, r7
 8002f34:	4ab5      	ldr	r2, [pc, #724]	; (800320c <lsm303agr_read_data_polling+0x310>)
 8002f36:	60da      	str	r2, [r3, #12]
	/* Wait boot time and initialize platform specific hardware */
	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 8002f38:	2005      	movs	r0, #5
 8002f3a:	f000 f9fa 	bl	8003332 <platform_delay>
	/* Check device ID */
	whoamI = 0;
 8002f3e:	4bb4      	ldr	r3, [pc, #720]	; (8003210 <lsm303agr_read_data_polling+0x314>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	701a      	strb	r2, [r3, #0]
	lsm303agr_xl_device_id_get(&dev_ctx_xl, &whoamI);  // who_iamid store 51 so check device id 3 means 51
 8002f44:	4ab2      	ldr	r2, [pc, #712]	; (8003210 <lsm303agr_read_data_polling+0x314>)
 8002f46:	1963      	adds	r3, r4, r5
 8002f48:	19db      	adds	r3, r3, r7
 8002f4a:	0011      	movs	r1, r2
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f000 ff42 	bl	8003dd6 <lsm303agr_xl_device_id_get>

	if (whoamI != LSM303AGR_ID_XL)
 8002f52:	4baf      	ldr	r3, [pc, #700]	; (8003210 <lsm303agr_read_data_polling+0x314>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b33      	cmp	r3, #51	; 0x33
 8002f58:	d000      	beq.n	8002f5c <lsm303agr_read_data_polling+0x60>
		while (1)
 8002f5a:	e7fe      	b.n	8002f5a <lsm303agr_read_data_polling+0x5e>
			; /*manage here device not found */

	whoamI = 0;
 8002f5c:	4bac      	ldr	r3, [pc, #688]	; (8003210 <lsm303agr_read_data_polling+0x314>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	701a      	strb	r2, [r3, #0]
	lsm303agr_mag_device_id_get(&dev_ctx_mg, &whoamI);
 8002f62:	4aab      	ldr	r2, [pc, #684]	; (8003210 <lsm303agr_read_data_polling+0x314>)
 8002f64:	2308      	movs	r3, #8
 8002f66:	2108      	movs	r1, #8
 8002f68:	185b      	adds	r3, r3, r1
 8002f6a:	19db      	adds	r3, r3, r7
 8002f6c:	0011      	movs	r1, r2
 8002f6e:	0018      	movs	r0, r3
 8002f70:	f000 ff55 	bl	8003e1e <lsm303agr_mag_device_id_get>

	if (whoamI != LSM303AGR_ID_MG)
 8002f74:	4ba6      	ldr	r3, [pc, #664]	; (8003210 <lsm303agr_read_data_polling+0x314>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	2b40      	cmp	r3, #64	; 0x40
 8002f7a:	d000      	beq.n	8002f7e <lsm303agr_read_data_polling+0x82>
		while (1)
 8002f7c:	e7fe      	b.n	8002f7c <lsm303agr_read_data_polling+0x80>
			; /*manage here device not found */

	/* Restore default configuration for magnetometer */
	lsm303agr_mag_reset_set(&dev_ctx_mg, PROPERTY_ENABLE);
 8002f7e:	2308      	movs	r3, #8
 8002f80:	2208      	movs	r2, #8
 8002f82:	189b      	adds	r3, r3, r2
 8002f84:	19db      	adds	r3, r3, r7
 8002f86:	2101      	movs	r1, #1
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f000 ff5a 	bl	8003e42 <lsm303agr_mag_reset_set>

	do {
		lsm303agr_mag_reset_get(&dev_ctx_mg, &rst);
 8002f8e:	4aa1      	ldr	r2, [pc, #644]	; (8003214 <lsm303agr_read_data_polling+0x318>)
 8002f90:	2408      	movs	r4, #8
 8002f92:	2608      	movs	r6, #8
 8002f94:	19a3      	adds	r3, r4, r6
 8002f96:	19db      	adds	r3, r3, r7
 8002f98:	0011      	movs	r1, r2
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f000 ff81 	bl	8003ea2 <lsm303agr_mag_reset_get>
	} while (rst);
 8002fa0:	4b9c      	ldr	r3, [pc, #624]	; (8003214 <lsm303agr_read_data_polling+0x318>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1f2      	bne.n	8002f8e <lsm303agr_read_data_polling+0x92>

	/* Enable Block Data Update */
	lsm303agr_xl_block_data_update_set(&dev_ctx_xl, PROPERTY_ENABLE);
 8002fa8:	2518      	movs	r5, #24
 8002faa:	19ab      	adds	r3, r5, r6
 8002fac:	19db      	adds	r3, r3, r7
 8002fae:	2101      	movs	r1, #1
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f000 fd4e 	bl	8003a52 <lsm303agr_xl_block_data_update_set>
	lsm303agr_mag_block_data_update_set(&dev_ctx_mg, PROPERTY_ENABLE);
 8002fb6:	19a3      	adds	r3, r4, r6
 8002fb8:	19db      	adds	r3, r3, r7
 8002fba:	2101      	movs	r1, #1
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f000 fe87 	bl	8003cd0 <lsm303agr_mag_block_data_update_set>
	/* Set Output Data Rate */
	lsm303agr_xl_data_rate_set(&dev_ctx_xl, LSM303AGR_XL_ODR_1Hz);
 8002fc2:	19ab      	adds	r3, r5, r6
 8002fc4:	19db      	adds	r3, r3, r7
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f000 fce4 	bl	8003996 <lsm303agr_xl_data_rate_set>
	lsm303agr_mag_data_rate_set(&dev_ctx_mg, LSM303AGR_MG_ODR_10Hz);
 8002fce:	19a3      	adds	r3, r4, r6
 8002fd0:	19db      	adds	r3, r3, r7
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f000 fded 	bl	8003bb4 <lsm303agr_mag_data_rate_set>
	/* Set accelerometer full scale */
	lsm303agr_xl_full_scale_set(&dev_ctx_xl, LSM303AGR_2g);
 8002fda:	19ab      	adds	r3, r5, r6
 8002fdc:	19db      	adds	r3, r3, r7
 8002fde:	2100      	movs	r1, #0
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	f000 fd06 	bl	80039f2 <lsm303agr_xl_full_scale_set>
	/* Set / Reset magnetic sensor mode */
	lsm303agr_mag_set_rst_mode_set(&dev_ctx_mg,
 8002fe6:	19a3      	adds	r3, r4, r6
 8002fe8:	19db      	adds	r3, r3, r7
 8002fea:	2101      	movs	r1, #1
 8002fec:	0018      	movs	r0, r3
 8002fee:	f000 fe3f 	bl	8003c70 <lsm303agr_mag_set_rst_mode_set>
			LSM303AGR_SENS_OFF_CANC_EVERY_ODR);
	/* Enable temperature compensation on mag sensor */
	lsm303agr_mag_offset_temp_comp_set(&dev_ctx_mg, PROPERTY_ENABLE);
 8002ff2:	19a3      	adds	r3, r4, r6
 8002ff4:	19db      	adds	r3, r3, r7
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f000 fe0b 	bl	8003c14 <lsm303agr_mag_offset_temp_comp_set>
	/* Enable temperature sensor */
	lsm303agr_temperature_meas_set(&dev_ctx_xl, LSM303AGR_TEMP_ENABLE);
 8002ffe:	19ab      	adds	r3, r5, r6
 8003000:	19db      	adds	r3, r3, r7
 8003002:	2103      	movs	r1, #3
 8003004:	0018      	movs	r0, r3
 8003006:	f000 fc1c 	bl	8003842 <lsm303agr_temperature_meas_set>
	/* Set device in continuous mode */
	lsm303agr_xl_operating_mode_set(&dev_ctx_xl, LSM303AGR_HR_12bit);
 800300a:	19ab      	adds	r3, r5, r6
 800300c:	19db      	adds	r3, r3, r7
 800300e:	2100      	movs	r1, #0
 8003010:	0018      	movs	r0, r3
 8003012:	f000 fc44 	bl	800389e <lsm303agr_xl_operating_mode_set>
	/* Set magnetometer in continuous mode */
	lsm303agr_mag_operating_mode_set(&dev_ctx_mg, LSM303AGR_CONTINUOUS_MODE);
 8003016:	19a3      	adds	r3, r4, r6
 8003018:	19db      	adds	r3, r3, r7
 800301a:	2100      	movs	r1, #0
 800301c:	0018      	movs	r0, r3
 800301e:	f000 fd99 	bl	8003b54 <lsm303agr_mag_operating_mode_set>

	/* Read samples in polling mode (no int) */
	while (1) {
		/* Read output only if new value is available */
		lsm303agr_reg_t reg;
		lsm303agr_xl_status_get(&dev_ctx_xl, &reg.status_reg_a);
 8003022:	260c      	movs	r6, #12
 8003024:	19ba      	adds	r2, r7, r6
 8003026:	2418      	movs	r4, #24
 8003028:	2508      	movs	r5, #8
 800302a:	1963      	adds	r3, r4, r5
 800302c:	19db      	adds	r3, r3, r7
 800302e:	0011      	movs	r1, r2
 8003030:	0018      	movs	r0, r3
 8003032:	f000 fee2 	bl	8003dfa <lsm303agr_xl_status_get>

		if (reg.status_reg_a.zyxda) {
 8003036:	19bb      	adds	r3, r7, r6
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2208      	movs	r2, #8
 800303c:	4013      	ands	r3, r2
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d04c      	beq.n	80030de <lsm303agr_read_data_polling+0x1e2>
			/* Read accelerometer data */
			memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8003044:	4b74      	ldr	r3, [pc, #464]	; (8003218 <lsm303agr_read_data_polling+0x31c>)
 8003046:	2206      	movs	r2, #6
 8003048:	2100      	movs	r1, #0
 800304a:	0018      	movs	r0, r3
 800304c:	f003 fefa 	bl	8006e44 <memset>
			lsm303agr_acceleration_raw_get(&dev_ctx_xl, data_raw_acceleration);
 8003050:	4a71      	ldr	r2, [pc, #452]	; (8003218 <lsm303agr_read_data_polling+0x31c>)
 8003052:	1963      	adds	r3, r4, r5
 8003054:	19db      	adds	r3, r3, r7
 8003056:	0011      	movs	r1, r2
 8003058:	0018      	movs	r0, r3
 800305a:	f000 fd28 	bl	8003aae <lsm303agr_acceleration_raw_get>
			acceleration_mg[0] = lsm303agr_from_fs_2g_hr_to_mg(
 800305e:	4b6e      	ldr	r3, [pc, #440]	; (8003218 <lsm303agr_read_data_polling+0x31c>)
 8003060:	2200      	movs	r2, #0
 8003062:	5e9b      	ldrsh	r3, [r3, r2]
 8003064:	0018      	movs	r0, r3
 8003066:	f000 fb51 	bl	800370c <lsm303agr_from_fs_2g_hr_to_mg>
 800306a:	1c02      	adds	r2, r0, #0
 800306c:	4b6b      	ldr	r3, [pc, #428]	; (800321c <lsm303agr_read_data_polling+0x320>)
 800306e:	601a      	str	r2, [r3, #0]
					data_raw_acceleration[0]);
			acceleration_mg[1] = lsm303agr_from_fs_2g_hr_to_mg(
 8003070:	4b69      	ldr	r3, [pc, #420]	; (8003218 <lsm303agr_read_data_polling+0x31c>)
 8003072:	2202      	movs	r2, #2
 8003074:	5e9b      	ldrsh	r3, [r3, r2]
 8003076:	0018      	movs	r0, r3
 8003078:	f000 fb48 	bl	800370c <lsm303agr_from_fs_2g_hr_to_mg>
 800307c:	1c02      	adds	r2, r0, #0
 800307e:	4b67      	ldr	r3, [pc, #412]	; (800321c <lsm303agr_read_data_polling+0x320>)
 8003080:	605a      	str	r2, [r3, #4]
					data_raw_acceleration[1]);
			acceleration_mg[2] = lsm303agr_from_fs_2g_hr_to_mg(
 8003082:	4b65      	ldr	r3, [pc, #404]	; (8003218 <lsm303agr_read_data_polling+0x31c>)
 8003084:	2204      	movs	r2, #4
 8003086:	5e9b      	ldrsh	r3, [r3, r2]
 8003088:	0018      	movs	r0, r3
 800308a:	f000 fb3f 	bl	800370c <lsm303agr_from_fs_2g_hr_to_mg>
 800308e:	1c02      	adds	r2, r0, #0
 8003090:	4b62      	ldr	r3, [pc, #392]	; (800321c <lsm303agr_read_data_polling+0x320>)
 8003092:	609a      	str	r2, [r3, #8]
					data_raw_acceleration[2]);
			sprintf((char*) tx_buffer,
					"Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
					acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8003094:	4b61      	ldr	r3, [pc, #388]	; (800321c <lsm303agr_read_data_polling+0x320>)
 8003096:	681b      	ldr	r3, [r3, #0]
			sprintf((char*) tx_buffer,
 8003098:	1c18      	adds	r0, r3, #0
 800309a:	f7ff fd2f 	bl	8002afc <__aeabi_f2d>
 800309e:	6038      	str	r0, [r7, #0]
 80030a0:	6079      	str	r1, [r7, #4]
					acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 80030a2:	4b5e      	ldr	r3, [pc, #376]	; (800321c <lsm303agr_read_data_polling+0x320>)
 80030a4:	685b      	ldr	r3, [r3, #4]
			sprintf((char*) tx_buffer,
 80030a6:	1c18      	adds	r0, r3, #0
 80030a8:	f7ff fd28 	bl	8002afc <__aeabi_f2d>
 80030ac:	0004      	movs	r4, r0
 80030ae:	000d      	movs	r5, r1
					acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 80030b0:	4b5a      	ldr	r3, [pc, #360]	; (800321c <lsm303agr_read_data_polling+0x320>)
 80030b2:	689b      	ldr	r3, [r3, #8]
			sprintf((char*) tx_buffer,
 80030b4:	1c18      	adds	r0, r3, #0
 80030b6:	f7ff fd21 	bl	8002afc <__aeabi_f2d>
 80030ba:	0002      	movs	r2, r0
 80030bc:	000b      	movs	r3, r1
 80030be:	4958      	ldr	r1, [pc, #352]	; (8003220 <lsm303agr_read_data_polling+0x324>)
 80030c0:	4858      	ldr	r0, [pc, #352]	; (8003224 <lsm303agr_read_data_polling+0x328>)
 80030c2:	9202      	str	r2, [sp, #8]
 80030c4:	9303      	str	r3, [sp, #12]
 80030c6:	9400      	str	r4, [sp, #0]
 80030c8:	9501      	str	r5, [sp, #4]
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f004 fbd9 	bl	8007884 <siprintf>
//			printf(tx_buffer, strlen((char const*) tx_buffer));
			printf("%s\r\n",tx_buffer);
 80030d2:	4a54      	ldr	r2, [pc, #336]	; (8003224 <lsm303agr_read_data_polling+0x328>)
 80030d4:	4b54      	ldr	r3, [pc, #336]	; (8003228 <lsm303agr_read_data_polling+0x32c>)
 80030d6:	0011      	movs	r1, r2
 80030d8:	0018      	movs	r0, r3
 80030da:	f004 fb29 	bl	8007730 <iprintf>
		}

		lsm303agr_mag_status_get(&dev_ctx_mg, &reg.status_reg_m);
 80030de:	260c      	movs	r6, #12
 80030e0:	19ba      	adds	r2, r7, r6
 80030e2:	2408      	movs	r4, #8
 80030e4:	2508      	movs	r5, #8
 80030e6:	1963      	adds	r3, r4, r5
 80030e8:	19db      	adds	r3, r3, r7
 80030ea:	0011      	movs	r1, r2
 80030ec:	0018      	movs	r0, r3
 80030ee:	f000 fef3 	bl	8003ed8 <lsm303agr_mag_status_get>

		if (reg.status_reg_m.zyxda) {
 80030f2:	19bb      	adds	r3, r7, r6
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2208      	movs	r2, #8
 80030f8:	4013      	ands	r3, r2
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d046      	beq.n	800318e <lsm303agr_read_data_polling+0x292>
			/* Read magnetic field data */
			memset(data_raw_magnetic, 0x00, 3 * sizeof(int16_t));
 8003100:	4b4a      	ldr	r3, [pc, #296]	; (800322c <lsm303agr_read_data_polling+0x330>)
 8003102:	2206      	movs	r2, #6
 8003104:	2100      	movs	r1, #0
 8003106:	0018      	movs	r0, r3
 8003108:	f003 fe9c 	bl	8006e44 <memset>
			lsm303agr_magnetic_raw_get(&dev_ctx_mg, data_raw_magnetic);
 800310c:	4a47      	ldr	r2, [pc, #284]	; (800322c <lsm303agr_read_data_polling+0x330>)
 800310e:	1963      	adds	r3, r4, r5
 8003110:	19db      	adds	r3, r3, r7
 8003112:	0011      	movs	r1, r2
 8003114:	0018      	movs	r0, r3
 8003116:	f000 fe0b 	bl	8003d30 <lsm303agr_magnetic_raw_get>
			magnetic_mG[0] = lsm303agr_from_lsb_to_mgauss(data_raw_magnetic[0]);
 800311a:	4b44      	ldr	r3, [pc, #272]	; (800322c <lsm303agr_read_data_polling+0x330>)
 800311c:	2200      	movs	r2, #0
 800311e:	5e9b      	ldrsh	r3, [r3, r2]
 8003120:	0018      	movs	r0, r3
 8003122:	f000 fb35 	bl	8003790 <lsm303agr_from_lsb_to_mgauss>
 8003126:	1c02      	adds	r2, r0, #0
 8003128:	4b41      	ldr	r3, [pc, #260]	; (8003230 <lsm303agr_read_data_polling+0x334>)
 800312a:	601a      	str	r2, [r3, #0]
			magnetic_mG[1] = lsm303agr_from_lsb_to_mgauss(data_raw_magnetic[1]);
 800312c:	4b3f      	ldr	r3, [pc, #252]	; (800322c <lsm303agr_read_data_polling+0x330>)
 800312e:	2202      	movs	r2, #2
 8003130:	5e9b      	ldrsh	r3, [r3, r2]
 8003132:	0018      	movs	r0, r3
 8003134:	f000 fb2c 	bl	8003790 <lsm303agr_from_lsb_to_mgauss>
 8003138:	1c02      	adds	r2, r0, #0
 800313a:	4b3d      	ldr	r3, [pc, #244]	; (8003230 <lsm303agr_read_data_polling+0x334>)
 800313c:	605a      	str	r2, [r3, #4]
			magnetic_mG[2] = lsm303agr_from_lsb_to_mgauss(data_raw_magnetic[2]);
 800313e:	4b3b      	ldr	r3, [pc, #236]	; (800322c <lsm303agr_read_data_polling+0x330>)
 8003140:	2204      	movs	r2, #4
 8003142:	5e9b      	ldrsh	r3, [r3, r2]
 8003144:	0018      	movs	r0, r3
 8003146:	f000 fb23 	bl	8003790 <lsm303agr_from_lsb_to_mgauss>
 800314a:	1c02      	adds	r2, r0, #0
 800314c:	4b38      	ldr	r3, [pc, #224]	; (8003230 <lsm303agr_read_data_polling+0x334>)
 800314e:	609a      	str	r2, [r3, #8]
			sprintf((char*) tx_buffer,
					"Magnetic field [mG]:%4.2f\t%4.2f\t%4.2f\r\n",
					magnetic_mG[0], magnetic_mG[1], magnetic_mG[2]);
 8003150:	4b37      	ldr	r3, [pc, #220]	; (8003230 <lsm303agr_read_data_polling+0x334>)
 8003152:	681b      	ldr	r3, [r3, #0]
			sprintf((char*) tx_buffer,
 8003154:	1c18      	adds	r0, r3, #0
 8003156:	f7ff fcd1 	bl	8002afc <__aeabi_f2d>
 800315a:	6038      	str	r0, [r7, #0]
 800315c:	6079      	str	r1, [r7, #4]
					magnetic_mG[0], magnetic_mG[1], magnetic_mG[2]);
 800315e:	4b34      	ldr	r3, [pc, #208]	; (8003230 <lsm303agr_read_data_polling+0x334>)
 8003160:	685b      	ldr	r3, [r3, #4]
			sprintf((char*) tx_buffer,
 8003162:	1c18      	adds	r0, r3, #0
 8003164:	f7ff fcca 	bl	8002afc <__aeabi_f2d>
 8003168:	0004      	movs	r4, r0
 800316a:	000d      	movs	r5, r1
					magnetic_mG[0], magnetic_mG[1], magnetic_mG[2]);
 800316c:	4b30      	ldr	r3, [pc, #192]	; (8003230 <lsm303agr_read_data_polling+0x334>)
 800316e:	689b      	ldr	r3, [r3, #8]
			sprintf((char*) tx_buffer,
 8003170:	1c18      	adds	r0, r3, #0
 8003172:	f7ff fcc3 	bl	8002afc <__aeabi_f2d>
 8003176:	0002      	movs	r2, r0
 8003178:	000b      	movs	r3, r1
 800317a:	492e      	ldr	r1, [pc, #184]	; (8003234 <lsm303agr_read_data_polling+0x338>)
 800317c:	4829      	ldr	r0, [pc, #164]	; (8003224 <lsm303agr_read_data_polling+0x328>)
 800317e:	9202      	str	r2, [sp, #8]
 8003180:	9303      	str	r3, [sp, #12]
 8003182:	9400      	str	r4, [sp, #0]
 8003184:	9501      	str	r5, [sp, #4]
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f004 fb7b 	bl	8007884 <siprintf>
			//printf(tx_buffer, strlen((char const*) tx_buffer));
		}

		lsm303agr_temp_data_ready_get(&dev_ctx_xl, &reg.byte);
 800318e:	260c      	movs	r6, #12
 8003190:	19ba      	adds	r2, r7, r6
 8003192:	2418      	movs	r4, #24
 8003194:	2508      	movs	r5, #8
 8003196:	1963      	adds	r3, r4, r5
 8003198:	19db      	adds	r3, r3, r7
 800319a:	0011      	movs	r1, r2
 800319c:	0018      	movs	r0, r3
 800319e:	f000 fb0e 	bl	80037be <lsm303agr_temp_data_ready_get>

		if (reg.byte) {
 80031a2:	19bb      	adds	r3, r7, r6
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d100      	bne.n	80031ac <lsm303agr_read_data_polling+0x2b0>
 80031aa:	e73a      	b.n	8003022 <lsm303agr_read_data_polling+0x126>
 80031ac:	4b22      	ldr	r3, [pc, #136]	; (8003238 <lsm303agr_read_data_polling+0x33c>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	801a      	strh	r2, [r3, #0]
			/* Read temperature data */
			memset(&data_raw_temperature, 0x00, sizeof(int16_t));
			lsm303agr_temperature_raw_get(&dev_ctx_xl, &data_raw_temperature);
 80031b2:	4a21      	ldr	r2, [pc, #132]	; (8003238 <lsm303agr_read_data_polling+0x33c>)
 80031b4:	1963      	adds	r3, r4, r5
 80031b6:	19db      	adds	r3, r3, r7
 80031b8:	0011      	movs	r1, r2
 80031ba:	0018      	movs	r0, r3
 80031bc:	f000 fb1a 	bl	80037f4 <lsm303agr_temperature_raw_get>
			temperature_degC = lsm303agr_from_lsb_hr_to_celsius(
 80031c0:	4b1d      	ldr	r3, [pc, #116]	; (8003238 <lsm303agr_read_data_polling+0x33c>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	5e9b      	ldrsh	r3, [r3, r2]
 80031c6:	0018      	movs	r0, r3
 80031c8:	f000 fabe 	bl	8003748 <lsm303agr_from_lsb_hr_to_celsius>
 80031cc:	1c02      	adds	r2, r0, #0
 80031ce:	4b1b      	ldr	r3, [pc, #108]	; (800323c <lsm303agr_read_data_polling+0x340>)
 80031d0:	601a      	str	r2, [r3, #0]
					data_raw_temperature);
			sprintf((char*) tx_buffer, "Temperature [degC]:%6.2f\r\n",
 80031d2:	4b1a      	ldr	r3, [pc, #104]	; (800323c <lsm303agr_read_data_polling+0x340>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	1c18      	adds	r0, r3, #0
 80031d8:	f7ff fc90 	bl	8002afc <__aeabi_f2d>
 80031dc:	0002      	movs	r2, r0
 80031de:	000b      	movs	r3, r1
 80031e0:	4917      	ldr	r1, [pc, #92]	; (8003240 <lsm303agr_read_data_polling+0x344>)
 80031e2:	4810      	ldr	r0, [pc, #64]	; (8003224 <lsm303agr_read_data_polling+0x328>)
 80031e4:	f004 fb4e 	bl	8007884 <siprintf>
					temperature_degC);
			tx_com(tx_buffer, strlen((char const*) tx_buffer));
 80031e8:	4b0e      	ldr	r3, [pc, #56]	; (8003224 <lsm303agr_read_data_polling+0x328>)
 80031ea:	0018      	movs	r0, r3
 80031ec:	f7fc ff8c 	bl	8000108 <strlen>
 80031f0:	0003      	movs	r3, r0
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <lsm303agr_read_data_polling+0x328>)
 80031f6:	0011      	movs	r1, r2
 80031f8:	0018      	movs	r0, r3
 80031fa:	f000 f88f 	bl	800331c <tx_com>
	while (1) {
 80031fe:	e710      	b.n	8003022 <lsm303agr_read_data_polling+0x126>
 8003200:	08003245 	.word	0x08003245
 8003204:	080032b1 	.word	0x080032b1
 8003208:	20000000 	.word	0x20000000
 800320c:	20000010 	.word	0x20000010
 8003210:	20000320 	.word	0x20000320
 8003214:	20000321 	.word	0x20000321
 8003218:	200002f4 	.word	0x200002f4
 800321c:	20000304 	.word	0x20000304
 8003220:	08009fb0 	.word	0x08009fb0
 8003224:	20000324 	.word	0x20000324
 8003228:	08009fd8 	.word	0x08009fd8
 800322c:	200002fc 	.word	0x200002fc
 8003230:	20000310 	.word	0x20000310
 8003234:	08009fe0 	.word	0x08009fe0
 8003238:	20000302 	.word	0x20000302
 800323c:	2000031c 	.word	0x2000031c
 8003240:	0800a008 	.word	0x0800a008

08003244 <platform_write>:
		}
	}
}

static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
		uint16_t len) {
 8003244:	b590      	push	{r4, r7, lr}
 8003246:	b08b      	sub	sp, #44	; 0x2c
 8003248:	af04      	add	r7, sp, #16
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	0008      	movs	r0, r1
 800324e:	607a      	str	r2, [r7, #4]
 8003250:	0019      	movs	r1, r3
 8003252:	240b      	movs	r4, #11
 8003254:	193b      	adds	r3, r7, r4
 8003256:	1c02      	adds	r2, r0, #0
 8003258:	701a      	strb	r2, [r3, #0]
 800325a:	2308      	movs	r3, #8
 800325c:	18fb      	adds	r3, r7, r3
 800325e:	1c0a      	adds	r2, r1, #0
 8003260:	801a      	strh	r2, [r3, #0]
	sensbus_t *sensbus = (sensbus_t*) handle;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	617b      	str	r3, [r7, #20]

	if (sensbus->i2c_address == LSM303AGR_I2C_ADD_XL) {
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	791b      	ldrb	r3, [r3, #4]
 800326a:	2b33      	cmp	r3, #51	; 0x33
 800326c:	d106      	bne.n	800327c <platform_write+0x38>
		/* enable auto incremented in multiple read/write commands */
		reg |= 0x80;
 800326e:	193b      	adds	r3, r7, r4
 8003270:	193a      	adds	r2, r7, r4
 8003272:	7812      	ldrb	r2, [r2, #0]
 8003274:	2180      	movs	r1, #128	; 0x80
 8003276:	4249      	negs	r1, r1
 8003278:	430a      	orrs	r2, r1
 800327a:	701a      	strb	r2, [r3, #0]
	}

	HAL_I2C_Mem_Write(sensbus->hbus, sensbus->i2c_address, reg,
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	6818      	ldr	r0, [r3, #0]
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	791b      	ldrb	r3, [r3, #4]
 8003284:	b299      	uxth	r1, r3
 8003286:	230b      	movs	r3, #11
 8003288:	18fb      	adds	r3, r7, r3
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	b29a      	uxth	r2, r3
 800328e:	23fa      	movs	r3, #250	; 0xfa
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	9302      	str	r3, [sp, #8]
 8003294:	2308      	movs	r3, #8
 8003296:	18fb      	adds	r3, r7, r3
 8003298:	881b      	ldrh	r3, [r3, #0]
 800329a:	9301      	str	r3, [sp, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	2301      	movs	r3, #1
 80032a2:	f001 f97f 	bl	80045a4 <HAL_I2C_Mem_Write>





	return 0;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	0018      	movs	r0, r3
 80032aa:	46bd      	mov	sp, r7
 80032ac:	b007      	add	sp, #28
 80032ae:	bd90      	pop	{r4, r7, pc}

080032b0 <platform_read>:
 * @param  bufp      pointer to buffer that store the data read
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len) {
 80032b0:	b590      	push	{r4, r7, lr}
 80032b2:	b08b      	sub	sp, #44	; 0x2c
 80032b4:	af04      	add	r7, sp, #16
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	0008      	movs	r0, r1
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	0019      	movs	r1, r3
 80032be:	240b      	movs	r4, #11
 80032c0:	193b      	adds	r3, r7, r4
 80032c2:	1c02      	adds	r2, r0, #0
 80032c4:	701a      	strb	r2, [r3, #0]
 80032c6:	2308      	movs	r3, #8
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	1c0a      	adds	r2, r1, #0
 80032cc:	801a      	strh	r2, [r3, #0]
	sensbus_t *sensbus = (sensbus_t*) handle;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	617b      	str	r3, [r7, #20]

	if (sensbus->i2c_address == LSM303AGR_I2C_ADD_XL) {
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	791b      	ldrb	r3, [r3, #4]
 80032d6:	2b33      	cmp	r3, #51	; 0x33
 80032d8:	d106      	bne.n	80032e8 <platform_read+0x38>
		/* enable auto incremented in multiple read/write commands */
		reg |= 0x80;
 80032da:	193b      	adds	r3, r7, r4
 80032dc:	193a      	adds	r2, r7, r4
 80032de:	7812      	ldrb	r2, [r2, #0]
 80032e0:	2180      	movs	r1, #128	; 0x80
 80032e2:	4249      	negs	r1, r1
 80032e4:	430a      	orrs	r2, r1
 80032e6:	701a      	strb	r2, [r3, #0]
	}

	HAL_I2C_Mem_Read(sensbus->hbus, sensbus->i2c_address, reg,
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	6818      	ldr	r0, [r3, #0]
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	791b      	ldrb	r3, [r3, #4]
 80032f0:	b299      	uxth	r1, r3
 80032f2:	230b      	movs	r3, #11
 80032f4:	18fb      	adds	r3, r7, r3
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	23fa      	movs	r3, #250	; 0xfa
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	9302      	str	r3, [sp, #8]
 8003300:	2308      	movs	r3, #8
 8003302:	18fb      	adds	r3, r7, r3
 8003304:	881b      	ldrh	r3, [r3, #0]
 8003306:	9301      	str	r3, [sp, #4]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	9300      	str	r3, [sp, #0]
 800330c:	2301      	movs	r3, #1
 800330e:	f001 fa77 	bl	8004800 <HAL_I2C_Mem_Read>



//	HAL_I2C_Master_Receive_IT(sensbus->hbus, sensbus->i2c_address, bufp, len);

	return 0;
 8003312:	2300      	movs	r3, #0
}
 8003314:	0018      	movs	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	b007      	add	sp, #28
 800331a:	bd90      	pop	{r4, r7, pc}

0800331c <tx_com>:
 *
 * @param  tx_buffer     buffer to transmit
 * @param  len           number of byte to send
 *
 */
static void tx_com(uint8_t *tx_buffer, uint16_t len) {
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	000a      	movs	r2, r1
 8003326:	1cbb      	adds	r3, r7, #2
 8003328:	801a      	strh	r2, [r3, #0]
//#elif defined(STEVAL_MKI109V3)
//  CDC_Transmit_FS(tx_buffer, len);
//#elif defined(SPC584B_DIS)
//  sd_lld_write(&SD2, tx_buffer, len);
//#endif
}
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	46bd      	mov	sp, r7
 800332e:	b002      	add	sp, #8
 8003330:	bd80      	pop	{r7, pc}

08003332 <platform_delay>:
 * @brief  platform specific delay (platform dependent)
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms) {
 8003332:	b580      	push	{r7, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	0018      	movs	r0, r3
 800333e:	f000 fe4d 	bl	8003fdc <HAL_Delay>
}
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	46bd      	mov	sp, r7
 8003346:	b002      	add	sp, #8
 8003348:	bd80      	pop	{r7, pc}

0800334a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800334e:	b672      	cpsid	i
}
 8003350:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003352:	e7fe      	b.n	8003352 <Error_Handler+0x8>

08003354 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003358:	4b07      	ldr	r3, [pc, #28]	; (8003378 <HAL_MspInit+0x24>)
 800335a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800335c:	4b06      	ldr	r3, [pc, #24]	; (8003378 <HAL_MspInit+0x24>)
 800335e:	2101      	movs	r1, #1
 8003360:	430a      	orrs	r2, r1
 8003362:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003364:	4b04      	ldr	r3, [pc, #16]	; (8003378 <HAL_MspInit+0x24>)
 8003366:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003368:	4b03      	ldr	r3, [pc, #12]	; (8003378 <HAL_MspInit+0x24>)
 800336a:	2180      	movs	r1, #128	; 0x80
 800336c:	0549      	lsls	r1, r1, #21
 800336e:	430a      	orrs	r2, r1
 8003370:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003372:	46c0      	nop			; (mov r8, r8)
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40021000 	.word	0x40021000

0800337c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800337c:	b590      	push	{r4, r7, lr}
 800337e:	b089      	sub	sp, #36	; 0x24
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003384:	240c      	movs	r4, #12
 8003386:	193b      	adds	r3, r7, r4
 8003388:	0018      	movs	r0, r3
 800338a:	2314      	movs	r3, #20
 800338c:	001a      	movs	r2, r3
 800338e:	2100      	movs	r1, #0
 8003390:	f003 fd58 	bl	8006e44 <memset>
  if(hi2c->Instance==I2C1)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a17      	ldr	r2, [pc, #92]	; (80033f8 <HAL_I2C_MspInit+0x7c>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d128      	bne.n	80033f0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800339e:	4b17      	ldr	r3, [pc, #92]	; (80033fc <HAL_I2C_MspInit+0x80>)
 80033a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a2:	4b16      	ldr	r3, [pc, #88]	; (80033fc <HAL_I2C_MspInit+0x80>)
 80033a4:	2102      	movs	r1, #2
 80033a6:	430a      	orrs	r2, r1
 80033a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80033aa:	4b14      	ldr	r3, [pc, #80]	; (80033fc <HAL_I2C_MspInit+0x80>)
 80033ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ae:	2202      	movs	r2, #2
 80033b0:	4013      	ands	r3, r2
 80033b2:	60bb      	str	r3, [r7, #8]
 80033b4:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BSP_I2C_SCL_Pin|BSP_I2C_SDA_Pin;
 80033b6:	0021      	movs	r1, r4
 80033b8:	187b      	adds	r3, r7, r1
 80033ba:	22c0      	movs	r2, #192	; 0xc0
 80033bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033be:	187b      	adds	r3, r7, r1
 80033c0:	2212      	movs	r2, #18
 80033c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c4:	187b      	adds	r3, r7, r1
 80033c6:	2200      	movs	r2, #0
 80033c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ca:	187b      	adds	r3, r7, r1
 80033cc:	2203      	movs	r2, #3
 80033ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80033d0:	187b      	adds	r3, r7, r1
 80033d2:	2201      	movs	r2, #1
 80033d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033d6:	187b      	adds	r3, r7, r1
 80033d8:	4a09      	ldr	r2, [pc, #36]	; (8003400 <HAL_I2C_MspInit+0x84>)
 80033da:	0019      	movs	r1, r3
 80033dc:	0010      	movs	r0, r2
 80033de:	f000 fed5 	bl	800418c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80033e2:	4b06      	ldr	r3, [pc, #24]	; (80033fc <HAL_I2C_MspInit+0x80>)
 80033e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033e6:	4b05      	ldr	r3, [pc, #20]	; (80033fc <HAL_I2C_MspInit+0x80>)
 80033e8:	2180      	movs	r1, #128	; 0x80
 80033ea:	0389      	lsls	r1, r1, #14
 80033ec:	430a      	orrs	r2, r1
 80033ee:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80033f0:	46c0      	nop			; (mov r8, r8)
 80033f2:	46bd      	mov	sp, r7
 80033f4:	b009      	add	sp, #36	; 0x24
 80033f6:	bd90      	pop	{r4, r7, pc}
 80033f8:	40005400 	.word	0x40005400
 80033fc:	40021000 	.word	0x40021000
 8003400:	50000400 	.word	0x50000400

08003404 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003404:	b590      	push	{r4, r7, lr}
 8003406:	b089      	sub	sp, #36	; 0x24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800340c:	240c      	movs	r4, #12
 800340e:	193b      	adds	r3, r7, r4
 8003410:	0018      	movs	r0, r3
 8003412:	2314      	movs	r3, #20
 8003414:	001a      	movs	r2, r3
 8003416:	2100      	movs	r1, #0
 8003418:	f003 fd14 	bl	8006e44 <memset>
  if(huart->Instance==USART1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a18      	ldr	r2, [pc, #96]	; (8003484 <HAL_UART_MspInit+0x80>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d12a      	bne.n	800347c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003426:	4b18      	ldr	r3, [pc, #96]	; (8003488 <HAL_UART_MspInit+0x84>)
 8003428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800342a:	4b17      	ldr	r3, [pc, #92]	; (8003488 <HAL_UART_MspInit+0x84>)
 800342c:	2180      	movs	r1, #128	; 0x80
 800342e:	01c9      	lsls	r1, r1, #7
 8003430:	430a      	orrs	r2, r1
 8003432:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003434:	4b14      	ldr	r3, [pc, #80]	; (8003488 <HAL_UART_MspInit+0x84>)
 8003436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003438:	4b13      	ldr	r3, [pc, #76]	; (8003488 <HAL_UART_MspInit+0x84>)
 800343a:	2101      	movs	r1, #1
 800343c:	430a      	orrs	r2, r1
 800343e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003440:	4b11      	ldr	r3, [pc, #68]	; (8003488 <HAL_UART_MspInit+0x84>)
 8003442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003444:	2201      	movs	r2, #1
 8003446:	4013      	ands	r3, r2
 8003448:	60bb      	str	r3, [r7, #8]
 800344a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BSP_UART_TX_Pin|BSP_UART_RX_Pin;
 800344c:	193b      	adds	r3, r7, r4
 800344e:	22c0      	movs	r2, #192	; 0xc0
 8003450:	00d2      	lsls	r2, r2, #3
 8003452:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003454:	0021      	movs	r1, r4
 8003456:	187b      	adds	r3, r7, r1
 8003458:	2202      	movs	r2, #2
 800345a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345c:	187b      	adds	r3, r7, r1
 800345e:	2200      	movs	r2, #0
 8003460:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003462:	187b      	adds	r3, r7, r1
 8003464:	2203      	movs	r2, #3
 8003466:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003468:	187b      	adds	r3, r7, r1
 800346a:	2204      	movs	r2, #4
 800346c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800346e:	187a      	adds	r2, r7, r1
 8003470:	23a0      	movs	r3, #160	; 0xa0
 8003472:	05db      	lsls	r3, r3, #23
 8003474:	0011      	movs	r1, r2
 8003476:	0018      	movs	r0, r3
 8003478:	f000 fe88 	bl	800418c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800347c:	46c0      	nop			; (mov r8, r8)
 800347e:	46bd      	mov	sp, r7
 8003480:	b009      	add	sp, #36	; 0x24
 8003482:	bd90      	pop	{r4, r7, pc}
 8003484:	40013800 	.word	0x40013800
 8003488:	40021000 	.word	0x40021000

0800348c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003490:	e7fe      	b.n	8003490 <NMI_Handler+0x4>

08003492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003496:	e7fe      	b.n	8003496 <HardFault_Handler+0x4>

08003498 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800349c:	46c0      	nop			; (mov r8, r8)
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034b0:	f000 fd78 	bl	8003fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034b4:	46c0      	nop			; (mov r8, r8)
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	af00      	add	r7, sp, #0
	return 1;
 80034be:	2301      	movs	r3, #1
}
 80034c0:	0018      	movs	r0, r3
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <_kill>:

int _kill(int pid, int sig)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b082      	sub	sp, #8
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
 80034ce:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80034d0:	f003 fc8e 	bl	8006df0 <__errno>
 80034d4:	0003      	movs	r3, r0
 80034d6:	2216      	movs	r2, #22
 80034d8:	601a      	str	r2, [r3, #0]
	return -1;
 80034da:	2301      	movs	r3, #1
 80034dc:	425b      	negs	r3, r3
}
 80034de:	0018      	movs	r0, r3
 80034e0:	46bd      	mov	sp, r7
 80034e2:	b002      	add	sp, #8
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <_exit>:

void _exit (int status)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b082      	sub	sp, #8
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80034ee:	2301      	movs	r3, #1
 80034f0:	425a      	negs	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	0011      	movs	r1, r2
 80034f6:	0018      	movs	r0, r3
 80034f8:	f7ff ffe5 	bl	80034c6 <_kill>
	while (1) {}		/* Make sure we hang here */
 80034fc:	e7fe      	b.n	80034fc <_exit+0x16>

080034fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b086      	sub	sp, #24
 8003502:	af00      	add	r7, sp, #0
 8003504:	60f8      	str	r0, [r7, #12]
 8003506:	60b9      	str	r1, [r7, #8]
 8003508:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800350a:	2300      	movs	r3, #0
 800350c:	617b      	str	r3, [r7, #20]
 800350e:	e00a      	b.n	8003526 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003510:	e000      	b.n	8003514 <_read+0x16>
 8003512:	bf00      	nop
 8003514:	0001      	movs	r1, r0
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	60ba      	str	r2, [r7, #8]
 800351c:	b2ca      	uxtb	r2, r1
 800351e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	3301      	adds	r3, #1
 8003524:	617b      	str	r3, [r7, #20]
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	429a      	cmp	r2, r3
 800352c:	dbf0      	blt.n	8003510 <_read+0x12>
	}

return len;
 800352e:	687b      	ldr	r3, [r7, #4]
}
 8003530:	0018      	movs	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	b006      	add	sp, #24
 8003536:	bd80      	pop	{r7, pc}

08003538 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
//
//	for (DataIdx = 0; DataIdx < len; DataIdx++)
//	{
//		__io_putchar(*ptr++);
//	}
	HAL_UART_Transmit( &huart1,ptr,len,1000);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	b29a      	uxth	r2, r3
 8003548:	23fa      	movs	r3, #250	; 0xfa
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	68b9      	ldr	r1, [r7, #8]
 800354e:	4804      	ldr	r0, [pc, #16]	; (8003560 <_write+0x28>)
 8003550:	f002 ff00 	bl	8006354 <HAL_UART_Transmit>
	return len;
 8003554:	687b      	ldr	r3, [r7, #4]
}
 8003556:	0018      	movs	r0, r3
 8003558:	46bd      	mov	sp, r7
 800355a:	b004      	add	sp, #16
 800355c:	bd80      	pop	{r7, pc}
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	2000026c 	.word	0x2000026c

08003564 <_close>:

int _close(int file)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
	return -1;
 800356c:	2301      	movs	r3, #1
 800356e:	425b      	negs	r3, r3
}
 8003570:	0018      	movs	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	b002      	add	sp, #8
 8003576:	bd80      	pop	{r7, pc}

08003578 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	2280      	movs	r2, #128	; 0x80
 8003586:	0192      	lsls	r2, r2, #6
 8003588:	605a      	str	r2, [r3, #4]
	return 0;
 800358a:	2300      	movs	r3, #0
}
 800358c:	0018      	movs	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	b002      	add	sp, #8
 8003592:	bd80      	pop	{r7, pc}

08003594 <_isatty>:

int _isatty(int file)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
	return 1;
 800359c:	2301      	movs	r3, #1
}
 800359e:	0018      	movs	r0, r3
 80035a0:	46bd      	mov	sp, r7
 80035a2:	b002      	add	sp, #8
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b084      	sub	sp, #16
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	60f8      	str	r0, [r7, #12]
 80035ae:	60b9      	str	r1, [r7, #8]
 80035b0:	607a      	str	r2, [r7, #4]
	return 0;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	0018      	movs	r0, r3
 80035b6:	46bd      	mov	sp, r7
 80035b8:	b004      	add	sp, #16
 80035ba:	bd80      	pop	{r7, pc}

080035bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035c4:	4a14      	ldr	r2, [pc, #80]	; (8003618 <_sbrk+0x5c>)
 80035c6:	4b15      	ldr	r3, [pc, #84]	; (800361c <_sbrk+0x60>)
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035d0:	4b13      	ldr	r3, [pc, #76]	; (8003620 <_sbrk+0x64>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d102      	bne.n	80035de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035d8:	4b11      	ldr	r3, [pc, #68]	; (8003620 <_sbrk+0x64>)
 80035da:	4a12      	ldr	r2, [pc, #72]	; (8003624 <_sbrk+0x68>)
 80035dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035de:	4b10      	ldr	r3, [pc, #64]	; (8003620 <_sbrk+0x64>)
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	18d3      	adds	r3, r2, r3
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d207      	bcs.n	80035fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035ec:	f003 fc00 	bl	8006df0 <__errno>
 80035f0:	0003      	movs	r3, r0
 80035f2:	220c      	movs	r2, #12
 80035f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035f6:	2301      	movs	r3, #1
 80035f8:	425b      	negs	r3, r3
 80035fa:	e009      	b.n	8003610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035fc:	4b08      	ldr	r3, [pc, #32]	; (8003620 <_sbrk+0x64>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003602:	4b07      	ldr	r3, [pc, #28]	; (8003620 <_sbrk+0x64>)
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	18d2      	adds	r2, r2, r3
 800360a:	4b05      	ldr	r3, [pc, #20]	; (8003620 <_sbrk+0x64>)
 800360c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800360e:	68fb      	ldr	r3, [r7, #12]
}
 8003610:	0018      	movs	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	b006      	add	sp, #24
 8003616:	bd80      	pop	{r7, pc}
 8003618:	20002000 	.word	0x20002000
 800361c:	00000400 	.word	0x00000400
 8003620:	2000070c 	.word	0x2000070c
 8003624:	20000728 	.word	0x20000728

08003628 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800362c:	46c0      	nop			; (mov r8, r8)
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
	...

08003634 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8003634:	480d      	ldr	r0, [pc, #52]	; (800366c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003636:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003638:	f7ff fff6 	bl	8003628 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800363c:	480c      	ldr	r0, [pc, #48]	; (8003670 <LoopForever+0x6>)
  ldr r1, =_edata
 800363e:	490d      	ldr	r1, [pc, #52]	; (8003674 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003640:	4a0d      	ldr	r2, [pc, #52]	; (8003678 <LoopForever+0xe>)
  movs r3, #0
 8003642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003644:	e002      	b.n	800364c <LoopCopyDataInit>

08003646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800364a:	3304      	adds	r3, #4

0800364c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800364c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800364e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003650:	d3f9      	bcc.n	8003646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003652:	4a0a      	ldr	r2, [pc, #40]	; (800367c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003654:	4c0a      	ldr	r4, [pc, #40]	; (8003680 <LoopForever+0x16>)
  movs r3, #0
 8003656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003658:	e001      	b.n	800365e <LoopFillZerobss>

0800365a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800365a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800365c:	3204      	adds	r2, #4

0800365e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800365e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003660:	d3fb      	bcc.n	800365a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003662:	f003 fbcb 	bl	8006dfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003666:	f7ff fb09 	bl	8002c7c <main>

0800366a <LoopForever>:

LoopForever:
    b LoopForever
 800366a:	e7fe      	b.n	800366a <LoopForever>
  ldr   r0, =_estack
 800366c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003674:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8003678:	0800a5bc 	.word	0x0800a5bc
  ldr r2, =_sbss
 800367c:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8003680:	20000724 	.word	0x20000724

08003684 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003684:	e7fe      	b.n	8003684 <ADC1_COMP_IRQHandler>

08003686 <lsm303agr_read_reg>:
  *
  */
int32_t __weak lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 8003686:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003688:	b087      	sub	sp, #28
 800368a:	af00      	add	r7, sp, #0
 800368c:	60f8      	str	r0, [r7, #12]
 800368e:	0008      	movs	r0, r1
 8003690:	607a      	str	r2, [r7, #4]
 8003692:	0019      	movs	r1, r3
 8003694:	260b      	movs	r6, #11
 8003696:	19bb      	adds	r3, r7, r6
 8003698:	1c02      	adds	r2, r0, #0
 800369a:	701a      	strb	r2, [r3, #0]
 800369c:	2508      	movs	r5, #8
 800369e:	197b      	adds	r3, r7, r5
 80036a0:	1c0a      	adds	r2, r1, #0
 80036a2:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	685c      	ldr	r4, [r3, #4]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	68d8      	ldr	r0, [r3, #12]
 80036ac:	197b      	adds	r3, r7, r5
 80036ae:	881d      	ldrh	r5, [r3, #0]
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	19bb      	adds	r3, r7, r6
 80036b4:	7819      	ldrb	r1, [r3, #0]
 80036b6:	002b      	movs	r3, r5
 80036b8:	47a0      	blx	r4
 80036ba:	0003      	movs	r3, r0
 80036bc:	617b      	str	r3, [r7, #20]

  return ret;
 80036be:	697b      	ldr	r3, [r7, #20]
}
 80036c0:	0018      	movs	r0, r3
 80036c2:	46bd      	mov	sp, r7
 80036c4:	b007      	add	sp, #28
 80036c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036c8 <lsm303agr_write_reg>:
  *
  */
int32_t __weak lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 80036c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	0008      	movs	r0, r1
 80036d2:	607a      	str	r2, [r7, #4]
 80036d4:	0019      	movs	r1, r3
 80036d6:	260b      	movs	r6, #11
 80036d8:	19bb      	adds	r3, r7, r6
 80036da:	1c02      	adds	r2, r0, #0
 80036dc:	701a      	strb	r2, [r3, #0]
 80036de:	2508      	movs	r5, #8
 80036e0:	197b      	adds	r3, r7, r5
 80036e2:	1c0a      	adds	r2, r1, #0
 80036e4:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681c      	ldr	r4, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	68d8      	ldr	r0, [r3, #12]
 80036ee:	197b      	adds	r3, r7, r5
 80036f0:	881d      	ldrh	r5, [r3, #0]
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	19bb      	adds	r3, r7, r6
 80036f6:	7819      	ldrb	r1, [r3, #0]
 80036f8:	002b      	movs	r3, r5
 80036fa:	47a0      	blx	r4
 80036fc:	0003      	movs	r3, r0
 80036fe:	617b      	str	r3, [r7, #20]

  return ret;
 8003700:	697b      	ldr	r3, [r7, #20]
}
 8003702:	0018      	movs	r0, r3
 8003704:	46bd      	mov	sp, r7
 8003706:	b007      	add	sp, #28
 8003708:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800370c <lsm303agr_from_fs_2g_hr_to_mg>:
  * @{
  *
  */

float_t lsm303agr_from_fs_2g_hr_to_mg(int16_t lsb)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	0002      	movs	r2, r0
 8003714:	1dbb      	adds	r3, r7, #6
 8003716:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb / 16.0f) * 0.98f;
 8003718:	1dbb      	adds	r3, r7, #6
 800371a:	2200      	movs	r2, #0
 800371c:	5e9b      	ldrsh	r3, [r3, r2]
 800371e:	0018      	movs	r0, r3
 8003720:	f7fd fbb8 	bl	8000e94 <__aeabi_i2f>
 8003724:	1c03      	adds	r3, r0, #0
 8003726:	2183      	movs	r1, #131	; 0x83
 8003728:	05c9      	lsls	r1, r1, #23
 800372a:	1c18      	adds	r0, r3, #0
 800372c:	f7fd f974 	bl	8000a18 <__aeabi_fdiv>
 8003730:	1c03      	adds	r3, r0, #0
 8003732:	4904      	ldr	r1, [pc, #16]	; (8003744 <lsm303agr_from_fs_2g_hr_to_mg+0x38>)
 8003734:	1c18      	adds	r0, r3, #0
 8003736:	f7fd fa87 	bl	8000c48 <__aeabi_fmul>
 800373a:	1c03      	adds	r3, r0, #0
}
 800373c:	1c18      	adds	r0, r3, #0
 800373e:	46bd      	mov	sp, r7
 8003740:	b002      	add	sp, #8
 8003742:	bd80      	pop	{r7, pc}
 8003744:	3f7ae148 	.word	0x3f7ae148

08003748 <lsm303agr_from_lsb_hr_to_celsius>:
{
  return ((float_t)lsb / 16.0f) * 11.72f;
}

float_t lsm303agr_from_lsb_hr_to_celsius(int16_t lsb)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	0002      	movs	r2, r0
 8003750:	1dbb      	adds	r3, r7, #6
 8003752:	801a      	strh	r2, [r3, #0]
  return (((float_t)lsb / 64.0f) / 4.0f) + 25.0f;
 8003754:	1dbb      	adds	r3, r7, #6
 8003756:	2200      	movs	r2, #0
 8003758:	5e9b      	ldrsh	r3, [r3, r2]
 800375a:	0018      	movs	r0, r3
 800375c:	f7fd fb9a 	bl	8000e94 <__aeabi_i2f>
 8003760:	1c03      	adds	r3, r0, #0
 8003762:	2185      	movs	r1, #133	; 0x85
 8003764:	05c9      	lsls	r1, r1, #23
 8003766:	1c18      	adds	r0, r3, #0
 8003768:	f7fd f956 	bl	8000a18 <__aeabi_fdiv>
 800376c:	1c03      	adds	r3, r0, #0
 800376e:	2181      	movs	r1, #129	; 0x81
 8003770:	05c9      	lsls	r1, r1, #23
 8003772:	1c18      	adds	r0, r3, #0
 8003774:	f7fd f950 	bl	8000a18 <__aeabi_fdiv>
 8003778:	1c03      	adds	r3, r0, #0
 800377a:	4904      	ldr	r1, [pc, #16]	; (800378c <lsm303agr_from_lsb_hr_to_celsius+0x44>)
 800377c:	1c18      	adds	r0, r3, #0
 800377e:	f7fc ffad 	bl	80006dc <__aeabi_fadd>
 8003782:	1c03      	adds	r3, r0, #0
}
 8003784:	1c18      	adds	r0, r3, #0
 8003786:	46bd      	mov	sp, r7
 8003788:	b002      	add	sp, #8
 800378a:	bd80      	pop	{r7, pc}
 800378c:	41c80000 	.word	0x41c80000

08003790 <lsm303agr_from_lsb_to_mgauss>:
{
  return (((float_t)lsb / 256.0f) * 1.0f) + 25.0f;
}

float_t lsm303agr_from_lsb_to_mgauss(int16_t lsb)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	0002      	movs	r2, r0
 8003798:	1dbb      	adds	r3, r7, #6
 800379a:	801a      	strh	r2, [r3, #0]
  return (float_t)lsb * 1.5f;
 800379c:	1dbb      	adds	r3, r7, #6
 800379e:	2200      	movs	r2, #0
 80037a0:	5e9b      	ldrsh	r3, [r3, r2]
 80037a2:	0018      	movs	r0, r3
 80037a4:	f7fd fb76 	bl	8000e94 <__aeabi_i2f>
 80037a8:	1c03      	adds	r3, r0, #0
 80037aa:	21ff      	movs	r1, #255	; 0xff
 80037ac:	0589      	lsls	r1, r1, #22
 80037ae:	1c18      	adds	r0, r3, #0
 80037b0:	f7fd fa4a 	bl	8000c48 <__aeabi_fmul>
 80037b4:	1c03      	adds	r3, r0, #0
}
 80037b6:	1c18      	adds	r0, r3, #0
 80037b8:	46bd      	mov	sp, r7
 80037ba:	b002      	add	sp, #8
 80037bc:	bd80      	pop	{r7, pc}

080037be <lsm303agr_temp_data_ready_get>:
  * @param  val    Get the values of tda in reg STATUS_REG_AUX_A.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_temp_data_ready_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80037be:	b590      	push	{r4, r7, lr}
 80037c0:	b085      	sub	sp, #20
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	6039      	str	r1, [r7, #0]
  lsm303agr_status_reg_aux_a_t status_reg_aux_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_STATUS_REG_AUX_A,
 80037c8:	2408      	movs	r4, #8
 80037ca:	193a      	adds	r2, r7, r4
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	2301      	movs	r3, #1
 80037d0:	2107      	movs	r1, #7
 80037d2:	f7ff ff58 	bl	8003686 <lsm303agr_read_reg>
 80037d6:	0003      	movs	r3, r0
 80037d8:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&status_reg_aux_a, 1);
  *val = status_reg_aux_a.tda;
 80037da:	193b      	adds	r3, r7, r4
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	075b      	lsls	r3, r3, #29
 80037e0:	0fdb      	lsrs	r3, r3, #31
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	001a      	movs	r2, r3
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	701a      	strb	r2, [r3, #0]

  return ret;
 80037ea:	68fb      	ldr	r3, [r7, #12]
}
 80037ec:	0018      	movs	r0, r3
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b005      	add	sp, #20
 80037f2:	bd90      	pop	{r4, r7, pc}

080037f4 <lsm303agr_temperature_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80037f4:	b590      	push	{r4, r7, lr}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_TEMP_L_A, buff, 2);
 80037fe:	2408      	movs	r4, #8
 8003800:	193a      	adds	r2, r7, r4
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	2302      	movs	r3, #2
 8003806:	210c      	movs	r1, #12
 8003808:	f7ff ff3d 	bl	8003686 <lsm303agr_read_reg>
 800380c:	0003      	movs	r3, r0
 800380e:	60fb      	str	r3, [r7, #12]
  val[0] = (int16_t)buff[1];
 8003810:	0021      	movs	r1, r4
 8003812:	187b      	adds	r3, r7, r1
 8003814:	785b      	ldrb	r3, [r3, #1]
 8003816:	b21a      	sxth	r2, r3
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	2200      	movs	r2, #0
 8003820:	5e9b      	ldrsh	r3, [r3, r2]
 8003822:	b29b      	uxth	r3, r3
 8003824:	021b      	lsls	r3, r3, #8
 8003826:	b29a      	uxth	r2, r3
 8003828:	187b      	adds	r3, r7, r1
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	b29b      	uxth	r3, r3
 800382e:	18d3      	adds	r3, r2, r3
 8003830:	b29b      	uxth	r3, r3
 8003832:	b21a      	sxth	r2, r3
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	801a      	strh	r2, [r3, #0]

  return ret;
 8003838:	68fb      	ldr	r3, [r7, #12]
}
 800383a:	0018      	movs	r0, r3
 800383c:	46bd      	mov	sp, r7
 800383e:	b005      	add	sp, #20
 8003840:	bd90      	pop	{r4, r7, pc}

08003842 <lsm303agr_temperature_meas_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_temperature_meas_set(stmdev_ctx_t *ctx,
                                       lsm303agr_temp_en_a_t val)
{
 8003842:	b590      	push	{r4, r7, lr}
 8003844:	b085      	sub	sp, #20
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
 800384a:	000a      	movs	r2, r1
 800384c:	1cfb      	adds	r3, r7, #3
 800384e:	701a      	strb	r2, [r3, #0]
  lsm303agr_temp_cfg_reg_a_t temp_cfg_reg_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_TEMP_CFG_REG_A,
 8003850:	2408      	movs	r4, #8
 8003852:	193a      	adds	r2, r7, r4
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	2301      	movs	r3, #1
 8003858:	211f      	movs	r1, #31
 800385a:	f7ff ff14 	bl	8003686 <lsm303agr_read_reg>
 800385e:	0003      	movs	r3, r0
 8003860:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&temp_cfg_reg_a, 1);

  if (ret == 0)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d115      	bne.n	8003894 <lsm303agr_temperature_meas_set+0x52>
  {
    temp_cfg_reg_a.temp_en = (uint8_t)val;
 8003868:	1cfb      	adds	r3, r7, #3
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2203      	movs	r2, #3
 800386e:	4013      	ands	r3, r2
 8003870:	b2da      	uxtb	r2, r3
 8003872:	193b      	adds	r3, r7, r4
 8003874:	0190      	lsls	r0, r2, #6
 8003876:	781a      	ldrb	r2, [r3, #0]
 8003878:	213f      	movs	r1, #63	; 0x3f
 800387a:	400a      	ands	r2, r1
 800387c:	1c11      	adds	r1, r2, #0
 800387e:	1c02      	adds	r2, r0, #0
 8003880:	430a      	orrs	r2, r1
 8003882:	701a      	strb	r2, [r3, #0]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_TEMP_CFG_REG_A,
 8003884:	193a      	adds	r2, r7, r4
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	2301      	movs	r3, #1
 800388a:	211f      	movs	r1, #31
 800388c:	f7ff ff1c 	bl	80036c8 <lsm303agr_write_reg>
 8003890:	0003      	movs	r3, r0
 8003892:	60fb      	str	r3, [r7, #12]
                              (uint8_t *)&temp_cfg_reg_a, 1);
  }

  return ret;
 8003894:	68fb      	ldr	r3, [r7, #12]
}
 8003896:	0018      	movs	r0, r3
 8003898:	46bd      	mov	sp, r7
 800389a:	b005      	add	sp, #20
 800389c:	bd90      	pop	{r4, r7, pc}

0800389e <lsm303agr_xl_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_set(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t val)
{
 800389e:	b590      	push	{r4, r7, lr}
 80038a0:	b087      	sub	sp, #28
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
 80038a6:	000a      	movs	r2, r1
 80038a8:	1cfb      	adds	r3, r7, #3
 80038aa:	701a      	strb	r2, [r3, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  uint8_t lpen, hr;

  if (val == LSM303AGR_HR_12bit)
 80038ac:	1cfb      	adds	r3, r7, #3
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d108      	bne.n	80038c6 <lsm303agr_xl_operating_mode_set+0x28>
  {
    lpen = 0;
 80038b4:	2313      	movs	r3, #19
 80038b6:	18fb      	adds	r3, r7, r3
 80038b8:	2200      	movs	r2, #0
 80038ba:	701a      	strb	r2, [r3, #0]
    hr   = 1;
 80038bc:	2312      	movs	r3, #18
 80038be:	18fb      	adds	r3, r7, r3
 80038c0:	2201      	movs	r2, #1
 80038c2:	701a      	strb	r2, [r3, #0]
 80038c4:	e014      	b.n	80038f0 <lsm303agr_xl_operating_mode_set+0x52>
  }

  else if (val == LSM303AGR_NM_10bit)
 80038c6:	1cfb      	adds	r3, r7, #3
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d108      	bne.n	80038e0 <lsm303agr_xl_operating_mode_set+0x42>
  {
    lpen = 0;
 80038ce:	2313      	movs	r3, #19
 80038d0:	18fb      	adds	r3, r7, r3
 80038d2:	2200      	movs	r2, #0
 80038d4:	701a      	strb	r2, [r3, #0]
    hr   = 0;
 80038d6:	2312      	movs	r3, #18
 80038d8:	18fb      	adds	r3, r7, r3
 80038da:	2200      	movs	r2, #0
 80038dc:	701a      	strb	r2, [r3, #0]
 80038de:	e007      	b.n	80038f0 <lsm303agr_xl_operating_mode_set+0x52>
  }

  else
  {
    lpen = 1;
 80038e0:	2313      	movs	r3, #19
 80038e2:	18fb      	adds	r3, r7, r3
 80038e4:	2201      	movs	r2, #1
 80038e6:	701a      	strb	r2, [r3, #0]
    hr   = 0;
 80038e8:	2312      	movs	r3, #18
 80038ea:	18fb      	adds	r3, r7, r3
 80038ec:	2200      	movs	r2, #0
 80038ee:	701a      	strb	r2, [r3, #0]
  }

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80038f0:	2410      	movs	r4, #16
 80038f2:	193a      	adds	r2, r7, r4
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	2301      	movs	r3, #1
 80038f8:	2120      	movs	r1, #32
 80038fa:	f7ff fec4 	bl	8003686 <lsm303agr_read_reg>
 80038fe:	0003      	movs	r3, r0
 8003900:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);
  ctrl_reg1_a.lpen = (uint8_t)lpen;
 8003902:	2313      	movs	r3, #19
 8003904:	18fb      	adds	r3, r7, r3
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	2201      	movs	r2, #1
 800390a:	4013      	ands	r3, r2
 800390c:	b2da      	uxtb	r2, r3
 800390e:	193b      	adds	r3, r7, r4
 8003910:	2101      	movs	r1, #1
 8003912:	400a      	ands	r2, r1
 8003914:	00d0      	lsls	r0, r2, #3
 8003916:	781a      	ldrb	r2, [r3, #0]
 8003918:	2108      	movs	r1, #8
 800391a:	438a      	bics	r2, r1
 800391c:	1c11      	adds	r1, r2, #0
 800391e:	1c02      	adds	r2, r0, #0
 8003920:	430a      	orrs	r2, r1
 8003922:	701a      	strb	r2, [r3, #0]

  if (ret == 0)
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d107      	bne.n	800393a <lsm303agr_xl_operating_mode_set+0x9c>
  {
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800392a:	193a      	adds	r2, r7, r4
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	2301      	movs	r3, #1
 8003930:	2120      	movs	r1, #32
 8003932:	f7ff fec9 	bl	80036c8 <lsm303agr_write_reg>
 8003936:	0003      	movs	r3, r0
 8003938:	617b      	str	r3, [r7, #20]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  if (ret == 0)
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d108      	bne.n	8003952 <lsm303agr_xl_operating_mode_set+0xb4>
  {
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003940:	230c      	movs	r3, #12
 8003942:	18fa      	adds	r2, r7, r3
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	2301      	movs	r3, #1
 8003948:	2123      	movs	r1, #35	; 0x23
 800394a:	f7ff fe9c 	bl	8003686 <lsm303agr_read_reg>
 800394e:	0003      	movs	r3, r0
 8003950:	617b      	str	r3, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if (ret == 0)
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d119      	bne.n	800398c <lsm303agr_xl_operating_mode_set+0xee>
  {
    ctrl_reg4_a.hr = hr;
 8003958:	2312      	movs	r3, #18
 800395a:	18fb      	adds	r3, r7, r3
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	2201      	movs	r2, #1
 8003960:	4013      	ands	r3, r2
 8003962:	b2da      	uxtb	r2, r3
 8003964:	240c      	movs	r4, #12
 8003966:	193b      	adds	r3, r7, r4
 8003968:	2101      	movs	r1, #1
 800396a:	400a      	ands	r2, r1
 800396c:	00d0      	lsls	r0, r2, #3
 800396e:	781a      	ldrb	r2, [r3, #0]
 8003970:	2108      	movs	r1, #8
 8003972:	438a      	bics	r2, r1
 8003974:	1c11      	adds	r1, r2, #0
 8003976:	1c02      	adds	r2, r0, #0
 8003978:	430a      	orrs	r2, r1
 800397a:	701a      	strb	r2, [r3, #0]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800397c:	193a      	adds	r2, r7, r4
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	2301      	movs	r3, #1
 8003982:	2123      	movs	r1, #35	; 0x23
 8003984:	f7ff fea0 	bl	80036c8 <lsm303agr_write_reg>
 8003988:	0003      	movs	r3, r0
 800398a:	617b      	str	r3, [r7, #20]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 800398c:	697b      	ldr	r3, [r7, #20]
}
 800398e:	0018      	movs	r0, r3
 8003990:	46bd      	mov	sp, r7
 8003992:	b007      	add	sp, #28
 8003994:	bd90      	pop	{r4, r7, pc}

08003996 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8003996:	b590      	push	{r4, r7, lr}
 8003998:	b085      	sub	sp, #20
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
 800399e:	000a      	movs	r2, r1
 80039a0:	1cfb      	adds	r3, r7, #3
 80039a2:	701a      	strb	r2, [r3, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80039a4:	2408      	movs	r4, #8
 80039a6:	193a      	adds	r2, r7, r4
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	2301      	movs	r3, #1
 80039ac:	2120      	movs	r1, #32
 80039ae:	f7ff fe6a 	bl	8003686 <lsm303agr_read_reg>
 80039b2:	0003      	movs	r3, r0
 80039b4:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d115      	bne.n	80039e8 <lsm303agr_xl_data_rate_set+0x52>
  {
    ctrl_reg1_a.odr = (uint8_t)val;
 80039bc:	1cfb      	adds	r3, r7, #3
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	220f      	movs	r2, #15
 80039c2:	4013      	ands	r3, r2
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	193b      	adds	r3, r7, r4
 80039c8:	0110      	lsls	r0, r2, #4
 80039ca:	781a      	ldrb	r2, [r3, #0]
 80039cc:	210f      	movs	r1, #15
 80039ce:	400a      	ands	r2, r1
 80039d0:	1c11      	adds	r1, r2, #0
 80039d2:	1c02      	adds	r2, r0, #0
 80039d4:	430a      	orrs	r2, r1
 80039d6:	701a      	strb	r2, [r3, #0]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80039d8:	193a      	adds	r2, r7, r4
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	2301      	movs	r3, #1
 80039de:	2120      	movs	r1, #32
 80039e0:	f7ff fe72 	bl	80036c8 <lsm303agr_write_reg>
 80039e4:	0003      	movs	r3, r0
 80039e6:	60fb      	str	r3, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 80039e8:	68fb      	ldr	r3, [r7, #12]
}
 80039ea:	0018      	movs	r0, r3
 80039ec:	46bd      	mov	sp, r7
 80039ee:	b005      	add	sp, #20
 80039f0:	bd90      	pop	{r4, r7, pc}

080039f2 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 80039f2:	b590      	push	{r4, r7, lr}
 80039f4:	b085      	sub	sp, #20
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	000a      	movs	r2, r1
 80039fc:	1cfb      	adds	r3, r7, #3
 80039fe:	701a      	strb	r2, [r3, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003a00:	2408      	movs	r4, #8
 8003a02:	193a      	adds	r2, r7, r4
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	2301      	movs	r3, #1
 8003a08:	2123      	movs	r1, #35	; 0x23
 8003a0a:	f7ff fe3c 	bl	8003686 <lsm303agr_read_reg>
 8003a0e:	0003      	movs	r3, r0
 8003a10:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d117      	bne.n	8003a48 <lsm303agr_xl_full_scale_set+0x56>
  {
    ctrl_reg4_a.fs = (uint8_t)val;
 8003a18:	1cfb      	adds	r3, r7, #3
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	2203      	movs	r2, #3
 8003a1e:	4013      	ands	r3, r2
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	193b      	adds	r3, r7, r4
 8003a24:	2103      	movs	r1, #3
 8003a26:	400a      	ands	r2, r1
 8003a28:	0110      	lsls	r0, r2, #4
 8003a2a:	781a      	ldrb	r2, [r3, #0]
 8003a2c:	2130      	movs	r1, #48	; 0x30
 8003a2e:	438a      	bics	r2, r1
 8003a30:	1c11      	adds	r1, r2, #0
 8003a32:	1c02      	adds	r2, r0, #0
 8003a34:	430a      	orrs	r2, r1
 8003a36:	701a      	strb	r2, [r3, #0]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003a38:	193a      	adds	r2, r7, r4
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	2123      	movs	r1, #35	; 0x23
 8003a40:	f7ff fe42 	bl	80036c8 <lsm303agr_write_reg>
 8003a44:	0003      	movs	r3, r0
 8003a46:	60fb      	str	r3, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8003a48:	68fb      	ldr	r3, [r7, #12]
}
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	b005      	add	sp, #20
 8003a50:	bd90      	pop	{r4, r7, pc}

08003a52 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8003a52:	b590      	push	{r4, r7, lr}
 8003a54:	b085      	sub	sp, #20
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
 8003a5a:	000a      	movs	r2, r1
 8003a5c:	1cfb      	adds	r3, r7, #3
 8003a5e:	701a      	strb	r2, [r3, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003a60:	2408      	movs	r4, #8
 8003a62:	193a      	adds	r2, r7, r4
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	2301      	movs	r3, #1
 8003a68:	2123      	movs	r1, #35	; 0x23
 8003a6a:	f7ff fe0c 	bl	8003686 <lsm303agr_read_reg>
 8003a6e:	0003      	movs	r3, r0
 8003a70:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d115      	bne.n	8003aa4 <lsm303agr_xl_block_data_update_set+0x52>
  {
    ctrl_reg4_a.bdu = (uint8_t)val;
 8003a78:	1cfb      	adds	r3, r7, #3
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	4013      	ands	r3, r2
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	193b      	adds	r3, r7, r4
 8003a84:	01d0      	lsls	r0, r2, #7
 8003a86:	781a      	ldrb	r2, [r3, #0]
 8003a88:	217f      	movs	r1, #127	; 0x7f
 8003a8a:	400a      	ands	r2, r1
 8003a8c:	1c11      	adds	r1, r2, #0
 8003a8e:	1c02      	adds	r2, r0, #0
 8003a90:	430a      	orrs	r2, r1
 8003a92:	701a      	strb	r2, [r3, #0]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003a94:	193a      	adds	r2, r7, r4
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	2301      	movs	r3, #1
 8003a9a:	2123      	movs	r1, #35	; 0x23
 8003a9c:	f7ff fe14 	bl	80036c8 <lsm303agr_write_reg>
 8003aa0:	0003      	movs	r3, r0
 8003aa2:	60fb      	str	r3, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
}
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	b005      	add	sp, #20
 8003aac:	bd90      	pop	{r4, r7, pc}

08003aae <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8003aae:	b590      	push	{r4, r7, lr}
 8003ab0:	b087      	sub	sp, #28
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
 8003ab6:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8003ab8:	240c      	movs	r4, #12
 8003aba:	193a      	adds	r2, r7, r4
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	2306      	movs	r3, #6
 8003ac0:	2128      	movs	r1, #40	; 0x28
 8003ac2:	f7ff fde0 	bl	8003686 <lsm303agr_read_reg>
 8003ac6:	0003      	movs	r3, r0
 8003ac8:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003aca:	0021      	movs	r1, r4
 8003acc:	187b      	adds	r3, r7, r1
 8003ace:	785b      	ldrb	r3, [r3, #1]
 8003ad0:	b21a      	sxth	r2, r3
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	5e9b      	ldrsh	r3, [r3, r2]
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	021b      	lsls	r3, r3, #8
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	187b      	adds	r3, r7, r1
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	18d3      	adds	r3, r2, r3
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	b21a      	sxth	r2, r3
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003af2:	187b      	adds	r3, r7, r1
 8003af4:	78da      	ldrb	r2, [r3, #3]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	3302      	adds	r3, #2
 8003afa:	b212      	sxth	r2, r2
 8003afc:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	3302      	adds	r3, #2
 8003b02:	2200      	movs	r2, #0
 8003b04:	5e9b      	ldrsh	r3, [r3, r2]
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	021b      	lsls	r3, r3, #8
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	187b      	adds	r3, r7, r1
 8003b0e:	789b      	ldrb	r3, [r3, #2]
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	18d3      	adds	r3, r2, r3
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	3302      	adds	r3, #2
 8003b1a:	b212      	sxth	r2, r2
 8003b1c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003b1e:	187b      	adds	r3, r7, r1
 8003b20:	795a      	ldrb	r2, [r3, #5]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	3304      	adds	r3, #4
 8003b26:	b212      	sxth	r2, r2
 8003b28:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	2200      	movs	r2, #0
 8003b30:	5e9b      	ldrsh	r3, [r3, r2]
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	021b      	lsls	r3, r3, #8
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	187b      	adds	r3, r7, r1
 8003b3a:	791b      	ldrb	r3, [r3, #4]
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	18d3      	adds	r3, r2, r3
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	3304      	adds	r3, #4
 8003b46:	b212      	sxth	r2, r2
 8003b48:	801a      	strh	r2, [r3, #0]

  return ret;
 8003b4a:	697b      	ldr	r3, [r7, #20]
}
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	b007      	add	sp, #28
 8003b52:	bd90      	pop	{r4, r7, pc}

08003b54 <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8003b54:	b590      	push	{r4, r7, lr}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	000a      	movs	r2, r1
 8003b5e:	1cfb      	adds	r3, r7, #3
 8003b60:	701a      	strb	r2, [r3, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003b62:	2408      	movs	r4, #8
 8003b64:	193a      	adds	r2, r7, r4
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	2301      	movs	r3, #1
 8003b6a:	2160      	movs	r1, #96	; 0x60
 8003b6c:	f7ff fd8b 	bl	8003686 <lsm303agr_read_reg>
 8003b70:	0003      	movs	r3, r0
 8003b72:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d117      	bne.n	8003baa <lsm303agr_mag_operating_mode_set+0x56>
  {
    cfg_reg_a_m.md = (uint8_t)val;
 8003b7a:	1cfb      	adds	r3, r7, #3
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2203      	movs	r2, #3
 8003b80:	4013      	ands	r3, r2
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	193b      	adds	r3, r7, r4
 8003b86:	2103      	movs	r1, #3
 8003b88:	400a      	ands	r2, r1
 8003b8a:	0010      	movs	r0, r2
 8003b8c:	781a      	ldrb	r2, [r3, #0]
 8003b8e:	2103      	movs	r1, #3
 8003b90:	438a      	bics	r2, r1
 8003b92:	1c11      	adds	r1, r2, #0
 8003b94:	1c02      	adds	r2, r0, #0
 8003b96:	430a      	orrs	r2, r1
 8003b98:	701a      	strb	r2, [r3, #0]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003b9a:	193a      	adds	r2, r7, r4
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	2160      	movs	r1, #96	; 0x60
 8003ba2:	f7ff fd91 	bl	80036c8 <lsm303agr_write_reg>
 8003ba6:	0003      	movs	r3, r0
 8003ba8:	60fb      	str	r3, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8003baa:	68fb      	ldr	r3, [r7, #12]
}
 8003bac:	0018      	movs	r0, r3
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	b005      	add	sp, #20
 8003bb2:	bd90      	pop	{r4, r7, pc}

08003bb4 <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8003bb4:	b590      	push	{r4, r7, lr}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	000a      	movs	r2, r1
 8003bbe:	1cfb      	adds	r3, r7, #3
 8003bc0:	701a      	strb	r2, [r3, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003bc2:	2408      	movs	r4, #8
 8003bc4:	193a      	adds	r2, r7, r4
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	2301      	movs	r3, #1
 8003bca:	2160      	movs	r1, #96	; 0x60
 8003bcc:	f7ff fd5b 	bl	8003686 <lsm303agr_read_reg>
 8003bd0:	0003      	movs	r3, r0
 8003bd2:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d117      	bne.n	8003c0a <lsm303agr_mag_data_rate_set+0x56>
  {
    cfg_reg_a_m.odr = (uint8_t)val;
 8003bda:	1cfb      	adds	r3, r7, #3
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	2203      	movs	r2, #3
 8003be0:	4013      	ands	r3, r2
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	193b      	adds	r3, r7, r4
 8003be6:	2103      	movs	r1, #3
 8003be8:	400a      	ands	r2, r1
 8003bea:	0090      	lsls	r0, r2, #2
 8003bec:	781a      	ldrb	r2, [r3, #0]
 8003bee:	210c      	movs	r1, #12
 8003bf0:	438a      	bics	r2, r1
 8003bf2:	1c11      	adds	r1, r2, #0
 8003bf4:	1c02      	adds	r2, r0, #0
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	701a      	strb	r2, [r3, #0]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003bfa:	193a      	adds	r2, r7, r4
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	2301      	movs	r3, #1
 8003c00:	2160      	movs	r1, #96	; 0x60
 8003c02:	f7ff fd61 	bl	80036c8 <lsm303agr_write_reg>
 8003c06:	0003      	movs	r3, r0
 8003c08:	60fb      	str	r3, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
}
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	b005      	add	sp, #20
 8003c12:	bd90      	pop	{r4, r7, pc}

08003c14 <lsm303agr_mag_offset_temp_comp_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_offset_temp_comp_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8003c14:	b590      	push	{r4, r7, lr}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	000a      	movs	r2, r1
 8003c1e:	1cfb      	adds	r3, r7, #3
 8003c20:	701a      	strb	r2, [r3, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003c22:	2408      	movs	r4, #8
 8003c24:	193a      	adds	r2, r7, r4
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	2301      	movs	r3, #1
 8003c2a:	2160      	movs	r1, #96	; 0x60
 8003c2c:	f7ff fd2b 	bl	8003686 <lsm303agr_read_reg>
 8003c30:	0003      	movs	r3, r0
 8003c32:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d115      	bne.n	8003c66 <lsm303agr_mag_offset_temp_comp_set+0x52>
  {
    cfg_reg_a_m.comp_temp_en = (uint8_t)val;
 8003c3a:	1cfb      	adds	r3, r7, #3
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	4013      	ands	r3, r2
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	193b      	adds	r3, r7, r4
 8003c46:	01d0      	lsls	r0, r2, #7
 8003c48:	781a      	ldrb	r2, [r3, #0]
 8003c4a:	217f      	movs	r1, #127	; 0x7f
 8003c4c:	400a      	ands	r2, r1
 8003c4e:	1c11      	adds	r1, r2, #0
 8003c50:	1c02      	adds	r2, r0, #0
 8003c52:	430a      	orrs	r2, r1
 8003c54:	701a      	strb	r2, [r3, #0]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003c56:	193a      	adds	r2, r7, r4
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	2160      	movs	r1, #96	; 0x60
 8003c5e:	f7ff fd33 	bl	80036c8 <lsm303agr_write_reg>
 8003c62:	0003      	movs	r3, r0
 8003c64:	60fb      	str	r3, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8003c66:	68fb      	ldr	r3, [r7, #12]
}
 8003c68:	0018      	movs	r0, r3
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	b005      	add	sp, #20
 8003c6e:	bd90      	pop	{r4, r7, pc}

08003c70 <lsm303agr_mag_set_rst_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_set_rst_mode_set(stmdev_ctx_t *ctx,
                                       lsm303agr_set_rst_m_t val)
{
 8003c70:	b590      	push	{r4, r7, lr}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	000a      	movs	r2, r1
 8003c7a:	1cfb      	adds	r3, r7, #3
 8003c7c:	701a      	strb	r2, [r3, #0]
  lsm303agr_cfg_reg_b_m_t cfg_reg_b_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_B_M,
 8003c7e:	2408      	movs	r4, #8
 8003c80:	193a      	adds	r2, r7, r4
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	2301      	movs	r3, #1
 8003c86:	2161      	movs	r1, #97	; 0x61
 8003c88:	f7ff fcfd 	bl	8003686 <lsm303agr_read_reg>
 8003c8c:	0003      	movs	r3, r0
 8003c8e:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&cfg_reg_b_m, 1);

  if (ret == 0)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d117      	bne.n	8003cc6 <lsm303agr_mag_set_rst_mode_set+0x56>
  {
    cfg_reg_b_m.set_rst = (uint8_t)val;
 8003c96:	1cfb      	adds	r3, r7, #3
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	2203      	movs	r2, #3
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	193b      	adds	r3, r7, r4
 8003ca2:	2103      	movs	r1, #3
 8003ca4:	400a      	ands	r2, r1
 8003ca6:	1890      	adds	r0, r2, r2
 8003ca8:	781a      	ldrb	r2, [r3, #0]
 8003caa:	2106      	movs	r1, #6
 8003cac:	438a      	bics	r2, r1
 8003cae:	1c11      	adds	r1, r2, #0
 8003cb0:	1c02      	adds	r2, r0, #0
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	701a      	strb	r2, [r3, #0]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_B_M,
 8003cb6:	193a      	adds	r2, r7, r4
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	2301      	movs	r3, #1
 8003cbc:	2161      	movs	r1, #97	; 0x61
 8003cbe:	f7ff fd03 	bl	80036c8 <lsm303agr_write_reg>
 8003cc2:	0003      	movs	r3, r0
 8003cc4:	60fb      	str	r3, [r7, #12]
                              (uint8_t *)&cfg_reg_b_m, 1);
  }

  return ret;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
}
 8003cc8:	0018      	movs	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	b005      	add	sp, #20
 8003cce:	bd90      	pop	{r4, r7, pc}

08003cd0 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8003cd0:	b590      	push	{r4, r7, lr}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	000a      	movs	r2, r1
 8003cda:	1cfb      	adds	r3, r7, #3
 8003cdc:	701a      	strb	r2, [r3, #0]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003cde:	2408      	movs	r4, #8
 8003ce0:	193a      	adds	r2, r7, r4
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	2162      	movs	r1, #98	; 0x62
 8003ce8:	f7ff fccd 	bl	8003686 <lsm303agr_read_reg>
 8003cec:	0003      	movs	r3, r0
 8003cee:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d117      	bne.n	8003d26 <lsm303agr_mag_block_data_update_set+0x56>
  {
    cfg_reg_c_m.bdu = (uint8_t)val;
 8003cf6:	1cfb      	adds	r3, r7, #3
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	193b      	adds	r3, r7, r4
 8003d02:	2101      	movs	r1, #1
 8003d04:	400a      	ands	r2, r1
 8003d06:	0110      	lsls	r0, r2, #4
 8003d08:	781a      	ldrb	r2, [r3, #0]
 8003d0a:	2110      	movs	r1, #16
 8003d0c:	438a      	bics	r2, r1
 8003d0e:	1c11      	adds	r1, r2, #0
 8003d10:	1c02      	adds	r2, r0, #0
 8003d12:	430a      	orrs	r2, r1
 8003d14:	701a      	strb	r2, [r3, #0]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003d16:	193a      	adds	r2, r7, r4
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	2162      	movs	r1, #98	; 0x62
 8003d1e:	f7ff fcd3 	bl	80036c8 <lsm303agr_write_reg>
 8003d22:	0003      	movs	r3, r0
 8003d24:	60fb      	str	r3, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8003d26:	68fb      	ldr	r3, [r7, #12]
}
 8003d28:	0018      	movs	r0, r3
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	b005      	add	sp, #20
 8003d2e:	bd90      	pop	{r4, r7, pc}

08003d30 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003d30:	b590      	push	{r4, r7, lr}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8003d3a:	240c      	movs	r4, #12
 8003d3c:	193a      	adds	r2, r7, r4
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	2306      	movs	r3, #6
 8003d42:	2168      	movs	r1, #104	; 0x68
 8003d44:	f7ff fc9f 	bl	8003686 <lsm303agr_read_reg>
 8003d48:	0003      	movs	r3, r0
 8003d4a:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003d4c:	0021      	movs	r1, r4
 8003d4e:	187b      	adds	r3, r7, r1
 8003d50:	785b      	ldrb	r3, [r3, #1]
 8003d52:	b21a      	sxth	r2, r3
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	5e9b      	ldrsh	r3, [r3, r2]
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	021b      	lsls	r3, r3, #8
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	187b      	adds	r3, r7, r1
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	18d3      	adds	r3, r2, r3
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	b21a      	sxth	r2, r3
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003d74:	187b      	adds	r3, r7, r1
 8003d76:	78da      	ldrb	r2, [r3, #3]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	3302      	adds	r3, #2
 8003d7c:	b212      	sxth	r2, r2
 8003d7e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	3302      	adds	r3, #2
 8003d84:	2200      	movs	r2, #0
 8003d86:	5e9b      	ldrsh	r3, [r3, r2]
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	021b      	lsls	r3, r3, #8
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	187b      	adds	r3, r7, r1
 8003d90:	789b      	ldrb	r3, [r3, #2]
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	18d3      	adds	r3, r2, r3
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	3302      	adds	r3, #2
 8003d9c:	b212      	sxth	r2, r2
 8003d9e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003da0:	187b      	adds	r3, r7, r1
 8003da2:	795a      	ldrb	r2, [r3, #5]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	3304      	adds	r3, #4
 8003da8:	b212      	sxth	r2, r2
 8003daa:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	3304      	adds	r3, #4
 8003db0:	2200      	movs	r2, #0
 8003db2:	5e9b      	ldrsh	r3, [r3, r2]
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	021b      	lsls	r3, r3, #8
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	187b      	adds	r3, r7, r1
 8003dbc:	791b      	ldrb	r3, [r3, #4]
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	18d3      	adds	r3, r2, r3
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	b212      	sxth	r2, r2
 8003dca:	801a      	strh	r2, [r3, #0]

  return ret;
 8003dcc:	697b      	ldr	r3, [r7, #20]
}
 8003dce:	0018      	movs	r0, r3
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	b007      	add	sp, #28
 8003dd4:	bd90      	pop	{r4, r7, pc}

08003dd6 <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b084      	sub	sp, #16
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
 8003dde:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	2301      	movs	r3, #1
 8003de6:	210f      	movs	r1, #15
 8003de8:	f7ff fc4d 	bl	8003686 <lsm303agr_read_reg>
 8003dec:	0003      	movs	r3, r0
 8003dee:	60fb      	str	r3, [r7, #12]

  return ret;
 8003df0:	68fb      	ldr	r3, [r7, #12]
}
 8003df2:	0018      	movs	r0, r3
 8003df4:	46bd      	mov	sp, r7
 8003df6:	b004      	add	sp, #16
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <lsm303agr_xl_status_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_status_get(stmdev_ctx_t *ctx,
                                lsm303agr_status_reg_a_t *val)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b084      	sub	sp, #16
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
 8003e02:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_STATUS_REG_A, (uint8_t *) val, 1);
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	2301      	movs	r3, #1
 8003e0a:	2127      	movs	r1, #39	; 0x27
 8003e0c:	f7ff fc3b 	bl	8003686 <lsm303agr_read_reg>
 8003e10:	0003      	movs	r3, r0
 8003e12:	60fb      	str	r3, [r7, #12]

  return ret;
 8003e14:	68fb      	ldr	r3, [r7, #12]
}
 8003e16:	0018      	movs	r0, r3
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	b004      	add	sp, #16
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b084      	sub	sp, #16
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
 8003e26:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	214f      	movs	r1, #79	; 0x4f
 8003e30:	f7ff fc29 	bl	8003686 <lsm303agr_read_reg>
 8003e34:	0003      	movs	r3, r0
 8003e36:	60fb      	str	r3, [r7, #12]

  return ret;
 8003e38:	68fb      	ldr	r3, [r7, #12]
}
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	b004      	add	sp, #16
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <lsm303agr_mag_reset_set>:
  * @param  val    Change the values of soft_rst in reg CFG_REG_A_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003e42:	b590      	push	{r4, r7, lr}
 8003e44:	b085      	sub	sp, #20
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
 8003e4a:	000a      	movs	r2, r1
 8003e4c:	1cfb      	adds	r3, r7, #3
 8003e4e:	701a      	strb	r2, [r3, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003e50:	2408      	movs	r4, #8
 8003e52:	193a      	adds	r2, r7, r4
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	2301      	movs	r3, #1
 8003e58:	2160      	movs	r1, #96	; 0x60
 8003e5a:	f7ff fc14 	bl	8003686 <lsm303agr_read_reg>
 8003e5e:	0003      	movs	r3, r0
 8003e60:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d117      	bne.n	8003e98 <lsm303agr_mag_reset_set+0x56>
  {
    cfg_reg_a_m.soft_rst = (uint8_t)val;
 8003e68:	1cfb      	adds	r3, r7, #3
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	4013      	ands	r3, r2
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	193b      	adds	r3, r7, r4
 8003e74:	2101      	movs	r1, #1
 8003e76:	400a      	ands	r2, r1
 8003e78:	0150      	lsls	r0, r2, #5
 8003e7a:	781a      	ldrb	r2, [r3, #0]
 8003e7c:	2120      	movs	r1, #32
 8003e7e:	438a      	bics	r2, r1
 8003e80:	1c11      	adds	r1, r2, #0
 8003e82:	1c02      	adds	r2, r0, #0
 8003e84:	430a      	orrs	r2, r1
 8003e86:	701a      	strb	r2, [r3, #0]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003e88:	193a      	adds	r2, r7, r4
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	2160      	movs	r1, #96	; 0x60
 8003e90:	f7ff fc1a 	bl	80036c8 <lsm303agr_write_reg>
 8003e94:	0003      	movs	r3, r0
 8003e96:	60fb      	str	r3, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8003e98:	68fb      	ldr	r3, [r7, #12]
}
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	b005      	add	sp, #20
 8003ea0:	bd90      	pop	{r4, r7, pc}

08003ea2 <lsm303agr_mag_reset_get>:
  * @param  val    Change the values of soft_rst in reg CFG_REG_A_M.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8003ea2:	b590      	push	{r4, r7, lr}
 8003ea4:	b085      	sub	sp, #20
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
 8003eaa:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003eac:	2408      	movs	r4, #8
 8003eae:	193a      	adds	r2, r7, r4
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	2160      	movs	r1, #96	; 0x60
 8003eb6:	f7ff fbe6 	bl	8003686 <lsm303agr_read_reg>
 8003eba:	0003      	movs	r3, r0
 8003ebc:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);
  *val = cfg_reg_a_m.soft_rst;
 8003ebe:	193b      	adds	r3, r7, r4
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	069b      	lsls	r3, r3, #26
 8003ec4:	0fdb      	lsrs	r3, r3, #31
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	001a      	movs	r2, r3
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	701a      	strb	r2, [r3, #0]

  return ret;
 8003ece:	68fb      	ldr	r3, [r7, #12]
}
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	b005      	add	sp, #20
 8003ed6:	bd90      	pop	{r4, r7, pc}

08003ed8 <lsm303agr_mag_status_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_status_get(stmdev_ctx_t *ctx,
                                 lsm303agr_status_reg_m_t *val)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_STATUS_REG_M, (uint8_t *) val, 1);
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	2167      	movs	r1, #103	; 0x67
 8003eea:	f7ff fbcc 	bl	8003686 <lsm303agr_read_reg>
 8003eee:	0003      	movs	r3, r0
 8003ef0:	60fb      	str	r3, [r7, #12]

  return ret;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
}
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	b004      	add	sp, #16
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f02:	1dfb      	adds	r3, r7, #7
 8003f04:	2200      	movs	r2, #0
 8003f06:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003f08:	4b0b      	ldr	r3, [pc, #44]	; (8003f38 <HAL_Init+0x3c>)
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	4b0a      	ldr	r3, [pc, #40]	; (8003f38 <HAL_Init+0x3c>)
 8003f0e:	2140      	movs	r1, #64	; 0x40
 8003f10:	430a      	orrs	r2, r1
 8003f12:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f14:	2000      	movs	r0, #0
 8003f16:	f000 f811 	bl	8003f3c <HAL_InitTick>
 8003f1a:	1e03      	subs	r3, r0, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003f1e:	1dfb      	adds	r3, r7, #7
 8003f20:	2201      	movs	r2, #1
 8003f22:	701a      	strb	r2, [r3, #0]
 8003f24:	e001      	b.n	8003f2a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003f26:	f7ff fa15 	bl	8003354 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f2a:	1dfb      	adds	r3, r7, #7
 8003f2c:	781b      	ldrb	r3, [r3, #0]
}
 8003f2e:	0018      	movs	r0, r3
 8003f30:	46bd      	mov	sp, r7
 8003f32:	b002      	add	sp, #8
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	46c0      	nop			; (mov r8, r8)
 8003f38:	40022000 	.word	0x40022000

08003f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f3c:	b590      	push	{r4, r7, lr}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f44:	4b14      	ldr	r3, [pc, #80]	; (8003f98 <HAL_InitTick+0x5c>)
 8003f46:	681c      	ldr	r4, [r3, #0]
 8003f48:	4b14      	ldr	r3, [pc, #80]	; (8003f9c <HAL_InitTick+0x60>)
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	0019      	movs	r1, r3
 8003f4e:	23fa      	movs	r3, #250	; 0xfa
 8003f50:	0098      	lsls	r0, r3, #2
 8003f52:	f7fc f8f5 	bl	8000140 <__udivsi3>
 8003f56:	0003      	movs	r3, r0
 8003f58:	0019      	movs	r1, r3
 8003f5a:	0020      	movs	r0, r4
 8003f5c:	f7fc f8f0 	bl	8000140 <__udivsi3>
 8003f60:	0003      	movs	r3, r0
 8003f62:	0018      	movs	r0, r3
 8003f64:	f000 f905 	bl	8004172 <HAL_SYSTICK_Config>
 8003f68:	1e03      	subs	r3, r0, #0
 8003f6a:	d001      	beq.n	8003f70 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e00f      	b.n	8003f90 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b03      	cmp	r3, #3
 8003f74:	d80b      	bhi.n	8003f8e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	2301      	movs	r3, #1
 8003f7a:	425b      	negs	r3, r3
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	0018      	movs	r0, r3
 8003f80:	f000 f8e2 	bl	8004148 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f84:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <HAL_InitTick+0x64>)
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	e000      	b.n	8003f90 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
}
 8003f90:	0018      	movs	r0, r3
 8003f92:	46bd      	mov	sp, r7
 8003f94:	b003      	add	sp, #12
 8003f96:	bd90      	pop	{r4, r7, pc}
 8003f98:	20000020 	.word	0x20000020
 8003f9c:	20000028 	.word	0x20000028
 8003fa0:	20000024 	.word	0x20000024

08003fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fa8:	4b05      	ldr	r3, [pc, #20]	; (8003fc0 <HAL_IncTick+0x1c>)
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	001a      	movs	r2, r3
 8003fae:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <HAL_IncTick+0x20>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	18d2      	adds	r2, r2, r3
 8003fb4:	4b03      	ldr	r3, [pc, #12]	; (8003fc4 <HAL_IncTick+0x20>)
 8003fb6:	601a      	str	r2, [r3, #0]
}
 8003fb8:	46c0      	nop			; (mov r8, r8)
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	46c0      	nop			; (mov r8, r8)
 8003fc0:	20000028 	.word	0x20000028
 8003fc4:	20000710 	.word	0x20000710

08003fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
  return uwTick;
 8003fcc:	4b02      	ldr	r3, [pc, #8]	; (8003fd8 <HAL_GetTick+0x10>)
 8003fce:	681b      	ldr	r3, [r3, #0]
}
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	46c0      	nop			; (mov r8, r8)
 8003fd8:	20000710 	.word	0x20000710

08003fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fe4:	f7ff fff0 	bl	8003fc8 <HAL_GetTick>
 8003fe8:	0003      	movs	r3, r0
 8003fea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	d005      	beq.n	8004002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ff6:	4b0a      	ldr	r3, [pc, #40]	; (8004020 <HAL_Delay+0x44>)
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	001a      	movs	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	189b      	adds	r3, r3, r2
 8004000:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004002:	46c0      	nop			; (mov r8, r8)
 8004004:	f7ff ffe0 	bl	8003fc8 <HAL_GetTick>
 8004008:	0002      	movs	r2, r0
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	429a      	cmp	r2, r3
 8004012:	d8f7      	bhi.n	8004004 <HAL_Delay+0x28>
  {
  }
}
 8004014:	46c0      	nop			; (mov r8, r8)
 8004016:	46c0      	nop			; (mov r8, r8)
 8004018:	46bd      	mov	sp, r7
 800401a:	b004      	add	sp, #16
 800401c:	bd80      	pop	{r7, pc}
 800401e:	46c0      	nop			; (mov r8, r8)
 8004020:	20000028 	.word	0x20000028

08004024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004024:	b590      	push	{r4, r7, lr}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	0002      	movs	r2, r0
 800402c:	6039      	str	r1, [r7, #0]
 800402e:	1dfb      	adds	r3, r7, #7
 8004030:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004032:	1dfb      	adds	r3, r7, #7
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	2b7f      	cmp	r3, #127	; 0x7f
 8004038:	d828      	bhi.n	800408c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800403a:	4a2f      	ldr	r2, [pc, #188]	; (80040f8 <__NVIC_SetPriority+0xd4>)
 800403c:	1dfb      	adds	r3, r7, #7
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	b25b      	sxtb	r3, r3
 8004042:	089b      	lsrs	r3, r3, #2
 8004044:	33c0      	adds	r3, #192	; 0xc0
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	589b      	ldr	r3, [r3, r2]
 800404a:	1dfa      	adds	r2, r7, #7
 800404c:	7812      	ldrb	r2, [r2, #0]
 800404e:	0011      	movs	r1, r2
 8004050:	2203      	movs	r2, #3
 8004052:	400a      	ands	r2, r1
 8004054:	00d2      	lsls	r2, r2, #3
 8004056:	21ff      	movs	r1, #255	; 0xff
 8004058:	4091      	lsls	r1, r2
 800405a:	000a      	movs	r2, r1
 800405c:	43d2      	mvns	r2, r2
 800405e:	401a      	ands	r2, r3
 8004060:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	019b      	lsls	r3, r3, #6
 8004066:	22ff      	movs	r2, #255	; 0xff
 8004068:	401a      	ands	r2, r3
 800406a:	1dfb      	adds	r3, r7, #7
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	0018      	movs	r0, r3
 8004070:	2303      	movs	r3, #3
 8004072:	4003      	ands	r3, r0
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004078:	481f      	ldr	r0, [pc, #124]	; (80040f8 <__NVIC_SetPriority+0xd4>)
 800407a:	1dfb      	adds	r3, r7, #7
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	b25b      	sxtb	r3, r3
 8004080:	089b      	lsrs	r3, r3, #2
 8004082:	430a      	orrs	r2, r1
 8004084:	33c0      	adds	r3, #192	; 0xc0
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800408a:	e031      	b.n	80040f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800408c:	4a1b      	ldr	r2, [pc, #108]	; (80040fc <__NVIC_SetPriority+0xd8>)
 800408e:	1dfb      	adds	r3, r7, #7
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	0019      	movs	r1, r3
 8004094:	230f      	movs	r3, #15
 8004096:	400b      	ands	r3, r1
 8004098:	3b08      	subs	r3, #8
 800409a:	089b      	lsrs	r3, r3, #2
 800409c:	3306      	adds	r3, #6
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	18d3      	adds	r3, r2, r3
 80040a2:	3304      	adds	r3, #4
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	1dfa      	adds	r2, r7, #7
 80040a8:	7812      	ldrb	r2, [r2, #0]
 80040aa:	0011      	movs	r1, r2
 80040ac:	2203      	movs	r2, #3
 80040ae:	400a      	ands	r2, r1
 80040b0:	00d2      	lsls	r2, r2, #3
 80040b2:	21ff      	movs	r1, #255	; 0xff
 80040b4:	4091      	lsls	r1, r2
 80040b6:	000a      	movs	r2, r1
 80040b8:	43d2      	mvns	r2, r2
 80040ba:	401a      	ands	r2, r3
 80040bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	019b      	lsls	r3, r3, #6
 80040c2:	22ff      	movs	r2, #255	; 0xff
 80040c4:	401a      	ands	r2, r3
 80040c6:	1dfb      	adds	r3, r7, #7
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	0018      	movs	r0, r3
 80040cc:	2303      	movs	r3, #3
 80040ce:	4003      	ands	r3, r0
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80040d4:	4809      	ldr	r0, [pc, #36]	; (80040fc <__NVIC_SetPriority+0xd8>)
 80040d6:	1dfb      	adds	r3, r7, #7
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	001c      	movs	r4, r3
 80040dc:	230f      	movs	r3, #15
 80040de:	4023      	ands	r3, r4
 80040e0:	3b08      	subs	r3, #8
 80040e2:	089b      	lsrs	r3, r3, #2
 80040e4:	430a      	orrs	r2, r1
 80040e6:	3306      	adds	r3, #6
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	18c3      	adds	r3, r0, r3
 80040ec:	3304      	adds	r3, #4
 80040ee:	601a      	str	r2, [r3, #0]
}
 80040f0:	46c0      	nop			; (mov r8, r8)
 80040f2:	46bd      	mov	sp, r7
 80040f4:	b003      	add	sp, #12
 80040f6:	bd90      	pop	{r4, r7, pc}
 80040f8:	e000e100 	.word	0xe000e100
 80040fc:	e000ed00 	.word	0xe000ed00

08004100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	1e5a      	subs	r2, r3, #1
 800410c:	2380      	movs	r3, #128	; 0x80
 800410e:	045b      	lsls	r3, r3, #17
 8004110:	429a      	cmp	r2, r3
 8004112:	d301      	bcc.n	8004118 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004114:	2301      	movs	r3, #1
 8004116:	e010      	b.n	800413a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004118:	4b0a      	ldr	r3, [pc, #40]	; (8004144 <SysTick_Config+0x44>)
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	3a01      	subs	r2, #1
 800411e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004120:	2301      	movs	r3, #1
 8004122:	425b      	negs	r3, r3
 8004124:	2103      	movs	r1, #3
 8004126:	0018      	movs	r0, r3
 8004128:	f7ff ff7c 	bl	8004024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800412c:	4b05      	ldr	r3, [pc, #20]	; (8004144 <SysTick_Config+0x44>)
 800412e:	2200      	movs	r2, #0
 8004130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004132:	4b04      	ldr	r3, [pc, #16]	; (8004144 <SysTick_Config+0x44>)
 8004134:	2207      	movs	r2, #7
 8004136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004138:	2300      	movs	r3, #0
}
 800413a:	0018      	movs	r0, r3
 800413c:	46bd      	mov	sp, r7
 800413e:	b002      	add	sp, #8
 8004140:	bd80      	pop	{r7, pc}
 8004142:	46c0      	nop			; (mov r8, r8)
 8004144:	e000e010 	.word	0xe000e010

08004148 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	60b9      	str	r1, [r7, #8]
 8004150:	607a      	str	r2, [r7, #4]
 8004152:	210f      	movs	r1, #15
 8004154:	187b      	adds	r3, r7, r1
 8004156:	1c02      	adds	r2, r0, #0
 8004158:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	187b      	adds	r3, r7, r1
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	b25b      	sxtb	r3, r3
 8004162:	0011      	movs	r1, r2
 8004164:	0018      	movs	r0, r3
 8004166:	f7ff ff5d 	bl	8004024 <__NVIC_SetPriority>
}
 800416a:	46c0      	nop			; (mov r8, r8)
 800416c:	46bd      	mov	sp, r7
 800416e:	b004      	add	sp, #16
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b082      	sub	sp, #8
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	0018      	movs	r0, r3
 800417e:	f7ff ffbf 	bl	8004100 <SysTick_Config>
 8004182:	0003      	movs	r3, r0
}
 8004184:	0018      	movs	r0, r3
 8004186:	46bd      	mov	sp, r7
 8004188:	b002      	add	sp, #8
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004196:	2300      	movs	r3, #0
 8004198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800419a:	2300      	movs	r3, #0
 800419c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800419e:	2300      	movs	r3, #0
 80041a0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80041a2:	e14f      	b.n	8004444 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2101      	movs	r1, #1
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	4091      	lsls	r1, r2
 80041ae:	000a      	movs	r2, r1
 80041b0:	4013      	ands	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d100      	bne.n	80041bc <HAL_GPIO_Init+0x30>
 80041ba:	e140      	b.n	800443e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2203      	movs	r2, #3
 80041c2:	4013      	ands	r3, r2
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d005      	beq.n	80041d4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2203      	movs	r2, #3
 80041ce:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d130      	bne.n	8004236 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	2203      	movs	r2, #3
 80041e0:	409a      	lsls	r2, r3
 80041e2:	0013      	movs	r3, r2
 80041e4:	43da      	mvns	r2, r3
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	4013      	ands	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	409a      	lsls	r2, r3
 80041f6:	0013      	movs	r3, r2
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800420a:	2201      	movs	r2, #1
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	409a      	lsls	r2, r3
 8004210:	0013      	movs	r3, r2
 8004212:	43da      	mvns	r2, r3
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	4013      	ands	r3, r2
 8004218:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	091b      	lsrs	r3, r3, #4
 8004220:	2201      	movs	r2, #1
 8004222:	401a      	ands	r2, r3
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	409a      	lsls	r2, r3
 8004228:	0013      	movs	r3, r2
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	4313      	orrs	r3, r2
 800422e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2203      	movs	r2, #3
 800423c:	4013      	ands	r3, r2
 800423e:	2b03      	cmp	r3, #3
 8004240:	d017      	beq.n	8004272 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	2203      	movs	r2, #3
 800424e:	409a      	lsls	r2, r3
 8004250:	0013      	movs	r3, r2
 8004252:	43da      	mvns	r2, r3
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	4013      	ands	r3, r2
 8004258:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	689a      	ldr	r2, [r3, #8]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	409a      	lsls	r2, r3
 8004264:	0013      	movs	r3, r2
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	4313      	orrs	r3, r2
 800426a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2203      	movs	r2, #3
 8004278:	4013      	ands	r3, r2
 800427a:	2b02      	cmp	r3, #2
 800427c:	d123      	bne.n	80042c6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	08da      	lsrs	r2, r3, #3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	3208      	adds	r2, #8
 8004286:	0092      	lsls	r2, r2, #2
 8004288:	58d3      	ldr	r3, [r2, r3]
 800428a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	2207      	movs	r2, #7
 8004290:	4013      	ands	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	220f      	movs	r2, #15
 8004296:	409a      	lsls	r2, r3
 8004298:	0013      	movs	r3, r2
 800429a:	43da      	mvns	r2, r3
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	4013      	ands	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	691a      	ldr	r2, [r3, #16]
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2107      	movs	r1, #7
 80042aa:	400b      	ands	r3, r1
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	409a      	lsls	r2, r3
 80042b0:	0013      	movs	r3, r2
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	08da      	lsrs	r2, r3, #3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3208      	adds	r2, #8
 80042c0:	0092      	lsls	r2, r2, #2
 80042c2:	6939      	ldr	r1, [r7, #16]
 80042c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	2203      	movs	r2, #3
 80042d2:	409a      	lsls	r2, r3
 80042d4:	0013      	movs	r3, r2
 80042d6:	43da      	mvns	r2, r3
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	4013      	ands	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2203      	movs	r2, #3
 80042e4:	401a      	ands	r2, r3
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	409a      	lsls	r2, r3
 80042ec:	0013      	movs	r3, r2
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	23c0      	movs	r3, #192	; 0xc0
 8004300:	029b      	lsls	r3, r3, #10
 8004302:	4013      	ands	r3, r2
 8004304:	d100      	bne.n	8004308 <HAL_GPIO_Init+0x17c>
 8004306:	e09a      	b.n	800443e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004308:	4b54      	ldr	r3, [pc, #336]	; (800445c <HAL_GPIO_Init+0x2d0>)
 800430a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800430c:	4b53      	ldr	r3, [pc, #332]	; (800445c <HAL_GPIO_Init+0x2d0>)
 800430e:	2101      	movs	r1, #1
 8004310:	430a      	orrs	r2, r1
 8004312:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004314:	4a52      	ldr	r2, [pc, #328]	; (8004460 <HAL_GPIO_Init+0x2d4>)
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	089b      	lsrs	r3, r3, #2
 800431a:	3302      	adds	r3, #2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	589b      	ldr	r3, [r3, r2]
 8004320:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2203      	movs	r2, #3
 8004326:	4013      	ands	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	220f      	movs	r2, #15
 800432c:	409a      	lsls	r2, r3
 800432e:	0013      	movs	r3, r2
 8004330:	43da      	mvns	r2, r3
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	4013      	ands	r3, r2
 8004336:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	23a0      	movs	r3, #160	; 0xa0
 800433c:	05db      	lsls	r3, r3, #23
 800433e:	429a      	cmp	r2, r3
 8004340:	d019      	beq.n	8004376 <HAL_GPIO_Init+0x1ea>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a47      	ldr	r2, [pc, #284]	; (8004464 <HAL_GPIO_Init+0x2d8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d013      	beq.n	8004372 <HAL_GPIO_Init+0x1e6>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a46      	ldr	r2, [pc, #280]	; (8004468 <HAL_GPIO_Init+0x2dc>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d00d      	beq.n	800436e <HAL_GPIO_Init+0x1e2>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a45      	ldr	r2, [pc, #276]	; (800446c <HAL_GPIO_Init+0x2e0>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d007      	beq.n	800436a <HAL_GPIO_Init+0x1de>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a44      	ldr	r2, [pc, #272]	; (8004470 <HAL_GPIO_Init+0x2e4>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d101      	bne.n	8004366 <HAL_GPIO_Init+0x1da>
 8004362:	2305      	movs	r3, #5
 8004364:	e008      	b.n	8004378 <HAL_GPIO_Init+0x1ec>
 8004366:	2306      	movs	r3, #6
 8004368:	e006      	b.n	8004378 <HAL_GPIO_Init+0x1ec>
 800436a:	2303      	movs	r3, #3
 800436c:	e004      	b.n	8004378 <HAL_GPIO_Init+0x1ec>
 800436e:	2302      	movs	r3, #2
 8004370:	e002      	b.n	8004378 <HAL_GPIO_Init+0x1ec>
 8004372:	2301      	movs	r3, #1
 8004374:	e000      	b.n	8004378 <HAL_GPIO_Init+0x1ec>
 8004376:	2300      	movs	r3, #0
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	2103      	movs	r1, #3
 800437c:	400a      	ands	r2, r1
 800437e:	0092      	lsls	r2, r2, #2
 8004380:	4093      	lsls	r3, r2
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	4313      	orrs	r3, r2
 8004386:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004388:	4935      	ldr	r1, [pc, #212]	; (8004460 <HAL_GPIO_Init+0x2d4>)
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	089b      	lsrs	r3, r3, #2
 800438e:	3302      	adds	r3, #2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004396:	4b37      	ldr	r3, [pc, #220]	; (8004474 <HAL_GPIO_Init+0x2e8>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	43da      	mvns	r2, r3
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	4013      	ands	r3, r2
 80043a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	2380      	movs	r3, #128	; 0x80
 80043ac:	035b      	lsls	r3, r3, #13
 80043ae:	4013      	ands	r3, r2
 80043b0:	d003      	beq.n	80043ba <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80043ba:	4b2e      	ldr	r3, [pc, #184]	; (8004474 <HAL_GPIO_Init+0x2e8>)
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80043c0:	4b2c      	ldr	r3, [pc, #176]	; (8004474 <HAL_GPIO_Init+0x2e8>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	43da      	mvns	r2, r3
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	4013      	ands	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	2380      	movs	r3, #128	; 0x80
 80043d6:	039b      	lsls	r3, r3, #14
 80043d8:	4013      	ands	r3, r2
 80043da:	d003      	beq.n	80043e4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80043e4:	4b23      	ldr	r3, [pc, #140]	; (8004474 <HAL_GPIO_Init+0x2e8>)
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80043ea:	4b22      	ldr	r3, [pc, #136]	; (8004474 <HAL_GPIO_Init+0x2e8>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	43da      	mvns	r2, r3
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	4013      	ands	r3, r2
 80043f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	2380      	movs	r3, #128	; 0x80
 8004400:	029b      	lsls	r3, r3, #10
 8004402:	4013      	ands	r3, r2
 8004404:	d003      	beq.n	800440e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4313      	orrs	r3, r2
 800440c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800440e:	4b19      	ldr	r3, [pc, #100]	; (8004474 <HAL_GPIO_Init+0x2e8>)
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004414:	4b17      	ldr	r3, [pc, #92]	; (8004474 <HAL_GPIO_Init+0x2e8>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	43da      	mvns	r2, r3
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	4013      	ands	r3, r2
 8004422:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	2380      	movs	r3, #128	; 0x80
 800442a:	025b      	lsls	r3, r3, #9
 800442c:	4013      	ands	r3, r2
 800442e:	d003      	beq.n	8004438 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	4313      	orrs	r3, r2
 8004436:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004438:	4b0e      	ldr	r3, [pc, #56]	; (8004474 <HAL_GPIO_Init+0x2e8>)
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	3301      	adds	r3, #1
 8004442:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	40da      	lsrs	r2, r3
 800444c:	1e13      	subs	r3, r2, #0
 800444e:	d000      	beq.n	8004452 <HAL_GPIO_Init+0x2c6>
 8004450:	e6a8      	b.n	80041a4 <HAL_GPIO_Init+0x18>
  }
}
 8004452:	46c0      	nop			; (mov r8, r8)
 8004454:	46c0      	nop			; (mov r8, r8)
 8004456:	46bd      	mov	sp, r7
 8004458:	b006      	add	sp, #24
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40021000 	.word	0x40021000
 8004460:	40010000 	.word	0x40010000
 8004464:	50000400 	.word	0x50000400
 8004468:	50000800 	.word	0x50000800
 800446c:	50000c00 	.word	0x50000c00
 8004470:	50001c00 	.word	0x50001c00
 8004474:	40010400 	.word	0x40010400

08004478 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e082      	b.n	8004590 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2241      	movs	r2, #65	; 0x41
 800448e:	5c9b      	ldrb	r3, [r3, r2]
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d107      	bne.n	80044a6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2240      	movs	r2, #64	; 0x40
 800449a:	2100      	movs	r1, #0
 800449c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	0018      	movs	r0, r3
 80044a2:	f7fe ff6b 	bl	800337c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2241      	movs	r2, #65	; 0x41
 80044aa:	2124      	movs	r1, #36	; 0x24
 80044ac:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2101      	movs	r1, #1
 80044ba:	438a      	bics	r2, r1
 80044bc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4934      	ldr	r1, [pc, #208]	; (8004598 <HAL_I2C_Init+0x120>)
 80044c8:	400a      	ands	r2, r1
 80044ca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689a      	ldr	r2, [r3, #8]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4931      	ldr	r1, [pc, #196]	; (800459c <HAL_I2C_Init+0x124>)
 80044d8:	400a      	ands	r2, r1
 80044da:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d108      	bne.n	80044f6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2180      	movs	r1, #128	; 0x80
 80044ee:	0209      	lsls	r1, r1, #8
 80044f0:	430a      	orrs	r2, r1
 80044f2:	609a      	str	r2, [r3, #8]
 80044f4:	e007      	b.n	8004506 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689a      	ldr	r2, [r3, #8]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2184      	movs	r1, #132	; 0x84
 8004500:	0209      	lsls	r1, r1, #8
 8004502:	430a      	orrs	r2, r1
 8004504:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	2b02      	cmp	r3, #2
 800450c:	d104      	bne.n	8004518 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2280      	movs	r2, #128	; 0x80
 8004514:	0112      	lsls	r2, r2, #4
 8004516:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	491f      	ldr	r1, [pc, #124]	; (80045a0 <HAL_I2C_Init+0x128>)
 8004524:	430a      	orrs	r2, r1
 8004526:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68da      	ldr	r2, [r3, #12]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	491a      	ldr	r1, [pc, #104]	; (800459c <HAL_I2C_Init+0x124>)
 8004534:	400a      	ands	r2, r1
 8004536:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691a      	ldr	r2, [r3, #16]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	431a      	orrs	r2, r3
 8004542:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69d9      	ldr	r1, [r3, #28]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1a      	ldr	r2, [r3, #32]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	430a      	orrs	r2, r1
 8004560:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2101      	movs	r1, #1
 800456e:	430a      	orrs	r2, r1
 8004570:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2241      	movs	r2, #65	; 0x41
 800457c:	2120      	movs	r1, #32
 800457e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2242      	movs	r2, #66	; 0x42
 800458a:	2100      	movs	r1, #0
 800458c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	0018      	movs	r0, r3
 8004592:	46bd      	mov	sp, r7
 8004594:	b002      	add	sp, #8
 8004596:	bd80      	pop	{r7, pc}
 8004598:	f0ffffff 	.word	0xf0ffffff
 800459c:	ffff7fff 	.word	0xffff7fff
 80045a0:	02008000 	.word	0x02008000

080045a4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045a4:	b590      	push	{r4, r7, lr}
 80045a6:	b089      	sub	sp, #36	; 0x24
 80045a8:	af02      	add	r7, sp, #8
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	000c      	movs	r4, r1
 80045ae:	0010      	movs	r0, r2
 80045b0:	0019      	movs	r1, r3
 80045b2:	230a      	movs	r3, #10
 80045b4:	18fb      	adds	r3, r7, r3
 80045b6:	1c22      	adds	r2, r4, #0
 80045b8:	801a      	strh	r2, [r3, #0]
 80045ba:	2308      	movs	r3, #8
 80045bc:	18fb      	adds	r3, r7, r3
 80045be:	1c02      	adds	r2, r0, #0
 80045c0:	801a      	strh	r2, [r3, #0]
 80045c2:	1dbb      	adds	r3, r7, #6
 80045c4:	1c0a      	adds	r2, r1, #0
 80045c6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2241      	movs	r2, #65	; 0x41
 80045cc:	5c9b      	ldrb	r3, [r3, r2]
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b20      	cmp	r3, #32
 80045d2:	d000      	beq.n	80045d6 <HAL_I2C_Mem_Write+0x32>
 80045d4:	e10c      	b.n	80047f0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80045d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d004      	beq.n	80045e6 <HAL_I2C_Mem_Write+0x42>
 80045dc:	232c      	movs	r3, #44	; 0x2c
 80045de:	18fb      	adds	r3, r7, r3
 80045e0:	881b      	ldrh	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d105      	bne.n	80045f2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2280      	movs	r2, #128	; 0x80
 80045ea:	0092      	lsls	r2, r2, #2
 80045ec:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e0ff      	b.n	80047f2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2240      	movs	r2, #64	; 0x40
 80045f6:	5c9b      	ldrb	r3, [r3, r2]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <HAL_I2C_Mem_Write+0x5c>
 80045fc:	2302      	movs	r3, #2
 80045fe:	e0f8      	b.n	80047f2 <HAL_I2C_Mem_Write+0x24e>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2240      	movs	r2, #64	; 0x40
 8004604:	2101      	movs	r1, #1
 8004606:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004608:	f7ff fcde 	bl	8003fc8 <HAL_GetTick>
 800460c:	0003      	movs	r3, r0
 800460e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004610:	2380      	movs	r3, #128	; 0x80
 8004612:	0219      	lsls	r1, r3, #8
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	2319      	movs	r3, #25
 800461c:	2201      	movs	r2, #1
 800461e:	f000 fc25 	bl	8004e6c <I2C_WaitOnFlagUntilTimeout>
 8004622:	1e03      	subs	r3, r0, #0
 8004624:	d001      	beq.n	800462a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e0e3      	b.n	80047f2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2241      	movs	r2, #65	; 0x41
 800462e:	2121      	movs	r1, #33	; 0x21
 8004630:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2242      	movs	r2, #66	; 0x42
 8004636:	2140      	movs	r1, #64	; 0x40
 8004638:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004644:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	222c      	movs	r2, #44	; 0x2c
 800464a:	18ba      	adds	r2, r7, r2
 800464c:	8812      	ldrh	r2, [r2, #0]
 800464e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004656:	1dbb      	adds	r3, r7, #6
 8004658:	881c      	ldrh	r4, [r3, #0]
 800465a:	2308      	movs	r3, #8
 800465c:	18fb      	adds	r3, r7, r3
 800465e:	881a      	ldrh	r2, [r3, #0]
 8004660:	230a      	movs	r3, #10
 8004662:	18fb      	adds	r3, r7, r3
 8004664:	8819      	ldrh	r1, [r3, #0]
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	9301      	str	r3, [sp, #4]
 800466c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	0023      	movs	r3, r4
 8004672:	f000 fb13 	bl	8004c9c <I2C_RequestMemoryWrite>
 8004676:	1e03      	subs	r3, r0, #0
 8004678:	d005      	beq.n	8004686 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2240      	movs	r2, #64	; 0x40
 800467e:	2100      	movs	r1, #0
 8004680:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e0b5      	b.n	80047f2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468a:	b29b      	uxth	r3, r3
 800468c:	2bff      	cmp	r3, #255	; 0xff
 800468e:	d911      	bls.n	80046b4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	22ff      	movs	r2, #255	; 0xff
 8004694:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800469a:	b2da      	uxtb	r2, r3
 800469c:	2380      	movs	r3, #128	; 0x80
 800469e:	045c      	lsls	r4, r3, #17
 80046a0:	230a      	movs	r3, #10
 80046a2:	18fb      	adds	r3, r7, r3
 80046a4:	8819      	ldrh	r1, [r3, #0]
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	2300      	movs	r3, #0
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	0023      	movs	r3, r4
 80046ae:	f000 fdb5 	bl	800521c <I2C_TransferConfig>
 80046b2:	e012      	b.n	80046da <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	2380      	movs	r3, #128	; 0x80
 80046c6:	049c      	lsls	r4, r3, #18
 80046c8:	230a      	movs	r3, #10
 80046ca:	18fb      	adds	r3, r7, r3
 80046cc:	8819      	ldrh	r1, [r3, #0]
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	2300      	movs	r3, #0
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	0023      	movs	r3, r4
 80046d6:	f000 fda1 	bl	800521c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	0018      	movs	r0, r3
 80046e2:	f000 fc11 	bl	8004f08 <I2C_WaitOnTXISFlagUntilTimeout>
 80046e6:	1e03      	subs	r3, r0, #0
 80046e8:	d001      	beq.n	80046ee <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e081      	b.n	80047f2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	781a      	ldrb	r2, [r3, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	1c5a      	adds	r2, r3, #1
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004708:	b29b      	uxth	r3, r3
 800470a:	3b01      	subs	r3, #1
 800470c:	b29a      	uxth	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004716:	3b01      	subs	r3, #1
 8004718:	b29a      	uxth	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004722:	b29b      	uxth	r3, r3
 8004724:	2b00      	cmp	r3, #0
 8004726:	d03a      	beq.n	800479e <HAL_I2C_Mem_Write+0x1fa>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472c:	2b00      	cmp	r3, #0
 800472e:	d136      	bne.n	800479e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	0013      	movs	r3, r2
 800473a:	2200      	movs	r2, #0
 800473c:	2180      	movs	r1, #128	; 0x80
 800473e:	f000 fb95 	bl	8004e6c <I2C_WaitOnFlagUntilTimeout>
 8004742:	1e03      	subs	r3, r0, #0
 8004744:	d001      	beq.n	800474a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e053      	b.n	80047f2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800474e:	b29b      	uxth	r3, r3
 8004750:	2bff      	cmp	r3, #255	; 0xff
 8004752:	d911      	bls.n	8004778 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	22ff      	movs	r2, #255	; 0xff
 8004758:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800475e:	b2da      	uxtb	r2, r3
 8004760:	2380      	movs	r3, #128	; 0x80
 8004762:	045c      	lsls	r4, r3, #17
 8004764:	230a      	movs	r3, #10
 8004766:	18fb      	adds	r3, r7, r3
 8004768:	8819      	ldrh	r1, [r3, #0]
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	2300      	movs	r3, #0
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	0023      	movs	r3, r4
 8004772:	f000 fd53 	bl	800521c <I2C_TransferConfig>
 8004776:	e012      	b.n	800479e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477c:	b29a      	uxth	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004786:	b2da      	uxtb	r2, r3
 8004788:	2380      	movs	r3, #128	; 0x80
 800478a:	049c      	lsls	r4, r3, #18
 800478c:	230a      	movs	r3, #10
 800478e:	18fb      	adds	r3, r7, r3
 8004790:	8819      	ldrh	r1, [r3, #0]
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	2300      	movs	r3, #0
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	0023      	movs	r3, r4
 800479a:	f000 fd3f 	bl	800521c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d198      	bne.n	80046da <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	0018      	movs	r0, r3
 80047b0:	f000 fbf0 	bl	8004f94 <I2C_WaitOnSTOPFlagUntilTimeout>
 80047b4:	1e03      	subs	r3, r0, #0
 80047b6:	d001      	beq.n	80047bc <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e01a      	b.n	80047f2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2220      	movs	r2, #32
 80047c2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	490b      	ldr	r1, [pc, #44]	; (80047fc <HAL_I2C_Mem_Write+0x258>)
 80047d0:	400a      	ands	r2, r1
 80047d2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2241      	movs	r2, #65	; 0x41
 80047d8:	2120      	movs	r1, #32
 80047da:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2242      	movs	r2, #66	; 0x42
 80047e0:	2100      	movs	r1, #0
 80047e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2240      	movs	r2, #64	; 0x40
 80047e8:	2100      	movs	r1, #0
 80047ea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80047ec:	2300      	movs	r3, #0
 80047ee:	e000      	b.n	80047f2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80047f0:	2302      	movs	r3, #2
  }
}
 80047f2:	0018      	movs	r0, r3
 80047f4:	46bd      	mov	sp, r7
 80047f6:	b007      	add	sp, #28
 80047f8:	bd90      	pop	{r4, r7, pc}
 80047fa:	46c0      	nop			; (mov r8, r8)
 80047fc:	fe00e800 	.word	0xfe00e800

08004800 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004800:	b590      	push	{r4, r7, lr}
 8004802:	b089      	sub	sp, #36	; 0x24
 8004804:	af02      	add	r7, sp, #8
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	000c      	movs	r4, r1
 800480a:	0010      	movs	r0, r2
 800480c:	0019      	movs	r1, r3
 800480e:	230a      	movs	r3, #10
 8004810:	18fb      	adds	r3, r7, r3
 8004812:	1c22      	adds	r2, r4, #0
 8004814:	801a      	strh	r2, [r3, #0]
 8004816:	2308      	movs	r3, #8
 8004818:	18fb      	adds	r3, r7, r3
 800481a:	1c02      	adds	r2, r0, #0
 800481c:	801a      	strh	r2, [r3, #0]
 800481e:	1dbb      	adds	r3, r7, #6
 8004820:	1c0a      	adds	r2, r1, #0
 8004822:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2241      	movs	r2, #65	; 0x41
 8004828:	5c9b      	ldrb	r3, [r3, r2]
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b20      	cmp	r3, #32
 800482e:	d000      	beq.n	8004832 <HAL_I2C_Mem_Read+0x32>
 8004830:	e110      	b.n	8004a54 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8004832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004834:	2b00      	cmp	r3, #0
 8004836:	d004      	beq.n	8004842 <HAL_I2C_Mem_Read+0x42>
 8004838:	232c      	movs	r3, #44	; 0x2c
 800483a:	18fb      	adds	r3, r7, r3
 800483c:	881b      	ldrh	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d105      	bne.n	800484e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2280      	movs	r2, #128	; 0x80
 8004846:	0092      	lsls	r2, r2, #2
 8004848:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e103      	b.n	8004a56 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2240      	movs	r2, #64	; 0x40
 8004852:	5c9b      	ldrb	r3, [r3, r2]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d101      	bne.n	800485c <HAL_I2C_Mem_Read+0x5c>
 8004858:	2302      	movs	r3, #2
 800485a:	e0fc      	b.n	8004a56 <HAL_I2C_Mem_Read+0x256>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2240      	movs	r2, #64	; 0x40
 8004860:	2101      	movs	r1, #1
 8004862:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004864:	f7ff fbb0 	bl	8003fc8 <HAL_GetTick>
 8004868:	0003      	movs	r3, r0
 800486a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800486c:	2380      	movs	r3, #128	; 0x80
 800486e:	0219      	lsls	r1, r3, #8
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	2319      	movs	r3, #25
 8004878:	2201      	movs	r2, #1
 800487a:	f000 faf7 	bl	8004e6c <I2C_WaitOnFlagUntilTimeout>
 800487e:	1e03      	subs	r3, r0, #0
 8004880:	d001      	beq.n	8004886 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e0e7      	b.n	8004a56 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2241      	movs	r2, #65	; 0x41
 800488a:	2122      	movs	r1, #34	; 0x22
 800488c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2242      	movs	r2, #66	; 0x42
 8004892:	2140      	movs	r1, #64	; 0x40
 8004894:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	222c      	movs	r2, #44	; 0x2c
 80048a6:	18ba      	adds	r2, r7, r2
 80048a8:	8812      	ldrh	r2, [r2, #0]
 80048aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048b2:	1dbb      	adds	r3, r7, #6
 80048b4:	881c      	ldrh	r4, [r3, #0]
 80048b6:	2308      	movs	r3, #8
 80048b8:	18fb      	adds	r3, r7, r3
 80048ba:	881a      	ldrh	r2, [r3, #0]
 80048bc:	230a      	movs	r3, #10
 80048be:	18fb      	adds	r3, r7, r3
 80048c0:	8819      	ldrh	r1, [r3, #0]
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	9301      	str	r3, [sp, #4]
 80048c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	0023      	movs	r3, r4
 80048ce:	f000 fa49 	bl	8004d64 <I2C_RequestMemoryRead>
 80048d2:	1e03      	subs	r3, r0, #0
 80048d4:	d005      	beq.n	80048e2 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2240      	movs	r2, #64	; 0x40
 80048da:	2100      	movs	r1, #0
 80048dc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e0b9      	b.n	8004a56 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	2bff      	cmp	r3, #255	; 0xff
 80048ea:	d911      	bls.n	8004910 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	22ff      	movs	r2, #255	; 0xff
 80048f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	2380      	movs	r3, #128	; 0x80
 80048fa:	045c      	lsls	r4, r3, #17
 80048fc:	230a      	movs	r3, #10
 80048fe:	18fb      	adds	r3, r7, r3
 8004900:	8819      	ldrh	r1, [r3, #0]
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	4b56      	ldr	r3, [pc, #344]	; (8004a60 <HAL_I2C_Mem_Read+0x260>)
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	0023      	movs	r3, r4
 800490a:	f000 fc87 	bl	800521c <I2C_TransferConfig>
 800490e:	e012      	b.n	8004936 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004914:	b29a      	uxth	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800491e:	b2da      	uxtb	r2, r3
 8004920:	2380      	movs	r3, #128	; 0x80
 8004922:	049c      	lsls	r4, r3, #18
 8004924:	230a      	movs	r3, #10
 8004926:	18fb      	adds	r3, r7, r3
 8004928:	8819      	ldrh	r1, [r3, #0]
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	4b4c      	ldr	r3, [pc, #304]	; (8004a60 <HAL_I2C_Mem_Read+0x260>)
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	0023      	movs	r3, r4
 8004932:	f000 fc73 	bl	800521c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004936:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	0013      	movs	r3, r2
 8004940:	2200      	movs	r2, #0
 8004942:	2104      	movs	r1, #4
 8004944:	f000 fa92 	bl	8004e6c <I2C_WaitOnFlagUntilTimeout>
 8004948:	1e03      	subs	r3, r0, #0
 800494a:	d001      	beq.n	8004950 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e082      	b.n	8004a56 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	b2d2      	uxtb	r2, r2
 800495c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004962:	1c5a      	adds	r2, r3, #1
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800496c:	3b01      	subs	r3, #1
 800496e:	b29a      	uxth	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004978:	b29b      	uxth	r3, r3
 800497a:	3b01      	subs	r3, #1
 800497c:	b29a      	uxth	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004986:	b29b      	uxth	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	d03a      	beq.n	8004a02 <HAL_I2C_Mem_Read+0x202>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004990:	2b00      	cmp	r3, #0
 8004992:	d136      	bne.n	8004a02 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	0013      	movs	r3, r2
 800499e:	2200      	movs	r2, #0
 80049a0:	2180      	movs	r1, #128	; 0x80
 80049a2:	f000 fa63 	bl	8004e6c <I2C_WaitOnFlagUntilTimeout>
 80049a6:	1e03      	subs	r3, r0, #0
 80049a8:	d001      	beq.n	80049ae <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e053      	b.n	8004a56 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	2bff      	cmp	r3, #255	; 0xff
 80049b6:	d911      	bls.n	80049dc <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	22ff      	movs	r2, #255	; 0xff
 80049bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	2380      	movs	r3, #128	; 0x80
 80049c6:	045c      	lsls	r4, r3, #17
 80049c8:	230a      	movs	r3, #10
 80049ca:	18fb      	adds	r3, r7, r3
 80049cc:	8819      	ldrh	r1, [r3, #0]
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	2300      	movs	r3, #0
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	0023      	movs	r3, r4
 80049d6:	f000 fc21 	bl	800521c <I2C_TransferConfig>
 80049da:	e012      	b.n	8004a02 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ea:	b2da      	uxtb	r2, r3
 80049ec:	2380      	movs	r3, #128	; 0x80
 80049ee:	049c      	lsls	r4, r3, #18
 80049f0:	230a      	movs	r3, #10
 80049f2:	18fb      	adds	r3, r7, r3
 80049f4:	8819      	ldrh	r1, [r3, #0]
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	2300      	movs	r3, #0
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	0023      	movs	r3, r4
 80049fe:	f000 fc0d 	bl	800521c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d194      	bne.n	8004936 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	0018      	movs	r0, r3
 8004a14:	f000 fabe 	bl	8004f94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a18:	1e03      	subs	r3, r0, #0
 8004a1a:	d001      	beq.n	8004a20 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e01a      	b.n	8004a56 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2220      	movs	r2, #32
 8004a26:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	490c      	ldr	r1, [pc, #48]	; (8004a64 <HAL_I2C_Mem_Read+0x264>)
 8004a34:	400a      	ands	r2, r1
 8004a36:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2241      	movs	r2, #65	; 0x41
 8004a3c:	2120      	movs	r1, #32
 8004a3e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2242      	movs	r2, #66	; 0x42
 8004a44:	2100      	movs	r1, #0
 8004a46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2240      	movs	r2, #64	; 0x40
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004a50:	2300      	movs	r3, #0
 8004a52:	e000      	b.n	8004a56 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8004a54:	2302      	movs	r3, #2
  }
}
 8004a56:	0018      	movs	r0, r3
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	b007      	add	sp, #28
 8004a5c:	bd90      	pop	{r4, r7, pc}
 8004a5e:	46c0      	nop			; (mov r8, r8)
 8004a60:	80002400 	.word	0x80002400
 8004a64:	fe00e800 	.word	0xfe00e800

08004a68 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b08a      	sub	sp, #40	; 0x28
 8004a6c:	af02      	add	r7, sp, #8
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	607a      	str	r2, [r7, #4]
 8004a72:	603b      	str	r3, [r7, #0]
 8004a74:	230a      	movs	r3, #10
 8004a76:	18fb      	adds	r3, r7, r3
 8004a78:	1c0a      	adds	r2, r1, #0
 8004a7a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2241      	movs	r2, #65	; 0x41
 8004a84:	5c9b      	ldrb	r3, [r3, r2]
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b20      	cmp	r3, #32
 8004a8a:	d000      	beq.n	8004a8e <HAL_I2C_IsDeviceReady+0x26>
 8004a8c:	e0fd      	b.n	8004c8a <HAL_I2C_IsDeviceReady+0x222>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	699a      	ldr	r2, [r3, #24]
 8004a94:	2380      	movs	r3, #128	; 0x80
 8004a96:	021b      	lsls	r3, r3, #8
 8004a98:	401a      	ands	r2, r3
 8004a9a:	2380      	movs	r3, #128	; 0x80
 8004a9c:	021b      	lsls	r3, r3, #8
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d101      	bne.n	8004aa6 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	e0f2      	b.n	8004c8c <HAL_I2C_IsDeviceReady+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2240      	movs	r2, #64	; 0x40
 8004aaa:	5c9b      	ldrb	r3, [r3, r2]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d101      	bne.n	8004ab4 <HAL_I2C_IsDeviceReady+0x4c>
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	e0eb      	b.n	8004c8c <HAL_I2C_IsDeviceReady+0x224>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2240      	movs	r2, #64	; 0x40
 8004ab8:	2101      	movs	r1, #1
 8004aba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2241      	movs	r2, #65	; 0x41
 8004ac0:	2124      	movs	r1, #36	; 0x24
 8004ac2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d107      	bne.n	8004ae2 <HAL_I2C_IsDeviceReady+0x7a>
 8004ad2:	230a      	movs	r3, #10
 8004ad4:	18fb      	adds	r3, r7, r3
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	059b      	lsls	r3, r3, #22
 8004ada:	0d9b      	lsrs	r3, r3, #22
 8004adc:	4a6d      	ldr	r2, [pc, #436]	; (8004c94 <HAL_I2C_IsDeviceReady+0x22c>)
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	e006      	b.n	8004af0 <HAL_I2C_IsDeviceReady+0x88>
 8004ae2:	230a      	movs	r3, #10
 8004ae4:	18fb      	adds	r3, r7, r3
 8004ae6:	881b      	ldrh	r3, [r3, #0]
 8004ae8:	059b      	lsls	r3, r3, #22
 8004aea:	0d9b      	lsrs	r3, r3, #22
 8004aec:	4a6a      	ldr	r2, [pc, #424]	; (8004c98 <HAL_I2C_IsDeviceReady+0x230>)
 8004aee:	431a      	orrs	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004af6:	f7ff fa67 	bl	8003fc8 <HAL_GetTick>
 8004afa:	0003      	movs	r3, r0
 8004afc:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	2220      	movs	r2, #32
 8004b06:	4013      	ands	r3, r2
 8004b08:	3b20      	subs	r3, #32
 8004b0a:	425a      	negs	r2, r3
 8004b0c:	4153      	adcs	r3, r2
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	231f      	movs	r3, #31
 8004b12:	18fb      	adds	r3, r7, r3
 8004b14:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	2210      	movs	r2, #16
 8004b1e:	4013      	ands	r3, r2
 8004b20:	3b10      	subs	r3, #16
 8004b22:	425a      	negs	r2, r3
 8004b24:	4153      	adcs	r3, r2
 8004b26:	b2da      	uxtb	r2, r3
 8004b28:	231e      	movs	r3, #30
 8004b2a:	18fb      	adds	r3, r7, r3
 8004b2c:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004b2e:	e035      	b.n	8004b9c <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	3301      	adds	r3, #1
 8004b34:	d01a      	beq.n	8004b6c <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b36:	f7ff fa47 	bl	8003fc8 <HAL_GetTick>
 8004b3a:	0002      	movs	r2, r0
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d302      	bcc.n	8004b4c <HAL_I2C_IsDeviceReady+0xe4>
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10f      	bne.n	8004b6c <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2241      	movs	r2, #65	; 0x41
 8004b50:	2120      	movs	r1, #32
 8004b52:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b58:	2220      	movs	r2, #32
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2240      	movs	r2, #64	; 0x40
 8004b64:	2100      	movs	r1, #0
 8004b66:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e08f      	b.n	8004c8c <HAL_I2C_IsDeviceReady+0x224>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	2220      	movs	r2, #32
 8004b74:	4013      	ands	r3, r2
 8004b76:	3b20      	subs	r3, #32
 8004b78:	425a      	negs	r2, r3
 8004b7a:	4153      	adcs	r3, r2
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	231f      	movs	r3, #31
 8004b80:	18fb      	adds	r3, r7, r3
 8004b82:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	2210      	movs	r2, #16
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	3b10      	subs	r3, #16
 8004b90:	425a      	negs	r2, r3
 8004b92:	4153      	adcs	r3, r2
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	231e      	movs	r3, #30
 8004b98:	18fb      	adds	r3, r7, r3
 8004b9a:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004b9c:	231f      	movs	r3, #31
 8004b9e:	18fb      	adds	r3, r7, r3
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d104      	bne.n	8004bb0 <HAL_I2C_IsDeviceReady+0x148>
 8004ba6:	231e      	movs	r3, #30
 8004ba8:	18fb      	adds	r3, r7, r3
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0bf      	beq.n	8004b30 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	2210      	movs	r2, #16
 8004bb8:	4013      	ands	r3, r2
 8004bba:	2b10      	cmp	r3, #16
 8004bbc:	d01a      	beq.n	8004bf4 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	0013      	movs	r3, r2
 8004bc8:	2200      	movs	r2, #0
 8004bca:	2120      	movs	r1, #32
 8004bcc:	f000 f94e 	bl	8004e6c <I2C_WaitOnFlagUntilTimeout>
 8004bd0:	1e03      	subs	r3, r0, #0
 8004bd2:	d001      	beq.n	8004bd8 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e059      	b.n	8004c8c <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2241      	movs	r2, #65	; 0x41
 8004be4:	2120      	movs	r1, #32
 8004be6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2240      	movs	r2, #64	; 0x40
 8004bec:	2100      	movs	r1, #0
 8004bee:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	e04b      	b.n	8004c8c <HAL_I2C_IsDeviceReady+0x224>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	0013      	movs	r3, r2
 8004bfe:	2200      	movs	r2, #0
 8004c00:	2120      	movs	r1, #32
 8004c02:	f000 f933 	bl	8004e6c <I2C_WaitOnFlagUntilTimeout>
 8004c06:	1e03      	subs	r3, r0, #0
 8004c08:	d001      	beq.n	8004c0e <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e03e      	b.n	8004c8c <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2210      	movs	r2, #16
 8004c14:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d119      	bne.n	8004c5a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2180      	movs	r1, #128	; 0x80
 8004c32:	01c9      	lsls	r1, r1, #7
 8004c34:	430a      	orrs	r2, r1
 8004c36:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	0013      	movs	r3, r2
 8004c42:	2200      	movs	r2, #0
 8004c44:	2120      	movs	r1, #32
 8004c46:	f000 f911 	bl	8004e6c <I2C_WaitOnFlagUntilTimeout>
 8004c4a:	1e03      	subs	r3, r0, #0
 8004c4c:	d001      	beq.n	8004c52 <HAL_I2C_IsDeviceReady+0x1ea>
        {
          return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e01c      	b.n	8004c8c <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2220      	movs	r2, #32
 8004c58:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d900      	bls.n	8004c6a <HAL_I2C_IsDeviceReady+0x202>
 8004c68:	e72f      	b.n	8004aca <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2241      	movs	r2, #65	; 0x41
 8004c6e:	2120      	movs	r1, #32
 8004c70:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c76:	2220      	movs	r2, #32
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2240      	movs	r2, #64	; 0x40
 8004c82:	2100      	movs	r1, #0
 8004c84:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e000      	b.n	8004c8c <HAL_I2C_IsDeviceReady+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004c8a:	2302      	movs	r3, #2
  }
}
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	b008      	add	sp, #32
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	02002000 	.word	0x02002000
 8004c98:	02002800 	.word	0x02002800

08004c9c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004c9c:	b5b0      	push	{r4, r5, r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af02      	add	r7, sp, #8
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	000c      	movs	r4, r1
 8004ca6:	0010      	movs	r0, r2
 8004ca8:	0019      	movs	r1, r3
 8004caa:	250a      	movs	r5, #10
 8004cac:	197b      	adds	r3, r7, r5
 8004cae:	1c22      	adds	r2, r4, #0
 8004cb0:	801a      	strh	r2, [r3, #0]
 8004cb2:	2308      	movs	r3, #8
 8004cb4:	18fb      	adds	r3, r7, r3
 8004cb6:	1c02      	adds	r2, r0, #0
 8004cb8:	801a      	strh	r2, [r3, #0]
 8004cba:	1dbb      	adds	r3, r7, #6
 8004cbc:	1c0a      	adds	r2, r1, #0
 8004cbe:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004cc0:	1dbb      	adds	r3, r7, #6
 8004cc2:	881b      	ldrh	r3, [r3, #0]
 8004cc4:	b2da      	uxtb	r2, r3
 8004cc6:	2380      	movs	r3, #128	; 0x80
 8004cc8:	045c      	lsls	r4, r3, #17
 8004cca:	197b      	adds	r3, r7, r5
 8004ccc:	8819      	ldrh	r1, [r3, #0]
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	4b23      	ldr	r3, [pc, #140]	; (8004d60 <I2C_RequestMemoryWrite+0xc4>)
 8004cd2:	9300      	str	r3, [sp, #0]
 8004cd4:	0023      	movs	r3, r4
 8004cd6:	f000 faa1 	bl	800521c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cdc:	6a39      	ldr	r1, [r7, #32]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	f000 f911 	bl	8004f08 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ce6:	1e03      	subs	r3, r0, #0
 8004ce8:	d001      	beq.n	8004cee <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e033      	b.n	8004d56 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cee:	1dbb      	adds	r3, r7, #6
 8004cf0:	881b      	ldrh	r3, [r3, #0]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d107      	bne.n	8004d06 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004cf6:	2308      	movs	r3, #8
 8004cf8:	18fb      	adds	r3, r7, r3
 8004cfa:	881b      	ldrh	r3, [r3, #0]
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	629a      	str	r2, [r3, #40]	; 0x28
 8004d04:	e019      	b.n	8004d3a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004d06:	2308      	movs	r3, #8
 8004d08:	18fb      	adds	r3, r7, r3
 8004d0a:	881b      	ldrh	r3, [r3, #0]
 8004d0c:	0a1b      	lsrs	r3, r3, #8
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d1a:	6a39      	ldr	r1, [r7, #32]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	0018      	movs	r0, r3
 8004d20:	f000 f8f2 	bl	8004f08 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d24:	1e03      	subs	r3, r0, #0
 8004d26:	d001      	beq.n	8004d2c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e014      	b.n	8004d56 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d2c:	2308      	movs	r3, #8
 8004d2e:	18fb      	adds	r3, r7, r3
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004d3a:	6a3a      	ldr	r2, [r7, #32]
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	0013      	movs	r3, r2
 8004d44:	2200      	movs	r2, #0
 8004d46:	2180      	movs	r1, #128	; 0x80
 8004d48:	f000 f890 	bl	8004e6c <I2C_WaitOnFlagUntilTimeout>
 8004d4c:	1e03      	subs	r3, r0, #0
 8004d4e:	d001      	beq.n	8004d54 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e000      	b.n	8004d56 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	0018      	movs	r0, r3
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	b004      	add	sp, #16
 8004d5c:	bdb0      	pop	{r4, r5, r7, pc}
 8004d5e:	46c0      	nop			; (mov r8, r8)
 8004d60:	80002000 	.word	0x80002000

08004d64 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004d64:	b5b0      	push	{r4, r5, r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af02      	add	r7, sp, #8
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	000c      	movs	r4, r1
 8004d6e:	0010      	movs	r0, r2
 8004d70:	0019      	movs	r1, r3
 8004d72:	250a      	movs	r5, #10
 8004d74:	197b      	adds	r3, r7, r5
 8004d76:	1c22      	adds	r2, r4, #0
 8004d78:	801a      	strh	r2, [r3, #0]
 8004d7a:	2308      	movs	r3, #8
 8004d7c:	18fb      	adds	r3, r7, r3
 8004d7e:	1c02      	adds	r2, r0, #0
 8004d80:	801a      	strh	r2, [r3, #0]
 8004d82:	1dbb      	adds	r3, r7, #6
 8004d84:	1c0a      	adds	r2, r1, #0
 8004d86:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004d88:	1dbb      	adds	r3, r7, #6
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	197b      	adds	r3, r7, r5
 8004d90:	8819      	ldrh	r1, [r3, #0]
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	4b23      	ldr	r3, [pc, #140]	; (8004e24 <I2C_RequestMemoryRead+0xc0>)
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f000 fa3f 	bl	800521c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004da0:	6a39      	ldr	r1, [r7, #32]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	0018      	movs	r0, r3
 8004da6:	f000 f8af 	bl	8004f08 <I2C_WaitOnTXISFlagUntilTimeout>
 8004daa:	1e03      	subs	r3, r0, #0
 8004dac:	d001      	beq.n	8004db2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e033      	b.n	8004e1a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004db2:	1dbb      	adds	r3, r7, #6
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d107      	bne.n	8004dca <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004dba:	2308      	movs	r3, #8
 8004dbc:	18fb      	adds	r3, r7, r3
 8004dbe:	881b      	ldrh	r3, [r3, #0]
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	629a      	str	r2, [r3, #40]	; 0x28
 8004dc8:	e019      	b.n	8004dfe <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004dca:	2308      	movs	r3, #8
 8004dcc:	18fb      	adds	r3, r7, r3
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	0a1b      	lsrs	r3, r3, #8
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dde:	6a39      	ldr	r1, [r7, #32]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	0018      	movs	r0, r3
 8004de4:	f000 f890 	bl	8004f08 <I2C_WaitOnTXISFlagUntilTimeout>
 8004de8:	1e03      	subs	r3, r0, #0
 8004dea:	d001      	beq.n	8004df0 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e014      	b.n	8004e1a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004df0:	2308      	movs	r3, #8
 8004df2:	18fb      	adds	r3, r7, r3
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004dfe:	6a3a      	ldr	r2, [r7, #32]
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	0013      	movs	r3, r2
 8004e08:	2200      	movs	r2, #0
 8004e0a:	2140      	movs	r1, #64	; 0x40
 8004e0c:	f000 f82e 	bl	8004e6c <I2C_WaitOnFlagUntilTimeout>
 8004e10:	1e03      	subs	r3, r0, #0
 8004e12:	d001      	beq.n	8004e18 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e000      	b.n	8004e1a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	b004      	add	sp, #16
 8004e20:	bdb0      	pop	{r4, r5, r7, pc}
 8004e22:	46c0      	nop			; (mov r8, r8)
 8004e24:	80002000 	.word	0x80002000

08004e28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	2202      	movs	r2, #2
 8004e38:	4013      	ands	r3, r2
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d103      	bne.n	8004e46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2200      	movs	r2, #0
 8004e44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	4013      	ands	r3, r2
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d007      	beq.n	8004e64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	699a      	ldr	r2, [r3, #24]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2101      	movs	r1, #1
 8004e60:	430a      	orrs	r2, r1
 8004e62:	619a      	str	r2, [r3, #24]
  }
}
 8004e64:	46c0      	nop			; (mov r8, r8)
 8004e66:	46bd      	mov	sp, r7
 8004e68:	b002      	add	sp, #8
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	603b      	str	r3, [r7, #0]
 8004e78:	1dfb      	adds	r3, r7, #7
 8004e7a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e7c:	e030      	b.n	8004ee0 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	3301      	adds	r3, #1
 8004e82:	d02d      	beq.n	8004ee0 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e84:	f7ff f8a0 	bl	8003fc8 <HAL_GetTick>
 8004e88:	0002      	movs	r2, r0
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d302      	bcc.n	8004e9a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d122      	bne.n	8004ee0 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	425a      	negs	r2, r3
 8004eaa:	4153      	adcs	r3, r2
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	001a      	movs	r2, r3
 8004eb0:	1dfb      	adds	r3, r7, #7
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d113      	bne.n	8004ee0 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2241      	movs	r2, #65	; 0x41
 8004ec8:	2120      	movs	r1, #32
 8004eca:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2242      	movs	r2, #66	; 0x42
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2240      	movs	r2, #64	; 0x40
 8004ed8:	2100      	movs	r1, #0
 8004eda:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e00f      	b.n	8004f00 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	425a      	negs	r2, r3
 8004ef0:	4153      	adcs	r3, r2
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	001a      	movs	r2, r3
 8004ef6:	1dfb      	adds	r3, r7, #7
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d0bf      	beq.n	8004e7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	0018      	movs	r0, r3
 8004f02:	46bd      	mov	sp, r7
 8004f04:	b004      	add	sp, #16
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f14:	e032      	b.n	8004f7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	68b9      	ldr	r1, [r7, #8]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	0018      	movs	r0, r3
 8004f1e:	f000 f87d 	bl	800501c <I2C_IsErrorOccurred>
 8004f22:	1e03      	subs	r3, r0, #0
 8004f24:	d001      	beq.n	8004f2a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e030      	b.n	8004f8c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	d025      	beq.n	8004f7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f30:	f7ff f84a 	bl	8003fc8 <HAL_GetTick>
 8004f34:	0002      	movs	r2, r0
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d302      	bcc.n	8004f46 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d11a      	bne.n	8004f7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	4013      	ands	r3, r2
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d013      	beq.n	8004f7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f58:	2220      	movs	r2, #32
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2241      	movs	r2, #65	; 0x41
 8004f64:	2120      	movs	r1, #32
 8004f66:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2242      	movs	r2, #66	; 0x42
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2240      	movs	r2, #64	; 0x40
 8004f74:	2100      	movs	r1, #0
 8004f76:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e007      	b.n	8004f8c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	2202      	movs	r2, #2
 8004f84:	4013      	ands	r3, r2
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d1c5      	bne.n	8004f16 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	0018      	movs	r0, r3
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	b004      	add	sp, #16
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fa0:	e02f      	b.n	8005002 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	68b9      	ldr	r1, [r7, #8]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	0018      	movs	r0, r3
 8004faa:	f000 f837 	bl	800501c <I2C_IsErrorOccurred>
 8004fae:	1e03      	subs	r3, r0, #0
 8004fb0:	d001      	beq.n	8004fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e02d      	b.n	8005012 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fb6:	f7ff f807 	bl	8003fc8 <HAL_GetTick>
 8004fba:	0002      	movs	r2, r0
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d302      	bcc.n	8004fcc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d11a      	bne.n	8005002 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	2b20      	cmp	r3, #32
 8004fd8:	d013      	beq.n	8005002 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fde:	2220      	movs	r2, #32
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2241      	movs	r2, #65	; 0x41
 8004fea:	2120      	movs	r1, #32
 8004fec:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2242      	movs	r2, #66	; 0x42
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2240      	movs	r2, #64	; 0x40
 8004ffa:	2100      	movs	r1, #0
 8004ffc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e007      	b.n	8005012 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	2220      	movs	r2, #32
 800500a:	4013      	ands	r3, r2
 800500c:	2b20      	cmp	r3, #32
 800500e:	d1c8      	bne.n	8004fa2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	0018      	movs	r0, r3
 8005014:	46bd      	mov	sp, r7
 8005016:	b004      	add	sp, #16
 8005018:	bd80      	pop	{r7, pc}
	...

0800501c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800501c:	b590      	push	{r4, r7, lr}
 800501e:	b08b      	sub	sp, #44	; 0x2c
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005028:	2327      	movs	r3, #39	; 0x27
 800502a:	18fb      	adds	r3, r7, r3
 800502c:	2200      	movs	r2, #0
 800502e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005038:	2300      	movs	r3, #0
 800503a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	2210      	movs	r2, #16
 8005044:	4013      	ands	r3, r2
 8005046:	d100      	bne.n	800504a <I2C_IsErrorOccurred+0x2e>
 8005048:	e082      	b.n	8005150 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2210      	movs	r2, #16
 8005050:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005052:	e060      	b.n	8005116 <I2C_IsErrorOccurred+0xfa>
 8005054:	2427      	movs	r4, #39	; 0x27
 8005056:	193b      	adds	r3, r7, r4
 8005058:	193a      	adds	r2, r7, r4
 800505a:	7812      	ldrb	r2, [r2, #0]
 800505c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	3301      	adds	r3, #1
 8005062:	d058      	beq.n	8005116 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005064:	f7fe ffb0 	bl	8003fc8 <HAL_GetTick>
 8005068:	0002      	movs	r2, r0
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	429a      	cmp	r2, r3
 8005072:	d306      	bcc.n	8005082 <I2C_IsErrorOccurred+0x66>
 8005074:	193b      	adds	r3, r7, r4
 8005076:	193a      	adds	r2, r7, r4
 8005078:	7812      	ldrb	r2, [r2, #0]
 800507a:	701a      	strb	r2, [r3, #0]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d149      	bne.n	8005116 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	2380      	movs	r3, #128	; 0x80
 800508a:	01db      	lsls	r3, r3, #7
 800508c:	4013      	ands	r3, r2
 800508e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005090:	2013      	movs	r0, #19
 8005092:	183b      	adds	r3, r7, r0
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	2142      	movs	r1, #66	; 0x42
 8005098:	5c52      	ldrb	r2, [r2, r1]
 800509a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	699a      	ldr	r2, [r3, #24]
 80050a2:	2380      	movs	r3, #128	; 0x80
 80050a4:	021b      	lsls	r3, r3, #8
 80050a6:	401a      	ands	r2, r3
 80050a8:	2380      	movs	r3, #128	; 0x80
 80050aa:	021b      	lsls	r3, r3, #8
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d126      	bne.n	80050fe <I2C_IsErrorOccurred+0xe2>
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	2380      	movs	r3, #128	; 0x80
 80050b4:	01db      	lsls	r3, r3, #7
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d021      	beq.n	80050fe <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80050ba:	183b      	adds	r3, r7, r0
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	2b20      	cmp	r3, #32
 80050c0:	d01d      	beq.n	80050fe <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	685a      	ldr	r2, [r3, #4]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2180      	movs	r1, #128	; 0x80
 80050ce:	01c9      	lsls	r1, r1, #7
 80050d0:	430a      	orrs	r2, r1
 80050d2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80050d4:	f7fe ff78 	bl	8003fc8 <HAL_GetTick>
 80050d8:	0003      	movs	r3, r0
 80050da:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050dc:	e00f      	b.n	80050fe <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80050de:	f7fe ff73 	bl	8003fc8 <HAL_GetTick>
 80050e2:	0002      	movs	r2, r0
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b19      	cmp	r3, #25
 80050ea:	d908      	bls.n	80050fe <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80050ec:	6a3b      	ldr	r3, [r7, #32]
 80050ee:	2220      	movs	r2, #32
 80050f0:	4313      	orrs	r3, r2
 80050f2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80050f4:	2327      	movs	r3, #39	; 0x27
 80050f6:	18fb      	adds	r3, r7, r3
 80050f8:	2201      	movs	r2, #1
 80050fa:	701a      	strb	r2, [r3, #0]

              break;
 80050fc:	e00b      	b.n	8005116 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	2220      	movs	r2, #32
 8005106:	4013      	ands	r3, r2
 8005108:	2127      	movs	r1, #39	; 0x27
 800510a:	187a      	adds	r2, r7, r1
 800510c:	1879      	adds	r1, r7, r1
 800510e:	7809      	ldrb	r1, [r1, #0]
 8005110:	7011      	strb	r1, [r2, #0]
 8005112:	2b20      	cmp	r3, #32
 8005114:	d1e3      	bne.n	80050de <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	2220      	movs	r2, #32
 800511e:	4013      	ands	r3, r2
 8005120:	2b20      	cmp	r3, #32
 8005122:	d004      	beq.n	800512e <I2C_IsErrorOccurred+0x112>
 8005124:	2327      	movs	r3, #39	; 0x27
 8005126:	18fb      	adds	r3, r7, r3
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d092      	beq.n	8005054 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800512e:	2327      	movs	r3, #39	; 0x27
 8005130:	18fb      	adds	r3, r7, r3
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d103      	bne.n	8005140 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2220      	movs	r2, #32
 800513e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	2204      	movs	r2, #4
 8005144:	4313      	orrs	r3, r2
 8005146:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005148:	2327      	movs	r3, #39	; 0x27
 800514a:	18fb      	adds	r3, r7, r3
 800514c:	2201      	movs	r2, #1
 800514e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	2380      	movs	r3, #128	; 0x80
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	4013      	ands	r3, r2
 8005160:	d00c      	beq.n	800517c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	2201      	movs	r2, #1
 8005166:	4313      	orrs	r3, r2
 8005168:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2280      	movs	r2, #128	; 0x80
 8005170:	0052      	lsls	r2, r2, #1
 8005172:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005174:	2327      	movs	r3, #39	; 0x27
 8005176:	18fb      	adds	r3, r7, r3
 8005178:	2201      	movs	r2, #1
 800517a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	2380      	movs	r3, #128	; 0x80
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	4013      	ands	r3, r2
 8005184:	d00c      	beq.n	80051a0 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005186:	6a3b      	ldr	r3, [r7, #32]
 8005188:	2208      	movs	r2, #8
 800518a:	4313      	orrs	r3, r2
 800518c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2280      	movs	r2, #128	; 0x80
 8005194:	00d2      	lsls	r2, r2, #3
 8005196:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005198:	2327      	movs	r3, #39	; 0x27
 800519a:	18fb      	adds	r3, r7, r3
 800519c:	2201      	movs	r2, #1
 800519e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	2380      	movs	r3, #128	; 0x80
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4013      	ands	r3, r2
 80051a8:	d00c      	beq.n	80051c4 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	2202      	movs	r2, #2
 80051ae:	4313      	orrs	r3, r2
 80051b0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2280      	movs	r2, #128	; 0x80
 80051b8:	0092      	lsls	r2, r2, #2
 80051ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80051bc:	2327      	movs	r3, #39	; 0x27
 80051be:	18fb      	adds	r3, r7, r3
 80051c0:	2201      	movs	r2, #1
 80051c2:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80051c4:	2327      	movs	r3, #39	; 0x27
 80051c6:	18fb      	adds	r3, r7, r3
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d01d      	beq.n	800520a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	0018      	movs	r0, r3
 80051d2:	f7ff fe29 	bl	8004e28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	490d      	ldr	r1, [pc, #52]	; (8005218 <I2C_IsErrorOccurred+0x1fc>)
 80051e2:	400a      	ands	r2, r1
 80051e4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	431a      	orrs	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2241      	movs	r2, #65	; 0x41
 80051f6:	2120      	movs	r1, #32
 80051f8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2242      	movs	r2, #66	; 0x42
 80051fe:	2100      	movs	r1, #0
 8005200:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2240      	movs	r2, #64	; 0x40
 8005206:	2100      	movs	r1, #0
 8005208:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800520a:	2327      	movs	r3, #39	; 0x27
 800520c:	18fb      	adds	r3, r7, r3
 800520e:	781b      	ldrb	r3, [r3, #0]
}
 8005210:	0018      	movs	r0, r3
 8005212:	46bd      	mov	sp, r7
 8005214:	b00b      	add	sp, #44	; 0x2c
 8005216:	bd90      	pop	{r4, r7, pc}
 8005218:	fe00e800 	.word	0xfe00e800

0800521c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800521c:	b590      	push	{r4, r7, lr}
 800521e:	b087      	sub	sp, #28
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	0008      	movs	r0, r1
 8005226:	0011      	movs	r1, r2
 8005228:	607b      	str	r3, [r7, #4]
 800522a:	240a      	movs	r4, #10
 800522c:	193b      	adds	r3, r7, r4
 800522e:	1c02      	adds	r2, r0, #0
 8005230:	801a      	strh	r2, [r3, #0]
 8005232:	2009      	movs	r0, #9
 8005234:	183b      	adds	r3, r7, r0
 8005236:	1c0a      	adds	r2, r1, #0
 8005238:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800523a:	193b      	adds	r3, r7, r4
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	059b      	lsls	r3, r3, #22
 8005240:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005242:	183b      	adds	r3, r7, r0
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	0419      	lsls	r1, r3, #16
 8005248:	23ff      	movs	r3, #255	; 0xff
 800524a:	041b      	lsls	r3, r3, #16
 800524c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800524e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005256:	4313      	orrs	r3, r2
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	085b      	lsrs	r3, r3, #1
 800525c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005266:	0d51      	lsrs	r1, r2, #21
 8005268:	2280      	movs	r2, #128	; 0x80
 800526a:	00d2      	lsls	r2, r2, #3
 800526c:	400a      	ands	r2, r1
 800526e:	4907      	ldr	r1, [pc, #28]	; (800528c <I2C_TransferConfig+0x70>)
 8005270:	430a      	orrs	r2, r1
 8005272:	43d2      	mvns	r2, r2
 8005274:	401a      	ands	r2, r3
 8005276:	0011      	movs	r1, r2
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	430a      	orrs	r2, r1
 8005280:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005282:	46c0      	nop			; (mov r8, r8)
 8005284:	46bd      	mov	sp, r7
 8005286:	b007      	add	sp, #28
 8005288:	bd90      	pop	{r4, r7, pc}
 800528a:	46c0      	nop			; (mov r8, r8)
 800528c:	03ff63ff 	.word	0x03ff63ff

08005290 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2241      	movs	r2, #65	; 0x41
 800529e:	5c9b      	ldrb	r3, [r3, r2]
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b20      	cmp	r3, #32
 80052a4:	d138      	bne.n	8005318 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2240      	movs	r2, #64	; 0x40
 80052aa:	5c9b      	ldrb	r3, [r3, r2]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d101      	bne.n	80052b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80052b0:	2302      	movs	r3, #2
 80052b2:	e032      	b.n	800531a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2240      	movs	r2, #64	; 0x40
 80052b8:	2101      	movs	r1, #1
 80052ba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2241      	movs	r2, #65	; 0x41
 80052c0:	2124      	movs	r1, #36	; 0x24
 80052c2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2101      	movs	r1, #1
 80052d0:	438a      	bics	r2, r1
 80052d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4911      	ldr	r1, [pc, #68]	; (8005324 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80052e0:	400a      	ands	r2, r1
 80052e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6819      	ldr	r1, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2101      	movs	r1, #1
 8005300:	430a      	orrs	r2, r1
 8005302:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2241      	movs	r2, #65	; 0x41
 8005308:	2120      	movs	r1, #32
 800530a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2240      	movs	r2, #64	; 0x40
 8005310:	2100      	movs	r1, #0
 8005312:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005314:	2300      	movs	r3, #0
 8005316:	e000      	b.n	800531a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005318:	2302      	movs	r3, #2
  }
}
 800531a:	0018      	movs	r0, r3
 800531c:	46bd      	mov	sp, r7
 800531e:	b002      	add	sp, #8
 8005320:	bd80      	pop	{r7, pc}
 8005322:	46c0      	nop			; (mov r8, r8)
 8005324:	ffffefff 	.word	0xffffefff

08005328 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2241      	movs	r2, #65	; 0x41
 8005336:	5c9b      	ldrb	r3, [r3, r2]
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b20      	cmp	r3, #32
 800533c:	d139      	bne.n	80053b2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2240      	movs	r2, #64	; 0x40
 8005342:	5c9b      	ldrb	r3, [r3, r2]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d101      	bne.n	800534c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005348:	2302      	movs	r3, #2
 800534a:	e033      	b.n	80053b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2240      	movs	r2, #64	; 0x40
 8005350:	2101      	movs	r1, #1
 8005352:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2241      	movs	r2, #65	; 0x41
 8005358:	2124      	movs	r1, #36	; 0x24
 800535a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2101      	movs	r1, #1
 8005368:	438a      	bics	r2, r1
 800536a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4a11      	ldr	r2, [pc, #68]	; (80053bc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005378:	4013      	ands	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	021b      	lsls	r3, r3, #8
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2101      	movs	r1, #1
 800539a:	430a      	orrs	r2, r1
 800539c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2241      	movs	r2, #65	; 0x41
 80053a2:	2120      	movs	r1, #32
 80053a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2240      	movs	r2, #64	; 0x40
 80053aa:	2100      	movs	r1, #0
 80053ac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80053ae:	2300      	movs	r3, #0
 80053b0:	e000      	b.n	80053b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80053b2:	2302      	movs	r3, #2
  }
}
 80053b4:	0018      	movs	r0, r3
 80053b6:	46bd      	mov	sp, r7
 80053b8:	b004      	add	sp, #16
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	fffff0ff 	.word	0xfffff0ff

080053c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053c0:	b5b0      	push	{r4, r5, r7, lr}
 80053c2:	b08a      	sub	sp, #40	; 0x28
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d102      	bne.n	80053d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	f000 fbaf 	bl	8005b32 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053d4:	4bcf      	ldr	r3, [pc, #828]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	220c      	movs	r2, #12
 80053da:	4013      	ands	r3, r2
 80053dc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053de:	4bcd      	ldr	r3, [pc, #820]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 80053e0:	68da      	ldr	r2, [r3, #12]
 80053e2:	2380      	movs	r3, #128	; 0x80
 80053e4:	025b      	lsls	r3, r3, #9
 80053e6:	4013      	ands	r3, r2
 80053e8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2201      	movs	r2, #1
 80053f0:	4013      	ands	r3, r2
 80053f2:	d100      	bne.n	80053f6 <HAL_RCC_OscConfig+0x36>
 80053f4:	e07e      	b.n	80054f4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80053f6:	6a3b      	ldr	r3, [r7, #32]
 80053f8:	2b08      	cmp	r3, #8
 80053fa:	d007      	beq.n	800540c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80053fc:	6a3b      	ldr	r3, [r7, #32]
 80053fe:	2b0c      	cmp	r3, #12
 8005400:	d112      	bne.n	8005428 <HAL_RCC_OscConfig+0x68>
 8005402:	69fa      	ldr	r2, [r7, #28]
 8005404:	2380      	movs	r3, #128	; 0x80
 8005406:	025b      	lsls	r3, r3, #9
 8005408:	429a      	cmp	r2, r3
 800540a:	d10d      	bne.n	8005428 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800540c:	4bc1      	ldr	r3, [pc, #772]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	2380      	movs	r3, #128	; 0x80
 8005412:	029b      	lsls	r3, r3, #10
 8005414:	4013      	ands	r3, r2
 8005416:	d100      	bne.n	800541a <HAL_RCC_OscConfig+0x5a>
 8005418:	e06b      	b.n	80054f2 <HAL_RCC_OscConfig+0x132>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d167      	bne.n	80054f2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	f000 fb85 	bl	8005b32 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	2380      	movs	r3, #128	; 0x80
 800542e:	025b      	lsls	r3, r3, #9
 8005430:	429a      	cmp	r2, r3
 8005432:	d107      	bne.n	8005444 <HAL_RCC_OscConfig+0x84>
 8005434:	4bb7      	ldr	r3, [pc, #732]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	4bb6      	ldr	r3, [pc, #728]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 800543a:	2180      	movs	r1, #128	; 0x80
 800543c:	0249      	lsls	r1, r1, #9
 800543e:	430a      	orrs	r2, r1
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	e027      	b.n	8005494 <HAL_RCC_OscConfig+0xd4>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	23a0      	movs	r3, #160	; 0xa0
 800544a:	02db      	lsls	r3, r3, #11
 800544c:	429a      	cmp	r2, r3
 800544e:	d10e      	bne.n	800546e <HAL_RCC_OscConfig+0xae>
 8005450:	4bb0      	ldr	r3, [pc, #704]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	4baf      	ldr	r3, [pc, #700]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 8005456:	2180      	movs	r1, #128	; 0x80
 8005458:	02c9      	lsls	r1, r1, #11
 800545a:	430a      	orrs	r2, r1
 800545c:	601a      	str	r2, [r3, #0]
 800545e:	4bad      	ldr	r3, [pc, #692]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	4bac      	ldr	r3, [pc, #688]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 8005464:	2180      	movs	r1, #128	; 0x80
 8005466:	0249      	lsls	r1, r1, #9
 8005468:	430a      	orrs	r2, r1
 800546a:	601a      	str	r2, [r3, #0]
 800546c:	e012      	b.n	8005494 <HAL_RCC_OscConfig+0xd4>
 800546e:	4ba9      	ldr	r3, [pc, #676]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	4ba8      	ldr	r3, [pc, #672]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 8005474:	49a8      	ldr	r1, [pc, #672]	; (8005718 <HAL_RCC_OscConfig+0x358>)
 8005476:	400a      	ands	r2, r1
 8005478:	601a      	str	r2, [r3, #0]
 800547a:	4ba6      	ldr	r3, [pc, #664]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	2380      	movs	r3, #128	; 0x80
 8005480:	025b      	lsls	r3, r3, #9
 8005482:	4013      	ands	r3, r2
 8005484:	60fb      	str	r3, [r7, #12]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4ba2      	ldr	r3, [pc, #648]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	4ba1      	ldr	r3, [pc, #644]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 800548e:	49a3      	ldr	r1, [pc, #652]	; (800571c <HAL_RCC_OscConfig+0x35c>)
 8005490:	400a      	ands	r2, r1
 8005492:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d015      	beq.n	80054c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800549c:	f7fe fd94 	bl	8003fc8 <HAL_GetTick>
 80054a0:	0003      	movs	r3, r0
 80054a2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054a4:	e009      	b.n	80054ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054a6:	f7fe fd8f 	bl	8003fc8 <HAL_GetTick>
 80054aa:	0002      	movs	r2, r0
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b64      	cmp	r3, #100	; 0x64
 80054b2:	d902      	bls.n	80054ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	f000 fb3c 	bl	8005b32 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054ba:	4b96      	ldr	r3, [pc, #600]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	2380      	movs	r3, #128	; 0x80
 80054c0:	029b      	lsls	r3, r3, #10
 80054c2:	4013      	ands	r3, r2
 80054c4:	d0ef      	beq.n	80054a6 <HAL_RCC_OscConfig+0xe6>
 80054c6:	e015      	b.n	80054f4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c8:	f7fe fd7e 	bl	8003fc8 <HAL_GetTick>
 80054cc:	0003      	movs	r3, r0
 80054ce:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80054d0:	e008      	b.n	80054e4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054d2:	f7fe fd79 	bl	8003fc8 <HAL_GetTick>
 80054d6:	0002      	movs	r2, r0
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	2b64      	cmp	r3, #100	; 0x64
 80054de:	d901      	bls.n	80054e4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e326      	b.n	8005b32 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80054e4:	4b8b      	ldr	r3, [pc, #556]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	2380      	movs	r3, #128	; 0x80
 80054ea:	029b      	lsls	r3, r3, #10
 80054ec:	4013      	ands	r3, r2
 80054ee:	d1f0      	bne.n	80054d2 <HAL_RCC_OscConfig+0x112>
 80054f0:	e000      	b.n	80054f4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054f2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2202      	movs	r2, #2
 80054fa:	4013      	ands	r3, r2
 80054fc:	d100      	bne.n	8005500 <HAL_RCC_OscConfig+0x140>
 80054fe:	e08b      	b.n	8005618 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005506:	6a3b      	ldr	r3, [r7, #32]
 8005508:	2b04      	cmp	r3, #4
 800550a:	d005      	beq.n	8005518 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	2b0c      	cmp	r3, #12
 8005510:	d13e      	bne.n	8005590 <HAL_RCC_OscConfig+0x1d0>
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d13b      	bne.n	8005590 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005518:	4b7e      	ldr	r3, [pc, #504]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2204      	movs	r2, #4
 800551e:	4013      	ands	r3, r2
 8005520:	d004      	beq.n	800552c <HAL_RCC_OscConfig+0x16c>
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d101      	bne.n	800552c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e302      	b.n	8005b32 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800552c:	4b79      	ldr	r3, [pc, #484]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	4a7b      	ldr	r2, [pc, #492]	; (8005720 <HAL_RCC_OscConfig+0x360>)
 8005532:	4013      	ands	r3, r2
 8005534:	0019      	movs	r1, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	021a      	lsls	r2, r3, #8
 800553c:	4b75      	ldr	r3, [pc, #468]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 800553e:	430a      	orrs	r2, r1
 8005540:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005542:	4b74      	ldr	r3, [pc, #464]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2209      	movs	r2, #9
 8005548:	4393      	bics	r3, r2
 800554a:	0019      	movs	r1, r3
 800554c:	4b71      	ldr	r3, [pc, #452]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	430a      	orrs	r2, r1
 8005552:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005554:	f000 fc40 	bl	8005dd8 <HAL_RCC_GetSysClockFreq>
 8005558:	0001      	movs	r1, r0
 800555a:	4b6e      	ldr	r3, [pc, #440]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	091b      	lsrs	r3, r3, #4
 8005560:	220f      	movs	r2, #15
 8005562:	4013      	ands	r3, r2
 8005564:	4a6f      	ldr	r2, [pc, #444]	; (8005724 <HAL_RCC_OscConfig+0x364>)
 8005566:	5cd3      	ldrb	r3, [r2, r3]
 8005568:	000a      	movs	r2, r1
 800556a:	40da      	lsrs	r2, r3
 800556c:	4b6e      	ldr	r3, [pc, #440]	; (8005728 <HAL_RCC_OscConfig+0x368>)
 800556e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005570:	4b6e      	ldr	r3, [pc, #440]	; (800572c <HAL_RCC_OscConfig+0x36c>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2513      	movs	r5, #19
 8005576:	197c      	adds	r4, r7, r5
 8005578:	0018      	movs	r0, r3
 800557a:	f7fe fcdf 	bl	8003f3c <HAL_InitTick>
 800557e:	0003      	movs	r3, r0
 8005580:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005582:	197b      	adds	r3, r7, r5
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d046      	beq.n	8005618 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800558a:	197b      	adds	r3, r7, r5
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	e2d0      	b.n	8005b32 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d027      	beq.n	80055e6 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005596:	4b5f      	ldr	r3, [pc, #380]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2209      	movs	r2, #9
 800559c:	4393      	bics	r3, r2
 800559e:	0019      	movs	r1, r3
 80055a0:	4b5c      	ldr	r3, [pc, #368]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	430a      	orrs	r2, r1
 80055a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a8:	f7fe fd0e 	bl	8003fc8 <HAL_GetTick>
 80055ac:	0003      	movs	r3, r0
 80055ae:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055b0:	e008      	b.n	80055c4 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055b2:	f7fe fd09 	bl	8003fc8 <HAL_GetTick>
 80055b6:	0002      	movs	r2, r0
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d901      	bls.n	80055c4 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e2b6      	b.n	8005b32 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055c4:	4b53      	ldr	r3, [pc, #332]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2204      	movs	r2, #4
 80055ca:	4013      	ands	r3, r2
 80055cc:	d0f1      	beq.n	80055b2 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055ce:	4b51      	ldr	r3, [pc, #324]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	4a53      	ldr	r2, [pc, #332]	; (8005720 <HAL_RCC_OscConfig+0x360>)
 80055d4:	4013      	ands	r3, r2
 80055d6:	0019      	movs	r1, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	021a      	lsls	r2, r3, #8
 80055de:	4b4d      	ldr	r3, [pc, #308]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 80055e0:	430a      	orrs	r2, r1
 80055e2:	605a      	str	r2, [r3, #4]
 80055e4:	e018      	b.n	8005618 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055e6:	4b4b      	ldr	r3, [pc, #300]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	4b4a      	ldr	r3, [pc, #296]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 80055ec:	2101      	movs	r1, #1
 80055ee:	438a      	bics	r2, r1
 80055f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f2:	f7fe fce9 	bl	8003fc8 <HAL_GetTick>
 80055f6:	0003      	movs	r3, r0
 80055f8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055fc:	f7fe fce4 	bl	8003fc8 <HAL_GetTick>
 8005600:	0002      	movs	r2, r0
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e291      	b.n	8005b32 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800560e:	4b41      	ldr	r3, [pc, #260]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2204      	movs	r2, #4
 8005614:	4013      	ands	r3, r2
 8005616:	d1f1      	bne.n	80055fc <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2210      	movs	r2, #16
 800561e:	4013      	ands	r3, r2
 8005620:	d100      	bne.n	8005624 <HAL_RCC_OscConfig+0x264>
 8005622:	e0a1      	b.n	8005768 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d140      	bne.n	80056ac <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800562a:	4b3a      	ldr	r3, [pc, #232]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	2380      	movs	r3, #128	; 0x80
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4013      	ands	r3, r2
 8005634:	d005      	beq.n	8005642 <HAL_RCC_OscConfig+0x282>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e277      	b.n	8005b32 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005642:	4b34      	ldr	r3, [pc, #208]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	4a3a      	ldr	r2, [pc, #232]	; (8005730 <HAL_RCC_OscConfig+0x370>)
 8005648:	4013      	ands	r3, r2
 800564a:	0019      	movs	r1, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005650:	4b30      	ldr	r3, [pc, #192]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 8005652:	430a      	orrs	r2, r1
 8005654:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005656:	4b2f      	ldr	r3, [pc, #188]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	021b      	lsls	r3, r3, #8
 800565c:	0a19      	lsrs	r1, r3, #8
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	061a      	lsls	r2, r3, #24
 8005664:	4b2b      	ldr	r3, [pc, #172]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 8005666:	430a      	orrs	r2, r1
 8005668:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566e:	0b5b      	lsrs	r3, r3, #13
 8005670:	3301      	adds	r3, #1
 8005672:	2280      	movs	r2, #128	; 0x80
 8005674:	0212      	lsls	r2, r2, #8
 8005676:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005678:	4b26      	ldr	r3, [pc, #152]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	091b      	lsrs	r3, r3, #4
 800567e:	210f      	movs	r1, #15
 8005680:	400b      	ands	r3, r1
 8005682:	4928      	ldr	r1, [pc, #160]	; (8005724 <HAL_RCC_OscConfig+0x364>)
 8005684:	5ccb      	ldrb	r3, [r1, r3]
 8005686:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005688:	4b27      	ldr	r3, [pc, #156]	; (8005728 <HAL_RCC_OscConfig+0x368>)
 800568a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800568c:	4b27      	ldr	r3, [pc, #156]	; (800572c <HAL_RCC_OscConfig+0x36c>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2513      	movs	r5, #19
 8005692:	197c      	adds	r4, r7, r5
 8005694:	0018      	movs	r0, r3
 8005696:	f7fe fc51 	bl	8003f3c <HAL_InitTick>
 800569a:	0003      	movs	r3, r0
 800569c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800569e:	197b      	adds	r3, r7, r5
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d060      	beq.n	8005768 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80056a6:	197b      	adds	r3, r7, r5
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	e242      	b.n	8005b32 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d03f      	beq.n	8005734 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80056b4:	4b17      	ldr	r3, [pc, #92]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	4b16      	ldr	r3, [pc, #88]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 80056ba:	2180      	movs	r1, #128	; 0x80
 80056bc:	0049      	lsls	r1, r1, #1
 80056be:	430a      	orrs	r2, r1
 80056c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056c2:	f7fe fc81 	bl	8003fc8 <HAL_GetTick>
 80056c6:	0003      	movs	r3, r0
 80056c8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80056ca:	e008      	b.n	80056de <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80056cc:	f7fe fc7c 	bl	8003fc8 <HAL_GetTick>
 80056d0:	0002      	movs	r2, r0
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e229      	b.n	8005b32 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80056de:	4b0d      	ldr	r3, [pc, #52]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	2380      	movs	r3, #128	; 0x80
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4013      	ands	r3, r2
 80056e8:	d0f0      	beq.n	80056cc <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056ea:	4b0a      	ldr	r3, [pc, #40]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	4a10      	ldr	r2, [pc, #64]	; (8005730 <HAL_RCC_OscConfig+0x370>)
 80056f0:	4013      	ands	r3, r2
 80056f2:	0019      	movs	r1, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056f8:	4b06      	ldr	r3, [pc, #24]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 80056fa:	430a      	orrs	r2, r1
 80056fc:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056fe:	4b05      	ldr	r3, [pc, #20]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	021b      	lsls	r3, r3, #8
 8005704:	0a19      	lsrs	r1, r3, #8
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	061a      	lsls	r2, r3, #24
 800570c:	4b01      	ldr	r3, [pc, #4]	; (8005714 <HAL_RCC_OscConfig+0x354>)
 800570e:	430a      	orrs	r2, r1
 8005710:	605a      	str	r2, [r3, #4]
 8005712:	e029      	b.n	8005768 <HAL_RCC_OscConfig+0x3a8>
 8005714:	40021000 	.word	0x40021000
 8005718:	fffeffff 	.word	0xfffeffff
 800571c:	fffbffff 	.word	0xfffbffff
 8005720:	ffffe0ff 	.word	0xffffe0ff
 8005724:	0800a164 	.word	0x0800a164
 8005728:	20000020 	.word	0x20000020
 800572c:	20000024 	.word	0x20000024
 8005730:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005734:	4bbd      	ldr	r3, [pc, #756]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	4bbc      	ldr	r3, [pc, #752]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 800573a:	49bd      	ldr	r1, [pc, #756]	; (8005a30 <HAL_RCC_OscConfig+0x670>)
 800573c:	400a      	ands	r2, r1
 800573e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005740:	f7fe fc42 	bl	8003fc8 <HAL_GetTick>
 8005744:	0003      	movs	r3, r0
 8005746:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005748:	e008      	b.n	800575c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800574a:	f7fe fc3d 	bl	8003fc8 <HAL_GetTick>
 800574e:	0002      	movs	r2, r0
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	2b02      	cmp	r3, #2
 8005756:	d901      	bls.n	800575c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e1ea      	b.n	8005b32 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800575c:	4bb3      	ldr	r3, [pc, #716]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	2380      	movs	r3, #128	; 0x80
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4013      	ands	r3, r2
 8005766:	d1f0      	bne.n	800574a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2208      	movs	r2, #8
 800576e:	4013      	ands	r3, r2
 8005770:	d036      	beq.n	80057e0 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d019      	beq.n	80057ae <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800577a:	4bac      	ldr	r3, [pc, #688]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 800577c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800577e:	4bab      	ldr	r3, [pc, #684]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 8005780:	2101      	movs	r1, #1
 8005782:	430a      	orrs	r2, r1
 8005784:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005786:	f7fe fc1f 	bl	8003fc8 <HAL_GetTick>
 800578a:	0003      	movs	r3, r0
 800578c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800578e:	e008      	b.n	80057a2 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005790:	f7fe fc1a 	bl	8003fc8 <HAL_GetTick>
 8005794:	0002      	movs	r2, r0
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	2b02      	cmp	r3, #2
 800579c:	d901      	bls.n	80057a2 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e1c7      	b.n	8005b32 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80057a2:	4ba2      	ldr	r3, [pc, #648]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 80057a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057a6:	2202      	movs	r2, #2
 80057a8:	4013      	ands	r3, r2
 80057aa:	d0f1      	beq.n	8005790 <HAL_RCC_OscConfig+0x3d0>
 80057ac:	e018      	b.n	80057e0 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057ae:	4b9f      	ldr	r3, [pc, #636]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 80057b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057b2:	4b9e      	ldr	r3, [pc, #632]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 80057b4:	2101      	movs	r1, #1
 80057b6:	438a      	bics	r2, r1
 80057b8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057ba:	f7fe fc05 	bl	8003fc8 <HAL_GetTick>
 80057be:	0003      	movs	r3, r0
 80057c0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80057c2:	e008      	b.n	80057d6 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057c4:	f7fe fc00 	bl	8003fc8 <HAL_GetTick>
 80057c8:	0002      	movs	r2, r0
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e1ad      	b.n	8005b32 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80057d6:	4b95      	ldr	r3, [pc, #596]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 80057d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057da:	2202      	movs	r2, #2
 80057dc:	4013      	ands	r3, r2
 80057de:	d1f1      	bne.n	80057c4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2204      	movs	r2, #4
 80057e6:	4013      	ands	r3, r2
 80057e8:	d100      	bne.n	80057ec <HAL_RCC_OscConfig+0x42c>
 80057ea:	e0ae      	b.n	800594a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057ec:	2027      	movs	r0, #39	; 0x27
 80057ee:	183b      	adds	r3, r7, r0
 80057f0:	2200      	movs	r2, #0
 80057f2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057f4:	4b8d      	ldr	r3, [pc, #564]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 80057f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057f8:	2380      	movs	r3, #128	; 0x80
 80057fa:	055b      	lsls	r3, r3, #21
 80057fc:	4013      	ands	r3, r2
 80057fe:	d109      	bne.n	8005814 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005800:	4b8a      	ldr	r3, [pc, #552]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 8005802:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005804:	4b89      	ldr	r3, [pc, #548]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 8005806:	2180      	movs	r1, #128	; 0x80
 8005808:	0549      	lsls	r1, r1, #21
 800580a:	430a      	orrs	r2, r1
 800580c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800580e:	183b      	adds	r3, r7, r0
 8005810:	2201      	movs	r2, #1
 8005812:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005814:	4b87      	ldr	r3, [pc, #540]	; (8005a34 <HAL_RCC_OscConfig+0x674>)
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	2380      	movs	r3, #128	; 0x80
 800581a:	005b      	lsls	r3, r3, #1
 800581c:	4013      	ands	r3, r2
 800581e:	d11a      	bne.n	8005856 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005820:	4b84      	ldr	r3, [pc, #528]	; (8005a34 <HAL_RCC_OscConfig+0x674>)
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	4b83      	ldr	r3, [pc, #524]	; (8005a34 <HAL_RCC_OscConfig+0x674>)
 8005826:	2180      	movs	r1, #128	; 0x80
 8005828:	0049      	lsls	r1, r1, #1
 800582a:	430a      	orrs	r2, r1
 800582c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800582e:	f7fe fbcb 	bl	8003fc8 <HAL_GetTick>
 8005832:	0003      	movs	r3, r0
 8005834:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005836:	e008      	b.n	800584a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005838:	f7fe fbc6 	bl	8003fc8 <HAL_GetTick>
 800583c:	0002      	movs	r2, r0
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b64      	cmp	r3, #100	; 0x64
 8005844:	d901      	bls.n	800584a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e173      	b.n	8005b32 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800584a:	4b7a      	ldr	r3, [pc, #488]	; (8005a34 <HAL_RCC_OscConfig+0x674>)
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	2380      	movs	r3, #128	; 0x80
 8005850:	005b      	lsls	r3, r3, #1
 8005852:	4013      	ands	r3, r2
 8005854:	d0f0      	beq.n	8005838 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	689a      	ldr	r2, [r3, #8]
 800585a:	2380      	movs	r3, #128	; 0x80
 800585c:	005b      	lsls	r3, r3, #1
 800585e:	429a      	cmp	r2, r3
 8005860:	d107      	bne.n	8005872 <HAL_RCC_OscConfig+0x4b2>
 8005862:	4b72      	ldr	r3, [pc, #456]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 8005864:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005866:	4b71      	ldr	r3, [pc, #452]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 8005868:	2180      	movs	r1, #128	; 0x80
 800586a:	0049      	lsls	r1, r1, #1
 800586c:	430a      	orrs	r2, r1
 800586e:	651a      	str	r2, [r3, #80]	; 0x50
 8005870:	e031      	b.n	80058d6 <HAL_RCC_OscConfig+0x516>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10c      	bne.n	8005894 <HAL_RCC_OscConfig+0x4d4>
 800587a:	4b6c      	ldr	r3, [pc, #432]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 800587c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800587e:	4b6b      	ldr	r3, [pc, #428]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 8005880:	496b      	ldr	r1, [pc, #428]	; (8005a30 <HAL_RCC_OscConfig+0x670>)
 8005882:	400a      	ands	r2, r1
 8005884:	651a      	str	r2, [r3, #80]	; 0x50
 8005886:	4b69      	ldr	r3, [pc, #420]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 8005888:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800588a:	4b68      	ldr	r3, [pc, #416]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 800588c:	496a      	ldr	r1, [pc, #424]	; (8005a38 <HAL_RCC_OscConfig+0x678>)
 800588e:	400a      	ands	r2, r1
 8005890:	651a      	str	r2, [r3, #80]	; 0x50
 8005892:	e020      	b.n	80058d6 <HAL_RCC_OscConfig+0x516>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689a      	ldr	r2, [r3, #8]
 8005898:	23a0      	movs	r3, #160	; 0xa0
 800589a:	00db      	lsls	r3, r3, #3
 800589c:	429a      	cmp	r2, r3
 800589e:	d10e      	bne.n	80058be <HAL_RCC_OscConfig+0x4fe>
 80058a0:	4b62      	ldr	r3, [pc, #392]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 80058a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058a4:	4b61      	ldr	r3, [pc, #388]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 80058a6:	2180      	movs	r1, #128	; 0x80
 80058a8:	00c9      	lsls	r1, r1, #3
 80058aa:	430a      	orrs	r2, r1
 80058ac:	651a      	str	r2, [r3, #80]	; 0x50
 80058ae:	4b5f      	ldr	r3, [pc, #380]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 80058b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058b2:	4b5e      	ldr	r3, [pc, #376]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 80058b4:	2180      	movs	r1, #128	; 0x80
 80058b6:	0049      	lsls	r1, r1, #1
 80058b8:	430a      	orrs	r2, r1
 80058ba:	651a      	str	r2, [r3, #80]	; 0x50
 80058bc:	e00b      	b.n	80058d6 <HAL_RCC_OscConfig+0x516>
 80058be:	4b5b      	ldr	r3, [pc, #364]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 80058c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058c2:	4b5a      	ldr	r3, [pc, #360]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 80058c4:	495a      	ldr	r1, [pc, #360]	; (8005a30 <HAL_RCC_OscConfig+0x670>)
 80058c6:	400a      	ands	r2, r1
 80058c8:	651a      	str	r2, [r3, #80]	; 0x50
 80058ca:	4b58      	ldr	r3, [pc, #352]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 80058cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058ce:	4b57      	ldr	r3, [pc, #348]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 80058d0:	4959      	ldr	r1, [pc, #356]	; (8005a38 <HAL_RCC_OscConfig+0x678>)
 80058d2:	400a      	ands	r2, r1
 80058d4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d015      	beq.n	800590a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058de:	f7fe fb73 	bl	8003fc8 <HAL_GetTick>
 80058e2:	0003      	movs	r3, r0
 80058e4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058e6:	e009      	b.n	80058fc <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058e8:	f7fe fb6e 	bl	8003fc8 <HAL_GetTick>
 80058ec:	0002      	movs	r2, r0
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	4a52      	ldr	r2, [pc, #328]	; (8005a3c <HAL_RCC_OscConfig+0x67c>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d901      	bls.n	80058fc <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e11a      	b.n	8005b32 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058fc:	4b4b      	ldr	r3, [pc, #300]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 80058fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005900:	2380      	movs	r3, #128	; 0x80
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4013      	ands	r3, r2
 8005906:	d0ef      	beq.n	80058e8 <HAL_RCC_OscConfig+0x528>
 8005908:	e014      	b.n	8005934 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800590a:	f7fe fb5d 	bl	8003fc8 <HAL_GetTick>
 800590e:	0003      	movs	r3, r0
 8005910:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005912:	e009      	b.n	8005928 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005914:	f7fe fb58 	bl	8003fc8 <HAL_GetTick>
 8005918:	0002      	movs	r2, r0
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	4a47      	ldr	r2, [pc, #284]	; (8005a3c <HAL_RCC_OscConfig+0x67c>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d901      	bls.n	8005928 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e104      	b.n	8005b32 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005928:	4b40      	ldr	r3, [pc, #256]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 800592a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800592c:	2380      	movs	r3, #128	; 0x80
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4013      	ands	r3, r2
 8005932:	d1ef      	bne.n	8005914 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005934:	2327      	movs	r3, #39	; 0x27
 8005936:	18fb      	adds	r3, r7, r3
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d105      	bne.n	800594a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800593e:	4b3b      	ldr	r3, [pc, #236]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 8005940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005942:	4b3a      	ldr	r3, [pc, #232]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 8005944:	493e      	ldr	r1, [pc, #248]	; (8005a40 <HAL_RCC_OscConfig+0x680>)
 8005946:	400a      	ands	r2, r1
 8005948:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2220      	movs	r2, #32
 8005950:	4013      	ands	r3, r2
 8005952:	d049      	beq.n	80059e8 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d026      	beq.n	80059aa <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800595c:	4b33      	ldr	r3, [pc, #204]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 800595e:	689a      	ldr	r2, [r3, #8]
 8005960:	4b32      	ldr	r3, [pc, #200]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 8005962:	2101      	movs	r1, #1
 8005964:	430a      	orrs	r2, r1
 8005966:	609a      	str	r2, [r3, #8]
 8005968:	4b30      	ldr	r3, [pc, #192]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 800596a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800596c:	4b2f      	ldr	r3, [pc, #188]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 800596e:	2101      	movs	r1, #1
 8005970:	430a      	orrs	r2, r1
 8005972:	635a      	str	r2, [r3, #52]	; 0x34
 8005974:	4b33      	ldr	r3, [pc, #204]	; (8005a44 <HAL_RCC_OscConfig+0x684>)
 8005976:	6a1a      	ldr	r2, [r3, #32]
 8005978:	4b32      	ldr	r3, [pc, #200]	; (8005a44 <HAL_RCC_OscConfig+0x684>)
 800597a:	2180      	movs	r1, #128	; 0x80
 800597c:	0189      	lsls	r1, r1, #6
 800597e:	430a      	orrs	r2, r1
 8005980:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005982:	f7fe fb21 	bl	8003fc8 <HAL_GetTick>
 8005986:	0003      	movs	r3, r0
 8005988:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800598a:	e008      	b.n	800599e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800598c:	f7fe fb1c 	bl	8003fc8 <HAL_GetTick>
 8005990:	0002      	movs	r2, r0
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b02      	cmp	r3, #2
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e0c9      	b.n	8005b32 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800599e:	4b23      	ldr	r3, [pc, #140]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	2202      	movs	r2, #2
 80059a4:	4013      	ands	r3, r2
 80059a6:	d0f1      	beq.n	800598c <HAL_RCC_OscConfig+0x5cc>
 80059a8:	e01e      	b.n	80059e8 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80059aa:	4b20      	ldr	r3, [pc, #128]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 80059ac:	689a      	ldr	r2, [r3, #8]
 80059ae:	4b1f      	ldr	r3, [pc, #124]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 80059b0:	2101      	movs	r1, #1
 80059b2:	438a      	bics	r2, r1
 80059b4:	609a      	str	r2, [r3, #8]
 80059b6:	4b23      	ldr	r3, [pc, #140]	; (8005a44 <HAL_RCC_OscConfig+0x684>)
 80059b8:	6a1a      	ldr	r2, [r3, #32]
 80059ba:	4b22      	ldr	r3, [pc, #136]	; (8005a44 <HAL_RCC_OscConfig+0x684>)
 80059bc:	4922      	ldr	r1, [pc, #136]	; (8005a48 <HAL_RCC_OscConfig+0x688>)
 80059be:	400a      	ands	r2, r1
 80059c0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c2:	f7fe fb01 	bl	8003fc8 <HAL_GetTick>
 80059c6:	0003      	movs	r3, r0
 80059c8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80059ca:	e008      	b.n	80059de <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059cc:	f7fe fafc 	bl	8003fc8 <HAL_GetTick>
 80059d0:	0002      	movs	r2, r0
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d901      	bls.n	80059de <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e0a9      	b.n	8005b32 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80059de:	4b13      	ldr	r3, [pc, #76]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	2202      	movs	r2, #2
 80059e4:	4013      	ands	r3, r2
 80059e6:	d1f1      	bne.n	80059cc <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d100      	bne.n	80059f2 <HAL_RCC_OscConfig+0x632>
 80059f0:	e09e      	b.n	8005b30 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059f2:	6a3b      	ldr	r3, [r7, #32]
 80059f4:	2b0c      	cmp	r3, #12
 80059f6:	d100      	bne.n	80059fa <HAL_RCC_OscConfig+0x63a>
 80059f8:	e077      	b.n	8005aea <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d158      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a02:	4b0a      	ldr	r3, [pc, #40]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	4b09      	ldr	r3, [pc, #36]	; (8005a2c <HAL_RCC_OscConfig+0x66c>)
 8005a08:	4910      	ldr	r1, [pc, #64]	; (8005a4c <HAL_RCC_OscConfig+0x68c>)
 8005a0a:	400a      	ands	r2, r1
 8005a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a0e:	f7fe fadb 	bl	8003fc8 <HAL_GetTick>
 8005a12:	0003      	movs	r3, r0
 8005a14:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005a16:	e01b      	b.n	8005a50 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a18:	f7fe fad6 	bl	8003fc8 <HAL_GetTick>
 8005a1c:	0002      	movs	r2, r0
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d914      	bls.n	8005a50 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e083      	b.n	8005b32 <HAL_RCC_OscConfig+0x772>
 8005a2a:	46c0      	nop			; (mov r8, r8)
 8005a2c:	40021000 	.word	0x40021000
 8005a30:	fffffeff 	.word	0xfffffeff
 8005a34:	40007000 	.word	0x40007000
 8005a38:	fffffbff 	.word	0xfffffbff
 8005a3c:	00001388 	.word	0x00001388
 8005a40:	efffffff 	.word	0xefffffff
 8005a44:	40010000 	.word	0x40010000
 8005a48:	ffffdfff 	.word	0xffffdfff
 8005a4c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005a50:	4b3a      	ldr	r3, [pc, #232]	; (8005b3c <HAL_RCC_OscConfig+0x77c>)
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	2380      	movs	r3, #128	; 0x80
 8005a56:	049b      	lsls	r3, r3, #18
 8005a58:	4013      	ands	r3, r2
 8005a5a:	d1dd      	bne.n	8005a18 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a5c:	4b37      	ldr	r3, [pc, #220]	; (8005b3c <HAL_RCC_OscConfig+0x77c>)
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	4a37      	ldr	r2, [pc, #220]	; (8005b40 <HAL_RCC_OscConfig+0x780>)
 8005a62:	4013      	ands	r3, r2
 8005a64:	0019      	movs	r1, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6e:	431a      	orrs	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a74:	431a      	orrs	r2, r3
 8005a76:	4b31      	ldr	r3, [pc, #196]	; (8005b3c <HAL_RCC_OscConfig+0x77c>)
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a7c:	4b2f      	ldr	r3, [pc, #188]	; (8005b3c <HAL_RCC_OscConfig+0x77c>)
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	4b2e      	ldr	r3, [pc, #184]	; (8005b3c <HAL_RCC_OscConfig+0x77c>)
 8005a82:	2180      	movs	r1, #128	; 0x80
 8005a84:	0449      	lsls	r1, r1, #17
 8005a86:	430a      	orrs	r2, r1
 8005a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a8a:	f7fe fa9d 	bl	8003fc8 <HAL_GetTick>
 8005a8e:	0003      	movs	r3, r0
 8005a90:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005a92:	e008      	b.n	8005aa6 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a94:	f7fe fa98 	bl	8003fc8 <HAL_GetTick>
 8005a98:	0002      	movs	r2, r0
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d901      	bls.n	8005aa6 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e045      	b.n	8005b32 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005aa6:	4b25      	ldr	r3, [pc, #148]	; (8005b3c <HAL_RCC_OscConfig+0x77c>)
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	2380      	movs	r3, #128	; 0x80
 8005aac:	049b      	lsls	r3, r3, #18
 8005aae:	4013      	ands	r3, r2
 8005ab0:	d0f0      	beq.n	8005a94 <HAL_RCC_OscConfig+0x6d4>
 8005ab2:	e03d      	b.n	8005b30 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ab4:	4b21      	ldr	r3, [pc, #132]	; (8005b3c <HAL_RCC_OscConfig+0x77c>)
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	4b20      	ldr	r3, [pc, #128]	; (8005b3c <HAL_RCC_OscConfig+0x77c>)
 8005aba:	4922      	ldr	r1, [pc, #136]	; (8005b44 <HAL_RCC_OscConfig+0x784>)
 8005abc:	400a      	ands	r2, r1
 8005abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac0:	f7fe fa82 	bl	8003fc8 <HAL_GetTick>
 8005ac4:	0003      	movs	r3, r0
 8005ac6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005ac8:	e008      	b.n	8005adc <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aca:	f7fe fa7d 	bl	8003fc8 <HAL_GetTick>
 8005ace:	0002      	movs	r2, r0
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d901      	bls.n	8005adc <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e02a      	b.n	8005b32 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005adc:	4b17      	ldr	r3, [pc, #92]	; (8005b3c <HAL_RCC_OscConfig+0x77c>)
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	2380      	movs	r3, #128	; 0x80
 8005ae2:	049b      	lsls	r3, r3, #18
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	d1f0      	bne.n	8005aca <HAL_RCC_OscConfig+0x70a>
 8005ae8:	e022      	b.n	8005b30 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d101      	bne.n	8005af6 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e01d      	b.n	8005b32 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005af6:	4b11      	ldr	r3, [pc, #68]	; (8005b3c <HAL_RCC_OscConfig+0x77c>)
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005afc:	69fa      	ldr	r2, [r7, #28]
 8005afe:	2380      	movs	r3, #128	; 0x80
 8005b00:	025b      	lsls	r3, r3, #9
 8005b02:	401a      	ands	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d10f      	bne.n	8005b2c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005b0c:	69fa      	ldr	r2, [r7, #28]
 8005b0e:	23f0      	movs	r3, #240	; 0xf0
 8005b10:	039b      	lsls	r3, r3, #14
 8005b12:	401a      	ands	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d107      	bne.n	8005b2c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005b1c:	69fa      	ldr	r2, [r7, #28]
 8005b1e:	23c0      	movs	r3, #192	; 0xc0
 8005b20:	041b      	lsls	r3, r3, #16
 8005b22:	401a      	ands	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d001      	beq.n	8005b30 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e000      	b.n	8005b32 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	0018      	movs	r0, r3
 8005b34:	46bd      	mov	sp, r7
 8005b36:	b00a      	add	sp, #40	; 0x28
 8005b38:	bdb0      	pop	{r4, r5, r7, pc}
 8005b3a:	46c0      	nop			; (mov r8, r8)
 8005b3c:	40021000 	.word	0x40021000
 8005b40:	ff02ffff 	.word	0xff02ffff
 8005b44:	feffffff 	.word	0xfeffffff

08005b48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b48:	b5b0      	push	{r4, r5, r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d101      	bne.n	8005b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e128      	b.n	8005dae <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b5c:	4b96      	ldr	r3, [pc, #600]	; (8005db8 <HAL_RCC_ClockConfig+0x270>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2201      	movs	r2, #1
 8005b62:	4013      	ands	r3, r2
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d91e      	bls.n	8005ba8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b6a:	4b93      	ldr	r3, [pc, #588]	; (8005db8 <HAL_RCC_ClockConfig+0x270>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	4393      	bics	r3, r2
 8005b72:	0019      	movs	r1, r3
 8005b74:	4b90      	ldr	r3, [pc, #576]	; (8005db8 <HAL_RCC_ClockConfig+0x270>)
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b7c:	f7fe fa24 	bl	8003fc8 <HAL_GetTick>
 8005b80:	0003      	movs	r3, r0
 8005b82:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b84:	e009      	b.n	8005b9a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b86:	f7fe fa1f 	bl	8003fc8 <HAL_GetTick>
 8005b8a:	0002      	movs	r2, r0
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	4a8a      	ldr	r2, [pc, #552]	; (8005dbc <HAL_RCC_ClockConfig+0x274>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d901      	bls.n	8005b9a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e109      	b.n	8005dae <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b9a:	4b87      	ldr	r3, [pc, #540]	; (8005db8 <HAL_RCC_ClockConfig+0x270>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d1ee      	bne.n	8005b86 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2202      	movs	r2, #2
 8005bae:	4013      	ands	r3, r2
 8005bb0:	d009      	beq.n	8005bc6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bb2:	4b83      	ldr	r3, [pc, #524]	; (8005dc0 <HAL_RCC_ClockConfig+0x278>)
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	22f0      	movs	r2, #240	; 0xf0
 8005bb8:	4393      	bics	r3, r2
 8005bba:	0019      	movs	r1, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	689a      	ldr	r2, [r3, #8]
 8005bc0:	4b7f      	ldr	r3, [pc, #508]	; (8005dc0 <HAL_RCC_ClockConfig+0x278>)
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	4013      	ands	r3, r2
 8005bce:	d100      	bne.n	8005bd2 <HAL_RCC_ClockConfig+0x8a>
 8005bd0:	e089      	b.n	8005ce6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d107      	bne.n	8005bea <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bda:	4b79      	ldr	r3, [pc, #484]	; (8005dc0 <HAL_RCC_ClockConfig+0x278>)
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	2380      	movs	r3, #128	; 0x80
 8005be0:	029b      	lsls	r3, r3, #10
 8005be2:	4013      	ands	r3, r2
 8005be4:	d120      	bne.n	8005c28 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e0e1      	b.n	8005dae <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	2b03      	cmp	r3, #3
 8005bf0:	d107      	bne.n	8005c02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005bf2:	4b73      	ldr	r3, [pc, #460]	; (8005dc0 <HAL_RCC_ClockConfig+0x278>)
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	2380      	movs	r3, #128	; 0x80
 8005bf8:	049b      	lsls	r3, r3, #18
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	d114      	bne.n	8005c28 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e0d5      	b.n	8005dae <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d106      	bne.n	8005c18 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c0a:	4b6d      	ldr	r3, [pc, #436]	; (8005dc0 <HAL_RCC_ClockConfig+0x278>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2204      	movs	r2, #4
 8005c10:	4013      	ands	r3, r2
 8005c12:	d109      	bne.n	8005c28 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e0ca      	b.n	8005dae <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005c18:	4b69      	ldr	r3, [pc, #420]	; (8005dc0 <HAL_RCC_ClockConfig+0x278>)
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	2380      	movs	r3, #128	; 0x80
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	4013      	ands	r3, r2
 8005c22:	d101      	bne.n	8005c28 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e0c2      	b.n	8005dae <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c28:	4b65      	ldr	r3, [pc, #404]	; (8005dc0 <HAL_RCC_ClockConfig+0x278>)
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	2203      	movs	r2, #3
 8005c2e:	4393      	bics	r3, r2
 8005c30:	0019      	movs	r1, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	4b62      	ldr	r3, [pc, #392]	; (8005dc0 <HAL_RCC_ClockConfig+0x278>)
 8005c38:	430a      	orrs	r2, r1
 8005c3a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c3c:	f7fe f9c4 	bl	8003fc8 <HAL_GetTick>
 8005c40:	0003      	movs	r3, r0
 8005c42:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d111      	bne.n	8005c70 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c4c:	e009      	b.n	8005c62 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c4e:	f7fe f9bb 	bl	8003fc8 <HAL_GetTick>
 8005c52:	0002      	movs	r2, r0
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	4a58      	ldr	r2, [pc, #352]	; (8005dbc <HAL_RCC_ClockConfig+0x274>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d901      	bls.n	8005c62 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e0a5      	b.n	8005dae <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c62:	4b57      	ldr	r3, [pc, #348]	; (8005dc0 <HAL_RCC_ClockConfig+0x278>)
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	220c      	movs	r2, #12
 8005c68:	4013      	ands	r3, r2
 8005c6a:	2b08      	cmp	r3, #8
 8005c6c:	d1ef      	bne.n	8005c4e <HAL_RCC_ClockConfig+0x106>
 8005c6e:	e03a      	b.n	8005ce6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	2b03      	cmp	r3, #3
 8005c76:	d111      	bne.n	8005c9c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c78:	e009      	b.n	8005c8e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c7a:	f7fe f9a5 	bl	8003fc8 <HAL_GetTick>
 8005c7e:	0002      	movs	r2, r0
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	4a4d      	ldr	r2, [pc, #308]	; (8005dbc <HAL_RCC_ClockConfig+0x274>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e08f      	b.n	8005dae <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c8e:	4b4c      	ldr	r3, [pc, #304]	; (8005dc0 <HAL_RCC_ClockConfig+0x278>)
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	220c      	movs	r2, #12
 8005c94:	4013      	ands	r3, r2
 8005c96:	2b0c      	cmp	r3, #12
 8005c98:	d1ef      	bne.n	8005c7a <HAL_RCC_ClockConfig+0x132>
 8005c9a:	e024      	b.n	8005ce6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d11b      	bne.n	8005cdc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ca4:	e009      	b.n	8005cba <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ca6:	f7fe f98f 	bl	8003fc8 <HAL_GetTick>
 8005caa:	0002      	movs	r2, r0
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	4a42      	ldr	r2, [pc, #264]	; (8005dbc <HAL_RCC_ClockConfig+0x274>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d901      	bls.n	8005cba <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e079      	b.n	8005dae <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005cba:	4b41      	ldr	r3, [pc, #260]	; (8005dc0 <HAL_RCC_ClockConfig+0x278>)
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	220c      	movs	r2, #12
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	2b04      	cmp	r3, #4
 8005cc4:	d1ef      	bne.n	8005ca6 <HAL_RCC_ClockConfig+0x15e>
 8005cc6:	e00e      	b.n	8005ce6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cc8:	f7fe f97e 	bl	8003fc8 <HAL_GetTick>
 8005ccc:	0002      	movs	r2, r0
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	4a3a      	ldr	r2, [pc, #232]	; (8005dbc <HAL_RCC_ClockConfig+0x274>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d901      	bls.n	8005cdc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e068      	b.n	8005dae <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005cdc:	4b38      	ldr	r3, [pc, #224]	; (8005dc0 <HAL_RCC_ClockConfig+0x278>)
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	220c      	movs	r2, #12
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	d1f0      	bne.n	8005cc8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ce6:	4b34      	ldr	r3, [pc, #208]	; (8005db8 <HAL_RCC_ClockConfig+0x270>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2201      	movs	r2, #1
 8005cec:	4013      	ands	r3, r2
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d21e      	bcs.n	8005d32 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cf4:	4b30      	ldr	r3, [pc, #192]	; (8005db8 <HAL_RCC_ClockConfig+0x270>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	4393      	bics	r3, r2
 8005cfc:	0019      	movs	r1, r3
 8005cfe:	4b2e      	ldr	r3, [pc, #184]	; (8005db8 <HAL_RCC_ClockConfig+0x270>)
 8005d00:	683a      	ldr	r2, [r7, #0]
 8005d02:	430a      	orrs	r2, r1
 8005d04:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005d06:	f7fe f95f 	bl	8003fc8 <HAL_GetTick>
 8005d0a:	0003      	movs	r3, r0
 8005d0c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d0e:	e009      	b.n	8005d24 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d10:	f7fe f95a 	bl	8003fc8 <HAL_GetTick>
 8005d14:	0002      	movs	r2, r0
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	4a28      	ldr	r2, [pc, #160]	; (8005dbc <HAL_RCC_ClockConfig+0x274>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d901      	bls.n	8005d24 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e044      	b.n	8005dae <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d24:	4b24      	ldr	r3, [pc, #144]	; (8005db8 <HAL_RCC_ClockConfig+0x270>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	683a      	ldr	r2, [r7, #0]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d1ee      	bne.n	8005d10 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2204      	movs	r2, #4
 8005d38:	4013      	ands	r3, r2
 8005d3a:	d009      	beq.n	8005d50 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d3c:	4b20      	ldr	r3, [pc, #128]	; (8005dc0 <HAL_RCC_ClockConfig+0x278>)
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	4a20      	ldr	r2, [pc, #128]	; (8005dc4 <HAL_RCC_ClockConfig+0x27c>)
 8005d42:	4013      	ands	r3, r2
 8005d44:	0019      	movs	r1, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	4b1d      	ldr	r3, [pc, #116]	; (8005dc0 <HAL_RCC_ClockConfig+0x278>)
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2208      	movs	r2, #8
 8005d56:	4013      	ands	r3, r2
 8005d58:	d00a      	beq.n	8005d70 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d5a:	4b19      	ldr	r3, [pc, #100]	; (8005dc0 <HAL_RCC_ClockConfig+0x278>)
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	4a1a      	ldr	r2, [pc, #104]	; (8005dc8 <HAL_RCC_ClockConfig+0x280>)
 8005d60:	4013      	ands	r3, r2
 8005d62:	0019      	movs	r1, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	00da      	lsls	r2, r3, #3
 8005d6a:	4b15      	ldr	r3, [pc, #84]	; (8005dc0 <HAL_RCC_ClockConfig+0x278>)
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d70:	f000 f832 	bl	8005dd8 <HAL_RCC_GetSysClockFreq>
 8005d74:	0001      	movs	r1, r0
 8005d76:	4b12      	ldr	r3, [pc, #72]	; (8005dc0 <HAL_RCC_ClockConfig+0x278>)
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	091b      	lsrs	r3, r3, #4
 8005d7c:	220f      	movs	r2, #15
 8005d7e:	4013      	ands	r3, r2
 8005d80:	4a12      	ldr	r2, [pc, #72]	; (8005dcc <HAL_RCC_ClockConfig+0x284>)
 8005d82:	5cd3      	ldrb	r3, [r2, r3]
 8005d84:	000a      	movs	r2, r1
 8005d86:	40da      	lsrs	r2, r3
 8005d88:	4b11      	ldr	r3, [pc, #68]	; (8005dd0 <HAL_RCC_ClockConfig+0x288>)
 8005d8a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005d8c:	4b11      	ldr	r3, [pc, #68]	; (8005dd4 <HAL_RCC_ClockConfig+0x28c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	250b      	movs	r5, #11
 8005d92:	197c      	adds	r4, r7, r5
 8005d94:	0018      	movs	r0, r3
 8005d96:	f7fe f8d1 	bl	8003f3c <HAL_InitTick>
 8005d9a:	0003      	movs	r3, r0
 8005d9c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005d9e:	197b      	adds	r3, r7, r5
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d002      	beq.n	8005dac <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005da6:	197b      	adds	r3, r7, r5
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	e000      	b.n	8005dae <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	0018      	movs	r0, r3
 8005db0:	46bd      	mov	sp, r7
 8005db2:	b004      	add	sp, #16
 8005db4:	bdb0      	pop	{r4, r5, r7, pc}
 8005db6:	46c0      	nop			; (mov r8, r8)
 8005db8:	40022000 	.word	0x40022000
 8005dbc:	00001388 	.word	0x00001388
 8005dc0:	40021000 	.word	0x40021000
 8005dc4:	fffff8ff 	.word	0xfffff8ff
 8005dc8:	ffffc7ff 	.word	0xffffc7ff
 8005dcc:	0800a164 	.word	0x0800a164
 8005dd0:	20000020 	.word	0x20000020
 8005dd4:	20000024 	.word	0x20000024

08005dd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dd8:	b5b0      	push	{r4, r5, r7, lr}
 8005dda:	b08e      	sub	sp, #56	; 0x38
 8005ddc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005dde:	4b4c      	ldr	r3, [pc, #304]	; (8005f10 <HAL_RCC_GetSysClockFreq+0x138>)
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005de4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005de6:	230c      	movs	r3, #12
 8005de8:	4013      	ands	r3, r2
 8005dea:	2b0c      	cmp	r3, #12
 8005dec:	d014      	beq.n	8005e18 <HAL_RCC_GetSysClockFreq+0x40>
 8005dee:	d900      	bls.n	8005df2 <HAL_RCC_GetSysClockFreq+0x1a>
 8005df0:	e07b      	b.n	8005eea <HAL_RCC_GetSysClockFreq+0x112>
 8005df2:	2b04      	cmp	r3, #4
 8005df4:	d002      	beq.n	8005dfc <HAL_RCC_GetSysClockFreq+0x24>
 8005df6:	2b08      	cmp	r3, #8
 8005df8:	d00b      	beq.n	8005e12 <HAL_RCC_GetSysClockFreq+0x3a>
 8005dfa:	e076      	b.n	8005eea <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005dfc:	4b44      	ldr	r3, [pc, #272]	; (8005f10 <HAL_RCC_GetSysClockFreq+0x138>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2210      	movs	r2, #16
 8005e02:	4013      	ands	r3, r2
 8005e04:	d002      	beq.n	8005e0c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005e06:	4b43      	ldr	r3, [pc, #268]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005e08:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005e0a:	e07c      	b.n	8005f06 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005e0c:	4b42      	ldr	r3, [pc, #264]	; (8005f18 <HAL_RCC_GetSysClockFreq+0x140>)
 8005e0e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005e10:	e079      	b.n	8005f06 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005e12:	4b42      	ldr	r3, [pc, #264]	; (8005f1c <HAL_RCC_GetSysClockFreq+0x144>)
 8005e14:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005e16:	e076      	b.n	8005f06 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1a:	0c9a      	lsrs	r2, r3, #18
 8005e1c:	230f      	movs	r3, #15
 8005e1e:	401a      	ands	r2, r3
 8005e20:	4b3f      	ldr	r3, [pc, #252]	; (8005f20 <HAL_RCC_GetSysClockFreq+0x148>)
 8005e22:	5c9b      	ldrb	r3, [r3, r2]
 8005e24:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e28:	0d9a      	lsrs	r2, r3, #22
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	3301      	adds	r3, #1
 8005e30:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e32:	4b37      	ldr	r3, [pc, #220]	; (8005f10 <HAL_RCC_GetSysClockFreq+0x138>)
 8005e34:	68da      	ldr	r2, [r3, #12]
 8005e36:	2380      	movs	r3, #128	; 0x80
 8005e38:	025b      	lsls	r3, r3, #9
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	d01a      	beq.n	8005e74 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e40:	61bb      	str	r3, [r7, #24]
 8005e42:	2300      	movs	r3, #0
 8005e44:	61fb      	str	r3, [r7, #28]
 8005e46:	4a35      	ldr	r2, [pc, #212]	; (8005f1c <HAL_RCC_GetSysClockFreq+0x144>)
 8005e48:	2300      	movs	r3, #0
 8005e4a:	69b8      	ldr	r0, [r7, #24]
 8005e4c:	69f9      	ldr	r1, [r7, #28]
 8005e4e:	f7fa fb4b 	bl	80004e8 <__aeabi_lmul>
 8005e52:	0002      	movs	r2, r0
 8005e54:	000b      	movs	r3, r1
 8005e56:	0010      	movs	r0, r2
 8005e58:	0019      	movs	r1, r3
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	613b      	str	r3, [r7, #16]
 8005e5e:	2300      	movs	r3, #0
 8005e60:	617b      	str	r3, [r7, #20]
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f7fa fb1f 	bl	80004a8 <__aeabi_uldivmod>
 8005e6a:	0002      	movs	r2, r0
 8005e6c:	000b      	movs	r3, r1
 8005e6e:	0013      	movs	r3, r2
 8005e70:	637b      	str	r3, [r7, #52]	; 0x34
 8005e72:	e037      	b.n	8005ee4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005e74:	4b26      	ldr	r3, [pc, #152]	; (8005f10 <HAL_RCC_GetSysClockFreq+0x138>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2210      	movs	r2, #16
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	d01a      	beq.n	8005eb4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e80:	60bb      	str	r3, [r7, #8]
 8005e82:	2300      	movs	r3, #0
 8005e84:	60fb      	str	r3, [r7, #12]
 8005e86:	4a23      	ldr	r2, [pc, #140]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005e88:	2300      	movs	r3, #0
 8005e8a:	68b8      	ldr	r0, [r7, #8]
 8005e8c:	68f9      	ldr	r1, [r7, #12]
 8005e8e:	f7fa fb2b 	bl	80004e8 <__aeabi_lmul>
 8005e92:	0002      	movs	r2, r0
 8005e94:	000b      	movs	r3, r1
 8005e96:	0010      	movs	r0, r2
 8005e98:	0019      	movs	r1, r3
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9c:	603b      	str	r3, [r7, #0]
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	607b      	str	r3, [r7, #4]
 8005ea2:	683a      	ldr	r2, [r7, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f7fa faff 	bl	80004a8 <__aeabi_uldivmod>
 8005eaa:	0002      	movs	r2, r0
 8005eac:	000b      	movs	r3, r1
 8005eae:	0013      	movs	r3, r2
 8005eb0:	637b      	str	r3, [r7, #52]	; 0x34
 8005eb2:	e017      	b.n	8005ee4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb6:	0018      	movs	r0, r3
 8005eb8:	2300      	movs	r3, #0
 8005eba:	0019      	movs	r1, r3
 8005ebc:	4a16      	ldr	r2, [pc, #88]	; (8005f18 <HAL_RCC_GetSysClockFreq+0x140>)
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	f7fa fb12 	bl	80004e8 <__aeabi_lmul>
 8005ec4:	0002      	movs	r2, r0
 8005ec6:	000b      	movs	r3, r1
 8005ec8:	0010      	movs	r0, r2
 8005eca:	0019      	movs	r1, r3
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ece:	001c      	movs	r4, r3
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	001d      	movs	r5, r3
 8005ed4:	0022      	movs	r2, r4
 8005ed6:	002b      	movs	r3, r5
 8005ed8:	f7fa fae6 	bl	80004a8 <__aeabi_uldivmod>
 8005edc:	0002      	movs	r2, r0
 8005ede:	000b      	movs	r3, r1
 8005ee0:	0013      	movs	r3, r2
 8005ee2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005ee8:	e00d      	b.n	8005f06 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005eea:	4b09      	ldr	r3, [pc, #36]	; (8005f10 <HAL_RCC_GetSysClockFreq+0x138>)
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	0b5b      	lsrs	r3, r3, #13
 8005ef0:	2207      	movs	r2, #7
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	2280      	movs	r2, #128	; 0x80
 8005efc:	0212      	lsls	r2, r2, #8
 8005efe:	409a      	lsls	r2, r3
 8005f00:	0013      	movs	r3, r2
 8005f02:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005f04:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005f08:	0018      	movs	r0, r3
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	b00e      	add	sp, #56	; 0x38
 8005f0e:	bdb0      	pop	{r4, r5, r7, pc}
 8005f10:	40021000 	.word	0x40021000
 8005f14:	003d0900 	.word	0x003d0900
 8005f18:	00f42400 	.word	0x00f42400
 8005f1c:	007a1200 	.word	0x007a1200
 8005f20:	0800a17c 	.word	0x0800a17c

08005f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f28:	4b02      	ldr	r3, [pc, #8]	; (8005f34 <HAL_RCC_GetHCLKFreq+0x10>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
}
 8005f2c:	0018      	movs	r0, r3
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	46c0      	nop			; (mov r8, r8)
 8005f34:	20000020 	.word	0x20000020

08005f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f3c:	f7ff fff2 	bl	8005f24 <HAL_RCC_GetHCLKFreq>
 8005f40:	0001      	movs	r1, r0
 8005f42:	4b06      	ldr	r3, [pc, #24]	; (8005f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	0a1b      	lsrs	r3, r3, #8
 8005f48:	2207      	movs	r2, #7
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	4a04      	ldr	r2, [pc, #16]	; (8005f60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f4e:	5cd3      	ldrb	r3, [r2, r3]
 8005f50:	40d9      	lsrs	r1, r3
 8005f52:	000b      	movs	r3, r1
}
 8005f54:	0018      	movs	r0, r3
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	46c0      	nop			; (mov r8, r8)
 8005f5c:	40021000 	.word	0x40021000
 8005f60:	0800a174 	.word	0x0800a174

08005f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f68:	f7ff ffdc 	bl	8005f24 <HAL_RCC_GetHCLKFreq>
 8005f6c:	0001      	movs	r1, r0
 8005f6e:	4b06      	ldr	r3, [pc, #24]	; (8005f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	0adb      	lsrs	r3, r3, #11
 8005f74:	2207      	movs	r2, #7
 8005f76:	4013      	ands	r3, r2
 8005f78:	4a04      	ldr	r2, [pc, #16]	; (8005f8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f7a:	5cd3      	ldrb	r3, [r2, r3]
 8005f7c:	40d9      	lsrs	r1, r3
 8005f7e:	000b      	movs	r3, r1
}
 8005f80:	0018      	movs	r0, r3
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	46c0      	nop			; (mov r8, r8)
 8005f88:	40021000 	.word	0x40021000
 8005f8c:	0800a174 	.word	0x0800a174

08005f90 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005f98:	2317      	movs	r3, #23
 8005f9a:	18fb      	adds	r3, r7, r3
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	d106      	bne.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	2380      	movs	r3, #128	; 0x80
 8005fb0:	011b      	lsls	r3, r3, #4
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	d100      	bne.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8005fb6:	e104      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fb8:	4bb1      	ldr	r3, [pc, #708]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005fba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fbc:	2380      	movs	r3, #128	; 0x80
 8005fbe:	055b      	lsls	r3, r3, #21
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	d10a      	bne.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fc4:	4bae      	ldr	r3, [pc, #696]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005fc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fc8:	4bad      	ldr	r3, [pc, #692]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005fca:	2180      	movs	r1, #128	; 0x80
 8005fcc:	0549      	lsls	r1, r1, #21
 8005fce:	430a      	orrs	r2, r1
 8005fd0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005fd2:	2317      	movs	r3, #23
 8005fd4:	18fb      	adds	r3, r7, r3
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fda:	4baa      	ldr	r3, [pc, #680]	; (8006284 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	2380      	movs	r3, #128	; 0x80
 8005fe0:	005b      	lsls	r3, r3, #1
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	d11a      	bne.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fe6:	4ba7      	ldr	r3, [pc, #668]	; (8006284 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	4ba6      	ldr	r3, [pc, #664]	; (8006284 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005fec:	2180      	movs	r1, #128	; 0x80
 8005fee:	0049      	lsls	r1, r1, #1
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ff4:	f7fd ffe8 	bl	8003fc8 <HAL_GetTick>
 8005ff8:	0003      	movs	r3, r0
 8005ffa:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ffc:	e008      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ffe:	f7fd ffe3 	bl	8003fc8 <HAL_GetTick>
 8006002:	0002      	movs	r2, r0
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	2b64      	cmp	r3, #100	; 0x64
 800600a:	d901      	bls.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e133      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006010:	4b9c      	ldr	r3, [pc, #624]	; (8006284 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	2380      	movs	r3, #128	; 0x80
 8006016:	005b      	lsls	r3, r3, #1
 8006018:	4013      	ands	r3, r2
 800601a:	d0f0      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800601c:	4b98      	ldr	r3, [pc, #608]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	23c0      	movs	r3, #192	; 0xc0
 8006022:	039b      	lsls	r3, r3, #14
 8006024:	4013      	ands	r3, r2
 8006026:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	23c0      	movs	r3, #192	; 0xc0
 800602e:	039b      	lsls	r3, r3, #14
 8006030:	4013      	ands	r3, r2
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	429a      	cmp	r2, r3
 8006036:	d107      	bne.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689a      	ldr	r2, [r3, #8]
 800603c:	23c0      	movs	r3, #192	; 0xc0
 800603e:	039b      	lsls	r3, r3, #14
 8006040:	4013      	ands	r3, r2
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	429a      	cmp	r2, r3
 8006046:	d013      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	23c0      	movs	r3, #192	; 0xc0
 800604e:	029b      	lsls	r3, r3, #10
 8006050:	401a      	ands	r2, r3
 8006052:	23c0      	movs	r3, #192	; 0xc0
 8006054:	029b      	lsls	r3, r3, #10
 8006056:	429a      	cmp	r2, r3
 8006058:	d10a      	bne.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800605a:	4b89      	ldr	r3, [pc, #548]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	2380      	movs	r3, #128	; 0x80
 8006060:	029b      	lsls	r3, r3, #10
 8006062:	401a      	ands	r2, r3
 8006064:	2380      	movs	r3, #128	; 0x80
 8006066:	029b      	lsls	r3, r3, #10
 8006068:	429a      	cmp	r2, r3
 800606a:	d101      	bne.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e103      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006070:	4b83      	ldr	r3, [pc, #524]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006072:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006074:	23c0      	movs	r3, #192	; 0xc0
 8006076:	029b      	lsls	r3, r3, #10
 8006078:	4013      	ands	r3, r2
 800607a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d049      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	23c0      	movs	r3, #192	; 0xc0
 8006088:	029b      	lsls	r3, r3, #10
 800608a:	4013      	ands	r3, r2
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	429a      	cmp	r2, r3
 8006090:	d004      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2220      	movs	r2, #32
 8006098:	4013      	ands	r3, r2
 800609a:	d10d      	bne.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	689a      	ldr	r2, [r3, #8]
 80060a0:	23c0      	movs	r3, #192	; 0xc0
 80060a2:	029b      	lsls	r3, r3, #10
 80060a4:	4013      	ands	r3, r2
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d034      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	2380      	movs	r3, #128	; 0x80
 80060b2:	011b      	lsls	r3, r3, #4
 80060b4:	4013      	ands	r3, r2
 80060b6:	d02e      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80060b8:	4b71      	ldr	r3, [pc, #452]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80060ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060bc:	4a72      	ldr	r2, [pc, #456]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80060be:	4013      	ands	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80060c2:	4b6f      	ldr	r3, [pc, #444]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80060c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80060c6:	4b6e      	ldr	r3, [pc, #440]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80060c8:	2180      	movs	r1, #128	; 0x80
 80060ca:	0309      	lsls	r1, r1, #12
 80060cc:	430a      	orrs	r2, r1
 80060ce:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80060d0:	4b6b      	ldr	r3, [pc, #428]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80060d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80060d4:	4b6a      	ldr	r3, [pc, #424]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80060d6:	496d      	ldr	r1, [pc, #436]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80060d8:	400a      	ands	r2, r1
 80060da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80060dc:	4b68      	ldr	r3, [pc, #416]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	2380      	movs	r3, #128	; 0x80
 80060e6:	005b      	lsls	r3, r3, #1
 80060e8:	4013      	ands	r3, r2
 80060ea:	d014      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060ec:	f7fd ff6c 	bl	8003fc8 <HAL_GetTick>
 80060f0:	0003      	movs	r3, r0
 80060f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060f4:	e009      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060f6:	f7fd ff67 	bl	8003fc8 <HAL_GetTick>
 80060fa:	0002      	movs	r2, r0
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	4a63      	ldr	r2, [pc, #396]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d901      	bls.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e0b6      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800610a:	4b5d      	ldr	r3, [pc, #372]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800610c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800610e:	2380      	movs	r3, #128	; 0x80
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4013      	ands	r3, r2
 8006114:	d0ef      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	2380      	movs	r3, #128	; 0x80
 800611c:	011b      	lsls	r3, r3, #4
 800611e:	4013      	ands	r3, r2
 8006120:	d01f      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	689a      	ldr	r2, [r3, #8]
 8006126:	23c0      	movs	r3, #192	; 0xc0
 8006128:	029b      	lsls	r3, r3, #10
 800612a:	401a      	ands	r2, r3
 800612c:	23c0      	movs	r3, #192	; 0xc0
 800612e:	029b      	lsls	r3, r3, #10
 8006130:	429a      	cmp	r2, r3
 8006132:	d10c      	bne.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8006134:	4b52      	ldr	r3, [pc, #328]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a56      	ldr	r2, [pc, #344]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800613a:	4013      	ands	r3, r2
 800613c:	0019      	movs	r1, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	689a      	ldr	r2, [r3, #8]
 8006142:	23c0      	movs	r3, #192	; 0xc0
 8006144:	039b      	lsls	r3, r3, #14
 8006146:	401a      	ands	r2, r3
 8006148:	4b4d      	ldr	r3, [pc, #308]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800614a:	430a      	orrs	r2, r1
 800614c:	601a      	str	r2, [r3, #0]
 800614e:	4b4c      	ldr	r3, [pc, #304]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006150:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	689a      	ldr	r2, [r3, #8]
 8006156:	23c0      	movs	r3, #192	; 0xc0
 8006158:	029b      	lsls	r3, r3, #10
 800615a:	401a      	ands	r2, r3
 800615c:	4b48      	ldr	r3, [pc, #288]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800615e:	430a      	orrs	r2, r1
 8006160:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2220      	movs	r2, #32
 8006168:	4013      	ands	r3, r2
 800616a:	d01f      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	23c0      	movs	r3, #192	; 0xc0
 8006172:	029b      	lsls	r3, r3, #10
 8006174:	401a      	ands	r2, r3
 8006176:	23c0      	movs	r3, #192	; 0xc0
 8006178:	029b      	lsls	r3, r3, #10
 800617a:	429a      	cmp	r2, r3
 800617c:	d10c      	bne.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800617e:	4b40      	ldr	r3, [pc, #256]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a44      	ldr	r2, [pc, #272]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006184:	4013      	ands	r3, r2
 8006186:	0019      	movs	r1, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685a      	ldr	r2, [r3, #4]
 800618c:	23c0      	movs	r3, #192	; 0xc0
 800618e:	039b      	lsls	r3, r3, #14
 8006190:	401a      	ands	r2, r3
 8006192:	4b3b      	ldr	r3, [pc, #236]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006194:	430a      	orrs	r2, r1
 8006196:	601a      	str	r2, [r3, #0]
 8006198:	4b39      	ldr	r3, [pc, #228]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800619a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	23c0      	movs	r3, #192	; 0xc0
 80061a2:	029b      	lsls	r3, r3, #10
 80061a4:	401a      	ands	r2, r3
 80061a6:	4b36      	ldr	r3, [pc, #216]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80061a8:	430a      	orrs	r2, r1
 80061aa:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80061ac:	2317      	movs	r3, #23
 80061ae:	18fb      	adds	r3, r7, r3
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d105      	bne.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061b6:	4b32      	ldr	r3, [pc, #200]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80061b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061ba:	4b31      	ldr	r3, [pc, #196]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80061bc:	4936      	ldr	r1, [pc, #216]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80061be:	400a      	ands	r2, r1
 80061c0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2201      	movs	r2, #1
 80061c8:	4013      	ands	r3, r2
 80061ca:	d009      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80061cc:	4b2c      	ldr	r3, [pc, #176]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80061ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061d0:	2203      	movs	r2, #3
 80061d2:	4393      	bics	r3, r2
 80061d4:	0019      	movs	r1, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68da      	ldr	r2, [r3, #12]
 80061da:	4b29      	ldr	r3, [pc, #164]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80061dc:	430a      	orrs	r2, r1
 80061de:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2202      	movs	r2, #2
 80061e6:	4013      	ands	r3, r2
 80061e8:	d009      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80061ea:	4b25      	ldr	r3, [pc, #148]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80061ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ee:	220c      	movs	r2, #12
 80061f0:	4393      	bics	r3, r2
 80061f2:	0019      	movs	r1, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	691a      	ldr	r2, [r3, #16]
 80061f8:	4b21      	ldr	r3, [pc, #132]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80061fa:	430a      	orrs	r2, r1
 80061fc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2204      	movs	r2, #4
 8006204:	4013      	ands	r3, r2
 8006206:	d009      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006208:	4b1d      	ldr	r3, [pc, #116]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800620a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800620c:	4a23      	ldr	r2, [pc, #140]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800620e:	4013      	ands	r3, r2
 8006210:	0019      	movs	r1, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	695a      	ldr	r2, [r3, #20]
 8006216:	4b1a      	ldr	r3, [pc, #104]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006218:	430a      	orrs	r2, r1
 800621a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2208      	movs	r2, #8
 8006222:	4013      	ands	r3, r2
 8006224:	d009      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006226:	4b16      	ldr	r3, [pc, #88]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800622a:	4a1d      	ldr	r2, [pc, #116]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800622c:	4013      	ands	r3, r2
 800622e:	0019      	movs	r1, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	699a      	ldr	r2, [r3, #24]
 8006234:	4b12      	ldr	r3, [pc, #72]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006236:	430a      	orrs	r2, r1
 8006238:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2240      	movs	r2, #64	; 0x40
 8006240:	4013      	ands	r3, r2
 8006242:	d009      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006244:	4b0e      	ldr	r3, [pc, #56]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006248:	4a16      	ldr	r2, [pc, #88]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800624a:	4013      	ands	r3, r2
 800624c:	0019      	movs	r1, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a1a      	ldr	r2, [r3, #32]
 8006252:	4b0b      	ldr	r3, [pc, #44]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006254:	430a      	orrs	r2, r1
 8006256:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2280      	movs	r2, #128	; 0x80
 800625e:	4013      	ands	r3, r2
 8006260:	d009      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006262:	4b07      	ldr	r3, [pc, #28]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006266:	4a10      	ldr	r2, [pc, #64]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8006268:	4013      	ands	r3, r2
 800626a:	0019      	movs	r1, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	69da      	ldr	r2, [r3, #28]
 8006270:	4b03      	ldr	r3, [pc, #12]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006272:	430a      	orrs	r2, r1
 8006274:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	0018      	movs	r0, r3
 800627a:	46bd      	mov	sp, r7
 800627c:	b006      	add	sp, #24
 800627e:	bd80      	pop	{r7, pc}
 8006280:	40021000 	.word	0x40021000
 8006284:	40007000 	.word	0x40007000
 8006288:	fffcffff 	.word	0xfffcffff
 800628c:	fff7ffff 	.word	0xfff7ffff
 8006290:	00001388 	.word	0x00001388
 8006294:	ffcfffff 	.word	0xffcfffff
 8006298:	efffffff 	.word	0xefffffff
 800629c:	fffff3ff 	.word	0xfffff3ff
 80062a0:	ffffcfff 	.word	0xffffcfff
 80062a4:	fbffffff 	.word	0xfbffffff
 80062a8:	fff3ffff 	.word	0xfff3ffff

080062ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e044      	b.n	8006348 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d107      	bne.n	80062d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2278      	movs	r2, #120	; 0x78
 80062ca:	2100      	movs	r1, #0
 80062cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	0018      	movs	r0, r3
 80062d2:	f7fd f897 	bl	8003404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2224      	movs	r2, #36	; 0x24
 80062da:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2101      	movs	r1, #1
 80062e8:	438a      	bics	r2, r1
 80062ea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	0018      	movs	r0, r3
 80062f0:	f000 f8d0 	bl	8006494 <UART_SetConfig>
 80062f4:	0003      	movs	r3, r0
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d101      	bne.n	80062fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e024      	b.n	8006348 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	0018      	movs	r0, r3
 800630a:	f000 fb47 	bl	800699c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	490d      	ldr	r1, [pc, #52]	; (8006350 <HAL_UART_Init+0xa4>)
 800631a:	400a      	ands	r2, r1
 800631c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	212a      	movs	r1, #42	; 0x2a
 800632a:	438a      	bics	r2, r1
 800632c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2101      	movs	r1, #1
 800633a:	430a      	orrs	r2, r1
 800633c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	0018      	movs	r0, r3
 8006342:	f000 fbdf 	bl	8006b04 <UART_CheckIdleState>
 8006346:	0003      	movs	r3, r0
}
 8006348:	0018      	movs	r0, r3
 800634a:	46bd      	mov	sp, r7
 800634c:	b002      	add	sp, #8
 800634e:	bd80      	pop	{r7, pc}
 8006350:	ffffb7ff 	.word	0xffffb7ff

08006354 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b08a      	sub	sp, #40	; 0x28
 8006358:	af02      	add	r7, sp, #8
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	603b      	str	r3, [r7, #0]
 8006360:	1dbb      	adds	r3, r7, #6
 8006362:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006368:	2b20      	cmp	r3, #32
 800636a:	d000      	beq.n	800636e <HAL_UART_Transmit+0x1a>
 800636c:	e08c      	b.n	8006488 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d003      	beq.n	800637c <HAL_UART_Transmit+0x28>
 8006374:	1dbb      	adds	r3, r7, #6
 8006376:	881b      	ldrh	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e084      	b.n	800648a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	689a      	ldr	r2, [r3, #8]
 8006384:	2380      	movs	r3, #128	; 0x80
 8006386:	015b      	lsls	r3, r3, #5
 8006388:	429a      	cmp	r2, r3
 800638a:	d109      	bne.n	80063a0 <HAL_UART_Transmit+0x4c>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d105      	bne.n	80063a0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2201      	movs	r2, #1
 8006398:	4013      	ands	r3, r2
 800639a:	d001      	beq.n	80063a0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e074      	b.n	800648a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2284      	movs	r2, #132	; 0x84
 80063a4:	2100      	movs	r1, #0
 80063a6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2221      	movs	r2, #33	; 0x21
 80063ac:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063ae:	f7fd fe0b 	bl	8003fc8 <HAL_GetTick>
 80063b2:	0003      	movs	r3, r0
 80063b4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	1dba      	adds	r2, r7, #6
 80063ba:	2150      	movs	r1, #80	; 0x50
 80063bc:	8812      	ldrh	r2, [r2, #0]
 80063be:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	1dba      	adds	r2, r7, #6
 80063c4:	2152      	movs	r1, #82	; 0x52
 80063c6:	8812      	ldrh	r2, [r2, #0]
 80063c8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	689a      	ldr	r2, [r3, #8]
 80063ce:	2380      	movs	r3, #128	; 0x80
 80063d0:	015b      	lsls	r3, r3, #5
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d108      	bne.n	80063e8 <HAL_UART_Transmit+0x94>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d104      	bne.n	80063e8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80063de:	2300      	movs	r3, #0
 80063e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	61bb      	str	r3, [r7, #24]
 80063e6:	e003      	b.n	80063f0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063ec:	2300      	movs	r3, #0
 80063ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80063f0:	e02f      	b.n	8006452 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	9300      	str	r3, [sp, #0]
 80063fa:	0013      	movs	r3, r2
 80063fc:	2200      	movs	r2, #0
 80063fe:	2180      	movs	r1, #128	; 0x80
 8006400:	f000 fc28 	bl	8006c54 <UART_WaitOnFlagUntilTimeout>
 8006404:	1e03      	subs	r3, r0, #0
 8006406:	d004      	beq.n	8006412 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2220      	movs	r2, #32
 800640c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e03b      	b.n	800648a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d10b      	bne.n	8006430 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	881b      	ldrh	r3, [r3, #0]
 800641c:	001a      	movs	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	05d2      	lsls	r2, r2, #23
 8006424:	0dd2      	lsrs	r2, r2, #23
 8006426:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	3302      	adds	r3, #2
 800642c:	61bb      	str	r3, [r7, #24]
 800642e:	e007      	b.n	8006440 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	781a      	ldrb	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	3301      	adds	r3, #1
 800643e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2252      	movs	r2, #82	; 0x52
 8006444:	5a9b      	ldrh	r3, [r3, r2]
 8006446:	b29b      	uxth	r3, r3
 8006448:	3b01      	subs	r3, #1
 800644a:	b299      	uxth	r1, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2252      	movs	r2, #82	; 0x52
 8006450:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2252      	movs	r2, #82	; 0x52
 8006456:	5a9b      	ldrh	r3, [r3, r2]
 8006458:	b29b      	uxth	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1c9      	bne.n	80063f2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	0013      	movs	r3, r2
 8006468:	2200      	movs	r2, #0
 800646a:	2140      	movs	r1, #64	; 0x40
 800646c:	f000 fbf2 	bl	8006c54 <UART_WaitOnFlagUntilTimeout>
 8006470:	1e03      	subs	r3, r0, #0
 8006472:	d004      	beq.n	800647e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2220      	movs	r2, #32
 8006478:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e005      	b.n	800648a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2220      	movs	r2, #32
 8006482:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006484:	2300      	movs	r3, #0
 8006486:	e000      	b.n	800648a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8006488:	2302      	movs	r3, #2
  }
}
 800648a:	0018      	movs	r0, r3
 800648c:	46bd      	mov	sp, r7
 800648e:	b008      	add	sp, #32
 8006490:	bd80      	pop	{r7, pc}
	...

08006494 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006494:	b5b0      	push	{r4, r5, r7, lr}
 8006496:	b08e      	sub	sp, #56	; 0x38
 8006498:	af00      	add	r7, sp, #0
 800649a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800649c:	231a      	movs	r3, #26
 800649e:	2218      	movs	r2, #24
 80064a0:	189b      	adds	r3, r3, r2
 80064a2:	19db      	adds	r3, r3, r7
 80064a4:	2200      	movs	r2, #0
 80064a6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	689a      	ldr	r2, [r3, #8]
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	431a      	orrs	r2, r3
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	695b      	ldr	r3, [r3, #20]
 80064b6:	431a      	orrs	r2, r3
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	69db      	ldr	r3, [r3, #28]
 80064bc:	4313      	orrs	r3, r2
 80064be:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4ac6      	ldr	r2, [pc, #792]	; (80067e0 <UART_SetConfig+0x34c>)
 80064c8:	4013      	ands	r3, r2
 80064ca:	0019      	movs	r1, r3
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064d2:	430a      	orrs	r2, r1
 80064d4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	4ac1      	ldr	r2, [pc, #772]	; (80067e4 <UART_SetConfig+0x350>)
 80064de:	4013      	ands	r3, r2
 80064e0:	0019      	movs	r1, r3
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	68da      	ldr	r2, [r3, #12]
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	430a      	orrs	r2, r1
 80064ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4abb      	ldr	r2, [pc, #748]	; (80067e8 <UART_SetConfig+0x354>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d004      	beq.n	8006508 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006504:	4313      	orrs	r3, r2
 8006506:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	4ab7      	ldr	r2, [pc, #732]	; (80067ec <UART_SetConfig+0x358>)
 8006510:	4013      	ands	r3, r2
 8006512:	0019      	movs	r1, r3
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800651a:	430a      	orrs	r2, r1
 800651c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4ab3      	ldr	r2, [pc, #716]	; (80067f0 <UART_SetConfig+0x35c>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d131      	bne.n	800658c <UART_SetConfig+0xf8>
 8006528:	4bb2      	ldr	r3, [pc, #712]	; (80067f4 <UART_SetConfig+0x360>)
 800652a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800652c:	2203      	movs	r2, #3
 800652e:	4013      	ands	r3, r2
 8006530:	2b03      	cmp	r3, #3
 8006532:	d01d      	beq.n	8006570 <UART_SetConfig+0xdc>
 8006534:	d823      	bhi.n	800657e <UART_SetConfig+0xea>
 8006536:	2b02      	cmp	r3, #2
 8006538:	d00c      	beq.n	8006554 <UART_SetConfig+0xc0>
 800653a:	d820      	bhi.n	800657e <UART_SetConfig+0xea>
 800653c:	2b00      	cmp	r3, #0
 800653e:	d002      	beq.n	8006546 <UART_SetConfig+0xb2>
 8006540:	2b01      	cmp	r3, #1
 8006542:	d00e      	beq.n	8006562 <UART_SetConfig+0xce>
 8006544:	e01b      	b.n	800657e <UART_SetConfig+0xea>
 8006546:	231b      	movs	r3, #27
 8006548:	2218      	movs	r2, #24
 800654a:	189b      	adds	r3, r3, r2
 800654c:	19db      	adds	r3, r3, r7
 800654e:	2201      	movs	r2, #1
 8006550:	701a      	strb	r2, [r3, #0]
 8006552:	e09c      	b.n	800668e <UART_SetConfig+0x1fa>
 8006554:	231b      	movs	r3, #27
 8006556:	2218      	movs	r2, #24
 8006558:	189b      	adds	r3, r3, r2
 800655a:	19db      	adds	r3, r3, r7
 800655c:	2202      	movs	r2, #2
 800655e:	701a      	strb	r2, [r3, #0]
 8006560:	e095      	b.n	800668e <UART_SetConfig+0x1fa>
 8006562:	231b      	movs	r3, #27
 8006564:	2218      	movs	r2, #24
 8006566:	189b      	adds	r3, r3, r2
 8006568:	19db      	adds	r3, r3, r7
 800656a:	2204      	movs	r2, #4
 800656c:	701a      	strb	r2, [r3, #0]
 800656e:	e08e      	b.n	800668e <UART_SetConfig+0x1fa>
 8006570:	231b      	movs	r3, #27
 8006572:	2218      	movs	r2, #24
 8006574:	189b      	adds	r3, r3, r2
 8006576:	19db      	adds	r3, r3, r7
 8006578:	2208      	movs	r2, #8
 800657a:	701a      	strb	r2, [r3, #0]
 800657c:	e087      	b.n	800668e <UART_SetConfig+0x1fa>
 800657e:	231b      	movs	r3, #27
 8006580:	2218      	movs	r2, #24
 8006582:	189b      	adds	r3, r3, r2
 8006584:	19db      	adds	r3, r3, r7
 8006586:	2210      	movs	r2, #16
 8006588:	701a      	strb	r2, [r3, #0]
 800658a:	e080      	b.n	800668e <UART_SetConfig+0x1fa>
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a99      	ldr	r2, [pc, #612]	; (80067f8 <UART_SetConfig+0x364>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d131      	bne.n	80065fa <UART_SetConfig+0x166>
 8006596:	4b97      	ldr	r3, [pc, #604]	; (80067f4 <UART_SetConfig+0x360>)
 8006598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800659a:	220c      	movs	r2, #12
 800659c:	4013      	ands	r3, r2
 800659e:	2b0c      	cmp	r3, #12
 80065a0:	d01d      	beq.n	80065de <UART_SetConfig+0x14a>
 80065a2:	d823      	bhi.n	80065ec <UART_SetConfig+0x158>
 80065a4:	2b08      	cmp	r3, #8
 80065a6:	d00c      	beq.n	80065c2 <UART_SetConfig+0x12e>
 80065a8:	d820      	bhi.n	80065ec <UART_SetConfig+0x158>
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d002      	beq.n	80065b4 <UART_SetConfig+0x120>
 80065ae:	2b04      	cmp	r3, #4
 80065b0:	d00e      	beq.n	80065d0 <UART_SetConfig+0x13c>
 80065b2:	e01b      	b.n	80065ec <UART_SetConfig+0x158>
 80065b4:	231b      	movs	r3, #27
 80065b6:	2218      	movs	r2, #24
 80065b8:	189b      	adds	r3, r3, r2
 80065ba:	19db      	adds	r3, r3, r7
 80065bc:	2200      	movs	r2, #0
 80065be:	701a      	strb	r2, [r3, #0]
 80065c0:	e065      	b.n	800668e <UART_SetConfig+0x1fa>
 80065c2:	231b      	movs	r3, #27
 80065c4:	2218      	movs	r2, #24
 80065c6:	189b      	adds	r3, r3, r2
 80065c8:	19db      	adds	r3, r3, r7
 80065ca:	2202      	movs	r2, #2
 80065cc:	701a      	strb	r2, [r3, #0]
 80065ce:	e05e      	b.n	800668e <UART_SetConfig+0x1fa>
 80065d0:	231b      	movs	r3, #27
 80065d2:	2218      	movs	r2, #24
 80065d4:	189b      	adds	r3, r3, r2
 80065d6:	19db      	adds	r3, r3, r7
 80065d8:	2204      	movs	r2, #4
 80065da:	701a      	strb	r2, [r3, #0]
 80065dc:	e057      	b.n	800668e <UART_SetConfig+0x1fa>
 80065de:	231b      	movs	r3, #27
 80065e0:	2218      	movs	r2, #24
 80065e2:	189b      	adds	r3, r3, r2
 80065e4:	19db      	adds	r3, r3, r7
 80065e6:	2208      	movs	r2, #8
 80065e8:	701a      	strb	r2, [r3, #0]
 80065ea:	e050      	b.n	800668e <UART_SetConfig+0x1fa>
 80065ec:	231b      	movs	r3, #27
 80065ee:	2218      	movs	r2, #24
 80065f0:	189b      	adds	r3, r3, r2
 80065f2:	19db      	adds	r3, r3, r7
 80065f4:	2210      	movs	r2, #16
 80065f6:	701a      	strb	r2, [r3, #0]
 80065f8:	e049      	b.n	800668e <UART_SetConfig+0x1fa>
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a7a      	ldr	r2, [pc, #488]	; (80067e8 <UART_SetConfig+0x354>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d13e      	bne.n	8006682 <UART_SetConfig+0x1ee>
 8006604:	4b7b      	ldr	r3, [pc, #492]	; (80067f4 <UART_SetConfig+0x360>)
 8006606:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006608:	23c0      	movs	r3, #192	; 0xc0
 800660a:	011b      	lsls	r3, r3, #4
 800660c:	4013      	ands	r3, r2
 800660e:	22c0      	movs	r2, #192	; 0xc0
 8006610:	0112      	lsls	r2, r2, #4
 8006612:	4293      	cmp	r3, r2
 8006614:	d027      	beq.n	8006666 <UART_SetConfig+0x1d2>
 8006616:	22c0      	movs	r2, #192	; 0xc0
 8006618:	0112      	lsls	r2, r2, #4
 800661a:	4293      	cmp	r3, r2
 800661c:	d82a      	bhi.n	8006674 <UART_SetConfig+0x1e0>
 800661e:	2280      	movs	r2, #128	; 0x80
 8006620:	0112      	lsls	r2, r2, #4
 8006622:	4293      	cmp	r3, r2
 8006624:	d011      	beq.n	800664a <UART_SetConfig+0x1b6>
 8006626:	2280      	movs	r2, #128	; 0x80
 8006628:	0112      	lsls	r2, r2, #4
 800662a:	4293      	cmp	r3, r2
 800662c:	d822      	bhi.n	8006674 <UART_SetConfig+0x1e0>
 800662e:	2b00      	cmp	r3, #0
 8006630:	d004      	beq.n	800663c <UART_SetConfig+0x1a8>
 8006632:	2280      	movs	r2, #128	; 0x80
 8006634:	00d2      	lsls	r2, r2, #3
 8006636:	4293      	cmp	r3, r2
 8006638:	d00e      	beq.n	8006658 <UART_SetConfig+0x1c4>
 800663a:	e01b      	b.n	8006674 <UART_SetConfig+0x1e0>
 800663c:	231b      	movs	r3, #27
 800663e:	2218      	movs	r2, #24
 8006640:	189b      	adds	r3, r3, r2
 8006642:	19db      	adds	r3, r3, r7
 8006644:	2200      	movs	r2, #0
 8006646:	701a      	strb	r2, [r3, #0]
 8006648:	e021      	b.n	800668e <UART_SetConfig+0x1fa>
 800664a:	231b      	movs	r3, #27
 800664c:	2218      	movs	r2, #24
 800664e:	189b      	adds	r3, r3, r2
 8006650:	19db      	adds	r3, r3, r7
 8006652:	2202      	movs	r2, #2
 8006654:	701a      	strb	r2, [r3, #0]
 8006656:	e01a      	b.n	800668e <UART_SetConfig+0x1fa>
 8006658:	231b      	movs	r3, #27
 800665a:	2218      	movs	r2, #24
 800665c:	189b      	adds	r3, r3, r2
 800665e:	19db      	adds	r3, r3, r7
 8006660:	2204      	movs	r2, #4
 8006662:	701a      	strb	r2, [r3, #0]
 8006664:	e013      	b.n	800668e <UART_SetConfig+0x1fa>
 8006666:	231b      	movs	r3, #27
 8006668:	2218      	movs	r2, #24
 800666a:	189b      	adds	r3, r3, r2
 800666c:	19db      	adds	r3, r3, r7
 800666e:	2208      	movs	r2, #8
 8006670:	701a      	strb	r2, [r3, #0]
 8006672:	e00c      	b.n	800668e <UART_SetConfig+0x1fa>
 8006674:	231b      	movs	r3, #27
 8006676:	2218      	movs	r2, #24
 8006678:	189b      	adds	r3, r3, r2
 800667a:	19db      	adds	r3, r3, r7
 800667c:	2210      	movs	r2, #16
 800667e:	701a      	strb	r2, [r3, #0]
 8006680:	e005      	b.n	800668e <UART_SetConfig+0x1fa>
 8006682:	231b      	movs	r3, #27
 8006684:	2218      	movs	r2, #24
 8006686:	189b      	adds	r3, r3, r2
 8006688:	19db      	adds	r3, r3, r7
 800668a:	2210      	movs	r2, #16
 800668c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a55      	ldr	r2, [pc, #340]	; (80067e8 <UART_SetConfig+0x354>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d000      	beq.n	800669a <UART_SetConfig+0x206>
 8006698:	e084      	b.n	80067a4 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800669a:	231b      	movs	r3, #27
 800669c:	2218      	movs	r2, #24
 800669e:	189b      	adds	r3, r3, r2
 80066a0:	19db      	adds	r3, r3, r7
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	2b08      	cmp	r3, #8
 80066a6:	d01d      	beq.n	80066e4 <UART_SetConfig+0x250>
 80066a8:	dc20      	bgt.n	80066ec <UART_SetConfig+0x258>
 80066aa:	2b04      	cmp	r3, #4
 80066ac:	d015      	beq.n	80066da <UART_SetConfig+0x246>
 80066ae:	dc1d      	bgt.n	80066ec <UART_SetConfig+0x258>
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d002      	beq.n	80066ba <UART_SetConfig+0x226>
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d005      	beq.n	80066c4 <UART_SetConfig+0x230>
 80066b8:	e018      	b.n	80066ec <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066ba:	f7ff fc3d 	bl	8005f38 <HAL_RCC_GetPCLK1Freq>
 80066be:	0003      	movs	r3, r0
 80066c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066c2:	e01c      	b.n	80066fe <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066c4:	4b4b      	ldr	r3, [pc, #300]	; (80067f4 <UART_SetConfig+0x360>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2210      	movs	r2, #16
 80066ca:	4013      	ands	r3, r2
 80066cc:	d002      	beq.n	80066d4 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80066ce:	4b4b      	ldr	r3, [pc, #300]	; (80067fc <UART_SetConfig+0x368>)
 80066d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80066d2:	e014      	b.n	80066fe <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 80066d4:	4b4a      	ldr	r3, [pc, #296]	; (8006800 <UART_SetConfig+0x36c>)
 80066d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066d8:	e011      	b.n	80066fe <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066da:	f7ff fb7d 	bl	8005dd8 <HAL_RCC_GetSysClockFreq>
 80066de:	0003      	movs	r3, r0
 80066e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066e2:	e00c      	b.n	80066fe <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066e4:	2380      	movs	r3, #128	; 0x80
 80066e6:	021b      	lsls	r3, r3, #8
 80066e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066ea:	e008      	b.n	80066fe <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 80066ec:	2300      	movs	r3, #0
 80066ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80066f0:	231a      	movs	r3, #26
 80066f2:	2218      	movs	r2, #24
 80066f4:	189b      	adds	r3, r3, r2
 80066f6:	19db      	adds	r3, r3, r7
 80066f8:	2201      	movs	r2, #1
 80066fa:	701a      	strb	r2, [r3, #0]
        break;
 80066fc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80066fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006700:	2b00      	cmp	r3, #0
 8006702:	d100      	bne.n	8006706 <UART_SetConfig+0x272>
 8006704:	e132      	b.n	800696c <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	685a      	ldr	r2, [r3, #4]
 800670a:	0013      	movs	r3, r2
 800670c:	005b      	lsls	r3, r3, #1
 800670e:	189b      	adds	r3, r3, r2
 8006710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006712:	429a      	cmp	r2, r3
 8006714:	d305      	bcc.n	8006722 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800671c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800671e:	429a      	cmp	r2, r3
 8006720:	d906      	bls.n	8006730 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8006722:	231a      	movs	r3, #26
 8006724:	2218      	movs	r2, #24
 8006726:	189b      	adds	r3, r3, r2
 8006728:	19db      	adds	r3, r3, r7
 800672a:	2201      	movs	r2, #1
 800672c:	701a      	strb	r2, [r3, #0]
 800672e:	e11d      	b.n	800696c <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006732:	613b      	str	r3, [r7, #16]
 8006734:	2300      	movs	r3, #0
 8006736:	617b      	str	r3, [r7, #20]
 8006738:	6939      	ldr	r1, [r7, #16]
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	000b      	movs	r3, r1
 800673e:	0e1b      	lsrs	r3, r3, #24
 8006740:	0010      	movs	r0, r2
 8006742:	0205      	lsls	r5, r0, #8
 8006744:	431d      	orrs	r5, r3
 8006746:	000b      	movs	r3, r1
 8006748:	021c      	lsls	r4, r3, #8
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	085b      	lsrs	r3, r3, #1
 8006750:	60bb      	str	r3, [r7, #8]
 8006752:	2300      	movs	r3, #0
 8006754:	60fb      	str	r3, [r7, #12]
 8006756:	68b8      	ldr	r0, [r7, #8]
 8006758:	68f9      	ldr	r1, [r7, #12]
 800675a:	1900      	adds	r0, r0, r4
 800675c:	4169      	adcs	r1, r5
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	603b      	str	r3, [r7, #0]
 8006764:	2300      	movs	r3, #0
 8006766:	607b      	str	r3, [r7, #4]
 8006768:	683a      	ldr	r2, [r7, #0]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f7f9 fe9c 	bl	80004a8 <__aeabi_uldivmod>
 8006770:	0002      	movs	r2, r0
 8006772:	000b      	movs	r3, r1
 8006774:	0013      	movs	r3, r2
 8006776:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006778:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800677a:	23c0      	movs	r3, #192	; 0xc0
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	429a      	cmp	r2, r3
 8006780:	d309      	bcc.n	8006796 <UART_SetConfig+0x302>
 8006782:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006784:	2380      	movs	r3, #128	; 0x80
 8006786:	035b      	lsls	r3, r3, #13
 8006788:	429a      	cmp	r2, r3
 800678a:	d204      	bcs.n	8006796 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006792:	60da      	str	r2, [r3, #12]
 8006794:	e0ea      	b.n	800696c <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8006796:	231a      	movs	r3, #26
 8006798:	2218      	movs	r2, #24
 800679a:	189b      	adds	r3, r3, r2
 800679c:	19db      	adds	r3, r3, r7
 800679e:	2201      	movs	r2, #1
 80067a0:	701a      	strb	r2, [r3, #0]
 80067a2:	e0e3      	b.n	800696c <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	69da      	ldr	r2, [r3, #28]
 80067a8:	2380      	movs	r3, #128	; 0x80
 80067aa:	021b      	lsls	r3, r3, #8
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d000      	beq.n	80067b2 <UART_SetConfig+0x31e>
 80067b0:	e085      	b.n	80068be <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 80067b2:	231b      	movs	r3, #27
 80067b4:	2218      	movs	r2, #24
 80067b6:	189b      	adds	r3, r3, r2
 80067b8:	19db      	adds	r3, r3, r7
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	2b08      	cmp	r3, #8
 80067be:	d837      	bhi.n	8006830 <UART_SetConfig+0x39c>
 80067c0:	009a      	lsls	r2, r3, #2
 80067c2:	4b10      	ldr	r3, [pc, #64]	; (8006804 <UART_SetConfig+0x370>)
 80067c4:	18d3      	adds	r3, r2, r3
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067ca:	f7ff fbb5 	bl	8005f38 <HAL_RCC_GetPCLK1Freq>
 80067ce:	0003      	movs	r3, r0
 80067d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067d2:	e036      	b.n	8006842 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067d4:	f7ff fbc6 	bl	8005f64 <HAL_RCC_GetPCLK2Freq>
 80067d8:	0003      	movs	r3, r0
 80067da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067dc:	e031      	b.n	8006842 <UART_SetConfig+0x3ae>
 80067de:	46c0      	nop			; (mov r8, r8)
 80067e0:	efff69f3 	.word	0xefff69f3
 80067e4:	ffffcfff 	.word	0xffffcfff
 80067e8:	40004800 	.word	0x40004800
 80067ec:	fffff4ff 	.word	0xfffff4ff
 80067f0:	40013800 	.word	0x40013800
 80067f4:	40021000 	.word	0x40021000
 80067f8:	40004400 	.word	0x40004400
 80067fc:	003d0900 	.word	0x003d0900
 8006800:	00f42400 	.word	0x00f42400
 8006804:	0800a188 	.word	0x0800a188
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006808:	4b60      	ldr	r3, [pc, #384]	; (800698c <UART_SetConfig+0x4f8>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2210      	movs	r2, #16
 800680e:	4013      	ands	r3, r2
 8006810:	d002      	beq.n	8006818 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006812:	4b5f      	ldr	r3, [pc, #380]	; (8006990 <UART_SetConfig+0x4fc>)
 8006814:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006816:	e014      	b.n	8006842 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8006818:	4b5e      	ldr	r3, [pc, #376]	; (8006994 <UART_SetConfig+0x500>)
 800681a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800681c:	e011      	b.n	8006842 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800681e:	f7ff fadb 	bl	8005dd8 <HAL_RCC_GetSysClockFreq>
 8006822:	0003      	movs	r3, r0
 8006824:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006826:	e00c      	b.n	8006842 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006828:	2380      	movs	r3, #128	; 0x80
 800682a:	021b      	lsls	r3, r3, #8
 800682c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800682e:	e008      	b.n	8006842 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8006830:	2300      	movs	r3, #0
 8006832:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006834:	231a      	movs	r3, #26
 8006836:	2218      	movs	r2, #24
 8006838:	189b      	adds	r3, r3, r2
 800683a:	19db      	adds	r3, r3, r7
 800683c:	2201      	movs	r2, #1
 800683e:	701a      	strb	r2, [r3, #0]
        break;
 8006840:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006844:	2b00      	cmp	r3, #0
 8006846:	d100      	bne.n	800684a <UART_SetConfig+0x3b6>
 8006848:	e090      	b.n	800696c <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800684a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684c:	005a      	lsls	r2, r3, #1
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	085b      	lsrs	r3, r3, #1
 8006854:	18d2      	adds	r2, r2, r3
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	0019      	movs	r1, r3
 800685c:	0010      	movs	r0, r2
 800685e:	f7f9 fc6f 	bl	8000140 <__udivsi3>
 8006862:	0003      	movs	r3, r0
 8006864:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006868:	2b0f      	cmp	r3, #15
 800686a:	d921      	bls.n	80068b0 <UART_SetConfig+0x41c>
 800686c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800686e:	2380      	movs	r3, #128	; 0x80
 8006870:	025b      	lsls	r3, r3, #9
 8006872:	429a      	cmp	r2, r3
 8006874:	d21c      	bcs.n	80068b0 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006878:	b29a      	uxth	r2, r3
 800687a:	200e      	movs	r0, #14
 800687c:	2418      	movs	r4, #24
 800687e:	1903      	adds	r3, r0, r4
 8006880:	19db      	adds	r3, r3, r7
 8006882:	210f      	movs	r1, #15
 8006884:	438a      	bics	r2, r1
 8006886:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688a:	085b      	lsrs	r3, r3, #1
 800688c:	b29b      	uxth	r3, r3
 800688e:	2207      	movs	r2, #7
 8006890:	4013      	ands	r3, r2
 8006892:	b299      	uxth	r1, r3
 8006894:	1903      	adds	r3, r0, r4
 8006896:	19db      	adds	r3, r3, r7
 8006898:	1902      	adds	r2, r0, r4
 800689a:	19d2      	adds	r2, r2, r7
 800689c:	8812      	ldrh	r2, [r2, #0]
 800689e:	430a      	orrs	r2, r1
 80068a0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	1902      	adds	r2, r0, r4
 80068a8:	19d2      	adds	r2, r2, r7
 80068aa:	8812      	ldrh	r2, [r2, #0]
 80068ac:	60da      	str	r2, [r3, #12]
 80068ae:	e05d      	b.n	800696c <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80068b0:	231a      	movs	r3, #26
 80068b2:	2218      	movs	r2, #24
 80068b4:	189b      	adds	r3, r3, r2
 80068b6:	19db      	adds	r3, r3, r7
 80068b8:	2201      	movs	r2, #1
 80068ba:	701a      	strb	r2, [r3, #0]
 80068bc:	e056      	b.n	800696c <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068be:	231b      	movs	r3, #27
 80068c0:	2218      	movs	r2, #24
 80068c2:	189b      	adds	r3, r3, r2
 80068c4:	19db      	adds	r3, r3, r7
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	2b08      	cmp	r3, #8
 80068ca:	d822      	bhi.n	8006912 <UART_SetConfig+0x47e>
 80068cc:	009a      	lsls	r2, r3, #2
 80068ce:	4b32      	ldr	r3, [pc, #200]	; (8006998 <UART_SetConfig+0x504>)
 80068d0:	18d3      	adds	r3, r2, r3
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068d6:	f7ff fb2f 	bl	8005f38 <HAL_RCC_GetPCLK1Freq>
 80068da:	0003      	movs	r3, r0
 80068dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068de:	e021      	b.n	8006924 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068e0:	f7ff fb40 	bl	8005f64 <HAL_RCC_GetPCLK2Freq>
 80068e4:	0003      	movs	r3, r0
 80068e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068e8:	e01c      	b.n	8006924 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068ea:	4b28      	ldr	r3, [pc, #160]	; (800698c <UART_SetConfig+0x4f8>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2210      	movs	r2, #16
 80068f0:	4013      	ands	r3, r2
 80068f2:	d002      	beq.n	80068fa <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80068f4:	4b26      	ldr	r3, [pc, #152]	; (8006990 <UART_SetConfig+0x4fc>)
 80068f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80068f8:	e014      	b.n	8006924 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 80068fa:	4b26      	ldr	r3, [pc, #152]	; (8006994 <UART_SetConfig+0x500>)
 80068fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068fe:	e011      	b.n	8006924 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006900:	f7ff fa6a 	bl	8005dd8 <HAL_RCC_GetSysClockFreq>
 8006904:	0003      	movs	r3, r0
 8006906:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006908:	e00c      	b.n	8006924 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800690a:	2380      	movs	r3, #128	; 0x80
 800690c:	021b      	lsls	r3, r3, #8
 800690e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006910:	e008      	b.n	8006924 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8006912:	2300      	movs	r3, #0
 8006914:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006916:	231a      	movs	r3, #26
 8006918:	2218      	movs	r2, #24
 800691a:	189b      	adds	r3, r3, r2
 800691c:	19db      	adds	r3, r3, r7
 800691e:	2201      	movs	r2, #1
 8006920:	701a      	strb	r2, [r3, #0]
        break;
 8006922:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006926:	2b00      	cmp	r3, #0
 8006928:	d020      	beq.n	800696c <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	085a      	lsrs	r2, r3, #1
 8006930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006932:	18d2      	adds	r2, r2, r3
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	0019      	movs	r1, r3
 800693a:	0010      	movs	r0, r2
 800693c:	f7f9 fc00 	bl	8000140 <__udivsi3>
 8006940:	0003      	movs	r3, r0
 8006942:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006946:	2b0f      	cmp	r3, #15
 8006948:	d90a      	bls.n	8006960 <UART_SetConfig+0x4cc>
 800694a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800694c:	2380      	movs	r3, #128	; 0x80
 800694e:	025b      	lsls	r3, r3, #9
 8006950:	429a      	cmp	r2, r3
 8006952:	d205      	bcs.n	8006960 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006956:	b29a      	uxth	r2, r3
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	60da      	str	r2, [r3, #12]
 800695e:	e005      	b.n	800696c <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8006960:	231a      	movs	r3, #26
 8006962:	2218      	movs	r2, #24
 8006964:	189b      	adds	r3, r3, r2
 8006966:	19db      	adds	r3, r3, r7
 8006968:	2201      	movs	r2, #1
 800696a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	2200      	movs	r2, #0
 8006970:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	2200      	movs	r2, #0
 8006976:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006978:	231a      	movs	r3, #26
 800697a:	2218      	movs	r2, #24
 800697c:	189b      	adds	r3, r3, r2
 800697e:	19db      	adds	r3, r3, r7
 8006980:	781b      	ldrb	r3, [r3, #0]
}
 8006982:	0018      	movs	r0, r3
 8006984:	46bd      	mov	sp, r7
 8006986:	b00e      	add	sp, #56	; 0x38
 8006988:	bdb0      	pop	{r4, r5, r7, pc}
 800698a:	46c0      	nop			; (mov r8, r8)
 800698c:	40021000 	.word	0x40021000
 8006990:	003d0900 	.word	0x003d0900
 8006994:	00f42400 	.word	0x00f42400
 8006998:	0800a1ac 	.word	0x0800a1ac

0800699c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a8:	2201      	movs	r2, #1
 80069aa:	4013      	ands	r3, r2
 80069ac:	d00b      	beq.n	80069c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	4a4a      	ldr	r2, [pc, #296]	; (8006ae0 <UART_AdvFeatureConfig+0x144>)
 80069b6:	4013      	ands	r3, r2
 80069b8:	0019      	movs	r1, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ca:	2202      	movs	r2, #2
 80069cc:	4013      	ands	r3, r2
 80069ce:	d00b      	beq.n	80069e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	4a43      	ldr	r2, [pc, #268]	; (8006ae4 <UART_AdvFeatureConfig+0x148>)
 80069d8:	4013      	ands	r3, r2
 80069da:	0019      	movs	r1, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	430a      	orrs	r2, r1
 80069e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ec:	2204      	movs	r2, #4
 80069ee:	4013      	ands	r3, r2
 80069f0:	d00b      	beq.n	8006a0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	4a3b      	ldr	r2, [pc, #236]	; (8006ae8 <UART_AdvFeatureConfig+0x14c>)
 80069fa:	4013      	ands	r3, r2
 80069fc:	0019      	movs	r1, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	430a      	orrs	r2, r1
 8006a08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0e:	2208      	movs	r2, #8
 8006a10:	4013      	ands	r3, r2
 8006a12:	d00b      	beq.n	8006a2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	4a34      	ldr	r2, [pc, #208]	; (8006aec <UART_AdvFeatureConfig+0x150>)
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	0019      	movs	r1, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	430a      	orrs	r2, r1
 8006a2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a30:	2210      	movs	r2, #16
 8006a32:	4013      	ands	r3, r2
 8006a34:	d00b      	beq.n	8006a4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	4a2c      	ldr	r2, [pc, #176]	; (8006af0 <UART_AdvFeatureConfig+0x154>)
 8006a3e:	4013      	ands	r3, r2
 8006a40:	0019      	movs	r1, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	430a      	orrs	r2, r1
 8006a4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a52:	2220      	movs	r2, #32
 8006a54:	4013      	ands	r3, r2
 8006a56:	d00b      	beq.n	8006a70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	4a25      	ldr	r2, [pc, #148]	; (8006af4 <UART_AdvFeatureConfig+0x158>)
 8006a60:	4013      	ands	r3, r2
 8006a62:	0019      	movs	r1, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a74:	2240      	movs	r2, #64	; 0x40
 8006a76:	4013      	ands	r3, r2
 8006a78:	d01d      	beq.n	8006ab6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	4a1d      	ldr	r2, [pc, #116]	; (8006af8 <UART_AdvFeatureConfig+0x15c>)
 8006a82:	4013      	ands	r3, r2
 8006a84:	0019      	movs	r1, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a96:	2380      	movs	r3, #128	; 0x80
 8006a98:	035b      	lsls	r3, r3, #13
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d10b      	bne.n	8006ab6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	4a15      	ldr	r2, [pc, #84]	; (8006afc <UART_AdvFeatureConfig+0x160>)
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	0019      	movs	r1, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aba:	2280      	movs	r2, #128	; 0x80
 8006abc:	4013      	ands	r3, r2
 8006abe:	d00b      	beq.n	8006ad8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	4a0e      	ldr	r2, [pc, #56]	; (8006b00 <UART_AdvFeatureConfig+0x164>)
 8006ac8:	4013      	ands	r3, r2
 8006aca:	0019      	movs	r1, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	430a      	orrs	r2, r1
 8006ad6:	605a      	str	r2, [r3, #4]
  }
}
 8006ad8:	46c0      	nop			; (mov r8, r8)
 8006ada:	46bd      	mov	sp, r7
 8006adc:	b002      	add	sp, #8
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	fffdffff 	.word	0xfffdffff
 8006ae4:	fffeffff 	.word	0xfffeffff
 8006ae8:	fffbffff 	.word	0xfffbffff
 8006aec:	ffff7fff 	.word	0xffff7fff
 8006af0:	ffffefff 	.word	0xffffefff
 8006af4:	ffffdfff 	.word	0xffffdfff
 8006af8:	ffefffff 	.word	0xffefffff
 8006afc:	ff9fffff 	.word	0xff9fffff
 8006b00:	fff7ffff 	.word	0xfff7ffff

08006b04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b092      	sub	sp, #72	; 0x48
 8006b08:	af02      	add	r7, sp, #8
 8006b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2284      	movs	r2, #132	; 0x84
 8006b10:	2100      	movs	r1, #0
 8006b12:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b14:	f7fd fa58 	bl	8003fc8 <HAL_GetTick>
 8006b18:	0003      	movs	r3, r0
 8006b1a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2208      	movs	r2, #8
 8006b24:	4013      	ands	r3, r2
 8006b26:	2b08      	cmp	r3, #8
 8006b28:	d12c      	bne.n	8006b84 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b2c:	2280      	movs	r2, #128	; 0x80
 8006b2e:	0391      	lsls	r1, r2, #14
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	4a46      	ldr	r2, [pc, #280]	; (8006c4c <UART_CheckIdleState+0x148>)
 8006b34:	9200      	str	r2, [sp, #0]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f000 f88c 	bl	8006c54 <UART_WaitOnFlagUntilTimeout>
 8006b3c:	1e03      	subs	r3, r0, #0
 8006b3e:	d021      	beq.n	8006b84 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b40:	f3ef 8310 	mrs	r3, PRIMASK
 8006b44:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006b48:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b50:	f383 8810 	msr	PRIMASK, r3
}
 8006b54:	46c0      	nop			; (mov r8, r8)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2180      	movs	r1, #128	; 0x80
 8006b62:	438a      	bics	r2, r1
 8006b64:	601a      	str	r2, [r3, #0]
 8006b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6c:	f383 8810 	msr	PRIMASK, r3
}
 8006b70:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2220      	movs	r2, #32
 8006b76:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2278      	movs	r2, #120	; 0x78
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e05f      	b.n	8006c44 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2204      	movs	r2, #4
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	2b04      	cmp	r3, #4
 8006b90:	d146      	bne.n	8006c20 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b94:	2280      	movs	r2, #128	; 0x80
 8006b96:	03d1      	lsls	r1, r2, #15
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	4a2c      	ldr	r2, [pc, #176]	; (8006c4c <UART_CheckIdleState+0x148>)
 8006b9c:	9200      	str	r2, [sp, #0]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f000 f858 	bl	8006c54 <UART_WaitOnFlagUntilTimeout>
 8006ba4:	1e03      	subs	r3, r0, #0
 8006ba6:	d03b      	beq.n	8006c20 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ba8:	f3ef 8310 	mrs	r3, PRIMASK
 8006bac:	60fb      	str	r3, [r7, #12]
  return(result);
 8006bae:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	f383 8810 	msr	PRIMASK, r3
}
 8006bbc:	46c0      	nop			; (mov r8, r8)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4921      	ldr	r1, [pc, #132]	; (8006c50 <UART_CheckIdleState+0x14c>)
 8006bca:	400a      	ands	r2, r1
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	f383 8810 	msr	PRIMASK, r3
}
 8006bd8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bda:	f3ef 8310 	mrs	r3, PRIMASK
 8006bde:	61bb      	str	r3, [r7, #24]
  return(result);
 8006be0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006be2:	633b      	str	r3, [r7, #48]	; 0x30
 8006be4:	2301      	movs	r3, #1
 8006be6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	f383 8810 	msr	PRIMASK, r3
}
 8006bee:	46c0      	nop			; (mov r8, r8)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	689a      	ldr	r2, [r3, #8]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2101      	movs	r1, #1
 8006bfc:	438a      	bics	r2, r1
 8006bfe:	609a      	str	r2, [r3, #8]
 8006c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c02:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c04:	6a3b      	ldr	r3, [r7, #32]
 8006c06:	f383 8810 	msr	PRIMASK, r3
}
 8006c0a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2280      	movs	r2, #128	; 0x80
 8006c10:	2120      	movs	r1, #32
 8006c12:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2278      	movs	r2, #120	; 0x78
 8006c18:	2100      	movs	r1, #0
 8006c1a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e011      	b.n	8006c44 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2220      	movs	r2, #32
 8006c24:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2280      	movs	r2, #128	; 0x80
 8006c2a:	2120      	movs	r1, #32
 8006c2c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2278      	movs	r2, #120	; 0x78
 8006c3e:	2100      	movs	r1, #0
 8006c40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	0018      	movs	r0, r3
 8006c46:	46bd      	mov	sp, r7
 8006c48:	b010      	add	sp, #64	; 0x40
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	01ffffff 	.word	0x01ffffff
 8006c50:	fffffedf 	.word	0xfffffedf

08006c54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	603b      	str	r3, [r7, #0]
 8006c60:	1dfb      	adds	r3, r7, #7
 8006c62:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c64:	e04b      	b.n	8006cfe <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	d048      	beq.n	8006cfe <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c6c:	f7fd f9ac 	bl	8003fc8 <HAL_GetTick>
 8006c70:	0002      	movs	r2, r0
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	69ba      	ldr	r2, [r7, #24]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d302      	bcc.n	8006c82 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e04b      	b.n	8006d1e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2204      	movs	r2, #4
 8006c8e:	4013      	ands	r3, r2
 8006c90:	d035      	beq.n	8006cfe <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	69db      	ldr	r3, [r3, #28]
 8006c98:	2208      	movs	r2, #8
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	2b08      	cmp	r3, #8
 8006c9e:	d111      	bne.n	8006cc4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2208      	movs	r2, #8
 8006ca6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	0018      	movs	r0, r3
 8006cac:	f000 f83c 	bl	8006d28 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2284      	movs	r2, #132	; 0x84
 8006cb4:	2108      	movs	r1, #8
 8006cb6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2278      	movs	r2, #120	; 0x78
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e02c      	b.n	8006d1e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	69da      	ldr	r2, [r3, #28]
 8006cca:	2380      	movs	r3, #128	; 0x80
 8006ccc:	011b      	lsls	r3, r3, #4
 8006cce:	401a      	ands	r2, r3
 8006cd0:	2380      	movs	r3, #128	; 0x80
 8006cd2:	011b      	lsls	r3, r3, #4
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d112      	bne.n	8006cfe <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2280      	movs	r2, #128	; 0x80
 8006cde:	0112      	lsls	r2, r2, #4
 8006ce0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	0018      	movs	r0, r3
 8006ce6:	f000 f81f 	bl	8006d28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2284      	movs	r2, #132	; 0x84
 8006cee:	2120      	movs	r1, #32
 8006cf0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2278      	movs	r2, #120	; 0x78
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e00f      	b.n	8006d1e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	69db      	ldr	r3, [r3, #28]
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	4013      	ands	r3, r2
 8006d08:	68ba      	ldr	r2, [r7, #8]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	425a      	negs	r2, r3
 8006d0e:	4153      	adcs	r3, r2
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	001a      	movs	r2, r3
 8006d14:	1dfb      	adds	r3, r7, #7
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d0a4      	beq.n	8006c66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	0018      	movs	r0, r3
 8006d20:	46bd      	mov	sp, r7
 8006d22:	b004      	add	sp, #16
 8006d24:	bd80      	pop	{r7, pc}
	...

08006d28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b08e      	sub	sp, #56	; 0x38
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d30:	f3ef 8310 	mrs	r3, PRIMASK
 8006d34:	617b      	str	r3, [r7, #20]
  return(result);
 8006d36:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d38:	637b      	str	r3, [r7, #52]	; 0x34
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	f383 8810 	msr	PRIMASK, r3
}
 8006d44:	46c0      	nop			; (mov r8, r8)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4926      	ldr	r1, [pc, #152]	; (8006dec <UART_EndRxTransfer+0xc4>)
 8006d52:	400a      	ands	r2, r1
 8006d54:	601a      	str	r2, [r3, #0]
 8006d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	f383 8810 	msr	PRIMASK, r3
}
 8006d60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d62:	f3ef 8310 	mrs	r3, PRIMASK
 8006d66:	623b      	str	r3, [r7, #32]
  return(result);
 8006d68:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d6a:	633b      	str	r3, [r7, #48]	; 0x30
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	f383 8810 	msr	PRIMASK, r3
}
 8006d76:	46c0      	nop			; (mov r8, r8)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	689a      	ldr	r2, [r3, #8]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2101      	movs	r1, #1
 8006d84:	438a      	bics	r2, r1
 8006d86:	609a      	str	r2, [r3, #8]
 8006d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8e:	f383 8810 	msr	PRIMASK, r3
}
 8006d92:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d118      	bne.n	8006dce <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d9c:	f3ef 8310 	mrs	r3, PRIMASK
 8006da0:	60bb      	str	r3, [r7, #8]
  return(result);
 8006da2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006da6:	2301      	movs	r3, #1
 8006da8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f383 8810 	msr	PRIMASK, r3
}
 8006db0:	46c0      	nop			; (mov r8, r8)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2110      	movs	r1, #16
 8006dbe:	438a      	bics	r2, r1
 8006dc0:	601a      	str	r2, [r3, #0]
 8006dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	f383 8810 	msr	PRIMASK, r3
}
 8006dcc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2280      	movs	r2, #128	; 0x80
 8006dd2:	2120      	movs	r1, #32
 8006dd4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006de2:	46c0      	nop			; (mov r8, r8)
 8006de4:	46bd      	mov	sp, r7
 8006de6:	b00e      	add	sp, #56	; 0x38
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	46c0      	nop			; (mov r8, r8)
 8006dec:	fffffedf 	.word	0xfffffedf

08006df0 <__errno>:
 8006df0:	4b01      	ldr	r3, [pc, #4]	; (8006df8 <__errno+0x8>)
 8006df2:	6818      	ldr	r0, [r3, #0]
 8006df4:	4770      	bx	lr
 8006df6:	46c0      	nop			; (mov r8, r8)
 8006df8:	2000002c 	.word	0x2000002c

08006dfc <__libc_init_array>:
 8006dfc:	b570      	push	{r4, r5, r6, lr}
 8006dfe:	2600      	movs	r6, #0
 8006e00:	4d0c      	ldr	r5, [pc, #48]	; (8006e34 <__libc_init_array+0x38>)
 8006e02:	4c0d      	ldr	r4, [pc, #52]	; (8006e38 <__libc_init_array+0x3c>)
 8006e04:	1b64      	subs	r4, r4, r5
 8006e06:	10a4      	asrs	r4, r4, #2
 8006e08:	42a6      	cmp	r6, r4
 8006e0a:	d109      	bne.n	8006e20 <__libc_init_array+0x24>
 8006e0c:	2600      	movs	r6, #0
 8006e0e:	f003 f8af 	bl	8009f70 <_init>
 8006e12:	4d0a      	ldr	r5, [pc, #40]	; (8006e3c <__libc_init_array+0x40>)
 8006e14:	4c0a      	ldr	r4, [pc, #40]	; (8006e40 <__libc_init_array+0x44>)
 8006e16:	1b64      	subs	r4, r4, r5
 8006e18:	10a4      	asrs	r4, r4, #2
 8006e1a:	42a6      	cmp	r6, r4
 8006e1c:	d105      	bne.n	8006e2a <__libc_init_array+0x2e>
 8006e1e:	bd70      	pop	{r4, r5, r6, pc}
 8006e20:	00b3      	lsls	r3, r6, #2
 8006e22:	58eb      	ldr	r3, [r5, r3]
 8006e24:	4798      	blx	r3
 8006e26:	3601      	adds	r6, #1
 8006e28:	e7ee      	b.n	8006e08 <__libc_init_array+0xc>
 8006e2a:	00b3      	lsls	r3, r6, #2
 8006e2c:	58eb      	ldr	r3, [r5, r3]
 8006e2e:	4798      	blx	r3
 8006e30:	3601      	adds	r6, #1
 8006e32:	e7f2      	b.n	8006e1a <__libc_init_array+0x1e>
 8006e34:	0800a5b4 	.word	0x0800a5b4
 8006e38:	0800a5b4 	.word	0x0800a5b4
 8006e3c:	0800a5b4 	.word	0x0800a5b4
 8006e40:	0800a5b8 	.word	0x0800a5b8

08006e44 <memset>:
 8006e44:	0003      	movs	r3, r0
 8006e46:	1882      	adds	r2, r0, r2
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d100      	bne.n	8006e4e <memset+0xa>
 8006e4c:	4770      	bx	lr
 8006e4e:	7019      	strb	r1, [r3, #0]
 8006e50:	3301      	adds	r3, #1
 8006e52:	e7f9      	b.n	8006e48 <memset+0x4>

08006e54 <__cvt>:
 8006e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e56:	001e      	movs	r6, r3
 8006e58:	2300      	movs	r3, #0
 8006e5a:	0014      	movs	r4, r2
 8006e5c:	b08b      	sub	sp, #44	; 0x2c
 8006e5e:	429e      	cmp	r6, r3
 8006e60:	da04      	bge.n	8006e6c <__cvt+0x18>
 8006e62:	2180      	movs	r1, #128	; 0x80
 8006e64:	0609      	lsls	r1, r1, #24
 8006e66:	1873      	adds	r3, r6, r1
 8006e68:	001e      	movs	r6, r3
 8006e6a:	232d      	movs	r3, #45	; 0x2d
 8006e6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006e6e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006e70:	7013      	strb	r3, [r2, #0]
 8006e72:	2320      	movs	r3, #32
 8006e74:	2203      	movs	r2, #3
 8006e76:	439f      	bics	r7, r3
 8006e78:	2f46      	cmp	r7, #70	; 0x46
 8006e7a:	d007      	beq.n	8006e8c <__cvt+0x38>
 8006e7c:	003b      	movs	r3, r7
 8006e7e:	3b45      	subs	r3, #69	; 0x45
 8006e80:	4259      	negs	r1, r3
 8006e82:	414b      	adcs	r3, r1
 8006e84:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006e86:	3a01      	subs	r2, #1
 8006e88:	18cb      	adds	r3, r1, r3
 8006e8a:	9310      	str	r3, [sp, #64]	; 0x40
 8006e8c:	ab09      	add	r3, sp, #36	; 0x24
 8006e8e:	9304      	str	r3, [sp, #16]
 8006e90:	ab08      	add	r3, sp, #32
 8006e92:	9303      	str	r3, [sp, #12]
 8006e94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e96:	9200      	str	r2, [sp, #0]
 8006e98:	9302      	str	r3, [sp, #8]
 8006e9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e9c:	0022      	movs	r2, r4
 8006e9e:	9301      	str	r3, [sp, #4]
 8006ea0:	0033      	movs	r3, r6
 8006ea2:	f000 fe69 	bl	8007b78 <_dtoa_r>
 8006ea6:	0005      	movs	r5, r0
 8006ea8:	2f47      	cmp	r7, #71	; 0x47
 8006eaa:	d102      	bne.n	8006eb2 <__cvt+0x5e>
 8006eac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006eae:	07db      	lsls	r3, r3, #31
 8006eb0:	d528      	bpl.n	8006f04 <__cvt+0xb0>
 8006eb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006eb4:	18eb      	adds	r3, r5, r3
 8006eb6:	9307      	str	r3, [sp, #28]
 8006eb8:	2f46      	cmp	r7, #70	; 0x46
 8006eba:	d114      	bne.n	8006ee6 <__cvt+0x92>
 8006ebc:	782b      	ldrb	r3, [r5, #0]
 8006ebe:	2b30      	cmp	r3, #48	; 0x30
 8006ec0:	d10c      	bne.n	8006edc <__cvt+0x88>
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	0020      	movs	r0, r4
 8006ec8:	0031      	movs	r1, r6
 8006eca:	f7f9 fabf 	bl	800044c <__aeabi_dcmpeq>
 8006ece:	2800      	cmp	r0, #0
 8006ed0:	d104      	bne.n	8006edc <__cvt+0x88>
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006ed6:	1a9b      	subs	r3, r3, r2
 8006ed8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006eda:	6013      	str	r3, [r2, #0]
 8006edc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ede:	9a07      	ldr	r2, [sp, #28]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	18d3      	adds	r3, r2, r3
 8006ee4:	9307      	str	r3, [sp, #28]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	2300      	movs	r3, #0
 8006eea:	0020      	movs	r0, r4
 8006eec:	0031      	movs	r1, r6
 8006eee:	f7f9 faad 	bl	800044c <__aeabi_dcmpeq>
 8006ef2:	2800      	cmp	r0, #0
 8006ef4:	d001      	beq.n	8006efa <__cvt+0xa6>
 8006ef6:	9b07      	ldr	r3, [sp, #28]
 8006ef8:	9309      	str	r3, [sp, #36]	; 0x24
 8006efa:	2230      	movs	r2, #48	; 0x30
 8006efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006efe:	9907      	ldr	r1, [sp, #28]
 8006f00:	428b      	cmp	r3, r1
 8006f02:	d306      	bcc.n	8006f12 <__cvt+0xbe>
 8006f04:	0028      	movs	r0, r5
 8006f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f08:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006f0a:	1b5b      	subs	r3, r3, r5
 8006f0c:	6013      	str	r3, [r2, #0]
 8006f0e:	b00b      	add	sp, #44	; 0x2c
 8006f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f12:	1c59      	adds	r1, r3, #1
 8006f14:	9109      	str	r1, [sp, #36]	; 0x24
 8006f16:	701a      	strb	r2, [r3, #0]
 8006f18:	e7f0      	b.n	8006efc <__cvt+0xa8>

08006f1a <__exponent>:
 8006f1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f1c:	1c83      	adds	r3, r0, #2
 8006f1e:	b087      	sub	sp, #28
 8006f20:	9303      	str	r3, [sp, #12]
 8006f22:	0005      	movs	r5, r0
 8006f24:	000c      	movs	r4, r1
 8006f26:	232b      	movs	r3, #43	; 0x2b
 8006f28:	7002      	strb	r2, [r0, #0]
 8006f2a:	2900      	cmp	r1, #0
 8006f2c:	da01      	bge.n	8006f32 <__exponent+0x18>
 8006f2e:	424c      	negs	r4, r1
 8006f30:	3302      	adds	r3, #2
 8006f32:	706b      	strb	r3, [r5, #1]
 8006f34:	2c09      	cmp	r4, #9
 8006f36:	dd31      	ble.n	8006f9c <__exponent+0x82>
 8006f38:	270a      	movs	r7, #10
 8006f3a:	ab04      	add	r3, sp, #16
 8006f3c:	1dde      	adds	r6, r3, #7
 8006f3e:	0020      	movs	r0, r4
 8006f40:	0039      	movs	r1, r7
 8006f42:	9601      	str	r6, [sp, #4]
 8006f44:	f7f9 fa6c 	bl	8000420 <__aeabi_idivmod>
 8006f48:	3e01      	subs	r6, #1
 8006f4a:	3130      	adds	r1, #48	; 0x30
 8006f4c:	0020      	movs	r0, r4
 8006f4e:	7031      	strb	r1, [r6, #0]
 8006f50:	0039      	movs	r1, r7
 8006f52:	9402      	str	r4, [sp, #8]
 8006f54:	f7f9 f97e 	bl	8000254 <__divsi3>
 8006f58:	9b02      	ldr	r3, [sp, #8]
 8006f5a:	0004      	movs	r4, r0
 8006f5c:	2b63      	cmp	r3, #99	; 0x63
 8006f5e:	dcee      	bgt.n	8006f3e <__exponent+0x24>
 8006f60:	9b01      	ldr	r3, [sp, #4]
 8006f62:	3430      	adds	r4, #48	; 0x30
 8006f64:	1e9a      	subs	r2, r3, #2
 8006f66:	0013      	movs	r3, r2
 8006f68:	9903      	ldr	r1, [sp, #12]
 8006f6a:	7014      	strb	r4, [r2, #0]
 8006f6c:	a804      	add	r0, sp, #16
 8006f6e:	3007      	adds	r0, #7
 8006f70:	4298      	cmp	r0, r3
 8006f72:	d80e      	bhi.n	8006f92 <__exponent+0x78>
 8006f74:	ab04      	add	r3, sp, #16
 8006f76:	3307      	adds	r3, #7
 8006f78:	2000      	movs	r0, #0
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d804      	bhi.n	8006f88 <__exponent+0x6e>
 8006f7e:	ab04      	add	r3, sp, #16
 8006f80:	3009      	adds	r0, #9
 8006f82:	18c0      	adds	r0, r0, r3
 8006f84:	9b01      	ldr	r3, [sp, #4]
 8006f86:	1ac0      	subs	r0, r0, r3
 8006f88:	9b03      	ldr	r3, [sp, #12]
 8006f8a:	1818      	adds	r0, r3, r0
 8006f8c:	1b40      	subs	r0, r0, r5
 8006f8e:	b007      	add	sp, #28
 8006f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f92:	7818      	ldrb	r0, [r3, #0]
 8006f94:	3301      	adds	r3, #1
 8006f96:	7008      	strb	r0, [r1, #0]
 8006f98:	3101      	adds	r1, #1
 8006f9a:	e7e7      	b.n	8006f6c <__exponent+0x52>
 8006f9c:	2330      	movs	r3, #48	; 0x30
 8006f9e:	18e4      	adds	r4, r4, r3
 8006fa0:	70ab      	strb	r3, [r5, #2]
 8006fa2:	1d28      	adds	r0, r5, #4
 8006fa4:	70ec      	strb	r4, [r5, #3]
 8006fa6:	e7f1      	b.n	8006f8c <__exponent+0x72>

08006fa8 <_printf_float>:
 8006fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006faa:	b095      	sub	sp, #84	; 0x54
 8006fac:	000c      	movs	r4, r1
 8006fae:	9209      	str	r2, [sp, #36]	; 0x24
 8006fb0:	001e      	movs	r6, r3
 8006fb2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006fb4:	0007      	movs	r7, r0
 8006fb6:	f001 fdc7 	bl	8008b48 <_localeconv_r>
 8006fba:	6803      	ldr	r3, [r0, #0]
 8006fbc:	0018      	movs	r0, r3
 8006fbe:	930c      	str	r3, [sp, #48]	; 0x30
 8006fc0:	f7f9 f8a2 	bl	8000108 <strlen>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	9312      	str	r3, [sp, #72]	; 0x48
 8006fc8:	7e23      	ldrb	r3, [r4, #24]
 8006fca:	2207      	movs	r2, #7
 8006fcc:	930a      	str	r3, [sp, #40]	; 0x28
 8006fce:	6823      	ldr	r3, [r4, #0]
 8006fd0:	900e      	str	r0, [sp, #56]	; 0x38
 8006fd2:	930d      	str	r3, [sp, #52]	; 0x34
 8006fd4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006fd6:	682b      	ldr	r3, [r5, #0]
 8006fd8:	05c9      	lsls	r1, r1, #23
 8006fda:	d547      	bpl.n	800706c <_printf_float+0xc4>
 8006fdc:	189b      	adds	r3, r3, r2
 8006fde:	4393      	bics	r3, r2
 8006fe0:	001a      	movs	r2, r3
 8006fe2:	3208      	adds	r2, #8
 8006fe4:	602a      	str	r2, [r5, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	64a2      	str	r2, [r4, #72]	; 0x48
 8006fec:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006fee:	2201      	movs	r2, #1
 8006ff0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006ff2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006ff4:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ff6:	006b      	lsls	r3, r5, #1
 8006ff8:	085b      	lsrs	r3, r3, #1
 8006ffa:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ffc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006ffe:	4ba7      	ldr	r3, [pc, #668]	; (800729c <_printf_float+0x2f4>)
 8007000:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007002:	4252      	negs	r2, r2
 8007004:	f7fb fcd0 	bl	80029a8 <__aeabi_dcmpun>
 8007008:	2800      	cmp	r0, #0
 800700a:	d131      	bne.n	8007070 <_printf_float+0xc8>
 800700c:	2201      	movs	r2, #1
 800700e:	4ba3      	ldr	r3, [pc, #652]	; (800729c <_printf_float+0x2f4>)
 8007010:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007012:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007014:	4252      	negs	r2, r2
 8007016:	f7f9 fa29 	bl	800046c <__aeabi_dcmple>
 800701a:	2800      	cmp	r0, #0
 800701c:	d128      	bne.n	8007070 <_printf_float+0xc8>
 800701e:	2200      	movs	r2, #0
 8007020:	2300      	movs	r3, #0
 8007022:	0029      	movs	r1, r5
 8007024:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007026:	f7f9 fa17 	bl	8000458 <__aeabi_dcmplt>
 800702a:	2800      	cmp	r0, #0
 800702c:	d003      	beq.n	8007036 <_printf_float+0x8e>
 800702e:	0023      	movs	r3, r4
 8007030:	222d      	movs	r2, #45	; 0x2d
 8007032:	3343      	adds	r3, #67	; 0x43
 8007034:	701a      	strb	r2, [r3, #0]
 8007036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007038:	4d99      	ldr	r5, [pc, #612]	; (80072a0 <_printf_float+0x2f8>)
 800703a:	2b47      	cmp	r3, #71	; 0x47
 800703c:	d900      	bls.n	8007040 <_printf_float+0x98>
 800703e:	4d99      	ldr	r5, [pc, #612]	; (80072a4 <_printf_float+0x2fc>)
 8007040:	2303      	movs	r3, #3
 8007042:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007044:	6123      	str	r3, [r4, #16]
 8007046:	3301      	adds	r3, #1
 8007048:	439a      	bics	r2, r3
 800704a:	2300      	movs	r3, #0
 800704c:	6022      	str	r2, [r4, #0]
 800704e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007052:	0021      	movs	r1, r4
 8007054:	0038      	movs	r0, r7
 8007056:	9600      	str	r6, [sp, #0]
 8007058:	aa13      	add	r2, sp, #76	; 0x4c
 800705a:	f000 f9e7 	bl	800742c <_printf_common>
 800705e:	1c43      	adds	r3, r0, #1
 8007060:	d000      	beq.n	8007064 <_printf_float+0xbc>
 8007062:	e0a2      	b.n	80071aa <_printf_float+0x202>
 8007064:	2001      	movs	r0, #1
 8007066:	4240      	negs	r0, r0
 8007068:	b015      	add	sp, #84	; 0x54
 800706a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800706c:	3307      	adds	r3, #7
 800706e:	e7b6      	b.n	8006fde <_printf_float+0x36>
 8007070:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007072:	002b      	movs	r3, r5
 8007074:	0010      	movs	r0, r2
 8007076:	0029      	movs	r1, r5
 8007078:	f7fb fc96 	bl	80029a8 <__aeabi_dcmpun>
 800707c:	2800      	cmp	r0, #0
 800707e:	d00b      	beq.n	8007098 <_printf_float+0xf0>
 8007080:	2d00      	cmp	r5, #0
 8007082:	da03      	bge.n	800708c <_printf_float+0xe4>
 8007084:	0023      	movs	r3, r4
 8007086:	222d      	movs	r2, #45	; 0x2d
 8007088:	3343      	adds	r3, #67	; 0x43
 800708a:	701a      	strb	r2, [r3, #0]
 800708c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800708e:	4d86      	ldr	r5, [pc, #536]	; (80072a8 <_printf_float+0x300>)
 8007090:	2b47      	cmp	r3, #71	; 0x47
 8007092:	d9d5      	bls.n	8007040 <_printf_float+0x98>
 8007094:	4d85      	ldr	r5, [pc, #532]	; (80072ac <_printf_float+0x304>)
 8007096:	e7d3      	b.n	8007040 <_printf_float+0x98>
 8007098:	2220      	movs	r2, #32
 800709a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800709c:	6863      	ldr	r3, [r4, #4]
 800709e:	4391      	bics	r1, r2
 80070a0:	910f      	str	r1, [sp, #60]	; 0x3c
 80070a2:	1c5a      	adds	r2, r3, #1
 80070a4:	d149      	bne.n	800713a <_printf_float+0x192>
 80070a6:	3307      	adds	r3, #7
 80070a8:	6063      	str	r3, [r4, #4]
 80070aa:	2380      	movs	r3, #128	; 0x80
 80070ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070ae:	00db      	lsls	r3, r3, #3
 80070b0:	4313      	orrs	r3, r2
 80070b2:	2200      	movs	r2, #0
 80070b4:	9206      	str	r2, [sp, #24]
 80070b6:	aa12      	add	r2, sp, #72	; 0x48
 80070b8:	9205      	str	r2, [sp, #20]
 80070ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070bc:	a908      	add	r1, sp, #32
 80070be:	9204      	str	r2, [sp, #16]
 80070c0:	aa11      	add	r2, sp, #68	; 0x44
 80070c2:	9203      	str	r2, [sp, #12]
 80070c4:	2223      	movs	r2, #35	; 0x23
 80070c6:	6023      	str	r3, [r4, #0]
 80070c8:	9301      	str	r3, [sp, #4]
 80070ca:	6863      	ldr	r3, [r4, #4]
 80070cc:	1852      	adds	r2, r2, r1
 80070ce:	9202      	str	r2, [sp, #8]
 80070d0:	9300      	str	r3, [sp, #0]
 80070d2:	0038      	movs	r0, r7
 80070d4:	002b      	movs	r3, r5
 80070d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80070d8:	f7ff febc 	bl	8006e54 <__cvt>
 80070dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070de:	0005      	movs	r5, r0
 80070e0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80070e2:	2b47      	cmp	r3, #71	; 0x47
 80070e4:	d108      	bne.n	80070f8 <_printf_float+0x150>
 80070e6:	1ccb      	adds	r3, r1, #3
 80070e8:	db02      	blt.n	80070f0 <_printf_float+0x148>
 80070ea:	6863      	ldr	r3, [r4, #4]
 80070ec:	4299      	cmp	r1, r3
 80070ee:	dd48      	ble.n	8007182 <_printf_float+0x1da>
 80070f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070f2:	3b02      	subs	r3, #2
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	930a      	str	r3, [sp, #40]	; 0x28
 80070f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070fa:	2b65      	cmp	r3, #101	; 0x65
 80070fc:	d824      	bhi.n	8007148 <_printf_float+0x1a0>
 80070fe:	0020      	movs	r0, r4
 8007100:	001a      	movs	r2, r3
 8007102:	3901      	subs	r1, #1
 8007104:	3050      	adds	r0, #80	; 0x50
 8007106:	9111      	str	r1, [sp, #68]	; 0x44
 8007108:	f7ff ff07 	bl	8006f1a <__exponent>
 800710c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800710e:	900b      	str	r0, [sp, #44]	; 0x2c
 8007110:	1813      	adds	r3, r2, r0
 8007112:	6123      	str	r3, [r4, #16]
 8007114:	2a01      	cmp	r2, #1
 8007116:	dc02      	bgt.n	800711e <_printf_float+0x176>
 8007118:	6822      	ldr	r2, [r4, #0]
 800711a:	07d2      	lsls	r2, r2, #31
 800711c:	d501      	bpl.n	8007122 <_printf_float+0x17a>
 800711e:	3301      	adds	r3, #1
 8007120:	6123      	str	r3, [r4, #16]
 8007122:	2323      	movs	r3, #35	; 0x23
 8007124:	aa08      	add	r2, sp, #32
 8007126:	189b      	adds	r3, r3, r2
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d100      	bne.n	8007130 <_printf_float+0x188>
 800712e:	e78f      	b.n	8007050 <_printf_float+0xa8>
 8007130:	0023      	movs	r3, r4
 8007132:	222d      	movs	r2, #45	; 0x2d
 8007134:	3343      	adds	r3, #67	; 0x43
 8007136:	701a      	strb	r2, [r3, #0]
 8007138:	e78a      	b.n	8007050 <_printf_float+0xa8>
 800713a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800713c:	2a47      	cmp	r2, #71	; 0x47
 800713e:	d1b4      	bne.n	80070aa <_printf_float+0x102>
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1b2      	bne.n	80070aa <_printf_float+0x102>
 8007144:	3301      	adds	r3, #1
 8007146:	e7af      	b.n	80070a8 <_printf_float+0x100>
 8007148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800714a:	2b66      	cmp	r3, #102	; 0x66
 800714c:	d11b      	bne.n	8007186 <_printf_float+0x1de>
 800714e:	6863      	ldr	r3, [r4, #4]
 8007150:	2900      	cmp	r1, #0
 8007152:	dd0d      	ble.n	8007170 <_printf_float+0x1c8>
 8007154:	6121      	str	r1, [r4, #16]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d102      	bne.n	8007160 <_printf_float+0x1b8>
 800715a:	6822      	ldr	r2, [r4, #0]
 800715c:	07d2      	lsls	r2, r2, #31
 800715e:	d502      	bpl.n	8007166 <_printf_float+0x1be>
 8007160:	3301      	adds	r3, #1
 8007162:	1859      	adds	r1, r3, r1
 8007164:	6121      	str	r1, [r4, #16]
 8007166:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007168:	65a3      	str	r3, [r4, #88]	; 0x58
 800716a:	2300      	movs	r3, #0
 800716c:	930b      	str	r3, [sp, #44]	; 0x2c
 800716e:	e7d8      	b.n	8007122 <_printf_float+0x17a>
 8007170:	2b00      	cmp	r3, #0
 8007172:	d103      	bne.n	800717c <_printf_float+0x1d4>
 8007174:	2201      	movs	r2, #1
 8007176:	6821      	ldr	r1, [r4, #0]
 8007178:	4211      	tst	r1, r2
 800717a:	d000      	beq.n	800717e <_printf_float+0x1d6>
 800717c:	1c9a      	adds	r2, r3, #2
 800717e:	6122      	str	r2, [r4, #16]
 8007180:	e7f1      	b.n	8007166 <_printf_float+0x1be>
 8007182:	2367      	movs	r3, #103	; 0x67
 8007184:	930a      	str	r3, [sp, #40]	; 0x28
 8007186:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007188:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800718a:	4293      	cmp	r3, r2
 800718c:	db06      	blt.n	800719c <_printf_float+0x1f4>
 800718e:	6822      	ldr	r2, [r4, #0]
 8007190:	6123      	str	r3, [r4, #16]
 8007192:	07d2      	lsls	r2, r2, #31
 8007194:	d5e7      	bpl.n	8007166 <_printf_float+0x1be>
 8007196:	3301      	adds	r3, #1
 8007198:	6123      	str	r3, [r4, #16]
 800719a:	e7e4      	b.n	8007166 <_printf_float+0x1be>
 800719c:	2101      	movs	r1, #1
 800719e:	2b00      	cmp	r3, #0
 80071a0:	dc01      	bgt.n	80071a6 <_printf_float+0x1fe>
 80071a2:	1849      	adds	r1, r1, r1
 80071a4:	1ac9      	subs	r1, r1, r3
 80071a6:	1852      	adds	r2, r2, r1
 80071a8:	e7e9      	b.n	800717e <_printf_float+0x1d6>
 80071aa:	6822      	ldr	r2, [r4, #0]
 80071ac:	0553      	lsls	r3, r2, #21
 80071ae:	d407      	bmi.n	80071c0 <_printf_float+0x218>
 80071b0:	6923      	ldr	r3, [r4, #16]
 80071b2:	002a      	movs	r2, r5
 80071b4:	0038      	movs	r0, r7
 80071b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071b8:	47b0      	blx	r6
 80071ba:	1c43      	adds	r3, r0, #1
 80071bc:	d128      	bne.n	8007210 <_printf_float+0x268>
 80071be:	e751      	b.n	8007064 <_printf_float+0xbc>
 80071c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071c2:	2b65      	cmp	r3, #101	; 0x65
 80071c4:	d800      	bhi.n	80071c8 <_printf_float+0x220>
 80071c6:	e0e1      	b.n	800738c <_printf_float+0x3e4>
 80071c8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80071ca:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80071cc:	2200      	movs	r2, #0
 80071ce:	2300      	movs	r3, #0
 80071d0:	f7f9 f93c 	bl	800044c <__aeabi_dcmpeq>
 80071d4:	2800      	cmp	r0, #0
 80071d6:	d031      	beq.n	800723c <_printf_float+0x294>
 80071d8:	2301      	movs	r3, #1
 80071da:	0038      	movs	r0, r7
 80071dc:	4a34      	ldr	r2, [pc, #208]	; (80072b0 <_printf_float+0x308>)
 80071de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071e0:	47b0      	blx	r6
 80071e2:	1c43      	adds	r3, r0, #1
 80071e4:	d100      	bne.n	80071e8 <_printf_float+0x240>
 80071e6:	e73d      	b.n	8007064 <_printf_float+0xbc>
 80071e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80071ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80071ec:	4293      	cmp	r3, r2
 80071ee:	db02      	blt.n	80071f6 <_printf_float+0x24e>
 80071f0:	6823      	ldr	r3, [r4, #0]
 80071f2:	07db      	lsls	r3, r3, #31
 80071f4:	d50c      	bpl.n	8007210 <_printf_float+0x268>
 80071f6:	0038      	movs	r0, r7
 80071f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071fe:	47b0      	blx	r6
 8007200:	2500      	movs	r5, #0
 8007202:	1c43      	adds	r3, r0, #1
 8007204:	d100      	bne.n	8007208 <_printf_float+0x260>
 8007206:	e72d      	b.n	8007064 <_printf_float+0xbc>
 8007208:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800720a:	3b01      	subs	r3, #1
 800720c:	42ab      	cmp	r3, r5
 800720e:	dc0a      	bgt.n	8007226 <_printf_float+0x27e>
 8007210:	6823      	ldr	r3, [r4, #0]
 8007212:	079b      	lsls	r3, r3, #30
 8007214:	d500      	bpl.n	8007218 <_printf_float+0x270>
 8007216:	e106      	b.n	8007426 <_printf_float+0x47e>
 8007218:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800721a:	68e0      	ldr	r0, [r4, #12]
 800721c:	4298      	cmp	r0, r3
 800721e:	db00      	blt.n	8007222 <_printf_float+0x27a>
 8007220:	e722      	b.n	8007068 <_printf_float+0xc0>
 8007222:	0018      	movs	r0, r3
 8007224:	e720      	b.n	8007068 <_printf_float+0xc0>
 8007226:	0022      	movs	r2, r4
 8007228:	2301      	movs	r3, #1
 800722a:	0038      	movs	r0, r7
 800722c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800722e:	321a      	adds	r2, #26
 8007230:	47b0      	blx	r6
 8007232:	1c43      	adds	r3, r0, #1
 8007234:	d100      	bne.n	8007238 <_printf_float+0x290>
 8007236:	e715      	b.n	8007064 <_printf_float+0xbc>
 8007238:	3501      	adds	r5, #1
 800723a:	e7e5      	b.n	8007208 <_printf_float+0x260>
 800723c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800723e:	2b00      	cmp	r3, #0
 8007240:	dc38      	bgt.n	80072b4 <_printf_float+0x30c>
 8007242:	2301      	movs	r3, #1
 8007244:	0038      	movs	r0, r7
 8007246:	4a1a      	ldr	r2, [pc, #104]	; (80072b0 <_printf_float+0x308>)
 8007248:	9909      	ldr	r1, [sp, #36]	; 0x24
 800724a:	47b0      	blx	r6
 800724c:	1c43      	adds	r3, r0, #1
 800724e:	d100      	bne.n	8007252 <_printf_float+0x2aa>
 8007250:	e708      	b.n	8007064 <_printf_float+0xbc>
 8007252:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007254:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007256:	4313      	orrs	r3, r2
 8007258:	d102      	bne.n	8007260 <_printf_float+0x2b8>
 800725a:	6823      	ldr	r3, [r4, #0]
 800725c:	07db      	lsls	r3, r3, #31
 800725e:	d5d7      	bpl.n	8007210 <_printf_float+0x268>
 8007260:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007262:	0038      	movs	r0, r7
 8007264:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007266:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007268:	47b0      	blx	r6
 800726a:	1c43      	adds	r3, r0, #1
 800726c:	d100      	bne.n	8007270 <_printf_float+0x2c8>
 800726e:	e6f9      	b.n	8007064 <_printf_float+0xbc>
 8007270:	2300      	movs	r3, #0
 8007272:	930a      	str	r3, [sp, #40]	; 0x28
 8007274:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007276:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007278:	425b      	negs	r3, r3
 800727a:	4293      	cmp	r3, r2
 800727c:	dc01      	bgt.n	8007282 <_printf_float+0x2da>
 800727e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007280:	e797      	b.n	80071b2 <_printf_float+0x20a>
 8007282:	0022      	movs	r2, r4
 8007284:	2301      	movs	r3, #1
 8007286:	0038      	movs	r0, r7
 8007288:	9909      	ldr	r1, [sp, #36]	; 0x24
 800728a:	321a      	adds	r2, #26
 800728c:	47b0      	blx	r6
 800728e:	1c43      	adds	r3, r0, #1
 8007290:	d100      	bne.n	8007294 <_printf_float+0x2ec>
 8007292:	e6e7      	b.n	8007064 <_printf_float+0xbc>
 8007294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007296:	3301      	adds	r3, #1
 8007298:	e7eb      	b.n	8007272 <_printf_float+0x2ca>
 800729a:	46c0      	nop			; (mov r8, r8)
 800729c:	7fefffff 	.word	0x7fefffff
 80072a0:	0800a1d4 	.word	0x0800a1d4
 80072a4:	0800a1d8 	.word	0x0800a1d8
 80072a8:	0800a1dc 	.word	0x0800a1dc
 80072ac:	0800a1e0 	.word	0x0800a1e0
 80072b0:	0800a1e4 	.word	0x0800a1e4
 80072b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80072b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80072b8:	920a      	str	r2, [sp, #40]	; 0x28
 80072ba:	429a      	cmp	r2, r3
 80072bc:	dd00      	ble.n	80072c0 <_printf_float+0x318>
 80072be:	930a      	str	r3, [sp, #40]	; 0x28
 80072c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	dc3c      	bgt.n	8007340 <_printf_float+0x398>
 80072c6:	2300      	movs	r3, #0
 80072c8:	930d      	str	r3, [sp, #52]	; 0x34
 80072ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072cc:	43db      	mvns	r3, r3
 80072ce:	17db      	asrs	r3, r3, #31
 80072d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80072d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80072d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80072d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80072d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072da:	4013      	ands	r3, r2
 80072dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80072e2:	4293      	cmp	r3, r2
 80072e4:	dc34      	bgt.n	8007350 <_printf_float+0x3a8>
 80072e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80072e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80072ea:	4293      	cmp	r3, r2
 80072ec:	db3d      	blt.n	800736a <_printf_float+0x3c2>
 80072ee:	6823      	ldr	r3, [r4, #0]
 80072f0:	07db      	lsls	r3, r3, #31
 80072f2:	d43a      	bmi.n	800736a <_printf_float+0x3c2>
 80072f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80072f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072f8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	1a52      	subs	r2, r2, r1
 80072fe:	920a      	str	r2, [sp, #40]	; 0x28
 8007300:	429a      	cmp	r2, r3
 8007302:	dd00      	ble.n	8007306 <_printf_float+0x35e>
 8007304:	930a      	str	r3, [sp, #40]	; 0x28
 8007306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007308:	2b00      	cmp	r3, #0
 800730a:	dc36      	bgt.n	800737a <_printf_float+0x3d2>
 800730c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800730e:	2500      	movs	r5, #0
 8007310:	43db      	mvns	r3, r3
 8007312:	17db      	asrs	r3, r3, #31
 8007314:	930b      	str	r3, [sp, #44]	; 0x2c
 8007316:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007318:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800731a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800731c:	1a9b      	subs	r3, r3, r2
 800731e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007320:	400a      	ands	r2, r1
 8007322:	1a9b      	subs	r3, r3, r2
 8007324:	42ab      	cmp	r3, r5
 8007326:	dc00      	bgt.n	800732a <_printf_float+0x382>
 8007328:	e772      	b.n	8007210 <_printf_float+0x268>
 800732a:	0022      	movs	r2, r4
 800732c:	2301      	movs	r3, #1
 800732e:	0038      	movs	r0, r7
 8007330:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007332:	321a      	adds	r2, #26
 8007334:	47b0      	blx	r6
 8007336:	1c43      	adds	r3, r0, #1
 8007338:	d100      	bne.n	800733c <_printf_float+0x394>
 800733a:	e693      	b.n	8007064 <_printf_float+0xbc>
 800733c:	3501      	adds	r5, #1
 800733e:	e7ea      	b.n	8007316 <_printf_float+0x36e>
 8007340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007342:	002a      	movs	r2, r5
 8007344:	0038      	movs	r0, r7
 8007346:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007348:	47b0      	blx	r6
 800734a:	1c43      	adds	r3, r0, #1
 800734c:	d1bb      	bne.n	80072c6 <_printf_float+0x31e>
 800734e:	e689      	b.n	8007064 <_printf_float+0xbc>
 8007350:	0022      	movs	r2, r4
 8007352:	2301      	movs	r3, #1
 8007354:	0038      	movs	r0, r7
 8007356:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007358:	321a      	adds	r2, #26
 800735a:	47b0      	blx	r6
 800735c:	1c43      	adds	r3, r0, #1
 800735e:	d100      	bne.n	8007362 <_printf_float+0x3ba>
 8007360:	e680      	b.n	8007064 <_printf_float+0xbc>
 8007362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007364:	3301      	adds	r3, #1
 8007366:	930d      	str	r3, [sp, #52]	; 0x34
 8007368:	e7b3      	b.n	80072d2 <_printf_float+0x32a>
 800736a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800736c:	0038      	movs	r0, r7
 800736e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007370:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007372:	47b0      	blx	r6
 8007374:	1c43      	adds	r3, r0, #1
 8007376:	d1bd      	bne.n	80072f4 <_printf_float+0x34c>
 8007378:	e674      	b.n	8007064 <_printf_float+0xbc>
 800737a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800737c:	0038      	movs	r0, r7
 800737e:	18ea      	adds	r2, r5, r3
 8007380:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007384:	47b0      	blx	r6
 8007386:	1c43      	adds	r3, r0, #1
 8007388:	d1c0      	bne.n	800730c <_printf_float+0x364>
 800738a:	e66b      	b.n	8007064 <_printf_float+0xbc>
 800738c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800738e:	2b01      	cmp	r3, #1
 8007390:	dc02      	bgt.n	8007398 <_printf_float+0x3f0>
 8007392:	2301      	movs	r3, #1
 8007394:	421a      	tst	r2, r3
 8007396:	d034      	beq.n	8007402 <_printf_float+0x45a>
 8007398:	2301      	movs	r3, #1
 800739a:	002a      	movs	r2, r5
 800739c:	0038      	movs	r0, r7
 800739e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073a0:	47b0      	blx	r6
 80073a2:	1c43      	adds	r3, r0, #1
 80073a4:	d100      	bne.n	80073a8 <_printf_float+0x400>
 80073a6:	e65d      	b.n	8007064 <_printf_float+0xbc>
 80073a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073aa:	0038      	movs	r0, r7
 80073ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073b0:	47b0      	blx	r6
 80073b2:	1c43      	adds	r3, r0, #1
 80073b4:	d100      	bne.n	80073b8 <_printf_float+0x410>
 80073b6:	e655      	b.n	8007064 <_printf_float+0xbc>
 80073b8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80073ba:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80073bc:	2200      	movs	r2, #0
 80073be:	2300      	movs	r3, #0
 80073c0:	f7f9 f844 	bl	800044c <__aeabi_dcmpeq>
 80073c4:	2800      	cmp	r0, #0
 80073c6:	d11a      	bne.n	80073fe <_printf_float+0x456>
 80073c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073ca:	1c6a      	adds	r2, r5, #1
 80073cc:	3b01      	subs	r3, #1
 80073ce:	0038      	movs	r0, r7
 80073d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073d2:	47b0      	blx	r6
 80073d4:	1c43      	adds	r3, r0, #1
 80073d6:	d10e      	bne.n	80073f6 <_printf_float+0x44e>
 80073d8:	e644      	b.n	8007064 <_printf_float+0xbc>
 80073da:	0022      	movs	r2, r4
 80073dc:	2301      	movs	r3, #1
 80073de:	0038      	movs	r0, r7
 80073e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073e2:	321a      	adds	r2, #26
 80073e4:	47b0      	blx	r6
 80073e6:	1c43      	adds	r3, r0, #1
 80073e8:	d100      	bne.n	80073ec <_printf_float+0x444>
 80073ea:	e63b      	b.n	8007064 <_printf_float+0xbc>
 80073ec:	3501      	adds	r5, #1
 80073ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073f0:	3b01      	subs	r3, #1
 80073f2:	42ab      	cmp	r3, r5
 80073f4:	dcf1      	bgt.n	80073da <_printf_float+0x432>
 80073f6:	0022      	movs	r2, r4
 80073f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073fa:	3250      	adds	r2, #80	; 0x50
 80073fc:	e6da      	b.n	80071b4 <_printf_float+0x20c>
 80073fe:	2500      	movs	r5, #0
 8007400:	e7f5      	b.n	80073ee <_printf_float+0x446>
 8007402:	002a      	movs	r2, r5
 8007404:	e7e3      	b.n	80073ce <_printf_float+0x426>
 8007406:	0022      	movs	r2, r4
 8007408:	2301      	movs	r3, #1
 800740a:	0038      	movs	r0, r7
 800740c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800740e:	3219      	adds	r2, #25
 8007410:	47b0      	blx	r6
 8007412:	1c43      	adds	r3, r0, #1
 8007414:	d100      	bne.n	8007418 <_printf_float+0x470>
 8007416:	e625      	b.n	8007064 <_printf_float+0xbc>
 8007418:	3501      	adds	r5, #1
 800741a:	68e3      	ldr	r3, [r4, #12]
 800741c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800741e:	1a9b      	subs	r3, r3, r2
 8007420:	42ab      	cmp	r3, r5
 8007422:	dcf0      	bgt.n	8007406 <_printf_float+0x45e>
 8007424:	e6f8      	b.n	8007218 <_printf_float+0x270>
 8007426:	2500      	movs	r5, #0
 8007428:	e7f7      	b.n	800741a <_printf_float+0x472>
 800742a:	46c0      	nop			; (mov r8, r8)

0800742c <_printf_common>:
 800742c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800742e:	0015      	movs	r5, r2
 8007430:	9301      	str	r3, [sp, #4]
 8007432:	688a      	ldr	r2, [r1, #8]
 8007434:	690b      	ldr	r3, [r1, #16]
 8007436:	000c      	movs	r4, r1
 8007438:	9000      	str	r0, [sp, #0]
 800743a:	4293      	cmp	r3, r2
 800743c:	da00      	bge.n	8007440 <_printf_common+0x14>
 800743e:	0013      	movs	r3, r2
 8007440:	0022      	movs	r2, r4
 8007442:	602b      	str	r3, [r5, #0]
 8007444:	3243      	adds	r2, #67	; 0x43
 8007446:	7812      	ldrb	r2, [r2, #0]
 8007448:	2a00      	cmp	r2, #0
 800744a:	d001      	beq.n	8007450 <_printf_common+0x24>
 800744c:	3301      	adds	r3, #1
 800744e:	602b      	str	r3, [r5, #0]
 8007450:	6823      	ldr	r3, [r4, #0]
 8007452:	069b      	lsls	r3, r3, #26
 8007454:	d502      	bpl.n	800745c <_printf_common+0x30>
 8007456:	682b      	ldr	r3, [r5, #0]
 8007458:	3302      	adds	r3, #2
 800745a:	602b      	str	r3, [r5, #0]
 800745c:	6822      	ldr	r2, [r4, #0]
 800745e:	2306      	movs	r3, #6
 8007460:	0017      	movs	r7, r2
 8007462:	401f      	ands	r7, r3
 8007464:	421a      	tst	r2, r3
 8007466:	d027      	beq.n	80074b8 <_printf_common+0x8c>
 8007468:	0023      	movs	r3, r4
 800746a:	3343      	adds	r3, #67	; 0x43
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	1e5a      	subs	r2, r3, #1
 8007470:	4193      	sbcs	r3, r2
 8007472:	6822      	ldr	r2, [r4, #0]
 8007474:	0692      	lsls	r2, r2, #26
 8007476:	d430      	bmi.n	80074da <_printf_common+0xae>
 8007478:	0022      	movs	r2, r4
 800747a:	9901      	ldr	r1, [sp, #4]
 800747c:	9800      	ldr	r0, [sp, #0]
 800747e:	9e08      	ldr	r6, [sp, #32]
 8007480:	3243      	adds	r2, #67	; 0x43
 8007482:	47b0      	blx	r6
 8007484:	1c43      	adds	r3, r0, #1
 8007486:	d025      	beq.n	80074d4 <_printf_common+0xa8>
 8007488:	2306      	movs	r3, #6
 800748a:	6820      	ldr	r0, [r4, #0]
 800748c:	682a      	ldr	r2, [r5, #0]
 800748e:	68e1      	ldr	r1, [r4, #12]
 8007490:	2500      	movs	r5, #0
 8007492:	4003      	ands	r3, r0
 8007494:	2b04      	cmp	r3, #4
 8007496:	d103      	bne.n	80074a0 <_printf_common+0x74>
 8007498:	1a8d      	subs	r5, r1, r2
 800749a:	43eb      	mvns	r3, r5
 800749c:	17db      	asrs	r3, r3, #31
 800749e:	401d      	ands	r5, r3
 80074a0:	68a3      	ldr	r3, [r4, #8]
 80074a2:	6922      	ldr	r2, [r4, #16]
 80074a4:	4293      	cmp	r3, r2
 80074a6:	dd01      	ble.n	80074ac <_printf_common+0x80>
 80074a8:	1a9b      	subs	r3, r3, r2
 80074aa:	18ed      	adds	r5, r5, r3
 80074ac:	2700      	movs	r7, #0
 80074ae:	42bd      	cmp	r5, r7
 80074b0:	d120      	bne.n	80074f4 <_printf_common+0xc8>
 80074b2:	2000      	movs	r0, #0
 80074b4:	e010      	b.n	80074d8 <_printf_common+0xac>
 80074b6:	3701      	adds	r7, #1
 80074b8:	68e3      	ldr	r3, [r4, #12]
 80074ba:	682a      	ldr	r2, [r5, #0]
 80074bc:	1a9b      	subs	r3, r3, r2
 80074be:	42bb      	cmp	r3, r7
 80074c0:	ddd2      	ble.n	8007468 <_printf_common+0x3c>
 80074c2:	0022      	movs	r2, r4
 80074c4:	2301      	movs	r3, #1
 80074c6:	9901      	ldr	r1, [sp, #4]
 80074c8:	9800      	ldr	r0, [sp, #0]
 80074ca:	9e08      	ldr	r6, [sp, #32]
 80074cc:	3219      	adds	r2, #25
 80074ce:	47b0      	blx	r6
 80074d0:	1c43      	adds	r3, r0, #1
 80074d2:	d1f0      	bne.n	80074b6 <_printf_common+0x8a>
 80074d4:	2001      	movs	r0, #1
 80074d6:	4240      	negs	r0, r0
 80074d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80074da:	2030      	movs	r0, #48	; 0x30
 80074dc:	18e1      	adds	r1, r4, r3
 80074de:	3143      	adds	r1, #67	; 0x43
 80074e0:	7008      	strb	r0, [r1, #0]
 80074e2:	0021      	movs	r1, r4
 80074e4:	1c5a      	adds	r2, r3, #1
 80074e6:	3145      	adds	r1, #69	; 0x45
 80074e8:	7809      	ldrb	r1, [r1, #0]
 80074ea:	18a2      	adds	r2, r4, r2
 80074ec:	3243      	adds	r2, #67	; 0x43
 80074ee:	3302      	adds	r3, #2
 80074f0:	7011      	strb	r1, [r2, #0]
 80074f2:	e7c1      	b.n	8007478 <_printf_common+0x4c>
 80074f4:	0022      	movs	r2, r4
 80074f6:	2301      	movs	r3, #1
 80074f8:	9901      	ldr	r1, [sp, #4]
 80074fa:	9800      	ldr	r0, [sp, #0]
 80074fc:	9e08      	ldr	r6, [sp, #32]
 80074fe:	321a      	adds	r2, #26
 8007500:	47b0      	blx	r6
 8007502:	1c43      	adds	r3, r0, #1
 8007504:	d0e6      	beq.n	80074d4 <_printf_common+0xa8>
 8007506:	3701      	adds	r7, #1
 8007508:	e7d1      	b.n	80074ae <_printf_common+0x82>
	...

0800750c <_printf_i>:
 800750c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800750e:	b08b      	sub	sp, #44	; 0x2c
 8007510:	9206      	str	r2, [sp, #24]
 8007512:	000a      	movs	r2, r1
 8007514:	3243      	adds	r2, #67	; 0x43
 8007516:	9307      	str	r3, [sp, #28]
 8007518:	9005      	str	r0, [sp, #20]
 800751a:	9204      	str	r2, [sp, #16]
 800751c:	7e0a      	ldrb	r2, [r1, #24]
 800751e:	000c      	movs	r4, r1
 8007520:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007522:	2a78      	cmp	r2, #120	; 0x78
 8007524:	d807      	bhi.n	8007536 <_printf_i+0x2a>
 8007526:	2a62      	cmp	r2, #98	; 0x62
 8007528:	d809      	bhi.n	800753e <_printf_i+0x32>
 800752a:	2a00      	cmp	r2, #0
 800752c:	d100      	bne.n	8007530 <_printf_i+0x24>
 800752e:	e0c1      	b.n	80076b4 <_printf_i+0x1a8>
 8007530:	2a58      	cmp	r2, #88	; 0x58
 8007532:	d100      	bne.n	8007536 <_printf_i+0x2a>
 8007534:	e08c      	b.n	8007650 <_printf_i+0x144>
 8007536:	0026      	movs	r6, r4
 8007538:	3642      	adds	r6, #66	; 0x42
 800753a:	7032      	strb	r2, [r6, #0]
 800753c:	e022      	b.n	8007584 <_printf_i+0x78>
 800753e:	0010      	movs	r0, r2
 8007540:	3863      	subs	r0, #99	; 0x63
 8007542:	2815      	cmp	r0, #21
 8007544:	d8f7      	bhi.n	8007536 <_printf_i+0x2a>
 8007546:	f7f8 fdf1 	bl	800012c <__gnu_thumb1_case_shi>
 800754a:	0016      	.short	0x0016
 800754c:	fff6001f 	.word	0xfff6001f
 8007550:	fff6fff6 	.word	0xfff6fff6
 8007554:	001ffff6 	.word	0x001ffff6
 8007558:	fff6fff6 	.word	0xfff6fff6
 800755c:	fff6fff6 	.word	0xfff6fff6
 8007560:	003600a8 	.word	0x003600a8
 8007564:	fff6009a 	.word	0xfff6009a
 8007568:	00b9fff6 	.word	0x00b9fff6
 800756c:	0036fff6 	.word	0x0036fff6
 8007570:	fff6fff6 	.word	0xfff6fff6
 8007574:	009e      	.short	0x009e
 8007576:	0026      	movs	r6, r4
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	3642      	adds	r6, #66	; 0x42
 800757c:	1d11      	adds	r1, r2, #4
 800757e:	6019      	str	r1, [r3, #0]
 8007580:	6813      	ldr	r3, [r2, #0]
 8007582:	7033      	strb	r3, [r6, #0]
 8007584:	2301      	movs	r3, #1
 8007586:	e0a7      	b.n	80076d8 <_printf_i+0x1cc>
 8007588:	6808      	ldr	r0, [r1, #0]
 800758a:	6819      	ldr	r1, [r3, #0]
 800758c:	1d0a      	adds	r2, r1, #4
 800758e:	0605      	lsls	r5, r0, #24
 8007590:	d50b      	bpl.n	80075aa <_printf_i+0x9e>
 8007592:	680d      	ldr	r5, [r1, #0]
 8007594:	601a      	str	r2, [r3, #0]
 8007596:	2d00      	cmp	r5, #0
 8007598:	da03      	bge.n	80075a2 <_printf_i+0x96>
 800759a:	232d      	movs	r3, #45	; 0x2d
 800759c:	9a04      	ldr	r2, [sp, #16]
 800759e:	426d      	negs	r5, r5
 80075a0:	7013      	strb	r3, [r2, #0]
 80075a2:	4b61      	ldr	r3, [pc, #388]	; (8007728 <_printf_i+0x21c>)
 80075a4:	270a      	movs	r7, #10
 80075a6:	9303      	str	r3, [sp, #12]
 80075a8:	e01b      	b.n	80075e2 <_printf_i+0xd6>
 80075aa:	680d      	ldr	r5, [r1, #0]
 80075ac:	601a      	str	r2, [r3, #0]
 80075ae:	0641      	lsls	r1, r0, #25
 80075b0:	d5f1      	bpl.n	8007596 <_printf_i+0x8a>
 80075b2:	b22d      	sxth	r5, r5
 80075b4:	e7ef      	b.n	8007596 <_printf_i+0x8a>
 80075b6:	680d      	ldr	r5, [r1, #0]
 80075b8:	6819      	ldr	r1, [r3, #0]
 80075ba:	1d08      	adds	r0, r1, #4
 80075bc:	6018      	str	r0, [r3, #0]
 80075be:	062e      	lsls	r6, r5, #24
 80075c0:	d501      	bpl.n	80075c6 <_printf_i+0xba>
 80075c2:	680d      	ldr	r5, [r1, #0]
 80075c4:	e003      	b.n	80075ce <_printf_i+0xc2>
 80075c6:	066d      	lsls	r5, r5, #25
 80075c8:	d5fb      	bpl.n	80075c2 <_printf_i+0xb6>
 80075ca:	680d      	ldr	r5, [r1, #0]
 80075cc:	b2ad      	uxth	r5, r5
 80075ce:	4b56      	ldr	r3, [pc, #344]	; (8007728 <_printf_i+0x21c>)
 80075d0:	2708      	movs	r7, #8
 80075d2:	9303      	str	r3, [sp, #12]
 80075d4:	2a6f      	cmp	r2, #111	; 0x6f
 80075d6:	d000      	beq.n	80075da <_printf_i+0xce>
 80075d8:	3702      	adds	r7, #2
 80075da:	0023      	movs	r3, r4
 80075dc:	2200      	movs	r2, #0
 80075de:	3343      	adds	r3, #67	; 0x43
 80075e0:	701a      	strb	r2, [r3, #0]
 80075e2:	6863      	ldr	r3, [r4, #4]
 80075e4:	60a3      	str	r3, [r4, #8]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	db03      	blt.n	80075f2 <_printf_i+0xe6>
 80075ea:	2204      	movs	r2, #4
 80075ec:	6821      	ldr	r1, [r4, #0]
 80075ee:	4391      	bics	r1, r2
 80075f0:	6021      	str	r1, [r4, #0]
 80075f2:	2d00      	cmp	r5, #0
 80075f4:	d102      	bne.n	80075fc <_printf_i+0xf0>
 80075f6:	9e04      	ldr	r6, [sp, #16]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00c      	beq.n	8007616 <_printf_i+0x10a>
 80075fc:	9e04      	ldr	r6, [sp, #16]
 80075fe:	0028      	movs	r0, r5
 8007600:	0039      	movs	r1, r7
 8007602:	f7f8 fe23 	bl	800024c <__aeabi_uidivmod>
 8007606:	9b03      	ldr	r3, [sp, #12]
 8007608:	3e01      	subs	r6, #1
 800760a:	5c5b      	ldrb	r3, [r3, r1]
 800760c:	7033      	strb	r3, [r6, #0]
 800760e:	002b      	movs	r3, r5
 8007610:	0005      	movs	r5, r0
 8007612:	429f      	cmp	r7, r3
 8007614:	d9f3      	bls.n	80075fe <_printf_i+0xf2>
 8007616:	2f08      	cmp	r7, #8
 8007618:	d109      	bne.n	800762e <_printf_i+0x122>
 800761a:	6823      	ldr	r3, [r4, #0]
 800761c:	07db      	lsls	r3, r3, #31
 800761e:	d506      	bpl.n	800762e <_printf_i+0x122>
 8007620:	6863      	ldr	r3, [r4, #4]
 8007622:	6922      	ldr	r2, [r4, #16]
 8007624:	4293      	cmp	r3, r2
 8007626:	dc02      	bgt.n	800762e <_printf_i+0x122>
 8007628:	2330      	movs	r3, #48	; 0x30
 800762a:	3e01      	subs	r6, #1
 800762c:	7033      	strb	r3, [r6, #0]
 800762e:	9b04      	ldr	r3, [sp, #16]
 8007630:	1b9b      	subs	r3, r3, r6
 8007632:	6123      	str	r3, [r4, #16]
 8007634:	9b07      	ldr	r3, [sp, #28]
 8007636:	0021      	movs	r1, r4
 8007638:	9300      	str	r3, [sp, #0]
 800763a:	9805      	ldr	r0, [sp, #20]
 800763c:	9b06      	ldr	r3, [sp, #24]
 800763e:	aa09      	add	r2, sp, #36	; 0x24
 8007640:	f7ff fef4 	bl	800742c <_printf_common>
 8007644:	1c43      	adds	r3, r0, #1
 8007646:	d14c      	bne.n	80076e2 <_printf_i+0x1d6>
 8007648:	2001      	movs	r0, #1
 800764a:	4240      	negs	r0, r0
 800764c:	b00b      	add	sp, #44	; 0x2c
 800764e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007650:	3145      	adds	r1, #69	; 0x45
 8007652:	700a      	strb	r2, [r1, #0]
 8007654:	4a34      	ldr	r2, [pc, #208]	; (8007728 <_printf_i+0x21c>)
 8007656:	9203      	str	r2, [sp, #12]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	6821      	ldr	r1, [r4, #0]
 800765c:	ca20      	ldmia	r2!, {r5}
 800765e:	601a      	str	r2, [r3, #0]
 8007660:	0608      	lsls	r0, r1, #24
 8007662:	d516      	bpl.n	8007692 <_printf_i+0x186>
 8007664:	07cb      	lsls	r3, r1, #31
 8007666:	d502      	bpl.n	800766e <_printf_i+0x162>
 8007668:	2320      	movs	r3, #32
 800766a:	4319      	orrs	r1, r3
 800766c:	6021      	str	r1, [r4, #0]
 800766e:	2710      	movs	r7, #16
 8007670:	2d00      	cmp	r5, #0
 8007672:	d1b2      	bne.n	80075da <_printf_i+0xce>
 8007674:	2320      	movs	r3, #32
 8007676:	6822      	ldr	r2, [r4, #0]
 8007678:	439a      	bics	r2, r3
 800767a:	6022      	str	r2, [r4, #0]
 800767c:	e7ad      	b.n	80075da <_printf_i+0xce>
 800767e:	2220      	movs	r2, #32
 8007680:	6809      	ldr	r1, [r1, #0]
 8007682:	430a      	orrs	r2, r1
 8007684:	6022      	str	r2, [r4, #0]
 8007686:	0022      	movs	r2, r4
 8007688:	2178      	movs	r1, #120	; 0x78
 800768a:	3245      	adds	r2, #69	; 0x45
 800768c:	7011      	strb	r1, [r2, #0]
 800768e:	4a27      	ldr	r2, [pc, #156]	; (800772c <_printf_i+0x220>)
 8007690:	e7e1      	b.n	8007656 <_printf_i+0x14a>
 8007692:	0648      	lsls	r0, r1, #25
 8007694:	d5e6      	bpl.n	8007664 <_printf_i+0x158>
 8007696:	b2ad      	uxth	r5, r5
 8007698:	e7e4      	b.n	8007664 <_printf_i+0x158>
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	680d      	ldr	r5, [r1, #0]
 800769e:	1d10      	adds	r0, r2, #4
 80076a0:	6949      	ldr	r1, [r1, #20]
 80076a2:	6018      	str	r0, [r3, #0]
 80076a4:	6813      	ldr	r3, [r2, #0]
 80076a6:	062e      	lsls	r6, r5, #24
 80076a8:	d501      	bpl.n	80076ae <_printf_i+0x1a2>
 80076aa:	6019      	str	r1, [r3, #0]
 80076ac:	e002      	b.n	80076b4 <_printf_i+0x1a8>
 80076ae:	066d      	lsls	r5, r5, #25
 80076b0:	d5fb      	bpl.n	80076aa <_printf_i+0x19e>
 80076b2:	8019      	strh	r1, [r3, #0]
 80076b4:	2300      	movs	r3, #0
 80076b6:	9e04      	ldr	r6, [sp, #16]
 80076b8:	6123      	str	r3, [r4, #16]
 80076ba:	e7bb      	b.n	8007634 <_printf_i+0x128>
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	1d11      	adds	r1, r2, #4
 80076c0:	6019      	str	r1, [r3, #0]
 80076c2:	6816      	ldr	r6, [r2, #0]
 80076c4:	2100      	movs	r1, #0
 80076c6:	0030      	movs	r0, r6
 80076c8:	6862      	ldr	r2, [r4, #4]
 80076ca:	f001 fabb 	bl	8008c44 <memchr>
 80076ce:	2800      	cmp	r0, #0
 80076d0:	d001      	beq.n	80076d6 <_printf_i+0x1ca>
 80076d2:	1b80      	subs	r0, r0, r6
 80076d4:	6060      	str	r0, [r4, #4]
 80076d6:	6863      	ldr	r3, [r4, #4]
 80076d8:	6123      	str	r3, [r4, #16]
 80076da:	2300      	movs	r3, #0
 80076dc:	9a04      	ldr	r2, [sp, #16]
 80076de:	7013      	strb	r3, [r2, #0]
 80076e0:	e7a8      	b.n	8007634 <_printf_i+0x128>
 80076e2:	6923      	ldr	r3, [r4, #16]
 80076e4:	0032      	movs	r2, r6
 80076e6:	9906      	ldr	r1, [sp, #24]
 80076e8:	9805      	ldr	r0, [sp, #20]
 80076ea:	9d07      	ldr	r5, [sp, #28]
 80076ec:	47a8      	blx	r5
 80076ee:	1c43      	adds	r3, r0, #1
 80076f0:	d0aa      	beq.n	8007648 <_printf_i+0x13c>
 80076f2:	6823      	ldr	r3, [r4, #0]
 80076f4:	079b      	lsls	r3, r3, #30
 80076f6:	d415      	bmi.n	8007724 <_printf_i+0x218>
 80076f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076fa:	68e0      	ldr	r0, [r4, #12]
 80076fc:	4298      	cmp	r0, r3
 80076fe:	daa5      	bge.n	800764c <_printf_i+0x140>
 8007700:	0018      	movs	r0, r3
 8007702:	e7a3      	b.n	800764c <_printf_i+0x140>
 8007704:	0022      	movs	r2, r4
 8007706:	2301      	movs	r3, #1
 8007708:	9906      	ldr	r1, [sp, #24]
 800770a:	9805      	ldr	r0, [sp, #20]
 800770c:	9e07      	ldr	r6, [sp, #28]
 800770e:	3219      	adds	r2, #25
 8007710:	47b0      	blx	r6
 8007712:	1c43      	adds	r3, r0, #1
 8007714:	d098      	beq.n	8007648 <_printf_i+0x13c>
 8007716:	3501      	adds	r5, #1
 8007718:	68e3      	ldr	r3, [r4, #12]
 800771a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800771c:	1a9b      	subs	r3, r3, r2
 800771e:	42ab      	cmp	r3, r5
 8007720:	dcf0      	bgt.n	8007704 <_printf_i+0x1f8>
 8007722:	e7e9      	b.n	80076f8 <_printf_i+0x1ec>
 8007724:	2500      	movs	r5, #0
 8007726:	e7f7      	b.n	8007718 <_printf_i+0x20c>
 8007728:	0800a1e6 	.word	0x0800a1e6
 800772c:	0800a1f7 	.word	0x0800a1f7

08007730 <iprintf>:
 8007730:	b40f      	push	{r0, r1, r2, r3}
 8007732:	4b0b      	ldr	r3, [pc, #44]	; (8007760 <iprintf+0x30>)
 8007734:	b513      	push	{r0, r1, r4, lr}
 8007736:	681c      	ldr	r4, [r3, #0]
 8007738:	2c00      	cmp	r4, #0
 800773a:	d005      	beq.n	8007748 <iprintf+0x18>
 800773c:	69a3      	ldr	r3, [r4, #24]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d102      	bne.n	8007748 <iprintf+0x18>
 8007742:	0020      	movs	r0, r4
 8007744:	f001 f960 	bl	8008a08 <__sinit>
 8007748:	ab05      	add	r3, sp, #20
 800774a:	0020      	movs	r0, r4
 800774c:	9a04      	ldr	r2, [sp, #16]
 800774e:	68a1      	ldr	r1, [r4, #8]
 8007750:	9301      	str	r3, [sp, #4]
 8007752:	f002 f8bf 	bl	80098d4 <_vfiprintf_r>
 8007756:	bc16      	pop	{r1, r2, r4}
 8007758:	bc08      	pop	{r3}
 800775a:	b004      	add	sp, #16
 800775c:	4718      	bx	r3
 800775e:	46c0      	nop			; (mov r8, r8)
 8007760:	2000002c 	.word	0x2000002c

08007764 <putchar>:
 8007764:	4b08      	ldr	r3, [pc, #32]	; (8007788 <putchar+0x24>)
 8007766:	b570      	push	{r4, r5, r6, lr}
 8007768:	681c      	ldr	r4, [r3, #0]
 800776a:	0005      	movs	r5, r0
 800776c:	2c00      	cmp	r4, #0
 800776e:	d005      	beq.n	800777c <putchar+0x18>
 8007770:	69a3      	ldr	r3, [r4, #24]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d102      	bne.n	800777c <putchar+0x18>
 8007776:	0020      	movs	r0, r4
 8007778:	f001 f946 	bl	8008a08 <__sinit>
 800777c:	0029      	movs	r1, r5
 800777e:	0020      	movs	r0, r4
 8007780:	68a2      	ldr	r2, [r4, #8]
 8007782:	f002 f9e1 	bl	8009b48 <_putc_r>
 8007786:	bd70      	pop	{r4, r5, r6, pc}
 8007788:	2000002c 	.word	0x2000002c

0800778c <_puts_r>:
 800778c:	b570      	push	{r4, r5, r6, lr}
 800778e:	0005      	movs	r5, r0
 8007790:	000e      	movs	r6, r1
 8007792:	2800      	cmp	r0, #0
 8007794:	d004      	beq.n	80077a0 <_puts_r+0x14>
 8007796:	6983      	ldr	r3, [r0, #24]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d101      	bne.n	80077a0 <_puts_r+0x14>
 800779c:	f001 f934 	bl	8008a08 <__sinit>
 80077a0:	69ab      	ldr	r3, [r5, #24]
 80077a2:	68ac      	ldr	r4, [r5, #8]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d102      	bne.n	80077ae <_puts_r+0x22>
 80077a8:	0028      	movs	r0, r5
 80077aa:	f001 f92d 	bl	8008a08 <__sinit>
 80077ae:	4b2d      	ldr	r3, [pc, #180]	; (8007864 <_puts_r+0xd8>)
 80077b0:	429c      	cmp	r4, r3
 80077b2:	d122      	bne.n	80077fa <_puts_r+0x6e>
 80077b4:	686c      	ldr	r4, [r5, #4]
 80077b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077b8:	07db      	lsls	r3, r3, #31
 80077ba:	d405      	bmi.n	80077c8 <_puts_r+0x3c>
 80077bc:	89a3      	ldrh	r3, [r4, #12]
 80077be:	059b      	lsls	r3, r3, #22
 80077c0:	d402      	bmi.n	80077c8 <_puts_r+0x3c>
 80077c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077c4:	f001 f9c5 	bl	8008b52 <__retarget_lock_acquire_recursive>
 80077c8:	89a3      	ldrh	r3, [r4, #12]
 80077ca:	071b      	lsls	r3, r3, #28
 80077cc:	d502      	bpl.n	80077d4 <_puts_r+0x48>
 80077ce:	6923      	ldr	r3, [r4, #16]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d129      	bne.n	8007828 <_puts_r+0x9c>
 80077d4:	0021      	movs	r1, r4
 80077d6:	0028      	movs	r0, r5
 80077d8:	f000 f8ca 	bl	8007970 <__swsetup_r>
 80077dc:	2800      	cmp	r0, #0
 80077de:	d023      	beq.n	8007828 <_puts_r+0x9c>
 80077e0:	2501      	movs	r5, #1
 80077e2:	426d      	negs	r5, r5
 80077e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077e6:	07db      	lsls	r3, r3, #31
 80077e8:	d405      	bmi.n	80077f6 <_puts_r+0x6a>
 80077ea:	89a3      	ldrh	r3, [r4, #12]
 80077ec:	059b      	lsls	r3, r3, #22
 80077ee:	d402      	bmi.n	80077f6 <_puts_r+0x6a>
 80077f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077f2:	f001 f9af 	bl	8008b54 <__retarget_lock_release_recursive>
 80077f6:	0028      	movs	r0, r5
 80077f8:	bd70      	pop	{r4, r5, r6, pc}
 80077fa:	4b1b      	ldr	r3, [pc, #108]	; (8007868 <_puts_r+0xdc>)
 80077fc:	429c      	cmp	r4, r3
 80077fe:	d101      	bne.n	8007804 <_puts_r+0x78>
 8007800:	68ac      	ldr	r4, [r5, #8]
 8007802:	e7d8      	b.n	80077b6 <_puts_r+0x2a>
 8007804:	4b19      	ldr	r3, [pc, #100]	; (800786c <_puts_r+0xe0>)
 8007806:	429c      	cmp	r4, r3
 8007808:	d1d5      	bne.n	80077b6 <_puts_r+0x2a>
 800780a:	68ec      	ldr	r4, [r5, #12]
 800780c:	e7d3      	b.n	80077b6 <_puts_r+0x2a>
 800780e:	3601      	adds	r6, #1
 8007810:	60a3      	str	r3, [r4, #8]
 8007812:	2b00      	cmp	r3, #0
 8007814:	da04      	bge.n	8007820 <_puts_r+0x94>
 8007816:	69a2      	ldr	r2, [r4, #24]
 8007818:	429a      	cmp	r2, r3
 800781a:	dc16      	bgt.n	800784a <_puts_r+0xbe>
 800781c:	290a      	cmp	r1, #10
 800781e:	d014      	beq.n	800784a <_puts_r+0xbe>
 8007820:	6823      	ldr	r3, [r4, #0]
 8007822:	1c5a      	adds	r2, r3, #1
 8007824:	6022      	str	r2, [r4, #0]
 8007826:	7019      	strb	r1, [r3, #0]
 8007828:	68a3      	ldr	r3, [r4, #8]
 800782a:	7831      	ldrb	r1, [r6, #0]
 800782c:	3b01      	subs	r3, #1
 800782e:	2900      	cmp	r1, #0
 8007830:	d1ed      	bne.n	800780e <_puts_r+0x82>
 8007832:	60a3      	str	r3, [r4, #8]
 8007834:	2b00      	cmp	r3, #0
 8007836:	da0f      	bge.n	8007858 <_puts_r+0xcc>
 8007838:	0028      	movs	r0, r5
 800783a:	0022      	movs	r2, r4
 800783c:	310a      	adds	r1, #10
 800783e:	f000 f841 	bl	80078c4 <__swbuf_r>
 8007842:	250a      	movs	r5, #10
 8007844:	1c43      	adds	r3, r0, #1
 8007846:	d1cd      	bne.n	80077e4 <_puts_r+0x58>
 8007848:	e7ca      	b.n	80077e0 <_puts_r+0x54>
 800784a:	0022      	movs	r2, r4
 800784c:	0028      	movs	r0, r5
 800784e:	f000 f839 	bl	80078c4 <__swbuf_r>
 8007852:	1c43      	adds	r3, r0, #1
 8007854:	d1e8      	bne.n	8007828 <_puts_r+0x9c>
 8007856:	e7c3      	b.n	80077e0 <_puts_r+0x54>
 8007858:	250a      	movs	r5, #10
 800785a:	6823      	ldr	r3, [r4, #0]
 800785c:	1c5a      	adds	r2, r3, #1
 800785e:	6022      	str	r2, [r4, #0]
 8007860:	701d      	strb	r5, [r3, #0]
 8007862:	e7bf      	b.n	80077e4 <_puts_r+0x58>
 8007864:	0800a2b8 	.word	0x0800a2b8
 8007868:	0800a2d8 	.word	0x0800a2d8
 800786c:	0800a298 	.word	0x0800a298

08007870 <puts>:
 8007870:	b510      	push	{r4, lr}
 8007872:	4b03      	ldr	r3, [pc, #12]	; (8007880 <puts+0x10>)
 8007874:	0001      	movs	r1, r0
 8007876:	6818      	ldr	r0, [r3, #0]
 8007878:	f7ff ff88 	bl	800778c <_puts_r>
 800787c:	bd10      	pop	{r4, pc}
 800787e:	46c0      	nop			; (mov r8, r8)
 8007880:	2000002c 	.word	0x2000002c

08007884 <siprintf>:
 8007884:	b40e      	push	{r1, r2, r3}
 8007886:	b500      	push	{lr}
 8007888:	490b      	ldr	r1, [pc, #44]	; (80078b8 <siprintf+0x34>)
 800788a:	b09c      	sub	sp, #112	; 0x70
 800788c:	ab1d      	add	r3, sp, #116	; 0x74
 800788e:	9002      	str	r0, [sp, #8]
 8007890:	9006      	str	r0, [sp, #24]
 8007892:	9107      	str	r1, [sp, #28]
 8007894:	9104      	str	r1, [sp, #16]
 8007896:	4809      	ldr	r0, [pc, #36]	; (80078bc <siprintf+0x38>)
 8007898:	4909      	ldr	r1, [pc, #36]	; (80078c0 <siprintf+0x3c>)
 800789a:	cb04      	ldmia	r3!, {r2}
 800789c:	9105      	str	r1, [sp, #20]
 800789e:	6800      	ldr	r0, [r0, #0]
 80078a0:	a902      	add	r1, sp, #8
 80078a2:	9301      	str	r3, [sp, #4]
 80078a4:	f001 feee 	bl	8009684 <_svfiprintf_r>
 80078a8:	2300      	movs	r3, #0
 80078aa:	9a02      	ldr	r2, [sp, #8]
 80078ac:	7013      	strb	r3, [r2, #0]
 80078ae:	b01c      	add	sp, #112	; 0x70
 80078b0:	bc08      	pop	{r3}
 80078b2:	b003      	add	sp, #12
 80078b4:	4718      	bx	r3
 80078b6:	46c0      	nop			; (mov r8, r8)
 80078b8:	7fffffff 	.word	0x7fffffff
 80078bc:	2000002c 	.word	0x2000002c
 80078c0:	ffff0208 	.word	0xffff0208

080078c4 <__swbuf_r>:
 80078c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078c6:	0005      	movs	r5, r0
 80078c8:	000e      	movs	r6, r1
 80078ca:	0014      	movs	r4, r2
 80078cc:	2800      	cmp	r0, #0
 80078ce:	d004      	beq.n	80078da <__swbuf_r+0x16>
 80078d0:	6983      	ldr	r3, [r0, #24]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d101      	bne.n	80078da <__swbuf_r+0x16>
 80078d6:	f001 f897 	bl	8008a08 <__sinit>
 80078da:	4b22      	ldr	r3, [pc, #136]	; (8007964 <__swbuf_r+0xa0>)
 80078dc:	429c      	cmp	r4, r3
 80078de:	d12e      	bne.n	800793e <__swbuf_r+0x7a>
 80078e0:	686c      	ldr	r4, [r5, #4]
 80078e2:	69a3      	ldr	r3, [r4, #24]
 80078e4:	60a3      	str	r3, [r4, #8]
 80078e6:	89a3      	ldrh	r3, [r4, #12]
 80078e8:	071b      	lsls	r3, r3, #28
 80078ea:	d532      	bpl.n	8007952 <__swbuf_r+0x8e>
 80078ec:	6923      	ldr	r3, [r4, #16]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d02f      	beq.n	8007952 <__swbuf_r+0x8e>
 80078f2:	6823      	ldr	r3, [r4, #0]
 80078f4:	6922      	ldr	r2, [r4, #16]
 80078f6:	b2f7      	uxtb	r7, r6
 80078f8:	1a98      	subs	r0, r3, r2
 80078fa:	6963      	ldr	r3, [r4, #20]
 80078fc:	b2f6      	uxtb	r6, r6
 80078fe:	4283      	cmp	r3, r0
 8007900:	dc05      	bgt.n	800790e <__swbuf_r+0x4a>
 8007902:	0021      	movs	r1, r4
 8007904:	0028      	movs	r0, r5
 8007906:	f000 ffdd 	bl	80088c4 <_fflush_r>
 800790a:	2800      	cmp	r0, #0
 800790c:	d127      	bne.n	800795e <__swbuf_r+0x9a>
 800790e:	68a3      	ldr	r3, [r4, #8]
 8007910:	3001      	adds	r0, #1
 8007912:	3b01      	subs	r3, #1
 8007914:	60a3      	str	r3, [r4, #8]
 8007916:	6823      	ldr	r3, [r4, #0]
 8007918:	1c5a      	adds	r2, r3, #1
 800791a:	6022      	str	r2, [r4, #0]
 800791c:	701f      	strb	r7, [r3, #0]
 800791e:	6963      	ldr	r3, [r4, #20]
 8007920:	4283      	cmp	r3, r0
 8007922:	d004      	beq.n	800792e <__swbuf_r+0x6a>
 8007924:	89a3      	ldrh	r3, [r4, #12]
 8007926:	07db      	lsls	r3, r3, #31
 8007928:	d507      	bpl.n	800793a <__swbuf_r+0x76>
 800792a:	2e0a      	cmp	r6, #10
 800792c:	d105      	bne.n	800793a <__swbuf_r+0x76>
 800792e:	0021      	movs	r1, r4
 8007930:	0028      	movs	r0, r5
 8007932:	f000 ffc7 	bl	80088c4 <_fflush_r>
 8007936:	2800      	cmp	r0, #0
 8007938:	d111      	bne.n	800795e <__swbuf_r+0x9a>
 800793a:	0030      	movs	r0, r6
 800793c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800793e:	4b0a      	ldr	r3, [pc, #40]	; (8007968 <__swbuf_r+0xa4>)
 8007940:	429c      	cmp	r4, r3
 8007942:	d101      	bne.n	8007948 <__swbuf_r+0x84>
 8007944:	68ac      	ldr	r4, [r5, #8]
 8007946:	e7cc      	b.n	80078e2 <__swbuf_r+0x1e>
 8007948:	4b08      	ldr	r3, [pc, #32]	; (800796c <__swbuf_r+0xa8>)
 800794a:	429c      	cmp	r4, r3
 800794c:	d1c9      	bne.n	80078e2 <__swbuf_r+0x1e>
 800794e:	68ec      	ldr	r4, [r5, #12]
 8007950:	e7c7      	b.n	80078e2 <__swbuf_r+0x1e>
 8007952:	0021      	movs	r1, r4
 8007954:	0028      	movs	r0, r5
 8007956:	f000 f80b 	bl	8007970 <__swsetup_r>
 800795a:	2800      	cmp	r0, #0
 800795c:	d0c9      	beq.n	80078f2 <__swbuf_r+0x2e>
 800795e:	2601      	movs	r6, #1
 8007960:	4276      	negs	r6, r6
 8007962:	e7ea      	b.n	800793a <__swbuf_r+0x76>
 8007964:	0800a2b8 	.word	0x0800a2b8
 8007968:	0800a2d8 	.word	0x0800a2d8
 800796c:	0800a298 	.word	0x0800a298

08007970 <__swsetup_r>:
 8007970:	4b37      	ldr	r3, [pc, #220]	; (8007a50 <__swsetup_r+0xe0>)
 8007972:	b570      	push	{r4, r5, r6, lr}
 8007974:	681d      	ldr	r5, [r3, #0]
 8007976:	0006      	movs	r6, r0
 8007978:	000c      	movs	r4, r1
 800797a:	2d00      	cmp	r5, #0
 800797c:	d005      	beq.n	800798a <__swsetup_r+0x1a>
 800797e:	69ab      	ldr	r3, [r5, #24]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d102      	bne.n	800798a <__swsetup_r+0x1a>
 8007984:	0028      	movs	r0, r5
 8007986:	f001 f83f 	bl	8008a08 <__sinit>
 800798a:	4b32      	ldr	r3, [pc, #200]	; (8007a54 <__swsetup_r+0xe4>)
 800798c:	429c      	cmp	r4, r3
 800798e:	d10f      	bne.n	80079b0 <__swsetup_r+0x40>
 8007990:	686c      	ldr	r4, [r5, #4]
 8007992:	230c      	movs	r3, #12
 8007994:	5ee2      	ldrsh	r2, [r4, r3]
 8007996:	b293      	uxth	r3, r2
 8007998:	0711      	lsls	r1, r2, #28
 800799a:	d42d      	bmi.n	80079f8 <__swsetup_r+0x88>
 800799c:	06d9      	lsls	r1, r3, #27
 800799e:	d411      	bmi.n	80079c4 <__swsetup_r+0x54>
 80079a0:	2309      	movs	r3, #9
 80079a2:	2001      	movs	r0, #1
 80079a4:	6033      	str	r3, [r6, #0]
 80079a6:	3337      	adds	r3, #55	; 0x37
 80079a8:	4313      	orrs	r3, r2
 80079aa:	81a3      	strh	r3, [r4, #12]
 80079ac:	4240      	negs	r0, r0
 80079ae:	bd70      	pop	{r4, r5, r6, pc}
 80079b0:	4b29      	ldr	r3, [pc, #164]	; (8007a58 <__swsetup_r+0xe8>)
 80079b2:	429c      	cmp	r4, r3
 80079b4:	d101      	bne.n	80079ba <__swsetup_r+0x4a>
 80079b6:	68ac      	ldr	r4, [r5, #8]
 80079b8:	e7eb      	b.n	8007992 <__swsetup_r+0x22>
 80079ba:	4b28      	ldr	r3, [pc, #160]	; (8007a5c <__swsetup_r+0xec>)
 80079bc:	429c      	cmp	r4, r3
 80079be:	d1e8      	bne.n	8007992 <__swsetup_r+0x22>
 80079c0:	68ec      	ldr	r4, [r5, #12]
 80079c2:	e7e6      	b.n	8007992 <__swsetup_r+0x22>
 80079c4:	075b      	lsls	r3, r3, #29
 80079c6:	d513      	bpl.n	80079f0 <__swsetup_r+0x80>
 80079c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079ca:	2900      	cmp	r1, #0
 80079cc:	d008      	beq.n	80079e0 <__swsetup_r+0x70>
 80079ce:	0023      	movs	r3, r4
 80079d0:	3344      	adds	r3, #68	; 0x44
 80079d2:	4299      	cmp	r1, r3
 80079d4:	d002      	beq.n	80079dc <__swsetup_r+0x6c>
 80079d6:	0030      	movs	r0, r6
 80079d8:	f001 fd10 	bl	80093fc <_free_r>
 80079dc:	2300      	movs	r3, #0
 80079de:	6363      	str	r3, [r4, #52]	; 0x34
 80079e0:	2224      	movs	r2, #36	; 0x24
 80079e2:	89a3      	ldrh	r3, [r4, #12]
 80079e4:	4393      	bics	r3, r2
 80079e6:	81a3      	strh	r3, [r4, #12]
 80079e8:	2300      	movs	r3, #0
 80079ea:	6063      	str	r3, [r4, #4]
 80079ec:	6923      	ldr	r3, [r4, #16]
 80079ee:	6023      	str	r3, [r4, #0]
 80079f0:	2308      	movs	r3, #8
 80079f2:	89a2      	ldrh	r2, [r4, #12]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	81a3      	strh	r3, [r4, #12]
 80079f8:	6923      	ldr	r3, [r4, #16]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d10b      	bne.n	8007a16 <__swsetup_r+0xa6>
 80079fe:	21a0      	movs	r1, #160	; 0xa0
 8007a00:	2280      	movs	r2, #128	; 0x80
 8007a02:	89a3      	ldrh	r3, [r4, #12]
 8007a04:	0089      	lsls	r1, r1, #2
 8007a06:	0092      	lsls	r2, r2, #2
 8007a08:	400b      	ands	r3, r1
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d003      	beq.n	8007a16 <__swsetup_r+0xa6>
 8007a0e:	0021      	movs	r1, r4
 8007a10:	0030      	movs	r0, r6
 8007a12:	f001 f8c9 	bl	8008ba8 <__smakebuf_r>
 8007a16:	220c      	movs	r2, #12
 8007a18:	5ea3      	ldrsh	r3, [r4, r2]
 8007a1a:	2001      	movs	r0, #1
 8007a1c:	001a      	movs	r2, r3
 8007a1e:	b299      	uxth	r1, r3
 8007a20:	4002      	ands	r2, r0
 8007a22:	4203      	tst	r3, r0
 8007a24:	d00f      	beq.n	8007a46 <__swsetup_r+0xd6>
 8007a26:	2200      	movs	r2, #0
 8007a28:	60a2      	str	r2, [r4, #8]
 8007a2a:	6962      	ldr	r2, [r4, #20]
 8007a2c:	4252      	negs	r2, r2
 8007a2e:	61a2      	str	r2, [r4, #24]
 8007a30:	2000      	movs	r0, #0
 8007a32:	6922      	ldr	r2, [r4, #16]
 8007a34:	4282      	cmp	r2, r0
 8007a36:	d1ba      	bne.n	80079ae <__swsetup_r+0x3e>
 8007a38:	060a      	lsls	r2, r1, #24
 8007a3a:	d5b8      	bpl.n	80079ae <__swsetup_r+0x3e>
 8007a3c:	2240      	movs	r2, #64	; 0x40
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	81a3      	strh	r3, [r4, #12]
 8007a42:	3801      	subs	r0, #1
 8007a44:	e7b3      	b.n	80079ae <__swsetup_r+0x3e>
 8007a46:	0788      	lsls	r0, r1, #30
 8007a48:	d400      	bmi.n	8007a4c <__swsetup_r+0xdc>
 8007a4a:	6962      	ldr	r2, [r4, #20]
 8007a4c:	60a2      	str	r2, [r4, #8]
 8007a4e:	e7ef      	b.n	8007a30 <__swsetup_r+0xc0>
 8007a50:	2000002c 	.word	0x2000002c
 8007a54:	0800a2b8 	.word	0x0800a2b8
 8007a58:	0800a2d8 	.word	0x0800a2d8
 8007a5c:	0800a298 	.word	0x0800a298

08007a60 <quorem>:
 8007a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a62:	0006      	movs	r6, r0
 8007a64:	690b      	ldr	r3, [r1, #16]
 8007a66:	6932      	ldr	r2, [r6, #16]
 8007a68:	b087      	sub	sp, #28
 8007a6a:	2000      	movs	r0, #0
 8007a6c:	9103      	str	r1, [sp, #12]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	db65      	blt.n	8007b3e <quorem+0xde>
 8007a72:	3b01      	subs	r3, #1
 8007a74:	009c      	lsls	r4, r3, #2
 8007a76:	9300      	str	r3, [sp, #0]
 8007a78:	000b      	movs	r3, r1
 8007a7a:	3314      	adds	r3, #20
 8007a7c:	9305      	str	r3, [sp, #20]
 8007a7e:	191b      	adds	r3, r3, r4
 8007a80:	9304      	str	r3, [sp, #16]
 8007a82:	0033      	movs	r3, r6
 8007a84:	3314      	adds	r3, #20
 8007a86:	9302      	str	r3, [sp, #8]
 8007a88:	191c      	adds	r4, r3, r4
 8007a8a:	9b04      	ldr	r3, [sp, #16]
 8007a8c:	6827      	ldr	r7, [r4, #0]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	0038      	movs	r0, r7
 8007a92:	1c5d      	adds	r5, r3, #1
 8007a94:	0029      	movs	r1, r5
 8007a96:	9301      	str	r3, [sp, #4]
 8007a98:	f7f8 fb52 	bl	8000140 <__udivsi3>
 8007a9c:	9001      	str	r0, [sp, #4]
 8007a9e:	42af      	cmp	r7, r5
 8007aa0:	d324      	bcc.n	8007aec <quorem+0x8c>
 8007aa2:	2500      	movs	r5, #0
 8007aa4:	46ac      	mov	ip, r5
 8007aa6:	9802      	ldr	r0, [sp, #8]
 8007aa8:	9f05      	ldr	r7, [sp, #20]
 8007aaa:	cf08      	ldmia	r7!, {r3}
 8007aac:	9a01      	ldr	r2, [sp, #4]
 8007aae:	b299      	uxth	r1, r3
 8007ab0:	4351      	muls	r1, r2
 8007ab2:	0c1b      	lsrs	r3, r3, #16
 8007ab4:	4353      	muls	r3, r2
 8007ab6:	1949      	adds	r1, r1, r5
 8007ab8:	0c0a      	lsrs	r2, r1, #16
 8007aba:	189b      	adds	r3, r3, r2
 8007abc:	6802      	ldr	r2, [r0, #0]
 8007abe:	b289      	uxth	r1, r1
 8007ac0:	b292      	uxth	r2, r2
 8007ac2:	4462      	add	r2, ip
 8007ac4:	1a52      	subs	r2, r2, r1
 8007ac6:	6801      	ldr	r1, [r0, #0]
 8007ac8:	0c1d      	lsrs	r5, r3, #16
 8007aca:	0c09      	lsrs	r1, r1, #16
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	1acb      	subs	r3, r1, r3
 8007ad0:	1411      	asrs	r1, r2, #16
 8007ad2:	185b      	adds	r3, r3, r1
 8007ad4:	1419      	asrs	r1, r3, #16
 8007ad6:	b292      	uxth	r2, r2
 8007ad8:	041b      	lsls	r3, r3, #16
 8007ada:	431a      	orrs	r2, r3
 8007adc:	9b04      	ldr	r3, [sp, #16]
 8007ade:	468c      	mov	ip, r1
 8007ae0:	c004      	stmia	r0!, {r2}
 8007ae2:	42bb      	cmp	r3, r7
 8007ae4:	d2e1      	bcs.n	8007aaa <quorem+0x4a>
 8007ae6:	6823      	ldr	r3, [r4, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d030      	beq.n	8007b4e <quorem+0xee>
 8007aec:	0030      	movs	r0, r6
 8007aee:	9903      	ldr	r1, [sp, #12]
 8007af0:	f001 fb40 	bl	8009174 <__mcmp>
 8007af4:	2800      	cmp	r0, #0
 8007af6:	db21      	blt.n	8007b3c <quorem+0xdc>
 8007af8:	0030      	movs	r0, r6
 8007afa:	2400      	movs	r4, #0
 8007afc:	9b01      	ldr	r3, [sp, #4]
 8007afe:	9903      	ldr	r1, [sp, #12]
 8007b00:	3301      	adds	r3, #1
 8007b02:	9301      	str	r3, [sp, #4]
 8007b04:	3014      	adds	r0, #20
 8007b06:	3114      	adds	r1, #20
 8007b08:	6803      	ldr	r3, [r0, #0]
 8007b0a:	c920      	ldmia	r1!, {r5}
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	1914      	adds	r4, r2, r4
 8007b10:	b2aa      	uxth	r2, r5
 8007b12:	1aa2      	subs	r2, r4, r2
 8007b14:	0c1b      	lsrs	r3, r3, #16
 8007b16:	0c2d      	lsrs	r5, r5, #16
 8007b18:	1414      	asrs	r4, r2, #16
 8007b1a:	1b5b      	subs	r3, r3, r5
 8007b1c:	191b      	adds	r3, r3, r4
 8007b1e:	141c      	asrs	r4, r3, #16
 8007b20:	b292      	uxth	r2, r2
 8007b22:	041b      	lsls	r3, r3, #16
 8007b24:	4313      	orrs	r3, r2
 8007b26:	c008      	stmia	r0!, {r3}
 8007b28:	9b04      	ldr	r3, [sp, #16]
 8007b2a:	428b      	cmp	r3, r1
 8007b2c:	d2ec      	bcs.n	8007b08 <quorem+0xa8>
 8007b2e:	9b00      	ldr	r3, [sp, #0]
 8007b30:	9a02      	ldr	r2, [sp, #8]
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	18d3      	adds	r3, r2, r3
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	2a00      	cmp	r2, #0
 8007b3a:	d015      	beq.n	8007b68 <quorem+0x108>
 8007b3c:	9801      	ldr	r0, [sp, #4]
 8007b3e:	b007      	add	sp, #28
 8007b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b42:	6823      	ldr	r3, [r4, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d106      	bne.n	8007b56 <quorem+0xf6>
 8007b48:	9b00      	ldr	r3, [sp, #0]
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	9300      	str	r3, [sp, #0]
 8007b4e:	9b02      	ldr	r3, [sp, #8]
 8007b50:	3c04      	subs	r4, #4
 8007b52:	42a3      	cmp	r3, r4
 8007b54:	d3f5      	bcc.n	8007b42 <quorem+0xe2>
 8007b56:	9b00      	ldr	r3, [sp, #0]
 8007b58:	6133      	str	r3, [r6, #16]
 8007b5a:	e7c7      	b.n	8007aec <quorem+0x8c>
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	2a00      	cmp	r2, #0
 8007b60:	d106      	bne.n	8007b70 <quorem+0x110>
 8007b62:	9a00      	ldr	r2, [sp, #0]
 8007b64:	3a01      	subs	r2, #1
 8007b66:	9200      	str	r2, [sp, #0]
 8007b68:	9a02      	ldr	r2, [sp, #8]
 8007b6a:	3b04      	subs	r3, #4
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d3f5      	bcc.n	8007b5c <quorem+0xfc>
 8007b70:	9b00      	ldr	r3, [sp, #0]
 8007b72:	6133      	str	r3, [r6, #16]
 8007b74:	e7e2      	b.n	8007b3c <quorem+0xdc>
	...

08007b78 <_dtoa_r>:
 8007b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b7a:	b09d      	sub	sp, #116	; 0x74
 8007b7c:	9202      	str	r2, [sp, #8]
 8007b7e:	9303      	str	r3, [sp, #12]
 8007b80:	9b02      	ldr	r3, [sp, #8]
 8007b82:	9c03      	ldr	r4, [sp, #12]
 8007b84:	9308      	str	r3, [sp, #32]
 8007b86:	9409      	str	r4, [sp, #36]	; 0x24
 8007b88:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007b8a:	0007      	movs	r7, r0
 8007b8c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8007b8e:	2c00      	cmp	r4, #0
 8007b90:	d10e      	bne.n	8007bb0 <_dtoa_r+0x38>
 8007b92:	2010      	movs	r0, #16
 8007b94:	f001 f84c 	bl	8008c30 <malloc>
 8007b98:	1e02      	subs	r2, r0, #0
 8007b9a:	6278      	str	r0, [r7, #36]	; 0x24
 8007b9c:	d104      	bne.n	8007ba8 <_dtoa_r+0x30>
 8007b9e:	21ea      	movs	r1, #234	; 0xea
 8007ba0:	4bc7      	ldr	r3, [pc, #796]	; (8007ec0 <_dtoa_r+0x348>)
 8007ba2:	48c8      	ldr	r0, [pc, #800]	; (8007ec4 <_dtoa_r+0x34c>)
 8007ba4:	f002 f88c 	bl	8009cc0 <__assert_func>
 8007ba8:	6044      	str	r4, [r0, #4]
 8007baa:	6084      	str	r4, [r0, #8]
 8007bac:	6004      	str	r4, [r0, #0]
 8007bae:	60c4      	str	r4, [r0, #12]
 8007bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb2:	6819      	ldr	r1, [r3, #0]
 8007bb4:	2900      	cmp	r1, #0
 8007bb6:	d00a      	beq.n	8007bce <_dtoa_r+0x56>
 8007bb8:	685a      	ldr	r2, [r3, #4]
 8007bba:	2301      	movs	r3, #1
 8007bbc:	4093      	lsls	r3, r2
 8007bbe:	604a      	str	r2, [r1, #4]
 8007bc0:	608b      	str	r3, [r1, #8]
 8007bc2:	0038      	movs	r0, r7
 8007bc4:	f001 f896 	bl	8008cf4 <_Bfree>
 8007bc8:	2200      	movs	r2, #0
 8007bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bcc:	601a      	str	r2, [r3, #0]
 8007bce:	9b03      	ldr	r3, [sp, #12]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	da20      	bge.n	8007c16 <_dtoa_r+0x9e>
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	602b      	str	r3, [r5, #0]
 8007bd8:	9b03      	ldr	r3, [sp, #12]
 8007bda:	005b      	lsls	r3, r3, #1
 8007bdc:	085b      	lsrs	r3, r3, #1
 8007bde:	9309      	str	r3, [sp, #36]	; 0x24
 8007be0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007be2:	4bb9      	ldr	r3, [pc, #740]	; (8007ec8 <_dtoa_r+0x350>)
 8007be4:	4ab8      	ldr	r2, [pc, #736]	; (8007ec8 <_dtoa_r+0x350>)
 8007be6:	402b      	ands	r3, r5
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d117      	bne.n	8007c1c <_dtoa_r+0xa4>
 8007bec:	4bb7      	ldr	r3, [pc, #732]	; (8007ecc <_dtoa_r+0x354>)
 8007bee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007bf0:	0328      	lsls	r0, r5, #12
 8007bf2:	6013      	str	r3, [r2, #0]
 8007bf4:	9b02      	ldr	r3, [sp, #8]
 8007bf6:	0b00      	lsrs	r0, r0, #12
 8007bf8:	4318      	orrs	r0, r3
 8007bfa:	d101      	bne.n	8007c00 <_dtoa_r+0x88>
 8007bfc:	f000 fdbf 	bl	800877e <_dtoa_r+0xc06>
 8007c00:	48b3      	ldr	r0, [pc, #716]	; (8007ed0 <_dtoa_r+0x358>)
 8007c02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007c04:	9006      	str	r0, [sp, #24]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d002      	beq.n	8007c10 <_dtoa_r+0x98>
 8007c0a:	4bb2      	ldr	r3, [pc, #712]	; (8007ed4 <_dtoa_r+0x35c>)
 8007c0c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007c0e:	6013      	str	r3, [r2, #0]
 8007c10:	9806      	ldr	r0, [sp, #24]
 8007c12:	b01d      	add	sp, #116	; 0x74
 8007c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c16:	2300      	movs	r3, #0
 8007c18:	602b      	str	r3, [r5, #0]
 8007c1a:	e7e1      	b.n	8007be0 <_dtoa_r+0x68>
 8007c1c:	9b08      	ldr	r3, [sp, #32]
 8007c1e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007c20:	9312      	str	r3, [sp, #72]	; 0x48
 8007c22:	9413      	str	r4, [sp, #76]	; 0x4c
 8007c24:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007c26:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007c28:	2200      	movs	r2, #0
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	f7f8 fc0e 	bl	800044c <__aeabi_dcmpeq>
 8007c30:	1e04      	subs	r4, r0, #0
 8007c32:	d009      	beq.n	8007c48 <_dtoa_r+0xd0>
 8007c34:	2301      	movs	r3, #1
 8007c36:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007c38:	6013      	str	r3, [r2, #0]
 8007c3a:	4ba7      	ldr	r3, [pc, #668]	; (8007ed8 <_dtoa_r+0x360>)
 8007c3c:	9306      	str	r3, [sp, #24]
 8007c3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d0e5      	beq.n	8007c10 <_dtoa_r+0x98>
 8007c44:	4ba5      	ldr	r3, [pc, #660]	; (8007edc <_dtoa_r+0x364>)
 8007c46:	e7e1      	b.n	8007c0c <_dtoa_r+0x94>
 8007c48:	ab1a      	add	r3, sp, #104	; 0x68
 8007c4a:	9301      	str	r3, [sp, #4]
 8007c4c:	ab1b      	add	r3, sp, #108	; 0x6c
 8007c4e:	9300      	str	r3, [sp, #0]
 8007c50:	0038      	movs	r0, r7
 8007c52:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c56:	f001 fb41 	bl	80092dc <__d2b>
 8007c5a:	006e      	lsls	r6, r5, #1
 8007c5c:	9005      	str	r0, [sp, #20]
 8007c5e:	0d76      	lsrs	r6, r6, #21
 8007c60:	d100      	bne.n	8007c64 <_dtoa_r+0xec>
 8007c62:	e07c      	b.n	8007d5e <_dtoa_r+0x1e6>
 8007c64:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007c66:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007c68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c6a:	4a9d      	ldr	r2, [pc, #628]	; (8007ee0 <_dtoa_r+0x368>)
 8007c6c:	031b      	lsls	r3, r3, #12
 8007c6e:	0b1b      	lsrs	r3, r3, #12
 8007c70:	431a      	orrs	r2, r3
 8007c72:	0011      	movs	r1, r2
 8007c74:	4b9b      	ldr	r3, [pc, #620]	; (8007ee4 <_dtoa_r+0x36c>)
 8007c76:	9418      	str	r4, [sp, #96]	; 0x60
 8007c78:	18f6      	adds	r6, r6, r3
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	4b9a      	ldr	r3, [pc, #616]	; (8007ee8 <_dtoa_r+0x370>)
 8007c7e:	f7fa fb01 	bl	8002284 <__aeabi_dsub>
 8007c82:	4a9a      	ldr	r2, [pc, #616]	; (8007eec <_dtoa_r+0x374>)
 8007c84:	4b9a      	ldr	r3, [pc, #616]	; (8007ef0 <_dtoa_r+0x378>)
 8007c86:	f7fa f891 	bl	8001dac <__aeabi_dmul>
 8007c8a:	4a9a      	ldr	r2, [pc, #616]	; (8007ef4 <_dtoa_r+0x37c>)
 8007c8c:	4b9a      	ldr	r3, [pc, #616]	; (8007ef8 <_dtoa_r+0x380>)
 8007c8e:	f7f9 f94f 	bl	8000f30 <__aeabi_dadd>
 8007c92:	0004      	movs	r4, r0
 8007c94:	0030      	movs	r0, r6
 8007c96:	000d      	movs	r5, r1
 8007c98:	f7fa feda 	bl	8002a50 <__aeabi_i2d>
 8007c9c:	4a97      	ldr	r2, [pc, #604]	; (8007efc <_dtoa_r+0x384>)
 8007c9e:	4b98      	ldr	r3, [pc, #608]	; (8007f00 <_dtoa_r+0x388>)
 8007ca0:	f7fa f884 	bl	8001dac <__aeabi_dmul>
 8007ca4:	0002      	movs	r2, r0
 8007ca6:	000b      	movs	r3, r1
 8007ca8:	0020      	movs	r0, r4
 8007caa:	0029      	movs	r1, r5
 8007cac:	f7f9 f940 	bl	8000f30 <__aeabi_dadd>
 8007cb0:	0004      	movs	r4, r0
 8007cb2:	000d      	movs	r5, r1
 8007cb4:	f7fa fe96 	bl	80029e4 <__aeabi_d2iz>
 8007cb8:	2200      	movs	r2, #0
 8007cba:	9002      	str	r0, [sp, #8]
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	0020      	movs	r0, r4
 8007cc0:	0029      	movs	r1, r5
 8007cc2:	f7f8 fbc9 	bl	8000458 <__aeabi_dcmplt>
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	d00b      	beq.n	8007ce2 <_dtoa_r+0x16a>
 8007cca:	9802      	ldr	r0, [sp, #8]
 8007ccc:	f7fa fec0 	bl	8002a50 <__aeabi_i2d>
 8007cd0:	002b      	movs	r3, r5
 8007cd2:	0022      	movs	r2, r4
 8007cd4:	f7f8 fbba 	bl	800044c <__aeabi_dcmpeq>
 8007cd8:	4243      	negs	r3, r0
 8007cda:	4158      	adcs	r0, r3
 8007cdc:	9b02      	ldr	r3, [sp, #8]
 8007cde:	1a1b      	subs	r3, r3, r0
 8007ce0:	9302      	str	r3, [sp, #8]
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	9316      	str	r3, [sp, #88]	; 0x58
 8007ce6:	9b02      	ldr	r3, [sp, #8]
 8007ce8:	2b16      	cmp	r3, #22
 8007cea:	d80f      	bhi.n	8007d0c <_dtoa_r+0x194>
 8007cec:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007cee:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007cf0:	00da      	lsls	r2, r3, #3
 8007cf2:	4b84      	ldr	r3, [pc, #528]	; (8007f04 <_dtoa_r+0x38c>)
 8007cf4:	189b      	adds	r3, r3, r2
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	f7f8 fbad 	bl	8000458 <__aeabi_dcmplt>
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	d049      	beq.n	8007d96 <_dtoa_r+0x21e>
 8007d02:	9b02      	ldr	r3, [sp, #8]
 8007d04:	3b01      	subs	r3, #1
 8007d06:	9302      	str	r3, [sp, #8]
 8007d08:	2300      	movs	r3, #0
 8007d0a:	9316      	str	r3, [sp, #88]	; 0x58
 8007d0c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007d0e:	1b9e      	subs	r6, r3, r6
 8007d10:	2300      	movs	r3, #0
 8007d12:	930a      	str	r3, [sp, #40]	; 0x28
 8007d14:	0033      	movs	r3, r6
 8007d16:	3b01      	subs	r3, #1
 8007d18:	930d      	str	r3, [sp, #52]	; 0x34
 8007d1a:	d504      	bpl.n	8007d26 <_dtoa_r+0x1ae>
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	1b9b      	subs	r3, r3, r6
 8007d20:	930a      	str	r3, [sp, #40]	; 0x28
 8007d22:	2300      	movs	r3, #0
 8007d24:	930d      	str	r3, [sp, #52]	; 0x34
 8007d26:	9b02      	ldr	r3, [sp, #8]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	db36      	blt.n	8007d9a <_dtoa_r+0x222>
 8007d2c:	9a02      	ldr	r2, [sp, #8]
 8007d2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d30:	4694      	mov	ip, r2
 8007d32:	4463      	add	r3, ip
 8007d34:	930d      	str	r3, [sp, #52]	; 0x34
 8007d36:	2300      	movs	r3, #0
 8007d38:	9215      	str	r2, [sp, #84]	; 0x54
 8007d3a:	930e      	str	r3, [sp, #56]	; 0x38
 8007d3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d3e:	2401      	movs	r4, #1
 8007d40:	2b09      	cmp	r3, #9
 8007d42:	d864      	bhi.n	8007e0e <_dtoa_r+0x296>
 8007d44:	2b05      	cmp	r3, #5
 8007d46:	dd02      	ble.n	8007d4e <_dtoa_r+0x1d6>
 8007d48:	2400      	movs	r4, #0
 8007d4a:	3b04      	subs	r3, #4
 8007d4c:	9322      	str	r3, [sp, #136]	; 0x88
 8007d4e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d50:	1e98      	subs	r0, r3, #2
 8007d52:	2803      	cmp	r0, #3
 8007d54:	d864      	bhi.n	8007e20 <_dtoa_r+0x2a8>
 8007d56:	f7f8 f9df 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007d5a:	3829      	.short	0x3829
 8007d5c:	5836      	.short	0x5836
 8007d5e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007d60:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007d62:	189e      	adds	r6, r3, r2
 8007d64:	4b68      	ldr	r3, [pc, #416]	; (8007f08 <_dtoa_r+0x390>)
 8007d66:	18f2      	adds	r2, r6, r3
 8007d68:	2a20      	cmp	r2, #32
 8007d6a:	dd0f      	ble.n	8007d8c <_dtoa_r+0x214>
 8007d6c:	2340      	movs	r3, #64	; 0x40
 8007d6e:	1a9b      	subs	r3, r3, r2
 8007d70:	409d      	lsls	r5, r3
 8007d72:	4b66      	ldr	r3, [pc, #408]	; (8007f0c <_dtoa_r+0x394>)
 8007d74:	9802      	ldr	r0, [sp, #8]
 8007d76:	18f3      	adds	r3, r6, r3
 8007d78:	40d8      	lsrs	r0, r3
 8007d7a:	4328      	orrs	r0, r5
 8007d7c:	f7fa fe98 	bl	8002ab0 <__aeabi_ui2d>
 8007d80:	2301      	movs	r3, #1
 8007d82:	4c63      	ldr	r4, [pc, #396]	; (8007f10 <_dtoa_r+0x398>)
 8007d84:	3e01      	subs	r6, #1
 8007d86:	1909      	adds	r1, r1, r4
 8007d88:	9318      	str	r3, [sp, #96]	; 0x60
 8007d8a:	e776      	b.n	8007c7a <_dtoa_r+0x102>
 8007d8c:	2320      	movs	r3, #32
 8007d8e:	9802      	ldr	r0, [sp, #8]
 8007d90:	1a9b      	subs	r3, r3, r2
 8007d92:	4098      	lsls	r0, r3
 8007d94:	e7f2      	b.n	8007d7c <_dtoa_r+0x204>
 8007d96:	9016      	str	r0, [sp, #88]	; 0x58
 8007d98:	e7b8      	b.n	8007d0c <_dtoa_r+0x194>
 8007d9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d9c:	9a02      	ldr	r2, [sp, #8]
 8007d9e:	1a9b      	subs	r3, r3, r2
 8007da0:	930a      	str	r3, [sp, #40]	; 0x28
 8007da2:	4253      	negs	r3, r2
 8007da4:	930e      	str	r3, [sp, #56]	; 0x38
 8007da6:	2300      	movs	r3, #0
 8007da8:	9315      	str	r3, [sp, #84]	; 0x54
 8007daa:	e7c7      	b.n	8007d3c <_dtoa_r+0x1c4>
 8007dac:	2300      	movs	r3, #0
 8007dae:	930f      	str	r3, [sp, #60]	; 0x3c
 8007db0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007db2:	930c      	str	r3, [sp, #48]	; 0x30
 8007db4:	9307      	str	r3, [sp, #28]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	dc13      	bgt.n	8007de2 <_dtoa_r+0x26a>
 8007dba:	2301      	movs	r3, #1
 8007dbc:	001a      	movs	r2, r3
 8007dbe:	930c      	str	r3, [sp, #48]	; 0x30
 8007dc0:	9307      	str	r3, [sp, #28]
 8007dc2:	9223      	str	r2, [sp, #140]	; 0x8c
 8007dc4:	e00d      	b.n	8007de2 <_dtoa_r+0x26a>
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e7f1      	b.n	8007dae <_dtoa_r+0x236>
 8007dca:	2300      	movs	r3, #0
 8007dcc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007dce:	930f      	str	r3, [sp, #60]	; 0x3c
 8007dd0:	4694      	mov	ip, r2
 8007dd2:	9b02      	ldr	r3, [sp, #8]
 8007dd4:	4463      	add	r3, ip
 8007dd6:	930c      	str	r3, [sp, #48]	; 0x30
 8007dd8:	3301      	adds	r3, #1
 8007dda:	9307      	str	r3, [sp, #28]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	dc00      	bgt.n	8007de2 <_dtoa_r+0x26a>
 8007de0:	2301      	movs	r3, #1
 8007de2:	2200      	movs	r2, #0
 8007de4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007de6:	6042      	str	r2, [r0, #4]
 8007de8:	3204      	adds	r2, #4
 8007dea:	0015      	movs	r5, r2
 8007dec:	3514      	adds	r5, #20
 8007dee:	6841      	ldr	r1, [r0, #4]
 8007df0:	429d      	cmp	r5, r3
 8007df2:	d919      	bls.n	8007e28 <_dtoa_r+0x2b0>
 8007df4:	0038      	movs	r0, r7
 8007df6:	f000 ff39 	bl	8008c6c <_Balloc>
 8007dfa:	9006      	str	r0, [sp, #24]
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	d117      	bne.n	8007e30 <_dtoa_r+0x2b8>
 8007e00:	21d5      	movs	r1, #213	; 0xd5
 8007e02:	0002      	movs	r2, r0
 8007e04:	4b43      	ldr	r3, [pc, #268]	; (8007f14 <_dtoa_r+0x39c>)
 8007e06:	0049      	lsls	r1, r1, #1
 8007e08:	e6cb      	b.n	8007ba2 <_dtoa_r+0x2a>
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e7de      	b.n	8007dcc <_dtoa_r+0x254>
 8007e0e:	2300      	movs	r3, #0
 8007e10:	940f      	str	r4, [sp, #60]	; 0x3c
 8007e12:	9322      	str	r3, [sp, #136]	; 0x88
 8007e14:	3b01      	subs	r3, #1
 8007e16:	930c      	str	r3, [sp, #48]	; 0x30
 8007e18:	9307      	str	r3, [sp, #28]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	3313      	adds	r3, #19
 8007e1e:	e7d0      	b.n	8007dc2 <_dtoa_r+0x24a>
 8007e20:	2301      	movs	r3, #1
 8007e22:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e24:	3b02      	subs	r3, #2
 8007e26:	e7f6      	b.n	8007e16 <_dtoa_r+0x29e>
 8007e28:	3101      	adds	r1, #1
 8007e2a:	6041      	str	r1, [r0, #4]
 8007e2c:	0052      	lsls	r2, r2, #1
 8007e2e:	e7dc      	b.n	8007dea <_dtoa_r+0x272>
 8007e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e32:	9a06      	ldr	r2, [sp, #24]
 8007e34:	601a      	str	r2, [r3, #0]
 8007e36:	9b07      	ldr	r3, [sp, #28]
 8007e38:	2b0e      	cmp	r3, #14
 8007e3a:	d900      	bls.n	8007e3e <_dtoa_r+0x2c6>
 8007e3c:	e0eb      	b.n	8008016 <_dtoa_r+0x49e>
 8007e3e:	2c00      	cmp	r4, #0
 8007e40:	d100      	bne.n	8007e44 <_dtoa_r+0x2cc>
 8007e42:	e0e8      	b.n	8008016 <_dtoa_r+0x49e>
 8007e44:	9b02      	ldr	r3, [sp, #8]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	dd68      	ble.n	8007f1c <_dtoa_r+0x3a4>
 8007e4a:	001a      	movs	r2, r3
 8007e4c:	210f      	movs	r1, #15
 8007e4e:	4b2d      	ldr	r3, [pc, #180]	; (8007f04 <_dtoa_r+0x38c>)
 8007e50:	400a      	ands	r2, r1
 8007e52:	00d2      	lsls	r2, r2, #3
 8007e54:	189b      	adds	r3, r3, r2
 8007e56:	681d      	ldr	r5, [r3, #0]
 8007e58:	685e      	ldr	r6, [r3, #4]
 8007e5a:	9b02      	ldr	r3, [sp, #8]
 8007e5c:	111c      	asrs	r4, r3, #4
 8007e5e:	2302      	movs	r3, #2
 8007e60:	9310      	str	r3, [sp, #64]	; 0x40
 8007e62:	9b02      	ldr	r3, [sp, #8]
 8007e64:	05db      	lsls	r3, r3, #23
 8007e66:	d50b      	bpl.n	8007e80 <_dtoa_r+0x308>
 8007e68:	4b2b      	ldr	r3, [pc, #172]	; (8007f18 <_dtoa_r+0x3a0>)
 8007e6a:	400c      	ands	r4, r1
 8007e6c:	6a1a      	ldr	r2, [r3, #32]
 8007e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e70:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007e72:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007e74:	f7f9 fb98 	bl	80015a8 <__aeabi_ddiv>
 8007e78:	2303      	movs	r3, #3
 8007e7a:	9008      	str	r0, [sp, #32]
 8007e7c:	9109      	str	r1, [sp, #36]	; 0x24
 8007e7e:	9310      	str	r3, [sp, #64]	; 0x40
 8007e80:	4b25      	ldr	r3, [pc, #148]	; (8007f18 <_dtoa_r+0x3a0>)
 8007e82:	9314      	str	r3, [sp, #80]	; 0x50
 8007e84:	2c00      	cmp	r4, #0
 8007e86:	d108      	bne.n	8007e9a <_dtoa_r+0x322>
 8007e88:	9808      	ldr	r0, [sp, #32]
 8007e8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e8c:	002a      	movs	r2, r5
 8007e8e:	0033      	movs	r3, r6
 8007e90:	f7f9 fb8a 	bl	80015a8 <__aeabi_ddiv>
 8007e94:	9008      	str	r0, [sp, #32]
 8007e96:	9109      	str	r1, [sp, #36]	; 0x24
 8007e98:	e05c      	b.n	8007f54 <_dtoa_r+0x3dc>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	421c      	tst	r4, r3
 8007e9e:	d00b      	beq.n	8007eb8 <_dtoa_r+0x340>
 8007ea0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ea2:	0028      	movs	r0, r5
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	9310      	str	r3, [sp, #64]	; 0x40
 8007ea8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007eaa:	0031      	movs	r1, r6
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	f7f9 ff7c 	bl	8001dac <__aeabi_dmul>
 8007eb4:	0005      	movs	r5, r0
 8007eb6:	000e      	movs	r6, r1
 8007eb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007eba:	1064      	asrs	r4, r4, #1
 8007ebc:	3308      	adds	r3, #8
 8007ebe:	e7e0      	b.n	8007e82 <_dtoa_r+0x30a>
 8007ec0:	0800a215 	.word	0x0800a215
 8007ec4:	0800a22c 	.word	0x0800a22c
 8007ec8:	7ff00000 	.word	0x7ff00000
 8007ecc:	0000270f 	.word	0x0000270f
 8007ed0:	0800a211 	.word	0x0800a211
 8007ed4:	0800a214 	.word	0x0800a214
 8007ed8:	0800a1e4 	.word	0x0800a1e4
 8007edc:	0800a1e5 	.word	0x0800a1e5
 8007ee0:	3ff00000 	.word	0x3ff00000
 8007ee4:	fffffc01 	.word	0xfffffc01
 8007ee8:	3ff80000 	.word	0x3ff80000
 8007eec:	636f4361 	.word	0x636f4361
 8007ef0:	3fd287a7 	.word	0x3fd287a7
 8007ef4:	8b60c8b3 	.word	0x8b60c8b3
 8007ef8:	3fc68a28 	.word	0x3fc68a28
 8007efc:	509f79fb 	.word	0x509f79fb
 8007f00:	3fd34413 	.word	0x3fd34413
 8007f04:	0800a380 	.word	0x0800a380
 8007f08:	00000432 	.word	0x00000432
 8007f0c:	00000412 	.word	0x00000412
 8007f10:	fe100000 	.word	0xfe100000
 8007f14:	0800a287 	.word	0x0800a287
 8007f18:	0800a358 	.word	0x0800a358
 8007f1c:	2302      	movs	r3, #2
 8007f1e:	9310      	str	r3, [sp, #64]	; 0x40
 8007f20:	9b02      	ldr	r3, [sp, #8]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d016      	beq.n	8007f54 <_dtoa_r+0x3dc>
 8007f26:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007f28:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007f2a:	425c      	negs	r4, r3
 8007f2c:	230f      	movs	r3, #15
 8007f2e:	4ab6      	ldr	r2, [pc, #728]	; (8008208 <_dtoa_r+0x690>)
 8007f30:	4023      	ands	r3, r4
 8007f32:	00db      	lsls	r3, r3, #3
 8007f34:	18d3      	adds	r3, r2, r3
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	f7f9 ff37 	bl	8001dac <__aeabi_dmul>
 8007f3e:	2601      	movs	r6, #1
 8007f40:	2300      	movs	r3, #0
 8007f42:	9008      	str	r0, [sp, #32]
 8007f44:	9109      	str	r1, [sp, #36]	; 0x24
 8007f46:	4db1      	ldr	r5, [pc, #708]	; (800820c <_dtoa_r+0x694>)
 8007f48:	1124      	asrs	r4, r4, #4
 8007f4a:	2c00      	cmp	r4, #0
 8007f4c:	d000      	beq.n	8007f50 <_dtoa_r+0x3d8>
 8007f4e:	e094      	b.n	800807a <_dtoa_r+0x502>
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d19f      	bne.n	8007e94 <_dtoa_r+0x31c>
 8007f54:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d100      	bne.n	8007f5c <_dtoa_r+0x3e4>
 8007f5a:	e09b      	b.n	8008094 <_dtoa_r+0x51c>
 8007f5c:	9c08      	ldr	r4, [sp, #32]
 8007f5e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007f60:	2200      	movs	r2, #0
 8007f62:	0020      	movs	r0, r4
 8007f64:	0029      	movs	r1, r5
 8007f66:	4baa      	ldr	r3, [pc, #680]	; (8008210 <_dtoa_r+0x698>)
 8007f68:	f7f8 fa76 	bl	8000458 <__aeabi_dcmplt>
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	d100      	bne.n	8007f72 <_dtoa_r+0x3fa>
 8007f70:	e090      	b.n	8008094 <_dtoa_r+0x51c>
 8007f72:	9b07      	ldr	r3, [sp, #28]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d100      	bne.n	8007f7a <_dtoa_r+0x402>
 8007f78:	e08c      	b.n	8008094 <_dtoa_r+0x51c>
 8007f7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	dd46      	ble.n	800800e <_dtoa_r+0x496>
 8007f80:	9b02      	ldr	r3, [sp, #8]
 8007f82:	2200      	movs	r2, #0
 8007f84:	0020      	movs	r0, r4
 8007f86:	0029      	movs	r1, r5
 8007f88:	1e5e      	subs	r6, r3, #1
 8007f8a:	4ba2      	ldr	r3, [pc, #648]	; (8008214 <_dtoa_r+0x69c>)
 8007f8c:	f7f9 ff0e 	bl	8001dac <__aeabi_dmul>
 8007f90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f92:	9008      	str	r0, [sp, #32]
 8007f94:	9109      	str	r1, [sp, #36]	; 0x24
 8007f96:	3301      	adds	r3, #1
 8007f98:	9310      	str	r3, [sp, #64]	; 0x40
 8007f9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f9c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007f9e:	9c08      	ldr	r4, [sp, #32]
 8007fa0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007fa2:	9314      	str	r3, [sp, #80]	; 0x50
 8007fa4:	f7fa fd54 	bl	8002a50 <__aeabi_i2d>
 8007fa8:	0022      	movs	r2, r4
 8007faa:	002b      	movs	r3, r5
 8007fac:	f7f9 fefe 	bl	8001dac <__aeabi_dmul>
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	4b99      	ldr	r3, [pc, #612]	; (8008218 <_dtoa_r+0x6a0>)
 8007fb4:	f7f8 ffbc 	bl	8000f30 <__aeabi_dadd>
 8007fb8:	9010      	str	r0, [sp, #64]	; 0x40
 8007fba:	9111      	str	r1, [sp, #68]	; 0x44
 8007fbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007fbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fc0:	9208      	str	r2, [sp, #32]
 8007fc2:	9309      	str	r3, [sp, #36]	; 0x24
 8007fc4:	4a95      	ldr	r2, [pc, #596]	; (800821c <_dtoa_r+0x6a4>)
 8007fc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fc8:	4694      	mov	ip, r2
 8007fca:	4463      	add	r3, ip
 8007fcc:	9317      	str	r3, [sp, #92]	; 0x5c
 8007fce:	9309      	str	r3, [sp, #36]	; 0x24
 8007fd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d161      	bne.n	800809a <_dtoa_r+0x522>
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	0020      	movs	r0, r4
 8007fda:	0029      	movs	r1, r5
 8007fdc:	4b90      	ldr	r3, [pc, #576]	; (8008220 <_dtoa_r+0x6a8>)
 8007fde:	f7fa f951 	bl	8002284 <__aeabi_dsub>
 8007fe2:	9a08      	ldr	r2, [sp, #32]
 8007fe4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007fe6:	0004      	movs	r4, r0
 8007fe8:	000d      	movs	r5, r1
 8007fea:	f7f8 fa49 	bl	8000480 <__aeabi_dcmpgt>
 8007fee:	2800      	cmp	r0, #0
 8007ff0:	d000      	beq.n	8007ff4 <_dtoa_r+0x47c>
 8007ff2:	e2af      	b.n	8008554 <_dtoa_r+0x9dc>
 8007ff4:	488b      	ldr	r0, [pc, #556]	; (8008224 <_dtoa_r+0x6ac>)
 8007ff6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007ff8:	4684      	mov	ip, r0
 8007ffa:	4461      	add	r1, ip
 8007ffc:	000b      	movs	r3, r1
 8007ffe:	0020      	movs	r0, r4
 8008000:	0029      	movs	r1, r5
 8008002:	9a08      	ldr	r2, [sp, #32]
 8008004:	f7f8 fa28 	bl	8000458 <__aeabi_dcmplt>
 8008008:	2800      	cmp	r0, #0
 800800a:	d000      	beq.n	800800e <_dtoa_r+0x496>
 800800c:	e29f      	b.n	800854e <_dtoa_r+0x9d6>
 800800e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008010:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008012:	9308      	str	r3, [sp, #32]
 8008014:	9409      	str	r4, [sp, #36]	; 0x24
 8008016:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008018:	2b00      	cmp	r3, #0
 800801a:	da00      	bge.n	800801e <_dtoa_r+0x4a6>
 800801c:	e172      	b.n	8008304 <_dtoa_r+0x78c>
 800801e:	9a02      	ldr	r2, [sp, #8]
 8008020:	2a0e      	cmp	r2, #14
 8008022:	dd00      	ble.n	8008026 <_dtoa_r+0x4ae>
 8008024:	e16e      	b.n	8008304 <_dtoa_r+0x78c>
 8008026:	4b78      	ldr	r3, [pc, #480]	; (8008208 <_dtoa_r+0x690>)
 8008028:	00d2      	lsls	r2, r2, #3
 800802a:	189b      	adds	r3, r3, r2
 800802c:	685c      	ldr	r4, [r3, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	930a      	str	r3, [sp, #40]	; 0x28
 8008032:	940b      	str	r4, [sp, #44]	; 0x2c
 8008034:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008036:	2b00      	cmp	r3, #0
 8008038:	db00      	blt.n	800803c <_dtoa_r+0x4c4>
 800803a:	e0f7      	b.n	800822c <_dtoa_r+0x6b4>
 800803c:	9b07      	ldr	r3, [sp, #28]
 800803e:	2b00      	cmp	r3, #0
 8008040:	dd00      	ble.n	8008044 <_dtoa_r+0x4cc>
 8008042:	e0f3      	b.n	800822c <_dtoa_r+0x6b4>
 8008044:	d000      	beq.n	8008048 <_dtoa_r+0x4d0>
 8008046:	e282      	b.n	800854e <_dtoa_r+0x9d6>
 8008048:	980a      	ldr	r0, [sp, #40]	; 0x28
 800804a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800804c:	2200      	movs	r2, #0
 800804e:	4b74      	ldr	r3, [pc, #464]	; (8008220 <_dtoa_r+0x6a8>)
 8008050:	f7f9 feac 	bl	8001dac <__aeabi_dmul>
 8008054:	9a08      	ldr	r2, [sp, #32]
 8008056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008058:	f7f8 fa1c 	bl	8000494 <__aeabi_dcmpge>
 800805c:	9e07      	ldr	r6, [sp, #28]
 800805e:	0035      	movs	r5, r6
 8008060:	2800      	cmp	r0, #0
 8008062:	d000      	beq.n	8008066 <_dtoa_r+0x4ee>
 8008064:	e259      	b.n	800851a <_dtoa_r+0x9a2>
 8008066:	9b06      	ldr	r3, [sp, #24]
 8008068:	9a06      	ldr	r2, [sp, #24]
 800806a:	3301      	adds	r3, #1
 800806c:	9308      	str	r3, [sp, #32]
 800806e:	2331      	movs	r3, #49	; 0x31
 8008070:	7013      	strb	r3, [r2, #0]
 8008072:	9b02      	ldr	r3, [sp, #8]
 8008074:	3301      	adds	r3, #1
 8008076:	9302      	str	r3, [sp, #8]
 8008078:	e254      	b.n	8008524 <_dtoa_r+0x9ac>
 800807a:	4234      	tst	r4, r6
 800807c:	d007      	beq.n	800808e <_dtoa_r+0x516>
 800807e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008080:	3301      	adds	r3, #1
 8008082:	9310      	str	r3, [sp, #64]	; 0x40
 8008084:	682a      	ldr	r2, [r5, #0]
 8008086:	686b      	ldr	r3, [r5, #4]
 8008088:	f7f9 fe90 	bl	8001dac <__aeabi_dmul>
 800808c:	0033      	movs	r3, r6
 800808e:	1064      	asrs	r4, r4, #1
 8008090:	3508      	adds	r5, #8
 8008092:	e75a      	b.n	8007f4a <_dtoa_r+0x3d2>
 8008094:	9e02      	ldr	r6, [sp, #8]
 8008096:	9b07      	ldr	r3, [sp, #28]
 8008098:	e780      	b.n	8007f9c <_dtoa_r+0x424>
 800809a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800809c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800809e:	1e5a      	subs	r2, r3, #1
 80080a0:	4b59      	ldr	r3, [pc, #356]	; (8008208 <_dtoa_r+0x690>)
 80080a2:	00d2      	lsls	r2, r2, #3
 80080a4:	189b      	adds	r3, r3, r2
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	2900      	cmp	r1, #0
 80080ac:	d051      	beq.n	8008152 <_dtoa_r+0x5da>
 80080ae:	2000      	movs	r0, #0
 80080b0:	495d      	ldr	r1, [pc, #372]	; (8008228 <_dtoa_r+0x6b0>)
 80080b2:	f7f9 fa79 	bl	80015a8 <__aeabi_ddiv>
 80080b6:	9a08      	ldr	r2, [sp, #32]
 80080b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ba:	f7fa f8e3 	bl	8002284 <__aeabi_dsub>
 80080be:	9a06      	ldr	r2, [sp, #24]
 80080c0:	9b06      	ldr	r3, [sp, #24]
 80080c2:	4694      	mov	ip, r2
 80080c4:	9317      	str	r3, [sp, #92]	; 0x5c
 80080c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80080c8:	9010      	str	r0, [sp, #64]	; 0x40
 80080ca:	9111      	str	r1, [sp, #68]	; 0x44
 80080cc:	4463      	add	r3, ip
 80080ce:	9319      	str	r3, [sp, #100]	; 0x64
 80080d0:	0029      	movs	r1, r5
 80080d2:	0020      	movs	r0, r4
 80080d4:	f7fa fc86 	bl	80029e4 <__aeabi_d2iz>
 80080d8:	9014      	str	r0, [sp, #80]	; 0x50
 80080da:	f7fa fcb9 	bl	8002a50 <__aeabi_i2d>
 80080de:	0002      	movs	r2, r0
 80080e0:	000b      	movs	r3, r1
 80080e2:	0020      	movs	r0, r4
 80080e4:	0029      	movs	r1, r5
 80080e6:	f7fa f8cd 	bl	8002284 <__aeabi_dsub>
 80080ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80080ee:	3301      	adds	r3, #1
 80080f0:	9308      	str	r3, [sp, #32]
 80080f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80080f4:	0004      	movs	r4, r0
 80080f6:	3330      	adds	r3, #48	; 0x30
 80080f8:	7013      	strb	r3, [r2, #0]
 80080fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80080fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080fe:	000d      	movs	r5, r1
 8008100:	f7f8 f9aa 	bl	8000458 <__aeabi_dcmplt>
 8008104:	2800      	cmp	r0, #0
 8008106:	d175      	bne.n	80081f4 <_dtoa_r+0x67c>
 8008108:	0022      	movs	r2, r4
 800810a:	002b      	movs	r3, r5
 800810c:	2000      	movs	r0, #0
 800810e:	4940      	ldr	r1, [pc, #256]	; (8008210 <_dtoa_r+0x698>)
 8008110:	f7fa f8b8 	bl	8002284 <__aeabi_dsub>
 8008114:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008116:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008118:	f7f8 f99e 	bl	8000458 <__aeabi_dcmplt>
 800811c:	2800      	cmp	r0, #0
 800811e:	d000      	beq.n	8008122 <_dtoa_r+0x5aa>
 8008120:	e0d2      	b.n	80082c8 <_dtoa_r+0x750>
 8008122:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008124:	9a08      	ldr	r2, [sp, #32]
 8008126:	4293      	cmp	r3, r2
 8008128:	d100      	bne.n	800812c <_dtoa_r+0x5b4>
 800812a:	e770      	b.n	800800e <_dtoa_r+0x496>
 800812c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800812e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008130:	2200      	movs	r2, #0
 8008132:	4b38      	ldr	r3, [pc, #224]	; (8008214 <_dtoa_r+0x69c>)
 8008134:	f7f9 fe3a 	bl	8001dac <__aeabi_dmul>
 8008138:	4b36      	ldr	r3, [pc, #216]	; (8008214 <_dtoa_r+0x69c>)
 800813a:	9010      	str	r0, [sp, #64]	; 0x40
 800813c:	9111      	str	r1, [sp, #68]	; 0x44
 800813e:	2200      	movs	r2, #0
 8008140:	0020      	movs	r0, r4
 8008142:	0029      	movs	r1, r5
 8008144:	f7f9 fe32 	bl	8001dac <__aeabi_dmul>
 8008148:	9b08      	ldr	r3, [sp, #32]
 800814a:	0004      	movs	r4, r0
 800814c:	000d      	movs	r5, r1
 800814e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008150:	e7be      	b.n	80080d0 <_dtoa_r+0x558>
 8008152:	9808      	ldr	r0, [sp, #32]
 8008154:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008156:	f7f9 fe29 	bl	8001dac <__aeabi_dmul>
 800815a:	9a06      	ldr	r2, [sp, #24]
 800815c:	9b06      	ldr	r3, [sp, #24]
 800815e:	4694      	mov	ip, r2
 8008160:	9308      	str	r3, [sp, #32]
 8008162:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008164:	9010      	str	r0, [sp, #64]	; 0x40
 8008166:	9111      	str	r1, [sp, #68]	; 0x44
 8008168:	4463      	add	r3, ip
 800816a:	9319      	str	r3, [sp, #100]	; 0x64
 800816c:	0029      	movs	r1, r5
 800816e:	0020      	movs	r0, r4
 8008170:	f7fa fc38 	bl	80029e4 <__aeabi_d2iz>
 8008174:	9017      	str	r0, [sp, #92]	; 0x5c
 8008176:	f7fa fc6b 	bl	8002a50 <__aeabi_i2d>
 800817a:	0002      	movs	r2, r0
 800817c:	000b      	movs	r3, r1
 800817e:	0020      	movs	r0, r4
 8008180:	0029      	movs	r1, r5
 8008182:	f7fa f87f 	bl	8002284 <__aeabi_dsub>
 8008186:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008188:	9a08      	ldr	r2, [sp, #32]
 800818a:	3330      	adds	r3, #48	; 0x30
 800818c:	7013      	strb	r3, [r2, #0]
 800818e:	0013      	movs	r3, r2
 8008190:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008192:	3301      	adds	r3, #1
 8008194:	0004      	movs	r4, r0
 8008196:	000d      	movs	r5, r1
 8008198:	9308      	str	r3, [sp, #32]
 800819a:	4293      	cmp	r3, r2
 800819c:	d12c      	bne.n	80081f8 <_dtoa_r+0x680>
 800819e:	9810      	ldr	r0, [sp, #64]	; 0x40
 80081a0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80081a2:	9a06      	ldr	r2, [sp, #24]
 80081a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80081a6:	4694      	mov	ip, r2
 80081a8:	4463      	add	r3, ip
 80081aa:	2200      	movs	r2, #0
 80081ac:	9308      	str	r3, [sp, #32]
 80081ae:	4b1e      	ldr	r3, [pc, #120]	; (8008228 <_dtoa_r+0x6b0>)
 80081b0:	f7f8 febe 	bl	8000f30 <__aeabi_dadd>
 80081b4:	0002      	movs	r2, r0
 80081b6:	000b      	movs	r3, r1
 80081b8:	0020      	movs	r0, r4
 80081ba:	0029      	movs	r1, r5
 80081bc:	f7f8 f960 	bl	8000480 <__aeabi_dcmpgt>
 80081c0:	2800      	cmp	r0, #0
 80081c2:	d000      	beq.n	80081c6 <_dtoa_r+0x64e>
 80081c4:	e080      	b.n	80082c8 <_dtoa_r+0x750>
 80081c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80081c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081ca:	2000      	movs	r0, #0
 80081cc:	4916      	ldr	r1, [pc, #88]	; (8008228 <_dtoa_r+0x6b0>)
 80081ce:	f7fa f859 	bl	8002284 <__aeabi_dsub>
 80081d2:	0002      	movs	r2, r0
 80081d4:	000b      	movs	r3, r1
 80081d6:	0020      	movs	r0, r4
 80081d8:	0029      	movs	r1, r5
 80081da:	f7f8 f93d 	bl	8000458 <__aeabi_dcmplt>
 80081de:	2800      	cmp	r0, #0
 80081e0:	d100      	bne.n	80081e4 <_dtoa_r+0x66c>
 80081e2:	e714      	b.n	800800e <_dtoa_r+0x496>
 80081e4:	9b08      	ldr	r3, [sp, #32]
 80081e6:	001a      	movs	r2, r3
 80081e8:	3a01      	subs	r2, #1
 80081ea:	9208      	str	r2, [sp, #32]
 80081ec:	7812      	ldrb	r2, [r2, #0]
 80081ee:	2a30      	cmp	r2, #48	; 0x30
 80081f0:	d0f8      	beq.n	80081e4 <_dtoa_r+0x66c>
 80081f2:	9308      	str	r3, [sp, #32]
 80081f4:	9602      	str	r6, [sp, #8]
 80081f6:	e055      	b.n	80082a4 <_dtoa_r+0x72c>
 80081f8:	2200      	movs	r2, #0
 80081fa:	4b06      	ldr	r3, [pc, #24]	; (8008214 <_dtoa_r+0x69c>)
 80081fc:	f7f9 fdd6 	bl	8001dac <__aeabi_dmul>
 8008200:	0004      	movs	r4, r0
 8008202:	000d      	movs	r5, r1
 8008204:	e7b2      	b.n	800816c <_dtoa_r+0x5f4>
 8008206:	46c0      	nop			; (mov r8, r8)
 8008208:	0800a380 	.word	0x0800a380
 800820c:	0800a358 	.word	0x0800a358
 8008210:	3ff00000 	.word	0x3ff00000
 8008214:	40240000 	.word	0x40240000
 8008218:	401c0000 	.word	0x401c0000
 800821c:	fcc00000 	.word	0xfcc00000
 8008220:	40140000 	.word	0x40140000
 8008224:	7cc00000 	.word	0x7cc00000
 8008228:	3fe00000 	.word	0x3fe00000
 800822c:	9b07      	ldr	r3, [sp, #28]
 800822e:	9e06      	ldr	r6, [sp, #24]
 8008230:	3b01      	subs	r3, #1
 8008232:	199b      	adds	r3, r3, r6
 8008234:	930c      	str	r3, [sp, #48]	; 0x30
 8008236:	9c08      	ldr	r4, [sp, #32]
 8008238:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800823a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800823c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800823e:	0020      	movs	r0, r4
 8008240:	0029      	movs	r1, r5
 8008242:	f7f9 f9b1 	bl	80015a8 <__aeabi_ddiv>
 8008246:	f7fa fbcd 	bl	80029e4 <__aeabi_d2iz>
 800824a:	9007      	str	r0, [sp, #28]
 800824c:	f7fa fc00 	bl	8002a50 <__aeabi_i2d>
 8008250:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008254:	f7f9 fdaa 	bl	8001dac <__aeabi_dmul>
 8008258:	0002      	movs	r2, r0
 800825a:	000b      	movs	r3, r1
 800825c:	0020      	movs	r0, r4
 800825e:	0029      	movs	r1, r5
 8008260:	f7fa f810 	bl	8002284 <__aeabi_dsub>
 8008264:	0033      	movs	r3, r6
 8008266:	9a07      	ldr	r2, [sp, #28]
 8008268:	3601      	adds	r6, #1
 800826a:	3230      	adds	r2, #48	; 0x30
 800826c:	701a      	strb	r2, [r3, #0]
 800826e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008270:	9608      	str	r6, [sp, #32]
 8008272:	429a      	cmp	r2, r3
 8008274:	d139      	bne.n	80082ea <_dtoa_r+0x772>
 8008276:	0002      	movs	r2, r0
 8008278:	000b      	movs	r3, r1
 800827a:	f7f8 fe59 	bl	8000f30 <__aeabi_dadd>
 800827e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008280:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008282:	0004      	movs	r4, r0
 8008284:	000d      	movs	r5, r1
 8008286:	f7f8 f8fb 	bl	8000480 <__aeabi_dcmpgt>
 800828a:	2800      	cmp	r0, #0
 800828c:	d11b      	bne.n	80082c6 <_dtoa_r+0x74e>
 800828e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008290:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008292:	0020      	movs	r0, r4
 8008294:	0029      	movs	r1, r5
 8008296:	f7f8 f8d9 	bl	800044c <__aeabi_dcmpeq>
 800829a:	2800      	cmp	r0, #0
 800829c:	d002      	beq.n	80082a4 <_dtoa_r+0x72c>
 800829e:	9b07      	ldr	r3, [sp, #28]
 80082a0:	07db      	lsls	r3, r3, #31
 80082a2:	d410      	bmi.n	80082c6 <_dtoa_r+0x74e>
 80082a4:	0038      	movs	r0, r7
 80082a6:	9905      	ldr	r1, [sp, #20]
 80082a8:	f000 fd24 	bl	8008cf4 <_Bfree>
 80082ac:	2300      	movs	r3, #0
 80082ae:	9a08      	ldr	r2, [sp, #32]
 80082b0:	9802      	ldr	r0, [sp, #8]
 80082b2:	7013      	strb	r3, [r2, #0]
 80082b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80082b6:	3001      	adds	r0, #1
 80082b8:	6018      	str	r0, [r3, #0]
 80082ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d100      	bne.n	80082c2 <_dtoa_r+0x74a>
 80082c0:	e4a6      	b.n	8007c10 <_dtoa_r+0x98>
 80082c2:	601a      	str	r2, [r3, #0]
 80082c4:	e4a4      	b.n	8007c10 <_dtoa_r+0x98>
 80082c6:	9e02      	ldr	r6, [sp, #8]
 80082c8:	9b08      	ldr	r3, [sp, #32]
 80082ca:	9308      	str	r3, [sp, #32]
 80082cc:	3b01      	subs	r3, #1
 80082ce:	781a      	ldrb	r2, [r3, #0]
 80082d0:	2a39      	cmp	r2, #57	; 0x39
 80082d2:	d106      	bne.n	80082e2 <_dtoa_r+0x76a>
 80082d4:	9a06      	ldr	r2, [sp, #24]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d1f7      	bne.n	80082ca <_dtoa_r+0x752>
 80082da:	2230      	movs	r2, #48	; 0x30
 80082dc:	9906      	ldr	r1, [sp, #24]
 80082de:	3601      	adds	r6, #1
 80082e0:	700a      	strb	r2, [r1, #0]
 80082e2:	781a      	ldrb	r2, [r3, #0]
 80082e4:	3201      	adds	r2, #1
 80082e6:	701a      	strb	r2, [r3, #0]
 80082e8:	e784      	b.n	80081f4 <_dtoa_r+0x67c>
 80082ea:	2200      	movs	r2, #0
 80082ec:	4baa      	ldr	r3, [pc, #680]	; (8008598 <_dtoa_r+0xa20>)
 80082ee:	f7f9 fd5d 	bl	8001dac <__aeabi_dmul>
 80082f2:	2200      	movs	r2, #0
 80082f4:	2300      	movs	r3, #0
 80082f6:	0004      	movs	r4, r0
 80082f8:	000d      	movs	r5, r1
 80082fa:	f7f8 f8a7 	bl	800044c <__aeabi_dcmpeq>
 80082fe:	2800      	cmp	r0, #0
 8008300:	d09b      	beq.n	800823a <_dtoa_r+0x6c2>
 8008302:	e7cf      	b.n	80082a4 <_dtoa_r+0x72c>
 8008304:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008306:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008308:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800830a:	2d00      	cmp	r5, #0
 800830c:	d012      	beq.n	8008334 <_dtoa_r+0x7bc>
 800830e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008310:	2a01      	cmp	r2, #1
 8008312:	dc66      	bgt.n	80083e2 <_dtoa_r+0x86a>
 8008314:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008316:	2a00      	cmp	r2, #0
 8008318:	d05d      	beq.n	80083d6 <_dtoa_r+0x85e>
 800831a:	4aa0      	ldr	r2, [pc, #640]	; (800859c <_dtoa_r+0xa24>)
 800831c:	189b      	adds	r3, r3, r2
 800831e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008320:	2101      	movs	r1, #1
 8008322:	18d2      	adds	r2, r2, r3
 8008324:	920a      	str	r2, [sp, #40]	; 0x28
 8008326:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008328:	0038      	movs	r0, r7
 800832a:	18d3      	adds	r3, r2, r3
 800832c:	930d      	str	r3, [sp, #52]	; 0x34
 800832e:	f000 fd91 	bl	8008e54 <__i2b>
 8008332:	0005      	movs	r5, r0
 8008334:	2c00      	cmp	r4, #0
 8008336:	dd0e      	ble.n	8008356 <_dtoa_r+0x7de>
 8008338:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800833a:	2b00      	cmp	r3, #0
 800833c:	dd0b      	ble.n	8008356 <_dtoa_r+0x7de>
 800833e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008340:	0023      	movs	r3, r4
 8008342:	4294      	cmp	r4, r2
 8008344:	dd00      	ble.n	8008348 <_dtoa_r+0x7d0>
 8008346:	0013      	movs	r3, r2
 8008348:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800834a:	1ae4      	subs	r4, r4, r3
 800834c:	1ad2      	subs	r2, r2, r3
 800834e:	920a      	str	r2, [sp, #40]	; 0x28
 8008350:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008352:	1ad3      	subs	r3, r2, r3
 8008354:	930d      	str	r3, [sp, #52]	; 0x34
 8008356:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008358:	2b00      	cmp	r3, #0
 800835a:	d01f      	beq.n	800839c <_dtoa_r+0x824>
 800835c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800835e:	2b00      	cmp	r3, #0
 8008360:	d054      	beq.n	800840c <_dtoa_r+0x894>
 8008362:	2e00      	cmp	r6, #0
 8008364:	dd11      	ble.n	800838a <_dtoa_r+0x812>
 8008366:	0029      	movs	r1, r5
 8008368:	0032      	movs	r2, r6
 800836a:	0038      	movs	r0, r7
 800836c:	f000 fe38 	bl	8008fe0 <__pow5mult>
 8008370:	9a05      	ldr	r2, [sp, #20]
 8008372:	0001      	movs	r1, r0
 8008374:	0005      	movs	r5, r0
 8008376:	0038      	movs	r0, r7
 8008378:	f000 fd82 	bl	8008e80 <__multiply>
 800837c:	9905      	ldr	r1, [sp, #20]
 800837e:	9014      	str	r0, [sp, #80]	; 0x50
 8008380:	0038      	movs	r0, r7
 8008382:	f000 fcb7 	bl	8008cf4 <_Bfree>
 8008386:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008388:	9305      	str	r3, [sp, #20]
 800838a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800838c:	1b9a      	subs	r2, r3, r6
 800838e:	42b3      	cmp	r3, r6
 8008390:	d004      	beq.n	800839c <_dtoa_r+0x824>
 8008392:	0038      	movs	r0, r7
 8008394:	9905      	ldr	r1, [sp, #20]
 8008396:	f000 fe23 	bl	8008fe0 <__pow5mult>
 800839a:	9005      	str	r0, [sp, #20]
 800839c:	2101      	movs	r1, #1
 800839e:	0038      	movs	r0, r7
 80083a0:	f000 fd58 	bl	8008e54 <__i2b>
 80083a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083a6:	0006      	movs	r6, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	dd31      	ble.n	8008410 <_dtoa_r+0x898>
 80083ac:	001a      	movs	r2, r3
 80083ae:	0001      	movs	r1, r0
 80083b0:	0038      	movs	r0, r7
 80083b2:	f000 fe15 	bl	8008fe0 <__pow5mult>
 80083b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083b8:	0006      	movs	r6, r0
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	dd2d      	ble.n	800841a <_dtoa_r+0x8a2>
 80083be:	2300      	movs	r3, #0
 80083c0:	930e      	str	r3, [sp, #56]	; 0x38
 80083c2:	6933      	ldr	r3, [r6, #16]
 80083c4:	3303      	adds	r3, #3
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	18f3      	adds	r3, r6, r3
 80083ca:	6858      	ldr	r0, [r3, #4]
 80083cc:	f000 fcfa 	bl	8008dc4 <__hi0bits>
 80083d0:	2320      	movs	r3, #32
 80083d2:	1a18      	subs	r0, r3, r0
 80083d4:	e039      	b.n	800844a <_dtoa_r+0x8d2>
 80083d6:	2336      	movs	r3, #54	; 0x36
 80083d8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80083da:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80083dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80083de:	1a9b      	subs	r3, r3, r2
 80083e0:	e79d      	b.n	800831e <_dtoa_r+0x7a6>
 80083e2:	9b07      	ldr	r3, [sp, #28]
 80083e4:	1e5e      	subs	r6, r3, #1
 80083e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083e8:	42b3      	cmp	r3, r6
 80083ea:	db07      	blt.n	80083fc <_dtoa_r+0x884>
 80083ec:	1b9e      	subs	r6, r3, r6
 80083ee:	9b07      	ldr	r3, [sp, #28]
 80083f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	da93      	bge.n	800831e <_dtoa_r+0x7a6>
 80083f6:	1ae4      	subs	r4, r4, r3
 80083f8:	2300      	movs	r3, #0
 80083fa:	e790      	b.n	800831e <_dtoa_r+0x7a6>
 80083fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008400:	1af3      	subs	r3, r6, r3
 8008402:	18d3      	adds	r3, r2, r3
 8008404:	960e      	str	r6, [sp, #56]	; 0x38
 8008406:	9315      	str	r3, [sp, #84]	; 0x54
 8008408:	2600      	movs	r6, #0
 800840a:	e7f0      	b.n	80083ee <_dtoa_r+0x876>
 800840c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800840e:	e7c0      	b.n	8008392 <_dtoa_r+0x81a>
 8008410:	2300      	movs	r3, #0
 8008412:	930e      	str	r3, [sp, #56]	; 0x38
 8008414:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008416:	2b01      	cmp	r3, #1
 8008418:	dc13      	bgt.n	8008442 <_dtoa_r+0x8ca>
 800841a:	2300      	movs	r3, #0
 800841c:	930e      	str	r3, [sp, #56]	; 0x38
 800841e:	9b08      	ldr	r3, [sp, #32]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10e      	bne.n	8008442 <_dtoa_r+0x8ca>
 8008424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008426:	031b      	lsls	r3, r3, #12
 8008428:	d10b      	bne.n	8008442 <_dtoa_r+0x8ca>
 800842a:	4b5d      	ldr	r3, [pc, #372]	; (80085a0 <_dtoa_r+0xa28>)
 800842c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800842e:	4213      	tst	r3, r2
 8008430:	d007      	beq.n	8008442 <_dtoa_r+0x8ca>
 8008432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008434:	3301      	adds	r3, #1
 8008436:	930a      	str	r3, [sp, #40]	; 0x28
 8008438:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800843a:	3301      	adds	r3, #1
 800843c:	930d      	str	r3, [sp, #52]	; 0x34
 800843e:	2301      	movs	r3, #1
 8008440:	930e      	str	r3, [sp, #56]	; 0x38
 8008442:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008444:	2001      	movs	r0, #1
 8008446:	2b00      	cmp	r3, #0
 8008448:	d1bb      	bne.n	80083c2 <_dtoa_r+0x84a>
 800844a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800844c:	221f      	movs	r2, #31
 800844e:	1818      	adds	r0, r3, r0
 8008450:	0003      	movs	r3, r0
 8008452:	4013      	ands	r3, r2
 8008454:	4210      	tst	r0, r2
 8008456:	d046      	beq.n	80084e6 <_dtoa_r+0x96e>
 8008458:	3201      	adds	r2, #1
 800845a:	1ad2      	subs	r2, r2, r3
 800845c:	2a04      	cmp	r2, #4
 800845e:	dd3f      	ble.n	80084e0 <_dtoa_r+0x968>
 8008460:	221c      	movs	r2, #28
 8008462:	1ad3      	subs	r3, r2, r3
 8008464:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008466:	18e4      	adds	r4, r4, r3
 8008468:	18d2      	adds	r2, r2, r3
 800846a:	920a      	str	r2, [sp, #40]	; 0x28
 800846c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800846e:	18d3      	adds	r3, r2, r3
 8008470:	930d      	str	r3, [sp, #52]	; 0x34
 8008472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008474:	2b00      	cmp	r3, #0
 8008476:	dd05      	ble.n	8008484 <_dtoa_r+0x90c>
 8008478:	001a      	movs	r2, r3
 800847a:	0038      	movs	r0, r7
 800847c:	9905      	ldr	r1, [sp, #20]
 800847e:	f000 fe0b 	bl	8009098 <__lshift>
 8008482:	9005      	str	r0, [sp, #20]
 8008484:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008486:	2b00      	cmp	r3, #0
 8008488:	dd05      	ble.n	8008496 <_dtoa_r+0x91e>
 800848a:	0031      	movs	r1, r6
 800848c:	001a      	movs	r2, r3
 800848e:	0038      	movs	r0, r7
 8008490:	f000 fe02 	bl	8009098 <__lshift>
 8008494:	0006      	movs	r6, r0
 8008496:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008498:	2b00      	cmp	r3, #0
 800849a:	d026      	beq.n	80084ea <_dtoa_r+0x972>
 800849c:	0031      	movs	r1, r6
 800849e:	9805      	ldr	r0, [sp, #20]
 80084a0:	f000 fe68 	bl	8009174 <__mcmp>
 80084a4:	2800      	cmp	r0, #0
 80084a6:	da20      	bge.n	80084ea <_dtoa_r+0x972>
 80084a8:	9b02      	ldr	r3, [sp, #8]
 80084aa:	220a      	movs	r2, #10
 80084ac:	3b01      	subs	r3, #1
 80084ae:	9302      	str	r3, [sp, #8]
 80084b0:	0038      	movs	r0, r7
 80084b2:	2300      	movs	r3, #0
 80084b4:	9905      	ldr	r1, [sp, #20]
 80084b6:	f000 fc41 	bl	8008d3c <__multadd>
 80084ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084bc:	9005      	str	r0, [sp, #20]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d100      	bne.n	80084c4 <_dtoa_r+0x94c>
 80084c2:	e166      	b.n	8008792 <_dtoa_r+0xc1a>
 80084c4:	2300      	movs	r3, #0
 80084c6:	0029      	movs	r1, r5
 80084c8:	220a      	movs	r2, #10
 80084ca:	0038      	movs	r0, r7
 80084cc:	f000 fc36 	bl	8008d3c <__multadd>
 80084d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084d2:	0005      	movs	r5, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	dc47      	bgt.n	8008568 <_dtoa_r+0x9f0>
 80084d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084da:	2b02      	cmp	r3, #2
 80084dc:	dc0d      	bgt.n	80084fa <_dtoa_r+0x982>
 80084de:	e043      	b.n	8008568 <_dtoa_r+0x9f0>
 80084e0:	2a04      	cmp	r2, #4
 80084e2:	d0c6      	beq.n	8008472 <_dtoa_r+0x8fa>
 80084e4:	0013      	movs	r3, r2
 80084e6:	331c      	adds	r3, #28
 80084e8:	e7bc      	b.n	8008464 <_dtoa_r+0x8ec>
 80084ea:	9b07      	ldr	r3, [sp, #28]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	dc35      	bgt.n	800855c <_dtoa_r+0x9e4>
 80084f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	dd32      	ble.n	800855c <_dtoa_r+0x9e4>
 80084f6:	9b07      	ldr	r3, [sp, #28]
 80084f8:	930c      	str	r3, [sp, #48]	; 0x30
 80084fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d10c      	bne.n	800851a <_dtoa_r+0x9a2>
 8008500:	0031      	movs	r1, r6
 8008502:	2205      	movs	r2, #5
 8008504:	0038      	movs	r0, r7
 8008506:	f000 fc19 	bl	8008d3c <__multadd>
 800850a:	0006      	movs	r6, r0
 800850c:	0001      	movs	r1, r0
 800850e:	9805      	ldr	r0, [sp, #20]
 8008510:	f000 fe30 	bl	8009174 <__mcmp>
 8008514:	2800      	cmp	r0, #0
 8008516:	dd00      	ble.n	800851a <_dtoa_r+0x9a2>
 8008518:	e5a5      	b.n	8008066 <_dtoa_r+0x4ee>
 800851a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800851c:	43db      	mvns	r3, r3
 800851e:	9302      	str	r3, [sp, #8]
 8008520:	9b06      	ldr	r3, [sp, #24]
 8008522:	9308      	str	r3, [sp, #32]
 8008524:	2400      	movs	r4, #0
 8008526:	0031      	movs	r1, r6
 8008528:	0038      	movs	r0, r7
 800852a:	f000 fbe3 	bl	8008cf4 <_Bfree>
 800852e:	2d00      	cmp	r5, #0
 8008530:	d100      	bne.n	8008534 <_dtoa_r+0x9bc>
 8008532:	e6b7      	b.n	80082a4 <_dtoa_r+0x72c>
 8008534:	2c00      	cmp	r4, #0
 8008536:	d005      	beq.n	8008544 <_dtoa_r+0x9cc>
 8008538:	42ac      	cmp	r4, r5
 800853a:	d003      	beq.n	8008544 <_dtoa_r+0x9cc>
 800853c:	0021      	movs	r1, r4
 800853e:	0038      	movs	r0, r7
 8008540:	f000 fbd8 	bl	8008cf4 <_Bfree>
 8008544:	0029      	movs	r1, r5
 8008546:	0038      	movs	r0, r7
 8008548:	f000 fbd4 	bl	8008cf4 <_Bfree>
 800854c:	e6aa      	b.n	80082a4 <_dtoa_r+0x72c>
 800854e:	2600      	movs	r6, #0
 8008550:	0035      	movs	r5, r6
 8008552:	e7e2      	b.n	800851a <_dtoa_r+0x9a2>
 8008554:	9602      	str	r6, [sp, #8]
 8008556:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8008558:	0035      	movs	r5, r6
 800855a:	e584      	b.n	8008066 <_dtoa_r+0x4ee>
 800855c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800855e:	2b00      	cmp	r3, #0
 8008560:	d100      	bne.n	8008564 <_dtoa_r+0x9ec>
 8008562:	e0ce      	b.n	8008702 <_dtoa_r+0xb8a>
 8008564:	9b07      	ldr	r3, [sp, #28]
 8008566:	930c      	str	r3, [sp, #48]	; 0x30
 8008568:	2c00      	cmp	r4, #0
 800856a:	dd05      	ble.n	8008578 <_dtoa_r+0xa00>
 800856c:	0029      	movs	r1, r5
 800856e:	0022      	movs	r2, r4
 8008570:	0038      	movs	r0, r7
 8008572:	f000 fd91 	bl	8009098 <__lshift>
 8008576:	0005      	movs	r5, r0
 8008578:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800857a:	0028      	movs	r0, r5
 800857c:	2b00      	cmp	r3, #0
 800857e:	d022      	beq.n	80085c6 <_dtoa_r+0xa4e>
 8008580:	0038      	movs	r0, r7
 8008582:	6869      	ldr	r1, [r5, #4]
 8008584:	f000 fb72 	bl	8008c6c <_Balloc>
 8008588:	1e04      	subs	r4, r0, #0
 800858a:	d10f      	bne.n	80085ac <_dtoa_r+0xa34>
 800858c:	0002      	movs	r2, r0
 800858e:	4b05      	ldr	r3, [pc, #20]	; (80085a4 <_dtoa_r+0xa2c>)
 8008590:	4905      	ldr	r1, [pc, #20]	; (80085a8 <_dtoa_r+0xa30>)
 8008592:	f7ff fb06 	bl	8007ba2 <_dtoa_r+0x2a>
 8008596:	46c0      	nop			; (mov r8, r8)
 8008598:	40240000 	.word	0x40240000
 800859c:	00000433 	.word	0x00000433
 80085a0:	7ff00000 	.word	0x7ff00000
 80085a4:	0800a287 	.word	0x0800a287
 80085a8:	000002ea 	.word	0x000002ea
 80085ac:	0029      	movs	r1, r5
 80085ae:	692b      	ldr	r3, [r5, #16]
 80085b0:	310c      	adds	r1, #12
 80085b2:	1c9a      	adds	r2, r3, #2
 80085b4:	0092      	lsls	r2, r2, #2
 80085b6:	300c      	adds	r0, #12
 80085b8:	f000 fb4f 	bl	8008c5a <memcpy>
 80085bc:	2201      	movs	r2, #1
 80085be:	0021      	movs	r1, r4
 80085c0:	0038      	movs	r0, r7
 80085c2:	f000 fd69 	bl	8009098 <__lshift>
 80085c6:	9b06      	ldr	r3, [sp, #24]
 80085c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80085ca:	930a      	str	r3, [sp, #40]	; 0x28
 80085cc:	3b01      	subs	r3, #1
 80085ce:	189b      	adds	r3, r3, r2
 80085d0:	2201      	movs	r2, #1
 80085d2:	002c      	movs	r4, r5
 80085d4:	0005      	movs	r5, r0
 80085d6:	9314      	str	r3, [sp, #80]	; 0x50
 80085d8:	9b08      	ldr	r3, [sp, #32]
 80085da:	4013      	ands	r3, r2
 80085dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80085de:	0031      	movs	r1, r6
 80085e0:	9805      	ldr	r0, [sp, #20]
 80085e2:	f7ff fa3d 	bl	8007a60 <quorem>
 80085e6:	0003      	movs	r3, r0
 80085e8:	0021      	movs	r1, r4
 80085ea:	3330      	adds	r3, #48	; 0x30
 80085ec:	900d      	str	r0, [sp, #52]	; 0x34
 80085ee:	9805      	ldr	r0, [sp, #20]
 80085f0:	9307      	str	r3, [sp, #28]
 80085f2:	f000 fdbf 	bl	8009174 <__mcmp>
 80085f6:	002a      	movs	r2, r5
 80085f8:	900e      	str	r0, [sp, #56]	; 0x38
 80085fa:	0031      	movs	r1, r6
 80085fc:	0038      	movs	r0, r7
 80085fe:	f000 fdd5 	bl	80091ac <__mdiff>
 8008602:	68c3      	ldr	r3, [r0, #12]
 8008604:	9008      	str	r0, [sp, #32]
 8008606:	9310      	str	r3, [sp, #64]	; 0x40
 8008608:	2301      	movs	r3, #1
 800860a:	930c      	str	r3, [sp, #48]	; 0x30
 800860c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800860e:	2b00      	cmp	r3, #0
 8008610:	d104      	bne.n	800861c <_dtoa_r+0xaa4>
 8008612:	0001      	movs	r1, r0
 8008614:	9805      	ldr	r0, [sp, #20]
 8008616:	f000 fdad 	bl	8009174 <__mcmp>
 800861a:	900c      	str	r0, [sp, #48]	; 0x30
 800861c:	0038      	movs	r0, r7
 800861e:	9908      	ldr	r1, [sp, #32]
 8008620:	f000 fb68 	bl	8008cf4 <_Bfree>
 8008624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008626:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008628:	3301      	adds	r3, #1
 800862a:	9308      	str	r3, [sp, #32]
 800862c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800862e:	4313      	orrs	r3, r2
 8008630:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008632:	4313      	orrs	r3, r2
 8008634:	d10c      	bne.n	8008650 <_dtoa_r+0xad8>
 8008636:	9b07      	ldr	r3, [sp, #28]
 8008638:	2b39      	cmp	r3, #57	; 0x39
 800863a:	d026      	beq.n	800868a <_dtoa_r+0xb12>
 800863c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800863e:	2b00      	cmp	r3, #0
 8008640:	dd02      	ble.n	8008648 <_dtoa_r+0xad0>
 8008642:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008644:	3331      	adds	r3, #49	; 0x31
 8008646:	9307      	str	r3, [sp, #28]
 8008648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800864a:	9a07      	ldr	r2, [sp, #28]
 800864c:	701a      	strb	r2, [r3, #0]
 800864e:	e76a      	b.n	8008526 <_dtoa_r+0x9ae>
 8008650:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008652:	2b00      	cmp	r3, #0
 8008654:	db04      	blt.n	8008660 <_dtoa_r+0xae8>
 8008656:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008658:	4313      	orrs	r3, r2
 800865a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800865c:	4313      	orrs	r3, r2
 800865e:	d11f      	bne.n	80086a0 <_dtoa_r+0xb28>
 8008660:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008662:	2b00      	cmp	r3, #0
 8008664:	ddf0      	ble.n	8008648 <_dtoa_r+0xad0>
 8008666:	9905      	ldr	r1, [sp, #20]
 8008668:	2201      	movs	r2, #1
 800866a:	0038      	movs	r0, r7
 800866c:	f000 fd14 	bl	8009098 <__lshift>
 8008670:	0031      	movs	r1, r6
 8008672:	9005      	str	r0, [sp, #20]
 8008674:	f000 fd7e 	bl	8009174 <__mcmp>
 8008678:	2800      	cmp	r0, #0
 800867a:	dc03      	bgt.n	8008684 <_dtoa_r+0xb0c>
 800867c:	d1e4      	bne.n	8008648 <_dtoa_r+0xad0>
 800867e:	9b07      	ldr	r3, [sp, #28]
 8008680:	07db      	lsls	r3, r3, #31
 8008682:	d5e1      	bpl.n	8008648 <_dtoa_r+0xad0>
 8008684:	9b07      	ldr	r3, [sp, #28]
 8008686:	2b39      	cmp	r3, #57	; 0x39
 8008688:	d1db      	bne.n	8008642 <_dtoa_r+0xaca>
 800868a:	2339      	movs	r3, #57	; 0x39
 800868c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800868e:	7013      	strb	r3, [r2, #0]
 8008690:	9b08      	ldr	r3, [sp, #32]
 8008692:	9308      	str	r3, [sp, #32]
 8008694:	3b01      	subs	r3, #1
 8008696:	781a      	ldrb	r2, [r3, #0]
 8008698:	2a39      	cmp	r2, #57	; 0x39
 800869a:	d068      	beq.n	800876e <_dtoa_r+0xbf6>
 800869c:	3201      	adds	r2, #1
 800869e:	e7d5      	b.n	800864c <_dtoa_r+0xad4>
 80086a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	dd07      	ble.n	80086b6 <_dtoa_r+0xb3e>
 80086a6:	9b07      	ldr	r3, [sp, #28]
 80086a8:	2b39      	cmp	r3, #57	; 0x39
 80086aa:	d0ee      	beq.n	800868a <_dtoa_r+0xb12>
 80086ac:	9b07      	ldr	r3, [sp, #28]
 80086ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086b0:	3301      	adds	r3, #1
 80086b2:	7013      	strb	r3, [r2, #0]
 80086b4:	e737      	b.n	8008526 <_dtoa_r+0x9ae>
 80086b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086b8:	9a07      	ldr	r2, [sp, #28]
 80086ba:	701a      	strb	r2, [r3, #0]
 80086bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80086be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d03e      	beq.n	8008742 <_dtoa_r+0xbca>
 80086c4:	2300      	movs	r3, #0
 80086c6:	220a      	movs	r2, #10
 80086c8:	9905      	ldr	r1, [sp, #20]
 80086ca:	0038      	movs	r0, r7
 80086cc:	f000 fb36 	bl	8008d3c <__multadd>
 80086d0:	2300      	movs	r3, #0
 80086d2:	9005      	str	r0, [sp, #20]
 80086d4:	220a      	movs	r2, #10
 80086d6:	0021      	movs	r1, r4
 80086d8:	0038      	movs	r0, r7
 80086da:	42ac      	cmp	r4, r5
 80086dc:	d106      	bne.n	80086ec <_dtoa_r+0xb74>
 80086de:	f000 fb2d 	bl	8008d3c <__multadd>
 80086e2:	0004      	movs	r4, r0
 80086e4:	0005      	movs	r5, r0
 80086e6:	9b08      	ldr	r3, [sp, #32]
 80086e8:	930a      	str	r3, [sp, #40]	; 0x28
 80086ea:	e778      	b.n	80085de <_dtoa_r+0xa66>
 80086ec:	f000 fb26 	bl	8008d3c <__multadd>
 80086f0:	0029      	movs	r1, r5
 80086f2:	0004      	movs	r4, r0
 80086f4:	2300      	movs	r3, #0
 80086f6:	220a      	movs	r2, #10
 80086f8:	0038      	movs	r0, r7
 80086fa:	f000 fb1f 	bl	8008d3c <__multadd>
 80086fe:	0005      	movs	r5, r0
 8008700:	e7f1      	b.n	80086e6 <_dtoa_r+0xb6e>
 8008702:	9b07      	ldr	r3, [sp, #28]
 8008704:	930c      	str	r3, [sp, #48]	; 0x30
 8008706:	2400      	movs	r4, #0
 8008708:	0031      	movs	r1, r6
 800870a:	9805      	ldr	r0, [sp, #20]
 800870c:	f7ff f9a8 	bl	8007a60 <quorem>
 8008710:	9b06      	ldr	r3, [sp, #24]
 8008712:	3030      	adds	r0, #48	; 0x30
 8008714:	5518      	strb	r0, [r3, r4]
 8008716:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008718:	3401      	adds	r4, #1
 800871a:	9007      	str	r0, [sp, #28]
 800871c:	42a3      	cmp	r3, r4
 800871e:	dd07      	ble.n	8008730 <_dtoa_r+0xbb8>
 8008720:	2300      	movs	r3, #0
 8008722:	220a      	movs	r2, #10
 8008724:	0038      	movs	r0, r7
 8008726:	9905      	ldr	r1, [sp, #20]
 8008728:	f000 fb08 	bl	8008d3c <__multadd>
 800872c:	9005      	str	r0, [sp, #20]
 800872e:	e7eb      	b.n	8008708 <_dtoa_r+0xb90>
 8008730:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008732:	2001      	movs	r0, #1
 8008734:	2b00      	cmp	r3, #0
 8008736:	dd00      	ble.n	800873a <_dtoa_r+0xbc2>
 8008738:	0018      	movs	r0, r3
 800873a:	2400      	movs	r4, #0
 800873c:	9b06      	ldr	r3, [sp, #24]
 800873e:	181b      	adds	r3, r3, r0
 8008740:	9308      	str	r3, [sp, #32]
 8008742:	9905      	ldr	r1, [sp, #20]
 8008744:	2201      	movs	r2, #1
 8008746:	0038      	movs	r0, r7
 8008748:	f000 fca6 	bl	8009098 <__lshift>
 800874c:	0031      	movs	r1, r6
 800874e:	9005      	str	r0, [sp, #20]
 8008750:	f000 fd10 	bl	8009174 <__mcmp>
 8008754:	2800      	cmp	r0, #0
 8008756:	dc9b      	bgt.n	8008690 <_dtoa_r+0xb18>
 8008758:	d102      	bne.n	8008760 <_dtoa_r+0xbe8>
 800875a:	9b07      	ldr	r3, [sp, #28]
 800875c:	07db      	lsls	r3, r3, #31
 800875e:	d497      	bmi.n	8008690 <_dtoa_r+0xb18>
 8008760:	9b08      	ldr	r3, [sp, #32]
 8008762:	9308      	str	r3, [sp, #32]
 8008764:	3b01      	subs	r3, #1
 8008766:	781a      	ldrb	r2, [r3, #0]
 8008768:	2a30      	cmp	r2, #48	; 0x30
 800876a:	d0fa      	beq.n	8008762 <_dtoa_r+0xbea>
 800876c:	e6db      	b.n	8008526 <_dtoa_r+0x9ae>
 800876e:	9a06      	ldr	r2, [sp, #24]
 8008770:	429a      	cmp	r2, r3
 8008772:	d18e      	bne.n	8008692 <_dtoa_r+0xb1a>
 8008774:	9b02      	ldr	r3, [sp, #8]
 8008776:	3301      	adds	r3, #1
 8008778:	9302      	str	r3, [sp, #8]
 800877a:	2331      	movs	r3, #49	; 0x31
 800877c:	e799      	b.n	80086b2 <_dtoa_r+0xb3a>
 800877e:	4b09      	ldr	r3, [pc, #36]	; (80087a4 <_dtoa_r+0xc2c>)
 8008780:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008782:	9306      	str	r3, [sp, #24]
 8008784:	4b08      	ldr	r3, [pc, #32]	; (80087a8 <_dtoa_r+0xc30>)
 8008786:	2a00      	cmp	r2, #0
 8008788:	d001      	beq.n	800878e <_dtoa_r+0xc16>
 800878a:	f7ff fa3f 	bl	8007c0c <_dtoa_r+0x94>
 800878e:	f7ff fa3f 	bl	8007c10 <_dtoa_r+0x98>
 8008792:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008794:	2b00      	cmp	r3, #0
 8008796:	dcb6      	bgt.n	8008706 <_dtoa_r+0xb8e>
 8008798:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800879a:	2b02      	cmp	r3, #2
 800879c:	dd00      	ble.n	80087a0 <_dtoa_r+0xc28>
 800879e:	e6ac      	b.n	80084fa <_dtoa_r+0x982>
 80087a0:	e7b1      	b.n	8008706 <_dtoa_r+0xb8e>
 80087a2:	46c0      	nop			; (mov r8, r8)
 80087a4:	0800a208 	.word	0x0800a208
 80087a8:	0800a210 	.word	0x0800a210

080087ac <__sflush_r>:
 80087ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087ae:	898b      	ldrh	r3, [r1, #12]
 80087b0:	0005      	movs	r5, r0
 80087b2:	000c      	movs	r4, r1
 80087b4:	071a      	lsls	r2, r3, #28
 80087b6:	d45f      	bmi.n	8008878 <__sflush_r+0xcc>
 80087b8:	684a      	ldr	r2, [r1, #4]
 80087ba:	2a00      	cmp	r2, #0
 80087bc:	dc04      	bgt.n	80087c8 <__sflush_r+0x1c>
 80087be:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80087c0:	2a00      	cmp	r2, #0
 80087c2:	dc01      	bgt.n	80087c8 <__sflush_r+0x1c>
 80087c4:	2000      	movs	r0, #0
 80087c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80087c8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80087ca:	2f00      	cmp	r7, #0
 80087cc:	d0fa      	beq.n	80087c4 <__sflush_r+0x18>
 80087ce:	2200      	movs	r2, #0
 80087d0:	2180      	movs	r1, #128	; 0x80
 80087d2:	682e      	ldr	r6, [r5, #0]
 80087d4:	602a      	str	r2, [r5, #0]
 80087d6:	001a      	movs	r2, r3
 80087d8:	0149      	lsls	r1, r1, #5
 80087da:	400a      	ands	r2, r1
 80087dc:	420b      	tst	r3, r1
 80087de:	d034      	beq.n	800884a <__sflush_r+0x9e>
 80087e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80087e2:	89a3      	ldrh	r3, [r4, #12]
 80087e4:	075b      	lsls	r3, r3, #29
 80087e6:	d506      	bpl.n	80087f6 <__sflush_r+0x4a>
 80087e8:	6863      	ldr	r3, [r4, #4]
 80087ea:	1ac0      	subs	r0, r0, r3
 80087ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d001      	beq.n	80087f6 <__sflush_r+0x4a>
 80087f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087f4:	1ac0      	subs	r0, r0, r3
 80087f6:	0002      	movs	r2, r0
 80087f8:	6a21      	ldr	r1, [r4, #32]
 80087fa:	2300      	movs	r3, #0
 80087fc:	0028      	movs	r0, r5
 80087fe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008800:	47b8      	blx	r7
 8008802:	89a1      	ldrh	r1, [r4, #12]
 8008804:	1c43      	adds	r3, r0, #1
 8008806:	d106      	bne.n	8008816 <__sflush_r+0x6a>
 8008808:	682b      	ldr	r3, [r5, #0]
 800880a:	2b1d      	cmp	r3, #29
 800880c:	d831      	bhi.n	8008872 <__sflush_r+0xc6>
 800880e:	4a2c      	ldr	r2, [pc, #176]	; (80088c0 <__sflush_r+0x114>)
 8008810:	40da      	lsrs	r2, r3
 8008812:	07d3      	lsls	r3, r2, #31
 8008814:	d52d      	bpl.n	8008872 <__sflush_r+0xc6>
 8008816:	2300      	movs	r3, #0
 8008818:	6063      	str	r3, [r4, #4]
 800881a:	6923      	ldr	r3, [r4, #16]
 800881c:	6023      	str	r3, [r4, #0]
 800881e:	04cb      	lsls	r3, r1, #19
 8008820:	d505      	bpl.n	800882e <__sflush_r+0x82>
 8008822:	1c43      	adds	r3, r0, #1
 8008824:	d102      	bne.n	800882c <__sflush_r+0x80>
 8008826:	682b      	ldr	r3, [r5, #0]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d100      	bne.n	800882e <__sflush_r+0x82>
 800882c:	6560      	str	r0, [r4, #84]	; 0x54
 800882e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008830:	602e      	str	r6, [r5, #0]
 8008832:	2900      	cmp	r1, #0
 8008834:	d0c6      	beq.n	80087c4 <__sflush_r+0x18>
 8008836:	0023      	movs	r3, r4
 8008838:	3344      	adds	r3, #68	; 0x44
 800883a:	4299      	cmp	r1, r3
 800883c:	d002      	beq.n	8008844 <__sflush_r+0x98>
 800883e:	0028      	movs	r0, r5
 8008840:	f000 fddc 	bl	80093fc <_free_r>
 8008844:	2000      	movs	r0, #0
 8008846:	6360      	str	r0, [r4, #52]	; 0x34
 8008848:	e7bd      	b.n	80087c6 <__sflush_r+0x1a>
 800884a:	2301      	movs	r3, #1
 800884c:	0028      	movs	r0, r5
 800884e:	6a21      	ldr	r1, [r4, #32]
 8008850:	47b8      	blx	r7
 8008852:	1c43      	adds	r3, r0, #1
 8008854:	d1c5      	bne.n	80087e2 <__sflush_r+0x36>
 8008856:	682b      	ldr	r3, [r5, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d0c2      	beq.n	80087e2 <__sflush_r+0x36>
 800885c:	2b1d      	cmp	r3, #29
 800885e:	d001      	beq.n	8008864 <__sflush_r+0xb8>
 8008860:	2b16      	cmp	r3, #22
 8008862:	d101      	bne.n	8008868 <__sflush_r+0xbc>
 8008864:	602e      	str	r6, [r5, #0]
 8008866:	e7ad      	b.n	80087c4 <__sflush_r+0x18>
 8008868:	2340      	movs	r3, #64	; 0x40
 800886a:	89a2      	ldrh	r2, [r4, #12]
 800886c:	4313      	orrs	r3, r2
 800886e:	81a3      	strh	r3, [r4, #12]
 8008870:	e7a9      	b.n	80087c6 <__sflush_r+0x1a>
 8008872:	2340      	movs	r3, #64	; 0x40
 8008874:	430b      	orrs	r3, r1
 8008876:	e7fa      	b.n	800886e <__sflush_r+0xc2>
 8008878:	690f      	ldr	r7, [r1, #16]
 800887a:	2f00      	cmp	r7, #0
 800887c:	d0a2      	beq.n	80087c4 <__sflush_r+0x18>
 800887e:	680a      	ldr	r2, [r1, #0]
 8008880:	600f      	str	r7, [r1, #0]
 8008882:	1bd2      	subs	r2, r2, r7
 8008884:	9201      	str	r2, [sp, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	079b      	lsls	r3, r3, #30
 800888a:	d100      	bne.n	800888e <__sflush_r+0xe2>
 800888c:	694a      	ldr	r2, [r1, #20]
 800888e:	60a2      	str	r2, [r4, #8]
 8008890:	9b01      	ldr	r3, [sp, #4]
 8008892:	2b00      	cmp	r3, #0
 8008894:	dc00      	bgt.n	8008898 <__sflush_r+0xec>
 8008896:	e795      	b.n	80087c4 <__sflush_r+0x18>
 8008898:	003a      	movs	r2, r7
 800889a:	0028      	movs	r0, r5
 800889c:	9b01      	ldr	r3, [sp, #4]
 800889e:	6a21      	ldr	r1, [r4, #32]
 80088a0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80088a2:	47b0      	blx	r6
 80088a4:	2800      	cmp	r0, #0
 80088a6:	dc06      	bgt.n	80088b6 <__sflush_r+0x10a>
 80088a8:	2340      	movs	r3, #64	; 0x40
 80088aa:	2001      	movs	r0, #1
 80088ac:	89a2      	ldrh	r2, [r4, #12]
 80088ae:	4240      	negs	r0, r0
 80088b0:	4313      	orrs	r3, r2
 80088b2:	81a3      	strh	r3, [r4, #12]
 80088b4:	e787      	b.n	80087c6 <__sflush_r+0x1a>
 80088b6:	9b01      	ldr	r3, [sp, #4]
 80088b8:	183f      	adds	r7, r7, r0
 80088ba:	1a1b      	subs	r3, r3, r0
 80088bc:	9301      	str	r3, [sp, #4]
 80088be:	e7e7      	b.n	8008890 <__sflush_r+0xe4>
 80088c0:	20400001 	.word	0x20400001

080088c4 <_fflush_r>:
 80088c4:	690b      	ldr	r3, [r1, #16]
 80088c6:	b570      	push	{r4, r5, r6, lr}
 80088c8:	0005      	movs	r5, r0
 80088ca:	000c      	movs	r4, r1
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d102      	bne.n	80088d6 <_fflush_r+0x12>
 80088d0:	2500      	movs	r5, #0
 80088d2:	0028      	movs	r0, r5
 80088d4:	bd70      	pop	{r4, r5, r6, pc}
 80088d6:	2800      	cmp	r0, #0
 80088d8:	d004      	beq.n	80088e4 <_fflush_r+0x20>
 80088da:	6983      	ldr	r3, [r0, #24]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d101      	bne.n	80088e4 <_fflush_r+0x20>
 80088e0:	f000 f892 	bl	8008a08 <__sinit>
 80088e4:	4b14      	ldr	r3, [pc, #80]	; (8008938 <_fflush_r+0x74>)
 80088e6:	429c      	cmp	r4, r3
 80088e8:	d11b      	bne.n	8008922 <_fflush_r+0x5e>
 80088ea:	686c      	ldr	r4, [r5, #4]
 80088ec:	220c      	movs	r2, #12
 80088ee:	5ea3      	ldrsh	r3, [r4, r2]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d0ed      	beq.n	80088d0 <_fflush_r+0xc>
 80088f4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80088f6:	07d2      	lsls	r2, r2, #31
 80088f8:	d404      	bmi.n	8008904 <_fflush_r+0x40>
 80088fa:	059b      	lsls	r3, r3, #22
 80088fc:	d402      	bmi.n	8008904 <_fflush_r+0x40>
 80088fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008900:	f000 f927 	bl	8008b52 <__retarget_lock_acquire_recursive>
 8008904:	0028      	movs	r0, r5
 8008906:	0021      	movs	r1, r4
 8008908:	f7ff ff50 	bl	80087ac <__sflush_r>
 800890c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800890e:	0005      	movs	r5, r0
 8008910:	07db      	lsls	r3, r3, #31
 8008912:	d4de      	bmi.n	80088d2 <_fflush_r+0xe>
 8008914:	89a3      	ldrh	r3, [r4, #12]
 8008916:	059b      	lsls	r3, r3, #22
 8008918:	d4db      	bmi.n	80088d2 <_fflush_r+0xe>
 800891a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800891c:	f000 f91a 	bl	8008b54 <__retarget_lock_release_recursive>
 8008920:	e7d7      	b.n	80088d2 <_fflush_r+0xe>
 8008922:	4b06      	ldr	r3, [pc, #24]	; (800893c <_fflush_r+0x78>)
 8008924:	429c      	cmp	r4, r3
 8008926:	d101      	bne.n	800892c <_fflush_r+0x68>
 8008928:	68ac      	ldr	r4, [r5, #8]
 800892a:	e7df      	b.n	80088ec <_fflush_r+0x28>
 800892c:	4b04      	ldr	r3, [pc, #16]	; (8008940 <_fflush_r+0x7c>)
 800892e:	429c      	cmp	r4, r3
 8008930:	d1dc      	bne.n	80088ec <_fflush_r+0x28>
 8008932:	68ec      	ldr	r4, [r5, #12]
 8008934:	e7da      	b.n	80088ec <_fflush_r+0x28>
 8008936:	46c0      	nop			; (mov r8, r8)
 8008938:	0800a2b8 	.word	0x0800a2b8
 800893c:	0800a2d8 	.word	0x0800a2d8
 8008940:	0800a298 	.word	0x0800a298

08008944 <std>:
 8008944:	2300      	movs	r3, #0
 8008946:	b510      	push	{r4, lr}
 8008948:	0004      	movs	r4, r0
 800894a:	6003      	str	r3, [r0, #0]
 800894c:	6043      	str	r3, [r0, #4]
 800894e:	6083      	str	r3, [r0, #8]
 8008950:	8181      	strh	r1, [r0, #12]
 8008952:	6643      	str	r3, [r0, #100]	; 0x64
 8008954:	0019      	movs	r1, r3
 8008956:	81c2      	strh	r2, [r0, #14]
 8008958:	6103      	str	r3, [r0, #16]
 800895a:	6143      	str	r3, [r0, #20]
 800895c:	6183      	str	r3, [r0, #24]
 800895e:	2208      	movs	r2, #8
 8008960:	305c      	adds	r0, #92	; 0x5c
 8008962:	f7fe fa6f 	bl	8006e44 <memset>
 8008966:	4b05      	ldr	r3, [pc, #20]	; (800897c <std+0x38>)
 8008968:	6224      	str	r4, [r4, #32]
 800896a:	6263      	str	r3, [r4, #36]	; 0x24
 800896c:	4b04      	ldr	r3, [pc, #16]	; (8008980 <std+0x3c>)
 800896e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008970:	4b04      	ldr	r3, [pc, #16]	; (8008984 <std+0x40>)
 8008972:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008974:	4b04      	ldr	r3, [pc, #16]	; (8008988 <std+0x44>)
 8008976:	6323      	str	r3, [r4, #48]	; 0x30
 8008978:	bd10      	pop	{r4, pc}
 800897a:	46c0      	nop			; (mov r8, r8)
 800897c:	08009c01 	.word	0x08009c01
 8008980:	08009c29 	.word	0x08009c29
 8008984:	08009c61 	.word	0x08009c61
 8008988:	08009c8d 	.word	0x08009c8d

0800898c <_cleanup_r>:
 800898c:	b510      	push	{r4, lr}
 800898e:	4902      	ldr	r1, [pc, #8]	; (8008998 <_cleanup_r+0xc>)
 8008990:	f000 f8ba 	bl	8008b08 <_fwalk_reent>
 8008994:	bd10      	pop	{r4, pc}
 8008996:	46c0      	nop			; (mov r8, r8)
 8008998:	080088c5 	.word	0x080088c5

0800899c <__sfmoreglue>:
 800899c:	b570      	push	{r4, r5, r6, lr}
 800899e:	2568      	movs	r5, #104	; 0x68
 80089a0:	1e4a      	subs	r2, r1, #1
 80089a2:	4355      	muls	r5, r2
 80089a4:	000e      	movs	r6, r1
 80089a6:	0029      	movs	r1, r5
 80089a8:	3174      	adds	r1, #116	; 0x74
 80089aa:	f000 fd93 	bl	80094d4 <_malloc_r>
 80089ae:	1e04      	subs	r4, r0, #0
 80089b0:	d008      	beq.n	80089c4 <__sfmoreglue+0x28>
 80089b2:	2100      	movs	r1, #0
 80089b4:	002a      	movs	r2, r5
 80089b6:	6001      	str	r1, [r0, #0]
 80089b8:	6046      	str	r6, [r0, #4]
 80089ba:	300c      	adds	r0, #12
 80089bc:	60a0      	str	r0, [r4, #8]
 80089be:	3268      	adds	r2, #104	; 0x68
 80089c0:	f7fe fa40 	bl	8006e44 <memset>
 80089c4:	0020      	movs	r0, r4
 80089c6:	bd70      	pop	{r4, r5, r6, pc}

080089c8 <__sfp_lock_acquire>:
 80089c8:	b510      	push	{r4, lr}
 80089ca:	4802      	ldr	r0, [pc, #8]	; (80089d4 <__sfp_lock_acquire+0xc>)
 80089cc:	f000 f8c1 	bl	8008b52 <__retarget_lock_acquire_recursive>
 80089d0:	bd10      	pop	{r4, pc}
 80089d2:	46c0      	nop			; (mov r8, r8)
 80089d4:	20000715 	.word	0x20000715

080089d8 <__sfp_lock_release>:
 80089d8:	b510      	push	{r4, lr}
 80089da:	4802      	ldr	r0, [pc, #8]	; (80089e4 <__sfp_lock_release+0xc>)
 80089dc:	f000 f8ba 	bl	8008b54 <__retarget_lock_release_recursive>
 80089e0:	bd10      	pop	{r4, pc}
 80089e2:	46c0      	nop			; (mov r8, r8)
 80089e4:	20000715 	.word	0x20000715

080089e8 <__sinit_lock_acquire>:
 80089e8:	b510      	push	{r4, lr}
 80089ea:	4802      	ldr	r0, [pc, #8]	; (80089f4 <__sinit_lock_acquire+0xc>)
 80089ec:	f000 f8b1 	bl	8008b52 <__retarget_lock_acquire_recursive>
 80089f0:	bd10      	pop	{r4, pc}
 80089f2:	46c0      	nop			; (mov r8, r8)
 80089f4:	20000716 	.word	0x20000716

080089f8 <__sinit_lock_release>:
 80089f8:	b510      	push	{r4, lr}
 80089fa:	4802      	ldr	r0, [pc, #8]	; (8008a04 <__sinit_lock_release+0xc>)
 80089fc:	f000 f8aa 	bl	8008b54 <__retarget_lock_release_recursive>
 8008a00:	bd10      	pop	{r4, pc}
 8008a02:	46c0      	nop			; (mov r8, r8)
 8008a04:	20000716 	.word	0x20000716

08008a08 <__sinit>:
 8008a08:	b513      	push	{r0, r1, r4, lr}
 8008a0a:	0004      	movs	r4, r0
 8008a0c:	f7ff ffec 	bl	80089e8 <__sinit_lock_acquire>
 8008a10:	69a3      	ldr	r3, [r4, #24]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d002      	beq.n	8008a1c <__sinit+0x14>
 8008a16:	f7ff ffef 	bl	80089f8 <__sinit_lock_release>
 8008a1a:	bd13      	pop	{r0, r1, r4, pc}
 8008a1c:	64a3      	str	r3, [r4, #72]	; 0x48
 8008a1e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008a20:	6523      	str	r3, [r4, #80]	; 0x50
 8008a22:	4b13      	ldr	r3, [pc, #76]	; (8008a70 <__sinit+0x68>)
 8008a24:	4a13      	ldr	r2, [pc, #76]	; (8008a74 <__sinit+0x6c>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	62a2      	str	r2, [r4, #40]	; 0x28
 8008a2a:	9301      	str	r3, [sp, #4]
 8008a2c:	42a3      	cmp	r3, r4
 8008a2e:	d101      	bne.n	8008a34 <__sinit+0x2c>
 8008a30:	2301      	movs	r3, #1
 8008a32:	61a3      	str	r3, [r4, #24]
 8008a34:	0020      	movs	r0, r4
 8008a36:	f000 f81f 	bl	8008a78 <__sfp>
 8008a3a:	6060      	str	r0, [r4, #4]
 8008a3c:	0020      	movs	r0, r4
 8008a3e:	f000 f81b 	bl	8008a78 <__sfp>
 8008a42:	60a0      	str	r0, [r4, #8]
 8008a44:	0020      	movs	r0, r4
 8008a46:	f000 f817 	bl	8008a78 <__sfp>
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	2104      	movs	r1, #4
 8008a4e:	60e0      	str	r0, [r4, #12]
 8008a50:	6860      	ldr	r0, [r4, #4]
 8008a52:	f7ff ff77 	bl	8008944 <std>
 8008a56:	2201      	movs	r2, #1
 8008a58:	2109      	movs	r1, #9
 8008a5a:	68a0      	ldr	r0, [r4, #8]
 8008a5c:	f7ff ff72 	bl	8008944 <std>
 8008a60:	2202      	movs	r2, #2
 8008a62:	2112      	movs	r1, #18
 8008a64:	68e0      	ldr	r0, [r4, #12]
 8008a66:	f7ff ff6d 	bl	8008944 <std>
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	61a3      	str	r3, [r4, #24]
 8008a6e:	e7d2      	b.n	8008a16 <__sinit+0xe>
 8008a70:	0800a1d0 	.word	0x0800a1d0
 8008a74:	0800898d 	.word	0x0800898d

08008a78 <__sfp>:
 8008a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a7a:	0007      	movs	r7, r0
 8008a7c:	f7ff ffa4 	bl	80089c8 <__sfp_lock_acquire>
 8008a80:	4b1f      	ldr	r3, [pc, #124]	; (8008b00 <__sfp+0x88>)
 8008a82:	681e      	ldr	r6, [r3, #0]
 8008a84:	69b3      	ldr	r3, [r6, #24]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d102      	bne.n	8008a90 <__sfp+0x18>
 8008a8a:	0030      	movs	r0, r6
 8008a8c:	f7ff ffbc 	bl	8008a08 <__sinit>
 8008a90:	3648      	adds	r6, #72	; 0x48
 8008a92:	68b4      	ldr	r4, [r6, #8]
 8008a94:	6873      	ldr	r3, [r6, #4]
 8008a96:	3b01      	subs	r3, #1
 8008a98:	d504      	bpl.n	8008aa4 <__sfp+0x2c>
 8008a9a:	6833      	ldr	r3, [r6, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d022      	beq.n	8008ae6 <__sfp+0x6e>
 8008aa0:	6836      	ldr	r6, [r6, #0]
 8008aa2:	e7f6      	b.n	8008a92 <__sfp+0x1a>
 8008aa4:	220c      	movs	r2, #12
 8008aa6:	5ea5      	ldrsh	r5, [r4, r2]
 8008aa8:	2d00      	cmp	r5, #0
 8008aaa:	d11a      	bne.n	8008ae2 <__sfp+0x6a>
 8008aac:	0020      	movs	r0, r4
 8008aae:	4b15      	ldr	r3, [pc, #84]	; (8008b04 <__sfp+0x8c>)
 8008ab0:	3058      	adds	r0, #88	; 0x58
 8008ab2:	60e3      	str	r3, [r4, #12]
 8008ab4:	6665      	str	r5, [r4, #100]	; 0x64
 8008ab6:	f000 f84b 	bl	8008b50 <__retarget_lock_init_recursive>
 8008aba:	f7ff ff8d 	bl	80089d8 <__sfp_lock_release>
 8008abe:	0020      	movs	r0, r4
 8008ac0:	2208      	movs	r2, #8
 8008ac2:	0029      	movs	r1, r5
 8008ac4:	6025      	str	r5, [r4, #0]
 8008ac6:	60a5      	str	r5, [r4, #8]
 8008ac8:	6065      	str	r5, [r4, #4]
 8008aca:	6125      	str	r5, [r4, #16]
 8008acc:	6165      	str	r5, [r4, #20]
 8008ace:	61a5      	str	r5, [r4, #24]
 8008ad0:	305c      	adds	r0, #92	; 0x5c
 8008ad2:	f7fe f9b7 	bl	8006e44 <memset>
 8008ad6:	6365      	str	r5, [r4, #52]	; 0x34
 8008ad8:	63a5      	str	r5, [r4, #56]	; 0x38
 8008ada:	64a5      	str	r5, [r4, #72]	; 0x48
 8008adc:	64e5      	str	r5, [r4, #76]	; 0x4c
 8008ade:	0020      	movs	r0, r4
 8008ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ae2:	3468      	adds	r4, #104	; 0x68
 8008ae4:	e7d7      	b.n	8008a96 <__sfp+0x1e>
 8008ae6:	2104      	movs	r1, #4
 8008ae8:	0038      	movs	r0, r7
 8008aea:	f7ff ff57 	bl	800899c <__sfmoreglue>
 8008aee:	1e04      	subs	r4, r0, #0
 8008af0:	6030      	str	r0, [r6, #0]
 8008af2:	d1d5      	bne.n	8008aa0 <__sfp+0x28>
 8008af4:	f7ff ff70 	bl	80089d8 <__sfp_lock_release>
 8008af8:	230c      	movs	r3, #12
 8008afa:	603b      	str	r3, [r7, #0]
 8008afc:	e7ef      	b.n	8008ade <__sfp+0x66>
 8008afe:	46c0      	nop			; (mov r8, r8)
 8008b00:	0800a1d0 	.word	0x0800a1d0
 8008b04:	ffff0001 	.word	0xffff0001

08008b08 <_fwalk_reent>:
 8008b08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b0a:	0004      	movs	r4, r0
 8008b0c:	0006      	movs	r6, r0
 8008b0e:	2700      	movs	r7, #0
 8008b10:	9101      	str	r1, [sp, #4]
 8008b12:	3448      	adds	r4, #72	; 0x48
 8008b14:	6863      	ldr	r3, [r4, #4]
 8008b16:	68a5      	ldr	r5, [r4, #8]
 8008b18:	9300      	str	r3, [sp, #0]
 8008b1a:	9b00      	ldr	r3, [sp, #0]
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	9300      	str	r3, [sp, #0]
 8008b20:	d504      	bpl.n	8008b2c <_fwalk_reent+0x24>
 8008b22:	6824      	ldr	r4, [r4, #0]
 8008b24:	2c00      	cmp	r4, #0
 8008b26:	d1f5      	bne.n	8008b14 <_fwalk_reent+0xc>
 8008b28:	0038      	movs	r0, r7
 8008b2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008b2c:	89ab      	ldrh	r3, [r5, #12]
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d908      	bls.n	8008b44 <_fwalk_reent+0x3c>
 8008b32:	220e      	movs	r2, #14
 8008b34:	5eab      	ldrsh	r3, [r5, r2]
 8008b36:	3301      	adds	r3, #1
 8008b38:	d004      	beq.n	8008b44 <_fwalk_reent+0x3c>
 8008b3a:	0029      	movs	r1, r5
 8008b3c:	0030      	movs	r0, r6
 8008b3e:	9b01      	ldr	r3, [sp, #4]
 8008b40:	4798      	blx	r3
 8008b42:	4307      	orrs	r7, r0
 8008b44:	3568      	adds	r5, #104	; 0x68
 8008b46:	e7e8      	b.n	8008b1a <_fwalk_reent+0x12>

08008b48 <_localeconv_r>:
 8008b48:	4800      	ldr	r0, [pc, #0]	; (8008b4c <_localeconv_r+0x4>)
 8008b4a:	4770      	bx	lr
 8008b4c:	20000180 	.word	0x20000180

08008b50 <__retarget_lock_init_recursive>:
 8008b50:	4770      	bx	lr

08008b52 <__retarget_lock_acquire_recursive>:
 8008b52:	4770      	bx	lr

08008b54 <__retarget_lock_release_recursive>:
 8008b54:	4770      	bx	lr
	...

08008b58 <__swhatbuf_r>:
 8008b58:	b570      	push	{r4, r5, r6, lr}
 8008b5a:	000e      	movs	r6, r1
 8008b5c:	001d      	movs	r5, r3
 8008b5e:	230e      	movs	r3, #14
 8008b60:	5ec9      	ldrsh	r1, [r1, r3]
 8008b62:	0014      	movs	r4, r2
 8008b64:	b096      	sub	sp, #88	; 0x58
 8008b66:	2900      	cmp	r1, #0
 8008b68:	da08      	bge.n	8008b7c <__swhatbuf_r+0x24>
 8008b6a:	220c      	movs	r2, #12
 8008b6c:	5eb3      	ldrsh	r3, [r6, r2]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	602a      	str	r2, [r5, #0]
 8008b72:	061b      	lsls	r3, r3, #24
 8008b74:	d411      	bmi.n	8008b9a <__swhatbuf_r+0x42>
 8008b76:	2380      	movs	r3, #128	; 0x80
 8008b78:	00db      	lsls	r3, r3, #3
 8008b7a:	e00f      	b.n	8008b9c <__swhatbuf_r+0x44>
 8008b7c:	466a      	mov	r2, sp
 8008b7e:	f001 f8df 	bl	8009d40 <_fstat_r>
 8008b82:	2800      	cmp	r0, #0
 8008b84:	dbf1      	blt.n	8008b6a <__swhatbuf_r+0x12>
 8008b86:	23f0      	movs	r3, #240	; 0xf0
 8008b88:	9901      	ldr	r1, [sp, #4]
 8008b8a:	021b      	lsls	r3, r3, #8
 8008b8c:	4019      	ands	r1, r3
 8008b8e:	4b05      	ldr	r3, [pc, #20]	; (8008ba4 <__swhatbuf_r+0x4c>)
 8008b90:	18c9      	adds	r1, r1, r3
 8008b92:	424b      	negs	r3, r1
 8008b94:	4159      	adcs	r1, r3
 8008b96:	6029      	str	r1, [r5, #0]
 8008b98:	e7ed      	b.n	8008b76 <__swhatbuf_r+0x1e>
 8008b9a:	2340      	movs	r3, #64	; 0x40
 8008b9c:	2000      	movs	r0, #0
 8008b9e:	6023      	str	r3, [r4, #0]
 8008ba0:	b016      	add	sp, #88	; 0x58
 8008ba2:	bd70      	pop	{r4, r5, r6, pc}
 8008ba4:	ffffe000 	.word	0xffffe000

08008ba8 <__smakebuf_r>:
 8008ba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008baa:	2602      	movs	r6, #2
 8008bac:	898b      	ldrh	r3, [r1, #12]
 8008bae:	0005      	movs	r5, r0
 8008bb0:	000c      	movs	r4, r1
 8008bb2:	4233      	tst	r3, r6
 8008bb4:	d006      	beq.n	8008bc4 <__smakebuf_r+0x1c>
 8008bb6:	0023      	movs	r3, r4
 8008bb8:	3347      	adds	r3, #71	; 0x47
 8008bba:	6023      	str	r3, [r4, #0]
 8008bbc:	6123      	str	r3, [r4, #16]
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	6163      	str	r3, [r4, #20]
 8008bc2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008bc4:	466a      	mov	r2, sp
 8008bc6:	ab01      	add	r3, sp, #4
 8008bc8:	f7ff ffc6 	bl	8008b58 <__swhatbuf_r>
 8008bcc:	9900      	ldr	r1, [sp, #0]
 8008bce:	0007      	movs	r7, r0
 8008bd0:	0028      	movs	r0, r5
 8008bd2:	f000 fc7f 	bl	80094d4 <_malloc_r>
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	d108      	bne.n	8008bec <__smakebuf_r+0x44>
 8008bda:	220c      	movs	r2, #12
 8008bdc:	5ea3      	ldrsh	r3, [r4, r2]
 8008bde:	059a      	lsls	r2, r3, #22
 8008be0:	d4ef      	bmi.n	8008bc2 <__smakebuf_r+0x1a>
 8008be2:	2203      	movs	r2, #3
 8008be4:	4393      	bics	r3, r2
 8008be6:	431e      	orrs	r6, r3
 8008be8:	81a6      	strh	r6, [r4, #12]
 8008bea:	e7e4      	b.n	8008bb6 <__smakebuf_r+0xe>
 8008bec:	4b0f      	ldr	r3, [pc, #60]	; (8008c2c <__smakebuf_r+0x84>)
 8008bee:	62ab      	str	r3, [r5, #40]	; 0x28
 8008bf0:	2380      	movs	r3, #128	; 0x80
 8008bf2:	89a2      	ldrh	r2, [r4, #12]
 8008bf4:	6020      	str	r0, [r4, #0]
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	81a3      	strh	r3, [r4, #12]
 8008bfa:	9b00      	ldr	r3, [sp, #0]
 8008bfc:	6120      	str	r0, [r4, #16]
 8008bfe:	6163      	str	r3, [r4, #20]
 8008c00:	9b01      	ldr	r3, [sp, #4]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d00d      	beq.n	8008c22 <__smakebuf_r+0x7a>
 8008c06:	0028      	movs	r0, r5
 8008c08:	230e      	movs	r3, #14
 8008c0a:	5ee1      	ldrsh	r1, [r4, r3]
 8008c0c:	f001 f8aa 	bl	8009d64 <_isatty_r>
 8008c10:	2800      	cmp	r0, #0
 8008c12:	d006      	beq.n	8008c22 <__smakebuf_r+0x7a>
 8008c14:	2203      	movs	r2, #3
 8008c16:	89a3      	ldrh	r3, [r4, #12]
 8008c18:	4393      	bics	r3, r2
 8008c1a:	001a      	movs	r2, r3
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	81a3      	strh	r3, [r4, #12]
 8008c22:	89a0      	ldrh	r0, [r4, #12]
 8008c24:	4307      	orrs	r7, r0
 8008c26:	81a7      	strh	r7, [r4, #12]
 8008c28:	e7cb      	b.n	8008bc2 <__smakebuf_r+0x1a>
 8008c2a:	46c0      	nop			; (mov r8, r8)
 8008c2c:	0800898d 	.word	0x0800898d

08008c30 <malloc>:
 8008c30:	b510      	push	{r4, lr}
 8008c32:	4b03      	ldr	r3, [pc, #12]	; (8008c40 <malloc+0x10>)
 8008c34:	0001      	movs	r1, r0
 8008c36:	6818      	ldr	r0, [r3, #0]
 8008c38:	f000 fc4c 	bl	80094d4 <_malloc_r>
 8008c3c:	bd10      	pop	{r4, pc}
 8008c3e:	46c0      	nop			; (mov r8, r8)
 8008c40:	2000002c 	.word	0x2000002c

08008c44 <memchr>:
 8008c44:	b2c9      	uxtb	r1, r1
 8008c46:	1882      	adds	r2, r0, r2
 8008c48:	4290      	cmp	r0, r2
 8008c4a:	d101      	bne.n	8008c50 <memchr+0xc>
 8008c4c:	2000      	movs	r0, #0
 8008c4e:	4770      	bx	lr
 8008c50:	7803      	ldrb	r3, [r0, #0]
 8008c52:	428b      	cmp	r3, r1
 8008c54:	d0fb      	beq.n	8008c4e <memchr+0xa>
 8008c56:	3001      	adds	r0, #1
 8008c58:	e7f6      	b.n	8008c48 <memchr+0x4>

08008c5a <memcpy>:
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	b510      	push	{r4, lr}
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d100      	bne.n	8008c64 <memcpy+0xa>
 8008c62:	bd10      	pop	{r4, pc}
 8008c64:	5ccc      	ldrb	r4, [r1, r3]
 8008c66:	54c4      	strb	r4, [r0, r3]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	e7f8      	b.n	8008c5e <memcpy+0x4>

08008c6c <_Balloc>:
 8008c6c:	b570      	push	{r4, r5, r6, lr}
 8008c6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008c70:	0006      	movs	r6, r0
 8008c72:	000c      	movs	r4, r1
 8008c74:	2d00      	cmp	r5, #0
 8008c76:	d10e      	bne.n	8008c96 <_Balloc+0x2a>
 8008c78:	2010      	movs	r0, #16
 8008c7a:	f7ff ffd9 	bl	8008c30 <malloc>
 8008c7e:	1e02      	subs	r2, r0, #0
 8008c80:	6270      	str	r0, [r6, #36]	; 0x24
 8008c82:	d104      	bne.n	8008c8e <_Balloc+0x22>
 8008c84:	2166      	movs	r1, #102	; 0x66
 8008c86:	4b19      	ldr	r3, [pc, #100]	; (8008cec <_Balloc+0x80>)
 8008c88:	4819      	ldr	r0, [pc, #100]	; (8008cf0 <_Balloc+0x84>)
 8008c8a:	f001 f819 	bl	8009cc0 <__assert_func>
 8008c8e:	6045      	str	r5, [r0, #4]
 8008c90:	6085      	str	r5, [r0, #8]
 8008c92:	6005      	str	r5, [r0, #0]
 8008c94:	60c5      	str	r5, [r0, #12]
 8008c96:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8008c98:	68eb      	ldr	r3, [r5, #12]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d013      	beq.n	8008cc6 <_Balloc+0x5a>
 8008c9e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008ca0:	00a2      	lsls	r2, r4, #2
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	189b      	adds	r3, r3, r2
 8008ca6:	6818      	ldr	r0, [r3, #0]
 8008ca8:	2800      	cmp	r0, #0
 8008caa:	d118      	bne.n	8008cde <_Balloc+0x72>
 8008cac:	2101      	movs	r1, #1
 8008cae:	000d      	movs	r5, r1
 8008cb0:	40a5      	lsls	r5, r4
 8008cb2:	1d6a      	adds	r2, r5, #5
 8008cb4:	0030      	movs	r0, r6
 8008cb6:	0092      	lsls	r2, r2, #2
 8008cb8:	f000 fb74 	bl	80093a4 <_calloc_r>
 8008cbc:	2800      	cmp	r0, #0
 8008cbe:	d00c      	beq.n	8008cda <_Balloc+0x6e>
 8008cc0:	6044      	str	r4, [r0, #4]
 8008cc2:	6085      	str	r5, [r0, #8]
 8008cc4:	e00d      	b.n	8008ce2 <_Balloc+0x76>
 8008cc6:	2221      	movs	r2, #33	; 0x21
 8008cc8:	2104      	movs	r1, #4
 8008cca:	0030      	movs	r0, r6
 8008ccc:	f000 fb6a 	bl	80093a4 <_calloc_r>
 8008cd0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008cd2:	60e8      	str	r0, [r5, #12]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d1e1      	bne.n	8008c9e <_Balloc+0x32>
 8008cda:	2000      	movs	r0, #0
 8008cdc:	bd70      	pop	{r4, r5, r6, pc}
 8008cde:	6802      	ldr	r2, [r0, #0]
 8008ce0:	601a      	str	r2, [r3, #0]
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	6103      	str	r3, [r0, #16]
 8008ce6:	60c3      	str	r3, [r0, #12]
 8008ce8:	e7f8      	b.n	8008cdc <_Balloc+0x70>
 8008cea:	46c0      	nop			; (mov r8, r8)
 8008cec:	0800a215 	.word	0x0800a215
 8008cf0:	0800a2f8 	.word	0x0800a2f8

08008cf4 <_Bfree>:
 8008cf4:	b570      	push	{r4, r5, r6, lr}
 8008cf6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008cf8:	0005      	movs	r5, r0
 8008cfa:	000c      	movs	r4, r1
 8008cfc:	2e00      	cmp	r6, #0
 8008cfe:	d10e      	bne.n	8008d1e <_Bfree+0x2a>
 8008d00:	2010      	movs	r0, #16
 8008d02:	f7ff ff95 	bl	8008c30 <malloc>
 8008d06:	1e02      	subs	r2, r0, #0
 8008d08:	6268      	str	r0, [r5, #36]	; 0x24
 8008d0a:	d104      	bne.n	8008d16 <_Bfree+0x22>
 8008d0c:	218a      	movs	r1, #138	; 0x8a
 8008d0e:	4b09      	ldr	r3, [pc, #36]	; (8008d34 <_Bfree+0x40>)
 8008d10:	4809      	ldr	r0, [pc, #36]	; (8008d38 <_Bfree+0x44>)
 8008d12:	f000 ffd5 	bl	8009cc0 <__assert_func>
 8008d16:	6046      	str	r6, [r0, #4]
 8008d18:	6086      	str	r6, [r0, #8]
 8008d1a:	6006      	str	r6, [r0, #0]
 8008d1c:	60c6      	str	r6, [r0, #12]
 8008d1e:	2c00      	cmp	r4, #0
 8008d20:	d007      	beq.n	8008d32 <_Bfree+0x3e>
 8008d22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008d24:	6862      	ldr	r2, [r4, #4]
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	0092      	lsls	r2, r2, #2
 8008d2a:	189b      	adds	r3, r3, r2
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	6022      	str	r2, [r4, #0]
 8008d30:	601c      	str	r4, [r3, #0]
 8008d32:	bd70      	pop	{r4, r5, r6, pc}
 8008d34:	0800a215 	.word	0x0800a215
 8008d38:	0800a2f8 	.word	0x0800a2f8

08008d3c <__multadd>:
 8008d3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d3e:	000e      	movs	r6, r1
 8008d40:	9001      	str	r0, [sp, #4]
 8008d42:	000c      	movs	r4, r1
 8008d44:	001d      	movs	r5, r3
 8008d46:	2000      	movs	r0, #0
 8008d48:	690f      	ldr	r7, [r1, #16]
 8008d4a:	3614      	adds	r6, #20
 8008d4c:	6833      	ldr	r3, [r6, #0]
 8008d4e:	3001      	adds	r0, #1
 8008d50:	b299      	uxth	r1, r3
 8008d52:	4351      	muls	r1, r2
 8008d54:	0c1b      	lsrs	r3, r3, #16
 8008d56:	4353      	muls	r3, r2
 8008d58:	1949      	adds	r1, r1, r5
 8008d5a:	0c0d      	lsrs	r5, r1, #16
 8008d5c:	195b      	adds	r3, r3, r5
 8008d5e:	0c1d      	lsrs	r5, r3, #16
 8008d60:	b289      	uxth	r1, r1
 8008d62:	041b      	lsls	r3, r3, #16
 8008d64:	185b      	adds	r3, r3, r1
 8008d66:	c608      	stmia	r6!, {r3}
 8008d68:	4287      	cmp	r7, r0
 8008d6a:	dcef      	bgt.n	8008d4c <__multadd+0x10>
 8008d6c:	2d00      	cmp	r5, #0
 8008d6e:	d022      	beq.n	8008db6 <__multadd+0x7a>
 8008d70:	68a3      	ldr	r3, [r4, #8]
 8008d72:	42bb      	cmp	r3, r7
 8008d74:	dc19      	bgt.n	8008daa <__multadd+0x6e>
 8008d76:	6863      	ldr	r3, [r4, #4]
 8008d78:	9801      	ldr	r0, [sp, #4]
 8008d7a:	1c59      	adds	r1, r3, #1
 8008d7c:	f7ff ff76 	bl	8008c6c <_Balloc>
 8008d80:	1e06      	subs	r6, r0, #0
 8008d82:	d105      	bne.n	8008d90 <__multadd+0x54>
 8008d84:	0002      	movs	r2, r0
 8008d86:	21b5      	movs	r1, #181	; 0xb5
 8008d88:	4b0c      	ldr	r3, [pc, #48]	; (8008dbc <__multadd+0x80>)
 8008d8a:	480d      	ldr	r0, [pc, #52]	; (8008dc0 <__multadd+0x84>)
 8008d8c:	f000 ff98 	bl	8009cc0 <__assert_func>
 8008d90:	0021      	movs	r1, r4
 8008d92:	6923      	ldr	r3, [r4, #16]
 8008d94:	310c      	adds	r1, #12
 8008d96:	1c9a      	adds	r2, r3, #2
 8008d98:	0092      	lsls	r2, r2, #2
 8008d9a:	300c      	adds	r0, #12
 8008d9c:	f7ff ff5d 	bl	8008c5a <memcpy>
 8008da0:	0021      	movs	r1, r4
 8008da2:	9801      	ldr	r0, [sp, #4]
 8008da4:	f7ff ffa6 	bl	8008cf4 <_Bfree>
 8008da8:	0034      	movs	r4, r6
 8008daa:	1d3b      	adds	r3, r7, #4
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	18e3      	adds	r3, r4, r3
 8008db0:	605d      	str	r5, [r3, #4]
 8008db2:	1c7b      	adds	r3, r7, #1
 8008db4:	6123      	str	r3, [r4, #16]
 8008db6:	0020      	movs	r0, r4
 8008db8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008dba:	46c0      	nop			; (mov r8, r8)
 8008dbc:	0800a287 	.word	0x0800a287
 8008dc0:	0800a2f8 	.word	0x0800a2f8

08008dc4 <__hi0bits>:
 8008dc4:	0003      	movs	r3, r0
 8008dc6:	0c02      	lsrs	r2, r0, #16
 8008dc8:	2000      	movs	r0, #0
 8008dca:	4282      	cmp	r2, r0
 8008dcc:	d101      	bne.n	8008dd2 <__hi0bits+0xe>
 8008dce:	041b      	lsls	r3, r3, #16
 8008dd0:	3010      	adds	r0, #16
 8008dd2:	0e1a      	lsrs	r2, r3, #24
 8008dd4:	d101      	bne.n	8008dda <__hi0bits+0x16>
 8008dd6:	3008      	adds	r0, #8
 8008dd8:	021b      	lsls	r3, r3, #8
 8008dda:	0f1a      	lsrs	r2, r3, #28
 8008ddc:	d101      	bne.n	8008de2 <__hi0bits+0x1e>
 8008dde:	3004      	adds	r0, #4
 8008de0:	011b      	lsls	r3, r3, #4
 8008de2:	0f9a      	lsrs	r2, r3, #30
 8008de4:	d101      	bne.n	8008dea <__hi0bits+0x26>
 8008de6:	3002      	adds	r0, #2
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	db03      	blt.n	8008df6 <__hi0bits+0x32>
 8008dee:	3001      	adds	r0, #1
 8008df0:	005b      	lsls	r3, r3, #1
 8008df2:	d400      	bmi.n	8008df6 <__hi0bits+0x32>
 8008df4:	2020      	movs	r0, #32
 8008df6:	4770      	bx	lr

08008df8 <__lo0bits>:
 8008df8:	6803      	ldr	r3, [r0, #0]
 8008dfa:	0002      	movs	r2, r0
 8008dfc:	2107      	movs	r1, #7
 8008dfe:	0018      	movs	r0, r3
 8008e00:	4008      	ands	r0, r1
 8008e02:	420b      	tst	r3, r1
 8008e04:	d00d      	beq.n	8008e22 <__lo0bits+0x2a>
 8008e06:	3906      	subs	r1, #6
 8008e08:	2000      	movs	r0, #0
 8008e0a:	420b      	tst	r3, r1
 8008e0c:	d105      	bne.n	8008e1a <__lo0bits+0x22>
 8008e0e:	3002      	adds	r0, #2
 8008e10:	4203      	tst	r3, r0
 8008e12:	d003      	beq.n	8008e1c <__lo0bits+0x24>
 8008e14:	40cb      	lsrs	r3, r1
 8008e16:	0008      	movs	r0, r1
 8008e18:	6013      	str	r3, [r2, #0]
 8008e1a:	4770      	bx	lr
 8008e1c:	089b      	lsrs	r3, r3, #2
 8008e1e:	6013      	str	r3, [r2, #0]
 8008e20:	e7fb      	b.n	8008e1a <__lo0bits+0x22>
 8008e22:	b299      	uxth	r1, r3
 8008e24:	2900      	cmp	r1, #0
 8008e26:	d101      	bne.n	8008e2c <__lo0bits+0x34>
 8008e28:	2010      	movs	r0, #16
 8008e2a:	0c1b      	lsrs	r3, r3, #16
 8008e2c:	b2d9      	uxtb	r1, r3
 8008e2e:	2900      	cmp	r1, #0
 8008e30:	d101      	bne.n	8008e36 <__lo0bits+0x3e>
 8008e32:	3008      	adds	r0, #8
 8008e34:	0a1b      	lsrs	r3, r3, #8
 8008e36:	0719      	lsls	r1, r3, #28
 8008e38:	d101      	bne.n	8008e3e <__lo0bits+0x46>
 8008e3a:	3004      	adds	r0, #4
 8008e3c:	091b      	lsrs	r3, r3, #4
 8008e3e:	0799      	lsls	r1, r3, #30
 8008e40:	d101      	bne.n	8008e46 <__lo0bits+0x4e>
 8008e42:	3002      	adds	r0, #2
 8008e44:	089b      	lsrs	r3, r3, #2
 8008e46:	07d9      	lsls	r1, r3, #31
 8008e48:	d4e9      	bmi.n	8008e1e <__lo0bits+0x26>
 8008e4a:	3001      	adds	r0, #1
 8008e4c:	085b      	lsrs	r3, r3, #1
 8008e4e:	d1e6      	bne.n	8008e1e <__lo0bits+0x26>
 8008e50:	2020      	movs	r0, #32
 8008e52:	e7e2      	b.n	8008e1a <__lo0bits+0x22>

08008e54 <__i2b>:
 8008e54:	b510      	push	{r4, lr}
 8008e56:	000c      	movs	r4, r1
 8008e58:	2101      	movs	r1, #1
 8008e5a:	f7ff ff07 	bl	8008c6c <_Balloc>
 8008e5e:	2800      	cmp	r0, #0
 8008e60:	d106      	bne.n	8008e70 <__i2b+0x1c>
 8008e62:	21a0      	movs	r1, #160	; 0xa0
 8008e64:	0002      	movs	r2, r0
 8008e66:	4b04      	ldr	r3, [pc, #16]	; (8008e78 <__i2b+0x24>)
 8008e68:	4804      	ldr	r0, [pc, #16]	; (8008e7c <__i2b+0x28>)
 8008e6a:	0049      	lsls	r1, r1, #1
 8008e6c:	f000 ff28 	bl	8009cc0 <__assert_func>
 8008e70:	2301      	movs	r3, #1
 8008e72:	6144      	str	r4, [r0, #20]
 8008e74:	6103      	str	r3, [r0, #16]
 8008e76:	bd10      	pop	{r4, pc}
 8008e78:	0800a287 	.word	0x0800a287
 8008e7c:	0800a2f8 	.word	0x0800a2f8

08008e80 <__multiply>:
 8008e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e82:	690b      	ldr	r3, [r1, #16]
 8008e84:	0014      	movs	r4, r2
 8008e86:	6912      	ldr	r2, [r2, #16]
 8008e88:	000d      	movs	r5, r1
 8008e8a:	b089      	sub	sp, #36	; 0x24
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	da01      	bge.n	8008e94 <__multiply+0x14>
 8008e90:	0025      	movs	r5, r4
 8008e92:	000c      	movs	r4, r1
 8008e94:	692f      	ldr	r7, [r5, #16]
 8008e96:	6926      	ldr	r6, [r4, #16]
 8008e98:	6869      	ldr	r1, [r5, #4]
 8008e9a:	19bb      	adds	r3, r7, r6
 8008e9c:	9302      	str	r3, [sp, #8]
 8008e9e:	68ab      	ldr	r3, [r5, #8]
 8008ea0:	19ba      	adds	r2, r7, r6
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	da00      	bge.n	8008ea8 <__multiply+0x28>
 8008ea6:	3101      	adds	r1, #1
 8008ea8:	f7ff fee0 	bl	8008c6c <_Balloc>
 8008eac:	9001      	str	r0, [sp, #4]
 8008eae:	2800      	cmp	r0, #0
 8008eb0:	d106      	bne.n	8008ec0 <__multiply+0x40>
 8008eb2:	215e      	movs	r1, #94	; 0x5e
 8008eb4:	0002      	movs	r2, r0
 8008eb6:	4b48      	ldr	r3, [pc, #288]	; (8008fd8 <__multiply+0x158>)
 8008eb8:	4848      	ldr	r0, [pc, #288]	; (8008fdc <__multiply+0x15c>)
 8008eba:	31ff      	adds	r1, #255	; 0xff
 8008ebc:	f000 ff00 	bl	8009cc0 <__assert_func>
 8008ec0:	9b01      	ldr	r3, [sp, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	3314      	adds	r3, #20
 8008ec6:	469c      	mov	ip, r3
 8008ec8:	19bb      	adds	r3, r7, r6
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	4463      	add	r3, ip
 8008ece:	9303      	str	r3, [sp, #12]
 8008ed0:	4663      	mov	r3, ip
 8008ed2:	9903      	ldr	r1, [sp, #12]
 8008ed4:	428b      	cmp	r3, r1
 8008ed6:	d32c      	bcc.n	8008f32 <__multiply+0xb2>
 8008ed8:	002b      	movs	r3, r5
 8008eda:	0022      	movs	r2, r4
 8008edc:	3314      	adds	r3, #20
 8008ede:	00bf      	lsls	r7, r7, #2
 8008ee0:	3214      	adds	r2, #20
 8008ee2:	9306      	str	r3, [sp, #24]
 8008ee4:	00b6      	lsls	r6, r6, #2
 8008ee6:	19db      	adds	r3, r3, r7
 8008ee8:	9304      	str	r3, [sp, #16]
 8008eea:	1993      	adds	r3, r2, r6
 8008eec:	9307      	str	r3, [sp, #28]
 8008eee:	2304      	movs	r3, #4
 8008ef0:	9305      	str	r3, [sp, #20]
 8008ef2:	002b      	movs	r3, r5
 8008ef4:	9904      	ldr	r1, [sp, #16]
 8008ef6:	3315      	adds	r3, #21
 8008ef8:	9200      	str	r2, [sp, #0]
 8008efa:	4299      	cmp	r1, r3
 8008efc:	d305      	bcc.n	8008f0a <__multiply+0x8a>
 8008efe:	1b4b      	subs	r3, r1, r5
 8008f00:	3b15      	subs	r3, #21
 8008f02:	089b      	lsrs	r3, r3, #2
 8008f04:	3301      	adds	r3, #1
 8008f06:	009b      	lsls	r3, r3, #2
 8008f08:	9305      	str	r3, [sp, #20]
 8008f0a:	9b07      	ldr	r3, [sp, #28]
 8008f0c:	9a00      	ldr	r2, [sp, #0]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d311      	bcc.n	8008f36 <__multiply+0xb6>
 8008f12:	9b02      	ldr	r3, [sp, #8]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	dd06      	ble.n	8008f26 <__multiply+0xa6>
 8008f18:	9b03      	ldr	r3, [sp, #12]
 8008f1a:	3b04      	subs	r3, #4
 8008f1c:	9303      	str	r3, [sp, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	9300      	str	r3, [sp, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d053      	beq.n	8008fce <__multiply+0x14e>
 8008f26:	9b01      	ldr	r3, [sp, #4]
 8008f28:	9a02      	ldr	r2, [sp, #8]
 8008f2a:	0018      	movs	r0, r3
 8008f2c:	611a      	str	r2, [r3, #16]
 8008f2e:	b009      	add	sp, #36	; 0x24
 8008f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f32:	c304      	stmia	r3!, {r2}
 8008f34:	e7cd      	b.n	8008ed2 <__multiply+0x52>
 8008f36:	9b00      	ldr	r3, [sp, #0]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	b298      	uxth	r0, r3
 8008f3c:	2800      	cmp	r0, #0
 8008f3e:	d01b      	beq.n	8008f78 <__multiply+0xf8>
 8008f40:	4667      	mov	r7, ip
 8008f42:	2400      	movs	r4, #0
 8008f44:	9e06      	ldr	r6, [sp, #24]
 8008f46:	ce02      	ldmia	r6!, {r1}
 8008f48:	683a      	ldr	r2, [r7, #0]
 8008f4a:	b28b      	uxth	r3, r1
 8008f4c:	4343      	muls	r3, r0
 8008f4e:	b292      	uxth	r2, r2
 8008f50:	189b      	adds	r3, r3, r2
 8008f52:	191b      	adds	r3, r3, r4
 8008f54:	0c0c      	lsrs	r4, r1, #16
 8008f56:	4344      	muls	r4, r0
 8008f58:	683a      	ldr	r2, [r7, #0]
 8008f5a:	0c11      	lsrs	r1, r2, #16
 8008f5c:	1861      	adds	r1, r4, r1
 8008f5e:	0c1c      	lsrs	r4, r3, #16
 8008f60:	1909      	adds	r1, r1, r4
 8008f62:	0c0c      	lsrs	r4, r1, #16
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	0409      	lsls	r1, r1, #16
 8008f68:	430b      	orrs	r3, r1
 8008f6a:	c708      	stmia	r7!, {r3}
 8008f6c:	9b04      	ldr	r3, [sp, #16]
 8008f6e:	42b3      	cmp	r3, r6
 8008f70:	d8e9      	bhi.n	8008f46 <__multiply+0xc6>
 8008f72:	4663      	mov	r3, ip
 8008f74:	9a05      	ldr	r2, [sp, #20]
 8008f76:	509c      	str	r4, [r3, r2]
 8008f78:	9b00      	ldr	r3, [sp, #0]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	0c1e      	lsrs	r6, r3, #16
 8008f7e:	d020      	beq.n	8008fc2 <__multiply+0x142>
 8008f80:	4663      	mov	r3, ip
 8008f82:	002c      	movs	r4, r5
 8008f84:	4660      	mov	r0, ip
 8008f86:	2700      	movs	r7, #0
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	3414      	adds	r4, #20
 8008f8c:	6822      	ldr	r2, [r4, #0]
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	b291      	uxth	r1, r2
 8008f92:	4371      	muls	r1, r6
 8008f94:	6802      	ldr	r2, [r0, #0]
 8008f96:	0c12      	lsrs	r2, r2, #16
 8008f98:	1889      	adds	r1, r1, r2
 8008f9a:	19cf      	adds	r7, r1, r7
 8008f9c:	0439      	lsls	r1, r7, #16
 8008f9e:	430b      	orrs	r3, r1
 8008fa0:	6003      	str	r3, [r0, #0]
 8008fa2:	cc02      	ldmia	r4!, {r1}
 8008fa4:	6843      	ldr	r3, [r0, #4]
 8008fa6:	0c09      	lsrs	r1, r1, #16
 8008fa8:	4371      	muls	r1, r6
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	0c3f      	lsrs	r7, r7, #16
 8008fae:	18cb      	adds	r3, r1, r3
 8008fb0:	9a04      	ldr	r2, [sp, #16]
 8008fb2:	19db      	adds	r3, r3, r7
 8008fb4:	0c1f      	lsrs	r7, r3, #16
 8008fb6:	3004      	adds	r0, #4
 8008fb8:	42a2      	cmp	r2, r4
 8008fba:	d8e7      	bhi.n	8008f8c <__multiply+0x10c>
 8008fbc:	4662      	mov	r2, ip
 8008fbe:	9905      	ldr	r1, [sp, #20]
 8008fc0:	5053      	str	r3, [r2, r1]
 8008fc2:	9b00      	ldr	r3, [sp, #0]
 8008fc4:	3304      	adds	r3, #4
 8008fc6:	9300      	str	r3, [sp, #0]
 8008fc8:	2304      	movs	r3, #4
 8008fca:	449c      	add	ip, r3
 8008fcc:	e79d      	b.n	8008f0a <__multiply+0x8a>
 8008fce:	9b02      	ldr	r3, [sp, #8]
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	9302      	str	r3, [sp, #8]
 8008fd4:	e79d      	b.n	8008f12 <__multiply+0x92>
 8008fd6:	46c0      	nop			; (mov r8, r8)
 8008fd8:	0800a287 	.word	0x0800a287
 8008fdc:	0800a2f8 	.word	0x0800a2f8

08008fe0 <__pow5mult>:
 8008fe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fe2:	2303      	movs	r3, #3
 8008fe4:	0015      	movs	r5, r2
 8008fe6:	0007      	movs	r7, r0
 8008fe8:	000e      	movs	r6, r1
 8008fea:	401a      	ands	r2, r3
 8008fec:	421d      	tst	r5, r3
 8008fee:	d008      	beq.n	8009002 <__pow5mult+0x22>
 8008ff0:	4925      	ldr	r1, [pc, #148]	; (8009088 <__pow5mult+0xa8>)
 8008ff2:	3a01      	subs	r2, #1
 8008ff4:	0092      	lsls	r2, r2, #2
 8008ff6:	5852      	ldr	r2, [r2, r1]
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	0031      	movs	r1, r6
 8008ffc:	f7ff fe9e 	bl	8008d3c <__multadd>
 8009000:	0006      	movs	r6, r0
 8009002:	10ad      	asrs	r5, r5, #2
 8009004:	d03d      	beq.n	8009082 <__pow5mult+0xa2>
 8009006:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009008:	2c00      	cmp	r4, #0
 800900a:	d10f      	bne.n	800902c <__pow5mult+0x4c>
 800900c:	2010      	movs	r0, #16
 800900e:	f7ff fe0f 	bl	8008c30 <malloc>
 8009012:	1e02      	subs	r2, r0, #0
 8009014:	6278      	str	r0, [r7, #36]	; 0x24
 8009016:	d105      	bne.n	8009024 <__pow5mult+0x44>
 8009018:	21d7      	movs	r1, #215	; 0xd7
 800901a:	4b1c      	ldr	r3, [pc, #112]	; (800908c <__pow5mult+0xac>)
 800901c:	481c      	ldr	r0, [pc, #112]	; (8009090 <__pow5mult+0xb0>)
 800901e:	0049      	lsls	r1, r1, #1
 8009020:	f000 fe4e 	bl	8009cc0 <__assert_func>
 8009024:	6044      	str	r4, [r0, #4]
 8009026:	6084      	str	r4, [r0, #8]
 8009028:	6004      	str	r4, [r0, #0]
 800902a:	60c4      	str	r4, [r0, #12]
 800902c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902e:	689c      	ldr	r4, [r3, #8]
 8009030:	9301      	str	r3, [sp, #4]
 8009032:	2c00      	cmp	r4, #0
 8009034:	d108      	bne.n	8009048 <__pow5mult+0x68>
 8009036:	0038      	movs	r0, r7
 8009038:	4916      	ldr	r1, [pc, #88]	; (8009094 <__pow5mult+0xb4>)
 800903a:	f7ff ff0b 	bl	8008e54 <__i2b>
 800903e:	9b01      	ldr	r3, [sp, #4]
 8009040:	0004      	movs	r4, r0
 8009042:	6098      	str	r0, [r3, #8]
 8009044:	2300      	movs	r3, #0
 8009046:	6003      	str	r3, [r0, #0]
 8009048:	2301      	movs	r3, #1
 800904a:	421d      	tst	r5, r3
 800904c:	d00a      	beq.n	8009064 <__pow5mult+0x84>
 800904e:	0031      	movs	r1, r6
 8009050:	0022      	movs	r2, r4
 8009052:	0038      	movs	r0, r7
 8009054:	f7ff ff14 	bl	8008e80 <__multiply>
 8009058:	0031      	movs	r1, r6
 800905a:	9001      	str	r0, [sp, #4]
 800905c:	0038      	movs	r0, r7
 800905e:	f7ff fe49 	bl	8008cf4 <_Bfree>
 8009062:	9e01      	ldr	r6, [sp, #4]
 8009064:	106d      	asrs	r5, r5, #1
 8009066:	d00c      	beq.n	8009082 <__pow5mult+0xa2>
 8009068:	6820      	ldr	r0, [r4, #0]
 800906a:	2800      	cmp	r0, #0
 800906c:	d107      	bne.n	800907e <__pow5mult+0x9e>
 800906e:	0022      	movs	r2, r4
 8009070:	0021      	movs	r1, r4
 8009072:	0038      	movs	r0, r7
 8009074:	f7ff ff04 	bl	8008e80 <__multiply>
 8009078:	2300      	movs	r3, #0
 800907a:	6020      	str	r0, [r4, #0]
 800907c:	6003      	str	r3, [r0, #0]
 800907e:	0004      	movs	r4, r0
 8009080:	e7e2      	b.n	8009048 <__pow5mult+0x68>
 8009082:	0030      	movs	r0, r6
 8009084:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009086:	46c0      	nop			; (mov r8, r8)
 8009088:	0800a448 	.word	0x0800a448
 800908c:	0800a215 	.word	0x0800a215
 8009090:	0800a2f8 	.word	0x0800a2f8
 8009094:	00000271 	.word	0x00000271

08009098 <__lshift>:
 8009098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800909a:	000c      	movs	r4, r1
 800909c:	0017      	movs	r7, r2
 800909e:	6923      	ldr	r3, [r4, #16]
 80090a0:	1155      	asrs	r5, r2, #5
 80090a2:	b087      	sub	sp, #28
 80090a4:	18eb      	adds	r3, r5, r3
 80090a6:	9302      	str	r3, [sp, #8]
 80090a8:	3301      	adds	r3, #1
 80090aa:	9301      	str	r3, [sp, #4]
 80090ac:	6849      	ldr	r1, [r1, #4]
 80090ae:	68a3      	ldr	r3, [r4, #8]
 80090b0:	9004      	str	r0, [sp, #16]
 80090b2:	9a01      	ldr	r2, [sp, #4]
 80090b4:	4293      	cmp	r3, r2
 80090b6:	db10      	blt.n	80090da <__lshift+0x42>
 80090b8:	9804      	ldr	r0, [sp, #16]
 80090ba:	f7ff fdd7 	bl	8008c6c <_Balloc>
 80090be:	2300      	movs	r3, #0
 80090c0:	0002      	movs	r2, r0
 80090c2:	0006      	movs	r6, r0
 80090c4:	0019      	movs	r1, r3
 80090c6:	3214      	adds	r2, #20
 80090c8:	4298      	cmp	r0, r3
 80090ca:	d10c      	bne.n	80090e6 <__lshift+0x4e>
 80090cc:	21da      	movs	r1, #218	; 0xda
 80090ce:	0002      	movs	r2, r0
 80090d0:	4b26      	ldr	r3, [pc, #152]	; (800916c <__lshift+0xd4>)
 80090d2:	4827      	ldr	r0, [pc, #156]	; (8009170 <__lshift+0xd8>)
 80090d4:	31ff      	adds	r1, #255	; 0xff
 80090d6:	f000 fdf3 	bl	8009cc0 <__assert_func>
 80090da:	3101      	adds	r1, #1
 80090dc:	005b      	lsls	r3, r3, #1
 80090de:	e7e8      	b.n	80090b2 <__lshift+0x1a>
 80090e0:	0098      	lsls	r0, r3, #2
 80090e2:	5011      	str	r1, [r2, r0]
 80090e4:	3301      	adds	r3, #1
 80090e6:	42ab      	cmp	r3, r5
 80090e8:	dbfa      	blt.n	80090e0 <__lshift+0x48>
 80090ea:	43eb      	mvns	r3, r5
 80090ec:	17db      	asrs	r3, r3, #31
 80090ee:	401d      	ands	r5, r3
 80090f0:	211f      	movs	r1, #31
 80090f2:	0023      	movs	r3, r4
 80090f4:	0038      	movs	r0, r7
 80090f6:	00ad      	lsls	r5, r5, #2
 80090f8:	1955      	adds	r5, r2, r5
 80090fa:	6922      	ldr	r2, [r4, #16]
 80090fc:	3314      	adds	r3, #20
 80090fe:	0092      	lsls	r2, r2, #2
 8009100:	4008      	ands	r0, r1
 8009102:	4684      	mov	ip, r0
 8009104:	189a      	adds	r2, r3, r2
 8009106:	420f      	tst	r7, r1
 8009108:	d02a      	beq.n	8009160 <__lshift+0xc8>
 800910a:	3101      	adds	r1, #1
 800910c:	1a09      	subs	r1, r1, r0
 800910e:	9105      	str	r1, [sp, #20]
 8009110:	2100      	movs	r1, #0
 8009112:	9503      	str	r5, [sp, #12]
 8009114:	4667      	mov	r7, ip
 8009116:	6818      	ldr	r0, [r3, #0]
 8009118:	40b8      	lsls	r0, r7
 800911a:	4301      	orrs	r1, r0
 800911c:	9803      	ldr	r0, [sp, #12]
 800911e:	c002      	stmia	r0!, {r1}
 8009120:	cb02      	ldmia	r3!, {r1}
 8009122:	9003      	str	r0, [sp, #12]
 8009124:	9805      	ldr	r0, [sp, #20]
 8009126:	40c1      	lsrs	r1, r0
 8009128:	429a      	cmp	r2, r3
 800912a:	d8f3      	bhi.n	8009114 <__lshift+0x7c>
 800912c:	0020      	movs	r0, r4
 800912e:	3015      	adds	r0, #21
 8009130:	2304      	movs	r3, #4
 8009132:	4282      	cmp	r2, r0
 8009134:	d304      	bcc.n	8009140 <__lshift+0xa8>
 8009136:	1b13      	subs	r3, r2, r4
 8009138:	3b15      	subs	r3, #21
 800913a:	089b      	lsrs	r3, r3, #2
 800913c:	3301      	adds	r3, #1
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	50e9      	str	r1, [r5, r3]
 8009142:	2900      	cmp	r1, #0
 8009144:	d002      	beq.n	800914c <__lshift+0xb4>
 8009146:	9b02      	ldr	r3, [sp, #8]
 8009148:	3302      	adds	r3, #2
 800914a:	9301      	str	r3, [sp, #4]
 800914c:	9b01      	ldr	r3, [sp, #4]
 800914e:	9804      	ldr	r0, [sp, #16]
 8009150:	3b01      	subs	r3, #1
 8009152:	0021      	movs	r1, r4
 8009154:	6133      	str	r3, [r6, #16]
 8009156:	f7ff fdcd 	bl	8008cf4 <_Bfree>
 800915a:	0030      	movs	r0, r6
 800915c:	b007      	add	sp, #28
 800915e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009160:	cb02      	ldmia	r3!, {r1}
 8009162:	c502      	stmia	r5!, {r1}
 8009164:	429a      	cmp	r2, r3
 8009166:	d8fb      	bhi.n	8009160 <__lshift+0xc8>
 8009168:	e7f0      	b.n	800914c <__lshift+0xb4>
 800916a:	46c0      	nop			; (mov r8, r8)
 800916c:	0800a287 	.word	0x0800a287
 8009170:	0800a2f8 	.word	0x0800a2f8

08009174 <__mcmp>:
 8009174:	6902      	ldr	r2, [r0, #16]
 8009176:	690b      	ldr	r3, [r1, #16]
 8009178:	b530      	push	{r4, r5, lr}
 800917a:	0004      	movs	r4, r0
 800917c:	1ad0      	subs	r0, r2, r3
 800917e:	429a      	cmp	r2, r3
 8009180:	d10d      	bne.n	800919e <__mcmp+0x2a>
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	3414      	adds	r4, #20
 8009186:	3114      	adds	r1, #20
 8009188:	18e2      	adds	r2, r4, r3
 800918a:	18c9      	adds	r1, r1, r3
 800918c:	3a04      	subs	r2, #4
 800918e:	3904      	subs	r1, #4
 8009190:	6815      	ldr	r5, [r2, #0]
 8009192:	680b      	ldr	r3, [r1, #0]
 8009194:	429d      	cmp	r5, r3
 8009196:	d003      	beq.n	80091a0 <__mcmp+0x2c>
 8009198:	2001      	movs	r0, #1
 800919a:	429d      	cmp	r5, r3
 800919c:	d303      	bcc.n	80091a6 <__mcmp+0x32>
 800919e:	bd30      	pop	{r4, r5, pc}
 80091a0:	4294      	cmp	r4, r2
 80091a2:	d3f3      	bcc.n	800918c <__mcmp+0x18>
 80091a4:	e7fb      	b.n	800919e <__mcmp+0x2a>
 80091a6:	4240      	negs	r0, r0
 80091a8:	e7f9      	b.n	800919e <__mcmp+0x2a>
	...

080091ac <__mdiff>:
 80091ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091ae:	000e      	movs	r6, r1
 80091b0:	0007      	movs	r7, r0
 80091b2:	0011      	movs	r1, r2
 80091b4:	0030      	movs	r0, r6
 80091b6:	b087      	sub	sp, #28
 80091b8:	0014      	movs	r4, r2
 80091ba:	f7ff ffdb 	bl	8009174 <__mcmp>
 80091be:	1e05      	subs	r5, r0, #0
 80091c0:	d110      	bne.n	80091e4 <__mdiff+0x38>
 80091c2:	0001      	movs	r1, r0
 80091c4:	0038      	movs	r0, r7
 80091c6:	f7ff fd51 	bl	8008c6c <_Balloc>
 80091ca:	1e02      	subs	r2, r0, #0
 80091cc:	d104      	bne.n	80091d8 <__mdiff+0x2c>
 80091ce:	4b40      	ldr	r3, [pc, #256]	; (80092d0 <__mdiff+0x124>)
 80091d0:	4940      	ldr	r1, [pc, #256]	; (80092d4 <__mdiff+0x128>)
 80091d2:	4841      	ldr	r0, [pc, #260]	; (80092d8 <__mdiff+0x12c>)
 80091d4:	f000 fd74 	bl	8009cc0 <__assert_func>
 80091d8:	2301      	movs	r3, #1
 80091da:	6145      	str	r5, [r0, #20]
 80091dc:	6103      	str	r3, [r0, #16]
 80091de:	0010      	movs	r0, r2
 80091e0:	b007      	add	sp, #28
 80091e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091e4:	2301      	movs	r3, #1
 80091e6:	9301      	str	r3, [sp, #4]
 80091e8:	2800      	cmp	r0, #0
 80091ea:	db04      	blt.n	80091f6 <__mdiff+0x4a>
 80091ec:	0023      	movs	r3, r4
 80091ee:	0034      	movs	r4, r6
 80091f0:	001e      	movs	r6, r3
 80091f2:	2300      	movs	r3, #0
 80091f4:	9301      	str	r3, [sp, #4]
 80091f6:	0038      	movs	r0, r7
 80091f8:	6861      	ldr	r1, [r4, #4]
 80091fa:	f7ff fd37 	bl	8008c6c <_Balloc>
 80091fe:	1e02      	subs	r2, r0, #0
 8009200:	d103      	bne.n	800920a <__mdiff+0x5e>
 8009202:	2190      	movs	r1, #144	; 0x90
 8009204:	4b32      	ldr	r3, [pc, #200]	; (80092d0 <__mdiff+0x124>)
 8009206:	0089      	lsls	r1, r1, #2
 8009208:	e7e3      	b.n	80091d2 <__mdiff+0x26>
 800920a:	9b01      	ldr	r3, [sp, #4]
 800920c:	2700      	movs	r7, #0
 800920e:	60c3      	str	r3, [r0, #12]
 8009210:	6920      	ldr	r0, [r4, #16]
 8009212:	3414      	adds	r4, #20
 8009214:	9401      	str	r4, [sp, #4]
 8009216:	9b01      	ldr	r3, [sp, #4]
 8009218:	0084      	lsls	r4, r0, #2
 800921a:	191b      	adds	r3, r3, r4
 800921c:	0034      	movs	r4, r6
 800921e:	9302      	str	r3, [sp, #8]
 8009220:	6933      	ldr	r3, [r6, #16]
 8009222:	3414      	adds	r4, #20
 8009224:	0099      	lsls	r1, r3, #2
 8009226:	1863      	adds	r3, r4, r1
 8009228:	9303      	str	r3, [sp, #12]
 800922a:	0013      	movs	r3, r2
 800922c:	3314      	adds	r3, #20
 800922e:	469c      	mov	ip, r3
 8009230:	9305      	str	r3, [sp, #20]
 8009232:	9b01      	ldr	r3, [sp, #4]
 8009234:	9304      	str	r3, [sp, #16]
 8009236:	9b04      	ldr	r3, [sp, #16]
 8009238:	cc02      	ldmia	r4!, {r1}
 800923a:	cb20      	ldmia	r3!, {r5}
 800923c:	9304      	str	r3, [sp, #16]
 800923e:	b2ab      	uxth	r3, r5
 8009240:	19df      	adds	r7, r3, r7
 8009242:	b28b      	uxth	r3, r1
 8009244:	1afb      	subs	r3, r7, r3
 8009246:	0c09      	lsrs	r1, r1, #16
 8009248:	0c2d      	lsrs	r5, r5, #16
 800924a:	1a6d      	subs	r5, r5, r1
 800924c:	1419      	asrs	r1, r3, #16
 800924e:	186d      	adds	r5, r5, r1
 8009250:	4661      	mov	r1, ip
 8009252:	142f      	asrs	r7, r5, #16
 8009254:	b29b      	uxth	r3, r3
 8009256:	042d      	lsls	r5, r5, #16
 8009258:	432b      	orrs	r3, r5
 800925a:	c108      	stmia	r1!, {r3}
 800925c:	9b03      	ldr	r3, [sp, #12]
 800925e:	468c      	mov	ip, r1
 8009260:	42a3      	cmp	r3, r4
 8009262:	d8e8      	bhi.n	8009236 <__mdiff+0x8a>
 8009264:	0031      	movs	r1, r6
 8009266:	9c03      	ldr	r4, [sp, #12]
 8009268:	3115      	adds	r1, #21
 800926a:	2304      	movs	r3, #4
 800926c:	428c      	cmp	r4, r1
 800926e:	d304      	bcc.n	800927a <__mdiff+0xce>
 8009270:	1ba3      	subs	r3, r4, r6
 8009272:	3b15      	subs	r3, #21
 8009274:	089b      	lsrs	r3, r3, #2
 8009276:	3301      	adds	r3, #1
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	9901      	ldr	r1, [sp, #4]
 800927c:	18cc      	adds	r4, r1, r3
 800927e:	9905      	ldr	r1, [sp, #20]
 8009280:	0026      	movs	r6, r4
 8009282:	18cb      	adds	r3, r1, r3
 8009284:	469c      	mov	ip, r3
 8009286:	9902      	ldr	r1, [sp, #8]
 8009288:	428e      	cmp	r6, r1
 800928a:	d310      	bcc.n	80092ae <__mdiff+0x102>
 800928c:	9e02      	ldr	r6, [sp, #8]
 800928e:	1ee1      	subs	r1, r4, #3
 8009290:	2500      	movs	r5, #0
 8009292:	428e      	cmp	r6, r1
 8009294:	d304      	bcc.n	80092a0 <__mdiff+0xf4>
 8009296:	0031      	movs	r1, r6
 8009298:	3103      	adds	r1, #3
 800929a:	1b0c      	subs	r4, r1, r4
 800929c:	08a4      	lsrs	r4, r4, #2
 800929e:	00a5      	lsls	r5, r4, #2
 80092a0:	195b      	adds	r3, r3, r5
 80092a2:	3b04      	subs	r3, #4
 80092a4:	6819      	ldr	r1, [r3, #0]
 80092a6:	2900      	cmp	r1, #0
 80092a8:	d00f      	beq.n	80092ca <__mdiff+0x11e>
 80092aa:	6110      	str	r0, [r2, #16]
 80092ac:	e797      	b.n	80091de <__mdiff+0x32>
 80092ae:	ce02      	ldmia	r6!, {r1}
 80092b0:	b28d      	uxth	r5, r1
 80092b2:	19ed      	adds	r5, r5, r7
 80092b4:	0c0f      	lsrs	r7, r1, #16
 80092b6:	1429      	asrs	r1, r5, #16
 80092b8:	1879      	adds	r1, r7, r1
 80092ba:	140f      	asrs	r7, r1, #16
 80092bc:	b2ad      	uxth	r5, r5
 80092be:	0409      	lsls	r1, r1, #16
 80092c0:	430d      	orrs	r5, r1
 80092c2:	4661      	mov	r1, ip
 80092c4:	c120      	stmia	r1!, {r5}
 80092c6:	468c      	mov	ip, r1
 80092c8:	e7dd      	b.n	8009286 <__mdiff+0xda>
 80092ca:	3801      	subs	r0, #1
 80092cc:	e7e9      	b.n	80092a2 <__mdiff+0xf6>
 80092ce:	46c0      	nop			; (mov r8, r8)
 80092d0:	0800a287 	.word	0x0800a287
 80092d4:	00000232 	.word	0x00000232
 80092d8:	0800a2f8 	.word	0x0800a2f8

080092dc <__d2b>:
 80092dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092de:	2101      	movs	r1, #1
 80092e0:	0014      	movs	r4, r2
 80092e2:	001e      	movs	r6, r3
 80092e4:	9f08      	ldr	r7, [sp, #32]
 80092e6:	f7ff fcc1 	bl	8008c6c <_Balloc>
 80092ea:	1e05      	subs	r5, r0, #0
 80092ec:	d105      	bne.n	80092fa <__d2b+0x1e>
 80092ee:	0002      	movs	r2, r0
 80092f0:	4b26      	ldr	r3, [pc, #152]	; (800938c <__d2b+0xb0>)
 80092f2:	4927      	ldr	r1, [pc, #156]	; (8009390 <__d2b+0xb4>)
 80092f4:	4827      	ldr	r0, [pc, #156]	; (8009394 <__d2b+0xb8>)
 80092f6:	f000 fce3 	bl	8009cc0 <__assert_func>
 80092fa:	0333      	lsls	r3, r6, #12
 80092fc:	0076      	lsls	r6, r6, #1
 80092fe:	0b1b      	lsrs	r3, r3, #12
 8009300:	0d76      	lsrs	r6, r6, #21
 8009302:	d124      	bne.n	800934e <__d2b+0x72>
 8009304:	9301      	str	r3, [sp, #4]
 8009306:	2c00      	cmp	r4, #0
 8009308:	d027      	beq.n	800935a <__d2b+0x7e>
 800930a:	4668      	mov	r0, sp
 800930c:	9400      	str	r4, [sp, #0]
 800930e:	f7ff fd73 	bl	8008df8 <__lo0bits>
 8009312:	9c00      	ldr	r4, [sp, #0]
 8009314:	2800      	cmp	r0, #0
 8009316:	d01e      	beq.n	8009356 <__d2b+0x7a>
 8009318:	9b01      	ldr	r3, [sp, #4]
 800931a:	2120      	movs	r1, #32
 800931c:	001a      	movs	r2, r3
 800931e:	1a09      	subs	r1, r1, r0
 8009320:	408a      	lsls	r2, r1
 8009322:	40c3      	lsrs	r3, r0
 8009324:	4322      	orrs	r2, r4
 8009326:	616a      	str	r2, [r5, #20]
 8009328:	9301      	str	r3, [sp, #4]
 800932a:	9c01      	ldr	r4, [sp, #4]
 800932c:	61ac      	str	r4, [r5, #24]
 800932e:	1e63      	subs	r3, r4, #1
 8009330:	419c      	sbcs	r4, r3
 8009332:	3401      	adds	r4, #1
 8009334:	612c      	str	r4, [r5, #16]
 8009336:	2e00      	cmp	r6, #0
 8009338:	d018      	beq.n	800936c <__d2b+0x90>
 800933a:	4b17      	ldr	r3, [pc, #92]	; (8009398 <__d2b+0xbc>)
 800933c:	18f6      	adds	r6, r6, r3
 800933e:	2335      	movs	r3, #53	; 0x35
 8009340:	1836      	adds	r6, r6, r0
 8009342:	1a18      	subs	r0, r3, r0
 8009344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009346:	603e      	str	r6, [r7, #0]
 8009348:	6018      	str	r0, [r3, #0]
 800934a:	0028      	movs	r0, r5
 800934c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800934e:	2280      	movs	r2, #128	; 0x80
 8009350:	0352      	lsls	r2, r2, #13
 8009352:	4313      	orrs	r3, r2
 8009354:	e7d6      	b.n	8009304 <__d2b+0x28>
 8009356:	616c      	str	r4, [r5, #20]
 8009358:	e7e7      	b.n	800932a <__d2b+0x4e>
 800935a:	a801      	add	r0, sp, #4
 800935c:	f7ff fd4c 	bl	8008df8 <__lo0bits>
 8009360:	2401      	movs	r4, #1
 8009362:	9b01      	ldr	r3, [sp, #4]
 8009364:	612c      	str	r4, [r5, #16]
 8009366:	616b      	str	r3, [r5, #20]
 8009368:	3020      	adds	r0, #32
 800936a:	e7e4      	b.n	8009336 <__d2b+0x5a>
 800936c:	4b0b      	ldr	r3, [pc, #44]	; (800939c <__d2b+0xc0>)
 800936e:	18c0      	adds	r0, r0, r3
 8009370:	4b0b      	ldr	r3, [pc, #44]	; (80093a0 <__d2b+0xc4>)
 8009372:	6038      	str	r0, [r7, #0]
 8009374:	18e3      	adds	r3, r4, r3
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	18eb      	adds	r3, r5, r3
 800937a:	6958      	ldr	r0, [r3, #20]
 800937c:	f7ff fd22 	bl	8008dc4 <__hi0bits>
 8009380:	0164      	lsls	r4, r4, #5
 8009382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009384:	1a24      	subs	r4, r4, r0
 8009386:	601c      	str	r4, [r3, #0]
 8009388:	e7df      	b.n	800934a <__d2b+0x6e>
 800938a:	46c0      	nop			; (mov r8, r8)
 800938c:	0800a287 	.word	0x0800a287
 8009390:	0000030a 	.word	0x0000030a
 8009394:	0800a2f8 	.word	0x0800a2f8
 8009398:	fffffbcd 	.word	0xfffffbcd
 800939c:	fffffbce 	.word	0xfffffbce
 80093a0:	3fffffff 	.word	0x3fffffff

080093a4 <_calloc_r>:
 80093a4:	b570      	push	{r4, r5, r6, lr}
 80093a6:	0c13      	lsrs	r3, r2, #16
 80093a8:	0c0d      	lsrs	r5, r1, #16
 80093aa:	d11e      	bne.n	80093ea <_calloc_r+0x46>
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d10c      	bne.n	80093ca <_calloc_r+0x26>
 80093b0:	b289      	uxth	r1, r1
 80093b2:	b294      	uxth	r4, r2
 80093b4:	434c      	muls	r4, r1
 80093b6:	0021      	movs	r1, r4
 80093b8:	f000 f88c 	bl	80094d4 <_malloc_r>
 80093bc:	1e05      	subs	r5, r0, #0
 80093be:	d01b      	beq.n	80093f8 <_calloc_r+0x54>
 80093c0:	0022      	movs	r2, r4
 80093c2:	2100      	movs	r1, #0
 80093c4:	f7fd fd3e 	bl	8006e44 <memset>
 80093c8:	e016      	b.n	80093f8 <_calloc_r+0x54>
 80093ca:	1c1d      	adds	r5, r3, #0
 80093cc:	1c0b      	adds	r3, r1, #0
 80093ce:	b292      	uxth	r2, r2
 80093d0:	b289      	uxth	r1, r1
 80093d2:	b29c      	uxth	r4, r3
 80093d4:	4351      	muls	r1, r2
 80093d6:	b2ab      	uxth	r3, r5
 80093d8:	4363      	muls	r3, r4
 80093da:	0c0c      	lsrs	r4, r1, #16
 80093dc:	191c      	adds	r4, r3, r4
 80093de:	0c22      	lsrs	r2, r4, #16
 80093e0:	d107      	bne.n	80093f2 <_calloc_r+0x4e>
 80093e2:	0424      	lsls	r4, r4, #16
 80093e4:	b289      	uxth	r1, r1
 80093e6:	430c      	orrs	r4, r1
 80093e8:	e7e5      	b.n	80093b6 <_calloc_r+0x12>
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d101      	bne.n	80093f2 <_calloc_r+0x4e>
 80093ee:	1c13      	adds	r3, r2, #0
 80093f0:	e7ed      	b.n	80093ce <_calloc_r+0x2a>
 80093f2:	230c      	movs	r3, #12
 80093f4:	2500      	movs	r5, #0
 80093f6:	6003      	str	r3, [r0, #0]
 80093f8:	0028      	movs	r0, r5
 80093fa:	bd70      	pop	{r4, r5, r6, pc}

080093fc <_free_r>:
 80093fc:	b570      	push	{r4, r5, r6, lr}
 80093fe:	0005      	movs	r5, r0
 8009400:	2900      	cmp	r1, #0
 8009402:	d010      	beq.n	8009426 <_free_r+0x2a>
 8009404:	1f0c      	subs	r4, r1, #4
 8009406:	6823      	ldr	r3, [r4, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	da00      	bge.n	800940e <_free_r+0x12>
 800940c:	18e4      	adds	r4, r4, r3
 800940e:	0028      	movs	r0, r5
 8009410:	f000 fcf4 	bl	8009dfc <__malloc_lock>
 8009414:	4a1d      	ldr	r2, [pc, #116]	; (800948c <_free_r+0x90>)
 8009416:	6813      	ldr	r3, [r2, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d105      	bne.n	8009428 <_free_r+0x2c>
 800941c:	6063      	str	r3, [r4, #4]
 800941e:	6014      	str	r4, [r2, #0]
 8009420:	0028      	movs	r0, r5
 8009422:	f000 fcf3 	bl	8009e0c <__malloc_unlock>
 8009426:	bd70      	pop	{r4, r5, r6, pc}
 8009428:	42a3      	cmp	r3, r4
 800942a:	d908      	bls.n	800943e <_free_r+0x42>
 800942c:	6821      	ldr	r1, [r4, #0]
 800942e:	1860      	adds	r0, r4, r1
 8009430:	4283      	cmp	r3, r0
 8009432:	d1f3      	bne.n	800941c <_free_r+0x20>
 8009434:	6818      	ldr	r0, [r3, #0]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	1841      	adds	r1, r0, r1
 800943a:	6021      	str	r1, [r4, #0]
 800943c:	e7ee      	b.n	800941c <_free_r+0x20>
 800943e:	001a      	movs	r2, r3
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d001      	beq.n	800944a <_free_r+0x4e>
 8009446:	42a3      	cmp	r3, r4
 8009448:	d9f9      	bls.n	800943e <_free_r+0x42>
 800944a:	6811      	ldr	r1, [r2, #0]
 800944c:	1850      	adds	r0, r2, r1
 800944e:	42a0      	cmp	r0, r4
 8009450:	d10b      	bne.n	800946a <_free_r+0x6e>
 8009452:	6820      	ldr	r0, [r4, #0]
 8009454:	1809      	adds	r1, r1, r0
 8009456:	1850      	adds	r0, r2, r1
 8009458:	6011      	str	r1, [r2, #0]
 800945a:	4283      	cmp	r3, r0
 800945c:	d1e0      	bne.n	8009420 <_free_r+0x24>
 800945e:	6818      	ldr	r0, [r3, #0]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	1841      	adds	r1, r0, r1
 8009464:	6011      	str	r1, [r2, #0]
 8009466:	6053      	str	r3, [r2, #4]
 8009468:	e7da      	b.n	8009420 <_free_r+0x24>
 800946a:	42a0      	cmp	r0, r4
 800946c:	d902      	bls.n	8009474 <_free_r+0x78>
 800946e:	230c      	movs	r3, #12
 8009470:	602b      	str	r3, [r5, #0]
 8009472:	e7d5      	b.n	8009420 <_free_r+0x24>
 8009474:	6821      	ldr	r1, [r4, #0]
 8009476:	1860      	adds	r0, r4, r1
 8009478:	4283      	cmp	r3, r0
 800947a:	d103      	bne.n	8009484 <_free_r+0x88>
 800947c:	6818      	ldr	r0, [r3, #0]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	1841      	adds	r1, r0, r1
 8009482:	6021      	str	r1, [r4, #0]
 8009484:	6063      	str	r3, [r4, #4]
 8009486:	6054      	str	r4, [r2, #4]
 8009488:	e7ca      	b.n	8009420 <_free_r+0x24>
 800948a:	46c0      	nop			; (mov r8, r8)
 800948c:	20000718 	.word	0x20000718

08009490 <sbrk_aligned>:
 8009490:	b570      	push	{r4, r5, r6, lr}
 8009492:	4e0f      	ldr	r6, [pc, #60]	; (80094d0 <sbrk_aligned+0x40>)
 8009494:	000d      	movs	r5, r1
 8009496:	6831      	ldr	r1, [r6, #0]
 8009498:	0004      	movs	r4, r0
 800949a:	2900      	cmp	r1, #0
 800949c:	d102      	bne.n	80094a4 <sbrk_aligned+0x14>
 800949e:	f000 fb9d 	bl	8009bdc <_sbrk_r>
 80094a2:	6030      	str	r0, [r6, #0]
 80094a4:	0029      	movs	r1, r5
 80094a6:	0020      	movs	r0, r4
 80094a8:	f000 fb98 	bl	8009bdc <_sbrk_r>
 80094ac:	1c43      	adds	r3, r0, #1
 80094ae:	d00a      	beq.n	80094c6 <sbrk_aligned+0x36>
 80094b0:	2303      	movs	r3, #3
 80094b2:	1cc5      	adds	r5, r0, #3
 80094b4:	439d      	bics	r5, r3
 80094b6:	42a8      	cmp	r0, r5
 80094b8:	d007      	beq.n	80094ca <sbrk_aligned+0x3a>
 80094ba:	1a29      	subs	r1, r5, r0
 80094bc:	0020      	movs	r0, r4
 80094be:	f000 fb8d 	bl	8009bdc <_sbrk_r>
 80094c2:	1c43      	adds	r3, r0, #1
 80094c4:	d101      	bne.n	80094ca <sbrk_aligned+0x3a>
 80094c6:	2501      	movs	r5, #1
 80094c8:	426d      	negs	r5, r5
 80094ca:	0028      	movs	r0, r5
 80094cc:	bd70      	pop	{r4, r5, r6, pc}
 80094ce:	46c0      	nop			; (mov r8, r8)
 80094d0:	2000071c 	.word	0x2000071c

080094d4 <_malloc_r>:
 80094d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094d6:	2203      	movs	r2, #3
 80094d8:	1ccb      	adds	r3, r1, #3
 80094da:	4393      	bics	r3, r2
 80094dc:	3308      	adds	r3, #8
 80094de:	0006      	movs	r6, r0
 80094e0:	001f      	movs	r7, r3
 80094e2:	2b0c      	cmp	r3, #12
 80094e4:	d232      	bcs.n	800954c <_malloc_r+0x78>
 80094e6:	270c      	movs	r7, #12
 80094e8:	42b9      	cmp	r1, r7
 80094ea:	d831      	bhi.n	8009550 <_malloc_r+0x7c>
 80094ec:	0030      	movs	r0, r6
 80094ee:	f000 fc85 	bl	8009dfc <__malloc_lock>
 80094f2:	4d32      	ldr	r5, [pc, #200]	; (80095bc <_malloc_r+0xe8>)
 80094f4:	682b      	ldr	r3, [r5, #0]
 80094f6:	001c      	movs	r4, r3
 80094f8:	2c00      	cmp	r4, #0
 80094fa:	d12e      	bne.n	800955a <_malloc_r+0x86>
 80094fc:	0039      	movs	r1, r7
 80094fe:	0030      	movs	r0, r6
 8009500:	f7ff ffc6 	bl	8009490 <sbrk_aligned>
 8009504:	0004      	movs	r4, r0
 8009506:	1c43      	adds	r3, r0, #1
 8009508:	d11e      	bne.n	8009548 <_malloc_r+0x74>
 800950a:	682c      	ldr	r4, [r5, #0]
 800950c:	0025      	movs	r5, r4
 800950e:	2d00      	cmp	r5, #0
 8009510:	d14a      	bne.n	80095a8 <_malloc_r+0xd4>
 8009512:	6823      	ldr	r3, [r4, #0]
 8009514:	0029      	movs	r1, r5
 8009516:	18e3      	adds	r3, r4, r3
 8009518:	0030      	movs	r0, r6
 800951a:	9301      	str	r3, [sp, #4]
 800951c:	f000 fb5e 	bl	8009bdc <_sbrk_r>
 8009520:	9b01      	ldr	r3, [sp, #4]
 8009522:	4283      	cmp	r3, r0
 8009524:	d143      	bne.n	80095ae <_malloc_r+0xda>
 8009526:	6823      	ldr	r3, [r4, #0]
 8009528:	3703      	adds	r7, #3
 800952a:	1aff      	subs	r7, r7, r3
 800952c:	2303      	movs	r3, #3
 800952e:	439f      	bics	r7, r3
 8009530:	3708      	adds	r7, #8
 8009532:	2f0c      	cmp	r7, #12
 8009534:	d200      	bcs.n	8009538 <_malloc_r+0x64>
 8009536:	270c      	movs	r7, #12
 8009538:	0039      	movs	r1, r7
 800953a:	0030      	movs	r0, r6
 800953c:	f7ff ffa8 	bl	8009490 <sbrk_aligned>
 8009540:	1c43      	adds	r3, r0, #1
 8009542:	d034      	beq.n	80095ae <_malloc_r+0xda>
 8009544:	6823      	ldr	r3, [r4, #0]
 8009546:	19df      	adds	r7, r3, r7
 8009548:	6027      	str	r7, [r4, #0]
 800954a:	e013      	b.n	8009574 <_malloc_r+0xa0>
 800954c:	2b00      	cmp	r3, #0
 800954e:	dacb      	bge.n	80094e8 <_malloc_r+0x14>
 8009550:	230c      	movs	r3, #12
 8009552:	2500      	movs	r5, #0
 8009554:	6033      	str	r3, [r6, #0]
 8009556:	0028      	movs	r0, r5
 8009558:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800955a:	6822      	ldr	r2, [r4, #0]
 800955c:	1bd1      	subs	r1, r2, r7
 800955e:	d420      	bmi.n	80095a2 <_malloc_r+0xce>
 8009560:	290b      	cmp	r1, #11
 8009562:	d917      	bls.n	8009594 <_malloc_r+0xc0>
 8009564:	19e2      	adds	r2, r4, r7
 8009566:	6027      	str	r7, [r4, #0]
 8009568:	42a3      	cmp	r3, r4
 800956a:	d111      	bne.n	8009590 <_malloc_r+0xbc>
 800956c:	602a      	str	r2, [r5, #0]
 800956e:	6863      	ldr	r3, [r4, #4]
 8009570:	6011      	str	r1, [r2, #0]
 8009572:	6053      	str	r3, [r2, #4]
 8009574:	0030      	movs	r0, r6
 8009576:	0025      	movs	r5, r4
 8009578:	f000 fc48 	bl	8009e0c <__malloc_unlock>
 800957c:	2207      	movs	r2, #7
 800957e:	350b      	adds	r5, #11
 8009580:	1d23      	adds	r3, r4, #4
 8009582:	4395      	bics	r5, r2
 8009584:	1aea      	subs	r2, r5, r3
 8009586:	429d      	cmp	r5, r3
 8009588:	d0e5      	beq.n	8009556 <_malloc_r+0x82>
 800958a:	1b5b      	subs	r3, r3, r5
 800958c:	50a3      	str	r3, [r4, r2]
 800958e:	e7e2      	b.n	8009556 <_malloc_r+0x82>
 8009590:	605a      	str	r2, [r3, #4]
 8009592:	e7ec      	b.n	800956e <_malloc_r+0x9a>
 8009594:	6862      	ldr	r2, [r4, #4]
 8009596:	42a3      	cmp	r3, r4
 8009598:	d101      	bne.n	800959e <_malloc_r+0xca>
 800959a:	602a      	str	r2, [r5, #0]
 800959c:	e7ea      	b.n	8009574 <_malloc_r+0xa0>
 800959e:	605a      	str	r2, [r3, #4]
 80095a0:	e7e8      	b.n	8009574 <_malloc_r+0xa0>
 80095a2:	0023      	movs	r3, r4
 80095a4:	6864      	ldr	r4, [r4, #4]
 80095a6:	e7a7      	b.n	80094f8 <_malloc_r+0x24>
 80095a8:	002c      	movs	r4, r5
 80095aa:	686d      	ldr	r5, [r5, #4]
 80095ac:	e7af      	b.n	800950e <_malloc_r+0x3a>
 80095ae:	230c      	movs	r3, #12
 80095b0:	0030      	movs	r0, r6
 80095b2:	6033      	str	r3, [r6, #0]
 80095b4:	f000 fc2a 	bl	8009e0c <__malloc_unlock>
 80095b8:	e7cd      	b.n	8009556 <_malloc_r+0x82>
 80095ba:	46c0      	nop			; (mov r8, r8)
 80095bc:	20000718 	.word	0x20000718

080095c0 <__ssputs_r>:
 80095c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095c2:	688e      	ldr	r6, [r1, #8]
 80095c4:	b085      	sub	sp, #20
 80095c6:	0007      	movs	r7, r0
 80095c8:	000c      	movs	r4, r1
 80095ca:	9203      	str	r2, [sp, #12]
 80095cc:	9301      	str	r3, [sp, #4]
 80095ce:	429e      	cmp	r6, r3
 80095d0:	d83c      	bhi.n	800964c <__ssputs_r+0x8c>
 80095d2:	2390      	movs	r3, #144	; 0x90
 80095d4:	898a      	ldrh	r2, [r1, #12]
 80095d6:	00db      	lsls	r3, r3, #3
 80095d8:	421a      	tst	r2, r3
 80095da:	d034      	beq.n	8009646 <__ssputs_r+0x86>
 80095dc:	6909      	ldr	r1, [r1, #16]
 80095de:	6823      	ldr	r3, [r4, #0]
 80095e0:	6960      	ldr	r0, [r4, #20]
 80095e2:	1a5b      	subs	r3, r3, r1
 80095e4:	9302      	str	r3, [sp, #8]
 80095e6:	2303      	movs	r3, #3
 80095e8:	4343      	muls	r3, r0
 80095ea:	0fdd      	lsrs	r5, r3, #31
 80095ec:	18ed      	adds	r5, r5, r3
 80095ee:	9b01      	ldr	r3, [sp, #4]
 80095f0:	9802      	ldr	r0, [sp, #8]
 80095f2:	3301      	adds	r3, #1
 80095f4:	181b      	adds	r3, r3, r0
 80095f6:	106d      	asrs	r5, r5, #1
 80095f8:	42ab      	cmp	r3, r5
 80095fa:	d900      	bls.n	80095fe <__ssputs_r+0x3e>
 80095fc:	001d      	movs	r5, r3
 80095fe:	0553      	lsls	r3, r2, #21
 8009600:	d532      	bpl.n	8009668 <__ssputs_r+0xa8>
 8009602:	0029      	movs	r1, r5
 8009604:	0038      	movs	r0, r7
 8009606:	f7ff ff65 	bl	80094d4 <_malloc_r>
 800960a:	1e06      	subs	r6, r0, #0
 800960c:	d109      	bne.n	8009622 <__ssputs_r+0x62>
 800960e:	230c      	movs	r3, #12
 8009610:	603b      	str	r3, [r7, #0]
 8009612:	2340      	movs	r3, #64	; 0x40
 8009614:	2001      	movs	r0, #1
 8009616:	89a2      	ldrh	r2, [r4, #12]
 8009618:	4240      	negs	r0, r0
 800961a:	4313      	orrs	r3, r2
 800961c:	81a3      	strh	r3, [r4, #12]
 800961e:	b005      	add	sp, #20
 8009620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009622:	9a02      	ldr	r2, [sp, #8]
 8009624:	6921      	ldr	r1, [r4, #16]
 8009626:	f7ff fb18 	bl	8008c5a <memcpy>
 800962a:	89a3      	ldrh	r3, [r4, #12]
 800962c:	4a14      	ldr	r2, [pc, #80]	; (8009680 <__ssputs_r+0xc0>)
 800962e:	401a      	ands	r2, r3
 8009630:	2380      	movs	r3, #128	; 0x80
 8009632:	4313      	orrs	r3, r2
 8009634:	81a3      	strh	r3, [r4, #12]
 8009636:	9b02      	ldr	r3, [sp, #8]
 8009638:	6126      	str	r6, [r4, #16]
 800963a:	18f6      	adds	r6, r6, r3
 800963c:	6026      	str	r6, [r4, #0]
 800963e:	6165      	str	r5, [r4, #20]
 8009640:	9e01      	ldr	r6, [sp, #4]
 8009642:	1aed      	subs	r5, r5, r3
 8009644:	60a5      	str	r5, [r4, #8]
 8009646:	9b01      	ldr	r3, [sp, #4]
 8009648:	429e      	cmp	r6, r3
 800964a:	d900      	bls.n	800964e <__ssputs_r+0x8e>
 800964c:	9e01      	ldr	r6, [sp, #4]
 800964e:	0032      	movs	r2, r6
 8009650:	9903      	ldr	r1, [sp, #12]
 8009652:	6820      	ldr	r0, [r4, #0]
 8009654:	f000 fbbe 	bl	8009dd4 <memmove>
 8009658:	68a3      	ldr	r3, [r4, #8]
 800965a:	2000      	movs	r0, #0
 800965c:	1b9b      	subs	r3, r3, r6
 800965e:	60a3      	str	r3, [r4, #8]
 8009660:	6823      	ldr	r3, [r4, #0]
 8009662:	199e      	adds	r6, r3, r6
 8009664:	6026      	str	r6, [r4, #0]
 8009666:	e7da      	b.n	800961e <__ssputs_r+0x5e>
 8009668:	002a      	movs	r2, r5
 800966a:	0038      	movs	r0, r7
 800966c:	f000 fbd6 	bl	8009e1c <_realloc_r>
 8009670:	1e06      	subs	r6, r0, #0
 8009672:	d1e0      	bne.n	8009636 <__ssputs_r+0x76>
 8009674:	0038      	movs	r0, r7
 8009676:	6921      	ldr	r1, [r4, #16]
 8009678:	f7ff fec0 	bl	80093fc <_free_r>
 800967c:	e7c7      	b.n	800960e <__ssputs_r+0x4e>
 800967e:	46c0      	nop			; (mov r8, r8)
 8009680:	fffffb7f 	.word	0xfffffb7f

08009684 <_svfiprintf_r>:
 8009684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009686:	b0a1      	sub	sp, #132	; 0x84
 8009688:	9003      	str	r0, [sp, #12]
 800968a:	001d      	movs	r5, r3
 800968c:	898b      	ldrh	r3, [r1, #12]
 800968e:	000f      	movs	r7, r1
 8009690:	0016      	movs	r6, r2
 8009692:	061b      	lsls	r3, r3, #24
 8009694:	d511      	bpl.n	80096ba <_svfiprintf_r+0x36>
 8009696:	690b      	ldr	r3, [r1, #16]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d10e      	bne.n	80096ba <_svfiprintf_r+0x36>
 800969c:	2140      	movs	r1, #64	; 0x40
 800969e:	f7ff ff19 	bl	80094d4 <_malloc_r>
 80096a2:	6038      	str	r0, [r7, #0]
 80096a4:	6138      	str	r0, [r7, #16]
 80096a6:	2800      	cmp	r0, #0
 80096a8:	d105      	bne.n	80096b6 <_svfiprintf_r+0x32>
 80096aa:	230c      	movs	r3, #12
 80096ac:	9a03      	ldr	r2, [sp, #12]
 80096ae:	3801      	subs	r0, #1
 80096b0:	6013      	str	r3, [r2, #0]
 80096b2:	b021      	add	sp, #132	; 0x84
 80096b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096b6:	2340      	movs	r3, #64	; 0x40
 80096b8:	617b      	str	r3, [r7, #20]
 80096ba:	2300      	movs	r3, #0
 80096bc:	ac08      	add	r4, sp, #32
 80096be:	6163      	str	r3, [r4, #20]
 80096c0:	3320      	adds	r3, #32
 80096c2:	7663      	strb	r3, [r4, #25]
 80096c4:	3310      	adds	r3, #16
 80096c6:	76a3      	strb	r3, [r4, #26]
 80096c8:	9507      	str	r5, [sp, #28]
 80096ca:	0035      	movs	r5, r6
 80096cc:	782b      	ldrb	r3, [r5, #0]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d001      	beq.n	80096d6 <_svfiprintf_r+0x52>
 80096d2:	2b25      	cmp	r3, #37	; 0x25
 80096d4:	d147      	bne.n	8009766 <_svfiprintf_r+0xe2>
 80096d6:	1bab      	subs	r3, r5, r6
 80096d8:	9305      	str	r3, [sp, #20]
 80096da:	42b5      	cmp	r5, r6
 80096dc:	d00c      	beq.n	80096f8 <_svfiprintf_r+0x74>
 80096de:	0032      	movs	r2, r6
 80096e0:	0039      	movs	r1, r7
 80096e2:	9803      	ldr	r0, [sp, #12]
 80096e4:	f7ff ff6c 	bl	80095c0 <__ssputs_r>
 80096e8:	1c43      	adds	r3, r0, #1
 80096ea:	d100      	bne.n	80096ee <_svfiprintf_r+0x6a>
 80096ec:	e0ae      	b.n	800984c <_svfiprintf_r+0x1c8>
 80096ee:	6962      	ldr	r2, [r4, #20]
 80096f0:	9b05      	ldr	r3, [sp, #20]
 80096f2:	4694      	mov	ip, r2
 80096f4:	4463      	add	r3, ip
 80096f6:	6163      	str	r3, [r4, #20]
 80096f8:	782b      	ldrb	r3, [r5, #0]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d100      	bne.n	8009700 <_svfiprintf_r+0x7c>
 80096fe:	e0a5      	b.n	800984c <_svfiprintf_r+0x1c8>
 8009700:	2201      	movs	r2, #1
 8009702:	2300      	movs	r3, #0
 8009704:	4252      	negs	r2, r2
 8009706:	6062      	str	r2, [r4, #4]
 8009708:	a904      	add	r1, sp, #16
 800970a:	3254      	adds	r2, #84	; 0x54
 800970c:	1852      	adds	r2, r2, r1
 800970e:	1c6e      	adds	r6, r5, #1
 8009710:	6023      	str	r3, [r4, #0]
 8009712:	60e3      	str	r3, [r4, #12]
 8009714:	60a3      	str	r3, [r4, #8]
 8009716:	7013      	strb	r3, [r2, #0]
 8009718:	65a3      	str	r3, [r4, #88]	; 0x58
 800971a:	2205      	movs	r2, #5
 800971c:	7831      	ldrb	r1, [r6, #0]
 800971e:	4854      	ldr	r0, [pc, #336]	; (8009870 <_svfiprintf_r+0x1ec>)
 8009720:	f7ff fa90 	bl	8008c44 <memchr>
 8009724:	1c75      	adds	r5, r6, #1
 8009726:	2800      	cmp	r0, #0
 8009728:	d11f      	bne.n	800976a <_svfiprintf_r+0xe6>
 800972a:	6822      	ldr	r2, [r4, #0]
 800972c:	06d3      	lsls	r3, r2, #27
 800972e:	d504      	bpl.n	800973a <_svfiprintf_r+0xb6>
 8009730:	2353      	movs	r3, #83	; 0x53
 8009732:	a904      	add	r1, sp, #16
 8009734:	185b      	adds	r3, r3, r1
 8009736:	2120      	movs	r1, #32
 8009738:	7019      	strb	r1, [r3, #0]
 800973a:	0713      	lsls	r3, r2, #28
 800973c:	d504      	bpl.n	8009748 <_svfiprintf_r+0xc4>
 800973e:	2353      	movs	r3, #83	; 0x53
 8009740:	a904      	add	r1, sp, #16
 8009742:	185b      	adds	r3, r3, r1
 8009744:	212b      	movs	r1, #43	; 0x2b
 8009746:	7019      	strb	r1, [r3, #0]
 8009748:	7833      	ldrb	r3, [r6, #0]
 800974a:	2b2a      	cmp	r3, #42	; 0x2a
 800974c:	d016      	beq.n	800977c <_svfiprintf_r+0xf8>
 800974e:	0035      	movs	r5, r6
 8009750:	2100      	movs	r1, #0
 8009752:	200a      	movs	r0, #10
 8009754:	68e3      	ldr	r3, [r4, #12]
 8009756:	782a      	ldrb	r2, [r5, #0]
 8009758:	1c6e      	adds	r6, r5, #1
 800975a:	3a30      	subs	r2, #48	; 0x30
 800975c:	2a09      	cmp	r2, #9
 800975e:	d94e      	bls.n	80097fe <_svfiprintf_r+0x17a>
 8009760:	2900      	cmp	r1, #0
 8009762:	d111      	bne.n	8009788 <_svfiprintf_r+0x104>
 8009764:	e017      	b.n	8009796 <_svfiprintf_r+0x112>
 8009766:	3501      	adds	r5, #1
 8009768:	e7b0      	b.n	80096cc <_svfiprintf_r+0x48>
 800976a:	4b41      	ldr	r3, [pc, #260]	; (8009870 <_svfiprintf_r+0x1ec>)
 800976c:	6822      	ldr	r2, [r4, #0]
 800976e:	1ac0      	subs	r0, r0, r3
 8009770:	2301      	movs	r3, #1
 8009772:	4083      	lsls	r3, r0
 8009774:	4313      	orrs	r3, r2
 8009776:	002e      	movs	r6, r5
 8009778:	6023      	str	r3, [r4, #0]
 800977a:	e7ce      	b.n	800971a <_svfiprintf_r+0x96>
 800977c:	9b07      	ldr	r3, [sp, #28]
 800977e:	1d19      	adds	r1, r3, #4
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	9107      	str	r1, [sp, #28]
 8009784:	2b00      	cmp	r3, #0
 8009786:	db01      	blt.n	800978c <_svfiprintf_r+0x108>
 8009788:	930b      	str	r3, [sp, #44]	; 0x2c
 800978a:	e004      	b.n	8009796 <_svfiprintf_r+0x112>
 800978c:	425b      	negs	r3, r3
 800978e:	60e3      	str	r3, [r4, #12]
 8009790:	2302      	movs	r3, #2
 8009792:	4313      	orrs	r3, r2
 8009794:	6023      	str	r3, [r4, #0]
 8009796:	782b      	ldrb	r3, [r5, #0]
 8009798:	2b2e      	cmp	r3, #46	; 0x2e
 800979a:	d10a      	bne.n	80097b2 <_svfiprintf_r+0x12e>
 800979c:	786b      	ldrb	r3, [r5, #1]
 800979e:	2b2a      	cmp	r3, #42	; 0x2a
 80097a0:	d135      	bne.n	800980e <_svfiprintf_r+0x18a>
 80097a2:	9b07      	ldr	r3, [sp, #28]
 80097a4:	3502      	adds	r5, #2
 80097a6:	1d1a      	adds	r2, r3, #4
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	9207      	str	r2, [sp, #28]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	db2b      	blt.n	8009808 <_svfiprintf_r+0x184>
 80097b0:	9309      	str	r3, [sp, #36]	; 0x24
 80097b2:	4e30      	ldr	r6, [pc, #192]	; (8009874 <_svfiprintf_r+0x1f0>)
 80097b4:	2203      	movs	r2, #3
 80097b6:	0030      	movs	r0, r6
 80097b8:	7829      	ldrb	r1, [r5, #0]
 80097ba:	f7ff fa43 	bl	8008c44 <memchr>
 80097be:	2800      	cmp	r0, #0
 80097c0:	d006      	beq.n	80097d0 <_svfiprintf_r+0x14c>
 80097c2:	2340      	movs	r3, #64	; 0x40
 80097c4:	1b80      	subs	r0, r0, r6
 80097c6:	4083      	lsls	r3, r0
 80097c8:	6822      	ldr	r2, [r4, #0]
 80097ca:	3501      	adds	r5, #1
 80097cc:	4313      	orrs	r3, r2
 80097ce:	6023      	str	r3, [r4, #0]
 80097d0:	7829      	ldrb	r1, [r5, #0]
 80097d2:	2206      	movs	r2, #6
 80097d4:	4828      	ldr	r0, [pc, #160]	; (8009878 <_svfiprintf_r+0x1f4>)
 80097d6:	1c6e      	adds	r6, r5, #1
 80097d8:	7621      	strb	r1, [r4, #24]
 80097da:	f7ff fa33 	bl	8008c44 <memchr>
 80097de:	2800      	cmp	r0, #0
 80097e0:	d03c      	beq.n	800985c <_svfiprintf_r+0x1d8>
 80097e2:	4b26      	ldr	r3, [pc, #152]	; (800987c <_svfiprintf_r+0x1f8>)
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d125      	bne.n	8009834 <_svfiprintf_r+0x1b0>
 80097e8:	2207      	movs	r2, #7
 80097ea:	9b07      	ldr	r3, [sp, #28]
 80097ec:	3307      	adds	r3, #7
 80097ee:	4393      	bics	r3, r2
 80097f0:	3308      	adds	r3, #8
 80097f2:	9307      	str	r3, [sp, #28]
 80097f4:	6963      	ldr	r3, [r4, #20]
 80097f6:	9a04      	ldr	r2, [sp, #16]
 80097f8:	189b      	adds	r3, r3, r2
 80097fa:	6163      	str	r3, [r4, #20]
 80097fc:	e765      	b.n	80096ca <_svfiprintf_r+0x46>
 80097fe:	4343      	muls	r3, r0
 8009800:	0035      	movs	r5, r6
 8009802:	2101      	movs	r1, #1
 8009804:	189b      	adds	r3, r3, r2
 8009806:	e7a6      	b.n	8009756 <_svfiprintf_r+0xd2>
 8009808:	2301      	movs	r3, #1
 800980a:	425b      	negs	r3, r3
 800980c:	e7d0      	b.n	80097b0 <_svfiprintf_r+0x12c>
 800980e:	2300      	movs	r3, #0
 8009810:	200a      	movs	r0, #10
 8009812:	001a      	movs	r2, r3
 8009814:	3501      	adds	r5, #1
 8009816:	6063      	str	r3, [r4, #4]
 8009818:	7829      	ldrb	r1, [r5, #0]
 800981a:	1c6e      	adds	r6, r5, #1
 800981c:	3930      	subs	r1, #48	; 0x30
 800981e:	2909      	cmp	r1, #9
 8009820:	d903      	bls.n	800982a <_svfiprintf_r+0x1a6>
 8009822:	2b00      	cmp	r3, #0
 8009824:	d0c5      	beq.n	80097b2 <_svfiprintf_r+0x12e>
 8009826:	9209      	str	r2, [sp, #36]	; 0x24
 8009828:	e7c3      	b.n	80097b2 <_svfiprintf_r+0x12e>
 800982a:	4342      	muls	r2, r0
 800982c:	0035      	movs	r5, r6
 800982e:	2301      	movs	r3, #1
 8009830:	1852      	adds	r2, r2, r1
 8009832:	e7f1      	b.n	8009818 <_svfiprintf_r+0x194>
 8009834:	ab07      	add	r3, sp, #28
 8009836:	9300      	str	r3, [sp, #0]
 8009838:	003a      	movs	r2, r7
 800983a:	0021      	movs	r1, r4
 800983c:	4b10      	ldr	r3, [pc, #64]	; (8009880 <_svfiprintf_r+0x1fc>)
 800983e:	9803      	ldr	r0, [sp, #12]
 8009840:	f7fd fbb2 	bl	8006fa8 <_printf_float>
 8009844:	9004      	str	r0, [sp, #16]
 8009846:	9b04      	ldr	r3, [sp, #16]
 8009848:	3301      	adds	r3, #1
 800984a:	d1d3      	bne.n	80097f4 <_svfiprintf_r+0x170>
 800984c:	89bb      	ldrh	r3, [r7, #12]
 800984e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009850:	065b      	lsls	r3, r3, #25
 8009852:	d400      	bmi.n	8009856 <_svfiprintf_r+0x1d2>
 8009854:	e72d      	b.n	80096b2 <_svfiprintf_r+0x2e>
 8009856:	2001      	movs	r0, #1
 8009858:	4240      	negs	r0, r0
 800985a:	e72a      	b.n	80096b2 <_svfiprintf_r+0x2e>
 800985c:	ab07      	add	r3, sp, #28
 800985e:	9300      	str	r3, [sp, #0]
 8009860:	003a      	movs	r2, r7
 8009862:	0021      	movs	r1, r4
 8009864:	4b06      	ldr	r3, [pc, #24]	; (8009880 <_svfiprintf_r+0x1fc>)
 8009866:	9803      	ldr	r0, [sp, #12]
 8009868:	f7fd fe50 	bl	800750c <_printf_i>
 800986c:	e7ea      	b.n	8009844 <_svfiprintf_r+0x1c0>
 800986e:	46c0      	nop			; (mov r8, r8)
 8009870:	0800a454 	.word	0x0800a454
 8009874:	0800a45a 	.word	0x0800a45a
 8009878:	0800a45e 	.word	0x0800a45e
 800987c:	08006fa9 	.word	0x08006fa9
 8009880:	080095c1 	.word	0x080095c1

08009884 <__sfputc_r>:
 8009884:	6893      	ldr	r3, [r2, #8]
 8009886:	b510      	push	{r4, lr}
 8009888:	3b01      	subs	r3, #1
 800988a:	6093      	str	r3, [r2, #8]
 800988c:	2b00      	cmp	r3, #0
 800988e:	da04      	bge.n	800989a <__sfputc_r+0x16>
 8009890:	6994      	ldr	r4, [r2, #24]
 8009892:	42a3      	cmp	r3, r4
 8009894:	db07      	blt.n	80098a6 <__sfputc_r+0x22>
 8009896:	290a      	cmp	r1, #10
 8009898:	d005      	beq.n	80098a6 <__sfputc_r+0x22>
 800989a:	6813      	ldr	r3, [r2, #0]
 800989c:	1c58      	adds	r0, r3, #1
 800989e:	6010      	str	r0, [r2, #0]
 80098a0:	7019      	strb	r1, [r3, #0]
 80098a2:	0008      	movs	r0, r1
 80098a4:	bd10      	pop	{r4, pc}
 80098a6:	f7fe f80d 	bl	80078c4 <__swbuf_r>
 80098aa:	0001      	movs	r1, r0
 80098ac:	e7f9      	b.n	80098a2 <__sfputc_r+0x1e>

080098ae <__sfputs_r>:
 80098ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098b0:	0006      	movs	r6, r0
 80098b2:	000f      	movs	r7, r1
 80098b4:	0014      	movs	r4, r2
 80098b6:	18d5      	adds	r5, r2, r3
 80098b8:	42ac      	cmp	r4, r5
 80098ba:	d101      	bne.n	80098c0 <__sfputs_r+0x12>
 80098bc:	2000      	movs	r0, #0
 80098be:	e007      	b.n	80098d0 <__sfputs_r+0x22>
 80098c0:	7821      	ldrb	r1, [r4, #0]
 80098c2:	003a      	movs	r2, r7
 80098c4:	0030      	movs	r0, r6
 80098c6:	f7ff ffdd 	bl	8009884 <__sfputc_r>
 80098ca:	3401      	adds	r4, #1
 80098cc:	1c43      	adds	r3, r0, #1
 80098ce:	d1f3      	bne.n	80098b8 <__sfputs_r+0xa>
 80098d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080098d4 <_vfiprintf_r>:
 80098d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098d6:	b0a1      	sub	sp, #132	; 0x84
 80098d8:	0006      	movs	r6, r0
 80098da:	000c      	movs	r4, r1
 80098dc:	001f      	movs	r7, r3
 80098de:	9203      	str	r2, [sp, #12]
 80098e0:	2800      	cmp	r0, #0
 80098e2:	d004      	beq.n	80098ee <_vfiprintf_r+0x1a>
 80098e4:	6983      	ldr	r3, [r0, #24]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d101      	bne.n	80098ee <_vfiprintf_r+0x1a>
 80098ea:	f7ff f88d 	bl	8008a08 <__sinit>
 80098ee:	4b8e      	ldr	r3, [pc, #568]	; (8009b28 <_vfiprintf_r+0x254>)
 80098f0:	429c      	cmp	r4, r3
 80098f2:	d11c      	bne.n	800992e <_vfiprintf_r+0x5a>
 80098f4:	6874      	ldr	r4, [r6, #4]
 80098f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098f8:	07db      	lsls	r3, r3, #31
 80098fa:	d405      	bmi.n	8009908 <_vfiprintf_r+0x34>
 80098fc:	89a3      	ldrh	r3, [r4, #12]
 80098fe:	059b      	lsls	r3, r3, #22
 8009900:	d402      	bmi.n	8009908 <_vfiprintf_r+0x34>
 8009902:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009904:	f7ff f925 	bl	8008b52 <__retarget_lock_acquire_recursive>
 8009908:	89a3      	ldrh	r3, [r4, #12]
 800990a:	071b      	lsls	r3, r3, #28
 800990c:	d502      	bpl.n	8009914 <_vfiprintf_r+0x40>
 800990e:	6923      	ldr	r3, [r4, #16]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d11d      	bne.n	8009950 <_vfiprintf_r+0x7c>
 8009914:	0021      	movs	r1, r4
 8009916:	0030      	movs	r0, r6
 8009918:	f7fe f82a 	bl	8007970 <__swsetup_r>
 800991c:	2800      	cmp	r0, #0
 800991e:	d017      	beq.n	8009950 <_vfiprintf_r+0x7c>
 8009920:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009922:	07db      	lsls	r3, r3, #31
 8009924:	d50d      	bpl.n	8009942 <_vfiprintf_r+0x6e>
 8009926:	2001      	movs	r0, #1
 8009928:	4240      	negs	r0, r0
 800992a:	b021      	add	sp, #132	; 0x84
 800992c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800992e:	4b7f      	ldr	r3, [pc, #508]	; (8009b2c <_vfiprintf_r+0x258>)
 8009930:	429c      	cmp	r4, r3
 8009932:	d101      	bne.n	8009938 <_vfiprintf_r+0x64>
 8009934:	68b4      	ldr	r4, [r6, #8]
 8009936:	e7de      	b.n	80098f6 <_vfiprintf_r+0x22>
 8009938:	4b7d      	ldr	r3, [pc, #500]	; (8009b30 <_vfiprintf_r+0x25c>)
 800993a:	429c      	cmp	r4, r3
 800993c:	d1db      	bne.n	80098f6 <_vfiprintf_r+0x22>
 800993e:	68f4      	ldr	r4, [r6, #12]
 8009940:	e7d9      	b.n	80098f6 <_vfiprintf_r+0x22>
 8009942:	89a3      	ldrh	r3, [r4, #12]
 8009944:	059b      	lsls	r3, r3, #22
 8009946:	d4ee      	bmi.n	8009926 <_vfiprintf_r+0x52>
 8009948:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800994a:	f7ff f903 	bl	8008b54 <__retarget_lock_release_recursive>
 800994e:	e7ea      	b.n	8009926 <_vfiprintf_r+0x52>
 8009950:	2300      	movs	r3, #0
 8009952:	ad08      	add	r5, sp, #32
 8009954:	616b      	str	r3, [r5, #20]
 8009956:	3320      	adds	r3, #32
 8009958:	766b      	strb	r3, [r5, #25]
 800995a:	3310      	adds	r3, #16
 800995c:	76ab      	strb	r3, [r5, #26]
 800995e:	9707      	str	r7, [sp, #28]
 8009960:	9f03      	ldr	r7, [sp, #12]
 8009962:	783b      	ldrb	r3, [r7, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d001      	beq.n	800996c <_vfiprintf_r+0x98>
 8009968:	2b25      	cmp	r3, #37	; 0x25
 800996a:	d14e      	bne.n	8009a0a <_vfiprintf_r+0x136>
 800996c:	9b03      	ldr	r3, [sp, #12]
 800996e:	1afb      	subs	r3, r7, r3
 8009970:	9305      	str	r3, [sp, #20]
 8009972:	9b03      	ldr	r3, [sp, #12]
 8009974:	429f      	cmp	r7, r3
 8009976:	d00d      	beq.n	8009994 <_vfiprintf_r+0xc0>
 8009978:	9b05      	ldr	r3, [sp, #20]
 800997a:	0021      	movs	r1, r4
 800997c:	0030      	movs	r0, r6
 800997e:	9a03      	ldr	r2, [sp, #12]
 8009980:	f7ff ff95 	bl	80098ae <__sfputs_r>
 8009984:	1c43      	adds	r3, r0, #1
 8009986:	d100      	bne.n	800998a <_vfiprintf_r+0xb6>
 8009988:	e0b5      	b.n	8009af6 <_vfiprintf_r+0x222>
 800998a:	696a      	ldr	r2, [r5, #20]
 800998c:	9b05      	ldr	r3, [sp, #20]
 800998e:	4694      	mov	ip, r2
 8009990:	4463      	add	r3, ip
 8009992:	616b      	str	r3, [r5, #20]
 8009994:	783b      	ldrb	r3, [r7, #0]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d100      	bne.n	800999c <_vfiprintf_r+0xc8>
 800999a:	e0ac      	b.n	8009af6 <_vfiprintf_r+0x222>
 800999c:	2201      	movs	r2, #1
 800999e:	1c7b      	adds	r3, r7, #1
 80099a0:	9303      	str	r3, [sp, #12]
 80099a2:	2300      	movs	r3, #0
 80099a4:	4252      	negs	r2, r2
 80099a6:	606a      	str	r2, [r5, #4]
 80099a8:	a904      	add	r1, sp, #16
 80099aa:	3254      	adds	r2, #84	; 0x54
 80099ac:	1852      	adds	r2, r2, r1
 80099ae:	602b      	str	r3, [r5, #0]
 80099b0:	60eb      	str	r3, [r5, #12]
 80099b2:	60ab      	str	r3, [r5, #8]
 80099b4:	7013      	strb	r3, [r2, #0]
 80099b6:	65ab      	str	r3, [r5, #88]	; 0x58
 80099b8:	9b03      	ldr	r3, [sp, #12]
 80099ba:	2205      	movs	r2, #5
 80099bc:	7819      	ldrb	r1, [r3, #0]
 80099be:	485d      	ldr	r0, [pc, #372]	; (8009b34 <_vfiprintf_r+0x260>)
 80099c0:	f7ff f940 	bl	8008c44 <memchr>
 80099c4:	9b03      	ldr	r3, [sp, #12]
 80099c6:	1c5f      	adds	r7, r3, #1
 80099c8:	2800      	cmp	r0, #0
 80099ca:	d120      	bne.n	8009a0e <_vfiprintf_r+0x13a>
 80099cc:	682a      	ldr	r2, [r5, #0]
 80099ce:	06d3      	lsls	r3, r2, #27
 80099d0:	d504      	bpl.n	80099dc <_vfiprintf_r+0x108>
 80099d2:	2353      	movs	r3, #83	; 0x53
 80099d4:	a904      	add	r1, sp, #16
 80099d6:	185b      	adds	r3, r3, r1
 80099d8:	2120      	movs	r1, #32
 80099da:	7019      	strb	r1, [r3, #0]
 80099dc:	0713      	lsls	r3, r2, #28
 80099de:	d504      	bpl.n	80099ea <_vfiprintf_r+0x116>
 80099e0:	2353      	movs	r3, #83	; 0x53
 80099e2:	a904      	add	r1, sp, #16
 80099e4:	185b      	adds	r3, r3, r1
 80099e6:	212b      	movs	r1, #43	; 0x2b
 80099e8:	7019      	strb	r1, [r3, #0]
 80099ea:	9b03      	ldr	r3, [sp, #12]
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	2b2a      	cmp	r3, #42	; 0x2a
 80099f0:	d016      	beq.n	8009a20 <_vfiprintf_r+0x14c>
 80099f2:	2100      	movs	r1, #0
 80099f4:	68eb      	ldr	r3, [r5, #12]
 80099f6:	9f03      	ldr	r7, [sp, #12]
 80099f8:	783a      	ldrb	r2, [r7, #0]
 80099fa:	1c78      	adds	r0, r7, #1
 80099fc:	3a30      	subs	r2, #48	; 0x30
 80099fe:	4684      	mov	ip, r0
 8009a00:	2a09      	cmp	r2, #9
 8009a02:	d94f      	bls.n	8009aa4 <_vfiprintf_r+0x1d0>
 8009a04:	2900      	cmp	r1, #0
 8009a06:	d111      	bne.n	8009a2c <_vfiprintf_r+0x158>
 8009a08:	e017      	b.n	8009a3a <_vfiprintf_r+0x166>
 8009a0a:	3701      	adds	r7, #1
 8009a0c:	e7a9      	b.n	8009962 <_vfiprintf_r+0x8e>
 8009a0e:	4b49      	ldr	r3, [pc, #292]	; (8009b34 <_vfiprintf_r+0x260>)
 8009a10:	682a      	ldr	r2, [r5, #0]
 8009a12:	1ac0      	subs	r0, r0, r3
 8009a14:	2301      	movs	r3, #1
 8009a16:	4083      	lsls	r3, r0
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	602b      	str	r3, [r5, #0]
 8009a1c:	9703      	str	r7, [sp, #12]
 8009a1e:	e7cb      	b.n	80099b8 <_vfiprintf_r+0xe4>
 8009a20:	9b07      	ldr	r3, [sp, #28]
 8009a22:	1d19      	adds	r1, r3, #4
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	9107      	str	r1, [sp, #28]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	db01      	blt.n	8009a30 <_vfiprintf_r+0x15c>
 8009a2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a2e:	e004      	b.n	8009a3a <_vfiprintf_r+0x166>
 8009a30:	425b      	negs	r3, r3
 8009a32:	60eb      	str	r3, [r5, #12]
 8009a34:	2302      	movs	r3, #2
 8009a36:	4313      	orrs	r3, r2
 8009a38:	602b      	str	r3, [r5, #0]
 8009a3a:	783b      	ldrb	r3, [r7, #0]
 8009a3c:	2b2e      	cmp	r3, #46	; 0x2e
 8009a3e:	d10a      	bne.n	8009a56 <_vfiprintf_r+0x182>
 8009a40:	787b      	ldrb	r3, [r7, #1]
 8009a42:	2b2a      	cmp	r3, #42	; 0x2a
 8009a44:	d137      	bne.n	8009ab6 <_vfiprintf_r+0x1e2>
 8009a46:	9b07      	ldr	r3, [sp, #28]
 8009a48:	3702      	adds	r7, #2
 8009a4a:	1d1a      	adds	r2, r3, #4
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	9207      	str	r2, [sp, #28]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	db2d      	blt.n	8009ab0 <_vfiprintf_r+0x1dc>
 8009a54:	9309      	str	r3, [sp, #36]	; 0x24
 8009a56:	2203      	movs	r2, #3
 8009a58:	7839      	ldrb	r1, [r7, #0]
 8009a5a:	4837      	ldr	r0, [pc, #220]	; (8009b38 <_vfiprintf_r+0x264>)
 8009a5c:	f7ff f8f2 	bl	8008c44 <memchr>
 8009a60:	2800      	cmp	r0, #0
 8009a62:	d007      	beq.n	8009a74 <_vfiprintf_r+0x1a0>
 8009a64:	4b34      	ldr	r3, [pc, #208]	; (8009b38 <_vfiprintf_r+0x264>)
 8009a66:	682a      	ldr	r2, [r5, #0]
 8009a68:	1ac0      	subs	r0, r0, r3
 8009a6a:	2340      	movs	r3, #64	; 0x40
 8009a6c:	4083      	lsls	r3, r0
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	3701      	adds	r7, #1
 8009a72:	602b      	str	r3, [r5, #0]
 8009a74:	7839      	ldrb	r1, [r7, #0]
 8009a76:	1c7b      	adds	r3, r7, #1
 8009a78:	2206      	movs	r2, #6
 8009a7a:	4830      	ldr	r0, [pc, #192]	; (8009b3c <_vfiprintf_r+0x268>)
 8009a7c:	9303      	str	r3, [sp, #12]
 8009a7e:	7629      	strb	r1, [r5, #24]
 8009a80:	f7ff f8e0 	bl	8008c44 <memchr>
 8009a84:	2800      	cmp	r0, #0
 8009a86:	d045      	beq.n	8009b14 <_vfiprintf_r+0x240>
 8009a88:	4b2d      	ldr	r3, [pc, #180]	; (8009b40 <_vfiprintf_r+0x26c>)
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d127      	bne.n	8009ade <_vfiprintf_r+0x20a>
 8009a8e:	2207      	movs	r2, #7
 8009a90:	9b07      	ldr	r3, [sp, #28]
 8009a92:	3307      	adds	r3, #7
 8009a94:	4393      	bics	r3, r2
 8009a96:	3308      	adds	r3, #8
 8009a98:	9307      	str	r3, [sp, #28]
 8009a9a:	696b      	ldr	r3, [r5, #20]
 8009a9c:	9a04      	ldr	r2, [sp, #16]
 8009a9e:	189b      	adds	r3, r3, r2
 8009aa0:	616b      	str	r3, [r5, #20]
 8009aa2:	e75d      	b.n	8009960 <_vfiprintf_r+0x8c>
 8009aa4:	210a      	movs	r1, #10
 8009aa6:	434b      	muls	r3, r1
 8009aa8:	4667      	mov	r7, ip
 8009aaa:	189b      	adds	r3, r3, r2
 8009aac:	3909      	subs	r1, #9
 8009aae:	e7a3      	b.n	80099f8 <_vfiprintf_r+0x124>
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	425b      	negs	r3, r3
 8009ab4:	e7ce      	b.n	8009a54 <_vfiprintf_r+0x180>
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	001a      	movs	r2, r3
 8009aba:	3701      	adds	r7, #1
 8009abc:	606b      	str	r3, [r5, #4]
 8009abe:	7839      	ldrb	r1, [r7, #0]
 8009ac0:	1c78      	adds	r0, r7, #1
 8009ac2:	3930      	subs	r1, #48	; 0x30
 8009ac4:	4684      	mov	ip, r0
 8009ac6:	2909      	cmp	r1, #9
 8009ac8:	d903      	bls.n	8009ad2 <_vfiprintf_r+0x1fe>
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d0c3      	beq.n	8009a56 <_vfiprintf_r+0x182>
 8009ace:	9209      	str	r2, [sp, #36]	; 0x24
 8009ad0:	e7c1      	b.n	8009a56 <_vfiprintf_r+0x182>
 8009ad2:	230a      	movs	r3, #10
 8009ad4:	435a      	muls	r2, r3
 8009ad6:	4667      	mov	r7, ip
 8009ad8:	1852      	adds	r2, r2, r1
 8009ada:	3b09      	subs	r3, #9
 8009adc:	e7ef      	b.n	8009abe <_vfiprintf_r+0x1ea>
 8009ade:	ab07      	add	r3, sp, #28
 8009ae0:	9300      	str	r3, [sp, #0]
 8009ae2:	0022      	movs	r2, r4
 8009ae4:	0029      	movs	r1, r5
 8009ae6:	0030      	movs	r0, r6
 8009ae8:	4b16      	ldr	r3, [pc, #88]	; (8009b44 <_vfiprintf_r+0x270>)
 8009aea:	f7fd fa5d 	bl	8006fa8 <_printf_float>
 8009aee:	9004      	str	r0, [sp, #16]
 8009af0:	9b04      	ldr	r3, [sp, #16]
 8009af2:	3301      	adds	r3, #1
 8009af4:	d1d1      	bne.n	8009a9a <_vfiprintf_r+0x1c6>
 8009af6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009af8:	07db      	lsls	r3, r3, #31
 8009afa:	d405      	bmi.n	8009b08 <_vfiprintf_r+0x234>
 8009afc:	89a3      	ldrh	r3, [r4, #12]
 8009afe:	059b      	lsls	r3, r3, #22
 8009b00:	d402      	bmi.n	8009b08 <_vfiprintf_r+0x234>
 8009b02:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b04:	f7ff f826 	bl	8008b54 <__retarget_lock_release_recursive>
 8009b08:	89a3      	ldrh	r3, [r4, #12]
 8009b0a:	065b      	lsls	r3, r3, #25
 8009b0c:	d500      	bpl.n	8009b10 <_vfiprintf_r+0x23c>
 8009b0e:	e70a      	b.n	8009926 <_vfiprintf_r+0x52>
 8009b10:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009b12:	e70a      	b.n	800992a <_vfiprintf_r+0x56>
 8009b14:	ab07      	add	r3, sp, #28
 8009b16:	9300      	str	r3, [sp, #0]
 8009b18:	0022      	movs	r2, r4
 8009b1a:	0029      	movs	r1, r5
 8009b1c:	0030      	movs	r0, r6
 8009b1e:	4b09      	ldr	r3, [pc, #36]	; (8009b44 <_vfiprintf_r+0x270>)
 8009b20:	f7fd fcf4 	bl	800750c <_printf_i>
 8009b24:	e7e3      	b.n	8009aee <_vfiprintf_r+0x21a>
 8009b26:	46c0      	nop			; (mov r8, r8)
 8009b28:	0800a2b8 	.word	0x0800a2b8
 8009b2c:	0800a2d8 	.word	0x0800a2d8
 8009b30:	0800a298 	.word	0x0800a298
 8009b34:	0800a454 	.word	0x0800a454
 8009b38:	0800a45a 	.word	0x0800a45a
 8009b3c:	0800a45e 	.word	0x0800a45e
 8009b40:	08006fa9 	.word	0x08006fa9
 8009b44:	080098af 	.word	0x080098af

08009b48 <_putc_r>:
 8009b48:	b570      	push	{r4, r5, r6, lr}
 8009b4a:	0006      	movs	r6, r0
 8009b4c:	000d      	movs	r5, r1
 8009b4e:	0014      	movs	r4, r2
 8009b50:	2800      	cmp	r0, #0
 8009b52:	d004      	beq.n	8009b5e <_putc_r+0x16>
 8009b54:	6983      	ldr	r3, [r0, #24]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d101      	bne.n	8009b5e <_putc_r+0x16>
 8009b5a:	f7fe ff55 	bl	8008a08 <__sinit>
 8009b5e:	4b1c      	ldr	r3, [pc, #112]	; (8009bd0 <_putc_r+0x88>)
 8009b60:	429c      	cmp	r4, r3
 8009b62:	d124      	bne.n	8009bae <_putc_r+0x66>
 8009b64:	6874      	ldr	r4, [r6, #4]
 8009b66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b68:	07db      	lsls	r3, r3, #31
 8009b6a:	d405      	bmi.n	8009b78 <_putc_r+0x30>
 8009b6c:	89a3      	ldrh	r3, [r4, #12]
 8009b6e:	059b      	lsls	r3, r3, #22
 8009b70:	d402      	bmi.n	8009b78 <_putc_r+0x30>
 8009b72:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b74:	f7fe ffed 	bl	8008b52 <__retarget_lock_acquire_recursive>
 8009b78:	68a3      	ldr	r3, [r4, #8]
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	60a3      	str	r3, [r4, #8]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	da05      	bge.n	8009b8e <_putc_r+0x46>
 8009b82:	69a2      	ldr	r2, [r4, #24]
 8009b84:	4293      	cmp	r3, r2
 8009b86:	db1c      	blt.n	8009bc2 <_putc_r+0x7a>
 8009b88:	b2eb      	uxtb	r3, r5
 8009b8a:	2b0a      	cmp	r3, #10
 8009b8c:	d019      	beq.n	8009bc2 <_putc_r+0x7a>
 8009b8e:	6823      	ldr	r3, [r4, #0]
 8009b90:	1c5a      	adds	r2, r3, #1
 8009b92:	6022      	str	r2, [r4, #0]
 8009b94:	701d      	strb	r5, [r3, #0]
 8009b96:	b2ed      	uxtb	r5, r5
 8009b98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b9a:	07db      	lsls	r3, r3, #31
 8009b9c:	d405      	bmi.n	8009baa <_putc_r+0x62>
 8009b9e:	89a3      	ldrh	r3, [r4, #12]
 8009ba0:	059b      	lsls	r3, r3, #22
 8009ba2:	d402      	bmi.n	8009baa <_putc_r+0x62>
 8009ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ba6:	f7fe ffd5 	bl	8008b54 <__retarget_lock_release_recursive>
 8009baa:	0028      	movs	r0, r5
 8009bac:	bd70      	pop	{r4, r5, r6, pc}
 8009bae:	4b09      	ldr	r3, [pc, #36]	; (8009bd4 <_putc_r+0x8c>)
 8009bb0:	429c      	cmp	r4, r3
 8009bb2:	d101      	bne.n	8009bb8 <_putc_r+0x70>
 8009bb4:	68b4      	ldr	r4, [r6, #8]
 8009bb6:	e7d6      	b.n	8009b66 <_putc_r+0x1e>
 8009bb8:	4b07      	ldr	r3, [pc, #28]	; (8009bd8 <_putc_r+0x90>)
 8009bba:	429c      	cmp	r4, r3
 8009bbc:	d1d3      	bne.n	8009b66 <_putc_r+0x1e>
 8009bbe:	68f4      	ldr	r4, [r6, #12]
 8009bc0:	e7d1      	b.n	8009b66 <_putc_r+0x1e>
 8009bc2:	0029      	movs	r1, r5
 8009bc4:	0022      	movs	r2, r4
 8009bc6:	0030      	movs	r0, r6
 8009bc8:	f7fd fe7c 	bl	80078c4 <__swbuf_r>
 8009bcc:	0005      	movs	r5, r0
 8009bce:	e7e3      	b.n	8009b98 <_putc_r+0x50>
 8009bd0:	0800a2b8 	.word	0x0800a2b8
 8009bd4:	0800a2d8 	.word	0x0800a2d8
 8009bd8:	0800a298 	.word	0x0800a298

08009bdc <_sbrk_r>:
 8009bdc:	2300      	movs	r3, #0
 8009bde:	b570      	push	{r4, r5, r6, lr}
 8009be0:	4d06      	ldr	r5, [pc, #24]	; (8009bfc <_sbrk_r+0x20>)
 8009be2:	0004      	movs	r4, r0
 8009be4:	0008      	movs	r0, r1
 8009be6:	602b      	str	r3, [r5, #0]
 8009be8:	f7f9 fce8 	bl	80035bc <_sbrk>
 8009bec:	1c43      	adds	r3, r0, #1
 8009bee:	d103      	bne.n	8009bf8 <_sbrk_r+0x1c>
 8009bf0:	682b      	ldr	r3, [r5, #0]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d000      	beq.n	8009bf8 <_sbrk_r+0x1c>
 8009bf6:	6023      	str	r3, [r4, #0]
 8009bf8:	bd70      	pop	{r4, r5, r6, pc}
 8009bfa:	46c0      	nop			; (mov r8, r8)
 8009bfc:	20000720 	.word	0x20000720

08009c00 <__sread>:
 8009c00:	b570      	push	{r4, r5, r6, lr}
 8009c02:	000c      	movs	r4, r1
 8009c04:	250e      	movs	r5, #14
 8009c06:	5f49      	ldrsh	r1, [r1, r5]
 8009c08:	f000 f938 	bl	8009e7c <_read_r>
 8009c0c:	2800      	cmp	r0, #0
 8009c0e:	db03      	blt.n	8009c18 <__sread+0x18>
 8009c10:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009c12:	181b      	adds	r3, r3, r0
 8009c14:	6563      	str	r3, [r4, #84]	; 0x54
 8009c16:	bd70      	pop	{r4, r5, r6, pc}
 8009c18:	89a3      	ldrh	r3, [r4, #12]
 8009c1a:	4a02      	ldr	r2, [pc, #8]	; (8009c24 <__sread+0x24>)
 8009c1c:	4013      	ands	r3, r2
 8009c1e:	81a3      	strh	r3, [r4, #12]
 8009c20:	e7f9      	b.n	8009c16 <__sread+0x16>
 8009c22:	46c0      	nop			; (mov r8, r8)
 8009c24:	ffffefff 	.word	0xffffefff

08009c28 <__swrite>:
 8009c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c2a:	001f      	movs	r7, r3
 8009c2c:	898b      	ldrh	r3, [r1, #12]
 8009c2e:	0005      	movs	r5, r0
 8009c30:	000c      	movs	r4, r1
 8009c32:	0016      	movs	r6, r2
 8009c34:	05db      	lsls	r3, r3, #23
 8009c36:	d505      	bpl.n	8009c44 <__swrite+0x1c>
 8009c38:	230e      	movs	r3, #14
 8009c3a:	5ec9      	ldrsh	r1, [r1, r3]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	2302      	movs	r3, #2
 8009c40:	f000 f8a2 	bl	8009d88 <_lseek_r>
 8009c44:	89a3      	ldrh	r3, [r4, #12]
 8009c46:	4a05      	ldr	r2, [pc, #20]	; (8009c5c <__swrite+0x34>)
 8009c48:	0028      	movs	r0, r5
 8009c4a:	4013      	ands	r3, r2
 8009c4c:	81a3      	strh	r3, [r4, #12]
 8009c4e:	0032      	movs	r2, r6
 8009c50:	230e      	movs	r3, #14
 8009c52:	5ee1      	ldrsh	r1, [r4, r3]
 8009c54:	003b      	movs	r3, r7
 8009c56:	f000 f81f 	bl	8009c98 <_write_r>
 8009c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c5c:	ffffefff 	.word	0xffffefff

08009c60 <__sseek>:
 8009c60:	b570      	push	{r4, r5, r6, lr}
 8009c62:	000c      	movs	r4, r1
 8009c64:	250e      	movs	r5, #14
 8009c66:	5f49      	ldrsh	r1, [r1, r5]
 8009c68:	f000 f88e 	bl	8009d88 <_lseek_r>
 8009c6c:	89a3      	ldrh	r3, [r4, #12]
 8009c6e:	1c42      	adds	r2, r0, #1
 8009c70:	d103      	bne.n	8009c7a <__sseek+0x1a>
 8009c72:	4a05      	ldr	r2, [pc, #20]	; (8009c88 <__sseek+0x28>)
 8009c74:	4013      	ands	r3, r2
 8009c76:	81a3      	strh	r3, [r4, #12]
 8009c78:	bd70      	pop	{r4, r5, r6, pc}
 8009c7a:	2280      	movs	r2, #128	; 0x80
 8009c7c:	0152      	lsls	r2, r2, #5
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	81a3      	strh	r3, [r4, #12]
 8009c82:	6560      	str	r0, [r4, #84]	; 0x54
 8009c84:	e7f8      	b.n	8009c78 <__sseek+0x18>
 8009c86:	46c0      	nop			; (mov r8, r8)
 8009c88:	ffffefff 	.word	0xffffefff

08009c8c <__sclose>:
 8009c8c:	b510      	push	{r4, lr}
 8009c8e:	230e      	movs	r3, #14
 8009c90:	5ec9      	ldrsh	r1, [r1, r3]
 8009c92:	f000 f833 	bl	8009cfc <_close_r>
 8009c96:	bd10      	pop	{r4, pc}

08009c98 <_write_r>:
 8009c98:	b570      	push	{r4, r5, r6, lr}
 8009c9a:	0004      	movs	r4, r0
 8009c9c:	0008      	movs	r0, r1
 8009c9e:	0011      	movs	r1, r2
 8009ca0:	001a      	movs	r2, r3
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	4d05      	ldr	r5, [pc, #20]	; (8009cbc <_write_r+0x24>)
 8009ca6:	602b      	str	r3, [r5, #0]
 8009ca8:	f7f9 fc46 	bl	8003538 <_write>
 8009cac:	1c43      	adds	r3, r0, #1
 8009cae:	d103      	bne.n	8009cb8 <_write_r+0x20>
 8009cb0:	682b      	ldr	r3, [r5, #0]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d000      	beq.n	8009cb8 <_write_r+0x20>
 8009cb6:	6023      	str	r3, [r4, #0]
 8009cb8:	bd70      	pop	{r4, r5, r6, pc}
 8009cba:	46c0      	nop			; (mov r8, r8)
 8009cbc:	20000720 	.word	0x20000720

08009cc0 <__assert_func>:
 8009cc0:	b530      	push	{r4, r5, lr}
 8009cc2:	0014      	movs	r4, r2
 8009cc4:	001a      	movs	r2, r3
 8009cc6:	4b09      	ldr	r3, [pc, #36]	; (8009cec <__assert_func+0x2c>)
 8009cc8:	0005      	movs	r5, r0
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	b085      	sub	sp, #20
 8009cce:	68d8      	ldr	r0, [r3, #12]
 8009cd0:	4b07      	ldr	r3, [pc, #28]	; (8009cf0 <__assert_func+0x30>)
 8009cd2:	2c00      	cmp	r4, #0
 8009cd4:	d101      	bne.n	8009cda <__assert_func+0x1a>
 8009cd6:	4b07      	ldr	r3, [pc, #28]	; (8009cf4 <__assert_func+0x34>)
 8009cd8:	001c      	movs	r4, r3
 8009cda:	9301      	str	r3, [sp, #4]
 8009cdc:	9100      	str	r1, [sp, #0]
 8009cde:	002b      	movs	r3, r5
 8009ce0:	4905      	ldr	r1, [pc, #20]	; (8009cf8 <__assert_func+0x38>)
 8009ce2:	9402      	str	r4, [sp, #8]
 8009ce4:	f000 f81c 	bl	8009d20 <fiprintf>
 8009ce8:	f000 f8e9 	bl	8009ebe <abort>
 8009cec:	2000002c 	.word	0x2000002c
 8009cf0:	0800a465 	.word	0x0800a465
 8009cf4:	0800a4a0 	.word	0x0800a4a0
 8009cf8:	0800a472 	.word	0x0800a472

08009cfc <_close_r>:
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	b570      	push	{r4, r5, r6, lr}
 8009d00:	4d06      	ldr	r5, [pc, #24]	; (8009d1c <_close_r+0x20>)
 8009d02:	0004      	movs	r4, r0
 8009d04:	0008      	movs	r0, r1
 8009d06:	602b      	str	r3, [r5, #0]
 8009d08:	f7f9 fc2c 	bl	8003564 <_close>
 8009d0c:	1c43      	adds	r3, r0, #1
 8009d0e:	d103      	bne.n	8009d18 <_close_r+0x1c>
 8009d10:	682b      	ldr	r3, [r5, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d000      	beq.n	8009d18 <_close_r+0x1c>
 8009d16:	6023      	str	r3, [r4, #0]
 8009d18:	bd70      	pop	{r4, r5, r6, pc}
 8009d1a:	46c0      	nop			; (mov r8, r8)
 8009d1c:	20000720 	.word	0x20000720

08009d20 <fiprintf>:
 8009d20:	b40e      	push	{r1, r2, r3}
 8009d22:	b503      	push	{r0, r1, lr}
 8009d24:	0001      	movs	r1, r0
 8009d26:	ab03      	add	r3, sp, #12
 8009d28:	4804      	ldr	r0, [pc, #16]	; (8009d3c <fiprintf+0x1c>)
 8009d2a:	cb04      	ldmia	r3!, {r2}
 8009d2c:	6800      	ldr	r0, [r0, #0]
 8009d2e:	9301      	str	r3, [sp, #4]
 8009d30:	f7ff fdd0 	bl	80098d4 <_vfiprintf_r>
 8009d34:	b002      	add	sp, #8
 8009d36:	bc08      	pop	{r3}
 8009d38:	b003      	add	sp, #12
 8009d3a:	4718      	bx	r3
 8009d3c:	2000002c 	.word	0x2000002c

08009d40 <_fstat_r>:
 8009d40:	2300      	movs	r3, #0
 8009d42:	b570      	push	{r4, r5, r6, lr}
 8009d44:	4d06      	ldr	r5, [pc, #24]	; (8009d60 <_fstat_r+0x20>)
 8009d46:	0004      	movs	r4, r0
 8009d48:	0008      	movs	r0, r1
 8009d4a:	0011      	movs	r1, r2
 8009d4c:	602b      	str	r3, [r5, #0]
 8009d4e:	f7f9 fc13 	bl	8003578 <_fstat>
 8009d52:	1c43      	adds	r3, r0, #1
 8009d54:	d103      	bne.n	8009d5e <_fstat_r+0x1e>
 8009d56:	682b      	ldr	r3, [r5, #0]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d000      	beq.n	8009d5e <_fstat_r+0x1e>
 8009d5c:	6023      	str	r3, [r4, #0]
 8009d5e:	bd70      	pop	{r4, r5, r6, pc}
 8009d60:	20000720 	.word	0x20000720

08009d64 <_isatty_r>:
 8009d64:	2300      	movs	r3, #0
 8009d66:	b570      	push	{r4, r5, r6, lr}
 8009d68:	4d06      	ldr	r5, [pc, #24]	; (8009d84 <_isatty_r+0x20>)
 8009d6a:	0004      	movs	r4, r0
 8009d6c:	0008      	movs	r0, r1
 8009d6e:	602b      	str	r3, [r5, #0]
 8009d70:	f7f9 fc10 	bl	8003594 <_isatty>
 8009d74:	1c43      	adds	r3, r0, #1
 8009d76:	d103      	bne.n	8009d80 <_isatty_r+0x1c>
 8009d78:	682b      	ldr	r3, [r5, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d000      	beq.n	8009d80 <_isatty_r+0x1c>
 8009d7e:	6023      	str	r3, [r4, #0]
 8009d80:	bd70      	pop	{r4, r5, r6, pc}
 8009d82:	46c0      	nop			; (mov r8, r8)
 8009d84:	20000720 	.word	0x20000720

08009d88 <_lseek_r>:
 8009d88:	b570      	push	{r4, r5, r6, lr}
 8009d8a:	0004      	movs	r4, r0
 8009d8c:	0008      	movs	r0, r1
 8009d8e:	0011      	movs	r1, r2
 8009d90:	001a      	movs	r2, r3
 8009d92:	2300      	movs	r3, #0
 8009d94:	4d05      	ldr	r5, [pc, #20]	; (8009dac <_lseek_r+0x24>)
 8009d96:	602b      	str	r3, [r5, #0]
 8009d98:	f7f9 fc05 	bl	80035a6 <_lseek>
 8009d9c:	1c43      	adds	r3, r0, #1
 8009d9e:	d103      	bne.n	8009da8 <_lseek_r+0x20>
 8009da0:	682b      	ldr	r3, [r5, #0]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d000      	beq.n	8009da8 <_lseek_r+0x20>
 8009da6:	6023      	str	r3, [r4, #0]
 8009da8:	bd70      	pop	{r4, r5, r6, pc}
 8009daa:	46c0      	nop			; (mov r8, r8)
 8009dac:	20000720 	.word	0x20000720

08009db0 <__ascii_mbtowc>:
 8009db0:	b082      	sub	sp, #8
 8009db2:	2900      	cmp	r1, #0
 8009db4:	d100      	bne.n	8009db8 <__ascii_mbtowc+0x8>
 8009db6:	a901      	add	r1, sp, #4
 8009db8:	1e10      	subs	r0, r2, #0
 8009dba:	d006      	beq.n	8009dca <__ascii_mbtowc+0x1a>
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d006      	beq.n	8009dce <__ascii_mbtowc+0x1e>
 8009dc0:	7813      	ldrb	r3, [r2, #0]
 8009dc2:	600b      	str	r3, [r1, #0]
 8009dc4:	7810      	ldrb	r0, [r2, #0]
 8009dc6:	1e43      	subs	r3, r0, #1
 8009dc8:	4198      	sbcs	r0, r3
 8009dca:	b002      	add	sp, #8
 8009dcc:	4770      	bx	lr
 8009dce:	2002      	movs	r0, #2
 8009dd0:	4240      	negs	r0, r0
 8009dd2:	e7fa      	b.n	8009dca <__ascii_mbtowc+0x1a>

08009dd4 <memmove>:
 8009dd4:	b510      	push	{r4, lr}
 8009dd6:	4288      	cmp	r0, r1
 8009dd8:	d902      	bls.n	8009de0 <memmove+0xc>
 8009dda:	188b      	adds	r3, r1, r2
 8009ddc:	4298      	cmp	r0, r3
 8009dde:	d303      	bcc.n	8009de8 <memmove+0x14>
 8009de0:	2300      	movs	r3, #0
 8009de2:	e007      	b.n	8009df4 <memmove+0x20>
 8009de4:	5c8b      	ldrb	r3, [r1, r2]
 8009de6:	5483      	strb	r3, [r0, r2]
 8009de8:	3a01      	subs	r2, #1
 8009dea:	d2fb      	bcs.n	8009de4 <memmove+0x10>
 8009dec:	bd10      	pop	{r4, pc}
 8009dee:	5ccc      	ldrb	r4, [r1, r3]
 8009df0:	54c4      	strb	r4, [r0, r3]
 8009df2:	3301      	adds	r3, #1
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d1fa      	bne.n	8009dee <memmove+0x1a>
 8009df8:	e7f8      	b.n	8009dec <memmove+0x18>
	...

08009dfc <__malloc_lock>:
 8009dfc:	b510      	push	{r4, lr}
 8009dfe:	4802      	ldr	r0, [pc, #8]	; (8009e08 <__malloc_lock+0xc>)
 8009e00:	f7fe fea7 	bl	8008b52 <__retarget_lock_acquire_recursive>
 8009e04:	bd10      	pop	{r4, pc}
 8009e06:	46c0      	nop			; (mov r8, r8)
 8009e08:	20000714 	.word	0x20000714

08009e0c <__malloc_unlock>:
 8009e0c:	b510      	push	{r4, lr}
 8009e0e:	4802      	ldr	r0, [pc, #8]	; (8009e18 <__malloc_unlock+0xc>)
 8009e10:	f7fe fea0 	bl	8008b54 <__retarget_lock_release_recursive>
 8009e14:	bd10      	pop	{r4, pc}
 8009e16:	46c0      	nop			; (mov r8, r8)
 8009e18:	20000714 	.word	0x20000714

08009e1c <_realloc_r>:
 8009e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e1e:	0007      	movs	r7, r0
 8009e20:	000e      	movs	r6, r1
 8009e22:	0014      	movs	r4, r2
 8009e24:	2900      	cmp	r1, #0
 8009e26:	d105      	bne.n	8009e34 <_realloc_r+0x18>
 8009e28:	0011      	movs	r1, r2
 8009e2a:	f7ff fb53 	bl	80094d4 <_malloc_r>
 8009e2e:	0005      	movs	r5, r0
 8009e30:	0028      	movs	r0, r5
 8009e32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009e34:	2a00      	cmp	r2, #0
 8009e36:	d103      	bne.n	8009e40 <_realloc_r+0x24>
 8009e38:	f7ff fae0 	bl	80093fc <_free_r>
 8009e3c:	0025      	movs	r5, r4
 8009e3e:	e7f7      	b.n	8009e30 <_realloc_r+0x14>
 8009e40:	f000 f844 	bl	8009ecc <_malloc_usable_size_r>
 8009e44:	9001      	str	r0, [sp, #4]
 8009e46:	4284      	cmp	r4, r0
 8009e48:	d803      	bhi.n	8009e52 <_realloc_r+0x36>
 8009e4a:	0035      	movs	r5, r6
 8009e4c:	0843      	lsrs	r3, r0, #1
 8009e4e:	42a3      	cmp	r3, r4
 8009e50:	d3ee      	bcc.n	8009e30 <_realloc_r+0x14>
 8009e52:	0021      	movs	r1, r4
 8009e54:	0038      	movs	r0, r7
 8009e56:	f7ff fb3d 	bl	80094d4 <_malloc_r>
 8009e5a:	1e05      	subs	r5, r0, #0
 8009e5c:	d0e8      	beq.n	8009e30 <_realloc_r+0x14>
 8009e5e:	9b01      	ldr	r3, [sp, #4]
 8009e60:	0022      	movs	r2, r4
 8009e62:	429c      	cmp	r4, r3
 8009e64:	d900      	bls.n	8009e68 <_realloc_r+0x4c>
 8009e66:	001a      	movs	r2, r3
 8009e68:	0031      	movs	r1, r6
 8009e6a:	0028      	movs	r0, r5
 8009e6c:	f7fe fef5 	bl	8008c5a <memcpy>
 8009e70:	0031      	movs	r1, r6
 8009e72:	0038      	movs	r0, r7
 8009e74:	f7ff fac2 	bl	80093fc <_free_r>
 8009e78:	e7da      	b.n	8009e30 <_realloc_r+0x14>
	...

08009e7c <_read_r>:
 8009e7c:	b570      	push	{r4, r5, r6, lr}
 8009e7e:	0004      	movs	r4, r0
 8009e80:	0008      	movs	r0, r1
 8009e82:	0011      	movs	r1, r2
 8009e84:	001a      	movs	r2, r3
 8009e86:	2300      	movs	r3, #0
 8009e88:	4d05      	ldr	r5, [pc, #20]	; (8009ea0 <_read_r+0x24>)
 8009e8a:	602b      	str	r3, [r5, #0]
 8009e8c:	f7f9 fb37 	bl	80034fe <_read>
 8009e90:	1c43      	adds	r3, r0, #1
 8009e92:	d103      	bne.n	8009e9c <_read_r+0x20>
 8009e94:	682b      	ldr	r3, [r5, #0]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d000      	beq.n	8009e9c <_read_r+0x20>
 8009e9a:	6023      	str	r3, [r4, #0]
 8009e9c:	bd70      	pop	{r4, r5, r6, pc}
 8009e9e:	46c0      	nop			; (mov r8, r8)
 8009ea0:	20000720 	.word	0x20000720

08009ea4 <__ascii_wctomb>:
 8009ea4:	0003      	movs	r3, r0
 8009ea6:	1e08      	subs	r0, r1, #0
 8009ea8:	d005      	beq.n	8009eb6 <__ascii_wctomb+0x12>
 8009eaa:	2aff      	cmp	r2, #255	; 0xff
 8009eac:	d904      	bls.n	8009eb8 <__ascii_wctomb+0x14>
 8009eae:	228a      	movs	r2, #138	; 0x8a
 8009eb0:	2001      	movs	r0, #1
 8009eb2:	601a      	str	r2, [r3, #0]
 8009eb4:	4240      	negs	r0, r0
 8009eb6:	4770      	bx	lr
 8009eb8:	2001      	movs	r0, #1
 8009eba:	700a      	strb	r2, [r1, #0]
 8009ebc:	e7fb      	b.n	8009eb6 <__ascii_wctomb+0x12>

08009ebe <abort>:
 8009ebe:	2006      	movs	r0, #6
 8009ec0:	b510      	push	{r4, lr}
 8009ec2:	f000 f835 	bl	8009f30 <raise>
 8009ec6:	2001      	movs	r0, #1
 8009ec8:	f7f9 fb0d 	bl	80034e6 <_exit>

08009ecc <_malloc_usable_size_r>:
 8009ecc:	1f0b      	subs	r3, r1, #4
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	1f18      	subs	r0, r3, #4
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	da01      	bge.n	8009eda <_malloc_usable_size_r+0xe>
 8009ed6:	580b      	ldr	r3, [r1, r0]
 8009ed8:	18c0      	adds	r0, r0, r3
 8009eda:	4770      	bx	lr

08009edc <_raise_r>:
 8009edc:	b570      	push	{r4, r5, r6, lr}
 8009ede:	0004      	movs	r4, r0
 8009ee0:	000d      	movs	r5, r1
 8009ee2:	291f      	cmp	r1, #31
 8009ee4:	d904      	bls.n	8009ef0 <_raise_r+0x14>
 8009ee6:	2316      	movs	r3, #22
 8009ee8:	6003      	str	r3, [r0, #0]
 8009eea:	2001      	movs	r0, #1
 8009eec:	4240      	negs	r0, r0
 8009eee:	bd70      	pop	{r4, r5, r6, pc}
 8009ef0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d004      	beq.n	8009f00 <_raise_r+0x24>
 8009ef6:	008a      	lsls	r2, r1, #2
 8009ef8:	189b      	adds	r3, r3, r2
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	2a00      	cmp	r2, #0
 8009efe:	d108      	bne.n	8009f12 <_raise_r+0x36>
 8009f00:	0020      	movs	r0, r4
 8009f02:	f000 f831 	bl	8009f68 <_getpid_r>
 8009f06:	002a      	movs	r2, r5
 8009f08:	0001      	movs	r1, r0
 8009f0a:	0020      	movs	r0, r4
 8009f0c:	f000 f81a 	bl	8009f44 <_kill_r>
 8009f10:	e7ed      	b.n	8009eee <_raise_r+0x12>
 8009f12:	2000      	movs	r0, #0
 8009f14:	2a01      	cmp	r2, #1
 8009f16:	d0ea      	beq.n	8009eee <_raise_r+0x12>
 8009f18:	1c51      	adds	r1, r2, #1
 8009f1a:	d103      	bne.n	8009f24 <_raise_r+0x48>
 8009f1c:	2316      	movs	r3, #22
 8009f1e:	3001      	adds	r0, #1
 8009f20:	6023      	str	r3, [r4, #0]
 8009f22:	e7e4      	b.n	8009eee <_raise_r+0x12>
 8009f24:	2400      	movs	r4, #0
 8009f26:	0028      	movs	r0, r5
 8009f28:	601c      	str	r4, [r3, #0]
 8009f2a:	4790      	blx	r2
 8009f2c:	0020      	movs	r0, r4
 8009f2e:	e7de      	b.n	8009eee <_raise_r+0x12>

08009f30 <raise>:
 8009f30:	b510      	push	{r4, lr}
 8009f32:	4b03      	ldr	r3, [pc, #12]	; (8009f40 <raise+0x10>)
 8009f34:	0001      	movs	r1, r0
 8009f36:	6818      	ldr	r0, [r3, #0]
 8009f38:	f7ff ffd0 	bl	8009edc <_raise_r>
 8009f3c:	bd10      	pop	{r4, pc}
 8009f3e:	46c0      	nop			; (mov r8, r8)
 8009f40:	2000002c 	.word	0x2000002c

08009f44 <_kill_r>:
 8009f44:	2300      	movs	r3, #0
 8009f46:	b570      	push	{r4, r5, r6, lr}
 8009f48:	4d06      	ldr	r5, [pc, #24]	; (8009f64 <_kill_r+0x20>)
 8009f4a:	0004      	movs	r4, r0
 8009f4c:	0008      	movs	r0, r1
 8009f4e:	0011      	movs	r1, r2
 8009f50:	602b      	str	r3, [r5, #0]
 8009f52:	f7f9 fab8 	bl	80034c6 <_kill>
 8009f56:	1c43      	adds	r3, r0, #1
 8009f58:	d103      	bne.n	8009f62 <_kill_r+0x1e>
 8009f5a:	682b      	ldr	r3, [r5, #0]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d000      	beq.n	8009f62 <_kill_r+0x1e>
 8009f60:	6023      	str	r3, [r4, #0]
 8009f62:	bd70      	pop	{r4, r5, r6, pc}
 8009f64:	20000720 	.word	0x20000720

08009f68 <_getpid_r>:
 8009f68:	b510      	push	{r4, lr}
 8009f6a:	f7f9 faa6 	bl	80034ba <_getpid>
 8009f6e:	bd10      	pop	{r4, pc}

08009f70 <_init>:
 8009f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f72:	46c0      	nop			; (mov r8, r8)
 8009f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f76:	bc08      	pop	{r3}
 8009f78:	469e      	mov	lr, r3
 8009f7a:	4770      	bx	lr

08009f7c <_fini>:
 8009f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f7e:	46c0      	nop			; (mov r8, r8)
 8009f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f82:	bc08      	pop	{r3}
 8009f84:	469e      	mov	lr, r3
 8009f86:	4770      	bx	lr

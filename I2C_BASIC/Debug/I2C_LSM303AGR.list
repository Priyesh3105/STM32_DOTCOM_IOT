
I2C_LSM303AGR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009328  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08009468  08009468  00019468  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098fc  080098fc  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  080098fc  080098fc  000198fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009904  08009904  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009904  08009904  00019904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009908  08009908  00019908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800990c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e8  200001fc  08009b08  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006e4  08009b08  000206e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011608  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb4  00000000  00000000  0003182d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  000336e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e88  00000000  00000000  00034610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001693f  00000000  00000000  00035498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e757  00000000  00000000  0004bdd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088adb  00000000  00000000  0005a52e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3009  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053b0  00000000  00000000  000e305c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001fc 	.word	0x200001fc
 800015c:	00000000 	.word	0x00000000
 8000160:	08009450 	.word	0x08009450

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000200 	.word	0x20000200
 800017c:	08009450 	.word	0x08009450

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_frsub>:
 8000ab8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	e002      	b.n	8000ac4 <__addsf3>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_fsub>:
 8000ac0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ac4 <__addsf3>:
 8000ac4:	0042      	lsls	r2, r0, #1
 8000ac6:	bf1f      	itttt	ne
 8000ac8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000acc:	ea92 0f03 	teqne	r2, r3
 8000ad0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad8:	d06a      	beq.n	8000bb0 <__addsf3+0xec>
 8000ada:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ade:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ae2:	bfc1      	itttt	gt
 8000ae4:	18d2      	addgt	r2, r2, r3
 8000ae6:	4041      	eorgt	r1, r0
 8000ae8:	4048      	eorgt	r0, r1
 8000aea:	4041      	eorgt	r1, r0
 8000aec:	bfb8      	it	lt
 8000aee:	425b      	neglt	r3, r3
 8000af0:	2b19      	cmp	r3, #25
 8000af2:	bf88      	it	hi
 8000af4:	4770      	bxhi	lr
 8000af6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000afa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b02:	bf18      	it	ne
 8000b04:	4240      	negne	r0, r0
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4249      	negne	r1, r1
 8000b16:	ea92 0f03 	teq	r2, r3
 8000b1a:	d03f      	beq.n	8000b9c <__addsf3+0xd8>
 8000b1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b20:	fa41 fc03 	asr.w	ip, r1, r3
 8000b24:	eb10 000c 	adds.w	r0, r0, ip
 8000b28:	f1c3 0320 	rsb	r3, r3, #32
 8000b2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__addsf3+0x78>
 8000b36:	4249      	negs	r1, r1
 8000b38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b40:	d313      	bcc.n	8000b6a <__addsf3+0xa6>
 8000b42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b46:	d306      	bcc.n	8000b56 <__addsf3+0x92>
 8000b48:	0840      	lsrs	r0, r0, #1
 8000b4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b4e:	f102 0201 	add.w	r2, r2, #1
 8000b52:	2afe      	cmp	r2, #254	; 0xfe
 8000b54:	d251      	bcs.n	8000bfa <__addsf3+0x136>
 8000b56:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b5e:	bf08      	it	eq
 8000b60:	f020 0001 	biceq.w	r0, r0, #1
 8000b64:	ea40 0003 	orr.w	r0, r0, r3
 8000b68:	4770      	bx	lr
 8000b6a:	0049      	lsls	r1, r1, #1
 8000b6c:	eb40 0000 	adc.w	r0, r0, r0
 8000b70:	3a01      	subs	r2, #1
 8000b72:	bf28      	it	cs
 8000b74:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b78:	d2ed      	bcs.n	8000b56 <__addsf3+0x92>
 8000b7a:	fab0 fc80 	clz	ip, r0
 8000b7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b82:	ebb2 020c 	subs.w	r2, r2, ip
 8000b86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b8a:	bfaa      	itet	ge
 8000b8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b90:	4252      	neglt	r2, r2
 8000b92:	4318      	orrge	r0, r3
 8000b94:	bfbc      	itt	lt
 8000b96:	40d0      	lsrlt	r0, r2
 8000b98:	4318      	orrlt	r0, r3
 8000b9a:	4770      	bx	lr
 8000b9c:	f092 0f00 	teq	r2, #0
 8000ba0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ba4:	bf06      	itte	eq
 8000ba6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000baa:	3201      	addeq	r2, #1
 8000bac:	3b01      	subne	r3, #1
 8000bae:	e7b5      	b.n	8000b1c <__addsf3+0x58>
 8000bb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bb8:	bf18      	it	ne
 8000bba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bbe:	d021      	beq.n	8000c04 <__addsf3+0x140>
 8000bc0:	ea92 0f03 	teq	r2, r3
 8000bc4:	d004      	beq.n	8000bd0 <__addsf3+0x10c>
 8000bc6:	f092 0f00 	teq	r2, #0
 8000bca:	bf08      	it	eq
 8000bcc:	4608      	moveq	r0, r1
 8000bce:	4770      	bx	lr
 8000bd0:	ea90 0f01 	teq	r0, r1
 8000bd4:	bf1c      	itt	ne
 8000bd6:	2000      	movne	r0, #0
 8000bd8:	4770      	bxne	lr
 8000bda:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bde:	d104      	bne.n	8000bea <__addsf3+0x126>
 8000be0:	0040      	lsls	r0, r0, #1
 8000be2:	bf28      	it	cs
 8000be4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000be8:	4770      	bx	lr
 8000bea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bee:	bf3c      	itt	cc
 8000bf0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bxcc	lr
 8000bf6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bfa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c02:	4770      	bx	lr
 8000c04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c08:	bf16      	itet	ne
 8000c0a:	4608      	movne	r0, r1
 8000c0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c10:	4601      	movne	r1, r0
 8000c12:	0242      	lsls	r2, r0, #9
 8000c14:	bf06      	itte	eq
 8000c16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c1a:	ea90 0f01 	teqeq	r0, r1
 8000c1e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c22:	4770      	bx	lr

08000c24 <__aeabi_ui2f>:
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	e004      	b.n	8000c34 <__aeabi_i2f+0x8>
 8000c2a:	bf00      	nop

08000c2c <__aeabi_i2f>:
 8000c2c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c30:	bf48      	it	mi
 8000c32:	4240      	negmi	r0, r0
 8000c34:	ea5f 0c00 	movs.w	ip, r0
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c40:	4601      	mov	r1, r0
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	e01c      	b.n	8000c82 <__aeabi_l2f+0x2a>

08000c48 <__aeabi_ul2f>:
 8000c48:	ea50 0201 	orrs.w	r2, r0, r1
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f04f 0300 	mov.w	r3, #0
 8000c54:	e00a      	b.n	8000c6c <__aeabi_l2f+0x14>
 8000c56:	bf00      	nop

08000c58 <__aeabi_l2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c64:	d502      	bpl.n	8000c6c <__aeabi_l2f+0x14>
 8000c66:	4240      	negs	r0, r0
 8000c68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6c:	ea5f 0c01 	movs.w	ip, r1
 8000c70:	bf02      	ittt	eq
 8000c72:	4684      	moveq	ip, r0
 8000c74:	4601      	moveq	r1, r0
 8000c76:	2000      	moveq	r0, #0
 8000c78:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c7c:	bf08      	it	eq
 8000c7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c82:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c86:	fabc f28c 	clz	r2, ip
 8000c8a:	3a08      	subs	r2, #8
 8000c8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c90:	db10      	blt.n	8000cb4 <__aeabi_l2f+0x5c>
 8000c92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c96:	4463      	add	r3, ip
 8000c98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ca0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ca4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca8:	eb43 0002 	adc.w	r0, r3, r2
 8000cac:	bf08      	it	eq
 8000cae:	f020 0001 	biceq.w	r0, r0, #1
 8000cb2:	4770      	bx	lr
 8000cb4:	f102 0220 	add.w	r2, r2, #32
 8000cb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_fmul>:
 8000cd4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cd8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cdc:	bf1e      	ittt	ne
 8000cde:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ce2:	ea92 0f0c 	teqne	r2, ip
 8000ce6:	ea93 0f0c 	teqne	r3, ip
 8000cea:	d06f      	beq.n	8000dcc <__aeabi_fmul+0xf8>
 8000cec:	441a      	add	r2, r3
 8000cee:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf2:	0240      	lsls	r0, r0, #9
 8000cf4:	bf18      	it	ne
 8000cf6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cfa:	d01e      	beq.n	8000d3a <__aeabi_fmul+0x66>
 8000cfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d00:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d04:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d08:	fba0 3101 	umull	r3, r1, r0, r1
 8000d0c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d10:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d14:	bf3e      	ittt	cc
 8000d16:	0049      	lslcc	r1, r1, #1
 8000d18:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d1c:	005b      	lslcc	r3, r3, #1
 8000d1e:	ea40 0001 	orr.w	r0, r0, r1
 8000d22:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d26:	2afd      	cmp	r2, #253	; 0xfd
 8000d28:	d81d      	bhi.n	8000d66 <__aeabi_fmul+0x92>
 8000d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d32:	bf08      	it	eq
 8000d34:	f020 0001 	biceq.w	r0, r0, #1
 8000d38:	4770      	bx	lr
 8000d3a:	f090 0f00 	teq	r0, #0
 8000d3e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d42:	bf08      	it	eq
 8000d44:	0249      	lsleq	r1, r1, #9
 8000d46:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d4a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d4e:	3a7f      	subs	r2, #127	; 0x7f
 8000d50:	bfc2      	ittt	gt
 8000d52:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d56:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d5a:	4770      	bxgt	lr
 8000d5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	3a01      	subs	r2, #1
 8000d66:	dc5d      	bgt.n	8000e24 <__aeabi_fmul+0x150>
 8000d68:	f112 0f19 	cmn.w	r2, #25
 8000d6c:	bfdc      	itt	le
 8000d6e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d72:	4770      	bxle	lr
 8000d74:	f1c2 0200 	rsb	r2, r2, #0
 8000d78:	0041      	lsls	r1, r0, #1
 8000d7a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d7e:	f1c2 0220 	rsb	r2, r2, #32
 8000d82:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d86:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d8a:	f140 0000 	adc.w	r0, r0, #0
 8000d8e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d92:	bf08      	it	eq
 8000d94:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d98:	4770      	bx	lr
 8000d9a:	f092 0f00 	teq	r2, #0
 8000d9e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000da2:	bf02      	ittt	eq
 8000da4:	0040      	lsleq	r0, r0, #1
 8000da6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000daa:	3a01      	subeq	r2, #1
 8000dac:	d0f9      	beq.n	8000da2 <__aeabi_fmul+0xce>
 8000dae:	ea40 000c 	orr.w	r0, r0, ip
 8000db2:	f093 0f00 	teq	r3, #0
 8000db6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dba:	bf02      	ittt	eq
 8000dbc:	0049      	lsleq	r1, r1, #1
 8000dbe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dc2:	3b01      	subeq	r3, #1
 8000dc4:	d0f9      	beq.n	8000dba <__aeabi_fmul+0xe6>
 8000dc6:	ea41 010c 	orr.w	r1, r1, ip
 8000dca:	e78f      	b.n	8000cec <__aeabi_fmul+0x18>
 8000dcc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dd0:	ea92 0f0c 	teq	r2, ip
 8000dd4:	bf18      	it	ne
 8000dd6:	ea93 0f0c 	teqne	r3, ip
 8000dda:	d00a      	beq.n	8000df2 <__aeabi_fmul+0x11e>
 8000ddc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000de0:	bf18      	it	ne
 8000de2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	d1d8      	bne.n	8000d9a <__aeabi_fmul+0xc6>
 8000de8:	ea80 0001 	eor.w	r0, r0, r1
 8000dec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df0:	4770      	bx	lr
 8000df2:	f090 0f00 	teq	r0, #0
 8000df6:	bf17      	itett	ne
 8000df8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dfc:	4608      	moveq	r0, r1
 8000dfe:	f091 0f00 	teqne	r1, #0
 8000e02:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e06:	d014      	beq.n	8000e32 <__aeabi_fmul+0x15e>
 8000e08:	ea92 0f0c 	teq	r2, ip
 8000e0c:	d101      	bne.n	8000e12 <__aeabi_fmul+0x13e>
 8000e0e:	0242      	lsls	r2, r0, #9
 8000e10:	d10f      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e12:	ea93 0f0c 	teq	r3, ip
 8000e16:	d103      	bne.n	8000e20 <__aeabi_fmul+0x14c>
 8000e18:	024b      	lsls	r3, r1, #9
 8000e1a:	bf18      	it	ne
 8000e1c:	4608      	movne	r0, r1
 8000e1e:	d108      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e20:	ea80 0001 	eor.w	r0, r0, r1
 8000e24:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e30:	4770      	bx	lr
 8000e32:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e36:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_fdiv>:
 8000e3c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e44:	bf1e      	ittt	ne
 8000e46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e4a:	ea92 0f0c 	teqne	r2, ip
 8000e4e:	ea93 0f0c 	teqne	r3, ip
 8000e52:	d069      	beq.n	8000f28 <__aeabi_fdiv+0xec>
 8000e54:	eba2 0203 	sub.w	r2, r2, r3
 8000e58:	ea80 0c01 	eor.w	ip, r0, r1
 8000e5c:	0249      	lsls	r1, r1, #9
 8000e5e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e62:	d037      	beq.n	8000ed4 <__aeabi_fdiv+0x98>
 8000e64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e68:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e6c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e70:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e74:	428b      	cmp	r3, r1
 8000e76:	bf38      	it	cc
 8000e78:	005b      	lslcc	r3, r3, #1
 8000e7a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e7e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e82:	428b      	cmp	r3, r1
 8000e84:	bf24      	itt	cs
 8000e86:	1a5b      	subcs	r3, r3, r1
 8000e88:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e8c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e96:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e9a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e9e:	bf24      	itt	cs
 8000ea0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ea4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ea8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eac:	bf24      	itt	cs
 8000eae:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eb2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	bf18      	it	ne
 8000eba:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ebe:	d1e0      	bne.n	8000e82 <__aeabi_fdiv+0x46>
 8000ec0:	2afd      	cmp	r2, #253	; 0xfd
 8000ec2:	f63f af50 	bhi.w	8000d66 <__aeabi_fmul+0x92>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ecc:	bf08      	it	eq
 8000ece:	f020 0001 	biceq.w	r0, r0, #1
 8000ed2:	4770      	bx	lr
 8000ed4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ed8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000edc:	327f      	adds	r2, #127	; 0x7f
 8000ede:	bfc2      	ittt	gt
 8000ee0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ee4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee8:	4770      	bxgt	lr
 8000eea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	3a01      	subs	r2, #1
 8000ef4:	e737      	b.n	8000d66 <__aeabi_fmul+0x92>
 8000ef6:	f092 0f00 	teq	r2, #0
 8000efa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000efe:	bf02      	ittt	eq
 8000f00:	0040      	lsleq	r0, r0, #1
 8000f02:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f06:	3a01      	subeq	r2, #1
 8000f08:	d0f9      	beq.n	8000efe <__aeabi_fdiv+0xc2>
 8000f0a:	ea40 000c 	orr.w	r0, r0, ip
 8000f0e:	f093 0f00 	teq	r3, #0
 8000f12:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f16:	bf02      	ittt	eq
 8000f18:	0049      	lsleq	r1, r1, #1
 8000f1a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f1e:	3b01      	subeq	r3, #1
 8000f20:	d0f9      	beq.n	8000f16 <__aeabi_fdiv+0xda>
 8000f22:	ea41 010c 	orr.w	r1, r1, ip
 8000f26:	e795      	b.n	8000e54 <__aeabi_fdiv+0x18>
 8000f28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f2c:	ea92 0f0c 	teq	r2, ip
 8000f30:	d108      	bne.n	8000f44 <__aeabi_fdiv+0x108>
 8000f32:	0242      	lsls	r2, r0, #9
 8000f34:	f47f af7d 	bne.w	8000e32 <__aeabi_fmul+0x15e>
 8000f38:	ea93 0f0c 	teq	r3, ip
 8000f3c:	f47f af70 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e776      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f44:	ea93 0f0c 	teq	r3, ip
 8000f48:	d104      	bne.n	8000f54 <__aeabi_fdiv+0x118>
 8000f4a:	024b      	lsls	r3, r1, #9
 8000f4c:	f43f af4c 	beq.w	8000de8 <__aeabi_fmul+0x114>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e76e      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f58:	bf18      	it	ne
 8000f5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f5e:	d1ca      	bne.n	8000ef6 <__aeabi_fdiv+0xba>
 8000f60:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f64:	f47f af5c 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f68:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f6c:	f47f af3c 	bne.w	8000de8 <__aeabi_fmul+0x114>
 8000f70:	e75f      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f72:	bf00      	nop

08000f74 <__aeabi_uldivmod>:
 8000f74:	b953      	cbnz	r3, 8000f8c <__aeabi_uldivmod+0x18>
 8000f76:	b94a      	cbnz	r2, 8000f8c <__aeabi_uldivmod+0x18>
 8000f78:	2900      	cmp	r1, #0
 8000f7a:	bf08      	it	eq
 8000f7c:	2800      	cmpeq	r0, #0
 8000f7e:	bf1c      	itt	ne
 8000f80:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000f84:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000f88:	f000 b976 	b.w	8001278 <__aeabi_idiv0>
 8000f8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f94:	f000 f806 	bl	8000fa4 <__udivmoddi4>
 8000f98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fa0:	b004      	add	sp, #16
 8000fa2:	4770      	bx	lr

08000fa4 <__udivmoddi4>:
 8000fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fa8:	9e08      	ldr	r6, [sp, #32]
 8000faa:	460d      	mov	r5, r1
 8000fac:	4604      	mov	r4, r0
 8000fae:	4688      	mov	r8, r1
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d14d      	bne.n	8001050 <__udivmoddi4+0xac>
 8000fb4:	428a      	cmp	r2, r1
 8000fb6:	4694      	mov	ip, r2
 8000fb8:	d968      	bls.n	800108c <__udivmoddi4+0xe8>
 8000fba:	fab2 f282 	clz	r2, r2
 8000fbe:	b152      	cbz	r2, 8000fd6 <__udivmoddi4+0x32>
 8000fc0:	fa01 f302 	lsl.w	r3, r1, r2
 8000fc4:	f1c2 0120 	rsb	r1, r2, #32
 8000fc8:	fa20 f101 	lsr.w	r1, r0, r1
 8000fcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fd0:	ea41 0803 	orr.w	r8, r1, r3
 8000fd4:	4094      	lsls	r4, r2
 8000fd6:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000fda:	fbb8 f7f1 	udiv	r7, r8, r1
 8000fde:	fa1f fe8c 	uxth.w	lr, ip
 8000fe2:	fb01 8817 	mls	r8, r1, r7, r8
 8000fe6:	fb07 f00e 	mul.w	r0, r7, lr
 8000fea:	0c23      	lsrs	r3, r4, #16
 8000fec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ff0:	4298      	cmp	r0, r3
 8000ff2:	d90a      	bls.n	800100a <__udivmoddi4+0x66>
 8000ff4:	eb1c 0303 	adds.w	r3, ip, r3
 8000ff8:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8000ffc:	f080 811e 	bcs.w	800123c <__udivmoddi4+0x298>
 8001000:	4298      	cmp	r0, r3
 8001002:	f240 811b 	bls.w	800123c <__udivmoddi4+0x298>
 8001006:	3f02      	subs	r7, #2
 8001008:	4463      	add	r3, ip
 800100a:	1a1b      	subs	r3, r3, r0
 800100c:	fbb3 f0f1 	udiv	r0, r3, r1
 8001010:	fb01 3310 	mls	r3, r1, r0, r3
 8001014:	fb00 fe0e 	mul.w	lr, r0, lr
 8001018:	b2a4      	uxth	r4, r4
 800101a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800101e:	45a6      	cmp	lr, r4
 8001020:	d90a      	bls.n	8001038 <__udivmoddi4+0x94>
 8001022:	eb1c 0404 	adds.w	r4, ip, r4
 8001026:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800102a:	f080 8109 	bcs.w	8001240 <__udivmoddi4+0x29c>
 800102e:	45a6      	cmp	lr, r4
 8001030:	f240 8106 	bls.w	8001240 <__udivmoddi4+0x29c>
 8001034:	4464      	add	r4, ip
 8001036:	3802      	subs	r0, #2
 8001038:	2100      	movs	r1, #0
 800103a:	eba4 040e 	sub.w	r4, r4, lr
 800103e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001042:	b11e      	cbz	r6, 800104c <__udivmoddi4+0xa8>
 8001044:	2300      	movs	r3, #0
 8001046:	40d4      	lsrs	r4, r2
 8001048:	e9c6 4300 	strd	r4, r3, [r6]
 800104c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001050:	428b      	cmp	r3, r1
 8001052:	d908      	bls.n	8001066 <__udivmoddi4+0xc2>
 8001054:	2e00      	cmp	r6, #0
 8001056:	f000 80ee 	beq.w	8001236 <__udivmoddi4+0x292>
 800105a:	2100      	movs	r1, #0
 800105c:	e9c6 0500 	strd	r0, r5, [r6]
 8001060:	4608      	mov	r0, r1
 8001062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001066:	fab3 f183 	clz	r1, r3
 800106a:	2900      	cmp	r1, #0
 800106c:	d14a      	bne.n	8001104 <__udivmoddi4+0x160>
 800106e:	42ab      	cmp	r3, r5
 8001070:	d302      	bcc.n	8001078 <__udivmoddi4+0xd4>
 8001072:	4282      	cmp	r2, r0
 8001074:	f200 80fc 	bhi.w	8001270 <__udivmoddi4+0x2cc>
 8001078:	1a84      	subs	r4, r0, r2
 800107a:	eb65 0303 	sbc.w	r3, r5, r3
 800107e:	2001      	movs	r0, #1
 8001080:	4698      	mov	r8, r3
 8001082:	2e00      	cmp	r6, #0
 8001084:	d0e2      	beq.n	800104c <__udivmoddi4+0xa8>
 8001086:	e9c6 4800 	strd	r4, r8, [r6]
 800108a:	e7df      	b.n	800104c <__udivmoddi4+0xa8>
 800108c:	b902      	cbnz	r2, 8001090 <__udivmoddi4+0xec>
 800108e:	deff      	udf	#255	; 0xff
 8001090:	fab2 f282 	clz	r2, r2
 8001094:	2a00      	cmp	r2, #0
 8001096:	f040 8091 	bne.w	80011bc <__udivmoddi4+0x218>
 800109a:	eba1 000c 	sub.w	r0, r1, ip
 800109e:	2101      	movs	r1, #1
 80010a0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010a4:	fa1f fe8c 	uxth.w	lr, ip
 80010a8:	fbb0 f3f7 	udiv	r3, r0, r7
 80010ac:	fb07 0013 	mls	r0, r7, r3, r0
 80010b0:	0c25      	lsrs	r5, r4, #16
 80010b2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80010b6:	fb0e f003 	mul.w	r0, lr, r3
 80010ba:	42a8      	cmp	r0, r5
 80010bc:	d908      	bls.n	80010d0 <__udivmoddi4+0x12c>
 80010be:	eb1c 0505 	adds.w	r5, ip, r5
 80010c2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80010c6:	d202      	bcs.n	80010ce <__udivmoddi4+0x12a>
 80010c8:	42a8      	cmp	r0, r5
 80010ca:	f200 80ce 	bhi.w	800126a <__udivmoddi4+0x2c6>
 80010ce:	4643      	mov	r3, r8
 80010d0:	1a2d      	subs	r5, r5, r0
 80010d2:	fbb5 f0f7 	udiv	r0, r5, r7
 80010d6:	fb07 5510 	mls	r5, r7, r0, r5
 80010da:	fb0e fe00 	mul.w	lr, lr, r0
 80010de:	b2a4      	uxth	r4, r4
 80010e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80010e4:	45a6      	cmp	lr, r4
 80010e6:	d908      	bls.n	80010fa <__udivmoddi4+0x156>
 80010e8:	eb1c 0404 	adds.w	r4, ip, r4
 80010ec:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80010f0:	d202      	bcs.n	80010f8 <__udivmoddi4+0x154>
 80010f2:	45a6      	cmp	lr, r4
 80010f4:	f200 80b6 	bhi.w	8001264 <__udivmoddi4+0x2c0>
 80010f8:	4628      	mov	r0, r5
 80010fa:	eba4 040e 	sub.w	r4, r4, lr
 80010fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001102:	e79e      	b.n	8001042 <__udivmoddi4+0x9e>
 8001104:	f1c1 0720 	rsb	r7, r1, #32
 8001108:	408b      	lsls	r3, r1
 800110a:	fa22 fc07 	lsr.w	ip, r2, r7
 800110e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001112:	fa25 fa07 	lsr.w	sl, r5, r7
 8001116:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800111a:	fbba f8f9 	udiv	r8, sl, r9
 800111e:	fa20 f307 	lsr.w	r3, r0, r7
 8001122:	fb09 aa18 	mls	sl, r9, r8, sl
 8001126:	408d      	lsls	r5, r1
 8001128:	fa1f fe8c 	uxth.w	lr, ip
 800112c:	431d      	orrs	r5, r3
 800112e:	fa00 f301 	lsl.w	r3, r0, r1
 8001132:	fb08 f00e 	mul.w	r0, r8, lr
 8001136:	0c2c      	lsrs	r4, r5, #16
 8001138:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800113c:	42a0      	cmp	r0, r4
 800113e:	fa02 f201 	lsl.w	r2, r2, r1
 8001142:	d90b      	bls.n	800115c <__udivmoddi4+0x1b8>
 8001144:	eb1c 0404 	adds.w	r4, ip, r4
 8001148:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800114c:	f080 8088 	bcs.w	8001260 <__udivmoddi4+0x2bc>
 8001150:	42a0      	cmp	r0, r4
 8001152:	f240 8085 	bls.w	8001260 <__udivmoddi4+0x2bc>
 8001156:	f1a8 0802 	sub.w	r8, r8, #2
 800115a:	4464      	add	r4, ip
 800115c:	1a24      	subs	r4, r4, r0
 800115e:	fbb4 f0f9 	udiv	r0, r4, r9
 8001162:	fb09 4410 	mls	r4, r9, r0, r4
 8001166:	fb00 fe0e 	mul.w	lr, r0, lr
 800116a:	b2ad      	uxth	r5, r5
 800116c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001170:	45a6      	cmp	lr, r4
 8001172:	d908      	bls.n	8001186 <__udivmoddi4+0x1e2>
 8001174:	eb1c 0404 	adds.w	r4, ip, r4
 8001178:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800117c:	d26c      	bcs.n	8001258 <__udivmoddi4+0x2b4>
 800117e:	45a6      	cmp	lr, r4
 8001180:	d96a      	bls.n	8001258 <__udivmoddi4+0x2b4>
 8001182:	3802      	subs	r0, #2
 8001184:	4464      	add	r4, ip
 8001186:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800118a:	fba0 9502 	umull	r9, r5, r0, r2
 800118e:	eba4 040e 	sub.w	r4, r4, lr
 8001192:	42ac      	cmp	r4, r5
 8001194:	46c8      	mov	r8, r9
 8001196:	46ae      	mov	lr, r5
 8001198:	d356      	bcc.n	8001248 <__udivmoddi4+0x2a4>
 800119a:	d053      	beq.n	8001244 <__udivmoddi4+0x2a0>
 800119c:	2e00      	cmp	r6, #0
 800119e:	d069      	beq.n	8001274 <__udivmoddi4+0x2d0>
 80011a0:	ebb3 0208 	subs.w	r2, r3, r8
 80011a4:	eb64 040e 	sbc.w	r4, r4, lr
 80011a8:	fa22 f301 	lsr.w	r3, r2, r1
 80011ac:	fa04 f707 	lsl.w	r7, r4, r7
 80011b0:	431f      	orrs	r7, r3
 80011b2:	40cc      	lsrs	r4, r1
 80011b4:	e9c6 7400 	strd	r7, r4, [r6]
 80011b8:	2100      	movs	r1, #0
 80011ba:	e747      	b.n	800104c <__udivmoddi4+0xa8>
 80011bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80011c0:	f1c2 0120 	rsb	r1, r2, #32
 80011c4:	fa25 f301 	lsr.w	r3, r5, r1
 80011c8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011cc:	fa20 f101 	lsr.w	r1, r0, r1
 80011d0:	4095      	lsls	r5, r2
 80011d2:	430d      	orrs	r5, r1
 80011d4:	fbb3 f1f7 	udiv	r1, r3, r7
 80011d8:	fb07 3311 	mls	r3, r7, r1, r3
 80011dc:	fa1f fe8c 	uxth.w	lr, ip
 80011e0:	0c28      	lsrs	r0, r5, #16
 80011e2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80011e6:	fb01 f30e 	mul.w	r3, r1, lr
 80011ea:	4283      	cmp	r3, r0
 80011ec:	fa04 f402 	lsl.w	r4, r4, r2
 80011f0:	d908      	bls.n	8001204 <__udivmoddi4+0x260>
 80011f2:	eb1c 0000 	adds.w	r0, ip, r0
 80011f6:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80011fa:	d22f      	bcs.n	800125c <__udivmoddi4+0x2b8>
 80011fc:	4283      	cmp	r3, r0
 80011fe:	d92d      	bls.n	800125c <__udivmoddi4+0x2b8>
 8001200:	3902      	subs	r1, #2
 8001202:	4460      	add	r0, ip
 8001204:	1ac0      	subs	r0, r0, r3
 8001206:	fbb0 f3f7 	udiv	r3, r0, r7
 800120a:	fb07 0013 	mls	r0, r7, r3, r0
 800120e:	b2ad      	uxth	r5, r5
 8001210:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001214:	fb03 f00e 	mul.w	r0, r3, lr
 8001218:	42a8      	cmp	r0, r5
 800121a:	d908      	bls.n	800122e <__udivmoddi4+0x28a>
 800121c:	eb1c 0505 	adds.w	r5, ip, r5
 8001220:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8001224:	d216      	bcs.n	8001254 <__udivmoddi4+0x2b0>
 8001226:	42a8      	cmp	r0, r5
 8001228:	d914      	bls.n	8001254 <__udivmoddi4+0x2b0>
 800122a:	3b02      	subs	r3, #2
 800122c:	4465      	add	r5, ip
 800122e:	1a28      	subs	r0, r5, r0
 8001230:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001234:	e738      	b.n	80010a8 <__udivmoddi4+0x104>
 8001236:	4631      	mov	r1, r6
 8001238:	4630      	mov	r0, r6
 800123a:	e707      	b.n	800104c <__udivmoddi4+0xa8>
 800123c:	462f      	mov	r7, r5
 800123e:	e6e4      	b.n	800100a <__udivmoddi4+0x66>
 8001240:	4618      	mov	r0, r3
 8001242:	e6f9      	b.n	8001038 <__udivmoddi4+0x94>
 8001244:	454b      	cmp	r3, r9
 8001246:	d2a9      	bcs.n	800119c <__udivmoddi4+0x1f8>
 8001248:	ebb9 0802 	subs.w	r8, r9, r2
 800124c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001250:	3801      	subs	r0, #1
 8001252:	e7a3      	b.n	800119c <__udivmoddi4+0x1f8>
 8001254:	4643      	mov	r3, r8
 8001256:	e7ea      	b.n	800122e <__udivmoddi4+0x28a>
 8001258:	4628      	mov	r0, r5
 800125a:	e794      	b.n	8001186 <__udivmoddi4+0x1e2>
 800125c:	4641      	mov	r1, r8
 800125e:	e7d1      	b.n	8001204 <__udivmoddi4+0x260>
 8001260:	46d0      	mov	r8, sl
 8001262:	e77b      	b.n	800115c <__udivmoddi4+0x1b8>
 8001264:	4464      	add	r4, ip
 8001266:	3802      	subs	r0, #2
 8001268:	e747      	b.n	80010fa <__udivmoddi4+0x156>
 800126a:	3b02      	subs	r3, #2
 800126c:	4465      	add	r5, ip
 800126e:	e72f      	b.n	80010d0 <__udivmoddi4+0x12c>
 8001270:	4608      	mov	r0, r1
 8001272:	e706      	b.n	8001082 <__udivmoddi4+0xde>
 8001274:	4631      	mov	r1, r6
 8001276:	e6e9      	b.n	800104c <__udivmoddi4+0xa8>

08001278 <__aeabi_idiv0>:
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop

0800127c <i2c_scanner>:

/*-[ I2C Bus Scanning ]-*/



void i2c_scanner(I2C_HandleTypeDef *i2c) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]

	printf("Scanning I2C bus:\r\n");
 8001284:	4817      	ldr	r0, [pc, #92]	; (80012e4 <i2c_scanner+0x68>)
 8001286:	f005 fe19 	bl	8006ebc <puts>
	HAL_StatusTypeDef ret;
	uint16_t i = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	81fb      	strh	r3, [r7, #14]

	for (i = 1; i < 128; i++) {
 800128e:	2301      	movs	r3, #1
 8001290:	81fb      	strh	r3, [r7, #14]
 8001292:	e01c      	b.n	80012ce <i2c_scanner+0x52>
		ret = HAL_I2C_IsDeviceReady(i2c, (uint16_t) (i << 1), 3, 10);
 8001294:	89fb      	ldrh	r3, [r7, #14]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	b299      	uxth	r1, r3
 800129a:	230a      	movs	r3, #10
 800129c:	2203      	movs	r2, #3
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f002 f82a 	bl	80032f8 <HAL_I2C_IsDeviceReady>
 80012a4:	4603      	mov	r3, r0
 80012a6:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) /* No ACK Received At That Address */
 80012a8:	7b7b      	ldrb	r3, [r7, #13]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <i2c_scanner+0x3a>
		{
			printf("-");
 80012ae:	202d      	movs	r0, #45	; 0x2d
 80012b0:	f005 fd82 	bl	8006db8 <putchar>
 80012b4:	e008      	b.n	80012c8 <i2c_scanner+0x4c>
		} else if (ret == HAL_OK) {
 80012b6:	7b7b      	ldrb	r3, [r7, #13]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d105      	bne.n	80012c8 <i2c_scanner+0x4c>
			printf("0x%X", i<<1);
 80012bc:	89fb      	ldrh	r3, [r7, #14]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	4619      	mov	r1, r3
 80012c2:	4809      	ldr	r0, [pc, #36]	; (80012e8 <i2c_scanner+0x6c>)
 80012c4:	f005 fd60 	bl	8006d88 <iprintf>
	for (i = 1; i < 128; i++) {
 80012c8:	89fb      	ldrh	r3, [r7, #14]
 80012ca:	3301      	adds	r3, #1
 80012cc:	81fb      	strh	r3, [r7, #14]
 80012ce:	89fb      	ldrh	r3, [r7, #14]
 80012d0:	2b7f      	cmp	r3, #127	; 0x7f
 80012d2:	d9df      	bls.n	8001294 <i2c_scanner+0x18>
		}
	}
	printf("\r\n");
 80012d4:	4805      	ldr	r0, [pc, #20]	; (80012ec <i2c_scanner+0x70>)
 80012d6:	f005 fdf1 	bl	8006ebc <puts>
}
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	08009468 	.word	0x08009468
 80012e8:	0800947c 	.word	0x0800947c
 80012ec:	08009484 	.word	0x08009484

080012f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f4:	f001 f81c 	bl	8002330 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012f8:	f000 f80e 	bl	8001318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012fc:	f000 f8b0 	bl	8001460 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001300:	f000 f858 	bl	80013b4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001304:	f000 f882 	bl	800140c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  i2c_scanner(&hi2c1);
 8001308:	4802      	ldr	r0, [pc, #8]	; (8001314 <main+0x24>)
 800130a:	f7ff ffb7 	bl	800127c <i2c_scanner>
  lsm303agr_read_data_polling();
 800130e:	f000 f8c9 	bl	80014a4 <lsm303agr_read_data_polling>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001312:	e7fe      	b.n	8001312 <main+0x22>
 8001314:	20000218 	.word	0x20000218

08001318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b092      	sub	sp, #72	; 0x48
 800131c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	2234      	movs	r2, #52	; 0x34
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f005 f8c6 	bl	80064b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800132c:	463b      	mov	r3, r7
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
 8001338:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800133a:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <SystemClock_Config+0x98>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001342:	4a1b      	ldr	r2, [pc, #108]	; (80013b0 <SystemClock_Config+0x98>)
 8001344:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001348:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800134a:	2302      	movs	r3, #2
 800134c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800134e:	2301      	movs	r3, #1
 8001350:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001352:	2310      	movs	r3, #16
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001356:	2302      	movs	r3, #2
 8001358:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800135a:	2300      	movs	r3, #0
 800135c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800135e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001362:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001364:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001368:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	4618      	mov	r0, r3
 8001370:	f004 f85c 	bl	800542c <HAL_RCC_OscConfig>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800137a:	f000 fa75 	bl	8001868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137e:	230f      	movs	r3, #15
 8001380:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001382:	2303      	movs	r3, #3
 8001384:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001392:	463b      	mov	r3, r7
 8001394:	2101      	movs	r1, #1
 8001396:	4618      	mov	r0, r3
 8001398:	f004 fb78 	bl	8005a8c <HAL_RCC_ClockConfig>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80013a2:	f000 fa61 	bl	8001868 <Error_Handler>
  }
}
 80013a6:	bf00      	nop
 80013a8:	3748      	adds	r7, #72	; 0x48
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40007000 	.word	0x40007000

080013b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <MX_I2C1_Init+0x50>)
 80013ba:	4a13      	ldr	r2, [pc, #76]	; (8001408 <MX_I2C1_Init+0x54>)
 80013bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100;
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <MX_I2C1_Init+0x50>)
 80013c0:	2264      	movs	r2, #100	; 0x64
 80013c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013c4:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <MX_I2C1_Init+0x50>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <MX_I2C1_Init+0x50>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <MX_I2C1_Init+0x50>)
 80013d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013d8:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <MX_I2C1_Init+0x50>)
 80013da:	2200      	movs	r2, #0
 80013dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <MX_I2C1_Init+0x50>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <MX_I2C1_Init+0x50>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <MX_I2C1_Init+0x50>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013f0:	4804      	ldr	r0, [pc, #16]	; (8001404 <MX_I2C1_Init+0x50>)
 80013f2:	f001 fb09 	bl	8002a08 <HAL_I2C_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013fc:	f000 fa34 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000218 	.word	0x20000218
 8001408:	40005400 	.word	0x40005400

0800140c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <MX_USART2_UART_Init+0x4c>)
 8001412:	4a12      	ldr	r2, [pc, #72]	; (800145c <MX_USART2_UART_Init+0x50>)
 8001414:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <MX_USART2_UART_Init+0x4c>)
 8001418:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800141c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800141e:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <MX_USART2_UART_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <MX_USART2_UART_Init+0x4c>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800142a:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <MX_USART2_UART_Init+0x4c>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <MX_USART2_UART_Init+0x4c>)
 8001432:	220c      	movs	r2, #12
 8001434:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001436:	4b08      	ldr	r3, [pc, #32]	; (8001458 <MX_USART2_UART_Init+0x4c>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <MX_USART2_UART_Init+0x4c>)
 800143e:	2200      	movs	r2, #0
 8001440:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001442:	4805      	ldr	r0, [pc, #20]	; (8001458 <MX_USART2_UART_Init+0x4c>)
 8001444:	f004 fde8 	bl	8006018 <HAL_UART_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800144e:	f000 fa0b 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2000026c 	.word	0x2000026c
 800145c:	40004400 	.word	0x40004400

08001460 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <MX_GPIO_Init+0x40>)
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	4a0d      	ldr	r2, [pc, #52]	; (80014a0 <MX_GPIO_Init+0x40>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	61d3      	str	r3, [r2, #28]
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <MX_GPIO_Init+0x40>)
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <MX_GPIO_Init+0x40>)
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	4a07      	ldr	r2, [pc, #28]	; (80014a0 <MX_GPIO_Init+0x40>)
 8001484:	f043 0302 	orr.w	r3, r3, #2
 8001488:	61d3      	str	r3, [r2, #28]
 800148a:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <MX_GPIO_Init+0x40>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	603b      	str	r3, [r7, #0]
 8001494:	683b      	ldr	r3, [r7, #0]

}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr
 80014a0:	40023800 	.word	0x40023800

080014a4 <lsm303agr_read_data_polling>:

/* USER CODE BEGIN 4 */
void lsm303agr_read_data_polling(void) {
 80014a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014a8:	b08e      	sub	sp, #56	; 0x38
 80014aa:	af04      	add	r7, sp, #16
	/* Initialize mems driver interface */
	stmdev_ctx_t dev_ctx_xl;
	dev_ctx_xl.write_reg = platform_write;
 80014ac:	4ba8      	ldr	r3, [pc, #672]	; (8001750 <lsm303agr_read_data_polling+0x2ac>)
 80014ae:	61bb      	str	r3, [r7, #24]
	dev_ctx_xl.read_reg = platform_read;
 80014b0:	4ba8      	ldr	r3, [pc, #672]	; (8001754 <lsm303agr_read_data_polling+0x2b0>)
 80014b2:	61fb      	str	r3, [r7, #28]
	dev_ctx_xl.handle = (void*) &xl_bus;
 80014b4:	4ba8      	ldr	r3, [pc, #672]	; (8001758 <lsm303agr_read_data_polling+0x2b4>)
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
	stmdev_ctx_t dev_ctx_mg;
	dev_ctx_mg.write_reg = platform_write;
 80014b8:	4ba5      	ldr	r3, [pc, #660]	; (8001750 <lsm303agr_read_data_polling+0x2ac>)
 80014ba:	60bb      	str	r3, [r7, #8]
	dev_ctx_mg.read_reg = platform_read;
 80014bc:	4ba5      	ldr	r3, [pc, #660]	; (8001754 <lsm303agr_read_data_polling+0x2b0>)
 80014be:	60fb      	str	r3, [r7, #12]
	dev_ctx_mg.handle = (void*) &mag_bus;
 80014c0:	4ba6      	ldr	r3, [pc, #664]	; (800175c <lsm303agr_read_data_polling+0x2b8>)
 80014c2:	617b      	str	r3, [r7, #20]
	/* Wait boot time and initialize platform specific hardware */
	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 80014c4:	2005      	movs	r0, #5
 80014c6:	f000 f9c4 	bl	8001852 <platform_delay>
	/* Check device ID */
	whoamI = 0;
 80014ca:	4ba5      	ldr	r3, [pc, #660]	; (8001760 <lsm303agr_read_data_polling+0x2bc>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]
	lsm303agr_xl_device_id_get(&dev_ctx_xl, &whoamI);  // who_iamid store 51 so check device id 3 means 51
 80014d0:	f107 0318 	add.w	r3, r7, #24
 80014d4:	49a2      	ldr	r1, [pc, #648]	; (8001760 <lsm303agr_read_data_polling+0x2bc>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 fea7 	bl	800222a <lsm303agr_xl_device_id_get>

	if (whoamI != LSM303AGR_ID_XL)
 80014dc:	4ba0      	ldr	r3, [pc, #640]	; (8001760 <lsm303agr_read_data_polling+0x2bc>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b33      	cmp	r3, #51	; 0x33
 80014e2:	d000      	beq.n	80014e6 <lsm303agr_read_data_polling+0x42>
		while (1)
 80014e4:	e7fe      	b.n	80014e4 <lsm303agr_read_data_polling+0x40>
			; /*manage here device not found */

	whoamI = 0;
 80014e6:	4b9e      	ldr	r3, [pc, #632]	; (8001760 <lsm303agr_read_data_polling+0x2bc>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]
	lsm303agr_mag_device_id_get(&dev_ctx_mg, &whoamI);
 80014ec:	f107 0308 	add.w	r3, r7, #8
 80014f0:	499b      	ldr	r1, [pc, #620]	; (8001760 <lsm303agr_read_data_polling+0x2bc>)
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 febb 	bl	800226e <lsm303agr_mag_device_id_get>

	if (whoamI != LSM303AGR_ID_MG)
 80014f8:	4b99      	ldr	r3, [pc, #612]	; (8001760 <lsm303agr_read_data_polling+0x2bc>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b40      	cmp	r3, #64	; 0x40
 80014fe:	d000      	beq.n	8001502 <lsm303agr_read_data_polling+0x5e>
		while (1)
 8001500:	e7fe      	b.n	8001500 <lsm303agr_read_data_polling+0x5c>
			; /*manage here device not found */

	/* Restore default configuration for magnetometer */
	lsm303agr_mag_reset_set(&dev_ctx_mg, PROPERTY_ENABLE);
 8001502:	f107 0308 	add.w	r3, r7, #8
 8001506:	2101      	movs	r1, #1
 8001508:	4618      	mov	r0, r3
 800150a:	f000 fec1 	bl	8002290 <lsm303agr_mag_reset_set>

	do {
		lsm303agr_mag_reset_get(&dev_ctx_mg, &rst);
 800150e:	f107 0308 	add.w	r3, r7, #8
 8001512:	4994      	ldr	r1, [pc, #592]	; (8001764 <lsm303agr_read_data_polling+0x2c0>)
 8001514:	4618      	mov	r0, r3
 8001516:	f000 fee1 	bl	80022dc <lsm303agr_mag_reset_get>
	} while (rst);
 800151a:	4b92      	ldr	r3, [pc, #584]	; (8001764 <lsm303agr_read_data_polling+0x2c0>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f5      	bne.n	800150e <lsm303agr_read_data_polling+0x6a>

	/* Enable Block Data Update */
	lsm303agr_xl_block_data_update_set(&dev_ctx_xl, PROPERTY_ENABLE);
 8001522:	f107 0318 	add.w	r3, r7, #24
 8001526:	2101      	movs	r1, #1
 8001528:	4618      	mov	r0, r3
 800152a:	f000 fd04 	bl	8001f36 <lsm303agr_xl_block_data_update_set>
	lsm303agr_mag_block_data_update_set(&dev_ctx_mg, PROPERTY_ENABLE);
 800152e:	f107 0308 	add.w	r3, r7, #8
 8001532:	2101      	movs	r1, #1
 8001534:	4618      	mov	r0, r3
 8001536:	f000 fe07 	bl	8002148 <lsm303agr_mag_block_data_update_set>
	/* Set Output Data Rate */
	lsm303agr_xl_data_rate_set(&dev_ctx_xl, LSM303AGR_XL_ODR_1Hz);
 800153a:	f107 0318 	add.w	r3, r7, #24
 800153e:	2101      	movs	r1, #1
 8001540:	4618      	mov	r0, r3
 8001542:	f000 fcac 	bl	8001e9e <lsm303agr_xl_data_rate_set>
	lsm303agr_mag_data_rate_set(&dev_ctx_mg, LSM303AGR_MG_ODR_10Hz);
 8001546:	f107 0308 	add.w	r3, r7, #8
 800154a:	2100      	movs	r1, #0
 800154c:	4618      	mov	r0, r3
 800154e:	f000 fd89 	bl	8002064 <lsm303agr_mag_data_rate_set>
	/* Set accelerometer full scale */
	lsm303agr_xl_full_scale_set(&dev_ctx_xl, LSM303AGR_2g);
 8001552:	f107 0318 	add.w	r3, r7, #24
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f000 fcc6 	bl	8001eea <lsm303agr_xl_full_scale_set>
	/* Set / Reset magnetic sensor mode */
	lsm303agr_mag_set_rst_mode_set(&dev_ctx_mg,
 800155e:	f107 0308 	add.w	r3, r7, #8
 8001562:	2101      	movs	r1, #1
 8001564:	4618      	mov	r0, r3
 8001566:	f000 fdc9 	bl	80020fc <lsm303agr_mag_set_rst_mode_set>
			LSM303AGR_SENS_OFF_CANC_EVERY_ODR);
	/* Enable temperature compensation on mag sensor */
	lsm303agr_mag_offset_temp_comp_set(&dev_ctx_mg, PROPERTY_ENABLE);
 800156a:	f107 0308 	add.w	r3, r7, #8
 800156e:	2101      	movs	r1, #1
 8001570:	4618      	mov	r0, r3
 8001572:	f000 fd9d 	bl	80020b0 <lsm303agr_mag_offset_temp_comp_set>
	/* Enable temperature sensor */
	lsm303agr_temperature_meas_set(&dev_ctx_xl, LSM303AGR_TEMP_ENABLE);
 8001576:	f107 0318 	add.w	r3, r7, #24
 800157a:	2103      	movs	r1, #3
 800157c:	4618      	mov	r0, r3
 800157e:	f000 fc10 	bl	8001da2 <lsm303agr_temperature_meas_set>
	/* Set device in continuous mode */
	lsm303agr_xl_operating_mode_set(&dev_ctx_xl, LSM303AGR_HR_12bit);
 8001582:	f107 0318 	add.w	r3, r7, #24
 8001586:	2100      	movs	r1, #0
 8001588:	4618      	mov	r0, r3
 800158a:	f000 fc30 	bl	8001dee <lsm303agr_xl_operating_mode_set>
	/* Set magnetometer in continuous mode */
	lsm303agr_mag_operating_mode_set(&dev_ctx_mg, LSM303AGR_CONTINUOUS_MODE);
 800158e:	f107 0308 	add.w	r3, r7, #8
 8001592:	2100      	movs	r1, #0
 8001594:	4618      	mov	r0, r3
 8001596:	f000 fd3f 	bl	8002018 <lsm303agr_mag_operating_mode_set>

	/* Read samples in polling mode (no int) */
	while (1) {
		/* Read output only if new value is available */
		lsm303agr_reg_t reg;
		lsm303agr_xl_status_get(&dev_ctx_xl, &reg.status_reg_a);
 800159a:	1d3a      	adds	r2, r7, #4
 800159c:	f107 0318 	add.w	r3, r7, #24
 80015a0:	4611      	mov	r1, r2
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 fe52 	bl	800224c <lsm303agr_xl_status_get>

		if (reg.status_reg_a.zyxda) {
 80015a8:	793b      	ldrb	r3, [r7, #4]
 80015aa:	f003 0308 	and.w	r3, r3, #8
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d048      	beq.n	8001646 <lsm303agr_read_data_polling+0x1a2>
			/* Read accelerometer data */
			memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 80015b4:	2206      	movs	r2, #6
 80015b6:	2100      	movs	r1, #0
 80015b8:	486b      	ldr	r0, [pc, #428]	; (8001768 <lsm303agr_read_data_polling+0x2c4>)
 80015ba:	f004 ff7d 	bl	80064b8 <memset>
			lsm303agr_acceleration_raw_get(&dev_ctx_xl, data_raw_acceleration);
 80015be:	f107 0318 	add.w	r3, r7, #24
 80015c2:	4969      	ldr	r1, [pc, #420]	; (8001768 <lsm303agr_read_data_polling+0x2c4>)
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 fcdc 	bl	8001f82 <lsm303agr_acceleration_raw_get>
			acceleration_mg[0] = lsm303agr_from_fs_2g_hr_to_mg(
 80015ca:	4b67      	ldr	r3, [pc, #412]	; (8001768 <lsm303agr_read_data_polling+0x2c4>)
 80015cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 fb57 	bl	8001c84 <lsm303agr_from_fs_2g_hr_to_mg>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4a64      	ldr	r2, [pc, #400]	; (800176c <lsm303agr_read_data_polling+0x2c8>)
 80015da:	6013      	str	r3, [r2, #0]
					data_raw_acceleration[0]);
			acceleration_mg[1] = lsm303agr_from_fs_2g_hr_to_mg(
 80015dc:	4b62      	ldr	r3, [pc, #392]	; (8001768 <lsm303agr_read_data_polling+0x2c4>)
 80015de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 fb4e 	bl	8001c84 <lsm303agr_from_fs_2g_hr_to_mg>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4a60      	ldr	r2, [pc, #384]	; (800176c <lsm303agr_read_data_polling+0x2c8>)
 80015ec:	6053      	str	r3, [r2, #4]
					data_raw_acceleration[1]);
			acceleration_mg[2] = lsm303agr_from_fs_2g_hr_to_mg(
 80015ee:	4b5e      	ldr	r3, [pc, #376]	; (8001768 <lsm303agr_read_data_polling+0x2c4>)
 80015f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 fb45 	bl	8001c84 <lsm303agr_from_fs_2g_hr_to_mg>
 80015fa:	4603      	mov	r3, r0
 80015fc:	4a5b      	ldr	r2, [pc, #364]	; (800176c <lsm303agr_read_data_polling+0x2c8>)
 80015fe:	6093      	str	r3, [r2, #8]
					data_raw_acceleration[2]);
			sprintf((char*) tx_buffer,
					"Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
					acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8001600:	4b5a      	ldr	r3, [pc, #360]	; (800176c <lsm303agr_read_data_polling+0x2c8>)
 8001602:	681b      	ldr	r3, [r3, #0]
			sprintf((char*) tx_buffer,
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe ff27 	bl	8000458 <__aeabi_f2d>
 800160a:	4680      	mov	r8, r0
 800160c:	4689      	mov	r9, r1
					acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 800160e:	4b57      	ldr	r3, [pc, #348]	; (800176c <lsm303agr_read_data_polling+0x2c8>)
 8001610:	685b      	ldr	r3, [r3, #4]
			sprintf((char*) tx_buffer,
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe ff20 	bl	8000458 <__aeabi_f2d>
 8001618:	4604      	mov	r4, r0
 800161a:	460d      	mov	r5, r1
					acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 800161c:	4b53      	ldr	r3, [pc, #332]	; (800176c <lsm303agr_read_data_polling+0x2c8>)
 800161e:	689b      	ldr	r3, [r3, #8]
			sprintf((char*) tx_buffer,
 8001620:	4618      	mov	r0, r3
 8001622:	f7fe ff19 	bl	8000458 <__aeabi_f2d>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800162e:	e9cd 4500 	strd	r4, r5, [sp]
 8001632:	4642      	mov	r2, r8
 8001634:	464b      	mov	r3, r9
 8001636:	494e      	ldr	r1, [pc, #312]	; (8001770 <lsm303agr_read_data_polling+0x2cc>)
 8001638:	484e      	ldr	r0, [pc, #312]	; (8001774 <lsm303agr_read_data_polling+0x2d0>)
 800163a:	f005 fc47 	bl	8006ecc <siprintf>
//			printf(tx_buffer, strlen((char const*) tx_buffer));
			printf("%s\r\n",tx_buffer);
 800163e:	494d      	ldr	r1, [pc, #308]	; (8001774 <lsm303agr_read_data_polling+0x2d0>)
 8001640:	484d      	ldr	r0, [pc, #308]	; (8001778 <lsm303agr_read_data_polling+0x2d4>)
 8001642:	f005 fba1 	bl	8006d88 <iprintf>
		}

		lsm303agr_mag_status_get(&dev_ctx_mg, &reg.status_reg_m);
 8001646:	1d3a      	adds	r2, r7, #4
 8001648:	f107 0308 	add.w	r3, r7, #8
 800164c:	4611      	mov	r1, r2
 800164e:	4618      	mov	r0, r3
 8001650:	f000 fe5d 	bl	800230e <lsm303agr_mag_status_get>

		if (reg.status_reg_m.zyxda) {
 8001654:	793b      	ldrb	r3, [r7, #4]
 8001656:	f003 0308 	and.w	r3, r3, #8
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b00      	cmp	r3, #0
 800165e:	d044      	beq.n	80016ea <lsm303agr_read_data_polling+0x246>
			/* Read magnetic field data */
			memset(data_raw_magnetic, 0x00, 3 * sizeof(int16_t));
 8001660:	2206      	movs	r2, #6
 8001662:	2100      	movs	r1, #0
 8001664:	4845      	ldr	r0, [pc, #276]	; (800177c <lsm303agr_read_data_polling+0x2d8>)
 8001666:	f004 ff27 	bl	80064b8 <memset>
			lsm303agr_magnetic_raw_get(&dev_ctx_mg, data_raw_magnetic);
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	4943      	ldr	r1, [pc, #268]	; (800177c <lsm303agr_read_data_polling+0x2d8>)
 8001670:	4618      	mov	r0, r3
 8001672:	f000 fd8f 	bl	8002194 <lsm303agr_magnetic_raw_get>
			magnetic_mG[0] = lsm303agr_from_lsb_to_mgauss(data_raw_magnetic[0]);
 8001676:	4b41      	ldr	r3, [pc, #260]	; (800177c <lsm303agr_read_data_polling+0x2d8>)
 8001678:	f9b3 3000 	ldrsh.w	r3, [r3]
 800167c:	4618      	mov	r0, r3
 800167e:	f000 fb3f 	bl	8001d00 <lsm303agr_from_lsb_to_mgauss>
 8001682:	4603      	mov	r3, r0
 8001684:	4a3e      	ldr	r2, [pc, #248]	; (8001780 <lsm303agr_read_data_polling+0x2dc>)
 8001686:	6013      	str	r3, [r2, #0]
			magnetic_mG[1] = lsm303agr_from_lsb_to_mgauss(data_raw_magnetic[1]);
 8001688:	4b3c      	ldr	r3, [pc, #240]	; (800177c <lsm303agr_read_data_polling+0x2d8>)
 800168a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800168e:	4618      	mov	r0, r3
 8001690:	f000 fb36 	bl	8001d00 <lsm303agr_from_lsb_to_mgauss>
 8001694:	4603      	mov	r3, r0
 8001696:	4a3a      	ldr	r2, [pc, #232]	; (8001780 <lsm303agr_read_data_polling+0x2dc>)
 8001698:	6053      	str	r3, [r2, #4]
			magnetic_mG[2] = lsm303agr_from_lsb_to_mgauss(data_raw_magnetic[2]);
 800169a:	4b38      	ldr	r3, [pc, #224]	; (800177c <lsm303agr_read_data_polling+0x2d8>)
 800169c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f000 fb2d 	bl	8001d00 <lsm303agr_from_lsb_to_mgauss>
 80016a6:	4603      	mov	r3, r0
 80016a8:	4a35      	ldr	r2, [pc, #212]	; (8001780 <lsm303agr_read_data_polling+0x2dc>)
 80016aa:	6093      	str	r3, [r2, #8]
			sprintf((char*) tx_buffer,
					"Magnetic field [mG]:%4.2f\t%4.2f\t%4.2f\r\n",
					magnetic_mG[0], magnetic_mG[1], magnetic_mG[2]);
 80016ac:	4b34      	ldr	r3, [pc, #208]	; (8001780 <lsm303agr_read_data_polling+0x2dc>)
 80016ae:	681b      	ldr	r3, [r3, #0]
			sprintf((char*) tx_buffer,
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe fed1 	bl	8000458 <__aeabi_f2d>
 80016b6:	4680      	mov	r8, r0
 80016b8:	4689      	mov	r9, r1
					magnetic_mG[0], magnetic_mG[1], magnetic_mG[2]);
 80016ba:	4b31      	ldr	r3, [pc, #196]	; (8001780 <lsm303agr_read_data_polling+0x2dc>)
 80016bc:	685b      	ldr	r3, [r3, #4]
			sprintf((char*) tx_buffer,
 80016be:	4618      	mov	r0, r3
 80016c0:	f7fe feca 	bl	8000458 <__aeabi_f2d>
 80016c4:	4604      	mov	r4, r0
 80016c6:	460d      	mov	r5, r1
					magnetic_mG[0], magnetic_mG[1], magnetic_mG[2]);
 80016c8:	4b2d      	ldr	r3, [pc, #180]	; (8001780 <lsm303agr_read_data_polling+0x2dc>)
 80016ca:	689b      	ldr	r3, [r3, #8]
			sprintf((char*) tx_buffer,
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7fe fec3 	bl	8000458 <__aeabi_f2d>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80016da:	e9cd 4500 	strd	r4, r5, [sp]
 80016de:	4642      	mov	r2, r8
 80016e0:	464b      	mov	r3, r9
 80016e2:	4928      	ldr	r1, [pc, #160]	; (8001784 <lsm303agr_read_data_polling+0x2e0>)
 80016e4:	4823      	ldr	r0, [pc, #140]	; (8001774 <lsm303agr_read_data_polling+0x2d0>)
 80016e6:	f005 fbf1 	bl	8006ecc <siprintf>
			//printf(tx_buffer, strlen((char const*) tx_buffer));
		}

		lsm303agr_temp_data_ready_get(&dev_ctx_xl, &reg.byte);
 80016ea:	1d3a      	adds	r2, r7, #4
 80016ec:	f107 0318 	add.w	r3, r7, #24
 80016f0:	4611      	mov	r1, r2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 fb19 	bl	8001d2a <lsm303agr_temp_data_ready_get>

		if (reg.byte) {
 80016f8:	793b      	ldrb	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f43f af4d 	beq.w	800159a <lsm303agr_read_data_polling+0xf6>
 8001700:	4b21      	ldr	r3, [pc, #132]	; (8001788 <lsm303agr_read_data_polling+0x2e4>)
 8001702:	2200      	movs	r2, #0
 8001704:	801a      	strh	r2, [r3, #0]
			/* Read temperature data */
			memset(&data_raw_temperature, 0x00, sizeof(int16_t));
			lsm303agr_temperature_raw_get(&dev_ctx_xl, &data_raw_temperature);
 8001706:	f107 0318 	add.w	r3, r7, #24
 800170a:	491f      	ldr	r1, [pc, #124]	; (8001788 <lsm303agr_read_data_polling+0x2e4>)
 800170c:	4618      	mov	r0, r3
 800170e:	f000 fb25 	bl	8001d5c <lsm303agr_temperature_raw_get>
			temperature_degC = lsm303agr_from_lsb_hr_to_celsius(
 8001712:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <lsm303agr_read_data_polling+0x2e4>)
 8001714:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001718:	4618      	mov	r0, r3
 800171a:	f000 facf 	bl	8001cbc <lsm303agr_from_lsb_hr_to_celsius>
 800171e:	4603      	mov	r3, r0
 8001720:	4a1a      	ldr	r2, [pc, #104]	; (800178c <lsm303agr_read_data_polling+0x2e8>)
 8001722:	6013      	str	r3, [r2, #0]
					data_raw_temperature);
			sprintf((char*) tx_buffer, "Temperature [degC]:%6.2f\r\n",
 8001724:	4b19      	ldr	r3, [pc, #100]	; (800178c <lsm303agr_read_data_polling+0x2e8>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f7fe fe95 	bl	8000458 <__aeabi_f2d>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4917      	ldr	r1, [pc, #92]	; (8001790 <lsm303agr_read_data_polling+0x2ec>)
 8001734:	480f      	ldr	r0, [pc, #60]	; (8001774 <lsm303agr_read_data_polling+0x2d0>)
 8001736:	f005 fbc9 	bl	8006ecc <siprintf>
					temperature_degC);
			tx_com(tx_buffer, strlen((char const*) tx_buffer));
 800173a:	480e      	ldr	r0, [pc, #56]	; (8001774 <lsm303agr_read_data_polling+0x2d0>)
 800173c:	f7fe fd20 	bl	8000180 <strlen>
 8001740:	4603      	mov	r3, r0
 8001742:	b29b      	uxth	r3, r3
 8001744:	4619      	mov	r1, r3
 8001746:	480b      	ldr	r0, [pc, #44]	; (8001774 <lsm303agr_read_data_polling+0x2d0>)
 8001748:	f000 f878 	bl	800183c <tx_com>
	while (1) {
 800174c:	e725      	b.n	800159a <lsm303agr_read_data_polling+0xf6>
 800174e:	bf00      	nop
 8001750:	08001795 	.word	0x08001795
 8001754:	080017e9 	.word	0x080017e9
 8001758:	20000000 	.word	0x20000000
 800175c:	20000010 	.word	0x20000010
 8001760:	200002e0 	.word	0x200002e0
 8001764:	200002e1 	.word	0x200002e1
 8001768:	200002b4 	.word	0x200002b4
 800176c:	200002c4 	.word	0x200002c4
 8001770:	08009488 	.word	0x08009488
 8001774:	200002e4 	.word	0x200002e4
 8001778:	080094b0 	.word	0x080094b0
 800177c:	200002bc 	.word	0x200002bc
 8001780:	200002d0 	.word	0x200002d0
 8001784:	080094b8 	.word	0x080094b8
 8001788:	200002c2 	.word	0x200002c2
 800178c:	200002dc 	.word	0x200002dc
 8001790:	080094e0 	.word	0x080094e0

08001794 <platform_write>:
		}
	}
}

static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
		uint16_t len) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	; 0x28
 8001798:	af04      	add	r7, sp, #16
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	607a      	str	r2, [r7, #4]
 800179e:	461a      	mov	r2, r3
 80017a0:	460b      	mov	r3, r1
 80017a2:	72fb      	strb	r3, [r7, #11]
 80017a4:	4613      	mov	r3, r2
 80017a6:	813b      	strh	r3, [r7, #8]
	sensbus_t *sensbus = (sensbus_t*) handle;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	617b      	str	r3, [r7, #20]

	if (sensbus->i2c_address == LSM303AGR_I2C_ADD_XL) {
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	791b      	ldrb	r3, [r3, #4]
 80017b0:	2b33      	cmp	r3, #51	; 0x33
 80017b2:	d103      	bne.n	80017bc <platform_write+0x28>
		/* enable auto incremented in multiple read/write commands */
		reg |= 0x80;
 80017b4:	7afb      	ldrb	r3, [r7, #11]
 80017b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017ba:	72fb      	strb	r3, [r7, #11]
	}

	HAL_I2C_Mem_Write(sensbus->hbus, sensbus->i2c_address, reg,
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	6818      	ldr	r0, [r3, #0]
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	791b      	ldrb	r3, [r3, #4]
 80017c4:	b299      	uxth	r1, r3
 80017c6:	7afb      	ldrb	r3, [r7, #11]
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ce:	9302      	str	r3, [sp, #8]
 80017d0:	893b      	ldrh	r3, [r7, #8]
 80017d2:	9301      	str	r3, [sp, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	2301      	movs	r3, #1
 80017da:	f001 fa6d 	bl	8002cb8 <HAL_I2C_Mem_Write>





	return 0;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <platform_read>:
 * @param  bufp      pointer to buffer that store the data read
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	; 0x28
 80017ec:	af04      	add	r7, sp, #16
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	461a      	mov	r2, r3
 80017f4:	460b      	mov	r3, r1
 80017f6:	72fb      	strb	r3, [r7, #11]
 80017f8:	4613      	mov	r3, r2
 80017fa:	813b      	strh	r3, [r7, #8]
	sensbus_t *sensbus = (sensbus_t*) handle;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	617b      	str	r3, [r7, #20]

	if (sensbus->i2c_address == LSM303AGR_I2C_ADD_XL) {
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	791b      	ldrb	r3, [r3, #4]
 8001804:	2b33      	cmp	r3, #51	; 0x33
 8001806:	d103      	bne.n	8001810 <platform_read+0x28>
		/* enable auto incremented in multiple read/write commands */
		reg |= 0x80;
 8001808:	7afb      	ldrb	r3, [r7, #11]
 800180a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800180e:	72fb      	strb	r3, [r7, #11]
	}

	HAL_I2C_Mem_Read(sensbus->hbus, sensbus->i2c_address, reg,
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	6818      	ldr	r0, [r3, #0]
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	791b      	ldrb	r3, [r3, #4]
 8001818:	b299      	uxth	r1, r3
 800181a:	7afb      	ldrb	r3, [r7, #11]
 800181c:	b29a      	uxth	r2, r3
 800181e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001822:	9302      	str	r3, [sp, #8]
 8001824:	893b      	ldrh	r3, [r7, #8]
 8001826:	9301      	str	r3, [sp, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	2301      	movs	r3, #1
 800182e:	f001 fb3d 	bl	8002eac <HAL_I2C_Mem_Read>



//	HAL_I2C_Master_Receive_IT(sensbus->hbus, sensbus->i2c_address, bufp, len);

	return 0;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <tx_com>:
 *
 * @param  tx_buffer     buffer to transmit
 * @param  len           number of byte to send
 *
 */
static void tx_com(uint8_t *tx_buffer, uint16_t len) {
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	807b      	strh	r3, [r7, #2]
//#elif defined(STEVAL_MKI109V3)
//  CDC_Transmit_FS(tx_buffer, len);
//#elif defined(SPC584B_DIS)
//  sd_lld_write(&SD2, tx_buffer, len);
//#endif
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr

08001852 <platform_delay>:
 * @brief  platform specific delay (platform dependent)
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms) {
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 fdd6 	bl	800240c <HAL_Delay>
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800186c:	b672      	cpsid	i
}
 800186e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001870:	e7fe      	b.n	8001870 <Error_Handler+0x8>
	...

08001874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <HAL_MspInit+0x5c>)
 800187c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187e:	4a14      	ldr	r2, [pc, #80]	; (80018d0 <HAL_MspInit+0x5c>)
 8001880:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001884:	6253      	str	r3, [r2, #36]	; 0x24
 8001886:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <HAL_MspInit+0x5c>)
 8001888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001892:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <HAL_MspInit+0x5c>)
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	4a0e      	ldr	r2, [pc, #56]	; (80018d0 <HAL_MspInit+0x5c>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6213      	str	r3, [r2, #32]
 800189e:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <HAL_MspInit+0x5c>)
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <HAL_MspInit+0x5c>)
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ae:	4a08      	ldr	r2, [pc, #32]	; (80018d0 <HAL_MspInit+0x5c>)
 80018b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b4:	6253      	str	r3, [r2, #36]	; 0x24
 80018b6:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <HAL_MspInit+0x5c>)
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018c2:	2007      	movs	r0, #7
 80018c4:	f000 fe90 	bl	80025e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018c8:	bf00      	nop
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40023800 	.word	0x40023800

080018d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08a      	sub	sp, #40	; 0x28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a1b      	ldr	r2, [pc, #108]	; (8001960 <HAL_I2C_MspInit+0x8c>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d12f      	bne.n	8001956 <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f6:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <HAL_I2C_MspInit+0x90>)
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	4a1a      	ldr	r2, [pc, #104]	; (8001964 <HAL_I2C_MspInit+0x90>)
 80018fc:	f043 0302 	orr.w	r3, r3, #2
 8001900:	61d3      	str	r3, [r2, #28]
 8001902:	4b18      	ldr	r3, [pc, #96]	; (8001964 <HAL_I2C_MspInit+0x90>)
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	613b      	str	r3, [r7, #16]
 800190c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BSP_LSM303_I2C_SCL_Pin|BSP_LDM303_I2C_SDA_Pin;
 800190e:	23c0      	movs	r3, #192	; 0xc0
 8001910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001912:	2312      	movs	r3, #18
 8001914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191a:	2303      	movs	r3, #3
 800191c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800191e:	2304      	movs	r3, #4
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001922:	f107 0314 	add.w	r3, r7, #20
 8001926:	4619      	mov	r1, r3
 8001928:	480f      	ldr	r0, [pc, #60]	; (8001968 <HAL_I2C_MspInit+0x94>)
 800192a:	f000 feed 	bl	8002708 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800192e:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <HAL_I2C_MspInit+0x90>)
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	4a0c      	ldr	r2, [pc, #48]	; (8001964 <HAL_I2C_MspInit+0x90>)
 8001934:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001938:	6253      	str	r3, [r2, #36]	; 0x24
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <HAL_I2C_MspInit+0x90>)
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	2100      	movs	r1, #0
 800194a:	201f      	movs	r0, #31
 800194c:	f000 fe57 	bl	80025fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001950:	201f      	movs	r0, #31
 8001952:	f000 fe70 	bl	8002636 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001956:	bf00      	nop
 8001958:	3728      	adds	r7, #40	; 0x28
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40005400 	.word	0x40005400
 8001964:	40023800 	.word	0x40023800
 8001968:	40020400 	.word	0x40020400

0800196c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	; 0x28
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a17      	ldr	r2, [pc, #92]	; (80019e8 <HAL_UART_MspInit+0x7c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d127      	bne.n	80019de <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800198e:	4b17      	ldr	r3, [pc, #92]	; (80019ec <HAL_UART_MspInit+0x80>)
 8001990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001992:	4a16      	ldr	r2, [pc, #88]	; (80019ec <HAL_UART_MspInit+0x80>)
 8001994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001998:	6253      	str	r3, [r2, #36]	; 0x24
 800199a:	4b14      	ldr	r3, [pc, #80]	; (80019ec <HAL_UART_MspInit+0x80>)
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a6:	4b11      	ldr	r3, [pc, #68]	; (80019ec <HAL_UART_MspInit+0x80>)
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	4a10      	ldr	r2, [pc, #64]	; (80019ec <HAL_UART_MspInit+0x80>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	61d3      	str	r3, [r2, #28]
 80019b2:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <HAL_UART_MspInit+0x80>)
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019be:	230c      	movs	r3, #12
 80019c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c2:	2302      	movs	r3, #2
 80019c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ca:	2303      	movs	r3, #3
 80019cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019ce:	2307      	movs	r3, #7
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	4619      	mov	r1, r3
 80019d8:	4805      	ldr	r0, [pc, #20]	; (80019f0 <HAL_UART_MspInit+0x84>)
 80019da:	f000 fe95 	bl	8002708 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019de:	bf00      	nop
 80019e0:	3728      	adds	r7, #40	; 0x28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40004400 	.word	0x40004400
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40020000 	.word	0x40020000

080019f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <NMI_Handler+0x4>

080019fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019fe:	e7fe      	b.n	80019fe <HardFault_Handler+0x4>

08001a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <MemManage_Handler+0x4>

08001a06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a0a:	e7fe      	b.n	8001a0a <BusFault_Handler+0x4>

08001a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <UsageFault_Handler+0x4>

08001a12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr

08001a1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr

08001a2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr

08001a36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a3a:	f000 fccb 	bl	80023d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001a48:	4802      	ldr	r0, [pc, #8]	; (8001a54 <I2C1_EV_IRQHandler+0x10>)
 8001a4a:	f001 fd83 	bl	8003554 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000218 	.word	0x20000218

08001a58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return 1;
 8001a5c:	2301      	movs	r3, #1
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr

08001a66 <_kill>:

int _kill(int pid, int sig)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
 8001a6e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a70:	f004 fcf8 	bl	8006464 <__errno>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2216      	movs	r2, #22
 8001a78:	601a      	str	r2, [r3, #0]
  return -1;
 8001a7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <_exit>:

void _exit (int status)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a8e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff ffe7 	bl	8001a66 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a98:	e7fe      	b.n	8001a98 <_exit+0x12>

08001a9a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b086      	sub	sp, #24
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	60f8      	str	r0, [r7, #12]
 8001aa2:	60b9      	str	r1, [r7, #8]
 8001aa4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	e00a      	b.n	8001ac2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aac:	f3af 8000 	nop.w
 8001ab0:	4601      	mov	r1, r0
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	1c5a      	adds	r2, r3, #1
 8001ab6:	60ba      	str	r2, [r7, #8]
 8001ab8:	b2ca      	uxtb	r2, r1
 8001aba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	dbf0      	blt.n	8001aac <_read+0x12>
  }

  return len;
 8001aca:	687b      	ldr	r3, [r7, #4]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
//  {
//    __io_putchar(*ptr++);
//  }


HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ae8:	68b9      	ldr	r1, [r7, #8]
 8001aea:	4804      	ldr	r0, [pc, #16]	; (8001afc <_write+0x28>)
 8001aec:	f004 fae4 	bl	80060b8 <HAL_UART_Transmit>



  return len;
 8001af0:	687b      	ldr	r3, [r7, #4]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	2000026c 	.word	0x2000026c

08001b00 <_close>:

int _close(int file)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr

08001b16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b26:	605a      	str	r2, [r3, #4]
  return 0;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr

08001b34 <_isatty>:

int _isatty(int file)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b3c:	2301      	movs	r3, #1
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b68:	4a14      	ldr	r2, [pc, #80]	; (8001bbc <_sbrk+0x5c>)
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <_sbrk+0x60>)
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b74:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <_sbrk+0x64>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d102      	bne.n	8001b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <_sbrk+0x64>)
 8001b7e:	4a12      	ldr	r2, [pc, #72]	; (8001bc8 <_sbrk+0x68>)
 8001b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b82:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <_sbrk+0x64>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d207      	bcs.n	8001ba0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b90:	f004 fc68 	bl	8006464 <__errno>
 8001b94:	4603      	mov	r3, r0
 8001b96:	220c      	movs	r2, #12
 8001b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b9e:	e009      	b.n	8001bb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <_sbrk+0x64>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ba6:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <_sbrk+0x64>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	4a05      	ldr	r2, [pc, #20]	; (8001bc4 <_sbrk+0x64>)
 8001bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20008000 	.word	0x20008000
 8001bc0:	00000400 	.word	0x00000400
 8001bc4:	200006cc 	.word	0x200006cc
 8001bc8:	200006e8 	.word	0x200006e8

08001bcc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr

08001bd8 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bd8:	f7ff fff8 	bl	8001bcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bdc:	480b      	ldr	r0, [pc, #44]	; (8001c0c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001bde:	490c      	ldr	r1, [pc, #48]	; (8001c10 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001be0:	4a0c      	ldr	r2, [pc, #48]	; (8001c14 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001be2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001be4:	e002      	b.n	8001bec <LoopCopyDataInit>

08001be6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001be6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001be8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bea:	3304      	adds	r3, #4

08001bec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf0:	d3f9      	bcc.n	8001be6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bf2:	4a09      	ldr	r2, [pc, #36]	; (8001c18 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001bf4:	4c09      	ldr	r4, [pc, #36]	; (8001c1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bf8:	e001      	b.n	8001bfe <LoopFillZerobss>

08001bfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bfc:	3204      	adds	r2, #4

08001bfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c00:	d3fb      	bcc.n	8001bfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c02:	f004 fc35 	bl	8006470 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c06:	f7ff fb73 	bl	80012f0 <main>
  bx lr
 8001c0a:	4770      	bx	lr
  ldr r0, =_sdata
 8001c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c10:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8001c14:	0800990c 	.word	0x0800990c
  ldr r2, =_sbss
 8001c18:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8001c1c:	200006e4 	.word	0x200006e4

08001c20 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c20:	e7fe      	b.n	8001c20 <ADC1_IRQHandler>

08001c22 <lsm303agr_read_reg>:
  *
  */
int32_t __weak lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 8001c22:	b590      	push	{r4, r7, lr}
 8001c24:	b087      	sub	sp, #28
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	60f8      	str	r0, [r7, #12]
 8001c2a:	607a      	str	r2, [r7, #4]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	460b      	mov	r3, r1
 8001c30:	72fb      	strb	r3, [r7, #11]
 8001c32:	4613      	mov	r3, r2
 8001c34:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	685c      	ldr	r4, [r3, #4]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	68d8      	ldr	r0, [r3, #12]
 8001c3e:	893b      	ldrh	r3, [r7, #8]
 8001c40:	7af9      	ldrb	r1, [r7, #11]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	47a0      	blx	r4
 8001c46:	6178      	str	r0, [r7, #20]

  return ret;
 8001c48:	697b      	ldr	r3, [r7, #20]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	371c      	adds	r7, #28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd90      	pop	{r4, r7, pc}

08001c52 <lsm303agr_write_reg>:
  *
  */
int32_t __weak lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8001c52:	b590      	push	{r4, r7, lr}
 8001c54:	b087      	sub	sp, #28
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	60f8      	str	r0, [r7, #12]
 8001c5a:	607a      	str	r2, [r7, #4]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	460b      	mov	r3, r1
 8001c60:	72fb      	strb	r3, [r7, #11]
 8001c62:	4613      	mov	r3, r2
 8001c64:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681c      	ldr	r4, [r3, #0]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	68d8      	ldr	r0, [r3, #12]
 8001c6e:	893b      	ldrh	r3, [r7, #8]
 8001c70:	7af9      	ldrb	r1, [r7, #11]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	47a0      	blx	r4
 8001c76:	6178      	str	r0, [r7, #20]

  return ret;
 8001c78:	697b      	ldr	r3, [r7, #20]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	371c      	adds	r7, #28
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd90      	pop	{r4, r7, pc}
	...

08001c84 <lsm303agr_from_fs_2g_hr_to_mg>:
  * @{
  *
  */

float_t lsm303agr_from_fs_2g_hr_to_mg(int16_t lsb)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 16.0f) * 0.98f;
 8001c8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe ffca 	bl	8000c2c <__aeabi_i2f>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff f8cc 	bl	8000e3c <__aeabi_fdiv>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	4904      	ldr	r1, [pc, #16]	; (8001cb8 <lsm303agr_from_fs_2g_hr_to_mg+0x34>)
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff f813 	bl	8000cd4 <__aeabi_fmul>
 8001cae:	4603      	mov	r3, r0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	3f7ae148 	.word	0x3f7ae148

08001cbc <lsm303agr_from_lsb_hr_to_celsius>:
{
  return ((float_t)lsb / 16.0f) * 11.72f;
}

float_t lsm303agr_from_lsb_hr_to_celsius(int16_t lsb)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 64.0f) / 4.0f) + 25.0f;
 8001cc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe ffae 	bl	8000c2c <__aeabi_i2f>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	f04f 4185 	mov.w	r1, #1115684864	; 0x42800000
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff f8b0 	bl	8000e3c <__aeabi_fdiv>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff f8aa 	bl	8000e3c <__aeabi_fdiv>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4904      	ldr	r1, [pc, #16]	; (8001cfc <lsm303agr_from_lsb_hr_to_celsius+0x40>)
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fee9 	bl	8000ac4 <__addsf3>
 8001cf2:	4603      	mov	r3, r0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	41c80000 	.word	0x41c80000

08001d00 <lsm303agr_from_lsb_to_mgauss>:
{
  return (((float_t)lsb / 256.0f) * 1.0f) + 25.0f;
}

float_t lsm303agr_from_lsb_to_mgauss(int16_t lsb)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 1.5f;
 8001d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe ff8c 	bl	8000c2c <__aeabi_i2f>
 8001d14:	4603      	mov	r3, r0
 8001d16:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe ffda 	bl	8000cd4 <__aeabi_fmul>
 8001d20:	4603      	mov	r3, r0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <lsm303agr_temp_data_ready_get>:
  * @param  val    Get the values of tda in reg STATUS_REG_AUX_A.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_temp_data_ready_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b084      	sub	sp, #16
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	6039      	str	r1, [r7, #0]
  lsm303agr_status_reg_aux_a_t status_reg_aux_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_STATUS_REG_AUX_A,
 8001d34:	f107 0208 	add.w	r2, r7, #8
 8001d38:	2301      	movs	r3, #1
 8001d3a:	2107      	movs	r1, #7
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff ff70 	bl	8001c22 <lsm303agr_read_reg>
 8001d42:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&status_reg_aux_a, 1);
  *val = status_reg_aux_a.tda;
 8001d44:	7a3b      	ldrb	r3, [r7, #8]
 8001d46:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	701a      	strb	r2, [r3, #0]

  return ret;
 8001d52:	68fb      	ldr	r3, [r7, #12]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <lsm303agr_temperature_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_TEMP_L_A, buff, 2);
 8001d66:	f107 0208 	add.w	r2, r7, #8
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	210c      	movs	r1, #12
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff ff57 	bl	8001c22 <lsm303agr_read_reg>
 8001d74:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 8001d76:	7a7b      	ldrb	r3, [r7, #9]
 8001d78:	b21a      	sxth	r2, r3
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	021b      	lsls	r3, r3, #8
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	7a3b      	ldrb	r3, [r7, #8]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	4413      	add	r3, r2
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	b21a      	sxth	r2, r3
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	801a      	strh	r2, [r3, #0]

  return ret;
 8001d98:	68fb      	ldr	r3, [r7, #12]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <lsm303agr_temperature_meas_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_temperature_meas_set(stmdev_ctx_t *ctx,
                                       lsm303agr_temp_en_a_t val)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b084      	sub	sp, #16
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
 8001daa:	460b      	mov	r3, r1
 8001dac:	70fb      	strb	r3, [r7, #3]
  lsm303agr_temp_cfg_reg_a_t temp_cfg_reg_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_TEMP_CFG_REG_A,
 8001dae:	f107 0208 	add.w	r2, r7, #8
 8001db2:	2301      	movs	r3, #1
 8001db4:	211f      	movs	r1, #31
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff ff33 	bl	8001c22 <lsm303agr_read_reg>
 8001dbc:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&temp_cfg_reg_a, 1);

  if (ret == 0)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10f      	bne.n	8001de4 <lsm303agr_temperature_meas_set+0x42>
  {
    temp_cfg_reg_a.temp_en = (uint8_t)val;
 8001dc4:	78fb      	ldrb	r3, [r7, #3]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	7a3b      	ldrb	r3, [r7, #8]
 8001dce:	f362 1387 	bfi	r3, r2, #6, #2
 8001dd2:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_TEMP_CFG_REG_A,
 8001dd4:	f107 0208 	add.w	r2, r7, #8
 8001dd8:	2301      	movs	r3, #1
 8001dda:	211f      	movs	r1, #31
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff ff38 	bl	8001c52 <lsm303agr_write_reg>
 8001de2:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&temp_cfg_reg_a, 1);
  }

  return ret;
 8001de4:	68fb      	ldr	r3, [r7, #12]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <lsm303agr_xl_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_set(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t val)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b086      	sub	sp, #24
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	460b      	mov	r3, r1
 8001df8:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  uint8_t lpen, hr;

  if (val == LSM303AGR_HR_12bit)
 8001dfa:	78fb      	ldrb	r3, [r7, #3]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d104      	bne.n	8001e0a <lsm303agr_xl_operating_mode_set+0x1c>
  {
    lpen = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	74fb      	strb	r3, [r7, #19]
    hr   = 1;
 8001e04:	2301      	movs	r3, #1
 8001e06:	74bb      	strb	r3, [r7, #18]
 8001e08:	e00b      	b.n	8001e22 <lsm303agr_xl_operating_mode_set+0x34>
  }

  else if (val == LSM303AGR_NM_10bit)
 8001e0a:	78fb      	ldrb	r3, [r7, #3]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d104      	bne.n	8001e1a <lsm303agr_xl_operating_mode_set+0x2c>
  {
    lpen = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	74fb      	strb	r3, [r7, #19]
    hr   = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	74bb      	strb	r3, [r7, #18]
 8001e18:	e003      	b.n	8001e22 <lsm303agr_xl_operating_mode_set+0x34>
  }

  else
  {
    lpen = 1;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	74fb      	strb	r3, [r7, #19]
    hr   = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	74bb      	strb	r3, [r7, #18]
  }

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8001e22:	f107 0210 	add.w	r2, r7, #16
 8001e26:	2301      	movs	r3, #1
 8001e28:	2120      	movs	r1, #32
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff fef9 	bl	8001c22 <lsm303agr_read_reg>
 8001e30:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);
  ctrl_reg1_a.lpen = (uint8_t)lpen;
 8001e32:	7cfb      	ldrb	r3, [r7, #19]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	7c3b      	ldrb	r3, [r7, #16]
 8001e3c:	f362 03c3 	bfi	r3, r2, #3, #1
 8001e40:	743b      	strb	r3, [r7, #16]

  if (ret == 0)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d107      	bne.n	8001e58 <lsm303agr_xl_operating_mode_set+0x6a>
  {
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8001e48:	f107 0210 	add.w	r2, r7, #16
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	2120      	movs	r1, #32
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff fefe 	bl	8001c52 <lsm303agr_write_reg>
 8001e56:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  if (ret == 0)
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d107      	bne.n	8001e6e <lsm303agr_xl_operating_mode_set+0x80>
  {
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8001e5e:	f107 020c 	add.w	r2, r7, #12
 8001e62:	2301      	movs	r3, #1
 8001e64:	2123      	movs	r1, #35	; 0x23
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff fedb 	bl	8001c22 <lsm303agr_read_reg>
 8001e6c:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if (ret == 0)
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d10f      	bne.n	8001e94 <lsm303agr_xl_operating_mode_set+0xa6>
  {
    ctrl_reg4_a.hr = hr;
 8001e74:	7cbb      	ldrb	r3, [r7, #18]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	7b3b      	ldrb	r3, [r7, #12]
 8001e7e:	f362 03c3 	bfi	r3, r2, #3, #1
 8001e82:	733b      	strb	r3, [r7, #12]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8001e84:	f107 020c 	add.w	r2, r7, #12
 8001e88:	2301      	movs	r3, #1
 8001e8a:	2123      	movs	r1, #35	; 0x23
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff fee0 	bl	8001c52 <lsm303agr_write_reg>
 8001e92:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8001e94:	697b      	ldr	r3, [r7, #20]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b084      	sub	sp, #16
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8001eaa:	f107 0208 	add.w	r2, r7, #8
 8001eae:	2301      	movs	r3, #1
 8001eb0:	2120      	movs	r1, #32
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff feb5 	bl	8001c22 <lsm303agr_read_reg>
 8001eb8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10f      	bne.n	8001ee0 <lsm303agr_xl_data_rate_set+0x42>
  {
    ctrl_reg1_a.odr = (uint8_t)val;
 8001ec0:	78fb      	ldrb	r3, [r7, #3]
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	7a3b      	ldrb	r3, [r7, #8]
 8001eca:	f362 1307 	bfi	r3, r2, #4, #4
 8001ece:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8001ed0:	f107 0208 	add.w	r2, r7, #8
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	2120      	movs	r1, #32
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff feba 	bl	8001c52 <lsm303agr_write_reg>
 8001ede:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b084      	sub	sp, #16
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8001ef6:	f107 0208 	add.w	r2, r7, #8
 8001efa:	2301      	movs	r3, #1
 8001efc:	2123      	movs	r1, #35	; 0x23
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff fe8f 	bl	8001c22 <lsm303agr_read_reg>
 8001f04:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10f      	bne.n	8001f2c <lsm303agr_xl_full_scale_set+0x42>
  {
    ctrl_reg4_a.fs = (uint8_t)val;
 8001f0c:	78fb      	ldrb	r3, [r7, #3]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	7a3b      	ldrb	r3, [r7, #8]
 8001f16:	f362 1305 	bfi	r3, r2, #4, #2
 8001f1a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8001f1c:	f107 0208 	add.w	r2, r7, #8
 8001f20:	2301      	movs	r3, #1
 8001f22:	2123      	movs	r1, #35	; 0x23
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff fe94 	bl	8001c52 <lsm303agr_write_reg>
 8001f2a:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b084      	sub	sp, #16
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
 8001f3e:	460b      	mov	r3, r1
 8001f40:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8001f42:	f107 0208 	add.w	r2, r7, #8
 8001f46:	2301      	movs	r3, #1
 8001f48:	2123      	movs	r1, #35	; 0x23
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7ff fe69 	bl	8001c22 <lsm303agr_read_reg>
 8001f50:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d10f      	bne.n	8001f78 <lsm303agr_xl_block_data_update_set+0x42>
  {
    ctrl_reg4_a.bdu = (uint8_t)val;
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	7a3b      	ldrb	r3, [r7, #8]
 8001f62:	f362 13c7 	bfi	r3, r2, #7, #1
 8001f66:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8001f68:	f107 0208 	add.w	r2, r7, #8
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	2123      	movs	r1, #35	; 0x23
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7ff fe6e 	bl	8001c52 <lsm303agr_write_reg>
 8001f76:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8001f78:	68fb      	ldr	r3, [r7, #12]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b086      	sub	sp, #24
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8001f8c:	f107 020c 	add.w	r2, r7, #12
 8001f90:	2306      	movs	r3, #6
 8001f92:	2128      	movs	r1, #40	; 0x28
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7ff fe44 	bl	8001c22 <lsm303agr_read_reg>
 8001f9a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001f9c:	7b7b      	ldrb	r3, [r7, #13]
 8001f9e:	b21a      	sxth	r2, r3
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	021b      	lsls	r3, r3, #8
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	7b3b      	ldrb	r3, [r7, #12]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	b21a      	sxth	r2, r3
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001fbe:	7bfa      	ldrb	r2, [r7, #15]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	3302      	adds	r3, #2
 8001fc4:	b212      	sxth	r2, r2
 8001fc6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	3302      	adds	r3, #2
 8001fcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	021b      	lsls	r3, r3, #8
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	7bbb      	ldrb	r3, [r7, #14]
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	4413      	add	r3, r2
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	b212      	sxth	r2, r2
 8001fe4:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001fe6:	7c7a      	ldrb	r2, [r7, #17]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	3304      	adds	r3, #4
 8001fec:	b212      	sxth	r2, r2
 8001fee:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	3304      	adds	r3, #4
 8001ff4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	021b      	lsls	r3, r3, #8
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	7c3b      	ldrb	r3, [r7, #16]
 8002000:	b29b      	uxth	r3, r3
 8002002:	4413      	add	r3, r2
 8002004:	b29a      	uxth	r2, r3
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	3304      	adds	r3, #4
 800200a:	b212      	sxth	r2, r2
 800200c:	801a      	strh	r2, [r3, #0]

  return ret;
 800200e:	697b      	ldr	r3, [r7, #20]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8002024:	f107 0208 	add.w	r2, r7, #8
 8002028:	2301      	movs	r3, #1
 800202a:	2160      	movs	r1, #96	; 0x60
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff fdf8 	bl	8001c22 <lsm303agr_read_reg>
 8002032:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10f      	bne.n	800205a <lsm303agr_mag_operating_mode_set+0x42>
  {
    cfg_reg_a_m.md = (uint8_t)val;
 800203a:	78fb      	ldrb	r3, [r7, #3]
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	b2da      	uxtb	r2, r3
 8002042:	7a3b      	ldrb	r3, [r7, #8]
 8002044:	f362 0301 	bfi	r3, r2, #0, #2
 8002048:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800204a:	f107 0208 	add.w	r2, r7, #8
 800204e:	2301      	movs	r3, #1
 8002050:	2160      	movs	r1, #96	; 0x60
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff fdfd 	bl	8001c52 <lsm303agr_write_reg>
 8002058:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 800205a:	68fb      	ldr	r3, [r7, #12]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8002070:	f107 0208 	add.w	r2, r7, #8
 8002074:	2301      	movs	r3, #1
 8002076:	2160      	movs	r1, #96	; 0x60
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff fdd2 	bl	8001c22 <lsm303agr_read_reg>
 800207e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10f      	bne.n	80020a6 <lsm303agr_mag_data_rate_set+0x42>
  {
    cfg_reg_a_m.odr = (uint8_t)val;
 8002086:	78fb      	ldrb	r3, [r7, #3]
 8002088:	f003 0303 	and.w	r3, r3, #3
 800208c:	b2da      	uxtb	r2, r3
 800208e:	7a3b      	ldrb	r3, [r7, #8]
 8002090:	f362 0383 	bfi	r3, r2, #2, #2
 8002094:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8002096:	f107 0208 	add.w	r2, r7, #8
 800209a:	2301      	movs	r3, #1
 800209c:	2160      	movs	r1, #96	; 0x60
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff fdd7 	bl	8001c52 <lsm303agr_write_reg>
 80020a4:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 80020a6:	68fb      	ldr	r3, [r7, #12]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <lsm303agr_mag_offset_temp_comp_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_offset_temp_comp_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	460b      	mov	r3, r1
 80020ba:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80020bc:	f107 0208 	add.w	r2, r7, #8
 80020c0:	2301      	movs	r3, #1
 80020c2:	2160      	movs	r1, #96	; 0x60
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff fdac 	bl	8001c22 <lsm303agr_read_reg>
 80020ca:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10f      	bne.n	80020f2 <lsm303agr_mag_offset_temp_comp_set+0x42>
  {
    cfg_reg_a_m.comp_temp_en = (uint8_t)val;
 80020d2:	78fb      	ldrb	r3, [r7, #3]
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	7a3b      	ldrb	r3, [r7, #8]
 80020dc:	f362 13c7 	bfi	r3, r2, #7, #1
 80020e0:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80020e2:	f107 0208 	add.w	r2, r7, #8
 80020e6:	2301      	movs	r3, #1
 80020e8:	2160      	movs	r1, #96	; 0x60
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff fdb1 	bl	8001c52 <lsm303agr_write_reg>
 80020f0:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 80020f2:	68fb      	ldr	r3, [r7, #12]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <lsm303agr_mag_set_rst_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_set_rst_mode_set(stmdev_ctx_t *ctx,
                                       lsm303agr_set_rst_m_t val)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_b_m_t cfg_reg_b_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_B_M,
 8002108:	f107 0208 	add.w	r2, r7, #8
 800210c:	2301      	movs	r3, #1
 800210e:	2161      	movs	r1, #97	; 0x61
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff fd86 	bl	8001c22 <lsm303agr_read_reg>
 8002116:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_b_m, 1);

  if (ret == 0)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10f      	bne.n	800213e <lsm303agr_mag_set_rst_mode_set+0x42>
  {
    cfg_reg_b_m.set_rst = (uint8_t)val;
 800211e:	78fb      	ldrb	r3, [r7, #3]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	b2da      	uxtb	r2, r3
 8002126:	7a3b      	ldrb	r3, [r7, #8]
 8002128:	f362 0342 	bfi	r3, r2, #1, #2
 800212c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_B_M,
 800212e:	f107 0208 	add.w	r2, r7, #8
 8002132:	2301      	movs	r3, #1
 8002134:	2161      	movs	r1, #97	; 0x61
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff fd8b 	bl	8001c52 <lsm303agr_write_reg>
 800213c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_b_m, 1);
  }

  return ret;
 800213e:	68fb      	ldr	r3, [r7, #12]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8002154:	f107 0208 	add.w	r2, r7, #8
 8002158:	2301      	movs	r3, #1
 800215a:	2162      	movs	r1, #98	; 0x62
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f7ff fd60 	bl	8001c22 <lsm303agr_read_reg>
 8002162:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10f      	bne.n	800218a <lsm303agr_mag_block_data_update_set+0x42>
  {
    cfg_reg_c_m.bdu = (uint8_t)val;
 800216a:	78fb      	ldrb	r3, [r7, #3]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	b2da      	uxtb	r2, r3
 8002172:	7a3b      	ldrb	r3, [r7, #8]
 8002174:	f362 1304 	bfi	r3, r2, #4, #1
 8002178:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800217a:	f107 0208 	add.w	r2, r7, #8
 800217e:	2301      	movs	r3, #1
 8002180:	2162      	movs	r1, #98	; 0x62
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff fd65 	bl	8001c52 <lsm303agr_write_reg>
 8002188:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 800218a:	68fb      	ldr	r3, [r7, #12]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 800219e:	f107 020c 	add.w	r2, r7, #12
 80021a2:	2306      	movs	r3, #6
 80021a4:	2168      	movs	r1, #104	; 0x68
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff fd3b 	bl	8001c22 <lsm303agr_read_reg>
 80021ac:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80021ae:	7b7b      	ldrb	r3, [r7, #13]
 80021b0:	b21a      	sxth	r2, r3
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021bc:	b29b      	uxth	r3, r3
 80021be:	021b      	lsls	r3, r3, #8
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	7b3b      	ldrb	r3, [r7, #12]
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	4413      	add	r3, r2
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	b21a      	sxth	r2, r3
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80021d0:	7bfa      	ldrb	r2, [r7, #15]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	3302      	adds	r3, #2
 80021d6:	b212      	sxth	r2, r2
 80021d8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	3302      	adds	r3, #2
 80021de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	021b      	lsls	r3, r3, #8
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	7bbb      	ldrb	r3, [r7, #14]
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	4413      	add	r3, r2
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	3302      	adds	r3, #2
 80021f4:	b212      	sxth	r2, r2
 80021f6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80021f8:	7c7a      	ldrb	r2, [r7, #17]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	3304      	adds	r3, #4
 80021fe:	b212      	sxth	r2, r2
 8002200:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	3304      	adds	r3, #4
 8002206:	f9b3 3000 	ldrsh.w	r3, [r3]
 800220a:	b29b      	uxth	r3, r3
 800220c:	021b      	lsls	r3, r3, #8
 800220e:	b29a      	uxth	r2, r3
 8002210:	7c3b      	ldrb	r3, [r7, #16]
 8002212:	b29b      	uxth	r3, r3
 8002214:	4413      	add	r3, r2
 8002216:	b29a      	uxth	r2, r3
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	3304      	adds	r3, #4
 800221c:	b212      	sxth	r2, r2
 800221e:	801a      	strh	r2, [r3, #0]

  return ret;
 8002220:	697b      	ldr	r3, [r7, #20]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b084      	sub	sp, #16
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 8002234:	2301      	movs	r3, #1
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	210f      	movs	r1, #15
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff fcf1 	bl	8001c22 <lsm303agr_read_reg>
 8002240:	60f8      	str	r0, [r7, #12]

  return ret;
 8002242:	68fb      	ldr	r3, [r7, #12]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <lsm303agr_xl_status_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_status_get(stmdev_ctx_t *ctx,
                                lsm303agr_status_reg_a_t *val)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_STATUS_REG_A, (uint8_t *) val, 1);
 8002256:	2301      	movs	r3, #1
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	2127      	movs	r1, #39	; 0x27
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff fce0 	bl	8001c22 <lsm303agr_read_reg>
 8002262:	60f8      	str	r0, [r7, #12]

  return ret;
 8002264:	68fb      	ldr	r3, [r7, #12]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b084      	sub	sp, #16
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 8002278:	2301      	movs	r3, #1
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	214f      	movs	r1, #79	; 0x4f
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7ff fccf 	bl	8001c22 <lsm303agr_read_reg>
 8002284:	60f8      	str	r0, [r7, #12]

  return ret;
 8002286:	68fb      	ldr	r3, [r7, #12]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <lsm303agr_mag_reset_set>:
  * @param  val    Change the values of soft_rst in reg CFG_REG_A_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800229c:	f107 0208 	add.w	r2, r7, #8
 80022a0:	2301      	movs	r3, #1
 80022a2:	2160      	movs	r1, #96	; 0x60
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f7ff fcbc 	bl	8001c22 <lsm303agr_read_reg>
 80022aa:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10f      	bne.n	80022d2 <lsm303agr_mag_reset_set+0x42>
  {
    cfg_reg_a_m.soft_rst = (uint8_t)val;
 80022b2:	78fb      	ldrb	r3, [r7, #3]
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	7a3b      	ldrb	r3, [r7, #8]
 80022bc:	f362 1345 	bfi	r3, r2, #5, #1
 80022c0:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80022c2:	f107 0208 	add.w	r2, r7, #8
 80022c6:	2301      	movs	r3, #1
 80022c8:	2160      	movs	r1, #96	; 0x60
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7ff fcc1 	bl	8001c52 <lsm303agr_write_reg>
 80022d0:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 80022d2:	68fb      	ldr	r3, [r7, #12]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <lsm303agr_mag_reset_get>:
  * @param  val    Change the values of soft_rst in reg CFG_REG_A_M.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80022e6:	f107 0208 	add.w	r2, r7, #8
 80022ea:	2301      	movs	r3, #1
 80022ec:	2160      	movs	r1, #96	; 0x60
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff fc97 	bl	8001c22 <lsm303agr_read_reg>
 80022f4:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);
  *val = cfg_reg_a_m.soft_rst;
 80022f6:	7a3b      	ldrb	r3, [r7, #8]
 80022f8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	461a      	mov	r2, r3
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	701a      	strb	r2, [r3, #0]

  return ret;
 8002304:	68fb      	ldr	r3, [r7, #12]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <lsm303agr_mag_status_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_status_get(stmdev_ctx_t *ctx,
                                 lsm303agr_status_reg_m_t *val)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b084      	sub	sp, #16
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_STATUS_REG_M, (uint8_t *) val, 1);
 8002318:	2301      	movs	r3, #1
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	2167      	movs	r1, #103	; 0x67
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7ff fc7f 	bl	8001c22 <lsm303agr_read_reg>
 8002324:	60f8      	str	r0, [r7, #12]

  return ret;
 8002326:	68fb      	ldr	r3, [r7, #12]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002336:	2300      	movs	r3, #0
 8002338:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800233a:	2003      	movs	r0, #3
 800233c:	f000 f954 	bl	80025e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002340:	2000      	movs	r0, #0
 8002342:	f000 f80d 	bl	8002360 <HAL_InitTick>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d002      	beq.n	8002352 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	71fb      	strb	r3, [r7, #7]
 8002350:	e001      	b.n	8002356 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002352:	f7ff fa8f 	bl	8001874 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002356:	79fb      	ldrb	r3, [r7, #7]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002368:	2300      	movs	r3, #0
 800236a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800236c:	4b16      	ldr	r3, [pc, #88]	; (80023c8 <HAL_InitTick+0x68>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d022      	beq.n	80023ba <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002374:	4b15      	ldr	r3, [pc, #84]	; (80023cc <HAL_InitTick+0x6c>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <HAL_InitTick+0x68>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002380:	fbb1 f3f3 	udiv	r3, r1, r3
 8002384:	fbb2 f3f3 	udiv	r3, r2, r3
 8002388:	4618      	mov	r0, r3
 800238a:	f000 f962 	bl	8002652 <HAL_SYSTICK_Config>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10f      	bne.n	80023b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b0f      	cmp	r3, #15
 8002398:	d809      	bhi.n	80023ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800239a:	2200      	movs	r2, #0
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023a2:	f000 f92c 	bl	80025fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023a6:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <HAL_InitTick+0x70>)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	e007      	b.n	80023be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	73fb      	strb	r3, [r7, #15]
 80023b2:	e004      	b.n	80023be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	73fb      	strb	r3, [r7, #15]
 80023b8:	e001      	b.n	80023be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023be:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20000028 	.word	0x20000028
 80023cc:	20000020 	.word	0x20000020
 80023d0:	20000024 	.word	0x20000024

080023d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023d8:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <HAL_IncTick+0x1c>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <HAL_IncTick+0x20>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4413      	add	r3, r2
 80023e2:	4a03      	ldr	r2, [pc, #12]	; (80023f0 <HAL_IncTick+0x1c>)
 80023e4:	6013      	str	r3, [r2, #0]
}
 80023e6:	bf00      	nop
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	200006d0 	.word	0x200006d0
 80023f4:	20000028 	.word	0x20000028

080023f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return uwTick;
 80023fc:	4b02      	ldr	r3, [pc, #8]	; (8002408 <HAL_GetTick+0x10>)
 80023fe:	681b      	ldr	r3, [r3, #0]
}
 8002400:	4618      	mov	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr
 8002408:	200006d0 	.word	0x200006d0

0800240c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002414:	f7ff fff0 	bl	80023f8 <HAL_GetTick>
 8002418:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002424:	d004      	beq.n	8002430 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002426:	4b09      	ldr	r3, [pc, #36]	; (800244c <HAL_Delay+0x40>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	4413      	add	r3, r2
 800242e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002430:	bf00      	nop
 8002432:	f7ff ffe1 	bl	80023f8 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	429a      	cmp	r2, r3
 8002440:	d8f7      	bhi.n	8002432 <HAL_Delay+0x26>
  {
  }
}
 8002442:	bf00      	nop
 8002444:	bf00      	nop
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20000028 	.word	0x20000028

08002450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002460:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <__NVIC_SetPriorityGrouping+0x44>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800246c:	4013      	ands	r3, r2
 800246e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002478:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800247c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002482:	4a04      	ldr	r2, [pc, #16]	; (8002494 <__NVIC_SetPriorityGrouping+0x44>)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	60d3      	str	r3, [r2, #12]
}
 8002488:	bf00      	nop
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800249c:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <__NVIC_GetPriorityGrouping+0x18>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	0a1b      	lsrs	r3, r3, #8
 80024a2:	f003 0307 	and.w	r3, r3, #7
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bc80      	pop	{r7}
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	db0b      	blt.n	80024de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024c6:	79fb      	ldrb	r3, [r7, #7]
 80024c8:	f003 021f 	and.w	r2, r3, #31
 80024cc:	4906      	ldr	r1, [pc, #24]	; (80024e8 <__NVIC_EnableIRQ+0x34>)
 80024ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d2:	095b      	lsrs	r3, r3, #5
 80024d4:	2001      	movs	r0, #1
 80024d6:	fa00 f202 	lsl.w	r2, r0, r2
 80024da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr
 80024e8:	e000e100 	.word	0xe000e100

080024ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	6039      	str	r1, [r7, #0]
 80024f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	db0a      	blt.n	8002516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	b2da      	uxtb	r2, r3
 8002504:	490c      	ldr	r1, [pc, #48]	; (8002538 <__NVIC_SetPriority+0x4c>)
 8002506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250a:	0112      	lsls	r2, r2, #4
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	440b      	add	r3, r1
 8002510:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002514:	e00a      	b.n	800252c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	b2da      	uxtb	r2, r3
 800251a:	4908      	ldr	r1, [pc, #32]	; (800253c <__NVIC_SetPriority+0x50>)
 800251c:	79fb      	ldrb	r3, [r7, #7]
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	3b04      	subs	r3, #4
 8002524:	0112      	lsls	r2, r2, #4
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	440b      	add	r3, r1
 800252a:	761a      	strb	r2, [r3, #24]
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	e000e100 	.word	0xe000e100
 800253c:	e000ed00 	.word	0xe000ed00

08002540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002540:	b480      	push	{r7}
 8002542:	b089      	sub	sp, #36	; 0x24
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f1c3 0307 	rsb	r3, r3, #7
 800255a:	2b04      	cmp	r3, #4
 800255c:	bf28      	it	cs
 800255e:	2304      	movcs	r3, #4
 8002560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	3304      	adds	r3, #4
 8002566:	2b06      	cmp	r3, #6
 8002568:	d902      	bls.n	8002570 <NVIC_EncodePriority+0x30>
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	3b03      	subs	r3, #3
 800256e:	e000      	b.n	8002572 <NVIC_EncodePriority+0x32>
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002574:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43da      	mvns	r2, r3
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	401a      	ands	r2, r3
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002588:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	fa01 f303 	lsl.w	r3, r1, r3
 8002592:	43d9      	mvns	r1, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002598:	4313      	orrs	r3, r2
         );
}
 800259a:	4618      	mov	r0, r3
 800259c:	3724      	adds	r7, #36	; 0x24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr

080025a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025b4:	d301      	bcc.n	80025ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025b6:	2301      	movs	r3, #1
 80025b8:	e00f      	b.n	80025da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ba:	4a0a      	ldr	r2, [pc, #40]	; (80025e4 <SysTick_Config+0x40>)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3b01      	subs	r3, #1
 80025c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025c2:	210f      	movs	r1, #15
 80025c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025c8:	f7ff ff90 	bl	80024ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025cc:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <SysTick_Config+0x40>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025d2:	4b04      	ldr	r3, [pc, #16]	; (80025e4 <SysTick_Config+0x40>)
 80025d4:	2207      	movs	r2, #7
 80025d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	e000e010 	.word	0xe000e010

080025e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f7ff ff2d 	bl	8002450 <__NVIC_SetPriorityGrouping>
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b086      	sub	sp, #24
 8002602:	af00      	add	r7, sp, #0
 8002604:	4603      	mov	r3, r0
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	607a      	str	r2, [r7, #4]
 800260a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800260c:	2300      	movs	r3, #0
 800260e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002610:	f7ff ff42 	bl	8002498 <__NVIC_GetPriorityGrouping>
 8002614:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	68b9      	ldr	r1, [r7, #8]
 800261a:	6978      	ldr	r0, [r7, #20]
 800261c:	f7ff ff90 	bl	8002540 <NVIC_EncodePriority>
 8002620:	4602      	mov	r2, r0
 8002622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002626:	4611      	mov	r1, r2
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff ff5f 	bl	80024ec <__NVIC_SetPriority>
}
 800262e:	bf00      	nop
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
 800263c:	4603      	mov	r3, r0
 800263e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff ff35 	bl	80024b4 <__NVIC_EnableIRQ>
}
 800264a:	bf00      	nop
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b082      	sub	sp, #8
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7ff ffa2 	bl	80025a4 <SysTick_Config>
 8002660:	4603      	mov	r3, r0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d005      	beq.n	800268e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2204      	movs	r2, #4
 8002686:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	73fb      	strb	r3, [r7, #15]
 800268c:	e029      	b.n	80026e2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 020e 	bic.w	r2, r2, #14
 800269c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0201 	bic.w	r2, r2, #1
 80026ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f003 021c 	and.w	r2, r3, #28
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ba:	2101      	movs	r1, #1
 80026bc:	fa01 f202 	lsl.w	r2, r1, r2
 80026c0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	4798      	blx	r3
    }
  }
  return status;
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026fa:	b2db      	uxtb	r3, r3
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr
	...

08002708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002708:	b480      	push	{r7}
 800270a:	b087      	sub	sp, #28
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002716:	2300      	movs	r3, #0
 8002718:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800271a:	2300      	movs	r3, #0
 800271c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800271e:	e154      	b.n	80029ca <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	2101      	movs	r1, #1
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	fa01 f303 	lsl.w	r3, r1, r3
 800272c:	4013      	ands	r3, r2
 800272e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 8146 	beq.w	80029c4 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 0303 	and.w	r3, r3, #3
 8002740:	2b01      	cmp	r3, #1
 8002742:	d005      	beq.n	8002750 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800274c:	2b02      	cmp	r3, #2
 800274e:	d130      	bne.n	80027b2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	2203      	movs	r2, #3
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	4013      	ands	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	4313      	orrs	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002786:	2201      	movs	r2, #1
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43db      	mvns	r3, r3
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4013      	ands	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	091b      	lsrs	r3, r3, #4
 800279c:	f003 0201 	and.w	r2, r3, #1
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	2b03      	cmp	r3, #3
 80027bc:	d017      	beq.n	80027ee <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	2203      	movs	r2, #3
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43db      	mvns	r3, r3
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	4013      	ands	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	689a      	ldr	r2, [r3, #8]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d123      	bne.n	8002842 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	08da      	lsrs	r2, r3, #3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	3208      	adds	r2, #8
 8002802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002806:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	220f      	movs	r2, #15
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43db      	mvns	r3, r3
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	4013      	ands	r3, r2
 800281c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	691a      	ldr	r2, [r3, #16]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	4313      	orrs	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	08da      	lsrs	r2, r3, #3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3208      	adds	r2, #8
 800283c:	6939      	ldr	r1, [r7, #16]
 800283e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	2203      	movs	r2, #3
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	4013      	ands	r3, r2
 8002858:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f003 0203 	and.w	r2, r3, #3
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 80a0 	beq.w	80029c4 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002884:	4b58      	ldr	r3, [pc, #352]	; (80029e8 <HAL_GPIO_Init+0x2e0>)
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	4a57      	ldr	r2, [pc, #348]	; (80029e8 <HAL_GPIO_Init+0x2e0>)
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	6213      	str	r3, [r2, #32]
 8002890:	4b55      	ldr	r3, [pc, #340]	; (80029e8 <HAL_GPIO_Init+0x2e0>)
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800289c:	4a53      	ldr	r2, [pc, #332]	; (80029ec <HAL_GPIO_Init+0x2e4>)
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	089b      	lsrs	r3, r3, #2
 80028a2:	3302      	adds	r3, #2
 80028a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	220f      	movs	r2, #15
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	4013      	ands	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a4b      	ldr	r2, [pc, #300]	; (80029f0 <HAL_GPIO_Init+0x2e8>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d019      	beq.n	80028fc <HAL_GPIO_Init+0x1f4>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a4a      	ldr	r2, [pc, #296]	; (80029f4 <HAL_GPIO_Init+0x2ec>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d013      	beq.n	80028f8 <HAL_GPIO_Init+0x1f0>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a49      	ldr	r2, [pc, #292]	; (80029f8 <HAL_GPIO_Init+0x2f0>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d00d      	beq.n	80028f4 <HAL_GPIO_Init+0x1ec>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a48      	ldr	r2, [pc, #288]	; (80029fc <HAL_GPIO_Init+0x2f4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d007      	beq.n	80028f0 <HAL_GPIO_Init+0x1e8>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a47      	ldr	r2, [pc, #284]	; (8002a00 <HAL_GPIO_Init+0x2f8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d101      	bne.n	80028ec <HAL_GPIO_Init+0x1e4>
 80028e8:	2304      	movs	r3, #4
 80028ea:	e008      	b.n	80028fe <HAL_GPIO_Init+0x1f6>
 80028ec:	2305      	movs	r3, #5
 80028ee:	e006      	b.n	80028fe <HAL_GPIO_Init+0x1f6>
 80028f0:	2303      	movs	r3, #3
 80028f2:	e004      	b.n	80028fe <HAL_GPIO_Init+0x1f6>
 80028f4:	2302      	movs	r3, #2
 80028f6:	e002      	b.n	80028fe <HAL_GPIO_Init+0x1f6>
 80028f8:	2301      	movs	r3, #1
 80028fa:	e000      	b.n	80028fe <HAL_GPIO_Init+0x1f6>
 80028fc:	2300      	movs	r3, #0
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	f002 0203 	and.w	r2, r2, #3
 8002904:	0092      	lsls	r2, r2, #2
 8002906:	4093      	lsls	r3, r2
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	4313      	orrs	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800290e:	4937      	ldr	r1, [pc, #220]	; (80029ec <HAL_GPIO_Init+0x2e4>)
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	089b      	lsrs	r3, r3, #2
 8002914:	3302      	adds	r3, #2
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800291c:	4b39      	ldr	r3, [pc, #228]	; (8002a04 <HAL_GPIO_Init+0x2fc>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	43db      	mvns	r3, r3
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	4013      	ands	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4313      	orrs	r3, r2
 800293e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002940:	4a30      	ldr	r2, [pc, #192]	; (8002a04 <HAL_GPIO_Init+0x2fc>)
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002946:	4b2f      	ldr	r3, [pc, #188]	; (8002a04 <HAL_GPIO_Init+0x2fc>)
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	43db      	mvns	r3, r3
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	4013      	ands	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4313      	orrs	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800296a:	4a26      	ldr	r2, [pc, #152]	; (8002a04 <HAL_GPIO_Init+0x2fc>)
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002970:	4b24      	ldr	r3, [pc, #144]	; (8002a04 <HAL_GPIO_Init+0x2fc>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	43db      	mvns	r3, r3
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4013      	ands	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4313      	orrs	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002994:	4a1b      	ldr	r2, [pc, #108]	; (8002a04 <HAL_GPIO_Init+0x2fc>)
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800299a:	4b1a      	ldr	r3, [pc, #104]	; (8002a04 <HAL_GPIO_Init+0x2fc>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	4013      	ands	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80029be:	4a11      	ldr	r2, [pc, #68]	; (8002a04 <HAL_GPIO_Init+0x2fc>)
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	3301      	adds	r3, #1
 80029c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	fa22 f303 	lsr.w	r3, r2, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f47f aea3 	bne.w	8002720 <HAL_GPIO_Init+0x18>
  }
}
 80029da:	bf00      	nop
 80029dc:	bf00      	nop
 80029de:	371c      	adds	r7, #28
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40023800 	.word	0x40023800
 80029ec:	40010000 	.word	0x40010000
 80029f0:	40020000 	.word	0x40020000
 80029f4:	40020400 	.word	0x40020400
 80029f8:	40020800 	.word	0x40020800
 80029fc:	40020c00 	.word	0x40020c00
 8002a00:	40021000 	.word	0x40021000
 8002a04:	40010400 	.word	0x40010400

08002a08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e12b      	b.n	8002c72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7fe ff50 	bl	80018d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2224      	movs	r2, #36	; 0x24
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0201 	bic.w	r2, r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a6c:	f003 fa4c 	bl	8005f08 <HAL_RCC_GetPCLK1Freq>
 8002a70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	4a81      	ldr	r2, [pc, #516]	; (8002c7c <HAL_I2C_Init+0x274>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d807      	bhi.n	8002a8c <HAL_I2C_Init+0x84>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4a80      	ldr	r2, [pc, #512]	; (8002c80 <HAL_I2C_Init+0x278>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	bf94      	ite	ls
 8002a84:	2301      	movls	r3, #1
 8002a86:	2300      	movhi	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	e006      	b.n	8002a9a <HAL_I2C_Init+0x92>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4a7d      	ldr	r2, [pc, #500]	; (8002c84 <HAL_I2C_Init+0x27c>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	bf94      	ite	ls
 8002a94:	2301      	movls	r3, #1
 8002a96:	2300      	movhi	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e0e7      	b.n	8002c72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	4a78      	ldr	r2, [pc, #480]	; (8002c88 <HAL_I2C_Init+0x280>)
 8002aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aaa:	0c9b      	lsrs	r3, r3, #18
 8002aac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	4a6a      	ldr	r2, [pc, #424]	; (8002c7c <HAL_I2C_Init+0x274>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d802      	bhi.n	8002adc <HAL_I2C_Init+0xd4>
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	e009      	b.n	8002af0 <HAL_I2C_Init+0xe8>
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ae2:	fb02 f303 	mul.w	r3, r2, r3
 8002ae6:	4a69      	ldr	r2, [pc, #420]	; (8002c8c <HAL_I2C_Init+0x284>)
 8002ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aec:	099b      	lsrs	r3, r3, #6
 8002aee:	3301      	adds	r3, #1
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6812      	ldr	r2, [r2, #0]
 8002af4:	430b      	orrs	r3, r1
 8002af6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	495c      	ldr	r1, [pc, #368]	; (8002c7c <HAL_I2C_Init+0x274>)
 8002b0c:	428b      	cmp	r3, r1
 8002b0e:	d819      	bhi.n	8002b44 <HAL_I2C_Init+0x13c>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	1e59      	subs	r1, r3, #1
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b1e:	1c59      	adds	r1, r3, #1
 8002b20:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b24:	400b      	ands	r3, r1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00a      	beq.n	8002b40 <HAL_I2C_Init+0x138>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	1e59      	subs	r1, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b38:	3301      	adds	r3, #1
 8002b3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b3e:	e051      	b.n	8002be4 <HAL_I2C_Init+0x1dc>
 8002b40:	2304      	movs	r3, #4
 8002b42:	e04f      	b.n	8002be4 <HAL_I2C_Init+0x1dc>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d111      	bne.n	8002b70 <HAL_I2C_Init+0x168>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	1e58      	subs	r0, r3, #1
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6859      	ldr	r1, [r3, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	440b      	add	r3, r1
 8002b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b5e:	3301      	adds	r3, #1
 8002b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	bf0c      	ite	eq
 8002b68:	2301      	moveq	r3, #1
 8002b6a:	2300      	movne	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	e012      	b.n	8002b96 <HAL_I2C_Init+0x18e>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	1e58      	subs	r0, r3, #1
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6859      	ldr	r1, [r3, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	0099      	lsls	r1, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b86:	3301      	adds	r3, #1
 8002b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	bf0c      	ite	eq
 8002b90:	2301      	moveq	r3, #1
 8002b92:	2300      	movne	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_I2C_Init+0x196>
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e022      	b.n	8002be4 <HAL_I2C_Init+0x1dc>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10e      	bne.n	8002bc4 <HAL_I2C_Init+0x1bc>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	1e58      	subs	r0, r3, #1
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6859      	ldr	r1, [r3, #4]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	440b      	add	r3, r1
 8002bb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bb8:	3301      	adds	r3, #1
 8002bba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bc2:	e00f      	b.n	8002be4 <HAL_I2C_Init+0x1dc>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	1e58      	subs	r0, r3, #1
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6859      	ldr	r1, [r3, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	0099      	lsls	r1, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bda:	3301      	adds	r3, #1
 8002bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002be0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	6809      	ldr	r1, [r1, #0]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69da      	ldr	r2, [r3, #28]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6911      	ldr	r1, [r2, #16]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	68d2      	ldr	r2, [r2, #12]
 8002c1e:	4311      	orrs	r1, r2
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6812      	ldr	r2, [r2, #0]
 8002c24:	430b      	orrs	r3, r1
 8002c26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	695a      	ldr	r2, [r3, #20]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0201 	orr.w	r2, r2, #1
 8002c52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	000186a0 	.word	0x000186a0
 8002c80:	001e847f 	.word	0x001e847f
 8002c84:	003d08ff 	.word	0x003d08ff
 8002c88:	431bde83 	.word	0x431bde83
 8002c8c:	10624dd3 	.word	0x10624dd3

08002c90 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca2:	2b80      	cmp	r3, #128	; 0x80
 8002ca4:	d103      	bne.n	8002cae <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2200      	movs	r2, #0
 8002cac:	611a      	str	r2, [r3, #16]
  }
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b088      	sub	sp, #32
 8002cbc:	af02      	add	r7, sp, #8
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	4608      	mov	r0, r1
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	817b      	strh	r3, [r7, #10]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	813b      	strh	r3, [r7, #8]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cd2:	f7ff fb91 	bl	80023f8 <HAL_GetTick>
 8002cd6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b20      	cmp	r3, #32
 8002ce2:	f040 80d9 	bne.w	8002e98 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	2319      	movs	r3, #25
 8002cec:	2201      	movs	r2, #1
 8002cee:	496d      	ldr	r1, [pc, #436]	; (8002ea4 <HAL_I2C_Mem_Write+0x1ec>)
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f002 f919 	bl	8004f28 <I2C_WaitOnFlagUntilTimeout>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	e0cc      	b.n	8002e9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d101      	bne.n	8002d0e <HAL_I2C_Mem_Write+0x56>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	e0c5      	b.n	8002e9a <HAL_I2C_Mem_Write+0x1e2>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d007      	beq.n	8002d34 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0201 	orr.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2221      	movs	r2, #33	; 0x21
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2240      	movs	r2, #64	; 0x40
 8002d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a3a      	ldr	r2, [r7, #32]
 8002d5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4a4d      	ldr	r2, [pc, #308]	; (8002ea8 <HAL_I2C_Mem_Write+0x1f0>)
 8002d74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d76:	88f8      	ldrh	r0, [r7, #6]
 8002d78:	893a      	ldrh	r2, [r7, #8]
 8002d7a:	8979      	ldrh	r1, [r7, #10]
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	9301      	str	r3, [sp, #4]
 8002d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	4603      	mov	r3, r0
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f001 fea8 	bl	8004adc <I2C_RequestMemoryWrite>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d052      	beq.n	8002e38 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e081      	b.n	8002e9a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f002 f9de 	bl	800515c <I2C_WaitOnTXEFlagUntilTimeout>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00d      	beq.n	8002dc2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d107      	bne.n	8002dbe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dbc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e06b      	b.n	8002e9a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	781a      	ldrb	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	1c5a      	adds	r2, r3, #1
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d11b      	bne.n	8002e38 <HAL_I2C_Mem_Write+0x180>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d017      	beq.n	8002e38 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	781a      	ldrb	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1aa      	bne.n	8002d96 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f002 f9d1 	bl	80051ec <I2C_WaitOnBTFFlagUntilTimeout>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00d      	beq.n	8002e6c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d107      	bne.n	8002e68 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e66:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e016      	b.n	8002e9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e94:	2300      	movs	r3, #0
 8002e96:	e000      	b.n	8002e9a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002e98:	2302      	movs	r3, #2
  }
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	00100002 	.word	0x00100002
 8002ea8:	ffff0000 	.word	0xffff0000

08002eac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08c      	sub	sp, #48	; 0x30
 8002eb0:	af02      	add	r7, sp, #8
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	4608      	mov	r0, r1
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	461a      	mov	r2, r3
 8002eba:	4603      	mov	r3, r0
 8002ebc:	817b      	strh	r3, [r7, #10]
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	813b      	strh	r3, [r7, #8]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ec6:	f7ff fa97 	bl	80023f8 <HAL_GetTick>
 8002eca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b20      	cmp	r3, #32
 8002ed6:	f040 8208 	bne.w	80032ea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	2319      	movs	r3, #25
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	497b      	ldr	r1, [pc, #492]	; (80030d0 <HAL_I2C_Mem_Read+0x224>)
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f002 f81f 	bl	8004f28 <I2C_WaitOnFlagUntilTimeout>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	e1fb      	b.n	80032ec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <HAL_I2C_Mem_Read+0x56>
 8002efe:	2302      	movs	r3, #2
 8002f00:	e1f4      	b.n	80032ec <HAL_I2C_Mem_Read+0x440>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d007      	beq.n	8002f28 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0201 	orr.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2222      	movs	r2, #34	; 0x22
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2240      	movs	r2, #64	; 0x40
 8002f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002f58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4a5b      	ldr	r2, [pc, #364]	; (80030d4 <HAL_I2C_Mem_Read+0x228>)
 8002f68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f6a:	88f8      	ldrh	r0, [r7, #6]
 8002f6c:	893a      	ldrh	r2, [r7, #8]
 8002f6e:	8979      	ldrh	r1, [r7, #10]
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f72:	9301      	str	r3, [sp, #4]
 8002f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	4603      	mov	r3, r0
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f001 fe44 	bl	8004c08 <I2C_RequestMemoryRead>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e1b0      	b.n	80032ec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d113      	bne.n	8002fba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f92:	2300      	movs	r3, #0
 8002f94:	623b      	str	r3, [r7, #32]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	623b      	str	r3, [r7, #32]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	623b      	str	r3, [r7, #32]
 8002fa6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	e184      	b.n	80032c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d11b      	bne.n	8002ffa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61fb      	str	r3, [r7, #28]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	61fb      	str	r3, [r7, #28]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	61fb      	str	r3, [r7, #28]
 8002fe6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	e164      	b.n	80032c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d11b      	bne.n	800303a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003010:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003020:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003022:	2300      	movs	r3, #0
 8003024:	61bb      	str	r3, [r7, #24]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	61bb      	str	r3, [r7, #24]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	61bb      	str	r3, [r7, #24]
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	e144      	b.n	80032c4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800303a:	2300      	movs	r3, #0
 800303c:	617b      	str	r3, [r7, #20]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	617b      	str	r3, [r7, #20]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	617b      	str	r3, [r7, #20]
 800304e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003050:	e138      	b.n	80032c4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003056:	2b03      	cmp	r3, #3
 8003058:	f200 80f1 	bhi.w	800323e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003060:	2b01      	cmp	r3, #1
 8003062:	d123      	bne.n	80030ac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003066:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f002 f939 	bl	80052e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e139      	b.n	80032ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691a      	ldr	r2, [r3, #16]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	1c5a      	adds	r2, r3, #1
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003094:	3b01      	subs	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030aa:	e10b      	b.n	80032c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d14e      	bne.n	8003152 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ba:	2200      	movs	r2, #0
 80030bc:	4906      	ldr	r1, [pc, #24]	; (80030d8 <HAL_I2C_Mem_Read+0x22c>)
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f001 ff32 	bl	8004f28 <I2C_WaitOnFlagUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d008      	beq.n	80030dc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e10e      	b.n	80032ec <HAL_I2C_Mem_Read+0x440>
 80030ce:	bf00      	nop
 80030d0:	00100002 	.word	0x00100002
 80030d4:	ffff0000 	.word	0xffff0000
 80030d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	691a      	ldr	r2, [r3, #16]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	1c5a      	adds	r2, r3, #1
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003108:	3b01      	subs	r3, #1
 800310a:	b29a      	uxth	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003114:	b29b      	uxth	r3, r3
 8003116:	3b01      	subs	r3, #1
 8003118:	b29a      	uxth	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	1c5a      	adds	r2, r3, #1
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313a:	3b01      	subs	r3, #1
 800313c:	b29a      	uxth	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003146:	b29b      	uxth	r3, r3
 8003148:	3b01      	subs	r3, #1
 800314a:	b29a      	uxth	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003150:	e0b8      	b.n	80032c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003158:	2200      	movs	r2, #0
 800315a:	4966      	ldr	r1, [pc, #408]	; (80032f4 <HAL_I2C_Mem_Read+0x448>)
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f001 fee3 	bl	8004f28 <I2C_WaitOnFlagUntilTimeout>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e0bf      	b.n	80032ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800317a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	691a      	ldr	r2, [r3, #16]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b4:	2200      	movs	r2, #0
 80031b6:	494f      	ldr	r1, [pc, #316]	; (80032f4 <HAL_I2C_Mem_Read+0x448>)
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f001 feb5 	bl	8004f28 <I2C_WaitOnFlagUntilTimeout>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e091      	b.n	80032ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	691a      	ldr	r2, [r3, #16]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	1c5a      	adds	r2, r3, #1
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f4:	3b01      	subs	r3, #1
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003200:	b29b      	uxth	r3, r3
 8003202:	3b01      	subs	r3, #1
 8003204:	b29a      	uxth	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	1c5a      	adds	r2, r3, #1
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003226:	3b01      	subs	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003232:	b29b      	uxth	r3, r3
 8003234:	3b01      	subs	r3, #1
 8003236:	b29a      	uxth	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800323c:	e042      	b.n	80032c4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800323e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003240:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f002 f84c 	bl	80052e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e04c      	b.n	80032ec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326e:	3b01      	subs	r3, #1
 8003270:	b29a      	uxth	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327a:	b29b      	uxth	r3, r3
 800327c:	3b01      	subs	r3, #1
 800327e:	b29a      	uxth	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	f003 0304 	and.w	r3, r3, #4
 800328e:	2b04      	cmp	r3, #4
 8003290:	d118      	bne.n	80032c4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	691a      	ldr	r2, [r3, #16]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	3b01      	subs	r3, #1
 80032be:	b29a      	uxth	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f47f aec2 	bne.w	8003052 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2220      	movs	r2, #32
 80032d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	e000      	b.n	80032ec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80032ea:	2302      	movs	r3, #2
  }
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3728      	adds	r7, #40	; 0x28
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	00010004 	.word	0x00010004

080032f8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08a      	sub	sp, #40	; 0x28
 80032fc:	af02      	add	r7, sp, #8
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	607a      	str	r2, [r7, #4]
 8003302:	603b      	str	r3, [r7, #0]
 8003304:	460b      	mov	r3, r1
 8003306:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003308:	f7ff f876 	bl	80023f8 <HAL_GetTick>
 800330c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800330e:	2300      	movs	r3, #0
 8003310:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b20      	cmp	r3, #32
 800331c:	f040 8111 	bne.w	8003542 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	2319      	movs	r3, #25
 8003326:	2201      	movs	r2, #1
 8003328:	4988      	ldr	r1, [pc, #544]	; (800354c <HAL_I2C_IsDeviceReady+0x254>)
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f001 fdfc 	bl	8004f28 <I2C_WaitOnFlagUntilTimeout>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003336:	2302      	movs	r3, #2
 8003338:	e104      	b.n	8003544 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003340:	2b01      	cmp	r3, #1
 8003342:	d101      	bne.n	8003348 <HAL_I2C_IsDeviceReady+0x50>
 8003344:	2302      	movs	r3, #2
 8003346:	e0fd      	b.n	8003544 <HAL_I2C_IsDeviceReady+0x24c>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b01      	cmp	r3, #1
 800335c:	d007      	beq.n	800336e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f042 0201 	orr.w	r2, r2, #1
 800336c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800337c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2224      	movs	r2, #36	; 0x24
 8003382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4a70      	ldr	r2, [pc, #448]	; (8003550 <HAL_I2C_IsDeviceReady+0x258>)
 8003390:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033a0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f001 fdba 	bl	8004f28 <I2C_WaitOnFlagUntilTimeout>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00d      	beq.n	80033d6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033c8:	d103      	bne.n	80033d2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033d0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e0b6      	b.n	8003544 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033d6:	897b      	ldrh	r3, [r7, #10]
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	461a      	mov	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033e4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80033e6:	f7ff f807 	bl	80023f8 <HAL_GetTick>
 80033ea:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	bf0c      	ite	eq
 80033fa:	2301      	moveq	r3, #1
 80033fc:	2300      	movne	r3, #0
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800340c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003410:	bf0c      	ite	eq
 8003412:	2301      	moveq	r3, #1
 8003414:	2300      	movne	r3, #0
 8003416:	b2db      	uxtb	r3, r3
 8003418:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800341a:	e025      	b.n	8003468 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800341c:	f7fe ffec 	bl	80023f8 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	429a      	cmp	r2, r3
 800342a:	d302      	bcc.n	8003432 <HAL_I2C_IsDeviceReady+0x13a>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d103      	bne.n	800343a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	22a0      	movs	r2, #160	; 0xa0
 8003436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b02      	cmp	r3, #2
 8003446:	bf0c      	ite	eq
 8003448:	2301      	moveq	r3, #1
 800344a:	2300      	movne	r3, #0
 800344c:	b2db      	uxtb	r3, r3
 800344e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800345a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800345e:	bf0c      	ite	eq
 8003460:	2301      	moveq	r3, #1
 8003462:	2300      	movne	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2ba0      	cmp	r3, #160	; 0xa0
 8003472:	d005      	beq.n	8003480 <HAL_I2C_IsDeviceReady+0x188>
 8003474:	7dfb      	ldrb	r3, [r7, #23]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d102      	bne.n	8003480 <HAL_I2C_IsDeviceReady+0x188>
 800347a:	7dbb      	ldrb	r3, [r7, #22]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0cd      	beq.n	800341c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2220      	movs	r2, #32
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b02      	cmp	r3, #2
 8003494:	d129      	bne.n	80034ea <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034a6:	2300      	movs	r3, #0
 80034a8:	613b      	str	r3, [r7, #16]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	613b      	str	r3, [r7, #16]
 80034ba:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	2319      	movs	r3, #25
 80034c2:	2201      	movs	r2, #1
 80034c4:	4921      	ldr	r1, [pc, #132]	; (800354c <HAL_I2C_IsDeviceReady+0x254>)
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f001 fd2e 	bl	8004f28 <I2C_WaitOnFlagUntilTimeout>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e036      	b.n	8003544 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2220      	movs	r2, #32
 80034da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80034e6:	2300      	movs	r3, #0
 80034e8:	e02c      	b.n	8003544 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034f8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003502:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	2319      	movs	r3, #25
 800350a:	2201      	movs	r2, #1
 800350c:	490f      	ldr	r1, [pc, #60]	; (800354c <HAL_I2C_IsDeviceReady+0x254>)
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f001 fd0a 	bl	8004f28 <I2C_WaitOnFlagUntilTimeout>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e012      	b.n	8003544 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	3301      	adds	r3, #1
 8003522:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	429a      	cmp	r2, r3
 800352a:	f4ff af32 	bcc.w	8003392 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2220      	movs	r2, #32
 8003532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e000      	b.n	8003544 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003542:	2302      	movs	r3, #2
  }
}
 8003544:	4618      	mov	r0, r3
 8003546:	3720      	adds	r7, #32
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	00100002 	.word	0x00100002
 8003550:	ffff0000 	.word	0xffff0000

08003554 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b088      	sub	sp, #32
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800355c:	2300      	movs	r3, #0
 800355e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003574:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800357c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800357e:	7bfb      	ldrb	r3, [r7, #15]
 8003580:	2b10      	cmp	r3, #16
 8003582:	d003      	beq.n	800358c <HAL_I2C_EV_IRQHandler+0x38>
 8003584:	7bfb      	ldrb	r3, [r7, #15]
 8003586:	2b40      	cmp	r3, #64	; 0x40
 8003588:	f040 80c1 	bne.w	800370e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10d      	bne.n	80035c2 <HAL_I2C_EV_IRQHandler+0x6e>
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80035ac:	d003      	beq.n	80035b6 <HAL_I2C_EV_IRQHandler+0x62>
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80035b4:	d101      	bne.n	80035ba <HAL_I2C_EV_IRQHandler+0x66>
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <HAL_I2C_EV_IRQHandler+0x68>
 80035ba:	2300      	movs	r3, #0
 80035bc:	2b01      	cmp	r3, #1
 80035be:	f000 8132 	beq.w	8003826 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00c      	beq.n	80035e6 <HAL_I2C_EV_IRQHandler+0x92>
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	0a5b      	lsrs	r3, r3, #9
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d006      	beq.n	80035e6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f001 ff0c 	bl	80053f6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 fcd6 	bl	8003f90 <I2C_Master_SB>
 80035e4:	e092      	b.n	800370c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	08db      	lsrs	r3, r3, #3
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d009      	beq.n	8003606 <HAL_I2C_EV_IRQHandler+0xb2>
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	0a5b      	lsrs	r3, r3, #9
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 fd4b 	bl	800409a <I2C_Master_ADD10>
 8003604:	e082      	b.n	800370c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	085b      	lsrs	r3, r3, #1
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d009      	beq.n	8003626 <HAL_I2C_EV_IRQHandler+0xd2>
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	0a5b      	lsrs	r3, r3, #9
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 fd64 	bl	80040ec <I2C_Master_ADDR>
 8003624:	e072      	b.n	800370c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	089b      	lsrs	r3, r3, #2
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d03b      	beq.n	80036aa <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800363c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003640:	f000 80f3 	beq.w	800382a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	09db      	lsrs	r3, r3, #7
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00f      	beq.n	8003670 <HAL_I2C_EV_IRQHandler+0x11c>
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	0a9b      	lsrs	r3, r3, #10
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b00      	cmp	r3, #0
 800365a:	d009      	beq.n	8003670 <HAL_I2C_EV_IRQHandler+0x11c>
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	089b      	lsrs	r3, r3, #2
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d103      	bne.n	8003670 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f942 	bl	80038f2 <I2C_MasterTransmit_TXE>
 800366e:	e04d      	b.n	800370c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	089b      	lsrs	r3, r3, #2
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 80d6 	beq.w	800382a <HAL_I2C_EV_IRQHandler+0x2d6>
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	0a5b      	lsrs	r3, r3, #9
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 80cf 	beq.w	800382a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800368c:	7bbb      	ldrb	r3, [r7, #14]
 800368e:	2b21      	cmp	r3, #33	; 0x21
 8003690:	d103      	bne.n	800369a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f9c9 	bl	8003a2a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003698:	e0c7      	b.n	800382a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800369a:	7bfb      	ldrb	r3, [r7, #15]
 800369c:	2b40      	cmp	r3, #64	; 0x40
 800369e:	f040 80c4 	bne.w	800382a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 fa37 	bl	8003b16 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036a8:	e0bf      	b.n	800382a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036b8:	f000 80b7 	beq.w	800382a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	099b      	lsrs	r3, r3, #6
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00f      	beq.n	80036e8 <HAL_I2C_EV_IRQHandler+0x194>
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	0a9b      	lsrs	r3, r3, #10
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d009      	beq.n	80036e8 <HAL_I2C_EV_IRQHandler+0x194>
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	089b      	lsrs	r3, r3, #2
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d103      	bne.n	80036e8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 fab0 	bl	8003c46 <I2C_MasterReceive_RXNE>
 80036e6:	e011      	b.n	800370c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	089b      	lsrs	r3, r3, #2
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 809a 	beq.w	800382a <HAL_I2C_EV_IRQHandler+0x2d6>
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	0a5b      	lsrs	r3, r3, #9
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 8093 	beq.w	800382a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 fb59 	bl	8003dbc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800370a:	e08e      	b.n	800382a <HAL_I2C_EV_IRQHandler+0x2d6>
 800370c:	e08d      	b.n	800382a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	2b00      	cmp	r3, #0
 8003714:	d004      	beq.n	8003720 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	61fb      	str	r3, [r7, #28]
 800371e:	e007      	b.n	8003730 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	085b      	lsrs	r3, r3, #1
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b00      	cmp	r3, #0
 800373a:	d012      	beq.n	8003762 <HAL_I2C_EV_IRQHandler+0x20e>
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	0a5b      	lsrs	r3, r3, #9
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00c      	beq.n	8003762 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003758:	69b9      	ldr	r1, [r7, #24]
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 ff12 	bl	8004584 <I2C_Slave_ADDR>
 8003760:	e066      	b.n	8003830 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	091b      	lsrs	r3, r3, #4
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d009      	beq.n	8003782 <HAL_I2C_EV_IRQHandler+0x22e>
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	0a5b      	lsrs	r3, r3, #9
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 ff4c 	bl	8004618 <I2C_Slave_STOPF>
 8003780:	e056      	b.n	8003830 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003782:	7bbb      	ldrb	r3, [r7, #14]
 8003784:	2b21      	cmp	r3, #33	; 0x21
 8003786:	d002      	beq.n	800378e <HAL_I2C_EV_IRQHandler+0x23a>
 8003788:	7bbb      	ldrb	r3, [r7, #14]
 800378a:	2b29      	cmp	r3, #41	; 0x29
 800378c:	d125      	bne.n	80037da <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	09db      	lsrs	r3, r3, #7
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00f      	beq.n	80037ba <HAL_I2C_EV_IRQHandler+0x266>
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	0a9b      	lsrs	r3, r3, #10
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d009      	beq.n	80037ba <HAL_I2C_EV_IRQHandler+0x266>
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	089b      	lsrs	r3, r3, #2
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d103      	bne.n	80037ba <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 fe2a 	bl	800440c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037b8:	e039      	b.n	800382e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	089b      	lsrs	r3, r3, #2
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d033      	beq.n	800382e <HAL_I2C_EV_IRQHandler+0x2da>
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	0a5b      	lsrs	r3, r3, #9
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d02d      	beq.n	800382e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 fe57 	bl	8004486 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037d8:	e029      	b.n	800382e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	099b      	lsrs	r3, r3, #6
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00f      	beq.n	8003806 <HAL_I2C_EV_IRQHandler+0x2b2>
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	0a9b      	lsrs	r3, r3, #10
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d009      	beq.n	8003806 <HAL_I2C_EV_IRQHandler+0x2b2>
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	089b      	lsrs	r3, r3, #2
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d103      	bne.n	8003806 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fe61 	bl	80044c6 <I2C_SlaveReceive_RXNE>
 8003804:	e014      	b.n	8003830 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	089b      	lsrs	r3, r3, #2
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00e      	beq.n	8003830 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	0a5b      	lsrs	r3, r3, #9
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d008      	beq.n	8003830 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 fe8f 	bl	8004542 <I2C_SlaveReceive_BTF>
 8003824:	e004      	b.n	8003830 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003826:	bf00      	nop
 8003828:	e002      	b.n	8003830 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800382a:	bf00      	nop
 800382c:	e000      	b.n	8003830 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800382e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003830:	3720      	adds	r7, #32
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr

08003848 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	bc80      	pop	{r7}
 8003858:	4770      	bx	lr

0800385a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr

0800386c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	bc80      	pop	{r7}
 800387c:	4770      	bx	lr

0800387e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
 8003886:	460b      	mov	r3, r1
 8003888:	70fb      	strb	r3, [r7, #3]
 800388a:	4613      	mov	r3, r2
 800388c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr

08003898 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bc80      	pop	{r7}
 80038a8:	4770      	bx	lr

080038aa <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr

080038bc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bc80      	pop	{r7}
 80038cc:	4770      	bx	lr

080038ce <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr

080038e0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bc80      	pop	{r7}
 80038f0:	4770      	bx	lr

080038f2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b084      	sub	sp, #16
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003900:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003908:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003914:	2b00      	cmp	r3, #0
 8003916:	d150      	bne.n	80039ba <I2C_MasterTransmit_TXE+0xc8>
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	2b21      	cmp	r3, #33	; 0x21
 800391c:	d14d      	bne.n	80039ba <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	2b08      	cmp	r3, #8
 8003922:	d01d      	beq.n	8003960 <I2C_MasterTransmit_TXE+0x6e>
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	2b20      	cmp	r3, #32
 8003928:	d01a      	beq.n	8003960 <I2C_MasterTransmit_TXE+0x6e>
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003930:	d016      	beq.n	8003960 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003940:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2211      	movs	r2, #17
 8003946:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2220      	movs	r2, #32
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f7ff ff6c 	bl	8003836 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800395e:	e060      	b.n	8003a22 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800396e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800397e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2220      	movs	r2, #32
 800398a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b40      	cmp	r3, #64	; 0x40
 8003998:	d107      	bne.n	80039aa <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7ff ff81 	bl	80038aa <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80039a8:	e03b      	b.n	8003a22 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7ff ff3f 	bl	8003836 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80039b8:	e033      	b.n	8003a22 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
 80039bc:	2b21      	cmp	r3, #33	; 0x21
 80039be:	d005      	beq.n	80039cc <I2C_MasterTransmit_TXE+0xda>
 80039c0:	7bbb      	ldrb	r3, [r7, #14]
 80039c2:	2b40      	cmp	r3, #64	; 0x40
 80039c4:	d12d      	bne.n	8003a22 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80039c6:	7bfb      	ldrb	r3, [r7, #15]
 80039c8:	2b22      	cmp	r3, #34	; 0x22
 80039ca:	d12a      	bne.n	8003a22 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d108      	bne.n	80039e8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80039e6:	e01c      	b.n	8003a22 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b40      	cmp	r3, #64	; 0x40
 80039f2:	d103      	bne.n	80039fc <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f88e 	bl	8003b16 <I2C_MemoryTransmit_TXE_BTF>
}
 80039fa:	e012      	b.n	8003a22 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	781a      	ldrb	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	1c5a      	adds	r2, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a20:	e7ff      	b.n	8003a22 <I2C_MasterTransmit_TXE+0x130>
 8003a22:	bf00      	nop
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b084      	sub	sp, #16
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a36:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b21      	cmp	r3, #33	; 0x21
 8003a42:	d164      	bne.n	8003b0e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d012      	beq.n	8003a74 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a52:	781a      	ldrb	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	1c5a      	adds	r2, r3, #1
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003a72:	e04c      	b.n	8003b0e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2b08      	cmp	r3, #8
 8003a78:	d01d      	beq.n	8003ab6 <I2C_MasterTransmit_BTF+0x8c>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2b20      	cmp	r3, #32
 8003a7e:	d01a      	beq.n	8003ab6 <I2C_MasterTransmit_BTF+0x8c>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a86:	d016      	beq.n	8003ab6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a96:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2211      	movs	r2, #17
 8003a9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7ff fec1 	bl	8003836 <HAL_I2C_MasterTxCpltCallback>
}
 8003ab4:	e02b      	b.n	8003b0e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ac4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b40      	cmp	r3, #64	; 0x40
 8003aee:	d107      	bne.n	8003b00 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff fed6 	bl	80038aa <HAL_I2C_MemTxCpltCallback>
}
 8003afe:	e006      	b.n	8003b0e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7ff fe94 	bl	8003836 <HAL_I2C_MasterTxCpltCallback>
}
 8003b0e:	bf00      	nop
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b084      	sub	sp, #16
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b24:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d11d      	bne.n	8003b6a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d10b      	bne.n	8003b4e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b3a:	b2da      	uxtb	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b46:	1c9a      	adds	r2, r3, #2
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003b4c:	e077      	b.n	8003c3e <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	121b      	asrs	r3, r3, #8
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b62:	1c5a      	adds	r2, r3, #1
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b68:	e069      	b.n	8003c3e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d10b      	bne.n	8003b8a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b82:	1c5a      	adds	r2, r3, #1
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b88:	e059      	b.n	8003c3e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d152      	bne.n	8003c38 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003b92:	7bfb      	ldrb	r3, [r7, #15]
 8003b94:	2b22      	cmp	r3, #34	; 0x22
 8003b96:	d10d      	bne.n	8003bb4 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ba6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003bb2:	e044      	b.n	8003c3e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d015      	beq.n	8003bea <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
 8003bc0:	2b21      	cmp	r3, #33	; 0x21
 8003bc2:	d112      	bne.n	8003bea <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	781a      	ldrb	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003be8:	e029      	b.n	8003c3e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d124      	bne.n	8003c3e <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
 8003bf6:	2b21      	cmp	r3, #33	; 0x21
 8003bf8:	d121      	bne.n	8003c3e <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c08:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c18:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff fe3a 	bl	80038aa <HAL_I2C_MemTxCpltCallback>
}
 8003c36:	e002      	b.n	8003c3e <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7ff f829 	bl	8002c90 <I2C_Flush_DR>
}
 8003c3e:	bf00      	nop
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b084      	sub	sp, #16
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b22      	cmp	r3, #34	; 0x22
 8003c58:	f040 80ac 	bne.w	8003db4 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2b03      	cmp	r3, #3
 8003c68:	d921      	bls.n	8003cae <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	b2d2      	uxtb	r2, r2
 8003c76:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7c:	1c5a      	adds	r2, r3, #1
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	2b03      	cmp	r3, #3
 8003c98:	f040 808c 	bne.w	8003db4 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003caa:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003cac:	e082      	b.n	8003db4 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d075      	beq.n	8003da2 <I2C_MasterReceive_RXNE+0x15c>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d002      	beq.n	8003cc2 <I2C_MasterReceive_RXNE+0x7c>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d16f      	bne.n	8003da2 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f001 fada 	bl	800527c <I2C_WaitOnSTOPRequestThroughIT>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d142      	bne.n	8003d54 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cdc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cec:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	691a      	ldr	r2, [r3, #16]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	b2d2      	uxtb	r2, r2
 8003cfa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	1c5a      	adds	r2, r3, #1
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b40      	cmp	r3, #64	; 0x40
 8003d26:	d10a      	bne.n	8003d3e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7ff fdc0 	bl	80038bc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d3c:	e03a      	b.n	8003db4 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2212      	movs	r2, #18
 8003d4a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff fd7b 	bl	8003848 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d52:	e02f      	b.n	8003db4 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d62:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691a      	ldr	r2, [r3, #16]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	1c5a      	adds	r2, r3, #1
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7ff fd97 	bl	80038ce <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003da0:	e008      	b.n	8003db4 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003db0:	605a      	str	r2, [r3, #4]
}
 8003db2:	e7ff      	b.n	8003db4 <I2C_MasterReceive_RXNE+0x16e>
 8003db4:	bf00      	nop
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	2b04      	cmp	r3, #4
 8003dd2:	d11b      	bne.n	8003e0c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003de2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	691a      	ldr	r2, [r3, #16]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	b2d2      	uxtb	r2, r2
 8003df0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003e0a:	e0bd      	b.n	8003f88 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b03      	cmp	r3, #3
 8003e14:	d129      	bne.n	8003e6a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e24:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d00a      	beq.n	8003e42 <I2C_MasterReceive_BTF+0x86>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d007      	beq.n	8003e42 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e40:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	1c5a      	adds	r2, r3, #1
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	3b01      	subs	r3, #1
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003e68:	e08e      	b.n	8003f88 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d176      	bne.n	8003f62 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d002      	beq.n	8003e80 <I2C_MasterReceive_BTF+0xc4>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2b10      	cmp	r3, #16
 8003e7e:	d108      	bne.n	8003e92 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	e019      	b.n	8003ec6 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2b04      	cmp	r3, #4
 8003e96:	d002      	beq.n	8003e9e <I2C_MasterReceive_BTF+0xe2>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d108      	bne.n	8003eb0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	e00a      	b.n	8003ec6 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2b10      	cmp	r3, #16
 8003eb4:	d007      	beq.n	8003ec6 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ec4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	691a      	ldr	r2, [r3, #16]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	b2d2      	uxtb	r2, r2
 8003ed2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	1c5a      	adds	r2, r3, #1
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691a      	ldr	r2, [r3, #16]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003f20:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2220      	movs	r2, #32
 8003f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b40      	cmp	r3, #64	; 0x40
 8003f34:	d10a      	bne.n	8003f4c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7ff fcb9 	bl	80038bc <HAL_I2C_MemRxCpltCallback>
}
 8003f4a:	e01d      	b.n	8003f88 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2212      	movs	r2, #18
 8003f58:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7ff fc74 	bl	8003848 <HAL_I2C_MasterRxCpltCallback>
}
 8003f60:	e012      	b.n	8003f88 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	691a      	ldr	r2, [r3, #16]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	b2d2      	uxtb	r2, r2
 8003f6e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f74:	1c5a      	adds	r2, r3, #1
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003f88:	bf00      	nop
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b40      	cmp	r3, #64	; 0x40
 8003fa2:	d117      	bne.n	8003fd4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d109      	bne.n	8003fc0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003fbc:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003fbe:	e067      	b.n	8004090 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	f043 0301 	orr.w	r3, r3, #1
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	611a      	str	r2, [r3, #16]
}
 8003fd2:	e05d      	b.n	8004090 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fdc:	d133      	bne.n	8004046 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b21      	cmp	r3, #33	; 0x21
 8003fe8:	d109      	bne.n	8003ffe <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ffa:	611a      	str	r2, [r3, #16]
 8003ffc:	e008      	b.n	8004010 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004002:	b2db      	uxtb	r3, r3
 8004004:	f043 0301 	orr.w	r3, r3, #1
 8004008:	b2da      	uxtb	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004014:	2b00      	cmp	r3, #0
 8004016:	d004      	beq.n	8004022 <I2C_Master_SB+0x92>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401e:	2b00      	cmp	r3, #0
 8004020:	d108      	bne.n	8004034 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004026:	2b00      	cmp	r3, #0
 8004028:	d032      	beq.n	8004090 <I2C_Master_SB+0x100>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004030:	2b00      	cmp	r3, #0
 8004032:	d02d      	beq.n	8004090 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004042:	605a      	str	r2, [r3, #4]
}
 8004044:	e024      	b.n	8004090 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10e      	bne.n	800406c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004052:	b29b      	uxth	r3, r3
 8004054:	11db      	asrs	r3, r3, #7
 8004056:	b2db      	uxtb	r3, r3
 8004058:	f003 0306 	and.w	r3, r3, #6
 800405c:	b2db      	uxtb	r3, r3
 800405e:	f063 030f 	orn	r3, r3, #15
 8004062:	b2da      	uxtb	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	611a      	str	r2, [r3, #16]
}
 800406a:	e011      	b.n	8004090 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004070:	2b01      	cmp	r3, #1
 8004072:	d10d      	bne.n	8004090 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004078:	b29b      	uxth	r3, r3
 800407a:	11db      	asrs	r3, r3, #7
 800407c:	b2db      	uxtb	r3, r3
 800407e:	f003 0306 	and.w	r3, r3, #6
 8004082:	b2db      	uxtb	r3, r3
 8004084:	f063 030e 	orn	r3, r3, #14
 8004088:	b2da      	uxtb	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	611a      	str	r2, [r3, #16]
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	bc80      	pop	{r7}
 8004098:	4770      	bx	lr

0800409a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800409a:	b480      	push	{r7}
 800409c:	b083      	sub	sp, #12
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d004      	beq.n	80040c0 <I2C_Master_ADD10+0x26>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d108      	bne.n	80040d2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00c      	beq.n	80040e2 <I2C_Master_ADD10+0x48>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d007      	beq.n	80040e2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040e0:	605a      	str	r2, [r3, #4]
  }
}
 80040e2:	bf00      	nop
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bc80      	pop	{r7}
 80040ea:	4770      	bx	lr

080040ec <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b091      	sub	sp, #68	; 0x44
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004102:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004108:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b22      	cmp	r3, #34	; 0x22
 8004114:	f040 8169 	bne.w	80043ea <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10f      	bne.n	8004140 <I2C_Master_ADDR+0x54>
 8004120:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004124:	2b40      	cmp	r3, #64	; 0x40
 8004126:	d10b      	bne.n	8004140 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004128:	2300      	movs	r3, #0
 800412a:	633b      	str	r3, [r7, #48]	; 0x30
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	633b      	str	r3, [r7, #48]	; 0x30
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	633b      	str	r3, [r7, #48]	; 0x30
 800413c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413e:	e160      	b.n	8004402 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004144:	2b00      	cmp	r3, #0
 8004146:	d11d      	bne.n	8004184 <I2C_Master_ADDR+0x98>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004150:	d118      	bne.n	8004184 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004152:	2300      	movs	r3, #0
 8004154:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004166:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004176:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800417c:	1c5a      	adds	r2, r3, #1
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	651a      	str	r2, [r3, #80]	; 0x50
 8004182:	e13e      	b.n	8004402 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d113      	bne.n	80041b6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800418e:	2300      	movs	r3, #0
 8004190:	62bb      	str	r3, [r7, #40]	; 0x28
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	62bb      	str	r3, [r7, #40]	; 0x28
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80041a2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	e115      	b.n	80043e2 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	2b01      	cmp	r3, #1
 80041be:	f040 808a 	bne.w	80042d6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80041c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041c8:	d137      	bne.n	800423a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041d8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041e8:	d113      	bne.n	8004212 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041f8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041fa:	2300      	movs	r3, #0
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	627b      	str	r3, [r7, #36]	; 0x24
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	627b      	str	r3, [r7, #36]	; 0x24
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	e0e7      	b.n	80043e2 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004212:	2300      	movs	r3, #0
 8004214:	623b      	str	r3, [r7, #32]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	623b      	str	r3, [r7, #32]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	623b      	str	r3, [r7, #32]
 8004226:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	e0d3      	b.n	80043e2 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800423a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800423c:	2b08      	cmp	r3, #8
 800423e:	d02e      	beq.n	800429e <I2C_Master_ADDR+0x1b2>
 8004240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004242:	2b20      	cmp	r3, #32
 8004244:	d02b      	beq.n	800429e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004248:	2b12      	cmp	r3, #18
 800424a:	d102      	bne.n	8004252 <I2C_Master_ADDR+0x166>
 800424c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800424e:	2b01      	cmp	r3, #1
 8004250:	d125      	bne.n	800429e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004254:	2b04      	cmp	r3, #4
 8004256:	d00e      	beq.n	8004276 <I2C_Master_ADDR+0x18a>
 8004258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425a:	2b02      	cmp	r3, #2
 800425c:	d00b      	beq.n	8004276 <I2C_Master_ADDR+0x18a>
 800425e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004260:	2b10      	cmp	r3, #16
 8004262:	d008      	beq.n	8004276 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	e007      	b.n	8004286 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004284:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004286:	2300      	movs	r3, #0
 8004288:	61fb      	str	r3, [r7, #28]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	61fb      	str	r3, [r7, #28]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	61fb      	str	r3, [r7, #28]
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	e0a1      	b.n	80043e2 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042ac:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ae:	2300      	movs	r3, #0
 80042b0:	61bb      	str	r3, [r7, #24]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	61bb      	str	r3, [r7, #24]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	61bb      	str	r3, [r7, #24]
 80042c2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	e085      	b.n	80043e2 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042da:	b29b      	uxth	r3, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d14d      	bne.n	800437c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80042e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d016      	beq.n	8004314 <I2C_Master_ADDR+0x228>
 80042e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d013      	beq.n	8004314 <I2C_Master_ADDR+0x228>
 80042ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ee:	2b10      	cmp	r3, #16
 80042f0:	d010      	beq.n	8004314 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004300:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	e007      	b.n	8004324 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004322:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800432e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004332:	d117      	bne.n	8004364 <I2C_Master_ADDR+0x278>
 8004334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004336:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800433a:	d00b      	beq.n	8004354 <I2C_Master_ADDR+0x268>
 800433c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433e:	2b01      	cmp	r3, #1
 8004340:	d008      	beq.n	8004354 <I2C_Master_ADDR+0x268>
 8004342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004344:	2b08      	cmp	r3, #8
 8004346:	d005      	beq.n	8004354 <I2C_Master_ADDR+0x268>
 8004348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434a:	2b10      	cmp	r3, #16
 800434c:	d002      	beq.n	8004354 <I2C_Master_ADDR+0x268>
 800434e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004350:	2b20      	cmp	r3, #32
 8004352:	d107      	bne.n	8004364 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004362:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004364:	2300      	movs	r3, #0
 8004366:	617b      	str	r3, [r7, #20]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	617b      	str	r3, [r7, #20]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	617b      	str	r3, [r7, #20]
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	e032      	b.n	80043e2 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800438a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004396:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800439a:	d117      	bne.n	80043cc <I2C_Master_ADDR+0x2e0>
 800439c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043a2:	d00b      	beq.n	80043bc <I2C_Master_ADDR+0x2d0>
 80043a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d008      	beq.n	80043bc <I2C_Master_ADDR+0x2d0>
 80043aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ac:	2b08      	cmp	r3, #8
 80043ae:	d005      	beq.n	80043bc <I2C_Master_ADDR+0x2d0>
 80043b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b2:	2b10      	cmp	r3, #16
 80043b4:	d002      	beq.n	80043bc <I2C_Master_ADDR+0x2d0>
 80043b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b8:	2b20      	cmp	r3, #32
 80043ba:	d107      	bne.n	80043cc <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043ca:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043cc:	2300      	movs	r3, #0
 80043ce:	613b      	str	r3, [r7, #16]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	613b      	str	r3, [r7, #16]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	613b      	str	r3, [r7, #16]
 80043e0:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80043e8:	e00b      	b.n	8004402 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ea:	2300      	movs	r3, #0
 80043ec:	60fb      	str	r3, [r7, #12]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	60fb      	str	r3, [r7, #12]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	60fb      	str	r3, [r7, #12]
 80043fe:	68fb      	ldr	r3, [r7, #12]
}
 8004400:	e7ff      	b.n	8004402 <I2C_Master_ADDR+0x316>
 8004402:	bf00      	nop
 8004404:	3744      	adds	r7, #68	; 0x44
 8004406:	46bd      	mov	sp, r7
 8004408:	bc80      	pop	{r7}
 800440a:	4770      	bx	lr

0800440c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800441a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004420:	b29b      	uxth	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d02b      	beq.n	800447e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	781a      	ldrb	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004440:	b29b      	uxth	r3, r3
 8004442:	3b01      	subs	r3, #1
 8004444:	b29a      	uxth	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444e:	b29b      	uxth	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	d114      	bne.n	800447e <I2C_SlaveTransmit_TXE+0x72>
 8004454:	7bfb      	ldrb	r3, [r7, #15]
 8004456:	2b29      	cmp	r3, #41	; 0x29
 8004458:	d111      	bne.n	800447e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004468:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2221      	movs	r2, #33	; 0x21
 800446e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2228      	movs	r2, #40	; 0x28
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7ff f9ee 	bl	800385a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800447e:	bf00      	nop
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004486:	b480      	push	{r7}
 8004488:	b083      	sub	sp, #12
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004492:	b29b      	uxth	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d011      	beq.n	80044bc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449c:	781a      	ldrb	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bc80      	pop	{r7}
 80044c4:	4770      	bx	lr

080044c6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b084      	sub	sp, #16
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044da:	b29b      	uxth	r3, r3
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d02c      	beq.n	800453a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	691a      	ldr	r2, [r3, #16]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	b2d2      	uxtb	r2, r2
 80044ec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	1c5a      	adds	r2, r3, #1
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	3b01      	subs	r3, #1
 8004500:	b29a      	uxth	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450a:	b29b      	uxth	r3, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	d114      	bne.n	800453a <I2C_SlaveReceive_RXNE+0x74>
 8004510:	7bfb      	ldrb	r3, [r7, #15]
 8004512:	2b2a      	cmp	r3, #42	; 0x2a
 8004514:	d111      	bne.n	800453a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004524:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2222      	movs	r2, #34	; 0x22
 800452a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2228      	movs	r2, #40	; 0x28
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f7ff f999 	bl	800386c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800453a:	bf00      	nop
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454e:	b29b      	uxth	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d012      	beq.n	800457a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	691a      	ldr	r2, [r3, #16]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	1c5a      	adds	r2, r3, #1
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004570:	b29b      	uxth	r3, r3
 8004572:	3b01      	subs	r3, #1
 8004574:	b29a      	uxth	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800457a:	bf00      	nop
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	bc80      	pop	{r7}
 8004582:	4770      	bx	lr

08004584 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800458e:	2300      	movs	r3, #0
 8004590:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004598:	b2db      	uxtb	r3, r3
 800459a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800459e:	2b28      	cmp	r3, #40	; 0x28
 80045a0:	d127      	bne.n	80045f2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045b0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	089b      	lsrs	r3, r3, #2
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80045be:	2301      	movs	r3, #1
 80045c0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	09db      	lsrs	r3, r3, #7
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d103      	bne.n	80045d6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	81bb      	strh	r3, [r7, #12]
 80045d4:	e002      	b.n	80045dc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80045e4:	89ba      	ldrh	r2, [r7, #12]
 80045e6:	7bfb      	ldrb	r3, [r7, #15]
 80045e8:	4619      	mov	r1, r3
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7ff f947 	bl	800387e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80045f0:	e00e      	b.n	8004610 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045f2:	2300      	movs	r3, #0
 80045f4:	60bb      	str	r3, [r7, #8]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	60bb      	str	r3, [r7, #8]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	60bb      	str	r3, [r7, #8]
 8004606:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004610:	bf00      	nop
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004626:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004636:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004638:	2300      	movs	r3, #0
 800463a:	60bb      	str	r3, [r7, #8]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	60bb      	str	r3, [r7, #8]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0201 	orr.w	r2, r2, #1
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004664:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004670:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004674:	d172      	bne.n	800475c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004676:	7bfb      	ldrb	r3, [r7, #15]
 8004678:	2b22      	cmp	r3, #34	; 0x22
 800467a:	d002      	beq.n	8004682 <I2C_Slave_STOPF+0x6a>
 800467c:	7bfb      	ldrb	r3, [r7, #15]
 800467e:	2b2a      	cmp	r3, #42	; 0x2a
 8004680:	d135      	bne.n	80046ee <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	b29a      	uxth	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004694:	b29b      	uxth	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d005      	beq.n	80046a6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	f043 0204 	orr.w	r2, r3, #4
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046b4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fe f816 	bl	80026ec <HAL_DMA_GetState>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d049      	beq.n	800475a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ca:	4a69      	ldr	r2, [pc, #420]	; (8004870 <I2C_Slave_STOPF+0x258>)
 80046cc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fd ffc9 	bl	800266a <HAL_DMA_Abort_IT>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d03d      	beq.n	800475a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046e8:	4610      	mov	r0, r2
 80046ea:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046ec:	e035      	b.n	800475a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004700:	b29b      	uxth	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d005      	beq.n	8004712 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	f043 0204 	orr.w	r2, r3, #4
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004720:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004726:	4618      	mov	r0, r3
 8004728:	f7fd ffe0 	bl	80026ec <HAL_DMA_GetState>
 800472c:	4603      	mov	r3, r0
 800472e:	2b01      	cmp	r3, #1
 8004730:	d014      	beq.n	800475c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004736:	4a4e      	ldr	r2, [pc, #312]	; (8004870 <I2C_Slave_STOPF+0x258>)
 8004738:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473e:	4618      	mov	r0, r3
 8004740:	f7fd ff93 	bl	800266a <HAL_DMA_Abort_IT>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d008      	beq.n	800475c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004754:	4610      	mov	r0, r2
 8004756:	4798      	blx	r3
 8004758:	e000      	b.n	800475c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800475a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004760:	b29b      	uxth	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d03e      	beq.n	80047e4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b04      	cmp	r3, #4
 8004772:	d112      	bne.n	800479a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	691a      	ldr	r2, [r3, #16]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	1c5a      	adds	r2, r3, #1
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004790:	b29b      	uxth	r3, r3
 8004792:	3b01      	subs	r3, #1
 8004794:	b29a      	uxth	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a4:	2b40      	cmp	r3, #64	; 0x40
 80047a6:	d112      	bne.n	80047ce <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	691a      	ldr	r2, [r3, #16]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	b2d2      	uxtb	r2, r2
 80047b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	1c5a      	adds	r2, r3, #1
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	3b01      	subs	r3, #1
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d005      	beq.n	80047e4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047dc:	f043 0204 	orr.w	r2, r3, #4
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 f843 	bl	8004878 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80047f2:	e039      	b.n	8004868 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80047f4:	7bfb      	ldrb	r3, [r7, #15]
 80047f6:	2b2a      	cmp	r3, #42	; 0x2a
 80047f8:	d109      	bne.n	800480e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2228      	movs	r2, #40	; 0x28
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f7ff f82f 	bl	800386c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b28      	cmp	r3, #40	; 0x28
 8004818:	d111      	bne.n	800483e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a15      	ldr	r2, [pc, #84]	; (8004874 <I2C_Slave_STOPF+0x25c>)
 800481e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2220      	movs	r2, #32
 800482a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7ff f82e 	bl	8003898 <HAL_I2C_ListenCpltCallback>
}
 800483c:	e014      	b.n	8004868 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004842:	2b22      	cmp	r3, #34	; 0x22
 8004844:	d002      	beq.n	800484c <I2C_Slave_STOPF+0x234>
 8004846:	7bfb      	ldrb	r3, [r7, #15]
 8004848:	2b22      	cmp	r3, #34	; 0x22
 800484a:	d10d      	bne.n	8004868 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2220      	movs	r2, #32
 8004856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7ff f802 	bl	800386c <HAL_I2C_SlaveRxCpltCallback>
}
 8004868:	bf00      	nop
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	08004dd9 	.word	0x08004dd9
 8004874:	ffff0000 	.word	0xffff0000

08004878 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004886:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800488e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004890:	7bbb      	ldrb	r3, [r7, #14]
 8004892:	2b10      	cmp	r3, #16
 8004894:	d002      	beq.n	800489c <I2C_ITError+0x24>
 8004896:	7bbb      	ldrb	r3, [r7, #14]
 8004898:	2b40      	cmp	r3, #64	; 0x40
 800489a:	d10a      	bne.n	80048b2 <I2C_ITError+0x3a>
 800489c:	7bfb      	ldrb	r3, [r7, #15]
 800489e:	2b22      	cmp	r3, #34	; 0x22
 80048a0:	d107      	bne.n	80048b2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048b0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80048b2:	7bfb      	ldrb	r3, [r7, #15]
 80048b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80048b8:	2b28      	cmp	r3, #40	; 0x28
 80048ba:	d107      	bne.n	80048cc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2228      	movs	r2, #40	; 0x28
 80048c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80048ca:	e015      	b.n	80048f8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048da:	d00a      	beq.n	80048f2 <I2C_ITError+0x7a>
 80048dc:	7bfb      	ldrb	r3, [r7, #15]
 80048de:	2b60      	cmp	r3, #96	; 0x60
 80048e0:	d007      	beq.n	80048f2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2220      	movs	r2, #32
 80048e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004902:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004906:	d162      	bne.n	80049ce <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004916:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b01      	cmp	r3, #1
 8004924:	d020      	beq.n	8004968 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800492a:	4a6a      	ldr	r2, [pc, #424]	; (8004ad4 <I2C_ITError+0x25c>)
 800492c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004932:	4618      	mov	r0, r3
 8004934:	f7fd fe99 	bl	800266a <HAL_DMA_Abort_IT>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 8089 	beq.w	8004a52 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 0201 	bic.w	r2, r2, #1
 800494e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2220      	movs	r2, #32
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800495c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004962:	4610      	mov	r0, r2
 8004964:	4798      	blx	r3
 8004966:	e074      	b.n	8004a52 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496c:	4a59      	ldr	r2, [pc, #356]	; (8004ad4 <I2C_ITError+0x25c>)
 800496e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004974:	4618      	mov	r0, r3
 8004976:	f7fd fe78 	bl	800266a <HAL_DMA_Abort_IT>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d068      	beq.n	8004a52 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800498a:	2b40      	cmp	r3, #64	; 0x40
 800498c:	d10b      	bne.n	80049a6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	691a      	ldr	r2, [r3, #16]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004998:	b2d2      	uxtb	r2, r2
 800499a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f022 0201 	bic.w	r2, r2, #1
 80049b4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2220      	movs	r2, #32
 80049ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049c8:	4610      	mov	r0, r2
 80049ca:	4798      	blx	r3
 80049cc:	e041      	b.n	8004a52 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b60      	cmp	r3, #96	; 0x60
 80049d8:	d125      	bne.n	8004a26 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2220      	movs	r2, #32
 80049de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f2:	2b40      	cmp	r3, #64	; 0x40
 80049f4:	d10b      	bne.n	8004a0e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	691a      	ldr	r2, [r3, #16]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	b2d2      	uxtb	r2, r2
 8004a02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0201 	bic.w	r2, r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7fe ff5e 	bl	80038e0 <HAL_I2C_AbortCpltCallback>
 8004a24:	e015      	b.n	8004a52 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a30:	2b40      	cmp	r3, #64	; 0x40
 8004a32:	d10b      	bne.n	8004a4c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	691a      	ldr	r2, [r3, #16]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	b2d2      	uxtb	r2, r2
 8004a40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	1c5a      	adds	r2, r3, #1
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f7fe ff3e 	bl	80038ce <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10e      	bne.n	8004a80 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d109      	bne.n	8004a80 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d104      	bne.n	8004a80 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d007      	beq.n	8004a90 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a8e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a96:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d113      	bne.n	8004acc <I2C_ITError+0x254>
 8004aa4:	7bfb      	ldrb	r3, [r7, #15]
 8004aa6:	2b28      	cmp	r3, #40	; 0x28
 8004aa8:	d110      	bne.n	8004acc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a0a      	ldr	r2, [pc, #40]	; (8004ad8 <I2C_ITError+0x260>)
 8004aae:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7fe fee6 	bl	8003898 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004acc:	bf00      	nop
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	08004dd9 	.word	0x08004dd9
 8004ad8:	ffff0000 	.word	0xffff0000

08004adc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b088      	sub	sp, #32
 8004ae0:	af02      	add	r7, sp, #8
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	4608      	mov	r0, r1
 8004ae6:	4611      	mov	r1, r2
 8004ae8:	461a      	mov	r2, r3
 8004aea:	4603      	mov	r3, r0
 8004aec:	817b      	strh	r3, [r7, #10]
 8004aee:	460b      	mov	r3, r1
 8004af0:	813b      	strh	r3, [r7, #8]
 8004af2:	4613      	mov	r3, r2
 8004af4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f000 fa08 	bl	8004f28 <I2C_WaitOnFlagUntilTimeout>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00d      	beq.n	8004b3a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b2c:	d103      	bne.n	8004b36 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e05f      	b.n	8004bfa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b3a:	897b      	ldrh	r3, [r7, #10]
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	461a      	mov	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	6a3a      	ldr	r2, [r7, #32]
 8004b4e:	492d      	ldr	r1, [pc, #180]	; (8004c04 <I2C_RequestMemoryWrite+0x128>)
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 fa63 	bl	800501c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d001      	beq.n	8004b60 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e04c      	b.n	8004bfa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b60:	2300      	movs	r3, #0
 8004b62:	617b      	str	r3, [r7, #20]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	617b      	str	r3, [r7, #20]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	617b      	str	r3, [r7, #20]
 8004b74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b78:	6a39      	ldr	r1, [r7, #32]
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 faee 	bl	800515c <I2C_WaitOnTXEFlagUntilTimeout>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00d      	beq.n	8004ba2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d107      	bne.n	8004b9e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e02b      	b.n	8004bfa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ba2:	88fb      	ldrh	r3, [r7, #6]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d105      	bne.n	8004bb4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ba8:	893b      	ldrh	r3, [r7, #8]
 8004baa:	b2da      	uxtb	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	611a      	str	r2, [r3, #16]
 8004bb2:	e021      	b.n	8004bf8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004bb4:	893b      	ldrh	r3, [r7, #8]
 8004bb6:	0a1b      	lsrs	r3, r3, #8
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc4:	6a39      	ldr	r1, [r7, #32]
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 fac8 	bl	800515c <I2C_WaitOnTXEFlagUntilTimeout>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00d      	beq.n	8004bee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d107      	bne.n	8004bea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004be8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e005      	b.n	8004bfa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bee:	893b      	ldrh	r3, [r7, #8]
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3718      	adds	r7, #24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	00010002 	.word	0x00010002

08004c08 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b088      	sub	sp, #32
 8004c0c:	af02      	add	r7, sp, #8
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	4608      	mov	r0, r1
 8004c12:	4611      	mov	r1, r2
 8004c14:	461a      	mov	r2, r3
 8004c16:	4603      	mov	r3, r0
 8004c18:	817b      	strh	r3, [r7, #10]
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	813b      	strh	r3, [r7, #8]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c30:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	6a3b      	ldr	r3, [r7, #32]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f000 f96a 	bl	8004f28 <I2C_WaitOnFlagUntilTimeout>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00d      	beq.n	8004c76 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c68:	d103      	bne.n	8004c72 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c70:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e0aa      	b.n	8004dcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c76:	897b      	ldrh	r3, [r7, #10]
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c88:	6a3a      	ldr	r2, [r7, #32]
 8004c8a:	4952      	ldr	r1, [pc, #328]	; (8004dd4 <I2C_RequestMemoryRead+0x1cc>)
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 f9c5 	bl	800501c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e097      	b.n	8004dcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	617b      	str	r3, [r7, #20]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	617b      	str	r3, [r7, #20]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	617b      	str	r3, [r7, #20]
 8004cb0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb4:	6a39      	ldr	r1, [r7, #32]
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f000 fa50 	bl	800515c <I2C_WaitOnTXEFlagUntilTimeout>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00d      	beq.n	8004cde <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	2b04      	cmp	r3, #4
 8004cc8:	d107      	bne.n	8004cda <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cd8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e076      	b.n	8004dcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cde:	88fb      	ldrh	r3, [r7, #6]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d105      	bne.n	8004cf0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ce4:	893b      	ldrh	r3, [r7, #8]
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	611a      	str	r2, [r3, #16]
 8004cee:	e021      	b.n	8004d34 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004cf0:	893b      	ldrh	r3, [r7, #8]
 8004cf2:	0a1b      	lsrs	r3, r3, #8
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	b2da      	uxtb	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d00:	6a39      	ldr	r1, [r7, #32]
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f000 fa2a 	bl	800515c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00d      	beq.n	8004d2a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	d107      	bne.n	8004d26 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e050      	b.n	8004dcc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d2a:	893b      	ldrh	r3, [r7, #8]
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d36:	6a39      	ldr	r1, [r7, #32]
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 fa0f 	bl	800515c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00d      	beq.n	8004d60 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d48:	2b04      	cmp	r3, #4
 8004d4a:	d107      	bne.n	8004d5c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d5a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e035      	b.n	8004dcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d6e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	6a3b      	ldr	r3, [r7, #32]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 f8d3 	bl	8004f28 <I2C_WaitOnFlagUntilTimeout>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00d      	beq.n	8004da4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d96:	d103      	bne.n	8004da0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e013      	b.n	8004dcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004da4:	897b      	ldrh	r3, [r7, #10]
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	f043 0301 	orr.w	r3, r3, #1
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	6a3a      	ldr	r2, [r7, #32]
 8004db8:	4906      	ldr	r1, [pc, #24]	; (8004dd4 <I2C_RequestMemoryRead+0x1cc>)
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f000 f92e 	bl	800501c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e000      	b.n	8004dcc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	00010002 	.word	0x00010002

08004dd8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004df2:	4b4b      	ldr	r3, [pc, #300]	; (8004f20 <I2C_DMAAbort+0x148>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	08db      	lsrs	r3, r3, #3
 8004df8:	4a4a      	ldr	r2, [pc, #296]	; (8004f24 <I2C_DMAAbort+0x14c>)
 8004dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfe:	0a1a      	lsrs	r2, r3, #8
 8004e00:	4613      	mov	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	00da      	lsls	r2, r3, #3
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d106      	bne.n	8004e20 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	f043 0220 	orr.w	r2, r3, #32
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004e1e:	e00a      	b.n	8004e36 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	3b01      	subs	r3, #1
 8004e24:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e34:	d0ea      	beq.n	8004e0c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e42:	2200      	movs	r2, #0
 8004e44:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e52:	2200      	movs	r2, #0
 8004e54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e64:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d003      	beq.n	8004e7c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e78:	2200      	movs	r2, #0
 8004e7a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d003      	beq.n	8004e8c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e88:	2200      	movs	r2, #0
 8004e8a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f022 0201 	bic.w	r2, r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b60      	cmp	r3, #96	; 0x60
 8004ea6:	d10e      	bne.n	8004ec6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004ebe:	6978      	ldr	r0, [r7, #20]
 8004ec0:	f7fe fd0e 	bl	80038e0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ec4:	e027      	b.n	8004f16 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ec6:	7cfb      	ldrb	r3, [r7, #19]
 8004ec8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ecc:	2b28      	cmp	r3, #40	; 0x28
 8004ece:	d117      	bne.n	8004f00 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f042 0201 	orr.w	r2, r2, #1
 8004ede:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004eee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2228      	movs	r2, #40	; 0x28
 8004efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004efe:	e007      	b.n	8004f10 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	2220      	movs	r2, #32
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004f10:	6978      	ldr	r0, [r7, #20]
 8004f12:	f7fe fcdc 	bl	80038ce <HAL_I2C_ErrorCallback>
}
 8004f16:	bf00      	nop
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	20000020 	.word	0x20000020
 8004f24:	14f8b589 	.word	0x14f8b589

08004f28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	603b      	str	r3, [r7, #0]
 8004f34:	4613      	mov	r3, r2
 8004f36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f38:	e048      	b.n	8004fcc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f40:	d044      	beq.n	8004fcc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f42:	f7fd fa59 	bl	80023f8 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d302      	bcc.n	8004f58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d139      	bne.n	8004fcc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	0c1b      	lsrs	r3, r3, #16
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d10d      	bne.n	8004f7e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	43da      	mvns	r2, r3
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	bf0c      	ite	eq
 8004f74:	2301      	moveq	r3, #1
 8004f76:	2300      	movne	r3, #0
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	e00c      	b.n	8004f98 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	43da      	mvns	r2, r3
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	4013      	ands	r3, r2
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	bf0c      	ite	eq
 8004f90:	2301      	moveq	r3, #1
 8004f92:	2300      	movne	r3, #0
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	461a      	mov	r2, r3
 8004f98:	79fb      	ldrb	r3, [r7, #7]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d116      	bne.n	8004fcc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb8:	f043 0220 	orr.w	r2, r3, #32
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e023      	b.n	8005014 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	0c1b      	lsrs	r3, r3, #16
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d10d      	bne.n	8004ff2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	43da      	mvns	r2, r3
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	bf0c      	ite	eq
 8004fe8:	2301      	moveq	r3, #1
 8004fea:	2300      	movne	r3, #0
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	461a      	mov	r2, r3
 8004ff0:	e00c      	b.n	800500c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	43da      	mvns	r2, r3
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	2b00      	cmp	r3, #0
 8005002:	bf0c      	ite	eq
 8005004:	2301      	moveq	r3, #1
 8005006:	2300      	movne	r3, #0
 8005008:	b2db      	uxtb	r3, r3
 800500a:	461a      	mov	r2, r3
 800500c:	79fb      	ldrb	r3, [r7, #7]
 800500e:	429a      	cmp	r2, r3
 8005010:	d093      	beq.n	8004f3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
 8005028:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800502a:	e071      	b.n	8005110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800503a:	d123      	bne.n	8005084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800504a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005054:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2220      	movs	r2, #32
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005070:	f043 0204 	orr.w	r2, r3, #4
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e067      	b.n	8005154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800508a:	d041      	beq.n	8005110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800508c:	f7fd f9b4 	bl	80023f8 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	429a      	cmp	r2, r3
 800509a:	d302      	bcc.n	80050a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d136      	bne.n	8005110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	0c1b      	lsrs	r3, r3, #16
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d10c      	bne.n	80050c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	43da      	mvns	r2, r3
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	4013      	ands	r3, r2
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	bf14      	ite	ne
 80050be:	2301      	movne	r3, #1
 80050c0:	2300      	moveq	r3, #0
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	e00b      	b.n	80050de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	43da      	mvns	r2, r3
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	4013      	ands	r3, r2
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	bf14      	ite	ne
 80050d8:	2301      	movne	r3, #1
 80050da:	2300      	moveq	r3, #0
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d016      	beq.n	8005110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fc:	f043 0220 	orr.w	r2, r3, #32
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e021      	b.n	8005154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	0c1b      	lsrs	r3, r3, #16
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b01      	cmp	r3, #1
 8005118:	d10c      	bne.n	8005134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	43da      	mvns	r2, r3
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	4013      	ands	r3, r2
 8005126:	b29b      	uxth	r3, r3
 8005128:	2b00      	cmp	r3, #0
 800512a:	bf14      	ite	ne
 800512c:	2301      	movne	r3, #1
 800512e:	2300      	moveq	r3, #0
 8005130:	b2db      	uxtb	r3, r3
 8005132:	e00b      	b.n	800514c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	43da      	mvns	r2, r3
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	4013      	ands	r3, r2
 8005140:	b29b      	uxth	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	bf14      	ite	ne
 8005146:	2301      	movne	r3, #1
 8005148:	2300      	moveq	r3, #0
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b00      	cmp	r3, #0
 800514e:	f47f af6d 	bne.w	800502c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005168:	e034      	b.n	80051d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 f915 	bl	800539a <I2C_IsAcknowledgeFailed>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e034      	b.n	80051e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005180:	d028      	beq.n	80051d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005182:	f7fd f939 	bl	80023f8 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	429a      	cmp	r2, r3
 8005190:	d302      	bcc.n	8005198 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d11d      	bne.n	80051d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a2:	2b80      	cmp	r3, #128	; 0x80
 80051a4:	d016      	beq.n	80051d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c0:	f043 0220 	orr.w	r2, r3, #32
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e007      	b.n	80051e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051de:	2b80      	cmp	r3, #128	; 0x80
 80051e0:	d1c3      	bne.n	800516a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051f8:	e034      	b.n	8005264 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	f000 f8cd 	bl	800539a <I2C_IsAcknowledgeFailed>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e034      	b.n	8005274 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005210:	d028      	beq.n	8005264 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005212:	f7fd f8f1 	bl	80023f8 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	429a      	cmp	r2, r3
 8005220:	d302      	bcc.n	8005228 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d11d      	bne.n	8005264 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	f003 0304 	and.w	r3, r3, #4
 8005232:	2b04      	cmp	r3, #4
 8005234:	d016      	beq.n	8005264 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2220      	movs	r2, #32
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005250:	f043 0220 	orr.w	r2, r3, #32
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e007      	b.n	8005274 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	f003 0304 	and.w	r3, r3, #4
 800526e:	2b04      	cmp	r3, #4
 8005270:	d1c3      	bne.n	80051fa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005284:	2300      	movs	r3, #0
 8005286:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005288:	4b13      	ldr	r3, [pc, #76]	; (80052d8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	08db      	lsrs	r3, r3, #3
 800528e:	4a13      	ldr	r2, [pc, #76]	; (80052dc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005290:	fba2 2303 	umull	r2, r3, r2, r3
 8005294:	0a1a      	lsrs	r2, r3, #8
 8005296:	4613      	mov	r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4413      	add	r3, r2
 800529c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	3b01      	subs	r3, #1
 80052a2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d107      	bne.n	80052ba <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	f043 0220 	orr.w	r2, r3, #32
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e008      	b.n	80052cc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052c8:	d0e9      	beq.n	800529e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bc80      	pop	{r7}
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	20000020 	.word	0x20000020
 80052dc:	14f8b589 	.word	0x14f8b589

080052e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052ec:	e049      	b.n	8005382 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	695b      	ldr	r3, [r3, #20]
 80052f4:	f003 0310 	and.w	r3, r3, #16
 80052f8:	2b10      	cmp	r3, #16
 80052fa:	d119      	bne.n	8005330 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f06f 0210 	mvn.w	r2, #16
 8005304:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2220      	movs	r2, #32
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e030      	b.n	8005392 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005330:	f7fd f862 	bl	80023f8 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	429a      	cmp	r2, r3
 800533e:	d302      	bcc.n	8005346 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d11d      	bne.n	8005382 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005350:	2b40      	cmp	r3, #64	; 0x40
 8005352:	d016      	beq.n	8005382 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2220      	movs	r2, #32
 800535e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	f043 0220 	orr.w	r2, r3, #32
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e007      	b.n	8005392 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538c:	2b40      	cmp	r3, #64	; 0x40
 800538e:	d1ae      	bne.n	80052ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800539a:	b480      	push	{r7}
 800539c:	b083      	sub	sp, #12
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053b0:	d11b      	bne.n	80053ea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053ba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2220      	movs	r2, #32
 80053c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d6:	f043 0204 	orr.w	r2, r3, #4
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e000      	b.n	80053ec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bc80      	pop	{r7}
 80053f4:	4770      	bx	lr

080053f6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b083      	sub	sp, #12
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005402:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005406:	d103      	bne.n	8005410 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800540e:	e007      	b.n	8005420 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005414:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005418:	d102      	bne.n	8005420 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2208      	movs	r2, #8
 800541e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	bc80      	pop	{r7}
 8005428:	4770      	bx	lr
	...

0800542c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b088      	sub	sp, #32
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e31d      	b.n	8005a7a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800543e:	4b94      	ldr	r3, [pc, #592]	; (8005690 <HAL_RCC_OscConfig+0x264>)
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 030c 	and.w	r3, r3, #12
 8005446:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005448:	4b91      	ldr	r3, [pc, #580]	; (8005690 <HAL_RCC_OscConfig+0x264>)
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005450:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	d07b      	beq.n	8005556 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	2b08      	cmp	r3, #8
 8005462:	d006      	beq.n	8005472 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	2b0c      	cmp	r3, #12
 8005468:	d10f      	bne.n	800548a <HAL_RCC_OscConfig+0x5e>
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005470:	d10b      	bne.n	800548a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005472:	4b87      	ldr	r3, [pc, #540]	; (8005690 <HAL_RCC_OscConfig+0x264>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d06a      	beq.n	8005554 <HAL_RCC_OscConfig+0x128>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d166      	bne.n	8005554 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e2f7      	b.n	8005a7a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d106      	bne.n	80054a0 <HAL_RCC_OscConfig+0x74>
 8005492:	4b7f      	ldr	r3, [pc, #508]	; (8005690 <HAL_RCC_OscConfig+0x264>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a7e      	ldr	r2, [pc, #504]	; (8005690 <HAL_RCC_OscConfig+0x264>)
 8005498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800549c:	6013      	str	r3, [r2, #0]
 800549e:	e02d      	b.n	80054fc <HAL_RCC_OscConfig+0xd0>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10c      	bne.n	80054c2 <HAL_RCC_OscConfig+0x96>
 80054a8:	4b79      	ldr	r3, [pc, #484]	; (8005690 <HAL_RCC_OscConfig+0x264>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a78      	ldr	r2, [pc, #480]	; (8005690 <HAL_RCC_OscConfig+0x264>)
 80054ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054b2:	6013      	str	r3, [r2, #0]
 80054b4:	4b76      	ldr	r3, [pc, #472]	; (8005690 <HAL_RCC_OscConfig+0x264>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a75      	ldr	r2, [pc, #468]	; (8005690 <HAL_RCC_OscConfig+0x264>)
 80054ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054be:	6013      	str	r3, [r2, #0]
 80054c0:	e01c      	b.n	80054fc <HAL_RCC_OscConfig+0xd0>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	2b05      	cmp	r3, #5
 80054c8:	d10c      	bne.n	80054e4 <HAL_RCC_OscConfig+0xb8>
 80054ca:	4b71      	ldr	r3, [pc, #452]	; (8005690 <HAL_RCC_OscConfig+0x264>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a70      	ldr	r2, [pc, #448]	; (8005690 <HAL_RCC_OscConfig+0x264>)
 80054d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054d4:	6013      	str	r3, [r2, #0]
 80054d6:	4b6e      	ldr	r3, [pc, #440]	; (8005690 <HAL_RCC_OscConfig+0x264>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a6d      	ldr	r2, [pc, #436]	; (8005690 <HAL_RCC_OscConfig+0x264>)
 80054dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054e0:	6013      	str	r3, [r2, #0]
 80054e2:	e00b      	b.n	80054fc <HAL_RCC_OscConfig+0xd0>
 80054e4:	4b6a      	ldr	r3, [pc, #424]	; (8005690 <HAL_RCC_OscConfig+0x264>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a69      	ldr	r2, [pc, #420]	; (8005690 <HAL_RCC_OscConfig+0x264>)
 80054ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ee:	6013      	str	r3, [r2, #0]
 80054f0:	4b67      	ldr	r3, [pc, #412]	; (8005690 <HAL_RCC_OscConfig+0x264>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a66      	ldr	r2, [pc, #408]	; (8005690 <HAL_RCC_OscConfig+0x264>)
 80054f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d013      	beq.n	800552c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005504:	f7fc ff78 	bl	80023f8 <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800550a:	e008      	b.n	800551e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800550c:	f7fc ff74 	bl	80023f8 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b64      	cmp	r3, #100	; 0x64
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e2ad      	b.n	8005a7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800551e:	4b5c      	ldr	r3, [pc, #368]	; (8005690 <HAL_RCC_OscConfig+0x264>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d0f0      	beq.n	800550c <HAL_RCC_OscConfig+0xe0>
 800552a:	e014      	b.n	8005556 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800552c:	f7fc ff64 	bl	80023f8 <HAL_GetTick>
 8005530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005532:	e008      	b.n	8005546 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005534:	f7fc ff60 	bl	80023f8 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b64      	cmp	r3, #100	; 0x64
 8005540:	d901      	bls.n	8005546 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e299      	b.n	8005a7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005546:	4b52      	ldr	r3, [pc, #328]	; (8005690 <HAL_RCC_OscConfig+0x264>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1f0      	bne.n	8005534 <HAL_RCC_OscConfig+0x108>
 8005552:	e000      	b.n	8005556 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d05a      	beq.n	8005618 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	2b04      	cmp	r3, #4
 8005566:	d005      	beq.n	8005574 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	2b0c      	cmp	r3, #12
 800556c:	d119      	bne.n	80055a2 <HAL_RCC_OscConfig+0x176>
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d116      	bne.n	80055a2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005574:	4b46      	ldr	r3, [pc, #280]	; (8005690 <HAL_RCC_OscConfig+0x264>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d005      	beq.n	800558c <HAL_RCC_OscConfig+0x160>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d001      	beq.n	800558c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e276      	b.n	8005a7a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800558c:	4b40      	ldr	r3, [pc, #256]	; (8005690 <HAL_RCC_OscConfig+0x264>)
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	021b      	lsls	r3, r3, #8
 800559a:	493d      	ldr	r1, [pc, #244]	; (8005690 <HAL_RCC_OscConfig+0x264>)
 800559c:	4313      	orrs	r3, r2
 800559e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055a0:	e03a      	b.n	8005618 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d020      	beq.n	80055ec <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055aa:	4b3a      	ldr	r3, [pc, #232]	; (8005694 <HAL_RCC_OscConfig+0x268>)
 80055ac:	2201      	movs	r2, #1
 80055ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b0:	f7fc ff22 	bl	80023f8 <HAL_GetTick>
 80055b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055b6:	e008      	b.n	80055ca <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055b8:	f7fc ff1e 	bl	80023f8 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e257      	b.n	8005a7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055ca:	4b31      	ldr	r3, [pc, #196]	; (8005690 <HAL_RCC_OscConfig+0x264>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d0f0      	beq.n	80055b8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055d6:	4b2e      	ldr	r3, [pc, #184]	; (8005690 <HAL_RCC_OscConfig+0x264>)
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	021b      	lsls	r3, r3, #8
 80055e4:	492a      	ldr	r1, [pc, #168]	; (8005690 <HAL_RCC_OscConfig+0x264>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	604b      	str	r3, [r1, #4]
 80055ea:	e015      	b.n	8005618 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055ec:	4b29      	ldr	r3, [pc, #164]	; (8005694 <HAL_RCC_OscConfig+0x268>)
 80055ee:	2200      	movs	r2, #0
 80055f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f2:	f7fc ff01 	bl	80023f8 <HAL_GetTick>
 80055f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80055f8:	e008      	b.n	800560c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055fa:	f7fc fefd 	bl	80023f8 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	2b02      	cmp	r3, #2
 8005606:	d901      	bls.n	800560c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e236      	b.n	8005a7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800560c:	4b20      	ldr	r3, [pc, #128]	; (8005690 <HAL_RCC_OscConfig+0x264>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1f0      	bne.n	80055fa <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0310 	and.w	r3, r3, #16
 8005620:	2b00      	cmp	r3, #0
 8005622:	f000 80b8 	beq.w	8005796 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d170      	bne.n	800570e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800562c:	4b18      	ldr	r3, [pc, #96]	; (8005690 <HAL_RCC_OscConfig+0x264>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005634:	2b00      	cmp	r3, #0
 8005636:	d005      	beq.n	8005644 <HAL_RCC_OscConfig+0x218>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d101      	bne.n	8005644 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e21a      	b.n	8005a7a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a1a      	ldr	r2, [r3, #32]
 8005648:	4b11      	ldr	r3, [pc, #68]	; (8005690 <HAL_RCC_OscConfig+0x264>)
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005650:	429a      	cmp	r2, r3
 8005652:	d921      	bls.n	8005698 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a1b      	ldr	r3, [r3, #32]
 8005658:	4618      	mov	r0, r3
 800565a:	f000 fc7d 	bl	8005f58 <RCC_SetFlashLatencyFromMSIRange>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d001      	beq.n	8005668 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e208      	b.n	8005a7a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005668:	4b09      	ldr	r3, [pc, #36]	; (8005690 <HAL_RCC_OscConfig+0x264>)
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	4906      	ldr	r1, [pc, #24]	; (8005690 <HAL_RCC_OscConfig+0x264>)
 8005676:	4313      	orrs	r3, r2
 8005678:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800567a:	4b05      	ldr	r3, [pc, #20]	; (8005690 <HAL_RCC_OscConfig+0x264>)
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	061b      	lsls	r3, r3, #24
 8005688:	4901      	ldr	r1, [pc, #4]	; (8005690 <HAL_RCC_OscConfig+0x264>)
 800568a:	4313      	orrs	r3, r2
 800568c:	604b      	str	r3, [r1, #4]
 800568e:	e020      	b.n	80056d2 <HAL_RCC_OscConfig+0x2a6>
 8005690:	40023800 	.word	0x40023800
 8005694:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005698:	4b99      	ldr	r3, [pc, #612]	; (8005900 <HAL_RCC_OscConfig+0x4d4>)
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	4996      	ldr	r1, [pc, #600]	; (8005900 <HAL_RCC_OscConfig+0x4d4>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056aa:	4b95      	ldr	r3, [pc, #596]	; (8005900 <HAL_RCC_OscConfig+0x4d4>)
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	69db      	ldr	r3, [r3, #28]
 80056b6:	061b      	lsls	r3, r3, #24
 80056b8:	4991      	ldr	r1, [pc, #580]	; (8005900 <HAL_RCC_OscConfig+0x4d4>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 fc48 	bl	8005f58 <RCC_SetFlashLatencyFromMSIRange>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e1d3      	b.n	8005a7a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	0b5b      	lsrs	r3, r3, #13
 80056d8:	3301      	adds	r3, #1
 80056da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80056de:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80056e2:	4a87      	ldr	r2, [pc, #540]	; (8005900 <HAL_RCC_OscConfig+0x4d4>)
 80056e4:	6892      	ldr	r2, [r2, #8]
 80056e6:	0912      	lsrs	r2, r2, #4
 80056e8:	f002 020f 	and.w	r2, r2, #15
 80056ec:	4985      	ldr	r1, [pc, #532]	; (8005904 <HAL_RCC_OscConfig+0x4d8>)
 80056ee:	5c8a      	ldrb	r2, [r1, r2]
 80056f0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80056f2:	4a85      	ldr	r2, [pc, #532]	; (8005908 <HAL_RCC_OscConfig+0x4dc>)
 80056f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80056f6:	4b85      	ldr	r3, [pc, #532]	; (800590c <HAL_RCC_OscConfig+0x4e0>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7fc fe30 	bl	8002360 <HAL_InitTick>
 8005700:	4603      	mov	r3, r0
 8005702:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005704:	7bfb      	ldrb	r3, [r7, #15]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d045      	beq.n	8005796 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800570a:	7bfb      	ldrb	r3, [r7, #15]
 800570c:	e1b5      	b.n	8005a7a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d029      	beq.n	800576a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005716:	4b7e      	ldr	r3, [pc, #504]	; (8005910 <HAL_RCC_OscConfig+0x4e4>)
 8005718:	2201      	movs	r2, #1
 800571a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800571c:	f7fc fe6c 	bl	80023f8 <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005722:	e008      	b.n	8005736 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005724:	f7fc fe68 	bl	80023f8 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b02      	cmp	r3, #2
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e1a1      	b.n	8005a7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005736:	4b72      	ldr	r3, [pc, #456]	; (8005900 <HAL_RCC_OscConfig+0x4d4>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800573e:	2b00      	cmp	r3, #0
 8005740:	d0f0      	beq.n	8005724 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005742:	4b6f      	ldr	r3, [pc, #444]	; (8005900 <HAL_RCC_OscConfig+0x4d4>)
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	496c      	ldr	r1, [pc, #432]	; (8005900 <HAL_RCC_OscConfig+0x4d4>)
 8005750:	4313      	orrs	r3, r2
 8005752:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005754:	4b6a      	ldr	r3, [pc, #424]	; (8005900 <HAL_RCC_OscConfig+0x4d4>)
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	69db      	ldr	r3, [r3, #28]
 8005760:	061b      	lsls	r3, r3, #24
 8005762:	4967      	ldr	r1, [pc, #412]	; (8005900 <HAL_RCC_OscConfig+0x4d4>)
 8005764:	4313      	orrs	r3, r2
 8005766:	604b      	str	r3, [r1, #4]
 8005768:	e015      	b.n	8005796 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800576a:	4b69      	ldr	r3, [pc, #420]	; (8005910 <HAL_RCC_OscConfig+0x4e4>)
 800576c:	2200      	movs	r2, #0
 800576e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005770:	f7fc fe42 	bl	80023f8 <HAL_GetTick>
 8005774:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005776:	e008      	b.n	800578a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005778:	f7fc fe3e 	bl	80023f8 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	2b02      	cmp	r3, #2
 8005784:	d901      	bls.n	800578a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e177      	b.n	8005a7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800578a:	4b5d      	ldr	r3, [pc, #372]	; (8005900 <HAL_RCC_OscConfig+0x4d4>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1f0      	bne.n	8005778 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0308 	and.w	r3, r3, #8
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d030      	beq.n	8005804 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d016      	beq.n	80057d8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057aa:	4b5a      	ldr	r3, [pc, #360]	; (8005914 <HAL_RCC_OscConfig+0x4e8>)
 80057ac:	2201      	movs	r2, #1
 80057ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057b0:	f7fc fe22 	bl	80023f8 <HAL_GetTick>
 80057b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80057b6:	e008      	b.n	80057ca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057b8:	f7fc fe1e 	bl	80023f8 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e157      	b.n	8005a7a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80057ca:	4b4d      	ldr	r3, [pc, #308]	; (8005900 <HAL_RCC_OscConfig+0x4d4>)
 80057cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d0f0      	beq.n	80057b8 <HAL_RCC_OscConfig+0x38c>
 80057d6:	e015      	b.n	8005804 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057d8:	4b4e      	ldr	r3, [pc, #312]	; (8005914 <HAL_RCC_OscConfig+0x4e8>)
 80057da:	2200      	movs	r2, #0
 80057dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057de:	f7fc fe0b 	bl	80023f8 <HAL_GetTick>
 80057e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80057e4:	e008      	b.n	80057f8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057e6:	f7fc fe07 	bl	80023f8 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d901      	bls.n	80057f8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e140      	b.n	8005a7a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80057f8:	4b41      	ldr	r3, [pc, #260]	; (8005900 <HAL_RCC_OscConfig+0x4d4>)
 80057fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057fc:	f003 0302 	and.w	r3, r3, #2
 8005800:	2b00      	cmp	r3, #0
 8005802:	d1f0      	bne.n	80057e6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 80b5 	beq.w	800597c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005812:	2300      	movs	r3, #0
 8005814:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005816:	4b3a      	ldr	r3, [pc, #232]	; (8005900 <HAL_RCC_OscConfig+0x4d4>)
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10d      	bne.n	800583e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005822:	4b37      	ldr	r3, [pc, #220]	; (8005900 <HAL_RCC_OscConfig+0x4d4>)
 8005824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005826:	4a36      	ldr	r2, [pc, #216]	; (8005900 <HAL_RCC_OscConfig+0x4d4>)
 8005828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800582c:	6253      	str	r3, [r2, #36]	; 0x24
 800582e:	4b34      	ldr	r3, [pc, #208]	; (8005900 <HAL_RCC_OscConfig+0x4d4>)
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005836:	60bb      	str	r3, [r7, #8]
 8005838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800583a:	2301      	movs	r3, #1
 800583c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800583e:	4b36      	ldr	r3, [pc, #216]	; (8005918 <HAL_RCC_OscConfig+0x4ec>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005846:	2b00      	cmp	r3, #0
 8005848:	d118      	bne.n	800587c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800584a:	4b33      	ldr	r3, [pc, #204]	; (8005918 <HAL_RCC_OscConfig+0x4ec>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a32      	ldr	r2, [pc, #200]	; (8005918 <HAL_RCC_OscConfig+0x4ec>)
 8005850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005854:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005856:	f7fc fdcf 	bl	80023f8 <HAL_GetTick>
 800585a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800585c:	e008      	b.n	8005870 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800585e:	f7fc fdcb 	bl	80023f8 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b64      	cmp	r3, #100	; 0x64
 800586a:	d901      	bls.n	8005870 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e104      	b.n	8005a7a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005870:	4b29      	ldr	r3, [pc, #164]	; (8005918 <HAL_RCC_OscConfig+0x4ec>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005878:	2b00      	cmp	r3, #0
 800587a:	d0f0      	beq.n	800585e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d106      	bne.n	8005892 <HAL_RCC_OscConfig+0x466>
 8005884:	4b1e      	ldr	r3, [pc, #120]	; (8005900 <HAL_RCC_OscConfig+0x4d4>)
 8005886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005888:	4a1d      	ldr	r2, [pc, #116]	; (8005900 <HAL_RCC_OscConfig+0x4d4>)
 800588a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800588e:	6353      	str	r3, [r2, #52]	; 0x34
 8005890:	e02d      	b.n	80058ee <HAL_RCC_OscConfig+0x4c2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10c      	bne.n	80058b4 <HAL_RCC_OscConfig+0x488>
 800589a:	4b19      	ldr	r3, [pc, #100]	; (8005900 <HAL_RCC_OscConfig+0x4d4>)
 800589c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589e:	4a18      	ldr	r2, [pc, #96]	; (8005900 <HAL_RCC_OscConfig+0x4d4>)
 80058a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058a4:	6353      	str	r3, [r2, #52]	; 0x34
 80058a6:	4b16      	ldr	r3, [pc, #88]	; (8005900 <HAL_RCC_OscConfig+0x4d4>)
 80058a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058aa:	4a15      	ldr	r2, [pc, #84]	; (8005900 <HAL_RCC_OscConfig+0x4d4>)
 80058ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058b0:	6353      	str	r3, [r2, #52]	; 0x34
 80058b2:	e01c      	b.n	80058ee <HAL_RCC_OscConfig+0x4c2>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	2b05      	cmp	r3, #5
 80058ba:	d10c      	bne.n	80058d6 <HAL_RCC_OscConfig+0x4aa>
 80058bc:	4b10      	ldr	r3, [pc, #64]	; (8005900 <HAL_RCC_OscConfig+0x4d4>)
 80058be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c0:	4a0f      	ldr	r2, [pc, #60]	; (8005900 <HAL_RCC_OscConfig+0x4d4>)
 80058c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058c6:	6353      	str	r3, [r2, #52]	; 0x34
 80058c8:	4b0d      	ldr	r3, [pc, #52]	; (8005900 <HAL_RCC_OscConfig+0x4d4>)
 80058ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058cc:	4a0c      	ldr	r2, [pc, #48]	; (8005900 <HAL_RCC_OscConfig+0x4d4>)
 80058ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058d2:	6353      	str	r3, [r2, #52]	; 0x34
 80058d4:	e00b      	b.n	80058ee <HAL_RCC_OscConfig+0x4c2>
 80058d6:	4b0a      	ldr	r3, [pc, #40]	; (8005900 <HAL_RCC_OscConfig+0x4d4>)
 80058d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058da:	4a09      	ldr	r2, [pc, #36]	; (8005900 <HAL_RCC_OscConfig+0x4d4>)
 80058dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058e0:	6353      	str	r3, [r2, #52]	; 0x34
 80058e2:	4b07      	ldr	r3, [pc, #28]	; (8005900 <HAL_RCC_OscConfig+0x4d4>)
 80058e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e6:	4a06      	ldr	r2, [pc, #24]	; (8005900 <HAL_RCC_OscConfig+0x4d4>)
 80058e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058ec:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d024      	beq.n	8005940 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058f6:	f7fc fd7f 	bl	80023f8 <HAL_GetTick>
 80058fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058fc:	e019      	b.n	8005932 <HAL_RCC_OscConfig+0x506>
 80058fe:	bf00      	nop
 8005900:	40023800 	.word	0x40023800
 8005904:	08009508 	.word	0x08009508
 8005908:	20000020 	.word	0x20000020
 800590c:	20000024 	.word	0x20000024
 8005910:	42470020 	.word	0x42470020
 8005914:	42470680 	.word	0x42470680
 8005918:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800591c:	f7fc fd6c 	bl	80023f8 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	f241 3288 	movw	r2, #5000	; 0x1388
 800592a:	4293      	cmp	r3, r2
 800592c:	d901      	bls.n	8005932 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e0a3      	b.n	8005a7a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005932:	4b54      	ldr	r3, [pc, #336]	; (8005a84 <HAL_RCC_OscConfig+0x658>)
 8005934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005936:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800593a:	2b00      	cmp	r3, #0
 800593c:	d0ee      	beq.n	800591c <HAL_RCC_OscConfig+0x4f0>
 800593e:	e014      	b.n	800596a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005940:	f7fc fd5a 	bl	80023f8 <HAL_GetTick>
 8005944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005946:	e00a      	b.n	800595e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005948:	f7fc fd56 	bl	80023f8 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	f241 3288 	movw	r2, #5000	; 0x1388
 8005956:	4293      	cmp	r3, r2
 8005958:	d901      	bls.n	800595e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e08d      	b.n	8005a7a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800595e:	4b49      	ldr	r3, [pc, #292]	; (8005a84 <HAL_RCC_OscConfig+0x658>)
 8005960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005962:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1ee      	bne.n	8005948 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800596a:	7ffb      	ldrb	r3, [r7, #31]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d105      	bne.n	800597c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005970:	4b44      	ldr	r3, [pc, #272]	; (8005a84 <HAL_RCC_OscConfig+0x658>)
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	4a43      	ldr	r2, [pc, #268]	; (8005a84 <HAL_RCC_OscConfig+0x658>)
 8005976:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800597a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005980:	2b00      	cmp	r3, #0
 8005982:	d079      	beq.n	8005a78 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	2b0c      	cmp	r3, #12
 8005988:	d056      	beq.n	8005a38 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598e:	2b02      	cmp	r3, #2
 8005990:	d13b      	bne.n	8005a0a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005992:	4b3d      	ldr	r3, [pc, #244]	; (8005a88 <HAL_RCC_OscConfig+0x65c>)
 8005994:	2200      	movs	r2, #0
 8005996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005998:	f7fc fd2e 	bl	80023f8 <HAL_GetTick>
 800599c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800599e:	e008      	b.n	80059b2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059a0:	f7fc fd2a 	bl	80023f8 <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e063      	b.n	8005a7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059b2:	4b34      	ldr	r3, [pc, #208]	; (8005a84 <HAL_RCC_OscConfig+0x658>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1f0      	bne.n	80059a0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059be:	4b31      	ldr	r3, [pc, #196]	; (8005a84 <HAL_RCC_OscConfig+0x658>)
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ce:	4319      	orrs	r1, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d4:	430b      	orrs	r3, r1
 80059d6:	492b      	ldr	r1, [pc, #172]	; (8005a84 <HAL_RCC_OscConfig+0x658>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059dc:	4b2a      	ldr	r3, [pc, #168]	; (8005a88 <HAL_RCC_OscConfig+0x65c>)
 80059de:	2201      	movs	r2, #1
 80059e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059e2:	f7fc fd09 	bl	80023f8 <HAL_GetTick>
 80059e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059e8:	e008      	b.n	80059fc <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059ea:	f7fc fd05 	bl	80023f8 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d901      	bls.n	80059fc <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e03e      	b.n	8005a7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059fc:	4b21      	ldr	r3, [pc, #132]	; (8005a84 <HAL_RCC_OscConfig+0x658>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d0f0      	beq.n	80059ea <HAL_RCC_OscConfig+0x5be>
 8005a08:	e036      	b.n	8005a78 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a0a:	4b1f      	ldr	r3, [pc, #124]	; (8005a88 <HAL_RCC_OscConfig+0x65c>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a10:	f7fc fcf2 	bl	80023f8 <HAL_GetTick>
 8005a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a16:	e008      	b.n	8005a2a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a18:	f7fc fcee 	bl	80023f8 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e027      	b.n	8005a7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a2a:	4b16      	ldr	r3, [pc, #88]	; (8005a84 <HAL_RCC_OscConfig+0x658>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1f0      	bne.n	8005a18 <HAL_RCC_OscConfig+0x5ec>
 8005a36:	e01f      	b.n	8005a78 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d101      	bne.n	8005a44 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e01a      	b.n	8005a7a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005a44:	4b0f      	ldr	r3, [pc, #60]	; (8005a84 <HAL_RCC_OscConfig+0x658>)
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d10d      	bne.n	8005a74 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d106      	bne.n	8005a74 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d001      	beq.n	8005a78 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e000      	b.n	8005a7a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3720      	adds	r7, #32
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	40023800 	.word	0x40023800
 8005a88:	42470060 	.word	0x42470060

08005a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d101      	bne.n	8005aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e11a      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005aa0:	4b8f      	ldr	r3, [pc, #572]	; (8005ce0 <HAL_RCC_ClockConfig+0x254>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	683a      	ldr	r2, [r7, #0]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d919      	bls.n	8005ae2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d105      	bne.n	8005ac0 <HAL_RCC_ClockConfig+0x34>
 8005ab4:	4b8a      	ldr	r3, [pc, #552]	; (8005ce0 <HAL_RCC_ClockConfig+0x254>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a89      	ldr	r2, [pc, #548]	; (8005ce0 <HAL_RCC_ClockConfig+0x254>)
 8005aba:	f043 0304 	orr.w	r3, r3, #4
 8005abe:	6013      	str	r3, [r2, #0]
 8005ac0:	4b87      	ldr	r3, [pc, #540]	; (8005ce0 <HAL_RCC_ClockConfig+0x254>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f023 0201 	bic.w	r2, r3, #1
 8005ac8:	4985      	ldr	r1, [pc, #532]	; (8005ce0 <HAL_RCC_ClockConfig+0x254>)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ad0:	4b83      	ldr	r3, [pc, #524]	; (8005ce0 <HAL_RCC_ClockConfig+0x254>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d001      	beq.n	8005ae2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e0f9      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d008      	beq.n	8005b00 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005aee:	4b7d      	ldr	r3, [pc, #500]	; (8005ce4 <HAL_RCC_ClockConfig+0x258>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	497a      	ldr	r1, [pc, #488]	; (8005ce4 <HAL_RCC_ClockConfig+0x258>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f000 808e 	beq.w	8005c2a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d107      	bne.n	8005b26 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b16:	4b73      	ldr	r3, [pc, #460]	; (8005ce4 <HAL_RCC_ClockConfig+0x258>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d121      	bne.n	8005b66 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e0d7      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	2b03      	cmp	r3, #3
 8005b2c:	d107      	bne.n	8005b3e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b2e:	4b6d      	ldr	r3, [pc, #436]	; (8005ce4 <HAL_RCC_ClockConfig+0x258>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d115      	bne.n	8005b66 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e0cb      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d107      	bne.n	8005b56 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b46:	4b67      	ldr	r3, [pc, #412]	; (8005ce4 <HAL_RCC_ClockConfig+0x258>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d109      	bne.n	8005b66 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e0bf      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005b56:	4b63      	ldr	r3, [pc, #396]	; (8005ce4 <HAL_RCC_ClockConfig+0x258>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e0b7      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b66:	4b5f      	ldr	r3, [pc, #380]	; (8005ce4 <HAL_RCC_ClockConfig+0x258>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f023 0203 	bic.w	r2, r3, #3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	495c      	ldr	r1, [pc, #368]	; (8005ce4 <HAL_RCC_ClockConfig+0x258>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b78:	f7fc fc3e 	bl	80023f8 <HAL_GetTick>
 8005b7c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d112      	bne.n	8005bac <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b86:	e00a      	b.n	8005b9e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b88:	f7fc fc36 	bl	80023f8 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d901      	bls.n	8005b9e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e09b      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b9e:	4b51      	ldr	r3, [pc, #324]	; (8005ce4 <HAL_RCC_ClockConfig+0x258>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 030c 	and.w	r3, r3, #12
 8005ba6:	2b08      	cmp	r3, #8
 8005ba8:	d1ee      	bne.n	8005b88 <HAL_RCC_ClockConfig+0xfc>
 8005baa:	e03e      	b.n	8005c2a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	2b03      	cmp	r3, #3
 8005bb2:	d112      	bne.n	8005bda <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bb4:	e00a      	b.n	8005bcc <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bb6:	f7fc fc1f 	bl	80023f8 <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d901      	bls.n	8005bcc <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e084      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bcc:	4b45      	ldr	r3, [pc, #276]	; (8005ce4 <HAL_RCC_ClockConfig+0x258>)
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f003 030c 	and.w	r3, r3, #12
 8005bd4:	2b0c      	cmp	r3, #12
 8005bd6:	d1ee      	bne.n	8005bb6 <HAL_RCC_ClockConfig+0x12a>
 8005bd8:	e027      	b.n	8005c2a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d11d      	bne.n	8005c1e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005be2:	e00a      	b.n	8005bfa <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005be4:	f7fc fc08 	bl	80023f8 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e06d      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005bfa:	4b3a      	ldr	r3, [pc, #232]	; (8005ce4 <HAL_RCC_ClockConfig+0x258>)
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f003 030c 	and.w	r3, r3, #12
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	d1ee      	bne.n	8005be4 <HAL_RCC_ClockConfig+0x158>
 8005c06:	e010      	b.n	8005c2a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c08:	f7fc fbf6 	bl	80023f8 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d901      	bls.n	8005c1e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e05b      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005c1e:	4b31      	ldr	r3, [pc, #196]	; (8005ce4 <HAL_RCC_ClockConfig+0x258>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f003 030c 	and.w	r3, r3, #12
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1ee      	bne.n	8005c08 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c2a:	4b2d      	ldr	r3, [pc, #180]	; (8005ce0 <HAL_RCC_ClockConfig+0x254>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d219      	bcs.n	8005c6c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d105      	bne.n	8005c4a <HAL_RCC_ClockConfig+0x1be>
 8005c3e:	4b28      	ldr	r3, [pc, #160]	; (8005ce0 <HAL_RCC_ClockConfig+0x254>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a27      	ldr	r2, [pc, #156]	; (8005ce0 <HAL_RCC_ClockConfig+0x254>)
 8005c44:	f043 0304 	orr.w	r3, r3, #4
 8005c48:	6013      	str	r3, [r2, #0]
 8005c4a:	4b25      	ldr	r3, [pc, #148]	; (8005ce0 <HAL_RCC_ClockConfig+0x254>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f023 0201 	bic.w	r2, r3, #1
 8005c52:	4923      	ldr	r1, [pc, #140]	; (8005ce0 <HAL_RCC_ClockConfig+0x254>)
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c5a:	4b21      	ldr	r3, [pc, #132]	; (8005ce0 <HAL_RCC_ClockConfig+0x254>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d001      	beq.n	8005c6c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e034      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0304 	and.w	r3, r3, #4
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d008      	beq.n	8005c8a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c78:	4b1a      	ldr	r3, [pc, #104]	; (8005ce4 <HAL_RCC_ClockConfig+0x258>)
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	4917      	ldr	r1, [pc, #92]	; (8005ce4 <HAL_RCC_ClockConfig+0x258>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0308 	and.w	r3, r3, #8
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d009      	beq.n	8005caa <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c96:	4b13      	ldr	r3, [pc, #76]	; (8005ce4 <HAL_RCC_ClockConfig+0x258>)
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	490f      	ldr	r1, [pc, #60]	; (8005ce4 <HAL_RCC_ClockConfig+0x258>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005caa:	f000 f823 	bl	8005cf4 <HAL_RCC_GetSysClockFreq>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	4b0c      	ldr	r3, [pc, #48]	; (8005ce4 <HAL_RCC_ClockConfig+0x258>)
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	091b      	lsrs	r3, r3, #4
 8005cb6:	f003 030f 	and.w	r3, r3, #15
 8005cba:	490b      	ldr	r1, [pc, #44]	; (8005ce8 <HAL_RCC_ClockConfig+0x25c>)
 8005cbc:	5ccb      	ldrb	r3, [r1, r3]
 8005cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc2:	4a0a      	ldr	r2, [pc, #40]	; (8005cec <HAL_RCC_ClockConfig+0x260>)
 8005cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005cc6:	4b0a      	ldr	r3, [pc, #40]	; (8005cf0 <HAL_RCC_ClockConfig+0x264>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7fc fb48 	bl	8002360 <HAL_InitTick>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	72fb      	strb	r3, [r7, #11]

  return status;
 8005cd4:	7afb      	ldrb	r3, [r7, #11]
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3710      	adds	r7, #16
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	40023c00 	.word	0x40023c00
 8005ce4:	40023800 	.word	0x40023800
 8005ce8:	08009508 	.word	0x08009508
 8005cec:	20000020 	.word	0x20000020
 8005cf0:	20000024 	.word	0x20000024

08005cf4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cf8:	b092      	sub	sp, #72	; 0x48
 8005cfa:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8005cfc:	4b79      	ldr	r3, [pc, #484]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d04:	f003 030c 	and.w	r3, r3, #12
 8005d08:	2b0c      	cmp	r3, #12
 8005d0a:	d00d      	beq.n	8005d28 <HAL_RCC_GetSysClockFreq+0x34>
 8005d0c:	2b0c      	cmp	r3, #12
 8005d0e:	f200 80d5 	bhi.w	8005ebc <HAL_RCC_GetSysClockFreq+0x1c8>
 8005d12:	2b04      	cmp	r3, #4
 8005d14:	d002      	beq.n	8005d1c <HAL_RCC_GetSysClockFreq+0x28>
 8005d16:	2b08      	cmp	r3, #8
 8005d18:	d003      	beq.n	8005d22 <HAL_RCC_GetSysClockFreq+0x2e>
 8005d1a:	e0cf      	b.n	8005ebc <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d1c:	4b72      	ldr	r3, [pc, #456]	; (8005ee8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8005d1e:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8005d20:	e0da      	b.n	8005ed8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005d22:	4b72      	ldr	r3, [pc, #456]	; (8005eec <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005d24:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8005d26:	e0d7      	b.n	8005ed8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d2a:	0c9b      	lsrs	r3, r3, #18
 8005d2c:	f003 020f 	and.w	r2, r3, #15
 8005d30:	4b6f      	ldr	r3, [pc, #444]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005d32:	5c9b      	ldrb	r3, [r3, r2]
 8005d34:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d38:	0d9b      	lsrs	r3, r3, #22
 8005d3a:	f003 0303 	and.w	r3, r3, #3
 8005d3e:	3301      	adds	r3, #1
 8005d40:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d42:	4b68      	ldr	r3, [pc, #416]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d05d      	beq.n	8005e0a <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d50:	2200      	movs	r2, #0
 8005d52:	4618      	mov	r0, r3
 8005d54:	4611      	mov	r1, r2
 8005d56:	4604      	mov	r4, r0
 8005d58:	460d      	mov	r5, r1
 8005d5a:	4622      	mov	r2, r4
 8005d5c:	462b      	mov	r3, r5
 8005d5e:	f04f 0000 	mov.w	r0, #0
 8005d62:	f04f 0100 	mov.w	r1, #0
 8005d66:	0159      	lsls	r1, r3, #5
 8005d68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d6c:	0150      	lsls	r0, r2, #5
 8005d6e:	4602      	mov	r2, r0
 8005d70:	460b      	mov	r3, r1
 8005d72:	4621      	mov	r1, r4
 8005d74:	1a51      	subs	r1, r2, r1
 8005d76:	6139      	str	r1, [r7, #16]
 8005d78:	4629      	mov	r1, r5
 8005d7a:	eb63 0301 	sbc.w	r3, r3, r1
 8005d7e:	617b      	str	r3, [r7, #20]
 8005d80:	f04f 0200 	mov.w	r2, #0
 8005d84:	f04f 0300 	mov.w	r3, #0
 8005d88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d8c:	4659      	mov	r1, fp
 8005d8e:	018b      	lsls	r3, r1, #6
 8005d90:	4651      	mov	r1, sl
 8005d92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d96:	4651      	mov	r1, sl
 8005d98:	018a      	lsls	r2, r1, #6
 8005d9a:	46d4      	mov	ip, sl
 8005d9c:	ebb2 080c 	subs.w	r8, r2, ip
 8005da0:	4659      	mov	r1, fp
 8005da2:	eb63 0901 	sbc.w	r9, r3, r1
 8005da6:	f04f 0200 	mov.w	r2, #0
 8005daa:	f04f 0300 	mov.w	r3, #0
 8005dae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005db2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005db6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005dba:	4690      	mov	r8, r2
 8005dbc:	4699      	mov	r9, r3
 8005dbe:	4623      	mov	r3, r4
 8005dc0:	eb18 0303 	adds.w	r3, r8, r3
 8005dc4:	60bb      	str	r3, [r7, #8]
 8005dc6:	462b      	mov	r3, r5
 8005dc8:	eb49 0303 	adc.w	r3, r9, r3
 8005dcc:	60fb      	str	r3, [r7, #12]
 8005dce:	f04f 0200 	mov.w	r2, #0
 8005dd2:	f04f 0300 	mov.w	r3, #0
 8005dd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005dda:	4629      	mov	r1, r5
 8005ddc:	024b      	lsls	r3, r1, #9
 8005dde:	4620      	mov	r0, r4
 8005de0:	4629      	mov	r1, r5
 8005de2:	4604      	mov	r4, r0
 8005de4:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8005de8:	4601      	mov	r1, r0
 8005dea:	024a      	lsls	r2, r1, #9
 8005dec:	4610      	mov	r0, r2
 8005dee:	4619      	mov	r1, r3
 8005df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df2:	2200      	movs	r2, #0
 8005df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005df6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005df8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005dfc:	f7fb f8ba 	bl	8000f74 <__aeabi_uldivmod>
 8005e00:	4602      	mov	r2, r0
 8005e02:	460b      	mov	r3, r1
 8005e04:	4613      	mov	r3, r2
 8005e06:	647b      	str	r3, [r7, #68]	; 0x44
 8005e08:	e055      	b.n	8005eb6 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	623b      	str	r3, [r7, #32]
 8005e10:	627a      	str	r2, [r7, #36]	; 0x24
 8005e12:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e16:	4642      	mov	r2, r8
 8005e18:	464b      	mov	r3, r9
 8005e1a:	f04f 0000 	mov.w	r0, #0
 8005e1e:	f04f 0100 	mov.w	r1, #0
 8005e22:	0159      	lsls	r1, r3, #5
 8005e24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e28:	0150      	lsls	r0, r2, #5
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	46c4      	mov	ip, r8
 8005e30:	ebb2 0a0c 	subs.w	sl, r2, ip
 8005e34:	4640      	mov	r0, r8
 8005e36:	4649      	mov	r1, r9
 8005e38:	468c      	mov	ip, r1
 8005e3a:	eb63 0b0c 	sbc.w	fp, r3, ip
 8005e3e:	f04f 0200 	mov.w	r2, #0
 8005e42:	f04f 0300 	mov.w	r3, #0
 8005e46:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e4a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e4e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e52:	ebb2 040a 	subs.w	r4, r2, sl
 8005e56:	eb63 050b 	sbc.w	r5, r3, fp
 8005e5a:	f04f 0200 	mov.w	r2, #0
 8005e5e:	f04f 0300 	mov.w	r3, #0
 8005e62:	00eb      	lsls	r3, r5, #3
 8005e64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e68:	00e2      	lsls	r2, r4, #3
 8005e6a:	4614      	mov	r4, r2
 8005e6c:	461d      	mov	r5, r3
 8005e6e:	4603      	mov	r3, r0
 8005e70:	18e3      	adds	r3, r4, r3
 8005e72:	603b      	str	r3, [r7, #0]
 8005e74:	460b      	mov	r3, r1
 8005e76:	eb45 0303 	adc.w	r3, r5, r3
 8005e7a:	607b      	str	r3, [r7, #4]
 8005e7c:	f04f 0200 	mov.w	r2, #0
 8005e80:	f04f 0300 	mov.w	r3, #0
 8005e84:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e88:	4629      	mov	r1, r5
 8005e8a:	028b      	lsls	r3, r1, #10
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	4629      	mov	r1, r5
 8005e90:	4604      	mov	r4, r0
 8005e92:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8005e96:	4601      	mov	r1, r0
 8005e98:	028a      	lsls	r2, r1, #10
 8005e9a:	4610      	mov	r0, r2
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	61bb      	str	r3, [r7, #24]
 8005ea4:	61fa      	str	r2, [r7, #28]
 8005ea6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005eaa:	f7fb f863 	bl	8000f74 <__aeabi_uldivmod>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8005eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eb8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8005eba:	e00d      	b.n	8005ed8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005ebc:	4b09      	ldr	r3, [pc, #36]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	0b5b      	lsrs	r3, r3, #13
 8005ec2:	f003 0307 	and.w	r3, r3, #7
 8005ec6:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eca:	3301      	adds	r3, #1
 8005ecc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8005ed6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3748      	adds	r7, #72	; 0x48
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ee4:	40023800 	.word	0x40023800
 8005ee8:	00f42400 	.word	0x00f42400
 8005eec:	007a1200 	.word	0x007a1200
 8005ef0:	080094fc 	.word	0x080094fc

08005ef4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ef8:	4b02      	ldr	r3, [pc, #8]	; (8005f04 <HAL_RCC_GetHCLKFreq+0x10>)
 8005efa:	681b      	ldr	r3, [r3, #0]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bc80      	pop	{r7}
 8005f02:	4770      	bx	lr
 8005f04:	20000020 	.word	0x20000020

08005f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f0c:	f7ff fff2 	bl	8005ef4 <HAL_RCC_GetHCLKFreq>
 8005f10:	4602      	mov	r2, r0
 8005f12:	4b05      	ldr	r3, [pc, #20]	; (8005f28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	0a1b      	lsrs	r3, r3, #8
 8005f18:	f003 0307 	and.w	r3, r3, #7
 8005f1c:	4903      	ldr	r1, [pc, #12]	; (8005f2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f1e:	5ccb      	ldrb	r3, [r1, r3]
 8005f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	40023800 	.word	0x40023800
 8005f2c:	08009518 	.word	0x08009518

08005f30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f34:	f7ff ffde 	bl	8005ef4 <HAL_RCC_GetHCLKFreq>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	4b05      	ldr	r3, [pc, #20]	; (8005f50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	0adb      	lsrs	r3, r3, #11
 8005f40:	f003 0307 	and.w	r3, r3, #7
 8005f44:	4903      	ldr	r1, [pc, #12]	; (8005f54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f46:	5ccb      	ldrb	r3, [r1, r3]
 8005f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	40023800 	.word	0x40023800
 8005f54:	08009518 	.word	0x08009518

08005f58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b087      	sub	sp, #28
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005f60:	2300      	movs	r3, #0
 8005f62:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005f64:	4b29      	ldr	r3, [pc, #164]	; (800600c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d12c      	bne.n	8005fca <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005f70:	4b26      	ldr	r3, [pc, #152]	; (800600c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d005      	beq.n	8005f88 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005f7c:	4b24      	ldr	r3, [pc, #144]	; (8006010 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005f84:	617b      	str	r3, [r7, #20]
 8005f86:	e016      	b.n	8005fb6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f88:	4b20      	ldr	r3, [pc, #128]	; (800600c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8c:	4a1f      	ldr	r2, [pc, #124]	; (800600c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f92:	6253      	str	r3, [r2, #36]	; 0x24
 8005f94:	4b1d      	ldr	r3, [pc, #116]	; (800600c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f9c:	60fb      	str	r3, [r7, #12]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005fa0:	4b1b      	ldr	r3, [pc, #108]	; (8006010 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005fa8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8005faa:	4b18      	ldr	r3, [pc, #96]	; (800600c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fae:	4a17      	ldr	r2, [pc, #92]	; (800600c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005fb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fb4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005fbc:	d105      	bne.n	8005fca <RCC_SetFlashLatencyFromMSIRange+0x72>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005fc4:	d101      	bne.n	8005fca <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d105      	bne.n	8005fdc <RCC_SetFlashLatencyFromMSIRange+0x84>
 8005fd0:	4b10      	ldr	r3, [pc, #64]	; (8006014 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a0f      	ldr	r2, [pc, #60]	; (8006014 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005fd6:	f043 0304 	orr.w	r3, r3, #4
 8005fda:	6013      	str	r3, [r2, #0]
 8005fdc:	4b0d      	ldr	r3, [pc, #52]	; (8006014 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f023 0201 	bic.w	r2, r3, #1
 8005fe4:	490b      	ldr	r1, [pc, #44]	; (8006014 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005fec:	4b09      	ldr	r3, [pc, #36]	; (8006014 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0301 	and.w	r3, r3, #1
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d001      	beq.n	8005ffe <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e000      	b.n	8006000 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	371c      	adds	r7, #28
 8006004:	46bd      	mov	sp, r7
 8006006:	bc80      	pop	{r7}
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	40023800 	.word	0x40023800
 8006010:	40007000 	.word	0x40007000
 8006014:	40023c00 	.word	0x40023c00

08006018 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d101      	bne.n	800602a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e042      	b.n	80060b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d106      	bne.n	8006044 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f7fb fc94 	bl	800196c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2224      	movs	r2, #36	; 0x24
 8006048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68da      	ldr	r2, [r3, #12]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800605a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f91d 	bl	800629c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	691a      	ldr	r2, [r3, #16]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006070:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	695a      	ldr	r2, [r3, #20]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006080:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68da      	ldr	r2, [r3, #12]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006090:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2220      	movs	r2, #32
 800609c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2220      	movs	r2, #32
 80060a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3708      	adds	r7, #8
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b08a      	sub	sp, #40	; 0x28
 80060bc:	af02      	add	r7, sp, #8
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	603b      	str	r3, [r7, #0]
 80060c4:	4613      	mov	r3, r2
 80060c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80060c8:	2300      	movs	r3, #0
 80060ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b20      	cmp	r3, #32
 80060d6:	d16d      	bne.n	80061b4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d002      	beq.n	80060e4 <HAL_UART_Transmit+0x2c>
 80060de:	88fb      	ldrh	r3, [r7, #6]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d101      	bne.n	80060e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e066      	b.n	80061b6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2221      	movs	r2, #33	; 0x21
 80060f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060f6:	f7fc f97f 	bl	80023f8 <HAL_GetTick>
 80060fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	88fa      	ldrh	r2, [r7, #6]
 8006100:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	88fa      	ldrh	r2, [r7, #6]
 8006106:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006110:	d108      	bne.n	8006124 <HAL_UART_Transmit+0x6c>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d104      	bne.n	8006124 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800611a:	2300      	movs	r3, #0
 800611c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	61bb      	str	r3, [r7, #24]
 8006122:	e003      	b.n	800612c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006128:	2300      	movs	r3, #0
 800612a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800612c:	e02a      	b.n	8006184 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	2200      	movs	r2, #0
 8006136:	2180      	movs	r1, #128	; 0x80
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f000 f840 	bl	80061be <UART_WaitOnFlagUntilTimeout>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d001      	beq.n	8006148 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006144:	2303      	movs	r3, #3
 8006146:	e036      	b.n	80061b6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10b      	bne.n	8006166 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	881b      	ldrh	r3, [r3, #0]
 8006152:	461a      	mov	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800615c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	3302      	adds	r3, #2
 8006162:	61bb      	str	r3, [r7, #24]
 8006164:	e007      	b.n	8006176 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	781a      	ldrb	r2, [r3, #0]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	3301      	adds	r3, #1
 8006174:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800617a:	b29b      	uxth	r3, r3
 800617c:	3b01      	subs	r3, #1
 800617e:	b29a      	uxth	r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006188:	b29b      	uxth	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1cf      	bne.n	800612e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	2200      	movs	r2, #0
 8006196:	2140      	movs	r1, #64	; 0x40
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f000 f810 	bl	80061be <UART_WaitOnFlagUntilTimeout>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d001      	beq.n	80061a8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e006      	b.n	80061b6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2220      	movs	r2, #32
 80061ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80061b0:	2300      	movs	r3, #0
 80061b2:	e000      	b.n	80061b6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80061b4:	2302      	movs	r3, #2
  }
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3720      	adds	r7, #32
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}

080061be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80061be:	b580      	push	{r7, lr}
 80061c0:	b090      	sub	sp, #64	; 0x40
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	60f8      	str	r0, [r7, #12]
 80061c6:	60b9      	str	r1, [r7, #8]
 80061c8:	603b      	str	r3, [r7, #0]
 80061ca:	4613      	mov	r3, r2
 80061cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061ce:	e050      	b.n	8006272 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061d6:	d04c      	beq.n	8006272 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80061d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d007      	beq.n	80061ee <UART_WaitOnFlagUntilTimeout+0x30>
 80061de:	f7fc f90b 	bl	80023f8 <HAL_GetTick>
 80061e2:	4602      	mov	r2, r0
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d241      	bcs.n	8006272 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	330c      	adds	r3, #12
 80061f4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f8:	e853 3f00 	ldrex	r3, [r3]
 80061fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006200:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006204:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	330c      	adds	r3, #12
 800620c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800620e:	637a      	str	r2, [r7, #52]	; 0x34
 8006210:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006212:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006214:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006216:	e841 2300 	strex	r3, r2, [r1]
 800621a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800621c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1e5      	bne.n	80061ee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	3314      	adds	r3, #20
 8006228:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	e853 3f00 	ldrex	r3, [r3]
 8006230:	613b      	str	r3, [r7, #16]
   return(result);
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	f023 0301 	bic.w	r3, r3, #1
 8006238:	63bb      	str	r3, [r7, #56]	; 0x38
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	3314      	adds	r3, #20
 8006240:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006242:	623a      	str	r2, [r7, #32]
 8006244:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006246:	69f9      	ldr	r1, [r7, #28]
 8006248:	6a3a      	ldr	r2, [r7, #32]
 800624a:	e841 2300 	strex	r3, r2, [r1]
 800624e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1e5      	bne.n	8006222 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2220      	movs	r2, #32
 800625a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2220      	movs	r2, #32
 8006262:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e00f      	b.n	8006292 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	4013      	ands	r3, r2
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	429a      	cmp	r2, r3
 8006280:	bf0c      	ite	eq
 8006282:	2301      	moveq	r3, #1
 8006284:	2300      	movne	r3, #0
 8006286:	b2db      	uxtb	r3, r3
 8006288:	461a      	mov	r2, r3
 800628a:	79fb      	ldrb	r3, [r7, #7]
 800628c:	429a      	cmp	r2, r3
 800628e:	d09f      	beq.n	80061d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3740      	adds	r7, #64	; 0x40
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
	...

0800629c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68da      	ldr	r2, [r3, #12]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	689a      	ldr	r2, [r3, #8]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	431a      	orrs	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	695b      	ldr	r3, [r3, #20]
 80062c8:	431a      	orrs	r2, r3
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80062dc:	f023 030c 	bic.w	r3, r3, #12
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	6812      	ldr	r2, [r2, #0]
 80062e4:	68b9      	ldr	r1, [r7, #8]
 80062e6:	430b      	orrs	r3, r1
 80062e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	695b      	ldr	r3, [r3, #20]
 80062f0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	699a      	ldr	r2, [r3, #24]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a55      	ldr	r2, [pc, #340]	; (800645c <UART_SetConfig+0x1c0>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d103      	bne.n	8006312 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800630a:	f7ff fe11 	bl	8005f30 <HAL_RCC_GetPCLK2Freq>
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	e002      	b.n	8006318 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006312:	f7ff fdf9 	bl	8005f08 <HAL_RCC_GetPCLK1Freq>
 8006316:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	69db      	ldr	r3, [r3, #28]
 800631c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006320:	d14c      	bne.n	80063bc <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	4613      	mov	r3, r2
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	4413      	add	r3, r2
 800632a:	009a      	lsls	r2, r3, #2
 800632c:	441a      	add	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	005b      	lsls	r3, r3, #1
 8006334:	fbb2 f3f3 	udiv	r3, r2, r3
 8006338:	4a49      	ldr	r2, [pc, #292]	; (8006460 <UART_SetConfig+0x1c4>)
 800633a:	fba2 2303 	umull	r2, r3, r2, r3
 800633e:	095b      	lsrs	r3, r3, #5
 8006340:	0119      	lsls	r1, r3, #4
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	4613      	mov	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4413      	add	r3, r2
 800634a:	009a      	lsls	r2, r3, #2
 800634c:	441a      	add	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	005b      	lsls	r3, r3, #1
 8006354:	fbb2 f2f3 	udiv	r2, r2, r3
 8006358:	4b41      	ldr	r3, [pc, #260]	; (8006460 <UART_SetConfig+0x1c4>)
 800635a:	fba3 0302 	umull	r0, r3, r3, r2
 800635e:	095b      	lsrs	r3, r3, #5
 8006360:	2064      	movs	r0, #100	; 0x64
 8006362:	fb00 f303 	mul.w	r3, r0, r3
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	00db      	lsls	r3, r3, #3
 800636a:	3332      	adds	r3, #50	; 0x32
 800636c:	4a3c      	ldr	r2, [pc, #240]	; (8006460 <UART_SetConfig+0x1c4>)
 800636e:	fba2 2303 	umull	r2, r3, r2, r3
 8006372:	095b      	lsrs	r3, r3, #5
 8006374:	005b      	lsls	r3, r3, #1
 8006376:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800637a:	4419      	add	r1, r3
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	4613      	mov	r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4413      	add	r3, r2
 8006384:	009a      	lsls	r2, r3, #2
 8006386:	441a      	add	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	005b      	lsls	r3, r3, #1
 800638e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006392:	4b33      	ldr	r3, [pc, #204]	; (8006460 <UART_SetConfig+0x1c4>)
 8006394:	fba3 0302 	umull	r0, r3, r3, r2
 8006398:	095b      	lsrs	r3, r3, #5
 800639a:	2064      	movs	r0, #100	; 0x64
 800639c:	fb00 f303 	mul.w	r3, r0, r3
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	00db      	lsls	r3, r3, #3
 80063a4:	3332      	adds	r3, #50	; 0x32
 80063a6:	4a2e      	ldr	r2, [pc, #184]	; (8006460 <UART_SetConfig+0x1c4>)
 80063a8:	fba2 2303 	umull	r2, r3, r2, r3
 80063ac:	095b      	lsrs	r3, r3, #5
 80063ae:	f003 0207 	and.w	r2, r3, #7
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	440a      	add	r2, r1
 80063b8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063ba:	e04a      	b.n	8006452 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	4613      	mov	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	009a      	lsls	r2, r3, #2
 80063c6:	441a      	add	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80063d2:	4a23      	ldr	r2, [pc, #140]	; (8006460 <UART_SetConfig+0x1c4>)
 80063d4:	fba2 2303 	umull	r2, r3, r2, r3
 80063d8:	095b      	lsrs	r3, r3, #5
 80063da:	0119      	lsls	r1, r3, #4
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	4613      	mov	r3, r2
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	4413      	add	r3, r2
 80063e4:	009a      	lsls	r2, r3, #2
 80063e6:	441a      	add	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80063f2:	4b1b      	ldr	r3, [pc, #108]	; (8006460 <UART_SetConfig+0x1c4>)
 80063f4:	fba3 0302 	umull	r0, r3, r3, r2
 80063f8:	095b      	lsrs	r3, r3, #5
 80063fa:	2064      	movs	r0, #100	; 0x64
 80063fc:	fb00 f303 	mul.w	r3, r0, r3
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	011b      	lsls	r3, r3, #4
 8006404:	3332      	adds	r3, #50	; 0x32
 8006406:	4a16      	ldr	r2, [pc, #88]	; (8006460 <UART_SetConfig+0x1c4>)
 8006408:	fba2 2303 	umull	r2, r3, r2, r3
 800640c:	095b      	lsrs	r3, r3, #5
 800640e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006412:	4419      	add	r1, r3
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	4613      	mov	r3, r2
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	4413      	add	r3, r2
 800641c:	009a      	lsls	r2, r3, #2
 800641e:	441a      	add	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	fbb2 f2f3 	udiv	r2, r2, r3
 800642a:	4b0d      	ldr	r3, [pc, #52]	; (8006460 <UART_SetConfig+0x1c4>)
 800642c:	fba3 0302 	umull	r0, r3, r3, r2
 8006430:	095b      	lsrs	r3, r3, #5
 8006432:	2064      	movs	r0, #100	; 0x64
 8006434:	fb00 f303 	mul.w	r3, r0, r3
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	011b      	lsls	r3, r3, #4
 800643c:	3332      	adds	r3, #50	; 0x32
 800643e:	4a08      	ldr	r2, [pc, #32]	; (8006460 <UART_SetConfig+0x1c4>)
 8006440:	fba2 2303 	umull	r2, r3, r2, r3
 8006444:	095b      	lsrs	r3, r3, #5
 8006446:	f003 020f 	and.w	r2, r3, #15
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	440a      	add	r2, r1
 8006450:	609a      	str	r2, [r3, #8]
}
 8006452:	bf00      	nop
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	40013800 	.word	0x40013800
 8006460:	51eb851f 	.word	0x51eb851f

08006464 <__errno>:
 8006464:	4b01      	ldr	r3, [pc, #4]	; (800646c <__errno+0x8>)
 8006466:	6818      	ldr	r0, [r3, #0]
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	2000002c 	.word	0x2000002c

08006470 <__libc_init_array>:
 8006470:	b570      	push	{r4, r5, r6, lr}
 8006472:	2600      	movs	r6, #0
 8006474:	4d0c      	ldr	r5, [pc, #48]	; (80064a8 <__libc_init_array+0x38>)
 8006476:	4c0d      	ldr	r4, [pc, #52]	; (80064ac <__libc_init_array+0x3c>)
 8006478:	1b64      	subs	r4, r4, r5
 800647a:	10a4      	asrs	r4, r4, #2
 800647c:	42a6      	cmp	r6, r4
 800647e:	d109      	bne.n	8006494 <__libc_init_array+0x24>
 8006480:	f002 ffe6 	bl	8009450 <_init>
 8006484:	2600      	movs	r6, #0
 8006486:	4d0a      	ldr	r5, [pc, #40]	; (80064b0 <__libc_init_array+0x40>)
 8006488:	4c0a      	ldr	r4, [pc, #40]	; (80064b4 <__libc_init_array+0x44>)
 800648a:	1b64      	subs	r4, r4, r5
 800648c:	10a4      	asrs	r4, r4, #2
 800648e:	42a6      	cmp	r6, r4
 8006490:	d105      	bne.n	800649e <__libc_init_array+0x2e>
 8006492:	bd70      	pop	{r4, r5, r6, pc}
 8006494:	f855 3b04 	ldr.w	r3, [r5], #4
 8006498:	4798      	blx	r3
 800649a:	3601      	adds	r6, #1
 800649c:	e7ee      	b.n	800647c <__libc_init_array+0xc>
 800649e:	f855 3b04 	ldr.w	r3, [r5], #4
 80064a2:	4798      	blx	r3
 80064a4:	3601      	adds	r6, #1
 80064a6:	e7f2      	b.n	800648e <__libc_init_array+0x1e>
 80064a8:	08009904 	.word	0x08009904
 80064ac:	08009904 	.word	0x08009904
 80064b0:	08009904 	.word	0x08009904
 80064b4:	08009908 	.word	0x08009908

080064b8 <memset>:
 80064b8:	4603      	mov	r3, r0
 80064ba:	4402      	add	r2, r0
 80064bc:	4293      	cmp	r3, r2
 80064be:	d100      	bne.n	80064c2 <memset+0xa>
 80064c0:	4770      	bx	lr
 80064c2:	f803 1b01 	strb.w	r1, [r3], #1
 80064c6:	e7f9      	b.n	80064bc <memset+0x4>

080064c8 <__cvt>:
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064ce:	461f      	mov	r7, r3
 80064d0:	bfbb      	ittet	lt
 80064d2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80064d6:	461f      	movlt	r7, r3
 80064d8:	2300      	movge	r3, #0
 80064da:	232d      	movlt	r3, #45	; 0x2d
 80064dc:	b088      	sub	sp, #32
 80064de:	4614      	mov	r4, r2
 80064e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80064e2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80064e4:	7013      	strb	r3, [r2, #0]
 80064e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80064e8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80064ec:	f023 0820 	bic.w	r8, r3, #32
 80064f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80064f4:	d005      	beq.n	8006502 <__cvt+0x3a>
 80064f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80064fa:	d100      	bne.n	80064fe <__cvt+0x36>
 80064fc:	3501      	adds	r5, #1
 80064fe:	2302      	movs	r3, #2
 8006500:	e000      	b.n	8006504 <__cvt+0x3c>
 8006502:	2303      	movs	r3, #3
 8006504:	aa07      	add	r2, sp, #28
 8006506:	9204      	str	r2, [sp, #16]
 8006508:	aa06      	add	r2, sp, #24
 800650a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800650e:	e9cd 3500 	strd	r3, r5, [sp]
 8006512:	4622      	mov	r2, r4
 8006514:	463b      	mov	r3, r7
 8006516:	f000 fe47 	bl	80071a8 <_dtoa_r>
 800651a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800651e:	4606      	mov	r6, r0
 8006520:	d102      	bne.n	8006528 <__cvt+0x60>
 8006522:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006524:	07db      	lsls	r3, r3, #31
 8006526:	d522      	bpl.n	800656e <__cvt+0xa6>
 8006528:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800652c:	eb06 0905 	add.w	r9, r6, r5
 8006530:	d110      	bne.n	8006554 <__cvt+0x8c>
 8006532:	7833      	ldrb	r3, [r6, #0]
 8006534:	2b30      	cmp	r3, #48	; 0x30
 8006536:	d10a      	bne.n	800654e <__cvt+0x86>
 8006538:	2200      	movs	r2, #0
 800653a:	2300      	movs	r3, #0
 800653c:	4620      	mov	r0, r4
 800653e:	4639      	mov	r1, r7
 8006540:	f7fa fa4a 	bl	80009d8 <__aeabi_dcmpeq>
 8006544:	b918      	cbnz	r0, 800654e <__cvt+0x86>
 8006546:	f1c5 0501 	rsb	r5, r5, #1
 800654a:	f8ca 5000 	str.w	r5, [sl]
 800654e:	f8da 3000 	ldr.w	r3, [sl]
 8006552:	4499      	add	r9, r3
 8006554:	2200      	movs	r2, #0
 8006556:	2300      	movs	r3, #0
 8006558:	4620      	mov	r0, r4
 800655a:	4639      	mov	r1, r7
 800655c:	f7fa fa3c 	bl	80009d8 <__aeabi_dcmpeq>
 8006560:	b108      	cbz	r0, 8006566 <__cvt+0x9e>
 8006562:	f8cd 901c 	str.w	r9, [sp, #28]
 8006566:	2230      	movs	r2, #48	; 0x30
 8006568:	9b07      	ldr	r3, [sp, #28]
 800656a:	454b      	cmp	r3, r9
 800656c:	d307      	bcc.n	800657e <__cvt+0xb6>
 800656e:	4630      	mov	r0, r6
 8006570:	9b07      	ldr	r3, [sp, #28]
 8006572:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006574:	1b9b      	subs	r3, r3, r6
 8006576:	6013      	str	r3, [r2, #0]
 8006578:	b008      	add	sp, #32
 800657a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800657e:	1c59      	adds	r1, r3, #1
 8006580:	9107      	str	r1, [sp, #28]
 8006582:	701a      	strb	r2, [r3, #0]
 8006584:	e7f0      	b.n	8006568 <__cvt+0xa0>

08006586 <__exponent>:
 8006586:	4603      	mov	r3, r0
 8006588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800658a:	2900      	cmp	r1, #0
 800658c:	f803 2b02 	strb.w	r2, [r3], #2
 8006590:	bfb6      	itet	lt
 8006592:	222d      	movlt	r2, #45	; 0x2d
 8006594:	222b      	movge	r2, #43	; 0x2b
 8006596:	4249      	neglt	r1, r1
 8006598:	2909      	cmp	r1, #9
 800659a:	7042      	strb	r2, [r0, #1]
 800659c:	dd2b      	ble.n	80065f6 <__exponent+0x70>
 800659e:	f10d 0407 	add.w	r4, sp, #7
 80065a2:	46a4      	mov	ip, r4
 80065a4:	270a      	movs	r7, #10
 80065a6:	fb91 f6f7 	sdiv	r6, r1, r7
 80065aa:	460a      	mov	r2, r1
 80065ac:	46a6      	mov	lr, r4
 80065ae:	fb07 1516 	mls	r5, r7, r6, r1
 80065b2:	2a63      	cmp	r2, #99	; 0x63
 80065b4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80065b8:	4631      	mov	r1, r6
 80065ba:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80065be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80065c2:	dcf0      	bgt.n	80065a6 <__exponent+0x20>
 80065c4:	3130      	adds	r1, #48	; 0x30
 80065c6:	f1ae 0502 	sub.w	r5, lr, #2
 80065ca:	f804 1c01 	strb.w	r1, [r4, #-1]
 80065ce:	4629      	mov	r1, r5
 80065d0:	1c44      	adds	r4, r0, #1
 80065d2:	4561      	cmp	r1, ip
 80065d4:	d30a      	bcc.n	80065ec <__exponent+0x66>
 80065d6:	f10d 0209 	add.w	r2, sp, #9
 80065da:	eba2 020e 	sub.w	r2, r2, lr
 80065de:	4565      	cmp	r5, ip
 80065e0:	bf88      	it	hi
 80065e2:	2200      	movhi	r2, #0
 80065e4:	4413      	add	r3, r2
 80065e6:	1a18      	subs	r0, r3, r0
 80065e8:	b003      	add	sp, #12
 80065ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065f0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80065f4:	e7ed      	b.n	80065d2 <__exponent+0x4c>
 80065f6:	2330      	movs	r3, #48	; 0x30
 80065f8:	3130      	adds	r1, #48	; 0x30
 80065fa:	7083      	strb	r3, [r0, #2]
 80065fc:	70c1      	strb	r1, [r0, #3]
 80065fe:	1d03      	adds	r3, r0, #4
 8006600:	e7f1      	b.n	80065e6 <__exponent+0x60>
	...

08006604 <_printf_float>:
 8006604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006608:	b091      	sub	sp, #68	; 0x44
 800660a:	460c      	mov	r4, r1
 800660c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006610:	4616      	mov	r6, r2
 8006612:	461f      	mov	r7, r3
 8006614:	4605      	mov	r5, r0
 8006616:	f001 fd69 	bl	80080ec <_localeconv_r>
 800661a:	6803      	ldr	r3, [r0, #0]
 800661c:	4618      	mov	r0, r3
 800661e:	9309      	str	r3, [sp, #36]	; 0x24
 8006620:	f7f9 fdae 	bl	8000180 <strlen>
 8006624:	2300      	movs	r3, #0
 8006626:	930e      	str	r3, [sp, #56]	; 0x38
 8006628:	f8d8 3000 	ldr.w	r3, [r8]
 800662c:	900a      	str	r0, [sp, #40]	; 0x28
 800662e:	3307      	adds	r3, #7
 8006630:	f023 0307 	bic.w	r3, r3, #7
 8006634:	f103 0208 	add.w	r2, r3, #8
 8006638:	f894 9018 	ldrb.w	r9, [r4, #24]
 800663c:	f8d4 b000 	ldr.w	fp, [r4]
 8006640:	f8c8 2000 	str.w	r2, [r8]
 8006644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006648:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800664c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006650:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006654:	930b      	str	r3, [sp, #44]	; 0x2c
 8006656:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800665a:	4640      	mov	r0, r8
 800665c:	4b9c      	ldr	r3, [pc, #624]	; (80068d0 <_printf_float+0x2cc>)
 800665e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006660:	f7fa f9ec 	bl	8000a3c <__aeabi_dcmpun>
 8006664:	bb70      	cbnz	r0, 80066c4 <_printf_float+0xc0>
 8006666:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800666a:	4640      	mov	r0, r8
 800666c:	4b98      	ldr	r3, [pc, #608]	; (80068d0 <_printf_float+0x2cc>)
 800666e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006670:	f7fa f9c6 	bl	8000a00 <__aeabi_dcmple>
 8006674:	bb30      	cbnz	r0, 80066c4 <_printf_float+0xc0>
 8006676:	2200      	movs	r2, #0
 8006678:	2300      	movs	r3, #0
 800667a:	4640      	mov	r0, r8
 800667c:	4651      	mov	r1, sl
 800667e:	f7fa f9b5 	bl	80009ec <__aeabi_dcmplt>
 8006682:	b110      	cbz	r0, 800668a <_printf_float+0x86>
 8006684:	232d      	movs	r3, #45	; 0x2d
 8006686:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800668a:	4b92      	ldr	r3, [pc, #584]	; (80068d4 <_printf_float+0x2d0>)
 800668c:	4892      	ldr	r0, [pc, #584]	; (80068d8 <_printf_float+0x2d4>)
 800668e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006692:	bf94      	ite	ls
 8006694:	4698      	movls	r8, r3
 8006696:	4680      	movhi	r8, r0
 8006698:	2303      	movs	r3, #3
 800669a:	f04f 0a00 	mov.w	sl, #0
 800669e:	6123      	str	r3, [r4, #16]
 80066a0:	f02b 0304 	bic.w	r3, fp, #4
 80066a4:	6023      	str	r3, [r4, #0]
 80066a6:	4633      	mov	r3, r6
 80066a8:	4621      	mov	r1, r4
 80066aa:	4628      	mov	r0, r5
 80066ac:	9700      	str	r7, [sp, #0]
 80066ae:	aa0f      	add	r2, sp, #60	; 0x3c
 80066b0:	f000 f9d4 	bl	8006a5c <_printf_common>
 80066b4:	3001      	adds	r0, #1
 80066b6:	f040 8090 	bne.w	80067da <_printf_float+0x1d6>
 80066ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066be:	b011      	add	sp, #68	; 0x44
 80066c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c4:	4642      	mov	r2, r8
 80066c6:	4653      	mov	r3, sl
 80066c8:	4640      	mov	r0, r8
 80066ca:	4651      	mov	r1, sl
 80066cc:	f7fa f9b6 	bl	8000a3c <__aeabi_dcmpun>
 80066d0:	b148      	cbz	r0, 80066e6 <_printf_float+0xe2>
 80066d2:	f1ba 0f00 	cmp.w	sl, #0
 80066d6:	bfb8      	it	lt
 80066d8:	232d      	movlt	r3, #45	; 0x2d
 80066da:	4880      	ldr	r0, [pc, #512]	; (80068dc <_printf_float+0x2d8>)
 80066dc:	bfb8      	it	lt
 80066de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80066e2:	4b7f      	ldr	r3, [pc, #508]	; (80068e0 <_printf_float+0x2dc>)
 80066e4:	e7d3      	b.n	800668e <_printf_float+0x8a>
 80066e6:	6863      	ldr	r3, [r4, #4]
 80066e8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80066ec:	1c5a      	adds	r2, r3, #1
 80066ee:	d142      	bne.n	8006776 <_printf_float+0x172>
 80066f0:	2306      	movs	r3, #6
 80066f2:	6063      	str	r3, [r4, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	9206      	str	r2, [sp, #24]
 80066f8:	aa0e      	add	r2, sp, #56	; 0x38
 80066fa:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80066fe:	aa0d      	add	r2, sp, #52	; 0x34
 8006700:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006704:	9203      	str	r2, [sp, #12]
 8006706:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800670a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800670e:	6023      	str	r3, [r4, #0]
 8006710:	6863      	ldr	r3, [r4, #4]
 8006712:	4642      	mov	r2, r8
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	4628      	mov	r0, r5
 8006718:	4653      	mov	r3, sl
 800671a:	910b      	str	r1, [sp, #44]	; 0x2c
 800671c:	f7ff fed4 	bl	80064c8 <__cvt>
 8006720:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006722:	4680      	mov	r8, r0
 8006724:	2947      	cmp	r1, #71	; 0x47
 8006726:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006728:	d108      	bne.n	800673c <_printf_float+0x138>
 800672a:	1cc8      	adds	r0, r1, #3
 800672c:	db02      	blt.n	8006734 <_printf_float+0x130>
 800672e:	6863      	ldr	r3, [r4, #4]
 8006730:	4299      	cmp	r1, r3
 8006732:	dd40      	ble.n	80067b6 <_printf_float+0x1b2>
 8006734:	f1a9 0902 	sub.w	r9, r9, #2
 8006738:	fa5f f989 	uxtb.w	r9, r9
 800673c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006740:	d81f      	bhi.n	8006782 <_printf_float+0x17e>
 8006742:	464a      	mov	r2, r9
 8006744:	3901      	subs	r1, #1
 8006746:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800674a:	910d      	str	r1, [sp, #52]	; 0x34
 800674c:	f7ff ff1b 	bl	8006586 <__exponent>
 8006750:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006752:	4682      	mov	sl, r0
 8006754:	1813      	adds	r3, r2, r0
 8006756:	2a01      	cmp	r2, #1
 8006758:	6123      	str	r3, [r4, #16]
 800675a:	dc02      	bgt.n	8006762 <_printf_float+0x15e>
 800675c:	6822      	ldr	r2, [r4, #0]
 800675e:	07d2      	lsls	r2, r2, #31
 8006760:	d501      	bpl.n	8006766 <_printf_float+0x162>
 8006762:	3301      	adds	r3, #1
 8006764:	6123      	str	r3, [r4, #16]
 8006766:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800676a:	2b00      	cmp	r3, #0
 800676c:	d09b      	beq.n	80066a6 <_printf_float+0xa2>
 800676e:	232d      	movs	r3, #45	; 0x2d
 8006770:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006774:	e797      	b.n	80066a6 <_printf_float+0xa2>
 8006776:	2947      	cmp	r1, #71	; 0x47
 8006778:	d1bc      	bne.n	80066f4 <_printf_float+0xf0>
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1ba      	bne.n	80066f4 <_printf_float+0xf0>
 800677e:	2301      	movs	r3, #1
 8006780:	e7b7      	b.n	80066f2 <_printf_float+0xee>
 8006782:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006786:	d118      	bne.n	80067ba <_printf_float+0x1b6>
 8006788:	2900      	cmp	r1, #0
 800678a:	6863      	ldr	r3, [r4, #4]
 800678c:	dd0b      	ble.n	80067a6 <_printf_float+0x1a2>
 800678e:	6121      	str	r1, [r4, #16]
 8006790:	b913      	cbnz	r3, 8006798 <_printf_float+0x194>
 8006792:	6822      	ldr	r2, [r4, #0]
 8006794:	07d0      	lsls	r0, r2, #31
 8006796:	d502      	bpl.n	800679e <_printf_float+0x19a>
 8006798:	3301      	adds	r3, #1
 800679a:	440b      	add	r3, r1
 800679c:	6123      	str	r3, [r4, #16]
 800679e:	f04f 0a00 	mov.w	sl, #0
 80067a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80067a4:	e7df      	b.n	8006766 <_printf_float+0x162>
 80067a6:	b913      	cbnz	r3, 80067ae <_printf_float+0x1aa>
 80067a8:	6822      	ldr	r2, [r4, #0]
 80067aa:	07d2      	lsls	r2, r2, #31
 80067ac:	d501      	bpl.n	80067b2 <_printf_float+0x1ae>
 80067ae:	3302      	adds	r3, #2
 80067b0:	e7f4      	b.n	800679c <_printf_float+0x198>
 80067b2:	2301      	movs	r3, #1
 80067b4:	e7f2      	b.n	800679c <_printf_float+0x198>
 80067b6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80067ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067bc:	4299      	cmp	r1, r3
 80067be:	db05      	blt.n	80067cc <_printf_float+0x1c8>
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	6121      	str	r1, [r4, #16]
 80067c4:	07d8      	lsls	r0, r3, #31
 80067c6:	d5ea      	bpl.n	800679e <_printf_float+0x19a>
 80067c8:	1c4b      	adds	r3, r1, #1
 80067ca:	e7e7      	b.n	800679c <_printf_float+0x198>
 80067cc:	2900      	cmp	r1, #0
 80067ce:	bfcc      	ite	gt
 80067d0:	2201      	movgt	r2, #1
 80067d2:	f1c1 0202 	rsble	r2, r1, #2
 80067d6:	4413      	add	r3, r2
 80067d8:	e7e0      	b.n	800679c <_printf_float+0x198>
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	055a      	lsls	r2, r3, #21
 80067de:	d407      	bmi.n	80067f0 <_printf_float+0x1ec>
 80067e0:	6923      	ldr	r3, [r4, #16]
 80067e2:	4642      	mov	r2, r8
 80067e4:	4631      	mov	r1, r6
 80067e6:	4628      	mov	r0, r5
 80067e8:	47b8      	blx	r7
 80067ea:	3001      	adds	r0, #1
 80067ec:	d12b      	bne.n	8006846 <_printf_float+0x242>
 80067ee:	e764      	b.n	80066ba <_printf_float+0xb6>
 80067f0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80067f4:	f240 80dd 	bls.w	80069b2 <_printf_float+0x3ae>
 80067f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067fc:	2200      	movs	r2, #0
 80067fe:	2300      	movs	r3, #0
 8006800:	f7fa f8ea 	bl	80009d8 <__aeabi_dcmpeq>
 8006804:	2800      	cmp	r0, #0
 8006806:	d033      	beq.n	8006870 <_printf_float+0x26c>
 8006808:	2301      	movs	r3, #1
 800680a:	4631      	mov	r1, r6
 800680c:	4628      	mov	r0, r5
 800680e:	4a35      	ldr	r2, [pc, #212]	; (80068e4 <_printf_float+0x2e0>)
 8006810:	47b8      	blx	r7
 8006812:	3001      	adds	r0, #1
 8006814:	f43f af51 	beq.w	80066ba <_printf_float+0xb6>
 8006818:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800681c:	429a      	cmp	r2, r3
 800681e:	db02      	blt.n	8006826 <_printf_float+0x222>
 8006820:	6823      	ldr	r3, [r4, #0]
 8006822:	07d8      	lsls	r0, r3, #31
 8006824:	d50f      	bpl.n	8006846 <_printf_float+0x242>
 8006826:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800682a:	4631      	mov	r1, r6
 800682c:	4628      	mov	r0, r5
 800682e:	47b8      	blx	r7
 8006830:	3001      	adds	r0, #1
 8006832:	f43f af42 	beq.w	80066ba <_printf_float+0xb6>
 8006836:	f04f 0800 	mov.w	r8, #0
 800683a:	f104 091a 	add.w	r9, r4, #26
 800683e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006840:	3b01      	subs	r3, #1
 8006842:	4543      	cmp	r3, r8
 8006844:	dc09      	bgt.n	800685a <_printf_float+0x256>
 8006846:	6823      	ldr	r3, [r4, #0]
 8006848:	079b      	lsls	r3, r3, #30
 800684a:	f100 8102 	bmi.w	8006a52 <_printf_float+0x44e>
 800684e:	68e0      	ldr	r0, [r4, #12]
 8006850:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006852:	4298      	cmp	r0, r3
 8006854:	bfb8      	it	lt
 8006856:	4618      	movlt	r0, r3
 8006858:	e731      	b.n	80066be <_printf_float+0xba>
 800685a:	2301      	movs	r3, #1
 800685c:	464a      	mov	r2, r9
 800685e:	4631      	mov	r1, r6
 8006860:	4628      	mov	r0, r5
 8006862:	47b8      	blx	r7
 8006864:	3001      	adds	r0, #1
 8006866:	f43f af28 	beq.w	80066ba <_printf_float+0xb6>
 800686a:	f108 0801 	add.w	r8, r8, #1
 800686e:	e7e6      	b.n	800683e <_printf_float+0x23a>
 8006870:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006872:	2b00      	cmp	r3, #0
 8006874:	dc38      	bgt.n	80068e8 <_printf_float+0x2e4>
 8006876:	2301      	movs	r3, #1
 8006878:	4631      	mov	r1, r6
 800687a:	4628      	mov	r0, r5
 800687c:	4a19      	ldr	r2, [pc, #100]	; (80068e4 <_printf_float+0x2e0>)
 800687e:	47b8      	blx	r7
 8006880:	3001      	adds	r0, #1
 8006882:	f43f af1a 	beq.w	80066ba <_printf_float+0xb6>
 8006886:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800688a:	4313      	orrs	r3, r2
 800688c:	d102      	bne.n	8006894 <_printf_float+0x290>
 800688e:	6823      	ldr	r3, [r4, #0]
 8006890:	07d9      	lsls	r1, r3, #31
 8006892:	d5d8      	bpl.n	8006846 <_printf_float+0x242>
 8006894:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006898:	4631      	mov	r1, r6
 800689a:	4628      	mov	r0, r5
 800689c:	47b8      	blx	r7
 800689e:	3001      	adds	r0, #1
 80068a0:	f43f af0b 	beq.w	80066ba <_printf_float+0xb6>
 80068a4:	f04f 0900 	mov.w	r9, #0
 80068a8:	f104 0a1a 	add.w	sl, r4, #26
 80068ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068ae:	425b      	negs	r3, r3
 80068b0:	454b      	cmp	r3, r9
 80068b2:	dc01      	bgt.n	80068b8 <_printf_float+0x2b4>
 80068b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068b6:	e794      	b.n	80067e2 <_printf_float+0x1de>
 80068b8:	2301      	movs	r3, #1
 80068ba:	4652      	mov	r2, sl
 80068bc:	4631      	mov	r1, r6
 80068be:	4628      	mov	r0, r5
 80068c0:	47b8      	blx	r7
 80068c2:	3001      	adds	r0, #1
 80068c4:	f43f aef9 	beq.w	80066ba <_printf_float+0xb6>
 80068c8:	f109 0901 	add.w	r9, r9, #1
 80068cc:	e7ee      	b.n	80068ac <_printf_float+0x2a8>
 80068ce:	bf00      	nop
 80068d0:	7fefffff 	.word	0x7fefffff
 80068d4:	08009524 	.word	0x08009524
 80068d8:	08009528 	.word	0x08009528
 80068dc:	08009530 	.word	0x08009530
 80068e0:	0800952c 	.word	0x0800952c
 80068e4:	08009534 	.word	0x08009534
 80068e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80068ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068ec:	429a      	cmp	r2, r3
 80068ee:	bfa8      	it	ge
 80068f0:	461a      	movge	r2, r3
 80068f2:	2a00      	cmp	r2, #0
 80068f4:	4691      	mov	r9, r2
 80068f6:	dc37      	bgt.n	8006968 <_printf_float+0x364>
 80068f8:	f04f 0b00 	mov.w	fp, #0
 80068fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006900:	f104 021a 	add.w	r2, r4, #26
 8006904:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006908:	ebaa 0309 	sub.w	r3, sl, r9
 800690c:	455b      	cmp	r3, fp
 800690e:	dc33      	bgt.n	8006978 <_printf_float+0x374>
 8006910:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006914:	429a      	cmp	r2, r3
 8006916:	db3b      	blt.n	8006990 <_printf_float+0x38c>
 8006918:	6823      	ldr	r3, [r4, #0]
 800691a:	07da      	lsls	r2, r3, #31
 800691c:	d438      	bmi.n	8006990 <_printf_float+0x38c>
 800691e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006920:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006922:	eba3 020a 	sub.w	r2, r3, sl
 8006926:	eba3 0901 	sub.w	r9, r3, r1
 800692a:	4591      	cmp	r9, r2
 800692c:	bfa8      	it	ge
 800692e:	4691      	movge	r9, r2
 8006930:	f1b9 0f00 	cmp.w	r9, #0
 8006934:	dc34      	bgt.n	80069a0 <_printf_float+0x39c>
 8006936:	f04f 0800 	mov.w	r8, #0
 800693a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800693e:	f104 0a1a 	add.w	sl, r4, #26
 8006942:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006946:	1a9b      	subs	r3, r3, r2
 8006948:	eba3 0309 	sub.w	r3, r3, r9
 800694c:	4543      	cmp	r3, r8
 800694e:	f77f af7a 	ble.w	8006846 <_printf_float+0x242>
 8006952:	2301      	movs	r3, #1
 8006954:	4652      	mov	r2, sl
 8006956:	4631      	mov	r1, r6
 8006958:	4628      	mov	r0, r5
 800695a:	47b8      	blx	r7
 800695c:	3001      	adds	r0, #1
 800695e:	f43f aeac 	beq.w	80066ba <_printf_float+0xb6>
 8006962:	f108 0801 	add.w	r8, r8, #1
 8006966:	e7ec      	b.n	8006942 <_printf_float+0x33e>
 8006968:	4613      	mov	r3, r2
 800696a:	4631      	mov	r1, r6
 800696c:	4642      	mov	r2, r8
 800696e:	4628      	mov	r0, r5
 8006970:	47b8      	blx	r7
 8006972:	3001      	adds	r0, #1
 8006974:	d1c0      	bne.n	80068f8 <_printf_float+0x2f4>
 8006976:	e6a0      	b.n	80066ba <_printf_float+0xb6>
 8006978:	2301      	movs	r3, #1
 800697a:	4631      	mov	r1, r6
 800697c:	4628      	mov	r0, r5
 800697e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006980:	47b8      	blx	r7
 8006982:	3001      	adds	r0, #1
 8006984:	f43f ae99 	beq.w	80066ba <_printf_float+0xb6>
 8006988:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800698a:	f10b 0b01 	add.w	fp, fp, #1
 800698e:	e7b9      	b.n	8006904 <_printf_float+0x300>
 8006990:	4631      	mov	r1, r6
 8006992:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006996:	4628      	mov	r0, r5
 8006998:	47b8      	blx	r7
 800699a:	3001      	adds	r0, #1
 800699c:	d1bf      	bne.n	800691e <_printf_float+0x31a>
 800699e:	e68c      	b.n	80066ba <_printf_float+0xb6>
 80069a0:	464b      	mov	r3, r9
 80069a2:	4631      	mov	r1, r6
 80069a4:	4628      	mov	r0, r5
 80069a6:	eb08 020a 	add.w	r2, r8, sl
 80069aa:	47b8      	blx	r7
 80069ac:	3001      	adds	r0, #1
 80069ae:	d1c2      	bne.n	8006936 <_printf_float+0x332>
 80069b0:	e683      	b.n	80066ba <_printf_float+0xb6>
 80069b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069b4:	2a01      	cmp	r2, #1
 80069b6:	dc01      	bgt.n	80069bc <_printf_float+0x3b8>
 80069b8:	07db      	lsls	r3, r3, #31
 80069ba:	d537      	bpl.n	8006a2c <_printf_float+0x428>
 80069bc:	2301      	movs	r3, #1
 80069be:	4642      	mov	r2, r8
 80069c0:	4631      	mov	r1, r6
 80069c2:	4628      	mov	r0, r5
 80069c4:	47b8      	blx	r7
 80069c6:	3001      	adds	r0, #1
 80069c8:	f43f ae77 	beq.w	80066ba <_printf_float+0xb6>
 80069cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069d0:	4631      	mov	r1, r6
 80069d2:	4628      	mov	r0, r5
 80069d4:	47b8      	blx	r7
 80069d6:	3001      	adds	r0, #1
 80069d8:	f43f ae6f 	beq.w	80066ba <_printf_float+0xb6>
 80069dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80069e0:	2200      	movs	r2, #0
 80069e2:	2300      	movs	r3, #0
 80069e4:	f7f9 fff8 	bl	80009d8 <__aeabi_dcmpeq>
 80069e8:	b9d8      	cbnz	r0, 8006a22 <_printf_float+0x41e>
 80069ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069ec:	f108 0201 	add.w	r2, r8, #1
 80069f0:	3b01      	subs	r3, #1
 80069f2:	4631      	mov	r1, r6
 80069f4:	4628      	mov	r0, r5
 80069f6:	47b8      	blx	r7
 80069f8:	3001      	adds	r0, #1
 80069fa:	d10e      	bne.n	8006a1a <_printf_float+0x416>
 80069fc:	e65d      	b.n	80066ba <_printf_float+0xb6>
 80069fe:	2301      	movs	r3, #1
 8006a00:	464a      	mov	r2, r9
 8006a02:	4631      	mov	r1, r6
 8006a04:	4628      	mov	r0, r5
 8006a06:	47b8      	blx	r7
 8006a08:	3001      	adds	r0, #1
 8006a0a:	f43f ae56 	beq.w	80066ba <_printf_float+0xb6>
 8006a0e:	f108 0801 	add.w	r8, r8, #1
 8006a12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a14:	3b01      	subs	r3, #1
 8006a16:	4543      	cmp	r3, r8
 8006a18:	dcf1      	bgt.n	80069fe <_printf_float+0x3fa>
 8006a1a:	4653      	mov	r3, sl
 8006a1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a20:	e6e0      	b.n	80067e4 <_printf_float+0x1e0>
 8006a22:	f04f 0800 	mov.w	r8, #0
 8006a26:	f104 091a 	add.w	r9, r4, #26
 8006a2a:	e7f2      	b.n	8006a12 <_printf_float+0x40e>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	4642      	mov	r2, r8
 8006a30:	e7df      	b.n	80069f2 <_printf_float+0x3ee>
 8006a32:	2301      	movs	r3, #1
 8006a34:	464a      	mov	r2, r9
 8006a36:	4631      	mov	r1, r6
 8006a38:	4628      	mov	r0, r5
 8006a3a:	47b8      	blx	r7
 8006a3c:	3001      	adds	r0, #1
 8006a3e:	f43f ae3c 	beq.w	80066ba <_printf_float+0xb6>
 8006a42:	f108 0801 	add.w	r8, r8, #1
 8006a46:	68e3      	ldr	r3, [r4, #12]
 8006a48:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006a4a:	1a5b      	subs	r3, r3, r1
 8006a4c:	4543      	cmp	r3, r8
 8006a4e:	dcf0      	bgt.n	8006a32 <_printf_float+0x42e>
 8006a50:	e6fd      	b.n	800684e <_printf_float+0x24a>
 8006a52:	f04f 0800 	mov.w	r8, #0
 8006a56:	f104 0919 	add.w	r9, r4, #25
 8006a5a:	e7f4      	b.n	8006a46 <_printf_float+0x442>

08006a5c <_printf_common>:
 8006a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a60:	4616      	mov	r6, r2
 8006a62:	4699      	mov	r9, r3
 8006a64:	688a      	ldr	r2, [r1, #8]
 8006a66:	690b      	ldr	r3, [r1, #16]
 8006a68:	4607      	mov	r7, r0
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	bfb8      	it	lt
 8006a6e:	4613      	movlt	r3, r2
 8006a70:	6033      	str	r3, [r6, #0]
 8006a72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a76:	460c      	mov	r4, r1
 8006a78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a7c:	b10a      	cbz	r2, 8006a82 <_printf_common+0x26>
 8006a7e:	3301      	adds	r3, #1
 8006a80:	6033      	str	r3, [r6, #0]
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	0699      	lsls	r1, r3, #26
 8006a86:	bf42      	ittt	mi
 8006a88:	6833      	ldrmi	r3, [r6, #0]
 8006a8a:	3302      	addmi	r3, #2
 8006a8c:	6033      	strmi	r3, [r6, #0]
 8006a8e:	6825      	ldr	r5, [r4, #0]
 8006a90:	f015 0506 	ands.w	r5, r5, #6
 8006a94:	d106      	bne.n	8006aa4 <_printf_common+0x48>
 8006a96:	f104 0a19 	add.w	sl, r4, #25
 8006a9a:	68e3      	ldr	r3, [r4, #12]
 8006a9c:	6832      	ldr	r2, [r6, #0]
 8006a9e:	1a9b      	subs	r3, r3, r2
 8006aa0:	42ab      	cmp	r3, r5
 8006aa2:	dc28      	bgt.n	8006af6 <_printf_common+0x9a>
 8006aa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006aa8:	1e13      	subs	r3, r2, #0
 8006aaa:	6822      	ldr	r2, [r4, #0]
 8006aac:	bf18      	it	ne
 8006aae:	2301      	movne	r3, #1
 8006ab0:	0692      	lsls	r2, r2, #26
 8006ab2:	d42d      	bmi.n	8006b10 <_printf_common+0xb4>
 8006ab4:	4649      	mov	r1, r9
 8006ab6:	4638      	mov	r0, r7
 8006ab8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006abc:	47c0      	blx	r8
 8006abe:	3001      	adds	r0, #1
 8006ac0:	d020      	beq.n	8006b04 <_printf_common+0xa8>
 8006ac2:	6823      	ldr	r3, [r4, #0]
 8006ac4:	68e5      	ldr	r5, [r4, #12]
 8006ac6:	f003 0306 	and.w	r3, r3, #6
 8006aca:	2b04      	cmp	r3, #4
 8006acc:	bf18      	it	ne
 8006ace:	2500      	movne	r5, #0
 8006ad0:	6832      	ldr	r2, [r6, #0]
 8006ad2:	f04f 0600 	mov.w	r6, #0
 8006ad6:	68a3      	ldr	r3, [r4, #8]
 8006ad8:	bf08      	it	eq
 8006ada:	1aad      	subeq	r5, r5, r2
 8006adc:	6922      	ldr	r2, [r4, #16]
 8006ade:	bf08      	it	eq
 8006ae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	bfc4      	itt	gt
 8006ae8:	1a9b      	subgt	r3, r3, r2
 8006aea:	18ed      	addgt	r5, r5, r3
 8006aec:	341a      	adds	r4, #26
 8006aee:	42b5      	cmp	r5, r6
 8006af0:	d11a      	bne.n	8006b28 <_printf_common+0xcc>
 8006af2:	2000      	movs	r0, #0
 8006af4:	e008      	b.n	8006b08 <_printf_common+0xac>
 8006af6:	2301      	movs	r3, #1
 8006af8:	4652      	mov	r2, sl
 8006afa:	4649      	mov	r1, r9
 8006afc:	4638      	mov	r0, r7
 8006afe:	47c0      	blx	r8
 8006b00:	3001      	adds	r0, #1
 8006b02:	d103      	bne.n	8006b0c <_printf_common+0xb0>
 8006b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b0c:	3501      	adds	r5, #1
 8006b0e:	e7c4      	b.n	8006a9a <_printf_common+0x3e>
 8006b10:	2030      	movs	r0, #48	; 0x30
 8006b12:	18e1      	adds	r1, r4, r3
 8006b14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b1e:	4422      	add	r2, r4
 8006b20:	3302      	adds	r3, #2
 8006b22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b26:	e7c5      	b.n	8006ab4 <_printf_common+0x58>
 8006b28:	2301      	movs	r3, #1
 8006b2a:	4622      	mov	r2, r4
 8006b2c:	4649      	mov	r1, r9
 8006b2e:	4638      	mov	r0, r7
 8006b30:	47c0      	blx	r8
 8006b32:	3001      	adds	r0, #1
 8006b34:	d0e6      	beq.n	8006b04 <_printf_common+0xa8>
 8006b36:	3601      	adds	r6, #1
 8006b38:	e7d9      	b.n	8006aee <_printf_common+0x92>
	...

08006b3c <_printf_i>:
 8006b3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b40:	7e0f      	ldrb	r7, [r1, #24]
 8006b42:	4691      	mov	r9, r2
 8006b44:	2f78      	cmp	r7, #120	; 0x78
 8006b46:	4680      	mov	r8, r0
 8006b48:	460c      	mov	r4, r1
 8006b4a:	469a      	mov	sl, r3
 8006b4c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b52:	d807      	bhi.n	8006b64 <_printf_i+0x28>
 8006b54:	2f62      	cmp	r7, #98	; 0x62
 8006b56:	d80a      	bhi.n	8006b6e <_printf_i+0x32>
 8006b58:	2f00      	cmp	r7, #0
 8006b5a:	f000 80d9 	beq.w	8006d10 <_printf_i+0x1d4>
 8006b5e:	2f58      	cmp	r7, #88	; 0x58
 8006b60:	f000 80a4 	beq.w	8006cac <_printf_i+0x170>
 8006b64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b6c:	e03a      	b.n	8006be4 <_printf_i+0xa8>
 8006b6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b72:	2b15      	cmp	r3, #21
 8006b74:	d8f6      	bhi.n	8006b64 <_printf_i+0x28>
 8006b76:	a101      	add	r1, pc, #4	; (adr r1, 8006b7c <_printf_i+0x40>)
 8006b78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b7c:	08006bd5 	.word	0x08006bd5
 8006b80:	08006be9 	.word	0x08006be9
 8006b84:	08006b65 	.word	0x08006b65
 8006b88:	08006b65 	.word	0x08006b65
 8006b8c:	08006b65 	.word	0x08006b65
 8006b90:	08006b65 	.word	0x08006b65
 8006b94:	08006be9 	.word	0x08006be9
 8006b98:	08006b65 	.word	0x08006b65
 8006b9c:	08006b65 	.word	0x08006b65
 8006ba0:	08006b65 	.word	0x08006b65
 8006ba4:	08006b65 	.word	0x08006b65
 8006ba8:	08006cf7 	.word	0x08006cf7
 8006bac:	08006c19 	.word	0x08006c19
 8006bb0:	08006cd9 	.word	0x08006cd9
 8006bb4:	08006b65 	.word	0x08006b65
 8006bb8:	08006b65 	.word	0x08006b65
 8006bbc:	08006d19 	.word	0x08006d19
 8006bc0:	08006b65 	.word	0x08006b65
 8006bc4:	08006c19 	.word	0x08006c19
 8006bc8:	08006b65 	.word	0x08006b65
 8006bcc:	08006b65 	.word	0x08006b65
 8006bd0:	08006ce1 	.word	0x08006ce1
 8006bd4:	682b      	ldr	r3, [r5, #0]
 8006bd6:	1d1a      	adds	r2, r3, #4
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	602a      	str	r2, [r5, #0]
 8006bdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006be0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006be4:	2301      	movs	r3, #1
 8006be6:	e0a4      	b.n	8006d32 <_printf_i+0x1f6>
 8006be8:	6820      	ldr	r0, [r4, #0]
 8006bea:	6829      	ldr	r1, [r5, #0]
 8006bec:	0606      	lsls	r6, r0, #24
 8006bee:	f101 0304 	add.w	r3, r1, #4
 8006bf2:	d50a      	bpl.n	8006c0a <_printf_i+0xce>
 8006bf4:	680e      	ldr	r6, [r1, #0]
 8006bf6:	602b      	str	r3, [r5, #0]
 8006bf8:	2e00      	cmp	r6, #0
 8006bfa:	da03      	bge.n	8006c04 <_printf_i+0xc8>
 8006bfc:	232d      	movs	r3, #45	; 0x2d
 8006bfe:	4276      	negs	r6, r6
 8006c00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c04:	230a      	movs	r3, #10
 8006c06:	485e      	ldr	r0, [pc, #376]	; (8006d80 <_printf_i+0x244>)
 8006c08:	e019      	b.n	8006c3e <_printf_i+0x102>
 8006c0a:	680e      	ldr	r6, [r1, #0]
 8006c0c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c10:	602b      	str	r3, [r5, #0]
 8006c12:	bf18      	it	ne
 8006c14:	b236      	sxthne	r6, r6
 8006c16:	e7ef      	b.n	8006bf8 <_printf_i+0xbc>
 8006c18:	682b      	ldr	r3, [r5, #0]
 8006c1a:	6820      	ldr	r0, [r4, #0]
 8006c1c:	1d19      	adds	r1, r3, #4
 8006c1e:	6029      	str	r1, [r5, #0]
 8006c20:	0601      	lsls	r1, r0, #24
 8006c22:	d501      	bpl.n	8006c28 <_printf_i+0xec>
 8006c24:	681e      	ldr	r6, [r3, #0]
 8006c26:	e002      	b.n	8006c2e <_printf_i+0xf2>
 8006c28:	0646      	lsls	r6, r0, #25
 8006c2a:	d5fb      	bpl.n	8006c24 <_printf_i+0xe8>
 8006c2c:	881e      	ldrh	r6, [r3, #0]
 8006c2e:	2f6f      	cmp	r7, #111	; 0x6f
 8006c30:	bf0c      	ite	eq
 8006c32:	2308      	moveq	r3, #8
 8006c34:	230a      	movne	r3, #10
 8006c36:	4852      	ldr	r0, [pc, #328]	; (8006d80 <_printf_i+0x244>)
 8006c38:	2100      	movs	r1, #0
 8006c3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c3e:	6865      	ldr	r5, [r4, #4]
 8006c40:	2d00      	cmp	r5, #0
 8006c42:	bfa8      	it	ge
 8006c44:	6821      	ldrge	r1, [r4, #0]
 8006c46:	60a5      	str	r5, [r4, #8]
 8006c48:	bfa4      	itt	ge
 8006c4a:	f021 0104 	bicge.w	r1, r1, #4
 8006c4e:	6021      	strge	r1, [r4, #0]
 8006c50:	b90e      	cbnz	r6, 8006c56 <_printf_i+0x11a>
 8006c52:	2d00      	cmp	r5, #0
 8006c54:	d04d      	beq.n	8006cf2 <_printf_i+0x1b6>
 8006c56:	4615      	mov	r5, r2
 8006c58:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c5c:	fb03 6711 	mls	r7, r3, r1, r6
 8006c60:	5dc7      	ldrb	r7, [r0, r7]
 8006c62:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c66:	4637      	mov	r7, r6
 8006c68:	42bb      	cmp	r3, r7
 8006c6a:	460e      	mov	r6, r1
 8006c6c:	d9f4      	bls.n	8006c58 <_printf_i+0x11c>
 8006c6e:	2b08      	cmp	r3, #8
 8006c70:	d10b      	bne.n	8006c8a <_printf_i+0x14e>
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	07de      	lsls	r6, r3, #31
 8006c76:	d508      	bpl.n	8006c8a <_printf_i+0x14e>
 8006c78:	6923      	ldr	r3, [r4, #16]
 8006c7a:	6861      	ldr	r1, [r4, #4]
 8006c7c:	4299      	cmp	r1, r3
 8006c7e:	bfde      	ittt	le
 8006c80:	2330      	movle	r3, #48	; 0x30
 8006c82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c86:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006c8a:	1b52      	subs	r2, r2, r5
 8006c8c:	6122      	str	r2, [r4, #16]
 8006c8e:	464b      	mov	r3, r9
 8006c90:	4621      	mov	r1, r4
 8006c92:	4640      	mov	r0, r8
 8006c94:	f8cd a000 	str.w	sl, [sp]
 8006c98:	aa03      	add	r2, sp, #12
 8006c9a:	f7ff fedf 	bl	8006a5c <_printf_common>
 8006c9e:	3001      	adds	r0, #1
 8006ca0:	d14c      	bne.n	8006d3c <_printf_i+0x200>
 8006ca2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ca6:	b004      	add	sp, #16
 8006ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cac:	4834      	ldr	r0, [pc, #208]	; (8006d80 <_printf_i+0x244>)
 8006cae:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006cb2:	6829      	ldr	r1, [r5, #0]
 8006cb4:	6823      	ldr	r3, [r4, #0]
 8006cb6:	f851 6b04 	ldr.w	r6, [r1], #4
 8006cba:	6029      	str	r1, [r5, #0]
 8006cbc:	061d      	lsls	r5, r3, #24
 8006cbe:	d514      	bpl.n	8006cea <_printf_i+0x1ae>
 8006cc0:	07df      	lsls	r7, r3, #31
 8006cc2:	bf44      	itt	mi
 8006cc4:	f043 0320 	orrmi.w	r3, r3, #32
 8006cc8:	6023      	strmi	r3, [r4, #0]
 8006cca:	b91e      	cbnz	r6, 8006cd4 <_printf_i+0x198>
 8006ccc:	6823      	ldr	r3, [r4, #0]
 8006cce:	f023 0320 	bic.w	r3, r3, #32
 8006cd2:	6023      	str	r3, [r4, #0]
 8006cd4:	2310      	movs	r3, #16
 8006cd6:	e7af      	b.n	8006c38 <_printf_i+0xfc>
 8006cd8:	6823      	ldr	r3, [r4, #0]
 8006cda:	f043 0320 	orr.w	r3, r3, #32
 8006cde:	6023      	str	r3, [r4, #0]
 8006ce0:	2378      	movs	r3, #120	; 0x78
 8006ce2:	4828      	ldr	r0, [pc, #160]	; (8006d84 <_printf_i+0x248>)
 8006ce4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ce8:	e7e3      	b.n	8006cb2 <_printf_i+0x176>
 8006cea:	0659      	lsls	r1, r3, #25
 8006cec:	bf48      	it	mi
 8006cee:	b2b6      	uxthmi	r6, r6
 8006cf0:	e7e6      	b.n	8006cc0 <_printf_i+0x184>
 8006cf2:	4615      	mov	r5, r2
 8006cf4:	e7bb      	b.n	8006c6e <_printf_i+0x132>
 8006cf6:	682b      	ldr	r3, [r5, #0]
 8006cf8:	6826      	ldr	r6, [r4, #0]
 8006cfa:	1d18      	adds	r0, r3, #4
 8006cfc:	6961      	ldr	r1, [r4, #20]
 8006cfe:	6028      	str	r0, [r5, #0]
 8006d00:	0635      	lsls	r5, r6, #24
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	d501      	bpl.n	8006d0a <_printf_i+0x1ce>
 8006d06:	6019      	str	r1, [r3, #0]
 8006d08:	e002      	b.n	8006d10 <_printf_i+0x1d4>
 8006d0a:	0670      	lsls	r0, r6, #25
 8006d0c:	d5fb      	bpl.n	8006d06 <_printf_i+0x1ca>
 8006d0e:	8019      	strh	r1, [r3, #0]
 8006d10:	2300      	movs	r3, #0
 8006d12:	4615      	mov	r5, r2
 8006d14:	6123      	str	r3, [r4, #16]
 8006d16:	e7ba      	b.n	8006c8e <_printf_i+0x152>
 8006d18:	682b      	ldr	r3, [r5, #0]
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	1d1a      	adds	r2, r3, #4
 8006d1e:	602a      	str	r2, [r5, #0]
 8006d20:	681d      	ldr	r5, [r3, #0]
 8006d22:	6862      	ldr	r2, [r4, #4]
 8006d24:	4628      	mov	r0, r5
 8006d26:	f001 fa55 	bl	80081d4 <memchr>
 8006d2a:	b108      	cbz	r0, 8006d30 <_printf_i+0x1f4>
 8006d2c:	1b40      	subs	r0, r0, r5
 8006d2e:	6060      	str	r0, [r4, #4]
 8006d30:	6863      	ldr	r3, [r4, #4]
 8006d32:	6123      	str	r3, [r4, #16]
 8006d34:	2300      	movs	r3, #0
 8006d36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d3a:	e7a8      	b.n	8006c8e <_printf_i+0x152>
 8006d3c:	462a      	mov	r2, r5
 8006d3e:	4649      	mov	r1, r9
 8006d40:	4640      	mov	r0, r8
 8006d42:	6923      	ldr	r3, [r4, #16]
 8006d44:	47d0      	blx	sl
 8006d46:	3001      	adds	r0, #1
 8006d48:	d0ab      	beq.n	8006ca2 <_printf_i+0x166>
 8006d4a:	6823      	ldr	r3, [r4, #0]
 8006d4c:	079b      	lsls	r3, r3, #30
 8006d4e:	d413      	bmi.n	8006d78 <_printf_i+0x23c>
 8006d50:	68e0      	ldr	r0, [r4, #12]
 8006d52:	9b03      	ldr	r3, [sp, #12]
 8006d54:	4298      	cmp	r0, r3
 8006d56:	bfb8      	it	lt
 8006d58:	4618      	movlt	r0, r3
 8006d5a:	e7a4      	b.n	8006ca6 <_printf_i+0x16a>
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	4632      	mov	r2, r6
 8006d60:	4649      	mov	r1, r9
 8006d62:	4640      	mov	r0, r8
 8006d64:	47d0      	blx	sl
 8006d66:	3001      	adds	r0, #1
 8006d68:	d09b      	beq.n	8006ca2 <_printf_i+0x166>
 8006d6a:	3501      	adds	r5, #1
 8006d6c:	68e3      	ldr	r3, [r4, #12]
 8006d6e:	9903      	ldr	r1, [sp, #12]
 8006d70:	1a5b      	subs	r3, r3, r1
 8006d72:	42ab      	cmp	r3, r5
 8006d74:	dcf2      	bgt.n	8006d5c <_printf_i+0x220>
 8006d76:	e7eb      	b.n	8006d50 <_printf_i+0x214>
 8006d78:	2500      	movs	r5, #0
 8006d7a:	f104 0619 	add.w	r6, r4, #25
 8006d7e:	e7f5      	b.n	8006d6c <_printf_i+0x230>
 8006d80:	08009536 	.word	0x08009536
 8006d84:	08009547 	.word	0x08009547

08006d88 <iprintf>:
 8006d88:	b40f      	push	{r0, r1, r2, r3}
 8006d8a:	4b0a      	ldr	r3, [pc, #40]	; (8006db4 <iprintf+0x2c>)
 8006d8c:	b513      	push	{r0, r1, r4, lr}
 8006d8e:	681c      	ldr	r4, [r3, #0]
 8006d90:	b124      	cbz	r4, 8006d9c <iprintf+0x14>
 8006d92:	69a3      	ldr	r3, [r4, #24]
 8006d94:	b913      	cbnz	r3, 8006d9c <iprintf+0x14>
 8006d96:	4620      	mov	r0, r4
 8006d98:	f001 f90a 	bl	8007fb0 <__sinit>
 8006d9c:	ab05      	add	r3, sp, #20
 8006d9e:	4620      	mov	r0, r4
 8006da0:	9a04      	ldr	r2, [sp, #16]
 8006da2:	68a1      	ldr	r1, [r4, #8]
 8006da4:	9301      	str	r3, [sp, #4]
 8006da6:	f002 f827 	bl	8008df8 <_vfiprintf_r>
 8006daa:	b002      	add	sp, #8
 8006dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006db0:	b004      	add	sp, #16
 8006db2:	4770      	bx	lr
 8006db4:	2000002c 	.word	0x2000002c

08006db8 <putchar>:
 8006db8:	b538      	push	{r3, r4, r5, lr}
 8006dba:	4b08      	ldr	r3, [pc, #32]	; (8006ddc <putchar+0x24>)
 8006dbc:	4605      	mov	r5, r0
 8006dbe:	681c      	ldr	r4, [r3, #0]
 8006dc0:	b124      	cbz	r4, 8006dcc <putchar+0x14>
 8006dc2:	69a3      	ldr	r3, [r4, #24]
 8006dc4:	b913      	cbnz	r3, 8006dcc <putchar+0x14>
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	f001 f8f2 	bl	8007fb0 <__sinit>
 8006dcc:	4629      	mov	r1, r5
 8006dce:	4620      	mov	r0, r4
 8006dd0:	68a2      	ldr	r2, [r4, #8]
 8006dd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dd6:	f002 b93f 	b.w	8009058 <_putc_r>
 8006dda:	bf00      	nop
 8006ddc:	2000002c 	.word	0x2000002c

08006de0 <_puts_r>:
 8006de0:	b570      	push	{r4, r5, r6, lr}
 8006de2:	460e      	mov	r6, r1
 8006de4:	4605      	mov	r5, r0
 8006de6:	b118      	cbz	r0, 8006df0 <_puts_r+0x10>
 8006de8:	6983      	ldr	r3, [r0, #24]
 8006dea:	b90b      	cbnz	r3, 8006df0 <_puts_r+0x10>
 8006dec:	f001 f8e0 	bl	8007fb0 <__sinit>
 8006df0:	69ab      	ldr	r3, [r5, #24]
 8006df2:	68ac      	ldr	r4, [r5, #8]
 8006df4:	b913      	cbnz	r3, 8006dfc <_puts_r+0x1c>
 8006df6:	4628      	mov	r0, r5
 8006df8:	f001 f8da 	bl	8007fb0 <__sinit>
 8006dfc:	4b2c      	ldr	r3, [pc, #176]	; (8006eb0 <_puts_r+0xd0>)
 8006dfe:	429c      	cmp	r4, r3
 8006e00:	d120      	bne.n	8006e44 <_puts_r+0x64>
 8006e02:	686c      	ldr	r4, [r5, #4]
 8006e04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e06:	07db      	lsls	r3, r3, #31
 8006e08:	d405      	bmi.n	8006e16 <_puts_r+0x36>
 8006e0a:	89a3      	ldrh	r3, [r4, #12]
 8006e0c:	0598      	lsls	r0, r3, #22
 8006e0e:	d402      	bmi.n	8006e16 <_puts_r+0x36>
 8006e10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e12:	f001 f970 	bl	80080f6 <__retarget_lock_acquire_recursive>
 8006e16:	89a3      	ldrh	r3, [r4, #12]
 8006e18:	0719      	lsls	r1, r3, #28
 8006e1a:	d51d      	bpl.n	8006e58 <_puts_r+0x78>
 8006e1c:	6923      	ldr	r3, [r4, #16]
 8006e1e:	b1db      	cbz	r3, 8006e58 <_puts_r+0x78>
 8006e20:	3e01      	subs	r6, #1
 8006e22:	68a3      	ldr	r3, [r4, #8]
 8006e24:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	60a3      	str	r3, [r4, #8]
 8006e2c:	bb39      	cbnz	r1, 8006e7e <_puts_r+0x9e>
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	da38      	bge.n	8006ea4 <_puts_r+0xc4>
 8006e32:	4622      	mov	r2, r4
 8006e34:	210a      	movs	r1, #10
 8006e36:	4628      	mov	r0, r5
 8006e38:	f000 f868 	bl	8006f0c <__swbuf_r>
 8006e3c:	3001      	adds	r0, #1
 8006e3e:	d011      	beq.n	8006e64 <_puts_r+0x84>
 8006e40:	250a      	movs	r5, #10
 8006e42:	e011      	b.n	8006e68 <_puts_r+0x88>
 8006e44:	4b1b      	ldr	r3, [pc, #108]	; (8006eb4 <_puts_r+0xd4>)
 8006e46:	429c      	cmp	r4, r3
 8006e48:	d101      	bne.n	8006e4e <_puts_r+0x6e>
 8006e4a:	68ac      	ldr	r4, [r5, #8]
 8006e4c:	e7da      	b.n	8006e04 <_puts_r+0x24>
 8006e4e:	4b1a      	ldr	r3, [pc, #104]	; (8006eb8 <_puts_r+0xd8>)
 8006e50:	429c      	cmp	r4, r3
 8006e52:	bf08      	it	eq
 8006e54:	68ec      	ldreq	r4, [r5, #12]
 8006e56:	e7d5      	b.n	8006e04 <_puts_r+0x24>
 8006e58:	4621      	mov	r1, r4
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	f000 f8a8 	bl	8006fb0 <__swsetup_r>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	d0dd      	beq.n	8006e20 <_puts_r+0x40>
 8006e64:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006e68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e6a:	07da      	lsls	r2, r3, #31
 8006e6c:	d405      	bmi.n	8006e7a <_puts_r+0x9a>
 8006e6e:	89a3      	ldrh	r3, [r4, #12]
 8006e70:	059b      	lsls	r3, r3, #22
 8006e72:	d402      	bmi.n	8006e7a <_puts_r+0x9a>
 8006e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e76:	f001 f93f 	bl	80080f8 <__retarget_lock_release_recursive>
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	bd70      	pop	{r4, r5, r6, pc}
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	da04      	bge.n	8006e8c <_puts_r+0xac>
 8006e82:	69a2      	ldr	r2, [r4, #24]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	dc06      	bgt.n	8006e96 <_puts_r+0xb6>
 8006e88:	290a      	cmp	r1, #10
 8006e8a:	d004      	beq.n	8006e96 <_puts_r+0xb6>
 8006e8c:	6823      	ldr	r3, [r4, #0]
 8006e8e:	1c5a      	adds	r2, r3, #1
 8006e90:	6022      	str	r2, [r4, #0]
 8006e92:	7019      	strb	r1, [r3, #0]
 8006e94:	e7c5      	b.n	8006e22 <_puts_r+0x42>
 8006e96:	4622      	mov	r2, r4
 8006e98:	4628      	mov	r0, r5
 8006e9a:	f000 f837 	bl	8006f0c <__swbuf_r>
 8006e9e:	3001      	adds	r0, #1
 8006ea0:	d1bf      	bne.n	8006e22 <_puts_r+0x42>
 8006ea2:	e7df      	b.n	8006e64 <_puts_r+0x84>
 8006ea4:	250a      	movs	r5, #10
 8006ea6:	6823      	ldr	r3, [r4, #0]
 8006ea8:	1c5a      	adds	r2, r3, #1
 8006eaa:	6022      	str	r2, [r4, #0]
 8006eac:	701d      	strb	r5, [r3, #0]
 8006eae:	e7db      	b.n	8006e68 <_puts_r+0x88>
 8006eb0:	08009608 	.word	0x08009608
 8006eb4:	08009628 	.word	0x08009628
 8006eb8:	080095e8 	.word	0x080095e8

08006ebc <puts>:
 8006ebc:	4b02      	ldr	r3, [pc, #8]	; (8006ec8 <puts+0xc>)
 8006ebe:	4601      	mov	r1, r0
 8006ec0:	6818      	ldr	r0, [r3, #0]
 8006ec2:	f7ff bf8d 	b.w	8006de0 <_puts_r>
 8006ec6:	bf00      	nop
 8006ec8:	2000002c 	.word	0x2000002c

08006ecc <siprintf>:
 8006ecc:	b40e      	push	{r1, r2, r3}
 8006ece:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ed2:	b500      	push	{lr}
 8006ed4:	b09c      	sub	sp, #112	; 0x70
 8006ed6:	ab1d      	add	r3, sp, #116	; 0x74
 8006ed8:	9002      	str	r0, [sp, #8]
 8006eda:	9006      	str	r0, [sp, #24]
 8006edc:	9107      	str	r1, [sp, #28]
 8006ede:	9104      	str	r1, [sp, #16]
 8006ee0:	4808      	ldr	r0, [pc, #32]	; (8006f04 <siprintf+0x38>)
 8006ee2:	4909      	ldr	r1, [pc, #36]	; (8006f08 <siprintf+0x3c>)
 8006ee4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ee8:	9105      	str	r1, [sp, #20]
 8006eea:	6800      	ldr	r0, [r0, #0]
 8006eec:	a902      	add	r1, sp, #8
 8006eee:	9301      	str	r3, [sp, #4]
 8006ef0:	f001 fe5a 	bl	8008ba8 <_svfiprintf_r>
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	9b02      	ldr	r3, [sp, #8]
 8006ef8:	701a      	strb	r2, [r3, #0]
 8006efa:	b01c      	add	sp, #112	; 0x70
 8006efc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f00:	b003      	add	sp, #12
 8006f02:	4770      	bx	lr
 8006f04:	2000002c 	.word	0x2000002c
 8006f08:	ffff0208 	.word	0xffff0208

08006f0c <__swbuf_r>:
 8006f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0e:	460e      	mov	r6, r1
 8006f10:	4614      	mov	r4, r2
 8006f12:	4605      	mov	r5, r0
 8006f14:	b118      	cbz	r0, 8006f1e <__swbuf_r+0x12>
 8006f16:	6983      	ldr	r3, [r0, #24]
 8006f18:	b90b      	cbnz	r3, 8006f1e <__swbuf_r+0x12>
 8006f1a:	f001 f849 	bl	8007fb0 <__sinit>
 8006f1e:	4b21      	ldr	r3, [pc, #132]	; (8006fa4 <__swbuf_r+0x98>)
 8006f20:	429c      	cmp	r4, r3
 8006f22:	d12b      	bne.n	8006f7c <__swbuf_r+0x70>
 8006f24:	686c      	ldr	r4, [r5, #4]
 8006f26:	69a3      	ldr	r3, [r4, #24]
 8006f28:	60a3      	str	r3, [r4, #8]
 8006f2a:	89a3      	ldrh	r3, [r4, #12]
 8006f2c:	071a      	lsls	r2, r3, #28
 8006f2e:	d52f      	bpl.n	8006f90 <__swbuf_r+0x84>
 8006f30:	6923      	ldr	r3, [r4, #16]
 8006f32:	b36b      	cbz	r3, 8006f90 <__swbuf_r+0x84>
 8006f34:	6923      	ldr	r3, [r4, #16]
 8006f36:	6820      	ldr	r0, [r4, #0]
 8006f38:	b2f6      	uxtb	r6, r6
 8006f3a:	1ac0      	subs	r0, r0, r3
 8006f3c:	6963      	ldr	r3, [r4, #20]
 8006f3e:	4637      	mov	r7, r6
 8006f40:	4283      	cmp	r3, r0
 8006f42:	dc04      	bgt.n	8006f4e <__swbuf_r+0x42>
 8006f44:	4621      	mov	r1, r4
 8006f46:	4628      	mov	r0, r5
 8006f48:	f000 ff9e 	bl	8007e88 <_fflush_r>
 8006f4c:	bb30      	cbnz	r0, 8006f9c <__swbuf_r+0x90>
 8006f4e:	68a3      	ldr	r3, [r4, #8]
 8006f50:	3001      	adds	r0, #1
 8006f52:	3b01      	subs	r3, #1
 8006f54:	60a3      	str	r3, [r4, #8]
 8006f56:	6823      	ldr	r3, [r4, #0]
 8006f58:	1c5a      	adds	r2, r3, #1
 8006f5a:	6022      	str	r2, [r4, #0]
 8006f5c:	701e      	strb	r6, [r3, #0]
 8006f5e:	6963      	ldr	r3, [r4, #20]
 8006f60:	4283      	cmp	r3, r0
 8006f62:	d004      	beq.n	8006f6e <__swbuf_r+0x62>
 8006f64:	89a3      	ldrh	r3, [r4, #12]
 8006f66:	07db      	lsls	r3, r3, #31
 8006f68:	d506      	bpl.n	8006f78 <__swbuf_r+0x6c>
 8006f6a:	2e0a      	cmp	r6, #10
 8006f6c:	d104      	bne.n	8006f78 <__swbuf_r+0x6c>
 8006f6e:	4621      	mov	r1, r4
 8006f70:	4628      	mov	r0, r5
 8006f72:	f000 ff89 	bl	8007e88 <_fflush_r>
 8006f76:	b988      	cbnz	r0, 8006f9c <__swbuf_r+0x90>
 8006f78:	4638      	mov	r0, r7
 8006f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f7c:	4b0a      	ldr	r3, [pc, #40]	; (8006fa8 <__swbuf_r+0x9c>)
 8006f7e:	429c      	cmp	r4, r3
 8006f80:	d101      	bne.n	8006f86 <__swbuf_r+0x7a>
 8006f82:	68ac      	ldr	r4, [r5, #8]
 8006f84:	e7cf      	b.n	8006f26 <__swbuf_r+0x1a>
 8006f86:	4b09      	ldr	r3, [pc, #36]	; (8006fac <__swbuf_r+0xa0>)
 8006f88:	429c      	cmp	r4, r3
 8006f8a:	bf08      	it	eq
 8006f8c:	68ec      	ldreq	r4, [r5, #12]
 8006f8e:	e7ca      	b.n	8006f26 <__swbuf_r+0x1a>
 8006f90:	4621      	mov	r1, r4
 8006f92:	4628      	mov	r0, r5
 8006f94:	f000 f80c 	bl	8006fb0 <__swsetup_r>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	d0cb      	beq.n	8006f34 <__swbuf_r+0x28>
 8006f9c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006fa0:	e7ea      	b.n	8006f78 <__swbuf_r+0x6c>
 8006fa2:	bf00      	nop
 8006fa4:	08009608 	.word	0x08009608
 8006fa8:	08009628 	.word	0x08009628
 8006fac:	080095e8 	.word	0x080095e8

08006fb0 <__swsetup_r>:
 8006fb0:	4b32      	ldr	r3, [pc, #200]	; (800707c <__swsetup_r+0xcc>)
 8006fb2:	b570      	push	{r4, r5, r6, lr}
 8006fb4:	681d      	ldr	r5, [r3, #0]
 8006fb6:	4606      	mov	r6, r0
 8006fb8:	460c      	mov	r4, r1
 8006fba:	b125      	cbz	r5, 8006fc6 <__swsetup_r+0x16>
 8006fbc:	69ab      	ldr	r3, [r5, #24]
 8006fbe:	b913      	cbnz	r3, 8006fc6 <__swsetup_r+0x16>
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	f000 fff5 	bl	8007fb0 <__sinit>
 8006fc6:	4b2e      	ldr	r3, [pc, #184]	; (8007080 <__swsetup_r+0xd0>)
 8006fc8:	429c      	cmp	r4, r3
 8006fca:	d10f      	bne.n	8006fec <__swsetup_r+0x3c>
 8006fcc:	686c      	ldr	r4, [r5, #4]
 8006fce:	89a3      	ldrh	r3, [r4, #12]
 8006fd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fd4:	0719      	lsls	r1, r3, #28
 8006fd6:	d42c      	bmi.n	8007032 <__swsetup_r+0x82>
 8006fd8:	06dd      	lsls	r5, r3, #27
 8006fda:	d411      	bmi.n	8007000 <__swsetup_r+0x50>
 8006fdc:	2309      	movs	r3, #9
 8006fde:	6033      	str	r3, [r6, #0]
 8006fe0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fe8:	81a3      	strh	r3, [r4, #12]
 8006fea:	e03e      	b.n	800706a <__swsetup_r+0xba>
 8006fec:	4b25      	ldr	r3, [pc, #148]	; (8007084 <__swsetup_r+0xd4>)
 8006fee:	429c      	cmp	r4, r3
 8006ff0:	d101      	bne.n	8006ff6 <__swsetup_r+0x46>
 8006ff2:	68ac      	ldr	r4, [r5, #8]
 8006ff4:	e7eb      	b.n	8006fce <__swsetup_r+0x1e>
 8006ff6:	4b24      	ldr	r3, [pc, #144]	; (8007088 <__swsetup_r+0xd8>)
 8006ff8:	429c      	cmp	r4, r3
 8006ffa:	bf08      	it	eq
 8006ffc:	68ec      	ldreq	r4, [r5, #12]
 8006ffe:	e7e6      	b.n	8006fce <__swsetup_r+0x1e>
 8007000:	0758      	lsls	r0, r3, #29
 8007002:	d512      	bpl.n	800702a <__swsetup_r+0x7a>
 8007004:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007006:	b141      	cbz	r1, 800701a <__swsetup_r+0x6a>
 8007008:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800700c:	4299      	cmp	r1, r3
 800700e:	d002      	beq.n	8007016 <__swsetup_r+0x66>
 8007010:	4630      	mov	r0, r6
 8007012:	f001 fc91 	bl	8008938 <_free_r>
 8007016:	2300      	movs	r3, #0
 8007018:	6363      	str	r3, [r4, #52]	; 0x34
 800701a:	89a3      	ldrh	r3, [r4, #12]
 800701c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007020:	81a3      	strh	r3, [r4, #12]
 8007022:	2300      	movs	r3, #0
 8007024:	6063      	str	r3, [r4, #4]
 8007026:	6923      	ldr	r3, [r4, #16]
 8007028:	6023      	str	r3, [r4, #0]
 800702a:	89a3      	ldrh	r3, [r4, #12]
 800702c:	f043 0308 	orr.w	r3, r3, #8
 8007030:	81a3      	strh	r3, [r4, #12]
 8007032:	6923      	ldr	r3, [r4, #16]
 8007034:	b94b      	cbnz	r3, 800704a <__swsetup_r+0x9a>
 8007036:	89a3      	ldrh	r3, [r4, #12]
 8007038:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800703c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007040:	d003      	beq.n	800704a <__swsetup_r+0x9a>
 8007042:	4621      	mov	r1, r4
 8007044:	4630      	mov	r0, r6
 8007046:	f001 f87d 	bl	8008144 <__smakebuf_r>
 800704a:	89a0      	ldrh	r0, [r4, #12]
 800704c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007050:	f010 0301 	ands.w	r3, r0, #1
 8007054:	d00a      	beq.n	800706c <__swsetup_r+0xbc>
 8007056:	2300      	movs	r3, #0
 8007058:	60a3      	str	r3, [r4, #8]
 800705a:	6963      	ldr	r3, [r4, #20]
 800705c:	425b      	negs	r3, r3
 800705e:	61a3      	str	r3, [r4, #24]
 8007060:	6923      	ldr	r3, [r4, #16]
 8007062:	b943      	cbnz	r3, 8007076 <__swsetup_r+0xc6>
 8007064:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007068:	d1ba      	bne.n	8006fe0 <__swsetup_r+0x30>
 800706a:	bd70      	pop	{r4, r5, r6, pc}
 800706c:	0781      	lsls	r1, r0, #30
 800706e:	bf58      	it	pl
 8007070:	6963      	ldrpl	r3, [r4, #20]
 8007072:	60a3      	str	r3, [r4, #8]
 8007074:	e7f4      	b.n	8007060 <__swsetup_r+0xb0>
 8007076:	2000      	movs	r0, #0
 8007078:	e7f7      	b.n	800706a <__swsetup_r+0xba>
 800707a:	bf00      	nop
 800707c:	2000002c 	.word	0x2000002c
 8007080:	08009608 	.word	0x08009608
 8007084:	08009628 	.word	0x08009628
 8007088:	080095e8 	.word	0x080095e8

0800708c <quorem>:
 800708c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007090:	6903      	ldr	r3, [r0, #16]
 8007092:	690c      	ldr	r4, [r1, #16]
 8007094:	4607      	mov	r7, r0
 8007096:	42a3      	cmp	r3, r4
 8007098:	f2c0 8082 	blt.w	80071a0 <quorem+0x114>
 800709c:	3c01      	subs	r4, #1
 800709e:	f100 0514 	add.w	r5, r0, #20
 80070a2:	f101 0814 	add.w	r8, r1, #20
 80070a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070aa:	9301      	str	r3, [sp, #4]
 80070ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80070b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070b4:	3301      	adds	r3, #1
 80070b6:	429a      	cmp	r2, r3
 80070b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80070bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80070c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80070c4:	d331      	bcc.n	800712a <quorem+0x9e>
 80070c6:	f04f 0e00 	mov.w	lr, #0
 80070ca:	4640      	mov	r0, r8
 80070cc:	46ac      	mov	ip, r5
 80070ce:	46f2      	mov	sl, lr
 80070d0:	f850 2b04 	ldr.w	r2, [r0], #4
 80070d4:	b293      	uxth	r3, r2
 80070d6:	fb06 e303 	mla	r3, r6, r3, lr
 80070da:	0c12      	lsrs	r2, r2, #16
 80070dc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	fb06 e202 	mla	r2, r6, r2, lr
 80070e6:	ebaa 0303 	sub.w	r3, sl, r3
 80070ea:	f8dc a000 	ldr.w	sl, [ip]
 80070ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80070f2:	fa1f fa8a 	uxth.w	sl, sl
 80070f6:	4453      	add	r3, sl
 80070f8:	f8dc a000 	ldr.w	sl, [ip]
 80070fc:	b292      	uxth	r2, r2
 80070fe:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007102:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007106:	b29b      	uxth	r3, r3
 8007108:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800710c:	4581      	cmp	r9, r0
 800710e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007112:	f84c 3b04 	str.w	r3, [ip], #4
 8007116:	d2db      	bcs.n	80070d0 <quorem+0x44>
 8007118:	f855 300b 	ldr.w	r3, [r5, fp]
 800711c:	b92b      	cbnz	r3, 800712a <quorem+0x9e>
 800711e:	9b01      	ldr	r3, [sp, #4]
 8007120:	3b04      	subs	r3, #4
 8007122:	429d      	cmp	r5, r3
 8007124:	461a      	mov	r2, r3
 8007126:	d32f      	bcc.n	8007188 <quorem+0xfc>
 8007128:	613c      	str	r4, [r7, #16]
 800712a:	4638      	mov	r0, r7
 800712c:	f001 faec 	bl	8008708 <__mcmp>
 8007130:	2800      	cmp	r0, #0
 8007132:	db25      	blt.n	8007180 <quorem+0xf4>
 8007134:	4628      	mov	r0, r5
 8007136:	f04f 0c00 	mov.w	ip, #0
 800713a:	3601      	adds	r6, #1
 800713c:	f858 1b04 	ldr.w	r1, [r8], #4
 8007140:	f8d0 e000 	ldr.w	lr, [r0]
 8007144:	b28b      	uxth	r3, r1
 8007146:	ebac 0303 	sub.w	r3, ip, r3
 800714a:	fa1f f28e 	uxth.w	r2, lr
 800714e:	4413      	add	r3, r2
 8007150:	0c0a      	lsrs	r2, r1, #16
 8007152:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007156:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800715a:	b29b      	uxth	r3, r3
 800715c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007160:	45c1      	cmp	r9, r8
 8007162:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007166:	f840 3b04 	str.w	r3, [r0], #4
 800716a:	d2e7      	bcs.n	800713c <quorem+0xb0>
 800716c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007170:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007174:	b922      	cbnz	r2, 8007180 <quorem+0xf4>
 8007176:	3b04      	subs	r3, #4
 8007178:	429d      	cmp	r5, r3
 800717a:	461a      	mov	r2, r3
 800717c:	d30a      	bcc.n	8007194 <quorem+0x108>
 800717e:	613c      	str	r4, [r7, #16]
 8007180:	4630      	mov	r0, r6
 8007182:	b003      	add	sp, #12
 8007184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007188:	6812      	ldr	r2, [r2, #0]
 800718a:	3b04      	subs	r3, #4
 800718c:	2a00      	cmp	r2, #0
 800718e:	d1cb      	bne.n	8007128 <quorem+0x9c>
 8007190:	3c01      	subs	r4, #1
 8007192:	e7c6      	b.n	8007122 <quorem+0x96>
 8007194:	6812      	ldr	r2, [r2, #0]
 8007196:	3b04      	subs	r3, #4
 8007198:	2a00      	cmp	r2, #0
 800719a:	d1f0      	bne.n	800717e <quorem+0xf2>
 800719c:	3c01      	subs	r4, #1
 800719e:	e7eb      	b.n	8007178 <quorem+0xec>
 80071a0:	2000      	movs	r0, #0
 80071a2:	e7ee      	b.n	8007182 <quorem+0xf6>
 80071a4:	0000      	movs	r0, r0
	...

080071a8 <_dtoa_r>:
 80071a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ac:	4616      	mov	r6, r2
 80071ae:	461f      	mov	r7, r3
 80071b0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80071b2:	b099      	sub	sp, #100	; 0x64
 80071b4:	4605      	mov	r5, r0
 80071b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80071ba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80071be:	b974      	cbnz	r4, 80071de <_dtoa_r+0x36>
 80071c0:	2010      	movs	r0, #16
 80071c2:	f000 ffff 	bl	80081c4 <malloc>
 80071c6:	4602      	mov	r2, r0
 80071c8:	6268      	str	r0, [r5, #36]	; 0x24
 80071ca:	b920      	cbnz	r0, 80071d6 <_dtoa_r+0x2e>
 80071cc:	21ea      	movs	r1, #234	; 0xea
 80071ce:	4ba8      	ldr	r3, [pc, #672]	; (8007470 <_dtoa_r+0x2c8>)
 80071d0:	48a8      	ldr	r0, [pc, #672]	; (8007474 <_dtoa_r+0x2cc>)
 80071d2:	f001 ffef 	bl	80091b4 <__assert_func>
 80071d6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80071da:	6004      	str	r4, [r0, #0]
 80071dc:	60c4      	str	r4, [r0, #12]
 80071de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80071e0:	6819      	ldr	r1, [r3, #0]
 80071e2:	b151      	cbz	r1, 80071fa <_dtoa_r+0x52>
 80071e4:	685a      	ldr	r2, [r3, #4]
 80071e6:	2301      	movs	r3, #1
 80071e8:	4093      	lsls	r3, r2
 80071ea:	604a      	str	r2, [r1, #4]
 80071ec:	608b      	str	r3, [r1, #8]
 80071ee:	4628      	mov	r0, r5
 80071f0:	f001 f84c 	bl	800828c <_Bfree>
 80071f4:	2200      	movs	r2, #0
 80071f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80071f8:	601a      	str	r2, [r3, #0]
 80071fa:	1e3b      	subs	r3, r7, #0
 80071fc:	bfaf      	iteee	ge
 80071fe:	2300      	movge	r3, #0
 8007200:	2201      	movlt	r2, #1
 8007202:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007206:	9305      	strlt	r3, [sp, #20]
 8007208:	bfa8      	it	ge
 800720a:	f8c8 3000 	strge.w	r3, [r8]
 800720e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007212:	4b99      	ldr	r3, [pc, #612]	; (8007478 <_dtoa_r+0x2d0>)
 8007214:	bfb8      	it	lt
 8007216:	f8c8 2000 	strlt.w	r2, [r8]
 800721a:	ea33 0309 	bics.w	r3, r3, r9
 800721e:	d119      	bne.n	8007254 <_dtoa_r+0xac>
 8007220:	f242 730f 	movw	r3, #9999	; 0x270f
 8007224:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007226:	6013      	str	r3, [r2, #0]
 8007228:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800722c:	4333      	orrs	r3, r6
 800722e:	f000 857f 	beq.w	8007d30 <_dtoa_r+0xb88>
 8007232:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007234:	b953      	cbnz	r3, 800724c <_dtoa_r+0xa4>
 8007236:	4b91      	ldr	r3, [pc, #580]	; (800747c <_dtoa_r+0x2d4>)
 8007238:	e022      	b.n	8007280 <_dtoa_r+0xd8>
 800723a:	4b91      	ldr	r3, [pc, #580]	; (8007480 <_dtoa_r+0x2d8>)
 800723c:	9303      	str	r3, [sp, #12]
 800723e:	3308      	adds	r3, #8
 8007240:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007242:	6013      	str	r3, [r2, #0]
 8007244:	9803      	ldr	r0, [sp, #12]
 8007246:	b019      	add	sp, #100	; 0x64
 8007248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800724c:	4b8b      	ldr	r3, [pc, #556]	; (800747c <_dtoa_r+0x2d4>)
 800724e:	9303      	str	r3, [sp, #12]
 8007250:	3303      	adds	r3, #3
 8007252:	e7f5      	b.n	8007240 <_dtoa_r+0x98>
 8007254:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007258:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800725c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007260:	2200      	movs	r2, #0
 8007262:	2300      	movs	r3, #0
 8007264:	f7f9 fbb8 	bl	80009d8 <__aeabi_dcmpeq>
 8007268:	4680      	mov	r8, r0
 800726a:	b158      	cbz	r0, 8007284 <_dtoa_r+0xdc>
 800726c:	2301      	movs	r3, #1
 800726e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007270:	6013      	str	r3, [r2, #0]
 8007272:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007274:	2b00      	cmp	r3, #0
 8007276:	f000 8558 	beq.w	8007d2a <_dtoa_r+0xb82>
 800727a:	4882      	ldr	r0, [pc, #520]	; (8007484 <_dtoa_r+0x2dc>)
 800727c:	6018      	str	r0, [r3, #0]
 800727e:	1e43      	subs	r3, r0, #1
 8007280:	9303      	str	r3, [sp, #12]
 8007282:	e7df      	b.n	8007244 <_dtoa_r+0x9c>
 8007284:	ab16      	add	r3, sp, #88	; 0x58
 8007286:	9301      	str	r3, [sp, #4]
 8007288:	ab17      	add	r3, sp, #92	; 0x5c
 800728a:	9300      	str	r3, [sp, #0]
 800728c:	4628      	mov	r0, r5
 800728e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007292:	f001 fae1 	bl	8008858 <__d2b>
 8007296:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800729a:	4683      	mov	fp, r0
 800729c:	2c00      	cmp	r4, #0
 800729e:	d07f      	beq.n	80073a0 <_dtoa_r+0x1f8>
 80072a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80072a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072a6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80072aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072ae:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80072b2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80072b6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80072ba:	2200      	movs	r2, #0
 80072bc:	4b72      	ldr	r3, [pc, #456]	; (8007488 <_dtoa_r+0x2e0>)
 80072be:	f7f8 ff6b 	bl	8000198 <__aeabi_dsub>
 80072c2:	a365      	add	r3, pc, #404	; (adr r3, 8007458 <_dtoa_r+0x2b0>)
 80072c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c8:	f7f9 f91e 	bl	8000508 <__aeabi_dmul>
 80072cc:	a364      	add	r3, pc, #400	; (adr r3, 8007460 <_dtoa_r+0x2b8>)
 80072ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d2:	f7f8 ff63 	bl	800019c <__adddf3>
 80072d6:	4606      	mov	r6, r0
 80072d8:	4620      	mov	r0, r4
 80072da:	460f      	mov	r7, r1
 80072dc:	f7f9 f8aa 	bl	8000434 <__aeabi_i2d>
 80072e0:	a361      	add	r3, pc, #388	; (adr r3, 8007468 <_dtoa_r+0x2c0>)
 80072e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e6:	f7f9 f90f 	bl	8000508 <__aeabi_dmul>
 80072ea:	4602      	mov	r2, r0
 80072ec:	460b      	mov	r3, r1
 80072ee:	4630      	mov	r0, r6
 80072f0:	4639      	mov	r1, r7
 80072f2:	f7f8 ff53 	bl	800019c <__adddf3>
 80072f6:	4606      	mov	r6, r0
 80072f8:	460f      	mov	r7, r1
 80072fa:	f7f9 fbb5 	bl	8000a68 <__aeabi_d2iz>
 80072fe:	2200      	movs	r2, #0
 8007300:	4682      	mov	sl, r0
 8007302:	2300      	movs	r3, #0
 8007304:	4630      	mov	r0, r6
 8007306:	4639      	mov	r1, r7
 8007308:	f7f9 fb70 	bl	80009ec <__aeabi_dcmplt>
 800730c:	b148      	cbz	r0, 8007322 <_dtoa_r+0x17a>
 800730e:	4650      	mov	r0, sl
 8007310:	f7f9 f890 	bl	8000434 <__aeabi_i2d>
 8007314:	4632      	mov	r2, r6
 8007316:	463b      	mov	r3, r7
 8007318:	f7f9 fb5e 	bl	80009d8 <__aeabi_dcmpeq>
 800731c:	b908      	cbnz	r0, 8007322 <_dtoa_r+0x17a>
 800731e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007322:	f1ba 0f16 	cmp.w	sl, #22
 8007326:	d858      	bhi.n	80073da <_dtoa_r+0x232>
 8007328:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800732c:	4b57      	ldr	r3, [pc, #348]	; (800748c <_dtoa_r+0x2e4>)
 800732e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007336:	f7f9 fb59 	bl	80009ec <__aeabi_dcmplt>
 800733a:	2800      	cmp	r0, #0
 800733c:	d04f      	beq.n	80073de <_dtoa_r+0x236>
 800733e:	2300      	movs	r3, #0
 8007340:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007344:	930f      	str	r3, [sp, #60]	; 0x3c
 8007346:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007348:	1b1c      	subs	r4, r3, r4
 800734a:	1e63      	subs	r3, r4, #1
 800734c:	9309      	str	r3, [sp, #36]	; 0x24
 800734e:	bf49      	itett	mi
 8007350:	f1c4 0301 	rsbmi	r3, r4, #1
 8007354:	2300      	movpl	r3, #0
 8007356:	9306      	strmi	r3, [sp, #24]
 8007358:	2300      	movmi	r3, #0
 800735a:	bf54      	ite	pl
 800735c:	9306      	strpl	r3, [sp, #24]
 800735e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007360:	f1ba 0f00 	cmp.w	sl, #0
 8007364:	db3d      	blt.n	80073e2 <_dtoa_r+0x23a>
 8007366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007368:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800736c:	4453      	add	r3, sl
 800736e:	9309      	str	r3, [sp, #36]	; 0x24
 8007370:	2300      	movs	r3, #0
 8007372:	930a      	str	r3, [sp, #40]	; 0x28
 8007374:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007376:	2b09      	cmp	r3, #9
 8007378:	f200 808c 	bhi.w	8007494 <_dtoa_r+0x2ec>
 800737c:	2b05      	cmp	r3, #5
 800737e:	bfc4      	itt	gt
 8007380:	3b04      	subgt	r3, #4
 8007382:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007384:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007386:	bfc8      	it	gt
 8007388:	2400      	movgt	r4, #0
 800738a:	f1a3 0302 	sub.w	r3, r3, #2
 800738e:	bfd8      	it	le
 8007390:	2401      	movle	r4, #1
 8007392:	2b03      	cmp	r3, #3
 8007394:	f200 808a 	bhi.w	80074ac <_dtoa_r+0x304>
 8007398:	e8df f003 	tbb	[pc, r3]
 800739c:	5b4d4f2d 	.word	0x5b4d4f2d
 80073a0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80073a4:	441c      	add	r4, r3
 80073a6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80073aa:	2b20      	cmp	r3, #32
 80073ac:	bfc3      	ittte	gt
 80073ae:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80073b2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80073b6:	fa09 f303 	lslgt.w	r3, r9, r3
 80073ba:	f1c3 0320 	rsble	r3, r3, #32
 80073be:	bfc6      	itte	gt
 80073c0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80073c4:	4318      	orrgt	r0, r3
 80073c6:	fa06 f003 	lslle.w	r0, r6, r3
 80073ca:	f7f9 f823 	bl	8000414 <__aeabi_ui2d>
 80073ce:	2301      	movs	r3, #1
 80073d0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80073d4:	3c01      	subs	r4, #1
 80073d6:	9313      	str	r3, [sp, #76]	; 0x4c
 80073d8:	e76f      	b.n	80072ba <_dtoa_r+0x112>
 80073da:	2301      	movs	r3, #1
 80073dc:	e7b2      	b.n	8007344 <_dtoa_r+0x19c>
 80073de:	900f      	str	r0, [sp, #60]	; 0x3c
 80073e0:	e7b1      	b.n	8007346 <_dtoa_r+0x19e>
 80073e2:	9b06      	ldr	r3, [sp, #24]
 80073e4:	eba3 030a 	sub.w	r3, r3, sl
 80073e8:	9306      	str	r3, [sp, #24]
 80073ea:	f1ca 0300 	rsb	r3, sl, #0
 80073ee:	930a      	str	r3, [sp, #40]	; 0x28
 80073f0:	2300      	movs	r3, #0
 80073f2:	930e      	str	r3, [sp, #56]	; 0x38
 80073f4:	e7be      	b.n	8007374 <_dtoa_r+0x1cc>
 80073f6:	2300      	movs	r3, #0
 80073f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80073fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	dc58      	bgt.n	80074b2 <_dtoa_r+0x30a>
 8007400:	f04f 0901 	mov.w	r9, #1
 8007404:	464b      	mov	r3, r9
 8007406:	f8cd 9020 	str.w	r9, [sp, #32]
 800740a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800740e:	2200      	movs	r2, #0
 8007410:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007412:	6042      	str	r2, [r0, #4]
 8007414:	2204      	movs	r2, #4
 8007416:	f102 0614 	add.w	r6, r2, #20
 800741a:	429e      	cmp	r6, r3
 800741c:	6841      	ldr	r1, [r0, #4]
 800741e:	d94e      	bls.n	80074be <_dtoa_r+0x316>
 8007420:	4628      	mov	r0, r5
 8007422:	f000 fef3 	bl	800820c <_Balloc>
 8007426:	9003      	str	r0, [sp, #12]
 8007428:	2800      	cmp	r0, #0
 800742a:	d14c      	bne.n	80074c6 <_dtoa_r+0x31e>
 800742c:	4602      	mov	r2, r0
 800742e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007432:	4b17      	ldr	r3, [pc, #92]	; (8007490 <_dtoa_r+0x2e8>)
 8007434:	e6cc      	b.n	80071d0 <_dtoa_r+0x28>
 8007436:	2301      	movs	r3, #1
 8007438:	e7de      	b.n	80073f8 <_dtoa_r+0x250>
 800743a:	2300      	movs	r3, #0
 800743c:	930b      	str	r3, [sp, #44]	; 0x2c
 800743e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007440:	eb0a 0903 	add.w	r9, sl, r3
 8007444:	f109 0301 	add.w	r3, r9, #1
 8007448:	2b01      	cmp	r3, #1
 800744a:	9308      	str	r3, [sp, #32]
 800744c:	bfb8      	it	lt
 800744e:	2301      	movlt	r3, #1
 8007450:	e7dd      	b.n	800740e <_dtoa_r+0x266>
 8007452:	2301      	movs	r3, #1
 8007454:	e7f2      	b.n	800743c <_dtoa_r+0x294>
 8007456:	bf00      	nop
 8007458:	636f4361 	.word	0x636f4361
 800745c:	3fd287a7 	.word	0x3fd287a7
 8007460:	8b60c8b3 	.word	0x8b60c8b3
 8007464:	3fc68a28 	.word	0x3fc68a28
 8007468:	509f79fb 	.word	0x509f79fb
 800746c:	3fd34413 	.word	0x3fd34413
 8007470:	08009565 	.word	0x08009565
 8007474:	0800957c 	.word	0x0800957c
 8007478:	7ff00000 	.word	0x7ff00000
 800747c:	08009561 	.word	0x08009561
 8007480:	08009558 	.word	0x08009558
 8007484:	08009535 	.word	0x08009535
 8007488:	3ff80000 	.word	0x3ff80000
 800748c:	080096d0 	.word	0x080096d0
 8007490:	080095d7 	.word	0x080095d7
 8007494:	2401      	movs	r4, #1
 8007496:	2300      	movs	r3, #0
 8007498:	940b      	str	r4, [sp, #44]	; 0x2c
 800749a:	9322      	str	r3, [sp, #136]	; 0x88
 800749c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80074a0:	2200      	movs	r2, #0
 80074a2:	2312      	movs	r3, #18
 80074a4:	f8cd 9020 	str.w	r9, [sp, #32]
 80074a8:	9223      	str	r2, [sp, #140]	; 0x8c
 80074aa:	e7b0      	b.n	800740e <_dtoa_r+0x266>
 80074ac:	2301      	movs	r3, #1
 80074ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80074b0:	e7f4      	b.n	800749c <_dtoa_r+0x2f4>
 80074b2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80074b6:	464b      	mov	r3, r9
 80074b8:	f8cd 9020 	str.w	r9, [sp, #32]
 80074bc:	e7a7      	b.n	800740e <_dtoa_r+0x266>
 80074be:	3101      	adds	r1, #1
 80074c0:	6041      	str	r1, [r0, #4]
 80074c2:	0052      	lsls	r2, r2, #1
 80074c4:	e7a7      	b.n	8007416 <_dtoa_r+0x26e>
 80074c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80074c8:	9a03      	ldr	r2, [sp, #12]
 80074ca:	601a      	str	r2, [r3, #0]
 80074cc:	9b08      	ldr	r3, [sp, #32]
 80074ce:	2b0e      	cmp	r3, #14
 80074d0:	f200 80a8 	bhi.w	8007624 <_dtoa_r+0x47c>
 80074d4:	2c00      	cmp	r4, #0
 80074d6:	f000 80a5 	beq.w	8007624 <_dtoa_r+0x47c>
 80074da:	f1ba 0f00 	cmp.w	sl, #0
 80074de:	dd34      	ble.n	800754a <_dtoa_r+0x3a2>
 80074e0:	4a9a      	ldr	r2, [pc, #616]	; (800774c <_dtoa_r+0x5a4>)
 80074e2:	f00a 030f 	and.w	r3, sl, #15
 80074e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80074ea:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80074ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80074f6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80074fa:	d016      	beq.n	800752a <_dtoa_r+0x382>
 80074fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007500:	4b93      	ldr	r3, [pc, #588]	; (8007750 <_dtoa_r+0x5a8>)
 8007502:	2703      	movs	r7, #3
 8007504:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007508:	f7f9 f928 	bl	800075c <__aeabi_ddiv>
 800750c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007510:	f004 040f 	and.w	r4, r4, #15
 8007514:	4e8e      	ldr	r6, [pc, #568]	; (8007750 <_dtoa_r+0x5a8>)
 8007516:	b954      	cbnz	r4, 800752e <_dtoa_r+0x386>
 8007518:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800751c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007520:	f7f9 f91c 	bl	800075c <__aeabi_ddiv>
 8007524:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007528:	e029      	b.n	800757e <_dtoa_r+0x3d6>
 800752a:	2702      	movs	r7, #2
 800752c:	e7f2      	b.n	8007514 <_dtoa_r+0x36c>
 800752e:	07e1      	lsls	r1, r4, #31
 8007530:	d508      	bpl.n	8007544 <_dtoa_r+0x39c>
 8007532:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007536:	e9d6 2300 	ldrd	r2, r3, [r6]
 800753a:	f7f8 ffe5 	bl	8000508 <__aeabi_dmul>
 800753e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007542:	3701      	adds	r7, #1
 8007544:	1064      	asrs	r4, r4, #1
 8007546:	3608      	adds	r6, #8
 8007548:	e7e5      	b.n	8007516 <_dtoa_r+0x36e>
 800754a:	f000 80a5 	beq.w	8007698 <_dtoa_r+0x4f0>
 800754e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007552:	f1ca 0400 	rsb	r4, sl, #0
 8007556:	4b7d      	ldr	r3, [pc, #500]	; (800774c <_dtoa_r+0x5a4>)
 8007558:	f004 020f 	and.w	r2, r4, #15
 800755c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007564:	f7f8 ffd0 	bl	8000508 <__aeabi_dmul>
 8007568:	2702      	movs	r7, #2
 800756a:	2300      	movs	r3, #0
 800756c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007570:	4e77      	ldr	r6, [pc, #476]	; (8007750 <_dtoa_r+0x5a8>)
 8007572:	1124      	asrs	r4, r4, #4
 8007574:	2c00      	cmp	r4, #0
 8007576:	f040 8084 	bne.w	8007682 <_dtoa_r+0x4da>
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1d2      	bne.n	8007524 <_dtoa_r+0x37c>
 800757e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007580:	2b00      	cmp	r3, #0
 8007582:	f000 808b 	beq.w	800769c <_dtoa_r+0x4f4>
 8007586:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800758a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800758e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007592:	2200      	movs	r2, #0
 8007594:	4b6f      	ldr	r3, [pc, #444]	; (8007754 <_dtoa_r+0x5ac>)
 8007596:	f7f9 fa29 	bl	80009ec <__aeabi_dcmplt>
 800759a:	2800      	cmp	r0, #0
 800759c:	d07e      	beq.n	800769c <_dtoa_r+0x4f4>
 800759e:	9b08      	ldr	r3, [sp, #32]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d07b      	beq.n	800769c <_dtoa_r+0x4f4>
 80075a4:	f1b9 0f00 	cmp.w	r9, #0
 80075a8:	dd38      	ble.n	800761c <_dtoa_r+0x474>
 80075aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80075ae:	2200      	movs	r2, #0
 80075b0:	4b69      	ldr	r3, [pc, #420]	; (8007758 <_dtoa_r+0x5b0>)
 80075b2:	f7f8 ffa9 	bl	8000508 <__aeabi_dmul>
 80075b6:	464c      	mov	r4, r9
 80075b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075bc:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 80075c0:	3701      	adds	r7, #1
 80075c2:	4638      	mov	r0, r7
 80075c4:	f7f8 ff36 	bl	8000434 <__aeabi_i2d>
 80075c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075cc:	f7f8 ff9c 	bl	8000508 <__aeabi_dmul>
 80075d0:	2200      	movs	r2, #0
 80075d2:	4b62      	ldr	r3, [pc, #392]	; (800775c <_dtoa_r+0x5b4>)
 80075d4:	f7f8 fde2 	bl	800019c <__adddf3>
 80075d8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80075dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80075e0:	9611      	str	r6, [sp, #68]	; 0x44
 80075e2:	2c00      	cmp	r4, #0
 80075e4:	d15d      	bne.n	80076a2 <_dtoa_r+0x4fa>
 80075e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075ea:	2200      	movs	r2, #0
 80075ec:	4b5c      	ldr	r3, [pc, #368]	; (8007760 <_dtoa_r+0x5b8>)
 80075ee:	f7f8 fdd3 	bl	8000198 <__aeabi_dsub>
 80075f2:	4602      	mov	r2, r0
 80075f4:	460b      	mov	r3, r1
 80075f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80075fa:	4633      	mov	r3, r6
 80075fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80075fe:	f7f9 fa13 	bl	8000a28 <__aeabi_dcmpgt>
 8007602:	2800      	cmp	r0, #0
 8007604:	f040 829c 	bne.w	8007b40 <_dtoa_r+0x998>
 8007608:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800760c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800760e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007612:	f7f9 f9eb 	bl	80009ec <__aeabi_dcmplt>
 8007616:	2800      	cmp	r0, #0
 8007618:	f040 8290 	bne.w	8007b3c <_dtoa_r+0x994>
 800761c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007620:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007624:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007626:	2b00      	cmp	r3, #0
 8007628:	f2c0 8152 	blt.w	80078d0 <_dtoa_r+0x728>
 800762c:	f1ba 0f0e 	cmp.w	sl, #14
 8007630:	f300 814e 	bgt.w	80078d0 <_dtoa_r+0x728>
 8007634:	4b45      	ldr	r3, [pc, #276]	; (800774c <_dtoa_r+0x5a4>)
 8007636:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800763a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800763e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007642:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007644:	2b00      	cmp	r3, #0
 8007646:	f280 80db 	bge.w	8007800 <_dtoa_r+0x658>
 800764a:	9b08      	ldr	r3, [sp, #32]
 800764c:	2b00      	cmp	r3, #0
 800764e:	f300 80d7 	bgt.w	8007800 <_dtoa_r+0x658>
 8007652:	f040 8272 	bne.w	8007b3a <_dtoa_r+0x992>
 8007656:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800765a:	2200      	movs	r2, #0
 800765c:	4b40      	ldr	r3, [pc, #256]	; (8007760 <_dtoa_r+0x5b8>)
 800765e:	f7f8 ff53 	bl	8000508 <__aeabi_dmul>
 8007662:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007666:	f7f9 f9d5 	bl	8000a14 <__aeabi_dcmpge>
 800766a:	9c08      	ldr	r4, [sp, #32]
 800766c:	4626      	mov	r6, r4
 800766e:	2800      	cmp	r0, #0
 8007670:	f040 8248 	bne.w	8007b04 <_dtoa_r+0x95c>
 8007674:	2331      	movs	r3, #49	; 0x31
 8007676:	9f03      	ldr	r7, [sp, #12]
 8007678:	f10a 0a01 	add.w	sl, sl, #1
 800767c:	f807 3b01 	strb.w	r3, [r7], #1
 8007680:	e244      	b.n	8007b0c <_dtoa_r+0x964>
 8007682:	07e2      	lsls	r2, r4, #31
 8007684:	d505      	bpl.n	8007692 <_dtoa_r+0x4ea>
 8007686:	e9d6 2300 	ldrd	r2, r3, [r6]
 800768a:	f7f8 ff3d 	bl	8000508 <__aeabi_dmul>
 800768e:	2301      	movs	r3, #1
 8007690:	3701      	adds	r7, #1
 8007692:	1064      	asrs	r4, r4, #1
 8007694:	3608      	adds	r6, #8
 8007696:	e76d      	b.n	8007574 <_dtoa_r+0x3cc>
 8007698:	2702      	movs	r7, #2
 800769a:	e770      	b.n	800757e <_dtoa_r+0x3d6>
 800769c:	46d0      	mov	r8, sl
 800769e:	9c08      	ldr	r4, [sp, #32]
 80076a0:	e78f      	b.n	80075c2 <_dtoa_r+0x41a>
 80076a2:	9903      	ldr	r1, [sp, #12]
 80076a4:	4b29      	ldr	r3, [pc, #164]	; (800774c <_dtoa_r+0x5a4>)
 80076a6:	4421      	add	r1, r4
 80076a8:	9112      	str	r1, [sp, #72]	; 0x48
 80076aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80076ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80076b0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80076b4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80076b8:	2900      	cmp	r1, #0
 80076ba:	d055      	beq.n	8007768 <_dtoa_r+0x5c0>
 80076bc:	2000      	movs	r0, #0
 80076be:	4929      	ldr	r1, [pc, #164]	; (8007764 <_dtoa_r+0x5bc>)
 80076c0:	f7f9 f84c 	bl	800075c <__aeabi_ddiv>
 80076c4:	463b      	mov	r3, r7
 80076c6:	4632      	mov	r2, r6
 80076c8:	f7f8 fd66 	bl	8000198 <__aeabi_dsub>
 80076cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80076d0:	9f03      	ldr	r7, [sp, #12]
 80076d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076d6:	f7f9 f9c7 	bl	8000a68 <__aeabi_d2iz>
 80076da:	4604      	mov	r4, r0
 80076dc:	f7f8 feaa 	bl	8000434 <__aeabi_i2d>
 80076e0:	4602      	mov	r2, r0
 80076e2:	460b      	mov	r3, r1
 80076e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076e8:	f7f8 fd56 	bl	8000198 <__aeabi_dsub>
 80076ec:	4602      	mov	r2, r0
 80076ee:	460b      	mov	r3, r1
 80076f0:	3430      	adds	r4, #48	; 0x30
 80076f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80076f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80076fa:	f807 4b01 	strb.w	r4, [r7], #1
 80076fe:	f7f9 f975 	bl	80009ec <__aeabi_dcmplt>
 8007702:	2800      	cmp	r0, #0
 8007704:	d174      	bne.n	80077f0 <_dtoa_r+0x648>
 8007706:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800770a:	2000      	movs	r0, #0
 800770c:	4911      	ldr	r1, [pc, #68]	; (8007754 <_dtoa_r+0x5ac>)
 800770e:	f7f8 fd43 	bl	8000198 <__aeabi_dsub>
 8007712:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007716:	f7f9 f969 	bl	80009ec <__aeabi_dcmplt>
 800771a:	2800      	cmp	r0, #0
 800771c:	f040 80b7 	bne.w	800788e <_dtoa_r+0x6e6>
 8007720:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007722:	429f      	cmp	r7, r3
 8007724:	f43f af7a 	beq.w	800761c <_dtoa_r+0x474>
 8007728:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800772c:	2200      	movs	r2, #0
 800772e:	4b0a      	ldr	r3, [pc, #40]	; (8007758 <_dtoa_r+0x5b0>)
 8007730:	f7f8 feea 	bl	8000508 <__aeabi_dmul>
 8007734:	2200      	movs	r2, #0
 8007736:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800773a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800773e:	4b06      	ldr	r3, [pc, #24]	; (8007758 <_dtoa_r+0x5b0>)
 8007740:	f7f8 fee2 	bl	8000508 <__aeabi_dmul>
 8007744:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007748:	e7c3      	b.n	80076d2 <_dtoa_r+0x52a>
 800774a:	bf00      	nop
 800774c:	080096d0 	.word	0x080096d0
 8007750:	080096a8 	.word	0x080096a8
 8007754:	3ff00000 	.word	0x3ff00000
 8007758:	40240000 	.word	0x40240000
 800775c:	401c0000 	.word	0x401c0000
 8007760:	40140000 	.word	0x40140000
 8007764:	3fe00000 	.word	0x3fe00000
 8007768:	4630      	mov	r0, r6
 800776a:	4639      	mov	r1, r7
 800776c:	f7f8 fecc 	bl	8000508 <__aeabi_dmul>
 8007770:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007772:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007776:	9c03      	ldr	r4, [sp, #12]
 8007778:	9314      	str	r3, [sp, #80]	; 0x50
 800777a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800777e:	f7f9 f973 	bl	8000a68 <__aeabi_d2iz>
 8007782:	9015      	str	r0, [sp, #84]	; 0x54
 8007784:	f7f8 fe56 	bl	8000434 <__aeabi_i2d>
 8007788:	4602      	mov	r2, r0
 800778a:	460b      	mov	r3, r1
 800778c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007790:	f7f8 fd02 	bl	8000198 <__aeabi_dsub>
 8007794:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007796:	4606      	mov	r6, r0
 8007798:	3330      	adds	r3, #48	; 0x30
 800779a:	f804 3b01 	strb.w	r3, [r4], #1
 800779e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077a0:	460f      	mov	r7, r1
 80077a2:	429c      	cmp	r4, r3
 80077a4:	f04f 0200 	mov.w	r2, #0
 80077a8:	d124      	bne.n	80077f4 <_dtoa_r+0x64c>
 80077aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80077ae:	4bb0      	ldr	r3, [pc, #704]	; (8007a70 <_dtoa_r+0x8c8>)
 80077b0:	f7f8 fcf4 	bl	800019c <__adddf3>
 80077b4:	4602      	mov	r2, r0
 80077b6:	460b      	mov	r3, r1
 80077b8:	4630      	mov	r0, r6
 80077ba:	4639      	mov	r1, r7
 80077bc:	f7f9 f934 	bl	8000a28 <__aeabi_dcmpgt>
 80077c0:	2800      	cmp	r0, #0
 80077c2:	d163      	bne.n	800788c <_dtoa_r+0x6e4>
 80077c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80077c8:	2000      	movs	r0, #0
 80077ca:	49a9      	ldr	r1, [pc, #676]	; (8007a70 <_dtoa_r+0x8c8>)
 80077cc:	f7f8 fce4 	bl	8000198 <__aeabi_dsub>
 80077d0:	4602      	mov	r2, r0
 80077d2:	460b      	mov	r3, r1
 80077d4:	4630      	mov	r0, r6
 80077d6:	4639      	mov	r1, r7
 80077d8:	f7f9 f908 	bl	80009ec <__aeabi_dcmplt>
 80077dc:	2800      	cmp	r0, #0
 80077de:	f43f af1d 	beq.w	800761c <_dtoa_r+0x474>
 80077e2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80077e4:	1e7b      	subs	r3, r7, #1
 80077e6:	9314      	str	r3, [sp, #80]	; 0x50
 80077e8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80077ec:	2b30      	cmp	r3, #48	; 0x30
 80077ee:	d0f8      	beq.n	80077e2 <_dtoa_r+0x63a>
 80077f0:	46c2      	mov	sl, r8
 80077f2:	e03b      	b.n	800786c <_dtoa_r+0x6c4>
 80077f4:	4b9f      	ldr	r3, [pc, #636]	; (8007a74 <_dtoa_r+0x8cc>)
 80077f6:	f7f8 fe87 	bl	8000508 <__aeabi_dmul>
 80077fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077fe:	e7bc      	b.n	800777a <_dtoa_r+0x5d2>
 8007800:	9f03      	ldr	r7, [sp, #12]
 8007802:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007806:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800780a:	4640      	mov	r0, r8
 800780c:	4649      	mov	r1, r9
 800780e:	f7f8 ffa5 	bl	800075c <__aeabi_ddiv>
 8007812:	f7f9 f929 	bl	8000a68 <__aeabi_d2iz>
 8007816:	4604      	mov	r4, r0
 8007818:	f7f8 fe0c 	bl	8000434 <__aeabi_i2d>
 800781c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007820:	f7f8 fe72 	bl	8000508 <__aeabi_dmul>
 8007824:	4602      	mov	r2, r0
 8007826:	460b      	mov	r3, r1
 8007828:	4640      	mov	r0, r8
 800782a:	4649      	mov	r1, r9
 800782c:	f7f8 fcb4 	bl	8000198 <__aeabi_dsub>
 8007830:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007834:	f807 6b01 	strb.w	r6, [r7], #1
 8007838:	9e03      	ldr	r6, [sp, #12]
 800783a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800783e:	1bbe      	subs	r6, r7, r6
 8007840:	45b4      	cmp	ip, r6
 8007842:	4602      	mov	r2, r0
 8007844:	460b      	mov	r3, r1
 8007846:	d136      	bne.n	80078b6 <_dtoa_r+0x70e>
 8007848:	f7f8 fca8 	bl	800019c <__adddf3>
 800784c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007850:	4680      	mov	r8, r0
 8007852:	4689      	mov	r9, r1
 8007854:	f7f9 f8e8 	bl	8000a28 <__aeabi_dcmpgt>
 8007858:	bb58      	cbnz	r0, 80078b2 <_dtoa_r+0x70a>
 800785a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800785e:	4640      	mov	r0, r8
 8007860:	4649      	mov	r1, r9
 8007862:	f7f9 f8b9 	bl	80009d8 <__aeabi_dcmpeq>
 8007866:	b108      	cbz	r0, 800786c <_dtoa_r+0x6c4>
 8007868:	07e1      	lsls	r1, r4, #31
 800786a:	d422      	bmi.n	80078b2 <_dtoa_r+0x70a>
 800786c:	4628      	mov	r0, r5
 800786e:	4659      	mov	r1, fp
 8007870:	f000 fd0c 	bl	800828c <_Bfree>
 8007874:	2300      	movs	r3, #0
 8007876:	703b      	strb	r3, [r7, #0]
 8007878:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800787a:	f10a 0001 	add.w	r0, sl, #1
 800787e:	6018      	str	r0, [r3, #0]
 8007880:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007882:	2b00      	cmp	r3, #0
 8007884:	f43f acde 	beq.w	8007244 <_dtoa_r+0x9c>
 8007888:	601f      	str	r7, [r3, #0]
 800788a:	e4db      	b.n	8007244 <_dtoa_r+0x9c>
 800788c:	4627      	mov	r7, r4
 800788e:	463b      	mov	r3, r7
 8007890:	461f      	mov	r7, r3
 8007892:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007896:	2a39      	cmp	r2, #57	; 0x39
 8007898:	d107      	bne.n	80078aa <_dtoa_r+0x702>
 800789a:	9a03      	ldr	r2, [sp, #12]
 800789c:	429a      	cmp	r2, r3
 800789e:	d1f7      	bne.n	8007890 <_dtoa_r+0x6e8>
 80078a0:	2230      	movs	r2, #48	; 0x30
 80078a2:	9903      	ldr	r1, [sp, #12]
 80078a4:	f108 0801 	add.w	r8, r8, #1
 80078a8:	700a      	strb	r2, [r1, #0]
 80078aa:	781a      	ldrb	r2, [r3, #0]
 80078ac:	3201      	adds	r2, #1
 80078ae:	701a      	strb	r2, [r3, #0]
 80078b0:	e79e      	b.n	80077f0 <_dtoa_r+0x648>
 80078b2:	46d0      	mov	r8, sl
 80078b4:	e7eb      	b.n	800788e <_dtoa_r+0x6e6>
 80078b6:	2200      	movs	r2, #0
 80078b8:	4b6e      	ldr	r3, [pc, #440]	; (8007a74 <_dtoa_r+0x8cc>)
 80078ba:	f7f8 fe25 	bl	8000508 <__aeabi_dmul>
 80078be:	2200      	movs	r2, #0
 80078c0:	2300      	movs	r3, #0
 80078c2:	4680      	mov	r8, r0
 80078c4:	4689      	mov	r9, r1
 80078c6:	f7f9 f887 	bl	80009d8 <__aeabi_dcmpeq>
 80078ca:	2800      	cmp	r0, #0
 80078cc:	d09b      	beq.n	8007806 <_dtoa_r+0x65e>
 80078ce:	e7cd      	b.n	800786c <_dtoa_r+0x6c4>
 80078d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80078d2:	2a00      	cmp	r2, #0
 80078d4:	f000 80d0 	beq.w	8007a78 <_dtoa_r+0x8d0>
 80078d8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80078da:	2a01      	cmp	r2, #1
 80078dc:	f300 80ae 	bgt.w	8007a3c <_dtoa_r+0x894>
 80078e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80078e2:	2a00      	cmp	r2, #0
 80078e4:	f000 80a6 	beq.w	8007a34 <_dtoa_r+0x88c>
 80078e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80078ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80078ee:	9f06      	ldr	r7, [sp, #24]
 80078f0:	9a06      	ldr	r2, [sp, #24]
 80078f2:	2101      	movs	r1, #1
 80078f4:	441a      	add	r2, r3
 80078f6:	9206      	str	r2, [sp, #24]
 80078f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078fa:	4628      	mov	r0, r5
 80078fc:	441a      	add	r2, r3
 80078fe:	9209      	str	r2, [sp, #36]	; 0x24
 8007900:	f000 fd7a 	bl	80083f8 <__i2b>
 8007904:	4606      	mov	r6, r0
 8007906:	2f00      	cmp	r7, #0
 8007908:	dd0c      	ble.n	8007924 <_dtoa_r+0x77c>
 800790a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800790c:	2b00      	cmp	r3, #0
 800790e:	dd09      	ble.n	8007924 <_dtoa_r+0x77c>
 8007910:	42bb      	cmp	r3, r7
 8007912:	bfa8      	it	ge
 8007914:	463b      	movge	r3, r7
 8007916:	9a06      	ldr	r2, [sp, #24]
 8007918:	1aff      	subs	r7, r7, r3
 800791a:	1ad2      	subs	r2, r2, r3
 800791c:	9206      	str	r2, [sp, #24]
 800791e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	9309      	str	r3, [sp, #36]	; 0x24
 8007924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007926:	b1f3      	cbz	r3, 8007966 <_dtoa_r+0x7be>
 8007928:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800792a:	2b00      	cmp	r3, #0
 800792c:	f000 80a8 	beq.w	8007a80 <_dtoa_r+0x8d8>
 8007930:	2c00      	cmp	r4, #0
 8007932:	dd10      	ble.n	8007956 <_dtoa_r+0x7ae>
 8007934:	4631      	mov	r1, r6
 8007936:	4622      	mov	r2, r4
 8007938:	4628      	mov	r0, r5
 800793a:	f000 fe1b 	bl	8008574 <__pow5mult>
 800793e:	465a      	mov	r2, fp
 8007940:	4601      	mov	r1, r0
 8007942:	4606      	mov	r6, r0
 8007944:	4628      	mov	r0, r5
 8007946:	f000 fd6d 	bl	8008424 <__multiply>
 800794a:	4680      	mov	r8, r0
 800794c:	4659      	mov	r1, fp
 800794e:	4628      	mov	r0, r5
 8007950:	f000 fc9c 	bl	800828c <_Bfree>
 8007954:	46c3      	mov	fp, r8
 8007956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007958:	1b1a      	subs	r2, r3, r4
 800795a:	d004      	beq.n	8007966 <_dtoa_r+0x7be>
 800795c:	4659      	mov	r1, fp
 800795e:	4628      	mov	r0, r5
 8007960:	f000 fe08 	bl	8008574 <__pow5mult>
 8007964:	4683      	mov	fp, r0
 8007966:	2101      	movs	r1, #1
 8007968:	4628      	mov	r0, r5
 800796a:	f000 fd45 	bl	80083f8 <__i2b>
 800796e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007970:	4604      	mov	r4, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	f340 8086 	ble.w	8007a84 <_dtoa_r+0x8dc>
 8007978:	461a      	mov	r2, r3
 800797a:	4601      	mov	r1, r0
 800797c:	4628      	mov	r0, r5
 800797e:	f000 fdf9 	bl	8008574 <__pow5mult>
 8007982:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007984:	4604      	mov	r4, r0
 8007986:	2b01      	cmp	r3, #1
 8007988:	dd7f      	ble.n	8007a8a <_dtoa_r+0x8e2>
 800798a:	f04f 0800 	mov.w	r8, #0
 800798e:	6923      	ldr	r3, [r4, #16]
 8007990:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007994:	6918      	ldr	r0, [r3, #16]
 8007996:	f000 fce1 	bl	800835c <__hi0bits>
 800799a:	f1c0 0020 	rsb	r0, r0, #32
 800799e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079a0:	4418      	add	r0, r3
 80079a2:	f010 001f 	ands.w	r0, r0, #31
 80079a6:	f000 8092 	beq.w	8007ace <_dtoa_r+0x926>
 80079aa:	f1c0 0320 	rsb	r3, r0, #32
 80079ae:	2b04      	cmp	r3, #4
 80079b0:	f340 808a 	ble.w	8007ac8 <_dtoa_r+0x920>
 80079b4:	f1c0 001c 	rsb	r0, r0, #28
 80079b8:	9b06      	ldr	r3, [sp, #24]
 80079ba:	4407      	add	r7, r0
 80079bc:	4403      	add	r3, r0
 80079be:	9306      	str	r3, [sp, #24]
 80079c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079c2:	4403      	add	r3, r0
 80079c4:	9309      	str	r3, [sp, #36]	; 0x24
 80079c6:	9b06      	ldr	r3, [sp, #24]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	dd05      	ble.n	80079d8 <_dtoa_r+0x830>
 80079cc:	4659      	mov	r1, fp
 80079ce:	461a      	mov	r2, r3
 80079d0:	4628      	mov	r0, r5
 80079d2:	f000 fe29 	bl	8008628 <__lshift>
 80079d6:	4683      	mov	fp, r0
 80079d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079da:	2b00      	cmp	r3, #0
 80079dc:	dd05      	ble.n	80079ea <_dtoa_r+0x842>
 80079de:	4621      	mov	r1, r4
 80079e0:	461a      	mov	r2, r3
 80079e2:	4628      	mov	r0, r5
 80079e4:	f000 fe20 	bl	8008628 <__lshift>
 80079e8:	4604      	mov	r4, r0
 80079ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d070      	beq.n	8007ad2 <_dtoa_r+0x92a>
 80079f0:	4621      	mov	r1, r4
 80079f2:	4658      	mov	r0, fp
 80079f4:	f000 fe88 	bl	8008708 <__mcmp>
 80079f8:	2800      	cmp	r0, #0
 80079fa:	da6a      	bge.n	8007ad2 <_dtoa_r+0x92a>
 80079fc:	2300      	movs	r3, #0
 80079fe:	4659      	mov	r1, fp
 8007a00:	220a      	movs	r2, #10
 8007a02:	4628      	mov	r0, r5
 8007a04:	f000 fc64 	bl	80082d0 <__multadd>
 8007a08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a0a:	4683      	mov	fp, r0
 8007a0c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f000 8194 	beq.w	8007d3e <_dtoa_r+0xb96>
 8007a16:	4631      	mov	r1, r6
 8007a18:	2300      	movs	r3, #0
 8007a1a:	220a      	movs	r2, #10
 8007a1c:	4628      	mov	r0, r5
 8007a1e:	f000 fc57 	bl	80082d0 <__multadd>
 8007a22:	f1b9 0f00 	cmp.w	r9, #0
 8007a26:	4606      	mov	r6, r0
 8007a28:	f300 8093 	bgt.w	8007b52 <_dtoa_r+0x9aa>
 8007a2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	dc57      	bgt.n	8007ae2 <_dtoa_r+0x93a>
 8007a32:	e08e      	b.n	8007b52 <_dtoa_r+0x9aa>
 8007a34:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007a36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a3a:	e757      	b.n	80078ec <_dtoa_r+0x744>
 8007a3c:	9b08      	ldr	r3, [sp, #32]
 8007a3e:	1e5c      	subs	r4, r3, #1
 8007a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a42:	42a3      	cmp	r3, r4
 8007a44:	bfb7      	itett	lt
 8007a46:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007a48:	1b1c      	subge	r4, r3, r4
 8007a4a:	1ae2      	sublt	r2, r4, r3
 8007a4c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007a4e:	bfbe      	ittt	lt
 8007a50:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007a52:	189b      	addlt	r3, r3, r2
 8007a54:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007a56:	9b08      	ldr	r3, [sp, #32]
 8007a58:	bfb8      	it	lt
 8007a5a:	2400      	movlt	r4, #0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	bfbb      	ittet	lt
 8007a60:	9b06      	ldrlt	r3, [sp, #24]
 8007a62:	9a08      	ldrlt	r2, [sp, #32]
 8007a64:	9f06      	ldrge	r7, [sp, #24]
 8007a66:	1a9f      	sublt	r7, r3, r2
 8007a68:	bfac      	ite	ge
 8007a6a:	9b08      	ldrge	r3, [sp, #32]
 8007a6c:	2300      	movlt	r3, #0
 8007a6e:	e73f      	b.n	80078f0 <_dtoa_r+0x748>
 8007a70:	3fe00000 	.word	0x3fe00000
 8007a74:	40240000 	.word	0x40240000
 8007a78:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007a7a:	9f06      	ldr	r7, [sp, #24]
 8007a7c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007a7e:	e742      	b.n	8007906 <_dtoa_r+0x75e>
 8007a80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a82:	e76b      	b.n	800795c <_dtoa_r+0x7b4>
 8007a84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	dc19      	bgt.n	8007abe <_dtoa_r+0x916>
 8007a8a:	9b04      	ldr	r3, [sp, #16]
 8007a8c:	b9bb      	cbnz	r3, 8007abe <_dtoa_r+0x916>
 8007a8e:	9b05      	ldr	r3, [sp, #20]
 8007a90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a94:	b99b      	cbnz	r3, 8007abe <_dtoa_r+0x916>
 8007a96:	9b05      	ldr	r3, [sp, #20]
 8007a98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a9c:	0d1b      	lsrs	r3, r3, #20
 8007a9e:	051b      	lsls	r3, r3, #20
 8007aa0:	b183      	cbz	r3, 8007ac4 <_dtoa_r+0x91c>
 8007aa2:	f04f 0801 	mov.w	r8, #1
 8007aa6:	9b06      	ldr	r3, [sp, #24]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	9306      	str	r3, [sp, #24]
 8007aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aae:	3301      	adds	r3, #1
 8007ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ab2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f47f af6a 	bne.w	800798e <_dtoa_r+0x7e6>
 8007aba:	2001      	movs	r0, #1
 8007abc:	e76f      	b.n	800799e <_dtoa_r+0x7f6>
 8007abe:	f04f 0800 	mov.w	r8, #0
 8007ac2:	e7f6      	b.n	8007ab2 <_dtoa_r+0x90a>
 8007ac4:	4698      	mov	r8, r3
 8007ac6:	e7f4      	b.n	8007ab2 <_dtoa_r+0x90a>
 8007ac8:	f43f af7d 	beq.w	80079c6 <_dtoa_r+0x81e>
 8007acc:	4618      	mov	r0, r3
 8007ace:	301c      	adds	r0, #28
 8007ad0:	e772      	b.n	80079b8 <_dtoa_r+0x810>
 8007ad2:	9b08      	ldr	r3, [sp, #32]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	dc36      	bgt.n	8007b46 <_dtoa_r+0x99e>
 8007ad8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	dd33      	ble.n	8007b46 <_dtoa_r+0x99e>
 8007ade:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ae2:	f1b9 0f00 	cmp.w	r9, #0
 8007ae6:	d10d      	bne.n	8007b04 <_dtoa_r+0x95c>
 8007ae8:	4621      	mov	r1, r4
 8007aea:	464b      	mov	r3, r9
 8007aec:	2205      	movs	r2, #5
 8007aee:	4628      	mov	r0, r5
 8007af0:	f000 fbee 	bl	80082d0 <__multadd>
 8007af4:	4601      	mov	r1, r0
 8007af6:	4604      	mov	r4, r0
 8007af8:	4658      	mov	r0, fp
 8007afa:	f000 fe05 	bl	8008708 <__mcmp>
 8007afe:	2800      	cmp	r0, #0
 8007b00:	f73f adb8 	bgt.w	8007674 <_dtoa_r+0x4cc>
 8007b04:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b06:	9f03      	ldr	r7, [sp, #12]
 8007b08:	ea6f 0a03 	mvn.w	sl, r3
 8007b0c:	f04f 0800 	mov.w	r8, #0
 8007b10:	4621      	mov	r1, r4
 8007b12:	4628      	mov	r0, r5
 8007b14:	f000 fbba 	bl	800828c <_Bfree>
 8007b18:	2e00      	cmp	r6, #0
 8007b1a:	f43f aea7 	beq.w	800786c <_dtoa_r+0x6c4>
 8007b1e:	f1b8 0f00 	cmp.w	r8, #0
 8007b22:	d005      	beq.n	8007b30 <_dtoa_r+0x988>
 8007b24:	45b0      	cmp	r8, r6
 8007b26:	d003      	beq.n	8007b30 <_dtoa_r+0x988>
 8007b28:	4641      	mov	r1, r8
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	f000 fbae 	bl	800828c <_Bfree>
 8007b30:	4631      	mov	r1, r6
 8007b32:	4628      	mov	r0, r5
 8007b34:	f000 fbaa 	bl	800828c <_Bfree>
 8007b38:	e698      	b.n	800786c <_dtoa_r+0x6c4>
 8007b3a:	2400      	movs	r4, #0
 8007b3c:	4626      	mov	r6, r4
 8007b3e:	e7e1      	b.n	8007b04 <_dtoa_r+0x95c>
 8007b40:	46c2      	mov	sl, r8
 8007b42:	4626      	mov	r6, r4
 8007b44:	e596      	b.n	8007674 <_dtoa_r+0x4cc>
 8007b46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f000 80fd 	beq.w	8007d4c <_dtoa_r+0xba4>
 8007b52:	2f00      	cmp	r7, #0
 8007b54:	dd05      	ble.n	8007b62 <_dtoa_r+0x9ba>
 8007b56:	4631      	mov	r1, r6
 8007b58:	463a      	mov	r2, r7
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	f000 fd64 	bl	8008628 <__lshift>
 8007b60:	4606      	mov	r6, r0
 8007b62:	f1b8 0f00 	cmp.w	r8, #0
 8007b66:	d05c      	beq.n	8007c22 <_dtoa_r+0xa7a>
 8007b68:	4628      	mov	r0, r5
 8007b6a:	6871      	ldr	r1, [r6, #4]
 8007b6c:	f000 fb4e 	bl	800820c <_Balloc>
 8007b70:	4607      	mov	r7, r0
 8007b72:	b928      	cbnz	r0, 8007b80 <_dtoa_r+0x9d8>
 8007b74:	4602      	mov	r2, r0
 8007b76:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007b7a:	4b7f      	ldr	r3, [pc, #508]	; (8007d78 <_dtoa_r+0xbd0>)
 8007b7c:	f7ff bb28 	b.w	80071d0 <_dtoa_r+0x28>
 8007b80:	6932      	ldr	r2, [r6, #16]
 8007b82:	f106 010c 	add.w	r1, r6, #12
 8007b86:	3202      	adds	r2, #2
 8007b88:	0092      	lsls	r2, r2, #2
 8007b8a:	300c      	adds	r0, #12
 8007b8c:	f000 fb30 	bl	80081f0 <memcpy>
 8007b90:	2201      	movs	r2, #1
 8007b92:	4639      	mov	r1, r7
 8007b94:	4628      	mov	r0, r5
 8007b96:	f000 fd47 	bl	8008628 <__lshift>
 8007b9a:	46b0      	mov	r8, r6
 8007b9c:	4606      	mov	r6, r0
 8007b9e:	9b03      	ldr	r3, [sp, #12]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	9308      	str	r3, [sp, #32]
 8007ba4:	9b03      	ldr	r3, [sp, #12]
 8007ba6:	444b      	add	r3, r9
 8007ba8:	930a      	str	r3, [sp, #40]	; 0x28
 8007baa:	9b04      	ldr	r3, [sp, #16]
 8007bac:	f003 0301 	and.w	r3, r3, #1
 8007bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8007bb2:	9b08      	ldr	r3, [sp, #32]
 8007bb4:	4621      	mov	r1, r4
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	4658      	mov	r0, fp
 8007bba:	9304      	str	r3, [sp, #16]
 8007bbc:	f7ff fa66 	bl	800708c <quorem>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	4641      	mov	r1, r8
 8007bc4:	3330      	adds	r3, #48	; 0x30
 8007bc6:	9006      	str	r0, [sp, #24]
 8007bc8:	4658      	mov	r0, fp
 8007bca:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bcc:	f000 fd9c 	bl	8008708 <__mcmp>
 8007bd0:	4632      	mov	r2, r6
 8007bd2:	4681      	mov	r9, r0
 8007bd4:	4621      	mov	r1, r4
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	f000 fdb2 	bl	8008740 <__mdiff>
 8007bdc:	68c2      	ldr	r2, [r0, #12]
 8007bde:	4607      	mov	r7, r0
 8007be0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007be2:	bb02      	cbnz	r2, 8007c26 <_dtoa_r+0xa7e>
 8007be4:	4601      	mov	r1, r0
 8007be6:	4658      	mov	r0, fp
 8007be8:	f000 fd8e 	bl	8008708 <__mcmp>
 8007bec:	4602      	mov	r2, r0
 8007bee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bf0:	4639      	mov	r1, r7
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007bf8:	f000 fb48 	bl	800828c <_Bfree>
 8007bfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c00:	9f08      	ldr	r7, [sp, #32]
 8007c02:	ea43 0102 	orr.w	r1, r3, r2
 8007c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c08:	430b      	orrs	r3, r1
 8007c0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c0c:	d10d      	bne.n	8007c2a <_dtoa_r+0xa82>
 8007c0e:	2b39      	cmp	r3, #57	; 0x39
 8007c10:	d029      	beq.n	8007c66 <_dtoa_r+0xabe>
 8007c12:	f1b9 0f00 	cmp.w	r9, #0
 8007c16:	dd01      	ble.n	8007c1c <_dtoa_r+0xa74>
 8007c18:	9b06      	ldr	r3, [sp, #24]
 8007c1a:	3331      	adds	r3, #49	; 0x31
 8007c1c:	9a04      	ldr	r2, [sp, #16]
 8007c1e:	7013      	strb	r3, [r2, #0]
 8007c20:	e776      	b.n	8007b10 <_dtoa_r+0x968>
 8007c22:	4630      	mov	r0, r6
 8007c24:	e7b9      	b.n	8007b9a <_dtoa_r+0x9f2>
 8007c26:	2201      	movs	r2, #1
 8007c28:	e7e2      	b.n	8007bf0 <_dtoa_r+0xa48>
 8007c2a:	f1b9 0f00 	cmp.w	r9, #0
 8007c2e:	db06      	blt.n	8007c3e <_dtoa_r+0xa96>
 8007c30:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007c32:	ea41 0909 	orr.w	r9, r1, r9
 8007c36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c38:	ea59 0101 	orrs.w	r1, r9, r1
 8007c3c:	d120      	bne.n	8007c80 <_dtoa_r+0xad8>
 8007c3e:	2a00      	cmp	r2, #0
 8007c40:	ddec      	ble.n	8007c1c <_dtoa_r+0xa74>
 8007c42:	4659      	mov	r1, fp
 8007c44:	2201      	movs	r2, #1
 8007c46:	4628      	mov	r0, r5
 8007c48:	9308      	str	r3, [sp, #32]
 8007c4a:	f000 fced 	bl	8008628 <__lshift>
 8007c4e:	4621      	mov	r1, r4
 8007c50:	4683      	mov	fp, r0
 8007c52:	f000 fd59 	bl	8008708 <__mcmp>
 8007c56:	2800      	cmp	r0, #0
 8007c58:	9b08      	ldr	r3, [sp, #32]
 8007c5a:	dc02      	bgt.n	8007c62 <_dtoa_r+0xaba>
 8007c5c:	d1de      	bne.n	8007c1c <_dtoa_r+0xa74>
 8007c5e:	07da      	lsls	r2, r3, #31
 8007c60:	d5dc      	bpl.n	8007c1c <_dtoa_r+0xa74>
 8007c62:	2b39      	cmp	r3, #57	; 0x39
 8007c64:	d1d8      	bne.n	8007c18 <_dtoa_r+0xa70>
 8007c66:	2339      	movs	r3, #57	; 0x39
 8007c68:	9a04      	ldr	r2, [sp, #16]
 8007c6a:	7013      	strb	r3, [r2, #0]
 8007c6c:	463b      	mov	r3, r7
 8007c6e:	461f      	mov	r7, r3
 8007c70:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007c74:	3b01      	subs	r3, #1
 8007c76:	2a39      	cmp	r2, #57	; 0x39
 8007c78:	d050      	beq.n	8007d1c <_dtoa_r+0xb74>
 8007c7a:	3201      	adds	r2, #1
 8007c7c:	701a      	strb	r2, [r3, #0]
 8007c7e:	e747      	b.n	8007b10 <_dtoa_r+0x968>
 8007c80:	2a00      	cmp	r2, #0
 8007c82:	dd03      	ble.n	8007c8c <_dtoa_r+0xae4>
 8007c84:	2b39      	cmp	r3, #57	; 0x39
 8007c86:	d0ee      	beq.n	8007c66 <_dtoa_r+0xabe>
 8007c88:	3301      	adds	r3, #1
 8007c8a:	e7c7      	b.n	8007c1c <_dtoa_r+0xa74>
 8007c8c:	9a08      	ldr	r2, [sp, #32]
 8007c8e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007c90:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007c94:	428a      	cmp	r2, r1
 8007c96:	d02a      	beq.n	8007cee <_dtoa_r+0xb46>
 8007c98:	4659      	mov	r1, fp
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	220a      	movs	r2, #10
 8007c9e:	4628      	mov	r0, r5
 8007ca0:	f000 fb16 	bl	80082d0 <__multadd>
 8007ca4:	45b0      	cmp	r8, r6
 8007ca6:	4683      	mov	fp, r0
 8007ca8:	f04f 0300 	mov.w	r3, #0
 8007cac:	f04f 020a 	mov.w	r2, #10
 8007cb0:	4641      	mov	r1, r8
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	d107      	bne.n	8007cc6 <_dtoa_r+0xb1e>
 8007cb6:	f000 fb0b 	bl	80082d0 <__multadd>
 8007cba:	4680      	mov	r8, r0
 8007cbc:	4606      	mov	r6, r0
 8007cbe:	9b08      	ldr	r3, [sp, #32]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	9308      	str	r3, [sp, #32]
 8007cc4:	e775      	b.n	8007bb2 <_dtoa_r+0xa0a>
 8007cc6:	f000 fb03 	bl	80082d0 <__multadd>
 8007cca:	4631      	mov	r1, r6
 8007ccc:	4680      	mov	r8, r0
 8007cce:	2300      	movs	r3, #0
 8007cd0:	220a      	movs	r2, #10
 8007cd2:	4628      	mov	r0, r5
 8007cd4:	f000 fafc 	bl	80082d0 <__multadd>
 8007cd8:	4606      	mov	r6, r0
 8007cda:	e7f0      	b.n	8007cbe <_dtoa_r+0xb16>
 8007cdc:	f1b9 0f00 	cmp.w	r9, #0
 8007ce0:	bfcc      	ite	gt
 8007ce2:	464f      	movgt	r7, r9
 8007ce4:	2701      	movle	r7, #1
 8007ce6:	f04f 0800 	mov.w	r8, #0
 8007cea:	9a03      	ldr	r2, [sp, #12]
 8007cec:	4417      	add	r7, r2
 8007cee:	4659      	mov	r1, fp
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	9308      	str	r3, [sp, #32]
 8007cf6:	f000 fc97 	bl	8008628 <__lshift>
 8007cfa:	4621      	mov	r1, r4
 8007cfc:	4683      	mov	fp, r0
 8007cfe:	f000 fd03 	bl	8008708 <__mcmp>
 8007d02:	2800      	cmp	r0, #0
 8007d04:	dcb2      	bgt.n	8007c6c <_dtoa_r+0xac4>
 8007d06:	d102      	bne.n	8007d0e <_dtoa_r+0xb66>
 8007d08:	9b08      	ldr	r3, [sp, #32]
 8007d0a:	07db      	lsls	r3, r3, #31
 8007d0c:	d4ae      	bmi.n	8007c6c <_dtoa_r+0xac4>
 8007d0e:	463b      	mov	r3, r7
 8007d10:	461f      	mov	r7, r3
 8007d12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d16:	2a30      	cmp	r2, #48	; 0x30
 8007d18:	d0fa      	beq.n	8007d10 <_dtoa_r+0xb68>
 8007d1a:	e6f9      	b.n	8007b10 <_dtoa_r+0x968>
 8007d1c:	9a03      	ldr	r2, [sp, #12]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d1a5      	bne.n	8007c6e <_dtoa_r+0xac6>
 8007d22:	2331      	movs	r3, #49	; 0x31
 8007d24:	f10a 0a01 	add.w	sl, sl, #1
 8007d28:	e779      	b.n	8007c1e <_dtoa_r+0xa76>
 8007d2a:	4b14      	ldr	r3, [pc, #80]	; (8007d7c <_dtoa_r+0xbd4>)
 8007d2c:	f7ff baa8 	b.w	8007280 <_dtoa_r+0xd8>
 8007d30:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	f47f aa81 	bne.w	800723a <_dtoa_r+0x92>
 8007d38:	4b11      	ldr	r3, [pc, #68]	; (8007d80 <_dtoa_r+0xbd8>)
 8007d3a:	f7ff baa1 	b.w	8007280 <_dtoa_r+0xd8>
 8007d3e:	f1b9 0f00 	cmp.w	r9, #0
 8007d42:	dc03      	bgt.n	8007d4c <_dtoa_r+0xba4>
 8007d44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	f73f aecb 	bgt.w	8007ae2 <_dtoa_r+0x93a>
 8007d4c:	9f03      	ldr	r7, [sp, #12]
 8007d4e:	4621      	mov	r1, r4
 8007d50:	4658      	mov	r0, fp
 8007d52:	f7ff f99b 	bl	800708c <quorem>
 8007d56:	9a03      	ldr	r2, [sp, #12]
 8007d58:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007d5c:	f807 3b01 	strb.w	r3, [r7], #1
 8007d60:	1aba      	subs	r2, r7, r2
 8007d62:	4591      	cmp	r9, r2
 8007d64:	ddba      	ble.n	8007cdc <_dtoa_r+0xb34>
 8007d66:	4659      	mov	r1, fp
 8007d68:	2300      	movs	r3, #0
 8007d6a:	220a      	movs	r2, #10
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	f000 faaf 	bl	80082d0 <__multadd>
 8007d72:	4683      	mov	fp, r0
 8007d74:	e7eb      	b.n	8007d4e <_dtoa_r+0xba6>
 8007d76:	bf00      	nop
 8007d78:	080095d7 	.word	0x080095d7
 8007d7c:	08009534 	.word	0x08009534
 8007d80:	08009558 	.word	0x08009558

08007d84 <__sflush_r>:
 8007d84:	898a      	ldrh	r2, [r1, #12]
 8007d86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d88:	4605      	mov	r5, r0
 8007d8a:	0710      	lsls	r0, r2, #28
 8007d8c:	460c      	mov	r4, r1
 8007d8e:	d457      	bmi.n	8007e40 <__sflush_r+0xbc>
 8007d90:	684b      	ldr	r3, [r1, #4]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	dc04      	bgt.n	8007da0 <__sflush_r+0x1c>
 8007d96:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	dc01      	bgt.n	8007da0 <__sflush_r+0x1c>
 8007d9c:	2000      	movs	r0, #0
 8007d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007da0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007da2:	2e00      	cmp	r6, #0
 8007da4:	d0fa      	beq.n	8007d9c <__sflush_r+0x18>
 8007da6:	2300      	movs	r3, #0
 8007da8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007dac:	682f      	ldr	r7, [r5, #0]
 8007dae:	602b      	str	r3, [r5, #0]
 8007db0:	d032      	beq.n	8007e18 <__sflush_r+0x94>
 8007db2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007db4:	89a3      	ldrh	r3, [r4, #12]
 8007db6:	075a      	lsls	r2, r3, #29
 8007db8:	d505      	bpl.n	8007dc6 <__sflush_r+0x42>
 8007dba:	6863      	ldr	r3, [r4, #4]
 8007dbc:	1ac0      	subs	r0, r0, r3
 8007dbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007dc0:	b10b      	cbz	r3, 8007dc6 <__sflush_r+0x42>
 8007dc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007dc4:	1ac0      	subs	r0, r0, r3
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	4602      	mov	r2, r0
 8007dca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007dcc:	4628      	mov	r0, r5
 8007dce:	6a21      	ldr	r1, [r4, #32]
 8007dd0:	47b0      	blx	r6
 8007dd2:	1c43      	adds	r3, r0, #1
 8007dd4:	89a3      	ldrh	r3, [r4, #12]
 8007dd6:	d106      	bne.n	8007de6 <__sflush_r+0x62>
 8007dd8:	6829      	ldr	r1, [r5, #0]
 8007dda:	291d      	cmp	r1, #29
 8007ddc:	d82c      	bhi.n	8007e38 <__sflush_r+0xb4>
 8007dde:	4a29      	ldr	r2, [pc, #164]	; (8007e84 <__sflush_r+0x100>)
 8007de0:	40ca      	lsrs	r2, r1
 8007de2:	07d6      	lsls	r6, r2, #31
 8007de4:	d528      	bpl.n	8007e38 <__sflush_r+0xb4>
 8007de6:	2200      	movs	r2, #0
 8007de8:	6062      	str	r2, [r4, #4]
 8007dea:	6922      	ldr	r2, [r4, #16]
 8007dec:	04d9      	lsls	r1, r3, #19
 8007dee:	6022      	str	r2, [r4, #0]
 8007df0:	d504      	bpl.n	8007dfc <__sflush_r+0x78>
 8007df2:	1c42      	adds	r2, r0, #1
 8007df4:	d101      	bne.n	8007dfa <__sflush_r+0x76>
 8007df6:	682b      	ldr	r3, [r5, #0]
 8007df8:	b903      	cbnz	r3, 8007dfc <__sflush_r+0x78>
 8007dfa:	6560      	str	r0, [r4, #84]	; 0x54
 8007dfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dfe:	602f      	str	r7, [r5, #0]
 8007e00:	2900      	cmp	r1, #0
 8007e02:	d0cb      	beq.n	8007d9c <__sflush_r+0x18>
 8007e04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e08:	4299      	cmp	r1, r3
 8007e0a:	d002      	beq.n	8007e12 <__sflush_r+0x8e>
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	f000 fd93 	bl	8008938 <_free_r>
 8007e12:	2000      	movs	r0, #0
 8007e14:	6360      	str	r0, [r4, #52]	; 0x34
 8007e16:	e7c2      	b.n	8007d9e <__sflush_r+0x1a>
 8007e18:	6a21      	ldr	r1, [r4, #32]
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	47b0      	blx	r6
 8007e20:	1c41      	adds	r1, r0, #1
 8007e22:	d1c7      	bne.n	8007db4 <__sflush_r+0x30>
 8007e24:	682b      	ldr	r3, [r5, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d0c4      	beq.n	8007db4 <__sflush_r+0x30>
 8007e2a:	2b1d      	cmp	r3, #29
 8007e2c:	d001      	beq.n	8007e32 <__sflush_r+0xae>
 8007e2e:	2b16      	cmp	r3, #22
 8007e30:	d101      	bne.n	8007e36 <__sflush_r+0xb2>
 8007e32:	602f      	str	r7, [r5, #0]
 8007e34:	e7b2      	b.n	8007d9c <__sflush_r+0x18>
 8007e36:	89a3      	ldrh	r3, [r4, #12]
 8007e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e3c:	81a3      	strh	r3, [r4, #12]
 8007e3e:	e7ae      	b.n	8007d9e <__sflush_r+0x1a>
 8007e40:	690f      	ldr	r7, [r1, #16]
 8007e42:	2f00      	cmp	r7, #0
 8007e44:	d0aa      	beq.n	8007d9c <__sflush_r+0x18>
 8007e46:	0793      	lsls	r3, r2, #30
 8007e48:	bf18      	it	ne
 8007e4a:	2300      	movne	r3, #0
 8007e4c:	680e      	ldr	r6, [r1, #0]
 8007e4e:	bf08      	it	eq
 8007e50:	694b      	ldreq	r3, [r1, #20]
 8007e52:	1bf6      	subs	r6, r6, r7
 8007e54:	600f      	str	r7, [r1, #0]
 8007e56:	608b      	str	r3, [r1, #8]
 8007e58:	2e00      	cmp	r6, #0
 8007e5a:	dd9f      	ble.n	8007d9c <__sflush_r+0x18>
 8007e5c:	4633      	mov	r3, r6
 8007e5e:	463a      	mov	r2, r7
 8007e60:	4628      	mov	r0, r5
 8007e62:	6a21      	ldr	r1, [r4, #32]
 8007e64:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007e68:	47e0      	blx	ip
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	dc06      	bgt.n	8007e7c <__sflush_r+0xf8>
 8007e6e:	89a3      	ldrh	r3, [r4, #12]
 8007e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e78:	81a3      	strh	r3, [r4, #12]
 8007e7a:	e790      	b.n	8007d9e <__sflush_r+0x1a>
 8007e7c:	4407      	add	r7, r0
 8007e7e:	1a36      	subs	r6, r6, r0
 8007e80:	e7ea      	b.n	8007e58 <__sflush_r+0xd4>
 8007e82:	bf00      	nop
 8007e84:	20400001 	.word	0x20400001

08007e88 <_fflush_r>:
 8007e88:	b538      	push	{r3, r4, r5, lr}
 8007e8a:	690b      	ldr	r3, [r1, #16]
 8007e8c:	4605      	mov	r5, r0
 8007e8e:	460c      	mov	r4, r1
 8007e90:	b913      	cbnz	r3, 8007e98 <_fflush_r+0x10>
 8007e92:	2500      	movs	r5, #0
 8007e94:	4628      	mov	r0, r5
 8007e96:	bd38      	pop	{r3, r4, r5, pc}
 8007e98:	b118      	cbz	r0, 8007ea2 <_fflush_r+0x1a>
 8007e9a:	6983      	ldr	r3, [r0, #24]
 8007e9c:	b90b      	cbnz	r3, 8007ea2 <_fflush_r+0x1a>
 8007e9e:	f000 f887 	bl	8007fb0 <__sinit>
 8007ea2:	4b14      	ldr	r3, [pc, #80]	; (8007ef4 <_fflush_r+0x6c>)
 8007ea4:	429c      	cmp	r4, r3
 8007ea6:	d11b      	bne.n	8007ee0 <_fflush_r+0x58>
 8007ea8:	686c      	ldr	r4, [r5, #4]
 8007eaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d0ef      	beq.n	8007e92 <_fflush_r+0xa>
 8007eb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007eb4:	07d0      	lsls	r0, r2, #31
 8007eb6:	d404      	bmi.n	8007ec2 <_fflush_r+0x3a>
 8007eb8:	0599      	lsls	r1, r3, #22
 8007eba:	d402      	bmi.n	8007ec2 <_fflush_r+0x3a>
 8007ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ebe:	f000 f91a 	bl	80080f6 <__retarget_lock_acquire_recursive>
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	4621      	mov	r1, r4
 8007ec6:	f7ff ff5d 	bl	8007d84 <__sflush_r>
 8007eca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ecc:	4605      	mov	r5, r0
 8007ece:	07da      	lsls	r2, r3, #31
 8007ed0:	d4e0      	bmi.n	8007e94 <_fflush_r+0xc>
 8007ed2:	89a3      	ldrh	r3, [r4, #12]
 8007ed4:	059b      	lsls	r3, r3, #22
 8007ed6:	d4dd      	bmi.n	8007e94 <_fflush_r+0xc>
 8007ed8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007eda:	f000 f90d 	bl	80080f8 <__retarget_lock_release_recursive>
 8007ede:	e7d9      	b.n	8007e94 <_fflush_r+0xc>
 8007ee0:	4b05      	ldr	r3, [pc, #20]	; (8007ef8 <_fflush_r+0x70>)
 8007ee2:	429c      	cmp	r4, r3
 8007ee4:	d101      	bne.n	8007eea <_fflush_r+0x62>
 8007ee6:	68ac      	ldr	r4, [r5, #8]
 8007ee8:	e7df      	b.n	8007eaa <_fflush_r+0x22>
 8007eea:	4b04      	ldr	r3, [pc, #16]	; (8007efc <_fflush_r+0x74>)
 8007eec:	429c      	cmp	r4, r3
 8007eee:	bf08      	it	eq
 8007ef0:	68ec      	ldreq	r4, [r5, #12]
 8007ef2:	e7da      	b.n	8007eaa <_fflush_r+0x22>
 8007ef4:	08009608 	.word	0x08009608
 8007ef8:	08009628 	.word	0x08009628
 8007efc:	080095e8 	.word	0x080095e8

08007f00 <std>:
 8007f00:	2300      	movs	r3, #0
 8007f02:	b510      	push	{r4, lr}
 8007f04:	4604      	mov	r4, r0
 8007f06:	e9c0 3300 	strd	r3, r3, [r0]
 8007f0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f0e:	6083      	str	r3, [r0, #8]
 8007f10:	8181      	strh	r1, [r0, #12]
 8007f12:	6643      	str	r3, [r0, #100]	; 0x64
 8007f14:	81c2      	strh	r2, [r0, #14]
 8007f16:	6183      	str	r3, [r0, #24]
 8007f18:	4619      	mov	r1, r3
 8007f1a:	2208      	movs	r2, #8
 8007f1c:	305c      	adds	r0, #92	; 0x5c
 8007f1e:	f7fe facb 	bl	80064b8 <memset>
 8007f22:	4b05      	ldr	r3, [pc, #20]	; (8007f38 <std+0x38>)
 8007f24:	6224      	str	r4, [r4, #32]
 8007f26:	6263      	str	r3, [r4, #36]	; 0x24
 8007f28:	4b04      	ldr	r3, [pc, #16]	; (8007f3c <std+0x3c>)
 8007f2a:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f2c:	4b04      	ldr	r3, [pc, #16]	; (8007f40 <std+0x40>)
 8007f2e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f30:	4b04      	ldr	r3, [pc, #16]	; (8007f44 <std+0x44>)
 8007f32:	6323      	str	r3, [r4, #48]	; 0x30
 8007f34:	bd10      	pop	{r4, pc}
 8007f36:	bf00      	nop
 8007f38:	08009109 	.word	0x08009109
 8007f3c:	0800912b 	.word	0x0800912b
 8007f40:	08009163 	.word	0x08009163
 8007f44:	08009187 	.word	0x08009187

08007f48 <_cleanup_r>:
 8007f48:	4901      	ldr	r1, [pc, #4]	; (8007f50 <_cleanup_r+0x8>)
 8007f4a:	f000 b8af 	b.w	80080ac <_fwalk_reent>
 8007f4e:	bf00      	nop
 8007f50:	08007e89 	.word	0x08007e89

08007f54 <__sfmoreglue>:
 8007f54:	2268      	movs	r2, #104	; 0x68
 8007f56:	b570      	push	{r4, r5, r6, lr}
 8007f58:	1e4d      	subs	r5, r1, #1
 8007f5a:	4355      	muls	r5, r2
 8007f5c:	460e      	mov	r6, r1
 8007f5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007f62:	f000 fd51 	bl	8008a08 <_malloc_r>
 8007f66:	4604      	mov	r4, r0
 8007f68:	b140      	cbz	r0, 8007f7c <__sfmoreglue+0x28>
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	e9c0 1600 	strd	r1, r6, [r0]
 8007f70:	300c      	adds	r0, #12
 8007f72:	60a0      	str	r0, [r4, #8]
 8007f74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007f78:	f7fe fa9e 	bl	80064b8 <memset>
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	bd70      	pop	{r4, r5, r6, pc}

08007f80 <__sfp_lock_acquire>:
 8007f80:	4801      	ldr	r0, [pc, #4]	; (8007f88 <__sfp_lock_acquire+0x8>)
 8007f82:	f000 b8b8 	b.w	80080f6 <__retarget_lock_acquire_recursive>
 8007f86:	bf00      	nop
 8007f88:	200006d5 	.word	0x200006d5

08007f8c <__sfp_lock_release>:
 8007f8c:	4801      	ldr	r0, [pc, #4]	; (8007f94 <__sfp_lock_release+0x8>)
 8007f8e:	f000 b8b3 	b.w	80080f8 <__retarget_lock_release_recursive>
 8007f92:	bf00      	nop
 8007f94:	200006d5 	.word	0x200006d5

08007f98 <__sinit_lock_acquire>:
 8007f98:	4801      	ldr	r0, [pc, #4]	; (8007fa0 <__sinit_lock_acquire+0x8>)
 8007f9a:	f000 b8ac 	b.w	80080f6 <__retarget_lock_acquire_recursive>
 8007f9e:	bf00      	nop
 8007fa0:	200006d6 	.word	0x200006d6

08007fa4 <__sinit_lock_release>:
 8007fa4:	4801      	ldr	r0, [pc, #4]	; (8007fac <__sinit_lock_release+0x8>)
 8007fa6:	f000 b8a7 	b.w	80080f8 <__retarget_lock_release_recursive>
 8007faa:	bf00      	nop
 8007fac:	200006d6 	.word	0x200006d6

08007fb0 <__sinit>:
 8007fb0:	b510      	push	{r4, lr}
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	f7ff fff0 	bl	8007f98 <__sinit_lock_acquire>
 8007fb8:	69a3      	ldr	r3, [r4, #24]
 8007fba:	b11b      	cbz	r3, 8007fc4 <__sinit+0x14>
 8007fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fc0:	f7ff bff0 	b.w	8007fa4 <__sinit_lock_release>
 8007fc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007fc8:	6523      	str	r3, [r4, #80]	; 0x50
 8007fca:	4b13      	ldr	r3, [pc, #76]	; (8008018 <__sinit+0x68>)
 8007fcc:	4a13      	ldr	r2, [pc, #76]	; (800801c <__sinit+0x6c>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	62a2      	str	r2, [r4, #40]	; 0x28
 8007fd2:	42a3      	cmp	r3, r4
 8007fd4:	bf08      	it	eq
 8007fd6:	2301      	moveq	r3, #1
 8007fd8:	4620      	mov	r0, r4
 8007fda:	bf08      	it	eq
 8007fdc:	61a3      	streq	r3, [r4, #24]
 8007fde:	f000 f81f 	bl	8008020 <__sfp>
 8007fe2:	6060      	str	r0, [r4, #4]
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	f000 f81b 	bl	8008020 <__sfp>
 8007fea:	60a0      	str	r0, [r4, #8]
 8007fec:	4620      	mov	r0, r4
 8007fee:	f000 f817 	bl	8008020 <__sfp>
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	2104      	movs	r1, #4
 8007ff6:	60e0      	str	r0, [r4, #12]
 8007ff8:	6860      	ldr	r0, [r4, #4]
 8007ffa:	f7ff ff81 	bl	8007f00 <std>
 8007ffe:	2201      	movs	r2, #1
 8008000:	2109      	movs	r1, #9
 8008002:	68a0      	ldr	r0, [r4, #8]
 8008004:	f7ff ff7c 	bl	8007f00 <std>
 8008008:	2202      	movs	r2, #2
 800800a:	2112      	movs	r1, #18
 800800c:	68e0      	ldr	r0, [r4, #12]
 800800e:	f7ff ff77 	bl	8007f00 <std>
 8008012:	2301      	movs	r3, #1
 8008014:	61a3      	str	r3, [r4, #24]
 8008016:	e7d1      	b.n	8007fbc <__sinit+0xc>
 8008018:	08009520 	.word	0x08009520
 800801c:	08007f49 	.word	0x08007f49

08008020 <__sfp>:
 8008020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008022:	4607      	mov	r7, r0
 8008024:	f7ff ffac 	bl	8007f80 <__sfp_lock_acquire>
 8008028:	4b1e      	ldr	r3, [pc, #120]	; (80080a4 <__sfp+0x84>)
 800802a:	681e      	ldr	r6, [r3, #0]
 800802c:	69b3      	ldr	r3, [r6, #24]
 800802e:	b913      	cbnz	r3, 8008036 <__sfp+0x16>
 8008030:	4630      	mov	r0, r6
 8008032:	f7ff ffbd 	bl	8007fb0 <__sinit>
 8008036:	3648      	adds	r6, #72	; 0x48
 8008038:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800803c:	3b01      	subs	r3, #1
 800803e:	d503      	bpl.n	8008048 <__sfp+0x28>
 8008040:	6833      	ldr	r3, [r6, #0]
 8008042:	b30b      	cbz	r3, 8008088 <__sfp+0x68>
 8008044:	6836      	ldr	r6, [r6, #0]
 8008046:	e7f7      	b.n	8008038 <__sfp+0x18>
 8008048:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800804c:	b9d5      	cbnz	r5, 8008084 <__sfp+0x64>
 800804e:	4b16      	ldr	r3, [pc, #88]	; (80080a8 <__sfp+0x88>)
 8008050:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008054:	60e3      	str	r3, [r4, #12]
 8008056:	6665      	str	r5, [r4, #100]	; 0x64
 8008058:	f000 f84c 	bl	80080f4 <__retarget_lock_init_recursive>
 800805c:	f7ff ff96 	bl	8007f8c <__sfp_lock_release>
 8008060:	2208      	movs	r2, #8
 8008062:	4629      	mov	r1, r5
 8008064:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008068:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800806c:	6025      	str	r5, [r4, #0]
 800806e:	61a5      	str	r5, [r4, #24]
 8008070:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008074:	f7fe fa20 	bl	80064b8 <memset>
 8008078:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800807c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008080:	4620      	mov	r0, r4
 8008082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008084:	3468      	adds	r4, #104	; 0x68
 8008086:	e7d9      	b.n	800803c <__sfp+0x1c>
 8008088:	2104      	movs	r1, #4
 800808a:	4638      	mov	r0, r7
 800808c:	f7ff ff62 	bl	8007f54 <__sfmoreglue>
 8008090:	4604      	mov	r4, r0
 8008092:	6030      	str	r0, [r6, #0]
 8008094:	2800      	cmp	r0, #0
 8008096:	d1d5      	bne.n	8008044 <__sfp+0x24>
 8008098:	f7ff ff78 	bl	8007f8c <__sfp_lock_release>
 800809c:	230c      	movs	r3, #12
 800809e:	603b      	str	r3, [r7, #0]
 80080a0:	e7ee      	b.n	8008080 <__sfp+0x60>
 80080a2:	bf00      	nop
 80080a4:	08009520 	.word	0x08009520
 80080a8:	ffff0001 	.word	0xffff0001

080080ac <_fwalk_reent>:
 80080ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080b0:	4606      	mov	r6, r0
 80080b2:	4688      	mov	r8, r1
 80080b4:	2700      	movs	r7, #0
 80080b6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80080ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080be:	f1b9 0901 	subs.w	r9, r9, #1
 80080c2:	d505      	bpl.n	80080d0 <_fwalk_reent+0x24>
 80080c4:	6824      	ldr	r4, [r4, #0]
 80080c6:	2c00      	cmp	r4, #0
 80080c8:	d1f7      	bne.n	80080ba <_fwalk_reent+0xe>
 80080ca:	4638      	mov	r0, r7
 80080cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080d0:	89ab      	ldrh	r3, [r5, #12]
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d907      	bls.n	80080e6 <_fwalk_reent+0x3a>
 80080d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080da:	3301      	adds	r3, #1
 80080dc:	d003      	beq.n	80080e6 <_fwalk_reent+0x3a>
 80080de:	4629      	mov	r1, r5
 80080e0:	4630      	mov	r0, r6
 80080e2:	47c0      	blx	r8
 80080e4:	4307      	orrs	r7, r0
 80080e6:	3568      	adds	r5, #104	; 0x68
 80080e8:	e7e9      	b.n	80080be <_fwalk_reent+0x12>
	...

080080ec <_localeconv_r>:
 80080ec:	4800      	ldr	r0, [pc, #0]	; (80080f0 <_localeconv_r+0x4>)
 80080ee:	4770      	bx	lr
 80080f0:	20000180 	.word	0x20000180

080080f4 <__retarget_lock_init_recursive>:
 80080f4:	4770      	bx	lr

080080f6 <__retarget_lock_acquire_recursive>:
 80080f6:	4770      	bx	lr

080080f8 <__retarget_lock_release_recursive>:
 80080f8:	4770      	bx	lr

080080fa <__swhatbuf_r>:
 80080fa:	b570      	push	{r4, r5, r6, lr}
 80080fc:	460e      	mov	r6, r1
 80080fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008102:	4614      	mov	r4, r2
 8008104:	2900      	cmp	r1, #0
 8008106:	461d      	mov	r5, r3
 8008108:	b096      	sub	sp, #88	; 0x58
 800810a:	da08      	bge.n	800811e <__swhatbuf_r+0x24>
 800810c:	2200      	movs	r2, #0
 800810e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008112:	602a      	str	r2, [r5, #0]
 8008114:	061a      	lsls	r2, r3, #24
 8008116:	d410      	bmi.n	800813a <__swhatbuf_r+0x40>
 8008118:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800811c:	e00e      	b.n	800813c <__swhatbuf_r+0x42>
 800811e:	466a      	mov	r2, sp
 8008120:	f001 f888 	bl	8009234 <_fstat_r>
 8008124:	2800      	cmp	r0, #0
 8008126:	dbf1      	blt.n	800810c <__swhatbuf_r+0x12>
 8008128:	9a01      	ldr	r2, [sp, #4]
 800812a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800812e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008132:	425a      	negs	r2, r3
 8008134:	415a      	adcs	r2, r3
 8008136:	602a      	str	r2, [r5, #0]
 8008138:	e7ee      	b.n	8008118 <__swhatbuf_r+0x1e>
 800813a:	2340      	movs	r3, #64	; 0x40
 800813c:	2000      	movs	r0, #0
 800813e:	6023      	str	r3, [r4, #0]
 8008140:	b016      	add	sp, #88	; 0x58
 8008142:	bd70      	pop	{r4, r5, r6, pc}

08008144 <__smakebuf_r>:
 8008144:	898b      	ldrh	r3, [r1, #12]
 8008146:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008148:	079d      	lsls	r5, r3, #30
 800814a:	4606      	mov	r6, r0
 800814c:	460c      	mov	r4, r1
 800814e:	d507      	bpl.n	8008160 <__smakebuf_r+0x1c>
 8008150:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008154:	6023      	str	r3, [r4, #0]
 8008156:	6123      	str	r3, [r4, #16]
 8008158:	2301      	movs	r3, #1
 800815a:	6163      	str	r3, [r4, #20]
 800815c:	b002      	add	sp, #8
 800815e:	bd70      	pop	{r4, r5, r6, pc}
 8008160:	466a      	mov	r2, sp
 8008162:	ab01      	add	r3, sp, #4
 8008164:	f7ff ffc9 	bl	80080fa <__swhatbuf_r>
 8008168:	9900      	ldr	r1, [sp, #0]
 800816a:	4605      	mov	r5, r0
 800816c:	4630      	mov	r0, r6
 800816e:	f000 fc4b 	bl	8008a08 <_malloc_r>
 8008172:	b948      	cbnz	r0, 8008188 <__smakebuf_r+0x44>
 8008174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008178:	059a      	lsls	r2, r3, #22
 800817a:	d4ef      	bmi.n	800815c <__smakebuf_r+0x18>
 800817c:	f023 0303 	bic.w	r3, r3, #3
 8008180:	f043 0302 	orr.w	r3, r3, #2
 8008184:	81a3      	strh	r3, [r4, #12]
 8008186:	e7e3      	b.n	8008150 <__smakebuf_r+0xc>
 8008188:	4b0d      	ldr	r3, [pc, #52]	; (80081c0 <__smakebuf_r+0x7c>)
 800818a:	62b3      	str	r3, [r6, #40]	; 0x28
 800818c:	89a3      	ldrh	r3, [r4, #12]
 800818e:	6020      	str	r0, [r4, #0]
 8008190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008194:	81a3      	strh	r3, [r4, #12]
 8008196:	9b00      	ldr	r3, [sp, #0]
 8008198:	6120      	str	r0, [r4, #16]
 800819a:	6163      	str	r3, [r4, #20]
 800819c:	9b01      	ldr	r3, [sp, #4]
 800819e:	b15b      	cbz	r3, 80081b8 <__smakebuf_r+0x74>
 80081a0:	4630      	mov	r0, r6
 80081a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081a6:	f001 f857 	bl	8009258 <_isatty_r>
 80081aa:	b128      	cbz	r0, 80081b8 <__smakebuf_r+0x74>
 80081ac:	89a3      	ldrh	r3, [r4, #12]
 80081ae:	f023 0303 	bic.w	r3, r3, #3
 80081b2:	f043 0301 	orr.w	r3, r3, #1
 80081b6:	81a3      	strh	r3, [r4, #12]
 80081b8:	89a0      	ldrh	r0, [r4, #12]
 80081ba:	4305      	orrs	r5, r0
 80081bc:	81a5      	strh	r5, [r4, #12]
 80081be:	e7cd      	b.n	800815c <__smakebuf_r+0x18>
 80081c0:	08007f49 	.word	0x08007f49

080081c4 <malloc>:
 80081c4:	4b02      	ldr	r3, [pc, #8]	; (80081d0 <malloc+0xc>)
 80081c6:	4601      	mov	r1, r0
 80081c8:	6818      	ldr	r0, [r3, #0]
 80081ca:	f000 bc1d 	b.w	8008a08 <_malloc_r>
 80081ce:	bf00      	nop
 80081d0:	2000002c 	.word	0x2000002c

080081d4 <memchr>:
 80081d4:	4603      	mov	r3, r0
 80081d6:	b510      	push	{r4, lr}
 80081d8:	b2c9      	uxtb	r1, r1
 80081da:	4402      	add	r2, r0
 80081dc:	4293      	cmp	r3, r2
 80081de:	4618      	mov	r0, r3
 80081e0:	d101      	bne.n	80081e6 <memchr+0x12>
 80081e2:	2000      	movs	r0, #0
 80081e4:	e003      	b.n	80081ee <memchr+0x1a>
 80081e6:	7804      	ldrb	r4, [r0, #0]
 80081e8:	3301      	adds	r3, #1
 80081ea:	428c      	cmp	r4, r1
 80081ec:	d1f6      	bne.n	80081dc <memchr+0x8>
 80081ee:	bd10      	pop	{r4, pc}

080081f0 <memcpy>:
 80081f0:	440a      	add	r2, r1
 80081f2:	4291      	cmp	r1, r2
 80081f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80081f8:	d100      	bne.n	80081fc <memcpy+0xc>
 80081fa:	4770      	bx	lr
 80081fc:	b510      	push	{r4, lr}
 80081fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008202:	4291      	cmp	r1, r2
 8008204:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008208:	d1f9      	bne.n	80081fe <memcpy+0xe>
 800820a:	bd10      	pop	{r4, pc}

0800820c <_Balloc>:
 800820c:	b570      	push	{r4, r5, r6, lr}
 800820e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008210:	4604      	mov	r4, r0
 8008212:	460d      	mov	r5, r1
 8008214:	b976      	cbnz	r6, 8008234 <_Balloc+0x28>
 8008216:	2010      	movs	r0, #16
 8008218:	f7ff ffd4 	bl	80081c4 <malloc>
 800821c:	4602      	mov	r2, r0
 800821e:	6260      	str	r0, [r4, #36]	; 0x24
 8008220:	b920      	cbnz	r0, 800822c <_Balloc+0x20>
 8008222:	2166      	movs	r1, #102	; 0x66
 8008224:	4b17      	ldr	r3, [pc, #92]	; (8008284 <_Balloc+0x78>)
 8008226:	4818      	ldr	r0, [pc, #96]	; (8008288 <_Balloc+0x7c>)
 8008228:	f000 ffc4 	bl	80091b4 <__assert_func>
 800822c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008230:	6006      	str	r6, [r0, #0]
 8008232:	60c6      	str	r6, [r0, #12]
 8008234:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008236:	68f3      	ldr	r3, [r6, #12]
 8008238:	b183      	cbz	r3, 800825c <_Balloc+0x50>
 800823a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008242:	b9b8      	cbnz	r0, 8008274 <_Balloc+0x68>
 8008244:	2101      	movs	r1, #1
 8008246:	fa01 f605 	lsl.w	r6, r1, r5
 800824a:	1d72      	adds	r2, r6, #5
 800824c:	4620      	mov	r0, r4
 800824e:	0092      	lsls	r2, r2, #2
 8008250:	f000 fb5e 	bl	8008910 <_calloc_r>
 8008254:	b160      	cbz	r0, 8008270 <_Balloc+0x64>
 8008256:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800825a:	e00e      	b.n	800827a <_Balloc+0x6e>
 800825c:	2221      	movs	r2, #33	; 0x21
 800825e:	2104      	movs	r1, #4
 8008260:	4620      	mov	r0, r4
 8008262:	f000 fb55 	bl	8008910 <_calloc_r>
 8008266:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008268:	60f0      	str	r0, [r6, #12]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1e4      	bne.n	800823a <_Balloc+0x2e>
 8008270:	2000      	movs	r0, #0
 8008272:	bd70      	pop	{r4, r5, r6, pc}
 8008274:	6802      	ldr	r2, [r0, #0]
 8008276:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800827a:	2300      	movs	r3, #0
 800827c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008280:	e7f7      	b.n	8008272 <_Balloc+0x66>
 8008282:	bf00      	nop
 8008284:	08009565 	.word	0x08009565
 8008288:	08009648 	.word	0x08009648

0800828c <_Bfree>:
 800828c:	b570      	push	{r4, r5, r6, lr}
 800828e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008290:	4605      	mov	r5, r0
 8008292:	460c      	mov	r4, r1
 8008294:	b976      	cbnz	r6, 80082b4 <_Bfree+0x28>
 8008296:	2010      	movs	r0, #16
 8008298:	f7ff ff94 	bl	80081c4 <malloc>
 800829c:	4602      	mov	r2, r0
 800829e:	6268      	str	r0, [r5, #36]	; 0x24
 80082a0:	b920      	cbnz	r0, 80082ac <_Bfree+0x20>
 80082a2:	218a      	movs	r1, #138	; 0x8a
 80082a4:	4b08      	ldr	r3, [pc, #32]	; (80082c8 <_Bfree+0x3c>)
 80082a6:	4809      	ldr	r0, [pc, #36]	; (80082cc <_Bfree+0x40>)
 80082a8:	f000 ff84 	bl	80091b4 <__assert_func>
 80082ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082b0:	6006      	str	r6, [r0, #0]
 80082b2:	60c6      	str	r6, [r0, #12]
 80082b4:	b13c      	cbz	r4, 80082c6 <_Bfree+0x3a>
 80082b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80082b8:	6862      	ldr	r2, [r4, #4]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80082c0:	6021      	str	r1, [r4, #0]
 80082c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80082c6:	bd70      	pop	{r4, r5, r6, pc}
 80082c8:	08009565 	.word	0x08009565
 80082cc:	08009648 	.word	0x08009648

080082d0 <__multadd>:
 80082d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082d4:	4607      	mov	r7, r0
 80082d6:	460c      	mov	r4, r1
 80082d8:	461e      	mov	r6, r3
 80082da:	2000      	movs	r0, #0
 80082dc:	690d      	ldr	r5, [r1, #16]
 80082de:	f101 0c14 	add.w	ip, r1, #20
 80082e2:	f8dc 3000 	ldr.w	r3, [ip]
 80082e6:	3001      	adds	r0, #1
 80082e8:	b299      	uxth	r1, r3
 80082ea:	fb02 6101 	mla	r1, r2, r1, r6
 80082ee:	0c1e      	lsrs	r6, r3, #16
 80082f0:	0c0b      	lsrs	r3, r1, #16
 80082f2:	fb02 3306 	mla	r3, r2, r6, r3
 80082f6:	b289      	uxth	r1, r1
 80082f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80082fc:	4285      	cmp	r5, r0
 80082fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008302:	f84c 1b04 	str.w	r1, [ip], #4
 8008306:	dcec      	bgt.n	80082e2 <__multadd+0x12>
 8008308:	b30e      	cbz	r6, 800834e <__multadd+0x7e>
 800830a:	68a3      	ldr	r3, [r4, #8]
 800830c:	42ab      	cmp	r3, r5
 800830e:	dc19      	bgt.n	8008344 <__multadd+0x74>
 8008310:	6861      	ldr	r1, [r4, #4]
 8008312:	4638      	mov	r0, r7
 8008314:	3101      	adds	r1, #1
 8008316:	f7ff ff79 	bl	800820c <_Balloc>
 800831a:	4680      	mov	r8, r0
 800831c:	b928      	cbnz	r0, 800832a <__multadd+0x5a>
 800831e:	4602      	mov	r2, r0
 8008320:	21b5      	movs	r1, #181	; 0xb5
 8008322:	4b0c      	ldr	r3, [pc, #48]	; (8008354 <__multadd+0x84>)
 8008324:	480c      	ldr	r0, [pc, #48]	; (8008358 <__multadd+0x88>)
 8008326:	f000 ff45 	bl	80091b4 <__assert_func>
 800832a:	6922      	ldr	r2, [r4, #16]
 800832c:	f104 010c 	add.w	r1, r4, #12
 8008330:	3202      	adds	r2, #2
 8008332:	0092      	lsls	r2, r2, #2
 8008334:	300c      	adds	r0, #12
 8008336:	f7ff ff5b 	bl	80081f0 <memcpy>
 800833a:	4621      	mov	r1, r4
 800833c:	4638      	mov	r0, r7
 800833e:	f7ff ffa5 	bl	800828c <_Bfree>
 8008342:	4644      	mov	r4, r8
 8008344:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008348:	3501      	adds	r5, #1
 800834a:	615e      	str	r6, [r3, #20]
 800834c:	6125      	str	r5, [r4, #16]
 800834e:	4620      	mov	r0, r4
 8008350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008354:	080095d7 	.word	0x080095d7
 8008358:	08009648 	.word	0x08009648

0800835c <__hi0bits>:
 800835c:	0c02      	lsrs	r2, r0, #16
 800835e:	0412      	lsls	r2, r2, #16
 8008360:	4603      	mov	r3, r0
 8008362:	b9ca      	cbnz	r2, 8008398 <__hi0bits+0x3c>
 8008364:	0403      	lsls	r3, r0, #16
 8008366:	2010      	movs	r0, #16
 8008368:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800836c:	bf04      	itt	eq
 800836e:	021b      	lsleq	r3, r3, #8
 8008370:	3008      	addeq	r0, #8
 8008372:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008376:	bf04      	itt	eq
 8008378:	011b      	lsleq	r3, r3, #4
 800837a:	3004      	addeq	r0, #4
 800837c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008380:	bf04      	itt	eq
 8008382:	009b      	lsleq	r3, r3, #2
 8008384:	3002      	addeq	r0, #2
 8008386:	2b00      	cmp	r3, #0
 8008388:	db05      	blt.n	8008396 <__hi0bits+0x3a>
 800838a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800838e:	f100 0001 	add.w	r0, r0, #1
 8008392:	bf08      	it	eq
 8008394:	2020      	moveq	r0, #32
 8008396:	4770      	bx	lr
 8008398:	2000      	movs	r0, #0
 800839a:	e7e5      	b.n	8008368 <__hi0bits+0xc>

0800839c <__lo0bits>:
 800839c:	6803      	ldr	r3, [r0, #0]
 800839e:	4602      	mov	r2, r0
 80083a0:	f013 0007 	ands.w	r0, r3, #7
 80083a4:	d00b      	beq.n	80083be <__lo0bits+0x22>
 80083a6:	07d9      	lsls	r1, r3, #31
 80083a8:	d421      	bmi.n	80083ee <__lo0bits+0x52>
 80083aa:	0798      	lsls	r0, r3, #30
 80083ac:	bf49      	itett	mi
 80083ae:	085b      	lsrmi	r3, r3, #1
 80083b0:	089b      	lsrpl	r3, r3, #2
 80083b2:	2001      	movmi	r0, #1
 80083b4:	6013      	strmi	r3, [r2, #0]
 80083b6:	bf5c      	itt	pl
 80083b8:	2002      	movpl	r0, #2
 80083ba:	6013      	strpl	r3, [r2, #0]
 80083bc:	4770      	bx	lr
 80083be:	b299      	uxth	r1, r3
 80083c0:	b909      	cbnz	r1, 80083c6 <__lo0bits+0x2a>
 80083c2:	2010      	movs	r0, #16
 80083c4:	0c1b      	lsrs	r3, r3, #16
 80083c6:	b2d9      	uxtb	r1, r3
 80083c8:	b909      	cbnz	r1, 80083ce <__lo0bits+0x32>
 80083ca:	3008      	adds	r0, #8
 80083cc:	0a1b      	lsrs	r3, r3, #8
 80083ce:	0719      	lsls	r1, r3, #28
 80083d0:	bf04      	itt	eq
 80083d2:	091b      	lsreq	r3, r3, #4
 80083d4:	3004      	addeq	r0, #4
 80083d6:	0799      	lsls	r1, r3, #30
 80083d8:	bf04      	itt	eq
 80083da:	089b      	lsreq	r3, r3, #2
 80083dc:	3002      	addeq	r0, #2
 80083de:	07d9      	lsls	r1, r3, #31
 80083e0:	d403      	bmi.n	80083ea <__lo0bits+0x4e>
 80083e2:	085b      	lsrs	r3, r3, #1
 80083e4:	f100 0001 	add.w	r0, r0, #1
 80083e8:	d003      	beq.n	80083f2 <__lo0bits+0x56>
 80083ea:	6013      	str	r3, [r2, #0]
 80083ec:	4770      	bx	lr
 80083ee:	2000      	movs	r0, #0
 80083f0:	4770      	bx	lr
 80083f2:	2020      	movs	r0, #32
 80083f4:	4770      	bx	lr
	...

080083f8 <__i2b>:
 80083f8:	b510      	push	{r4, lr}
 80083fa:	460c      	mov	r4, r1
 80083fc:	2101      	movs	r1, #1
 80083fe:	f7ff ff05 	bl	800820c <_Balloc>
 8008402:	4602      	mov	r2, r0
 8008404:	b928      	cbnz	r0, 8008412 <__i2b+0x1a>
 8008406:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800840a:	4b04      	ldr	r3, [pc, #16]	; (800841c <__i2b+0x24>)
 800840c:	4804      	ldr	r0, [pc, #16]	; (8008420 <__i2b+0x28>)
 800840e:	f000 fed1 	bl	80091b4 <__assert_func>
 8008412:	2301      	movs	r3, #1
 8008414:	6144      	str	r4, [r0, #20]
 8008416:	6103      	str	r3, [r0, #16]
 8008418:	bd10      	pop	{r4, pc}
 800841a:	bf00      	nop
 800841c:	080095d7 	.word	0x080095d7
 8008420:	08009648 	.word	0x08009648

08008424 <__multiply>:
 8008424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008428:	4691      	mov	r9, r2
 800842a:	690a      	ldr	r2, [r1, #16]
 800842c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008430:	460c      	mov	r4, r1
 8008432:	429a      	cmp	r2, r3
 8008434:	bfbe      	ittt	lt
 8008436:	460b      	movlt	r3, r1
 8008438:	464c      	movlt	r4, r9
 800843a:	4699      	movlt	r9, r3
 800843c:	6927      	ldr	r7, [r4, #16]
 800843e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008442:	68a3      	ldr	r3, [r4, #8]
 8008444:	6861      	ldr	r1, [r4, #4]
 8008446:	eb07 060a 	add.w	r6, r7, sl
 800844a:	42b3      	cmp	r3, r6
 800844c:	b085      	sub	sp, #20
 800844e:	bfb8      	it	lt
 8008450:	3101      	addlt	r1, #1
 8008452:	f7ff fedb 	bl	800820c <_Balloc>
 8008456:	b930      	cbnz	r0, 8008466 <__multiply+0x42>
 8008458:	4602      	mov	r2, r0
 800845a:	f240 115d 	movw	r1, #349	; 0x15d
 800845e:	4b43      	ldr	r3, [pc, #268]	; (800856c <__multiply+0x148>)
 8008460:	4843      	ldr	r0, [pc, #268]	; (8008570 <__multiply+0x14c>)
 8008462:	f000 fea7 	bl	80091b4 <__assert_func>
 8008466:	f100 0514 	add.w	r5, r0, #20
 800846a:	462b      	mov	r3, r5
 800846c:	2200      	movs	r2, #0
 800846e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008472:	4543      	cmp	r3, r8
 8008474:	d321      	bcc.n	80084ba <__multiply+0x96>
 8008476:	f104 0314 	add.w	r3, r4, #20
 800847a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800847e:	f109 0314 	add.w	r3, r9, #20
 8008482:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008486:	9202      	str	r2, [sp, #8]
 8008488:	1b3a      	subs	r2, r7, r4
 800848a:	3a15      	subs	r2, #21
 800848c:	f022 0203 	bic.w	r2, r2, #3
 8008490:	3204      	adds	r2, #4
 8008492:	f104 0115 	add.w	r1, r4, #21
 8008496:	428f      	cmp	r7, r1
 8008498:	bf38      	it	cc
 800849a:	2204      	movcc	r2, #4
 800849c:	9201      	str	r2, [sp, #4]
 800849e:	9a02      	ldr	r2, [sp, #8]
 80084a0:	9303      	str	r3, [sp, #12]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d80c      	bhi.n	80084c0 <__multiply+0x9c>
 80084a6:	2e00      	cmp	r6, #0
 80084a8:	dd03      	ble.n	80084b2 <__multiply+0x8e>
 80084aa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d059      	beq.n	8008566 <__multiply+0x142>
 80084b2:	6106      	str	r6, [r0, #16]
 80084b4:	b005      	add	sp, #20
 80084b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ba:	f843 2b04 	str.w	r2, [r3], #4
 80084be:	e7d8      	b.n	8008472 <__multiply+0x4e>
 80084c0:	f8b3 a000 	ldrh.w	sl, [r3]
 80084c4:	f1ba 0f00 	cmp.w	sl, #0
 80084c8:	d023      	beq.n	8008512 <__multiply+0xee>
 80084ca:	46a9      	mov	r9, r5
 80084cc:	f04f 0c00 	mov.w	ip, #0
 80084d0:	f104 0e14 	add.w	lr, r4, #20
 80084d4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80084d8:	f8d9 1000 	ldr.w	r1, [r9]
 80084dc:	fa1f fb82 	uxth.w	fp, r2
 80084e0:	b289      	uxth	r1, r1
 80084e2:	fb0a 110b 	mla	r1, sl, fp, r1
 80084e6:	4461      	add	r1, ip
 80084e8:	f8d9 c000 	ldr.w	ip, [r9]
 80084ec:	0c12      	lsrs	r2, r2, #16
 80084ee:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80084f2:	fb0a c202 	mla	r2, sl, r2, ip
 80084f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80084fa:	b289      	uxth	r1, r1
 80084fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008500:	4577      	cmp	r7, lr
 8008502:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008506:	f849 1b04 	str.w	r1, [r9], #4
 800850a:	d8e3      	bhi.n	80084d4 <__multiply+0xb0>
 800850c:	9a01      	ldr	r2, [sp, #4]
 800850e:	f845 c002 	str.w	ip, [r5, r2]
 8008512:	9a03      	ldr	r2, [sp, #12]
 8008514:	3304      	adds	r3, #4
 8008516:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800851a:	f1b9 0f00 	cmp.w	r9, #0
 800851e:	d020      	beq.n	8008562 <__multiply+0x13e>
 8008520:	46ae      	mov	lr, r5
 8008522:	f04f 0a00 	mov.w	sl, #0
 8008526:	6829      	ldr	r1, [r5, #0]
 8008528:	f104 0c14 	add.w	ip, r4, #20
 800852c:	f8bc b000 	ldrh.w	fp, [ip]
 8008530:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008534:	b289      	uxth	r1, r1
 8008536:	fb09 220b 	mla	r2, r9, fp, r2
 800853a:	4492      	add	sl, r2
 800853c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008540:	f84e 1b04 	str.w	r1, [lr], #4
 8008544:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008548:	f8be 1000 	ldrh.w	r1, [lr]
 800854c:	0c12      	lsrs	r2, r2, #16
 800854e:	fb09 1102 	mla	r1, r9, r2, r1
 8008552:	4567      	cmp	r7, ip
 8008554:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008558:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800855c:	d8e6      	bhi.n	800852c <__multiply+0x108>
 800855e:	9a01      	ldr	r2, [sp, #4]
 8008560:	50a9      	str	r1, [r5, r2]
 8008562:	3504      	adds	r5, #4
 8008564:	e79b      	b.n	800849e <__multiply+0x7a>
 8008566:	3e01      	subs	r6, #1
 8008568:	e79d      	b.n	80084a6 <__multiply+0x82>
 800856a:	bf00      	nop
 800856c:	080095d7 	.word	0x080095d7
 8008570:	08009648 	.word	0x08009648

08008574 <__pow5mult>:
 8008574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008578:	4615      	mov	r5, r2
 800857a:	f012 0203 	ands.w	r2, r2, #3
 800857e:	4606      	mov	r6, r0
 8008580:	460f      	mov	r7, r1
 8008582:	d007      	beq.n	8008594 <__pow5mult+0x20>
 8008584:	4c25      	ldr	r4, [pc, #148]	; (800861c <__pow5mult+0xa8>)
 8008586:	3a01      	subs	r2, #1
 8008588:	2300      	movs	r3, #0
 800858a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800858e:	f7ff fe9f 	bl	80082d0 <__multadd>
 8008592:	4607      	mov	r7, r0
 8008594:	10ad      	asrs	r5, r5, #2
 8008596:	d03d      	beq.n	8008614 <__pow5mult+0xa0>
 8008598:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800859a:	b97c      	cbnz	r4, 80085bc <__pow5mult+0x48>
 800859c:	2010      	movs	r0, #16
 800859e:	f7ff fe11 	bl	80081c4 <malloc>
 80085a2:	4602      	mov	r2, r0
 80085a4:	6270      	str	r0, [r6, #36]	; 0x24
 80085a6:	b928      	cbnz	r0, 80085b4 <__pow5mult+0x40>
 80085a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80085ac:	4b1c      	ldr	r3, [pc, #112]	; (8008620 <__pow5mult+0xac>)
 80085ae:	481d      	ldr	r0, [pc, #116]	; (8008624 <__pow5mult+0xb0>)
 80085b0:	f000 fe00 	bl	80091b4 <__assert_func>
 80085b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80085b8:	6004      	str	r4, [r0, #0]
 80085ba:	60c4      	str	r4, [r0, #12]
 80085bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80085c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80085c4:	b94c      	cbnz	r4, 80085da <__pow5mult+0x66>
 80085c6:	f240 2171 	movw	r1, #625	; 0x271
 80085ca:	4630      	mov	r0, r6
 80085cc:	f7ff ff14 	bl	80083f8 <__i2b>
 80085d0:	2300      	movs	r3, #0
 80085d2:	4604      	mov	r4, r0
 80085d4:	f8c8 0008 	str.w	r0, [r8, #8]
 80085d8:	6003      	str	r3, [r0, #0]
 80085da:	f04f 0900 	mov.w	r9, #0
 80085de:	07eb      	lsls	r3, r5, #31
 80085e0:	d50a      	bpl.n	80085f8 <__pow5mult+0x84>
 80085e2:	4639      	mov	r1, r7
 80085e4:	4622      	mov	r2, r4
 80085e6:	4630      	mov	r0, r6
 80085e8:	f7ff ff1c 	bl	8008424 <__multiply>
 80085ec:	4680      	mov	r8, r0
 80085ee:	4639      	mov	r1, r7
 80085f0:	4630      	mov	r0, r6
 80085f2:	f7ff fe4b 	bl	800828c <_Bfree>
 80085f6:	4647      	mov	r7, r8
 80085f8:	106d      	asrs	r5, r5, #1
 80085fa:	d00b      	beq.n	8008614 <__pow5mult+0xa0>
 80085fc:	6820      	ldr	r0, [r4, #0]
 80085fe:	b938      	cbnz	r0, 8008610 <__pow5mult+0x9c>
 8008600:	4622      	mov	r2, r4
 8008602:	4621      	mov	r1, r4
 8008604:	4630      	mov	r0, r6
 8008606:	f7ff ff0d 	bl	8008424 <__multiply>
 800860a:	6020      	str	r0, [r4, #0]
 800860c:	f8c0 9000 	str.w	r9, [r0]
 8008610:	4604      	mov	r4, r0
 8008612:	e7e4      	b.n	80085de <__pow5mult+0x6a>
 8008614:	4638      	mov	r0, r7
 8008616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800861a:	bf00      	nop
 800861c:	08009798 	.word	0x08009798
 8008620:	08009565 	.word	0x08009565
 8008624:	08009648 	.word	0x08009648

08008628 <__lshift>:
 8008628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800862c:	460c      	mov	r4, r1
 800862e:	4607      	mov	r7, r0
 8008630:	4691      	mov	r9, r2
 8008632:	6923      	ldr	r3, [r4, #16]
 8008634:	6849      	ldr	r1, [r1, #4]
 8008636:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800863a:	68a3      	ldr	r3, [r4, #8]
 800863c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008640:	f108 0601 	add.w	r6, r8, #1
 8008644:	42b3      	cmp	r3, r6
 8008646:	db0b      	blt.n	8008660 <__lshift+0x38>
 8008648:	4638      	mov	r0, r7
 800864a:	f7ff fddf 	bl	800820c <_Balloc>
 800864e:	4605      	mov	r5, r0
 8008650:	b948      	cbnz	r0, 8008666 <__lshift+0x3e>
 8008652:	4602      	mov	r2, r0
 8008654:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008658:	4b29      	ldr	r3, [pc, #164]	; (8008700 <__lshift+0xd8>)
 800865a:	482a      	ldr	r0, [pc, #168]	; (8008704 <__lshift+0xdc>)
 800865c:	f000 fdaa 	bl	80091b4 <__assert_func>
 8008660:	3101      	adds	r1, #1
 8008662:	005b      	lsls	r3, r3, #1
 8008664:	e7ee      	b.n	8008644 <__lshift+0x1c>
 8008666:	2300      	movs	r3, #0
 8008668:	f100 0114 	add.w	r1, r0, #20
 800866c:	f100 0210 	add.w	r2, r0, #16
 8008670:	4618      	mov	r0, r3
 8008672:	4553      	cmp	r3, sl
 8008674:	db37      	blt.n	80086e6 <__lshift+0xbe>
 8008676:	6920      	ldr	r0, [r4, #16]
 8008678:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800867c:	f104 0314 	add.w	r3, r4, #20
 8008680:	f019 091f 	ands.w	r9, r9, #31
 8008684:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008688:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800868c:	d02f      	beq.n	80086ee <__lshift+0xc6>
 800868e:	468a      	mov	sl, r1
 8008690:	f04f 0c00 	mov.w	ip, #0
 8008694:	f1c9 0e20 	rsb	lr, r9, #32
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	fa02 f209 	lsl.w	r2, r2, r9
 800869e:	ea42 020c 	orr.w	r2, r2, ip
 80086a2:	f84a 2b04 	str.w	r2, [sl], #4
 80086a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80086aa:	4298      	cmp	r0, r3
 80086ac:	fa22 fc0e 	lsr.w	ip, r2, lr
 80086b0:	d8f2      	bhi.n	8008698 <__lshift+0x70>
 80086b2:	1b03      	subs	r3, r0, r4
 80086b4:	3b15      	subs	r3, #21
 80086b6:	f023 0303 	bic.w	r3, r3, #3
 80086ba:	3304      	adds	r3, #4
 80086bc:	f104 0215 	add.w	r2, r4, #21
 80086c0:	4290      	cmp	r0, r2
 80086c2:	bf38      	it	cc
 80086c4:	2304      	movcc	r3, #4
 80086c6:	f841 c003 	str.w	ip, [r1, r3]
 80086ca:	f1bc 0f00 	cmp.w	ip, #0
 80086ce:	d001      	beq.n	80086d4 <__lshift+0xac>
 80086d0:	f108 0602 	add.w	r6, r8, #2
 80086d4:	3e01      	subs	r6, #1
 80086d6:	4638      	mov	r0, r7
 80086d8:	4621      	mov	r1, r4
 80086da:	612e      	str	r6, [r5, #16]
 80086dc:	f7ff fdd6 	bl	800828c <_Bfree>
 80086e0:	4628      	mov	r0, r5
 80086e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80086ea:	3301      	adds	r3, #1
 80086ec:	e7c1      	b.n	8008672 <__lshift+0x4a>
 80086ee:	3904      	subs	r1, #4
 80086f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80086f4:	4298      	cmp	r0, r3
 80086f6:	f841 2f04 	str.w	r2, [r1, #4]!
 80086fa:	d8f9      	bhi.n	80086f0 <__lshift+0xc8>
 80086fc:	e7ea      	b.n	80086d4 <__lshift+0xac>
 80086fe:	bf00      	nop
 8008700:	080095d7 	.word	0x080095d7
 8008704:	08009648 	.word	0x08009648

08008708 <__mcmp>:
 8008708:	4603      	mov	r3, r0
 800870a:	690a      	ldr	r2, [r1, #16]
 800870c:	6900      	ldr	r0, [r0, #16]
 800870e:	b530      	push	{r4, r5, lr}
 8008710:	1a80      	subs	r0, r0, r2
 8008712:	d10d      	bne.n	8008730 <__mcmp+0x28>
 8008714:	3314      	adds	r3, #20
 8008716:	3114      	adds	r1, #20
 8008718:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800871c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008720:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008724:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008728:	4295      	cmp	r5, r2
 800872a:	d002      	beq.n	8008732 <__mcmp+0x2a>
 800872c:	d304      	bcc.n	8008738 <__mcmp+0x30>
 800872e:	2001      	movs	r0, #1
 8008730:	bd30      	pop	{r4, r5, pc}
 8008732:	42a3      	cmp	r3, r4
 8008734:	d3f4      	bcc.n	8008720 <__mcmp+0x18>
 8008736:	e7fb      	b.n	8008730 <__mcmp+0x28>
 8008738:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800873c:	e7f8      	b.n	8008730 <__mcmp+0x28>
	...

08008740 <__mdiff>:
 8008740:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008744:	460d      	mov	r5, r1
 8008746:	4607      	mov	r7, r0
 8008748:	4611      	mov	r1, r2
 800874a:	4628      	mov	r0, r5
 800874c:	4614      	mov	r4, r2
 800874e:	f7ff ffdb 	bl	8008708 <__mcmp>
 8008752:	1e06      	subs	r6, r0, #0
 8008754:	d111      	bne.n	800877a <__mdiff+0x3a>
 8008756:	4631      	mov	r1, r6
 8008758:	4638      	mov	r0, r7
 800875a:	f7ff fd57 	bl	800820c <_Balloc>
 800875e:	4602      	mov	r2, r0
 8008760:	b928      	cbnz	r0, 800876e <__mdiff+0x2e>
 8008762:	f240 2132 	movw	r1, #562	; 0x232
 8008766:	4b3a      	ldr	r3, [pc, #232]	; (8008850 <__mdiff+0x110>)
 8008768:	483a      	ldr	r0, [pc, #232]	; (8008854 <__mdiff+0x114>)
 800876a:	f000 fd23 	bl	80091b4 <__assert_func>
 800876e:	2301      	movs	r3, #1
 8008770:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008774:	4610      	mov	r0, r2
 8008776:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800877a:	bfa4      	itt	ge
 800877c:	4623      	movge	r3, r4
 800877e:	462c      	movge	r4, r5
 8008780:	4638      	mov	r0, r7
 8008782:	6861      	ldr	r1, [r4, #4]
 8008784:	bfa6      	itte	ge
 8008786:	461d      	movge	r5, r3
 8008788:	2600      	movge	r6, #0
 800878a:	2601      	movlt	r6, #1
 800878c:	f7ff fd3e 	bl	800820c <_Balloc>
 8008790:	4602      	mov	r2, r0
 8008792:	b918      	cbnz	r0, 800879c <__mdiff+0x5c>
 8008794:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008798:	4b2d      	ldr	r3, [pc, #180]	; (8008850 <__mdiff+0x110>)
 800879a:	e7e5      	b.n	8008768 <__mdiff+0x28>
 800879c:	f102 0814 	add.w	r8, r2, #20
 80087a0:	46c2      	mov	sl, r8
 80087a2:	f04f 0c00 	mov.w	ip, #0
 80087a6:	6927      	ldr	r7, [r4, #16]
 80087a8:	60c6      	str	r6, [r0, #12]
 80087aa:	692e      	ldr	r6, [r5, #16]
 80087ac:	f104 0014 	add.w	r0, r4, #20
 80087b0:	f105 0914 	add.w	r9, r5, #20
 80087b4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80087b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80087bc:	3410      	adds	r4, #16
 80087be:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80087c2:	f859 3b04 	ldr.w	r3, [r9], #4
 80087c6:	fa1f f18b 	uxth.w	r1, fp
 80087ca:	448c      	add	ip, r1
 80087cc:	b299      	uxth	r1, r3
 80087ce:	0c1b      	lsrs	r3, r3, #16
 80087d0:	ebac 0101 	sub.w	r1, ip, r1
 80087d4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80087d8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80087dc:	b289      	uxth	r1, r1
 80087de:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80087e2:	454e      	cmp	r6, r9
 80087e4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80087e8:	f84a 3b04 	str.w	r3, [sl], #4
 80087ec:	d8e7      	bhi.n	80087be <__mdiff+0x7e>
 80087ee:	1b73      	subs	r3, r6, r5
 80087f0:	3b15      	subs	r3, #21
 80087f2:	f023 0303 	bic.w	r3, r3, #3
 80087f6:	3515      	adds	r5, #21
 80087f8:	3304      	adds	r3, #4
 80087fa:	42ae      	cmp	r6, r5
 80087fc:	bf38      	it	cc
 80087fe:	2304      	movcc	r3, #4
 8008800:	4418      	add	r0, r3
 8008802:	4443      	add	r3, r8
 8008804:	461e      	mov	r6, r3
 8008806:	4605      	mov	r5, r0
 8008808:	4575      	cmp	r5, lr
 800880a:	d30e      	bcc.n	800882a <__mdiff+0xea>
 800880c:	f10e 0103 	add.w	r1, lr, #3
 8008810:	1a09      	subs	r1, r1, r0
 8008812:	f021 0103 	bic.w	r1, r1, #3
 8008816:	3803      	subs	r0, #3
 8008818:	4586      	cmp	lr, r0
 800881a:	bf38      	it	cc
 800881c:	2100      	movcc	r1, #0
 800881e:	4419      	add	r1, r3
 8008820:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008824:	b18b      	cbz	r3, 800884a <__mdiff+0x10a>
 8008826:	6117      	str	r7, [r2, #16]
 8008828:	e7a4      	b.n	8008774 <__mdiff+0x34>
 800882a:	f855 8b04 	ldr.w	r8, [r5], #4
 800882e:	fa1f f188 	uxth.w	r1, r8
 8008832:	4461      	add	r1, ip
 8008834:	140c      	asrs	r4, r1, #16
 8008836:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800883a:	b289      	uxth	r1, r1
 800883c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008840:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008844:	f846 1b04 	str.w	r1, [r6], #4
 8008848:	e7de      	b.n	8008808 <__mdiff+0xc8>
 800884a:	3f01      	subs	r7, #1
 800884c:	e7e8      	b.n	8008820 <__mdiff+0xe0>
 800884e:	bf00      	nop
 8008850:	080095d7 	.word	0x080095d7
 8008854:	08009648 	.word	0x08009648

08008858 <__d2b>:
 8008858:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800885c:	2101      	movs	r1, #1
 800885e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008862:	4690      	mov	r8, r2
 8008864:	461d      	mov	r5, r3
 8008866:	f7ff fcd1 	bl	800820c <_Balloc>
 800886a:	4604      	mov	r4, r0
 800886c:	b930      	cbnz	r0, 800887c <__d2b+0x24>
 800886e:	4602      	mov	r2, r0
 8008870:	f240 310a 	movw	r1, #778	; 0x30a
 8008874:	4b24      	ldr	r3, [pc, #144]	; (8008908 <__d2b+0xb0>)
 8008876:	4825      	ldr	r0, [pc, #148]	; (800890c <__d2b+0xb4>)
 8008878:	f000 fc9c 	bl	80091b4 <__assert_func>
 800887c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008880:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008884:	bb2d      	cbnz	r5, 80088d2 <__d2b+0x7a>
 8008886:	9301      	str	r3, [sp, #4]
 8008888:	f1b8 0300 	subs.w	r3, r8, #0
 800888c:	d026      	beq.n	80088dc <__d2b+0x84>
 800888e:	4668      	mov	r0, sp
 8008890:	9300      	str	r3, [sp, #0]
 8008892:	f7ff fd83 	bl	800839c <__lo0bits>
 8008896:	9900      	ldr	r1, [sp, #0]
 8008898:	b1f0      	cbz	r0, 80088d8 <__d2b+0x80>
 800889a:	9a01      	ldr	r2, [sp, #4]
 800889c:	f1c0 0320 	rsb	r3, r0, #32
 80088a0:	fa02 f303 	lsl.w	r3, r2, r3
 80088a4:	430b      	orrs	r3, r1
 80088a6:	40c2      	lsrs	r2, r0
 80088a8:	6163      	str	r3, [r4, #20]
 80088aa:	9201      	str	r2, [sp, #4]
 80088ac:	9b01      	ldr	r3, [sp, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	bf14      	ite	ne
 80088b2:	2102      	movne	r1, #2
 80088b4:	2101      	moveq	r1, #1
 80088b6:	61a3      	str	r3, [r4, #24]
 80088b8:	6121      	str	r1, [r4, #16]
 80088ba:	b1c5      	cbz	r5, 80088ee <__d2b+0x96>
 80088bc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80088c0:	4405      	add	r5, r0
 80088c2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80088c6:	603d      	str	r5, [r7, #0]
 80088c8:	6030      	str	r0, [r6, #0]
 80088ca:	4620      	mov	r0, r4
 80088cc:	b002      	add	sp, #8
 80088ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088d6:	e7d6      	b.n	8008886 <__d2b+0x2e>
 80088d8:	6161      	str	r1, [r4, #20]
 80088da:	e7e7      	b.n	80088ac <__d2b+0x54>
 80088dc:	a801      	add	r0, sp, #4
 80088de:	f7ff fd5d 	bl	800839c <__lo0bits>
 80088e2:	2101      	movs	r1, #1
 80088e4:	9b01      	ldr	r3, [sp, #4]
 80088e6:	6121      	str	r1, [r4, #16]
 80088e8:	6163      	str	r3, [r4, #20]
 80088ea:	3020      	adds	r0, #32
 80088ec:	e7e5      	b.n	80088ba <__d2b+0x62>
 80088ee:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80088f2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80088f6:	6038      	str	r0, [r7, #0]
 80088f8:	6918      	ldr	r0, [r3, #16]
 80088fa:	f7ff fd2f 	bl	800835c <__hi0bits>
 80088fe:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008902:	6031      	str	r1, [r6, #0]
 8008904:	e7e1      	b.n	80088ca <__d2b+0x72>
 8008906:	bf00      	nop
 8008908:	080095d7 	.word	0x080095d7
 800890c:	08009648 	.word	0x08009648

08008910 <_calloc_r>:
 8008910:	b570      	push	{r4, r5, r6, lr}
 8008912:	fba1 5402 	umull	r5, r4, r1, r2
 8008916:	b934      	cbnz	r4, 8008926 <_calloc_r+0x16>
 8008918:	4629      	mov	r1, r5
 800891a:	f000 f875 	bl	8008a08 <_malloc_r>
 800891e:	4606      	mov	r6, r0
 8008920:	b928      	cbnz	r0, 800892e <_calloc_r+0x1e>
 8008922:	4630      	mov	r0, r6
 8008924:	bd70      	pop	{r4, r5, r6, pc}
 8008926:	220c      	movs	r2, #12
 8008928:	2600      	movs	r6, #0
 800892a:	6002      	str	r2, [r0, #0]
 800892c:	e7f9      	b.n	8008922 <_calloc_r+0x12>
 800892e:	462a      	mov	r2, r5
 8008930:	4621      	mov	r1, r4
 8008932:	f7fd fdc1 	bl	80064b8 <memset>
 8008936:	e7f4      	b.n	8008922 <_calloc_r+0x12>

08008938 <_free_r>:
 8008938:	b538      	push	{r3, r4, r5, lr}
 800893a:	4605      	mov	r5, r0
 800893c:	2900      	cmp	r1, #0
 800893e:	d040      	beq.n	80089c2 <_free_r+0x8a>
 8008940:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008944:	1f0c      	subs	r4, r1, #4
 8008946:	2b00      	cmp	r3, #0
 8008948:	bfb8      	it	lt
 800894a:	18e4      	addlt	r4, r4, r3
 800894c:	f000 fcd2 	bl	80092f4 <__malloc_lock>
 8008950:	4a1c      	ldr	r2, [pc, #112]	; (80089c4 <_free_r+0x8c>)
 8008952:	6813      	ldr	r3, [r2, #0]
 8008954:	b933      	cbnz	r3, 8008964 <_free_r+0x2c>
 8008956:	6063      	str	r3, [r4, #4]
 8008958:	6014      	str	r4, [r2, #0]
 800895a:	4628      	mov	r0, r5
 800895c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008960:	f000 bcce 	b.w	8009300 <__malloc_unlock>
 8008964:	42a3      	cmp	r3, r4
 8008966:	d908      	bls.n	800897a <_free_r+0x42>
 8008968:	6820      	ldr	r0, [r4, #0]
 800896a:	1821      	adds	r1, r4, r0
 800896c:	428b      	cmp	r3, r1
 800896e:	bf01      	itttt	eq
 8008970:	6819      	ldreq	r1, [r3, #0]
 8008972:	685b      	ldreq	r3, [r3, #4]
 8008974:	1809      	addeq	r1, r1, r0
 8008976:	6021      	streq	r1, [r4, #0]
 8008978:	e7ed      	b.n	8008956 <_free_r+0x1e>
 800897a:	461a      	mov	r2, r3
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	b10b      	cbz	r3, 8008984 <_free_r+0x4c>
 8008980:	42a3      	cmp	r3, r4
 8008982:	d9fa      	bls.n	800897a <_free_r+0x42>
 8008984:	6811      	ldr	r1, [r2, #0]
 8008986:	1850      	adds	r0, r2, r1
 8008988:	42a0      	cmp	r0, r4
 800898a:	d10b      	bne.n	80089a4 <_free_r+0x6c>
 800898c:	6820      	ldr	r0, [r4, #0]
 800898e:	4401      	add	r1, r0
 8008990:	1850      	adds	r0, r2, r1
 8008992:	4283      	cmp	r3, r0
 8008994:	6011      	str	r1, [r2, #0]
 8008996:	d1e0      	bne.n	800895a <_free_r+0x22>
 8008998:	6818      	ldr	r0, [r3, #0]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	4401      	add	r1, r0
 800899e:	6011      	str	r1, [r2, #0]
 80089a0:	6053      	str	r3, [r2, #4]
 80089a2:	e7da      	b.n	800895a <_free_r+0x22>
 80089a4:	d902      	bls.n	80089ac <_free_r+0x74>
 80089a6:	230c      	movs	r3, #12
 80089a8:	602b      	str	r3, [r5, #0]
 80089aa:	e7d6      	b.n	800895a <_free_r+0x22>
 80089ac:	6820      	ldr	r0, [r4, #0]
 80089ae:	1821      	adds	r1, r4, r0
 80089b0:	428b      	cmp	r3, r1
 80089b2:	bf01      	itttt	eq
 80089b4:	6819      	ldreq	r1, [r3, #0]
 80089b6:	685b      	ldreq	r3, [r3, #4]
 80089b8:	1809      	addeq	r1, r1, r0
 80089ba:	6021      	streq	r1, [r4, #0]
 80089bc:	6063      	str	r3, [r4, #4]
 80089be:	6054      	str	r4, [r2, #4]
 80089c0:	e7cb      	b.n	800895a <_free_r+0x22>
 80089c2:	bd38      	pop	{r3, r4, r5, pc}
 80089c4:	200006d8 	.word	0x200006d8

080089c8 <sbrk_aligned>:
 80089c8:	b570      	push	{r4, r5, r6, lr}
 80089ca:	4e0e      	ldr	r6, [pc, #56]	; (8008a04 <sbrk_aligned+0x3c>)
 80089cc:	460c      	mov	r4, r1
 80089ce:	6831      	ldr	r1, [r6, #0]
 80089d0:	4605      	mov	r5, r0
 80089d2:	b911      	cbnz	r1, 80089da <sbrk_aligned+0x12>
 80089d4:	f000 fb88 	bl	80090e8 <_sbrk_r>
 80089d8:	6030      	str	r0, [r6, #0]
 80089da:	4621      	mov	r1, r4
 80089dc:	4628      	mov	r0, r5
 80089de:	f000 fb83 	bl	80090e8 <_sbrk_r>
 80089e2:	1c43      	adds	r3, r0, #1
 80089e4:	d00a      	beq.n	80089fc <sbrk_aligned+0x34>
 80089e6:	1cc4      	adds	r4, r0, #3
 80089e8:	f024 0403 	bic.w	r4, r4, #3
 80089ec:	42a0      	cmp	r0, r4
 80089ee:	d007      	beq.n	8008a00 <sbrk_aligned+0x38>
 80089f0:	1a21      	subs	r1, r4, r0
 80089f2:	4628      	mov	r0, r5
 80089f4:	f000 fb78 	bl	80090e8 <_sbrk_r>
 80089f8:	3001      	adds	r0, #1
 80089fa:	d101      	bne.n	8008a00 <sbrk_aligned+0x38>
 80089fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008a00:	4620      	mov	r0, r4
 8008a02:	bd70      	pop	{r4, r5, r6, pc}
 8008a04:	200006dc 	.word	0x200006dc

08008a08 <_malloc_r>:
 8008a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a0c:	1ccd      	adds	r5, r1, #3
 8008a0e:	f025 0503 	bic.w	r5, r5, #3
 8008a12:	3508      	adds	r5, #8
 8008a14:	2d0c      	cmp	r5, #12
 8008a16:	bf38      	it	cc
 8008a18:	250c      	movcc	r5, #12
 8008a1a:	2d00      	cmp	r5, #0
 8008a1c:	4607      	mov	r7, r0
 8008a1e:	db01      	blt.n	8008a24 <_malloc_r+0x1c>
 8008a20:	42a9      	cmp	r1, r5
 8008a22:	d905      	bls.n	8008a30 <_malloc_r+0x28>
 8008a24:	230c      	movs	r3, #12
 8008a26:	2600      	movs	r6, #0
 8008a28:	603b      	str	r3, [r7, #0]
 8008a2a:	4630      	mov	r0, r6
 8008a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a30:	4e2e      	ldr	r6, [pc, #184]	; (8008aec <_malloc_r+0xe4>)
 8008a32:	f000 fc5f 	bl	80092f4 <__malloc_lock>
 8008a36:	6833      	ldr	r3, [r6, #0]
 8008a38:	461c      	mov	r4, r3
 8008a3a:	bb34      	cbnz	r4, 8008a8a <_malloc_r+0x82>
 8008a3c:	4629      	mov	r1, r5
 8008a3e:	4638      	mov	r0, r7
 8008a40:	f7ff ffc2 	bl	80089c8 <sbrk_aligned>
 8008a44:	1c43      	adds	r3, r0, #1
 8008a46:	4604      	mov	r4, r0
 8008a48:	d14d      	bne.n	8008ae6 <_malloc_r+0xde>
 8008a4a:	6834      	ldr	r4, [r6, #0]
 8008a4c:	4626      	mov	r6, r4
 8008a4e:	2e00      	cmp	r6, #0
 8008a50:	d140      	bne.n	8008ad4 <_malloc_r+0xcc>
 8008a52:	6823      	ldr	r3, [r4, #0]
 8008a54:	4631      	mov	r1, r6
 8008a56:	4638      	mov	r0, r7
 8008a58:	eb04 0803 	add.w	r8, r4, r3
 8008a5c:	f000 fb44 	bl	80090e8 <_sbrk_r>
 8008a60:	4580      	cmp	r8, r0
 8008a62:	d13a      	bne.n	8008ada <_malloc_r+0xd2>
 8008a64:	6821      	ldr	r1, [r4, #0]
 8008a66:	3503      	adds	r5, #3
 8008a68:	1a6d      	subs	r5, r5, r1
 8008a6a:	f025 0503 	bic.w	r5, r5, #3
 8008a6e:	3508      	adds	r5, #8
 8008a70:	2d0c      	cmp	r5, #12
 8008a72:	bf38      	it	cc
 8008a74:	250c      	movcc	r5, #12
 8008a76:	4638      	mov	r0, r7
 8008a78:	4629      	mov	r1, r5
 8008a7a:	f7ff ffa5 	bl	80089c8 <sbrk_aligned>
 8008a7e:	3001      	adds	r0, #1
 8008a80:	d02b      	beq.n	8008ada <_malloc_r+0xd2>
 8008a82:	6823      	ldr	r3, [r4, #0]
 8008a84:	442b      	add	r3, r5
 8008a86:	6023      	str	r3, [r4, #0]
 8008a88:	e00e      	b.n	8008aa8 <_malloc_r+0xa0>
 8008a8a:	6822      	ldr	r2, [r4, #0]
 8008a8c:	1b52      	subs	r2, r2, r5
 8008a8e:	d41e      	bmi.n	8008ace <_malloc_r+0xc6>
 8008a90:	2a0b      	cmp	r2, #11
 8008a92:	d916      	bls.n	8008ac2 <_malloc_r+0xba>
 8008a94:	1961      	adds	r1, r4, r5
 8008a96:	42a3      	cmp	r3, r4
 8008a98:	6025      	str	r5, [r4, #0]
 8008a9a:	bf18      	it	ne
 8008a9c:	6059      	strne	r1, [r3, #4]
 8008a9e:	6863      	ldr	r3, [r4, #4]
 8008aa0:	bf08      	it	eq
 8008aa2:	6031      	streq	r1, [r6, #0]
 8008aa4:	5162      	str	r2, [r4, r5]
 8008aa6:	604b      	str	r3, [r1, #4]
 8008aa8:	4638      	mov	r0, r7
 8008aaa:	f104 060b 	add.w	r6, r4, #11
 8008aae:	f000 fc27 	bl	8009300 <__malloc_unlock>
 8008ab2:	f026 0607 	bic.w	r6, r6, #7
 8008ab6:	1d23      	adds	r3, r4, #4
 8008ab8:	1af2      	subs	r2, r6, r3
 8008aba:	d0b6      	beq.n	8008a2a <_malloc_r+0x22>
 8008abc:	1b9b      	subs	r3, r3, r6
 8008abe:	50a3      	str	r3, [r4, r2]
 8008ac0:	e7b3      	b.n	8008a2a <_malloc_r+0x22>
 8008ac2:	6862      	ldr	r2, [r4, #4]
 8008ac4:	42a3      	cmp	r3, r4
 8008ac6:	bf0c      	ite	eq
 8008ac8:	6032      	streq	r2, [r6, #0]
 8008aca:	605a      	strne	r2, [r3, #4]
 8008acc:	e7ec      	b.n	8008aa8 <_malloc_r+0xa0>
 8008ace:	4623      	mov	r3, r4
 8008ad0:	6864      	ldr	r4, [r4, #4]
 8008ad2:	e7b2      	b.n	8008a3a <_malloc_r+0x32>
 8008ad4:	4634      	mov	r4, r6
 8008ad6:	6876      	ldr	r6, [r6, #4]
 8008ad8:	e7b9      	b.n	8008a4e <_malloc_r+0x46>
 8008ada:	230c      	movs	r3, #12
 8008adc:	4638      	mov	r0, r7
 8008ade:	603b      	str	r3, [r7, #0]
 8008ae0:	f000 fc0e 	bl	8009300 <__malloc_unlock>
 8008ae4:	e7a1      	b.n	8008a2a <_malloc_r+0x22>
 8008ae6:	6025      	str	r5, [r4, #0]
 8008ae8:	e7de      	b.n	8008aa8 <_malloc_r+0xa0>
 8008aea:	bf00      	nop
 8008aec:	200006d8 	.word	0x200006d8

08008af0 <__ssputs_r>:
 8008af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008af4:	688e      	ldr	r6, [r1, #8]
 8008af6:	4682      	mov	sl, r0
 8008af8:	429e      	cmp	r6, r3
 8008afa:	460c      	mov	r4, r1
 8008afc:	4690      	mov	r8, r2
 8008afe:	461f      	mov	r7, r3
 8008b00:	d838      	bhi.n	8008b74 <__ssputs_r+0x84>
 8008b02:	898a      	ldrh	r2, [r1, #12]
 8008b04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b08:	d032      	beq.n	8008b70 <__ssputs_r+0x80>
 8008b0a:	6825      	ldr	r5, [r4, #0]
 8008b0c:	6909      	ldr	r1, [r1, #16]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	eba5 0901 	sub.w	r9, r5, r1
 8008b14:	6965      	ldr	r5, [r4, #20]
 8008b16:	444b      	add	r3, r9
 8008b18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b20:	106d      	asrs	r5, r5, #1
 8008b22:	429d      	cmp	r5, r3
 8008b24:	bf38      	it	cc
 8008b26:	461d      	movcc	r5, r3
 8008b28:	0553      	lsls	r3, r2, #21
 8008b2a:	d531      	bpl.n	8008b90 <__ssputs_r+0xa0>
 8008b2c:	4629      	mov	r1, r5
 8008b2e:	f7ff ff6b 	bl	8008a08 <_malloc_r>
 8008b32:	4606      	mov	r6, r0
 8008b34:	b950      	cbnz	r0, 8008b4c <__ssputs_r+0x5c>
 8008b36:	230c      	movs	r3, #12
 8008b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b3c:	f8ca 3000 	str.w	r3, [sl]
 8008b40:	89a3      	ldrh	r3, [r4, #12]
 8008b42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b46:	81a3      	strh	r3, [r4, #12]
 8008b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b4c:	464a      	mov	r2, r9
 8008b4e:	6921      	ldr	r1, [r4, #16]
 8008b50:	f7ff fb4e 	bl	80081f0 <memcpy>
 8008b54:	89a3      	ldrh	r3, [r4, #12]
 8008b56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b5e:	81a3      	strh	r3, [r4, #12]
 8008b60:	6126      	str	r6, [r4, #16]
 8008b62:	444e      	add	r6, r9
 8008b64:	6026      	str	r6, [r4, #0]
 8008b66:	463e      	mov	r6, r7
 8008b68:	6165      	str	r5, [r4, #20]
 8008b6a:	eba5 0509 	sub.w	r5, r5, r9
 8008b6e:	60a5      	str	r5, [r4, #8]
 8008b70:	42be      	cmp	r6, r7
 8008b72:	d900      	bls.n	8008b76 <__ssputs_r+0x86>
 8008b74:	463e      	mov	r6, r7
 8008b76:	4632      	mov	r2, r6
 8008b78:	4641      	mov	r1, r8
 8008b7a:	6820      	ldr	r0, [r4, #0]
 8008b7c:	f000 fba0 	bl	80092c0 <memmove>
 8008b80:	68a3      	ldr	r3, [r4, #8]
 8008b82:	2000      	movs	r0, #0
 8008b84:	1b9b      	subs	r3, r3, r6
 8008b86:	60a3      	str	r3, [r4, #8]
 8008b88:	6823      	ldr	r3, [r4, #0]
 8008b8a:	4433      	add	r3, r6
 8008b8c:	6023      	str	r3, [r4, #0]
 8008b8e:	e7db      	b.n	8008b48 <__ssputs_r+0x58>
 8008b90:	462a      	mov	r2, r5
 8008b92:	f000 fbbb 	bl	800930c <_realloc_r>
 8008b96:	4606      	mov	r6, r0
 8008b98:	2800      	cmp	r0, #0
 8008b9a:	d1e1      	bne.n	8008b60 <__ssputs_r+0x70>
 8008b9c:	4650      	mov	r0, sl
 8008b9e:	6921      	ldr	r1, [r4, #16]
 8008ba0:	f7ff feca 	bl	8008938 <_free_r>
 8008ba4:	e7c7      	b.n	8008b36 <__ssputs_r+0x46>
	...

08008ba8 <_svfiprintf_r>:
 8008ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bac:	4698      	mov	r8, r3
 8008bae:	898b      	ldrh	r3, [r1, #12]
 8008bb0:	4607      	mov	r7, r0
 8008bb2:	061b      	lsls	r3, r3, #24
 8008bb4:	460d      	mov	r5, r1
 8008bb6:	4614      	mov	r4, r2
 8008bb8:	b09d      	sub	sp, #116	; 0x74
 8008bba:	d50e      	bpl.n	8008bda <_svfiprintf_r+0x32>
 8008bbc:	690b      	ldr	r3, [r1, #16]
 8008bbe:	b963      	cbnz	r3, 8008bda <_svfiprintf_r+0x32>
 8008bc0:	2140      	movs	r1, #64	; 0x40
 8008bc2:	f7ff ff21 	bl	8008a08 <_malloc_r>
 8008bc6:	6028      	str	r0, [r5, #0]
 8008bc8:	6128      	str	r0, [r5, #16]
 8008bca:	b920      	cbnz	r0, 8008bd6 <_svfiprintf_r+0x2e>
 8008bcc:	230c      	movs	r3, #12
 8008bce:	603b      	str	r3, [r7, #0]
 8008bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bd4:	e0d1      	b.n	8008d7a <_svfiprintf_r+0x1d2>
 8008bd6:	2340      	movs	r3, #64	; 0x40
 8008bd8:	616b      	str	r3, [r5, #20]
 8008bda:	2300      	movs	r3, #0
 8008bdc:	9309      	str	r3, [sp, #36]	; 0x24
 8008bde:	2320      	movs	r3, #32
 8008be0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008be4:	2330      	movs	r3, #48	; 0x30
 8008be6:	f04f 0901 	mov.w	r9, #1
 8008bea:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008d94 <_svfiprintf_r+0x1ec>
 8008bf2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bf6:	4623      	mov	r3, r4
 8008bf8:	469a      	mov	sl, r3
 8008bfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bfe:	b10a      	cbz	r2, 8008c04 <_svfiprintf_r+0x5c>
 8008c00:	2a25      	cmp	r2, #37	; 0x25
 8008c02:	d1f9      	bne.n	8008bf8 <_svfiprintf_r+0x50>
 8008c04:	ebba 0b04 	subs.w	fp, sl, r4
 8008c08:	d00b      	beq.n	8008c22 <_svfiprintf_r+0x7a>
 8008c0a:	465b      	mov	r3, fp
 8008c0c:	4622      	mov	r2, r4
 8008c0e:	4629      	mov	r1, r5
 8008c10:	4638      	mov	r0, r7
 8008c12:	f7ff ff6d 	bl	8008af0 <__ssputs_r>
 8008c16:	3001      	adds	r0, #1
 8008c18:	f000 80aa 	beq.w	8008d70 <_svfiprintf_r+0x1c8>
 8008c1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c1e:	445a      	add	r2, fp
 8008c20:	9209      	str	r2, [sp, #36]	; 0x24
 8008c22:	f89a 3000 	ldrb.w	r3, [sl]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	f000 80a2 	beq.w	8008d70 <_svfiprintf_r+0x1c8>
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c36:	f10a 0a01 	add.w	sl, sl, #1
 8008c3a:	9304      	str	r3, [sp, #16]
 8008c3c:	9307      	str	r3, [sp, #28]
 8008c3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c42:	931a      	str	r3, [sp, #104]	; 0x68
 8008c44:	4654      	mov	r4, sl
 8008c46:	2205      	movs	r2, #5
 8008c48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c4c:	4851      	ldr	r0, [pc, #324]	; (8008d94 <_svfiprintf_r+0x1ec>)
 8008c4e:	f7ff fac1 	bl	80081d4 <memchr>
 8008c52:	9a04      	ldr	r2, [sp, #16]
 8008c54:	b9d8      	cbnz	r0, 8008c8e <_svfiprintf_r+0xe6>
 8008c56:	06d0      	lsls	r0, r2, #27
 8008c58:	bf44      	itt	mi
 8008c5a:	2320      	movmi	r3, #32
 8008c5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c60:	0711      	lsls	r1, r2, #28
 8008c62:	bf44      	itt	mi
 8008c64:	232b      	movmi	r3, #43	; 0x2b
 8008c66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c6a:	f89a 3000 	ldrb.w	r3, [sl]
 8008c6e:	2b2a      	cmp	r3, #42	; 0x2a
 8008c70:	d015      	beq.n	8008c9e <_svfiprintf_r+0xf6>
 8008c72:	4654      	mov	r4, sl
 8008c74:	2000      	movs	r0, #0
 8008c76:	f04f 0c0a 	mov.w	ip, #10
 8008c7a:	9a07      	ldr	r2, [sp, #28]
 8008c7c:	4621      	mov	r1, r4
 8008c7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c82:	3b30      	subs	r3, #48	; 0x30
 8008c84:	2b09      	cmp	r3, #9
 8008c86:	d94e      	bls.n	8008d26 <_svfiprintf_r+0x17e>
 8008c88:	b1b0      	cbz	r0, 8008cb8 <_svfiprintf_r+0x110>
 8008c8a:	9207      	str	r2, [sp, #28]
 8008c8c:	e014      	b.n	8008cb8 <_svfiprintf_r+0x110>
 8008c8e:	eba0 0308 	sub.w	r3, r0, r8
 8008c92:	fa09 f303 	lsl.w	r3, r9, r3
 8008c96:	4313      	orrs	r3, r2
 8008c98:	46a2      	mov	sl, r4
 8008c9a:	9304      	str	r3, [sp, #16]
 8008c9c:	e7d2      	b.n	8008c44 <_svfiprintf_r+0x9c>
 8008c9e:	9b03      	ldr	r3, [sp, #12]
 8008ca0:	1d19      	adds	r1, r3, #4
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	9103      	str	r1, [sp, #12]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	bfbb      	ittet	lt
 8008caa:	425b      	neglt	r3, r3
 8008cac:	f042 0202 	orrlt.w	r2, r2, #2
 8008cb0:	9307      	strge	r3, [sp, #28]
 8008cb2:	9307      	strlt	r3, [sp, #28]
 8008cb4:	bfb8      	it	lt
 8008cb6:	9204      	strlt	r2, [sp, #16]
 8008cb8:	7823      	ldrb	r3, [r4, #0]
 8008cba:	2b2e      	cmp	r3, #46	; 0x2e
 8008cbc:	d10c      	bne.n	8008cd8 <_svfiprintf_r+0x130>
 8008cbe:	7863      	ldrb	r3, [r4, #1]
 8008cc0:	2b2a      	cmp	r3, #42	; 0x2a
 8008cc2:	d135      	bne.n	8008d30 <_svfiprintf_r+0x188>
 8008cc4:	9b03      	ldr	r3, [sp, #12]
 8008cc6:	3402      	adds	r4, #2
 8008cc8:	1d1a      	adds	r2, r3, #4
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	9203      	str	r2, [sp, #12]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	bfb8      	it	lt
 8008cd2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008cd6:	9305      	str	r3, [sp, #20]
 8008cd8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008d98 <_svfiprintf_r+0x1f0>
 8008cdc:	2203      	movs	r2, #3
 8008cde:	4650      	mov	r0, sl
 8008ce0:	7821      	ldrb	r1, [r4, #0]
 8008ce2:	f7ff fa77 	bl	80081d4 <memchr>
 8008ce6:	b140      	cbz	r0, 8008cfa <_svfiprintf_r+0x152>
 8008ce8:	2340      	movs	r3, #64	; 0x40
 8008cea:	eba0 000a 	sub.w	r0, r0, sl
 8008cee:	fa03 f000 	lsl.w	r0, r3, r0
 8008cf2:	9b04      	ldr	r3, [sp, #16]
 8008cf4:	3401      	adds	r4, #1
 8008cf6:	4303      	orrs	r3, r0
 8008cf8:	9304      	str	r3, [sp, #16]
 8008cfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cfe:	2206      	movs	r2, #6
 8008d00:	4826      	ldr	r0, [pc, #152]	; (8008d9c <_svfiprintf_r+0x1f4>)
 8008d02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d06:	f7ff fa65 	bl	80081d4 <memchr>
 8008d0a:	2800      	cmp	r0, #0
 8008d0c:	d038      	beq.n	8008d80 <_svfiprintf_r+0x1d8>
 8008d0e:	4b24      	ldr	r3, [pc, #144]	; (8008da0 <_svfiprintf_r+0x1f8>)
 8008d10:	bb1b      	cbnz	r3, 8008d5a <_svfiprintf_r+0x1b2>
 8008d12:	9b03      	ldr	r3, [sp, #12]
 8008d14:	3307      	adds	r3, #7
 8008d16:	f023 0307 	bic.w	r3, r3, #7
 8008d1a:	3308      	adds	r3, #8
 8008d1c:	9303      	str	r3, [sp, #12]
 8008d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d20:	4433      	add	r3, r6
 8008d22:	9309      	str	r3, [sp, #36]	; 0x24
 8008d24:	e767      	b.n	8008bf6 <_svfiprintf_r+0x4e>
 8008d26:	460c      	mov	r4, r1
 8008d28:	2001      	movs	r0, #1
 8008d2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d2e:	e7a5      	b.n	8008c7c <_svfiprintf_r+0xd4>
 8008d30:	2300      	movs	r3, #0
 8008d32:	f04f 0c0a 	mov.w	ip, #10
 8008d36:	4619      	mov	r1, r3
 8008d38:	3401      	adds	r4, #1
 8008d3a:	9305      	str	r3, [sp, #20]
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d42:	3a30      	subs	r2, #48	; 0x30
 8008d44:	2a09      	cmp	r2, #9
 8008d46:	d903      	bls.n	8008d50 <_svfiprintf_r+0x1a8>
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d0c5      	beq.n	8008cd8 <_svfiprintf_r+0x130>
 8008d4c:	9105      	str	r1, [sp, #20]
 8008d4e:	e7c3      	b.n	8008cd8 <_svfiprintf_r+0x130>
 8008d50:	4604      	mov	r4, r0
 8008d52:	2301      	movs	r3, #1
 8008d54:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d58:	e7f0      	b.n	8008d3c <_svfiprintf_r+0x194>
 8008d5a:	ab03      	add	r3, sp, #12
 8008d5c:	9300      	str	r3, [sp, #0]
 8008d5e:	462a      	mov	r2, r5
 8008d60:	4638      	mov	r0, r7
 8008d62:	4b10      	ldr	r3, [pc, #64]	; (8008da4 <_svfiprintf_r+0x1fc>)
 8008d64:	a904      	add	r1, sp, #16
 8008d66:	f7fd fc4d 	bl	8006604 <_printf_float>
 8008d6a:	1c42      	adds	r2, r0, #1
 8008d6c:	4606      	mov	r6, r0
 8008d6e:	d1d6      	bne.n	8008d1e <_svfiprintf_r+0x176>
 8008d70:	89ab      	ldrh	r3, [r5, #12]
 8008d72:	065b      	lsls	r3, r3, #25
 8008d74:	f53f af2c 	bmi.w	8008bd0 <_svfiprintf_r+0x28>
 8008d78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d7a:	b01d      	add	sp, #116	; 0x74
 8008d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d80:	ab03      	add	r3, sp, #12
 8008d82:	9300      	str	r3, [sp, #0]
 8008d84:	462a      	mov	r2, r5
 8008d86:	4638      	mov	r0, r7
 8008d88:	4b06      	ldr	r3, [pc, #24]	; (8008da4 <_svfiprintf_r+0x1fc>)
 8008d8a:	a904      	add	r1, sp, #16
 8008d8c:	f7fd fed6 	bl	8006b3c <_printf_i>
 8008d90:	e7eb      	b.n	8008d6a <_svfiprintf_r+0x1c2>
 8008d92:	bf00      	nop
 8008d94:	080097a4 	.word	0x080097a4
 8008d98:	080097aa 	.word	0x080097aa
 8008d9c:	080097ae 	.word	0x080097ae
 8008da0:	08006605 	.word	0x08006605
 8008da4:	08008af1 	.word	0x08008af1

08008da8 <__sfputc_r>:
 8008da8:	6893      	ldr	r3, [r2, #8]
 8008daa:	b410      	push	{r4}
 8008dac:	3b01      	subs	r3, #1
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	6093      	str	r3, [r2, #8]
 8008db2:	da07      	bge.n	8008dc4 <__sfputc_r+0x1c>
 8008db4:	6994      	ldr	r4, [r2, #24]
 8008db6:	42a3      	cmp	r3, r4
 8008db8:	db01      	blt.n	8008dbe <__sfputc_r+0x16>
 8008dba:	290a      	cmp	r1, #10
 8008dbc:	d102      	bne.n	8008dc4 <__sfputc_r+0x1c>
 8008dbe:	bc10      	pop	{r4}
 8008dc0:	f7fe b8a4 	b.w	8006f0c <__swbuf_r>
 8008dc4:	6813      	ldr	r3, [r2, #0]
 8008dc6:	1c58      	adds	r0, r3, #1
 8008dc8:	6010      	str	r0, [r2, #0]
 8008dca:	7019      	strb	r1, [r3, #0]
 8008dcc:	4608      	mov	r0, r1
 8008dce:	bc10      	pop	{r4}
 8008dd0:	4770      	bx	lr

08008dd2 <__sfputs_r>:
 8008dd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dd4:	4606      	mov	r6, r0
 8008dd6:	460f      	mov	r7, r1
 8008dd8:	4614      	mov	r4, r2
 8008dda:	18d5      	adds	r5, r2, r3
 8008ddc:	42ac      	cmp	r4, r5
 8008dde:	d101      	bne.n	8008de4 <__sfputs_r+0x12>
 8008de0:	2000      	movs	r0, #0
 8008de2:	e007      	b.n	8008df4 <__sfputs_r+0x22>
 8008de4:	463a      	mov	r2, r7
 8008de6:	4630      	mov	r0, r6
 8008de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dec:	f7ff ffdc 	bl	8008da8 <__sfputc_r>
 8008df0:	1c43      	adds	r3, r0, #1
 8008df2:	d1f3      	bne.n	8008ddc <__sfputs_r+0xa>
 8008df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008df8 <_vfiprintf_r>:
 8008df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dfc:	460d      	mov	r5, r1
 8008dfe:	4614      	mov	r4, r2
 8008e00:	4698      	mov	r8, r3
 8008e02:	4606      	mov	r6, r0
 8008e04:	b09d      	sub	sp, #116	; 0x74
 8008e06:	b118      	cbz	r0, 8008e10 <_vfiprintf_r+0x18>
 8008e08:	6983      	ldr	r3, [r0, #24]
 8008e0a:	b90b      	cbnz	r3, 8008e10 <_vfiprintf_r+0x18>
 8008e0c:	f7ff f8d0 	bl	8007fb0 <__sinit>
 8008e10:	4b89      	ldr	r3, [pc, #548]	; (8009038 <_vfiprintf_r+0x240>)
 8008e12:	429d      	cmp	r5, r3
 8008e14:	d11b      	bne.n	8008e4e <_vfiprintf_r+0x56>
 8008e16:	6875      	ldr	r5, [r6, #4]
 8008e18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e1a:	07d9      	lsls	r1, r3, #31
 8008e1c:	d405      	bmi.n	8008e2a <_vfiprintf_r+0x32>
 8008e1e:	89ab      	ldrh	r3, [r5, #12]
 8008e20:	059a      	lsls	r2, r3, #22
 8008e22:	d402      	bmi.n	8008e2a <_vfiprintf_r+0x32>
 8008e24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e26:	f7ff f966 	bl	80080f6 <__retarget_lock_acquire_recursive>
 8008e2a:	89ab      	ldrh	r3, [r5, #12]
 8008e2c:	071b      	lsls	r3, r3, #28
 8008e2e:	d501      	bpl.n	8008e34 <_vfiprintf_r+0x3c>
 8008e30:	692b      	ldr	r3, [r5, #16]
 8008e32:	b9eb      	cbnz	r3, 8008e70 <_vfiprintf_r+0x78>
 8008e34:	4629      	mov	r1, r5
 8008e36:	4630      	mov	r0, r6
 8008e38:	f7fe f8ba 	bl	8006fb0 <__swsetup_r>
 8008e3c:	b1c0      	cbz	r0, 8008e70 <_vfiprintf_r+0x78>
 8008e3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e40:	07dc      	lsls	r4, r3, #31
 8008e42:	d50e      	bpl.n	8008e62 <_vfiprintf_r+0x6a>
 8008e44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e48:	b01d      	add	sp, #116	; 0x74
 8008e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e4e:	4b7b      	ldr	r3, [pc, #492]	; (800903c <_vfiprintf_r+0x244>)
 8008e50:	429d      	cmp	r5, r3
 8008e52:	d101      	bne.n	8008e58 <_vfiprintf_r+0x60>
 8008e54:	68b5      	ldr	r5, [r6, #8]
 8008e56:	e7df      	b.n	8008e18 <_vfiprintf_r+0x20>
 8008e58:	4b79      	ldr	r3, [pc, #484]	; (8009040 <_vfiprintf_r+0x248>)
 8008e5a:	429d      	cmp	r5, r3
 8008e5c:	bf08      	it	eq
 8008e5e:	68f5      	ldreq	r5, [r6, #12]
 8008e60:	e7da      	b.n	8008e18 <_vfiprintf_r+0x20>
 8008e62:	89ab      	ldrh	r3, [r5, #12]
 8008e64:	0598      	lsls	r0, r3, #22
 8008e66:	d4ed      	bmi.n	8008e44 <_vfiprintf_r+0x4c>
 8008e68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e6a:	f7ff f945 	bl	80080f8 <__retarget_lock_release_recursive>
 8008e6e:	e7e9      	b.n	8008e44 <_vfiprintf_r+0x4c>
 8008e70:	2300      	movs	r3, #0
 8008e72:	9309      	str	r3, [sp, #36]	; 0x24
 8008e74:	2320      	movs	r3, #32
 8008e76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e7a:	2330      	movs	r3, #48	; 0x30
 8008e7c:	f04f 0901 	mov.w	r9, #1
 8008e80:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e84:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009044 <_vfiprintf_r+0x24c>
 8008e88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e8c:	4623      	mov	r3, r4
 8008e8e:	469a      	mov	sl, r3
 8008e90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e94:	b10a      	cbz	r2, 8008e9a <_vfiprintf_r+0xa2>
 8008e96:	2a25      	cmp	r2, #37	; 0x25
 8008e98:	d1f9      	bne.n	8008e8e <_vfiprintf_r+0x96>
 8008e9a:	ebba 0b04 	subs.w	fp, sl, r4
 8008e9e:	d00b      	beq.n	8008eb8 <_vfiprintf_r+0xc0>
 8008ea0:	465b      	mov	r3, fp
 8008ea2:	4622      	mov	r2, r4
 8008ea4:	4629      	mov	r1, r5
 8008ea6:	4630      	mov	r0, r6
 8008ea8:	f7ff ff93 	bl	8008dd2 <__sfputs_r>
 8008eac:	3001      	adds	r0, #1
 8008eae:	f000 80aa 	beq.w	8009006 <_vfiprintf_r+0x20e>
 8008eb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008eb4:	445a      	add	r2, fp
 8008eb6:	9209      	str	r2, [sp, #36]	; 0x24
 8008eb8:	f89a 3000 	ldrb.w	r3, [sl]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	f000 80a2 	beq.w	8009006 <_vfiprintf_r+0x20e>
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ec8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ecc:	f10a 0a01 	add.w	sl, sl, #1
 8008ed0:	9304      	str	r3, [sp, #16]
 8008ed2:	9307      	str	r3, [sp, #28]
 8008ed4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ed8:	931a      	str	r3, [sp, #104]	; 0x68
 8008eda:	4654      	mov	r4, sl
 8008edc:	2205      	movs	r2, #5
 8008ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ee2:	4858      	ldr	r0, [pc, #352]	; (8009044 <_vfiprintf_r+0x24c>)
 8008ee4:	f7ff f976 	bl	80081d4 <memchr>
 8008ee8:	9a04      	ldr	r2, [sp, #16]
 8008eea:	b9d8      	cbnz	r0, 8008f24 <_vfiprintf_r+0x12c>
 8008eec:	06d1      	lsls	r1, r2, #27
 8008eee:	bf44      	itt	mi
 8008ef0:	2320      	movmi	r3, #32
 8008ef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ef6:	0713      	lsls	r3, r2, #28
 8008ef8:	bf44      	itt	mi
 8008efa:	232b      	movmi	r3, #43	; 0x2b
 8008efc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f00:	f89a 3000 	ldrb.w	r3, [sl]
 8008f04:	2b2a      	cmp	r3, #42	; 0x2a
 8008f06:	d015      	beq.n	8008f34 <_vfiprintf_r+0x13c>
 8008f08:	4654      	mov	r4, sl
 8008f0a:	2000      	movs	r0, #0
 8008f0c:	f04f 0c0a 	mov.w	ip, #10
 8008f10:	9a07      	ldr	r2, [sp, #28]
 8008f12:	4621      	mov	r1, r4
 8008f14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f18:	3b30      	subs	r3, #48	; 0x30
 8008f1a:	2b09      	cmp	r3, #9
 8008f1c:	d94e      	bls.n	8008fbc <_vfiprintf_r+0x1c4>
 8008f1e:	b1b0      	cbz	r0, 8008f4e <_vfiprintf_r+0x156>
 8008f20:	9207      	str	r2, [sp, #28]
 8008f22:	e014      	b.n	8008f4e <_vfiprintf_r+0x156>
 8008f24:	eba0 0308 	sub.w	r3, r0, r8
 8008f28:	fa09 f303 	lsl.w	r3, r9, r3
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	46a2      	mov	sl, r4
 8008f30:	9304      	str	r3, [sp, #16]
 8008f32:	e7d2      	b.n	8008eda <_vfiprintf_r+0xe2>
 8008f34:	9b03      	ldr	r3, [sp, #12]
 8008f36:	1d19      	adds	r1, r3, #4
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	9103      	str	r1, [sp, #12]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	bfbb      	ittet	lt
 8008f40:	425b      	neglt	r3, r3
 8008f42:	f042 0202 	orrlt.w	r2, r2, #2
 8008f46:	9307      	strge	r3, [sp, #28]
 8008f48:	9307      	strlt	r3, [sp, #28]
 8008f4a:	bfb8      	it	lt
 8008f4c:	9204      	strlt	r2, [sp, #16]
 8008f4e:	7823      	ldrb	r3, [r4, #0]
 8008f50:	2b2e      	cmp	r3, #46	; 0x2e
 8008f52:	d10c      	bne.n	8008f6e <_vfiprintf_r+0x176>
 8008f54:	7863      	ldrb	r3, [r4, #1]
 8008f56:	2b2a      	cmp	r3, #42	; 0x2a
 8008f58:	d135      	bne.n	8008fc6 <_vfiprintf_r+0x1ce>
 8008f5a:	9b03      	ldr	r3, [sp, #12]
 8008f5c:	3402      	adds	r4, #2
 8008f5e:	1d1a      	adds	r2, r3, #4
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	9203      	str	r2, [sp, #12]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	bfb8      	it	lt
 8008f68:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008f6c:	9305      	str	r3, [sp, #20]
 8008f6e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009048 <_vfiprintf_r+0x250>
 8008f72:	2203      	movs	r2, #3
 8008f74:	4650      	mov	r0, sl
 8008f76:	7821      	ldrb	r1, [r4, #0]
 8008f78:	f7ff f92c 	bl	80081d4 <memchr>
 8008f7c:	b140      	cbz	r0, 8008f90 <_vfiprintf_r+0x198>
 8008f7e:	2340      	movs	r3, #64	; 0x40
 8008f80:	eba0 000a 	sub.w	r0, r0, sl
 8008f84:	fa03 f000 	lsl.w	r0, r3, r0
 8008f88:	9b04      	ldr	r3, [sp, #16]
 8008f8a:	3401      	adds	r4, #1
 8008f8c:	4303      	orrs	r3, r0
 8008f8e:	9304      	str	r3, [sp, #16]
 8008f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f94:	2206      	movs	r2, #6
 8008f96:	482d      	ldr	r0, [pc, #180]	; (800904c <_vfiprintf_r+0x254>)
 8008f98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f9c:	f7ff f91a 	bl	80081d4 <memchr>
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	d03f      	beq.n	8009024 <_vfiprintf_r+0x22c>
 8008fa4:	4b2a      	ldr	r3, [pc, #168]	; (8009050 <_vfiprintf_r+0x258>)
 8008fa6:	bb1b      	cbnz	r3, 8008ff0 <_vfiprintf_r+0x1f8>
 8008fa8:	9b03      	ldr	r3, [sp, #12]
 8008faa:	3307      	adds	r3, #7
 8008fac:	f023 0307 	bic.w	r3, r3, #7
 8008fb0:	3308      	adds	r3, #8
 8008fb2:	9303      	str	r3, [sp, #12]
 8008fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fb6:	443b      	add	r3, r7
 8008fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8008fba:	e767      	b.n	8008e8c <_vfiprintf_r+0x94>
 8008fbc:	460c      	mov	r4, r1
 8008fbe:	2001      	movs	r0, #1
 8008fc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fc4:	e7a5      	b.n	8008f12 <_vfiprintf_r+0x11a>
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	f04f 0c0a 	mov.w	ip, #10
 8008fcc:	4619      	mov	r1, r3
 8008fce:	3401      	adds	r4, #1
 8008fd0:	9305      	str	r3, [sp, #20]
 8008fd2:	4620      	mov	r0, r4
 8008fd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fd8:	3a30      	subs	r2, #48	; 0x30
 8008fda:	2a09      	cmp	r2, #9
 8008fdc:	d903      	bls.n	8008fe6 <_vfiprintf_r+0x1ee>
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d0c5      	beq.n	8008f6e <_vfiprintf_r+0x176>
 8008fe2:	9105      	str	r1, [sp, #20]
 8008fe4:	e7c3      	b.n	8008f6e <_vfiprintf_r+0x176>
 8008fe6:	4604      	mov	r4, r0
 8008fe8:	2301      	movs	r3, #1
 8008fea:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fee:	e7f0      	b.n	8008fd2 <_vfiprintf_r+0x1da>
 8008ff0:	ab03      	add	r3, sp, #12
 8008ff2:	9300      	str	r3, [sp, #0]
 8008ff4:	462a      	mov	r2, r5
 8008ff6:	4630      	mov	r0, r6
 8008ff8:	4b16      	ldr	r3, [pc, #88]	; (8009054 <_vfiprintf_r+0x25c>)
 8008ffa:	a904      	add	r1, sp, #16
 8008ffc:	f7fd fb02 	bl	8006604 <_printf_float>
 8009000:	4607      	mov	r7, r0
 8009002:	1c78      	adds	r0, r7, #1
 8009004:	d1d6      	bne.n	8008fb4 <_vfiprintf_r+0x1bc>
 8009006:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009008:	07d9      	lsls	r1, r3, #31
 800900a:	d405      	bmi.n	8009018 <_vfiprintf_r+0x220>
 800900c:	89ab      	ldrh	r3, [r5, #12]
 800900e:	059a      	lsls	r2, r3, #22
 8009010:	d402      	bmi.n	8009018 <_vfiprintf_r+0x220>
 8009012:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009014:	f7ff f870 	bl	80080f8 <__retarget_lock_release_recursive>
 8009018:	89ab      	ldrh	r3, [r5, #12]
 800901a:	065b      	lsls	r3, r3, #25
 800901c:	f53f af12 	bmi.w	8008e44 <_vfiprintf_r+0x4c>
 8009020:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009022:	e711      	b.n	8008e48 <_vfiprintf_r+0x50>
 8009024:	ab03      	add	r3, sp, #12
 8009026:	9300      	str	r3, [sp, #0]
 8009028:	462a      	mov	r2, r5
 800902a:	4630      	mov	r0, r6
 800902c:	4b09      	ldr	r3, [pc, #36]	; (8009054 <_vfiprintf_r+0x25c>)
 800902e:	a904      	add	r1, sp, #16
 8009030:	f7fd fd84 	bl	8006b3c <_printf_i>
 8009034:	e7e4      	b.n	8009000 <_vfiprintf_r+0x208>
 8009036:	bf00      	nop
 8009038:	08009608 	.word	0x08009608
 800903c:	08009628 	.word	0x08009628
 8009040:	080095e8 	.word	0x080095e8
 8009044:	080097a4 	.word	0x080097a4
 8009048:	080097aa 	.word	0x080097aa
 800904c:	080097ae 	.word	0x080097ae
 8009050:	08006605 	.word	0x08006605
 8009054:	08008dd3 	.word	0x08008dd3

08009058 <_putc_r>:
 8009058:	b570      	push	{r4, r5, r6, lr}
 800905a:	460d      	mov	r5, r1
 800905c:	4614      	mov	r4, r2
 800905e:	4606      	mov	r6, r0
 8009060:	b118      	cbz	r0, 800906a <_putc_r+0x12>
 8009062:	6983      	ldr	r3, [r0, #24]
 8009064:	b90b      	cbnz	r3, 800906a <_putc_r+0x12>
 8009066:	f7fe ffa3 	bl	8007fb0 <__sinit>
 800906a:	4b1c      	ldr	r3, [pc, #112]	; (80090dc <_putc_r+0x84>)
 800906c:	429c      	cmp	r4, r3
 800906e:	d124      	bne.n	80090ba <_putc_r+0x62>
 8009070:	6874      	ldr	r4, [r6, #4]
 8009072:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009074:	07d8      	lsls	r0, r3, #31
 8009076:	d405      	bmi.n	8009084 <_putc_r+0x2c>
 8009078:	89a3      	ldrh	r3, [r4, #12]
 800907a:	0599      	lsls	r1, r3, #22
 800907c:	d402      	bmi.n	8009084 <_putc_r+0x2c>
 800907e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009080:	f7ff f839 	bl	80080f6 <__retarget_lock_acquire_recursive>
 8009084:	68a3      	ldr	r3, [r4, #8]
 8009086:	3b01      	subs	r3, #1
 8009088:	2b00      	cmp	r3, #0
 800908a:	60a3      	str	r3, [r4, #8]
 800908c:	da05      	bge.n	800909a <_putc_r+0x42>
 800908e:	69a2      	ldr	r2, [r4, #24]
 8009090:	4293      	cmp	r3, r2
 8009092:	db1c      	blt.n	80090ce <_putc_r+0x76>
 8009094:	b2eb      	uxtb	r3, r5
 8009096:	2b0a      	cmp	r3, #10
 8009098:	d019      	beq.n	80090ce <_putc_r+0x76>
 800909a:	6823      	ldr	r3, [r4, #0]
 800909c:	1c5a      	adds	r2, r3, #1
 800909e:	6022      	str	r2, [r4, #0]
 80090a0:	701d      	strb	r5, [r3, #0]
 80090a2:	b2ed      	uxtb	r5, r5
 80090a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090a6:	07da      	lsls	r2, r3, #31
 80090a8:	d405      	bmi.n	80090b6 <_putc_r+0x5e>
 80090aa:	89a3      	ldrh	r3, [r4, #12]
 80090ac:	059b      	lsls	r3, r3, #22
 80090ae:	d402      	bmi.n	80090b6 <_putc_r+0x5e>
 80090b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090b2:	f7ff f821 	bl	80080f8 <__retarget_lock_release_recursive>
 80090b6:	4628      	mov	r0, r5
 80090b8:	bd70      	pop	{r4, r5, r6, pc}
 80090ba:	4b09      	ldr	r3, [pc, #36]	; (80090e0 <_putc_r+0x88>)
 80090bc:	429c      	cmp	r4, r3
 80090be:	d101      	bne.n	80090c4 <_putc_r+0x6c>
 80090c0:	68b4      	ldr	r4, [r6, #8]
 80090c2:	e7d6      	b.n	8009072 <_putc_r+0x1a>
 80090c4:	4b07      	ldr	r3, [pc, #28]	; (80090e4 <_putc_r+0x8c>)
 80090c6:	429c      	cmp	r4, r3
 80090c8:	bf08      	it	eq
 80090ca:	68f4      	ldreq	r4, [r6, #12]
 80090cc:	e7d1      	b.n	8009072 <_putc_r+0x1a>
 80090ce:	4629      	mov	r1, r5
 80090d0:	4622      	mov	r2, r4
 80090d2:	4630      	mov	r0, r6
 80090d4:	f7fd ff1a 	bl	8006f0c <__swbuf_r>
 80090d8:	4605      	mov	r5, r0
 80090da:	e7e3      	b.n	80090a4 <_putc_r+0x4c>
 80090dc:	08009608 	.word	0x08009608
 80090e0:	08009628 	.word	0x08009628
 80090e4:	080095e8 	.word	0x080095e8

080090e8 <_sbrk_r>:
 80090e8:	b538      	push	{r3, r4, r5, lr}
 80090ea:	2300      	movs	r3, #0
 80090ec:	4d05      	ldr	r5, [pc, #20]	; (8009104 <_sbrk_r+0x1c>)
 80090ee:	4604      	mov	r4, r0
 80090f0:	4608      	mov	r0, r1
 80090f2:	602b      	str	r3, [r5, #0]
 80090f4:	f7f8 fd34 	bl	8001b60 <_sbrk>
 80090f8:	1c43      	adds	r3, r0, #1
 80090fa:	d102      	bne.n	8009102 <_sbrk_r+0x1a>
 80090fc:	682b      	ldr	r3, [r5, #0]
 80090fe:	b103      	cbz	r3, 8009102 <_sbrk_r+0x1a>
 8009100:	6023      	str	r3, [r4, #0]
 8009102:	bd38      	pop	{r3, r4, r5, pc}
 8009104:	200006e0 	.word	0x200006e0

08009108 <__sread>:
 8009108:	b510      	push	{r4, lr}
 800910a:	460c      	mov	r4, r1
 800910c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009110:	f000 f92c 	bl	800936c <_read_r>
 8009114:	2800      	cmp	r0, #0
 8009116:	bfab      	itete	ge
 8009118:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800911a:	89a3      	ldrhlt	r3, [r4, #12]
 800911c:	181b      	addge	r3, r3, r0
 800911e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009122:	bfac      	ite	ge
 8009124:	6563      	strge	r3, [r4, #84]	; 0x54
 8009126:	81a3      	strhlt	r3, [r4, #12]
 8009128:	bd10      	pop	{r4, pc}

0800912a <__swrite>:
 800912a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800912e:	461f      	mov	r7, r3
 8009130:	898b      	ldrh	r3, [r1, #12]
 8009132:	4605      	mov	r5, r0
 8009134:	05db      	lsls	r3, r3, #23
 8009136:	460c      	mov	r4, r1
 8009138:	4616      	mov	r6, r2
 800913a:	d505      	bpl.n	8009148 <__swrite+0x1e>
 800913c:	2302      	movs	r3, #2
 800913e:	2200      	movs	r2, #0
 8009140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009144:	f000 f898 	bl	8009278 <_lseek_r>
 8009148:	89a3      	ldrh	r3, [r4, #12]
 800914a:	4632      	mov	r2, r6
 800914c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009150:	81a3      	strh	r3, [r4, #12]
 8009152:	4628      	mov	r0, r5
 8009154:	463b      	mov	r3, r7
 8009156:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800915a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800915e:	f000 b817 	b.w	8009190 <_write_r>

08009162 <__sseek>:
 8009162:	b510      	push	{r4, lr}
 8009164:	460c      	mov	r4, r1
 8009166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800916a:	f000 f885 	bl	8009278 <_lseek_r>
 800916e:	1c43      	adds	r3, r0, #1
 8009170:	89a3      	ldrh	r3, [r4, #12]
 8009172:	bf15      	itete	ne
 8009174:	6560      	strne	r0, [r4, #84]	; 0x54
 8009176:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800917a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800917e:	81a3      	strheq	r3, [r4, #12]
 8009180:	bf18      	it	ne
 8009182:	81a3      	strhne	r3, [r4, #12]
 8009184:	bd10      	pop	{r4, pc}

08009186 <__sclose>:
 8009186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800918a:	f000 b831 	b.w	80091f0 <_close_r>
	...

08009190 <_write_r>:
 8009190:	b538      	push	{r3, r4, r5, lr}
 8009192:	4604      	mov	r4, r0
 8009194:	4608      	mov	r0, r1
 8009196:	4611      	mov	r1, r2
 8009198:	2200      	movs	r2, #0
 800919a:	4d05      	ldr	r5, [pc, #20]	; (80091b0 <_write_r+0x20>)
 800919c:	602a      	str	r2, [r5, #0]
 800919e:	461a      	mov	r2, r3
 80091a0:	f7f8 fc98 	bl	8001ad4 <_write>
 80091a4:	1c43      	adds	r3, r0, #1
 80091a6:	d102      	bne.n	80091ae <_write_r+0x1e>
 80091a8:	682b      	ldr	r3, [r5, #0]
 80091aa:	b103      	cbz	r3, 80091ae <_write_r+0x1e>
 80091ac:	6023      	str	r3, [r4, #0]
 80091ae:	bd38      	pop	{r3, r4, r5, pc}
 80091b0:	200006e0 	.word	0x200006e0

080091b4 <__assert_func>:
 80091b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80091b6:	4614      	mov	r4, r2
 80091b8:	461a      	mov	r2, r3
 80091ba:	4b09      	ldr	r3, [pc, #36]	; (80091e0 <__assert_func+0x2c>)
 80091bc:	4605      	mov	r5, r0
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	68d8      	ldr	r0, [r3, #12]
 80091c2:	b14c      	cbz	r4, 80091d8 <__assert_func+0x24>
 80091c4:	4b07      	ldr	r3, [pc, #28]	; (80091e4 <__assert_func+0x30>)
 80091c6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80091ca:	9100      	str	r1, [sp, #0]
 80091cc:	462b      	mov	r3, r5
 80091ce:	4906      	ldr	r1, [pc, #24]	; (80091e8 <__assert_func+0x34>)
 80091d0:	f000 f81e 	bl	8009210 <fiprintf>
 80091d4:	f000 f8e9 	bl	80093aa <abort>
 80091d8:	4b04      	ldr	r3, [pc, #16]	; (80091ec <__assert_func+0x38>)
 80091da:	461c      	mov	r4, r3
 80091dc:	e7f3      	b.n	80091c6 <__assert_func+0x12>
 80091de:	bf00      	nop
 80091e0:	2000002c 	.word	0x2000002c
 80091e4:	080097b5 	.word	0x080097b5
 80091e8:	080097c2 	.word	0x080097c2
 80091ec:	080097f0 	.word	0x080097f0

080091f0 <_close_r>:
 80091f0:	b538      	push	{r3, r4, r5, lr}
 80091f2:	2300      	movs	r3, #0
 80091f4:	4d05      	ldr	r5, [pc, #20]	; (800920c <_close_r+0x1c>)
 80091f6:	4604      	mov	r4, r0
 80091f8:	4608      	mov	r0, r1
 80091fa:	602b      	str	r3, [r5, #0]
 80091fc:	f7f8 fc80 	bl	8001b00 <_close>
 8009200:	1c43      	adds	r3, r0, #1
 8009202:	d102      	bne.n	800920a <_close_r+0x1a>
 8009204:	682b      	ldr	r3, [r5, #0]
 8009206:	b103      	cbz	r3, 800920a <_close_r+0x1a>
 8009208:	6023      	str	r3, [r4, #0]
 800920a:	bd38      	pop	{r3, r4, r5, pc}
 800920c:	200006e0 	.word	0x200006e0

08009210 <fiprintf>:
 8009210:	b40e      	push	{r1, r2, r3}
 8009212:	b503      	push	{r0, r1, lr}
 8009214:	4601      	mov	r1, r0
 8009216:	ab03      	add	r3, sp, #12
 8009218:	4805      	ldr	r0, [pc, #20]	; (8009230 <fiprintf+0x20>)
 800921a:	f853 2b04 	ldr.w	r2, [r3], #4
 800921e:	6800      	ldr	r0, [r0, #0]
 8009220:	9301      	str	r3, [sp, #4]
 8009222:	f7ff fde9 	bl	8008df8 <_vfiprintf_r>
 8009226:	b002      	add	sp, #8
 8009228:	f85d eb04 	ldr.w	lr, [sp], #4
 800922c:	b003      	add	sp, #12
 800922e:	4770      	bx	lr
 8009230:	2000002c 	.word	0x2000002c

08009234 <_fstat_r>:
 8009234:	b538      	push	{r3, r4, r5, lr}
 8009236:	2300      	movs	r3, #0
 8009238:	4d06      	ldr	r5, [pc, #24]	; (8009254 <_fstat_r+0x20>)
 800923a:	4604      	mov	r4, r0
 800923c:	4608      	mov	r0, r1
 800923e:	4611      	mov	r1, r2
 8009240:	602b      	str	r3, [r5, #0]
 8009242:	f7f8 fc68 	bl	8001b16 <_fstat>
 8009246:	1c43      	adds	r3, r0, #1
 8009248:	d102      	bne.n	8009250 <_fstat_r+0x1c>
 800924a:	682b      	ldr	r3, [r5, #0]
 800924c:	b103      	cbz	r3, 8009250 <_fstat_r+0x1c>
 800924e:	6023      	str	r3, [r4, #0]
 8009250:	bd38      	pop	{r3, r4, r5, pc}
 8009252:	bf00      	nop
 8009254:	200006e0 	.word	0x200006e0

08009258 <_isatty_r>:
 8009258:	b538      	push	{r3, r4, r5, lr}
 800925a:	2300      	movs	r3, #0
 800925c:	4d05      	ldr	r5, [pc, #20]	; (8009274 <_isatty_r+0x1c>)
 800925e:	4604      	mov	r4, r0
 8009260:	4608      	mov	r0, r1
 8009262:	602b      	str	r3, [r5, #0]
 8009264:	f7f8 fc66 	bl	8001b34 <_isatty>
 8009268:	1c43      	adds	r3, r0, #1
 800926a:	d102      	bne.n	8009272 <_isatty_r+0x1a>
 800926c:	682b      	ldr	r3, [r5, #0]
 800926e:	b103      	cbz	r3, 8009272 <_isatty_r+0x1a>
 8009270:	6023      	str	r3, [r4, #0]
 8009272:	bd38      	pop	{r3, r4, r5, pc}
 8009274:	200006e0 	.word	0x200006e0

08009278 <_lseek_r>:
 8009278:	b538      	push	{r3, r4, r5, lr}
 800927a:	4604      	mov	r4, r0
 800927c:	4608      	mov	r0, r1
 800927e:	4611      	mov	r1, r2
 8009280:	2200      	movs	r2, #0
 8009282:	4d05      	ldr	r5, [pc, #20]	; (8009298 <_lseek_r+0x20>)
 8009284:	602a      	str	r2, [r5, #0]
 8009286:	461a      	mov	r2, r3
 8009288:	f7f8 fc5e 	bl	8001b48 <_lseek>
 800928c:	1c43      	adds	r3, r0, #1
 800928e:	d102      	bne.n	8009296 <_lseek_r+0x1e>
 8009290:	682b      	ldr	r3, [r5, #0]
 8009292:	b103      	cbz	r3, 8009296 <_lseek_r+0x1e>
 8009294:	6023      	str	r3, [r4, #0]
 8009296:	bd38      	pop	{r3, r4, r5, pc}
 8009298:	200006e0 	.word	0x200006e0

0800929c <__ascii_mbtowc>:
 800929c:	b082      	sub	sp, #8
 800929e:	b901      	cbnz	r1, 80092a2 <__ascii_mbtowc+0x6>
 80092a0:	a901      	add	r1, sp, #4
 80092a2:	b142      	cbz	r2, 80092b6 <__ascii_mbtowc+0x1a>
 80092a4:	b14b      	cbz	r3, 80092ba <__ascii_mbtowc+0x1e>
 80092a6:	7813      	ldrb	r3, [r2, #0]
 80092a8:	600b      	str	r3, [r1, #0]
 80092aa:	7812      	ldrb	r2, [r2, #0]
 80092ac:	1e10      	subs	r0, r2, #0
 80092ae:	bf18      	it	ne
 80092b0:	2001      	movne	r0, #1
 80092b2:	b002      	add	sp, #8
 80092b4:	4770      	bx	lr
 80092b6:	4610      	mov	r0, r2
 80092b8:	e7fb      	b.n	80092b2 <__ascii_mbtowc+0x16>
 80092ba:	f06f 0001 	mvn.w	r0, #1
 80092be:	e7f8      	b.n	80092b2 <__ascii_mbtowc+0x16>

080092c0 <memmove>:
 80092c0:	4288      	cmp	r0, r1
 80092c2:	b510      	push	{r4, lr}
 80092c4:	eb01 0402 	add.w	r4, r1, r2
 80092c8:	d902      	bls.n	80092d0 <memmove+0x10>
 80092ca:	4284      	cmp	r4, r0
 80092cc:	4623      	mov	r3, r4
 80092ce:	d807      	bhi.n	80092e0 <memmove+0x20>
 80092d0:	1e43      	subs	r3, r0, #1
 80092d2:	42a1      	cmp	r1, r4
 80092d4:	d008      	beq.n	80092e8 <memmove+0x28>
 80092d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80092de:	e7f8      	b.n	80092d2 <memmove+0x12>
 80092e0:	4601      	mov	r1, r0
 80092e2:	4402      	add	r2, r0
 80092e4:	428a      	cmp	r2, r1
 80092e6:	d100      	bne.n	80092ea <memmove+0x2a>
 80092e8:	bd10      	pop	{r4, pc}
 80092ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092f2:	e7f7      	b.n	80092e4 <memmove+0x24>

080092f4 <__malloc_lock>:
 80092f4:	4801      	ldr	r0, [pc, #4]	; (80092fc <__malloc_lock+0x8>)
 80092f6:	f7fe befe 	b.w	80080f6 <__retarget_lock_acquire_recursive>
 80092fa:	bf00      	nop
 80092fc:	200006d4 	.word	0x200006d4

08009300 <__malloc_unlock>:
 8009300:	4801      	ldr	r0, [pc, #4]	; (8009308 <__malloc_unlock+0x8>)
 8009302:	f7fe bef9 	b.w	80080f8 <__retarget_lock_release_recursive>
 8009306:	bf00      	nop
 8009308:	200006d4 	.word	0x200006d4

0800930c <_realloc_r>:
 800930c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009310:	4680      	mov	r8, r0
 8009312:	4614      	mov	r4, r2
 8009314:	460e      	mov	r6, r1
 8009316:	b921      	cbnz	r1, 8009322 <_realloc_r+0x16>
 8009318:	4611      	mov	r1, r2
 800931a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800931e:	f7ff bb73 	b.w	8008a08 <_malloc_r>
 8009322:	b92a      	cbnz	r2, 8009330 <_realloc_r+0x24>
 8009324:	f7ff fb08 	bl	8008938 <_free_r>
 8009328:	4625      	mov	r5, r4
 800932a:	4628      	mov	r0, r5
 800932c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009330:	f000 f842 	bl	80093b8 <_malloc_usable_size_r>
 8009334:	4284      	cmp	r4, r0
 8009336:	4607      	mov	r7, r0
 8009338:	d802      	bhi.n	8009340 <_realloc_r+0x34>
 800933a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800933e:	d812      	bhi.n	8009366 <_realloc_r+0x5a>
 8009340:	4621      	mov	r1, r4
 8009342:	4640      	mov	r0, r8
 8009344:	f7ff fb60 	bl	8008a08 <_malloc_r>
 8009348:	4605      	mov	r5, r0
 800934a:	2800      	cmp	r0, #0
 800934c:	d0ed      	beq.n	800932a <_realloc_r+0x1e>
 800934e:	42bc      	cmp	r4, r7
 8009350:	4622      	mov	r2, r4
 8009352:	4631      	mov	r1, r6
 8009354:	bf28      	it	cs
 8009356:	463a      	movcs	r2, r7
 8009358:	f7fe ff4a 	bl	80081f0 <memcpy>
 800935c:	4631      	mov	r1, r6
 800935e:	4640      	mov	r0, r8
 8009360:	f7ff faea 	bl	8008938 <_free_r>
 8009364:	e7e1      	b.n	800932a <_realloc_r+0x1e>
 8009366:	4635      	mov	r5, r6
 8009368:	e7df      	b.n	800932a <_realloc_r+0x1e>
	...

0800936c <_read_r>:
 800936c:	b538      	push	{r3, r4, r5, lr}
 800936e:	4604      	mov	r4, r0
 8009370:	4608      	mov	r0, r1
 8009372:	4611      	mov	r1, r2
 8009374:	2200      	movs	r2, #0
 8009376:	4d05      	ldr	r5, [pc, #20]	; (800938c <_read_r+0x20>)
 8009378:	602a      	str	r2, [r5, #0]
 800937a:	461a      	mov	r2, r3
 800937c:	f7f8 fb8d 	bl	8001a9a <_read>
 8009380:	1c43      	adds	r3, r0, #1
 8009382:	d102      	bne.n	800938a <_read_r+0x1e>
 8009384:	682b      	ldr	r3, [r5, #0]
 8009386:	b103      	cbz	r3, 800938a <_read_r+0x1e>
 8009388:	6023      	str	r3, [r4, #0]
 800938a:	bd38      	pop	{r3, r4, r5, pc}
 800938c:	200006e0 	.word	0x200006e0

08009390 <__ascii_wctomb>:
 8009390:	4603      	mov	r3, r0
 8009392:	4608      	mov	r0, r1
 8009394:	b141      	cbz	r1, 80093a8 <__ascii_wctomb+0x18>
 8009396:	2aff      	cmp	r2, #255	; 0xff
 8009398:	d904      	bls.n	80093a4 <__ascii_wctomb+0x14>
 800939a:	228a      	movs	r2, #138	; 0x8a
 800939c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093a0:	601a      	str	r2, [r3, #0]
 80093a2:	4770      	bx	lr
 80093a4:	2001      	movs	r0, #1
 80093a6:	700a      	strb	r2, [r1, #0]
 80093a8:	4770      	bx	lr

080093aa <abort>:
 80093aa:	2006      	movs	r0, #6
 80093ac:	b508      	push	{r3, lr}
 80093ae:	f000 f833 	bl	8009418 <raise>
 80093b2:	2001      	movs	r0, #1
 80093b4:	f7f8 fb67 	bl	8001a86 <_exit>

080093b8 <_malloc_usable_size_r>:
 80093b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093bc:	1f18      	subs	r0, r3, #4
 80093be:	2b00      	cmp	r3, #0
 80093c0:	bfbc      	itt	lt
 80093c2:	580b      	ldrlt	r3, [r1, r0]
 80093c4:	18c0      	addlt	r0, r0, r3
 80093c6:	4770      	bx	lr

080093c8 <_raise_r>:
 80093c8:	291f      	cmp	r1, #31
 80093ca:	b538      	push	{r3, r4, r5, lr}
 80093cc:	4604      	mov	r4, r0
 80093ce:	460d      	mov	r5, r1
 80093d0:	d904      	bls.n	80093dc <_raise_r+0x14>
 80093d2:	2316      	movs	r3, #22
 80093d4:	6003      	str	r3, [r0, #0]
 80093d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093da:	bd38      	pop	{r3, r4, r5, pc}
 80093dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80093de:	b112      	cbz	r2, 80093e6 <_raise_r+0x1e>
 80093e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093e4:	b94b      	cbnz	r3, 80093fa <_raise_r+0x32>
 80093e6:	4620      	mov	r0, r4
 80093e8:	f000 f830 	bl	800944c <_getpid_r>
 80093ec:	462a      	mov	r2, r5
 80093ee:	4601      	mov	r1, r0
 80093f0:	4620      	mov	r0, r4
 80093f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093f6:	f000 b817 	b.w	8009428 <_kill_r>
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d00a      	beq.n	8009414 <_raise_r+0x4c>
 80093fe:	1c59      	adds	r1, r3, #1
 8009400:	d103      	bne.n	800940a <_raise_r+0x42>
 8009402:	2316      	movs	r3, #22
 8009404:	6003      	str	r3, [r0, #0]
 8009406:	2001      	movs	r0, #1
 8009408:	e7e7      	b.n	80093da <_raise_r+0x12>
 800940a:	2400      	movs	r4, #0
 800940c:	4628      	mov	r0, r5
 800940e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009412:	4798      	blx	r3
 8009414:	2000      	movs	r0, #0
 8009416:	e7e0      	b.n	80093da <_raise_r+0x12>

08009418 <raise>:
 8009418:	4b02      	ldr	r3, [pc, #8]	; (8009424 <raise+0xc>)
 800941a:	4601      	mov	r1, r0
 800941c:	6818      	ldr	r0, [r3, #0]
 800941e:	f7ff bfd3 	b.w	80093c8 <_raise_r>
 8009422:	bf00      	nop
 8009424:	2000002c 	.word	0x2000002c

08009428 <_kill_r>:
 8009428:	b538      	push	{r3, r4, r5, lr}
 800942a:	2300      	movs	r3, #0
 800942c:	4d06      	ldr	r5, [pc, #24]	; (8009448 <_kill_r+0x20>)
 800942e:	4604      	mov	r4, r0
 8009430:	4608      	mov	r0, r1
 8009432:	4611      	mov	r1, r2
 8009434:	602b      	str	r3, [r5, #0]
 8009436:	f7f8 fb16 	bl	8001a66 <_kill>
 800943a:	1c43      	adds	r3, r0, #1
 800943c:	d102      	bne.n	8009444 <_kill_r+0x1c>
 800943e:	682b      	ldr	r3, [r5, #0]
 8009440:	b103      	cbz	r3, 8009444 <_kill_r+0x1c>
 8009442:	6023      	str	r3, [r4, #0]
 8009444:	bd38      	pop	{r3, r4, r5, pc}
 8009446:	bf00      	nop
 8009448:	200006e0 	.word	0x200006e0

0800944c <_getpid_r>:
 800944c:	f7f8 bb04 	b.w	8001a58 <_getpid>

08009450 <_init>:
 8009450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009452:	bf00      	nop
 8009454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009456:	bc08      	pop	{r3}
 8009458:	469e      	mov	lr, r3
 800945a:	4770      	bx	lr

0800945c <_fini>:
 800945c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800945e:	bf00      	nop
 8009460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009462:	bc08      	pop	{r3}
 8009464:	469e      	mov	lr, r3
 8009466:	4770      	bx	lr


UART-DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031ec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080032ac  080032ac  000132ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003318  08003318  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08003318  08003318  00013318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003320  08003320  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003320  08003320  00013320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003324  08003324  00013324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08003328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000020  08003348  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08003348  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f9b  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000169e  00000000  00000000  00028fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000738  00000000  00000000  0002a688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b0  00000000  00000000  0002adc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012be2  00000000  00000000  0002b470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000092fe  00000000  00000000  0003e052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00073c47  00000000  00000000  00047350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000baf97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018e0  00000000  00000000  000bafe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003294 	.word	0x08003294

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	08003294 	.word	0x08003294

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 fa84 	bl	80009b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f81a 	bl	80004e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f8d8 	bl	8000668 <MX_GPIO_Init>
  MX_DMA_Init();
 80004b8:	f000 f8b8 	bl	800062c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80004bc:	f000 f886 	bl	80005cc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit_DMA(&huart1, Tx_data, sizeof(Tx_data));
 80004c0:	4906      	ldr	r1, [pc, #24]	; (80004dc <main+0x34>)
 80004c2:	4b07      	ldr	r3, [pc, #28]	; (80004e0 <main+0x38>)
 80004c4:	2214      	movs	r2, #20
 80004c6:	0018      	movs	r0, r3
 80004c8:	f001 fedc 	bl	8002284 <HAL_UART_Transmit_DMA>
  HAL_UART_Receive_DMA(&huart1, Rx_data, sizeof(Rx_data));
 80004cc:	4905      	ldr	r1, [pc, #20]	; (80004e4 <main+0x3c>)
 80004ce:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <main+0x38>)
 80004d0:	2202      	movs	r2, #2
 80004d2:	0018      	movs	r0, r3
 80004d4:	f001 ff66 	bl	80023a4 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004d8:	e7fe      	b.n	80004d8 <main+0x30>
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	20000000 	.word	0x20000000
 80004e0:	2000003c 	.word	0x2000003c
 80004e4:	20000154 	.word	0x20000154

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b590      	push	{r4, r7, lr}
 80004ea:	b09d      	sub	sp, #116	; 0x74
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	2438      	movs	r4, #56	; 0x38
 80004f0:	193b      	adds	r3, r7, r4
 80004f2:	0018      	movs	r0, r3
 80004f4:	2338      	movs	r3, #56	; 0x38
 80004f6:	001a      	movs	r2, r3
 80004f8:	2100      	movs	r1, #0
 80004fa:	f002 fec3 	bl	8003284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fe:	2324      	movs	r3, #36	; 0x24
 8000500:	18fb      	adds	r3, r7, r3
 8000502:	0018      	movs	r0, r3
 8000504:	2314      	movs	r3, #20
 8000506:	001a      	movs	r2, r3
 8000508:	2100      	movs	r1, #0
 800050a:	f002 febb 	bl	8003284 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800050e:	003b      	movs	r3, r7
 8000510:	0018      	movs	r0, r3
 8000512:	2324      	movs	r3, #36	; 0x24
 8000514:	001a      	movs	r2, r3
 8000516:	2100      	movs	r1, #0
 8000518:	f002 feb4 	bl	8003284 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800051c:	4b29      	ldr	r3, [pc, #164]	; (80005c4 <SystemClock_Config+0xdc>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a29      	ldr	r2, [pc, #164]	; (80005c8 <SystemClock_Config+0xe0>)
 8000522:	401a      	ands	r2, r3
 8000524:	4b27      	ldr	r3, [pc, #156]	; (80005c4 <SystemClock_Config+0xdc>)
 8000526:	2180      	movs	r1, #128	; 0x80
 8000528:	0109      	lsls	r1, r1, #4
 800052a:	430a      	orrs	r2, r1
 800052c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800052e:	0021      	movs	r1, r4
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2202      	movs	r2, #2
 8000534:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2201      	movs	r2, #1
 800053a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2210      	movs	r2, #16
 8000540:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2202      	movs	r2, #2
 8000546:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2200      	movs	r2, #0
 800054c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2280      	movs	r2, #128	; 0x80
 8000552:	02d2      	lsls	r2, r2, #11
 8000554:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2280      	movs	r2, #128	; 0x80
 800055a:	03d2      	lsls	r2, r2, #15
 800055c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055e:	187b      	adds	r3, r7, r1
 8000560:	0018      	movs	r0, r3
 8000562:	f000 fec5 	bl	80012f0 <HAL_RCC_OscConfig>
 8000566:	1e03      	subs	r3, r0, #0
 8000568:	d001      	beq.n	800056e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800056a:	f000 f912 	bl	8000792 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056e:	2124      	movs	r1, #36	; 0x24
 8000570:	187b      	adds	r3, r7, r1
 8000572:	220f      	movs	r2, #15
 8000574:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2203      	movs	r2, #3
 800057a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2200      	movs	r2, #0
 8000586:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2200      	movs	r2, #0
 800058c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2101      	movs	r1, #1
 8000592:	0018      	movs	r0, r3
 8000594:	f001 fa70 	bl	8001a78 <HAL_RCC_ClockConfig>
 8000598:	1e03      	subs	r3, r0, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800059c:	f000 f8f9 	bl	8000792 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80005a0:	003b      	movs	r3, r7
 80005a2:	2201      	movs	r2, #1
 80005a4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005a6:	003b      	movs	r3, r7
 80005a8:	2200      	movs	r2, #0
 80005aa:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ac:	003b      	movs	r3, r7
 80005ae:	0018      	movs	r0, r3
 80005b0:	f001 fc86 	bl	8001ec0 <HAL_RCCEx_PeriphCLKConfig>
 80005b4:	1e03      	subs	r3, r0, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80005b8:	f000 f8eb 	bl	8000792 <Error_Handler>
  }
}
 80005bc:	46c0      	nop			; (mov r8, r8)
 80005be:	46bd      	mov	sp, r7
 80005c0:	b01d      	add	sp, #116	; 0x74
 80005c2:	bd90      	pop	{r4, r7, pc}
 80005c4:	40007000 	.word	0x40007000
 80005c8:	ffffe7ff 	.word	0xffffe7ff

080005cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <MX_USART1_UART_Init+0x58>)
 80005d2:	4a15      	ldr	r2, [pc, #84]	; (8000628 <MX_USART1_UART_Init+0x5c>)
 80005d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005d6:	4b13      	ldr	r3, [pc, #76]	; (8000624 <MX_USART1_UART_Init+0x58>)
 80005d8:	22e1      	movs	r2, #225	; 0xe1
 80005da:	0252      	lsls	r2, r2, #9
 80005dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005de:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_USART1_UART_Init+0x58>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <MX_USART1_UART_Init+0x58>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <MX_USART1_UART_Init+0x58>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <MX_USART1_UART_Init+0x58>)
 80005f2:	220c      	movs	r2, #12
 80005f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f6:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <MX_USART1_UART_Init+0x58>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <MX_USART1_UART_Init+0x58>)
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000602:	4b08      	ldr	r3, [pc, #32]	; (8000624 <MX_USART1_UART_Init+0x58>)
 8000604:	2200      	movs	r2, #0
 8000606:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MX_USART1_UART_Init+0x58>)
 800060a:	2200      	movs	r2, #0
 800060c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800060e:	4b05      	ldr	r3, [pc, #20]	; (8000624 <MX_USART1_UART_Init+0x58>)
 8000610:	0018      	movs	r0, r3
 8000612:	f001 fde3 	bl	80021dc <HAL_UART_Init>
 8000616:	1e03      	subs	r3, r0, #0
 8000618:	d001      	beq.n	800061e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800061a:	f000 f8ba 	bl	8000792 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	2000003c 	.word	0x2000003c
 8000628:	40013800 	.word	0x40013800

0800062c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_DMA_Init+0x38>)
 8000634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <MX_DMA_Init+0x38>)
 8000638:	2101      	movs	r1, #1
 800063a:	430a      	orrs	r2, r1
 800063c:	631a      	str	r2, [r3, #48]	; 0x30
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_DMA_Init+0x38>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	2201      	movs	r2, #1
 8000644:	4013      	ands	r3, r2
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2100      	movs	r1, #0
 800064e:	200a      	movs	r0, #10
 8000650:	f000 face 	bl	8000bf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000654:	200a      	movs	r0, #10
 8000656:	f000 fae0 	bl	8000c1a <HAL_NVIC_EnableIRQ>

}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	b002      	add	sp, #8
 8000660:	bd80      	pop	{r7, pc}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	40021000 	.word	0x40021000

08000668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000668:	b590      	push	{r4, r7, lr}
 800066a:	b08b      	sub	sp, #44	; 0x2c
 800066c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	2414      	movs	r4, #20
 8000670:	193b      	adds	r3, r7, r4
 8000672:	0018      	movs	r0, r3
 8000674:	2314      	movs	r3, #20
 8000676:	001a      	movs	r2, r3
 8000678:	2100      	movs	r1, #0
 800067a:	f002 fe03 	bl	8003284 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067e:	4b33      	ldr	r3, [pc, #204]	; (800074c <MX_GPIO_Init+0xe4>)
 8000680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000682:	4b32      	ldr	r3, [pc, #200]	; (800074c <MX_GPIO_Init+0xe4>)
 8000684:	2104      	movs	r1, #4
 8000686:	430a      	orrs	r2, r1
 8000688:	62da      	str	r2, [r3, #44]	; 0x2c
 800068a:	4b30      	ldr	r3, [pc, #192]	; (800074c <MX_GPIO_Init+0xe4>)
 800068c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800068e:	2204      	movs	r2, #4
 8000690:	4013      	ands	r3, r2
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000696:	4b2d      	ldr	r3, [pc, #180]	; (800074c <MX_GPIO_Init+0xe4>)
 8000698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800069a:	4b2c      	ldr	r3, [pc, #176]	; (800074c <MX_GPIO_Init+0xe4>)
 800069c:	2180      	movs	r1, #128	; 0x80
 800069e:	430a      	orrs	r2, r1
 80006a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80006a2:	4b2a      	ldr	r3, [pc, #168]	; (800074c <MX_GPIO_Init+0xe4>)
 80006a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006a6:	2280      	movs	r2, #128	; 0x80
 80006a8:	4013      	ands	r3, r2
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	4b27      	ldr	r3, [pc, #156]	; (800074c <MX_GPIO_Init+0xe4>)
 80006b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006b2:	4b26      	ldr	r3, [pc, #152]	; (800074c <MX_GPIO_Init+0xe4>)
 80006b4:	2101      	movs	r1, #1
 80006b6:	430a      	orrs	r2, r1
 80006b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80006ba:	4b24      	ldr	r3, [pc, #144]	; (800074c <MX_GPIO_Init+0xe4>)
 80006bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006be:	2201      	movs	r2, #1
 80006c0:	4013      	ands	r3, r2
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c6:	4b21      	ldr	r3, [pc, #132]	; (800074c <MX_GPIO_Init+0xe4>)
 80006c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006ca:	4b20      	ldr	r3, [pc, #128]	; (800074c <MX_GPIO_Init+0xe4>)
 80006cc:	2102      	movs	r1, #2
 80006ce:	430a      	orrs	r2, r1
 80006d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80006d2:	4b1e      	ldr	r3, [pc, #120]	; (800074c <MX_GPIO_Init+0xe4>)
 80006d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006d6:	2202      	movs	r2, #2
 80006d8:	4013      	ands	r3, r2
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_RED_LED_GPIO_Port, BSP_RED_LED_Pin, GPIO_PIN_RESET);
 80006de:	23a0      	movs	r3, #160	; 0xa0
 80006e0:	05db      	lsls	r3, r3, #23
 80006e2:	2200      	movs	r2, #0
 80006e4:	2120      	movs	r1, #32
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 fde4 	bl	80012b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_GREEN_LED_GPIO_Port, BSP_GREEN_LED_Pin, GPIO_PIN_RESET);
 80006ec:	4b18      	ldr	r3, [pc, #96]	; (8000750 <MX_GPIO_Init+0xe8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	2110      	movs	r1, #16
 80006f2:	0018      	movs	r0, r3
 80006f4:	f000 fdde 	bl	80012b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_RED_LED_Pin */
  GPIO_InitStruct.Pin = BSP_RED_LED_Pin;
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	2220      	movs	r2, #32
 80006fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	2201      	movs	r2, #1
 8000702:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	193b      	adds	r3, r7, r4
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070a:	193b      	adds	r3, r7, r4
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BSP_RED_LED_GPIO_Port, &GPIO_InitStruct);
 8000710:	193a      	adds	r2, r7, r4
 8000712:	23a0      	movs	r3, #160	; 0xa0
 8000714:	05db      	lsls	r3, r3, #23
 8000716:	0011      	movs	r1, r2
 8000718:	0018      	movs	r0, r3
 800071a:	f000 fc55 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BSP_GREEN_LED_Pin */
  GPIO_InitStruct.Pin = BSP_GREEN_LED_Pin;
 800071e:	0021      	movs	r1, r4
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2210      	movs	r2, #16
 8000724:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2201      	movs	r2, #1
 800072a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2200      	movs	r2, #0
 8000736:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BSP_GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8000738:	187b      	adds	r3, r7, r1
 800073a:	4a05      	ldr	r2, [pc, #20]	; (8000750 <MX_GPIO_Init+0xe8>)
 800073c:	0019      	movs	r1, r3
 800073e:	0010      	movs	r0, r2
 8000740:	f000 fc42 	bl	8000fc8 <HAL_GPIO_Init>

}
 8000744:	46c0      	nop			; (mov r8, r8)
 8000746:	46bd      	mov	sp, r7
 8000748:	b00b      	add	sp, #44	; 0x2c
 800074a:	bd90      	pop	{r4, r7, pc}
 800074c:	40021000 	.word	0x40021000
 8000750:	50000400 	.word	0x50000400

08000754 <HAL_UART_TxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BSP_GREEN_LED_GPIO_Port, BSP_GREEN_LED_Pin, GPIO_PIN_SET);
 800075c:	4b04      	ldr	r3, [pc, #16]	; (8000770 <HAL_UART_TxHalfCpltCallback+0x1c>)
 800075e:	2201      	movs	r2, #1
 8000760:	2110      	movs	r1, #16
 8000762:	0018      	movs	r0, r3
 8000764:	f000 fda6 	bl	80012b4 <HAL_GPIO_WritePin>
}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	b002      	add	sp, #8
 800076e:	bd80      	pop	{r7, pc}
 8000770:	50000400 	.word	0x50000400

08000774 <HAL_UART_RxHalfCpltCallback>:
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BSP_RED_LED_GPIO_Port, BSP_RED_LED_Pin, GPIO_PIN_SET);
 800077c:	23a0      	movs	r3, #160	; 0xa0
 800077e:	05db      	lsls	r3, r3, #23
 8000780:	2201      	movs	r2, #1
 8000782:	2120      	movs	r1, #32
 8000784:	0018      	movs	r0, r3
 8000786:	f000 fd95 	bl	80012b4 <HAL_GPIO_WritePin>
}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	b002      	add	sp, #8
 8000790:	bd80      	pop	{r7, pc}

08000792 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000796:	b672      	cpsid	i
}
 8000798:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800079a:	e7fe      	b.n	800079a <Error_Handler+0x8>

0800079c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a0:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <HAL_MspInit+0x24>)
 80007a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <HAL_MspInit+0x24>)
 80007a6:	2101      	movs	r1, #1
 80007a8:	430a      	orrs	r2, r1
 80007aa:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ac:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <HAL_MspInit+0x24>)
 80007ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007b0:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <HAL_MspInit+0x24>)
 80007b2:	2180      	movs	r1, #128	; 0x80
 80007b4:	0549      	lsls	r1, r1, #21
 80007b6:	430a      	orrs	r2, r1
 80007b8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40021000 	.word	0x40021000

080007c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007c4:	b590      	push	{r4, r7, lr}
 80007c6:	b089      	sub	sp, #36	; 0x24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007cc:	240c      	movs	r4, #12
 80007ce:	193b      	adds	r3, r7, r4
 80007d0:	0018      	movs	r0, r3
 80007d2:	2314      	movs	r3, #20
 80007d4:	001a      	movs	r2, r3
 80007d6:	2100      	movs	r1, #0
 80007d8:	f002 fd54 	bl	8003284 <memset>
  if(huart->Instance==USART1)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a42      	ldr	r2, [pc, #264]	; (80008ec <HAL_UART_MspInit+0x128>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d000      	beq.n	80007e8 <HAL_UART_MspInit+0x24>
 80007e6:	e07c      	b.n	80008e2 <HAL_UART_MspInit+0x11e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007e8:	4b41      	ldr	r3, [pc, #260]	; (80008f0 <HAL_UART_MspInit+0x12c>)
 80007ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ec:	4b40      	ldr	r3, [pc, #256]	; (80008f0 <HAL_UART_MspInit+0x12c>)
 80007ee:	2180      	movs	r1, #128	; 0x80
 80007f0:	01c9      	lsls	r1, r1, #7
 80007f2:	430a      	orrs	r2, r1
 80007f4:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	4b3e      	ldr	r3, [pc, #248]	; (80008f0 <HAL_UART_MspInit+0x12c>)
 80007f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007fa:	4b3d      	ldr	r3, [pc, #244]	; (80008f0 <HAL_UART_MspInit+0x12c>)
 80007fc:	2101      	movs	r1, #1
 80007fe:	430a      	orrs	r2, r1
 8000800:	62da      	str	r2, [r3, #44]	; 0x2c
 8000802:	4b3b      	ldr	r3, [pc, #236]	; (80008f0 <HAL_UART_MspInit+0x12c>)
 8000804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000806:	2201      	movs	r2, #1
 8000808:	4013      	ands	r3, r2
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BSP_UART_TX_Pin|BSP_UART_RX_Pin;
 800080e:	193b      	adds	r3, r7, r4
 8000810:	22c0      	movs	r2, #192	; 0xc0
 8000812:	00d2      	lsls	r2, r2, #3
 8000814:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000816:	0021      	movs	r1, r4
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2202      	movs	r2, #2
 800081c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2203      	movs	r2, #3
 8000828:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800082a:	187b      	adds	r3, r7, r1
 800082c:	2204      	movs	r2, #4
 800082e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000830:	187a      	adds	r2, r7, r1
 8000832:	23a0      	movs	r3, #160	; 0xa0
 8000834:	05db      	lsls	r3, r3, #23
 8000836:	0011      	movs	r1, r2
 8000838:	0018      	movs	r0, r3
 800083a:	f000 fbc5 	bl	8000fc8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 800083e:	4b2d      	ldr	r3, [pc, #180]	; (80008f4 <HAL_UART_MspInit+0x130>)
 8000840:	4a2d      	ldr	r2, [pc, #180]	; (80008f8 <HAL_UART_MspInit+0x134>)
 8000842:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 8000844:	4b2b      	ldr	r3, [pc, #172]	; (80008f4 <HAL_UART_MspInit+0x130>)
 8000846:	2203      	movs	r2, #3
 8000848:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800084a:	4b2a      	ldr	r3, [pc, #168]	; (80008f4 <HAL_UART_MspInit+0x130>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000850:	4b28      	ldr	r3, [pc, #160]	; (80008f4 <HAL_UART_MspInit+0x130>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000856:	4b27      	ldr	r3, [pc, #156]	; (80008f4 <HAL_UART_MspInit+0x130>)
 8000858:	2280      	movs	r2, #128	; 0x80
 800085a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800085c:	4b25      	ldr	r3, [pc, #148]	; (80008f4 <HAL_UART_MspInit+0x130>)
 800085e:	2200      	movs	r2, #0
 8000860:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000862:	4b24      	ldr	r3, [pc, #144]	; (80008f4 <HAL_UART_MspInit+0x130>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000868:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <HAL_UART_MspInit+0x130>)
 800086a:	2220      	movs	r2, #32
 800086c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800086e:	4b21      	ldr	r3, [pc, #132]	; (80008f4 <HAL_UART_MspInit+0x130>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000874:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <HAL_UART_MspInit+0x130>)
 8000876:	0018      	movs	r0, r3
 8000878:	f000 f9ec 	bl	8000c54 <HAL_DMA_Init>
 800087c:	1e03      	subs	r3, r0, #0
 800087e:	d001      	beq.n	8000884 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8000880:	f7ff ff87 	bl	8000792 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4a1b      	ldr	r2, [pc, #108]	; (80008f4 <HAL_UART_MspInit+0x130>)
 8000888:	675a      	str	r2, [r3, #116]	; 0x74
 800088a:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <HAL_UART_MspInit+0x130>)
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8000890:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <HAL_UART_MspInit+0x138>)
 8000892:	4a1b      	ldr	r2, [pc, #108]	; (8000900 <HAL_UART_MspInit+0x13c>)
 8000894:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_3;
 8000896:	4b19      	ldr	r3, [pc, #100]	; (80008fc <HAL_UART_MspInit+0x138>)
 8000898:	2203      	movs	r2, #3
 800089a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800089c:	4b17      	ldr	r3, [pc, #92]	; (80008fc <HAL_UART_MspInit+0x138>)
 800089e:	2210      	movs	r2, #16
 80008a0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008a2:	4b16      	ldr	r3, [pc, #88]	; (80008fc <HAL_UART_MspInit+0x138>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008a8:	4b14      	ldr	r3, [pc, #80]	; (80008fc <HAL_UART_MspInit+0x138>)
 80008aa:	2280      	movs	r2, #128	; 0x80
 80008ac:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008ae:	4b13      	ldr	r3, [pc, #76]	; (80008fc <HAL_UART_MspInit+0x138>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <HAL_UART_MspInit+0x138>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <HAL_UART_MspInit+0x138>)
 80008bc:	2200      	movs	r2, #0
 80008be:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008c0:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <HAL_UART_MspInit+0x138>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <HAL_UART_MspInit+0x138>)
 80008c8:	0018      	movs	r0, r3
 80008ca:	f000 f9c3 	bl	8000c54 <HAL_DMA_Init>
 80008ce:	1e03      	subs	r3, r0, #0
 80008d0:	d001      	beq.n	80008d6 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80008d2:	f7ff ff5e 	bl	8000792 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4a08      	ldr	r2, [pc, #32]	; (80008fc <HAL_UART_MspInit+0x138>)
 80008da:	671a      	str	r2, [r3, #112]	; 0x70
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <HAL_UART_MspInit+0x138>)
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b009      	add	sp, #36	; 0x24
 80008e8:	bd90      	pop	{r4, r7, pc}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	40013800 	.word	0x40013800
 80008f0:	40021000 	.word	0x40021000
 80008f4:	200000c4 	.word	0x200000c4
 80008f8:	40020030 	.word	0x40020030
 80008fc:	2000010c 	.word	0x2000010c
 8000900:	4002001c 	.word	0x4002001c

08000904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <NMI_Handler+0x4>

0800090a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <HardFault_Handler+0x4>

08000910 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000928:	f000 f89a 	bl	8000a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800093a:	0018      	movs	r0, r3
 800093c:	f000 fa68 	bl	8000e10 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000940:	4b04      	ldr	r3, [pc, #16]	; (8000954 <DMA1_Channel2_3_IRQHandler+0x20>)
 8000942:	0018      	movs	r0, r3
 8000944:	f000 fa64 	bl	8000e10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000948:	46c0      	nop			; (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	2000010c 	.word	0x2000010c
 8000954:	200000c4 	.word	0x200000c4

08000958 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800095c:	46c0      	nop			; (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000964:	480d      	ldr	r0, [pc, #52]	; (800099c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000966:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000968:	f7ff fff6 	bl	8000958 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800096c:	480c      	ldr	r0, [pc, #48]	; (80009a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800096e:	490d      	ldr	r1, [pc, #52]	; (80009a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000970:	4a0d      	ldr	r2, [pc, #52]	; (80009a8 <LoopForever+0xe>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000974:	e002      	b.n	800097c <LoopCopyDataInit>

08000976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800097a:	3304      	adds	r3, #4

0800097c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800097c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000980:	d3f9      	bcc.n	8000976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000982:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000984:	4c0a      	ldr	r4, [pc, #40]	; (80009b0 <LoopForever+0x16>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000988:	e001      	b.n	800098e <LoopFillZerobss>

0800098a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800098a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800098c:	3204      	adds	r2, #4

0800098e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000990:	d3fb      	bcc.n	800098a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000992:	f002 fc53 	bl	800323c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000996:	f7ff fd87 	bl	80004a8 <main>

0800099a <LoopForever>:

LoopForever:
    b LoopForever
 800099a:	e7fe      	b.n	800099a <LoopForever>
  ldr   r0, =_estack
 800099c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80009a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a4:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80009a8:	08003328 	.word	0x08003328
  ldr r2, =_sbss
 80009ac:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80009b0:	2000015c 	.word	0x2000015c

080009b4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009b4:	e7fe      	b.n	80009b4 <ADC1_COMP_IRQHandler>
	...

080009b8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009be:	1dfb      	adds	r3, r7, #7
 80009c0:	2200      	movs	r2, #0
 80009c2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80009c4:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <HAL_Init+0x3c>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <HAL_Init+0x3c>)
 80009ca:	2140      	movs	r1, #64	; 0x40
 80009cc:	430a      	orrs	r2, r1
 80009ce:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009d0:	2000      	movs	r0, #0
 80009d2:	f000 f811 	bl	80009f8 <HAL_InitTick>
 80009d6:	1e03      	subs	r3, r0, #0
 80009d8:	d003      	beq.n	80009e2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80009da:	1dfb      	adds	r3, r7, #7
 80009dc:	2201      	movs	r2, #1
 80009de:	701a      	strb	r2, [r3, #0]
 80009e0:	e001      	b.n	80009e6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009e2:	f7ff fedb 	bl	800079c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	781b      	ldrb	r3, [r3, #0]
}
 80009ea:	0018      	movs	r0, r3
 80009ec:	46bd      	mov	sp, r7
 80009ee:	b002      	add	sp, #8
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	40022000 	.word	0x40022000

080009f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <HAL_InitTick+0x5c>)
 8000a02:	681c      	ldr	r4, [r3, #0]
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <HAL_InitTick+0x60>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	0019      	movs	r1, r3
 8000a0a:	23fa      	movs	r3, #250	; 0xfa
 8000a0c:	0098      	lsls	r0, r3, #2
 8000a0e:	f7ff fb7b 	bl	8000108 <__udivsi3>
 8000a12:	0003      	movs	r3, r0
 8000a14:	0019      	movs	r1, r3
 8000a16:	0020      	movs	r0, r4
 8000a18:	f7ff fb76 	bl	8000108 <__udivsi3>
 8000a1c:	0003      	movs	r3, r0
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f000 f90b 	bl	8000c3a <HAL_SYSTICK_Config>
 8000a24:	1e03      	subs	r3, r0, #0
 8000a26:	d001      	beq.n	8000a2c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	e00f      	b.n	8000a4c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2b03      	cmp	r3, #3
 8000a30:	d80b      	bhi.n	8000a4a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	2301      	movs	r3, #1
 8000a36:	425b      	negs	r3, r3
 8000a38:	2200      	movs	r2, #0
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f000 f8d8 	bl	8000bf0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <HAL_InitTick+0x64>)
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a46:	2300      	movs	r3, #0
 8000a48:	e000      	b.n	8000a4c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
}
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b003      	add	sp, #12
 8000a52:	bd90      	pop	{r4, r7, pc}
 8000a54:	20000014 	.word	0x20000014
 8000a58:	2000001c 	.word	0x2000001c
 8000a5c:	20000018 	.word	0x20000018

08000a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <HAL_IncTick+0x1c>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	001a      	movs	r2, r3
 8000a6a:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <HAL_IncTick+0x20>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	18d2      	adds	r2, r2, r3
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <HAL_IncTick+0x20>)
 8000a72:	601a      	str	r2, [r3, #0]
}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	2000001c 	.word	0x2000001c
 8000a80:	20000158 	.word	0x20000158

08000a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  return uwTick;
 8000a88:	4b02      	ldr	r3, [pc, #8]	; (8000a94 <HAL_GetTick+0x10>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
}
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	20000158 	.word	0x20000158

08000a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	0002      	movs	r2, r0
 8000aa0:	1dfb      	adds	r3, r7, #7
 8000aa2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000aa4:	1dfb      	adds	r3, r7, #7
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b7f      	cmp	r3, #127	; 0x7f
 8000aaa:	d809      	bhi.n	8000ac0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aac:	1dfb      	adds	r3, r7, #7
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	001a      	movs	r2, r3
 8000ab2:	231f      	movs	r3, #31
 8000ab4:	401a      	ands	r2, r3
 8000ab6:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <__NVIC_EnableIRQ+0x30>)
 8000ab8:	2101      	movs	r1, #1
 8000aba:	4091      	lsls	r1, r2
 8000abc:	000a      	movs	r2, r1
 8000abe:	601a      	str	r2, [r3, #0]
  }
}
 8000ac0:	46c0      	nop			; (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	b002      	add	sp, #8
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	e000e100 	.word	0xe000e100

08000acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	0002      	movs	r2, r0
 8000ad4:	6039      	str	r1, [r7, #0]
 8000ad6:	1dfb      	adds	r3, r7, #7
 8000ad8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2b7f      	cmp	r3, #127	; 0x7f
 8000ae0:	d828      	bhi.n	8000b34 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ae2:	4a2f      	ldr	r2, [pc, #188]	; (8000ba0 <__NVIC_SetPriority+0xd4>)
 8000ae4:	1dfb      	adds	r3, r7, #7
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b25b      	sxtb	r3, r3
 8000aea:	089b      	lsrs	r3, r3, #2
 8000aec:	33c0      	adds	r3, #192	; 0xc0
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	589b      	ldr	r3, [r3, r2]
 8000af2:	1dfa      	adds	r2, r7, #7
 8000af4:	7812      	ldrb	r2, [r2, #0]
 8000af6:	0011      	movs	r1, r2
 8000af8:	2203      	movs	r2, #3
 8000afa:	400a      	ands	r2, r1
 8000afc:	00d2      	lsls	r2, r2, #3
 8000afe:	21ff      	movs	r1, #255	; 0xff
 8000b00:	4091      	lsls	r1, r2
 8000b02:	000a      	movs	r2, r1
 8000b04:	43d2      	mvns	r2, r2
 8000b06:	401a      	ands	r2, r3
 8000b08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	019b      	lsls	r3, r3, #6
 8000b0e:	22ff      	movs	r2, #255	; 0xff
 8000b10:	401a      	ands	r2, r3
 8000b12:	1dfb      	adds	r3, r7, #7
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	0018      	movs	r0, r3
 8000b18:	2303      	movs	r3, #3
 8000b1a:	4003      	ands	r3, r0
 8000b1c:	00db      	lsls	r3, r3, #3
 8000b1e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b20:	481f      	ldr	r0, [pc, #124]	; (8000ba0 <__NVIC_SetPriority+0xd4>)
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	b25b      	sxtb	r3, r3
 8000b28:	089b      	lsrs	r3, r3, #2
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	33c0      	adds	r3, #192	; 0xc0
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b32:	e031      	b.n	8000b98 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b34:	4a1b      	ldr	r2, [pc, #108]	; (8000ba4 <__NVIC_SetPriority+0xd8>)
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	0019      	movs	r1, r3
 8000b3c:	230f      	movs	r3, #15
 8000b3e:	400b      	ands	r3, r1
 8000b40:	3b08      	subs	r3, #8
 8000b42:	089b      	lsrs	r3, r3, #2
 8000b44:	3306      	adds	r3, #6
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	18d3      	adds	r3, r2, r3
 8000b4a:	3304      	adds	r3, #4
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	1dfa      	adds	r2, r7, #7
 8000b50:	7812      	ldrb	r2, [r2, #0]
 8000b52:	0011      	movs	r1, r2
 8000b54:	2203      	movs	r2, #3
 8000b56:	400a      	ands	r2, r1
 8000b58:	00d2      	lsls	r2, r2, #3
 8000b5a:	21ff      	movs	r1, #255	; 0xff
 8000b5c:	4091      	lsls	r1, r2
 8000b5e:	000a      	movs	r2, r1
 8000b60:	43d2      	mvns	r2, r2
 8000b62:	401a      	ands	r2, r3
 8000b64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	019b      	lsls	r3, r3, #6
 8000b6a:	22ff      	movs	r2, #255	; 0xff
 8000b6c:	401a      	ands	r2, r3
 8000b6e:	1dfb      	adds	r3, r7, #7
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	0018      	movs	r0, r3
 8000b74:	2303      	movs	r3, #3
 8000b76:	4003      	ands	r3, r0
 8000b78:	00db      	lsls	r3, r3, #3
 8000b7a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b7c:	4809      	ldr	r0, [pc, #36]	; (8000ba4 <__NVIC_SetPriority+0xd8>)
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	001c      	movs	r4, r3
 8000b84:	230f      	movs	r3, #15
 8000b86:	4023      	ands	r3, r4
 8000b88:	3b08      	subs	r3, #8
 8000b8a:	089b      	lsrs	r3, r3, #2
 8000b8c:	430a      	orrs	r2, r1
 8000b8e:	3306      	adds	r3, #6
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	18c3      	adds	r3, r0, r3
 8000b94:	3304      	adds	r3, #4
 8000b96:	601a      	str	r2, [r3, #0]
}
 8000b98:	46c0      	nop			; (mov r8, r8)
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	b003      	add	sp, #12
 8000b9e:	bd90      	pop	{r4, r7, pc}
 8000ba0:	e000e100 	.word	0xe000e100
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	1e5a      	subs	r2, r3, #1
 8000bb4:	2380      	movs	r3, #128	; 0x80
 8000bb6:	045b      	lsls	r3, r3, #17
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d301      	bcc.n	8000bc0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	e010      	b.n	8000be2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <SysTick_Config+0x44>)
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	3a01      	subs	r2, #1
 8000bc6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bc8:	2301      	movs	r3, #1
 8000bca:	425b      	negs	r3, r3
 8000bcc:	2103      	movs	r1, #3
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f7ff ff7c 	bl	8000acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <SysTick_Config+0x44>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bda:	4b04      	ldr	r3, [pc, #16]	; (8000bec <SysTick_Config+0x44>)
 8000bdc:	2207      	movs	r2, #7
 8000bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	0018      	movs	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b002      	add	sp, #8
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	e000e010 	.word	0xe000e010

08000bf0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
 8000bfa:	210f      	movs	r1, #15
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	1c02      	adds	r2, r0, #0
 8000c00:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	b25b      	sxtb	r3, r3
 8000c0a:	0011      	movs	r1, r2
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f7ff ff5d 	bl	8000acc <__NVIC_SetPriority>
}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b004      	add	sp, #16
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	0002      	movs	r2, r0
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	b25b      	sxtb	r3, r3
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f7ff ff33 	bl	8000a98 <__NVIC_EnableIRQ>
}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b002      	add	sp, #8
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	0018      	movs	r0, r3
 8000c46:	f7ff ffaf 	bl	8000ba8 <SysTick_Config>
 8000c4a:	0003      	movs	r3, r0
}
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b002      	add	sp, #8
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d101      	bne.n	8000c66 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e061      	b.n	8000d2a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a32      	ldr	r2, [pc, #200]	; (8000d34 <HAL_DMA_Init+0xe0>)
 8000c6c:	4694      	mov	ip, r2
 8000c6e:	4463      	add	r3, ip
 8000c70:	2114      	movs	r1, #20
 8000c72:	0018      	movs	r0, r3
 8000c74:	f7ff fa48 	bl	8000108 <__udivsi3>
 8000c78:	0003      	movs	r3, r0
 8000c7a:	009a      	lsls	r2, r3, #2
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a2d      	ldr	r2, [pc, #180]	; (8000d38 <HAL_DMA_Init+0xe4>)
 8000c84:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2225      	movs	r2, #37	; 0x25
 8000c8a:	2102      	movs	r1, #2
 8000c8c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	4a28      	ldr	r2, [pc, #160]	; (8000d3c <HAL_DMA_Init+0xe8>)
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000ca6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	691b      	ldr	r3, [r3, #16]
 8000cac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6a1b      	ldr	r3, [r3, #32]
 8000cc4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	68fa      	ldr	r2, [r7, #12]
 8000cd2:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	689a      	ldr	r2, [r3, #8]
 8000cd8:	2380      	movs	r3, #128	; 0x80
 8000cda:	01db      	lsls	r3, r3, #7
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d018      	beq.n	8000d12 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000ce0:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <HAL_DMA_Init+0xec>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce8:	211c      	movs	r1, #28
 8000cea:	400b      	ands	r3, r1
 8000cec:	210f      	movs	r1, #15
 8000cee:	4099      	lsls	r1, r3
 8000cf0:	000b      	movs	r3, r1
 8000cf2:	43d9      	mvns	r1, r3
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <HAL_DMA_Init+0xec>)
 8000cf6:	400a      	ands	r2, r1
 8000cf8:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000cfa:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <HAL_DMA_Init+0xec>)
 8000cfc:	6819      	ldr	r1, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	685a      	ldr	r2, [r3, #4]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	201c      	movs	r0, #28
 8000d08:	4003      	ands	r3, r0
 8000d0a:	409a      	lsls	r2, r3
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <HAL_DMA_Init+0xec>)
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2200      	movs	r2, #0
 8000d16:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2225      	movs	r2, #37	; 0x25
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2224      	movs	r2, #36	; 0x24
 8000d24:	2100      	movs	r1, #0
 8000d26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	b004      	add	sp, #16
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	bffdfff8 	.word	0xbffdfff8
 8000d38:	40020000 	.word	0x40020000
 8000d3c:	ffff800f 	.word	0xffff800f
 8000d40:	400200a8 	.word	0x400200a8

08000d44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
 8000d50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d52:	2317      	movs	r3, #23
 8000d54:	18fb      	adds	r3, r7, r3
 8000d56:	2200      	movs	r2, #0
 8000d58:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	2224      	movs	r2, #36	; 0x24
 8000d5e:	5c9b      	ldrb	r3, [r3, r2]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d101      	bne.n	8000d68 <HAL_DMA_Start_IT+0x24>
 8000d64:	2302      	movs	r3, #2
 8000d66:	e04f      	b.n	8000e08 <HAL_DMA_Start_IT+0xc4>
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	2224      	movs	r2, #36	; 0x24
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	2225      	movs	r2, #37	; 0x25
 8000d74:	5c9b      	ldrb	r3, [r3, r2]
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d13a      	bne.n	8000df2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	2225      	movs	r2, #37	; 0x25
 8000d80:	2102      	movs	r1, #2
 8000d82:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2200      	movs	r2, #0
 8000d88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2101      	movs	r1, #1
 8000d96:	438a      	bics	r2, r1
 8000d98:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	68b9      	ldr	r1, [r7, #8]
 8000da0:	68f8      	ldr	r0, [r7, #12]
 8000da2:	f000 f8e3 	bl	8000f6c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d008      	beq.n	8000dc0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	210e      	movs	r1, #14
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	e00f      	b.n	8000de0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2104      	movs	r1, #4
 8000dcc:	438a      	bics	r2, r1
 8000dce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	210a      	movs	r1, #10
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2101      	movs	r1, #1
 8000dec:	430a      	orrs	r2, r1
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	e007      	b.n	8000e02 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	2224      	movs	r2, #36	; 0x24
 8000df6:	2100      	movs	r1, #0
 8000df8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000dfa:	2317      	movs	r3, #23
 8000dfc:	18fb      	adds	r3, r7, r3
 8000dfe:	2202      	movs	r2, #2
 8000e00:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8000e02:	2317      	movs	r3, #23
 8000e04:	18fb      	adds	r3, r7, r3
 8000e06:	781b      	ldrb	r3, [r3, #0]
}
 8000e08:	0018      	movs	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b006      	add	sp, #24
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2c:	221c      	movs	r2, #28
 8000e2e:	4013      	ands	r3, r2
 8000e30:	2204      	movs	r2, #4
 8000e32:	409a      	lsls	r2, r3
 8000e34:	0013      	movs	r3, r2
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	d026      	beq.n	8000e8a <HAL_DMA_IRQHandler+0x7a>
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	2204      	movs	r2, #4
 8000e40:	4013      	ands	r3, r2
 8000e42:	d022      	beq.n	8000e8a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2220      	movs	r2, #32
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	d107      	bne.n	8000e60 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2104      	movs	r1, #4
 8000e5c:	438a      	bics	r2, r1
 8000e5e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e64:	221c      	movs	r2, #28
 8000e66:	401a      	ands	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	2104      	movs	r1, #4
 8000e6e:	4091      	lsls	r1, r2
 8000e70:	000a      	movs	r2, r1
 8000e72:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d100      	bne.n	8000e7e <HAL_DMA_IRQHandler+0x6e>
 8000e7c:	e071      	b.n	8000f62 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	0010      	movs	r0, r2
 8000e86:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8000e88:	e06b      	b.n	8000f62 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	221c      	movs	r2, #28
 8000e90:	4013      	ands	r3, r2
 8000e92:	2202      	movs	r2, #2
 8000e94:	409a      	lsls	r2, r3
 8000e96:	0013      	movs	r3, r2
 8000e98:	68fa      	ldr	r2, [r7, #12]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	d02d      	beq.n	8000efa <HAL_DMA_IRQHandler+0xea>
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	d029      	beq.n	8000efa <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2220      	movs	r2, #32
 8000eae:	4013      	ands	r3, r2
 8000eb0:	d10b      	bne.n	8000eca <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	210a      	movs	r1, #10
 8000ebe:	438a      	bics	r2, r1
 8000ec0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2225      	movs	r2, #37	; 0x25
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ece:	221c      	movs	r2, #28
 8000ed0:	401a      	ands	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	2102      	movs	r1, #2
 8000ed8:	4091      	lsls	r1, r2
 8000eda:	000a      	movs	r2, r1
 8000edc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2224      	movs	r2, #36	; 0x24
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d039      	beq.n	8000f62 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	0010      	movs	r0, r2
 8000ef6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000ef8:	e033      	b.n	8000f62 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	221c      	movs	r2, #28
 8000f00:	4013      	ands	r3, r2
 8000f02:	2208      	movs	r2, #8
 8000f04:	409a      	lsls	r2, r3
 8000f06:	0013      	movs	r3, r2
 8000f08:	68fa      	ldr	r2, [r7, #12]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	d02a      	beq.n	8000f64 <HAL_DMA_IRQHandler+0x154>
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	2208      	movs	r2, #8
 8000f12:	4013      	ands	r3, r2
 8000f14:	d026      	beq.n	8000f64 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	210e      	movs	r1, #14
 8000f22:	438a      	bics	r2, r1
 8000f24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	221c      	movs	r2, #28
 8000f2c:	401a      	ands	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	2101      	movs	r1, #1
 8000f34:	4091      	lsls	r1, r2
 8000f36:	000a      	movs	r2, r1
 8000f38:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2225      	movs	r2, #37	; 0x25
 8000f44:	2101      	movs	r1, #1
 8000f46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2224      	movs	r2, #36	; 0x24
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d005      	beq.n	8000f64 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	0010      	movs	r0, r2
 8000f60:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	46c0      	nop			; (mov r8, r8)
}
 8000f66:	46bd      	mov	sp, r7
 8000f68:	b004      	add	sp, #16
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
 8000f78:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	221c      	movs	r2, #28
 8000f80:	401a      	ands	r2, r3
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	2101      	movs	r1, #1
 8000f88:	4091      	lsls	r1, r2
 8000f8a:	000a      	movs	r2, r1
 8000f8c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	683a      	ldr	r2, [r7, #0]
 8000f94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	2b10      	cmp	r3, #16
 8000f9c:	d108      	bne.n	8000fb0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000fae:	e007      	b.n	8000fc0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	68ba      	ldr	r2, [r7, #8]
 8000fb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	60da      	str	r2, [r3, #12]
}
 8000fc0:	46c0      	nop			; (mov r8, r8)
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	b004      	add	sp, #16
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000fde:	e14f      	b.n	8001280 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	697a      	ldr	r2, [r7, #20]
 8000fe8:	4091      	lsls	r1, r2
 8000fea:	000a      	movs	r2, r1
 8000fec:	4013      	ands	r3, r2
 8000fee:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d100      	bne.n	8000ff8 <HAL_GPIO_Init+0x30>
 8000ff6:	e140      	b.n	800127a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	4013      	ands	r3, r2
 8001000:	2b01      	cmp	r3, #1
 8001002:	d005      	beq.n	8001010 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	2203      	movs	r2, #3
 800100a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800100c:	2b02      	cmp	r3, #2
 800100e:	d130      	bne.n	8001072 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	2203      	movs	r2, #3
 800101c:	409a      	lsls	r2, r3
 800101e:	0013      	movs	r3, r2
 8001020:	43da      	mvns	r2, r3
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	68da      	ldr	r2, [r3, #12]
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	409a      	lsls	r2, r3
 8001032:	0013      	movs	r3, r2
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001046:	2201      	movs	r2, #1
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	409a      	lsls	r2, r3
 800104c:	0013      	movs	r3, r2
 800104e:	43da      	mvns	r2, r3
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	4013      	ands	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	091b      	lsrs	r3, r3, #4
 800105c:	2201      	movs	r2, #1
 800105e:	401a      	ands	r2, r3
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	409a      	lsls	r2, r3
 8001064:	0013      	movs	r3, r2
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	2203      	movs	r2, #3
 8001078:	4013      	ands	r3, r2
 800107a:	2b03      	cmp	r3, #3
 800107c:	d017      	beq.n	80010ae <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	2203      	movs	r2, #3
 800108a:	409a      	lsls	r2, r3
 800108c:	0013      	movs	r3, r2
 800108e:	43da      	mvns	r2, r3
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	4013      	ands	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	689a      	ldr	r2, [r3, #8]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	409a      	lsls	r2, r3
 80010a0:	0013      	movs	r3, r2
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	2203      	movs	r2, #3
 80010b4:	4013      	ands	r3, r2
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d123      	bne.n	8001102 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	08da      	lsrs	r2, r3, #3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3208      	adds	r2, #8
 80010c2:	0092      	lsls	r2, r2, #2
 80010c4:	58d3      	ldr	r3, [r2, r3]
 80010c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	2207      	movs	r2, #7
 80010cc:	4013      	ands	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	220f      	movs	r2, #15
 80010d2:	409a      	lsls	r2, r3
 80010d4:	0013      	movs	r3, r2
 80010d6:	43da      	mvns	r2, r3
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	691a      	ldr	r2, [r3, #16]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	2107      	movs	r1, #7
 80010e6:	400b      	ands	r3, r1
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	409a      	lsls	r2, r3
 80010ec:	0013      	movs	r3, r2
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	08da      	lsrs	r2, r3, #3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3208      	adds	r2, #8
 80010fc:	0092      	lsls	r2, r2, #2
 80010fe:	6939      	ldr	r1, [r7, #16]
 8001100:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	2203      	movs	r2, #3
 800110e:	409a      	lsls	r2, r3
 8001110:	0013      	movs	r3, r2
 8001112:	43da      	mvns	r2, r3
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2203      	movs	r2, #3
 8001120:	401a      	ands	r2, r3
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	409a      	lsls	r2, r3
 8001128:	0013      	movs	r3, r2
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685a      	ldr	r2, [r3, #4]
 800113a:	23c0      	movs	r3, #192	; 0xc0
 800113c:	029b      	lsls	r3, r3, #10
 800113e:	4013      	ands	r3, r2
 8001140:	d100      	bne.n	8001144 <HAL_GPIO_Init+0x17c>
 8001142:	e09a      	b.n	800127a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001144:	4b54      	ldr	r3, [pc, #336]	; (8001298 <HAL_GPIO_Init+0x2d0>)
 8001146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001148:	4b53      	ldr	r3, [pc, #332]	; (8001298 <HAL_GPIO_Init+0x2d0>)
 800114a:	2101      	movs	r1, #1
 800114c:	430a      	orrs	r2, r1
 800114e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001150:	4a52      	ldr	r2, [pc, #328]	; (800129c <HAL_GPIO_Init+0x2d4>)
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	089b      	lsrs	r3, r3, #2
 8001156:	3302      	adds	r3, #2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	589b      	ldr	r3, [r3, r2]
 800115c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	2203      	movs	r2, #3
 8001162:	4013      	ands	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	220f      	movs	r2, #15
 8001168:	409a      	lsls	r2, r3
 800116a:	0013      	movs	r3, r2
 800116c:	43da      	mvns	r2, r3
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	23a0      	movs	r3, #160	; 0xa0
 8001178:	05db      	lsls	r3, r3, #23
 800117a:	429a      	cmp	r2, r3
 800117c:	d019      	beq.n	80011b2 <HAL_GPIO_Init+0x1ea>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a47      	ldr	r2, [pc, #284]	; (80012a0 <HAL_GPIO_Init+0x2d8>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d013      	beq.n	80011ae <HAL_GPIO_Init+0x1e6>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a46      	ldr	r2, [pc, #280]	; (80012a4 <HAL_GPIO_Init+0x2dc>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d00d      	beq.n	80011aa <HAL_GPIO_Init+0x1e2>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a45      	ldr	r2, [pc, #276]	; (80012a8 <HAL_GPIO_Init+0x2e0>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d007      	beq.n	80011a6 <HAL_GPIO_Init+0x1de>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a44      	ldr	r2, [pc, #272]	; (80012ac <HAL_GPIO_Init+0x2e4>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d101      	bne.n	80011a2 <HAL_GPIO_Init+0x1da>
 800119e:	2305      	movs	r3, #5
 80011a0:	e008      	b.n	80011b4 <HAL_GPIO_Init+0x1ec>
 80011a2:	2306      	movs	r3, #6
 80011a4:	e006      	b.n	80011b4 <HAL_GPIO_Init+0x1ec>
 80011a6:	2303      	movs	r3, #3
 80011a8:	e004      	b.n	80011b4 <HAL_GPIO_Init+0x1ec>
 80011aa:	2302      	movs	r3, #2
 80011ac:	e002      	b.n	80011b4 <HAL_GPIO_Init+0x1ec>
 80011ae:	2301      	movs	r3, #1
 80011b0:	e000      	b.n	80011b4 <HAL_GPIO_Init+0x1ec>
 80011b2:	2300      	movs	r3, #0
 80011b4:	697a      	ldr	r2, [r7, #20]
 80011b6:	2103      	movs	r1, #3
 80011b8:	400a      	ands	r2, r1
 80011ba:	0092      	lsls	r2, r2, #2
 80011bc:	4093      	lsls	r3, r2
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011c4:	4935      	ldr	r1, [pc, #212]	; (800129c <HAL_GPIO_Init+0x2d4>)
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	089b      	lsrs	r3, r3, #2
 80011ca:	3302      	adds	r3, #2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011d2:	4b37      	ldr	r3, [pc, #220]	; (80012b0 <HAL_GPIO_Init+0x2e8>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	43da      	mvns	r2, r3
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	4013      	ands	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	2380      	movs	r3, #128	; 0x80
 80011e8:	035b      	lsls	r3, r3, #13
 80011ea:	4013      	ands	r3, r2
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011f6:	4b2e      	ldr	r3, [pc, #184]	; (80012b0 <HAL_GPIO_Init+0x2e8>)
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80011fc:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <HAL_GPIO_Init+0x2e8>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	43da      	mvns	r2, r3
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	039b      	lsls	r3, r3, #14
 8001214:	4013      	ands	r3, r2
 8001216:	d003      	beq.n	8001220 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	4313      	orrs	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001220:	4b23      	ldr	r3, [pc, #140]	; (80012b0 <HAL_GPIO_Init+0x2e8>)
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001226:	4b22      	ldr	r3, [pc, #136]	; (80012b0 <HAL_GPIO_Init+0x2e8>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	43da      	mvns	r2, r3
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	4013      	ands	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685a      	ldr	r2, [r3, #4]
 800123a:	2380      	movs	r3, #128	; 0x80
 800123c:	029b      	lsls	r3, r3, #10
 800123e:	4013      	ands	r3, r2
 8001240:	d003      	beq.n	800124a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4313      	orrs	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800124a:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <HAL_GPIO_Init+0x2e8>)
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001250:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <HAL_GPIO_Init+0x2e8>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	43da      	mvns	r2, r3
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	2380      	movs	r3, #128	; 0x80
 8001266:	025b      	lsls	r3, r3, #9
 8001268:	4013      	ands	r3, r2
 800126a:	d003      	beq.n	8001274 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001274:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <HAL_GPIO_Init+0x2e8>)
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	3301      	adds	r3, #1
 800127e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	40da      	lsrs	r2, r3
 8001288:	1e13      	subs	r3, r2, #0
 800128a:	d000      	beq.n	800128e <HAL_GPIO_Init+0x2c6>
 800128c:	e6a8      	b.n	8000fe0 <HAL_GPIO_Init+0x18>
  }
}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	46c0      	nop			; (mov r8, r8)
 8001292:	46bd      	mov	sp, r7
 8001294:	b006      	add	sp, #24
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40021000 	.word	0x40021000
 800129c:	40010000 	.word	0x40010000
 80012a0:	50000400 	.word	0x50000400
 80012a4:	50000800 	.word	0x50000800
 80012a8:	50000c00 	.word	0x50000c00
 80012ac:	50001c00 	.word	0x50001c00
 80012b0:	40010400 	.word	0x40010400

080012b4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	0008      	movs	r0, r1
 80012be:	0011      	movs	r1, r2
 80012c0:	1cbb      	adds	r3, r7, #2
 80012c2:	1c02      	adds	r2, r0, #0
 80012c4:	801a      	strh	r2, [r3, #0]
 80012c6:	1c7b      	adds	r3, r7, #1
 80012c8:	1c0a      	adds	r2, r1, #0
 80012ca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012cc:	1c7b      	adds	r3, r7, #1
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d004      	beq.n	80012de <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012d4:	1cbb      	adds	r3, r7, #2
 80012d6:	881a      	ldrh	r2, [r3, #0]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80012dc:	e003      	b.n	80012e6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80012de:	1cbb      	adds	r3, r7, #2
 80012e0:	881a      	ldrh	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	46bd      	mov	sp, r7
 80012ea:	b002      	add	sp, #8
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f0:	b5b0      	push	{r4, r5, r7, lr}
 80012f2:	b08a      	sub	sp, #40	; 0x28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d102      	bne.n	8001304 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	f000 fbaf 	bl	8001a62 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001304:	4bcf      	ldr	r3, [pc, #828]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	220c      	movs	r2, #12
 800130a:	4013      	ands	r3, r2
 800130c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800130e:	4bcd      	ldr	r3, [pc, #820]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 8001310:	68da      	ldr	r2, [r3, #12]
 8001312:	2380      	movs	r3, #128	; 0x80
 8001314:	025b      	lsls	r3, r3, #9
 8001316:	4013      	ands	r3, r2
 8001318:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2201      	movs	r2, #1
 8001320:	4013      	ands	r3, r2
 8001322:	d100      	bne.n	8001326 <HAL_RCC_OscConfig+0x36>
 8001324:	e07e      	b.n	8001424 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001326:	6a3b      	ldr	r3, [r7, #32]
 8001328:	2b08      	cmp	r3, #8
 800132a:	d007      	beq.n	800133c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800132c:	6a3b      	ldr	r3, [r7, #32]
 800132e:	2b0c      	cmp	r3, #12
 8001330:	d112      	bne.n	8001358 <HAL_RCC_OscConfig+0x68>
 8001332:	69fa      	ldr	r2, [r7, #28]
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	025b      	lsls	r3, r3, #9
 8001338:	429a      	cmp	r2, r3
 800133a:	d10d      	bne.n	8001358 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133c:	4bc1      	ldr	r3, [pc, #772]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	2380      	movs	r3, #128	; 0x80
 8001342:	029b      	lsls	r3, r3, #10
 8001344:	4013      	ands	r3, r2
 8001346:	d100      	bne.n	800134a <HAL_RCC_OscConfig+0x5a>
 8001348:	e06b      	b.n	8001422 <HAL_RCC_OscConfig+0x132>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d167      	bne.n	8001422 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	f000 fb85 	bl	8001a62 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	2380      	movs	r3, #128	; 0x80
 800135e:	025b      	lsls	r3, r3, #9
 8001360:	429a      	cmp	r2, r3
 8001362:	d107      	bne.n	8001374 <HAL_RCC_OscConfig+0x84>
 8001364:	4bb7      	ldr	r3, [pc, #732]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4bb6      	ldr	r3, [pc, #728]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 800136a:	2180      	movs	r1, #128	; 0x80
 800136c:	0249      	lsls	r1, r1, #9
 800136e:	430a      	orrs	r2, r1
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	e027      	b.n	80013c4 <HAL_RCC_OscConfig+0xd4>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	23a0      	movs	r3, #160	; 0xa0
 800137a:	02db      	lsls	r3, r3, #11
 800137c:	429a      	cmp	r2, r3
 800137e:	d10e      	bne.n	800139e <HAL_RCC_OscConfig+0xae>
 8001380:	4bb0      	ldr	r3, [pc, #704]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4baf      	ldr	r3, [pc, #700]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 8001386:	2180      	movs	r1, #128	; 0x80
 8001388:	02c9      	lsls	r1, r1, #11
 800138a:	430a      	orrs	r2, r1
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	4bad      	ldr	r3, [pc, #692]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	4bac      	ldr	r3, [pc, #688]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 8001394:	2180      	movs	r1, #128	; 0x80
 8001396:	0249      	lsls	r1, r1, #9
 8001398:	430a      	orrs	r2, r1
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	e012      	b.n	80013c4 <HAL_RCC_OscConfig+0xd4>
 800139e:	4ba9      	ldr	r3, [pc, #676]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	4ba8      	ldr	r3, [pc, #672]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 80013a4:	49a8      	ldr	r1, [pc, #672]	; (8001648 <HAL_RCC_OscConfig+0x358>)
 80013a6:	400a      	ands	r2, r1
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	4ba6      	ldr	r3, [pc, #664]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	2380      	movs	r3, #128	; 0x80
 80013b0:	025b      	lsls	r3, r3, #9
 80013b2:	4013      	ands	r3, r2
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4ba2      	ldr	r3, [pc, #648]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4ba1      	ldr	r3, [pc, #644]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 80013be:	49a3      	ldr	r1, [pc, #652]	; (800164c <HAL_RCC_OscConfig+0x35c>)
 80013c0:	400a      	ands	r2, r1
 80013c2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d015      	beq.n	80013f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013cc:	f7ff fb5a 	bl	8000a84 <HAL_GetTick>
 80013d0:	0003      	movs	r3, r0
 80013d2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013d4:	e009      	b.n	80013ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d6:	f7ff fb55 	bl	8000a84 <HAL_GetTick>
 80013da:	0002      	movs	r2, r0
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b64      	cmp	r3, #100	; 0x64
 80013e2:	d902      	bls.n	80013ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	f000 fb3c 	bl	8001a62 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013ea:	4b96      	ldr	r3, [pc, #600]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	2380      	movs	r3, #128	; 0x80
 80013f0:	029b      	lsls	r3, r3, #10
 80013f2:	4013      	ands	r3, r2
 80013f4:	d0ef      	beq.n	80013d6 <HAL_RCC_OscConfig+0xe6>
 80013f6:	e015      	b.n	8001424 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f8:	f7ff fb44 	bl	8000a84 <HAL_GetTick>
 80013fc:	0003      	movs	r3, r0
 80013fe:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001402:	f7ff fb3f 	bl	8000a84 <HAL_GetTick>
 8001406:	0002      	movs	r2, r0
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b64      	cmp	r3, #100	; 0x64
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e326      	b.n	8001a62 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001414:	4b8b      	ldr	r3, [pc, #556]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	2380      	movs	r3, #128	; 0x80
 800141a:	029b      	lsls	r3, r3, #10
 800141c:	4013      	ands	r3, r2
 800141e:	d1f0      	bne.n	8001402 <HAL_RCC_OscConfig+0x112>
 8001420:	e000      	b.n	8001424 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001422:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2202      	movs	r2, #2
 800142a:	4013      	ands	r3, r2
 800142c:	d100      	bne.n	8001430 <HAL_RCC_OscConfig+0x140>
 800142e:	e08b      	b.n	8001548 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001436:	6a3b      	ldr	r3, [r7, #32]
 8001438:	2b04      	cmp	r3, #4
 800143a:	d005      	beq.n	8001448 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800143c:	6a3b      	ldr	r3, [r7, #32]
 800143e:	2b0c      	cmp	r3, #12
 8001440:	d13e      	bne.n	80014c0 <HAL_RCC_OscConfig+0x1d0>
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d13b      	bne.n	80014c0 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001448:	4b7e      	ldr	r3, [pc, #504]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2204      	movs	r2, #4
 800144e:	4013      	ands	r3, r2
 8001450:	d004      	beq.n	800145c <HAL_RCC_OscConfig+0x16c>
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e302      	b.n	8001a62 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145c:	4b79      	ldr	r3, [pc, #484]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	4a7b      	ldr	r2, [pc, #492]	; (8001650 <HAL_RCC_OscConfig+0x360>)
 8001462:	4013      	ands	r3, r2
 8001464:	0019      	movs	r1, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	021a      	lsls	r2, r3, #8
 800146c:	4b75      	ldr	r3, [pc, #468]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 800146e:	430a      	orrs	r2, r1
 8001470:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001472:	4b74      	ldr	r3, [pc, #464]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2209      	movs	r2, #9
 8001478:	4393      	bics	r3, r2
 800147a:	0019      	movs	r1, r3
 800147c:	4b71      	ldr	r3, [pc, #452]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 800147e:	697a      	ldr	r2, [r7, #20]
 8001480:	430a      	orrs	r2, r1
 8001482:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001484:	f000 fc40 	bl	8001d08 <HAL_RCC_GetSysClockFreq>
 8001488:	0001      	movs	r1, r0
 800148a:	4b6e      	ldr	r3, [pc, #440]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	091b      	lsrs	r3, r3, #4
 8001490:	220f      	movs	r2, #15
 8001492:	4013      	ands	r3, r2
 8001494:	4a6f      	ldr	r2, [pc, #444]	; (8001654 <HAL_RCC_OscConfig+0x364>)
 8001496:	5cd3      	ldrb	r3, [r2, r3]
 8001498:	000a      	movs	r2, r1
 800149a:	40da      	lsrs	r2, r3
 800149c:	4b6e      	ldr	r3, [pc, #440]	; (8001658 <HAL_RCC_OscConfig+0x368>)
 800149e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80014a0:	4b6e      	ldr	r3, [pc, #440]	; (800165c <HAL_RCC_OscConfig+0x36c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2513      	movs	r5, #19
 80014a6:	197c      	adds	r4, r7, r5
 80014a8:	0018      	movs	r0, r3
 80014aa:	f7ff faa5 	bl	80009f8 <HAL_InitTick>
 80014ae:	0003      	movs	r3, r0
 80014b0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80014b2:	197b      	adds	r3, r7, r5
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d046      	beq.n	8001548 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80014ba:	197b      	adds	r3, r7, r5
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	e2d0      	b.n	8001a62 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d027      	beq.n	8001516 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80014c6:	4b5f      	ldr	r3, [pc, #380]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2209      	movs	r2, #9
 80014cc:	4393      	bics	r3, r2
 80014ce:	0019      	movs	r1, r3
 80014d0:	4b5c      	ldr	r3, [pc, #368]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	430a      	orrs	r2, r1
 80014d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff fad4 	bl	8000a84 <HAL_GetTick>
 80014dc:	0003      	movs	r3, r0
 80014de:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014e2:	f7ff facf 	bl	8000a84 <HAL_GetTick>
 80014e6:	0002      	movs	r2, r0
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e2b6      	b.n	8001a62 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014f4:	4b53      	ldr	r3, [pc, #332]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2204      	movs	r2, #4
 80014fa:	4013      	ands	r3, r2
 80014fc:	d0f1      	beq.n	80014e2 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fe:	4b51      	ldr	r3, [pc, #324]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	4a53      	ldr	r2, [pc, #332]	; (8001650 <HAL_RCC_OscConfig+0x360>)
 8001504:	4013      	ands	r3, r2
 8001506:	0019      	movs	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	021a      	lsls	r2, r3, #8
 800150e:	4b4d      	ldr	r3, [pc, #308]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 8001510:	430a      	orrs	r2, r1
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	e018      	b.n	8001548 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001516:	4b4b      	ldr	r3, [pc, #300]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	4b4a      	ldr	r3, [pc, #296]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 800151c:	2101      	movs	r1, #1
 800151e:	438a      	bics	r2, r1
 8001520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001522:	f7ff faaf 	bl	8000a84 <HAL_GetTick>
 8001526:	0003      	movs	r3, r0
 8001528:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800152c:	f7ff faaa 	bl	8000a84 <HAL_GetTick>
 8001530:	0002      	movs	r2, r0
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e291      	b.n	8001a62 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800153e:	4b41      	ldr	r3, [pc, #260]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2204      	movs	r2, #4
 8001544:	4013      	ands	r3, r2
 8001546:	d1f1      	bne.n	800152c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2210      	movs	r2, #16
 800154e:	4013      	ands	r3, r2
 8001550:	d100      	bne.n	8001554 <HAL_RCC_OscConfig+0x264>
 8001552:	e0a1      	b.n	8001698 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001554:	6a3b      	ldr	r3, [r7, #32]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d140      	bne.n	80015dc <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800155a:	4b3a      	ldr	r3, [pc, #232]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	2380      	movs	r3, #128	; 0x80
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4013      	ands	r3, r2
 8001564:	d005      	beq.n	8001572 <HAL_RCC_OscConfig+0x282>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e277      	b.n	8001a62 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001572:	4b34      	ldr	r3, [pc, #208]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	4a3a      	ldr	r2, [pc, #232]	; (8001660 <HAL_RCC_OscConfig+0x370>)
 8001578:	4013      	ands	r3, r2
 800157a:	0019      	movs	r1, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001580:	4b30      	ldr	r3, [pc, #192]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 8001582:	430a      	orrs	r2, r1
 8001584:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001586:	4b2f      	ldr	r3, [pc, #188]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	021b      	lsls	r3, r3, #8
 800158c:	0a19      	lsrs	r1, r3, #8
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a1b      	ldr	r3, [r3, #32]
 8001592:	061a      	lsls	r2, r3, #24
 8001594:	4b2b      	ldr	r3, [pc, #172]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 8001596:	430a      	orrs	r2, r1
 8001598:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159e:	0b5b      	lsrs	r3, r3, #13
 80015a0:	3301      	adds	r3, #1
 80015a2:	2280      	movs	r2, #128	; 0x80
 80015a4:	0212      	lsls	r2, r2, #8
 80015a6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80015a8:	4b26      	ldr	r3, [pc, #152]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	091b      	lsrs	r3, r3, #4
 80015ae:	210f      	movs	r1, #15
 80015b0:	400b      	ands	r3, r1
 80015b2:	4928      	ldr	r1, [pc, #160]	; (8001654 <HAL_RCC_OscConfig+0x364>)
 80015b4:	5ccb      	ldrb	r3, [r1, r3]
 80015b6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80015b8:	4b27      	ldr	r3, [pc, #156]	; (8001658 <HAL_RCC_OscConfig+0x368>)
 80015ba:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80015bc:	4b27      	ldr	r3, [pc, #156]	; (800165c <HAL_RCC_OscConfig+0x36c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2513      	movs	r5, #19
 80015c2:	197c      	adds	r4, r7, r5
 80015c4:	0018      	movs	r0, r3
 80015c6:	f7ff fa17 	bl	80009f8 <HAL_InitTick>
 80015ca:	0003      	movs	r3, r0
 80015cc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80015ce:	197b      	adds	r3, r7, r5
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d060      	beq.n	8001698 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80015d6:	197b      	adds	r3, r7, r5
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	e242      	b.n	8001a62 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69db      	ldr	r3, [r3, #28]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d03f      	beq.n	8001664 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015e4:	4b17      	ldr	r3, [pc, #92]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b16      	ldr	r3, [pc, #88]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 80015ea:	2180      	movs	r1, #128	; 0x80
 80015ec:	0049      	lsls	r1, r1, #1
 80015ee:	430a      	orrs	r2, r1
 80015f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f2:	f7ff fa47 	bl	8000a84 <HAL_GetTick>
 80015f6:	0003      	movs	r3, r0
 80015f8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015fc:	f7ff fa42 	bl	8000a84 <HAL_GetTick>
 8001600:	0002      	movs	r2, r0
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e229      	b.n	8001a62 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800160e:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	2380      	movs	r3, #128	; 0x80
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4013      	ands	r3, r2
 8001618:	d0f0      	beq.n	80015fc <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800161a:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	4a10      	ldr	r2, [pc, #64]	; (8001660 <HAL_RCC_OscConfig+0x370>)
 8001620:	4013      	ands	r3, r2
 8001622:	0019      	movs	r1, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 800162a:	430a      	orrs	r2, r1
 800162c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800162e:	4b05      	ldr	r3, [pc, #20]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	0a19      	lsrs	r1, r3, #8
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	061a      	lsls	r2, r3, #24
 800163c:	4b01      	ldr	r3, [pc, #4]	; (8001644 <HAL_RCC_OscConfig+0x354>)
 800163e:	430a      	orrs	r2, r1
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	e029      	b.n	8001698 <HAL_RCC_OscConfig+0x3a8>
 8001644:	40021000 	.word	0x40021000
 8001648:	fffeffff 	.word	0xfffeffff
 800164c:	fffbffff 	.word	0xfffbffff
 8001650:	ffffe0ff 	.word	0xffffe0ff
 8001654:	080032ac 	.word	0x080032ac
 8001658:	20000014 	.word	0x20000014
 800165c:	20000018 	.word	0x20000018
 8001660:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001664:	4bbd      	ldr	r3, [pc, #756]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4bbc      	ldr	r3, [pc, #752]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 800166a:	49bd      	ldr	r1, [pc, #756]	; (8001960 <HAL_RCC_OscConfig+0x670>)
 800166c:	400a      	ands	r2, r1
 800166e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff fa08 	bl	8000a84 <HAL_GetTick>
 8001674:	0003      	movs	r3, r0
 8001676:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800167a:	f7ff fa03 	bl	8000a84 <HAL_GetTick>
 800167e:	0002      	movs	r2, r0
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e1ea      	b.n	8001a62 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800168c:	4bb3      	ldr	r3, [pc, #716]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4013      	ands	r3, r2
 8001696:	d1f0      	bne.n	800167a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2208      	movs	r2, #8
 800169e:	4013      	ands	r3, r2
 80016a0:	d036      	beq.n	8001710 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d019      	beq.n	80016de <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016aa:	4bac      	ldr	r3, [pc, #688]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 80016ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016ae:	4bab      	ldr	r3, [pc, #684]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 80016b0:	2101      	movs	r1, #1
 80016b2:	430a      	orrs	r2, r1
 80016b4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b6:	f7ff f9e5 	bl	8000a84 <HAL_GetTick>
 80016ba:	0003      	movs	r3, r0
 80016bc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016c0:	f7ff f9e0 	bl	8000a84 <HAL_GetTick>
 80016c4:	0002      	movs	r2, r0
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e1c7      	b.n	8001a62 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016d2:	4ba2      	ldr	r3, [pc, #648]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 80016d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016d6:	2202      	movs	r2, #2
 80016d8:	4013      	ands	r3, r2
 80016da:	d0f1      	beq.n	80016c0 <HAL_RCC_OscConfig+0x3d0>
 80016dc:	e018      	b.n	8001710 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016de:	4b9f      	ldr	r3, [pc, #636]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 80016e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016e2:	4b9e      	ldr	r3, [pc, #632]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 80016e4:	2101      	movs	r1, #1
 80016e6:	438a      	bics	r2, r1
 80016e8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ea:	f7ff f9cb 	bl	8000a84 <HAL_GetTick>
 80016ee:	0003      	movs	r3, r0
 80016f0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016f4:	f7ff f9c6 	bl	8000a84 <HAL_GetTick>
 80016f8:	0002      	movs	r2, r0
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e1ad      	b.n	8001a62 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001706:	4b95      	ldr	r3, [pc, #596]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 8001708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800170a:	2202      	movs	r2, #2
 800170c:	4013      	ands	r3, r2
 800170e:	d1f1      	bne.n	80016f4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2204      	movs	r2, #4
 8001716:	4013      	ands	r3, r2
 8001718:	d100      	bne.n	800171c <HAL_RCC_OscConfig+0x42c>
 800171a:	e0ae      	b.n	800187a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800171c:	2027      	movs	r0, #39	; 0x27
 800171e:	183b      	adds	r3, r7, r0
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001724:	4b8d      	ldr	r3, [pc, #564]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 8001726:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	055b      	lsls	r3, r3, #21
 800172c:	4013      	ands	r3, r2
 800172e:	d109      	bne.n	8001744 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001730:	4b8a      	ldr	r3, [pc, #552]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 8001732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001734:	4b89      	ldr	r3, [pc, #548]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 8001736:	2180      	movs	r1, #128	; 0x80
 8001738:	0549      	lsls	r1, r1, #21
 800173a:	430a      	orrs	r2, r1
 800173c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800173e:	183b      	adds	r3, r7, r0
 8001740:	2201      	movs	r2, #1
 8001742:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001744:	4b87      	ldr	r3, [pc, #540]	; (8001964 <HAL_RCC_OscConfig+0x674>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	4013      	ands	r3, r2
 800174e:	d11a      	bne.n	8001786 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001750:	4b84      	ldr	r3, [pc, #528]	; (8001964 <HAL_RCC_OscConfig+0x674>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4b83      	ldr	r3, [pc, #524]	; (8001964 <HAL_RCC_OscConfig+0x674>)
 8001756:	2180      	movs	r1, #128	; 0x80
 8001758:	0049      	lsls	r1, r1, #1
 800175a:	430a      	orrs	r2, r1
 800175c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800175e:	f7ff f991 	bl	8000a84 <HAL_GetTick>
 8001762:	0003      	movs	r3, r0
 8001764:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001768:	f7ff f98c 	bl	8000a84 <HAL_GetTick>
 800176c:	0002      	movs	r2, r0
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b64      	cmp	r3, #100	; 0x64
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e173      	b.n	8001a62 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177a:	4b7a      	ldr	r3, [pc, #488]	; (8001964 <HAL_RCC_OscConfig+0x674>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	2380      	movs	r3, #128	; 0x80
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	4013      	ands	r3, r2
 8001784:	d0f0      	beq.n	8001768 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	2380      	movs	r3, #128	; 0x80
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	429a      	cmp	r2, r3
 8001790:	d107      	bne.n	80017a2 <HAL_RCC_OscConfig+0x4b2>
 8001792:	4b72      	ldr	r3, [pc, #456]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 8001794:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001796:	4b71      	ldr	r3, [pc, #452]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 8001798:	2180      	movs	r1, #128	; 0x80
 800179a:	0049      	lsls	r1, r1, #1
 800179c:	430a      	orrs	r2, r1
 800179e:	651a      	str	r2, [r3, #80]	; 0x50
 80017a0:	e031      	b.n	8001806 <HAL_RCC_OscConfig+0x516>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10c      	bne.n	80017c4 <HAL_RCC_OscConfig+0x4d4>
 80017aa:	4b6c      	ldr	r3, [pc, #432]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 80017ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017ae:	4b6b      	ldr	r3, [pc, #428]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 80017b0:	496b      	ldr	r1, [pc, #428]	; (8001960 <HAL_RCC_OscConfig+0x670>)
 80017b2:	400a      	ands	r2, r1
 80017b4:	651a      	str	r2, [r3, #80]	; 0x50
 80017b6:	4b69      	ldr	r3, [pc, #420]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 80017b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017ba:	4b68      	ldr	r3, [pc, #416]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 80017bc:	496a      	ldr	r1, [pc, #424]	; (8001968 <HAL_RCC_OscConfig+0x678>)
 80017be:	400a      	ands	r2, r1
 80017c0:	651a      	str	r2, [r3, #80]	; 0x50
 80017c2:	e020      	b.n	8001806 <HAL_RCC_OscConfig+0x516>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	23a0      	movs	r3, #160	; 0xa0
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d10e      	bne.n	80017ee <HAL_RCC_OscConfig+0x4fe>
 80017d0:	4b62      	ldr	r3, [pc, #392]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 80017d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017d4:	4b61      	ldr	r3, [pc, #388]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 80017d6:	2180      	movs	r1, #128	; 0x80
 80017d8:	00c9      	lsls	r1, r1, #3
 80017da:	430a      	orrs	r2, r1
 80017dc:	651a      	str	r2, [r3, #80]	; 0x50
 80017de:	4b5f      	ldr	r3, [pc, #380]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 80017e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017e2:	4b5e      	ldr	r3, [pc, #376]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 80017e4:	2180      	movs	r1, #128	; 0x80
 80017e6:	0049      	lsls	r1, r1, #1
 80017e8:	430a      	orrs	r2, r1
 80017ea:	651a      	str	r2, [r3, #80]	; 0x50
 80017ec:	e00b      	b.n	8001806 <HAL_RCC_OscConfig+0x516>
 80017ee:	4b5b      	ldr	r3, [pc, #364]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 80017f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017f2:	4b5a      	ldr	r3, [pc, #360]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 80017f4:	495a      	ldr	r1, [pc, #360]	; (8001960 <HAL_RCC_OscConfig+0x670>)
 80017f6:	400a      	ands	r2, r1
 80017f8:	651a      	str	r2, [r3, #80]	; 0x50
 80017fa:	4b58      	ldr	r3, [pc, #352]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 80017fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017fe:	4b57      	ldr	r3, [pc, #348]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 8001800:	4959      	ldr	r1, [pc, #356]	; (8001968 <HAL_RCC_OscConfig+0x678>)
 8001802:	400a      	ands	r2, r1
 8001804:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d015      	beq.n	800183a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180e:	f7ff f939 	bl	8000a84 <HAL_GetTick>
 8001812:	0003      	movs	r3, r0
 8001814:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001816:	e009      	b.n	800182c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001818:	f7ff f934 	bl	8000a84 <HAL_GetTick>
 800181c:	0002      	movs	r2, r0
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	4a52      	ldr	r2, [pc, #328]	; (800196c <HAL_RCC_OscConfig+0x67c>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e11a      	b.n	8001a62 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800182c:	4b4b      	ldr	r3, [pc, #300]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 800182e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4013      	ands	r3, r2
 8001836:	d0ef      	beq.n	8001818 <HAL_RCC_OscConfig+0x528>
 8001838:	e014      	b.n	8001864 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800183a:	f7ff f923 	bl	8000a84 <HAL_GetTick>
 800183e:	0003      	movs	r3, r0
 8001840:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001842:	e009      	b.n	8001858 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001844:	f7ff f91e 	bl	8000a84 <HAL_GetTick>
 8001848:	0002      	movs	r2, r0
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	4a47      	ldr	r2, [pc, #284]	; (800196c <HAL_RCC_OscConfig+0x67c>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e104      	b.n	8001a62 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001858:	4b40      	ldr	r3, [pc, #256]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 800185a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4013      	ands	r3, r2
 8001862:	d1ef      	bne.n	8001844 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001864:	2327      	movs	r3, #39	; 0x27
 8001866:	18fb      	adds	r3, r7, r3
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d105      	bne.n	800187a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800186e:	4b3b      	ldr	r3, [pc, #236]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 8001870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001872:	4b3a      	ldr	r3, [pc, #232]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 8001874:	493e      	ldr	r1, [pc, #248]	; (8001970 <HAL_RCC_OscConfig+0x680>)
 8001876:	400a      	ands	r2, r1
 8001878:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2220      	movs	r2, #32
 8001880:	4013      	ands	r3, r2
 8001882:	d049      	beq.n	8001918 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d026      	beq.n	80018da <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800188c:	4b33      	ldr	r3, [pc, #204]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	4b32      	ldr	r3, [pc, #200]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 8001892:	2101      	movs	r1, #1
 8001894:	430a      	orrs	r2, r1
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	4b30      	ldr	r3, [pc, #192]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 800189a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800189c:	4b2f      	ldr	r3, [pc, #188]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 800189e:	2101      	movs	r1, #1
 80018a0:	430a      	orrs	r2, r1
 80018a2:	635a      	str	r2, [r3, #52]	; 0x34
 80018a4:	4b33      	ldr	r3, [pc, #204]	; (8001974 <HAL_RCC_OscConfig+0x684>)
 80018a6:	6a1a      	ldr	r2, [r3, #32]
 80018a8:	4b32      	ldr	r3, [pc, #200]	; (8001974 <HAL_RCC_OscConfig+0x684>)
 80018aa:	2180      	movs	r1, #128	; 0x80
 80018ac:	0189      	lsls	r1, r1, #6
 80018ae:	430a      	orrs	r2, r1
 80018b0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b2:	f7ff f8e7 	bl	8000a84 <HAL_GetTick>
 80018b6:	0003      	movs	r3, r0
 80018b8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018bc:	f7ff f8e2 	bl	8000a84 <HAL_GetTick>
 80018c0:	0002      	movs	r2, r0
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e0c9      	b.n	8001a62 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80018ce:	4b23      	ldr	r3, [pc, #140]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	2202      	movs	r2, #2
 80018d4:	4013      	ands	r3, r2
 80018d6:	d0f1      	beq.n	80018bc <HAL_RCC_OscConfig+0x5cc>
 80018d8:	e01e      	b.n	8001918 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80018da:	4b20      	ldr	r3, [pc, #128]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	4b1f      	ldr	r3, [pc, #124]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 80018e0:	2101      	movs	r1, #1
 80018e2:	438a      	bics	r2, r1
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	4b23      	ldr	r3, [pc, #140]	; (8001974 <HAL_RCC_OscConfig+0x684>)
 80018e8:	6a1a      	ldr	r2, [r3, #32]
 80018ea:	4b22      	ldr	r3, [pc, #136]	; (8001974 <HAL_RCC_OscConfig+0x684>)
 80018ec:	4922      	ldr	r1, [pc, #136]	; (8001978 <HAL_RCC_OscConfig+0x688>)
 80018ee:	400a      	ands	r2, r1
 80018f0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f2:	f7ff f8c7 	bl	8000a84 <HAL_GetTick>
 80018f6:	0003      	movs	r3, r0
 80018f8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018fc:	f7ff f8c2 	bl	8000a84 <HAL_GetTick>
 8001900:	0002      	movs	r2, r0
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e0a9      	b.n	8001a62 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800190e:	4b13      	ldr	r3, [pc, #76]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	2202      	movs	r2, #2
 8001914:	4013      	ands	r3, r2
 8001916:	d1f1      	bne.n	80018fc <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191c:	2b00      	cmp	r3, #0
 800191e:	d100      	bne.n	8001922 <HAL_RCC_OscConfig+0x632>
 8001920:	e09e      	b.n	8001a60 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001922:	6a3b      	ldr	r3, [r7, #32]
 8001924:	2b0c      	cmp	r3, #12
 8001926:	d100      	bne.n	800192a <HAL_RCC_OscConfig+0x63a>
 8001928:	e077      	b.n	8001a1a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192e:	2b02      	cmp	r3, #2
 8001930:	d158      	bne.n	80019e4 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <HAL_RCC_OscConfig+0x66c>)
 8001938:	4910      	ldr	r1, [pc, #64]	; (800197c <HAL_RCC_OscConfig+0x68c>)
 800193a:	400a      	ands	r2, r1
 800193c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193e:	f7ff f8a1 	bl	8000a84 <HAL_GetTick>
 8001942:	0003      	movs	r3, r0
 8001944:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001946:	e01b      	b.n	8001980 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001948:	f7ff f89c 	bl	8000a84 <HAL_GetTick>
 800194c:	0002      	movs	r2, r0
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d914      	bls.n	8001980 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e083      	b.n	8001a62 <HAL_RCC_OscConfig+0x772>
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	40021000 	.word	0x40021000
 8001960:	fffffeff 	.word	0xfffffeff
 8001964:	40007000 	.word	0x40007000
 8001968:	fffffbff 	.word	0xfffffbff
 800196c:	00001388 	.word	0x00001388
 8001970:	efffffff 	.word	0xefffffff
 8001974:	40010000 	.word	0x40010000
 8001978:	ffffdfff 	.word	0xffffdfff
 800197c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001980:	4b3a      	ldr	r3, [pc, #232]	; (8001a6c <HAL_RCC_OscConfig+0x77c>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	2380      	movs	r3, #128	; 0x80
 8001986:	049b      	lsls	r3, r3, #18
 8001988:	4013      	ands	r3, r2
 800198a:	d1dd      	bne.n	8001948 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800198c:	4b37      	ldr	r3, [pc, #220]	; (8001a6c <HAL_RCC_OscConfig+0x77c>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	4a37      	ldr	r2, [pc, #220]	; (8001a70 <HAL_RCC_OscConfig+0x780>)
 8001992:	4013      	ands	r3, r2
 8001994:	0019      	movs	r1, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019a4:	431a      	orrs	r2, r3
 80019a6:	4b31      	ldr	r3, [pc, #196]	; (8001a6c <HAL_RCC_OscConfig+0x77c>)
 80019a8:	430a      	orrs	r2, r1
 80019aa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019ac:	4b2f      	ldr	r3, [pc, #188]	; (8001a6c <HAL_RCC_OscConfig+0x77c>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b2e      	ldr	r3, [pc, #184]	; (8001a6c <HAL_RCC_OscConfig+0x77c>)
 80019b2:	2180      	movs	r1, #128	; 0x80
 80019b4:	0449      	lsls	r1, r1, #17
 80019b6:	430a      	orrs	r2, r1
 80019b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ba:	f7ff f863 	bl	8000a84 <HAL_GetTick>
 80019be:	0003      	movs	r3, r0
 80019c0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c4:	f7ff f85e 	bl	8000a84 <HAL_GetTick>
 80019c8:	0002      	movs	r2, r0
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e045      	b.n	8001a62 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80019d6:	4b25      	ldr	r3, [pc, #148]	; (8001a6c <HAL_RCC_OscConfig+0x77c>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	049b      	lsls	r3, r3, #18
 80019de:	4013      	ands	r3, r2
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0x6d4>
 80019e2:	e03d      	b.n	8001a60 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e4:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <HAL_RCC_OscConfig+0x77c>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <HAL_RCC_OscConfig+0x77c>)
 80019ea:	4922      	ldr	r1, [pc, #136]	; (8001a74 <HAL_RCC_OscConfig+0x784>)
 80019ec:	400a      	ands	r2, r1
 80019ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f0:	f7ff f848 	bl	8000a84 <HAL_GetTick>
 80019f4:	0003      	movs	r3, r0
 80019f6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019fa:	f7ff f843 	bl	8000a84 <HAL_GetTick>
 80019fe:	0002      	movs	r2, r0
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e02a      	b.n	8001a62 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a0c:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <HAL_RCC_OscConfig+0x77c>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	049b      	lsls	r3, r3, #18
 8001a14:	4013      	ands	r3, r2
 8001a16:	d1f0      	bne.n	80019fa <HAL_RCC_OscConfig+0x70a>
 8001a18:	e022      	b.n	8001a60 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d101      	bne.n	8001a26 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e01d      	b.n	8001a62 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <HAL_RCC_OscConfig+0x77c>)
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2c:	69fa      	ldr	r2, [r7, #28]
 8001a2e:	2380      	movs	r3, #128	; 0x80
 8001a30:	025b      	lsls	r3, r3, #9
 8001a32:	401a      	ands	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d10f      	bne.n	8001a5c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a3c:	69fa      	ldr	r2, [r7, #28]
 8001a3e:	23f0      	movs	r3, #240	; 0xf0
 8001a40:	039b      	lsls	r3, r3, #14
 8001a42:	401a      	ands	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d107      	bne.n	8001a5c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001a4c:	69fa      	ldr	r2, [r7, #28]
 8001a4e:	23c0      	movs	r3, #192	; 0xc0
 8001a50:	041b      	lsls	r3, r3, #16
 8001a52:	401a      	ands	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d001      	beq.n	8001a60 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e000      	b.n	8001a62 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	0018      	movs	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	b00a      	add	sp, #40	; 0x28
 8001a68:	bdb0      	pop	{r4, r5, r7, pc}
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	ff02ffff 	.word	0xff02ffff
 8001a74:	feffffff 	.word	0xfeffffff

08001a78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a78:	b5b0      	push	{r4, r5, r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e128      	b.n	8001cde <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a8c:	4b96      	ldr	r3, [pc, #600]	; (8001ce8 <HAL_RCC_ClockConfig+0x270>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2201      	movs	r2, #1
 8001a92:	4013      	ands	r3, r2
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d91e      	bls.n	8001ad8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9a:	4b93      	ldr	r3, [pc, #588]	; (8001ce8 <HAL_RCC_ClockConfig+0x270>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	4393      	bics	r3, r2
 8001aa2:	0019      	movs	r1, r3
 8001aa4:	4b90      	ldr	r3, [pc, #576]	; (8001ce8 <HAL_RCC_ClockConfig+0x270>)
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001aac:	f7fe ffea 	bl	8000a84 <HAL_GetTick>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab4:	e009      	b.n	8001aca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab6:	f7fe ffe5 	bl	8000a84 <HAL_GetTick>
 8001aba:	0002      	movs	r2, r0
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	4a8a      	ldr	r2, [pc, #552]	; (8001cec <HAL_RCC_ClockConfig+0x274>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e109      	b.n	8001cde <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aca:	4b87      	ldr	r3, [pc, #540]	; (8001ce8 <HAL_RCC_ClockConfig+0x270>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d1ee      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2202      	movs	r2, #2
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d009      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae2:	4b83      	ldr	r3, [pc, #524]	; (8001cf0 <HAL_RCC_ClockConfig+0x278>)
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	22f0      	movs	r2, #240	; 0xf0
 8001ae8:	4393      	bics	r3, r2
 8001aea:	0019      	movs	r1, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	4b7f      	ldr	r3, [pc, #508]	; (8001cf0 <HAL_RCC_ClockConfig+0x278>)
 8001af2:	430a      	orrs	r2, r1
 8001af4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2201      	movs	r2, #1
 8001afc:	4013      	ands	r3, r2
 8001afe:	d100      	bne.n	8001b02 <HAL_RCC_ClockConfig+0x8a>
 8001b00:	e089      	b.n	8001c16 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d107      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b0a:	4b79      	ldr	r3, [pc, #484]	; (8001cf0 <HAL_RCC_ClockConfig+0x278>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	2380      	movs	r3, #128	; 0x80
 8001b10:	029b      	lsls	r3, r3, #10
 8001b12:	4013      	ands	r3, r2
 8001b14:	d120      	bne.n	8001b58 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e0e1      	b.n	8001cde <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d107      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b22:	4b73      	ldr	r3, [pc, #460]	; (8001cf0 <HAL_RCC_ClockConfig+0x278>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	2380      	movs	r3, #128	; 0x80
 8001b28:	049b      	lsls	r3, r3, #18
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	d114      	bne.n	8001b58 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e0d5      	b.n	8001cde <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d106      	bne.n	8001b48 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b3a:	4b6d      	ldr	r3, [pc, #436]	; (8001cf0 <HAL_RCC_ClockConfig+0x278>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2204      	movs	r2, #4
 8001b40:	4013      	ands	r3, r2
 8001b42:	d109      	bne.n	8001b58 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0ca      	b.n	8001cde <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b48:	4b69      	ldr	r3, [pc, #420]	; (8001cf0 <HAL_RCC_ClockConfig+0x278>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	2380      	movs	r3, #128	; 0x80
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4013      	ands	r3, r2
 8001b52:	d101      	bne.n	8001b58 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e0c2      	b.n	8001cde <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b58:	4b65      	ldr	r3, [pc, #404]	; (8001cf0 <HAL_RCC_ClockConfig+0x278>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	4393      	bics	r3, r2
 8001b60:	0019      	movs	r1, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	4b62      	ldr	r3, [pc, #392]	; (8001cf0 <HAL_RCC_ClockConfig+0x278>)
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b6c:	f7fe ff8a 	bl	8000a84 <HAL_GetTick>
 8001b70:	0003      	movs	r3, r0
 8001b72:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d111      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b7c:	e009      	b.n	8001b92 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b7e:	f7fe ff81 	bl	8000a84 <HAL_GetTick>
 8001b82:	0002      	movs	r2, r0
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	4a58      	ldr	r2, [pc, #352]	; (8001cec <HAL_RCC_ClockConfig+0x274>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e0a5      	b.n	8001cde <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b92:	4b57      	ldr	r3, [pc, #348]	; (8001cf0 <HAL_RCC_ClockConfig+0x278>)
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	220c      	movs	r2, #12
 8001b98:	4013      	ands	r3, r2
 8001b9a:	2b08      	cmp	r3, #8
 8001b9c:	d1ef      	bne.n	8001b7e <HAL_RCC_ClockConfig+0x106>
 8001b9e:	e03a      	b.n	8001c16 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b03      	cmp	r3, #3
 8001ba6:	d111      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ba8:	e009      	b.n	8001bbe <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001baa:	f7fe ff6b 	bl	8000a84 <HAL_GetTick>
 8001bae:	0002      	movs	r2, r0
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	4a4d      	ldr	r2, [pc, #308]	; (8001cec <HAL_RCC_ClockConfig+0x274>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e08f      	b.n	8001cde <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bbe:	4b4c      	ldr	r3, [pc, #304]	; (8001cf0 <HAL_RCC_ClockConfig+0x278>)
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	220c      	movs	r2, #12
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	2b0c      	cmp	r3, #12
 8001bc8:	d1ef      	bne.n	8001baa <HAL_RCC_ClockConfig+0x132>
 8001bca:	e024      	b.n	8001c16 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d11b      	bne.n	8001c0c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bd4:	e009      	b.n	8001bea <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd6:	f7fe ff55 	bl	8000a84 <HAL_GetTick>
 8001bda:	0002      	movs	r2, r0
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	4a42      	ldr	r2, [pc, #264]	; (8001cec <HAL_RCC_ClockConfig+0x274>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e079      	b.n	8001cde <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bea:	4b41      	ldr	r3, [pc, #260]	; (8001cf0 <HAL_RCC_ClockConfig+0x278>)
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	220c      	movs	r2, #12
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d1ef      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0x15e>
 8001bf6:	e00e      	b.n	8001c16 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf8:	f7fe ff44 	bl	8000a84 <HAL_GetTick>
 8001bfc:	0002      	movs	r2, r0
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	4a3a      	ldr	r2, [pc, #232]	; (8001cec <HAL_RCC_ClockConfig+0x274>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e068      	b.n	8001cde <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c0c:	4b38      	ldr	r3, [pc, #224]	; (8001cf0 <HAL_RCC_ClockConfig+0x278>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	220c      	movs	r2, #12
 8001c12:	4013      	ands	r3, r2
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c16:	4b34      	ldr	r3, [pc, #208]	; (8001ce8 <HAL_RCC_ClockConfig+0x270>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d21e      	bcs.n	8001c62 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c24:	4b30      	ldr	r3, [pc, #192]	; (8001ce8 <HAL_RCC_ClockConfig+0x270>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	4393      	bics	r3, r2
 8001c2c:	0019      	movs	r1, r3
 8001c2e:	4b2e      	ldr	r3, [pc, #184]	; (8001ce8 <HAL_RCC_ClockConfig+0x270>)
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c36:	f7fe ff25 	bl	8000a84 <HAL_GetTick>
 8001c3a:	0003      	movs	r3, r0
 8001c3c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3e:	e009      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c40:	f7fe ff20 	bl	8000a84 <HAL_GetTick>
 8001c44:	0002      	movs	r2, r0
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	4a28      	ldr	r2, [pc, #160]	; (8001cec <HAL_RCC_ClockConfig+0x274>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e044      	b.n	8001cde <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c54:	4b24      	ldr	r3, [pc, #144]	; (8001ce8 <HAL_RCC_ClockConfig+0x270>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d1ee      	bne.n	8001c40 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2204      	movs	r2, #4
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d009      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c6c:	4b20      	ldr	r3, [pc, #128]	; (8001cf0 <HAL_RCC_ClockConfig+0x278>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	4a20      	ldr	r2, [pc, #128]	; (8001cf4 <HAL_RCC_ClockConfig+0x27c>)
 8001c72:	4013      	ands	r3, r2
 8001c74:	0019      	movs	r1, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <HAL_RCC_ClockConfig+0x278>)
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2208      	movs	r2, #8
 8001c86:	4013      	ands	r3, r2
 8001c88:	d00a      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c8a:	4b19      	ldr	r3, [pc, #100]	; (8001cf0 <HAL_RCC_ClockConfig+0x278>)
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	4a1a      	ldr	r2, [pc, #104]	; (8001cf8 <HAL_RCC_ClockConfig+0x280>)
 8001c90:	4013      	ands	r3, r2
 8001c92:	0019      	movs	r1, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	00da      	lsls	r2, r3, #3
 8001c9a:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <HAL_RCC_ClockConfig+0x278>)
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ca0:	f000 f832 	bl	8001d08 <HAL_RCC_GetSysClockFreq>
 8001ca4:	0001      	movs	r1, r0
 8001ca6:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <HAL_RCC_ClockConfig+0x278>)
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	091b      	lsrs	r3, r3, #4
 8001cac:	220f      	movs	r2, #15
 8001cae:	4013      	ands	r3, r2
 8001cb0:	4a12      	ldr	r2, [pc, #72]	; (8001cfc <HAL_RCC_ClockConfig+0x284>)
 8001cb2:	5cd3      	ldrb	r3, [r2, r3]
 8001cb4:	000a      	movs	r2, r1
 8001cb6:	40da      	lsrs	r2, r3
 8001cb8:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <HAL_RCC_ClockConfig+0x288>)
 8001cba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <HAL_RCC_ClockConfig+0x28c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	250b      	movs	r5, #11
 8001cc2:	197c      	adds	r4, r7, r5
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f7fe fe97 	bl	80009f8 <HAL_InitTick>
 8001cca:	0003      	movs	r3, r0
 8001ccc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001cce:	197b      	adds	r3, r7, r5
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d002      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001cd6:	197b      	adds	r3, r7, r5
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	e000      	b.n	8001cde <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	0018      	movs	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	b004      	add	sp, #16
 8001ce4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	40022000 	.word	0x40022000
 8001cec:	00001388 	.word	0x00001388
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	fffff8ff 	.word	0xfffff8ff
 8001cf8:	ffffc7ff 	.word	0xffffc7ff
 8001cfc:	080032ac 	.word	0x080032ac
 8001d00:	20000014 	.word	0x20000014
 8001d04:	20000018 	.word	0x20000018

08001d08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d08:	b5b0      	push	{r4, r5, r7, lr}
 8001d0a:	b08e      	sub	sp, #56	; 0x38
 8001d0c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001d0e:	4b4c      	ldr	r3, [pc, #304]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d16:	230c      	movs	r3, #12
 8001d18:	4013      	ands	r3, r2
 8001d1a:	2b0c      	cmp	r3, #12
 8001d1c:	d014      	beq.n	8001d48 <HAL_RCC_GetSysClockFreq+0x40>
 8001d1e:	d900      	bls.n	8001d22 <HAL_RCC_GetSysClockFreq+0x1a>
 8001d20:	e07b      	b.n	8001e1a <HAL_RCC_GetSysClockFreq+0x112>
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	d002      	beq.n	8001d2c <HAL_RCC_GetSysClockFreq+0x24>
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d00b      	beq.n	8001d42 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d2a:	e076      	b.n	8001e1a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d2c:	4b44      	ldr	r3, [pc, #272]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2210      	movs	r2, #16
 8001d32:	4013      	ands	r3, r2
 8001d34:	d002      	beq.n	8001d3c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001d36:	4b43      	ldr	r3, [pc, #268]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d38:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001d3a:	e07c      	b.n	8001e36 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001d3c:	4b42      	ldr	r3, [pc, #264]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x140>)
 8001d3e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d40:	e079      	b.n	8001e36 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d42:	4b42      	ldr	r3, [pc, #264]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x144>)
 8001d44:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d46:	e076      	b.n	8001e36 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d4a:	0c9a      	lsrs	r2, r3, #18
 8001d4c:	230f      	movs	r3, #15
 8001d4e:	401a      	ands	r2, r3
 8001d50:	4b3f      	ldr	r3, [pc, #252]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x148>)
 8001d52:	5c9b      	ldrb	r3, [r3, r2]
 8001d54:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d58:	0d9a      	lsrs	r2, r3, #22
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	3301      	adds	r3, #1
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d62:	4b37      	ldr	r3, [pc, #220]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d64:	68da      	ldr	r2, [r3, #12]
 8001d66:	2380      	movs	r3, #128	; 0x80
 8001d68:	025b      	lsls	r3, r3, #9
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	d01a      	beq.n	8001da4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d70:	61bb      	str	r3, [r7, #24]
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
 8001d76:	4a35      	ldr	r2, [pc, #212]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x144>)
 8001d78:	2300      	movs	r3, #0
 8001d7a:	69b8      	ldr	r0, [r7, #24]
 8001d7c:	69f9      	ldr	r1, [r7, #28]
 8001d7e:	f7fe fa6f 	bl	8000260 <__aeabi_lmul>
 8001d82:	0002      	movs	r2, r0
 8001d84:	000b      	movs	r3, r1
 8001d86:	0010      	movs	r0, r2
 8001d88:	0019      	movs	r1, r3
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	f7fe fa43 	bl	8000220 <__aeabi_uldivmod>
 8001d9a:	0002      	movs	r2, r0
 8001d9c:	000b      	movs	r3, r1
 8001d9e:	0013      	movs	r3, r2
 8001da0:	637b      	str	r3, [r7, #52]	; 0x34
 8001da2:	e037      	b.n	8001e14 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001da4:	4b26      	ldr	r3, [pc, #152]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x138>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2210      	movs	r2, #16
 8001daa:	4013      	ands	r3, r2
 8001dac:	d01a      	beq.n	8001de4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	4a23      	ldr	r2, [pc, #140]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001db8:	2300      	movs	r3, #0
 8001dba:	68b8      	ldr	r0, [r7, #8]
 8001dbc:	68f9      	ldr	r1, [r7, #12]
 8001dbe:	f7fe fa4f 	bl	8000260 <__aeabi_lmul>
 8001dc2:	0002      	movs	r2, r0
 8001dc4:	000b      	movs	r3, r1
 8001dc6:	0010      	movs	r0, r2
 8001dc8:	0019      	movs	r1, r3
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	603b      	str	r3, [r7, #0]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	607b      	str	r3, [r7, #4]
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f7fe fa23 	bl	8000220 <__aeabi_uldivmod>
 8001dda:	0002      	movs	r2, r0
 8001ddc:	000b      	movs	r3, r1
 8001dde:	0013      	movs	r3, r2
 8001de0:	637b      	str	r3, [r7, #52]	; 0x34
 8001de2:	e017      	b.n	8001e14 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de6:	0018      	movs	r0, r3
 8001de8:	2300      	movs	r3, #0
 8001dea:	0019      	movs	r1, r3
 8001dec:	4a16      	ldr	r2, [pc, #88]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x140>)
 8001dee:	2300      	movs	r3, #0
 8001df0:	f7fe fa36 	bl	8000260 <__aeabi_lmul>
 8001df4:	0002      	movs	r2, r0
 8001df6:	000b      	movs	r3, r1
 8001df8:	0010      	movs	r0, r2
 8001dfa:	0019      	movs	r1, r3
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	001c      	movs	r4, r3
 8001e00:	2300      	movs	r3, #0
 8001e02:	001d      	movs	r5, r3
 8001e04:	0022      	movs	r2, r4
 8001e06:	002b      	movs	r3, r5
 8001e08:	f7fe fa0a 	bl	8000220 <__aeabi_uldivmod>
 8001e0c:	0002      	movs	r2, r0
 8001e0e:	000b      	movs	r3, r1
 8001e10:	0013      	movs	r3, r2
 8001e12:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e16:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e18:	e00d      	b.n	8001e36 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	0b5b      	lsrs	r3, r3, #13
 8001e20:	2207      	movs	r2, #7
 8001e22:	4013      	ands	r3, r2
 8001e24:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001e26:	6a3b      	ldr	r3, [r7, #32]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	2280      	movs	r2, #128	; 0x80
 8001e2c:	0212      	lsls	r2, r2, #8
 8001e2e:	409a      	lsls	r2, r3
 8001e30:	0013      	movs	r3, r2
 8001e32:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e34:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001e38:	0018      	movs	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	b00e      	add	sp, #56	; 0x38
 8001e3e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e40:	40021000 	.word	0x40021000
 8001e44:	003d0900 	.word	0x003d0900
 8001e48:	00f42400 	.word	0x00f42400
 8001e4c:	007a1200 	.word	0x007a1200
 8001e50:	080032c4 	.word	0x080032c4

08001e54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e58:	4b02      	ldr	r3, [pc, #8]	; (8001e64 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
}
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	20000014 	.word	0x20000014

08001e68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e6c:	f7ff fff2 	bl	8001e54 <HAL_RCC_GetHCLKFreq>
 8001e70:	0001      	movs	r1, r0
 8001e72:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	0a1b      	lsrs	r3, r3, #8
 8001e78:	2207      	movs	r2, #7
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	4a04      	ldr	r2, [pc, #16]	; (8001e90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e7e:	5cd3      	ldrb	r3, [r2, r3]
 8001e80:	40d9      	lsrs	r1, r3
 8001e82:	000b      	movs	r3, r1
}
 8001e84:	0018      	movs	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	080032bc 	.word	0x080032bc

08001e94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e98:	f7ff ffdc 	bl	8001e54 <HAL_RCC_GetHCLKFreq>
 8001e9c:	0001      	movs	r1, r0
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	0adb      	lsrs	r3, r3, #11
 8001ea4:	2207      	movs	r2, #7
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	4a04      	ldr	r2, [pc, #16]	; (8001ebc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001eaa:	5cd3      	ldrb	r3, [r2, r3]
 8001eac:	40d9      	lsrs	r1, r3
 8001eae:	000b      	movs	r3, r1
}
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	080032bc 	.word	0x080032bc

08001ec0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001ec8:	2317      	movs	r3, #23
 8001eca:	18fb      	adds	r3, r7, r3
 8001ecc:	2200      	movs	r2, #0
 8001ece:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2220      	movs	r2, #32
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d106      	bne.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	011b      	lsls	r3, r3, #4
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d100      	bne.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001ee6:	e104      	b.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ee8:	4bb1      	ldr	r3, [pc, #708]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001eea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eec:	2380      	movs	r3, #128	; 0x80
 8001eee:	055b      	lsls	r3, r3, #21
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d10a      	bne.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef4:	4bae      	ldr	r3, [pc, #696]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ef6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ef8:	4bad      	ldr	r3, [pc, #692]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001efa:	2180      	movs	r1, #128	; 0x80
 8001efc:	0549      	lsls	r1, r1, #21
 8001efe:	430a      	orrs	r2, r1
 8001f00:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001f02:	2317      	movs	r3, #23
 8001f04:	18fb      	adds	r3, r7, r3
 8001f06:	2201      	movs	r2, #1
 8001f08:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0a:	4baa      	ldr	r3, [pc, #680]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	2380      	movs	r3, #128	; 0x80
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4013      	ands	r3, r2
 8001f14:	d11a      	bne.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f16:	4ba7      	ldr	r3, [pc, #668]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	4ba6      	ldr	r3, [pc, #664]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f1c:	2180      	movs	r1, #128	; 0x80
 8001f1e:	0049      	lsls	r1, r1, #1
 8001f20:	430a      	orrs	r2, r1
 8001f22:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f24:	f7fe fdae 	bl	8000a84 <HAL_GetTick>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2c:	e008      	b.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f2e:	f7fe fda9 	bl	8000a84 <HAL_GetTick>
 8001f32:	0002      	movs	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b64      	cmp	r3, #100	; 0x64
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e133      	b.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f40:	4b9c      	ldr	r3, [pc, #624]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d0f0      	beq.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001f4c:	4b98      	ldr	r3, [pc, #608]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	23c0      	movs	r3, #192	; 0xc0
 8001f52:	039b      	lsls	r3, r3, #14
 8001f54:	4013      	ands	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	23c0      	movs	r3, #192	; 0xc0
 8001f5e:	039b      	lsls	r3, r3, #14
 8001f60:	4013      	ands	r3, r2
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d107      	bne.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	23c0      	movs	r3, #192	; 0xc0
 8001f6e:	039b      	lsls	r3, r3, #14
 8001f70:	4013      	ands	r3, r2
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d013      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	23c0      	movs	r3, #192	; 0xc0
 8001f7e:	029b      	lsls	r3, r3, #10
 8001f80:	401a      	ands	r2, r3
 8001f82:	23c0      	movs	r3, #192	; 0xc0
 8001f84:	029b      	lsls	r3, r3, #10
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d10a      	bne.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001f8a:	4b89      	ldr	r3, [pc, #548]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	2380      	movs	r3, #128	; 0x80
 8001f90:	029b      	lsls	r3, r3, #10
 8001f92:	401a      	ands	r2, r3
 8001f94:	2380      	movs	r3, #128	; 0x80
 8001f96:	029b      	lsls	r3, r3, #10
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d101      	bne.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e103      	b.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001fa0:	4b83      	ldr	r3, [pc, #524]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fa2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fa4:	23c0      	movs	r3, #192	; 0xc0
 8001fa6:	029b      	lsls	r3, r3, #10
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d049      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	23c0      	movs	r3, #192	; 0xc0
 8001fb8:	029b      	lsls	r3, r3, #10
 8001fba:	4013      	ands	r3, r2
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d004      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d10d      	bne.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	23c0      	movs	r3, #192	; 0xc0
 8001fd2:	029b      	lsls	r3, r3, #10
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d034      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	2380      	movs	r3, #128	; 0x80
 8001fe2:	011b      	lsls	r3, r3, #4
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d02e      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001fe8:	4b71      	ldr	r3, [pc, #452]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fec:	4a72      	ldr	r2, [pc, #456]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001fee:	4013      	ands	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ff2:	4b6f      	ldr	r3, [pc, #444]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ff4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ff6:	4b6e      	ldr	r3, [pc, #440]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ff8:	2180      	movs	r1, #128	; 0x80
 8001ffa:	0309      	lsls	r1, r1, #12
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002000:	4b6b      	ldr	r3, [pc, #428]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002002:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002004:	4b6a      	ldr	r3, [pc, #424]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002006:	496d      	ldr	r1, [pc, #436]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002008:	400a      	ands	r2, r1
 800200a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800200c:	4b68      	ldr	r3, [pc, #416]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	2380      	movs	r3, #128	; 0x80
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	4013      	ands	r3, r2
 800201a:	d014      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201c:	f7fe fd32 	bl	8000a84 <HAL_GetTick>
 8002020:	0003      	movs	r3, r0
 8002022:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002024:	e009      	b.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002026:	f7fe fd2d 	bl	8000a84 <HAL_GetTick>
 800202a:	0002      	movs	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	4a63      	ldr	r2, [pc, #396]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d901      	bls.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e0b6      	b.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800203a:	4b5d      	ldr	r3, [pc, #372]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800203c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800203e:	2380      	movs	r3, #128	; 0x80
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4013      	ands	r3, r2
 8002044:	d0ef      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	2380      	movs	r3, #128	; 0x80
 800204c:	011b      	lsls	r3, r3, #4
 800204e:	4013      	ands	r3, r2
 8002050:	d01f      	beq.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	23c0      	movs	r3, #192	; 0xc0
 8002058:	029b      	lsls	r3, r3, #10
 800205a:	401a      	ands	r2, r3
 800205c:	23c0      	movs	r3, #192	; 0xc0
 800205e:	029b      	lsls	r3, r3, #10
 8002060:	429a      	cmp	r2, r3
 8002062:	d10c      	bne.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002064:	4b52      	ldr	r3, [pc, #328]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a56      	ldr	r2, [pc, #344]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800206a:	4013      	ands	r3, r2
 800206c:	0019      	movs	r1, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	23c0      	movs	r3, #192	; 0xc0
 8002074:	039b      	lsls	r3, r3, #14
 8002076:	401a      	ands	r2, r3
 8002078:	4b4d      	ldr	r3, [pc, #308]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800207a:	430a      	orrs	r2, r1
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	4b4c      	ldr	r3, [pc, #304]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002080:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	23c0      	movs	r3, #192	; 0xc0
 8002088:	029b      	lsls	r3, r3, #10
 800208a:	401a      	ands	r2, r3
 800208c:	4b48      	ldr	r3, [pc, #288]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800208e:	430a      	orrs	r2, r1
 8002090:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2220      	movs	r2, #32
 8002098:	4013      	ands	r3, r2
 800209a:	d01f      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	23c0      	movs	r3, #192	; 0xc0
 80020a2:	029b      	lsls	r3, r3, #10
 80020a4:	401a      	ands	r2, r3
 80020a6:	23c0      	movs	r3, #192	; 0xc0
 80020a8:	029b      	lsls	r3, r3, #10
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d10c      	bne.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80020ae:	4b40      	ldr	r3, [pc, #256]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a44      	ldr	r2, [pc, #272]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	0019      	movs	r1, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	23c0      	movs	r3, #192	; 0xc0
 80020be:	039b      	lsls	r3, r3, #14
 80020c0:	401a      	ands	r2, r3
 80020c2:	4b3b      	ldr	r3, [pc, #236]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020c4:	430a      	orrs	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	4b39      	ldr	r3, [pc, #228]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020ca:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	23c0      	movs	r3, #192	; 0xc0
 80020d2:	029b      	lsls	r3, r3, #10
 80020d4:	401a      	ands	r2, r3
 80020d6:	4b36      	ldr	r3, [pc, #216]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020d8:	430a      	orrs	r2, r1
 80020da:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020dc:	2317      	movs	r3, #23
 80020de:	18fb      	adds	r3, r7, r3
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d105      	bne.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e6:	4b32      	ldr	r3, [pc, #200]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020ea:	4b31      	ldr	r3, [pc, #196]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020ec:	4936      	ldr	r1, [pc, #216]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020ee:	400a      	ands	r2, r1
 80020f0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2201      	movs	r2, #1
 80020f8:	4013      	ands	r3, r2
 80020fa:	d009      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020fc:	4b2c      	ldr	r3, [pc, #176]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002100:	2203      	movs	r2, #3
 8002102:	4393      	bics	r3, r2
 8002104:	0019      	movs	r1, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68da      	ldr	r2, [r3, #12]
 800210a:	4b29      	ldr	r3, [pc, #164]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800210c:	430a      	orrs	r2, r1
 800210e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2202      	movs	r2, #2
 8002116:	4013      	ands	r3, r2
 8002118:	d009      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800211a:	4b25      	ldr	r3, [pc, #148]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800211c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211e:	220c      	movs	r2, #12
 8002120:	4393      	bics	r3, r2
 8002122:	0019      	movs	r1, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691a      	ldr	r2, [r3, #16]
 8002128:	4b21      	ldr	r3, [pc, #132]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800212a:	430a      	orrs	r2, r1
 800212c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2204      	movs	r2, #4
 8002134:	4013      	ands	r3, r2
 8002136:	d009      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002138:	4b1d      	ldr	r3, [pc, #116]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800213a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213c:	4a23      	ldr	r2, [pc, #140]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800213e:	4013      	ands	r3, r2
 8002140:	0019      	movs	r1, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	695a      	ldr	r2, [r3, #20]
 8002146:	4b1a      	ldr	r3, [pc, #104]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002148:	430a      	orrs	r2, r1
 800214a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2208      	movs	r2, #8
 8002152:	4013      	ands	r3, r2
 8002154:	d009      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002156:	4b16      	ldr	r3, [pc, #88]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215a:	4a1d      	ldr	r2, [pc, #116]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800215c:	4013      	ands	r3, r2
 800215e:	0019      	movs	r1, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	699a      	ldr	r2, [r3, #24]
 8002164:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002166:	430a      	orrs	r2, r1
 8002168:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2240      	movs	r2, #64	; 0x40
 8002170:	4013      	ands	r3, r2
 8002172:	d009      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002174:	4b0e      	ldr	r3, [pc, #56]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002178:	4a16      	ldr	r2, [pc, #88]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800217a:	4013      	ands	r3, r2
 800217c:	0019      	movs	r1, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1a      	ldr	r2, [r3, #32]
 8002182:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002184:	430a      	orrs	r2, r1
 8002186:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2280      	movs	r2, #128	; 0x80
 800218e:	4013      	ands	r3, r2
 8002190:	d009      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002192:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002196:	4a10      	ldr	r2, [pc, #64]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002198:	4013      	ands	r3, r2
 800219a:	0019      	movs	r1, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69da      	ldr	r2, [r3, #28]
 80021a0:	4b03      	ldr	r3, [pc, #12]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021a2:	430a      	orrs	r2, r1
 80021a4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	0018      	movs	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	b006      	add	sp, #24
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40007000 	.word	0x40007000
 80021b8:	fffcffff 	.word	0xfffcffff
 80021bc:	fff7ffff 	.word	0xfff7ffff
 80021c0:	00001388 	.word	0x00001388
 80021c4:	ffcfffff 	.word	0xffcfffff
 80021c8:	efffffff 	.word	0xefffffff
 80021cc:	fffff3ff 	.word	0xfffff3ff
 80021d0:	ffffcfff 	.word	0xffffcfff
 80021d4:	fbffffff 	.word	0xfbffffff
 80021d8:	fff3ffff 	.word	0xfff3ffff

080021dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e044      	b.n	8002278 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d107      	bne.n	8002206 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2278      	movs	r2, #120	; 0x78
 80021fa:	2100      	movs	r1, #0
 80021fc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	0018      	movs	r0, r3
 8002202:	f7fe fadf 	bl	80007c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2224      	movs	r2, #36	; 0x24
 800220a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2101      	movs	r1, #1
 8002218:	438a      	bics	r2, r1
 800221a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	0018      	movs	r0, r3
 8002220:	f000 f942 	bl	80024a8 <UART_SetConfig>
 8002224:	0003      	movs	r3, r0
 8002226:	2b01      	cmp	r3, #1
 8002228:	d101      	bne.n	800222e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e024      	b.n	8002278 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	0018      	movs	r0, r3
 800223a:	f000 fbb9 	bl	80029b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	490d      	ldr	r1, [pc, #52]	; (8002280 <HAL_UART_Init+0xa4>)
 800224a:	400a      	ands	r2, r1
 800224c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	212a      	movs	r1, #42	; 0x2a
 800225a:	438a      	bics	r2, r1
 800225c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2101      	movs	r1, #1
 800226a:	430a      	orrs	r2, r1
 800226c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	0018      	movs	r0, r3
 8002272:	f000 fc51 	bl	8002b18 <UART_CheckIdleState>
 8002276:	0003      	movs	r3, r0
}
 8002278:	0018      	movs	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	b002      	add	sp, #8
 800227e:	bd80      	pop	{r7, pc}
 8002280:	ffffb7ff 	.word	0xffffb7ff

08002284 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b088      	sub	sp, #32
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	1dbb      	adds	r3, r7, #6
 8002290:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002296:	2b20      	cmp	r3, #32
 8002298:	d000      	beq.n	800229c <HAL_UART_Transmit_DMA+0x18>
 800229a:	e077      	b.n	800238c <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_UART_Transmit_DMA+0x26>
 80022a2:	1dbb      	adds	r3, r7, #6
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e06f      	b.n	800238e <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	2380      	movs	r3, #128	; 0x80
 80022b4:	015b      	lsls	r3, r3, #5
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d109      	bne.n	80022ce <HAL_UART_Transmit_DMA+0x4a>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d105      	bne.n	80022ce <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	2201      	movs	r2, #1
 80022c6:	4013      	ands	r3, r2
 80022c8:	d001      	beq.n	80022ce <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e05f      	b.n	800238e <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	1dba      	adds	r2, r7, #6
 80022d8:	2150      	movs	r1, #80	; 0x50
 80022da:	8812      	ldrh	r2, [r2, #0]
 80022dc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1dba      	adds	r2, r7, #6
 80022e2:	2152      	movs	r1, #82	; 0x52
 80022e4:	8812      	ldrh	r2, [r2, #0]
 80022e6:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2284      	movs	r2, #132	; 0x84
 80022ec:	2100      	movs	r1, #0
 80022ee:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2221      	movs	r2, #33	; 0x21
 80022f4:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d027      	beq.n	800234e <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002302:	4a25      	ldr	r2, [pc, #148]	; (8002398 <HAL_UART_Transmit_DMA+0x114>)
 8002304:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230a:	4a24      	ldr	r2, [pc, #144]	; (800239c <HAL_UART_Transmit_DMA+0x118>)
 800230c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002312:	4a23      	ldr	r2, [pc, #140]	; (80023a0 <HAL_UART_Transmit_DMA+0x11c>)
 8002314:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231a:	2200      	movs	r2, #0
 800231c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002326:	0019      	movs	r1, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	3328      	adds	r3, #40	; 0x28
 800232e:	001a      	movs	r2, r3
 8002330:	1dbb      	adds	r3, r7, #6
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	f7fe fd06 	bl	8000d44 <HAL_DMA_Start_IT>
 8002338:	1e03      	subs	r3, r0, #0
 800233a:	d008      	beq.n	800234e <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2284      	movs	r2, #132	; 0x84
 8002340:	2110      	movs	r1, #16
 8002342:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2220      	movs	r2, #32
 8002348:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e01f      	b.n	800238e <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2240      	movs	r2, #64	; 0x40
 8002354:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002356:	f3ef 8310 	mrs	r3, PRIMASK
 800235a:	613b      	str	r3, [r7, #16]
  return(result);
 800235c:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800235e:	61fb      	str	r3, [r7, #28]
 8002360:	2301      	movs	r3, #1
 8002362:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	f383 8810 	msr	PRIMASK, r3
}
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2180      	movs	r1, #128	; 0x80
 8002378:	430a      	orrs	r2, r1
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	f383 8810 	msr	PRIMASK, r3
}
 8002386:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8002388:	2300      	movs	r3, #0
 800238a:	e000      	b.n	800238e <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800238c:	2302      	movs	r3, #2
  }
}
 800238e:	0018      	movs	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	b008      	add	sp, #32
 8002394:	bd80      	pop	{r7, pc}
 8002396:	46c0      	nop			; (mov r8, r8)
 8002398:	08002f8d 	.word	0x08002f8d
 800239c:	08003025 	.word	0x08003025
 80023a0:	080031b7 	.word	0x080031b7

080023a4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b088      	sub	sp, #32
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	1dbb      	adds	r3, r7, #6
 80023b0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2280      	movs	r2, #128	; 0x80
 80023b6:	589b      	ldr	r3, [r3, r2]
 80023b8:	2b20      	cmp	r3, #32
 80023ba:	d14a      	bne.n	8002452 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_UART_Receive_DMA+0x26>
 80023c2:	1dbb      	adds	r3, r7, #6
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e042      	b.n	8002454 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	2380      	movs	r3, #128	; 0x80
 80023d4:	015b      	lsls	r3, r3, #5
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d109      	bne.n	80023ee <HAL_UART_Receive_DMA+0x4a>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d105      	bne.n	80023ee <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2201      	movs	r2, #1
 80023e6:	4013      	ands	r3, r2
 80023e8:	d001      	beq.n	80023ee <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e032      	b.n	8002454 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a18      	ldr	r2, [pc, #96]	; (800245c <HAL_UART_Receive_DMA+0xb8>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d020      	beq.n	8002440 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	2380      	movs	r3, #128	; 0x80
 8002406:	041b      	lsls	r3, r3, #16
 8002408:	4013      	ands	r3, r2
 800240a:	d019      	beq.n	8002440 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800240c:	f3ef 8310 	mrs	r3, PRIMASK
 8002410:	613b      	str	r3, [r7, #16]
  return(result);
 8002412:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002414:	61fb      	str	r3, [r7, #28]
 8002416:	2301      	movs	r3, #1
 8002418:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f383 8810 	msr	PRIMASK, r3
}
 8002420:	46c0      	nop			; (mov r8, r8)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2180      	movs	r1, #128	; 0x80
 800242e:	04c9      	lsls	r1, r1, #19
 8002430:	430a      	orrs	r2, r1
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	f383 8810 	msr	PRIMASK, r3
}
 800243e:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002440:	1dbb      	adds	r3, r7, #6
 8002442:	881a      	ldrh	r2, [r3, #0]
 8002444:	68b9      	ldr	r1, [r7, #8]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	0018      	movs	r0, r3
 800244a:	f000 fc77 	bl	8002d3c <UART_Start_Receive_DMA>
 800244e:	0003      	movs	r3, r0
 8002450:	e000      	b.n	8002454 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8002452:	2302      	movs	r3, #2
  }
}
 8002454:	0018      	movs	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	b008      	add	sp, #32
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40004800 	.word	0x40004800

08002460 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002468:	46c0      	nop			; (mov r8, r8)
 800246a:	46bd      	mov	sp, r7
 800246c:	b002      	add	sp, #8
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002478:	46c0      	nop			; (mov r8, r8)
 800247a:	46bd      	mov	sp, r7
 800247c:	b002      	add	sp, #8
 800247e:	bd80      	pop	{r7, pc}

08002480 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002488:	46c0      	nop			; (mov r8, r8)
 800248a:	46bd      	mov	sp, r7
 800248c:	b002      	add	sp, #8
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	000a      	movs	r2, r1
 800249a:	1cbb      	adds	r3, r7, #2
 800249c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	46bd      	mov	sp, r7
 80024a2:	b002      	add	sp, #8
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024a8:	b5b0      	push	{r4, r5, r7, lr}
 80024aa:	b08e      	sub	sp, #56	; 0x38
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80024b0:	231a      	movs	r3, #26
 80024b2:	2218      	movs	r2, #24
 80024b4:	189b      	adds	r3, r3, r2
 80024b6:	19db      	adds	r3, r3, r7
 80024b8:	2200      	movs	r2, #0
 80024ba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	431a      	orrs	r2, r3
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	431a      	orrs	r2, r3
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	69db      	ldr	r3, [r3, #28]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4ac6      	ldr	r2, [pc, #792]	; (80027f4 <UART_SetConfig+0x34c>)
 80024dc:	4013      	ands	r3, r2
 80024de:	0019      	movs	r1, r3
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024e6:	430a      	orrs	r2, r1
 80024e8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	4ac1      	ldr	r2, [pc, #772]	; (80027f8 <UART_SetConfig+0x350>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	0019      	movs	r1, r3
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4abb      	ldr	r2, [pc, #748]	; (80027fc <UART_SetConfig+0x354>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d004      	beq.n	800251c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002518:	4313      	orrs	r3, r2
 800251a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	4ab7      	ldr	r2, [pc, #732]	; (8002800 <UART_SetConfig+0x358>)
 8002524:	4013      	ands	r3, r2
 8002526:	0019      	movs	r1, r3
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800252e:	430a      	orrs	r2, r1
 8002530:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4ab3      	ldr	r2, [pc, #716]	; (8002804 <UART_SetConfig+0x35c>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d131      	bne.n	80025a0 <UART_SetConfig+0xf8>
 800253c:	4bb2      	ldr	r3, [pc, #712]	; (8002808 <UART_SetConfig+0x360>)
 800253e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002540:	2203      	movs	r2, #3
 8002542:	4013      	ands	r3, r2
 8002544:	2b03      	cmp	r3, #3
 8002546:	d01d      	beq.n	8002584 <UART_SetConfig+0xdc>
 8002548:	d823      	bhi.n	8002592 <UART_SetConfig+0xea>
 800254a:	2b02      	cmp	r3, #2
 800254c:	d00c      	beq.n	8002568 <UART_SetConfig+0xc0>
 800254e:	d820      	bhi.n	8002592 <UART_SetConfig+0xea>
 8002550:	2b00      	cmp	r3, #0
 8002552:	d002      	beq.n	800255a <UART_SetConfig+0xb2>
 8002554:	2b01      	cmp	r3, #1
 8002556:	d00e      	beq.n	8002576 <UART_SetConfig+0xce>
 8002558:	e01b      	b.n	8002592 <UART_SetConfig+0xea>
 800255a:	231b      	movs	r3, #27
 800255c:	2218      	movs	r2, #24
 800255e:	189b      	adds	r3, r3, r2
 8002560:	19db      	adds	r3, r3, r7
 8002562:	2201      	movs	r2, #1
 8002564:	701a      	strb	r2, [r3, #0]
 8002566:	e09c      	b.n	80026a2 <UART_SetConfig+0x1fa>
 8002568:	231b      	movs	r3, #27
 800256a:	2218      	movs	r2, #24
 800256c:	189b      	adds	r3, r3, r2
 800256e:	19db      	adds	r3, r3, r7
 8002570:	2202      	movs	r2, #2
 8002572:	701a      	strb	r2, [r3, #0]
 8002574:	e095      	b.n	80026a2 <UART_SetConfig+0x1fa>
 8002576:	231b      	movs	r3, #27
 8002578:	2218      	movs	r2, #24
 800257a:	189b      	adds	r3, r3, r2
 800257c:	19db      	adds	r3, r3, r7
 800257e:	2204      	movs	r2, #4
 8002580:	701a      	strb	r2, [r3, #0]
 8002582:	e08e      	b.n	80026a2 <UART_SetConfig+0x1fa>
 8002584:	231b      	movs	r3, #27
 8002586:	2218      	movs	r2, #24
 8002588:	189b      	adds	r3, r3, r2
 800258a:	19db      	adds	r3, r3, r7
 800258c:	2208      	movs	r2, #8
 800258e:	701a      	strb	r2, [r3, #0]
 8002590:	e087      	b.n	80026a2 <UART_SetConfig+0x1fa>
 8002592:	231b      	movs	r3, #27
 8002594:	2218      	movs	r2, #24
 8002596:	189b      	adds	r3, r3, r2
 8002598:	19db      	adds	r3, r3, r7
 800259a:	2210      	movs	r2, #16
 800259c:	701a      	strb	r2, [r3, #0]
 800259e:	e080      	b.n	80026a2 <UART_SetConfig+0x1fa>
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a99      	ldr	r2, [pc, #612]	; (800280c <UART_SetConfig+0x364>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d131      	bne.n	800260e <UART_SetConfig+0x166>
 80025aa:	4b97      	ldr	r3, [pc, #604]	; (8002808 <UART_SetConfig+0x360>)
 80025ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ae:	220c      	movs	r2, #12
 80025b0:	4013      	ands	r3, r2
 80025b2:	2b0c      	cmp	r3, #12
 80025b4:	d01d      	beq.n	80025f2 <UART_SetConfig+0x14a>
 80025b6:	d823      	bhi.n	8002600 <UART_SetConfig+0x158>
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d00c      	beq.n	80025d6 <UART_SetConfig+0x12e>
 80025bc:	d820      	bhi.n	8002600 <UART_SetConfig+0x158>
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d002      	beq.n	80025c8 <UART_SetConfig+0x120>
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d00e      	beq.n	80025e4 <UART_SetConfig+0x13c>
 80025c6:	e01b      	b.n	8002600 <UART_SetConfig+0x158>
 80025c8:	231b      	movs	r3, #27
 80025ca:	2218      	movs	r2, #24
 80025cc:	189b      	adds	r3, r3, r2
 80025ce:	19db      	adds	r3, r3, r7
 80025d0:	2200      	movs	r2, #0
 80025d2:	701a      	strb	r2, [r3, #0]
 80025d4:	e065      	b.n	80026a2 <UART_SetConfig+0x1fa>
 80025d6:	231b      	movs	r3, #27
 80025d8:	2218      	movs	r2, #24
 80025da:	189b      	adds	r3, r3, r2
 80025dc:	19db      	adds	r3, r3, r7
 80025de:	2202      	movs	r2, #2
 80025e0:	701a      	strb	r2, [r3, #0]
 80025e2:	e05e      	b.n	80026a2 <UART_SetConfig+0x1fa>
 80025e4:	231b      	movs	r3, #27
 80025e6:	2218      	movs	r2, #24
 80025e8:	189b      	adds	r3, r3, r2
 80025ea:	19db      	adds	r3, r3, r7
 80025ec:	2204      	movs	r2, #4
 80025ee:	701a      	strb	r2, [r3, #0]
 80025f0:	e057      	b.n	80026a2 <UART_SetConfig+0x1fa>
 80025f2:	231b      	movs	r3, #27
 80025f4:	2218      	movs	r2, #24
 80025f6:	189b      	adds	r3, r3, r2
 80025f8:	19db      	adds	r3, r3, r7
 80025fa:	2208      	movs	r2, #8
 80025fc:	701a      	strb	r2, [r3, #0]
 80025fe:	e050      	b.n	80026a2 <UART_SetConfig+0x1fa>
 8002600:	231b      	movs	r3, #27
 8002602:	2218      	movs	r2, #24
 8002604:	189b      	adds	r3, r3, r2
 8002606:	19db      	adds	r3, r3, r7
 8002608:	2210      	movs	r2, #16
 800260a:	701a      	strb	r2, [r3, #0]
 800260c:	e049      	b.n	80026a2 <UART_SetConfig+0x1fa>
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a7a      	ldr	r2, [pc, #488]	; (80027fc <UART_SetConfig+0x354>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d13e      	bne.n	8002696 <UART_SetConfig+0x1ee>
 8002618:	4b7b      	ldr	r3, [pc, #492]	; (8002808 <UART_SetConfig+0x360>)
 800261a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800261c:	23c0      	movs	r3, #192	; 0xc0
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	4013      	ands	r3, r2
 8002622:	22c0      	movs	r2, #192	; 0xc0
 8002624:	0112      	lsls	r2, r2, #4
 8002626:	4293      	cmp	r3, r2
 8002628:	d027      	beq.n	800267a <UART_SetConfig+0x1d2>
 800262a:	22c0      	movs	r2, #192	; 0xc0
 800262c:	0112      	lsls	r2, r2, #4
 800262e:	4293      	cmp	r3, r2
 8002630:	d82a      	bhi.n	8002688 <UART_SetConfig+0x1e0>
 8002632:	2280      	movs	r2, #128	; 0x80
 8002634:	0112      	lsls	r2, r2, #4
 8002636:	4293      	cmp	r3, r2
 8002638:	d011      	beq.n	800265e <UART_SetConfig+0x1b6>
 800263a:	2280      	movs	r2, #128	; 0x80
 800263c:	0112      	lsls	r2, r2, #4
 800263e:	4293      	cmp	r3, r2
 8002640:	d822      	bhi.n	8002688 <UART_SetConfig+0x1e0>
 8002642:	2b00      	cmp	r3, #0
 8002644:	d004      	beq.n	8002650 <UART_SetConfig+0x1a8>
 8002646:	2280      	movs	r2, #128	; 0x80
 8002648:	00d2      	lsls	r2, r2, #3
 800264a:	4293      	cmp	r3, r2
 800264c:	d00e      	beq.n	800266c <UART_SetConfig+0x1c4>
 800264e:	e01b      	b.n	8002688 <UART_SetConfig+0x1e0>
 8002650:	231b      	movs	r3, #27
 8002652:	2218      	movs	r2, #24
 8002654:	189b      	adds	r3, r3, r2
 8002656:	19db      	adds	r3, r3, r7
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]
 800265c:	e021      	b.n	80026a2 <UART_SetConfig+0x1fa>
 800265e:	231b      	movs	r3, #27
 8002660:	2218      	movs	r2, #24
 8002662:	189b      	adds	r3, r3, r2
 8002664:	19db      	adds	r3, r3, r7
 8002666:	2202      	movs	r2, #2
 8002668:	701a      	strb	r2, [r3, #0]
 800266a:	e01a      	b.n	80026a2 <UART_SetConfig+0x1fa>
 800266c:	231b      	movs	r3, #27
 800266e:	2218      	movs	r2, #24
 8002670:	189b      	adds	r3, r3, r2
 8002672:	19db      	adds	r3, r3, r7
 8002674:	2204      	movs	r2, #4
 8002676:	701a      	strb	r2, [r3, #0]
 8002678:	e013      	b.n	80026a2 <UART_SetConfig+0x1fa>
 800267a:	231b      	movs	r3, #27
 800267c:	2218      	movs	r2, #24
 800267e:	189b      	adds	r3, r3, r2
 8002680:	19db      	adds	r3, r3, r7
 8002682:	2208      	movs	r2, #8
 8002684:	701a      	strb	r2, [r3, #0]
 8002686:	e00c      	b.n	80026a2 <UART_SetConfig+0x1fa>
 8002688:	231b      	movs	r3, #27
 800268a:	2218      	movs	r2, #24
 800268c:	189b      	adds	r3, r3, r2
 800268e:	19db      	adds	r3, r3, r7
 8002690:	2210      	movs	r2, #16
 8002692:	701a      	strb	r2, [r3, #0]
 8002694:	e005      	b.n	80026a2 <UART_SetConfig+0x1fa>
 8002696:	231b      	movs	r3, #27
 8002698:	2218      	movs	r2, #24
 800269a:	189b      	adds	r3, r3, r2
 800269c:	19db      	adds	r3, r3, r7
 800269e:	2210      	movs	r2, #16
 80026a0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a55      	ldr	r2, [pc, #340]	; (80027fc <UART_SetConfig+0x354>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d000      	beq.n	80026ae <UART_SetConfig+0x206>
 80026ac:	e084      	b.n	80027b8 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80026ae:	231b      	movs	r3, #27
 80026b0:	2218      	movs	r2, #24
 80026b2:	189b      	adds	r3, r3, r2
 80026b4:	19db      	adds	r3, r3, r7
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d01d      	beq.n	80026f8 <UART_SetConfig+0x250>
 80026bc:	dc20      	bgt.n	8002700 <UART_SetConfig+0x258>
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d015      	beq.n	80026ee <UART_SetConfig+0x246>
 80026c2:	dc1d      	bgt.n	8002700 <UART_SetConfig+0x258>
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d002      	beq.n	80026ce <UART_SetConfig+0x226>
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d005      	beq.n	80026d8 <UART_SetConfig+0x230>
 80026cc:	e018      	b.n	8002700 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026ce:	f7ff fbcb 	bl	8001e68 <HAL_RCC_GetPCLK1Freq>
 80026d2:	0003      	movs	r3, r0
 80026d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80026d6:	e01c      	b.n	8002712 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026d8:	4b4b      	ldr	r3, [pc, #300]	; (8002808 <UART_SetConfig+0x360>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2210      	movs	r2, #16
 80026de:	4013      	ands	r3, r2
 80026e0:	d002      	beq.n	80026e8 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80026e2:	4b4b      	ldr	r3, [pc, #300]	; (8002810 <UART_SetConfig+0x368>)
 80026e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80026e6:	e014      	b.n	8002712 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 80026e8:	4b4a      	ldr	r3, [pc, #296]	; (8002814 <UART_SetConfig+0x36c>)
 80026ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80026ec:	e011      	b.n	8002712 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026ee:	f7ff fb0b 	bl	8001d08 <HAL_RCC_GetSysClockFreq>
 80026f2:	0003      	movs	r3, r0
 80026f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80026f6:	e00c      	b.n	8002712 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026f8:	2380      	movs	r3, #128	; 0x80
 80026fa:	021b      	lsls	r3, r3, #8
 80026fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80026fe:	e008      	b.n	8002712 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8002700:	2300      	movs	r3, #0
 8002702:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002704:	231a      	movs	r3, #26
 8002706:	2218      	movs	r2, #24
 8002708:	189b      	adds	r3, r3, r2
 800270a:	19db      	adds	r3, r3, r7
 800270c:	2201      	movs	r2, #1
 800270e:	701a      	strb	r2, [r3, #0]
        break;
 8002710:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002714:	2b00      	cmp	r3, #0
 8002716:	d100      	bne.n	800271a <UART_SetConfig+0x272>
 8002718:	e132      	b.n	8002980 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	0013      	movs	r3, r2
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	189b      	adds	r3, r3, r2
 8002724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002726:	429a      	cmp	r2, r3
 8002728:	d305      	bcc.n	8002736 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002730:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002732:	429a      	cmp	r2, r3
 8002734:	d906      	bls.n	8002744 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8002736:	231a      	movs	r3, #26
 8002738:	2218      	movs	r2, #24
 800273a:	189b      	adds	r3, r3, r2
 800273c:	19db      	adds	r3, r3, r7
 800273e:	2201      	movs	r2, #1
 8002740:	701a      	strb	r2, [r3, #0]
 8002742:	e11d      	b.n	8002980 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002746:	613b      	str	r3, [r7, #16]
 8002748:	2300      	movs	r3, #0
 800274a:	617b      	str	r3, [r7, #20]
 800274c:	6939      	ldr	r1, [r7, #16]
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	000b      	movs	r3, r1
 8002752:	0e1b      	lsrs	r3, r3, #24
 8002754:	0010      	movs	r0, r2
 8002756:	0205      	lsls	r5, r0, #8
 8002758:	431d      	orrs	r5, r3
 800275a:	000b      	movs	r3, r1
 800275c:	021c      	lsls	r4, r3, #8
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	085b      	lsrs	r3, r3, #1
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	68b8      	ldr	r0, [r7, #8]
 800276c:	68f9      	ldr	r1, [r7, #12]
 800276e:	1900      	adds	r0, r0, r4
 8002770:	4169      	adcs	r1, r5
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	603b      	str	r3, [r7, #0]
 8002778:	2300      	movs	r3, #0
 800277a:	607b      	str	r3, [r7, #4]
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f7fd fd4e 	bl	8000220 <__aeabi_uldivmod>
 8002784:	0002      	movs	r2, r0
 8002786:	000b      	movs	r3, r1
 8002788:	0013      	movs	r3, r2
 800278a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800278c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800278e:	23c0      	movs	r3, #192	; 0xc0
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	429a      	cmp	r2, r3
 8002794:	d309      	bcc.n	80027aa <UART_SetConfig+0x302>
 8002796:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002798:	2380      	movs	r3, #128	; 0x80
 800279a:	035b      	lsls	r3, r3, #13
 800279c:	429a      	cmp	r2, r3
 800279e:	d204      	bcs.n	80027aa <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027a6:	60da      	str	r2, [r3, #12]
 80027a8:	e0ea      	b.n	8002980 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 80027aa:	231a      	movs	r3, #26
 80027ac:	2218      	movs	r2, #24
 80027ae:	189b      	adds	r3, r3, r2
 80027b0:	19db      	adds	r3, r3, r7
 80027b2:	2201      	movs	r2, #1
 80027b4:	701a      	strb	r2, [r3, #0]
 80027b6:	e0e3      	b.n	8002980 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	69da      	ldr	r2, [r3, #28]
 80027bc:	2380      	movs	r3, #128	; 0x80
 80027be:	021b      	lsls	r3, r3, #8
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d000      	beq.n	80027c6 <UART_SetConfig+0x31e>
 80027c4:	e085      	b.n	80028d2 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 80027c6:	231b      	movs	r3, #27
 80027c8:	2218      	movs	r2, #24
 80027ca:	189b      	adds	r3, r3, r2
 80027cc:	19db      	adds	r3, r3, r7
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d837      	bhi.n	8002844 <UART_SetConfig+0x39c>
 80027d4:	009a      	lsls	r2, r3, #2
 80027d6:	4b10      	ldr	r3, [pc, #64]	; (8002818 <UART_SetConfig+0x370>)
 80027d8:	18d3      	adds	r3, r2, r3
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027de:	f7ff fb43 	bl	8001e68 <HAL_RCC_GetPCLK1Freq>
 80027e2:	0003      	movs	r3, r0
 80027e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027e6:	e036      	b.n	8002856 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80027e8:	f7ff fb54 	bl	8001e94 <HAL_RCC_GetPCLK2Freq>
 80027ec:	0003      	movs	r3, r0
 80027ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027f0:	e031      	b.n	8002856 <UART_SetConfig+0x3ae>
 80027f2:	46c0      	nop			; (mov r8, r8)
 80027f4:	efff69f3 	.word	0xefff69f3
 80027f8:	ffffcfff 	.word	0xffffcfff
 80027fc:	40004800 	.word	0x40004800
 8002800:	fffff4ff 	.word	0xfffff4ff
 8002804:	40013800 	.word	0x40013800
 8002808:	40021000 	.word	0x40021000
 800280c:	40004400 	.word	0x40004400
 8002810:	003d0900 	.word	0x003d0900
 8002814:	00f42400 	.word	0x00f42400
 8002818:	080032d0 	.word	0x080032d0
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800281c:	4b60      	ldr	r3, [pc, #384]	; (80029a0 <UART_SetConfig+0x4f8>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2210      	movs	r2, #16
 8002822:	4013      	ands	r3, r2
 8002824:	d002      	beq.n	800282c <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002826:	4b5f      	ldr	r3, [pc, #380]	; (80029a4 <UART_SetConfig+0x4fc>)
 8002828:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800282a:	e014      	b.n	8002856 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 800282c:	4b5e      	ldr	r3, [pc, #376]	; (80029a8 <UART_SetConfig+0x500>)
 800282e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002830:	e011      	b.n	8002856 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002832:	f7ff fa69 	bl	8001d08 <HAL_RCC_GetSysClockFreq>
 8002836:	0003      	movs	r3, r0
 8002838:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800283a:	e00c      	b.n	8002856 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800283c:	2380      	movs	r3, #128	; 0x80
 800283e:	021b      	lsls	r3, r3, #8
 8002840:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002842:	e008      	b.n	8002856 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002848:	231a      	movs	r3, #26
 800284a:	2218      	movs	r2, #24
 800284c:	189b      	adds	r3, r3, r2
 800284e:	19db      	adds	r3, r3, r7
 8002850:	2201      	movs	r2, #1
 8002852:	701a      	strb	r2, [r3, #0]
        break;
 8002854:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002858:	2b00      	cmp	r3, #0
 800285a:	d100      	bne.n	800285e <UART_SetConfig+0x3b6>
 800285c:	e090      	b.n	8002980 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800285e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002860:	005a      	lsls	r2, r3, #1
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	085b      	lsrs	r3, r3, #1
 8002868:	18d2      	adds	r2, r2, r3
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	0019      	movs	r1, r3
 8002870:	0010      	movs	r0, r2
 8002872:	f7fd fc49 	bl	8000108 <__udivsi3>
 8002876:	0003      	movs	r3, r0
 8002878:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800287a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287c:	2b0f      	cmp	r3, #15
 800287e:	d921      	bls.n	80028c4 <UART_SetConfig+0x41c>
 8002880:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002882:	2380      	movs	r3, #128	; 0x80
 8002884:	025b      	lsls	r3, r3, #9
 8002886:	429a      	cmp	r2, r3
 8002888:	d21c      	bcs.n	80028c4 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800288a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288c:	b29a      	uxth	r2, r3
 800288e:	200e      	movs	r0, #14
 8002890:	2418      	movs	r4, #24
 8002892:	1903      	adds	r3, r0, r4
 8002894:	19db      	adds	r3, r3, r7
 8002896:	210f      	movs	r1, #15
 8002898:	438a      	bics	r2, r1
 800289a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800289c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289e:	085b      	lsrs	r3, r3, #1
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	2207      	movs	r2, #7
 80028a4:	4013      	ands	r3, r2
 80028a6:	b299      	uxth	r1, r3
 80028a8:	1903      	adds	r3, r0, r4
 80028aa:	19db      	adds	r3, r3, r7
 80028ac:	1902      	adds	r2, r0, r4
 80028ae:	19d2      	adds	r2, r2, r7
 80028b0:	8812      	ldrh	r2, [r2, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	1902      	adds	r2, r0, r4
 80028bc:	19d2      	adds	r2, r2, r7
 80028be:	8812      	ldrh	r2, [r2, #0]
 80028c0:	60da      	str	r2, [r3, #12]
 80028c2:	e05d      	b.n	8002980 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80028c4:	231a      	movs	r3, #26
 80028c6:	2218      	movs	r2, #24
 80028c8:	189b      	adds	r3, r3, r2
 80028ca:	19db      	adds	r3, r3, r7
 80028cc:	2201      	movs	r2, #1
 80028ce:	701a      	strb	r2, [r3, #0]
 80028d0:	e056      	b.n	8002980 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80028d2:	231b      	movs	r3, #27
 80028d4:	2218      	movs	r2, #24
 80028d6:	189b      	adds	r3, r3, r2
 80028d8:	19db      	adds	r3, r3, r7
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d822      	bhi.n	8002926 <UART_SetConfig+0x47e>
 80028e0:	009a      	lsls	r2, r3, #2
 80028e2:	4b32      	ldr	r3, [pc, #200]	; (80029ac <UART_SetConfig+0x504>)
 80028e4:	18d3      	adds	r3, r2, r3
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028ea:	f7ff fabd 	bl	8001e68 <HAL_RCC_GetPCLK1Freq>
 80028ee:	0003      	movs	r3, r0
 80028f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028f2:	e021      	b.n	8002938 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80028f4:	f7ff face 	bl	8001e94 <HAL_RCC_GetPCLK2Freq>
 80028f8:	0003      	movs	r3, r0
 80028fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028fc:	e01c      	b.n	8002938 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028fe:	4b28      	ldr	r3, [pc, #160]	; (80029a0 <UART_SetConfig+0x4f8>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2210      	movs	r2, #16
 8002904:	4013      	ands	r3, r2
 8002906:	d002      	beq.n	800290e <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002908:	4b26      	ldr	r3, [pc, #152]	; (80029a4 <UART_SetConfig+0x4fc>)
 800290a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800290c:	e014      	b.n	8002938 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 800290e:	4b26      	ldr	r3, [pc, #152]	; (80029a8 <UART_SetConfig+0x500>)
 8002910:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002912:	e011      	b.n	8002938 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002914:	f7ff f9f8 	bl	8001d08 <HAL_RCC_GetSysClockFreq>
 8002918:	0003      	movs	r3, r0
 800291a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800291c:	e00c      	b.n	8002938 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800291e:	2380      	movs	r3, #128	; 0x80
 8002920:	021b      	lsls	r3, r3, #8
 8002922:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002924:	e008      	b.n	8002938 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8002926:	2300      	movs	r3, #0
 8002928:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800292a:	231a      	movs	r3, #26
 800292c:	2218      	movs	r2, #24
 800292e:	189b      	adds	r3, r3, r2
 8002930:	19db      	adds	r3, r3, r7
 8002932:	2201      	movs	r2, #1
 8002934:	701a      	strb	r2, [r3, #0]
        break;
 8002936:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293a:	2b00      	cmp	r3, #0
 800293c:	d020      	beq.n	8002980 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	085a      	lsrs	r2, r3, #1
 8002944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002946:	18d2      	adds	r2, r2, r3
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	0019      	movs	r1, r3
 800294e:	0010      	movs	r0, r2
 8002950:	f7fd fbda 	bl	8000108 <__udivsi3>
 8002954:	0003      	movs	r3, r0
 8002956:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295a:	2b0f      	cmp	r3, #15
 800295c:	d90a      	bls.n	8002974 <UART_SetConfig+0x4cc>
 800295e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002960:	2380      	movs	r3, #128	; 0x80
 8002962:	025b      	lsls	r3, r3, #9
 8002964:	429a      	cmp	r2, r3
 8002966:	d205      	bcs.n	8002974 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296a:	b29a      	uxth	r2, r3
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	60da      	str	r2, [r3, #12]
 8002972:	e005      	b.n	8002980 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002974:	231a      	movs	r3, #26
 8002976:	2218      	movs	r2, #24
 8002978:	189b      	adds	r3, r3, r2
 800297a:	19db      	adds	r3, r3, r7
 800297c:	2201      	movs	r2, #1
 800297e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	2200      	movs	r2, #0
 8002984:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	2200      	movs	r2, #0
 800298a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800298c:	231a      	movs	r3, #26
 800298e:	2218      	movs	r2, #24
 8002990:	189b      	adds	r3, r3, r2
 8002992:	19db      	adds	r3, r3, r7
 8002994:	781b      	ldrb	r3, [r3, #0]
}
 8002996:	0018      	movs	r0, r3
 8002998:	46bd      	mov	sp, r7
 800299a:	b00e      	add	sp, #56	; 0x38
 800299c:	bdb0      	pop	{r4, r5, r7, pc}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	40021000 	.word	0x40021000
 80029a4:	003d0900 	.word	0x003d0900
 80029a8:	00f42400 	.word	0x00f42400
 80029ac:	080032f4 	.word	0x080032f4

080029b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	2201      	movs	r2, #1
 80029be:	4013      	ands	r3, r2
 80029c0:	d00b      	beq.n	80029da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	4a4a      	ldr	r2, [pc, #296]	; (8002af4 <UART_AdvFeatureConfig+0x144>)
 80029ca:	4013      	ands	r3, r2
 80029cc:	0019      	movs	r1, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	2202      	movs	r2, #2
 80029e0:	4013      	ands	r3, r2
 80029e2:	d00b      	beq.n	80029fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4a43      	ldr	r2, [pc, #268]	; (8002af8 <UART_AdvFeatureConfig+0x148>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	0019      	movs	r1, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	2204      	movs	r2, #4
 8002a02:	4013      	ands	r3, r2
 8002a04:	d00b      	beq.n	8002a1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	4a3b      	ldr	r2, [pc, #236]	; (8002afc <UART_AdvFeatureConfig+0x14c>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	0019      	movs	r1, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	2208      	movs	r2, #8
 8002a24:	4013      	ands	r3, r2
 8002a26:	d00b      	beq.n	8002a40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	4a34      	ldr	r2, [pc, #208]	; (8002b00 <UART_AdvFeatureConfig+0x150>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	0019      	movs	r1, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	2210      	movs	r2, #16
 8002a46:	4013      	ands	r3, r2
 8002a48:	d00b      	beq.n	8002a62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	4a2c      	ldr	r2, [pc, #176]	; (8002b04 <UART_AdvFeatureConfig+0x154>)
 8002a52:	4013      	ands	r3, r2
 8002a54:	0019      	movs	r1, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	2220      	movs	r2, #32
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d00b      	beq.n	8002a84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	4a25      	ldr	r2, [pc, #148]	; (8002b08 <UART_AdvFeatureConfig+0x158>)
 8002a74:	4013      	ands	r3, r2
 8002a76:	0019      	movs	r1, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	2240      	movs	r2, #64	; 0x40
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d01d      	beq.n	8002aca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	4a1d      	ldr	r2, [pc, #116]	; (8002b0c <UART_AdvFeatureConfig+0x15c>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	0019      	movs	r1, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aaa:	2380      	movs	r3, #128	; 0x80
 8002aac:	035b      	lsls	r3, r3, #13
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d10b      	bne.n	8002aca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	4a15      	ldr	r2, [pc, #84]	; (8002b10 <UART_AdvFeatureConfig+0x160>)
 8002aba:	4013      	ands	r3, r2
 8002abc:	0019      	movs	r1, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	2280      	movs	r2, #128	; 0x80
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	d00b      	beq.n	8002aec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	4a0e      	ldr	r2, [pc, #56]	; (8002b14 <UART_AdvFeatureConfig+0x164>)
 8002adc:	4013      	ands	r3, r2
 8002ade:	0019      	movs	r1, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	605a      	str	r2, [r3, #4]
  }
}
 8002aec:	46c0      	nop			; (mov r8, r8)
 8002aee:	46bd      	mov	sp, r7
 8002af0:	b002      	add	sp, #8
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	fffdffff 	.word	0xfffdffff
 8002af8:	fffeffff 	.word	0xfffeffff
 8002afc:	fffbffff 	.word	0xfffbffff
 8002b00:	ffff7fff 	.word	0xffff7fff
 8002b04:	ffffefff 	.word	0xffffefff
 8002b08:	ffffdfff 	.word	0xffffdfff
 8002b0c:	ffefffff 	.word	0xffefffff
 8002b10:	ff9fffff 	.word	0xff9fffff
 8002b14:	fff7ffff 	.word	0xfff7ffff

08002b18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b092      	sub	sp, #72	; 0x48
 8002b1c:	af02      	add	r7, sp, #8
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2284      	movs	r2, #132	; 0x84
 8002b24:	2100      	movs	r1, #0
 8002b26:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b28:	f7fd ffac 	bl	8000a84 <HAL_GetTick>
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2208      	movs	r2, #8
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b08      	cmp	r3, #8
 8002b3c:	d12c      	bne.n	8002b98 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b40:	2280      	movs	r2, #128	; 0x80
 8002b42:	0391      	lsls	r1, r2, #14
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	4a46      	ldr	r2, [pc, #280]	; (8002c60 <UART_CheckIdleState+0x148>)
 8002b48:	9200      	str	r2, [sp, #0]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f000 f88c 	bl	8002c68 <UART_WaitOnFlagUntilTimeout>
 8002b50:	1e03      	subs	r3, r0, #0
 8002b52:	d021      	beq.n	8002b98 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b54:	f3ef 8310 	mrs	r3, PRIMASK
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002b5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b5e:	2301      	movs	r3, #1
 8002b60:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b64:	f383 8810 	msr	PRIMASK, r3
}
 8002b68:	46c0      	nop			; (mov r8, r8)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2180      	movs	r1, #128	; 0x80
 8002b76:	438a      	bics	r2, r1
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b80:	f383 8810 	msr	PRIMASK, r3
}
 8002b84:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2278      	movs	r2, #120	; 0x78
 8002b90:	2100      	movs	r1, #0
 8002b92:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e05f      	b.n	8002c58 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2204      	movs	r2, #4
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d146      	bne.n	8002c34 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ba8:	2280      	movs	r2, #128	; 0x80
 8002baa:	03d1      	lsls	r1, r2, #15
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	4a2c      	ldr	r2, [pc, #176]	; (8002c60 <UART_CheckIdleState+0x148>)
 8002bb0:	9200      	str	r2, [sp, #0]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f000 f858 	bl	8002c68 <UART_WaitOnFlagUntilTimeout>
 8002bb8:	1e03      	subs	r3, r0, #0
 8002bba:	d03b      	beq.n	8002c34 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bbc:	f3ef 8310 	mrs	r3, PRIMASK
 8002bc0:	60fb      	str	r3, [r7, #12]
  return(result);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	f383 8810 	msr	PRIMASK, r3
}
 8002bd0:	46c0      	nop			; (mov r8, r8)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4921      	ldr	r1, [pc, #132]	; (8002c64 <UART_CheckIdleState+0x14c>)
 8002bde:	400a      	ands	r2, r1
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f383 8810 	msr	PRIMASK, r3
}
 8002bec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bee:	f3ef 8310 	mrs	r3, PRIMASK
 8002bf2:	61bb      	str	r3, [r7, #24]
  return(result);
 8002bf4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bf6:	633b      	str	r3, [r7, #48]	; 0x30
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f383 8810 	msr	PRIMASK, r3
}
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2101      	movs	r1, #1
 8002c10:	438a      	bics	r2, r1
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c16:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	f383 8810 	msr	PRIMASK, r3
}
 8002c1e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2280      	movs	r2, #128	; 0x80
 8002c24:	2120      	movs	r1, #32
 8002c26:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2278      	movs	r2, #120	; 0x78
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e011      	b.n	8002c58 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2220      	movs	r2, #32
 8002c38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2280      	movs	r2, #128	; 0x80
 8002c3e:	2120      	movs	r1, #32
 8002c40:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2278      	movs	r2, #120	; 0x78
 8002c52:	2100      	movs	r1, #0
 8002c54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	0018      	movs	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b010      	add	sp, #64	; 0x40
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	01ffffff 	.word	0x01ffffff
 8002c64:	fffffedf 	.word	0xfffffedf

08002c68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	603b      	str	r3, [r7, #0]
 8002c74:	1dfb      	adds	r3, r7, #7
 8002c76:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c78:	e04b      	b.n	8002d12 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	d048      	beq.n	8002d12 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c80:	f7fd ff00 	bl	8000a84 <HAL_GetTick>
 8002c84:	0002      	movs	r2, r0
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d302      	bcc.n	8002c96 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e04b      	b.n	8002d32 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2204      	movs	r2, #4
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d035      	beq.n	8002d12 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	2208      	movs	r2, #8
 8002cae:	4013      	ands	r3, r2
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d111      	bne.n	8002cd8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2208      	movs	r2, #8
 8002cba:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	0018      	movs	r0, r3
 8002cc0:	f000 f900 	bl	8002ec4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2284      	movs	r2, #132	; 0x84
 8002cc8:	2108      	movs	r1, #8
 8002cca:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2278      	movs	r2, #120	; 0x78
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e02c      	b.n	8002d32 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	69da      	ldr	r2, [r3, #28]
 8002cde:	2380      	movs	r3, #128	; 0x80
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	401a      	ands	r2, r3
 8002ce4:	2380      	movs	r3, #128	; 0x80
 8002ce6:	011b      	lsls	r3, r3, #4
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d112      	bne.n	8002d12 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2280      	movs	r2, #128	; 0x80
 8002cf2:	0112      	lsls	r2, r2, #4
 8002cf4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f000 f8e3 	bl	8002ec4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2284      	movs	r2, #132	; 0x84
 8002d02:	2120      	movs	r1, #32
 8002d04:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2278      	movs	r2, #120	; 0x78
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e00f      	b.n	8002d32 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	68ba      	ldr	r2, [r7, #8]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	425a      	negs	r2, r3
 8002d22:	4153      	adcs	r3, r2
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	001a      	movs	r2, r3
 8002d28:	1dfb      	adds	r3, r7, #7
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d0a4      	beq.n	8002c7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	0018      	movs	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	b004      	add	sp, #16
 8002d38:	bd80      	pop	{r7, pc}
	...

08002d3c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b090      	sub	sp, #64	; 0x40
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	1dbb      	adds	r3, r7, #6
 8002d48:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	68ba      	ldr	r2, [r7, #8]
 8002d4e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	1dba      	adds	r2, r7, #6
 8002d54:	2158      	movs	r1, #88	; 0x58
 8002d56:	8812      	ldrh	r2, [r2, #0]
 8002d58:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2284      	movs	r2, #132	; 0x84
 8002d5e:	2100      	movs	r1, #0
 8002d60:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2280      	movs	r2, #128	; 0x80
 8002d66:	2122      	movs	r1, #34	; 0x22
 8002d68:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d028      	beq.n	8002dc4 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d76:	4a3e      	ldr	r2, [pc, #248]	; (8002e70 <UART_Start_Receive_DMA+0x134>)
 8002d78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d7e:	4a3d      	ldr	r2, [pc, #244]	; (8002e74 <UART_Start_Receive_DMA+0x138>)
 8002d80:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d86:	4a3c      	ldr	r2, [pc, #240]	; (8002e78 <UART_Start_Receive_DMA+0x13c>)
 8002d88:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d8e:	2200      	movs	r2, #0
 8002d90:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	3324      	adds	r3, #36	; 0x24
 8002d9c:	0019      	movs	r1, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da2:	001a      	movs	r2, r3
 8002da4:	1dbb      	adds	r3, r7, #6
 8002da6:	881b      	ldrh	r3, [r3, #0]
 8002da8:	f7fd ffcc 	bl	8000d44 <HAL_DMA_Start_IT>
 8002dac:	1e03      	subs	r3, r0, #0
 8002dae:	d009      	beq.n	8002dc4 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2284      	movs	r2, #132	; 0x84
 8002db4:	2110      	movs	r1, #16
 8002db6:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2280      	movs	r2, #128	; 0x80
 8002dbc:	2120      	movs	r1, #32
 8002dbe:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e050      	b.n	8002e66 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d019      	beq.n	8002e00 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dcc:	f3ef 8310 	mrs	r3, PRIMASK
 8002dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ddc:	f383 8810 	msr	PRIMASK, r3
}
 8002de0:	46c0      	nop			; (mov r8, r8)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2180      	movs	r1, #128	; 0x80
 8002dee:	0049      	lsls	r1, r1, #1
 8002df0:	430a      	orrs	r2, r1
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002df6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfa:	f383 8810 	msr	PRIMASK, r3
}
 8002dfe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e00:	f3ef 8310 	mrs	r3, PRIMASK
 8002e04:	613b      	str	r3, [r7, #16]
  return(result);
 8002e06:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e08:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f383 8810 	msr	PRIMASK, r3
}
 8002e14:	46c0      	nop			; (mov r8, r8)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2101      	movs	r1, #1
 8002e22:	430a      	orrs	r2, r1
 8002e24:	609a      	str	r2, [r3, #8]
 8002e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e28:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	f383 8810 	msr	PRIMASK, r3
}
 8002e30:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e32:	f3ef 8310 	mrs	r3, PRIMASK
 8002e36:	61fb      	str	r3, [r7, #28]
  return(result);
 8002e38:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e3a:	637b      	str	r3, [r7, #52]	; 0x34
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	f383 8810 	msr	PRIMASK, r3
}
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2140      	movs	r1, #64	; 0x40
 8002e54:	430a      	orrs	r2, r1
 8002e56:	609a      	str	r2, [r3, #8]
 8002e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e5a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	f383 8810 	msr	PRIMASK, r3
}
 8002e62:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	0018      	movs	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b010      	add	sp, #64	; 0x40
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	08003045 	.word	0x08003045
 8002e74:	08003175 	.word	0x08003175
 8002e78:	080031b7 	.word	0x080031b7

08002e7c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e84:	f3ef 8310 	mrs	r3, PRIMASK
 8002e88:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e8a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002e8c:	617b      	str	r3, [r7, #20]
 8002e8e:	2301      	movs	r3, #1
 8002e90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f383 8810 	msr	PRIMASK, r3
}
 8002e98:	46c0      	nop			; (mov r8, r8)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	21c0      	movs	r1, #192	; 0xc0
 8002ea6:	438a      	bics	r2, r1
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	f383 8810 	msr	PRIMASK, r3
}
 8002eb4:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8002ebc:	46c0      	nop			; (mov r8, r8)
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	b006      	add	sp, #24
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08e      	sub	sp, #56	; 0x38
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ecc:	f3ef 8310 	mrs	r3, PRIMASK
 8002ed0:	617b      	str	r3, [r7, #20]
  return(result);
 8002ed2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ed4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	f383 8810 	msr	PRIMASK, r3
}
 8002ee0:	46c0      	nop			; (mov r8, r8)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4926      	ldr	r1, [pc, #152]	; (8002f88 <UART_EndRxTransfer+0xc4>)
 8002eee:	400a      	ands	r2, r1
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	f383 8810 	msr	PRIMASK, r3
}
 8002efc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002efe:	f3ef 8310 	mrs	r3, PRIMASK
 8002f02:	623b      	str	r3, [r7, #32]
  return(result);
 8002f04:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f06:	633b      	str	r3, [r7, #48]	; 0x30
 8002f08:	2301      	movs	r3, #1
 8002f0a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	f383 8810 	msr	PRIMASK, r3
}
 8002f12:	46c0      	nop			; (mov r8, r8)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2101      	movs	r1, #1
 8002f20:	438a      	bics	r2, r1
 8002f22:	609a      	str	r2, [r3, #8]
 8002f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f26:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2a:	f383 8810 	msr	PRIMASK, r3
}
 8002f2e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d118      	bne.n	8002f6a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f38:	f3ef 8310 	mrs	r3, PRIMASK
 8002f3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f3e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f42:	2301      	movs	r3, #1
 8002f44:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f383 8810 	msr	PRIMASK, r3
}
 8002f4c:	46c0      	nop			; (mov r8, r8)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2110      	movs	r1, #16
 8002f5a:	438a      	bics	r2, r1
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	f383 8810 	msr	PRIMASK, r3
}
 8002f68:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2280      	movs	r2, #128	; 0x80
 8002f6e:	2120      	movs	r1, #32
 8002f70:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b00e      	add	sp, #56	; 0x38
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	fffffedf 	.word	0xfffffedf

08002f8c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b08c      	sub	sp, #48	; 0x30
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f98:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d135      	bne.n	8003012 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8002fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa8:	2252      	movs	r2, #82	; 0x52
 8002faa:	2100      	movs	r1, #0
 8002fac:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fae:	f3ef 8310 	mrs	r3, PRIMASK
 8002fb2:	60fb      	str	r3, [r7, #12]
  return(result);
 8002fb4:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002fb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fb8:	2301      	movs	r3, #1
 8002fba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	f383 8810 	msr	PRIMASK, r3
}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689a      	ldr	r2, [r3, #8]
 8002fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2180      	movs	r1, #128	; 0x80
 8002fd0:	438a      	bics	r2, r1
 8002fd2:	609a      	str	r2, [r3, #8]
 8002fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f383 8810 	msr	PRIMASK, r3
}
 8002fde:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fe0:	f3ef 8310 	mrs	r3, PRIMASK
 8002fe4:	61bb      	str	r3, [r7, #24]
  return(result);
 8002fe6:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8002fea:	2301      	movs	r3, #1
 8002fec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	f383 8810 	msr	PRIMASK, r3
}
 8002ff4:	46c0      	nop			; (mov r8, r8)
 8002ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2140      	movs	r1, #64	; 0x40
 8003002:	430a      	orrs	r2, r1
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	f383 8810 	msr	PRIMASK, r3
}
 8003010:	e004      	b.n	800301c <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8003012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003014:	0018      	movs	r0, r3
 8003016:	f7ff fa23 	bl	8002460 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	46c0      	nop			; (mov r8, r8)
 800301e:	46bd      	mov	sp, r7
 8003020:	b00c      	add	sp, #48	; 0x30
 8003022:	bd80      	pop	{r7, pc}

08003024 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003030:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	0018      	movs	r0, r3
 8003036:	f7fd fb8d 	bl	8000754 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	46bd      	mov	sp, r7
 800303e:	b004      	add	sp, #16
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b094      	sub	sp, #80	; 0x50
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003050:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2220      	movs	r2, #32
 800305a:	4013      	ands	r3, r2
 800305c:	d16f      	bne.n	800313e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800305e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003060:	225a      	movs	r2, #90	; 0x5a
 8003062:	2100      	movs	r1, #0
 8003064:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003066:	f3ef 8310 	mrs	r3, PRIMASK
 800306a:	61bb      	str	r3, [r7, #24]
  return(result);
 800306c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800306e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003070:	2301      	movs	r3, #1
 8003072:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f383 8810 	msr	PRIMASK, r3
}
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	493a      	ldr	r1, [pc, #232]	; (8003170 <UART_DMAReceiveCplt+0x12c>)
 8003088:	400a      	ands	r2, r1
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800308e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	f383 8810 	msr	PRIMASK, r3
}
 8003096:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003098:	f3ef 8310 	mrs	r3, PRIMASK
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a0:	647b      	str	r3, [r7, #68]	; 0x44
 80030a2:	2301      	movs	r3, #1
 80030a4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a8:	f383 8810 	msr	PRIMASK, r3
}
 80030ac:	46c0      	nop			; (mov r8, r8)
 80030ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2101      	movs	r1, #1
 80030ba:	438a      	bics	r2, r1
 80030bc:	609a      	str	r2, [r3, #8]
 80030be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c4:	f383 8810 	msr	PRIMASK, r3
}
 80030c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ca:	f3ef 8310 	mrs	r3, PRIMASK
 80030ce:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80030d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030d2:	643b      	str	r3, [r7, #64]	; 0x40
 80030d4:	2301      	movs	r3, #1
 80030d6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030da:	f383 8810 	msr	PRIMASK, r3
}
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689a      	ldr	r2, [r3, #8]
 80030e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2140      	movs	r1, #64	; 0x40
 80030ec:	438a      	bics	r2, r1
 80030ee:	609a      	str	r2, [r3, #8]
 80030f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030f2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f6:	f383 8810 	msr	PRIMASK, r3
}
 80030fa:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80030fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030fe:	2280      	movs	r2, #128	; 0x80
 8003100:	2120      	movs	r1, #32
 8003102:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003108:	2b01      	cmp	r3, #1
 800310a:	d118      	bne.n	800313e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800310c:	f3ef 8310 	mrs	r3, PRIMASK
 8003110:	60fb      	str	r3, [r7, #12]
  return(result);
 8003112:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003114:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003116:	2301      	movs	r3, #1
 8003118:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	f383 8810 	msr	PRIMASK, r3
}
 8003120:	46c0      	nop			; (mov r8, r8)
 8003122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2110      	movs	r1, #16
 800312e:	438a      	bics	r2, r1
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003134:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f383 8810 	msr	PRIMASK, r3
}
 800313c:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800313e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003140:	2200      	movs	r2, #0
 8003142:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003148:	2b01      	cmp	r3, #1
 800314a:	d108      	bne.n	800315e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800314c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800314e:	2258      	movs	r2, #88	; 0x58
 8003150:	5a9a      	ldrh	r2, [r3, r2]
 8003152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003154:	0011      	movs	r1, r2
 8003156:	0018      	movs	r0, r3
 8003158:	f7ff f99a 	bl	8002490 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800315c:	e003      	b.n	8003166 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800315e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003160:	0018      	movs	r0, r3
 8003162:	f7ff f985 	bl	8002470 <HAL_UART_RxCpltCallback>
}
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	46bd      	mov	sp, r7
 800316a:	b014      	add	sp, #80	; 0x50
 800316c:	bd80      	pop	{r7, pc}
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	fffffeff 	.word	0xfffffeff

08003174 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003180:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2201      	movs	r2, #1
 8003186:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800318c:	2b01      	cmp	r3, #1
 800318e:	d10a      	bne.n	80031a6 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2258      	movs	r2, #88	; 0x58
 8003194:	5a9b      	ldrh	r3, [r3, r2]
 8003196:	085b      	lsrs	r3, r3, #1
 8003198:	b29a      	uxth	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	0011      	movs	r1, r2
 800319e:	0018      	movs	r0, r3
 80031a0:	f7ff f976 	bl	8002490 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80031a4:	e003      	b.n	80031ae <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	0018      	movs	r0, r3
 80031aa:	f7fd fae3 	bl	8000774 <HAL_UART_RxHalfCpltCallback>
}
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	46bd      	mov	sp, r7
 80031b2:	b004      	add	sp, #16
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b086      	sub	sp, #24
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031c8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	2280      	movs	r2, #128	; 0x80
 80031ce:	589b      	ldr	r3, [r3, r2]
 80031d0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	2280      	movs	r2, #128	; 0x80
 80031da:	4013      	ands	r3, r2
 80031dc:	2b80      	cmp	r3, #128	; 0x80
 80031de:	d10a      	bne.n	80031f6 <UART_DMAError+0x40>
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	2b21      	cmp	r3, #33	; 0x21
 80031e4:	d107      	bne.n	80031f6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2252      	movs	r2, #82	; 0x52
 80031ea:	2100      	movs	r1, #0
 80031ec:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	0018      	movs	r0, r3
 80031f2:	f7ff fe43 	bl	8002e7c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	2240      	movs	r2, #64	; 0x40
 80031fe:	4013      	ands	r3, r2
 8003200:	2b40      	cmp	r3, #64	; 0x40
 8003202:	d10a      	bne.n	800321a <UART_DMAError+0x64>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2b22      	cmp	r3, #34	; 0x22
 8003208:	d107      	bne.n	800321a <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	225a      	movs	r2, #90	; 0x5a
 800320e:	2100      	movs	r1, #0
 8003210:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	0018      	movs	r0, r3
 8003216:	f7ff fe55 	bl	8002ec4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2284      	movs	r2, #132	; 0x84
 800321e:	589b      	ldr	r3, [r3, r2]
 8003220:	2210      	movs	r2, #16
 8003222:	431a      	orrs	r2, r3
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	2184      	movs	r1, #132	; 0x84
 8003228:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	0018      	movs	r0, r3
 800322e:	f7ff f927 	bl	8002480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	46bd      	mov	sp, r7
 8003236:	b006      	add	sp, #24
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <__libc_init_array>:
 800323c:	b570      	push	{r4, r5, r6, lr}
 800323e:	2600      	movs	r6, #0
 8003240:	4d0c      	ldr	r5, [pc, #48]	; (8003274 <__libc_init_array+0x38>)
 8003242:	4c0d      	ldr	r4, [pc, #52]	; (8003278 <__libc_init_array+0x3c>)
 8003244:	1b64      	subs	r4, r4, r5
 8003246:	10a4      	asrs	r4, r4, #2
 8003248:	42a6      	cmp	r6, r4
 800324a:	d109      	bne.n	8003260 <__libc_init_array+0x24>
 800324c:	2600      	movs	r6, #0
 800324e:	f000 f821 	bl	8003294 <_init>
 8003252:	4d0a      	ldr	r5, [pc, #40]	; (800327c <__libc_init_array+0x40>)
 8003254:	4c0a      	ldr	r4, [pc, #40]	; (8003280 <__libc_init_array+0x44>)
 8003256:	1b64      	subs	r4, r4, r5
 8003258:	10a4      	asrs	r4, r4, #2
 800325a:	42a6      	cmp	r6, r4
 800325c:	d105      	bne.n	800326a <__libc_init_array+0x2e>
 800325e:	bd70      	pop	{r4, r5, r6, pc}
 8003260:	00b3      	lsls	r3, r6, #2
 8003262:	58eb      	ldr	r3, [r5, r3]
 8003264:	4798      	blx	r3
 8003266:	3601      	adds	r6, #1
 8003268:	e7ee      	b.n	8003248 <__libc_init_array+0xc>
 800326a:	00b3      	lsls	r3, r6, #2
 800326c:	58eb      	ldr	r3, [r5, r3]
 800326e:	4798      	blx	r3
 8003270:	3601      	adds	r6, #1
 8003272:	e7f2      	b.n	800325a <__libc_init_array+0x1e>
 8003274:	08003320 	.word	0x08003320
 8003278:	08003320 	.word	0x08003320
 800327c:	08003320 	.word	0x08003320
 8003280:	08003324 	.word	0x08003324

08003284 <memset>:
 8003284:	0003      	movs	r3, r0
 8003286:	1882      	adds	r2, r0, r2
 8003288:	4293      	cmp	r3, r2
 800328a:	d100      	bne.n	800328e <memset+0xa>
 800328c:	4770      	bx	lr
 800328e:	7019      	strb	r1, [r3, #0]
 8003290:	3301      	adds	r3, #1
 8003292:	e7f9      	b.n	8003288 <memset+0x4>

08003294 <_init>:
 8003294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800329a:	bc08      	pop	{r3}
 800329c:	469e      	mov	lr, r3
 800329e:	4770      	bx	lr

080032a0 <_fini>:
 80032a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032a6:	bc08      	pop	{r3}
 80032a8:	469e      	mov	lr, r3
 80032aa:	4770      	bx	lr

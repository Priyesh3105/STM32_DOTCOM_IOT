
USB_CDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bcc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08007c8c  08007c8c  00017c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e00  08007e00  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  08007e00  08007e00  00017e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e08  08007e08  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e08  08007e08  00017e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e0c  08007e0c  00017e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08007e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000123c  20000180  08007f90  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013bc  08007f90  000213bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bc1e  00000000  00000000  000201eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028cf  00000000  00000000  0002be09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a48  00000000  00000000  0002e6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000786  00000000  00000000  0002f120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015670  00000000  00000000  0002f8a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e5e7  00000000  00000000  00044f16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007713d  00000000  00000000  000534fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002308  00000000  00000000  000ca63c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000cc944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000180 	.word	0x20000180
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007c74 	.word	0x08007c74

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000184 	.word	0x20000184
 8000104:	08007c74 	.word	0x08007c74

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f834 	bl	80002cc <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46ce      	mov	lr, r9
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	469c      	mov	ip, r3
 800027a:	0413      	lsls	r3, r2, #16
 800027c:	4647      	mov	r7, r8
 800027e:	0c1b      	lsrs	r3, r3, #16
 8000280:	001d      	movs	r5, r3
 8000282:	000e      	movs	r6, r1
 8000284:	4661      	mov	r1, ip
 8000286:	0404      	lsls	r4, r0, #16
 8000288:	0c24      	lsrs	r4, r4, #16
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	0c10      	lsrs	r0, r2, #16
 8000290:	434b      	muls	r3, r1
 8000292:	4365      	muls	r5, r4
 8000294:	4341      	muls	r1, r0
 8000296:	4360      	muls	r0, r4
 8000298:	0c2c      	lsrs	r4, r5, #16
 800029a:	18c0      	adds	r0, r0, r3
 800029c:	1820      	adds	r0, r4, r0
 800029e:	468c      	mov	ip, r1
 80002a0:	4283      	cmp	r3, r0
 80002a2:	d903      	bls.n	80002ac <__aeabi_lmul+0x3c>
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	025b      	lsls	r3, r3, #9
 80002a8:	4698      	mov	r8, r3
 80002aa:	44c4      	add	ip, r8
 80002ac:	4649      	mov	r1, r9
 80002ae:	4379      	muls	r1, r7
 80002b0:	4356      	muls	r6, r2
 80002b2:	0c03      	lsrs	r3, r0, #16
 80002b4:	042d      	lsls	r5, r5, #16
 80002b6:	0c2d      	lsrs	r5, r5, #16
 80002b8:	1989      	adds	r1, r1, r6
 80002ba:	4463      	add	r3, ip
 80002bc:	0400      	lsls	r0, r0, #16
 80002be:	1940      	adds	r0, r0, r5
 80002c0:	18c9      	adds	r1, r1, r3
 80002c2:	bcc0      	pop	{r6, r7}
 80002c4:	46b9      	mov	r9, r7
 80002c6:	46b0      	mov	r8, r6
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)

080002cc <__udivmoddi4>:
 80002cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ce:	4657      	mov	r7, sl
 80002d0:	464e      	mov	r6, r9
 80002d2:	4645      	mov	r5, r8
 80002d4:	46de      	mov	lr, fp
 80002d6:	b5e0      	push	{r5, r6, r7, lr}
 80002d8:	0004      	movs	r4, r0
 80002da:	000d      	movs	r5, r1
 80002dc:	4692      	mov	sl, r2
 80002de:	4699      	mov	r9, r3
 80002e0:	b083      	sub	sp, #12
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d830      	bhi.n	8000348 <__udivmoddi4+0x7c>
 80002e6:	d02d      	beq.n	8000344 <__udivmoddi4+0x78>
 80002e8:	4649      	mov	r1, r9
 80002ea:	4650      	mov	r0, sl
 80002ec:	f000 f8ba 	bl	8000464 <__clzdi2>
 80002f0:	0029      	movs	r1, r5
 80002f2:	0006      	movs	r6, r0
 80002f4:	0020      	movs	r0, r4
 80002f6:	f000 f8b5 	bl	8000464 <__clzdi2>
 80002fa:	1a33      	subs	r3, r6, r0
 80002fc:	4698      	mov	r8, r3
 80002fe:	3b20      	subs	r3, #32
 8000300:	d434      	bmi.n	800036c <__udivmoddi4+0xa0>
 8000302:	469b      	mov	fp, r3
 8000304:	4653      	mov	r3, sl
 8000306:	465a      	mov	r2, fp
 8000308:	4093      	lsls	r3, r2
 800030a:	4642      	mov	r2, r8
 800030c:	001f      	movs	r7, r3
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	001e      	movs	r6, r3
 8000314:	42af      	cmp	r7, r5
 8000316:	d83b      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000318:	42af      	cmp	r7, r5
 800031a:	d100      	bne.n	800031e <__udivmoddi4+0x52>
 800031c:	e079      	b.n	8000412 <__udivmoddi4+0x146>
 800031e:	465b      	mov	r3, fp
 8000320:	1ba4      	subs	r4, r4, r6
 8000322:	41bd      	sbcs	r5, r7
 8000324:	2b00      	cmp	r3, #0
 8000326:	da00      	bge.n	800032a <__udivmoddi4+0x5e>
 8000328:	e076      	b.n	8000418 <__udivmoddi4+0x14c>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	465a      	mov	r2, fp
 8000336:	4093      	lsls	r3, r2
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	4642      	mov	r2, r8
 800033e:	4093      	lsls	r3, r2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	e029      	b.n	8000398 <__udivmoddi4+0xcc>
 8000344:	4282      	cmp	r2, r0
 8000346:	d9cf      	bls.n	80002e8 <__udivmoddi4+0x1c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <__udivmoddi4+0x8e>
 8000356:	601c      	str	r4, [r3, #0]
 8000358:	605d      	str	r5, [r3, #4]
 800035a:	9800      	ldr	r0, [sp, #0]
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	b003      	add	sp, #12
 8000360:	bcf0      	pop	{r4, r5, r6, r7}
 8000362:	46bb      	mov	fp, r7
 8000364:	46b2      	mov	sl, r6
 8000366:	46a9      	mov	r9, r5
 8000368:	46a0      	mov	r8, r4
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	4642      	mov	r2, r8
 800036e:	469b      	mov	fp, r3
 8000370:	2320      	movs	r3, #32
 8000372:	1a9b      	subs	r3, r3, r2
 8000374:	4652      	mov	r2, sl
 8000376:	40da      	lsrs	r2, r3
 8000378:	4641      	mov	r1, r8
 800037a:	0013      	movs	r3, r2
 800037c:	464a      	mov	r2, r9
 800037e:	408a      	lsls	r2, r1
 8000380:	0017      	movs	r7, r2
 8000382:	4642      	mov	r2, r8
 8000384:	431f      	orrs	r7, r3
 8000386:	4653      	mov	r3, sl
 8000388:	4093      	lsls	r3, r2
 800038a:	001e      	movs	r6, r3
 800038c:	42af      	cmp	r7, r5
 800038e:	d9c3      	bls.n	8000318 <__udivmoddi4+0x4c>
 8000390:	2200      	movs	r2, #0
 8000392:	2300      	movs	r3, #0
 8000394:	9200      	str	r2, [sp, #0]
 8000396:	9301      	str	r3, [sp, #4]
 8000398:	4643      	mov	r3, r8
 800039a:	2b00      	cmp	r3, #0
 800039c:	d0d8      	beq.n	8000350 <__udivmoddi4+0x84>
 800039e:	07fb      	lsls	r3, r7, #31
 80003a0:	0872      	lsrs	r2, r6, #1
 80003a2:	431a      	orrs	r2, r3
 80003a4:	4646      	mov	r6, r8
 80003a6:	087b      	lsrs	r3, r7, #1
 80003a8:	e00e      	b.n	80003c8 <__udivmoddi4+0xfc>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d101      	bne.n	80003b2 <__udivmoddi4+0xe6>
 80003ae:	42a2      	cmp	r2, r4
 80003b0:	d80c      	bhi.n	80003cc <__udivmoddi4+0x100>
 80003b2:	1aa4      	subs	r4, r4, r2
 80003b4:	419d      	sbcs	r5, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	1924      	adds	r4, r4, r4
 80003ba:	416d      	adcs	r5, r5
 80003bc:	2100      	movs	r1, #0
 80003be:	3e01      	subs	r6, #1
 80003c0:	1824      	adds	r4, r4, r0
 80003c2:	414d      	adcs	r5, r1
 80003c4:	2e00      	cmp	r6, #0
 80003c6:	d006      	beq.n	80003d6 <__udivmoddi4+0x10a>
 80003c8:	42ab      	cmp	r3, r5
 80003ca:	d9ee      	bls.n	80003aa <__udivmoddi4+0xde>
 80003cc:	3e01      	subs	r6, #1
 80003ce:	1924      	adds	r4, r4, r4
 80003d0:	416d      	adcs	r5, r5
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d1f8      	bne.n	80003c8 <__udivmoddi4+0xfc>
 80003d6:	9800      	ldr	r0, [sp, #0]
 80003d8:	9901      	ldr	r1, [sp, #4]
 80003da:	465b      	mov	r3, fp
 80003dc:	1900      	adds	r0, r0, r4
 80003de:	4169      	adcs	r1, r5
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	db24      	blt.n	800042e <__udivmoddi4+0x162>
 80003e4:	002b      	movs	r3, r5
 80003e6:	465a      	mov	r2, fp
 80003e8:	4644      	mov	r4, r8
 80003ea:	40d3      	lsrs	r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	40e2      	lsrs	r2, r4
 80003f0:	001c      	movs	r4, r3
 80003f2:	465b      	mov	r3, fp
 80003f4:	0015      	movs	r5, r2
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	db2a      	blt.n	8000450 <__udivmoddi4+0x184>
 80003fa:	0026      	movs	r6, r4
 80003fc:	409e      	lsls	r6, r3
 80003fe:	0033      	movs	r3, r6
 8000400:	0026      	movs	r6, r4
 8000402:	4647      	mov	r7, r8
 8000404:	40be      	lsls	r6, r7
 8000406:	0032      	movs	r2, r6
 8000408:	1a80      	subs	r0, r0, r2
 800040a:	4199      	sbcs	r1, r3
 800040c:	9000      	str	r0, [sp, #0]
 800040e:	9101      	str	r1, [sp, #4]
 8000410:	e79e      	b.n	8000350 <__udivmoddi4+0x84>
 8000412:	42a3      	cmp	r3, r4
 8000414:	d8bc      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000416:	e782      	b.n	800031e <__udivmoddi4+0x52>
 8000418:	4642      	mov	r2, r8
 800041a:	2320      	movs	r3, #32
 800041c:	2100      	movs	r1, #0
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	9100      	str	r1, [sp, #0]
 8000424:	9201      	str	r2, [sp, #4]
 8000426:	2201      	movs	r2, #1
 8000428:	40da      	lsrs	r2, r3
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	e785      	b.n	800033a <__udivmoddi4+0x6e>
 800042e:	4642      	mov	r2, r8
 8000430:	2320      	movs	r3, #32
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	002a      	movs	r2, r5
 8000436:	4646      	mov	r6, r8
 8000438:	409a      	lsls	r2, r3
 800043a:	0023      	movs	r3, r4
 800043c:	40f3      	lsrs	r3, r6
 800043e:	4644      	mov	r4, r8
 8000440:	4313      	orrs	r3, r2
 8000442:	002a      	movs	r2, r5
 8000444:	40e2      	lsrs	r2, r4
 8000446:	001c      	movs	r4, r3
 8000448:	465b      	mov	r3, fp
 800044a:	0015      	movs	r5, r2
 800044c:	2b00      	cmp	r3, #0
 800044e:	dad4      	bge.n	80003fa <__udivmoddi4+0x12e>
 8000450:	4642      	mov	r2, r8
 8000452:	002f      	movs	r7, r5
 8000454:	2320      	movs	r3, #32
 8000456:	0026      	movs	r6, r4
 8000458:	4097      	lsls	r7, r2
 800045a:	1a9b      	subs	r3, r3, r2
 800045c:	40de      	lsrs	r6, r3
 800045e:	003b      	movs	r3, r7
 8000460:	4333      	orrs	r3, r6
 8000462:	e7cd      	b.n	8000400 <__udivmoddi4+0x134>

08000464 <__clzdi2>:
 8000464:	b510      	push	{r4, lr}
 8000466:	2900      	cmp	r1, #0
 8000468:	d103      	bne.n	8000472 <__clzdi2+0xe>
 800046a:	f000 f807 	bl	800047c <__clzsi2>
 800046e:	3020      	adds	r0, #32
 8000470:	e002      	b.n	8000478 <__clzdi2+0x14>
 8000472:	0008      	movs	r0, r1
 8000474:	f000 f802 	bl	800047c <__clzsi2>
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__clzsi2>:
 800047c:	211c      	movs	r1, #28
 800047e:	2301      	movs	r3, #1
 8000480:	041b      	lsls	r3, r3, #16
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0xe>
 8000486:	0c00      	lsrs	r0, r0, #16
 8000488:	3910      	subs	r1, #16
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	4298      	cmp	r0, r3
 800048e:	d301      	bcc.n	8000494 <__clzsi2+0x18>
 8000490:	0a00      	lsrs	r0, r0, #8
 8000492:	3908      	subs	r1, #8
 8000494:	091b      	lsrs	r3, r3, #4
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0x22>
 800049a:	0900      	lsrs	r0, r0, #4
 800049c:	3904      	subs	r1, #4
 800049e:	a202      	add	r2, pc, #8	; (adr r2, 80004a8 <__clzsi2+0x2c>)
 80004a0:	5c10      	ldrb	r0, [r2, r0]
 80004a2:	1840      	adds	r0, r0, r1
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	02020304 	.word	0x02020304
 80004ac:	01010101 	.word	0x01010101
	...

080004b8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004b8:	b5b0      	push	{r4, r5, r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004bc:	f000 f93a 	bl	8000734 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004c0:	f000 f832 	bl	8000528 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004c4:	f000 f8a6 	bl	8000614 <MX_GPIO_Init>
	MX_USB_DEVICE_Init();
 80004c8:	f006 fe4a 	bl	8007160 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		CDC_Transmit_FS((uint8_t*) data, strlen(data));
 80004cc:	4b14      	ldr	r3, [pc, #80]	; (8000520 <main+0x68>)
 80004ce:	681c      	ldr	r4, [r3, #0]
 80004d0:	4b13      	ldr	r3, [pc, #76]	; (8000520 <main+0x68>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	0018      	movs	r0, r3
 80004d6:	f7ff fe17 	bl	8000108 <strlen>
 80004da:	0003      	movs	r3, r0
 80004dc:	b29b      	uxth	r3, r3
 80004de:	0019      	movs	r1, r3
 80004e0:	0020      	movs	r0, r4
 80004e2:	f006 fedd 	bl	80072a0 <CDC_Transmit_FS>
		HAL_Delay(500);
 80004e6:	23fa      	movs	r3, #250	; 0xfa
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	0018      	movs	r0, r3
 80004ec:	f000 f992 	bl	8000814 <HAL_Delay>
		CDC_Transmit_FS(buffer, sizeof(buffer));
 80004f0:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <main+0x6c>)
 80004f2:	2140      	movs	r1, #64	; 0x40
 80004f4:	0018      	movs	r0, r3
 80004f6:	f006 fed3 	bl	80072a0 <CDC_Transmit_FS>
		CDC_Transmit_FS((uint8_t*) data, strlen(data));
 80004fa:	4b09      	ldr	r3, [pc, #36]	; (8000520 <main+0x68>)
 80004fc:	681c      	ldr	r4, [r3, #0]
 80004fe:	4b08      	ldr	r3, [pc, #32]	; (8000520 <main+0x68>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	0018      	movs	r0, r3
 8000504:	f7ff fe00 	bl	8000108 <strlen>
 8000508:	0003      	movs	r3, r0
 800050a:	b29b      	uxth	r3, r3
 800050c:	0019      	movs	r1, r3
 800050e:	0020      	movs	r0, r4
 8000510:	f006 fec6 	bl	80072a0 <CDC_Transmit_FS>
		HAL_Delay(500);
 8000514:	23fa      	movs	r3, #250	; 0xfa
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	0018      	movs	r0, r3
 800051a:	f000 f97b 	bl	8000814 <HAL_Delay>
		CDC_Transmit_FS((uint8_t*) data, strlen(data));
 800051e:	e7d5      	b.n	80004cc <main+0x14>
 8000520:	20000000 	.word	0x20000000
 8000524:	2000019c 	.word	0x2000019c

08000528 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000528:	b590      	push	{r4, r7, lr}
 800052a:	b09d      	sub	sp, #116	; 0x74
 800052c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800052e:	2438      	movs	r4, #56	; 0x38
 8000530:	193b      	adds	r3, r7, r4
 8000532:	0018      	movs	r0, r3
 8000534:	2338      	movs	r3, #56	; 0x38
 8000536:	001a      	movs	r2, r3
 8000538:	2100      	movs	r1, #0
 800053a:	f007 fb65 	bl	8007c08 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800053e:	2324      	movs	r3, #36	; 0x24
 8000540:	18fb      	adds	r3, r7, r3
 8000542:	0018      	movs	r0, r3
 8000544:	2314      	movs	r3, #20
 8000546:	001a      	movs	r2, r3
 8000548:	2100      	movs	r1, #0
 800054a:	f007 fb5d 	bl	8007c08 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800054e:	003b      	movs	r3, r7
 8000550:	0018      	movs	r0, r3
 8000552:	2324      	movs	r3, #36	; 0x24
 8000554:	001a      	movs	r2, r3
 8000556:	2100      	movs	r1, #0
 8000558:	f007 fb56 	bl	8007c08 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055c:	4b2b      	ldr	r3, [pc, #172]	; (800060c <SystemClock_Config+0xe4>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a2b      	ldr	r2, [pc, #172]	; (8000610 <SystemClock_Config+0xe8>)
 8000562:	401a      	ands	r2, r3
 8000564:	4b29      	ldr	r3, [pc, #164]	; (800060c <SystemClock_Config+0xe4>)
 8000566:	2180      	movs	r1, #128	; 0x80
 8000568:	0109      	lsls	r1, r1, #4
 800056a:	430a      	orrs	r2, r1
 800056c:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800056e:	0021      	movs	r1, r4
 8000570:	187b      	adds	r3, r7, r1
 8000572:	2222      	movs	r2, #34	; 0x22
 8000574:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_HSI48;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2201      	movs	r2, #1
 800057a:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2210      	movs	r2, #16
 8000580:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2201      	movs	r2, #1
 8000586:	619a      	str	r2, [r3, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2202      	movs	r2, #2
 800058c:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2200      	movs	r2, #0
 8000592:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2280      	movs	r2, #128	; 0x80
 8000598:	02d2      	lsls	r2, r2, #11
 800059a:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2280      	movs	r2, #128	; 0x80
 80005a0:	03d2      	lsls	r2, r2, #15
 80005a2:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	0018      	movs	r0, r3
 80005a8:	f002 f888 	bl	80026bc <HAL_RCC_OscConfig>
 80005ac:	1e03      	subs	r3, r0, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x8c>
		Error_Handler();
 80005b0:	f000 f852 	bl	8000658 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005b4:	2124      	movs	r1, #36	; 0x24
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	220f      	movs	r2, #15
 80005ba:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	2203      	movs	r2, #3
 80005c0:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	2101      	movs	r1, #1
 80005d8:	0018      	movs	r0, r3
 80005da:	f002 fc33 	bl	8002e44 <HAL_RCC_ClockConfig>
 80005de:	1e03      	subs	r3, r0, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0xbe>
		Error_Handler();
 80005e2:	f000 f839 	bl	8000658 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80005e6:	003b      	movs	r3, r7
 80005e8:	2240      	movs	r2, #64	; 0x40
 80005ea:	601a      	str	r2, [r3, #0]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80005ec:	003b      	movs	r3, r7
 80005ee:	2280      	movs	r2, #128	; 0x80
 80005f0:	04d2      	lsls	r2, r2, #19
 80005f2:	621a      	str	r2, [r3, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80005f4:	003b      	movs	r3, r7
 80005f6:	0018      	movs	r0, r3
 80005f8:	f002 fe12 	bl	8003220 <HAL_RCCEx_PeriphCLKConfig>
 80005fc:	1e03      	subs	r3, r0, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0xdc>
		Error_Handler();
 8000600:	f000 f82a 	bl	8000658 <Error_Handler>
	}
}
 8000604:	46c0      	nop			; (mov r8, r8)
 8000606:	46bd      	mov	sp, r7
 8000608:	b01d      	add	sp, #116	; 0x74
 800060a:	bd90      	pop	{r4, r7, pc}
 800060c:	40007000 	.word	0x40007000
 8000610:	ffffe7ff 	.word	0xffffe7ff

08000614 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_GPIO_Init+0x40>)
 800061c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800061e:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <MX_GPIO_Init+0x40>)
 8000620:	2180      	movs	r1, #128	; 0x80
 8000622:	430a      	orrs	r2, r1
 8000624:	62da      	str	r2, [r3, #44]	; 0x2c
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <MX_GPIO_Init+0x40>)
 8000628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800062a:	2280      	movs	r2, #128	; 0x80
 800062c:	4013      	ands	r3, r2
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <MX_GPIO_Init+0x40>)
 8000634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000636:	4b07      	ldr	r3, [pc, #28]	; (8000654 <MX_GPIO_Init+0x40>)
 8000638:	2101      	movs	r1, #1
 800063a:	430a      	orrs	r2, r1
 800063c:	62da      	str	r2, [r3, #44]	; 0x2c
 800063e:	4b05      	ldr	r3, [pc, #20]	; (8000654 <MX_GPIO_Init+0x40>)
 8000640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000642:	2201      	movs	r2, #1
 8000644:	4013      	ands	r3, r2
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	b002      	add	sp, #8
 8000650:	bd80      	pop	{r7, pc}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	40021000 	.word	0x40021000

08000658 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800065c:	b672      	cpsid	i
}
 800065e:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000660:	e7fe      	b.n	8000660 <Error_Handler+0x8>
	...

08000664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000668:	4b07      	ldr	r3, [pc, #28]	; (8000688 <HAL_MspInit+0x24>)
 800066a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <HAL_MspInit+0x24>)
 800066e:	2101      	movs	r1, #1
 8000670:	430a      	orrs	r2, r1
 8000672:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	4b04      	ldr	r3, [pc, #16]	; (8000688 <HAL_MspInit+0x24>)
 8000676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000678:	4b03      	ldr	r3, [pc, #12]	; (8000688 <HAL_MspInit+0x24>)
 800067a:	2180      	movs	r1, #128	; 0x80
 800067c:	0549      	lsls	r1, r1, #21
 800067e:	430a      	orrs	r2, r1
 8000680:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40021000 	.word	0x40021000

0800068c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000690:	e7fe      	b.n	8000690 <NMI_Handler+0x4>

08000692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000696:	e7fe      	b.n	8000696 <HardFault_Handler+0x4>

08000698 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006b0:	f000 f894 	bl	80007dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006b4:	46c0      	nop			; (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80006c0:	4b03      	ldr	r3, [pc, #12]	; (80006d0 <USB_IRQHandler+0x14>)
 80006c2:	0018      	movs	r0, r3
 80006c4:	f000 face 	bl	8000c64 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80006c8:	46c0      	nop			; (mov r8, r8)
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	20000ea8 	.word	0x20000ea8

080006d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80006e0:	480d      	ldr	r0, [pc, #52]	; (8000718 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006e2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006e4:	f7ff fff6 	bl	80006d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e8:	480c      	ldr	r0, [pc, #48]	; (800071c <LoopForever+0x6>)
  ldr r1, =_edata
 80006ea:	490d      	ldr	r1, [pc, #52]	; (8000720 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006ec:	4a0d      	ldr	r2, [pc, #52]	; (8000724 <LoopForever+0xe>)
  movs r3, #0
 80006ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f0:	e002      	b.n	80006f8 <LoopCopyDataInit>

080006f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006f6:	3304      	adds	r3, #4

080006f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006fc:	d3f9      	bcc.n	80006f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006fe:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000700:	4c0a      	ldr	r4, [pc, #40]	; (800072c <LoopForever+0x16>)
  movs r3, #0
 8000702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000704:	e001      	b.n	800070a <LoopFillZerobss>

08000706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000708:	3204      	adds	r2, #4

0800070a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800070a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800070c:	d3fb      	bcc.n	8000706 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800070e:	f007 fa83 	bl	8007c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000712:	f7ff fed1 	bl	80004b8 <main>

08000716 <LoopForever>:

LoopForever:
    b LoopForever
 8000716:	e7fe      	b.n	8000716 <LoopForever>
  ldr   r0, =_estack
 8000718:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800071c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000720:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000724:	08007e10 	.word	0x08007e10
  ldr r2, =_sbss
 8000728:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 800072c:	200013bc 	.word	0x200013bc

08000730 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000730:	e7fe      	b.n	8000730 <ADC1_COMP_IRQHandler>
	...

08000734 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800073a:	1dfb      	adds	r3, r7, #7
 800073c:	2200      	movs	r2, #0
 800073e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000740:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <HAL_Init+0x3c>)
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <HAL_Init+0x3c>)
 8000746:	2140      	movs	r1, #64	; 0x40
 8000748:	430a      	orrs	r2, r1
 800074a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800074c:	2000      	movs	r0, #0
 800074e:	f000 f811 	bl	8000774 <HAL_InitTick>
 8000752:	1e03      	subs	r3, r0, #0
 8000754:	d003      	beq.n	800075e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000756:	1dfb      	adds	r3, r7, #7
 8000758:	2201      	movs	r2, #1
 800075a:	701a      	strb	r2, [r3, #0]
 800075c:	e001      	b.n	8000762 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800075e:	f7ff ff81 	bl	8000664 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000762:	1dfb      	adds	r3, r7, #7
 8000764:	781b      	ldrb	r3, [r3, #0]
}
 8000766:	0018      	movs	r0, r3
 8000768:	46bd      	mov	sp, r7
 800076a:	b002      	add	sp, #8
 800076c:	bd80      	pop	{r7, pc}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	40022000 	.word	0x40022000

08000774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800077c:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <HAL_InitTick+0x5c>)
 800077e:	681c      	ldr	r4, [r3, #0]
 8000780:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <HAL_InitTick+0x60>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	0019      	movs	r1, r3
 8000786:	23fa      	movs	r3, #250	; 0xfa
 8000788:	0098      	lsls	r0, r3, #2
 800078a:	f7ff fcc5 	bl	8000118 <__udivsi3>
 800078e:	0003      	movs	r3, r0
 8000790:	0019      	movs	r1, r3
 8000792:	0020      	movs	r0, r4
 8000794:	f7ff fcc0 	bl	8000118 <__udivsi3>
 8000798:	0003      	movs	r3, r0
 800079a:	0018      	movs	r0, r3
 800079c:	f000 f92f 	bl	80009fe <HAL_SYSTICK_Config>
 80007a0:	1e03      	subs	r3, r0, #0
 80007a2:	d001      	beq.n	80007a8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80007a4:	2301      	movs	r3, #1
 80007a6:	e00f      	b.n	80007c8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b03      	cmp	r3, #3
 80007ac:	d80b      	bhi.n	80007c6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ae:	6879      	ldr	r1, [r7, #4]
 80007b0:	2301      	movs	r3, #1
 80007b2:	425b      	negs	r3, r3
 80007b4:	2200      	movs	r2, #0
 80007b6:	0018      	movs	r0, r3
 80007b8:	f000 f8fc 	bl	80009b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HAL_InitTick+0x64>)
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007c2:	2300      	movs	r3, #0
 80007c4:	e000      	b.n	80007c8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
}
 80007c8:	0018      	movs	r0, r3
 80007ca:	46bd      	mov	sp, r7
 80007cc:	b003      	add	sp, #12
 80007ce:	bd90      	pop	{r4, r7, pc}
 80007d0:	20000004 	.word	0x20000004
 80007d4:	2000000c 	.word	0x2000000c
 80007d8:	20000008 	.word	0x20000008

080007dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <HAL_IncTick+0x1c>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	001a      	movs	r2, r3
 80007e6:	4b05      	ldr	r3, [pc, #20]	; (80007fc <HAL_IncTick+0x20>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	18d2      	adds	r2, r2, r3
 80007ec:	4b03      	ldr	r3, [pc, #12]	; (80007fc <HAL_IncTick+0x20>)
 80007ee:	601a      	str	r2, [r3, #0]
}
 80007f0:	46c0      	nop			; (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	2000000c 	.word	0x2000000c
 80007fc:	200001dc 	.word	0x200001dc

08000800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  return uwTick;
 8000804:	4b02      	ldr	r3, [pc, #8]	; (8000810 <HAL_GetTick+0x10>)
 8000806:	681b      	ldr	r3, [r3, #0]
}
 8000808:	0018      	movs	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	200001dc 	.word	0x200001dc

08000814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800081c:	f7ff fff0 	bl	8000800 <HAL_GetTick>
 8000820:	0003      	movs	r3, r0
 8000822:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	3301      	adds	r3, #1
 800082c:	d005      	beq.n	800083a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <HAL_Delay+0x44>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	001a      	movs	r2, r3
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	189b      	adds	r3, r3, r2
 8000838:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	f7ff ffe0 	bl	8000800 <HAL_GetTick>
 8000840:	0002      	movs	r2, r0
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	68fa      	ldr	r2, [r7, #12]
 8000848:	429a      	cmp	r2, r3
 800084a:	d8f7      	bhi.n	800083c <HAL_Delay+0x28>
  {
  }
}
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	b004      	add	sp, #16
 8000854:	bd80      	pop	{r7, pc}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	2000000c 	.word	0x2000000c

0800085c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	0002      	movs	r2, r0
 8000864:	1dfb      	adds	r3, r7, #7
 8000866:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000868:	1dfb      	adds	r3, r7, #7
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b7f      	cmp	r3, #127	; 0x7f
 800086e:	d809      	bhi.n	8000884 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000870:	1dfb      	adds	r3, r7, #7
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	001a      	movs	r2, r3
 8000876:	231f      	movs	r3, #31
 8000878:	401a      	ands	r2, r3
 800087a:	4b04      	ldr	r3, [pc, #16]	; (800088c <__NVIC_EnableIRQ+0x30>)
 800087c:	2101      	movs	r1, #1
 800087e:	4091      	lsls	r1, r2
 8000880:	000a      	movs	r2, r1
 8000882:	601a      	str	r2, [r3, #0]
  }
}
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	b002      	add	sp, #8
 800088a:	bd80      	pop	{r7, pc}
 800088c:	e000e100 	.word	0xe000e100

08000890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000890:	b590      	push	{r4, r7, lr}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	0002      	movs	r2, r0
 8000898:	6039      	str	r1, [r7, #0]
 800089a:	1dfb      	adds	r3, r7, #7
 800089c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800089e:	1dfb      	adds	r3, r7, #7
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b7f      	cmp	r3, #127	; 0x7f
 80008a4:	d828      	bhi.n	80008f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008a6:	4a2f      	ldr	r2, [pc, #188]	; (8000964 <__NVIC_SetPriority+0xd4>)
 80008a8:	1dfb      	adds	r3, r7, #7
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	b25b      	sxtb	r3, r3
 80008ae:	089b      	lsrs	r3, r3, #2
 80008b0:	33c0      	adds	r3, #192	; 0xc0
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	589b      	ldr	r3, [r3, r2]
 80008b6:	1dfa      	adds	r2, r7, #7
 80008b8:	7812      	ldrb	r2, [r2, #0]
 80008ba:	0011      	movs	r1, r2
 80008bc:	2203      	movs	r2, #3
 80008be:	400a      	ands	r2, r1
 80008c0:	00d2      	lsls	r2, r2, #3
 80008c2:	21ff      	movs	r1, #255	; 0xff
 80008c4:	4091      	lsls	r1, r2
 80008c6:	000a      	movs	r2, r1
 80008c8:	43d2      	mvns	r2, r2
 80008ca:	401a      	ands	r2, r3
 80008cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	019b      	lsls	r3, r3, #6
 80008d2:	22ff      	movs	r2, #255	; 0xff
 80008d4:	401a      	ands	r2, r3
 80008d6:	1dfb      	adds	r3, r7, #7
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	0018      	movs	r0, r3
 80008dc:	2303      	movs	r3, #3
 80008de:	4003      	ands	r3, r0
 80008e0:	00db      	lsls	r3, r3, #3
 80008e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008e4:	481f      	ldr	r0, [pc, #124]	; (8000964 <__NVIC_SetPriority+0xd4>)
 80008e6:	1dfb      	adds	r3, r7, #7
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	b25b      	sxtb	r3, r3
 80008ec:	089b      	lsrs	r3, r3, #2
 80008ee:	430a      	orrs	r2, r1
 80008f0:	33c0      	adds	r3, #192	; 0xc0
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008f6:	e031      	b.n	800095c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008f8:	4a1b      	ldr	r2, [pc, #108]	; (8000968 <__NVIC_SetPriority+0xd8>)
 80008fa:	1dfb      	adds	r3, r7, #7
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	0019      	movs	r1, r3
 8000900:	230f      	movs	r3, #15
 8000902:	400b      	ands	r3, r1
 8000904:	3b08      	subs	r3, #8
 8000906:	089b      	lsrs	r3, r3, #2
 8000908:	3306      	adds	r3, #6
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	18d3      	adds	r3, r2, r3
 800090e:	3304      	adds	r3, #4
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	1dfa      	adds	r2, r7, #7
 8000914:	7812      	ldrb	r2, [r2, #0]
 8000916:	0011      	movs	r1, r2
 8000918:	2203      	movs	r2, #3
 800091a:	400a      	ands	r2, r1
 800091c:	00d2      	lsls	r2, r2, #3
 800091e:	21ff      	movs	r1, #255	; 0xff
 8000920:	4091      	lsls	r1, r2
 8000922:	000a      	movs	r2, r1
 8000924:	43d2      	mvns	r2, r2
 8000926:	401a      	ands	r2, r3
 8000928:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	019b      	lsls	r3, r3, #6
 800092e:	22ff      	movs	r2, #255	; 0xff
 8000930:	401a      	ands	r2, r3
 8000932:	1dfb      	adds	r3, r7, #7
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	0018      	movs	r0, r3
 8000938:	2303      	movs	r3, #3
 800093a:	4003      	ands	r3, r0
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000940:	4809      	ldr	r0, [pc, #36]	; (8000968 <__NVIC_SetPriority+0xd8>)
 8000942:	1dfb      	adds	r3, r7, #7
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	001c      	movs	r4, r3
 8000948:	230f      	movs	r3, #15
 800094a:	4023      	ands	r3, r4
 800094c:	3b08      	subs	r3, #8
 800094e:	089b      	lsrs	r3, r3, #2
 8000950:	430a      	orrs	r2, r1
 8000952:	3306      	adds	r3, #6
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	18c3      	adds	r3, r0, r3
 8000958:	3304      	adds	r3, #4
 800095a:	601a      	str	r2, [r3, #0]
}
 800095c:	46c0      	nop			; (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	b003      	add	sp, #12
 8000962:	bd90      	pop	{r4, r7, pc}
 8000964:	e000e100 	.word	0xe000e100
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	1e5a      	subs	r2, r3, #1
 8000978:	2380      	movs	r3, #128	; 0x80
 800097a:	045b      	lsls	r3, r3, #17
 800097c:	429a      	cmp	r2, r3
 800097e:	d301      	bcc.n	8000984 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000980:	2301      	movs	r3, #1
 8000982:	e010      	b.n	80009a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <SysTick_Config+0x44>)
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	3a01      	subs	r2, #1
 800098a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800098c:	2301      	movs	r3, #1
 800098e:	425b      	negs	r3, r3
 8000990:	2103      	movs	r1, #3
 8000992:	0018      	movs	r0, r3
 8000994:	f7ff ff7c 	bl	8000890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000998:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <SysTick_Config+0x44>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800099e:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <SysTick_Config+0x44>)
 80009a0:	2207      	movs	r2, #7
 80009a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	0018      	movs	r0, r3
 80009a8:	46bd      	mov	sp, r7
 80009aa:	b002      	add	sp, #8
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	e000e010 	.word	0xe000e010

080009b4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	607a      	str	r2, [r7, #4]
 80009be:	210f      	movs	r1, #15
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	1c02      	adds	r2, r0, #0
 80009c4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009c6:	68ba      	ldr	r2, [r7, #8]
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	b25b      	sxtb	r3, r3
 80009ce:	0011      	movs	r1, r2
 80009d0:	0018      	movs	r0, r3
 80009d2:	f7ff ff5d 	bl	8000890 <__NVIC_SetPriority>
}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	b004      	add	sp, #16
 80009dc:	bd80      	pop	{r7, pc}

080009de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	0002      	movs	r2, r0
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009ea:	1dfb      	adds	r3, r7, #7
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	b25b      	sxtb	r3, r3
 80009f0:	0018      	movs	r0, r3
 80009f2:	f7ff ff33 	bl	800085c <__NVIC_EnableIRQ>
}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	b002      	add	sp, #8
 80009fc:	bd80      	pop	{r7, pc}

080009fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f7ff ffaf 	bl	800096c <SysTick_Config>
 8000a0e:	0003      	movs	r3, r0
}
 8000a10:	0018      	movs	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b002      	add	sp, #8
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a1a:	b08b      	sub	sp, #44	; 0x2c
 8000a1c:	af06      	add	r7, sp, #24
 8000a1e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d101      	bne.n	8000a2a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	e0f0      	b.n	8000c0c <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a79      	ldr	r2, [pc, #484]	; (8000c14 <HAL_PCD_Init+0x1fc>)
 8000a2e:	5c9b      	ldrb	r3, [r3, r2]
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d108      	bne.n	8000a48 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	23aa      	movs	r3, #170	; 0xaa
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	0018      	movs	r0, r3
 8000a44:	f006 fd8a 	bl	800755c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a72      	ldr	r2, [pc, #456]	; (8000c14 <HAL_PCD_Init+0x1fc>)
 8000a4c:	2103      	movs	r1, #3
 8000a4e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	0018      	movs	r0, r3
 8000a56:	f002 fd87 	bl	8003568 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a5a:	230f      	movs	r3, #15
 8000a5c:	18fb      	adds	r3, r7, r3
 8000a5e:	2200      	movs	r2, #0
 8000a60:	701a      	strb	r2, [r3, #0]
 8000a62:	e049      	b.n	8000af8 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000a64:	200f      	movs	r0, #15
 8000a66:	183b      	adds	r3, r7, r0
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	6879      	ldr	r1, [r7, #4]
 8000a6c:	1c5a      	adds	r2, r3, #1
 8000a6e:	0013      	movs	r3, r2
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	189b      	adds	r3, r3, r2
 8000a74:	00db      	lsls	r3, r3, #3
 8000a76:	18cb      	adds	r3, r1, r3
 8000a78:	3301      	adds	r3, #1
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000a7e:	183b      	adds	r3, r7, r0
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	1c5a      	adds	r2, r3, #1
 8000a86:	0013      	movs	r3, r2
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	189b      	adds	r3, r3, r2
 8000a8c:	00db      	lsls	r3, r3, #3
 8000a8e:	183a      	adds	r2, r7, r0
 8000a90:	7812      	ldrb	r2, [r2, #0]
 8000a92:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000a94:	183b      	adds	r3, r7, r0
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	6879      	ldr	r1, [r7, #4]
 8000a9a:	1c5a      	adds	r2, r3, #1
 8000a9c:	0013      	movs	r3, r2
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	189b      	adds	r3, r3, r2
 8000aa2:	00db      	lsls	r3, r3, #3
 8000aa4:	18cb      	adds	r3, r1, r3
 8000aa6:	3303      	adds	r3, #3
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000aac:	183b      	adds	r3, r7, r0
 8000aae:	781a      	ldrb	r2, [r3, #0]
 8000ab0:	6879      	ldr	r1, [r7, #4]
 8000ab2:	0013      	movs	r3, r2
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	189b      	adds	r3, r3, r2
 8000ab8:	00db      	lsls	r3, r3, #3
 8000aba:	18cb      	adds	r3, r1, r3
 8000abc:	3338      	adds	r3, #56	; 0x38
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ac2:	183b      	adds	r3, r7, r0
 8000ac4:	781a      	ldrb	r2, [r3, #0]
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	0013      	movs	r3, r2
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	189b      	adds	r3, r3, r2
 8000ace:	00db      	lsls	r3, r3, #3
 8000ad0:	18cb      	adds	r3, r1, r3
 8000ad2:	333c      	adds	r3, #60	; 0x3c
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ad8:	183b      	adds	r3, r7, r0
 8000ada:	781a      	ldrb	r2, [r3, #0]
 8000adc:	6879      	ldr	r1, [r7, #4]
 8000ade:	0013      	movs	r3, r2
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	189b      	adds	r3, r3, r2
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	18cb      	adds	r3, r1, r3
 8000ae8:	3340      	adds	r3, #64	; 0x40
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000aee:	183b      	adds	r3, r7, r0
 8000af0:	781a      	ldrb	r2, [r3, #0]
 8000af2:	183b      	adds	r3, r7, r0
 8000af4:	3201      	adds	r2, #1
 8000af6:	701a      	strb	r2, [r3, #0]
 8000af8:	210f      	movs	r1, #15
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	781a      	ldrb	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d3ae      	bcc.n	8000a64 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	2200      	movs	r2, #0
 8000b0a:	701a      	strb	r2, [r3, #0]
 8000b0c:	e056      	b.n	8000bbc <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000b0e:	240f      	movs	r4, #15
 8000b10:	193b      	adds	r3, r7, r4
 8000b12:	781a      	ldrb	r2, [r3, #0]
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	236a      	movs	r3, #106	; 0x6a
 8000b18:	33ff      	adds	r3, #255	; 0xff
 8000b1a:	0019      	movs	r1, r3
 8000b1c:	0013      	movs	r3, r2
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	189b      	adds	r3, r3, r2
 8000b22:	00db      	lsls	r3, r3, #3
 8000b24:	18c3      	adds	r3, r0, r3
 8000b26:	185b      	adds	r3, r3, r1
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000b2c:	193b      	adds	r3, r7, r4
 8000b2e:	781a      	ldrb	r2, [r3, #0]
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	23b4      	movs	r3, #180	; 0xb4
 8000b34:	0059      	lsls	r1, r3, #1
 8000b36:	0013      	movs	r3, r2
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	189b      	adds	r3, r3, r2
 8000b3c:	00db      	lsls	r3, r3, #3
 8000b3e:	18c3      	adds	r3, r0, r3
 8000b40:	185b      	adds	r3, r3, r1
 8000b42:	193a      	adds	r2, r7, r4
 8000b44:	7812      	ldrb	r2, [r2, #0]
 8000b46:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000b48:	193b      	adds	r3, r7, r4
 8000b4a:	781a      	ldrb	r2, [r3, #0]
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	236c      	movs	r3, #108	; 0x6c
 8000b50:	33ff      	adds	r3, #255	; 0xff
 8000b52:	0019      	movs	r1, r3
 8000b54:	0013      	movs	r3, r2
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	189b      	adds	r3, r3, r2
 8000b5a:	00db      	lsls	r3, r3, #3
 8000b5c:	18c3      	adds	r3, r0, r3
 8000b5e:	185b      	adds	r3, r3, r1
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000b64:	193b      	adds	r3, r7, r4
 8000b66:	781a      	ldrb	r2, [r3, #0]
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	23bc      	movs	r3, #188	; 0xbc
 8000b6c:	0059      	lsls	r1, r3, #1
 8000b6e:	0013      	movs	r3, r2
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	189b      	adds	r3, r3, r2
 8000b74:	00db      	lsls	r3, r3, #3
 8000b76:	18c3      	adds	r3, r0, r3
 8000b78:	185b      	adds	r3, r3, r1
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	781a      	ldrb	r2, [r3, #0]
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	23be      	movs	r3, #190	; 0xbe
 8000b86:	0059      	lsls	r1, r3, #1
 8000b88:	0013      	movs	r3, r2
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	189b      	adds	r3, r3, r2
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	18c3      	adds	r3, r0, r3
 8000b92:	185b      	adds	r3, r3, r1
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000b98:	193b      	adds	r3, r7, r4
 8000b9a:	781a      	ldrb	r2, [r3, #0]
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	23c0      	movs	r3, #192	; 0xc0
 8000ba0:	0059      	lsls	r1, r3, #1
 8000ba2:	0013      	movs	r3, r2
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	189b      	adds	r3, r3, r2
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	18c3      	adds	r3, r0, r3
 8000bac:	185b      	adds	r3, r3, r1
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bb2:	193b      	adds	r3, r7, r4
 8000bb4:	781a      	ldrb	r2, [r3, #0]
 8000bb6:	193b      	adds	r3, r7, r4
 8000bb8:	3201      	adds	r2, #1
 8000bba:	701a      	strb	r2, [r3, #0]
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	18fb      	adds	r3, r7, r3
 8000bc0:	781a      	ldrb	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d3a1      	bcc.n	8000b0e <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6818      	ldr	r0, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	466a      	mov	r2, sp
 8000bd2:	0011      	movs	r1, r2
 8000bd4:	001a      	movs	r2, r3
 8000bd6:	3210      	adds	r2, #16
 8000bd8:	ca70      	ldmia	r2!, {r4, r5, r6}
 8000bda:	c170      	stmia	r1!, {r4, r5, r6}
 8000bdc:	ca30      	ldmia	r2!, {r4, r5}
 8000bde:	c130      	stmia	r1!, {r4, r5}
 8000be0:	6859      	ldr	r1, [r3, #4]
 8000be2:	689a      	ldr	r2, [r3, #8]
 8000be4:	68db      	ldr	r3, [r3, #12]
 8000be6:	f002 fcd9 	bl	800359c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2224      	movs	r2, #36	; 0x24
 8000bee:	2100      	movs	r1, #0
 8000bf0:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4a07      	ldr	r2, [pc, #28]	; (8000c14 <HAL_PCD_Init+0x1fc>)
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	69db      	ldr	r3, [r3, #28]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d103      	bne.n	8000c0a <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	0018      	movs	r0, r3
 8000c06:	f001 fd23 	bl	8002650 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000c0a:	2300      	movs	r3, #0
}
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	b005      	add	sp, #20
 8000c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c14:	000002a9 	.word	0x000002a9

08000c18 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	23aa      	movs	r3, #170	; 0xaa
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	5cd3      	ldrb	r3, [r2, r3]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d101      	bne.n	8000c30 <HAL_PCD_Start+0x18>
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	e014      	b.n	8000c5a <HAL_PCD_Start+0x42>
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	23aa      	movs	r3, #170	; 0xaa
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	2101      	movs	r1, #1
 8000c38:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f002 fc7c 	bl	800353c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f004 fc7f 	bl	800554c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	23aa      	movs	r3, #170	; 0xaa
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	2100      	movs	r1, #0
 8000c56:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b002      	add	sp, #8
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	0018      	movs	r0, r3
 8000c72:	f004 fc81 	bl	8005578 <USB_ReadInterrupts>
 8000c76:	0003      	movs	r3, r0
 8000c78:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	2380      	movs	r3, #128	; 0x80
 8000c7e:	021b      	lsls	r3, r3, #8
 8000c80:	4013      	ands	r3, r2
 8000c82:	d004      	beq.n	8000c8e <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	0018      	movs	r0, r3
 8000c88:	f000 fb62 	bl	8001350 <PCD_EP_ISR_Handler>

    return;
 8000c8c:	e11d      	b.n	8000eca <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	2380      	movs	r3, #128	; 0x80
 8000c92:	00db      	lsls	r3, r3, #3
 8000c94:	4013      	ands	r3, r2
 8000c96:	d015      	beq.n	8000cc4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2244      	movs	r2, #68	; 0x44
 8000c9e:	5a9b      	ldrh	r3, [r3, r2]
 8000ca0:	b29a      	uxth	r2, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	498a      	ldr	r1, [pc, #552]	; (8000ed0 <HAL_PCD_IRQHandler+0x26c>)
 8000ca8:	400a      	ands	r2, r1
 8000caa:	b291      	uxth	r1, r2
 8000cac:	2244      	movs	r2, #68	; 0x44
 8000cae:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f006 fcd5 	bl	8007662 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2100      	movs	r1, #0
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f000 f915 	bl	8000eec <HAL_PCD_SetAddress>

    return;
 8000cc2:	e102      	b.n	8000eca <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000cc4:	68fa      	ldr	r2, [r7, #12]
 8000cc6:	2380      	movs	r3, #128	; 0x80
 8000cc8:	01db      	lsls	r3, r3, #7
 8000cca:	4013      	ands	r3, r2
 8000ccc:	d00c      	beq.n	8000ce8 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2244      	movs	r2, #68	; 0x44
 8000cd4:	5a9b      	ldrh	r3, [r3, r2]
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	497d      	ldr	r1, [pc, #500]	; (8000ed4 <HAL_PCD_IRQHandler+0x270>)
 8000cde:	400a      	ands	r2, r1
 8000ce0:	b291      	uxth	r1, r2
 8000ce2:	2244      	movs	r2, #68	; 0x44
 8000ce4:	5299      	strh	r1, [r3, r2]

    return;
 8000ce6:	e0f0      	b.n	8000eca <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000ce8:	68fa      	ldr	r2, [r7, #12]
 8000cea:	2380      	movs	r3, #128	; 0x80
 8000cec:	019b      	lsls	r3, r3, #6
 8000cee:	4013      	ands	r3, r2
 8000cf0:	d00c      	beq.n	8000d0c <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2244      	movs	r2, #68	; 0x44
 8000cf8:	5a9b      	ldrh	r3, [r3, r2]
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4975      	ldr	r1, [pc, #468]	; (8000ed8 <HAL_PCD_IRQHandler+0x274>)
 8000d02:	400a      	ands	r2, r1
 8000d04:	b291      	uxth	r1, r2
 8000d06:	2244      	movs	r2, #68	; 0x44
 8000d08:	5299      	strh	r1, [r3, r2]

    return;
 8000d0a:	e0de      	b.n	8000eca <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000d0c:	68fa      	ldr	r2, [r7, #12]
 8000d0e:	2380      	movs	r3, #128	; 0x80
 8000d10:	015b      	lsls	r3, r3, #5
 8000d12:	4013      	ands	r3, r2
 8000d14:	d038      	beq.n	8000d88 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2240      	movs	r2, #64	; 0x40
 8000d1c:	5a9b      	ldrh	r3, [r3, r2]
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2104      	movs	r1, #4
 8000d26:	438a      	bics	r2, r1
 8000d28:	b291      	uxth	r1, r2
 8000d2a:	2240      	movs	r2, #64	; 0x40
 8000d2c:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2240      	movs	r2, #64	; 0x40
 8000d34:	5a9b      	ldrh	r3, [r3, r2]
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2108      	movs	r1, #8
 8000d3e:	438a      	bics	r2, r1
 8000d40:	b291      	uxth	r1, r2
 8000d42:	2240      	movs	r2, #64	; 0x40
 8000d44:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	23b8      	movs	r3, #184	; 0xb8
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	5cd3      	ldrb	r3, [r2, r3]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d109      	bne.n	8000d66 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	23b8      	movs	r3, #184	; 0xb8
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	2100      	movs	r1, #0
 8000d5a:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2100      	movs	r1, #0
 8000d60:	0018      	movs	r0, r3
 8000d62:	f001 fc9f 	bl	80026a4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f006 fcbb 	bl	80076e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2244      	movs	r2, #68	; 0x44
 8000d74:	5a9b      	ldrh	r3, [r3, r2]
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4957      	ldr	r1, [pc, #348]	; (8000edc <HAL_PCD_IRQHandler+0x278>)
 8000d7e:	400a      	ands	r2, r1
 8000d80:	b291      	uxth	r1, r2
 8000d82:	2244      	movs	r2, #68	; 0x44
 8000d84:	5299      	strh	r1, [r3, r2]

    return;
 8000d86:	e0a0      	b.n	8000eca <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000d88:	68fa      	ldr	r2, [r7, #12]
 8000d8a:	2380      	movs	r3, #128	; 0x80
 8000d8c:	011b      	lsls	r3, r3, #4
 8000d8e:	4013      	ands	r3, r2
 8000d90:	d028      	beq.n	8000de4 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2240      	movs	r2, #64	; 0x40
 8000d98:	5a9b      	ldrh	r3, [r3, r2]
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2108      	movs	r1, #8
 8000da2:	430a      	orrs	r2, r1
 8000da4:	b291      	uxth	r1, r2
 8000da6:	2240      	movs	r2, #64	; 0x40
 8000da8:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2244      	movs	r2, #68	; 0x44
 8000db0:	5a9b      	ldrh	r3, [r3, r2]
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4949      	ldr	r1, [pc, #292]	; (8000ee0 <HAL_PCD_IRQHandler+0x27c>)
 8000dba:	400a      	ands	r2, r1
 8000dbc:	b291      	uxth	r1, r2
 8000dbe:	2244      	movs	r2, #68	; 0x44
 8000dc0:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2240      	movs	r2, #64	; 0x40
 8000dc8:	5a9b      	ldrh	r3, [r3, r2]
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2104      	movs	r1, #4
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	b291      	uxth	r1, r2
 8000dd6:	2240      	movs	r2, #64	; 0x40
 8000dd8:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f006 fc65 	bl	80076ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000de2:	e072      	b.n	8000eca <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2280      	movs	r2, #128	; 0x80
 8000de8:	4013      	ands	r3, r2
 8000dea:	d046      	beq.n	8000e7a <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2244      	movs	r2, #68	; 0x44
 8000df2:	5a9b      	ldrh	r3, [r3, r2]
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2180      	movs	r1, #128	; 0x80
 8000dfc:	438a      	bics	r2, r1
 8000dfe:	b291      	uxth	r1, r2
 8000e00:	2244      	movs	r2, #68	; 0x44
 8000e02:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	23b8      	movs	r3, #184	; 0xb8
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	5cd3      	ldrb	r3, [r2, r3]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d12f      	bne.n	8000e70 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2240      	movs	r2, #64	; 0x40
 8000e16:	5a9b      	ldrh	r3, [r3, r2]
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2104      	movs	r1, #4
 8000e20:	430a      	orrs	r2, r1
 8000e22:	b291      	uxth	r1, r2
 8000e24:	2240      	movs	r2, #64	; 0x40
 8000e26:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2240      	movs	r2, #64	; 0x40
 8000e2e:	5a9b      	ldrh	r3, [r3, r2]
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2108      	movs	r1, #8
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	b291      	uxth	r1, r2
 8000e3c:	2240      	movs	r2, #64	; 0x40
 8000e3e:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	23b8      	movs	r3, #184	; 0xb8
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	2101      	movs	r1, #1
 8000e48:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2254      	movs	r2, #84	; 0x54
 8000e50:	5a9b      	ldrh	r3, [r3, r2]
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	089b      	lsrs	r3, r3, #2
 8000e56:	223c      	movs	r2, #60	; 0x3c
 8000e58:	4013      	ands	r3, r2
 8000e5a:	0019      	movs	r1, r3
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	23b9      	movs	r3, #185	; 0xb9
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2101      	movs	r1, #1
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f001 fc1b 	bl	80026a4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8000e6e:	e02c      	b.n	8000eca <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	0018      	movs	r0, r3
 8000e74:	f006 fc1a 	bl	80076ac <HAL_PCD_SuspendCallback>
    return;
 8000e78:	e027      	b.n	8000eca <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	2380      	movs	r3, #128	; 0x80
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	4013      	ands	r3, r2
 8000e82:	d010      	beq.n	8000ea6 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2244      	movs	r2, #68	; 0x44
 8000e8a:	5a9b      	ldrh	r3, [r3, r2]
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4914      	ldr	r1, [pc, #80]	; (8000ee4 <HAL_PCD_IRQHandler+0x280>)
 8000e94:	400a      	ands	r2, r1
 8000e96:	b291      	uxth	r1, r2
 8000e98:	2244      	movs	r2, #68	; 0x44
 8000e9a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f006 fbd0 	bl	8007644 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000ea4:	e011      	b.n	8000eca <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	2380      	movs	r3, #128	; 0x80
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	4013      	ands	r3, r2
 8000eae:	d00c      	beq.n	8000eca <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2244      	movs	r2, #68	; 0x44
 8000eb6:	5a9b      	ldrh	r3, [r3, r2]
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	490a      	ldr	r1, [pc, #40]	; (8000ee8 <HAL_PCD_IRQHandler+0x284>)
 8000ec0:	400a      	ands	r2, r1
 8000ec2:	b291      	uxth	r1, r2
 8000ec4:	2244      	movs	r2, #68	; 0x44
 8000ec6:	5299      	strh	r1, [r3, r2]

    return;
 8000ec8:	46c0      	nop			; (mov r8, r8)
  }
}
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	b004      	add	sp, #16
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	fffffbff 	.word	0xfffffbff
 8000ed4:	ffffbfff 	.word	0xffffbfff
 8000ed8:	ffffdfff 	.word	0xffffdfff
 8000edc:	ffffefff 	.word	0xffffefff
 8000ee0:	fffff7ff 	.word	0xfffff7ff
 8000ee4:	fffffdff 	.word	0xfffffdff
 8000ee8:	fffffeff 	.word	0xfffffeff

08000eec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	000a      	movs	r2, r1
 8000ef6:	1cfb      	adds	r3, r7, #3
 8000ef8:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	23aa      	movs	r3, #170	; 0xaa
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	5cd3      	ldrb	r3, [r2, r3]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d101      	bne.n	8000f0a <HAL_PCD_SetAddress+0x1e>
 8000f06:	2302      	movs	r3, #2
 8000f08:	e017      	b.n	8000f3a <HAL_PCD_SetAddress+0x4e>
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	23aa      	movs	r3, #170	; 0xaa
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	2101      	movs	r1, #1
 8000f12:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	1cfa      	adds	r2, r7, #3
 8000f18:	2124      	movs	r1, #36	; 0x24
 8000f1a:	7812      	ldrb	r2, [r2, #0]
 8000f1c:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	1cfb      	adds	r3, r7, #3
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	0019      	movs	r1, r3
 8000f28:	0010      	movs	r0, r2
 8000f2a:	f004 fafb 	bl	8005524 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	23aa      	movs	r3, #170	; 0xaa
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	2100      	movs	r1, #0
 8000f36:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b002      	add	sp, #8
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000f42:	b590      	push	{r4, r7, lr}
 8000f44:	b085      	sub	sp, #20
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
 8000f4a:	000c      	movs	r4, r1
 8000f4c:	0010      	movs	r0, r2
 8000f4e:	0019      	movs	r1, r3
 8000f50:	1cfb      	adds	r3, r7, #3
 8000f52:	1c22      	adds	r2, r4, #0
 8000f54:	701a      	strb	r2, [r3, #0]
 8000f56:	003b      	movs	r3, r7
 8000f58:	1c02      	adds	r2, r0, #0
 8000f5a:	801a      	strh	r2, [r3, #0]
 8000f5c:	1cbb      	adds	r3, r7, #2
 8000f5e:	1c0a      	adds	r2, r1, #0
 8000f60:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000f62:	230b      	movs	r3, #11
 8000f64:	18fb      	adds	r3, r7, r3
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000f6a:	1cfb      	adds	r3, r7, #3
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	b25b      	sxtb	r3, r3
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	da0f      	bge.n	8000f94 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f74:	1cfb      	adds	r3, r7, #3
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2207      	movs	r2, #7
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	1c5a      	adds	r2, r3, #1
 8000f7e:	0013      	movs	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	189b      	adds	r3, r3, r2
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	18d3      	adds	r3, r2, r3
 8000f8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2201      	movs	r2, #1
 8000f90:	705a      	strb	r2, [r3, #1]
 8000f92:	e00f      	b.n	8000fb4 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f94:	1cfb      	adds	r3, r7, #3
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2207      	movs	r2, #7
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	0013      	movs	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	189b      	adds	r3, r3, r2
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	3369      	adds	r3, #105	; 0x69
 8000fa6:	33ff      	adds	r3, #255	; 0xff
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	18d3      	adds	r3, r2, r3
 8000fac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000fb4:	1cfb      	adds	r3, r7, #3
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2207      	movs	r2, #7
 8000fba:	4013      	ands	r3, r2
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000fc2:	003b      	movs	r3, r7
 8000fc4:	881a      	ldrh	r2, [r3, #0]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	1cba      	adds	r2, r7, #2
 8000fce:	7812      	ldrb	r2, [r2, #0]
 8000fd0:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000fd2:	1cbb      	adds	r3, r7, #2
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d102      	bne.n	8000fe0 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	23aa      	movs	r3, #170	; 0xaa
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	5cd3      	ldrb	r3, [r2, r3]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d101      	bne.n	8000ff0 <HAL_PCD_EP_Open+0xae>
 8000fec:	2302      	movs	r3, #2
 8000fee:	e013      	b.n	8001018 <HAL_PCD_EP_Open+0xd6>
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	23aa      	movs	r3, #170	; 0xaa
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	0011      	movs	r1, r2
 8001002:	0018      	movs	r0, r3
 8001004:	f002 faf2 	bl	80035ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	23aa      	movs	r3, #170	; 0xaa
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	2100      	movs	r1, #0
 8001010:	54d1      	strb	r1, [r2, r3]

  return ret;
 8001012:	230b      	movs	r3, #11
 8001014:	18fb      	adds	r3, r7, r3
 8001016:	781b      	ldrb	r3, [r3, #0]
}
 8001018:	0018      	movs	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	b005      	add	sp, #20
 800101e:	bd90      	pop	{r4, r7, pc}

08001020 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	000a      	movs	r2, r1
 800102a:	1cfb      	adds	r3, r7, #3
 800102c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800102e:	1cfb      	adds	r3, r7, #3
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b25b      	sxtb	r3, r3
 8001034:	2b00      	cmp	r3, #0
 8001036:	da0f      	bge.n	8001058 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001038:	1cfb      	adds	r3, r7, #3
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2207      	movs	r2, #7
 800103e:	4013      	ands	r3, r2
 8001040:	1c5a      	adds	r2, r3, #1
 8001042:	0013      	movs	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	189b      	adds	r3, r3, r2
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	18d3      	adds	r3, r2, r3
 800104e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2201      	movs	r2, #1
 8001054:	705a      	strb	r2, [r3, #1]
 8001056:	e00f      	b.n	8001078 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001058:	1cfb      	adds	r3, r7, #3
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2207      	movs	r2, #7
 800105e:	401a      	ands	r2, r3
 8001060:	0013      	movs	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	189b      	adds	r3, r3, r2
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	3369      	adds	r3, #105	; 0x69
 800106a:	33ff      	adds	r3, #255	; 0xff
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	18d3      	adds	r3, r2, r3
 8001070:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2200      	movs	r2, #0
 8001076:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001078:	1cfb      	adds	r3, r7, #3
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2207      	movs	r2, #7
 800107e:	4013      	ands	r3, r2
 8001080:	b2da      	uxtb	r2, r3
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	23aa      	movs	r3, #170	; 0xaa
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	5cd3      	ldrb	r3, [r2, r3]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d101      	bne.n	8001096 <HAL_PCD_EP_Close+0x76>
 8001092:	2302      	movs	r3, #2
 8001094:	e011      	b.n	80010ba <HAL_PCD_EP_Close+0x9a>
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	23aa      	movs	r3, #170	; 0xaa
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	2101      	movs	r1, #1
 800109e:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	0011      	movs	r1, r2
 80010a8:	0018      	movs	r0, r3
 80010aa:	f002 fe41 	bl	8003d30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	23aa      	movs	r3, #170	; 0xaa
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	2100      	movs	r1, #0
 80010b6:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	0018      	movs	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	b004      	add	sp, #16
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b086      	sub	sp, #24
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	60f8      	str	r0, [r7, #12]
 80010ca:	607a      	str	r2, [r7, #4]
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	200b      	movs	r0, #11
 80010d0:	183b      	adds	r3, r7, r0
 80010d2:	1c0a      	adds	r2, r1, #0
 80010d4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010d6:	0001      	movs	r1, r0
 80010d8:	187b      	adds	r3, r7, r1
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2207      	movs	r2, #7
 80010de:	401a      	ands	r2, r3
 80010e0:	0013      	movs	r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	189b      	adds	r3, r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	3369      	adds	r3, #105	; 0x69
 80010ea:	33ff      	adds	r3, #255	; 0xff
 80010ec:	68fa      	ldr	r2, [r7, #12]
 80010ee:	18d3      	adds	r3, r2, r3
 80010f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	2200      	movs	r2, #0
 8001102:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	2200      	movs	r2, #0
 8001108:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800110a:	187b      	adds	r3, r7, r1
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2207      	movs	r2, #7
 8001110:	4013      	ands	r3, r2
 8001112:	b2da      	uxtb	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	0011      	movs	r1, r2
 8001120:	0018      	movs	r0, r3
 8001122:	f002 ffc5 	bl	80040b0 <USB_EPStartXfer>

  return HAL_OK;
 8001126:	2300      	movs	r3, #0
}
 8001128:	0018      	movs	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	b006      	add	sp, #24
 800112e:	bd80      	pop	{r7, pc}

08001130 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	000a      	movs	r2, r1
 800113a:	1cfb      	adds	r3, r7, #3
 800113c:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800113e:	1cfb      	adds	r3, r7, #3
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2207      	movs	r2, #7
 8001144:	401a      	ands	r2, r3
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	23c2      	movs	r3, #194	; 0xc2
 800114a:	0059      	lsls	r1, r3, #1
 800114c:	0013      	movs	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	189b      	adds	r3, r3, r2
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	18c3      	adds	r3, r0, r3
 8001156:	185b      	adds	r3, r3, r1
 8001158:	681b      	ldr	r3, [r3, #0]
}
 800115a:	0018      	movs	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	b002      	add	sp, #8
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b086      	sub	sp, #24
 8001166:	af00      	add	r7, sp, #0
 8001168:	60f8      	str	r0, [r7, #12]
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	603b      	str	r3, [r7, #0]
 800116e:	200b      	movs	r0, #11
 8001170:	183b      	adds	r3, r7, r0
 8001172:	1c0a      	adds	r2, r1, #0
 8001174:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001176:	183b      	adds	r3, r7, r0
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2207      	movs	r2, #7
 800117c:	4013      	ands	r3, r2
 800117e:	1c5a      	adds	r2, r3, #1
 8001180:	0013      	movs	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	189b      	adds	r3, r3, r2
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	18d3      	adds	r3, r2, r3
 800118c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	683a      	ldr	r2, [r7, #0]
 8001198:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	2224      	movs	r2, #36	; 0x24
 800119e:	2101      	movs	r1, #1
 80011a0:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	2201      	movs	r2, #1
 80011b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80011b4:	183b      	adds	r3, r7, r0
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2207      	movs	r2, #7
 80011ba:	4013      	ands	r3, r2
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	0011      	movs	r1, r2
 80011ca:	0018      	movs	r0, r3
 80011cc:	f002 ff70 	bl	80040b0 <USB_EPStartXfer>

  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	0018      	movs	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	b006      	add	sp, #24
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b084      	sub	sp, #16
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
 80011e2:	000a      	movs	r2, r1
 80011e4:	1cfb      	adds	r3, r7, #3
 80011e6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80011e8:	1cfb      	adds	r3, r7, #3
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2207      	movs	r2, #7
 80011ee:	401a      	ands	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d901      	bls.n	80011fc <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e046      	b.n	800128a <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80011fc:	1cfb      	adds	r3, r7, #3
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	b25b      	sxtb	r3, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	da0f      	bge.n	8001226 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001206:	1cfb      	adds	r3, r7, #3
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2207      	movs	r2, #7
 800120c:	4013      	ands	r3, r2
 800120e:	1c5a      	adds	r2, r3, #1
 8001210:	0013      	movs	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	189b      	adds	r3, r3, r2
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	18d3      	adds	r3, r2, r3
 800121c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2201      	movs	r2, #1
 8001222:	705a      	strb	r2, [r3, #1]
 8001224:	e00d      	b.n	8001242 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001226:	1cfb      	adds	r3, r7, #3
 8001228:	781a      	ldrb	r2, [r3, #0]
 800122a:	0013      	movs	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	189b      	adds	r3, r3, r2
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	3369      	adds	r3, #105	; 0x69
 8001234:	33ff      	adds	r3, #255	; 0xff
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	18d3      	adds	r3, r2, r3
 800123a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2200      	movs	r2, #0
 8001240:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2201      	movs	r2, #1
 8001246:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001248:	1cfb      	adds	r3, r7, #3
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2207      	movs	r2, #7
 800124e:	4013      	ands	r3, r2
 8001250:	b2da      	uxtb	r2, r3
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	23aa      	movs	r3, #170	; 0xaa
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	5cd3      	ldrb	r3, [r2, r3]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d101      	bne.n	8001266 <HAL_PCD_EP_SetStall+0x8c>
 8001262:	2302      	movs	r3, #2
 8001264:	e011      	b.n	800128a <HAL_PCD_EP_SetStall+0xb0>
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	23aa      	movs	r3, #170	; 0xaa
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	2101      	movs	r1, #1
 800126e:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	68fa      	ldr	r2, [r7, #12]
 8001276:	0011      	movs	r1, r2
 8001278:	0018      	movs	r0, r3
 800127a:	f004 f851 	bl	8005320 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	23aa      	movs	r3, #170	; 0xaa
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	2100      	movs	r1, #0
 8001286:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	0018      	movs	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	b004      	add	sp, #16
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b084      	sub	sp, #16
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	000a      	movs	r2, r1
 800129c:	1cfb      	adds	r3, r7, #3
 800129e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80012a0:	1cfb      	adds	r3, r7, #3
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	220f      	movs	r2, #15
 80012a6:	401a      	ands	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d901      	bls.n	80012b4 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e048      	b.n	8001346 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80012b4:	1cfb      	adds	r3, r7, #3
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	b25b      	sxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	da0f      	bge.n	80012de <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012be:	1cfb      	adds	r3, r7, #3
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2207      	movs	r2, #7
 80012c4:	4013      	ands	r3, r2
 80012c6:	1c5a      	adds	r2, r3, #1
 80012c8:	0013      	movs	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	189b      	adds	r3, r3, r2
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	18d3      	adds	r3, r2, r3
 80012d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2201      	movs	r2, #1
 80012da:	705a      	strb	r2, [r3, #1]
 80012dc:	e00f      	b.n	80012fe <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012de:	1cfb      	adds	r3, r7, #3
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2207      	movs	r2, #7
 80012e4:	401a      	ands	r2, r3
 80012e6:	0013      	movs	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	189b      	adds	r3, r3, r2
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	3369      	adds	r3, #105	; 0x69
 80012f0:	33ff      	adds	r3, #255	; 0xff
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	18d3      	adds	r3, r2, r3
 80012f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2200      	movs	r2, #0
 80012fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2200      	movs	r2, #0
 8001302:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001304:	1cfb      	adds	r3, r7, #3
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2207      	movs	r2, #7
 800130a:	4013      	ands	r3, r2
 800130c:	b2da      	uxtb	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	23aa      	movs	r3, #170	; 0xaa
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	5cd3      	ldrb	r3, [r2, r3]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d101      	bne.n	8001322 <HAL_PCD_EP_ClrStall+0x90>
 800131e:	2302      	movs	r3, #2
 8001320:	e011      	b.n	8001346 <HAL_PCD_EP_ClrStall+0xb4>
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	23aa      	movs	r3, #170	; 0xaa
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	2101      	movs	r1, #1
 800132a:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	0011      	movs	r1, r2
 8001334:	0018      	movs	r0, r3
 8001336:	f004 f843 	bl	80053c0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	23aa      	movs	r3, #170	; 0xaa
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	2100      	movs	r1, #0
 8001342:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001344:	2300      	movs	r3, #0
}
 8001346:	0018      	movs	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	b004      	add	sp, #16
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001350:	b5b0      	push	{r4, r5, r7, lr}
 8001352:	b096      	sub	sp, #88	; 0x58
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001358:	f000 fbec 	bl	8001b34 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	204e      	movs	r0, #78	; 0x4e
 8001362:	183b      	adds	r3, r7, r0
 8001364:	2144      	movs	r1, #68	; 0x44
 8001366:	5a52      	ldrh	r2, [r2, r1]
 8001368:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800136a:	183b      	adds	r3, r7, r0
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	b2da      	uxtb	r2, r3
 8001370:	244d      	movs	r4, #77	; 0x4d
 8001372:	193b      	adds	r3, r7, r4
 8001374:	210f      	movs	r1, #15
 8001376:	400a      	ands	r2, r1
 8001378:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800137a:	193b      	adds	r3, r7, r4
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d000      	beq.n	8001384 <PCD_EP_ISR_Handler+0x34>
 8001382:	e18f      	b.n	80016a4 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001384:	183b      	adds	r3, r7, r0
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	2210      	movs	r2, #16
 800138a:	4013      	ands	r3, r2
 800138c:	d155      	bne.n	800143a <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	b29a      	uxth	r2, r3
 8001396:	200e      	movs	r0, #14
 8001398:	183b      	adds	r3, r7, r0
 800139a:	49bb      	ldr	r1, [pc, #748]	; (8001688 <PCD_EP_ISR_Handler+0x338>)
 800139c:	400a      	ands	r2, r1
 800139e:	801a      	strh	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	183a      	adds	r2, r7, r0
 80013a6:	8812      	ldrh	r2, [r2, #0]
 80013a8:	49b8      	ldr	r1, [pc, #736]	; (800168c <PCD_EP_ISR_Handler+0x33c>)
 80013aa:	430a      	orrs	r2, r1
 80013ac:	b292      	uxth	r2, r2
 80013ae:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3328      	adds	r3, #40	; 0x28
 80013b4:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2250      	movs	r2, #80	; 0x50
 80013bc:	5a9b      	ldrh	r3, [r3, r2]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	001a      	movs	r2, r3
 80013c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	18d2      	adds	r2, r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	18d3      	adds	r3, r2, r3
 80013d0:	4aaf      	ldr	r2, [pc, #700]	; (8001690 <PCD_EP_ISR_Handler+0x340>)
 80013d2:	4694      	mov	ip, r2
 80013d4:	4463      	add	r3, ip
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	059b      	lsls	r3, r3, #22
 80013da:	0d9a      	lsrs	r2, r3, #22
 80013dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013de:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80013e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013e2:	695a      	ldr	r2, [r3, #20]
 80013e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013e6:	69db      	ldr	r3, [r3, #28]
 80013e8:	18d2      	adds	r2, r2, r3
 80013ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013ec:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2100      	movs	r1, #0
 80013f2:	0018      	movs	r0, r3
 80013f4:	f006 f908 	bl	8007608 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2224      	movs	r2, #36	; 0x24
 80013fc:	5c9b      	ldrb	r3, [r3, r2]
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b00      	cmp	r3, #0
 8001402:	d101      	bne.n	8001408 <PCD_EP_ISR_Handler+0xb8>
 8001404:	f000 fb96 	bl	8001b34 <PCD_EP_ISR_Handler+0x7e4>
 8001408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <PCD_EP_ISR_Handler+0xc4>
 8001410:	f000 fb90 	bl	8001b34 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2224      	movs	r2, #36	; 0x24
 8001418:	5c9b      	ldrb	r3, [r3, r2]
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2280      	movs	r2, #128	; 0x80
 800141e:	4252      	negs	r2, r2
 8001420:	4313      	orrs	r3, r2
 8001422:	b2da      	uxtb	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	b291      	uxth	r1, r2
 800142a:	224c      	movs	r2, #76	; 0x4c
 800142c:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2224      	movs	r2, #36	; 0x24
 8001432:	2100      	movs	r1, #0
 8001434:	5499      	strb	r1, [r3, r2]
 8001436:	f000 fb7d 	bl	8001b34 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3369      	adds	r3, #105	; 0x69
 800143e:	33ff      	adds	r3, #255	; 0xff
 8001440:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	214a      	movs	r1, #74	; 0x4a
 8001448:	187b      	adds	r3, r7, r1
 800144a:	8812      	ldrh	r2, [r2, #0]
 800144c:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800144e:	187b      	adds	r3, r7, r1
 8001450:	881a      	ldrh	r2, [r3, #0]
 8001452:	2380      	movs	r3, #128	; 0x80
 8001454:	011b      	lsls	r3, r3, #4
 8001456:	4013      	ands	r3, r2
 8001458:	d037      	beq.n	80014ca <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2250      	movs	r2, #80	; 0x50
 8001460:	5a9b      	ldrh	r3, [r3, r2]
 8001462:	b29b      	uxth	r3, r3
 8001464:	001a      	movs	r2, r3
 8001466:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	18d2      	adds	r2, r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	18d3      	adds	r3, r2, r3
 8001474:	4a87      	ldr	r2, [pc, #540]	; (8001694 <PCD_EP_ISR_Handler+0x344>)
 8001476:	4694      	mov	ip, r2
 8001478:	4463      	add	r3, ip
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	059b      	lsls	r3, r3, #22
 800147e:	0d9a      	lsrs	r2, r3, #22
 8001480:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001482:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6818      	ldr	r0, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	22ac      	movs	r2, #172	; 0xac
 800148c:	0092      	lsls	r2, r2, #2
 800148e:	1899      	adds	r1, r3, r2
 8001490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001492:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001494:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001496:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001498:	b29b      	uxth	r3, r3
 800149a:	f004 f8c4 	bl	8005626 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	2010      	movs	r0, #16
 80014a8:	183b      	adds	r3, r7, r0
 80014aa:	497b      	ldr	r1, [pc, #492]	; (8001698 <PCD_EP_ISR_Handler+0x348>)
 80014ac:	400a      	ands	r2, r1
 80014ae:	801a      	strh	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	183a      	adds	r2, r7, r0
 80014b6:	8812      	ldrh	r2, [r2, #0]
 80014b8:	2180      	movs	r1, #128	; 0x80
 80014ba:	430a      	orrs	r2, r1
 80014bc:	b292      	uxth	r2, r2
 80014be:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	0018      	movs	r0, r3
 80014c4:	f006 f86a 	bl	800759c <HAL_PCD_SetupStageCallback>
 80014c8:	e334      	b.n	8001b34 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80014ca:	234a      	movs	r3, #74	; 0x4a
 80014cc:	18fb      	adds	r3, r7, r3
 80014ce:	2200      	movs	r2, #0
 80014d0:	5e9b      	ldrsh	r3, [r3, r2]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	db00      	blt.n	80014d8 <PCD_EP_ISR_Handler+0x188>
 80014d6:	e32d      	b.n	8001b34 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	b29a      	uxth	r2, r3
 80014e0:	201e      	movs	r0, #30
 80014e2:	183b      	adds	r3, r7, r0
 80014e4:	496c      	ldr	r1, [pc, #432]	; (8001698 <PCD_EP_ISR_Handler+0x348>)
 80014e6:	400a      	ands	r2, r1
 80014e8:	801a      	strh	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	183a      	adds	r2, r7, r0
 80014f0:	8812      	ldrh	r2, [r2, #0]
 80014f2:	2180      	movs	r1, #128	; 0x80
 80014f4:	430a      	orrs	r2, r1
 80014f6:	b292      	uxth	r2, r2
 80014f8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2250      	movs	r2, #80	; 0x50
 8001500:	5a9b      	ldrh	r3, [r3, r2]
 8001502:	b29b      	uxth	r3, r3
 8001504:	001a      	movs	r2, r3
 8001506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	18d2      	adds	r2, r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	18d3      	adds	r3, r2, r3
 8001514:	4a5f      	ldr	r2, [pc, #380]	; (8001694 <PCD_EP_ISR_Handler+0x344>)
 8001516:	4694      	mov	ip, r2
 8001518:	4463      	add	r3, ip
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	059b      	lsls	r3, r3, #22
 800151e:	0d9a      	lsrs	r2, r3, #22
 8001520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001522:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001526:	69db      	ldr	r3, [r3, #28]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d01a      	beq.n	8001562 <PCD_EP_ISR_Handler+0x212>
 800152c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d016      	beq.n	8001562 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6818      	ldr	r0, [r3, #0]
 8001538:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800153a:	6959      	ldr	r1, [r3, #20]
 800153c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800153e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001540:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001542:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001544:	b29b      	uxth	r3, r3
 8001546:	f004 f86e 	bl	8005626 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800154a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800154c:	695a      	ldr	r2, [r3, #20]
 800154e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	18d2      	adds	r2, r2, r3
 8001554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001556:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2100      	movs	r1, #0
 800155c:	0018      	movs	r0, r3
 800155e:	f006 f832 	bl	80075c6 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	214a      	movs	r1, #74	; 0x4a
 8001568:	187b      	adds	r3, r7, r1
 800156a:	8812      	ldrh	r2, [r2, #0]
 800156c:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800156e:	187b      	adds	r3, r7, r1
 8001570:	881a      	ldrh	r2, [r3, #0]
 8001572:	2380      	movs	r3, #128	; 0x80
 8001574:	011b      	lsls	r3, r3, #4
 8001576:	4013      	ands	r3, r2
 8001578:	d000      	beq.n	800157c <PCD_EP_ISR_Handler+0x22c>
 800157a:	e2db      	b.n	8001b34 <PCD_EP_ISR_Handler+0x7e4>
 800157c:	187b      	adds	r3, r7, r1
 800157e:	881a      	ldrh	r2, [r3, #0]
 8001580:	23c0      	movs	r3, #192	; 0xc0
 8001582:	019b      	lsls	r3, r3, #6
 8001584:	401a      	ands	r2, r3
 8001586:	23c0      	movs	r3, #192	; 0xc0
 8001588:	019b      	lsls	r3, r3, #6
 800158a:	429a      	cmp	r2, r3
 800158c:	d100      	bne.n	8001590 <PCD_EP_ISR_Handler+0x240>
 800158e:	e2d1      	b.n	8001b34 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	61bb      	str	r3, [r7, #24]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2250      	movs	r2, #80	; 0x50
 800159c:	5a9b      	ldrh	r3, [r3, r2]
 800159e:	b29b      	uxth	r3, r3
 80015a0:	001a      	movs	r2, r3
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	189b      	adds	r3, r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	4a3a      	ldr	r2, [pc, #232]	; (8001694 <PCD_EP_ISR_Handler+0x344>)
 80015ac:	4694      	mov	ip, r2
 80015ae:	4463      	add	r3, ip
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	059b      	lsls	r3, r3, #22
 80015ba:	0d9b      	lsrs	r3, r3, #22
 80015bc:	b29a      	uxth	r2, r3
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	801a      	strh	r2, [r3, #0]
 80015c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015c4:	691b      	ldr	r3, [r3, #16]
 80015c6:	2b3e      	cmp	r3, #62	; 0x3e
 80015c8:	d91a      	bls.n	8001600 <PCD_EP_ISR_Handler+0x2b0>
 80015ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	095b      	lsrs	r3, r3, #5
 80015d0:	647b      	str	r3, [r7, #68]	; 0x44
 80015d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	221f      	movs	r2, #31
 80015d8:	4013      	ands	r3, r2
 80015da:	d102      	bne.n	80015e2 <PCD_EP_ISR_Handler+0x292>
 80015dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015de:	3b01      	subs	r3, #1
 80015e0:	647b      	str	r3, [r7, #68]	; 0x44
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	029b      	lsls	r3, r3, #10
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	4313      	orrs	r3, r2
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	4a25      	ldr	r2, [pc, #148]	; (800168c <PCD_EP_ISR_Handler+0x33c>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	801a      	strh	r2, [r3, #0]
 80015fe:	e023      	b.n	8001648 <PCD_EP_ISR_Handler+0x2f8>
 8001600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d108      	bne.n	800161a <PCD_EP_ISR_Handler+0x2ca>
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	b29b      	uxth	r3, r3
 800160e:	4a1f      	ldr	r2, [pc, #124]	; (800168c <PCD_EP_ISR_Handler+0x33c>)
 8001610:	4313      	orrs	r3, r2
 8001612:	b29a      	uxth	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	801a      	strh	r2, [r3, #0]
 8001618:	e016      	b.n	8001648 <PCD_EP_ISR_Handler+0x2f8>
 800161a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	085b      	lsrs	r3, r3, #1
 8001620:	647b      	str	r3, [r7, #68]	; 0x44
 8001622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	2201      	movs	r2, #1
 8001628:	4013      	ands	r3, r2
 800162a:	d002      	beq.n	8001632 <PCD_EP_ISR_Handler+0x2e2>
 800162c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800162e:	3301      	adds	r3, #1
 8001630:	647b      	str	r3, [r7, #68]	; 0x44
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	b29a      	uxth	r2, r3
 8001638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800163a:	b29b      	uxth	r3, r3
 800163c:	029b      	lsls	r3, r3, #10
 800163e:	b29b      	uxth	r3, r3
 8001640:	4313      	orrs	r3, r2
 8001642:	b29a      	uxth	r2, r3
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	b29a      	uxth	r2, r3
 8001650:	2012      	movs	r0, #18
 8001652:	183b      	adds	r3, r7, r0
 8001654:	4911      	ldr	r1, [pc, #68]	; (800169c <PCD_EP_ISR_Handler+0x34c>)
 8001656:	400a      	ands	r2, r1
 8001658:	801a      	strh	r2, [r3, #0]
 800165a:	183b      	adds	r3, r7, r0
 800165c:	183a      	adds	r2, r7, r0
 800165e:	8812      	ldrh	r2, [r2, #0]
 8001660:	2180      	movs	r1, #128	; 0x80
 8001662:	0149      	lsls	r1, r1, #5
 8001664:	404a      	eors	r2, r1
 8001666:	801a      	strh	r2, [r3, #0]
 8001668:	183b      	adds	r3, r7, r0
 800166a:	183a      	adds	r2, r7, r0
 800166c:	8812      	ldrh	r2, [r2, #0]
 800166e:	2180      	movs	r1, #128	; 0x80
 8001670:	0189      	lsls	r1, r1, #6
 8001672:	404a      	eors	r2, r1
 8001674:	801a      	strh	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	183a      	adds	r2, r7, r0
 800167c:	8812      	ldrh	r2, [r2, #0]
 800167e:	4908      	ldr	r1, [pc, #32]	; (80016a0 <PCD_EP_ISR_Handler+0x350>)
 8001680:	430a      	orrs	r2, r1
 8001682:	b292      	uxth	r2, r2
 8001684:	801a      	strh	r2, [r3, #0]
 8001686:	e255      	b.n	8001b34 <PCD_EP_ISR_Handler+0x7e4>
 8001688:	ffff8f0f 	.word	0xffff8f0f
 800168c:	ffff8000 	.word	0xffff8000
 8001690:	00000402 	.word	0x00000402
 8001694:	00000406 	.word	0x00000406
 8001698:	00000f8f 	.word	0x00000f8f
 800169c:	ffffbf8f 	.word	0xffffbf8f
 80016a0:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	001a      	movs	r2, r3
 80016aa:	204d      	movs	r0, #77	; 0x4d
 80016ac:	183b      	adds	r3, r7, r0
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	18d2      	adds	r2, r2, r3
 80016b4:	214a      	movs	r1, #74	; 0x4a
 80016b6:	187b      	adds	r3, r7, r1
 80016b8:	8812      	ldrh	r2, [r2, #0]
 80016ba:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80016bc:	187b      	adds	r3, r7, r1
 80016be:	2200      	movs	r2, #0
 80016c0:	5e9b      	ldrsh	r3, [r3, r2]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	db00      	blt.n	80016c8 <PCD_EP_ISR_Handler+0x378>
 80016c6:	e0fa      	b.n	80018be <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	001a      	movs	r2, r3
 80016ce:	183b      	adds	r3, r7, r0
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	18d3      	adds	r3, r2, r3
 80016d6:	881b      	ldrh	r3, [r3, #0]
 80016d8:	b29a      	uxth	r2, r3
 80016da:	2448      	movs	r4, #72	; 0x48
 80016dc:	193b      	adds	r3, r7, r4
 80016de:	49d1      	ldr	r1, [pc, #836]	; (8001a24 <PCD_EP_ISR_Handler+0x6d4>)
 80016e0:	400a      	ands	r2, r1
 80016e2:	801a      	strh	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	001a      	movs	r2, r3
 80016ea:	183b      	adds	r3, r7, r0
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	18d3      	adds	r3, r2, r3
 80016f2:	193a      	adds	r2, r7, r4
 80016f4:	8812      	ldrh	r2, [r2, #0]
 80016f6:	2180      	movs	r1, #128	; 0x80
 80016f8:	430a      	orrs	r2, r1
 80016fa:	b292      	uxth	r2, r2
 80016fc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80016fe:	183b      	adds	r3, r7, r0
 8001700:	781a      	ldrb	r2, [r3, #0]
 8001702:	0013      	movs	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	189b      	adds	r3, r3, r2
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	3369      	adds	r3, #105	; 0x69
 800170c:	33ff      	adds	r3, #255	; 0xff
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	18d3      	adds	r3, r2, r3
 8001712:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001714:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001716:	7b1b      	ldrb	r3, [r3, #12]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d125      	bne.n	8001768 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2250      	movs	r2, #80	; 0x50
 8001722:	5a9b      	ldrh	r3, [r3, r2]
 8001724:	b29b      	uxth	r3, r3
 8001726:	001a      	movs	r2, r3
 8001728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	18d2      	adds	r2, r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	18d3      	adds	r3, r2, r3
 8001736:	4abc      	ldr	r2, [pc, #752]	; (8001a28 <PCD_EP_ISR_Handler+0x6d8>)
 8001738:	4694      	mov	ip, r2
 800173a:	4463      	add	r3, ip
 800173c:	881a      	ldrh	r2, [r3, #0]
 800173e:	2450      	movs	r4, #80	; 0x50
 8001740:	193b      	adds	r3, r7, r4
 8001742:	0592      	lsls	r2, r2, #22
 8001744:	0d92      	lsrs	r2, r2, #22
 8001746:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8001748:	193b      	adds	r3, r7, r4
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d100      	bne.n	8001752 <PCD_EP_ISR_Handler+0x402>
 8001750:	e08d      	b.n	800186e <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6818      	ldr	r0, [r3, #0]
 8001756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001758:	6959      	ldr	r1, [r3, #20]
 800175a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800175c:	88da      	ldrh	r2, [r3, #6]
 800175e:	193b      	adds	r3, r7, r4
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	f003 ff60 	bl	8005626 <USB_ReadPMA>
 8001766:	e082      	b.n	800186e <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001768:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800176a:	78db      	ldrb	r3, [r3, #3]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d10c      	bne.n	800178a <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001770:	2350      	movs	r3, #80	; 0x50
 8001772:	18fc      	adds	r4, r7, r3
 8001774:	234a      	movs	r3, #74	; 0x4a
 8001776:	18fb      	adds	r3, r7, r3
 8001778:	881a      	ldrh	r2, [r3, #0]
 800177a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	0018      	movs	r0, r3
 8001780:	f000 f9ec 	bl	8001b5c <HAL_PCD_EP_DB_Receive>
 8001784:	0003      	movs	r3, r0
 8001786:	8023      	strh	r3, [r4, #0]
 8001788:	e071      	b.n	800186e <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	001a      	movs	r2, r3
 8001790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	18d3      	adds	r3, r2, r3
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	b29a      	uxth	r2, r3
 800179c:	2052      	movs	r0, #82	; 0x52
 800179e:	183b      	adds	r3, r7, r0
 80017a0:	49a2      	ldr	r1, [pc, #648]	; (8001a2c <PCD_EP_ISR_Handler+0x6dc>)
 80017a2:	400a      	ands	r2, r1
 80017a4:	801a      	strh	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	001a      	movs	r2, r3
 80017ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	18d3      	adds	r3, r2, r3
 80017b4:	183a      	adds	r2, r7, r0
 80017b6:	8812      	ldrh	r2, [r2, #0]
 80017b8:	499d      	ldr	r1, [pc, #628]	; (8001a30 <PCD_EP_ISR_Handler+0x6e0>)
 80017ba:	430a      	orrs	r2, r1
 80017bc:	b292      	uxth	r2, r2
 80017be:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	001a      	movs	r2, r3
 80017c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	18d3      	adds	r3, r2, r3
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	001a      	movs	r2, r3
 80017d4:	2380      	movs	r3, #128	; 0x80
 80017d6:	01db      	lsls	r3, r3, #7
 80017d8:	4013      	ands	r3, r2
 80017da:	d024      	beq.n	8001826 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2250      	movs	r2, #80	; 0x50
 80017e2:	5a9b      	ldrh	r3, [r3, r2]
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	001a      	movs	r2, r3
 80017e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	18d2      	adds	r2, r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	18d3      	adds	r3, r2, r3
 80017f6:	4a8f      	ldr	r2, [pc, #572]	; (8001a34 <PCD_EP_ISR_Handler+0x6e4>)
 80017f8:	4694      	mov	ip, r2
 80017fa:	4463      	add	r3, ip
 80017fc:	881a      	ldrh	r2, [r3, #0]
 80017fe:	2450      	movs	r4, #80	; 0x50
 8001800:	193b      	adds	r3, r7, r4
 8001802:	0592      	lsls	r2, r2, #22
 8001804:	0d92      	lsrs	r2, r2, #22
 8001806:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001808:	193b      	adds	r3, r7, r4
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d02e      	beq.n	800186e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6818      	ldr	r0, [r3, #0]
 8001814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001816:	6959      	ldr	r1, [r3, #20]
 8001818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800181a:	891a      	ldrh	r2, [r3, #8]
 800181c:	193b      	adds	r3, r7, r4
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	f003 ff01 	bl	8005626 <USB_ReadPMA>
 8001824:	e023      	b.n	800186e <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2250      	movs	r2, #80	; 0x50
 800182c:	5a9b      	ldrh	r3, [r3, r2]
 800182e:	b29b      	uxth	r3, r3
 8001830:	001a      	movs	r2, r3
 8001832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	18d2      	adds	r2, r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	18d3      	adds	r3, r2, r3
 8001840:	4a79      	ldr	r2, [pc, #484]	; (8001a28 <PCD_EP_ISR_Handler+0x6d8>)
 8001842:	4694      	mov	ip, r2
 8001844:	4463      	add	r3, ip
 8001846:	881a      	ldrh	r2, [r3, #0]
 8001848:	2450      	movs	r4, #80	; 0x50
 800184a:	193b      	adds	r3, r7, r4
 800184c:	0592      	lsls	r2, r2, #22
 800184e:	0d92      	lsrs	r2, r2, #22
 8001850:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001852:	193b      	adds	r3, r7, r4
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d009      	beq.n	800186e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6818      	ldr	r0, [r3, #0]
 800185e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001860:	6959      	ldr	r1, [r3, #20]
 8001862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001864:	895a      	ldrh	r2, [r3, #10]
 8001866:	193b      	adds	r3, r7, r4
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	f003 fedc 	bl	8005626 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800186e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001870:	69da      	ldr	r2, [r3, #28]
 8001872:	2150      	movs	r1, #80	; 0x50
 8001874:	187b      	adds	r3, r7, r1
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	18d2      	adds	r2, r2, r3
 800187a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800187c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800187e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001880:	695a      	ldr	r2, [r3, #20]
 8001882:	187b      	adds	r3, r7, r1
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	18d2      	adds	r2, r2, r3
 8001888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800188a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800188c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d005      	beq.n	80018a0 <PCD_EP_ISR_Handler+0x550>
 8001894:	187b      	adds	r3, r7, r1
 8001896:	881a      	ldrh	r2, [r3, #0]
 8001898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	429a      	cmp	r2, r3
 800189e:	d207      	bcs.n	80018b0 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80018a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018a2:	781a      	ldrb	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	0011      	movs	r1, r2
 80018a8:	0018      	movs	r0, r3
 80018aa:	f005 fe8c 	bl	80075c6 <HAL_PCD_DataOutStageCallback>
 80018ae:	e006      	b.n	80018be <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80018b6:	0011      	movs	r1, r2
 80018b8:	0018      	movs	r0, r3
 80018ba:	f002 fbf9 	bl	80040b0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80018be:	244a      	movs	r4, #74	; 0x4a
 80018c0:	193b      	adds	r3, r7, r4
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	2280      	movs	r2, #128	; 0x80
 80018c6:	4013      	ands	r3, r2
 80018c8:	d100      	bne.n	80018cc <PCD_EP_ISR_Handler+0x57c>
 80018ca:	e133      	b.n	8001b34 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80018cc:	204d      	movs	r0, #77	; 0x4d
 80018ce:	183b      	adds	r3, r7, r0
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	0013      	movs	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	189b      	adds	r3, r3, r2
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	18d3      	adds	r3, r2, r3
 80018e0:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	001a      	movs	r2, r3
 80018e8:	183b      	adds	r3, r7, r0
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	18d3      	adds	r3, r2, r3
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	2542      	movs	r5, #66	; 0x42
 80018f6:	197b      	adds	r3, r7, r5
 80018f8:	494f      	ldr	r1, [pc, #316]	; (8001a38 <PCD_EP_ISR_Handler+0x6e8>)
 80018fa:	400a      	ands	r2, r1
 80018fc:	801a      	strh	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	001a      	movs	r2, r3
 8001904:	183b      	adds	r3, r7, r0
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	18d3      	adds	r3, r2, r3
 800190c:	197a      	adds	r2, r7, r5
 800190e:	8812      	ldrh	r2, [r2, #0]
 8001910:	494a      	ldr	r1, [pc, #296]	; (8001a3c <PCD_EP_ISR_Handler+0x6ec>)
 8001912:	430a      	orrs	r2, r1
 8001914:	b292      	uxth	r2, r2
 8001916:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800191a:	78db      	ldrb	r3, [r3, #3]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d000      	beq.n	8001922 <PCD_EP_ISR_Handler+0x5d2>
 8001920:	e0af      	b.n	8001a82 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8001922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800192a:	7b1b      	ldrb	r3, [r3, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d100      	bne.n	8001932 <PCD_EP_ISR_Handler+0x5e2>
 8001930:	e09f      	b.n	8001a72 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001932:	193b      	adds	r3, r7, r4
 8001934:	881b      	ldrh	r3, [r3, #0]
 8001936:	2240      	movs	r2, #64	; 0x40
 8001938:	4013      	ands	r3, r2
 800193a:	d046      	beq.n	80019ca <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800193c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800193e:	785b      	ldrb	r3, [r3, #1]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d125      	bne.n	8001990 <PCD_EP_ISR_Handler+0x640>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2250      	movs	r2, #80	; 0x50
 8001950:	5a9b      	ldrh	r3, [r3, r2]
 8001952:	b29b      	uxth	r3, r3
 8001954:	001a      	movs	r2, r3
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	189b      	adds	r3, r3, r2
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
 800195c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	00da      	lsls	r2, r3, #3
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	18d3      	adds	r3, r2, r3
 8001966:	4a33      	ldr	r2, [pc, #204]	; (8001a34 <PCD_EP_ISR_Handler+0x6e4>)
 8001968:	4694      	mov	ip, r2
 800196a:	4463      	add	r3, ip
 800196c:	623b      	str	r3, [r7, #32]
 800196e:	6a3b      	ldr	r3, [r7, #32]
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	b29b      	uxth	r3, r3
 8001974:	059b      	lsls	r3, r3, #22
 8001976:	0d9b      	lsrs	r3, r3, #22
 8001978:	b29a      	uxth	r2, r3
 800197a:	6a3b      	ldr	r3, [r7, #32]
 800197c:	801a      	strh	r2, [r3, #0]
 800197e:	6a3b      	ldr	r3, [r7, #32]
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	b29b      	uxth	r3, r3
 8001984:	4a2d      	ldr	r2, [pc, #180]	; (8001a3c <PCD_EP_ISR_Handler+0x6ec>)
 8001986:	4313      	orrs	r3, r2
 8001988:	b29a      	uxth	r2, r3
 800198a:	6a3b      	ldr	r3, [r7, #32]
 800198c:	801a      	strh	r2, [r3, #0]
 800198e:	e070      	b.n	8001a72 <PCD_EP_ISR_Handler+0x722>
 8001990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001992:	785b      	ldrb	r3, [r3, #1]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d16c      	bne.n	8001a72 <PCD_EP_ISR_Handler+0x722>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2250      	movs	r2, #80	; 0x50
 80019a4:	5a9b      	ldrh	r3, [r3, r2]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	001a      	movs	r2, r3
 80019aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ac:	189b      	adds	r3, r3, r2
 80019ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	00da      	lsls	r2, r3, #3
 80019b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b8:	18d3      	adds	r3, r2, r3
 80019ba:	4a1e      	ldr	r2, [pc, #120]	; (8001a34 <PCD_EP_ISR_Handler+0x6e4>)
 80019bc:	4694      	mov	ip, r2
 80019be:	4463      	add	r3, ip
 80019c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80019c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c4:	2200      	movs	r2, #0
 80019c6:	801a      	strh	r2, [r3, #0]
 80019c8:	e053      	b.n	8001a72 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019d2:	785b      	ldrb	r3, [r3, #1]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d133      	bne.n	8001a40 <PCD_EP_ISR_Handler+0x6f0>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	637b      	str	r3, [r7, #52]	; 0x34
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2250      	movs	r2, #80	; 0x50
 80019e4:	5a9b      	ldrh	r3, [r3, r2]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	001a      	movs	r2, r3
 80019ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ec:	189b      	adds	r3, r3, r2
 80019ee:	637b      	str	r3, [r7, #52]	; 0x34
 80019f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	00da      	lsls	r2, r3, #3
 80019f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f8:	18d3      	adds	r3, r2, r3
 80019fa:	4a0b      	ldr	r2, [pc, #44]	; (8001a28 <PCD_EP_ISR_Handler+0x6d8>)
 80019fc:	4694      	mov	ip, r2
 80019fe:	4463      	add	r3, ip
 8001a00:	633b      	str	r3, [r7, #48]	; 0x30
 8001a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	059b      	lsls	r3, r3, #22
 8001a0a:	0d9b      	lsrs	r3, r3, #22
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a10:	801a      	strh	r2, [r3, #0]
 8001a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a14:	881b      	ldrh	r3, [r3, #0]
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	4a08      	ldr	r2, [pc, #32]	; (8001a3c <PCD_EP_ISR_Handler+0x6ec>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a20:	801a      	strh	r2, [r3, #0]
 8001a22:	e026      	b.n	8001a72 <PCD_EP_ISR_Handler+0x722>
 8001a24:	00000f8f 	.word	0x00000f8f
 8001a28:	00000406 	.word	0x00000406
 8001a2c:	ffff8f8f 	.word	0xffff8f8f
 8001a30:	ffff80c0 	.word	0xffff80c0
 8001a34:	00000402 	.word	0x00000402
 8001a38:	ffff8f0f 	.word	0xffff8f0f
 8001a3c:	ffff8000 	.word	0xffff8000
 8001a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a42:	785b      	ldrb	r3, [r3, #1]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d114      	bne.n	8001a72 <PCD_EP_ISR_Handler+0x722>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2250      	movs	r2, #80	; 0x50
 8001a4e:	5a9b      	ldrh	r3, [r3, r2]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	001a      	movs	r2, r3
 8001a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a56:	189b      	adds	r3, r3, r2
 8001a58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	00da      	lsls	r2, r3, #3
 8001a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a62:	18d3      	adds	r3, r2, r3
 8001a64:	4a3b      	ldr	r2, [pc, #236]	; (8001b54 <PCD_EP_ISR_Handler+0x804>)
 8001a66:	4694      	mov	ip, r2
 8001a68:	4463      	add	r3, ip
 8001a6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a6e:	2200      	movs	r2, #0
 8001a70:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a74:	781a      	ldrb	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	0011      	movs	r1, r2
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f005 fdc4 	bl	8007608 <HAL_PCD_DataInStageCallback>
 8001a80:	e058      	b.n	8001b34 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001a82:	234a      	movs	r3, #74	; 0x4a
 8001a84:	18fb      	adds	r3, r7, r3
 8001a86:	881a      	ldrh	r2, [r3, #0]
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d149      	bne.n	8001b24 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2250      	movs	r2, #80	; 0x50
 8001a96:	5a9b      	ldrh	r3, [r3, r2]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	001a      	movs	r2, r3
 8001a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	18d2      	adds	r2, r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	18d3      	adds	r3, r2, r3
 8001aaa:	4a2b      	ldr	r2, [pc, #172]	; (8001b58 <PCD_EP_ISR_Handler+0x808>)
 8001aac:	4694      	mov	ip, r2
 8001aae:	4463      	add	r3, ip
 8001ab0:	881a      	ldrh	r2, [r3, #0]
 8001ab2:	2140      	movs	r1, #64	; 0x40
 8001ab4:	187b      	adds	r3, r7, r1
 8001ab6:	0592      	lsls	r2, r2, #22
 8001ab8:	0d92      	lsrs	r2, r2, #22
 8001aba:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8001abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001abe:	699a      	ldr	r2, [r3, #24]
 8001ac0:	187b      	adds	r3, r7, r1
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d907      	bls.n	8001ad8 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8001ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aca:	699a      	ldr	r2, [r3, #24]
 8001acc:	187b      	adds	r3, r7, r1
 8001ace:	881b      	ldrh	r3, [r3, #0]
 8001ad0:	1ad2      	subs	r2, r2, r3
 8001ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ad4:	619a      	str	r2, [r3, #24]
 8001ad6:	e002      	b.n	8001ade <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8001ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ada:	2200      	movs	r2, #0
 8001adc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001ade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d107      	bne.n	8001af6 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ae8:	781a      	ldrb	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	0011      	movs	r1, r2
 8001aee:	0018      	movs	r0, r3
 8001af0:	f005 fd8a 	bl	8007608 <HAL_PCD_DataInStageCallback>
 8001af4:	e01e      	b.n	8001b34 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001af6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001af8:	695a      	ldr	r2, [r3, #20]
 8001afa:	2140      	movs	r1, #64	; 0x40
 8001afc:	187b      	adds	r3, r7, r1
 8001afe:	881b      	ldrh	r3, [r3, #0]
 8001b00:	18d2      	adds	r2, r2, r3
 8001b02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b04:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b08:	69da      	ldr	r2, [r3, #28]
 8001b0a:	187b      	adds	r3, r7, r1
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	18d2      	adds	r2, r2, r3
 8001b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b12:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b1a:	0011      	movs	r1, r2
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	f002 fac7 	bl	80040b0 <USB_EPStartXfer>
 8001b22:	e007      	b.n	8001b34 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001b24:	234a      	movs	r3, #74	; 0x4a
 8001b26:	18fb      	adds	r3, r7, r3
 8001b28:	881a      	ldrh	r2, [r3, #0]
 8001b2a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	0018      	movs	r0, r3
 8001b30:	f000 f930 	bl	8001d94 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2244      	movs	r2, #68	; 0x44
 8001b3a:	5a9b      	ldrh	r3, [r3, r2]
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	b21b      	sxth	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	da01      	bge.n	8001b48 <PCD_EP_ISR_Handler+0x7f8>
 8001b44:	f7ff fc0a 	bl	800135c <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	b016      	add	sp, #88	; 0x58
 8001b50:	bdb0      	pop	{r4, r5, r7, pc}
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	00000406 	.word	0x00000406
 8001b58:	00000402 	.word	0x00000402

08001b5c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001b5c:	b590      	push	{r4, r7, lr}
 8001b5e:	b089      	sub	sp, #36	; 0x24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	1dbb      	adds	r3, r7, #6
 8001b68:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b6a:	1dbb      	adds	r3, r7, #6
 8001b6c:	881a      	ldrh	r2, [r3, #0]
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	01db      	lsls	r3, r3, #7
 8001b72:	4013      	ands	r3, r2
 8001b74:	d100      	bne.n	8001b78 <HAL_PCD_EP_DB_Receive+0x1c>
 8001b76:	e07d      	b.n	8001c74 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2250      	movs	r2, #80	; 0x50
 8001b7e:	5a9b      	ldrh	r3, [r3, r2]
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	001a      	movs	r2, r3
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	18d2      	adds	r2, r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	18d3      	adds	r3, r2, r3
 8001b92:	4a7a      	ldr	r2, [pc, #488]	; (8001d7c <HAL_PCD_EP_DB_Receive+0x220>)
 8001b94:	4694      	mov	ip, r2
 8001b96:	4463      	add	r3, ip
 8001b98:	881a      	ldrh	r2, [r3, #0]
 8001b9a:	211a      	movs	r1, #26
 8001b9c:	187b      	adds	r3, r7, r1
 8001b9e:	0592      	lsls	r2, r2, #22
 8001ba0:	0d92      	lsrs	r2, r2, #22
 8001ba2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	699a      	ldr	r2, [r3, #24]
 8001ba8:	187b      	adds	r3, r7, r1
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d307      	bcc.n	8001bc0 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	699a      	ldr	r2, [r3, #24]
 8001bb4:	187b      	adds	r3, r7, r1
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	1ad2      	subs	r2, r2, r3
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	619a      	str	r2, [r3, #24]
 8001bbe:	e002      	b.n	8001bc6 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d121      	bne.n	8001c12 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	001a      	movs	r2, r3
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	18d3      	adds	r3, r2, r3
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	2018      	movs	r0, #24
 8001be2:	183b      	adds	r3, r7, r0
 8001be4:	4966      	ldr	r1, [pc, #408]	; (8001d80 <HAL_PCD_EP_DB_Receive+0x224>)
 8001be6:	400a      	ands	r2, r1
 8001be8:	801a      	strh	r2, [r3, #0]
 8001bea:	183b      	adds	r3, r7, r0
 8001bec:	183a      	adds	r2, r7, r0
 8001bee:	8812      	ldrh	r2, [r2, #0]
 8001bf0:	2180      	movs	r1, #128	; 0x80
 8001bf2:	0189      	lsls	r1, r1, #6
 8001bf4:	404a      	eors	r2, r1
 8001bf6:	801a      	strh	r2, [r3, #0]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	001a      	movs	r2, r3
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	18d3      	adds	r3, r2, r3
 8001c06:	183a      	adds	r2, r7, r0
 8001c08:	8812      	ldrh	r2, [r2, #0]
 8001c0a:	495e      	ldr	r1, [pc, #376]	; (8001d84 <HAL_PCD_EP_DB_Receive+0x228>)
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	b292      	uxth	r2, r2
 8001c10:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c12:	1dbb      	adds	r3, r7, #6
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	2240      	movs	r2, #64	; 0x40
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d01a      	beq.n	8001c52 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	001a      	movs	r2, r3
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	18d3      	adds	r3, r2, r3
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	2016      	movs	r0, #22
 8001c30:	183b      	adds	r3, r7, r0
 8001c32:	4955      	ldr	r1, [pc, #340]	; (8001d88 <HAL_PCD_EP_DB_Receive+0x22c>)
 8001c34:	400a      	ands	r2, r1
 8001c36:	801a      	strh	r2, [r3, #0]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	001a      	movs	r2, r3
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	18d3      	adds	r3, r2, r3
 8001c46:	183a      	adds	r2, r7, r0
 8001c48:	8812      	ldrh	r2, [r2, #0]
 8001c4a:	4950      	ldr	r1, [pc, #320]	; (8001d8c <HAL_PCD_EP_DB_Receive+0x230>)
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	b292      	uxth	r2, r2
 8001c50:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001c52:	241a      	movs	r4, #26
 8001c54:	193b      	adds	r3, r7, r4
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d100      	bne.n	8001c5e <HAL_PCD_EP_DB_Receive+0x102>
 8001c5c:	e086      	b.n	8001d6c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6818      	ldr	r0, [r3, #0]
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	6959      	ldr	r1, [r3, #20]
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	891a      	ldrh	r2, [r3, #8]
 8001c6a:	193b      	adds	r3, r7, r4
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	f003 fcda 	bl	8005626 <USB_ReadPMA>
 8001c72:	e07b      	b.n	8001d6c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2250      	movs	r2, #80	; 0x50
 8001c7a:	5a9b      	ldrh	r3, [r3, r2]
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	001a      	movs	r2, r3
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	18d2      	adds	r2, r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	18d3      	adds	r3, r2, r3
 8001c8e:	4a40      	ldr	r2, [pc, #256]	; (8001d90 <HAL_PCD_EP_DB_Receive+0x234>)
 8001c90:	4694      	mov	ip, r2
 8001c92:	4463      	add	r3, ip
 8001c94:	881a      	ldrh	r2, [r3, #0]
 8001c96:	211a      	movs	r1, #26
 8001c98:	187b      	adds	r3, r7, r1
 8001c9a:	0592      	lsls	r2, r2, #22
 8001c9c:	0d92      	lsrs	r2, r2, #22
 8001c9e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	699a      	ldr	r2, [r3, #24]
 8001ca4:	187b      	adds	r3, r7, r1
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d307      	bcc.n	8001cbc <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	699a      	ldr	r2, [r3, #24]
 8001cb0:	187b      	adds	r3, r7, r1
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	1ad2      	subs	r2, r2, r3
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	619a      	str	r2, [r3, #24]
 8001cba:	e002      	b.n	8001cc2 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d121      	bne.n	8001d0e <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	001a      	movs	r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	18d3      	adds	r3, r2, r3
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	201e      	movs	r0, #30
 8001cde:	183b      	adds	r3, r7, r0
 8001ce0:	4927      	ldr	r1, [pc, #156]	; (8001d80 <HAL_PCD_EP_DB_Receive+0x224>)
 8001ce2:	400a      	ands	r2, r1
 8001ce4:	801a      	strh	r2, [r3, #0]
 8001ce6:	183b      	adds	r3, r7, r0
 8001ce8:	183a      	adds	r2, r7, r0
 8001cea:	8812      	ldrh	r2, [r2, #0]
 8001cec:	2180      	movs	r1, #128	; 0x80
 8001cee:	0189      	lsls	r1, r1, #6
 8001cf0:	404a      	eors	r2, r1
 8001cf2:	801a      	strh	r2, [r3, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	001a      	movs	r2, r3
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	18d3      	adds	r3, r2, r3
 8001d02:	183a      	adds	r2, r7, r0
 8001d04:	8812      	ldrh	r2, [r2, #0]
 8001d06:	491f      	ldr	r1, [pc, #124]	; (8001d84 <HAL_PCD_EP_DB_Receive+0x228>)
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	b292      	uxth	r2, r2
 8001d0c:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001d0e:	1dbb      	adds	r3, r7, #6
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	2240      	movs	r2, #64	; 0x40
 8001d14:	4013      	ands	r3, r2
 8001d16:	d11a      	bne.n	8001d4e <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	001a      	movs	r2, r3
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	18d3      	adds	r3, r2, r3
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	201c      	movs	r0, #28
 8001d2c:	183b      	adds	r3, r7, r0
 8001d2e:	4916      	ldr	r1, [pc, #88]	; (8001d88 <HAL_PCD_EP_DB_Receive+0x22c>)
 8001d30:	400a      	ands	r2, r1
 8001d32:	801a      	strh	r2, [r3, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	001a      	movs	r2, r3
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	18d3      	adds	r3, r2, r3
 8001d42:	183a      	adds	r2, r7, r0
 8001d44:	8812      	ldrh	r2, [r2, #0]
 8001d46:	4911      	ldr	r1, [pc, #68]	; (8001d8c <HAL_PCD_EP_DB_Receive+0x230>)
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	b292      	uxth	r2, r2
 8001d4c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001d4e:	241a      	movs	r4, #26
 8001d50:	193b      	adds	r3, r7, r4
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d009      	beq.n	8001d6c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6818      	ldr	r0, [r3, #0]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	6959      	ldr	r1, [r3, #20]
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	895a      	ldrh	r2, [r3, #10]
 8001d64:	193b      	adds	r3, r7, r4
 8001d66:	881b      	ldrh	r3, [r3, #0]
 8001d68:	f003 fc5d 	bl	8005626 <USB_ReadPMA>
    }
  }

  return count;
 8001d6c:	231a      	movs	r3, #26
 8001d6e:	18fb      	adds	r3, r7, r3
 8001d70:	881b      	ldrh	r3, [r3, #0]
}
 8001d72:	0018      	movs	r0, r3
 8001d74:	46bd      	mov	sp, r7
 8001d76:	b009      	add	sp, #36	; 0x24
 8001d78:	bd90      	pop	{r4, r7, pc}
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	00000402 	.word	0x00000402
 8001d80:	ffffbf8f 	.word	0xffffbf8f
 8001d84:	ffff8080 	.word	0xffff8080
 8001d88:	ffff8f8f 	.word	0xffff8f8f
 8001d8c:	ffff80c0 	.word	0xffff80c0
 8001d90:	00000406 	.word	0x00000406

08001d94 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b0a4      	sub	sp, #144	; 0x90
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	1dbb      	adds	r3, r7, #6
 8001da0:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001da2:	1dbb      	adds	r3, r7, #6
 8001da4:	881b      	ldrh	r3, [r3, #0]
 8001da6:	2240      	movs	r2, #64	; 0x40
 8001da8:	4013      	ands	r3, r2
 8001daa:	d100      	bne.n	8001dae <HAL_PCD_EP_DB_Transmit+0x1a>
 8001dac:	e1e4      	b.n	8002178 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2250      	movs	r2, #80	; 0x50
 8001db4:	5a9b      	ldrh	r3, [r3, r2]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	001a      	movs	r2, r3
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	18d2      	adds	r2, r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	18d3      	adds	r3, r2, r3
 8001dc8:	4ad0      	ldr	r2, [pc, #832]	; (800210c <HAL_PCD_EP_DB_Transmit+0x378>)
 8001dca:	4694      	mov	ip, r2
 8001dcc:	4463      	add	r3, ip
 8001dce:	881a      	ldrh	r2, [r3, #0]
 8001dd0:	2186      	movs	r1, #134	; 0x86
 8001dd2:	187b      	adds	r3, r7, r1
 8001dd4:	0592      	lsls	r2, r2, #22
 8001dd6:	0d92      	lsrs	r2, r2, #22
 8001dd8:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	699a      	ldr	r2, [r3, #24]
 8001dde:	187b      	adds	r3, r7, r1
 8001de0:	881b      	ldrh	r3, [r3, #0]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d907      	bls.n	8001df6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	699a      	ldr	r2, [r3, #24]
 8001dea:	187b      	adds	r3, r7, r1
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	1ad2      	subs	r2, r2, r3
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	619a      	str	r2, [r3, #24]
 8001df4:	e002      	b.n	8001dfc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d000      	beq.n	8001e06 <HAL_PCD_EP_DB_Transmit+0x72>
 8001e04:	e0b5      	b.n	8001f72 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	785b      	ldrb	r3, [r3, #1]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d125      	bne.n	8001e5a <HAL_PCD_EP_DB_Transmit+0xc6>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2250      	movs	r2, #80	; 0x50
 8001e1a:	5a9b      	ldrh	r3, [r3, r2]
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	001a      	movs	r2, r3
 8001e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e22:	189b      	adds	r3, r3, r2
 8001e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	00da      	lsls	r2, r3, #3
 8001e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e2e:	18d3      	adds	r3, r2, r3
 8001e30:	4ab6      	ldr	r2, [pc, #728]	; (800210c <HAL_PCD_EP_DB_Transmit+0x378>)
 8001e32:	4694      	mov	ip, r2
 8001e34:	4463      	add	r3, ip
 8001e36:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	059b      	lsls	r3, r3, #22
 8001e40:	0d9b      	lsrs	r3, r3, #22
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e46:	801a      	strh	r2, [r3, #0]
 8001e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e4a:	881b      	ldrh	r3, [r3, #0]
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	4ab0      	ldr	r2, [pc, #704]	; (8002110 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e56:	801a      	strh	r2, [r3, #0]
 8001e58:	e01b      	b.n	8001e92 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	785b      	ldrb	r3, [r3, #1]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d117      	bne.n	8001e92 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	637b      	str	r3, [r7, #52]	; 0x34
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2250      	movs	r2, #80	; 0x50
 8001e6e:	5a9b      	ldrh	r3, [r3, r2]
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	001a      	movs	r2, r3
 8001e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e76:	189b      	adds	r3, r3, r2
 8001e78:	637b      	str	r3, [r7, #52]	; 0x34
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	00da      	lsls	r2, r3, #3
 8001e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e82:	18d3      	adds	r3, r2, r3
 8001e84:	4aa1      	ldr	r2, [pc, #644]	; (800210c <HAL_PCD_EP_DB_Transmit+0x378>)
 8001e86:	4694      	mov	ip, r2
 8001e88:	4463      	add	r3, ip
 8001e8a:	633b      	str	r3, [r7, #48]	; 0x30
 8001e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e8e:	2200      	movs	r2, #0
 8001e90:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	785b      	ldrb	r3, [r3, #1]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d125      	bne.n	8001eec <HAL_PCD_EP_DB_Transmit+0x158>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	61fb      	str	r3, [r7, #28]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2250      	movs	r2, #80	; 0x50
 8001eac:	5a9b      	ldrh	r3, [r3, r2]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	001a      	movs	r2, r3
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	189b      	adds	r3, r3, r2
 8001eb6:	61fb      	str	r3, [r7, #28]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	00da      	lsls	r2, r3, #3
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	18d3      	adds	r3, r2, r3
 8001ec2:	4a94      	ldr	r2, [pc, #592]	; (8002114 <HAL_PCD_EP_DB_Transmit+0x380>)
 8001ec4:	4694      	mov	ip, r2
 8001ec6:	4463      	add	r3, ip
 8001ec8:	61bb      	str	r3, [r7, #24]
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	059b      	lsls	r3, r3, #22
 8001ed2:	0d9b      	lsrs	r3, r3, #22
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	801a      	strh	r2, [r3, #0]
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	4a8b      	ldr	r2, [pc, #556]	; (8002110 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	801a      	strh	r2, [r3, #0]
 8001eea:	e018      	b.n	8001f1e <HAL_PCD_EP_DB_Transmit+0x18a>
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	785b      	ldrb	r3, [r3, #1]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d114      	bne.n	8001f1e <HAL_PCD_EP_DB_Transmit+0x18a>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2250      	movs	r2, #80	; 0x50
 8001efa:	5a9b      	ldrh	r3, [r3, r2]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	001a      	movs	r2, r3
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	189b      	adds	r3, r3, r2
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	00da      	lsls	r2, r3, #3
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	18d3      	adds	r3, r2, r3
 8001f10:	4a80      	ldr	r2, [pc, #512]	; (8002114 <HAL_PCD_EP_DB_Transmit+0x380>)
 8001f12:	4694      	mov	ip, r2
 8001f14:	4463      	add	r3, ip
 8001f16:	623b      	str	r3, [r7, #32]
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	781a      	ldrb	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	0011      	movs	r1, r2
 8001f26:	0018      	movs	r0, r3
 8001f28:	f005 fb6e 	bl	8007608 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f2c:	1dbb      	adds	r3, r7, #6
 8001f2e:	881a      	ldrh	r2, [r3, #0]
 8001f30:	2380      	movs	r3, #128	; 0x80
 8001f32:	01db      	lsls	r3, r3, #7
 8001f34:	4013      	ands	r3, r2
 8001f36:	d100      	bne.n	8001f3a <HAL_PCD_EP_DB_Transmit+0x1a6>
 8001f38:	e309      	b.n	800254e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	001a      	movs	r2, r3
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	18d3      	adds	r3, r2, r3
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	2016      	movs	r0, #22
 8001f4e:	183b      	adds	r3, r7, r0
 8001f50:	4971      	ldr	r1, [pc, #452]	; (8002118 <HAL_PCD_EP_DB_Transmit+0x384>)
 8001f52:	400a      	ands	r2, r1
 8001f54:	801a      	strh	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	001a      	movs	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	18d3      	adds	r3, r2, r3
 8001f64:	183a      	adds	r2, r7, r0
 8001f66:	8812      	ldrh	r2, [r2, #0]
 8001f68:	496c      	ldr	r1, [pc, #432]	; (800211c <HAL_PCD_EP_DB_Transmit+0x388>)
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	b292      	uxth	r2, r2
 8001f6e:	801a      	strh	r2, [r3, #0]
 8001f70:	e2ed      	b.n	800254e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f72:	1dbb      	adds	r3, r7, #6
 8001f74:	881a      	ldrh	r2, [r3, #0]
 8001f76:	2380      	movs	r3, #128	; 0x80
 8001f78:	01db      	lsls	r3, r3, #7
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d01a      	beq.n	8001fb4 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	001a      	movs	r2, r3
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	18d3      	adds	r3, r2, r3
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	208a      	movs	r0, #138	; 0x8a
 8001f92:	183b      	adds	r3, r7, r0
 8001f94:	4960      	ldr	r1, [pc, #384]	; (8002118 <HAL_PCD_EP_DB_Transmit+0x384>)
 8001f96:	400a      	ands	r2, r1
 8001f98:	801a      	strh	r2, [r3, #0]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	001a      	movs	r2, r3
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	18d3      	adds	r3, r2, r3
 8001fa8:	183a      	adds	r2, r7, r0
 8001faa:	8812      	ldrh	r2, [r2, #0]
 8001fac:	495b      	ldr	r1, [pc, #364]	; (800211c <HAL_PCD_EP_DB_Transmit+0x388>)
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	b292      	uxth	r2, r2
 8001fb2:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	2224      	movs	r2, #36	; 0x24
 8001fb8:	5c9b      	ldrb	r3, [r3, r2]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d000      	beq.n	8001fc0 <HAL_PCD_EP_DB_Transmit+0x22c>
 8001fbe:	e2c6      	b.n	800254e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	695a      	ldr	r2, [r3, #20]
 8001fc4:	2186      	movs	r1, #134	; 0x86
 8001fc6:	187b      	adds	r3, r7, r1
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	18d2      	adds	r2, r2, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	69da      	ldr	r2, [r3, #28]
 8001fd4:	187b      	adds	r3, r7, r1
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	18d2      	adds	r2, r2, r3
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	6a1a      	ldr	r2, [r3, #32]
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d30c      	bcc.n	8002004 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	218c      	movs	r1, #140	; 0x8c
 8001ff0:	187a      	adds	r2, r7, r1
 8001ff2:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	6a1a      	ldr	r2, [r3, #32]
 8001ff8:	187b      	adds	r3, r7, r1
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	1ad2      	subs	r2, r2, r3
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	621a      	str	r2, [r3, #32]
 8002002:	e01a      	b.n	800203a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10a      	bne.n	8002022 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800200c:	2386      	movs	r3, #134	; 0x86
 800200e:	18fb      	adds	r3, r7, r3
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	228c      	movs	r2, #140	; 0x8c
 8002014:	18ba      	adds	r2, r7, r2
 8002016:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2224      	movs	r2, #36	; 0x24
 800201c:	2100      	movs	r1, #0
 800201e:	5499      	strb	r1, [r3, r2]
 8002020:	e00b      	b.n	800203a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2224      	movs	r2, #36	; 0x24
 8002026:	2100      	movs	r1, #0
 8002028:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	228c      	movs	r2, #140	; 0x8c
 8002030:	18ba      	adds	r2, r7, r2
 8002032:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2200      	movs	r2, #0
 8002038:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	785b      	ldrb	r3, [r3, #1]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d000      	beq.n	8002044 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8002042:	e06d      	b.n	8002120 <HAL_PCD_EP_DB_Transmit+0x38c>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	63fb      	str	r3, [r7, #60]	; 0x3c
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2250      	movs	r2, #80	; 0x50
 8002050:	5a9b      	ldrh	r3, [r3, r2]
 8002052:	b29b      	uxth	r3, r3
 8002054:	001a      	movs	r2, r3
 8002056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002058:	189b      	adds	r3, r3, r2
 800205a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	00da      	lsls	r2, r3, #3
 8002062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002064:	18d3      	adds	r3, r2, r3
 8002066:	4a29      	ldr	r2, [pc, #164]	; (800210c <HAL_PCD_EP_DB_Transmit+0x378>)
 8002068:	4694      	mov	ip, r2
 800206a:	4463      	add	r3, ip
 800206c:	63bb      	str	r3, [r7, #56]	; 0x38
 800206e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	b29b      	uxth	r3, r3
 8002074:	059b      	lsls	r3, r3, #22
 8002076:	0d9b      	lsrs	r3, r3, #22
 8002078:	b29a      	uxth	r2, r3
 800207a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800207c:	801a      	strh	r2, [r3, #0]
 800207e:	228c      	movs	r2, #140	; 0x8c
 8002080:	18bb      	adds	r3, r7, r2
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b3e      	cmp	r3, #62	; 0x3e
 8002086:	d91a      	bls.n	80020be <HAL_PCD_EP_DB_Transmit+0x32a>
 8002088:	18bb      	adds	r3, r7, r2
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	095b      	lsrs	r3, r3, #5
 800208e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002090:	18bb      	adds	r3, r7, r2
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	221f      	movs	r2, #31
 8002096:	4013      	ands	r3, r2
 8002098:	d102      	bne.n	80020a0 <HAL_PCD_EP_DB_Transmit+0x30c>
 800209a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800209c:	3b01      	subs	r3, #1
 800209e:	64bb      	str	r3, [r7, #72]	; 0x48
 80020a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	029b      	lsls	r3, r3, #10
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	4313      	orrs	r3, r2
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	4a17      	ldr	r2, [pc, #92]	; (8002110 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ba:	801a      	strh	r2, [r3, #0]
 80020bc:	e04f      	b.n	800215e <HAL_PCD_EP_DB_Transmit+0x3ca>
 80020be:	238c      	movs	r3, #140	; 0x8c
 80020c0:	18fb      	adds	r3, r7, r3
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d108      	bne.n	80020da <HAL_PCD_EP_DB_Transmit+0x346>
 80020c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	4a10      	ldr	r2, [pc, #64]	; (8002110 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020d6:	801a      	strh	r2, [r3, #0]
 80020d8:	e041      	b.n	800215e <HAL_PCD_EP_DB_Transmit+0x3ca>
 80020da:	228c      	movs	r2, #140	; 0x8c
 80020dc:	18bb      	adds	r3, r7, r2
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	085b      	lsrs	r3, r3, #1
 80020e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80020e4:	18bb      	adds	r3, r7, r2
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2201      	movs	r2, #1
 80020ea:	4013      	ands	r3, r2
 80020ec:	d002      	beq.n	80020f4 <HAL_PCD_EP_DB_Transmit+0x360>
 80020ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020f0:	3301      	adds	r3, #1
 80020f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80020f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	029b      	lsls	r3, r3, #10
 8002100:	b29b      	uxth	r3, r3
 8002102:	4313      	orrs	r3, r2
 8002104:	b29a      	uxth	r2, r3
 8002106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002108:	801a      	strh	r2, [r3, #0]
 800210a:	e028      	b.n	800215e <HAL_PCD_EP_DB_Transmit+0x3ca>
 800210c:	00000402 	.word	0x00000402
 8002110:	ffff8000 	.word	0xffff8000
 8002114:	00000406 	.word	0x00000406
 8002118:	ffff8f8f 	.word	0xffff8f8f
 800211c:	ffffc080 	.word	0xffffc080
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	785b      	ldrb	r3, [r3, #1]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d11a      	bne.n	800215e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	647b      	str	r3, [r7, #68]	; 0x44
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2250      	movs	r2, #80	; 0x50
 8002134:	5a9b      	ldrh	r3, [r3, r2]
 8002136:	b29b      	uxth	r3, r3
 8002138:	001a      	movs	r2, r3
 800213a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800213c:	189b      	adds	r3, r3, r2
 800213e:	647b      	str	r3, [r7, #68]	; 0x44
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	00da      	lsls	r2, r3, #3
 8002146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002148:	18d3      	adds	r3, r2, r3
 800214a:	4adb      	ldr	r2, [pc, #876]	; (80024b8 <HAL_PCD_EP_DB_Transmit+0x724>)
 800214c:	4694      	mov	ip, r2
 800214e:	4463      	add	r3, ip
 8002150:	643b      	str	r3, [r7, #64]	; 0x40
 8002152:	238c      	movs	r3, #140	; 0x8c
 8002154:	18fb      	adds	r3, r7, r3
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	b29a      	uxth	r2, r3
 800215a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800215c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6818      	ldr	r0, [r3, #0]
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	6959      	ldr	r1, [r3, #20]
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	891a      	ldrh	r2, [r3, #8]
 800216a:	238c      	movs	r3, #140	; 0x8c
 800216c:	18fb      	adds	r3, r7, r3
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	b29b      	uxth	r3, r3
 8002172:	f003 fa0f 	bl	8005594 <USB_WritePMA>
 8002176:	e1ea      	b.n	800254e <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2250      	movs	r2, #80	; 0x50
 800217e:	5a9b      	ldrh	r3, [r3, r2]
 8002180:	b29b      	uxth	r3, r3
 8002182:	001a      	movs	r2, r3
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	18d2      	adds	r2, r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	18d3      	adds	r3, r2, r3
 8002192:	4aca      	ldr	r2, [pc, #808]	; (80024bc <HAL_PCD_EP_DB_Transmit+0x728>)
 8002194:	4694      	mov	ip, r2
 8002196:	4463      	add	r3, ip
 8002198:	881a      	ldrh	r2, [r3, #0]
 800219a:	2186      	movs	r1, #134	; 0x86
 800219c:	187b      	adds	r3, r7, r1
 800219e:	0592      	lsls	r2, r2, #22
 80021a0:	0d92      	lsrs	r2, r2, #22
 80021a2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	699a      	ldr	r2, [r3, #24]
 80021a8:	187b      	adds	r3, r7, r1
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d307      	bcc.n	80021c0 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	699a      	ldr	r2, [r3, #24]
 80021b4:	187b      	adds	r3, r7, r1
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	1ad2      	subs	r2, r2, r3
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	619a      	str	r2, [r3, #24]
 80021be:	e002      	b.n	80021c6 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	2200      	movs	r2, #0
 80021c4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d000      	beq.n	80021d0 <HAL_PCD_EP_DB_Transmit+0x43c>
 80021ce:	e0bb      	b.n	8002348 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	785b      	ldrb	r3, [r3, #1]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d125      	bne.n	8002224 <HAL_PCD_EP_DB_Transmit+0x490>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2250      	movs	r2, #80	; 0x50
 80021e4:	5a9b      	ldrh	r3, [r3, r2]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	001a      	movs	r2, r3
 80021ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021ec:	189b      	adds	r3, r3, r2
 80021ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	00da      	lsls	r2, r3, #3
 80021f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021f8:	18d3      	adds	r3, r2, r3
 80021fa:	4aaf      	ldr	r2, [pc, #700]	; (80024b8 <HAL_PCD_EP_DB_Transmit+0x724>)
 80021fc:	4694      	mov	ip, r2
 80021fe:	4463      	add	r3, ip
 8002200:	67bb      	str	r3, [r7, #120]	; 0x78
 8002202:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	b29b      	uxth	r3, r3
 8002208:	059b      	lsls	r3, r3, #22
 800220a:	0d9b      	lsrs	r3, r3, #22
 800220c:	b29a      	uxth	r2, r3
 800220e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002210:	801a      	strh	r2, [r3, #0]
 8002212:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	b29b      	uxth	r3, r3
 8002218:	4aa9      	ldr	r2, [pc, #676]	; (80024c0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800221a:	4313      	orrs	r3, r2
 800221c:	b29a      	uxth	r2, r3
 800221e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002220:	801a      	strh	r2, [r3, #0]
 8002222:	e01b      	b.n	800225c <HAL_PCD_EP_DB_Transmit+0x4c8>
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	785b      	ldrb	r3, [r3, #1]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d117      	bne.n	800225c <HAL_PCD_EP_DB_Transmit+0x4c8>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	667b      	str	r3, [r7, #100]	; 0x64
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2250      	movs	r2, #80	; 0x50
 8002238:	5a9b      	ldrh	r3, [r3, r2]
 800223a:	b29b      	uxth	r3, r3
 800223c:	001a      	movs	r2, r3
 800223e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002240:	189b      	adds	r3, r3, r2
 8002242:	667b      	str	r3, [r7, #100]	; 0x64
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	00da      	lsls	r2, r3, #3
 800224a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800224c:	18d3      	adds	r3, r2, r3
 800224e:	4a9a      	ldr	r2, [pc, #616]	; (80024b8 <HAL_PCD_EP_DB_Transmit+0x724>)
 8002250:	4694      	mov	ip, r2
 8002252:	4463      	add	r3, ip
 8002254:	663b      	str	r3, [r7, #96]	; 0x60
 8002256:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002258:	2200      	movs	r2, #0
 800225a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	677b      	str	r3, [r7, #116]	; 0x74
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	785b      	ldrb	r3, [r3, #1]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d12b      	bne.n	80022c2 <HAL_PCD_EP_DB_Transmit+0x52e>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2250      	movs	r2, #80	; 0x50
 8002276:	5a9b      	ldrh	r3, [r3, r2]
 8002278:	b29b      	uxth	r3, r3
 800227a:	001a      	movs	r2, r3
 800227c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800227e:	189b      	adds	r3, r3, r2
 8002280:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	00da      	lsls	r2, r3, #3
 8002288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800228a:	18d3      	adds	r3, r2, r3
 800228c:	4a8b      	ldr	r2, [pc, #556]	; (80024bc <HAL_PCD_EP_DB_Transmit+0x728>)
 800228e:	4694      	mov	ip, r2
 8002290:	4463      	add	r3, ip
 8002292:	2180      	movs	r1, #128	; 0x80
 8002294:	187a      	adds	r2, r7, r1
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	187b      	adds	r3, r7, r1
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	881b      	ldrh	r3, [r3, #0]
 800229e:	b29b      	uxth	r3, r3
 80022a0:	059b      	lsls	r3, r3, #22
 80022a2:	0d9b      	lsrs	r3, r3, #22
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	187b      	adds	r3, r7, r1
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	801a      	strh	r2, [r3, #0]
 80022ac:	187b      	adds	r3, r7, r1
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	4a82      	ldr	r2, [pc, #520]	; (80024c0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	187b      	adds	r3, r7, r1
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	801a      	strh	r2, [r3, #0]
 80022c0:	e018      	b.n	80022f4 <HAL_PCD_EP_DB_Transmit+0x560>
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	785b      	ldrb	r3, [r3, #1]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d114      	bne.n	80022f4 <HAL_PCD_EP_DB_Transmit+0x560>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2250      	movs	r2, #80	; 0x50
 80022d0:	5a9b      	ldrh	r3, [r3, r2]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	001a      	movs	r2, r3
 80022d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022d8:	189b      	adds	r3, r3, r2
 80022da:	677b      	str	r3, [r7, #116]	; 0x74
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	00da      	lsls	r2, r3, #3
 80022e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022e4:	18d3      	adds	r3, r2, r3
 80022e6:	4a75      	ldr	r2, [pc, #468]	; (80024bc <HAL_PCD_EP_DB_Transmit+0x728>)
 80022e8:	4694      	mov	ip, r2
 80022ea:	4463      	add	r3, ip
 80022ec:	673b      	str	r3, [r7, #112]	; 0x70
 80022ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022f0:	2200      	movs	r2, #0
 80022f2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	781a      	ldrb	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	0011      	movs	r1, r2
 80022fc:	0018      	movs	r0, r3
 80022fe:	f005 f983 	bl	8007608 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002302:	1dbb      	adds	r3, r7, #6
 8002304:	881a      	ldrh	r2, [r3, #0]
 8002306:	2380      	movs	r3, #128	; 0x80
 8002308:	01db      	lsls	r3, r3, #7
 800230a:	4013      	ands	r3, r2
 800230c:	d000      	beq.n	8002310 <HAL_PCD_EP_DB_Transmit+0x57c>
 800230e:	e11e      	b.n	800254e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	001a      	movs	r2, r3
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	18d3      	adds	r3, r2, r3
 800231e:	881b      	ldrh	r3, [r3, #0]
 8002320:	b29a      	uxth	r2, r3
 8002322:	2088      	movs	r0, #136	; 0x88
 8002324:	183b      	adds	r3, r7, r0
 8002326:	4967      	ldr	r1, [pc, #412]	; (80024c4 <HAL_PCD_EP_DB_Transmit+0x730>)
 8002328:	400a      	ands	r2, r1
 800232a:	801a      	strh	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	001a      	movs	r2, r3
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	18d3      	adds	r3, r2, r3
 800233a:	183a      	adds	r2, r7, r0
 800233c:	8812      	ldrh	r2, [r2, #0]
 800233e:	4962      	ldr	r1, [pc, #392]	; (80024c8 <HAL_PCD_EP_DB_Transmit+0x734>)
 8002340:	430a      	orrs	r2, r1
 8002342:	b292      	uxth	r2, r2
 8002344:	801a      	strh	r2, [r3, #0]
 8002346:	e102      	b.n	800254e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002348:	1dbb      	adds	r3, r7, #6
 800234a:	881a      	ldrh	r2, [r3, #0]
 800234c:	2380      	movs	r3, #128	; 0x80
 800234e:	01db      	lsls	r3, r3, #7
 8002350:	4013      	ands	r3, r2
 8002352:	d11a      	bne.n	800238a <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	001a      	movs	r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	18d3      	adds	r3, r2, r3
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	b29a      	uxth	r2, r3
 8002366:	204e      	movs	r0, #78	; 0x4e
 8002368:	183b      	adds	r3, r7, r0
 800236a:	4956      	ldr	r1, [pc, #344]	; (80024c4 <HAL_PCD_EP_DB_Transmit+0x730>)
 800236c:	400a      	ands	r2, r1
 800236e:	801a      	strh	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	001a      	movs	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	18d3      	adds	r3, r2, r3
 800237e:	183a      	adds	r2, r7, r0
 8002380:	8812      	ldrh	r2, [r2, #0]
 8002382:	4951      	ldr	r1, [pc, #324]	; (80024c8 <HAL_PCD_EP_DB_Transmit+0x734>)
 8002384:	430a      	orrs	r2, r1
 8002386:	b292      	uxth	r2, r2
 8002388:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	2224      	movs	r2, #36	; 0x24
 800238e:	5c9b      	ldrb	r3, [r3, r2]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d000      	beq.n	8002396 <HAL_PCD_EP_DB_Transmit+0x602>
 8002394:	e0db      	b.n	800254e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	2186      	movs	r1, #134	; 0x86
 800239c:	187b      	adds	r3, r7, r1
 800239e:	881b      	ldrh	r3, [r3, #0]
 80023a0:	18d2      	adds	r2, r2, r3
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	69da      	ldr	r2, [r3, #28]
 80023aa:	187b      	adds	r3, r7, r1
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	18d2      	adds	r2, r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	6a1a      	ldr	r2, [r3, #32]
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d30c      	bcc.n	80023da <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	218c      	movs	r1, #140	; 0x8c
 80023c6:	187a      	adds	r2, r7, r1
 80023c8:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	6a1a      	ldr	r2, [r3, #32]
 80023ce:	187b      	adds	r3, r7, r1
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	1ad2      	subs	r2, r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	621a      	str	r2, [r3, #32]
 80023d8:	e01a      	b.n	8002410 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10a      	bne.n	80023f8 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 80023e2:	2386      	movs	r3, #134	; 0x86
 80023e4:	18fb      	adds	r3, r7, r3
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	228c      	movs	r2, #140	; 0x8c
 80023ea:	18ba      	adds	r2, r7, r2
 80023ec:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	2224      	movs	r2, #36	; 0x24
 80023f2:	2100      	movs	r1, #0
 80023f4:	5499      	strb	r1, [r3, r2]
 80023f6:	e00b      	b.n	8002410 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	228c      	movs	r2, #140	; 0x8c
 80023fe:	18ba      	adds	r2, r7, r2
 8002400:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2200      	movs	r2, #0
 8002406:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2224      	movs	r2, #36	; 0x24
 800240c:	2100      	movs	r1, #0
 800240e:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	657b      	str	r3, [r7, #84]	; 0x54
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	785b      	ldrb	r3, [r3, #1]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d000      	beq.n	8002420 <HAL_PCD_EP_DB_Transmit+0x68c>
 800241e:	e06e      	b.n	80024fe <HAL_PCD_EP_DB_Transmit+0x76a>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2250      	movs	r2, #80	; 0x50
 800242c:	5a9b      	ldrh	r3, [r3, r2]
 800242e:	b29b      	uxth	r3, r3
 8002430:	001a      	movs	r2, r3
 8002432:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002434:	189b      	adds	r3, r3, r2
 8002436:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	00da      	lsls	r2, r3, #3
 800243e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002440:	18d3      	adds	r3, r2, r3
 8002442:	4a1e      	ldr	r2, [pc, #120]	; (80024bc <HAL_PCD_EP_DB_Transmit+0x728>)
 8002444:	4694      	mov	ip, r2
 8002446:	4463      	add	r3, ip
 8002448:	65bb      	str	r3, [r7, #88]	; 0x58
 800244a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800244c:	881b      	ldrh	r3, [r3, #0]
 800244e:	b29b      	uxth	r3, r3
 8002450:	059b      	lsls	r3, r3, #22
 8002452:	0d9b      	lsrs	r3, r3, #22
 8002454:	b29a      	uxth	r2, r3
 8002456:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002458:	801a      	strh	r2, [r3, #0]
 800245a:	228c      	movs	r2, #140	; 0x8c
 800245c:	18bb      	adds	r3, r7, r2
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b3e      	cmp	r3, #62	; 0x3e
 8002462:	d91a      	bls.n	800249a <HAL_PCD_EP_DB_Transmit+0x706>
 8002464:	18bb      	adds	r3, r7, r2
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	095b      	lsrs	r3, r3, #5
 800246a:	66bb      	str	r3, [r7, #104]	; 0x68
 800246c:	18bb      	adds	r3, r7, r2
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	221f      	movs	r2, #31
 8002472:	4013      	ands	r3, r2
 8002474:	d102      	bne.n	800247c <HAL_PCD_EP_DB_Transmit+0x6e8>
 8002476:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002478:	3b01      	subs	r3, #1
 800247a:	66bb      	str	r3, [r7, #104]	; 0x68
 800247c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	b29a      	uxth	r2, r3
 8002482:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002484:	b29b      	uxth	r3, r3
 8002486:	029b      	lsls	r3, r3, #10
 8002488:	b29b      	uxth	r3, r3
 800248a:	4313      	orrs	r3, r2
 800248c:	b29b      	uxth	r3, r3
 800248e:	4a0c      	ldr	r2, [pc, #48]	; (80024c0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002490:	4313      	orrs	r3, r2
 8002492:	b29a      	uxth	r2, r3
 8002494:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002496:	801a      	strh	r2, [r3, #0]
 8002498:	e04d      	b.n	8002536 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800249a:	238c      	movs	r3, #140	; 0x8c
 800249c:	18fb      	adds	r3, r7, r3
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d113      	bne.n	80024cc <HAL_PCD_EP_DB_Transmit+0x738>
 80024a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	4a05      	ldr	r2, [pc, #20]	; (80024c0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024b2:	801a      	strh	r2, [r3, #0]
 80024b4:	e03f      	b.n	8002536 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	00000402 	.word	0x00000402
 80024bc:	00000406 	.word	0x00000406
 80024c0:	ffff8000 	.word	0xffff8000
 80024c4:	ffff8f8f 	.word	0xffff8f8f
 80024c8:	ffffc080 	.word	0xffffc080
 80024cc:	228c      	movs	r2, #140	; 0x8c
 80024ce:	18bb      	adds	r3, r7, r2
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	085b      	lsrs	r3, r3, #1
 80024d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80024d6:	18bb      	adds	r3, r7, r2
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2201      	movs	r2, #1
 80024dc:	4013      	ands	r3, r2
 80024de:	d002      	beq.n	80024e6 <HAL_PCD_EP_DB_Transmit+0x752>
 80024e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024e2:	3301      	adds	r3, #1
 80024e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80024e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	029b      	lsls	r3, r3, #10
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	4313      	orrs	r3, r2
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024fa:	801a      	strh	r2, [r3, #0]
 80024fc:	e01b      	b.n	8002536 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	785b      	ldrb	r3, [r3, #1]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d117      	bne.n	8002536 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2250      	movs	r2, #80	; 0x50
 800250c:	5a9b      	ldrh	r3, [r3, r2]
 800250e:	b29b      	uxth	r3, r3
 8002510:	001a      	movs	r2, r3
 8002512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002514:	189b      	adds	r3, r3, r2
 8002516:	657b      	str	r3, [r7, #84]	; 0x54
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	00da      	lsls	r2, r3, #3
 800251e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002520:	18d3      	adds	r3, r2, r3
 8002522:	4a21      	ldr	r2, [pc, #132]	; (80025a8 <HAL_PCD_EP_DB_Transmit+0x814>)
 8002524:	4694      	mov	ip, r2
 8002526:	4463      	add	r3, ip
 8002528:	653b      	str	r3, [r7, #80]	; 0x50
 800252a:	238c      	movs	r3, #140	; 0x8c
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	b29a      	uxth	r2, r3
 8002532:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002534:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6818      	ldr	r0, [r3, #0]
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	6959      	ldr	r1, [r3, #20]
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	895a      	ldrh	r2, [r3, #10]
 8002542:	238c      	movs	r3, #140	; 0x8c
 8002544:	18fb      	adds	r3, r7, r3
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	b29b      	uxth	r3, r3
 800254a:	f003 f823 	bl	8005594 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	001a      	movs	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	18d3      	adds	r3, r2, r3
 800255c:	881b      	ldrh	r3, [r3, #0]
 800255e:	b29a      	uxth	r2, r3
 8002560:	2014      	movs	r0, #20
 8002562:	183b      	adds	r3, r7, r0
 8002564:	4911      	ldr	r1, [pc, #68]	; (80025ac <HAL_PCD_EP_DB_Transmit+0x818>)
 8002566:	400a      	ands	r2, r1
 8002568:	801a      	strh	r2, [r3, #0]
 800256a:	183b      	adds	r3, r7, r0
 800256c:	183a      	adds	r2, r7, r0
 800256e:	8812      	ldrh	r2, [r2, #0]
 8002570:	2110      	movs	r1, #16
 8002572:	404a      	eors	r2, r1
 8002574:	801a      	strh	r2, [r3, #0]
 8002576:	183b      	adds	r3, r7, r0
 8002578:	183a      	adds	r2, r7, r0
 800257a:	8812      	ldrh	r2, [r2, #0]
 800257c:	2120      	movs	r1, #32
 800257e:	404a      	eors	r2, r1
 8002580:	801a      	strh	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	001a      	movs	r2, r3
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	18d3      	adds	r3, r2, r3
 8002590:	183a      	adds	r2, r7, r0
 8002592:	8812      	ldrh	r2, [r2, #0]
 8002594:	4906      	ldr	r1, [pc, #24]	; (80025b0 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8002596:	430a      	orrs	r2, r1
 8002598:	b292      	uxth	r2, r2
 800259a:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	0018      	movs	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	b024      	add	sp, #144	; 0x90
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	00000406 	.word	0x00000406
 80025ac:	ffff8fbf 	.word	0xffff8fbf
 80025b0:	ffff8080 	.word	0xffff8080

080025b4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80025b4:	b590      	push	{r4, r7, lr}
 80025b6:	b087      	sub	sp, #28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	0008      	movs	r0, r1
 80025be:	0011      	movs	r1, r2
 80025c0:	607b      	str	r3, [r7, #4]
 80025c2:	240a      	movs	r4, #10
 80025c4:	193b      	adds	r3, r7, r4
 80025c6:	1c02      	adds	r2, r0, #0
 80025c8:	801a      	strh	r2, [r3, #0]
 80025ca:	2308      	movs	r3, #8
 80025cc:	18fb      	adds	r3, r7, r3
 80025ce:	1c0a      	adds	r2, r1, #0
 80025d0:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80025d2:	0021      	movs	r1, r4
 80025d4:	187b      	adds	r3, r7, r1
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	2280      	movs	r2, #128	; 0x80
 80025da:	4013      	ands	r3, r2
 80025dc:	b29b      	uxth	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00c      	beq.n	80025fc <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025e2:	187b      	adds	r3, r7, r1
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	2207      	movs	r2, #7
 80025e8:	4013      	ands	r3, r2
 80025ea:	1c5a      	adds	r2, r3, #1
 80025ec:	0013      	movs	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	189b      	adds	r3, r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	18d3      	adds	r3, r2, r3
 80025f8:	617b      	str	r3, [r7, #20]
 80025fa:	e00b      	b.n	8002614 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80025fc:	230a      	movs	r3, #10
 80025fe:	18fb      	adds	r3, r7, r3
 8002600:	881a      	ldrh	r2, [r3, #0]
 8002602:	0013      	movs	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	189b      	adds	r3, r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	3369      	adds	r3, #105	; 0x69
 800260c:	33ff      	adds	r3, #255	; 0xff
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	18d3      	adds	r3, r2, r3
 8002612:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002614:	2308      	movs	r3, #8
 8002616:	18fb      	adds	r3, r7, r3
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d107      	bne.n	800262e <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	2200      	movs	r2, #0
 8002622:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	b29a      	uxth	r2, r3
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	80da      	strh	r2, [r3, #6]
 800262c:	e00b      	b.n	8002646 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	2201      	movs	r2, #1
 8002632:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	b29a      	uxth	r2, r3
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	0c1b      	lsrs	r3, r3, #16
 8002640:	b29a      	uxth	r2, r3
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	0018      	movs	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	b007      	add	sp, #28
 800264e:	bd90      	pop	{r4, r7, pc}

08002650 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	23ba      	movs	r3, #186	; 0xba
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	2101      	movs	r1, #1
 8002666:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	23b8      	movs	r3, #184	; 0xb8
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	2100      	movs	r1, #0
 8002670:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2254      	movs	r2, #84	; 0x54
 8002676:	5a9b      	ldrh	r3, [r3, r2]
 8002678:	b29b      	uxth	r3, r3
 800267a:	2201      	movs	r2, #1
 800267c:	4313      	orrs	r3, r2
 800267e:	b299      	uxth	r1, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2254      	movs	r2, #84	; 0x54
 8002684:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2254      	movs	r2, #84	; 0x54
 800268a:	5a9b      	ldrh	r3, [r3, r2]
 800268c:	b29b      	uxth	r3, r3
 800268e:	2202      	movs	r2, #2
 8002690:	4313      	orrs	r3, r2
 8002692:	b299      	uxth	r1, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2254      	movs	r2, #84	; 0x54
 8002698:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	0018      	movs	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	b004      	add	sp, #16
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	000a      	movs	r2, r1
 80026ae:	1cfb      	adds	r3, r7, #3
 80026b0:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	46bd      	mov	sp, r7
 80026b6:	b002      	add	sp, #8
 80026b8:	bd80      	pop	{r7, pc}
	...

080026bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026bc:	b5b0      	push	{r4, r5, r7, lr}
 80026be:	b08a      	sub	sp, #40	; 0x28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d102      	bne.n	80026d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	f000 fbaf 	bl	8002e2e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026d0:	4bcf      	ldr	r3, [pc, #828]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	220c      	movs	r2, #12
 80026d6:	4013      	ands	r3, r2
 80026d8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026da:	4bcd      	ldr	r3, [pc, #820]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 80026dc:	68da      	ldr	r2, [r3, #12]
 80026de:	2380      	movs	r3, #128	; 0x80
 80026e0:	025b      	lsls	r3, r3, #9
 80026e2:	4013      	ands	r3, r2
 80026e4:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2201      	movs	r2, #1
 80026ec:	4013      	ands	r3, r2
 80026ee:	d100      	bne.n	80026f2 <HAL_RCC_OscConfig+0x36>
 80026f0:	e07e      	b.n	80027f0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d007      	beq.n	8002708 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	2b0c      	cmp	r3, #12
 80026fc:	d112      	bne.n	8002724 <HAL_RCC_OscConfig+0x68>
 80026fe:	69fa      	ldr	r2, [r7, #28]
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	025b      	lsls	r3, r3, #9
 8002704:	429a      	cmp	r2, r3
 8002706:	d10d      	bne.n	8002724 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002708:	4bc1      	ldr	r3, [pc, #772]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	2380      	movs	r3, #128	; 0x80
 800270e:	029b      	lsls	r3, r3, #10
 8002710:	4013      	ands	r3, r2
 8002712:	d100      	bne.n	8002716 <HAL_RCC_OscConfig+0x5a>
 8002714:	e06b      	b.n	80027ee <HAL_RCC_OscConfig+0x132>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d167      	bne.n	80027ee <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	f000 fb85 	bl	8002e2e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	025b      	lsls	r3, r3, #9
 800272c:	429a      	cmp	r2, r3
 800272e:	d107      	bne.n	8002740 <HAL_RCC_OscConfig+0x84>
 8002730:	4bb7      	ldr	r3, [pc, #732]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4bb6      	ldr	r3, [pc, #728]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 8002736:	2180      	movs	r1, #128	; 0x80
 8002738:	0249      	lsls	r1, r1, #9
 800273a:	430a      	orrs	r2, r1
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	e027      	b.n	8002790 <HAL_RCC_OscConfig+0xd4>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	23a0      	movs	r3, #160	; 0xa0
 8002746:	02db      	lsls	r3, r3, #11
 8002748:	429a      	cmp	r2, r3
 800274a:	d10e      	bne.n	800276a <HAL_RCC_OscConfig+0xae>
 800274c:	4bb0      	ldr	r3, [pc, #704]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4baf      	ldr	r3, [pc, #700]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 8002752:	2180      	movs	r1, #128	; 0x80
 8002754:	02c9      	lsls	r1, r1, #11
 8002756:	430a      	orrs	r2, r1
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	4bad      	ldr	r3, [pc, #692]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	4bac      	ldr	r3, [pc, #688]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 8002760:	2180      	movs	r1, #128	; 0x80
 8002762:	0249      	lsls	r1, r1, #9
 8002764:	430a      	orrs	r2, r1
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	e012      	b.n	8002790 <HAL_RCC_OscConfig+0xd4>
 800276a:	4ba9      	ldr	r3, [pc, #676]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	4ba8      	ldr	r3, [pc, #672]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 8002770:	49a8      	ldr	r1, [pc, #672]	; (8002a14 <HAL_RCC_OscConfig+0x358>)
 8002772:	400a      	ands	r2, r1
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	4ba6      	ldr	r3, [pc, #664]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	2380      	movs	r3, #128	; 0x80
 800277c:	025b      	lsls	r3, r3, #9
 800277e:	4013      	ands	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	4ba2      	ldr	r3, [pc, #648]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4ba1      	ldr	r3, [pc, #644]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 800278a:	49a3      	ldr	r1, [pc, #652]	; (8002a18 <HAL_RCC_OscConfig+0x35c>)
 800278c:	400a      	ands	r2, r1
 800278e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d015      	beq.n	80027c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002798:	f7fe f832 	bl	8000800 <HAL_GetTick>
 800279c:	0003      	movs	r3, r0
 800279e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027a0:	e009      	b.n	80027b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027a2:	f7fe f82d 	bl	8000800 <HAL_GetTick>
 80027a6:	0002      	movs	r2, r0
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b64      	cmp	r3, #100	; 0x64
 80027ae:	d902      	bls.n	80027b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	f000 fb3c 	bl	8002e2e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027b6:	4b96      	ldr	r3, [pc, #600]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	2380      	movs	r3, #128	; 0x80
 80027bc:	029b      	lsls	r3, r3, #10
 80027be:	4013      	ands	r3, r2
 80027c0:	d0ef      	beq.n	80027a2 <HAL_RCC_OscConfig+0xe6>
 80027c2:	e015      	b.n	80027f0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c4:	f7fe f81c 	bl	8000800 <HAL_GetTick>
 80027c8:	0003      	movs	r3, r0
 80027ca:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027ce:	f7fe f817 	bl	8000800 <HAL_GetTick>
 80027d2:	0002      	movs	r2, r0
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b64      	cmp	r3, #100	; 0x64
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e326      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027e0:	4b8b      	ldr	r3, [pc, #556]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	2380      	movs	r3, #128	; 0x80
 80027e6:	029b      	lsls	r3, r3, #10
 80027e8:	4013      	ands	r3, r2
 80027ea:	d1f0      	bne.n	80027ce <HAL_RCC_OscConfig+0x112>
 80027ec:	e000      	b.n	80027f0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ee:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2202      	movs	r2, #2
 80027f6:	4013      	ands	r3, r2
 80027f8:	d100      	bne.n	80027fc <HAL_RCC_OscConfig+0x140>
 80027fa:	e08b      	b.n	8002914 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	2b04      	cmp	r3, #4
 8002806:	d005      	beq.n	8002814 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002808:	6a3b      	ldr	r3, [r7, #32]
 800280a:	2b0c      	cmp	r3, #12
 800280c:	d13e      	bne.n	800288c <HAL_RCC_OscConfig+0x1d0>
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d13b      	bne.n	800288c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002814:	4b7e      	ldr	r3, [pc, #504]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2204      	movs	r2, #4
 800281a:	4013      	ands	r3, r2
 800281c:	d004      	beq.n	8002828 <HAL_RCC_OscConfig+0x16c>
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e302      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002828:	4b79      	ldr	r3, [pc, #484]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	4a7b      	ldr	r2, [pc, #492]	; (8002a1c <HAL_RCC_OscConfig+0x360>)
 800282e:	4013      	ands	r3, r2
 8002830:	0019      	movs	r1, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	021a      	lsls	r2, r3, #8
 8002838:	4b75      	ldr	r3, [pc, #468]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 800283a:	430a      	orrs	r2, r1
 800283c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800283e:	4b74      	ldr	r3, [pc, #464]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2209      	movs	r2, #9
 8002844:	4393      	bics	r3, r2
 8002846:	0019      	movs	r1, r3
 8002848:	4b71      	ldr	r3, [pc, #452]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	430a      	orrs	r2, r1
 800284e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002850:	f000 fc40 	bl	80030d4 <HAL_RCC_GetSysClockFreq>
 8002854:	0001      	movs	r1, r0
 8002856:	4b6e      	ldr	r3, [pc, #440]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	091b      	lsrs	r3, r3, #4
 800285c:	220f      	movs	r2, #15
 800285e:	4013      	ands	r3, r2
 8002860:	4a6f      	ldr	r2, [pc, #444]	; (8002a20 <HAL_RCC_OscConfig+0x364>)
 8002862:	5cd3      	ldrb	r3, [r2, r3]
 8002864:	000a      	movs	r2, r1
 8002866:	40da      	lsrs	r2, r3
 8002868:	4b6e      	ldr	r3, [pc, #440]	; (8002a24 <HAL_RCC_OscConfig+0x368>)
 800286a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800286c:	4b6e      	ldr	r3, [pc, #440]	; (8002a28 <HAL_RCC_OscConfig+0x36c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2513      	movs	r5, #19
 8002872:	197c      	adds	r4, r7, r5
 8002874:	0018      	movs	r0, r3
 8002876:	f7fd ff7d 	bl	8000774 <HAL_InitTick>
 800287a:	0003      	movs	r3, r0
 800287c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800287e:	197b      	adds	r3, r7, r5
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d046      	beq.n	8002914 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8002886:	197b      	adds	r3, r7, r5
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	e2d0      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d027      	beq.n	80028e2 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002892:	4b5f      	ldr	r3, [pc, #380]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2209      	movs	r2, #9
 8002898:	4393      	bics	r3, r2
 800289a:	0019      	movs	r1, r3
 800289c:	4b5c      	ldr	r3, [pc, #368]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a4:	f7fd ffac 	bl	8000800 <HAL_GetTick>
 80028a8:	0003      	movs	r3, r0
 80028aa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ae:	f7fd ffa7 	bl	8000800 <HAL_GetTick>
 80028b2:	0002      	movs	r2, r0
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e2b6      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028c0:	4b53      	ldr	r3, [pc, #332]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2204      	movs	r2, #4
 80028c6:	4013      	ands	r3, r2
 80028c8:	d0f1      	beq.n	80028ae <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ca:	4b51      	ldr	r3, [pc, #324]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	4a53      	ldr	r2, [pc, #332]	; (8002a1c <HAL_RCC_OscConfig+0x360>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	0019      	movs	r1, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	021a      	lsls	r2, r3, #8
 80028da:	4b4d      	ldr	r3, [pc, #308]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 80028dc:	430a      	orrs	r2, r1
 80028de:	605a      	str	r2, [r3, #4]
 80028e0:	e018      	b.n	8002914 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028e2:	4b4b      	ldr	r3, [pc, #300]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	4b4a      	ldr	r3, [pc, #296]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 80028e8:	2101      	movs	r1, #1
 80028ea:	438a      	bics	r2, r1
 80028ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ee:	f7fd ff87 	bl	8000800 <HAL_GetTick>
 80028f2:	0003      	movs	r3, r0
 80028f4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028f8:	f7fd ff82 	bl	8000800 <HAL_GetTick>
 80028fc:	0002      	movs	r2, r0
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e291      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800290a:	4b41      	ldr	r3, [pc, #260]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2204      	movs	r2, #4
 8002910:	4013      	ands	r3, r2
 8002912:	d1f1      	bne.n	80028f8 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2210      	movs	r2, #16
 800291a:	4013      	ands	r3, r2
 800291c:	d100      	bne.n	8002920 <HAL_RCC_OscConfig+0x264>
 800291e:	e0a1      	b.n	8002a64 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d140      	bne.n	80029a8 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002926:	4b3a      	ldr	r3, [pc, #232]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	2380      	movs	r3, #128	; 0x80
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4013      	ands	r3, r2
 8002930:	d005      	beq.n	800293e <HAL_RCC_OscConfig+0x282>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e277      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800293e:	4b34      	ldr	r3, [pc, #208]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	4a3a      	ldr	r2, [pc, #232]	; (8002a2c <HAL_RCC_OscConfig+0x370>)
 8002944:	4013      	ands	r3, r2
 8002946:	0019      	movs	r1, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800294c:	4b30      	ldr	r3, [pc, #192]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 800294e:	430a      	orrs	r2, r1
 8002950:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002952:	4b2f      	ldr	r3, [pc, #188]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	021b      	lsls	r3, r3, #8
 8002958:	0a19      	lsrs	r1, r3, #8
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	061a      	lsls	r2, r3, #24
 8002960:	4b2b      	ldr	r3, [pc, #172]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 8002962:	430a      	orrs	r2, r1
 8002964:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	0b5b      	lsrs	r3, r3, #13
 800296c:	3301      	adds	r3, #1
 800296e:	2280      	movs	r2, #128	; 0x80
 8002970:	0212      	lsls	r2, r2, #8
 8002972:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002974:	4b26      	ldr	r3, [pc, #152]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	091b      	lsrs	r3, r3, #4
 800297a:	210f      	movs	r1, #15
 800297c:	400b      	ands	r3, r1
 800297e:	4928      	ldr	r1, [pc, #160]	; (8002a20 <HAL_RCC_OscConfig+0x364>)
 8002980:	5ccb      	ldrb	r3, [r1, r3]
 8002982:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002984:	4b27      	ldr	r3, [pc, #156]	; (8002a24 <HAL_RCC_OscConfig+0x368>)
 8002986:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002988:	4b27      	ldr	r3, [pc, #156]	; (8002a28 <HAL_RCC_OscConfig+0x36c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2513      	movs	r5, #19
 800298e:	197c      	adds	r4, r7, r5
 8002990:	0018      	movs	r0, r3
 8002992:	f7fd feef 	bl	8000774 <HAL_InitTick>
 8002996:	0003      	movs	r3, r0
 8002998:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800299a:	197b      	adds	r3, r7, r5
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d060      	beq.n	8002a64 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80029a2:	197b      	adds	r3, r7, r5
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	e242      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d03f      	beq.n	8002a30 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029b0:	4b17      	ldr	r3, [pc, #92]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	4b16      	ldr	r3, [pc, #88]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 80029b6:	2180      	movs	r1, #128	; 0x80
 80029b8:	0049      	lsls	r1, r1, #1
 80029ba:	430a      	orrs	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029be:	f7fd ff1f 	bl	8000800 <HAL_GetTick>
 80029c2:	0003      	movs	r3, r0
 80029c4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029c8:	f7fd ff1a 	bl	8000800 <HAL_GetTick>
 80029cc:	0002      	movs	r2, r0
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e229      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80029da:	4b0d      	ldr	r3, [pc, #52]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	2380      	movs	r3, #128	; 0x80
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4013      	ands	r3, r2
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029e6:	4b0a      	ldr	r3, [pc, #40]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4a10      	ldr	r2, [pc, #64]	; (8002a2c <HAL_RCC_OscConfig+0x370>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	0019      	movs	r1, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029f4:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 80029f6:	430a      	orrs	r2, r1
 80029f8:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029fa:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	021b      	lsls	r3, r3, #8
 8002a00:	0a19      	lsrs	r1, r3, #8
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	061a      	lsls	r2, r3, #24
 8002a08:	4b01      	ldr	r3, [pc, #4]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	e029      	b.n	8002a64 <HAL_RCC_OscConfig+0x3a8>
 8002a10:	40021000 	.word	0x40021000
 8002a14:	fffeffff 	.word	0xfffeffff
 8002a18:	fffbffff 	.word	0xfffbffff
 8002a1c:	ffffe0ff 	.word	0xffffe0ff
 8002a20:	08007cf4 	.word	0x08007cf4
 8002a24:	20000004 	.word	0x20000004
 8002a28:	20000008 	.word	0x20000008
 8002a2c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a30:	4bbd      	ldr	r3, [pc, #756]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	4bbc      	ldr	r3, [pc, #752]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002a36:	49bd      	ldr	r1, [pc, #756]	; (8002d2c <HAL_RCC_OscConfig+0x670>)
 8002a38:	400a      	ands	r2, r1
 8002a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3c:	f7fd fee0 	bl	8000800 <HAL_GetTick>
 8002a40:	0003      	movs	r3, r0
 8002a42:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a46:	f7fd fedb 	bl	8000800 <HAL_GetTick>
 8002a4a:	0002      	movs	r2, r0
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e1ea      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002a58:	4bb3      	ldr	r3, [pc, #716]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	2380      	movs	r3, #128	; 0x80
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4013      	ands	r3, r2
 8002a62:	d1f0      	bne.n	8002a46 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2208      	movs	r2, #8
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d036      	beq.n	8002adc <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d019      	beq.n	8002aaa <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a76:	4bac      	ldr	r3, [pc, #688]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002a78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a7a:	4bab      	ldr	r3, [pc, #684]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a82:	f7fd febd 	bl	8000800 <HAL_GetTick>
 8002a86:	0003      	movs	r3, r0
 8002a88:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a8c:	f7fd feb8 	bl	8000800 <HAL_GetTick>
 8002a90:	0002      	movs	r2, r0
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e1c7      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a9e:	4ba2      	ldr	r3, [pc, #648]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d0f1      	beq.n	8002a8c <HAL_RCC_OscConfig+0x3d0>
 8002aa8:	e018      	b.n	8002adc <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aaa:	4b9f      	ldr	r3, [pc, #636]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002aac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002aae:	4b9e      	ldr	r3, [pc, #632]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	438a      	bics	r2, r1
 8002ab4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab6:	f7fd fea3 	bl	8000800 <HAL_GetTick>
 8002aba:	0003      	movs	r3, r0
 8002abc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ac0:	f7fd fe9e 	bl	8000800 <HAL_GetTick>
 8002ac4:	0002      	movs	r2, r0
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e1ad      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ad2:	4b95      	ldr	r3, [pc, #596]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	4013      	ands	r3, r2
 8002ada:	d1f1      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2204      	movs	r2, #4
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d100      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x42c>
 8002ae6:	e0ae      	b.n	8002c46 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ae8:	2027      	movs	r0, #39	; 0x27
 8002aea:	183b      	adds	r3, r7, r0
 8002aec:	2200      	movs	r2, #0
 8002aee:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002af0:	4b8d      	ldr	r3, [pc, #564]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002af2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002af4:	2380      	movs	r3, #128	; 0x80
 8002af6:	055b      	lsls	r3, r3, #21
 8002af8:	4013      	ands	r3, r2
 8002afa:	d109      	bne.n	8002b10 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002afc:	4b8a      	ldr	r3, [pc, #552]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002afe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b00:	4b89      	ldr	r3, [pc, #548]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002b02:	2180      	movs	r1, #128	; 0x80
 8002b04:	0549      	lsls	r1, r1, #21
 8002b06:	430a      	orrs	r2, r1
 8002b08:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002b0a:	183b      	adds	r3, r7, r0
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b10:	4b87      	ldr	r3, [pc, #540]	; (8002d30 <HAL_RCC_OscConfig+0x674>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	2380      	movs	r3, #128	; 0x80
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d11a      	bne.n	8002b52 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b1c:	4b84      	ldr	r3, [pc, #528]	; (8002d30 <HAL_RCC_OscConfig+0x674>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	4b83      	ldr	r3, [pc, #524]	; (8002d30 <HAL_RCC_OscConfig+0x674>)
 8002b22:	2180      	movs	r1, #128	; 0x80
 8002b24:	0049      	lsls	r1, r1, #1
 8002b26:	430a      	orrs	r2, r1
 8002b28:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b2a:	f7fd fe69 	bl	8000800 <HAL_GetTick>
 8002b2e:	0003      	movs	r3, r0
 8002b30:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b34:	f7fd fe64 	bl	8000800 <HAL_GetTick>
 8002b38:	0002      	movs	r2, r0
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b64      	cmp	r3, #100	; 0x64
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e173      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b46:	4b7a      	ldr	r3, [pc, #488]	; (8002d30 <HAL_RCC_OscConfig+0x674>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	2380      	movs	r3, #128	; 0x80
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	4013      	ands	r3, r2
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	2380      	movs	r3, #128	; 0x80
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d107      	bne.n	8002b6e <HAL_RCC_OscConfig+0x4b2>
 8002b5e:	4b72      	ldr	r3, [pc, #456]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002b60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b62:	4b71      	ldr	r3, [pc, #452]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002b64:	2180      	movs	r1, #128	; 0x80
 8002b66:	0049      	lsls	r1, r1, #1
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	651a      	str	r2, [r3, #80]	; 0x50
 8002b6c:	e031      	b.n	8002bd2 <HAL_RCC_OscConfig+0x516>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x4d4>
 8002b76:	4b6c      	ldr	r3, [pc, #432]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002b78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b7a:	4b6b      	ldr	r3, [pc, #428]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002b7c:	496b      	ldr	r1, [pc, #428]	; (8002d2c <HAL_RCC_OscConfig+0x670>)
 8002b7e:	400a      	ands	r2, r1
 8002b80:	651a      	str	r2, [r3, #80]	; 0x50
 8002b82:	4b69      	ldr	r3, [pc, #420]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002b84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b86:	4b68      	ldr	r3, [pc, #416]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002b88:	496a      	ldr	r1, [pc, #424]	; (8002d34 <HAL_RCC_OscConfig+0x678>)
 8002b8a:	400a      	ands	r2, r1
 8002b8c:	651a      	str	r2, [r3, #80]	; 0x50
 8002b8e:	e020      	b.n	8002bd2 <HAL_RCC_OscConfig+0x516>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	23a0      	movs	r3, #160	; 0xa0
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d10e      	bne.n	8002bba <HAL_RCC_OscConfig+0x4fe>
 8002b9c:	4b62      	ldr	r3, [pc, #392]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002b9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ba0:	4b61      	ldr	r3, [pc, #388]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002ba2:	2180      	movs	r1, #128	; 0x80
 8002ba4:	00c9      	lsls	r1, r1, #3
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	651a      	str	r2, [r3, #80]	; 0x50
 8002baa:	4b5f      	ldr	r3, [pc, #380]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002bac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bae:	4b5e      	ldr	r3, [pc, #376]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002bb0:	2180      	movs	r1, #128	; 0x80
 8002bb2:	0049      	lsls	r1, r1, #1
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	651a      	str	r2, [r3, #80]	; 0x50
 8002bb8:	e00b      	b.n	8002bd2 <HAL_RCC_OscConfig+0x516>
 8002bba:	4b5b      	ldr	r3, [pc, #364]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002bbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bbe:	4b5a      	ldr	r3, [pc, #360]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002bc0:	495a      	ldr	r1, [pc, #360]	; (8002d2c <HAL_RCC_OscConfig+0x670>)
 8002bc2:	400a      	ands	r2, r1
 8002bc4:	651a      	str	r2, [r3, #80]	; 0x50
 8002bc6:	4b58      	ldr	r3, [pc, #352]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002bc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bca:	4b57      	ldr	r3, [pc, #348]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002bcc:	4959      	ldr	r1, [pc, #356]	; (8002d34 <HAL_RCC_OscConfig+0x678>)
 8002bce:	400a      	ands	r2, r1
 8002bd0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d015      	beq.n	8002c06 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bda:	f7fd fe11 	bl	8000800 <HAL_GetTick>
 8002bde:	0003      	movs	r3, r0
 8002be0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002be2:	e009      	b.n	8002bf8 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002be4:	f7fd fe0c 	bl	8000800 <HAL_GetTick>
 8002be8:	0002      	movs	r2, r0
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	4a52      	ldr	r2, [pc, #328]	; (8002d38 <HAL_RCC_OscConfig+0x67c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e11a      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bf8:	4b4b      	ldr	r3, [pc, #300]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002bfa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bfc:	2380      	movs	r3, #128	; 0x80
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4013      	ands	r3, r2
 8002c02:	d0ef      	beq.n	8002be4 <HAL_RCC_OscConfig+0x528>
 8002c04:	e014      	b.n	8002c30 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c06:	f7fd fdfb 	bl	8000800 <HAL_GetTick>
 8002c0a:	0003      	movs	r3, r0
 8002c0c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c0e:	e009      	b.n	8002c24 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c10:	f7fd fdf6 	bl	8000800 <HAL_GetTick>
 8002c14:	0002      	movs	r2, r0
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	4a47      	ldr	r2, [pc, #284]	; (8002d38 <HAL_RCC_OscConfig+0x67c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e104      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c24:	4b40      	ldr	r3, [pc, #256]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002c26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c28:	2380      	movs	r3, #128	; 0x80
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d1ef      	bne.n	8002c10 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c30:	2327      	movs	r3, #39	; 0x27
 8002c32:	18fb      	adds	r3, r7, r3
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d105      	bne.n	8002c46 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c3a:	4b3b      	ldr	r3, [pc, #236]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002c3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c3e:	4b3a      	ldr	r3, [pc, #232]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002c40:	493e      	ldr	r1, [pc, #248]	; (8002d3c <HAL_RCC_OscConfig+0x680>)
 8002c42:	400a      	ands	r2, r1
 8002c44:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	d049      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d026      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002c58:	4b33      	ldr	r3, [pc, #204]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	4b32      	ldr	r3, [pc, #200]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002c5e:	2101      	movs	r1, #1
 8002c60:	430a      	orrs	r2, r1
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	4b30      	ldr	r3, [pc, #192]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002c66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c68:	4b2f      	ldr	r3, [pc, #188]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	635a      	str	r2, [r3, #52]	; 0x34
 8002c70:	4b33      	ldr	r3, [pc, #204]	; (8002d40 <HAL_RCC_OscConfig+0x684>)
 8002c72:	6a1a      	ldr	r2, [r3, #32]
 8002c74:	4b32      	ldr	r3, [pc, #200]	; (8002d40 <HAL_RCC_OscConfig+0x684>)
 8002c76:	2180      	movs	r1, #128	; 0x80
 8002c78:	0189      	lsls	r1, r1, #6
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7e:	f7fd fdbf 	bl	8000800 <HAL_GetTick>
 8002c82:	0003      	movs	r3, r0
 8002c84:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c88:	f7fd fdba 	bl	8000800 <HAL_GetTick>
 8002c8c:	0002      	movs	r2, r0
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e0c9      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c9a:	4b23      	ldr	r3, [pc, #140]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d0f1      	beq.n	8002c88 <HAL_RCC_OscConfig+0x5cc>
 8002ca4:	e01e      	b.n	8002ce4 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002ca6:	4b20      	ldr	r3, [pc, #128]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	4b1f      	ldr	r3, [pc, #124]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002cac:	2101      	movs	r1, #1
 8002cae:	438a      	bics	r2, r1
 8002cb0:	609a      	str	r2, [r3, #8]
 8002cb2:	4b23      	ldr	r3, [pc, #140]	; (8002d40 <HAL_RCC_OscConfig+0x684>)
 8002cb4:	6a1a      	ldr	r2, [r3, #32]
 8002cb6:	4b22      	ldr	r3, [pc, #136]	; (8002d40 <HAL_RCC_OscConfig+0x684>)
 8002cb8:	4922      	ldr	r1, [pc, #136]	; (8002d44 <HAL_RCC_OscConfig+0x688>)
 8002cba:	400a      	ands	r2, r1
 8002cbc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbe:	f7fd fd9f 	bl	8000800 <HAL_GetTick>
 8002cc2:	0003      	movs	r3, r0
 8002cc4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cc8:	f7fd fd9a 	bl	8000800 <HAL_GetTick>
 8002ccc:	0002      	movs	r2, r0
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e0a9      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002cda:	4b13      	ldr	r3, [pc, #76]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d1f1      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d100      	bne.n	8002cee <HAL_RCC_OscConfig+0x632>
 8002cec:	e09e      	b.n	8002e2c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	2b0c      	cmp	r3, #12
 8002cf2:	d100      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x63a>
 8002cf4:	e077      	b.n	8002de6 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d158      	bne.n	8002db0 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002d04:	4910      	ldr	r1, [pc, #64]	; (8002d48 <HAL_RCC_OscConfig+0x68c>)
 8002d06:	400a      	ands	r2, r1
 8002d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0a:	f7fd fd79 	bl	8000800 <HAL_GetTick>
 8002d0e:	0003      	movs	r3, r0
 8002d10:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d12:	e01b      	b.n	8002d4c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d14:	f7fd fd74 	bl	8000800 <HAL_GetTick>
 8002d18:	0002      	movs	r2, r0
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d914      	bls.n	8002d4c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e083      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	fffffeff 	.word	0xfffffeff
 8002d30:	40007000 	.word	0x40007000
 8002d34:	fffffbff 	.word	0xfffffbff
 8002d38:	00001388 	.word	0x00001388
 8002d3c:	efffffff 	.word	0xefffffff
 8002d40:	40010000 	.word	0x40010000
 8002d44:	ffffdfff 	.word	0xffffdfff
 8002d48:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d4c:	4b3a      	ldr	r3, [pc, #232]	; (8002e38 <HAL_RCC_OscConfig+0x77c>)
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	2380      	movs	r3, #128	; 0x80
 8002d52:	049b      	lsls	r3, r3, #18
 8002d54:	4013      	ands	r3, r2
 8002d56:	d1dd      	bne.n	8002d14 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d58:	4b37      	ldr	r3, [pc, #220]	; (8002e38 <HAL_RCC_OscConfig+0x77c>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	4a37      	ldr	r2, [pc, #220]	; (8002e3c <HAL_RCC_OscConfig+0x780>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	0019      	movs	r1, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d70:	431a      	orrs	r2, r3
 8002d72:	4b31      	ldr	r3, [pc, #196]	; (8002e38 <HAL_RCC_OscConfig+0x77c>)
 8002d74:	430a      	orrs	r2, r1
 8002d76:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d78:	4b2f      	ldr	r3, [pc, #188]	; (8002e38 <HAL_RCC_OscConfig+0x77c>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	4b2e      	ldr	r3, [pc, #184]	; (8002e38 <HAL_RCC_OscConfig+0x77c>)
 8002d7e:	2180      	movs	r1, #128	; 0x80
 8002d80:	0449      	lsls	r1, r1, #17
 8002d82:	430a      	orrs	r2, r1
 8002d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d86:	f7fd fd3b 	bl	8000800 <HAL_GetTick>
 8002d8a:	0003      	movs	r3, r0
 8002d8c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d90:	f7fd fd36 	bl	8000800 <HAL_GetTick>
 8002d94:	0002      	movs	r2, r0
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e045      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002da2:	4b25      	ldr	r3, [pc, #148]	; (8002e38 <HAL_RCC_OscConfig+0x77c>)
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	2380      	movs	r3, #128	; 0x80
 8002da8:	049b      	lsls	r3, r3, #18
 8002daa:	4013      	ands	r3, r2
 8002dac:	d0f0      	beq.n	8002d90 <HAL_RCC_OscConfig+0x6d4>
 8002dae:	e03d      	b.n	8002e2c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db0:	4b21      	ldr	r3, [pc, #132]	; (8002e38 <HAL_RCC_OscConfig+0x77c>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	4b20      	ldr	r3, [pc, #128]	; (8002e38 <HAL_RCC_OscConfig+0x77c>)
 8002db6:	4922      	ldr	r1, [pc, #136]	; (8002e40 <HAL_RCC_OscConfig+0x784>)
 8002db8:	400a      	ands	r2, r1
 8002dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbc:	f7fd fd20 	bl	8000800 <HAL_GetTick>
 8002dc0:	0003      	movs	r3, r0
 8002dc2:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc6:	f7fd fd1b 	bl	8000800 <HAL_GetTick>
 8002dca:	0002      	movs	r2, r0
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e02a      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002dd8:	4b17      	ldr	r3, [pc, #92]	; (8002e38 <HAL_RCC_OscConfig+0x77c>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	2380      	movs	r3, #128	; 0x80
 8002dde:	049b      	lsls	r3, r3, #18
 8002de0:	4013      	ands	r3, r2
 8002de2:	d1f0      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x70a>
 8002de4:	e022      	b.n	8002e2c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d101      	bne.n	8002df2 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e01d      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002df2:	4b11      	ldr	r3, [pc, #68]	; (8002e38 <HAL_RCC_OscConfig+0x77c>)
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df8:	69fa      	ldr	r2, [r7, #28]
 8002dfa:	2380      	movs	r3, #128	; 0x80
 8002dfc:	025b      	lsls	r3, r3, #9
 8002dfe:	401a      	ands	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d10f      	bne.n	8002e28 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002e08:	69fa      	ldr	r2, [r7, #28]
 8002e0a:	23f0      	movs	r3, #240	; 0xf0
 8002e0c:	039b      	lsls	r3, r3, #14
 8002e0e:	401a      	ands	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d107      	bne.n	8002e28 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002e18:	69fa      	ldr	r2, [r7, #28]
 8002e1a:	23c0      	movs	r3, #192	; 0xc0
 8002e1c:	041b      	lsls	r3, r3, #16
 8002e1e:	401a      	ands	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d001      	beq.n	8002e2c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	0018      	movs	r0, r3
 8002e30:	46bd      	mov	sp, r7
 8002e32:	b00a      	add	sp, #40	; 0x28
 8002e34:	bdb0      	pop	{r4, r5, r7, pc}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	ff02ffff 	.word	0xff02ffff
 8002e40:	feffffff 	.word	0xfeffffff

08002e44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e44:	b5b0      	push	{r4, r5, r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e128      	b.n	80030aa <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e58:	4b96      	ldr	r3, [pc, #600]	; (80030b4 <HAL_RCC_ClockConfig+0x270>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	4013      	ands	r3, r2
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d91e      	bls.n	8002ea4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e66:	4b93      	ldr	r3, [pc, #588]	; (80030b4 <HAL_RCC_ClockConfig+0x270>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	4393      	bics	r3, r2
 8002e6e:	0019      	movs	r1, r3
 8002e70:	4b90      	ldr	r3, [pc, #576]	; (80030b4 <HAL_RCC_ClockConfig+0x270>)
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e78:	f7fd fcc2 	bl	8000800 <HAL_GetTick>
 8002e7c:	0003      	movs	r3, r0
 8002e7e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e80:	e009      	b.n	8002e96 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e82:	f7fd fcbd 	bl	8000800 <HAL_GetTick>
 8002e86:	0002      	movs	r2, r0
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	4a8a      	ldr	r2, [pc, #552]	; (80030b8 <HAL_RCC_ClockConfig+0x274>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e109      	b.n	80030aa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e96:	4b87      	ldr	r3, [pc, #540]	; (80030b4 <HAL_RCC_ClockConfig+0x270>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d1ee      	bne.n	8002e82 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d009      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eae:	4b83      	ldr	r3, [pc, #524]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	22f0      	movs	r2, #240	; 0xf0
 8002eb4:	4393      	bics	r3, r2
 8002eb6:	0019      	movs	r1, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	4b7f      	ldr	r3, [pc, #508]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	4013      	ands	r3, r2
 8002eca:	d100      	bne.n	8002ece <HAL_RCC_ClockConfig+0x8a>
 8002ecc:	e089      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d107      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ed6:	4b79      	ldr	r3, [pc, #484]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	2380      	movs	r3, #128	; 0x80
 8002edc:	029b      	lsls	r3, r3, #10
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d120      	bne.n	8002f24 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e0e1      	b.n	80030aa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	d107      	bne.n	8002efe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002eee:	4b73      	ldr	r3, [pc, #460]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	2380      	movs	r3, #128	; 0x80
 8002ef4:	049b      	lsls	r3, r3, #18
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d114      	bne.n	8002f24 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e0d5      	b.n	80030aa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d106      	bne.n	8002f14 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f06:	4b6d      	ldr	r3, [pc, #436]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2204      	movs	r2, #4
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d109      	bne.n	8002f24 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e0ca      	b.n	80030aa <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f14:	4b69      	ldr	r3, [pc, #420]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	2380      	movs	r3, #128	; 0x80
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	d101      	bne.n	8002f24 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e0c2      	b.n	80030aa <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f24:	4b65      	ldr	r3, [pc, #404]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	2203      	movs	r2, #3
 8002f2a:	4393      	bics	r3, r2
 8002f2c:	0019      	movs	r1, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	4b62      	ldr	r3, [pc, #392]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8002f34:	430a      	orrs	r2, r1
 8002f36:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f38:	f7fd fc62 	bl	8000800 <HAL_GetTick>
 8002f3c:	0003      	movs	r3, r0
 8002f3e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d111      	bne.n	8002f6c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f48:	e009      	b.n	8002f5e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f4a:	f7fd fc59 	bl	8000800 <HAL_GetTick>
 8002f4e:	0002      	movs	r2, r0
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	4a58      	ldr	r2, [pc, #352]	; (80030b8 <HAL_RCC_ClockConfig+0x274>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e0a5      	b.n	80030aa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f5e:	4b57      	ldr	r3, [pc, #348]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	220c      	movs	r2, #12
 8002f64:	4013      	ands	r3, r2
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d1ef      	bne.n	8002f4a <HAL_RCC_ClockConfig+0x106>
 8002f6a:	e03a      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	d111      	bne.n	8002f98 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f74:	e009      	b.n	8002f8a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f76:	f7fd fc43 	bl	8000800 <HAL_GetTick>
 8002f7a:	0002      	movs	r2, r0
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	4a4d      	ldr	r2, [pc, #308]	; (80030b8 <HAL_RCC_ClockConfig+0x274>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e08f      	b.n	80030aa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f8a:	4b4c      	ldr	r3, [pc, #304]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	220c      	movs	r2, #12
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b0c      	cmp	r3, #12
 8002f94:	d1ef      	bne.n	8002f76 <HAL_RCC_ClockConfig+0x132>
 8002f96:	e024      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d11b      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fa0:	e009      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa2:	f7fd fc2d 	bl	8000800 <HAL_GetTick>
 8002fa6:	0002      	movs	r2, r0
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	4a42      	ldr	r2, [pc, #264]	; (80030b8 <HAL_RCC_ClockConfig+0x274>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e079      	b.n	80030aa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fb6:	4b41      	ldr	r3, [pc, #260]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	220c      	movs	r2, #12
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d1ef      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0x15e>
 8002fc2:	e00e      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc4:	f7fd fc1c 	bl	8000800 <HAL_GetTick>
 8002fc8:	0002      	movs	r2, r0
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	4a3a      	ldr	r2, [pc, #232]	; (80030b8 <HAL_RCC_ClockConfig+0x274>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e068      	b.n	80030aa <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002fd8:	4b38      	ldr	r3, [pc, #224]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	220c      	movs	r2, #12
 8002fde:	4013      	ands	r3, r2
 8002fe0:	d1f0      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fe2:	4b34      	ldr	r3, [pc, #208]	; (80030b4 <HAL_RCC_ClockConfig+0x270>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	4013      	ands	r3, r2
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d21e      	bcs.n	800302e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff0:	4b30      	ldr	r3, [pc, #192]	; (80030b4 <HAL_RCC_ClockConfig+0x270>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	4393      	bics	r3, r2
 8002ff8:	0019      	movs	r1, r3
 8002ffa:	4b2e      	ldr	r3, [pc, #184]	; (80030b4 <HAL_RCC_ClockConfig+0x270>)
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003002:	f7fd fbfd 	bl	8000800 <HAL_GetTick>
 8003006:	0003      	movs	r3, r0
 8003008:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800300a:	e009      	b.n	8003020 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800300c:	f7fd fbf8 	bl	8000800 <HAL_GetTick>
 8003010:	0002      	movs	r2, r0
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	4a28      	ldr	r2, [pc, #160]	; (80030b8 <HAL_RCC_ClockConfig+0x274>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e044      	b.n	80030aa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003020:	4b24      	ldr	r3, [pc, #144]	; (80030b4 <HAL_RCC_ClockConfig+0x270>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2201      	movs	r2, #1
 8003026:	4013      	ands	r3, r2
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	429a      	cmp	r2, r3
 800302c:	d1ee      	bne.n	800300c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2204      	movs	r2, #4
 8003034:	4013      	ands	r3, r2
 8003036:	d009      	beq.n	800304c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003038:	4b20      	ldr	r3, [pc, #128]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	4a20      	ldr	r2, [pc, #128]	; (80030c0 <HAL_RCC_ClockConfig+0x27c>)
 800303e:	4013      	ands	r3, r2
 8003040:	0019      	movs	r1, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	4b1d      	ldr	r3, [pc, #116]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8003048:	430a      	orrs	r2, r1
 800304a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2208      	movs	r2, #8
 8003052:	4013      	ands	r3, r2
 8003054:	d00a      	beq.n	800306c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003056:	4b19      	ldr	r3, [pc, #100]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	4a1a      	ldr	r2, [pc, #104]	; (80030c4 <HAL_RCC_ClockConfig+0x280>)
 800305c:	4013      	ands	r3, r2
 800305e:	0019      	movs	r1, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	00da      	lsls	r2, r3, #3
 8003066:	4b15      	ldr	r3, [pc, #84]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8003068:	430a      	orrs	r2, r1
 800306a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800306c:	f000 f832 	bl	80030d4 <HAL_RCC_GetSysClockFreq>
 8003070:	0001      	movs	r1, r0
 8003072:	4b12      	ldr	r3, [pc, #72]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	091b      	lsrs	r3, r3, #4
 8003078:	220f      	movs	r2, #15
 800307a:	4013      	ands	r3, r2
 800307c:	4a12      	ldr	r2, [pc, #72]	; (80030c8 <HAL_RCC_ClockConfig+0x284>)
 800307e:	5cd3      	ldrb	r3, [r2, r3]
 8003080:	000a      	movs	r2, r1
 8003082:	40da      	lsrs	r2, r3
 8003084:	4b11      	ldr	r3, [pc, #68]	; (80030cc <HAL_RCC_ClockConfig+0x288>)
 8003086:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003088:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <HAL_RCC_ClockConfig+0x28c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	250b      	movs	r5, #11
 800308e:	197c      	adds	r4, r7, r5
 8003090:	0018      	movs	r0, r3
 8003092:	f7fd fb6f 	bl	8000774 <HAL_InitTick>
 8003096:	0003      	movs	r3, r0
 8003098:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800309a:	197b      	adds	r3, r7, r5
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80030a2:	197b      	adds	r3, r7, r5
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	e000      	b.n	80030aa <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	0018      	movs	r0, r3
 80030ac:	46bd      	mov	sp, r7
 80030ae:	b004      	add	sp, #16
 80030b0:	bdb0      	pop	{r4, r5, r7, pc}
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	40022000 	.word	0x40022000
 80030b8:	00001388 	.word	0x00001388
 80030bc:	40021000 	.word	0x40021000
 80030c0:	fffff8ff 	.word	0xfffff8ff
 80030c4:	ffffc7ff 	.word	0xffffc7ff
 80030c8:	08007cf4 	.word	0x08007cf4
 80030cc:	20000004 	.word	0x20000004
 80030d0:	20000008 	.word	0x20000008

080030d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030d4:	b5b0      	push	{r4, r5, r7, lr}
 80030d6:	b08e      	sub	sp, #56	; 0x38
 80030d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80030da:	4b4c      	ldr	r3, [pc, #304]	; (800320c <HAL_RCC_GetSysClockFreq+0x138>)
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030e2:	230c      	movs	r3, #12
 80030e4:	4013      	ands	r3, r2
 80030e6:	2b0c      	cmp	r3, #12
 80030e8:	d014      	beq.n	8003114 <HAL_RCC_GetSysClockFreq+0x40>
 80030ea:	d900      	bls.n	80030ee <HAL_RCC_GetSysClockFreq+0x1a>
 80030ec:	e07b      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x112>
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d002      	beq.n	80030f8 <HAL_RCC_GetSysClockFreq+0x24>
 80030f2:	2b08      	cmp	r3, #8
 80030f4:	d00b      	beq.n	800310e <HAL_RCC_GetSysClockFreq+0x3a>
 80030f6:	e076      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80030f8:	4b44      	ldr	r3, [pc, #272]	; (800320c <HAL_RCC_GetSysClockFreq+0x138>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2210      	movs	r2, #16
 80030fe:	4013      	ands	r3, r2
 8003100:	d002      	beq.n	8003108 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003102:	4b43      	ldr	r3, [pc, #268]	; (8003210 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003104:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003106:	e07c      	b.n	8003202 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003108:	4b42      	ldr	r3, [pc, #264]	; (8003214 <HAL_RCC_GetSysClockFreq+0x140>)
 800310a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800310c:	e079      	b.n	8003202 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800310e:	4b42      	ldr	r3, [pc, #264]	; (8003218 <HAL_RCC_GetSysClockFreq+0x144>)
 8003110:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003112:	e076      	b.n	8003202 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003116:	0c9a      	lsrs	r2, r3, #18
 8003118:	230f      	movs	r3, #15
 800311a:	401a      	ands	r2, r3
 800311c:	4b3f      	ldr	r3, [pc, #252]	; (800321c <HAL_RCC_GetSysClockFreq+0x148>)
 800311e:	5c9b      	ldrb	r3, [r3, r2]
 8003120:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003124:	0d9a      	lsrs	r2, r3, #22
 8003126:	2303      	movs	r3, #3
 8003128:	4013      	ands	r3, r2
 800312a:	3301      	adds	r3, #1
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800312e:	4b37      	ldr	r3, [pc, #220]	; (800320c <HAL_RCC_GetSysClockFreq+0x138>)
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	2380      	movs	r3, #128	; 0x80
 8003134:	025b      	lsls	r3, r3, #9
 8003136:	4013      	ands	r3, r2
 8003138:	d01a      	beq.n	8003170 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800313a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313c:	61bb      	str	r3, [r7, #24]
 800313e:	2300      	movs	r3, #0
 8003140:	61fb      	str	r3, [r7, #28]
 8003142:	4a35      	ldr	r2, [pc, #212]	; (8003218 <HAL_RCC_GetSysClockFreq+0x144>)
 8003144:	2300      	movs	r3, #0
 8003146:	69b8      	ldr	r0, [r7, #24]
 8003148:	69f9      	ldr	r1, [r7, #28]
 800314a:	f7fd f891 	bl	8000270 <__aeabi_lmul>
 800314e:	0002      	movs	r2, r0
 8003150:	000b      	movs	r3, r1
 8003152:	0010      	movs	r0, r2
 8003154:	0019      	movs	r1, r3
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	613b      	str	r3, [r7, #16]
 800315a:	2300      	movs	r3, #0
 800315c:	617b      	str	r3, [r7, #20]
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f7fd f865 	bl	8000230 <__aeabi_uldivmod>
 8003166:	0002      	movs	r2, r0
 8003168:	000b      	movs	r3, r1
 800316a:	0013      	movs	r3, r2
 800316c:	637b      	str	r3, [r7, #52]	; 0x34
 800316e:	e037      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003170:	4b26      	ldr	r3, [pc, #152]	; (800320c <HAL_RCC_GetSysClockFreq+0x138>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2210      	movs	r2, #16
 8003176:	4013      	ands	r3, r2
 8003178:	d01a      	beq.n	80031b0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800317a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317c:	60bb      	str	r3, [r7, #8]
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	4a23      	ldr	r2, [pc, #140]	; (8003210 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003184:	2300      	movs	r3, #0
 8003186:	68b8      	ldr	r0, [r7, #8]
 8003188:	68f9      	ldr	r1, [r7, #12]
 800318a:	f7fd f871 	bl	8000270 <__aeabi_lmul>
 800318e:	0002      	movs	r2, r0
 8003190:	000b      	movs	r3, r1
 8003192:	0010      	movs	r0, r2
 8003194:	0019      	movs	r1, r3
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	603b      	str	r3, [r7, #0]
 800319a:	2300      	movs	r3, #0
 800319c:	607b      	str	r3, [r7, #4]
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f7fd f845 	bl	8000230 <__aeabi_uldivmod>
 80031a6:	0002      	movs	r2, r0
 80031a8:	000b      	movs	r3, r1
 80031aa:	0013      	movs	r3, r2
 80031ac:	637b      	str	r3, [r7, #52]	; 0x34
 80031ae:	e017      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80031b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b2:	0018      	movs	r0, r3
 80031b4:	2300      	movs	r3, #0
 80031b6:	0019      	movs	r1, r3
 80031b8:	4a16      	ldr	r2, [pc, #88]	; (8003214 <HAL_RCC_GetSysClockFreq+0x140>)
 80031ba:	2300      	movs	r3, #0
 80031bc:	f7fd f858 	bl	8000270 <__aeabi_lmul>
 80031c0:	0002      	movs	r2, r0
 80031c2:	000b      	movs	r3, r1
 80031c4:	0010      	movs	r0, r2
 80031c6:	0019      	movs	r1, r3
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	001c      	movs	r4, r3
 80031cc:	2300      	movs	r3, #0
 80031ce:	001d      	movs	r5, r3
 80031d0:	0022      	movs	r2, r4
 80031d2:	002b      	movs	r3, r5
 80031d4:	f7fd f82c 	bl	8000230 <__aeabi_uldivmod>
 80031d8:	0002      	movs	r2, r0
 80031da:	000b      	movs	r3, r1
 80031dc:	0013      	movs	r3, r2
 80031de:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80031e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80031e4:	e00d      	b.n	8003202 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80031e6:	4b09      	ldr	r3, [pc, #36]	; (800320c <HAL_RCC_GetSysClockFreq+0x138>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	0b5b      	lsrs	r3, r3, #13
 80031ec:	2207      	movs	r2, #7
 80031ee:	4013      	ands	r3, r2
 80031f0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	3301      	adds	r3, #1
 80031f6:	2280      	movs	r2, #128	; 0x80
 80031f8:	0212      	lsls	r2, r2, #8
 80031fa:	409a      	lsls	r2, r3
 80031fc:	0013      	movs	r3, r2
 80031fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003200:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003204:	0018      	movs	r0, r3
 8003206:	46bd      	mov	sp, r7
 8003208:	b00e      	add	sp, #56	; 0x38
 800320a:	bdb0      	pop	{r4, r5, r7, pc}
 800320c:	40021000 	.word	0x40021000
 8003210:	003d0900 	.word	0x003d0900
 8003214:	00f42400 	.word	0x00f42400
 8003218:	007a1200 	.word	0x007a1200
 800321c:	08007d04 	.word	0x08007d04

08003220 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003228:	2317      	movs	r3, #23
 800322a:	18fb      	adds	r3, r7, r3
 800322c:	2200      	movs	r2, #0
 800322e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2220      	movs	r2, #32
 8003236:	4013      	ands	r3, r2
 8003238:	d106      	bne.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	2380      	movs	r3, #128	; 0x80
 8003240:	011b      	lsls	r3, r3, #4
 8003242:	4013      	ands	r3, r2
 8003244:	d100      	bne.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003246:	e104      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003248:	4bb1      	ldr	r3, [pc, #708]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800324a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800324c:	2380      	movs	r3, #128	; 0x80
 800324e:	055b      	lsls	r3, r3, #21
 8003250:	4013      	ands	r3, r2
 8003252:	d10a      	bne.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003254:	4bae      	ldr	r3, [pc, #696]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003256:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003258:	4bad      	ldr	r3, [pc, #692]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800325a:	2180      	movs	r1, #128	; 0x80
 800325c:	0549      	lsls	r1, r1, #21
 800325e:	430a      	orrs	r2, r1
 8003260:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003262:	2317      	movs	r3, #23
 8003264:	18fb      	adds	r3, r7, r3
 8003266:	2201      	movs	r2, #1
 8003268:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800326a:	4baa      	ldr	r3, [pc, #680]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	2380      	movs	r3, #128	; 0x80
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	4013      	ands	r3, r2
 8003274:	d11a      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003276:	4ba7      	ldr	r3, [pc, #668]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	4ba6      	ldr	r3, [pc, #664]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800327c:	2180      	movs	r1, #128	; 0x80
 800327e:	0049      	lsls	r1, r1, #1
 8003280:	430a      	orrs	r2, r1
 8003282:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003284:	f7fd fabc 	bl	8000800 <HAL_GetTick>
 8003288:	0003      	movs	r3, r0
 800328a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328c:	e008      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800328e:	f7fd fab7 	bl	8000800 <HAL_GetTick>
 8003292:	0002      	movs	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b64      	cmp	r3, #100	; 0x64
 800329a:	d901      	bls.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e133      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a0:	4b9c      	ldr	r3, [pc, #624]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	2380      	movs	r3, #128	; 0x80
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	4013      	ands	r3, r2
 80032aa:	d0f0      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80032ac:	4b98      	ldr	r3, [pc, #608]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	23c0      	movs	r3, #192	; 0xc0
 80032b2:	039b      	lsls	r3, r3, #14
 80032b4:	4013      	ands	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	23c0      	movs	r3, #192	; 0xc0
 80032be:	039b      	lsls	r3, r3, #14
 80032c0:	4013      	ands	r3, r2
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d107      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	23c0      	movs	r3, #192	; 0xc0
 80032ce:	039b      	lsls	r3, r3, #14
 80032d0:	4013      	ands	r3, r2
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d013      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	23c0      	movs	r3, #192	; 0xc0
 80032de:	029b      	lsls	r3, r3, #10
 80032e0:	401a      	ands	r2, r3
 80032e2:	23c0      	movs	r3, #192	; 0xc0
 80032e4:	029b      	lsls	r3, r3, #10
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d10a      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80032ea:	4b89      	ldr	r3, [pc, #548]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	2380      	movs	r3, #128	; 0x80
 80032f0:	029b      	lsls	r3, r3, #10
 80032f2:	401a      	ands	r2, r3
 80032f4:	2380      	movs	r3, #128	; 0x80
 80032f6:	029b      	lsls	r3, r3, #10
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d101      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e103      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003300:	4b83      	ldr	r3, [pc, #524]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003302:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003304:	23c0      	movs	r3, #192	; 0xc0
 8003306:	029b      	lsls	r3, r3, #10
 8003308:	4013      	ands	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d049      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	23c0      	movs	r3, #192	; 0xc0
 8003318:	029b      	lsls	r3, r3, #10
 800331a:	4013      	ands	r3, r2
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	429a      	cmp	r2, r3
 8003320:	d004      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2220      	movs	r2, #32
 8003328:	4013      	ands	r3, r2
 800332a:	d10d      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	23c0      	movs	r3, #192	; 0xc0
 8003332:	029b      	lsls	r3, r3, #10
 8003334:	4013      	ands	r3, r2
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	429a      	cmp	r2, r3
 800333a:	d034      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	2380      	movs	r3, #128	; 0x80
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	4013      	ands	r3, r2
 8003346:	d02e      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003348:	4b71      	ldr	r3, [pc, #452]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800334a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800334c:	4a72      	ldr	r2, [pc, #456]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800334e:	4013      	ands	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003352:	4b6f      	ldr	r3, [pc, #444]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003354:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003356:	4b6e      	ldr	r3, [pc, #440]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003358:	2180      	movs	r1, #128	; 0x80
 800335a:	0309      	lsls	r1, r1, #12
 800335c:	430a      	orrs	r2, r1
 800335e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003360:	4b6b      	ldr	r3, [pc, #428]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003362:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003364:	4b6a      	ldr	r3, [pc, #424]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003366:	496d      	ldr	r1, [pc, #436]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003368:	400a      	ands	r2, r1
 800336a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800336c:	4b68      	ldr	r3, [pc, #416]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	2380      	movs	r3, #128	; 0x80
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	4013      	ands	r3, r2
 800337a:	d014      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337c:	f7fd fa40 	bl	8000800 <HAL_GetTick>
 8003380:	0003      	movs	r3, r0
 8003382:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003384:	e009      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003386:	f7fd fa3b 	bl	8000800 <HAL_GetTick>
 800338a:	0002      	movs	r2, r0
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	4a63      	ldr	r2, [pc, #396]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d901      	bls.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e0b6      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800339a:	4b5d      	ldr	r3, [pc, #372]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800339c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800339e:	2380      	movs	r3, #128	; 0x80
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4013      	ands	r3, r2
 80033a4:	d0ef      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	2380      	movs	r3, #128	; 0x80
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	4013      	ands	r3, r2
 80033b0:	d01f      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	23c0      	movs	r3, #192	; 0xc0
 80033b8:	029b      	lsls	r3, r3, #10
 80033ba:	401a      	ands	r2, r3
 80033bc:	23c0      	movs	r3, #192	; 0xc0
 80033be:	029b      	lsls	r3, r3, #10
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d10c      	bne.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80033c4:	4b52      	ldr	r3, [pc, #328]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a56      	ldr	r2, [pc, #344]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033ca:	4013      	ands	r3, r2
 80033cc:	0019      	movs	r1, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689a      	ldr	r2, [r3, #8]
 80033d2:	23c0      	movs	r3, #192	; 0xc0
 80033d4:	039b      	lsls	r3, r3, #14
 80033d6:	401a      	ands	r2, r3
 80033d8:	4b4d      	ldr	r3, [pc, #308]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033da:	430a      	orrs	r2, r1
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	4b4c      	ldr	r3, [pc, #304]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033e0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	23c0      	movs	r3, #192	; 0xc0
 80033e8:	029b      	lsls	r3, r3, #10
 80033ea:	401a      	ands	r2, r3
 80033ec:	4b48      	ldr	r3, [pc, #288]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033ee:	430a      	orrs	r2, r1
 80033f0:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2220      	movs	r2, #32
 80033f8:	4013      	ands	r3, r2
 80033fa:	d01f      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	23c0      	movs	r3, #192	; 0xc0
 8003402:	029b      	lsls	r3, r3, #10
 8003404:	401a      	ands	r2, r3
 8003406:	23c0      	movs	r3, #192	; 0xc0
 8003408:	029b      	lsls	r3, r3, #10
 800340a:	429a      	cmp	r2, r3
 800340c:	d10c      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800340e:	4b40      	ldr	r3, [pc, #256]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a44      	ldr	r2, [pc, #272]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003414:	4013      	ands	r3, r2
 8003416:	0019      	movs	r1, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	23c0      	movs	r3, #192	; 0xc0
 800341e:	039b      	lsls	r3, r3, #14
 8003420:	401a      	ands	r2, r3
 8003422:	4b3b      	ldr	r3, [pc, #236]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003424:	430a      	orrs	r2, r1
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	4b39      	ldr	r3, [pc, #228]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800342a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	23c0      	movs	r3, #192	; 0xc0
 8003432:	029b      	lsls	r3, r3, #10
 8003434:	401a      	ands	r2, r3
 8003436:	4b36      	ldr	r3, [pc, #216]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003438:	430a      	orrs	r2, r1
 800343a:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800343c:	2317      	movs	r3, #23
 800343e:	18fb      	adds	r3, r7, r3
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d105      	bne.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003446:	4b32      	ldr	r3, [pc, #200]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800344a:	4b31      	ldr	r3, [pc, #196]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800344c:	4936      	ldr	r1, [pc, #216]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800344e:	400a      	ands	r2, r1
 8003450:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2201      	movs	r2, #1
 8003458:	4013      	ands	r3, r2
 800345a:	d009      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800345c:	4b2c      	ldr	r3, [pc, #176]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800345e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003460:	2203      	movs	r2, #3
 8003462:	4393      	bics	r3, r2
 8003464:	0019      	movs	r1, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	4b29      	ldr	r3, [pc, #164]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800346c:	430a      	orrs	r2, r1
 800346e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2202      	movs	r2, #2
 8003476:	4013      	ands	r3, r2
 8003478:	d009      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800347a:	4b25      	ldr	r3, [pc, #148]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800347c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800347e:	220c      	movs	r2, #12
 8003480:	4393      	bics	r3, r2
 8003482:	0019      	movs	r1, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691a      	ldr	r2, [r3, #16]
 8003488:	4b21      	ldr	r3, [pc, #132]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800348a:	430a      	orrs	r2, r1
 800348c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2204      	movs	r2, #4
 8003494:	4013      	ands	r3, r2
 8003496:	d009      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003498:	4b1d      	ldr	r3, [pc, #116]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800349a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349c:	4a23      	ldr	r2, [pc, #140]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800349e:	4013      	ands	r3, r2
 80034a0:	0019      	movs	r1, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	695a      	ldr	r2, [r3, #20]
 80034a6:	4b1a      	ldr	r3, [pc, #104]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034a8:	430a      	orrs	r2, r1
 80034aa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2208      	movs	r2, #8
 80034b2:	4013      	ands	r3, r2
 80034b4:	d009      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034b6:	4b16      	ldr	r3, [pc, #88]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ba:	4a1d      	ldr	r2, [pc, #116]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80034bc:	4013      	ands	r3, r2
 80034be:	0019      	movs	r1, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	699a      	ldr	r2, [r3, #24]
 80034c4:	4b12      	ldr	r3, [pc, #72]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034c6:	430a      	orrs	r2, r1
 80034c8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2240      	movs	r2, #64	; 0x40
 80034d0:	4013      	ands	r3, r2
 80034d2:	d009      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034d4:	4b0e      	ldr	r3, [pc, #56]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d8:	4a16      	ldr	r2, [pc, #88]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80034da:	4013      	ands	r3, r2
 80034dc:	0019      	movs	r1, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1a      	ldr	r2, [r3, #32]
 80034e2:	4b0b      	ldr	r3, [pc, #44]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034e4:	430a      	orrs	r2, r1
 80034e6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2280      	movs	r2, #128	; 0x80
 80034ee:	4013      	ands	r3, r2
 80034f0:	d009      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80034f2:	4b07      	ldr	r3, [pc, #28]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f6:	4a10      	ldr	r2, [pc, #64]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	0019      	movs	r1, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	69da      	ldr	r2, [r3, #28]
 8003500:	4b03      	ldr	r3, [pc, #12]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003502:	430a      	orrs	r2, r1
 8003504:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	0018      	movs	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	b006      	add	sp, #24
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40021000 	.word	0x40021000
 8003514:	40007000 	.word	0x40007000
 8003518:	fffcffff 	.word	0xfffcffff
 800351c:	fff7ffff 	.word	0xfff7ffff
 8003520:	00001388 	.word	0x00001388
 8003524:	ffcfffff 	.word	0xffcfffff
 8003528:	efffffff 	.word	0xefffffff
 800352c:	fffff3ff 	.word	0xfffff3ff
 8003530:	ffffcfff 	.word	0xffffcfff
 8003534:	fbffffff 	.word	0xfbffffff
 8003538:	fff3ffff 	.word	0xfff3ffff

0800353c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2244      	movs	r2, #68	; 0x44
 8003548:	2100      	movs	r1, #0
 800354a:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800354c:	4b05      	ldr	r3, [pc, #20]	; (8003564 <USB_EnableGlobalInt+0x28>)
 800354e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	b299      	uxth	r1, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2240      	movs	r2, #64	; 0x40
 8003558:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	0018      	movs	r0, r3
 800355e:	46bd      	mov	sp, r7
 8003560:	b004      	add	sp, #16
 8003562:	bd80      	pop	{r7, pc}
 8003564:	0000bf80 	.word	0x0000bf80

08003568 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003570:	4b09      	ldr	r3, [pc, #36]	; (8003598 <USB_DisableGlobalInt+0x30>)
 8003572:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2240      	movs	r2, #64	; 0x40
 8003578:	5a9b      	ldrh	r3, [r3, r2]
 800357a:	b29b      	uxth	r3, r3
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	b292      	uxth	r2, r2
 8003580:	43d2      	mvns	r2, r2
 8003582:	b292      	uxth	r2, r2
 8003584:	4013      	ands	r3, r2
 8003586:	b299      	uxth	r1, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2240      	movs	r2, #64	; 0x40
 800358c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	0018      	movs	r0, r3
 8003592:	46bd      	mov	sp, r7
 8003594:	b004      	add	sp, #16
 8003596:	bd80      	pop	{r7, pc}
 8003598:	0000bf80 	.word	0x0000bf80

0800359c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800359c:	b084      	sub	sp, #16
 800359e:	b590      	push	{r4, r7, lr}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
 80035a6:	2004      	movs	r0, #4
 80035a8:	2410      	movs	r4, #16
 80035aa:	1900      	adds	r0, r0, r4
 80035ac:	2408      	movs	r4, #8
 80035ae:	46a4      	mov	ip, r4
 80035b0:	44bc      	add	ip, r7
 80035b2:	4460      	add	r0, ip
 80035b4:	6001      	str	r1, [r0, #0]
 80035b6:	6042      	str	r2, [r0, #4]
 80035b8:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2240      	movs	r2, #64	; 0x40
 80035be:	2101      	movs	r1, #1
 80035c0:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2240      	movs	r2, #64	; 0x40
 80035c6:	2100      	movs	r1, #0
 80035c8:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2244      	movs	r2, #68	; 0x44
 80035ce:	2100      	movs	r1, #0
 80035d0:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2250      	movs	r2, #80	; 0x50
 80035d6:	2100      	movs	r1, #0
 80035d8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	0018      	movs	r0, r3
 80035de:	46bd      	mov	sp, r7
 80035e0:	b003      	add	sp, #12
 80035e2:	bc90      	pop	{r4, r7}
 80035e4:	bc08      	pop	{r3}
 80035e6:	b004      	add	sp, #16
 80035e8:	4718      	bx	r3
	...

080035ec <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b09c      	sub	sp, #112	; 0x70
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80035f6:	236f      	movs	r3, #111	; 0x6f
 80035f8:	18fb      	adds	r3, r7, r3
 80035fa:	2200      	movs	r2, #0
 80035fc:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	18d3      	adds	r3, r2, r3
 8003608:	881b      	ldrh	r3, [r3, #0]
 800360a:	b29a      	uxth	r2, r3
 800360c:	236c      	movs	r3, #108	; 0x6c
 800360e:	18fb      	adds	r3, r7, r3
 8003610:	49a3      	ldr	r1, [pc, #652]	; (80038a0 <USB_ActivateEndpoint+0x2b4>)
 8003612:	400a      	ands	r2, r1
 8003614:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	78db      	ldrb	r3, [r3, #3]
 800361a:	2b03      	cmp	r3, #3
 800361c:	d017      	beq.n	800364e <USB_ActivateEndpoint+0x62>
 800361e:	dc28      	bgt.n	8003672 <USB_ActivateEndpoint+0x86>
 8003620:	2b02      	cmp	r3, #2
 8003622:	d00e      	beq.n	8003642 <USB_ActivateEndpoint+0x56>
 8003624:	dc25      	bgt.n	8003672 <USB_ActivateEndpoint+0x86>
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <USB_ActivateEndpoint+0x44>
 800362a:	2b01      	cmp	r3, #1
 800362c:	d018      	beq.n	8003660 <USB_ActivateEndpoint+0x74>
 800362e:	e020      	b.n	8003672 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003630:	226c      	movs	r2, #108	; 0x6c
 8003632:	18bb      	adds	r3, r7, r2
 8003634:	18ba      	adds	r2, r7, r2
 8003636:	8812      	ldrh	r2, [r2, #0]
 8003638:	2180      	movs	r1, #128	; 0x80
 800363a:	0089      	lsls	r1, r1, #2
 800363c:	430a      	orrs	r2, r1
 800363e:	801a      	strh	r2, [r3, #0]
      break;
 8003640:	e01c      	b.n	800367c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8003642:	226c      	movs	r2, #108	; 0x6c
 8003644:	18bb      	adds	r3, r7, r2
 8003646:	18ba      	adds	r2, r7, r2
 8003648:	8812      	ldrh	r2, [r2, #0]
 800364a:	801a      	strh	r2, [r3, #0]
      break;
 800364c:	e016      	b.n	800367c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800364e:	226c      	movs	r2, #108	; 0x6c
 8003650:	18bb      	adds	r3, r7, r2
 8003652:	18ba      	adds	r2, r7, r2
 8003654:	8812      	ldrh	r2, [r2, #0]
 8003656:	21c0      	movs	r1, #192	; 0xc0
 8003658:	00c9      	lsls	r1, r1, #3
 800365a:	430a      	orrs	r2, r1
 800365c:	801a      	strh	r2, [r3, #0]
      break;
 800365e:	e00d      	b.n	800367c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003660:	226c      	movs	r2, #108	; 0x6c
 8003662:	18bb      	adds	r3, r7, r2
 8003664:	18ba      	adds	r2, r7, r2
 8003666:	8812      	ldrh	r2, [r2, #0]
 8003668:	2180      	movs	r1, #128	; 0x80
 800366a:	00c9      	lsls	r1, r1, #3
 800366c:	430a      	orrs	r2, r1
 800366e:	801a      	strh	r2, [r3, #0]
      break;
 8003670:	e004      	b.n	800367c <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8003672:	236f      	movs	r3, #111	; 0x6f
 8003674:	18fb      	adds	r3, r7, r3
 8003676:	2201      	movs	r2, #1
 8003678:	701a      	strb	r2, [r3, #0]
      break;
 800367a:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	18d3      	adds	r3, r2, r3
 8003686:	226c      	movs	r2, #108	; 0x6c
 8003688:	18ba      	adds	r2, r7, r2
 800368a:	8812      	ldrh	r2, [r2, #0]
 800368c:	4985      	ldr	r1, [pc, #532]	; (80038a4 <USB_ActivateEndpoint+0x2b8>)
 800368e:	430a      	orrs	r2, r1
 8003690:	b292      	uxth	r2, r2
 8003692:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	18d3      	adds	r3, r2, r3
 800369e:	881b      	ldrh	r3, [r3, #0]
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	b21b      	sxth	r3, r3
 80036a4:	4a80      	ldr	r2, [pc, #512]	; (80038a8 <USB_ActivateEndpoint+0x2bc>)
 80036a6:	4013      	ands	r3, r2
 80036a8:	b21a      	sxth	r2, r3
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	b21b      	sxth	r3, r3
 80036b0:	4313      	orrs	r3, r2
 80036b2:	b21a      	sxth	r2, r3
 80036b4:	2166      	movs	r1, #102	; 0x66
 80036b6:	187b      	adds	r3, r7, r1
 80036b8:	801a      	strh	r2, [r3, #0]
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	18d3      	adds	r3, r2, r3
 80036c4:	187a      	adds	r2, r7, r1
 80036c6:	8812      	ldrh	r2, [r2, #0]
 80036c8:	4976      	ldr	r1, [pc, #472]	; (80038a4 <USB_ActivateEndpoint+0x2b8>)
 80036ca:	430a      	orrs	r2, r1
 80036cc:	b292      	uxth	r2, r2
 80036ce:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	7b1b      	ldrb	r3, [r3, #12]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d000      	beq.n	80036da <USB_ActivateEndpoint+0xee>
 80036d8:	e178      	b.n	80039cc <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	785b      	ldrb	r3, [r3, #1]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d100      	bne.n	80036e4 <USB_ActivateEndpoint+0xf8>
 80036e2:	e07a      	b.n	80037da <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	61bb      	str	r3, [r7, #24]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2250      	movs	r2, #80	; 0x50
 80036ec:	5a9b      	ldrh	r3, [r3, r2]
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	001a      	movs	r2, r3
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	189b      	adds	r3, r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	00da      	lsls	r2, r3, #3
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	18d3      	adds	r3, r2, r3
 8003702:	2280      	movs	r2, #128	; 0x80
 8003704:	00d2      	lsls	r2, r2, #3
 8003706:	4694      	mov	ip, r2
 8003708:	4463      	add	r3, ip
 800370a:	617b      	str	r3, [r7, #20]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	88db      	ldrh	r3, [r3, #6]
 8003710:	085b      	lsrs	r3, r3, #1
 8003712:	b29b      	uxth	r3, r3
 8003714:	18db      	adds	r3, r3, r3
 8003716:	b29a      	uxth	r2, r3
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	18d2      	adds	r2, r2, r3
 8003726:	2112      	movs	r1, #18
 8003728:	187b      	adds	r3, r7, r1
 800372a:	8812      	ldrh	r2, [r2, #0]
 800372c:	801a      	strh	r2, [r3, #0]
 800372e:	187b      	adds	r3, r7, r1
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	2240      	movs	r2, #64	; 0x40
 8003734:	4013      	ands	r3, r2
 8003736:	d016      	beq.n	8003766 <USB_ActivateEndpoint+0x17a>
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	18d3      	adds	r3, r2, r3
 8003742:	881b      	ldrh	r3, [r3, #0]
 8003744:	b29a      	uxth	r2, r3
 8003746:	2010      	movs	r0, #16
 8003748:	183b      	adds	r3, r7, r0
 800374a:	4957      	ldr	r1, [pc, #348]	; (80038a8 <USB_ActivateEndpoint+0x2bc>)
 800374c:	400a      	ands	r2, r1
 800374e:	801a      	strh	r2, [r3, #0]
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	18d3      	adds	r3, r2, r3
 800375a:	183a      	adds	r2, r7, r0
 800375c:	8812      	ldrh	r2, [r2, #0]
 800375e:	4953      	ldr	r1, [pc, #332]	; (80038ac <USB_ActivateEndpoint+0x2c0>)
 8003760:	430a      	orrs	r2, r1
 8003762:	b292      	uxth	r2, r2
 8003764:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	78db      	ldrb	r3, [r3, #3]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d01d      	beq.n	80037aa <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	18d3      	adds	r3, r2, r3
 8003778:	881b      	ldrh	r3, [r3, #0]
 800377a:	b29a      	uxth	r2, r3
 800377c:	200c      	movs	r0, #12
 800377e:	183b      	adds	r3, r7, r0
 8003780:	494b      	ldr	r1, [pc, #300]	; (80038b0 <USB_ActivateEndpoint+0x2c4>)
 8003782:	400a      	ands	r2, r1
 8003784:	801a      	strh	r2, [r3, #0]
 8003786:	183b      	adds	r3, r7, r0
 8003788:	183a      	adds	r2, r7, r0
 800378a:	8812      	ldrh	r2, [r2, #0]
 800378c:	2120      	movs	r1, #32
 800378e:	404a      	eors	r2, r1
 8003790:	801a      	strh	r2, [r3, #0]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	18d3      	adds	r3, r2, r3
 800379c:	183a      	adds	r2, r7, r0
 800379e:	8812      	ldrh	r2, [r2, #0]
 80037a0:	4940      	ldr	r1, [pc, #256]	; (80038a4 <USB_ActivateEndpoint+0x2b8>)
 80037a2:	430a      	orrs	r2, r1
 80037a4:	b292      	uxth	r2, r2
 80037a6:	801a      	strh	r2, [r3, #0]
 80037a8:	e2b4      	b.n	8003d14 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	18d3      	adds	r3, r2, r3
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	200e      	movs	r0, #14
 80037ba:	183b      	adds	r3, r7, r0
 80037bc:	493c      	ldr	r1, [pc, #240]	; (80038b0 <USB_ActivateEndpoint+0x2c4>)
 80037be:	400a      	ands	r2, r1
 80037c0:	801a      	strh	r2, [r3, #0]
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	18d3      	adds	r3, r2, r3
 80037cc:	183a      	adds	r2, r7, r0
 80037ce:	8812      	ldrh	r2, [r2, #0]
 80037d0:	4934      	ldr	r1, [pc, #208]	; (80038a4 <USB_ActivateEndpoint+0x2b8>)
 80037d2:	430a      	orrs	r2, r1
 80037d4:	b292      	uxth	r2, r2
 80037d6:	801a      	strh	r2, [r3, #0]
 80037d8:	e29c      	b.n	8003d14 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	633b      	str	r3, [r7, #48]	; 0x30
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2250      	movs	r2, #80	; 0x50
 80037e2:	5a9b      	ldrh	r3, [r3, r2]
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	001a      	movs	r2, r3
 80037e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ea:	189b      	adds	r3, r3, r2
 80037ec:	633b      	str	r3, [r7, #48]	; 0x30
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	00da      	lsls	r2, r3, #3
 80037f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f6:	18d3      	adds	r3, r2, r3
 80037f8:	4a2e      	ldr	r2, [pc, #184]	; (80038b4 <USB_ActivateEndpoint+0x2c8>)
 80037fa:	4694      	mov	ip, r2
 80037fc:	4463      	add	r3, ip
 80037fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	88db      	ldrh	r3, [r3, #6]
 8003804:	085b      	lsrs	r3, r3, #1
 8003806:	b29b      	uxth	r3, r3
 8003808:	18db      	adds	r3, r3, r3
 800380a:	b29a      	uxth	r2, r3
 800380c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	62bb      	str	r3, [r7, #40]	; 0x28
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2250      	movs	r2, #80	; 0x50
 8003818:	5a9b      	ldrh	r3, [r3, r2]
 800381a:	b29b      	uxth	r3, r3
 800381c:	001a      	movs	r2, r3
 800381e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003820:	189b      	adds	r3, r3, r2
 8003822:	62bb      	str	r3, [r7, #40]	; 0x28
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	00da      	lsls	r2, r3, #3
 800382a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382c:	18d3      	adds	r3, r2, r3
 800382e:	4a22      	ldr	r2, [pc, #136]	; (80038b8 <USB_ActivateEndpoint+0x2cc>)
 8003830:	4694      	mov	ip, r2
 8003832:	4463      	add	r3, ip
 8003834:	627b      	str	r3, [r7, #36]	; 0x24
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	881b      	ldrh	r3, [r3, #0]
 800383a:	b29b      	uxth	r3, r3
 800383c:	059b      	lsls	r3, r3, #22
 800383e:	0d9b      	lsrs	r3, r3, #22
 8003840:	b29a      	uxth	r2, r3
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	801a      	strh	r2, [r3, #0]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	2b3e      	cmp	r3, #62	; 0x3e
 800384c:	d91a      	bls.n	8003884 <USB_ActivateEndpoint+0x298>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	095b      	lsrs	r3, r3, #5
 8003854:	66bb      	str	r3, [r7, #104]	; 0x68
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	221f      	movs	r2, #31
 800385c:	4013      	ands	r3, r2
 800385e:	d102      	bne.n	8003866 <USB_ActivateEndpoint+0x27a>
 8003860:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003862:	3b01      	subs	r3, #1
 8003864:	66bb      	str	r3, [r7, #104]	; 0x68
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	b29a      	uxth	r2, r3
 800386c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800386e:	b29b      	uxth	r3, r3
 8003870:	029b      	lsls	r3, r3, #10
 8003872:	b29b      	uxth	r3, r3
 8003874:	4313      	orrs	r3, r2
 8003876:	b29b      	uxth	r3, r3
 8003878:	4a10      	ldr	r2, [pc, #64]	; (80038bc <USB_ActivateEndpoint+0x2d0>)
 800387a:	4313      	orrs	r3, r2
 800387c:	b29a      	uxth	r2, r3
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	801a      	strh	r2, [r3, #0]
 8003882:	e034      	b.n	80038ee <USB_ActivateEndpoint+0x302>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d119      	bne.n	80038c0 <USB_ActivateEndpoint+0x2d4>
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	b29b      	uxth	r3, r3
 8003892:	4a0a      	ldr	r2, [pc, #40]	; (80038bc <USB_ActivateEndpoint+0x2d0>)
 8003894:	4313      	orrs	r3, r2
 8003896:	b29a      	uxth	r2, r3
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	801a      	strh	r2, [r3, #0]
 800389c:	e027      	b.n	80038ee <USB_ActivateEndpoint+0x302>
 800389e:	46c0      	nop			; (mov r8, r8)
 80038a0:	ffff898f 	.word	0xffff898f
 80038a4:	ffff8080 	.word	0xffff8080
 80038a8:	ffff8f8f 	.word	0xffff8f8f
 80038ac:	ffff80c0 	.word	0xffff80c0
 80038b0:	ffff8fbf 	.word	0xffff8fbf
 80038b4:	00000404 	.word	0x00000404
 80038b8:	00000406 	.word	0x00000406
 80038bc:	ffff8000 	.word	0xffff8000
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	085b      	lsrs	r3, r3, #1
 80038c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	2201      	movs	r2, #1
 80038ce:	4013      	ands	r3, r2
 80038d0:	d002      	beq.n	80038d8 <USB_ActivateEndpoint+0x2ec>
 80038d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038d4:	3301      	adds	r3, #1
 80038d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	b29a      	uxth	r2, r3
 80038de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	029b      	lsls	r3, r3, #10
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	4313      	orrs	r3, r2
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	18d2      	adds	r2, r2, r3
 80038f8:	2122      	movs	r1, #34	; 0x22
 80038fa:	187b      	adds	r3, r7, r1
 80038fc:	8812      	ldrh	r2, [r2, #0]
 80038fe:	801a      	strh	r2, [r3, #0]
 8003900:	187b      	adds	r3, r7, r1
 8003902:	881a      	ldrh	r2, [r3, #0]
 8003904:	2380      	movs	r3, #128	; 0x80
 8003906:	01db      	lsls	r3, r3, #7
 8003908:	4013      	ands	r3, r2
 800390a:	d016      	beq.n	800393a <USB_ActivateEndpoint+0x34e>
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	18d3      	adds	r3, r2, r3
 8003916:	881b      	ldrh	r3, [r3, #0]
 8003918:	b29a      	uxth	r2, r3
 800391a:	2020      	movs	r0, #32
 800391c:	183b      	adds	r3, r7, r0
 800391e:	49dd      	ldr	r1, [pc, #884]	; (8003c94 <USB_ActivateEndpoint+0x6a8>)
 8003920:	400a      	ands	r2, r1
 8003922:	801a      	strh	r2, [r3, #0]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	18d3      	adds	r3, r2, r3
 800392e:	183a      	adds	r2, r7, r0
 8003930:	8812      	ldrh	r2, [r2, #0]
 8003932:	49d9      	ldr	r1, [pc, #868]	; (8003c98 <USB_ActivateEndpoint+0x6ac>)
 8003934:	430a      	orrs	r2, r1
 8003936:	b292      	uxth	r2, r2
 8003938:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d125      	bne.n	800398e <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	18d3      	adds	r3, r2, r3
 800394c:	881b      	ldrh	r3, [r3, #0]
 800394e:	b29a      	uxth	r2, r3
 8003950:	201c      	movs	r0, #28
 8003952:	183b      	adds	r3, r7, r0
 8003954:	49d1      	ldr	r1, [pc, #836]	; (8003c9c <USB_ActivateEndpoint+0x6b0>)
 8003956:	400a      	ands	r2, r1
 8003958:	801a      	strh	r2, [r3, #0]
 800395a:	183b      	adds	r3, r7, r0
 800395c:	183a      	adds	r2, r7, r0
 800395e:	8812      	ldrh	r2, [r2, #0]
 8003960:	2180      	movs	r1, #128	; 0x80
 8003962:	0149      	lsls	r1, r1, #5
 8003964:	404a      	eors	r2, r1
 8003966:	801a      	strh	r2, [r3, #0]
 8003968:	183b      	adds	r3, r7, r0
 800396a:	183a      	adds	r2, r7, r0
 800396c:	8812      	ldrh	r2, [r2, #0]
 800396e:	2180      	movs	r1, #128	; 0x80
 8003970:	0189      	lsls	r1, r1, #6
 8003972:	404a      	eors	r2, r1
 8003974:	801a      	strh	r2, [r3, #0]
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	18d3      	adds	r3, r2, r3
 8003980:	183a      	adds	r2, r7, r0
 8003982:	8812      	ldrh	r2, [r2, #0]
 8003984:	49c6      	ldr	r1, [pc, #792]	; (8003ca0 <USB_ActivateEndpoint+0x6b4>)
 8003986:	430a      	orrs	r2, r1
 8003988:	b292      	uxth	r2, r2
 800398a:	801a      	strh	r2, [r3, #0]
 800398c:	e1c2      	b.n	8003d14 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	18d3      	adds	r3, r2, r3
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	b29a      	uxth	r2, r3
 800399c:	201e      	movs	r0, #30
 800399e:	183b      	adds	r3, r7, r0
 80039a0:	49be      	ldr	r1, [pc, #760]	; (8003c9c <USB_ActivateEndpoint+0x6b0>)
 80039a2:	400a      	ands	r2, r1
 80039a4:	801a      	strh	r2, [r3, #0]
 80039a6:	183b      	adds	r3, r7, r0
 80039a8:	183a      	adds	r2, r7, r0
 80039aa:	8812      	ldrh	r2, [r2, #0]
 80039ac:	2180      	movs	r1, #128	; 0x80
 80039ae:	0189      	lsls	r1, r1, #6
 80039b0:	404a      	eors	r2, r1
 80039b2:	801a      	strh	r2, [r3, #0]
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	18d3      	adds	r3, r2, r3
 80039be:	183a      	adds	r2, r7, r0
 80039c0:	8812      	ldrh	r2, [r2, #0]
 80039c2:	49b7      	ldr	r1, [pc, #732]	; (8003ca0 <USB_ActivateEndpoint+0x6b4>)
 80039c4:	430a      	orrs	r2, r1
 80039c6:	b292      	uxth	r2, r2
 80039c8:	801a      	strh	r2, [r3, #0]
 80039ca:	e1a3      	b.n	8003d14 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	78db      	ldrb	r3, [r3, #3]
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d117      	bne.n	8003a04 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	18d3      	adds	r3, r2, r3
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	2062      	movs	r0, #98	; 0x62
 80039e4:	183b      	adds	r3, r7, r0
 80039e6:	49ab      	ldr	r1, [pc, #684]	; (8003c94 <USB_ActivateEndpoint+0x6a8>)
 80039e8:	400a      	ands	r2, r1
 80039ea:	801a      	strh	r2, [r3, #0]
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	18d3      	adds	r3, r2, r3
 80039f6:	183a      	adds	r2, r7, r0
 80039f8:	8812      	ldrh	r2, [r2, #0]
 80039fa:	49aa      	ldr	r1, [pc, #680]	; (8003ca4 <USB_ActivateEndpoint+0x6b8>)
 80039fc:	430a      	orrs	r2, r1
 80039fe:	b292      	uxth	r2, r2
 8003a00:	801a      	strh	r2, [r3, #0]
 8003a02:	e016      	b.n	8003a32 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	18d3      	adds	r3, r2, r3
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	2064      	movs	r0, #100	; 0x64
 8003a14:	183b      	adds	r3, r7, r0
 8003a16:	49a4      	ldr	r1, [pc, #656]	; (8003ca8 <USB_ActivateEndpoint+0x6bc>)
 8003a18:	400a      	ands	r2, r1
 8003a1a:	801a      	strh	r2, [r3, #0]
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	18d3      	adds	r3, r2, r3
 8003a26:	183a      	adds	r2, r7, r0
 8003a28:	8812      	ldrh	r2, [r2, #0]
 8003a2a:	499d      	ldr	r1, [pc, #628]	; (8003ca0 <USB_ActivateEndpoint+0x6b4>)
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	b292      	uxth	r2, r2
 8003a30:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2250      	movs	r2, #80	; 0x50
 8003a3a:	5a9b      	ldrh	r3, [r3, r2]
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	001a      	movs	r2, r3
 8003a40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a42:	189b      	adds	r3, r3, r2
 8003a44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	00da      	lsls	r2, r3, #3
 8003a4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a4e:	18d3      	adds	r3, r2, r3
 8003a50:	2280      	movs	r2, #128	; 0x80
 8003a52:	00d2      	lsls	r2, r2, #3
 8003a54:	4694      	mov	ip, r2
 8003a56:	4463      	add	r3, ip
 8003a58:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	891b      	ldrh	r3, [r3, #8]
 8003a5e:	085b      	lsrs	r3, r3, #1
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	18db      	adds	r3, r3, r3
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a68:	801a      	strh	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	657b      	str	r3, [r7, #84]	; 0x54
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2250      	movs	r2, #80	; 0x50
 8003a72:	5a9b      	ldrh	r3, [r3, r2]
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	001a      	movs	r2, r3
 8003a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a7a:	189b      	adds	r3, r3, r2
 8003a7c:	657b      	str	r3, [r7, #84]	; 0x54
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	00da      	lsls	r2, r3, #3
 8003a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a86:	18d3      	adds	r3, r2, r3
 8003a88:	4a88      	ldr	r2, [pc, #544]	; (8003cac <USB_ActivateEndpoint+0x6c0>)
 8003a8a:	4694      	mov	ip, r2
 8003a8c:	4463      	add	r3, ip
 8003a8e:	653b      	str	r3, [r7, #80]	; 0x50
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	895b      	ldrh	r3, [r3, #10]
 8003a94:	085b      	lsrs	r3, r3, #1
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	18db      	adds	r3, r3, r3
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a9e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	785b      	ldrb	r3, [r3, #1]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d000      	beq.n	8003aaa <USB_ActivateEndpoint+0x4be>
 8003aa8:	e087      	b.n	8003bba <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	18d2      	adds	r2, r2, r3
 8003ab4:	2140      	movs	r1, #64	; 0x40
 8003ab6:	187b      	adds	r3, r7, r1
 8003ab8:	8812      	ldrh	r2, [r2, #0]
 8003aba:	801a      	strh	r2, [r3, #0]
 8003abc:	187b      	adds	r3, r7, r1
 8003abe:	881a      	ldrh	r2, [r3, #0]
 8003ac0:	2380      	movs	r3, #128	; 0x80
 8003ac2:	01db      	lsls	r3, r3, #7
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	d016      	beq.n	8003af6 <USB_ActivateEndpoint+0x50a>
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	18d3      	adds	r3, r2, r3
 8003ad2:	881b      	ldrh	r3, [r3, #0]
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	203e      	movs	r0, #62	; 0x3e
 8003ad8:	183b      	adds	r3, r7, r0
 8003ada:	496e      	ldr	r1, [pc, #440]	; (8003c94 <USB_ActivateEndpoint+0x6a8>)
 8003adc:	400a      	ands	r2, r1
 8003ade:	801a      	strh	r2, [r3, #0]
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	18d3      	adds	r3, r2, r3
 8003aea:	183a      	adds	r2, r7, r0
 8003aec:	8812      	ldrh	r2, [r2, #0]
 8003aee:	496a      	ldr	r1, [pc, #424]	; (8003c98 <USB_ActivateEndpoint+0x6ac>)
 8003af0:	430a      	orrs	r2, r1
 8003af2:	b292      	uxth	r2, r2
 8003af4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	18d2      	adds	r2, r2, r3
 8003b00:	213c      	movs	r1, #60	; 0x3c
 8003b02:	187b      	adds	r3, r7, r1
 8003b04:	8812      	ldrh	r2, [r2, #0]
 8003b06:	801a      	strh	r2, [r3, #0]
 8003b08:	187b      	adds	r3, r7, r1
 8003b0a:	881b      	ldrh	r3, [r3, #0]
 8003b0c:	2240      	movs	r2, #64	; 0x40
 8003b0e:	4013      	ands	r3, r2
 8003b10:	d016      	beq.n	8003b40 <USB_ActivateEndpoint+0x554>
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	18d3      	adds	r3, r2, r3
 8003b1c:	881b      	ldrh	r3, [r3, #0]
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	203a      	movs	r0, #58	; 0x3a
 8003b22:	183b      	adds	r3, r7, r0
 8003b24:	495b      	ldr	r1, [pc, #364]	; (8003c94 <USB_ActivateEndpoint+0x6a8>)
 8003b26:	400a      	ands	r2, r1
 8003b28:	801a      	strh	r2, [r3, #0]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	18d3      	adds	r3, r2, r3
 8003b34:	183a      	adds	r2, r7, r0
 8003b36:	8812      	ldrh	r2, [r2, #0]
 8003b38:	495d      	ldr	r1, [pc, #372]	; (8003cb0 <USB_ActivateEndpoint+0x6c4>)
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	b292      	uxth	r2, r2
 8003b3e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	18d3      	adds	r3, r2, r3
 8003b4a:	881b      	ldrh	r3, [r3, #0]
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	2038      	movs	r0, #56	; 0x38
 8003b50:	183b      	adds	r3, r7, r0
 8003b52:	4952      	ldr	r1, [pc, #328]	; (8003c9c <USB_ActivateEndpoint+0x6b0>)
 8003b54:	400a      	ands	r2, r1
 8003b56:	801a      	strh	r2, [r3, #0]
 8003b58:	183b      	adds	r3, r7, r0
 8003b5a:	183a      	adds	r2, r7, r0
 8003b5c:	8812      	ldrh	r2, [r2, #0]
 8003b5e:	2180      	movs	r1, #128	; 0x80
 8003b60:	0149      	lsls	r1, r1, #5
 8003b62:	404a      	eors	r2, r1
 8003b64:	801a      	strh	r2, [r3, #0]
 8003b66:	183b      	adds	r3, r7, r0
 8003b68:	183a      	adds	r2, r7, r0
 8003b6a:	8812      	ldrh	r2, [r2, #0]
 8003b6c:	2180      	movs	r1, #128	; 0x80
 8003b6e:	0189      	lsls	r1, r1, #6
 8003b70:	404a      	eors	r2, r1
 8003b72:	801a      	strh	r2, [r3, #0]
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	18d3      	adds	r3, r2, r3
 8003b7e:	183a      	adds	r2, r7, r0
 8003b80:	8812      	ldrh	r2, [r2, #0]
 8003b82:	4947      	ldr	r1, [pc, #284]	; (8003ca0 <USB_ActivateEndpoint+0x6b4>)
 8003b84:	430a      	orrs	r2, r1
 8003b86:	b292      	uxth	r2, r2
 8003b88:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	18d3      	adds	r3, r2, r3
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	2036      	movs	r0, #54	; 0x36
 8003b9a:	183b      	adds	r3, r7, r0
 8003b9c:	4945      	ldr	r1, [pc, #276]	; (8003cb4 <USB_ActivateEndpoint+0x6c8>)
 8003b9e:	400a      	ands	r2, r1
 8003ba0:	801a      	strh	r2, [r3, #0]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	18d3      	adds	r3, r2, r3
 8003bac:	183a      	adds	r2, r7, r0
 8003bae:	8812      	ldrh	r2, [r2, #0]
 8003bb0:	493b      	ldr	r1, [pc, #236]	; (8003ca0 <USB_ActivateEndpoint+0x6b4>)
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	b292      	uxth	r2, r2
 8003bb6:	801a      	strh	r2, [r3, #0]
 8003bb8:	e0ac      	b.n	8003d14 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	18d2      	adds	r2, r2, r3
 8003bc4:	214e      	movs	r1, #78	; 0x4e
 8003bc6:	187b      	adds	r3, r7, r1
 8003bc8:	8812      	ldrh	r2, [r2, #0]
 8003bca:	801a      	strh	r2, [r3, #0]
 8003bcc:	187b      	adds	r3, r7, r1
 8003bce:	881a      	ldrh	r2, [r3, #0]
 8003bd0:	2380      	movs	r3, #128	; 0x80
 8003bd2:	01db      	lsls	r3, r3, #7
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	d016      	beq.n	8003c06 <USB_ActivateEndpoint+0x61a>
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	18d3      	adds	r3, r2, r3
 8003be2:	881b      	ldrh	r3, [r3, #0]
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	204c      	movs	r0, #76	; 0x4c
 8003be8:	183b      	adds	r3, r7, r0
 8003bea:	492a      	ldr	r1, [pc, #168]	; (8003c94 <USB_ActivateEndpoint+0x6a8>)
 8003bec:	400a      	ands	r2, r1
 8003bee:	801a      	strh	r2, [r3, #0]
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	18d3      	adds	r3, r2, r3
 8003bfa:	183a      	adds	r2, r7, r0
 8003bfc:	8812      	ldrh	r2, [r2, #0]
 8003bfe:	4926      	ldr	r1, [pc, #152]	; (8003c98 <USB_ActivateEndpoint+0x6ac>)
 8003c00:	430a      	orrs	r2, r1
 8003c02:	b292      	uxth	r2, r2
 8003c04:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	18d2      	adds	r2, r2, r3
 8003c10:	214a      	movs	r1, #74	; 0x4a
 8003c12:	187b      	adds	r3, r7, r1
 8003c14:	8812      	ldrh	r2, [r2, #0]
 8003c16:	801a      	strh	r2, [r3, #0]
 8003c18:	187b      	adds	r3, r7, r1
 8003c1a:	881b      	ldrh	r3, [r3, #0]
 8003c1c:	2240      	movs	r2, #64	; 0x40
 8003c1e:	4013      	ands	r3, r2
 8003c20:	d016      	beq.n	8003c50 <USB_ActivateEndpoint+0x664>
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	18d3      	adds	r3, r2, r3
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	2048      	movs	r0, #72	; 0x48
 8003c32:	183b      	adds	r3, r7, r0
 8003c34:	4917      	ldr	r1, [pc, #92]	; (8003c94 <USB_ActivateEndpoint+0x6a8>)
 8003c36:	400a      	ands	r2, r1
 8003c38:	801a      	strh	r2, [r3, #0]
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	18d3      	adds	r3, r2, r3
 8003c44:	183a      	adds	r2, r7, r0
 8003c46:	8812      	ldrh	r2, [r2, #0]
 8003c48:	4919      	ldr	r1, [pc, #100]	; (8003cb0 <USB_ActivateEndpoint+0x6c4>)
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	b292      	uxth	r2, r2
 8003c4e:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	78db      	ldrb	r3, [r3, #3]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d02f      	beq.n	8003cb8 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	18d3      	adds	r3, r2, r3
 8003c62:	881b      	ldrh	r3, [r3, #0]
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	2044      	movs	r0, #68	; 0x44
 8003c68:	183b      	adds	r3, r7, r0
 8003c6a:	4912      	ldr	r1, [pc, #72]	; (8003cb4 <USB_ActivateEndpoint+0x6c8>)
 8003c6c:	400a      	ands	r2, r1
 8003c6e:	801a      	strh	r2, [r3, #0]
 8003c70:	183b      	adds	r3, r7, r0
 8003c72:	183a      	adds	r2, r7, r0
 8003c74:	8812      	ldrh	r2, [r2, #0]
 8003c76:	2120      	movs	r1, #32
 8003c78:	404a      	eors	r2, r1
 8003c7a:	801a      	strh	r2, [r3, #0]
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	18d3      	adds	r3, r2, r3
 8003c86:	183a      	adds	r2, r7, r0
 8003c88:	8812      	ldrh	r2, [r2, #0]
 8003c8a:	4905      	ldr	r1, [pc, #20]	; (8003ca0 <USB_ActivateEndpoint+0x6b4>)
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	b292      	uxth	r2, r2
 8003c90:	801a      	strh	r2, [r3, #0]
 8003c92:	e028      	b.n	8003ce6 <USB_ActivateEndpoint+0x6fa>
 8003c94:	ffff8f8f 	.word	0xffff8f8f
 8003c98:	ffffc080 	.word	0xffffc080
 8003c9c:	ffffbf8f 	.word	0xffffbf8f
 8003ca0:	ffff8080 	.word	0xffff8080
 8003ca4:	ffff8180 	.word	0xffff8180
 8003ca8:	ffff8e8f 	.word	0xffff8e8f
 8003cac:	00000404 	.word	0x00000404
 8003cb0:	ffff80c0 	.word	0xffff80c0
 8003cb4:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	18d3      	adds	r3, r2, r3
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	2046      	movs	r0, #70	; 0x46
 8003cc8:	183b      	adds	r3, r7, r0
 8003cca:	4916      	ldr	r1, [pc, #88]	; (8003d24 <USB_ActivateEndpoint+0x738>)
 8003ccc:	400a      	ands	r2, r1
 8003cce:	801a      	strh	r2, [r3, #0]
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	18d3      	adds	r3, r2, r3
 8003cda:	183a      	adds	r2, r7, r0
 8003cdc:	8812      	ldrh	r2, [r2, #0]
 8003cde:	4912      	ldr	r1, [pc, #72]	; (8003d28 <USB_ActivateEndpoint+0x73c>)
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	b292      	uxth	r2, r2
 8003ce4:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	18d3      	adds	r3, r2, r3
 8003cf0:	881b      	ldrh	r3, [r3, #0]
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	2042      	movs	r0, #66	; 0x42
 8003cf6:	183b      	adds	r3, r7, r0
 8003cf8:	490c      	ldr	r1, [pc, #48]	; (8003d2c <USB_ActivateEndpoint+0x740>)
 8003cfa:	400a      	ands	r2, r1
 8003cfc:	801a      	strh	r2, [r3, #0]
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	18d3      	adds	r3, r2, r3
 8003d08:	183a      	adds	r2, r7, r0
 8003d0a:	8812      	ldrh	r2, [r2, #0]
 8003d0c:	4906      	ldr	r1, [pc, #24]	; (8003d28 <USB_ActivateEndpoint+0x73c>)
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	b292      	uxth	r2, r2
 8003d12:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8003d14:	236f      	movs	r3, #111	; 0x6f
 8003d16:	18fb      	adds	r3, r7, r3
 8003d18:	781b      	ldrb	r3, [r3, #0]
}
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	b01c      	add	sp, #112	; 0x70
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	ffff8fbf 	.word	0xffff8fbf
 8003d28:	ffff8080 	.word	0xffff8080
 8003d2c:	ffffbf8f 	.word	0xffffbf8f

08003d30 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08c      	sub	sp, #48	; 0x30
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	7b1b      	ldrb	r3, [r3, #12]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d000      	beq.n	8003d44 <USB_DeactivateEndpoint+0x14>
 8003d42:	e07e      	b.n	8003e42 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	785b      	ldrb	r3, [r3, #1]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d03c      	beq.n	8003dc6 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	18d2      	adds	r2, r2, r3
 8003d56:	210c      	movs	r1, #12
 8003d58:	187b      	adds	r3, r7, r1
 8003d5a:	8812      	ldrh	r2, [r2, #0]
 8003d5c:	801a      	strh	r2, [r3, #0]
 8003d5e:	187b      	adds	r3, r7, r1
 8003d60:	881b      	ldrh	r3, [r3, #0]
 8003d62:	2240      	movs	r2, #64	; 0x40
 8003d64:	4013      	ands	r3, r2
 8003d66:	d016      	beq.n	8003d96 <USB_DeactivateEndpoint+0x66>
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	18d3      	adds	r3, r2, r3
 8003d72:	881b      	ldrh	r3, [r3, #0]
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	200a      	movs	r0, #10
 8003d78:	183b      	adds	r3, r7, r0
 8003d7a:	49c7      	ldr	r1, [pc, #796]	; (8004098 <USB_DeactivateEndpoint+0x368>)
 8003d7c:	400a      	ands	r2, r1
 8003d7e:	801a      	strh	r2, [r3, #0]
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	18d3      	adds	r3, r2, r3
 8003d8a:	183a      	adds	r2, r7, r0
 8003d8c:	8812      	ldrh	r2, [r2, #0]
 8003d8e:	49c3      	ldr	r1, [pc, #780]	; (800409c <USB_DeactivateEndpoint+0x36c>)
 8003d90:	430a      	orrs	r2, r1
 8003d92:	b292      	uxth	r2, r2
 8003d94:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	18d3      	adds	r3, r2, r3
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	2008      	movs	r0, #8
 8003da6:	183b      	adds	r3, r7, r0
 8003da8:	49bd      	ldr	r1, [pc, #756]	; (80040a0 <USB_DeactivateEndpoint+0x370>)
 8003daa:	400a      	ands	r2, r1
 8003dac:	801a      	strh	r2, [r3, #0]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	18d3      	adds	r3, r2, r3
 8003db8:	183a      	adds	r2, r7, r0
 8003dba:	8812      	ldrh	r2, [r2, #0]
 8003dbc:	49b9      	ldr	r1, [pc, #740]	; (80040a4 <USB_DeactivateEndpoint+0x374>)
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	b292      	uxth	r2, r2
 8003dc2:	801a      	strh	r2, [r3, #0]
 8003dc4:	e163      	b.n	800408e <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	18d2      	adds	r2, r2, r3
 8003dd0:	2112      	movs	r1, #18
 8003dd2:	187b      	adds	r3, r7, r1
 8003dd4:	8812      	ldrh	r2, [r2, #0]
 8003dd6:	801a      	strh	r2, [r3, #0]
 8003dd8:	187b      	adds	r3, r7, r1
 8003dda:	881a      	ldrh	r2, [r3, #0]
 8003ddc:	2380      	movs	r3, #128	; 0x80
 8003dde:	01db      	lsls	r3, r3, #7
 8003de0:	4013      	ands	r3, r2
 8003de2:	d016      	beq.n	8003e12 <USB_DeactivateEndpoint+0xe2>
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	18d3      	adds	r3, r2, r3
 8003dee:	881b      	ldrh	r3, [r3, #0]
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	2010      	movs	r0, #16
 8003df4:	183b      	adds	r3, r7, r0
 8003df6:	49a8      	ldr	r1, [pc, #672]	; (8004098 <USB_DeactivateEndpoint+0x368>)
 8003df8:	400a      	ands	r2, r1
 8003dfa:	801a      	strh	r2, [r3, #0]
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	18d3      	adds	r3, r2, r3
 8003e06:	183a      	adds	r2, r7, r0
 8003e08:	8812      	ldrh	r2, [r2, #0]
 8003e0a:	49a7      	ldr	r1, [pc, #668]	; (80040a8 <USB_DeactivateEndpoint+0x378>)
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	b292      	uxth	r2, r2
 8003e10:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	18d3      	adds	r3, r2, r3
 8003e1c:	881b      	ldrh	r3, [r3, #0]
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	200e      	movs	r0, #14
 8003e22:	183b      	adds	r3, r7, r0
 8003e24:	49a1      	ldr	r1, [pc, #644]	; (80040ac <USB_DeactivateEndpoint+0x37c>)
 8003e26:	400a      	ands	r2, r1
 8003e28:	801a      	strh	r2, [r3, #0]
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	18d3      	adds	r3, r2, r3
 8003e34:	183a      	adds	r2, r7, r0
 8003e36:	8812      	ldrh	r2, [r2, #0]
 8003e38:	499a      	ldr	r1, [pc, #616]	; (80040a4 <USB_DeactivateEndpoint+0x374>)
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	b292      	uxth	r2, r2
 8003e3e:	801a      	strh	r2, [r3, #0]
 8003e40:	e125      	b.n	800408e <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	785b      	ldrb	r3, [r3, #1]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d000      	beq.n	8003e4c <USB_DeactivateEndpoint+0x11c>
 8003e4a:	e090      	b.n	8003f6e <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	18d2      	adds	r2, r2, r3
 8003e56:	2120      	movs	r1, #32
 8003e58:	187b      	adds	r3, r7, r1
 8003e5a:	8812      	ldrh	r2, [r2, #0]
 8003e5c:	801a      	strh	r2, [r3, #0]
 8003e5e:	187b      	adds	r3, r7, r1
 8003e60:	881a      	ldrh	r2, [r3, #0]
 8003e62:	2380      	movs	r3, #128	; 0x80
 8003e64:	01db      	lsls	r3, r3, #7
 8003e66:	4013      	ands	r3, r2
 8003e68:	d016      	beq.n	8003e98 <USB_DeactivateEndpoint+0x168>
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	18d3      	adds	r3, r2, r3
 8003e74:	881b      	ldrh	r3, [r3, #0]
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	201e      	movs	r0, #30
 8003e7a:	183b      	adds	r3, r7, r0
 8003e7c:	4986      	ldr	r1, [pc, #536]	; (8004098 <USB_DeactivateEndpoint+0x368>)
 8003e7e:	400a      	ands	r2, r1
 8003e80:	801a      	strh	r2, [r3, #0]
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	18d3      	adds	r3, r2, r3
 8003e8c:	183a      	adds	r2, r7, r0
 8003e8e:	8812      	ldrh	r2, [r2, #0]
 8003e90:	4985      	ldr	r1, [pc, #532]	; (80040a8 <USB_DeactivateEndpoint+0x378>)
 8003e92:	430a      	orrs	r2, r1
 8003e94:	b292      	uxth	r2, r2
 8003e96:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	18d2      	adds	r2, r2, r3
 8003ea2:	211c      	movs	r1, #28
 8003ea4:	187b      	adds	r3, r7, r1
 8003ea6:	8812      	ldrh	r2, [r2, #0]
 8003ea8:	801a      	strh	r2, [r3, #0]
 8003eaa:	187b      	adds	r3, r7, r1
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	2240      	movs	r2, #64	; 0x40
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	d016      	beq.n	8003ee2 <USB_DeactivateEndpoint+0x1b2>
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	18d3      	adds	r3, r2, r3
 8003ebe:	881b      	ldrh	r3, [r3, #0]
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	201a      	movs	r0, #26
 8003ec4:	183b      	adds	r3, r7, r0
 8003ec6:	4974      	ldr	r1, [pc, #464]	; (8004098 <USB_DeactivateEndpoint+0x368>)
 8003ec8:	400a      	ands	r2, r1
 8003eca:	801a      	strh	r2, [r3, #0]
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	18d3      	adds	r3, r2, r3
 8003ed6:	183a      	adds	r2, r7, r0
 8003ed8:	8812      	ldrh	r2, [r2, #0]
 8003eda:	4970      	ldr	r1, [pc, #448]	; (800409c <USB_DeactivateEndpoint+0x36c>)
 8003edc:	430a      	orrs	r2, r1
 8003ede:	b292      	uxth	r2, r2
 8003ee0:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	18d3      	adds	r3, r2, r3
 8003eec:	881b      	ldrh	r3, [r3, #0]
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	2018      	movs	r0, #24
 8003ef2:	183b      	adds	r3, r7, r0
 8003ef4:	4968      	ldr	r1, [pc, #416]	; (8004098 <USB_DeactivateEndpoint+0x368>)
 8003ef6:	400a      	ands	r2, r1
 8003ef8:	801a      	strh	r2, [r3, #0]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	18d3      	adds	r3, r2, r3
 8003f04:	183a      	adds	r2, r7, r0
 8003f06:	8812      	ldrh	r2, [r2, #0]
 8003f08:	4964      	ldr	r1, [pc, #400]	; (800409c <USB_DeactivateEndpoint+0x36c>)
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	b292      	uxth	r2, r2
 8003f0e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	18d3      	adds	r3, r2, r3
 8003f1a:	881b      	ldrh	r3, [r3, #0]
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	2016      	movs	r0, #22
 8003f20:	183b      	adds	r3, r7, r0
 8003f22:	4962      	ldr	r1, [pc, #392]	; (80040ac <USB_DeactivateEndpoint+0x37c>)
 8003f24:	400a      	ands	r2, r1
 8003f26:	801a      	strh	r2, [r3, #0]
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	18d3      	adds	r3, r2, r3
 8003f32:	183a      	adds	r2, r7, r0
 8003f34:	8812      	ldrh	r2, [r2, #0]
 8003f36:	495b      	ldr	r1, [pc, #364]	; (80040a4 <USB_DeactivateEndpoint+0x374>)
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	b292      	uxth	r2, r2
 8003f3c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	18d3      	adds	r3, r2, r3
 8003f48:	881b      	ldrh	r3, [r3, #0]
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	2014      	movs	r0, #20
 8003f4e:	183b      	adds	r3, r7, r0
 8003f50:	4953      	ldr	r1, [pc, #332]	; (80040a0 <USB_DeactivateEndpoint+0x370>)
 8003f52:	400a      	ands	r2, r1
 8003f54:	801a      	strh	r2, [r3, #0]
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	18d3      	adds	r3, r2, r3
 8003f60:	183a      	adds	r2, r7, r0
 8003f62:	8812      	ldrh	r2, [r2, #0]
 8003f64:	494f      	ldr	r1, [pc, #316]	; (80040a4 <USB_DeactivateEndpoint+0x374>)
 8003f66:	430a      	orrs	r2, r1
 8003f68:	b292      	uxth	r2, r2
 8003f6a:	801a      	strh	r2, [r3, #0]
 8003f6c:	e08f      	b.n	800408e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	18d2      	adds	r2, r2, r3
 8003f78:	212e      	movs	r1, #46	; 0x2e
 8003f7a:	187b      	adds	r3, r7, r1
 8003f7c:	8812      	ldrh	r2, [r2, #0]
 8003f7e:	801a      	strh	r2, [r3, #0]
 8003f80:	187b      	adds	r3, r7, r1
 8003f82:	881a      	ldrh	r2, [r3, #0]
 8003f84:	2380      	movs	r3, #128	; 0x80
 8003f86:	01db      	lsls	r3, r3, #7
 8003f88:	4013      	ands	r3, r2
 8003f8a:	d016      	beq.n	8003fba <USB_DeactivateEndpoint+0x28a>
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	18d3      	adds	r3, r2, r3
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	202c      	movs	r0, #44	; 0x2c
 8003f9c:	183b      	adds	r3, r7, r0
 8003f9e:	493e      	ldr	r1, [pc, #248]	; (8004098 <USB_DeactivateEndpoint+0x368>)
 8003fa0:	400a      	ands	r2, r1
 8003fa2:	801a      	strh	r2, [r3, #0]
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	18d3      	adds	r3, r2, r3
 8003fae:	183a      	adds	r2, r7, r0
 8003fb0:	8812      	ldrh	r2, [r2, #0]
 8003fb2:	493d      	ldr	r1, [pc, #244]	; (80040a8 <USB_DeactivateEndpoint+0x378>)
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	b292      	uxth	r2, r2
 8003fb8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	18d2      	adds	r2, r2, r3
 8003fc4:	212a      	movs	r1, #42	; 0x2a
 8003fc6:	187b      	adds	r3, r7, r1
 8003fc8:	8812      	ldrh	r2, [r2, #0]
 8003fca:	801a      	strh	r2, [r3, #0]
 8003fcc:	187b      	adds	r3, r7, r1
 8003fce:	881b      	ldrh	r3, [r3, #0]
 8003fd0:	2240      	movs	r2, #64	; 0x40
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	d016      	beq.n	8004004 <USB_DeactivateEndpoint+0x2d4>
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	18d3      	adds	r3, r2, r3
 8003fe0:	881b      	ldrh	r3, [r3, #0]
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	2028      	movs	r0, #40	; 0x28
 8003fe6:	183b      	adds	r3, r7, r0
 8003fe8:	492b      	ldr	r1, [pc, #172]	; (8004098 <USB_DeactivateEndpoint+0x368>)
 8003fea:	400a      	ands	r2, r1
 8003fec:	801a      	strh	r2, [r3, #0]
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	18d3      	adds	r3, r2, r3
 8003ff8:	183a      	adds	r2, r7, r0
 8003ffa:	8812      	ldrh	r2, [r2, #0]
 8003ffc:	4927      	ldr	r1, [pc, #156]	; (800409c <USB_DeactivateEndpoint+0x36c>)
 8003ffe:	430a      	orrs	r2, r1
 8004000:	b292      	uxth	r2, r2
 8004002:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	18d3      	adds	r3, r2, r3
 800400e:	881b      	ldrh	r3, [r3, #0]
 8004010:	b29a      	uxth	r2, r3
 8004012:	2026      	movs	r0, #38	; 0x26
 8004014:	183b      	adds	r3, r7, r0
 8004016:	4920      	ldr	r1, [pc, #128]	; (8004098 <USB_DeactivateEndpoint+0x368>)
 8004018:	400a      	ands	r2, r1
 800401a:	801a      	strh	r2, [r3, #0]
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	18d3      	adds	r3, r2, r3
 8004026:	183a      	adds	r2, r7, r0
 8004028:	8812      	ldrh	r2, [r2, #0]
 800402a:	491f      	ldr	r1, [pc, #124]	; (80040a8 <USB_DeactivateEndpoint+0x378>)
 800402c:	430a      	orrs	r2, r1
 800402e:	b292      	uxth	r2, r2
 8004030:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	18d3      	adds	r3, r2, r3
 800403c:	881b      	ldrh	r3, [r3, #0]
 800403e:	b29a      	uxth	r2, r3
 8004040:	2024      	movs	r0, #36	; 0x24
 8004042:	183b      	adds	r3, r7, r0
 8004044:	4916      	ldr	r1, [pc, #88]	; (80040a0 <USB_DeactivateEndpoint+0x370>)
 8004046:	400a      	ands	r2, r1
 8004048:	801a      	strh	r2, [r3, #0]
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	18d3      	adds	r3, r2, r3
 8004054:	183a      	adds	r2, r7, r0
 8004056:	8812      	ldrh	r2, [r2, #0]
 8004058:	4912      	ldr	r1, [pc, #72]	; (80040a4 <USB_DeactivateEndpoint+0x374>)
 800405a:	430a      	orrs	r2, r1
 800405c:	b292      	uxth	r2, r2
 800405e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	18d3      	adds	r3, r2, r3
 800406a:	881b      	ldrh	r3, [r3, #0]
 800406c:	b29a      	uxth	r2, r3
 800406e:	2022      	movs	r0, #34	; 0x22
 8004070:	183b      	adds	r3, r7, r0
 8004072:	490e      	ldr	r1, [pc, #56]	; (80040ac <USB_DeactivateEndpoint+0x37c>)
 8004074:	400a      	ands	r2, r1
 8004076:	801a      	strh	r2, [r3, #0]
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	18d3      	adds	r3, r2, r3
 8004082:	183a      	adds	r2, r7, r0
 8004084:	8812      	ldrh	r2, [r2, #0]
 8004086:	4907      	ldr	r1, [pc, #28]	; (80040a4 <USB_DeactivateEndpoint+0x374>)
 8004088:	430a      	orrs	r2, r1
 800408a:	b292      	uxth	r2, r2
 800408c:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	0018      	movs	r0, r3
 8004092:	46bd      	mov	sp, r7
 8004094:	b00c      	add	sp, #48	; 0x30
 8004096:	bd80      	pop	{r7, pc}
 8004098:	ffff8f8f 	.word	0xffff8f8f
 800409c:	ffff80c0 	.word	0xffff80c0
 80040a0:	ffff8fbf 	.word	0xffff8fbf
 80040a4:	ffff8080 	.word	0xffff8080
 80040a8:	ffffc080 	.word	0xffffc080
 80040ac:	ffffbf8f 	.word	0xffffbf8f

080040b0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80040b0:	b590      	push	{r4, r7, lr}
 80040b2:	b0c3      	sub	sp, #268	; 0x10c
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	785b      	ldrb	r3, [r3, #1]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d001      	beq.n	80040c6 <USB_EPStartXfer+0x16>
 80040c2:	f000 fd2d 	bl	8004b20 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	699a      	ldr	r2, [r3, #24]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d905      	bls.n	80040de <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	1d7a      	adds	r2, r7, #5
 80040d8:	32ff      	adds	r2, #255	; 0xff
 80040da:	6013      	str	r3, [r2, #0]
 80040dc:	e004      	b.n	80040e8 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	1d7a      	adds	r2, r7, #5
 80040e4:	32ff      	adds	r2, #255	; 0xff
 80040e6:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	7b1b      	ldrb	r3, [r3, #12]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d125      	bne.n	800413c <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	6959      	ldr	r1, [r3, #20]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	88da      	ldrh	r2, [r3, #6]
 80040f8:	1d7b      	adds	r3, r7, #5
 80040fa:	33ff      	adds	r3, #255	; 0xff
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	b29b      	uxth	r3, r3
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f001 fa47 	bl	8005594 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2250      	movs	r2, #80	; 0x50
 800410e:	5a9b      	ldrh	r3, [r3, r2]
 8004110:	b29b      	uxth	r3, r3
 8004112:	001a      	movs	r2, r3
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	189b      	adds	r3, r3, r2
 8004118:	613b      	str	r3, [r7, #16]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	00da      	lsls	r2, r3, #3
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	18d3      	adds	r3, r2, r3
 8004124:	4ad7      	ldr	r2, [pc, #860]	; (8004484 <USB_EPStartXfer+0x3d4>)
 8004126:	4694      	mov	ip, r2
 8004128:	4463      	add	r3, ip
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	1d7b      	adds	r3, r7, #5
 800412e:	33ff      	adds	r3, #255	; 0xff
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	801a      	strh	r2, [r3, #0]
 8004138:	f000 fccd 	bl	8004ad6 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	78db      	ldrb	r3, [r3, #3]
 8004140:	2b02      	cmp	r3, #2
 8004142:	d000      	beq.n	8004146 <USB_EPStartXfer+0x96>
 8004144:	e362      	b.n	800480c <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	6a1a      	ldr	r2, [r3, #32]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	429a      	cmp	r2, r3
 8004150:	d800      	bhi.n	8004154 <USB_EPStartXfer+0xa4>
 8004152:	e309      	b.n	8004768 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	18d3      	adds	r3, r2, r3
 800415e:	881b      	ldrh	r3, [r3, #0]
 8004160:	b29a      	uxth	r2, r3
 8004162:	2056      	movs	r0, #86	; 0x56
 8004164:	183b      	adds	r3, r7, r0
 8004166:	49c8      	ldr	r1, [pc, #800]	; (8004488 <USB_EPStartXfer+0x3d8>)
 8004168:	400a      	ands	r2, r1
 800416a:	801a      	strh	r2, [r3, #0]
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	18d3      	adds	r3, r2, r3
 8004176:	183a      	adds	r2, r7, r0
 8004178:	8812      	ldrh	r2, [r2, #0]
 800417a:	49c4      	ldr	r1, [pc, #784]	; (800448c <USB_EPStartXfer+0x3dc>)
 800417c:	430a      	orrs	r2, r1
 800417e:	b292      	uxth	r2, r2
 8004180:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	6a1a      	ldr	r2, [r3, #32]
 8004186:	1d7b      	adds	r3, r7, #5
 8004188:	33ff      	adds	r3, #255	; 0xff
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	1ad2      	subs	r2, r2, r3
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	18d3      	adds	r3, r2, r3
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	b29b      	uxth	r3, r3
 80041a0:	001a      	movs	r2, r3
 80041a2:	2340      	movs	r3, #64	; 0x40
 80041a4:	4013      	ands	r3, r2
 80041a6:	d100      	bne.n	80041aa <USB_EPStartXfer+0xfa>
 80041a8:	e176      	b.n	8004498 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	633b      	str	r3, [r7, #48]	; 0x30
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	785b      	ldrb	r3, [r3, #1]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d000      	beq.n	80041b8 <USB_EPStartXfer+0x108>
 80041b6:	e074      	b.n	80042a2 <USB_EPStartXfer+0x1f2>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2250      	movs	r2, #80	; 0x50
 80041c0:	5a9b      	ldrh	r3, [r3, r2]
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	001a      	movs	r2, r3
 80041c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c8:	189b      	adds	r3, r3, r2
 80041ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	00da      	lsls	r2, r3, #3
 80041d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d4:	18d3      	adds	r3, r2, r3
 80041d6:	4aae      	ldr	r2, [pc, #696]	; (8004490 <USB_EPStartXfer+0x3e0>)
 80041d8:	4694      	mov	ip, r2
 80041da:	4463      	add	r3, ip
 80041dc:	627b      	str	r3, [r7, #36]	; 0x24
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	881b      	ldrh	r3, [r3, #0]
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	059b      	lsls	r3, r3, #22
 80041e6:	0d9b      	lsrs	r3, r3, #22
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	801a      	strh	r2, [r3, #0]
 80041ee:	1d7b      	adds	r3, r7, #5
 80041f0:	33ff      	adds	r3, #255	; 0xff
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2b3e      	cmp	r3, #62	; 0x3e
 80041f6:	d924      	bls.n	8004242 <USB_EPStartXfer+0x192>
 80041f8:	1d7b      	adds	r3, r7, #5
 80041fa:	33ff      	adds	r3, #255	; 0xff
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	1c7a      	adds	r2, r7, #1
 8004202:	32ff      	adds	r2, #255	; 0xff
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	1d7b      	adds	r3, r7, #5
 8004208:	33ff      	adds	r3, #255	; 0xff
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	221f      	movs	r2, #31
 800420e:	4013      	ands	r3, r2
 8004210:	d106      	bne.n	8004220 <USB_EPStartXfer+0x170>
 8004212:	1c7b      	adds	r3, r7, #1
 8004214:	33ff      	adds	r3, #255	; 0xff
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	3b01      	subs	r3, #1
 800421a:	1c7a      	adds	r2, r7, #1
 800421c:	32ff      	adds	r2, #255	; 0xff
 800421e:	6013      	str	r3, [r2, #0]
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	881b      	ldrh	r3, [r3, #0]
 8004224:	b29a      	uxth	r2, r3
 8004226:	1c7b      	adds	r3, r7, #1
 8004228:	33ff      	adds	r3, #255	; 0xff
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	b29b      	uxth	r3, r3
 800422e:	029b      	lsls	r3, r3, #10
 8004230:	b29b      	uxth	r3, r3
 8004232:	4313      	orrs	r3, r2
 8004234:	b29b      	uxth	r3, r3
 8004236:	4a97      	ldr	r2, [pc, #604]	; (8004494 <USB_EPStartXfer+0x3e4>)
 8004238:	4313      	orrs	r3, r2
 800423a:	b29a      	uxth	r2, r3
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	801a      	strh	r2, [r3, #0]
 8004240:	e04a      	b.n	80042d8 <USB_EPStartXfer+0x228>
 8004242:	1d7b      	adds	r3, r7, #5
 8004244:	33ff      	adds	r3, #255	; 0xff
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d108      	bne.n	800425e <USB_EPStartXfer+0x1ae>
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	881b      	ldrh	r3, [r3, #0]
 8004250:	b29b      	uxth	r3, r3
 8004252:	4a90      	ldr	r2, [pc, #576]	; (8004494 <USB_EPStartXfer+0x3e4>)
 8004254:	4313      	orrs	r3, r2
 8004256:	b29a      	uxth	r2, r3
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	801a      	strh	r2, [r3, #0]
 800425c:	e03c      	b.n	80042d8 <USB_EPStartXfer+0x228>
 800425e:	1d7b      	adds	r3, r7, #5
 8004260:	33ff      	adds	r3, #255	; 0xff
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	085b      	lsrs	r3, r3, #1
 8004266:	1c7a      	adds	r2, r7, #1
 8004268:	32ff      	adds	r2, #255	; 0xff
 800426a:	6013      	str	r3, [r2, #0]
 800426c:	1d7b      	adds	r3, r7, #5
 800426e:	33ff      	adds	r3, #255	; 0xff
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2201      	movs	r2, #1
 8004274:	4013      	ands	r3, r2
 8004276:	d006      	beq.n	8004286 <USB_EPStartXfer+0x1d6>
 8004278:	1c7b      	adds	r3, r7, #1
 800427a:	33ff      	adds	r3, #255	; 0xff
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	3301      	adds	r3, #1
 8004280:	1c7a      	adds	r2, r7, #1
 8004282:	32ff      	adds	r2, #255	; 0xff
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	881b      	ldrh	r3, [r3, #0]
 800428a:	b29a      	uxth	r2, r3
 800428c:	1c7b      	adds	r3, r7, #1
 800428e:	33ff      	adds	r3, #255	; 0xff
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	b29b      	uxth	r3, r3
 8004294:	029b      	lsls	r3, r3, #10
 8004296:	b29b      	uxth	r3, r3
 8004298:	4313      	orrs	r3, r2
 800429a:	b29a      	uxth	r2, r3
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	801a      	strh	r2, [r3, #0]
 80042a0:	e01a      	b.n	80042d8 <USB_EPStartXfer+0x228>
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	785b      	ldrb	r3, [r3, #1]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d116      	bne.n	80042d8 <USB_EPStartXfer+0x228>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2250      	movs	r2, #80	; 0x50
 80042ae:	5a9b      	ldrh	r3, [r3, r2]
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	001a      	movs	r2, r3
 80042b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b6:	189b      	adds	r3, r3, r2
 80042b8:	633b      	str	r3, [r7, #48]	; 0x30
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	00da      	lsls	r2, r3, #3
 80042c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c2:	18d3      	adds	r3, r2, r3
 80042c4:	4a72      	ldr	r2, [pc, #456]	; (8004490 <USB_EPStartXfer+0x3e0>)
 80042c6:	4694      	mov	ip, r2
 80042c8:	4463      	add	r3, ip
 80042ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042cc:	1d7b      	adds	r3, r7, #5
 80042ce:	33ff      	adds	r3, #255	; 0xff
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80042d8:	2076      	movs	r0, #118	; 0x76
 80042da:	183b      	adds	r3, r7, r0
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	8952      	ldrh	r2, [r2, #10]
 80042e0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	6959      	ldr	r1, [r3, #20]
 80042e6:	1d7b      	adds	r3, r7, #5
 80042e8:	33ff      	adds	r3, #255	; 0xff
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	b29c      	uxth	r4, r3
 80042ee:	183b      	adds	r3, r7, r0
 80042f0:	881a      	ldrh	r2, [r3, #0]
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	0023      	movs	r3, r4
 80042f6:	f001 f94d 	bl	8005594 <USB_WritePMA>
            ep->xfer_buff += len;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	695a      	ldr	r2, [r3, #20]
 80042fe:	1d7b      	adds	r3, r7, #5
 8004300:	33ff      	adds	r3, #255	; 0xff
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	18d2      	adds	r2, r2, r3
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	6a1a      	ldr	r2, [r3, #32]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	429a      	cmp	r2, r3
 8004314:	d908      	bls.n	8004328 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	6a1a      	ldr	r2, [r3, #32]
 800431a:	1d7b      	adds	r3, r7, #5
 800431c:	33ff      	adds	r3, #255	; 0xff
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	1ad2      	subs	r2, r2, r3
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	621a      	str	r2, [r3, #32]
 8004326:	e007      	b.n	8004338 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	1d7a      	adds	r2, r7, #5
 800432e:	32ff      	adds	r2, #255	; 0xff
 8004330:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2200      	movs	r2, #0
 8004336:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	785b      	ldrb	r3, [r3, #1]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d000      	beq.n	8004342 <USB_EPStartXfer+0x292>
 8004340:	e070      	b.n	8004424 <USB_EPStartXfer+0x374>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	61bb      	str	r3, [r7, #24]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2250      	movs	r2, #80	; 0x50
 800434a:	5a9b      	ldrh	r3, [r3, r2]
 800434c:	b29b      	uxth	r3, r3
 800434e:	001a      	movs	r2, r3
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	189b      	adds	r3, r3, r2
 8004354:	61bb      	str	r3, [r7, #24]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	00da      	lsls	r2, r3, #3
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	18d3      	adds	r3, r2, r3
 8004360:	4a48      	ldr	r2, [pc, #288]	; (8004484 <USB_EPStartXfer+0x3d4>)
 8004362:	4694      	mov	ip, r2
 8004364:	4463      	add	r3, ip
 8004366:	617b      	str	r3, [r7, #20]
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	b29b      	uxth	r3, r3
 800436e:	059b      	lsls	r3, r3, #22
 8004370:	0d9b      	lsrs	r3, r3, #22
 8004372:	b29a      	uxth	r2, r3
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	801a      	strh	r2, [r3, #0]
 8004378:	1d7b      	adds	r3, r7, #5
 800437a:	33ff      	adds	r3, #255	; 0xff
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2b3e      	cmp	r3, #62	; 0x3e
 8004380:	d922      	bls.n	80043c8 <USB_EPStartXfer+0x318>
 8004382:	1d7b      	adds	r3, r7, #5
 8004384:	33ff      	adds	r3, #255	; 0xff
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	095b      	lsrs	r3, r3, #5
 800438a:	21fc      	movs	r1, #252	; 0xfc
 800438c:	187a      	adds	r2, r7, r1
 800438e:	6013      	str	r3, [r2, #0]
 8004390:	1d7b      	adds	r3, r7, #5
 8004392:	33ff      	adds	r3, #255	; 0xff
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	221f      	movs	r2, #31
 8004398:	4013      	ands	r3, r2
 800439a:	d104      	bne.n	80043a6 <USB_EPStartXfer+0x2f6>
 800439c:	187b      	adds	r3, r7, r1
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3b01      	subs	r3, #1
 80043a2:	187a      	adds	r2, r7, r1
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	23fc      	movs	r3, #252	; 0xfc
 80043ae:	18fb      	adds	r3, r7, r3
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	029b      	lsls	r3, r3, #10
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	4313      	orrs	r3, r2
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	4a35      	ldr	r2, [pc, #212]	; (8004494 <USB_EPStartXfer+0x3e4>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	801a      	strh	r2, [r3, #0]
 80043c6:	e04a      	b.n	800445e <USB_EPStartXfer+0x3ae>
 80043c8:	1d7b      	adds	r3, r7, #5
 80043ca:	33ff      	adds	r3, #255	; 0xff
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d108      	bne.n	80043e4 <USB_EPStartXfer+0x334>
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	881b      	ldrh	r3, [r3, #0]
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	4a2e      	ldr	r2, [pc, #184]	; (8004494 <USB_EPStartXfer+0x3e4>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	b29a      	uxth	r2, r3
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	801a      	strh	r2, [r3, #0]
 80043e2:	e03c      	b.n	800445e <USB_EPStartXfer+0x3ae>
 80043e4:	1d7b      	adds	r3, r7, #5
 80043e6:	33ff      	adds	r3, #255	; 0xff
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	085b      	lsrs	r3, r3, #1
 80043ec:	21fc      	movs	r1, #252	; 0xfc
 80043ee:	187a      	adds	r2, r7, r1
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	1d7b      	adds	r3, r7, #5
 80043f4:	33ff      	adds	r3, #255	; 0xff
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2201      	movs	r2, #1
 80043fa:	4013      	ands	r3, r2
 80043fc:	d004      	beq.n	8004408 <USB_EPStartXfer+0x358>
 80043fe:	187b      	adds	r3, r7, r1
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3301      	adds	r3, #1
 8004404:	187a      	adds	r2, r7, r1
 8004406:	6013      	str	r3, [r2, #0]
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	881b      	ldrh	r3, [r3, #0]
 800440c:	b29a      	uxth	r2, r3
 800440e:	23fc      	movs	r3, #252	; 0xfc
 8004410:	18fb      	adds	r3, r7, r3
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	b29b      	uxth	r3, r3
 8004416:	029b      	lsls	r3, r3, #10
 8004418:	b29b      	uxth	r3, r3
 800441a:	4313      	orrs	r3, r2
 800441c:	b29a      	uxth	r2, r3
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	801a      	strh	r2, [r3, #0]
 8004422:	e01c      	b.n	800445e <USB_EPStartXfer+0x3ae>
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	785b      	ldrb	r3, [r3, #1]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d118      	bne.n	800445e <USB_EPStartXfer+0x3ae>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	623b      	str	r3, [r7, #32]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2250      	movs	r2, #80	; 0x50
 8004434:	5a9b      	ldrh	r3, [r3, r2]
 8004436:	b29b      	uxth	r3, r3
 8004438:	001a      	movs	r2, r3
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	189b      	adds	r3, r3, r2
 800443e:	623b      	str	r3, [r7, #32]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	00da      	lsls	r2, r3, #3
 8004446:	6a3b      	ldr	r3, [r7, #32]
 8004448:	18d3      	adds	r3, r2, r3
 800444a:	4a0e      	ldr	r2, [pc, #56]	; (8004484 <USB_EPStartXfer+0x3d4>)
 800444c:	4694      	mov	ip, r2
 800444e:	4463      	add	r3, ip
 8004450:	61fb      	str	r3, [r7, #28]
 8004452:	1d7b      	adds	r3, r7, #5
 8004454:	33ff      	adds	r3, #255	; 0xff
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	b29a      	uxth	r2, r3
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800445e:	2076      	movs	r0, #118	; 0x76
 8004460:	183b      	adds	r3, r7, r0
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	8912      	ldrh	r2, [r2, #8]
 8004466:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	6959      	ldr	r1, [r3, #20]
 800446c:	1d7b      	adds	r3, r7, #5
 800446e:	33ff      	adds	r3, #255	; 0xff
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	b29c      	uxth	r4, r3
 8004474:	183b      	adds	r3, r7, r0
 8004476:	881a      	ldrh	r2, [r3, #0]
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	0023      	movs	r3, r4
 800447c:	f001 f88a 	bl	8005594 <USB_WritePMA>
 8004480:	e329      	b.n	8004ad6 <USB_EPStartXfer+0xa26>
 8004482:	46c0      	nop			; (mov r8, r8)
 8004484:	00000402 	.word	0x00000402
 8004488:	ffff8f8f 	.word	0xffff8f8f
 800448c:	ffff8180 	.word	0xffff8180
 8004490:	00000406 	.word	0x00000406
 8004494:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	785b      	ldrb	r3, [r3, #1]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d000      	beq.n	80044a2 <USB_EPStartXfer+0x3f2>
 80044a0:	e070      	b.n	8004584 <USB_EPStartXfer+0x4d4>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2250      	movs	r2, #80	; 0x50
 80044aa:	5a9b      	ldrh	r3, [r3, r2]
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	001a      	movs	r2, r3
 80044b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044b2:	189b      	adds	r3, r3, r2
 80044b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	00da      	lsls	r2, r3, #3
 80044bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044be:	18d3      	adds	r3, r2, r3
 80044c0:	4acd      	ldr	r2, [pc, #820]	; (80047f8 <USB_EPStartXfer+0x748>)
 80044c2:	4694      	mov	ip, r2
 80044c4:	4463      	add	r3, ip
 80044c6:	647b      	str	r3, [r7, #68]	; 0x44
 80044c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	059b      	lsls	r3, r3, #22
 80044d0:	0d9b      	lsrs	r3, r3, #22
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044d6:	801a      	strh	r2, [r3, #0]
 80044d8:	1d7b      	adds	r3, r7, #5
 80044da:	33ff      	adds	r3, #255	; 0xff
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2b3e      	cmp	r3, #62	; 0x3e
 80044e0:	d922      	bls.n	8004528 <USB_EPStartXfer+0x478>
 80044e2:	1d7b      	adds	r3, r7, #5
 80044e4:	33ff      	adds	r3, #255	; 0xff
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	095b      	lsrs	r3, r3, #5
 80044ea:	21f8      	movs	r1, #248	; 0xf8
 80044ec:	187a      	adds	r2, r7, r1
 80044ee:	6013      	str	r3, [r2, #0]
 80044f0:	1d7b      	adds	r3, r7, #5
 80044f2:	33ff      	adds	r3, #255	; 0xff
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	221f      	movs	r2, #31
 80044f8:	4013      	ands	r3, r2
 80044fa:	d104      	bne.n	8004506 <USB_EPStartXfer+0x456>
 80044fc:	187b      	adds	r3, r7, r1
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	3b01      	subs	r3, #1
 8004502:	187a      	adds	r2, r7, r1
 8004504:	6013      	str	r3, [r2, #0]
 8004506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004508:	881b      	ldrh	r3, [r3, #0]
 800450a:	b29a      	uxth	r2, r3
 800450c:	23f8      	movs	r3, #248	; 0xf8
 800450e:	18fb      	adds	r3, r7, r3
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	b29b      	uxth	r3, r3
 8004514:	029b      	lsls	r3, r3, #10
 8004516:	b29b      	uxth	r3, r3
 8004518:	4313      	orrs	r3, r2
 800451a:	b29b      	uxth	r3, r3
 800451c:	4ab7      	ldr	r2, [pc, #732]	; (80047fc <USB_EPStartXfer+0x74c>)
 800451e:	4313      	orrs	r3, r2
 8004520:	b29a      	uxth	r2, r3
 8004522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004524:	801a      	strh	r2, [r3, #0]
 8004526:	e04a      	b.n	80045be <USB_EPStartXfer+0x50e>
 8004528:	1d7b      	adds	r3, r7, #5
 800452a:	33ff      	adds	r3, #255	; 0xff
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d108      	bne.n	8004544 <USB_EPStartXfer+0x494>
 8004532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004534:	881b      	ldrh	r3, [r3, #0]
 8004536:	b29b      	uxth	r3, r3
 8004538:	4ab0      	ldr	r2, [pc, #704]	; (80047fc <USB_EPStartXfer+0x74c>)
 800453a:	4313      	orrs	r3, r2
 800453c:	b29a      	uxth	r2, r3
 800453e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004540:	801a      	strh	r2, [r3, #0]
 8004542:	e03c      	b.n	80045be <USB_EPStartXfer+0x50e>
 8004544:	1d7b      	adds	r3, r7, #5
 8004546:	33ff      	adds	r3, #255	; 0xff
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	085b      	lsrs	r3, r3, #1
 800454c:	21f8      	movs	r1, #248	; 0xf8
 800454e:	187a      	adds	r2, r7, r1
 8004550:	6013      	str	r3, [r2, #0]
 8004552:	1d7b      	adds	r3, r7, #5
 8004554:	33ff      	adds	r3, #255	; 0xff
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2201      	movs	r2, #1
 800455a:	4013      	ands	r3, r2
 800455c:	d004      	beq.n	8004568 <USB_EPStartXfer+0x4b8>
 800455e:	187b      	adds	r3, r7, r1
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	3301      	adds	r3, #1
 8004564:	187a      	adds	r2, r7, r1
 8004566:	6013      	str	r3, [r2, #0]
 8004568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800456a:	881b      	ldrh	r3, [r3, #0]
 800456c:	b29a      	uxth	r2, r3
 800456e:	23f8      	movs	r3, #248	; 0xf8
 8004570:	18fb      	adds	r3, r7, r3
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	b29b      	uxth	r3, r3
 8004576:	029b      	lsls	r3, r3, #10
 8004578:	b29b      	uxth	r3, r3
 800457a:	4313      	orrs	r3, r2
 800457c:	b29a      	uxth	r2, r3
 800457e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004580:	801a      	strh	r2, [r3, #0]
 8004582:	e01c      	b.n	80045be <USB_EPStartXfer+0x50e>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	785b      	ldrb	r3, [r3, #1]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d118      	bne.n	80045be <USB_EPStartXfer+0x50e>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	653b      	str	r3, [r7, #80]	; 0x50
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2250      	movs	r2, #80	; 0x50
 8004594:	5a9b      	ldrh	r3, [r3, r2]
 8004596:	b29b      	uxth	r3, r3
 8004598:	001a      	movs	r2, r3
 800459a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800459c:	189b      	adds	r3, r3, r2
 800459e:	653b      	str	r3, [r7, #80]	; 0x50
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	00da      	lsls	r2, r3, #3
 80045a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045a8:	18d3      	adds	r3, r2, r3
 80045aa:	4a93      	ldr	r2, [pc, #588]	; (80047f8 <USB_EPStartXfer+0x748>)
 80045ac:	4694      	mov	ip, r2
 80045ae:	4463      	add	r3, ip
 80045b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045b2:	1d7b      	adds	r3, r7, #5
 80045b4:	33ff      	adds	r3, #255	; 0xff
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80045be:	2076      	movs	r0, #118	; 0x76
 80045c0:	183b      	adds	r3, r7, r0
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	8912      	ldrh	r2, [r2, #8]
 80045c6:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	6959      	ldr	r1, [r3, #20]
 80045cc:	1d7b      	adds	r3, r7, #5
 80045ce:	33ff      	adds	r3, #255	; 0xff
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	b29c      	uxth	r4, r3
 80045d4:	183b      	adds	r3, r7, r0
 80045d6:	881a      	ldrh	r2, [r3, #0]
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	0023      	movs	r3, r4
 80045dc:	f000 ffda 	bl	8005594 <USB_WritePMA>
            ep->xfer_buff += len;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	695a      	ldr	r2, [r3, #20]
 80045e4:	1d7b      	adds	r3, r7, #5
 80045e6:	33ff      	adds	r3, #255	; 0xff
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	18d2      	adds	r2, r2, r3
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	6a1a      	ldr	r2, [r3, #32]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d908      	bls.n	800460e <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	6a1a      	ldr	r2, [r3, #32]
 8004600:	1d7b      	adds	r3, r7, #5
 8004602:	33ff      	adds	r3, #255	; 0xff
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	1ad2      	subs	r2, r2, r3
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	621a      	str	r2, [r3, #32]
 800460c:	e007      	b.n	800461e <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	1d7a      	adds	r2, r7, #5
 8004614:	32ff      	adds	r2, #255	; 0xff
 8004616:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	2200      	movs	r2, #0
 800461c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	643b      	str	r3, [r7, #64]	; 0x40
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	785b      	ldrb	r3, [r3, #1]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d000      	beq.n	800462c <USB_EPStartXfer+0x57c>
 800462a:	e070      	b.n	800470e <USB_EPStartXfer+0x65e>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2250      	movs	r2, #80	; 0x50
 8004634:	5a9b      	ldrh	r3, [r3, r2]
 8004636:	b29b      	uxth	r3, r3
 8004638:	001a      	movs	r2, r3
 800463a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463c:	189b      	adds	r3, r3, r2
 800463e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	00da      	lsls	r2, r3, #3
 8004646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004648:	18d3      	adds	r3, r2, r3
 800464a:	4a6d      	ldr	r2, [pc, #436]	; (8004800 <USB_EPStartXfer+0x750>)
 800464c:	4694      	mov	ip, r2
 800464e:	4463      	add	r3, ip
 8004650:	637b      	str	r3, [r7, #52]	; 0x34
 8004652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	b29b      	uxth	r3, r3
 8004658:	059b      	lsls	r3, r3, #22
 800465a:	0d9b      	lsrs	r3, r3, #22
 800465c:	b29a      	uxth	r2, r3
 800465e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004660:	801a      	strh	r2, [r3, #0]
 8004662:	1d7b      	adds	r3, r7, #5
 8004664:	33ff      	adds	r3, #255	; 0xff
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b3e      	cmp	r3, #62	; 0x3e
 800466a:	d922      	bls.n	80046b2 <USB_EPStartXfer+0x602>
 800466c:	1d7b      	adds	r3, r7, #5
 800466e:	33ff      	adds	r3, #255	; 0xff
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	095b      	lsrs	r3, r3, #5
 8004674:	21f4      	movs	r1, #244	; 0xf4
 8004676:	187a      	adds	r2, r7, r1
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	1d7b      	adds	r3, r7, #5
 800467c:	33ff      	adds	r3, #255	; 0xff
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	221f      	movs	r2, #31
 8004682:	4013      	ands	r3, r2
 8004684:	d104      	bne.n	8004690 <USB_EPStartXfer+0x5e0>
 8004686:	187b      	adds	r3, r7, r1
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	3b01      	subs	r3, #1
 800468c:	187a      	adds	r2, r7, r1
 800468e:	6013      	str	r3, [r2, #0]
 8004690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004692:	881b      	ldrh	r3, [r3, #0]
 8004694:	b29a      	uxth	r2, r3
 8004696:	23f4      	movs	r3, #244	; 0xf4
 8004698:	18fb      	adds	r3, r7, r3
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	b29b      	uxth	r3, r3
 800469e:	029b      	lsls	r3, r3, #10
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	4313      	orrs	r3, r2
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	4a55      	ldr	r2, [pc, #340]	; (80047fc <USB_EPStartXfer+0x74c>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ae:	801a      	strh	r2, [r3, #0]
 80046b0:	e048      	b.n	8004744 <USB_EPStartXfer+0x694>
 80046b2:	1d7b      	adds	r3, r7, #5
 80046b4:	33ff      	adds	r3, #255	; 0xff
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d108      	bne.n	80046ce <USB_EPStartXfer+0x61e>
 80046bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046be:	881b      	ldrh	r3, [r3, #0]
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	4a4e      	ldr	r2, [pc, #312]	; (80047fc <USB_EPStartXfer+0x74c>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ca:	801a      	strh	r2, [r3, #0]
 80046cc:	e03a      	b.n	8004744 <USB_EPStartXfer+0x694>
 80046ce:	1d7b      	adds	r3, r7, #5
 80046d0:	33ff      	adds	r3, #255	; 0xff
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	085b      	lsrs	r3, r3, #1
 80046d6:	21f4      	movs	r1, #244	; 0xf4
 80046d8:	187a      	adds	r2, r7, r1
 80046da:	6013      	str	r3, [r2, #0]
 80046dc:	1d7b      	adds	r3, r7, #5
 80046de:	33ff      	adds	r3, #255	; 0xff
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2201      	movs	r2, #1
 80046e4:	4013      	ands	r3, r2
 80046e6:	d004      	beq.n	80046f2 <USB_EPStartXfer+0x642>
 80046e8:	187b      	adds	r3, r7, r1
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3301      	adds	r3, #1
 80046ee:	187a      	adds	r2, r7, r1
 80046f0:	6013      	str	r3, [r2, #0]
 80046f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f4:	881b      	ldrh	r3, [r3, #0]
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	23f4      	movs	r3, #244	; 0xf4
 80046fa:	18fb      	adds	r3, r7, r3
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	b29b      	uxth	r3, r3
 8004700:	029b      	lsls	r3, r3, #10
 8004702:	b29b      	uxth	r3, r3
 8004704:	4313      	orrs	r3, r2
 8004706:	b29a      	uxth	r2, r3
 8004708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800470a:	801a      	strh	r2, [r3, #0]
 800470c:	e01a      	b.n	8004744 <USB_EPStartXfer+0x694>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	785b      	ldrb	r3, [r3, #1]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d116      	bne.n	8004744 <USB_EPStartXfer+0x694>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2250      	movs	r2, #80	; 0x50
 800471a:	5a9b      	ldrh	r3, [r3, r2]
 800471c:	b29b      	uxth	r3, r3
 800471e:	001a      	movs	r2, r3
 8004720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004722:	189b      	adds	r3, r3, r2
 8004724:	643b      	str	r3, [r7, #64]	; 0x40
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	00da      	lsls	r2, r3, #3
 800472c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800472e:	18d3      	adds	r3, r2, r3
 8004730:	4a33      	ldr	r2, [pc, #204]	; (8004800 <USB_EPStartXfer+0x750>)
 8004732:	4694      	mov	ip, r2
 8004734:	4463      	add	r3, ip
 8004736:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004738:	1d7b      	adds	r3, r7, #5
 800473a:	33ff      	adds	r3, #255	; 0xff
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	b29a      	uxth	r2, r3
 8004740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004742:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004744:	2076      	movs	r0, #118	; 0x76
 8004746:	183b      	adds	r3, r7, r0
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	8952      	ldrh	r2, [r2, #10]
 800474c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	6959      	ldr	r1, [r3, #20]
 8004752:	1d7b      	adds	r3, r7, #5
 8004754:	33ff      	adds	r3, #255	; 0xff
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	b29c      	uxth	r4, r3
 800475a:	183b      	adds	r3, r7, r0
 800475c:	881a      	ldrh	r2, [r3, #0]
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	0023      	movs	r3, r4
 8004762:	f000 ff17 	bl	8005594 <USB_WritePMA>
 8004766:	e1b6      	b.n	8004ad6 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	1d7a      	adds	r2, r7, #5
 800476e:	32ff      	adds	r2, #255	; 0xff
 8004770:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	18d3      	adds	r3, r2, r3
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	b29a      	uxth	r2, r3
 8004780:	2062      	movs	r0, #98	; 0x62
 8004782:	183b      	adds	r3, r7, r0
 8004784:	491f      	ldr	r1, [pc, #124]	; (8004804 <USB_EPStartXfer+0x754>)
 8004786:	400a      	ands	r2, r1
 8004788:	801a      	strh	r2, [r3, #0]
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	18d3      	adds	r3, r2, r3
 8004794:	183a      	adds	r2, r7, r0
 8004796:	8812      	ldrh	r2, [r2, #0]
 8004798:	491b      	ldr	r1, [pc, #108]	; (8004808 <USB_EPStartXfer+0x758>)
 800479a:	430a      	orrs	r2, r1
 800479c:	b292      	uxth	r2, r2
 800479e:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2250      	movs	r2, #80	; 0x50
 80047a8:	5a9b      	ldrh	r3, [r3, r2]
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	001a      	movs	r2, r3
 80047ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047b0:	189b      	adds	r3, r3, r2
 80047b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	00da      	lsls	r2, r3, #3
 80047ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047bc:	18d3      	adds	r3, r2, r3
 80047be:	4a0e      	ldr	r2, [pc, #56]	; (80047f8 <USB_EPStartXfer+0x748>)
 80047c0:	4694      	mov	ip, r2
 80047c2:	4463      	add	r3, ip
 80047c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80047c6:	1d7b      	adds	r3, r7, #5
 80047c8:	33ff      	adds	r3, #255	; 0xff
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047d0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80047d2:	2076      	movs	r0, #118	; 0x76
 80047d4:	183b      	adds	r3, r7, r0
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	8912      	ldrh	r2, [r2, #8]
 80047da:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	6959      	ldr	r1, [r3, #20]
 80047e0:	1d7b      	adds	r3, r7, #5
 80047e2:	33ff      	adds	r3, #255	; 0xff
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	b29c      	uxth	r4, r3
 80047e8:	183b      	adds	r3, r7, r0
 80047ea:	881a      	ldrh	r2, [r3, #0]
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	0023      	movs	r3, r4
 80047f0:	f000 fed0 	bl	8005594 <USB_WritePMA>
 80047f4:	e16f      	b.n	8004ad6 <USB_EPStartXfer+0xa26>
 80047f6:	46c0      	nop			; (mov r8, r8)
 80047f8:	00000402 	.word	0x00000402
 80047fc:	ffff8000 	.word	0xffff8000
 8004800:	00000406 	.word	0x00000406
 8004804:	ffff8e8f 	.word	0xffff8e8f
 8004808:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	6a1a      	ldr	r2, [r3, #32]
 8004810:	1d7b      	adds	r3, r7, #5
 8004812:	33ff      	adds	r3, #255	; 0xff
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	1ad2      	subs	r2, r2, r3
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	18d3      	adds	r3, r2, r3
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	b29b      	uxth	r3, r3
 800482a:	001a      	movs	r2, r3
 800482c:	2340      	movs	r3, #64	; 0x40
 800482e:	4013      	ands	r3, r2
 8004830:	d100      	bne.n	8004834 <USB_EPStartXfer+0x784>
 8004832:	e0a4      	b.n	800497e <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	673b      	str	r3, [r7, #112]	; 0x70
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	785b      	ldrb	r3, [r3, #1]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d000      	beq.n	8004842 <USB_EPStartXfer+0x792>
 8004840:	e070      	b.n	8004924 <USB_EPStartXfer+0x874>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	66bb      	str	r3, [r7, #104]	; 0x68
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2250      	movs	r2, #80	; 0x50
 800484a:	5a9b      	ldrh	r3, [r3, r2]
 800484c:	b29b      	uxth	r3, r3
 800484e:	001a      	movs	r2, r3
 8004850:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004852:	189b      	adds	r3, r3, r2
 8004854:	66bb      	str	r3, [r7, #104]	; 0x68
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	00da      	lsls	r2, r3, #3
 800485c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800485e:	18d3      	adds	r3, r2, r3
 8004860:	4abc      	ldr	r2, [pc, #752]	; (8004b54 <USB_EPStartXfer+0xaa4>)
 8004862:	4694      	mov	ip, r2
 8004864:	4463      	add	r3, ip
 8004866:	667b      	str	r3, [r7, #100]	; 0x64
 8004868:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800486a:	881b      	ldrh	r3, [r3, #0]
 800486c:	b29b      	uxth	r3, r3
 800486e:	059b      	lsls	r3, r3, #22
 8004870:	0d9b      	lsrs	r3, r3, #22
 8004872:	b29a      	uxth	r2, r3
 8004874:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004876:	801a      	strh	r2, [r3, #0]
 8004878:	1d7b      	adds	r3, r7, #5
 800487a:	33ff      	adds	r3, #255	; 0xff
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b3e      	cmp	r3, #62	; 0x3e
 8004880:	d922      	bls.n	80048c8 <USB_EPStartXfer+0x818>
 8004882:	1d7b      	adds	r3, r7, #5
 8004884:	33ff      	adds	r3, #255	; 0xff
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	095b      	lsrs	r3, r3, #5
 800488a:	21f0      	movs	r1, #240	; 0xf0
 800488c:	187a      	adds	r2, r7, r1
 800488e:	6013      	str	r3, [r2, #0]
 8004890:	1d7b      	adds	r3, r7, #5
 8004892:	33ff      	adds	r3, #255	; 0xff
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	221f      	movs	r2, #31
 8004898:	4013      	ands	r3, r2
 800489a:	d104      	bne.n	80048a6 <USB_EPStartXfer+0x7f6>
 800489c:	187b      	adds	r3, r7, r1
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	3b01      	subs	r3, #1
 80048a2:	187a      	adds	r2, r7, r1
 80048a4:	6013      	str	r3, [r2, #0]
 80048a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	23f0      	movs	r3, #240	; 0xf0
 80048ae:	18fb      	adds	r3, r7, r3
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	029b      	lsls	r3, r3, #10
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	4313      	orrs	r3, r2
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	4aa6      	ldr	r2, [pc, #664]	; (8004b58 <USB_EPStartXfer+0xaa8>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048c4:	801a      	strh	r2, [r3, #0]
 80048c6:	e048      	b.n	800495a <USB_EPStartXfer+0x8aa>
 80048c8:	1d7b      	adds	r3, r7, #5
 80048ca:	33ff      	adds	r3, #255	; 0xff
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d108      	bne.n	80048e4 <USB_EPStartXfer+0x834>
 80048d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	4a9f      	ldr	r2, [pc, #636]	; (8004b58 <USB_EPStartXfer+0xaa8>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	b29a      	uxth	r2, r3
 80048de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048e0:	801a      	strh	r2, [r3, #0]
 80048e2:	e03a      	b.n	800495a <USB_EPStartXfer+0x8aa>
 80048e4:	1d7b      	adds	r3, r7, #5
 80048e6:	33ff      	adds	r3, #255	; 0xff
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	085b      	lsrs	r3, r3, #1
 80048ec:	21f0      	movs	r1, #240	; 0xf0
 80048ee:	187a      	adds	r2, r7, r1
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	1d7b      	adds	r3, r7, #5
 80048f4:	33ff      	adds	r3, #255	; 0xff
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2201      	movs	r2, #1
 80048fa:	4013      	ands	r3, r2
 80048fc:	d004      	beq.n	8004908 <USB_EPStartXfer+0x858>
 80048fe:	187b      	adds	r3, r7, r1
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	3301      	adds	r3, #1
 8004904:	187a      	adds	r2, r7, r1
 8004906:	6013      	str	r3, [r2, #0]
 8004908:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800490a:	881b      	ldrh	r3, [r3, #0]
 800490c:	b29a      	uxth	r2, r3
 800490e:	23f0      	movs	r3, #240	; 0xf0
 8004910:	18fb      	adds	r3, r7, r3
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	b29b      	uxth	r3, r3
 8004916:	029b      	lsls	r3, r3, #10
 8004918:	b29b      	uxth	r3, r3
 800491a:	4313      	orrs	r3, r2
 800491c:	b29a      	uxth	r2, r3
 800491e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004920:	801a      	strh	r2, [r3, #0]
 8004922:	e01a      	b.n	800495a <USB_EPStartXfer+0x8aa>
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	785b      	ldrb	r3, [r3, #1]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d116      	bne.n	800495a <USB_EPStartXfer+0x8aa>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2250      	movs	r2, #80	; 0x50
 8004930:	5a9b      	ldrh	r3, [r3, r2]
 8004932:	b29b      	uxth	r3, r3
 8004934:	001a      	movs	r2, r3
 8004936:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004938:	189b      	adds	r3, r3, r2
 800493a:	673b      	str	r3, [r7, #112]	; 0x70
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	00da      	lsls	r2, r3, #3
 8004942:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004944:	18d3      	adds	r3, r2, r3
 8004946:	4a83      	ldr	r2, [pc, #524]	; (8004b54 <USB_EPStartXfer+0xaa4>)
 8004948:	4694      	mov	ip, r2
 800494a:	4463      	add	r3, ip
 800494c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800494e:	1d7b      	adds	r3, r7, #5
 8004950:	33ff      	adds	r3, #255	; 0xff
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	b29a      	uxth	r2, r3
 8004956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004958:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800495a:	2076      	movs	r0, #118	; 0x76
 800495c:	183b      	adds	r3, r7, r0
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	8952      	ldrh	r2, [r2, #10]
 8004962:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	6959      	ldr	r1, [r3, #20]
 8004968:	1d7b      	adds	r3, r7, #5
 800496a:	33ff      	adds	r3, #255	; 0xff
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	b29c      	uxth	r4, r3
 8004970:	183b      	adds	r3, r7, r0
 8004972:	881a      	ldrh	r2, [r3, #0]
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	0023      	movs	r3, r4
 8004978:	f000 fe0c 	bl	8005594 <USB_WritePMA>
 800497c:	e0ab      	b.n	8004ad6 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	785b      	ldrb	r3, [r3, #1]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d000      	beq.n	8004988 <USB_EPStartXfer+0x8d8>
 8004986:	e070      	b.n	8004a6a <USB_EPStartXfer+0x9ba>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2250      	movs	r2, #80	; 0x50
 8004990:	5a9b      	ldrh	r3, [r3, r2]
 8004992:	b29b      	uxth	r3, r3
 8004994:	001a      	movs	r2, r3
 8004996:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004998:	189b      	adds	r3, r3, r2
 800499a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	00da      	lsls	r2, r3, #3
 80049a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80049a4:	18d3      	adds	r3, r2, r3
 80049a6:	4a6d      	ldr	r2, [pc, #436]	; (8004b5c <USB_EPStartXfer+0xaac>)
 80049a8:	4694      	mov	ip, r2
 80049aa:	4463      	add	r3, ip
 80049ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80049ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	059b      	lsls	r3, r3, #22
 80049b6:	0d9b      	lsrs	r3, r3, #22
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049bc:	801a      	strh	r2, [r3, #0]
 80049be:	1d7b      	adds	r3, r7, #5
 80049c0:	33ff      	adds	r3, #255	; 0xff
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2b3e      	cmp	r3, #62	; 0x3e
 80049c6:	d922      	bls.n	8004a0e <USB_EPStartXfer+0x95e>
 80049c8:	1d7b      	adds	r3, r7, #5
 80049ca:	33ff      	adds	r3, #255	; 0xff
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	095b      	lsrs	r3, r3, #5
 80049d0:	21ec      	movs	r1, #236	; 0xec
 80049d2:	187a      	adds	r2, r7, r1
 80049d4:	6013      	str	r3, [r2, #0]
 80049d6:	1d7b      	adds	r3, r7, #5
 80049d8:	33ff      	adds	r3, #255	; 0xff
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	221f      	movs	r2, #31
 80049de:	4013      	ands	r3, r2
 80049e0:	d104      	bne.n	80049ec <USB_EPStartXfer+0x93c>
 80049e2:	187b      	adds	r3, r7, r1
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	187a      	adds	r2, r7, r1
 80049ea:	6013      	str	r3, [r2, #0]
 80049ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049ee:	881b      	ldrh	r3, [r3, #0]
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	23ec      	movs	r3, #236	; 0xec
 80049f4:	18fb      	adds	r3, r7, r3
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	029b      	lsls	r3, r3, #10
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	4313      	orrs	r3, r2
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	4a55      	ldr	r2, [pc, #340]	; (8004b58 <USB_EPStartXfer+0xaa8>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a0a:	801a      	strh	r2, [r3, #0]
 8004a0c:	e052      	b.n	8004ab4 <USB_EPStartXfer+0xa04>
 8004a0e:	1d7b      	adds	r3, r7, #5
 8004a10:	33ff      	adds	r3, #255	; 0xff
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d108      	bne.n	8004a2a <USB_EPStartXfer+0x97a>
 8004a18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	4a4e      	ldr	r2, [pc, #312]	; (8004b58 <USB_EPStartXfer+0xaa8>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a26:	801a      	strh	r2, [r3, #0]
 8004a28:	e044      	b.n	8004ab4 <USB_EPStartXfer+0xa04>
 8004a2a:	1d7b      	adds	r3, r7, #5
 8004a2c:	33ff      	adds	r3, #255	; 0xff
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	085b      	lsrs	r3, r3, #1
 8004a32:	21ec      	movs	r1, #236	; 0xec
 8004a34:	187a      	adds	r2, r7, r1
 8004a36:	6013      	str	r3, [r2, #0]
 8004a38:	1d7b      	adds	r3, r7, #5
 8004a3a:	33ff      	adds	r3, #255	; 0xff
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	4013      	ands	r3, r2
 8004a42:	d004      	beq.n	8004a4e <USB_EPStartXfer+0x99e>
 8004a44:	187b      	adds	r3, r7, r1
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	187a      	adds	r2, r7, r1
 8004a4c:	6013      	str	r3, [r2, #0]
 8004a4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	23ec      	movs	r3, #236	; 0xec
 8004a56:	18fb      	adds	r3, r7, r3
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	029b      	lsls	r3, r3, #10
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	4313      	orrs	r3, r2
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a66:	801a      	strh	r2, [r3, #0]
 8004a68:	e024      	b.n	8004ab4 <USB_EPStartXfer+0xa04>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	785b      	ldrb	r3, [r3, #1]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d120      	bne.n	8004ab4 <USB_EPStartXfer+0xa04>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2184      	movs	r1, #132	; 0x84
 8004a76:	187a      	adds	r2, r7, r1
 8004a78:	6013      	str	r3, [r2, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2250      	movs	r2, #80	; 0x50
 8004a7e:	5a9b      	ldrh	r3, [r3, r2]
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	001a      	movs	r2, r3
 8004a84:	187b      	adds	r3, r7, r1
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	189b      	adds	r3, r3, r2
 8004a8a:	187a      	adds	r2, r7, r1
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	00da      	lsls	r2, r3, #3
 8004a94:	187b      	adds	r3, r7, r1
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	18d3      	adds	r3, r2, r3
 8004a9a:	4a30      	ldr	r2, [pc, #192]	; (8004b5c <USB_EPStartXfer+0xaac>)
 8004a9c:	4694      	mov	ip, r2
 8004a9e:	4463      	add	r3, ip
 8004aa0:	2180      	movs	r1, #128	; 0x80
 8004aa2:	187a      	adds	r2, r7, r1
 8004aa4:	6013      	str	r3, [r2, #0]
 8004aa6:	1d7b      	adds	r3, r7, #5
 8004aa8:	33ff      	adds	r3, #255	; 0xff
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	187b      	adds	r3, r7, r1
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004ab4:	2076      	movs	r0, #118	; 0x76
 8004ab6:	183b      	adds	r3, r7, r0
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	8912      	ldrh	r2, [r2, #8]
 8004abc:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	6959      	ldr	r1, [r3, #20]
 8004ac2:	1d7b      	adds	r3, r7, #5
 8004ac4:	33ff      	adds	r3, #255	; 0xff
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	b29c      	uxth	r4, r3
 8004aca:	183b      	adds	r3, r7, r0
 8004acc:	881a      	ldrh	r2, [r3, #0]
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	0023      	movs	r3, r4
 8004ad2:	f000 fd5f 	bl	8005594 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	18d3      	adds	r3, r2, r3
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	200a      	movs	r0, #10
 8004ae6:	183b      	adds	r3, r7, r0
 8004ae8:	491d      	ldr	r1, [pc, #116]	; (8004b60 <USB_EPStartXfer+0xab0>)
 8004aea:	400a      	ands	r2, r1
 8004aec:	801a      	strh	r2, [r3, #0]
 8004aee:	183b      	adds	r3, r7, r0
 8004af0:	183a      	adds	r2, r7, r0
 8004af2:	8812      	ldrh	r2, [r2, #0]
 8004af4:	2110      	movs	r1, #16
 8004af6:	404a      	eors	r2, r1
 8004af8:	801a      	strh	r2, [r3, #0]
 8004afa:	183b      	adds	r3, r7, r0
 8004afc:	183a      	adds	r2, r7, r0
 8004afe:	8812      	ldrh	r2, [r2, #0]
 8004b00:	2120      	movs	r1, #32
 8004b02:	404a      	eors	r2, r1
 8004b04:	801a      	strh	r2, [r3, #0]
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	18d3      	adds	r3, r2, r3
 8004b10:	183a      	adds	r2, r7, r0
 8004b12:	8812      	ldrh	r2, [r2, #0]
 8004b14:	4913      	ldr	r1, [pc, #76]	; (8004b64 <USB_EPStartXfer+0xab4>)
 8004b16:	430a      	orrs	r2, r1
 8004b18:	b292      	uxth	r2, r2
 8004b1a:	801a      	strh	r2, [r3, #0]
 8004b1c:	f000 fbf4 	bl	8005308 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	7b1b      	ldrb	r3, [r3, #12]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d000      	beq.n	8004b2a <USB_EPStartXfer+0xa7a>
 8004b28:	e0a9      	b.n	8004c7e <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	699a      	ldr	r2, [r3, #24]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d918      	bls.n	8004b68 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	1d7a      	adds	r2, r7, #5
 8004b3c:	32ff      	adds	r2, #255	; 0xff
 8004b3e:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	699a      	ldr	r2, [r3, #24]
 8004b44:	1d7b      	adds	r3, r7, #5
 8004b46:	33ff      	adds	r3, #255	; 0xff
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	1ad2      	subs	r2, r2, r3
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	619a      	str	r2, [r3, #24]
 8004b50:	e012      	b.n	8004b78 <USB_EPStartXfer+0xac8>
 8004b52:	46c0      	nop			; (mov r8, r8)
 8004b54:	00000406 	.word	0x00000406
 8004b58:	ffff8000 	.word	0xffff8000
 8004b5c:	00000402 	.word	0x00000402
 8004b60:	ffff8fbf 	.word	0xffff8fbf
 8004b64:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	1d7a      	adds	r2, r7, #5
 8004b6e:	32ff      	adds	r2, #255	; 0xff
 8004b70:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2200      	movs	r2, #0
 8004b76:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2190      	movs	r1, #144	; 0x90
 8004b7c:	187a      	adds	r2, r7, r1
 8004b7e:	6013      	str	r3, [r2, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2250      	movs	r2, #80	; 0x50
 8004b84:	5a9b      	ldrh	r3, [r3, r2]
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	001a      	movs	r2, r3
 8004b8a:	187b      	adds	r3, r7, r1
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	189b      	adds	r3, r3, r2
 8004b90:	187a      	adds	r2, r7, r1
 8004b92:	6013      	str	r3, [r2, #0]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	00da      	lsls	r2, r3, #3
 8004b9a:	187b      	adds	r3, r7, r1
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	18d3      	adds	r3, r2, r3
 8004ba0:	4acf      	ldr	r2, [pc, #828]	; (8004ee0 <USB_EPStartXfer+0xe30>)
 8004ba2:	4694      	mov	ip, r2
 8004ba4:	4463      	add	r3, ip
 8004ba6:	218c      	movs	r1, #140	; 0x8c
 8004ba8:	187a      	adds	r2, r7, r1
 8004baa:	6013      	str	r3, [r2, #0]
 8004bac:	187b      	adds	r3, r7, r1
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	059b      	lsls	r3, r3, #22
 8004bb6:	0d9b      	lsrs	r3, r3, #22
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	187b      	adds	r3, r7, r1
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	801a      	strh	r2, [r3, #0]
 8004bc0:	1d7b      	adds	r3, r7, #5
 8004bc2:	33ff      	adds	r3, #255	; 0xff
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2b3e      	cmp	r3, #62	; 0x3e
 8004bc8:	d925      	bls.n	8004c16 <USB_EPStartXfer+0xb66>
 8004bca:	1d7b      	adds	r3, r7, #5
 8004bcc:	33ff      	adds	r3, #255	; 0xff
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	095b      	lsrs	r3, r3, #5
 8004bd2:	21e8      	movs	r1, #232	; 0xe8
 8004bd4:	187a      	adds	r2, r7, r1
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	1d7b      	adds	r3, r7, #5
 8004bda:	33ff      	adds	r3, #255	; 0xff
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	221f      	movs	r2, #31
 8004be0:	4013      	ands	r3, r2
 8004be2:	d104      	bne.n	8004bee <USB_EPStartXfer+0xb3e>
 8004be4:	187b      	adds	r3, r7, r1
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	3b01      	subs	r3, #1
 8004bea:	187a      	adds	r2, r7, r1
 8004bec:	6013      	str	r3, [r2, #0]
 8004bee:	218c      	movs	r1, #140	; 0x8c
 8004bf0:	187b      	adds	r3, r7, r1
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	881b      	ldrh	r3, [r3, #0]
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	23e8      	movs	r3, #232	; 0xe8
 8004bfa:	18fb      	adds	r3, r7, r3
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	029b      	lsls	r3, r3, #10
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	4313      	orrs	r3, r2
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	4ab6      	ldr	r2, [pc, #728]	; (8004ee4 <USB_EPStartXfer+0xe34>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	187b      	adds	r3, r7, r1
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	801a      	strh	r2, [r3, #0]
 8004c14:	e353      	b.n	80052be <USB_EPStartXfer+0x120e>
 8004c16:	1d7b      	adds	r3, r7, #5
 8004c18:	33ff      	adds	r3, #255	; 0xff
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10b      	bne.n	8004c38 <USB_EPStartXfer+0xb88>
 8004c20:	218c      	movs	r1, #140	; 0x8c
 8004c22:	187b      	adds	r3, r7, r1
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	881b      	ldrh	r3, [r3, #0]
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	4aae      	ldr	r2, [pc, #696]	; (8004ee4 <USB_EPStartXfer+0xe34>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	187b      	adds	r3, r7, r1
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	801a      	strh	r2, [r3, #0]
 8004c36:	e342      	b.n	80052be <USB_EPStartXfer+0x120e>
 8004c38:	1d7b      	adds	r3, r7, #5
 8004c3a:	33ff      	adds	r3, #255	; 0xff
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	085b      	lsrs	r3, r3, #1
 8004c40:	21e8      	movs	r1, #232	; 0xe8
 8004c42:	187a      	adds	r2, r7, r1
 8004c44:	6013      	str	r3, [r2, #0]
 8004c46:	1d7b      	adds	r3, r7, #5
 8004c48:	33ff      	adds	r3, #255	; 0xff
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	4013      	ands	r3, r2
 8004c50:	d004      	beq.n	8004c5c <USB_EPStartXfer+0xbac>
 8004c52:	187b      	adds	r3, r7, r1
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3301      	adds	r3, #1
 8004c58:	187a      	adds	r2, r7, r1
 8004c5a:	6013      	str	r3, [r2, #0]
 8004c5c:	218c      	movs	r1, #140	; 0x8c
 8004c5e:	187b      	adds	r3, r7, r1
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	881b      	ldrh	r3, [r3, #0]
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	23e8      	movs	r3, #232	; 0xe8
 8004c68:	18fb      	adds	r3, r7, r3
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	029b      	lsls	r3, r3, #10
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	4313      	orrs	r3, r2
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	187b      	adds	r3, r7, r1
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	801a      	strh	r2, [r3, #0]
 8004c7c:	e31f      	b.n	80052be <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	78db      	ldrb	r3, [r3, #3]
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d000      	beq.n	8004c88 <USB_EPStartXfer+0xbd8>
 8004c86:	e191      	b.n	8004fac <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	785b      	ldrb	r3, [r3, #1]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d000      	beq.n	8004c92 <USB_EPStartXfer+0xbe2>
 8004c90:	e07c      	b.n	8004d8c <USB_EPStartXfer+0xcdc>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	21ac      	movs	r1, #172	; 0xac
 8004c96:	187a      	adds	r2, r7, r1
 8004c98:	6013      	str	r3, [r2, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2250      	movs	r2, #80	; 0x50
 8004c9e:	5a9b      	ldrh	r3, [r3, r2]
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	001a      	movs	r2, r3
 8004ca4:	187b      	adds	r3, r7, r1
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	189b      	adds	r3, r3, r2
 8004caa:	187a      	adds	r2, r7, r1
 8004cac:	6013      	str	r3, [r2, #0]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	00da      	lsls	r2, r3, #3
 8004cb4:	187b      	adds	r3, r7, r1
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	18d3      	adds	r3, r2, r3
 8004cba:	4a8b      	ldr	r2, [pc, #556]	; (8004ee8 <USB_EPStartXfer+0xe38>)
 8004cbc:	4694      	mov	ip, r2
 8004cbe:	4463      	add	r3, ip
 8004cc0:	21a8      	movs	r1, #168	; 0xa8
 8004cc2:	187a      	adds	r2, r7, r1
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	187b      	adds	r3, r7, r1
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	881b      	ldrh	r3, [r3, #0]
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	059b      	lsls	r3, r3, #22
 8004cd0:	0d9b      	lsrs	r3, r3, #22
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	187b      	adds	r3, r7, r1
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	801a      	strh	r2, [r3, #0]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	2b3e      	cmp	r3, #62	; 0x3e
 8004ce0:	d923      	bls.n	8004d2a <USB_EPStartXfer+0xc7a>
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	095b      	lsrs	r3, r3, #5
 8004ce8:	21e4      	movs	r1, #228	; 0xe4
 8004cea:	187a      	adds	r2, r7, r1
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	221f      	movs	r2, #31
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	d104      	bne.n	8004d02 <USB_EPStartXfer+0xc52>
 8004cf8:	187b      	adds	r3, r7, r1
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	187a      	adds	r2, r7, r1
 8004d00:	6013      	str	r3, [r2, #0]
 8004d02:	21a8      	movs	r1, #168	; 0xa8
 8004d04:	187b      	adds	r3, r7, r1
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	881b      	ldrh	r3, [r3, #0]
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	23e4      	movs	r3, #228	; 0xe4
 8004d0e:	18fb      	adds	r3, r7, r3
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	029b      	lsls	r3, r3, #10
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	4a71      	ldr	r2, [pc, #452]	; (8004ee4 <USB_EPStartXfer+0xe34>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	187b      	adds	r3, r7, r1
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	801a      	strh	r2, [r3, #0]
 8004d28:	e054      	b.n	8004dd4 <USB_EPStartXfer+0xd24>
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10b      	bne.n	8004d4a <USB_EPStartXfer+0xc9a>
 8004d32:	21a8      	movs	r1, #168	; 0xa8
 8004d34:	187b      	adds	r3, r7, r1
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	881b      	ldrh	r3, [r3, #0]
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	4a69      	ldr	r2, [pc, #420]	; (8004ee4 <USB_EPStartXfer+0xe34>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	187b      	adds	r3, r7, r1
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	801a      	strh	r2, [r3, #0]
 8004d48:	e044      	b.n	8004dd4 <USB_EPStartXfer+0xd24>
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	085b      	lsrs	r3, r3, #1
 8004d50:	21e4      	movs	r1, #228	; 0xe4
 8004d52:	187a      	adds	r2, r7, r1
 8004d54:	6013      	str	r3, [r2, #0]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	d004      	beq.n	8004d6a <USB_EPStartXfer+0xcba>
 8004d60:	187b      	adds	r3, r7, r1
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3301      	adds	r3, #1
 8004d66:	187a      	adds	r2, r7, r1
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	21a8      	movs	r1, #168	; 0xa8
 8004d6c:	187b      	adds	r3, r7, r1
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	23e4      	movs	r3, #228	; 0xe4
 8004d76:	18fb      	adds	r3, r7, r3
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	029b      	lsls	r3, r3, #10
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	4313      	orrs	r3, r2
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	187b      	adds	r3, r7, r1
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	801a      	strh	r2, [r3, #0]
 8004d8a:	e023      	b.n	8004dd4 <USB_EPStartXfer+0xd24>
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	785b      	ldrb	r3, [r3, #1]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d11f      	bne.n	8004dd4 <USB_EPStartXfer+0xd24>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	21b4      	movs	r1, #180	; 0xb4
 8004d98:	187a      	adds	r2, r7, r1
 8004d9a:	6013      	str	r3, [r2, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2250      	movs	r2, #80	; 0x50
 8004da0:	5a9b      	ldrh	r3, [r3, r2]
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	001a      	movs	r2, r3
 8004da6:	187b      	adds	r3, r7, r1
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	189b      	adds	r3, r3, r2
 8004dac:	187a      	adds	r2, r7, r1
 8004dae:	6013      	str	r3, [r2, #0]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	00da      	lsls	r2, r3, #3
 8004db6:	187b      	adds	r3, r7, r1
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	18d3      	adds	r3, r2, r3
 8004dbc:	4a4a      	ldr	r2, [pc, #296]	; (8004ee8 <USB_EPStartXfer+0xe38>)
 8004dbe:	4694      	mov	ip, r2
 8004dc0:	4463      	add	r3, ip
 8004dc2:	21b0      	movs	r1, #176	; 0xb0
 8004dc4:	187a      	adds	r2, r7, r1
 8004dc6:	6013      	str	r3, [r2, #0]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	187b      	adds	r3, r7, r1
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	801a      	strh	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	22a4      	movs	r2, #164	; 0xa4
 8004dd8:	18ba      	adds	r2, r7, r2
 8004dda:	6013      	str	r3, [r2, #0]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	785b      	ldrb	r3, [r3, #1]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d000      	beq.n	8004de6 <USB_EPStartXfer+0xd36>
 8004de4:	e082      	b.n	8004eec <USB_EPStartXfer+0xe3c>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	219c      	movs	r1, #156	; 0x9c
 8004dea:	187a      	adds	r2, r7, r1
 8004dec:	6013      	str	r3, [r2, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2250      	movs	r2, #80	; 0x50
 8004df2:	5a9b      	ldrh	r3, [r3, r2]
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	001a      	movs	r2, r3
 8004df8:	187b      	adds	r3, r7, r1
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	189b      	adds	r3, r3, r2
 8004dfe:	187a      	adds	r2, r7, r1
 8004e00:	6013      	str	r3, [r2, #0]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	00da      	lsls	r2, r3, #3
 8004e08:	187b      	adds	r3, r7, r1
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	18d3      	adds	r3, r2, r3
 8004e0e:	4a34      	ldr	r2, [pc, #208]	; (8004ee0 <USB_EPStartXfer+0xe30>)
 8004e10:	4694      	mov	ip, r2
 8004e12:	4463      	add	r3, ip
 8004e14:	2198      	movs	r1, #152	; 0x98
 8004e16:	187a      	adds	r2, r7, r1
 8004e18:	6013      	str	r3, [r2, #0]
 8004e1a:	187b      	adds	r3, r7, r1
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	059b      	lsls	r3, r3, #22
 8004e24:	0d9b      	lsrs	r3, r3, #22
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	187b      	adds	r3, r7, r1
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	801a      	strh	r2, [r3, #0]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	2b3e      	cmp	r3, #62	; 0x3e
 8004e34:	d923      	bls.n	8004e7e <USB_EPStartXfer+0xdce>
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	095b      	lsrs	r3, r3, #5
 8004e3c:	21e0      	movs	r1, #224	; 0xe0
 8004e3e:	187a      	adds	r2, r7, r1
 8004e40:	6013      	str	r3, [r2, #0]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	221f      	movs	r2, #31
 8004e48:	4013      	ands	r3, r2
 8004e4a:	d104      	bne.n	8004e56 <USB_EPStartXfer+0xda6>
 8004e4c:	187b      	adds	r3, r7, r1
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3b01      	subs	r3, #1
 8004e52:	187a      	adds	r2, r7, r1
 8004e54:	6013      	str	r3, [r2, #0]
 8004e56:	2198      	movs	r1, #152	; 0x98
 8004e58:	187b      	adds	r3, r7, r1
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	23e0      	movs	r3, #224	; 0xe0
 8004e62:	18fb      	adds	r3, r7, r3
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	029b      	lsls	r3, r3, #10
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	4a1c      	ldr	r2, [pc, #112]	; (8004ee4 <USB_EPStartXfer+0xe34>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	187b      	adds	r3, r7, r1
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	801a      	strh	r2, [r3, #0]
 8004e7c:	e057      	b.n	8004f2e <USB_EPStartXfer+0xe7e>
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10b      	bne.n	8004e9e <USB_EPStartXfer+0xdee>
 8004e86:	2198      	movs	r1, #152	; 0x98
 8004e88:	187b      	adds	r3, r7, r1
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	881b      	ldrh	r3, [r3, #0]
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	4a14      	ldr	r2, [pc, #80]	; (8004ee4 <USB_EPStartXfer+0xe34>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	187b      	adds	r3, r7, r1
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	801a      	strh	r2, [r3, #0]
 8004e9c:	e047      	b.n	8004f2e <USB_EPStartXfer+0xe7e>
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	085b      	lsrs	r3, r3, #1
 8004ea4:	21e0      	movs	r1, #224	; 0xe0
 8004ea6:	187a      	adds	r2, r7, r1
 8004ea8:	6013      	str	r3, [r2, #0]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	d004      	beq.n	8004ebe <USB_EPStartXfer+0xe0e>
 8004eb4:	187b      	adds	r3, r7, r1
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	187a      	adds	r2, r7, r1
 8004ebc:	6013      	str	r3, [r2, #0]
 8004ebe:	2198      	movs	r1, #152	; 0x98
 8004ec0:	187b      	adds	r3, r7, r1
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	881b      	ldrh	r3, [r3, #0]
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	23e0      	movs	r3, #224	; 0xe0
 8004eca:	18fb      	adds	r3, r7, r3
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	029b      	lsls	r3, r3, #10
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	187b      	adds	r3, r7, r1
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	801a      	strh	r2, [r3, #0]
 8004ede:	e026      	b.n	8004f2e <USB_EPStartXfer+0xe7e>
 8004ee0:	00000406 	.word	0x00000406
 8004ee4:	ffff8000 	.word	0xffff8000
 8004ee8:	00000402 	.word	0x00000402
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	785b      	ldrb	r3, [r3, #1]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d11c      	bne.n	8004f2e <USB_EPStartXfer+0xe7e>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2250      	movs	r2, #80	; 0x50
 8004ef8:	5a9b      	ldrh	r3, [r3, r2]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	001a      	movs	r2, r3
 8004efe:	21a4      	movs	r1, #164	; 0xa4
 8004f00:	187b      	adds	r3, r7, r1
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	189b      	adds	r3, r3, r2
 8004f06:	187a      	adds	r2, r7, r1
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	00da      	lsls	r2, r3, #3
 8004f10:	187b      	adds	r3, r7, r1
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	18d3      	adds	r3, r2, r3
 8004f16:	4ad2      	ldr	r2, [pc, #840]	; (8005260 <USB_EPStartXfer+0x11b0>)
 8004f18:	4694      	mov	ip, r2
 8004f1a:	4463      	add	r3, ip
 8004f1c:	21a0      	movs	r1, #160	; 0xa0
 8004f1e:	187a      	adds	r2, r7, r1
 8004f20:	6013      	str	r3, [r2, #0]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	187b      	adds	r3, r7, r1
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d100      	bne.n	8004f38 <USB_EPStartXfer+0xe88>
 8004f36:	e1c2      	b.n	80052be <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	18d2      	adds	r2, r2, r3
 8004f42:	2196      	movs	r1, #150	; 0x96
 8004f44:	187b      	adds	r3, r7, r1
 8004f46:	8812      	ldrh	r2, [r2, #0]
 8004f48:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004f4a:	187b      	adds	r3, r7, r1
 8004f4c:	881a      	ldrh	r2, [r3, #0]
 8004f4e:	2380      	movs	r3, #128	; 0x80
 8004f50:	01db      	lsls	r3, r3, #7
 8004f52:	4013      	ands	r3, r2
 8004f54:	d004      	beq.n	8004f60 <USB_EPStartXfer+0xeb0>
 8004f56:	187b      	adds	r3, r7, r1
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	2240      	movs	r2, #64	; 0x40
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	d10d      	bne.n	8004f7c <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004f60:	2196      	movs	r1, #150	; 0x96
 8004f62:	187b      	adds	r3, r7, r1
 8004f64:	881a      	ldrh	r2, [r3, #0]
 8004f66:	2380      	movs	r3, #128	; 0x80
 8004f68:	01db      	lsls	r3, r3, #7
 8004f6a:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004f6c:	d000      	beq.n	8004f70 <USB_EPStartXfer+0xec0>
 8004f6e:	e1a6      	b.n	80052be <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004f70:	187b      	adds	r3, r7, r1
 8004f72:	881b      	ldrh	r3, [r3, #0]
 8004f74:	2240      	movs	r2, #64	; 0x40
 8004f76:	4013      	ands	r3, r2
 8004f78:	d000      	beq.n	8004f7c <USB_EPStartXfer+0xecc>
 8004f7a:	e1a0      	b.n	80052be <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	18d3      	adds	r3, r2, r3
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	2094      	movs	r0, #148	; 0x94
 8004f8c:	183b      	adds	r3, r7, r0
 8004f8e:	49b5      	ldr	r1, [pc, #724]	; (8005264 <USB_EPStartXfer+0x11b4>)
 8004f90:	400a      	ands	r2, r1
 8004f92:	801a      	strh	r2, [r3, #0]
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	18d3      	adds	r3, r2, r3
 8004f9e:	183a      	adds	r2, r7, r0
 8004fa0:	8812      	ldrh	r2, [r2, #0]
 8004fa2:	49b1      	ldr	r1, [pc, #708]	; (8005268 <USB_EPStartXfer+0x11b8>)
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	b292      	uxth	r2, r2
 8004fa8:	801a      	strh	r2, [r3, #0]
 8004faa:	e188      	b.n	80052be <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	78db      	ldrb	r3, [r3, #3]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d000      	beq.n	8004fb6 <USB_EPStartXfer+0xf06>
 8004fb4:	e181      	b.n	80052ba <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	699a      	ldr	r2, [r3, #24]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d90d      	bls.n	8004fde <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	1d7a      	adds	r2, r7, #5
 8004fc8:	32ff      	adds	r2, #255	; 0xff
 8004fca:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	699a      	ldr	r2, [r3, #24]
 8004fd0:	1d7b      	adds	r3, r7, #5
 8004fd2:	33ff      	adds	r3, #255	; 0xff
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	1ad2      	subs	r2, r2, r3
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	619a      	str	r2, [r3, #24]
 8004fdc:	e007      	b.n	8004fee <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	1d7a      	adds	r2, r7, #5
 8004fe4:	32ff      	adds	r2, #255	; 0xff
 8004fe6:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	2200      	movs	r2, #0
 8004fec:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	785b      	ldrb	r3, [r3, #1]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d000      	beq.n	8004ff8 <USB_EPStartXfer+0xf48>
 8004ff6:	e082      	b.n	80050fe <USB_EPStartXfer+0x104e>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	21cc      	movs	r1, #204	; 0xcc
 8004ffc:	187a      	adds	r2, r7, r1
 8004ffe:	6013      	str	r3, [r2, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2250      	movs	r2, #80	; 0x50
 8005004:	5a9b      	ldrh	r3, [r3, r2]
 8005006:	b29b      	uxth	r3, r3
 8005008:	001a      	movs	r2, r3
 800500a:	187b      	adds	r3, r7, r1
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	189b      	adds	r3, r3, r2
 8005010:	187a      	adds	r2, r7, r1
 8005012:	6013      	str	r3, [r2, #0]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	00da      	lsls	r2, r3, #3
 800501a:	187b      	adds	r3, r7, r1
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	18d3      	adds	r3, r2, r3
 8005020:	4a92      	ldr	r2, [pc, #584]	; (800526c <USB_EPStartXfer+0x11bc>)
 8005022:	4694      	mov	ip, r2
 8005024:	4463      	add	r3, ip
 8005026:	21c8      	movs	r1, #200	; 0xc8
 8005028:	187a      	adds	r2, r7, r1
 800502a:	6013      	str	r3, [r2, #0]
 800502c:	187b      	adds	r3, r7, r1
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	881b      	ldrh	r3, [r3, #0]
 8005032:	b29b      	uxth	r3, r3
 8005034:	059b      	lsls	r3, r3, #22
 8005036:	0d9b      	lsrs	r3, r3, #22
 8005038:	b29a      	uxth	r2, r3
 800503a:	187b      	adds	r3, r7, r1
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	801a      	strh	r2, [r3, #0]
 8005040:	1d7b      	adds	r3, r7, #5
 8005042:	33ff      	adds	r3, #255	; 0xff
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2b3e      	cmp	r3, #62	; 0x3e
 8005048:	d925      	bls.n	8005096 <USB_EPStartXfer+0xfe6>
 800504a:	1d7b      	adds	r3, r7, #5
 800504c:	33ff      	adds	r3, #255	; 0xff
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	095b      	lsrs	r3, r3, #5
 8005052:	21dc      	movs	r1, #220	; 0xdc
 8005054:	187a      	adds	r2, r7, r1
 8005056:	6013      	str	r3, [r2, #0]
 8005058:	1d7b      	adds	r3, r7, #5
 800505a:	33ff      	adds	r3, #255	; 0xff
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	221f      	movs	r2, #31
 8005060:	4013      	ands	r3, r2
 8005062:	d104      	bne.n	800506e <USB_EPStartXfer+0xfbe>
 8005064:	187b      	adds	r3, r7, r1
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	3b01      	subs	r3, #1
 800506a:	187a      	adds	r2, r7, r1
 800506c:	6013      	str	r3, [r2, #0]
 800506e:	21c8      	movs	r1, #200	; 0xc8
 8005070:	187b      	adds	r3, r7, r1
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	881b      	ldrh	r3, [r3, #0]
 8005076:	b29a      	uxth	r2, r3
 8005078:	23dc      	movs	r3, #220	; 0xdc
 800507a:	18fb      	adds	r3, r7, r3
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	b29b      	uxth	r3, r3
 8005080:	029b      	lsls	r3, r3, #10
 8005082:	b29b      	uxth	r3, r3
 8005084:	4313      	orrs	r3, r2
 8005086:	b29b      	uxth	r3, r3
 8005088:	4a79      	ldr	r2, [pc, #484]	; (8005270 <USB_EPStartXfer+0x11c0>)
 800508a:	4313      	orrs	r3, r2
 800508c:	b29a      	uxth	r2, r3
 800508e:	187b      	adds	r3, r7, r1
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	801a      	strh	r2, [r3, #0]
 8005094:	e058      	b.n	8005148 <USB_EPStartXfer+0x1098>
 8005096:	1d7b      	adds	r3, r7, #5
 8005098:	33ff      	adds	r3, #255	; 0xff
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10b      	bne.n	80050b8 <USB_EPStartXfer+0x1008>
 80050a0:	21c8      	movs	r1, #200	; 0xc8
 80050a2:	187b      	adds	r3, r7, r1
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	881b      	ldrh	r3, [r3, #0]
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	4a71      	ldr	r2, [pc, #452]	; (8005270 <USB_EPStartXfer+0x11c0>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	187b      	adds	r3, r7, r1
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	801a      	strh	r2, [r3, #0]
 80050b6:	e047      	b.n	8005148 <USB_EPStartXfer+0x1098>
 80050b8:	1d7b      	adds	r3, r7, #5
 80050ba:	33ff      	adds	r3, #255	; 0xff
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	085b      	lsrs	r3, r3, #1
 80050c0:	21dc      	movs	r1, #220	; 0xdc
 80050c2:	187a      	adds	r2, r7, r1
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	1d7b      	adds	r3, r7, #5
 80050c8:	33ff      	adds	r3, #255	; 0xff
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2201      	movs	r2, #1
 80050ce:	4013      	ands	r3, r2
 80050d0:	d004      	beq.n	80050dc <USB_EPStartXfer+0x102c>
 80050d2:	187b      	adds	r3, r7, r1
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	3301      	adds	r3, #1
 80050d8:	187a      	adds	r2, r7, r1
 80050da:	6013      	str	r3, [r2, #0]
 80050dc:	21c8      	movs	r1, #200	; 0xc8
 80050de:	187b      	adds	r3, r7, r1
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	881b      	ldrh	r3, [r3, #0]
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	23dc      	movs	r3, #220	; 0xdc
 80050e8:	18fb      	adds	r3, r7, r3
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	029b      	lsls	r3, r3, #10
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	4313      	orrs	r3, r2
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	187b      	adds	r3, r7, r1
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	801a      	strh	r2, [r3, #0]
 80050fc:	e024      	b.n	8005148 <USB_EPStartXfer+0x1098>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	785b      	ldrb	r3, [r3, #1]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d120      	bne.n	8005148 <USB_EPStartXfer+0x1098>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	21d4      	movs	r1, #212	; 0xd4
 800510a:	187a      	adds	r2, r7, r1
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2250      	movs	r2, #80	; 0x50
 8005112:	5a9b      	ldrh	r3, [r3, r2]
 8005114:	b29b      	uxth	r3, r3
 8005116:	001a      	movs	r2, r3
 8005118:	187b      	adds	r3, r7, r1
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	189b      	adds	r3, r3, r2
 800511e:	187a      	adds	r2, r7, r1
 8005120:	6013      	str	r3, [r2, #0]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	00da      	lsls	r2, r3, #3
 8005128:	187b      	adds	r3, r7, r1
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	18d3      	adds	r3, r2, r3
 800512e:	4a4f      	ldr	r2, [pc, #316]	; (800526c <USB_EPStartXfer+0x11bc>)
 8005130:	4694      	mov	ip, r2
 8005132:	4463      	add	r3, ip
 8005134:	21d0      	movs	r1, #208	; 0xd0
 8005136:	187a      	adds	r2, r7, r1
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	1d7b      	adds	r3, r7, #5
 800513c:	33ff      	adds	r3, #255	; 0xff
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	b29a      	uxth	r2, r3
 8005142:	187b      	adds	r3, r7, r1
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	801a      	strh	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	22c4      	movs	r2, #196	; 0xc4
 800514c:	18ba      	adds	r2, r7, r2
 800514e:	6013      	str	r3, [r2, #0]
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	785b      	ldrb	r3, [r3, #1]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d000      	beq.n	800515a <USB_EPStartXfer+0x10aa>
 8005158:	e08c      	b.n	8005274 <USB_EPStartXfer+0x11c4>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	21bc      	movs	r1, #188	; 0xbc
 800515e:	187a      	adds	r2, r7, r1
 8005160:	6013      	str	r3, [r2, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2250      	movs	r2, #80	; 0x50
 8005166:	5a9b      	ldrh	r3, [r3, r2]
 8005168:	b29b      	uxth	r3, r3
 800516a:	001a      	movs	r2, r3
 800516c:	187b      	adds	r3, r7, r1
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	189b      	adds	r3, r3, r2
 8005172:	187a      	adds	r2, r7, r1
 8005174:	6013      	str	r3, [r2, #0]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	00da      	lsls	r2, r3, #3
 800517c:	187b      	adds	r3, r7, r1
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	18d3      	adds	r3, r2, r3
 8005182:	4a37      	ldr	r2, [pc, #220]	; (8005260 <USB_EPStartXfer+0x11b0>)
 8005184:	4694      	mov	ip, r2
 8005186:	4463      	add	r3, ip
 8005188:	21b8      	movs	r1, #184	; 0xb8
 800518a:	187a      	adds	r2, r7, r1
 800518c:	6013      	str	r3, [r2, #0]
 800518e:	187b      	adds	r3, r7, r1
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	881b      	ldrh	r3, [r3, #0]
 8005194:	b29b      	uxth	r3, r3
 8005196:	059b      	lsls	r3, r3, #22
 8005198:	0d9b      	lsrs	r3, r3, #22
 800519a:	b29a      	uxth	r2, r3
 800519c:	187b      	adds	r3, r7, r1
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	801a      	strh	r2, [r3, #0]
 80051a2:	1d7b      	adds	r3, r7, #5
 80051a4:	33ff      	adds	r3, #255	; 0xff
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2b3e      	cmp	r3, #62	; 0x3e
 80051aa:	d925      	bls.n	80051f8 <USB_EPStartXfer+0x1148>
 80051ac:	1d7b      	adds	r3, r7, #5
 80051ae:	33ff      	adds	r3, #255	; 0xff
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	095b      	lsrs	r3, r3, #5
 80051b4:	21d8      	movs	r1, #216	; 0xd8
 80051b6:	187a      	adds	r2, r7, r1
 80051b8:	6013      	str	r3, [r2, #0]
 80051ba:	1d7b      	adds	r3, r7, #5
 80051bc:	33ff      	adds	r3, #255	; 0xff
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	221f      	movs	r2, #31
 80051c2:	4013      	ands	r3, r2
 80051c4:	d104      	bne.n	80051d0 <USB_EPStartXfer+0x1120>
 80051c6:	187b      	adds	r3, r7, r1
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3b01      	subs	r3, #1
 80051cc:	187a      	adds	r2, r7, r1
 80051ce:	6013      	str	r3, [r2, #0]
 80051d0:	21b8      	movs	r1, #184	; 0xb8
 80051d2:	187b      	adds	r3, r7, r1
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	881b      	ldrh	r3, [r3, #0]
 80051d8:	b29a      	uxth	r2, r3
 80051da:	23d8      	movs	r3, #216	; 0xd8
 80051dc:	18fb      	adds	r3, r7, r3
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	029b      	lsls	r3, r3, #10
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	4313      	orrs	r3, r2
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	4a21      	ldr	r2, [pc, #132]	; (8005270 <USB_EPStartXfer+0x11c0>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	187b      	adds	r3, r7, r1
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	801a      	strh	r2, [r3, #0]
 80051f6:	e062      	b.n	80052be <USB_EPStartXfer+0x120e>
 80051f8:	1d7b      	adds	r3, r7, #5
 80051fa:	33ff      	adds	r3, #255	; 0xff
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10b      	bne.n	800521a <USB_EPStartXfer+0x116a>
 8005202:	21b8      	movs	r1, #184	; 0xb8
 8005204:	187b      	adds	r3, r7, r1
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	881b      	ldrh	r3, [r3, #0]
 800520a:	b29b      	uxth	r3, r3
 800520c:	4a18      	ldr	r2, [pc, #96]	; (8005270 <USB_EPStartXfer+0x11c0>)
 800520e:	4313      	orrs	r3, r2
 8005210:	b29a      	uxth	r2, r3
 8005212:	187b      	adds	r3, r7, r1
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	801a      	strh	r2, [r3, #0]
 8005218:	e051      	b.n	80052be <USB_EPStartXfer+0x120e>
 800521a:	1d7b      	adds	r3, r7, #5
 800521c:	33ff      	adds	r3, #255	; 0xff
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	085b      	lsrs	r3, r3, #1
 8005222:	21d8      	movs	r1, #216	; 0xd8
 8005224:	187a      	adds	r2, r7, r1
 8005226:	6013      	str	r3, [r2, #0]
 8005228:	1d7b      	adds	r3, r7, #5
 800522a:	33ff      	adds	r3, #255	; 0xff
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2201      	movs	r2, #1
 8005230:	4013      	ands	r3, r2
 8005232:	d004      	beq.n	800523e <USB_EPStartXfer+0x118e>
 8005234:	187b      	adds	r3, r7, r1
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	3301      	adds	r3, #1
 800523a:	187a      	adds	r2, r7, r1
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	21b8      	movs	r1, #184	; 0xb8
 8005240:	187b      	adds	r3, r7, r1
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	881b      	ldrh	r3, [r3, #0]
 8005246:	b29a      	uxth	r2, r3
 8005248:	23d8      	movs	r3, #216	; 0xd8
 800524a:	18fb      	adds	r3, r7, r3
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	b29b      	uxth	r3, r3
 8005250:	029b      	lsls	r3, r3, #10
 8005252:	b29b      	uxth	r3, r3
 8005254:	4313      	orrs	r3, r2
 8005256:	b29a      	uxth	r2, r3
 8005258:	187b      	adds	r3, r7, r1
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	801a      	strh	r2, [r3, #0]
 800525e:	e02e      	b.n	80052be <USB_EPStartXfer+0x120e>
 8005260:	00000406 	.word	0x00000406
 8005264:	ffff8f8f 	.word	0xffff8f8f
 8005268:	ffff80c0 	.word	0xffff80c0
 800526c:	00000402 	.word	0x00000402
 8005270:	ffff8000 	.word	0xffff8000
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	785b      	ldrb	r3, [r3, #1]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d120      	bne.n	80052be <USB_EPStartXfer+0x120e>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2250      	movs	r2, #80	; 0x50
 8005280:	5a9b      	ldrh	r3, [r3, r2]
 8005282:	b29b      	uxth	r3, r3
 8005284:	001a      	movs	r2, r3
 8005286:	21c4      	movs	r1, #196	; 0xc4
 8005288:	187b      	adds	r3, r7, r1
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	189b      	adds	r3, r3, r2
 800528e:	187a      	adds	r2, r7, r1
 8005290:	6013      	str	r3, [r2, #0]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	00da      	lsls	r2, r3, #3
 8005298:	187b      	adds	r3, r7, r1
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	18d3      	adds	r3, r2, r3
 800529e:	4a1d      	ldr	r2, [pc, #116]	; (8005314 <USB_EPStartXfer+0x1264>)
 80052a0:	4694      	mov	ip, r2
 80052a2:	4463      	add	r3, ip
 80052a4:	21c0      	movs	r1, #192	; 0xc0
 80052a6:	187a      	adds	r2, r7, r1
 80052a8:	6013      	str	r3, [r2, #0]
 80052aa:	1d7b      	adds	r3, r7, #5
 80052ac:	33ff      	adds	r3, #255	; 0xff
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	187b      	adds	r3, r7, r1
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	801a      	strh	r2, [r3, #0]
 80052b8:	e001      	b.n	80052be <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e025      	b.n	800530a <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	18d3      	adds	r3, r2, r3
 80052c8:	881b      	ldrh	r3, [r3, #0]
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	208a      	movs	r0, #138	; 0x8a
 80052ce:	183b      	adds	r3, r7, r0
 80052d0:	4911      	ldr	r1, [pc, #68]	; (8005318 <USB_EPStartXfer+0x1268>)
 80052d2:	400a      	ands	r2, r1
 80052d4:	801a      	strh	r2, [r3, #0]
 80052d6:	183b      	adds	r3, r7, r0
 80052d8:	183a      	adds	r2, r7, r0
 80052da:	8812      	ldrh	r2, [r2, #0]
 80052dc:	2180      	movs	r1, #128	; 0x80
 80052de:	0149      	lsls	r1, r1, #5
 80052e0:	404a      	eors	r2, r1
 80052e2:	801a      	strh	r2, [r3, #0]
 80052e4:	183b      	adds	r3, r7, r0
 80052e6:	183a      	adds	r2, r7, r0
 80052e8:	8812      	ldrh	r2, [r2, #0]
 80052ea:	2180      	movs	r1, #128	; 0x80
 80052ec:	0189      	lsls	r1, r1, #6
 80052ee:	404a      	eors	r2, r1
 80052f0:	801a      	strh	r2, [r3, #0]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	18d3      	adds	r3, r2, r3
 80052fc:	183a      	adds	r2, r7, r0
 80052fe:	8812      	ldrh	r2, [r2, #0]
 8005300:	4906      	ldr	r1, [pc, #24]	; (800531c <USB_EPStartXfer+0x126c>)
 8005302:	430a      	orrs	r2, r1
 8005304:	b292      	uxth	r2, r2
 8005306:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	0018      	movs	r0, r3
 800530c:	46bd      	mov	sp, r7
 800530e:	b043      	add	sp, #268	; 0x10c
 8005310:	bd90      	pop	{r4, r7, pc}
 8005312:	46c0      	nop			; (mov r8, r8)
 8005314:	00000406 	.word	0x00000406
 8005318:	ffffbf8f 	.word	0xffffbf8f
 800531c:	ffff8080 	.word	0xffff8080

08005320 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	785b      	ldrb	r3, [r3, #1]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d01d      	beq.n	800536e <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	18d3      	adds	r3, r2, r3
 800533c:	881b      	ldrh	r3, [r3, #0]
 800533e:	b29a      	uxth	r2, r3
 8005340:	200c      	movs	r0, #12
 8005342:	183b      	adds	r3, r7, r0
 8005344:	491b      	ldr	r1, [pc, #108]	; (80053b4 <USB_EPSetStall+0x94>)
 8005346:	400a      	ands	r2, r1
 8005348:	801a      	strh	r2, [r3, #0]
 800534a:	183b      	adds	r3, r7, r0
 800534c:	183a      	adds	r2, r7, r0
 800534e:	8812      	ldrh	r2, [r2, #0]
 8005350:	2110      	movs	r1, #16
 8005352:	404a      	eors	r2, r1
 8005354:	801a      	strh	r2, [r3, #0]
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	18d3      	adds	r3, r2, r3
 8005360:	183a      	adds	r2, r7, r0
 8005362:	8812      	ldrh	r2, [r2, #0]
 8005364:	4914      	ldr	r1, [pc, #80]	; (80053b8 <USB_EPSetStall+0x98>)
 8005366:	430a      	orrs	r2, r1
 8005368:	b292      	uxth	r2, r2
 800536a:	801a      	strh	r2, [r3, #0]
 800536c:	e01d      	b.n	80053aa <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	18d3      	adds	r3, r2, r3
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	b29a      	uxth	r2, r3
 800537c:	200e      	movs	r0, #14
 800537e:	183b      	adds	r3, r7, r0
 8005380:	490e      	ldr	r1, [pc, #56]	; (80053bc <USB_EPSetStall+0x9c>)
 8005382:	400a      	ands	r2, r1
 8005384:	801a      	strh	r2, [r3, #0]
 8005386:	183b      	adds	r3, r7, r0
 8005388:	183a      	adds	r2, r7, r0
 800538a:	8812      	ldrh	r2, [r2, #0]
 800538c:	2180      	movs	r1, #128	; 0x80
 800538e:	0149      	lsls	r1, r1, #5
 8005390:	404a      	eors	r2, r1
 8005392:	801a      	strh	r2, [r3, #0]
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	18d3      	adds	r3, r2, r3
 800539e:	183a      	adds	r2, r7, r0
 80053a0:	8812      	ldrh	r2, [r2, #0]
 80053a2:	4905      	ldr	r1, [pc, #20]	; (80053b8 <USB_EPSetStall+0x98>)
 80053a4:	430a      	orrs	r2, r1
 80053a6:	b292      	uxth	r2, r2
 80053a8:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	0018      	movs	r0, r3
 80053ae:	46bd      	mov	sp, r7
 80053b0:	b004      	add	sp, #16
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	ffff8fbf 	.word	0xffff8fbf
 80053b8:	ffff8080 	.word	0xffff8080
 80053bc:	ffffbf8f 	.word	0xffffbf8f

080053c0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	7b1b      	ldrb	r3, [r3, #12]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d000      	beq.n	80053d4 <USB_EPClearStall+0x14>
 80053d2:	e095      	b.n	8005500 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	785b      	ldrb	r3, [r3, #1]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d046      	beq.n	800546a <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	18d2      	adds	r2, r2, r3
 80053e6:	2110      	movs	r1, #16
 80053e8:	187b      	adds	r3, r7, r1
 80053ea:	8812      	ldrh	r2, [r2, #0]
 80053ec:	801a      	strh	r2, [r3, #0]
 80053ee:	187b      	adds	r3, r7, r1
 80053f0:	881b      	ldrh	r3, [r3, #0]
 80053f2:	2240      	movs	r2, #64	; 0x40
 80053f4:	4013      	ands	r3, r2
 80053f6:	d016      	beq.n	8005426 <USB_EPClearStall+0x66>
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	18d3      	adds	r3, r2, r3
 8005402:	881b      	ldrh	r3, [r3, #0]
 8005404:	b29a      	uxth	r2, r3
 8005406:	200e      	movs	r0, #14
 8005408:	183b      	adds	r3, r7, r0
 800540a:	4940      	ldr	r1, [pc, #256]	; (800550c <USB_EPClearStall+0x14c>)
 800540c:	400a      	ands	r2, r1
 800540e:	801a      	strh	r2, [r3, #0]
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	18d3      	adds	r3, r2, r3
 800541a:	183a      	adds	r2, r7, r0
 800541c:	8812      	ldrh	r2, [r2, #0]
 800541e:	493c      	ldr	r1, [pc, #240]	; (8005510 <USB_EPClearStall+0x150>)
 8005420:	430a      	orrs	r2, r1
 8005422:	b292      	uxth	r2, r2
 8005424:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	78db      	ldrb	r3, [r3, #3]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d068      	beq.n	8005500 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	18d3      	adds	r3, r2, r3
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	b29a      	uxth	r2, r3
 800543c:	200c      	movs	r0, #12
 800543e:	183b      	adds	r3, r7, r0
 8005440:	4934      	ldr	r1, [pc, #208]	; (8005514 <USB_EPClearStall+0x154>)
 8005442:	400a      	ands	r2, r1
 8005444:	801a      	strh	r2, [r3, #0]
 8005446:	183b      	adds	r3, r7, r0
 8005448:	183a      	adds	r2, r7, r0
 800544a:	8812      	ldrh	r2, [r2, #0]
 800544c:	2120      	movs	r1, #32
 800544e:	404a      	eors	r2, r1
 8005450:	801a      	strh	r2, [r3, #0]
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	18d3      	adds	r3, r2, r3
 800545c:	183a      	adds	r2, r7, r0
 800545e:	8812      	ldrh	r2, [r2, #0]
 8005460:	492d      	ldr	r1, [pc, #180]	; (8005518 <USB_EPClearStall+0x158>)
 8005462:	430a      	orrs	r2, r1
 8005464:	b292      	uxth	r2, r2
 8005466:	801a      	strh	r2, [r3, #0]
 8005468:	e04a      	b.n	8005500 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	18d2      	adds	r2, r2, r3
 8005474:	2116      	movs	r1, #22
 8005476:	187b      	adds	r3, r7, r1
 8005478:	8812      	ldrh	r2, [r2, #0]
 800547a:	801a      	strh	r2, [r3, #0]
 800547c:	187b      	adds	r3, r7, r1
 800547e:	881a      	ldrh	r2, [r3, #0]
 8005480:	2380      	movs	r3, #128	; 0x80
 8005482:	01db      	lsls	r3, r3, #7
 8005484:	4013      	ands	r3, r2
 8005486:	d016      	beq.n	80054b6 <USB_EPClearStall+0xf6>
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	18d3      	adds	r3, r2, r3
 8005492:	881b      	ldrh	r3, [r3, #0]
 8005494:	b29a      	uxth	r2, r3
 8005496:	2014      	movs	r0, #20
 8005498:	183b      	adds	r3, r7, r0
 800549a:	491c      	ldr	r1, [pc, #112]	; (800550c <USB_EPClearStall+0x14c>)
 800549c:	400a      	ands	r2, r1
 800549e:	801a      	strh	r2, [r3, #0]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	18d3      	adds	r3, r2, r3
 80054aa:	183a      	adds	r2, r7, r0
 80054ac:	8812      	ldrh	r2, [r2, #0]
 80054ae:	491b      	ldr	r1, [pc, #108]	; (800551c <USB_EPClearStall+0x15c>)
 80054b0:	430a      	orrs	r2, r1
 80054b2:	b292      	uxth	r2, r2
 80054b4:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	18d3      	adds	r3, r2, r3
 80054c0:	881b      	ldrh	r3, [r3, #0]
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	2012      	movs	r0, #18
 80054c6:	183b      	adds	r3, r7, r0
 80054c8:	4915      	ldr	r1, [pc, #84]	; (8005520 <USB_EPClearStall+0x160>)
 80054ca:	400a      	ands	r2, r1
 80054cc:	801a      	strh	r2, [r3, #0]
 80054ce:	183b      	adds	r3, r7, r0
 80054d0:	183a      	adds	r2, r7, r0
 80054d2:	8812      	ldrh	r2, [r2, #0]
 80054d4:	2180      	movs	r1, #128	; 0x80
 80054d6:	0149      	lsls	r1, r1, #5
 80054d8:	404a      	eors	r2, r1
 80054da:	801a      	strh	r2, [r3, #0]
 80054dc:	183b      	adds	r3, r7, r0
 80054de:	183a      	adds	r2, r7, r0
 80054e0:	8812      	ldrh	r2, [r2, #0]
 80054e2:	2180      	movs	r1, #128	; 0x80
 80054e4:	0189      	lsls	r1, r1, #6
 80054e6:	404a      	eors	r2, r1
 80054e8:	801a      	strh	r2, [r3, #0]
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	18d3      	adds	r3, r2, r3
 80054f4:	183a      	adds	r2, r7, r0
 80054f6:	8812      	ldrh	r2, [r2, #0]
 80054f8:	4907      	ldr	r1, [pc, #28]	; (8005518 <USB_EPClearStall+0x158>)
 80054fa:	430a      	orrs	r2, r1
 80054fc:	b292      	uxth	r2, r2
 80054fe:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	0018      	movs	r0, r3
 8005504:	46bd      	mov	sp, r7
 8005506:	b006      	add	sp, #24
 8005508:	bd80      	pop	{r7, pc}
 800550a:	46c0      	nop			; (mov r8, r8)
 800550c:	ffff8f8f 	.word	0xffff8f8f
 8005510:	ffff80c0 	.word	0xffff80c0
 8005514:	ffff8fbf 	.word	0xffff8fbf
 8005518:	ffff8080 	.word	0xffff8080
 800551c:	ffffc080 	.word	0xffffc080
 8005520:	ffffbf8f 	.word	0xffffbf8f

08005524 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	000a      	movs	r2, r1
 800552e:	1cfb      	adds	r3, r7, #3
 8005530:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8005532:	1cfb      	adds	r3, r7, #3
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d103      	bne.n	8005542 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	224c      	movs	r2, #76	; 0x4c
 800553e:	2180      	movs	r1, #128	; 0x80
 8005540:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	0018      	movs	r0, r3
 8005546:	46bd      	mov	sp, r7
 8005548:	b002      	add	sp, #8
 800554a:	bd80      	pop	{r7, pc}

0800554c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2258      	movs	r2, #88	; 0x58
 8005558:	5a9b      	ldrh	r3, [r3, r2]
 800555a:	b29b      	uxth	r3, r3
 800555c:	4a05      	ldr	r2, [pc, #20]	; (8005574 <USB_DevConnect+0x28>)
 800555e:	4313      	orrs	r3, r2
 8005560:	b299      	uxth	r1, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2258      	movs	r2, #88	; 0x58
 8005566:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	0018      	movs	r0, r3
 800556c:	46bd      	mov	sp, r7
 800556e:	b002      	add	sp, #8
 8005570:	bd80      	pop	{r7, pc}
 8005572:	46c0      	nop			; (mov r8, r8)
 8005574:	ffff8000 	.word	0xffff8000

08005578 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2244      	movs	r2, #68	; 0x44
 8005584:	5a9b      	ldrh	r3, [r3, r2]
 8005586:	b29b      	uxth	r3, r3
 8005588:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800558a:	68fb      	ldr	r3, [r7, #12]
}
 800558c:	0018      	movs	r0, r3
 800558e:	46bd      	mov	sp, r7
 8005590:	b004      	add	sp, #16
 8005592:	bd80      	pop	{r7, pc}

08005594 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b08a      	sub	sp, #40	; 0x28
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	0019      	movs	r1, r3
 80055a0:	1dbb      	adds	r3, r7, #6
 80055a2:	801a      	strh	r2, [r3, #0]
 80055a4:	1d3b      	adds	r3, r7, #4
 80055a6:	1c0a      	adds	r2, r1, #0
 80055a8:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80055aa:	1d3b      	adds	r3, r7, #4
 80055ac:	881b      	ldrh	r3, [r3, #0]
 80055ae:	3301      	adds	r3, #1
 80055b0:	085b      	lsrs	r3, r3, #1
 80055b2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80055bc:	1dbb      	adds	r3, r7, #6
 80055be:	881a      	ldrh	r2, [r3, #0]
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	18d3      	adds	r3, r2, r3
 80055c4:	2280      	movs	r2, #128	; 0x80
 80055c6:	00d2      	lsls	r2, r2, #3
 80055c8:	4694      	mov	ip, r2
 80055ca:	4463      	add	r3, ip
 80055cc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	627b      	str	r3, [r7, #36]	; 0x24
 80055d2:	e020      	b.n	8005616 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	781a      	ldrb	r2, [r3, #0]
 80055d8:	2112      	movs	r1, #18
 80055da:	187b      	adds	r3, r7, r1
 80055dc:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	3301      	adds	r3, #1
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	021b      	lsls	r3, r3, #8
 80055e6:	b21a      	sxth	r2, r3
 80055e8:	187b      	adds	r3, r7, r1
 80055ea:	2000      	movs	r0, #0
 80055ec:	5e1b      	ldrsh	r3, [r3, r0]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	b21a      	sxth	r2, r3
 80055f2:	187b      	adds	r3, r7, r1
 80055f4:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80055f6:	6a3b      	ldr	r3, [r7, #32]
 80055f8:	187a      	adds	r2, r7, r1
 80055fa:	8812      	ldrh	r2, [r2, #0]
 80055fc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80055fe:	6a3b      	ldr	r3, [r7, #32]
 8005600:	3302      	adds	r3, #2
 8005602:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	3301      	adds	r3, #1
 8005608:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	3301      	adds	r3, #1
 800560e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005612:	3b01      	subs	r3, #1
 8005614:	627b      	str	r3, [r7, #36]	; 0x24
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1db      	bne.n	80055d4 <USB_WritePMA+0x40>
  }
}
 800561c:	46c0      	nop			; (mov r8, r8)
 800561e:	46c0      	nop			; (mov r8, r8)
 8005620:	46bd      	mov	sp, r7
 8005622:	b00a      	add	sp, #40	; 0x28
 8005624:	bd80      	pop	{r7, pc}

08005626 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b08a      	sub	sp, #40	; 0x28
 800562a:	af00      	add	r7, sp, #0
 800562c:	60f8      	str	r0, [r7, #12]
 800562e:	60b9      	str	r1, [r7, #8]
 8005630:	0019      	movs	r1, r3
 8005632:	1dbb      	adds	r3, r7, #6
 8005634:	801a      	strh	r2, [r3, #0]
 8005636:	1d3b      	adds	r3, r7, #4
 8005638:	1c0a      	adds	r2, r1, #0
 800563a:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800563c:	1d3b      	adds	r3, r7, #4
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	085b      	lsrs	r3, r3, #1
 8005642:	b29b      	uxth	r3, r3
 8005644:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800564e:	1dbb      	adds	r3, r7, #6
 8005650:	881a      	ldrh	r2, [r3, #0]
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	18d3      	adds	r3, r2, r3
 8005656:	2280      	movs	r2, #128	; 0x80
 8005658:	00d2      	lsls	r2, r2, #3
 800565a:	4694      	mov	ip, r2
 800565c:	4463      	add	r3, ip
 800565e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	627b      	str	r3, [r7, #36]	; 0x24
 8005664:	e018      	b.n	8005698 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	881b      	ldrh	r3, [r3, #0]
 800566a:	b29b      	uxth	r3, r3
 800566c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	3302      	adds	r3, #2
 8005672:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	b2da      	uxtb	r2, r3
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	3301      	adds	r3, #1
 8005680:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	0a1b      	lsrs	r3, r3, #8
 8005686:	b2da      	uxtb	r2, r3
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	3301      	adds	r3, #1
 8005690:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005694:	3b01      	subs	r3, #1
 8005696:	627b      	str	r3, [r7, #36]	; 0x24
 8005698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1e3      	bne.n	8005666 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800569e:	1d3b      	adds	r3, r7, #4
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	2201      	movs	r2, #1
 80056a4:	4013      	ands	r3, r2
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d007      	beq.n	80056bc <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 80056ac:	6a3b      	ldr	r3, [r7, #32]
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	b2da      	uxtb	r2, r3
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	701a      	strb	r2, [r3, #0]
  }
}
 80056bc:	46c0      	nop			; (mov r8, r8)
 80056be:	46bd      	mov	sp, r7
 80056c0:	b00a      	add	sp, #40	; 0x28
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	000a      	movs	r2, r1
 80056ce:	1cfb      	adds	r3, r7, #3
 80056d0:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80056d2:	230f      	movs	r3, #15
 80056d4:	18fb      	adds	r3, r7, r3
 80056d6:	2200      	movs	r2, #0
 80056d8:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	7c1b      	ldrb	r3, [r3, #16]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d116      	bne.n	8005710 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80056e2:	2380      	movs	r3, #128	; 0x80
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	2202      	movs	r2, #2
 80056ea:	2181      	movs	r1, #129	; 0x81
 80056ec:	f002 f8a1 	bl	8007832 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80056f6:	2380      	movs	r3, #128	; 0x80
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	2202      	movs	r2, #2
 80056fe:	2101      	movs	r1, #1
 8005700:	f002 f897 	bl	8007832 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	23b6      	movs	r3, #182	; 0xb6
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	2101      	movs	r1, #1
 800570c:	50d1      	str	r1, [r2, r3]
 800570e:	e013      	b.n	8005738 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	2340      	movs	r3, #64	; 0x40
 8005714:	2202      	movs	r2, #2
 8005716:	2181      	movs	r1, #129	; 0x81
 8005718:	f002 f88b 	bl	8007832 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	2340      	movs	r3, #64	; 0x40
 8005726:	2202      	movs	r2, #2
 8005728:	2101      	movs	r1, #1
 800572a:	f002 f882 	bl	8007832 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	23b6      	movs	r3, #182	; 0xb6
 8005732:	005b      	lsls	r3, r3, #1
 8005734:	2101      	movs	r1, #1
 8005736:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	2308      	movs	r3, #8
 800573c:	2203      	movs	r2, #3
 800573e:	2182      	movs	r1, #130	; 0x82
 8005740:	f002 f877 	bl	8007832 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800574a:	2387      	movs	r3, #135	; 0x87
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	0018      	movs	r0, r3
 8005750:	f002 fa08 	bl	8007b64 <USBD_static_malloc>
 8005754:	0001      	movs	r1, r0
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	23ae      	movs	r3, #174	; 0xae
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	23ae      	movs	r3, #174	; 0xae
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	58d3      	ldr	r3, [r2, r3]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d104      	bne.n	8005774 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800576a:	230f      	movs	r3, #15
 800576c:	18fb      	adds	r3, r7, r3
 800576e:	2201      	movs	r2, #1
 8005770:	701a      	strb	r2, [r3, #0]
 8005772:	e02c      	b.n	80057ce <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	23ae      	movs	r3, #174	; 0xae
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	58d3      	ldr	r3, [r2, r3]
 800577c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	23af      	movs	r3, #175	; 0xaf
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	58d3      	ldr	r3, [r2, r3]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	2385      	movs	r3, #133	; 0x85
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	2100      	movs	r1, #0
 8005792:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	2386      	movs	r3, #134	; 0x86
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	2100      	movs	r1, #0
 800579c:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	7c1b      	ldrb	r3, [r3, #16]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10a      	bne.n	80057bc <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	2381      	movs	r3, #129	; 0x81
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	58d2      	ldr	r2, [r2, r3]
 80057ae:	2380      	movs	r3, #128	; 0x80
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	2101      	movs	r1, #1
 80057b6:	f002 f987 	bl	8007ac8 <USBD_LL_PrepareReceive>
 80057ba:	e008      	b.n	80057ce <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	2381      	movs	r3, #129	; 0x81
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	58d2      	ldr	r2, [r2, r3]
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	2340      	movs	r3, #64	; 0x40
 80057c8:	2101      	movs	r1, #1
 80057ca:	f002 f97d 	bl	8007ac8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80057ce:	230f      	movs	r3, #15
 80057d0:	18fb      	adds	r3, r7, r3
 80057d2:	781b      	ldrb	r3, [r3, #0]
}
 80057d4:	0018      	movs	r0, r3
 80057d6:	46bd      	mov	sp, r7
 80057d8:	b004      	add	sp, #16
 80057da:	bd80      	pop	{r7, pc}

080057dc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	000a      	movs	r2, r1
 80057e6:	1cfb      	adds	r3, r7, #3
 80057e8:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80057ea:	230f      	movs	r3, #15
 80057ec:	18fb      	adds	r3, r7, r3
 80057ee:	2200      	movs	r2, #0
 80057f0:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2181      	movs	r1, #129	; 0x81
 80057f6:	0018      	movs	r0, r3
 80057f8:	f002 f852 	bl	80078a0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2101      	movs	r1, #1
 8005806:	0018      	movs	r0, r3
 8005808:	f002 f84a 	bl	80078a0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	23b6      	movs	r3, #182	; 0xb6
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	2100      	movs	r1, #0
 8005814:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2182      	movs	r1, #130	; 0x82
 800581a:	0018      	movs	r0, r3
 800581c:	f002 f840 	bl	80078a0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	23ae      	movs	r3, #174	; 0xae
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	58d3      	ldr	r3, [r2, r3]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d011      	beq.n	8005856 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	23af      	movs	r3, #175	; 0xaf
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	58d3      	ldr	r3, [r2, r3]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	23ae      	movs	r3, #174	; 0xae
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	58d3      	ldr	r3, [r2, r3]
 8005846:	0018      	movs	r0, r3
 8005848:	f002 f998 	bl	8007b7c <USBD_static_free>
    pdev->pClassData = NULL;
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	23ae      	movs	r3, #174	; 0xae
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	2100      	movs	r1, #0
 8005854:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8005856:	230f      	movs	r3, #15
 8005858:	18fb      	adds	r3, r7, r3
 800585a:	781b      	ldrb	r3, [r3, #0]
}
 800585c:	0018      	movs	r0, r3
 800585e:	46bd      	mov	sp, r7
 8005860:	b004      	add	sp, #16
 8005862:	bd80      	pop	{r7, pc}

08005864 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	23ae      	movs	r3, #174	; 0xae
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	58d3      	ldr	r3, [r2, r3]
 8005876:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005878:	230f      	movs	r3, #15
 800587a:	18fb      	adds	r3, r7, r3
 800587c:	2200      	movs	r2, #0
 800587e:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8005880:	230c      	movs	r3, #12
 8005882:	18fb      	adds	r3, r7, r3
 8005884:	2200      	movs	r2, #0
 8005886:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8005888:	2317      	movs	r3, #23
 800588a:	18fb      	adds	r3, r7, r3
 800588c:	2200      	movs	r2, #0
 800588e:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	001a      	movs	r2, r3
 8005896:	2360      	movs	r3, #96	; 0x60
 8005898:	4013      	ands	r3, r2
 800589a:	d03d      	beq.n	8005918 <USBD_CDC_Setup+0xb4>
 800589c:	2b20      	cmp	r3, #32
 800589e:	d000      	beq.n	80058a2 <USBD_CDC_Setup+0x3e>
 80058a0:	e094      	b.n	80059cc <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	88db      	ldrh	r3, [r3, #6]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d02b      	beq.n	8005902 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	b25b      	sxtb	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	da12      	bge.n	80058da <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	23af      	movs	r3, #175	; 0xaf
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	58d3      	ldr	r3, [r2, r3]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80058c2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80058c4:	683a      	ldr	r2, [r7, #0]
 80058c6:	88d2      	ldrh	r2, [r2, #6]
 80058c8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80058ca:	6939      	ldr	r1, [r7, #16]
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	88da      	ldrh	r2, [r3, #6]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	0018      	movs	r0, r3
 80058d4:	f001 fbb2 	bl	800703c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80058d8:	e083      	b.n	80059e2 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	7859      	ldrb	r1, [r3, #1]
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	2380      	movs	r3, #128	; 0x80
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	88db      	ldrh	r3, [r3, #6]
 80058ea:	b2d9      	uxtb	r1, r3
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	4a40      	ldr	r2, [pc, #256]	; (80059f0 <USBD_CDC_Setup+0x18c>)
 80058f0:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80058f2:	6939      	ldr	r1, [r7, #16]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	88da      	ldrh	r2, [r3, #6]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	0018      	movs	r0, r3
 80058fc:	f001 fbd1 	bl	80070a2 <USBD_CtlPrepareRx>
      break;
 8005900:	e06f      	b.n	80059e2 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	23af      	movs	r3, #175	; 0xaf
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	58d3      	ldr	r3, [r2, r3]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	683a      	ldr	r2, [r7, #0]
 800590e:	7850      	ldrb	r0, [r2, #1]
 8005910:	6839      	ldr	r1, [r7, #0]
 8005912:	2200      	movs	r2, #0
 8005914:	4798      	blx	r3
      break;
 8005916:	e064      	b.n	80059e2 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	785b      	ldrb	r3, [r3, #1]
 800591c:	2b0b      	cmp	r3, #11
 800591e:	d037      	beq.n	8005990 <USBD_CDC_Setup+0x12c>
 8005920:	dc47      	bgt.n	80059b2 <USBD_CDC_Setup+0x14e>
 8005922:	2b00      	cmp	r3, #0
 8005924:	d002      	beq.n	800592c <USBD_CDC_Setup+0xc8>
 8005926:	2b0a      	cmp	r3, #10
 8005928:	d019      	beq.n	800595e <USBD_CDC_Setup+0xfa>
 800592a:	e042      	b.n	80059b2 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	23a7      	movs	r3, #167	; 0xa7
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	5cd3      	ldrb	r3, [r2, r3]
 8005934:	2b03      	cmp	r3, #3
 8005936:	d107      	bne.n	8005948 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005938:	230c      	movs	r3, #12
 800593a:	18f9      	adds	r1, r7, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	0018      	movs	r0, r3
 8005942:	f001 fb7b 	bl	800703c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005946:	e040      	b.n	80059ca <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	0011      	movs	r1, r2
 800594e:	0018      	movs	r0, r3
 8005950:	f001 faf6 	bl	8006f40 <USBD_CtlError>
            ret = USBD_FAIL;
 8005954:	2317      	movs	r3, #23
 8005956:	18fb      	adds	r3, r7, r3
 8005958:	2202      	movs	r2, #2
 800595a:	701a      	strb	r2, [r3, #0]
          break;
 800595c:	e035      	b.n	80059ca <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	23a7      	movs	r3, #167	; 0xa7
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	5cd3      	ldrb	r3, [r2, r3]
 8005966:	2b03      	cmp	r3, #3
 8005968:	d107      	bne.n	800597a <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800596a:	230f      	movs	r3, #15
 800596c:	18f9      	adds	r1, r7, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	0018      	movs	r0, r3
 8005974:	f001 fb62 	bl	800703c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005978:	e027      	b.n	80059ca <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	0011      	movs	r1, r2
 8005980:	0018      	movs	r0, r3
 8005982:	f001 fadd 	bl	8006f40 <USBD_CtlError>
            ret = USBD_FAIL;
 8005986:	2317      	movs	r3, #23
 8005988:	18fb      	adds	r3, r7, r3
 800598a:	2202      	movs	r2, #2
 800598c:	701a      	strb	r2, [r3, #0]
          break;
 800598e:	e01c      	b.n	80059ca <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	23a7      	movs	r3, #167	; 0xa7
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	5cd3      	ldrb	r3, [r2, r3]
 8005998:	2b03      	cmp	r3, #3
 800599a:	d015      	beq.n	80059c8 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800599c:	683a      	ldr	r2, [r7, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	0011      	movs	r1, r2
 80059a2:	0018      	movs	r0, r3
 80059a4:	f001 facc 	bl	8006f40 <USBD_CtlError>
            ret = USBD_FAIL;
 80059a8:	2317      	movs	r3, #23
 80059aa:	18fb      	adds	r3, r7, r3
 80059ac:	2202      	movs	r2, #2
 80059ae:	701a      	strb	r2, [r3, #0]
          }
          break;
 80059b0:	e00a      	b.n	80059c8 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 80059b2:	683a      	ldr	r2, [r7, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	0011      	movs	r1, r2
 80059b8:	0018      	movs	r0, r3
 80059ba:	f001 fac1 	bl	8006f40 <USBD_CtlError>
          ret = USBD_FAIL;
 80059be:	2317      	movs	r3, #23
 80059c0:	18fb      	adds	r3, r7, r3
 80059c2:	2202      	movs	r2, #2
 80059c4:	701a      	strb	r2, [r3, #0]
          break;
 80059c6:	e000      	b.n	80059ca <USBD_CDC_Setup+0x166>
          break;
 80059c8:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80059ca:	e00a      	b.n	80059e2 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	0011      	movs	r1, r2
 80059d2:	0018      	movs	r0, r3
 80059d4:	f001 fab4 	bl	8006f40 <USBD_CtlError>
      ret = USBD_FAIL;
 80059d8:	2317      	movs	r3, #23
 80059da:	18fb      	adds	r3, r7, r3
 80059dc:	2202      	movs	r2, #2
 80059de:	701a      	strb	r2, [r3, #0]
      break;
 80059e0:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80059e2:	2317      	movs	r3, #23
 80059e4:	18fb      	adds	r3, r7, r3
 80059e6:	781b      	ldrb	r3, [r3, #0]
}
 80059e8:	0018      	movs	r0, r3
 80059ea:	46bd      	mov	sp, r7
 80059ec:	b006      	add	sp, #24
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	00000201 	.word	0x00000201

080059f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	000a      	movs	r2, r1
 80059fe:	1cfb      	adds	r3, r7, #3
 8005a00:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	23ae      	movs	r3, #174	; 0xae
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	58d3      	ldr	r3, [r2, r3]
 8005a0a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	23b0      	movs	r3, #176	; 0xb0
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	58d3      	ldr	r3, [r2, r3]
 8005a14:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	23ae      	movs	r3, #174	; 0xae
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	58d3      	ldr	r3, [r2, r3]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d03e      	beq.n	8005aa0 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005a22:	1cfb      	adds	r3, r7, #3
 8005a24:	781a      	ldrb	r2, [r3, #0]
 8005a26:	6879      	ldr	r1, [r7, #4]
 8005a28:	0013      	movs	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	189b      	adds	r3, r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	18cb      	adds	r3, r1, r3
 8005a32:	331c      	adds	r3, #28
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d02b      	beq.n	8005a92 <USBD_CDC_DataIn+0x9e>
 8005a3a:	1cfb      	adds	r3, r7, #3
 8005a3c:	781a      	ldrb	r2, [r3, #0]
 8005a3e:	6879      	ldr	r1, [r7, #4]
 8005a40:	0013      	movs	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	189b      	adds	r3, r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	18cb      	adds	r3, r1, r3
 8005a4a:	331c      	adds	r3, #28
 8005a4c:	6818      	ldr	r0, [r3, #0]
 8005a4e:	1cfb      	adds	r3, r7, #3
 8005a50:	781a      	ldrb	r2, [r3, #0]
 8005a52:	68b9      	ldr	r1, [r7, #8]
 8005a54:	0013      	movs	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	189b      	adds	r3, r3, r2
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	18cb      	adds	r3, r1, r3
 8005a5e:	3338      	adds	r3, #56	; 0x38
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	0019      	movs	r1, r3
 8005a64:	f7fa fbde 	bl	8000224 <__aeabi_uidivmod>
 8005a68:	1e0b      	subs	r3, r1, #0
 8005a6a:	d112      	bne.n	8005a92 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005a6c:	1cfb      	adds	r3, r7, #3
 8005a6e:	781a      	ldrb	r2, [r3, #0]
 8005a70:	6879      	ldr	r1, [r7, #4]
 8005a72:	0013      	movs	r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	189b      	adds	r3, r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	18cb      	adds	r3, r1, r3
 8005a7c:	331c      	adds	r3, #28
 8005a7e:	2200      	movs	r2, #0
 8005a80:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005a82:	1cfb      	adds	r3, r7, #3
 8005a84:	7819      	ldrb	r1, [r3, #0]
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	2300      	movs	r3, #0
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f001 ffe5 	bl	8007a5a <USBD_LL_Transmit>
 8005a90:	e004      	b.n	8005a9c <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	2385      	movs	r3, #133	; 0x85
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	2100      	movs	r1, #0
 8005a9a:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	e000      	b.n	8005aa2 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8005aa0:	2302      	movs	r3, #2
  }
}
 8005aa2:	0018      	movs	r0, r3
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	b004      	add	sp, #16
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b084      	sub	sp, #16
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
 8005ab2:	000a      	movs	r2, r1
 8005ab4:	1cfb      	adds	r3, r7, #3
 8005ab6:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	23ae      	movs	r3, #174	; 0xae
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	58d3      	ldr	r3, [r2, r3]
 8005ac0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005ac2:	1cfb      	adds	r3, r7, #3
 8005ac4:	781a      	ldrb	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	0011      	movs	r1, r2
 8005aca:	0018      	movs	r0, r3
 8005acc:	f002 f833 	bl	8007b36 <USBD_LL_GetRxDataSize>
 8005ad0:	0001      	movs	r1, r0
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	2383      	movs	r3, #131	; 0x83
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	23ae      	movs	r3, #174	; 0xae
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	58d3      	ldr	r3, [r2, r3]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d011      	beq.n	8005b0a <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	23af      	movs	r3, #175	; 0xaf
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	58d3      	ldr	r3, [r2, r3]
 8005aee:	68da      	ldr	r2, [r3, #12]
 8005af0:	68f9      	ldr	r1, [r7, #12]
 8005af2:	2381      	movs	r3, #129	; 0x81
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	58c8      	ldr	r0, [r1, r3]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2183      	movs	r1, #131	; 0x83
 8005afc:	0089      	lsls	r1, r1, #2
 8005afe:	468c      	mov	ip, r1
 8005b00:	4463      	add	r3, ip
 8005b02:	0019      	movs	r1, r3
 8005b04:	4790      	blx	r2

    return USBD_OK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	e000      	b.n	8005b0c <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8005b0a:	2302      	movs	r3, #2
  }
}
 8005b0c:	0018      	movs	r0, r3
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	b004      	add	sp, #16
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005b14:	b590      	push	{r4, r7, lr}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	23ae      	movs	r3, #174	; 0xae
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	58d3      	ldr	r3, [r2, r3]
 8005b24:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	23af      	movs	r3, #175	; 0xaf
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	58d3      	ldr	r3, [r2, r3]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d019      	beq.n	8005b66 <USBD_CDC_EP0_RxReady+0x52>
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	2380      	movs	r3, #128	; 0x80
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	5cd3      	ldrb	r3, [r2, r3]
 8005b3a:	2bff      	cmp	r3, #255	; 0xff
 8005b3c:	d013      	beq.n	8005b66 <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	23af      	movs	r3, #175	; 0xaf
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	58d3      	ldr	r3, [r2, r3]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	68f9      	ldr	r1, [r7, #12]
 8005b4a:	2280      	movs	r2, #128	; 0x80
 8005b4c:	0092      	lsls	r2, r2, #2
 8005b4e:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8005b50:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	4c06      	ldr	r4, [pc, #24]	; (8005b70 <USBD_CDC_EP0_RxReady+0x5c>)
 8005b56:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005b58:	b292      	uxth	r2, r2
 8005b5a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	2380      	movs	r3, #128	; 0x80
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	21ff      	movs	r1, #255	; 0xff
 8005b64:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	0018      	movs	r0, r3
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	b005      	add	sp, #20
 8005b6e:	bd90      	pop	{r4, r7, pc}
 8005b70:	00000201 	.word	0x00000201

08005b74 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2243      	movs	r2, #67	; 0x43
 8005b80:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005b82:	4b02      	ldr	r3, [pc, #8]	; (8005b8c <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8005b84:	0018      	movs	r0, r3
 8005b86:	46bd      	mov	sp, r7
 8005b88:	b002      	add	sp, #8
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	20000098 	.word	0x20000098

08005b90 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2243      	movs	r2, #67	; 0x43
 8005b9c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005b9e:	4b02      	ldr	r3, [pc, #8]	; (8005ba8 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8005ba0:	0018      	movs	r0, r3
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	b002      	add	sp, #8
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	20000054 	.word	0x20000054

08005bac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2243      	movs	r2, #67	; 0x43
 8005bb8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005bba:	4b02      	ldr	r3, [pc, #8]	; (8005bc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8005bbc:	0018      	movs	r0, r3
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	b002      	add	sp, #8
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	200000dc 	.word	0x200000dc

08005bc8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	220a      	movs	r2, #10
 8005bd4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005bd6:	4b02      	ldr	r3, [pc, #8]	; (8005be0 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8005bd8:	0018      	movs	r0, r3
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	b002      	add	sp, #8
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	20000010 	.word	0x20000010

08005be4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005bee:	200f      	movs	r0, #15
 8005bf0:	183b      	adds	r3, r7, r0
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d007      	beq.n	8005c0c <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	23af      	movs	r3, #175	; 0xaf
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	6839      	ldr	r1, [r7, #0]
 8005c04:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8005c06:	183b      	adds	r3, r7, r0
 8005c08:	2200      	movs	r2, #0
 8005c0a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8005c0c:	230f      	movs	r3, #15
 8005c0e:	18fb      	adds	r3, r7, r3
 8005c10:	781b      	ldrb	r3, [r3, #0]
}
 8005c12:	0018      	movs	r0, r3
 8005c14:	46bd      	mov	sp, r7
 8005c16:	b004      	add	sp, #16
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b086      	sub	sp, #24
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	60f8      	str	r0, [r7, #12]
 8005c22:	60b9      	str	r1, [r7, #8]
 8005c24:	1dbb      	adds	r3, r7, #6
 8005c26:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	23ae      	movs	r3, #174	; 0xae
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	58d3      	ldr	r3, [r2, r3]
 8005c30:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	2382      	movs	r3, #130	; 0x82
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	68b9      	ldr	r1, [r7, #8]
 8005c3a:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8005c3c:	1dbb      	adds	r3, r7, #6
 8005c3e:	8819      	ldrh	r1, [r3, #0]
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	2384      	movs	r3, #132	; 0x84
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	0018      	movs	r0, r3
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	b006      	add	sp, #24
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005c52:	b580      	push	{r7, lr}
 8005c54:	b084      	sub	sp, #16
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
 8005c5a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	23ae      	movs	r3, #174	; 0xae
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	58d3      	ldr	r3, [r2, r3]
 8005c64:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	2381      	movs	r3, #129	; 0x81
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	6839      	ldr	r1, [r7, #0]
 8005c6e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	0018      	movs	r0, r3
 8005c74:	46bd      	mov	sp, r7
 8005c76:	b004      	add	sp, #16
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b084      	sub	sp, #16
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	23ae      	movs	r3, #174	; 0xae
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	58d3      	ldr	r3, [r2, r3]
 8005c8a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	23ae      	movs	r3, #174	; 0xae
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	58d3      	ldr	r3, [r2, r3]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d022      	beq.n	8005cde <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	2385      	movs	r3, #133	; 0x85
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	58d3      	ldr	r3, [r2, r3]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d11a      	bne.n	8005cda <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	2385      	movs	r3, #133	; 0x85
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	2101      	movs	r1, #1
 8005cac:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	2384      	movs	r3, #132	; 0x84
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	58d2      	ldr	r2, [r2, r3]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	2382      	movs	r3, #130	; 0x82
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	2384      	movs	r3, #132	; 0x84
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	000a      	movs	r2, r1
 8005cd0:	2181      	movs	r1, #129	; 0x81
 8005cd2:	f001 fec2 	bl	8007a5a <USBD_LL_Transmit>

      return USBD_OK;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	e002      	b.n	8005ce0 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e000      	b.n	8005ce0 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8005cde:	2302      	movs	r3, #2
  }
}
 8005ce0:	0018      	movs	r0, r3
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	b004      	add	sp, #16
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	23ae      	movs	r3, #174	; 0xae
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	58d3      	ldr	r3, [r2, r3]
 8005cf8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	23ae      	movs	r3, #174	; 0xae
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	58d3      	ldr	r3, [r2, r3]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d019      	beq.n	8005d3a <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	7c1b      	ldrb	r3, [r3, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10a      	bne.n	8005d24 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	2381      	movs	r3, #129	; 0x81
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	58d2      	ldr	r2, [r2, r3]
 8005d16:	2380      	movs	r3, #128	; 0x80
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	2101      	movs	r1, #1
 8005d1e:	f001 fed3 	bl	8007ac8 <USBD_LL_PrepareReceive>
 8005d22:	e008      	b.n	8005d36 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	2381      	movs	r3, #129	; 0x81
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	58d2      	ldr	r2, [r2, r3]
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	2340      	movs	r3, #64	; 0x40
 8005d30:	2101      	movs	r1, #1
 8005d32:	f001 fec9 	bl	8007ac8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	e000      	b.n	8005d3c <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8005d3a:	2302      	movs	r3, #2
  }
}
 8005d3c:	0018      	movs	r0, r3
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	b004      	add	sp, #16
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	1dfb      	adds	r3, r7, #7
 8005d50:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d101      	bne.n	8005d5c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005d58:	2302      	movs	r3, #2
 8005d5a:	e020      	b.n	8005d9e <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	23ad      	movs	r3, #173	; 0xad
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	58d3      	ldr	r3, [r2, r3]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d004      	beq.n	8005d72 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	23ad      	movs	r3, #173	; 0xad
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	2100      	movs	r1, #0
 8005d70:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d004      	beq.n	8005d82 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	23ac      	movs	r3, #172	; 0xac
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	68b9      	ldr	r1, [r7, #8]
 8005d80:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	23a7      	movs	r3, #167	; 0xa7
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	2101      	movs	r1, #1
 8005d8a:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	1dfa      	adds	r2, r7, #7
 8005d90:	7812      	ldrb	r2, [r2, #0]
 8005d92:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	0018      	movs	r0, r3
 8005d98:	f001 fcc2 	bl	8007720 <USBD_LL_Init>

  return USBD_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	0018      	movs	r0, r3
 8005da0:	46bd      	mov	sp, r7
 8005da2:	b004      	add	sp, #16
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b084      	sub	sp, #16
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
 8005dae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005db0:	200f      	movs	r0, #15
 8005db2:	183b      	adds	r3, r7, r0
 8005db4:	2200      	movs	r2, #0
 8005db6:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d008      	beq.n	8005dd0 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	23ad      	movs	r3, #173	; 0xad
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	6839      	ldr	r1, [r7, #0]
 8005dc6:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8005dc8:	183b      	adds	r3, r7, r0
 8005dca:	2200      	movs	r2, #0
 8005dcc:	701a      	strb	r2, [r3, #0]
 8005dce:	e003      	b.n	8005dd8 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005dd0:	230f      	movs	r3, #15
 8005dd2:	18fb      	adds	r3, r7, r3
 8005dd4:	2202      	movs	r2, #2
 8005dd6:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005dd8:	230f      	movs	r3, #15
 8005dda:	18fb      	adds	r3, r7, r3
 8005ddc:	781b      	ldrb	r3, [r3, #0]
}
 8005dde:	0018      	movs	r0, r3
 8005de0:	46bd      	mov	sp, r7
 8005de2:	b004      	add	sp, #16
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b082      	sub	sp, #8
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	0018      	movs	r0, r3
 8005df2:	f001 fcf9 	bl	80077e8 <USBD_LL_Start>

  return USBD_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	0018      	movs	r0, r3
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	b002      	add	sp, #8
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	0018      	movs	r0, r3
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	b002      	add	sp, #8
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005e12:	b590      	push	{r4, r7, lr}
 8005e14:	b085      	sub	sp, #20
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
 8005e1a:	000a      	movs	r2, r1
 8005e1c:	1cfb      	adds	r3, r7, #3
 8005e1e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005e20:	240f      	movs	r4, #15
 8005e22:	193b      	adds	r3, r7, r4
 8005e24:	2202      	movs	r2, #2
 8005e26:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	23ad      	movs	r3, #173	; 0xad
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	58d3      	ldr	r3, [r2, r3]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00e      	beq.n	8005e52 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	23ad      	movs	r3, #173	; 0xad
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	58d3      	ldr	r3, [r2, r3]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	1cfa      	adds	r2, r7, #3
 8005e40:	7811      	ldrb	r1, [r2, #0]
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	0010      	movs	r0, r2
 8005e46:	4798      	blx	r3
 8005e48:	1e03      	subs	r3, r0, #0
 8005e4a:	d102      	bne.n	8005e52 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8005e4c:	193b      	adds	r3, r7, r4
 8005e4e:	2200      	movs	r2, #0
 8005e50:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8005e52:	230f      	movs	r3, #15
 8005e54:	18fb      	adds	r3, r7, r3
 8005e56:	781b      	ldrb	r3, [r3, #0]
}
 8005e58:	0018      	movs	r0, r3
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	b005      	add	sp, #20
 8005e5e:	bd90      	pop	{r4, r7, pc}

08005e60 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	000a      	movs	r2, r1
 8005e6a:	1cfb      	adds	r3, r7, #3
 8005e6c:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	23ad      	movs	r3, #173	; 0xad
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	58d3      	ldr	r3, [r2, r3]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	1cfa      	adds	r2, r7, #3
 8005e7a:	7811      	ldrb	r1, [r2, #0]
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	0010      	movs	r0, r2
 8005e80:	4798      	blx	r3

  return USBD_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	0018      	movs	r0, r3
 8005e86:	46bd      	mov	sp, r7
 8005e88:	b002      	add	sp, #8
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	22aa      	movs	r2, #170	; 0xaa
 8005e9a:	0092      	lsls	r2, r2, #2
 8005e9c:	4694      	mov	ip, r2
 8005e9e:	4463      	add	r3, ip
 8005ea0:	683a      	ldr	r2, [r7, #0]
 8005ea2:	0011      	movs	r1, r2
 8005ea4:	0018      	movs	r0, r3
 8005ea6:	f001 f810 	bl	8006eca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	23a5      	movs	r3, #165	; 0xa5
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	2101      	movs	r1, #1
 8005eb2:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a23      	ldr	r2, [pc, #140]	; (8005f44 <USBD_LL_SetupStage+0xb8>)
 8005eb8:	5a9b      	ldrh	r3, [r3, r2]
 8005eba:	0019      	movs	r1, r3
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	23a6      	movs	r3, #166	; 0xa6
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	23aa      	movs	r3, #170	; 0xaa
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	5cd3      	ldrb	r3, [r2, r3]
 8005ecc:	001a      	movs	r2, r3
 8005ece:	231f      	movs	r3, #31
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d019      	beq.n	8005f0a <USBD_LL_SetupStage+0x7e>
 8005ed6:	d822      	bhi.n	8005f1e <USBD_LL_SetupStage+0x92>
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <USBD_LL_SetupStage+0x56>
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d00a      	beq.n	8005ef6 <USBD_LL_SetupStage+0x6a>
 8005ee0:	e01d      	b.n	8005f1e <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	22aa      	movs	r2, #170	; 0xaa
 8005ee6:	0092      	lsls	r2, r2, #2
 8005ee8:	189a      	adds	r2, r3, r2
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	0011      	movs	r1, r2
 8005eee:	0018      	movs	r0, r3
 8005ef0:	f000 fa10 	bl	8006314 <USBD_StdDevReq>
      break;
 8005ef4:	e020      	b.n	8005f38 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	22aa      	movs	r2, #170	; 0xaa
 8005efa:	0092      	lsls	r2, r2, #2
 8005efc:	189a      	adds	r2, r3, r2
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	0011      	movs	r1, r2
 8005f02:	0018      	movs	r0, r3
 8005f04:	f000 fa78 	bl	80063f8 <USBD_StdItfReq>
      break;
 8005f08:	e016      	b.n	8005f38 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	22aa      	movs	r2, #170	; 0xaa
 8005f0e:	0092      	lsls	r2, r2, #2
 8005f10:	189a      	adds	r2, r3, r2
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	0011      	movs	r1, r2
 8005f16:	0018      	movs	r0, r3
 8005f18:	f000 fac5 	bl	80064a6 <USBD_StdEPReq>
      break;
 8005f1c:	e00c      	b.n	8005f38 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	23aa      	movs	r3, #170	; 0xaa
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	5cd3      	ldrb	r3, [r2, r3]
 8005f26:	227f      	movs	r2, #127	; 0x7f
 8005f28:	4393      	bics	r3, r2
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	0011      	movs	r1, r2
 8005f30:	0018      	movs	r0, r3
 8005f32:	f001 fce0 	bl	80078f6 <USBD_LL_StallEP>
      break;
 8005f36:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	0018      	movs	r0, r3
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	b002      	add	sp, #8
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	46c0      	nop			; (mov r8, r8)
 8005f44:	000002ae 	.word	0x000002ae

08005f48 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b086      	sub	sp, #24
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	607a      	str	r2, [r7, #4]
 8005f52:	200b      	movs	r0, #11
 8005f54:	183b      	adds	r3, r7, r0
 8005f56:	1c0a      	adds	r2, r1, #0
 8005f58:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005f5a:	183b      	adds	r3, r7, r0
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d154      	bne.n	800600c <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	3355      	adds	r3, #85	; 0x55
 8005f66:	33ff      	adds	r3, #255	; 0xff
 8005f68:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	23a5      	movs	r3, #165	; 0xa5
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	58d3      	ldr	r3, [r2, r3]
 8005f72:	2b03      	cmp	r3, #3
 8005f74:	d139      	bne.n	8005fea <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	68da      	ldr	r2, [r3, #12]
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d919      	bls.n	8005fb6 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	68da      	ldr	r2, [r3, #12]
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	1ad2      	subs	r2, r2, r3
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	68da      	ldr	r2, [r3, #12]
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d203      	bcs.n	8005fa4 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	e002      	b.n	8005faa <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	6879      	ldr	r1, [r7, #4]
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	001a      	movs	r2, r3
 8005fb0:	f001 f89b 	bl	80070ea <USBD_CtlContinueRx>
 8005fb4:	e045      	b.n	8006042 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	23ad      	movs	r3, #173	; 0xad
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	58d3      	ldr	r3, [r2, r3]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00d      	beq.n	8005fe0 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	23a7      	movs	r3, #167	; 0xa7
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005fcc:	2b03      	cmp	r3, #3
 8005fce:	d107      	bne.n	8005fe0 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	23ad      	movs	r3, #173	; 0xad
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	58d3      	ldr	r3, [r2, r3]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	0010      	movs	r0, r2
 8005fde:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	0018      	movs	r0, r3
 8005fe4:	f001 f894 	bl	8007110 <USBD_CtlSendStatus>
 8005fe8:	e02b      	b.n	8006042 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	23a5      	movs	r3, #165	; 0xa5
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	58d3      	ldr	r3, [r2, r3]
 8005ff2:	2b05      	cmp	r3, #5
 8005ff4:	d125      	bne.n	8006042 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	23a5      	movs	r3, #165	; 0xa5
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2100      	movs	r1, #0
 8006004:	0018      	movs	r0, r3
 8006006:	f001 fc76 	bl	80078f6 <USBD_LL_StallEP>
 800600a:	e01a      	b.n	8006042 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	23ad      	movs	r3, #173	; 0xad
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	58d3      	ldr	r3, [r2, r3]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d011      	beq.n	800603e <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	23a7      	movs	r3, #167	; 0xa7
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8006022:	2b03      	cmp	r3, #3
 8006024:	d10b      	bne.n	800603e <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	23ad      	movs	r3, #173	; 0xad
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	58d3      	ldr	r3, [r2, r3]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	220b      	movs	r2, #11
 8006032:	18ba      	adds	r2, r7, r2
 8006034:	7811      	ldrb	r1, [r2, #0]
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	0010      	movs	r0, r2
 800603a:	4798      	blx	r3
 800603c:	e001      	b.n	8006042 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800603e:	2302      	movs	r3, #2
 8006040:	e000      	b.n	8006044 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	0018      	movs	r0, r3
 8006046:	46bd      	mov	sp, r7
 8006048:	b006      	add	sp, #24
 800604a:	bd80      	pop	{r7, pc}

0800604c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	607a      	str	r2, [r7, #4]
 8006056:	200b      	movs	r0, #11
 8006058:	183b      	adds	r3, r7, r0
 800605a:	1c0a      	adds	r2, r1, #0
 800605c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800605e:	183b      	adds	r3, r7, r0
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d000      	beq.n	8006068 <USBD_LL_DataInStage+0x1c>
 8006066:	e08e      	b.n	8006186 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	3314      	adds	r3, #20
 800606c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	23a5      	movs	r3, #165	; 0xa5
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	58d3      	ldr	r3, [r2, r3]
 8006076:	2b02      	cmp	r3, #2
 8006078:	d164      	bne.n	8006144 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	68da      	ldr	r2, [r3, #12]
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	429a      	cmp	r2, r3
 8006084:	d915      	bls.n	80060b2 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	68da      	ldr	r2, [r3, #12]
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	1ad2      	subs	r2, r2, r3
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	b29a      	uxth	r2, r3
 800609a:	6879      	ldr	r1, [r7, #4]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	0018      	movs	r0, r3
 80060a0:	f000 ffec 	bl	800707c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	2300      	movs	r3, #0
 80060a8:	2200      	movs	r2, #0
 80060aa:	2100      	movs	r1, #0
 80060ac:	f001 fd0c 	bl	8007ac8 <USBD_LL_PrepareReceive>
 80060b0:	e059      	b.n	8006166 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	689a      	ldr	r2, [r3, #8]
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	0019      	movs	r1, r3
 80060bc:	0010      	movs	r0, r2
 80060be:	f7fa f8b1 	bl	8000224 <__aeabi_uidivmod>
 80060c2:	1e0b      	subs	r3, r1, #0
 80060c4:	d11f      	bne.n	8006106 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	689a      	ldr	r2, [r3, #8]
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d319      	bcc.n	8006106 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	689a      	ldr	r2, [r3, #8]
 80060d6:	68f9      	ldr	r1, [r7, #12]
 80060d8:	23a6      	movs	r3, #166	; 0xa6
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 80060de:	429a      	cmp	r2, r3
 80060e0:	d211      	bcs.n	8006106 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	2100      	movs	r1, #0
 80060e8:	0018      	movs	r0, r3
 80060ea:	f000 ffc7 	bl	800707c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	23a6      	movs	r3, #166	; 0xa6
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	2100      	movs	r1, #0
 80060f6:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	2300      	movs	r3, #0
 80060fc:	2200      	movs	r2, #0
 80060fe:	2100      	movs	r1, #0
 8006100:	f001 fce2 	bl	8007ac8 <USBD_LL_PrepareReceive>
 8006104:	e02f      	b.n	8006166 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	23ad      	movs	r3, #173	; 0xad
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	58d3      	ldr	r3, [r2, r3]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00d      	beq.n	8006130 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	23a7      	movs	r3, #167	; 0xa7
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800611c:	2b03      	cmp	r3, #3
 800611e:	d107      	bne.n	8006130 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	23ad      	movs	r3, #173	; 0xad
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	58d3      	ldr	r3, [r2, r3]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	0010      	movs	r0, r2
 800612e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2180      	movs	r1, #128	; 0x80
 8006134:	0018      	movs	r0, r3
 8006136:	f001 fbde 	bl	80078f6 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	0018      	movs	r0, r3
 800613e:	f000 fffb 	bl	8007138 <USBD_CtlReceiveStatus>
 8006142:	e010      	b.n	8006166 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	23a5      	movs	r3, #165	; 0xa5
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	58d3      	ldr	r3, [r2, r3]
 800614c:	2b04      	cmp	r3, #4
 800614e:	d005      	beq.n	800615c <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	23a5      	movs	r3, #165	; 0xa5
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006158:	2b00      	cmp	r3, #0
 800615a:	d104      	bne.n	8006166 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2180      	movs	r1, #128	; 0x80
 8006160:	0018      	movs	r0, r3
 8006162:	f001 fbc8 	bl	80078f6 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	23a8      	movs	r3, #168	; 0xa8
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	5cd3      	ldrb	r3, [r2, r3]
 800616e:	2b01      	cmp	r3, #1
 8006170:	d124      	bne.n	80061bc <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	0018      	movs	r0, r3
 8006176:	f7ff fe43 	bl	8005e00 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	23a8      	movs	r3, #168	; 0xa8
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	2100      	movs	r1, #0
 8006182:	54d1      	strb	r1, [r2, r3]
 8006184:	e01a      	b.n	80061bc <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	23ad      	movs	r3, #173	; 0xad
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	58d3      	ldr	r3, [r2, r3]
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d011      	beq.n	80061b8 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	23a7      	movs	r3, #167	; 0xa7
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800619c:	2b03      	cmp	r3, #3
 800619e:	d10b      	bne.n	80061b8 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	23ad      	movs	r3, #173	; 0xad
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	58d3      	ldr	r3, [r2, r3]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	220b      	movs	r2, #11
 80061ac:	18ba      	adds	r2, r7, r2
 80061ae:	7811      	ldrb	r1, [r2, #0]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	0010      	movs	r0, r2
 80061b4:	4798      	blx	r3
 80061b6:	e001      	b.n	80061bc <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80061b8:	2302      	movs	r3, #2
 80061ba:	e000      	b.n	80061be <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	0018      	movs	r0, r3
 80061c0:	46bd      	mov	sp, r7
 80061c2:	b006      	add	sp, #24
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b082      	sub	sp, #8
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	2340      	movs	r3, #64	; 0x40
 80061d2:	2200      	movs	r2, #0
 80061d4:	2100      	movs	r1, #0
 80061d6:	f001 fb2c 	bl	8007832 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	23ac      	movs	r3, #172	; 0xac
 80061de:	005b      	lsls	r3, r3, #1
 80061e0:	2101      	movs	r1, #1
 80061e2:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	23b2      	movs	r3, #178	; 0xb2
 80061e8:	005b      	lsls	r3, r3, #1
 80061ea:	2140      	movs	r1, #64	; 0x40
 80061ec:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	2340      	movs	r3, #64	; 0x40
 80061f2:	2200      	movs	r2, #0
 80061f4:	2180      	movs	r1, #128	; 0x80
 80061f6:	f001 fb1c 	bl	8007832 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2240      	movs	r2, #64	; 0x40
 8006204:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	23a7      	movs	r3, #167	; 0xa7
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	2101      	movs	r1, #1
 800620e:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	23a5      	movs	r3, #165	; 0xa5
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	2100      	movs	r1, #0
 8006218:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	23a9      	movs	r3, #169	; 0xa9
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	2100      	movs	r1, #0
 8006228:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	23ae      	movs	r3, #174	; 0xae
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	58d3      	ldr	r3, [r2, r3]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00a      	beq.n	800624c <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	23ad      	movs	r3, #173	; 0xad
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	58d3      	ldr	r3, [r2, r3]
 800623e:	685a      	ldr	r2, [r3, #4]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	b2d9      	uxtb	r1, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	0018      	movs	r0, r3
 800624a:	4790      	blx	r2
  }

  return USBD_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	0018      	movs	r0, r3
 8006250:	46bd      	mov	sp, r7
 8006252:	b002      	add	sp, #8
 8006254:	bd80      	pop	{r7, pc}

08006256 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b082      	sub	sp, #8
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
 800625e:	000a      	movs	r2, r1
 8006260:	1cfb      	adds	r3, r7, #3
 8006262:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	1cfa      	adds	r2, r7, #3
 8006268:	7812      	ldrb	r2, [r2, #0]
 800626a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	0018      	movs	r0, r3
 8006270:	46bd      	mov	sp, r7
 8006272:	b002      	add	sp, #8
 8006274:	bd80      	pop	{r7, pc}
	...

08006278 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	23a7      	movs	r3, #167	; 0xa7
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	5cd1      	ldrb	r1, [r2, r3]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a06      	ldr	r2, [pc, #24]	; (80062a4 <USBD_LL_Suspend+0x2c>)
 800628c:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	23a7      	movs	r3, #167	; 0xa7
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	2104      	movs	r1, #4
 8006296:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	0018      	movs	r0, r3
 800629c:	46bd      	mov	sp, r7
 800629e:	b002      	add	sp, #8
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	46c0      	nop			; (mov r8, r8)
 80062a4:	0000029d 	.word	0x0000029d

080062a8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	23a7      	movs	r3, #167	; 0xa7
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	5cd3      	ldrb	r3, [r2, r3]
 80062b8:	2b04      	cmp	r3, #4
 80062ba:	d106      	bne.n	80062ca <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a05      	ldr	r2, [pc, #20]	; (80062d4 <USBD_LL_Resume+0x2c>)
 80062c0:	5c99      	ldrb	r1, [r3, r2]
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	23a7      	movs	r3, #167	; 0xa7
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	0018      	movs	r0, r3
 80062ce:	46bd      	mov	sp, r7
 80062d0:	b002      	add	sp, #8
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	0000029d 	.word	0x0000029d

080062d8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	23a7      	movs	r3, #167	; 0xa7
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	5cd3      	ldrb	r3, [r2, r3]
 80062e8:	2b03      	cmp	r3, #3
 80062ea:	d10e      	bne.n	800630a <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	23ad      	movs	r3, #173	; 0xad
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	58d3      	ldr	r3, [r2, r3]
 80062f4:	69db      	ldr	r3, [r3, #28]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d007      	beq.n	800630a <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	23ad      	movs	r3, #173	; 0xad
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	58d3      	ldr	r3, [r2, r3]
 8006302:	69db      	ldr	r3, [r3, #28]
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	0010      	movs	r0, r2
 8006308:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	0018      	movs	r0, r3
 800630e:	46bd      	mov	sp, r7
 8006310:	b002      	add	sp, #8
 8006312:	bd80      	pop	{r7, pc}

08006314 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800631e:	230f      	movs	r3, #15
 8006320:	18fb      	adds	r3, r7, r3
 8006322:	2200      	movs	r2, #0
 8006324:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	001a      	movs	r2, r3
 800632c:	2360      	movs	r3, #96	; 0x60
 800632e:	4013      	ands	r3, r2
 8006330:	2b40      	cmp	r3, #64	; 0x40
 8006332:	d004      	beq.n	800633e <USBD_StdDevReq+0x2a>
 8006334:	d84f      	bhi.n	80063d6 <USBD_StdDevReq+0xc2>
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00b      	beq.n	8006352 <USBD_StdDevReq+0x3e>
 800633a:	2b20      	cmp	r3, #32
 800633c:	d14b      	bne.n	80063d6 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	23ad      	movs	r3, #173	; 0xad
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	58d3      	ldr	r3, [r2, r3]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	6839      	ldr	r1, [r7, #0]
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	0010      	movs	r0, r2
 800634e:	4798      	blx	r3
      break;
 8006350:	e048      	b.n	80063e4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	785b      	ldrb	r3, [r3, #1]
 8006356:	2b09      	cmp	r3, #9
 8006358:	d835      	bhi.n	80063c6 <USBD_StdDevReq+0xb2>
 800635a:	009a      	lsls	r2, r3, #2
 800635c:	4b25      	ldr	r3, [pc, #148]	; (80063f4 <USBD_StdDevReq+0xe0>)
 800635e:	18d3      	adds	r3, r2, r3
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	0011      	movs	r1, r2
 800636a:	0018      	movs	r0, r3
 800636c:	f000 fa52 	bl	8006814 <USBD_GetDescriptor>
          break;
 8006370:	e030      	b.n	80063d4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	0011      	movs	r1, r2
 8006378:	0018      	movs	r0, r3
 800637a:	f000 fbfd 	bl	8006b78 <USBD_SetAddress>
          break;
 800637e:	e029      	b.n	80063d4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006380:	683a      	ldr	r2, [r7, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	0011      	movs	r1, r2
 8006386:	0018      	movs	r0, r3
 8006388:	f000 fc4a 	bl	8006c20 <USBD_SetConfig>
          break;
 800638c:	e022      	b.n	80063d4 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800638e:	683a      	ldr	r2, [r7, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	0011      	movs	r1, r2
 8006394:	0018      	movs	r0, r3
 8006396:	f000 fce7 	bl	8006d68 <USBD_GetConfig>
          break;
 800639a:	e01b      	b.n	80063d4 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800639c:	683a      	ldr	r2, [r7, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	0011      	movs	r1, r2
 80063a2:	0018      	movs	r0, r3
 80063a4:	f000 fd1b 	bl	8006dde <USBD_GetStatus>
          break;
 80063a8:	e014      	b.n	80063d4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80063aa:	683a      	ldr	r2, [r7, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	0011      	movs	r1, r2
 80063b0:	0018      	movs	r0, r3
 80063b2:	f000 fd4e 	bl	8006e52 <USBD_SetFeature>
          break;
 80063b6:	e00d      	b.n	80063d4 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80063b8:	683a      	ldr	r2, [r7, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	0011      	movs	r1, r2
 80063be:	0018      	movs	r0, r3
 80063c0:	f000 fd5d 	bl	8006e7e <USBD_ClrFeature>
          break;
 80063c4:	e006      	b.n	80063d4 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80063c6:	683a      	ldr	r2, [r7, #0]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	0011      	movs	r1, r2
 80063cc:	0018      	movs	r0, r3
 80063ce:	f000 fdb7 	bl	8006f40 <USBD_CtlError>
          break;
 80063d2:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80063d4:	e006      	b.n	80063e4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	0011      	movs	r1, r2
 80063dc:	0018      	movs	r0, r3
 80063de:	f000 fdaf 	bl	8006f40 <USBD_CtlError>
      break;
 80063e2:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80063e4:	230f      	movs	r3, #15
 80063e6:	18fb      	adds	r3, r7, r3
 80063e8:	781b      	ldrb	r3, [r3, #0]
}
 80063ea:	0018      	movs	r0, r3
 80063ec:	46bd      	mov	sp, r7
 80063ee:	b004      	add	sp, #16
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	46c0      	nop			; (mov r8, r8)
 80063f4:	08007d10 	.word	0x08007d10

080063f8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80063f8:	b5b0      	push	{r4, r5, r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006402:	230f      	movs	r3, #15
 8006404:	18fb      	adds	r3, r7, r3
 8006406:	2200      	movs	r2, #0
 8006408:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	001a      	movs	r2, r3
 8006410:	2360      	movs	r3, #96	; 0x60
 8006412:	4013      	ands	r3, r2
 8006414:	2b40      	cmp	r3, #64	; 0x40
 8006416:	d004      	beq.n	8006422 <USBD_StdItfReq+0x2a>
 8006418:	d839      	bhi.n	800648e <USBD_StdItfReq+0x96>
 800641a:	2b00      	cmp	r3, #0
 800641c:	d001      	beq.n	8006422 <USBD_StdItfReq+0x2a>
 800641e:	2b20      	cmp	r3, #32
 8006420:	d135      	bne.n	800648e <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	23a7      	movs	r3, #167	; 0xa7
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	5cd3      	ldrb	r3, [r2, r3]
 800642a:	3b01      	subs	r3, #1
 800642c:	2b02      	cmp	r3, #2
 800642e:	d825      	bhi.n	800647c <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	889b      	ldrh	r3, [r3, #4]
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b01      	cmp	r3, #1
 8006438:	d819      	bhi.n	800646e <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	23ad      	movs	r3, #173	; 0xad
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	58d3      	ldr	r3, [r2, r3]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	250f      	movs	r5, #15
 8006446:	197c      	adds	r4, r7, r5
 8006448:	6839      	ldr	r1, [r7, #0]
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	0010      	movs	r0, r2
 800644e:	4798      	blx	r3
 8006450:	0003      	movs	r3, r0
 8006452:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	88db      	ldrh	r3, [r3, #6]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d116      	bne.n	800648a <USBD_StdItfReq+0x92>
 800645c:	197b      	adds	r3, r7, r5
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d112      	bne.n	800648a <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	0018      	movs	r0, r3
 8006468:	f000 fe52 	bl	8007110 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800646c:	e00d      	b.n	800648a <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800646e:	683a      	ldr	r2, [r7, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	0011      	movs	r1, r2
 8006474:	0018      	movs	r0, r3
 8006476:	f000 fd63 	bl	8006f40 <USBD_CtlError>
          break;
 800647a:	e006      	b.n	800648a <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800647c:	683a      	ldr	r2, [r7, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	0011      	movs	r1, r2
 8006482:	0018      	movs	r0, r3
 8006484:	f000 fd5c 	bl	8006f40 <USBD_CtlError>
          break;
 8006488:	e000      	b.n	800648c <USBD_StdItfReq+0x94>
          break;
 800648a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800648c:	e006      	b.n	800649c <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800648e:	683a      	ldr	r2, [r7, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	0011      	movs	r1, r2
 8006494:	0018      	movs	r0, r3
 8006496:	f000 fd53 	bl	8006f40 <USBD_CtlError>
      break;
 800649a:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	0018      	movs	r0, r3
 80064a0:	46bd      	mov	sp, r7
 80064a2:	b004      	add	sp, #16
 80064a4:	bdb0      	pop	{r4, r5, r7, pc}

080064a6 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80064a6:	b5b0      	push	{r4, r5, r7, lr}
 80064a8:	b084      	sub	sp, #16
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
 80064ae:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80064b0:	230f      	movs	r3, #15
 80064b2:	18fb      	adds	r3, r7, r3
 80064b4:	2200      	movs	r2, #0
 80064b6:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	889a      	ldrh	r2, [r3, #4]
 80064bc:	230e      	movs	r3, #14
 80064be:	18fb      	adds	r3, r7, r3
 80064c0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	001a      	movs	r2, r3
 80064c8:	2360      	movs	r3, #96	; 0x60
 80064ca:	4013      	ands	r3, r2
 80064cc:	2b40      	cmp	r3, #64	; 0x40
 80064ce:	d006      	beq.n	80064de <USBD_StdEPReq+0x38>
 80064d0:	d900      	bls.n	80064d4 <USBD_StdEPReq+0x2e>
 80064d2:	e190      	b.n	80067f6 <USBD_StdEPReq+0x350>
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00c      	beq.n	80064f2 <USBD_StdEPReq+0x4c>
 80064d8:	2b20      	cmp	r3, #32
 80064da:	d000      	beq.n	80064de <USBD_StdEPReq+0x38>
 80064dc:	e18b      	b.n	80067f6 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	23ad      	movs	r3, #173	; 0xad
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	58d3      	ldr	r3, [r2, r3]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	6839      	ldr	r1, [r7, #0]
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	0010      	movs	r0, r2
 80064ee:	4798      	blx	r3
      break;
 80064f0:	e188      	b.n	8006804 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	001a      	movs	r2, r3
 80064f8:	2360      	movs	r3, #96	; 0x60
 80064fa:	4013      	ands	r3, r2
 80064fc:	2b20      	cmp	r3, #32
 80064fe:	d10f      	bne.n	8006520 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	23ad      	movs	r3, #173	; 0xad
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	58d3      	ldr	r3, [r2, r3]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	250f      	movs	r5, #15
 800650c:	197c      	adds	r4, r7, r5
 800650e:	6839      	ldr	r1, [r7, #0]
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	0010      	movs	r0, r2
 8006514:	4798      	blx	r3
 8006516:	0003      	movs	r3, r0
 8006518:	7023      	strb	r3, [r4, #0]

        return ret;
 800651a:	197b      	adds	r3, r7, r5
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	e174      	b.n	800680a <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	785b      	ldrb	r3, [r3, #1]
 8006524:	2b03      	cmp	r3, #3
 8006526:	d007      	beq.n	8006538 <USBD_StdEPReq+0x92>
 8006528:	dd00      	ble.n	800652c <USBD_StdEPReq+0x86>
 800652a:	e15c      	b.n	80067e6 <USBD_StdEPReq+0x340>
 800652c:	2b00      	cmp	r3, #0
 800652e:	d100      	bne.n	8006532 <USBD_StdEPReq+0x8c>
 8006530:	e092      	b.n	8006658 <USBD_StdEPReq+0x1b2>
 8006532:	2b01      	cmp	r3, #1
 8006534:	d04b      	beq.n	80065ce <USBD_StdEPReq+0x128>
 8006536:	e156      	b.n	80067e6 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	23a7      	movs	r3, #167	; 0xa7
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	5cd3      	ldrb	r3, [r2, r3]
 8006540:	2b02      	cmp	r3, #2
 8006542:	d002      	beq.n	800654a <USBD_StdEPReq+0xa4>
 8006544:	2b03      	cmp	r3, #3
 8006546:	d01d      	beq.n	8006584 <USBD_StdEPReq+0xde>
 8006548:	e039      	b.n	80065be <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800654a:	220e      	movs	r2, #14
 800654c:	18bb      	adds	r3, r7, r2
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d010      	beq.n	8006576 <USBD_StdEPReq+0xd0>
 8006554:	18bb      	adds	r3, r7, r2
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	2b80      	cmp	r3, #128	; 0x80
 800655a:	d00c      	beq.n	8006576 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800655c:	18bb      	adds	r3, r7, r2
 800655e:	781a      	ldrb	r2, [r3, #0]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	0011      	movs	r1, r2
 8006564:	0018      	movs	r0, r3
 8006566:	f001 f9c6 	bl	80078f6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2180      	movs	r1, #128	; 0x80
 800656e:	0018      	movs	r0, r3
 8006570:	f001 f9c1 	bl	80078f6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006574:	e02a      	b.n	80065cc <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	0011      	movs	r1, r2
 800657c:	0018      	movs	r0, r3
 800657e:	f000 fcdf 	bl	8006f40 <USBD_CtlError>
              break;
 8006582:	e023      	b.n	80065cc <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	885b      	ldrh	r3, [r3, #2]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d113      	bne.n	80065b4 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800658c:	220e      	movs	r2, #14
 800658e:	18bb      	adds	r3, r7, r2
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00e      	beq.n	80065b4 <USBD_StdEPReq+0x10e>
 8006596:	18bb      	adds	r3, r7, r2
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	2b80      	cmp	r3, #128	; 0x80
 800659c:	d00a      	beq.n	80065b4 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	88db      	ldrh	r3, [r3, #6]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d106      	bne.n	80065b4 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80065a6:	18bb      	adds	r3, r7, r2
 80065a8:	781a      	ldrb	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	0011      	movs	r1, r2
 80065ae:	0018      	movs	r0, r3
 80065b0:	f001 f9a1 	bl	80078f6 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	0018      	movs	r0, r3
 80065b8:	f000 fdaa 	bl	8007110 <USBD_CtlSendStatus>

              break;
 80065bc:	e006      	b.n	80065cc <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	0011      	movs	r1, r2
 80065c4:	0018      	movs	r0, r3
 80065c6:	f000 fcbb 	bl	8006f40 <USBD_CtlError>
              break;
 80065ca:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80065cc:	e112      	b.n	80067f4 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	23a7      	movs	r3, #167	; 0xa7
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	5cd3      	ldrb	r3, [r2, r3]
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d002      	beq.n	80065e0 <USBD_StdEPReq+0x13a>
 80065da:	2b03      	cmp	r3, #3
 80065dc:	d01d      	beq.n	800661a <USBD_StdEPReq+0x174>
 80065de:	e032      	b.n	8006646 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065e0:	220e      	movs	r2, #14
 80065e2:	18bb      	adds	r3, r7, r2
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d010      	beq.n	800660c <USBD_StdEPReq+0x166>
 80065ea:	18bb      	adds	r3, r7, r2
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	2b80      	cmp	r3, #128	; 0x80
 80065f0:	d00c      	beq.n	800660c <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80065f2:	18bb      	adds	r3, r7, r2
 80065f4:	781a      	ldrb	r2, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	0011      	movs	r1, r2
 80065fa:	0018      	movs	r0, r3
 80065fc:	f001 f97b 	bl	80078f6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2180      	movs	r1, #128	; 0x80
 8006604:	0018      	movs	r0, r3
 8006606:	f001 f976 	bl	80078f6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800660a:	e024      	b.n	8006656 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	0011      	movs	r1, r2
 8006612:	0018      	movs	r0, r3
 8006614:	f000 fc94 	bl	8006f40 <USBD_CtlError>
              break;
 8006618:	e01d      	b.n	8006656 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	885b      	ldrh	r3, [r3, #2]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d118      	bne.n	8006654 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006622:	210e      	movs	r1, #14
 8006624:	187b      	adds	r3, r7, r1
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	227f      	movs	r2, #127	; 0x7f
 800662a:	4013      	ands	r3, r2
 800662c:	d006      	beq.n	800663c <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800662e:	187b      	adds	r3, r7, r1
 8006630:	781a      	ldrb	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	0011      	movs	r1, r2
 8006636:	0018      	movs	r0, r3
 8006638:	f001 f988 	bl	800794c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	0018      	movs	r0, r3
 8006640:	f000 fd66 	bl	8007110 <USBD_CtlSendStatus>
              }
              break;
 8006644:	e006      	b.n	8006654 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8006646:	683a      	ldr	r2, [r7, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	0011      	movs	r1, r2
 800664c:	0018      	movs	r0, r3
 800664e:	f000 fc77 	bl	8006f40 <USBD_CtlError>
              break;
 8006652:	e000      	b.n	8006656 <USBD_StdEPReq+0x1b0>
              break;
 8006654:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8006656:	e0cd      	b.n	80067f4 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	23a7      	movs	r3, #167	; 0xa7
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	5cd3      	ldrb	r3, [r2, r3]
 8006660:	2b02      	cmp	r3, #2
 8006662:	d002      	beq.n	800666a <USBD_StdEPReq+0x1c4>
 8006664:	2b03      	cmp	r3, #3
 8006666:	d03c      	beq.n	80066e2 <USBD_StdEPReq+0x23c>
 8006668:	e0b5      	b.n	80067d6 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800666a:	220e      	movs	r2, #14
 800666c:	18bb      	adds	r3, r7, r2
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00a      	beq.n	800668a <USBD_StdEPReq+0x1e4>
 8006674:	18bb      	adds	r3, r7, r2
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	2b80      	cmp	r3, #128	; 0x80
 800667a:	d006      	beq.n	800668a <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800667c:	683a      	ldr	r2, [r7, #0]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	0011      	movs	r1, r2
 8006682:	0018      	movs	r0, r3
 8006684:	f000 fc5c 	bl	8006f40 <USBD_CtlError>
                break;
 8006688:	e0ac      	b.n	80067e4 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800668a:	220e      	movs	r2, #14
 800668c:	18bb      	adds	r3, r7, r2
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	b25b      	sxtb	r3, r3
 8006692:	2b00      	cmp	r3, #0
 8006694:	da0c      	bge.n	80066b0 <USBD_StdEPReq+0x20a>
 8006696:	18bb      	adds	r3, r7, r2
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	227f      	movs	r2, #127	; 0x7f
 800669c:	401a      	ands	r2, r3
 800669e:	0013      	movs	r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	189b      	adds	r3, r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	3310      	adds	r3, #16
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	18d3      	adds	r3, r2, r3
 80066ac:	3304      	adds	r3, #4
 80066ae:	e00d      	b.n	80066cc <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80066b0:	230e      	movs	r3, #14
 80066b2:	18fb      	adds	r3, r7, r3
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	227f      	movs	r2, #127	; 0x7f
 80066b8:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066ba:	0013      	movs	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	189b      	adds	r3, r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	3351      	adds	r3, #81	; 0x51
 80066c4:	33ff      	adds	r3, #255	; 0xff
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	18d3      	adds	r3, r2, r3
 80066ca:	3304      	adds	r3, #4
 80066cc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	2200      	movs	r2, #0
 80066d2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80066d4:	68b9      	ldr	r1, [r7, #8]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2202      	movs	r2, #2
 80066da:	0018      	movs	r0, r3
 80066dc:	f000 fcae 	bl	800703c <USBD_CtlSendData>
              break;
 80066e0:	e080      	b.n	80067e4 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80066e2:	220e      	movs	r2, #14
 80066e4:	18bb      	adds	r3, r7, r2
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	b25b      	sxtb	r3, r3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	da14      	bge.n	8006718 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80066ee:	18bb      	adds	r3, r7, r2
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	220f      	movs	r2, #15
 80066f4:	401a      	ands	r2, r3
 80066f6:	6879      	ldr	r1, [r7, #4]
 80066f8:	0013      	movs	r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	189b      	adds	r3, r3, r2
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	18cb      	adds	r3, r1, r3
 8006702:	3318      	adds	r3, #24
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d11e      	bne.n	8006748 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	0011      	movs	r1, r2
 8006710:	0018      	movs	r0, r3
 8006712:	f000 fc15 	bl	8006f40 <USBD_CtlError>
                  break;
 8006716:	e065      	b.n	80067e4 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006718:	230e      	movs	r3, #14
 800671a:	18fb      	adds	r3, r7, r3
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	220f      	movs	r2, #15
 8006720:	401a      	ands	r2, r3
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	23ac      	movs	r3, #172	; 0xac
 8006726:	0059      	lsls	r1, r3, #1
 8006728:	0013      	movs	r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	189b      	adds	r3, r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	18c3      	adds	r3, r0, r3
 8006732:	185b      	adds	r3, r3, r1
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d106      	bne.n	8006748 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	0011      	movs	r1, r2
 8006740:	0018      	movs	r0, r3
 8006742:	f000 fbfd 	bl	8006f40 <USBD_CtlError>
                  break;
 8006746:	e04d      	b.n	80067e4 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006748:	220e      	movs	r2, #14
 800674a:	18bb      	adds	r3, r7, r2
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	b25b      	sxtb	r3, r3
 8006750:	2b00      	cmp	r3, #0
 8006752:	da0c      	bge.n	800676e <USBD_StdEPReq+0x2c8>
 8006754:	18bb      	adds	r3, r7, r2
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	227f      	movs	r2, #127	; 0x7f
 800675a:	401a      	ands	r2, r3
 800675c:	0013      	movs	r3, r2
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	189b      	adds	r3, r3, r2
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	3310      	adds	r3, #16
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	18d3      	adds	r3, r2, r3
 800676a:	3304      	adds	r3, #4
 800676c:	e00d      	b.n	800678a <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800676e:	230e      	movs	r3, #14
 8006770:	18fb      	adds	r3, r7, r3
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	227f      	movs	r2, #127	; 0x7f
 8006776:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006778:	0013      	movs	r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	189b      	adds	r3, r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	3351      	adds	r3, #81	; 0x51
 8006782:	33ff      	adds	r3, #255	; 0xff
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	18d3      	adds	r3, r2, r3
 8006788:	3304      	adds	r3, #4
 800678a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800678c:	220e      	movs	r2, #14
 800678e:	18bb      	adds	r3, r7, r2
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <USBD_StdEPReq+0x2f8>
 8006796:	18bb      	adds	r3, r7, r2
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	2b80      	cmp	r3, #128	; 0x80
 800679c:	d103      	bne.n	80067a6 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	2200      	movs	r2, #0
 80067a2:	601a      	str	r2, [r3, #0]
 80067a4:	e010      	b.n	80067c8 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80067a6:	230e      	movs	r3, #14
 80067a8:	18fb      	adds	r3, r7, r3
 80067aa:	781a      	ldrb	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	0011      	movs	r1, r2
 80067b0:	0018      	movs	r0, r3
 80067b2:	f001 f8f6 	bl	80079a2 <USBD_LL_IsStallEP>
 80067b6:	1e03      	subs	r3, r0, #0
 80067b8:	d003      	beq.n	80067c2 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	2201      	movs	r2, #1
 80067be:	601a      	str	r2, [r3, #0]
 80067c0:	e002      	b.n	80067c8 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	2200      	movs	r2, #0
 80067c6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80067c8:	68b9      	ldr	r1, [r7, #8]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2202      	movs	r2, #2
 80067ce:	0018      	movs	r0, r3
 80067d0:	f000 fc34 	bl	800703c <USBD_CtlSendData>
              break;
 80067d4:	e006      	b.n	80067e4 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	0011      	movs	r1, r2
 80067dc:	0018      	movs	r0, r3
 80067de:	f000 fbaf 	bl	8006f40 <USBD_CtlError>
              break;
 80067e2:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80067e4:	e006      	b.n	80067f4 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 80067e6:	683a      	ldr	r2, [r7, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	0011      	movs	r1, r2
 80067ec:	0018      	movs	r0, r3
 80067ee:	f000 fba7 	bl	8006f40 <USBD_CtlError>
          break;
 80067f2:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80067f4:	e006      	b.n	8006804 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	0011      	movs	r1, r2
 80067fc:	0018      	movs	r0, r3
 80067fe:	f000 fb9f 	bl	8006f40 <USBD_CtlError>
      break;
 8006802:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8006804:	230f      	movs	r3, #15
 8006806:	18fb      	adds	r3, r7, r3
 8006808:	781b      	ldrb	r3, [r3, #0]
}
 800680a:	0018      	movs	r0, r3
 800680c:	46bd      	mov	sp, r7
 800680e:	b004      	add	sp, #16
 8006810:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006814 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800681e:	2308      	movs	r3, #8
 8006820:	18fb      	adds	r3, r7, r3
 8006822:	2200      	movs	r2, #0
 8006824:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8006826:	2300      	movs	r3, #0
 8006828:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800682a:	230b      	movs	r3, #11
 800682c:	18fb      	adds	r3, r7, r3
 800682e:	2200      	movs	r2, #0
 8006830:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	885b      	ldrh	r3, [r3, #2]
 8006836:	0a1b      	lsrs	r3, r3, #8
 8006838:	b29b      	uxth	r3, r3
 800683a:	2b07      	cmp	r3, #7
 800683c:	d900      	bls.n	8006840 <USBD_GetDescriptor+0x2c>
 800683e:	e159      	b.n	8006af4 <USBD_GetDescriptor+0x2e0>
 8006840:	009a      	lsls	r2, r3, #2
 8006842:	4bcb      	ldr	r3, [pc, #812]	; (8006b70 <USBD_GetDescriptor+0x35c>)
 8006844:	18d3      	adds	r3, r2, r3
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	23ac      	movs	r3, #172	; 0xac
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	58d3      	ldr	r3, [r2, r3]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	7c12      	ldrb	r2, [r2, #16]
 8006858:	2108      	movs	r1, #8
 800685a:	1879      	adds	r1, r7, r1
 800685c:	0010      	movs	r0, r2
 800685e:	4798      	blx	r3
 8006860:	0003      	movs	r3, r0
 8006862:	60fb      	str	r3, [r7, #12]
      break;
 8006864:	e153      	b.n	8006b0e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	7c1b      	ldrb	r3, [r3, #16]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d10f      	bne.n	800688e <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	23ad      	movs	r3, #173	; 0xad
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	58d3      	ldr	r3, [r2, r3]
 8006876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006878:	2208      	movs	r2, #8
 800687a:	18ba      	adds	r2, r7, r2
 800687c:	0010      	movs	r0, r2
 800687e:	4798      	blx	r3
 8006880:	0003      	movs	r3, r0
 8006882:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	3301      	adds	r3, #1
 8006888:	2202      	movs	r2, #2
 800688a:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800688c:	e13f      	b.n	8006b0e <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	23ad      	movs	r3, #173	; 0xad
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	58d3      	ldr	r3, [r2, r3]
 8006896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006898:	2208      	movs	r2, #8
 800689a:	18ba      	adds	r2, r7, r2
 800689c:	0010      	movs	r0, r2
 800689e:	4798      	blx	r3
 80068a0:	0003      	movs	r3, r0
 80068a2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	3301      	adds	r3, #1
 80068a8:	2202      	movs	r2, #2
 80068aa:	701a      	strb	r2, [r3, #0]
      break;
 80068ac:	e12f      	b.n	8006b0e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	885b      	ldrh	r3, [r3, #2]
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	2b05      	cmp	r3, #5
 80068b6:	d900      	bls.n	80068ba <USBD_GetDescriptor+0xa6>
 80068b8:	e0d0      	b.n	8006a5c <USBD_GetDescriptor+0x248>
 80068ba:	009a      	lsls	r2, r3, #2
 80068bc:	4bad      	ldr	r3, [pc, #692]	; (8006b74 <USBD_GetDescriptor+0x360>)
 80068be:	18d3      	adds	r3, r2, r3
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	23ac      	movs	r3, #172	; 0xac
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	58d3      	ldr	r3, [r2, r3]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00d      	beq.n	80068ee <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	23ac      	movs	r3, #172	; 0xac
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	58d3      	ldr	r3, [r2, r3]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	7c12      	ldrb	r2, [r2, #16]
 80068e0:	2108      	movs	r1, #8
 80068e2:	1879      	adds	r1, r7, r1
 80068e4:	0010      	movs	r0, r2
 80068e6:	4798      	blx	r3
 80068e8:	0003      	movs	r3, r0
 80068ea:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068ec:	e0c3      	b.n	8006a76 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	0011      	movs	r1, r2
 80068f4:	0018      	movs	r0, r3
 80068f6:	f000 fb23 	bl	8006f40 <USBD_CtlError>
            err++;
 80068fa:	210b      	movs	r1, #11
 80068fc:	187b      	adds	r3, r7, r1
 80068fe:	781a      	ldrb	r2, [r3, #0]
 8006900:	187b      	adds	r3, r7, r1
 8006902:	3201      	adds	r2, #1
 8006904:	701a      	strb	r2, [r3, #0]
          break;
 8006906:	e0b6      	b.n	8006a76 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	23ac      	movs	r3, #172	; 0xac
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	58d3      	ldr	r3, [r2, r3]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00d      	beq.n	8006932 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	23ac      	movs	r3, #172	; 0xac
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	58d3      	ldr	r3, [r2, r3]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	7c12      	ldrb	r2, [r2, #16]
 8006924:	2108      	movs	r1, #8
 8006926:	1879      	adds	r1, r7, r1
 8006928:	0010      	movs	r0, r2
 800692a:	4798      	blx	r3
 800692c:	0003      	movs	r3, r0
 800692e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006930:	e0a1      	b.n	8006a76 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006932:	683a      	ldr	r2, [r7, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	0011      	movs	r1, r2
 8006938:	0018      	movs	r0, r3
 800693a:	f000 fb01 	bl	8006f40 <USBD_CtlError>
            err++;
 800693e:	210b      	movs	r1, #11
 8006940:	187b      	adds	r3, r7, r1
 8006942:	781a      	ldrb	r2, [r3, #0]
 8006944:	187b      	adds	r3, r7, r1
 8006946:	3201      	adds	r2, #1
 8006948:	701a      	strb	r2, [r3, #0]
          break;
 800694a:	e094      	b.n	8006a76 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	23ac      	movs	r3, #172	; 0xac
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	58d3      	ldr	r3, [r2, r3]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00d      	beq.n	8006976 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	23ac      	movs	r3, #172	; 0xac
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	58d3      	ldr	r3, [r2, r3]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	7c12      	ldrb	r2, [r2, #16]
 8006968:	2108      	movs	r1, #8
 800696a:	1879      	adds	r1, r7, r1
 800696c:	0010      	movs	r0, r2
 800696e:	4798      	blx	r3
 8006970:	0003      	movs	r3, r0
 8006972:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006974:	e07f      	b.n	8006a76 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006976:	683a      	ldr	r2, [r7, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	0011      	movs	r1, r2
 800697c:	0018      	movs	r0, r3
 800697e:	f000 fadf 	bl	8006f40 <USBD_CtlError>
            err++;
 8006982:	210b      	movs	r1, #11
 8006984:	187b      	adds	r3, r7, r1
 8006986:	781a      	ldrb	r2, [r3, #0]
 8006988:	187b      	adds	r3, r7, r1
 800698a:	3201      	adds	r2, #1
 800698c:	701a      	strb	r2, [r3, #0]
          break;
 800698e:	e072      	b.n	8006a76 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	23ac      	movs	r3, #172	; 0xac
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	58d3      	ldr	r3, [r2, r3]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00d      	beq.n	80069ba <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	23ac      	movs	r3, #172	; 0xac
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	58d3      	ldr	r3, [r2, r3]
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	7c12      	ldrb	r2, [r2, #16]
 80069ac:	2108      	movs	r1, #8
 80069ae:	1879      	adds	r1, r7, r1
 80069b0:	0010      	movs	r0, r2
 80069b2:	4798      	blx	r3
 80069b4:	0003      	movs	r3, r0
 80069b6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069b8:	e05d      	b.n	8006a76 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	0011      	movs	r1, r2
 80069c0:	0018      	movs	r0, r3
 80069c2:	f000 fabd 	bl	8006f40 <USBD_CtlError>
            err++;
 80069c6:	210b      	movs	r1, #11
 80069c8:	187b      	adds	r3, r7, r1
 80069ca:	781a      	ldrb	r2, [r3, #0]
 80069cc:	187b      	adds	r3, r7, r1
 80069ce:	3201      	adds	r2, #1
 80069d0:	701a      	strb	r2, [r3, #0]
          break;
 80069d2:	e050      	b.n	8006a76 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	23ac      	movs	r3, #172	; 0xac
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	58d3      	ldr	r3, [r2, r3]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00d      	beq.n	80069fe <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	23ac      	movs	r3, #172	; 0xac
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	58d3      	ldr	r3, [r2, r3]
 80069ea:	695b      	ldr	r3, [r3, #20]
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	7c12      	ldrb	r2, [r2, #16]
 80069f0:	2108      	movs	r1, #8
 80069f2:	1879      	adds	r1, r7, r1
 80069f4:	0010      	movs	r0, r2
 80069f6:	4798      	blx	r3
 80069f8:	0003      	movs	r3, r0
 80069fa:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069fc:	e03b      	b.n	8006a76 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80069fe:	683a      	ldr	r2, [r7, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	0011      	movs	r1, r2
 8006a04:	0018      	movs	r0, r3
 8006a06:	f000 fa9b 	bl	8006f40 <USBD_CtlError>
            err++;
 8006a0a:	210b      	movs	r1, #11
 8006a0c:	187b      	adds	r3, r7, r1
 8006a0e:	781a      	ldrb	r2, [r3, #0]
 8006a10:	187b      	adds	r3, r7, r1
 8006a12:	3201      	adds	r2, #1
 8006a14:	701a      	strb	r2, [r3, #0]
          break;
 8006a16:	e02e      	b.n	8006a76 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	23ac      	movs	r3, #172	; 0xac
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	58d3      	ldr	r3, [r2, r3]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00d      	beq.n	8006a42 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	23ac      	movs	r3, #172	; 0xac
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	58d3      	ldr	r3, [r2, r3]
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	7c12      	ldrb	r2, [r2, #16]
 8006a34:	2108      	movs	r1, #8
 8006a36:	1879      	adds	r1, r7, r1
 8006a38:	0010      	movs	r0, r2
 8006a3a:	4798      	blx	r3
 8006a3c:	0003      	movs	r3, r0
 8006a3e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a40:	e019      	b.n	8006a76 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006a42:	683a      	ldr	r2, [r7, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	0011      	movs	r1, r2
 8006a48:	0018      	movs	r0, r3
 8006a4a:	f000 fa79 	bl	8006f40 <USBD_CtlError>
            err++;
 8006a4e:	210b      	movs	r1, #11
 8006a50:	187b      	adds	r3, r7, r1
 8006a52:	781a      	ldrb	r2, [r3, #0]
 8006a54:	187b      	adds	r3, r7, r1
 8006a56:	3201      	adds	r2, #1
 8006a58:	701a      	strb	r2, [r3, #0]
          break;
 8006a5a:	e00c      	b.n	8006a76 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006a5c:	683a      	ldr	r2, [r7, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	0011      	movs	r1, r2
 8006a62:	0018      	movs	r0, r3
 8006a64:	f000 fa6c 	bl	8006f40 <USBD_CtlError>
          err++;
 8006a68:	210b      	movs	r1, #11
 8006a6a:	187b      	adds	r3, r7, r1
 8006a6c:	781a      	ldrb	r2, [r3, #0]
 8006a6e:	187b      	adds	r3, r7, r1
 8006a70:	3201      	adds	r2, #1
 8006a72:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8006a74:	e04b      	b.n	8006b0e <USBD_GetDescriptor+0x2fa>
 8006a76:	e04a      	b.n	8006b0e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	7c1b      	ldrb	r3, [r3, #16]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d10b      	bne.n	8006a98 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	23ad      	movs	r3, #173	; 0xad
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	58d3      	ldr	r3, [r2, r3]
 8006a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a8a:	2208      	movs	r2, #8
 8006a8c:	18ba      	adds	r2, r7, r2
 8006a8e:	0010      	movs	r0, r2
 8006a90:	4798      	blx	r3
 8006a92:	0003      	movs	r3, r0
 8006a94:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a96:	e03a      	b.n	8006b0e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	0011      	movs	r1, r2
 8006a9e:	0018      	movs	r0, r3
 8006aa0:	f000 fa4e 	bl	8006f40 <USBD_CtlError>
        err++;
 8006aa4:	210b      	movs	r1, #11
 8006aa6:	187b      	adds	r3, r7, r1
 8006aa8:	781a      	ldrb	r2, [r3, #0]
 8006aaa:	187b      	adds	r3, r7, r1
 8006aac:	3201      	adds	r2, #1
 8006aae:	701a      	strb	r2, [r3, #0]
      break;
 8006ab0:	e02d      	b.n	8006b0e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	7c1b      	ldrb	r3, [r3, #16]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d10f      	bne.n	8006ada <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	23ad      	movs	r3, #173	; 0xad
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	58d3      	ldr	r3, [r2, r3]
 8006ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac4:	2208      	movs	r2, #8
 8006ac6:	18ba      	adds	r2, r7, r2
 8006ac8:	0010      	movs	r0, r2
 8006aca:	4798      	blx	r3
 8006acc:	0003      	movs	r3, r0
 8006ace:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	2207      	movs	r2, #7
 8006ad6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ad8:	e019      	b.n	8006b0e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8006ada:	683a      	ldr	r2, [r7, #0]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	0011      	movs	r1, r2
 8006ae0:	0018      	movs	r0, r3
 8006ae2:	f000 fa2d 	bl	8006f40 <USBD_CtlError>
        err++;
 8006ae6:	210b      	movs	r1, #11
 8006ae8:	187b      	adds	r3, r7, r1
 8006aea:	781a      	ldrb	r2, [r3, #0]
 8006aec:	187b      	adds	r3, r7, r1
 8006aee:	3201      	adds	r2, #1
 8006af0:	701a      	strb	r2, [r3, #0]
      break;
 8006af2:	e00c      	b.n	8006b0e <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8006af4:	683a      	ldr	r2, [r7, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	0011      	movs	r1, r2
 8006afa:	0018      	movs	r0, r3
 8006afc:	f000 fa20 	bl	8006f40 <USBD_CtlError>
      err++;
 8006b00:	210b      	movs	r1, #11
 8006b02:	187b      	adds	r3, r7, r1
 8006b04:	781a      	ldrb	r2, [r3, #0]
 8006b06:	187b      	adds	r3, r7, r1
 8006b08:	3201      	adds	r2, #1
 8006b0a:	701a      	strb	r2, [r3, #0]
      break;
 8006b0c:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 8006b0e:	230b      	movs	r3, #11
 8006b10:	18fb      	adds	r3, r7, r3
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d127      	bne.n	8006b68 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006b18:	2108      	movs	r1, #8
 8006b1a:	187b      	adds	r3, r7, r1
 8006b1c:	881b      	ldrh	r3, [r3, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d019      	beq.n	8006b56 <USBD_GetDescriptor+0x342>
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	88db      	ldrh	r3, [r3, #6]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d015      	beq.n	8006b56 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	88da      	ldrh	r2, [r3, #6]
 8006b2e:	187b      	adds	r3, r7, r1
 8006b30:	881b      	ldrh	r3, [r3, #0]
 8006b32:	1c18      	adds	r0, r3, #0
 8006b34:	1c11      	adds	r1, r2, #0
 8006b36:	b28a      	uxth	r2, r1
 8006b38:	b283      	uxth	r3, r0
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d900      	bls.n	8006b40 <USBD_GetDescriptor+0x32c>
 8006b3e:	1c01      	adds	r1, r0, #0
 8006b40:	b28a      	uxth	r2, r1
 8006b42:	2108      	movs	r1, #8
 8006b44:	187b      	adds	r3, r7, r1
 8006b46:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b48:	187b      	adds	r3, r7, r1
 8006b4a:	881a      	ldrh	r2, [r3, #0]
 8006b4c:	68f9      	ldr	r1, [r7, #12]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	0018      	movs	r0, r3
 8006b52:	f000 fa73 	bl	800703c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	88db      	ldrh	r3, [r3, #6]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d105      	bne.n	8006b6a <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	0018      	movs	r0, r3
 8006b62:	f000 fad5 	bl	8007110 <USBD_CtlSendStatus>
 8006b66:	e000      	b.n	8006b6a <USBD_GetDescriptor+0x356>
    return;
 8006b68:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	b004      	add	sp, #16
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	08007d38 	.word	0x08007d38
 8006b74:	08007d58 	.word	0x08007d58

08006b78 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b78:	b590      	push	{r4, r7, lr}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	889b      	ldrh	r3, [r3, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d13d      	bne.n	8006c06 <USBD_SetAddress+0x8e>
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	88db      	ldrh	r3, [r3, #6]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d139      	bne.n	8006c06 <USBD_SetAddress+0x8e>
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	885b      	ldrh	r3, [r3, #2]
 8006b96:	2b7f      	cmp	r3, #127	; 0x7f
 8006b98:	d835      	bhi.n	8006c06 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	885b      	ldrh	r3, [r3, #2]
 8006b9e:	b2da      	uxtb	r2, r3
 8006ba0:	230f      	movs	r3, #15
 8006ba2:	18fb      	adds	r3, r7, r3
 8006ba4:	217f      	movs	r1, #127	; 0x7f
 8006ba6:	400a      	ands	r2, r1
 8006ba8:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	23a7      	movs	r3, #167	; 0xa7
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	5cd3      	ldrb	r3, [r2, r3]
 8006bb2:	2b03      	cmp	r3, #3
 8006bb4:	d106      	bne.n	8006bc4 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8006bb6:	683a      	ldr	r2, [r7, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	0011      	movs	r1, r2
 8006bbc:	0018      	movs	r0, r3
 8006bbe:	f000 f9bf 	bl	8006f40 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bc2:	e027      	b.n	8006c14 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	240f      	movs	r4, #15
 8006bc8:	193a      	adds	r2, r7, r4
 8006bca:	4914      	ldr	r1, [pc, #80]	; (8006c1c <USBD_SetAddress+0xa4>)
 8006bcc:	7812      	ldrb	r2, [r2, #0]
 8006bce:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006bd0:	193b      	adds	r3, r7, r4
 8006bd2:	781a      	ldrb	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	0011      	movs	r1, r2
 8006bd8:	0018      	movs	r0, r3
 8006bda:	f000 ff13 	bl	8007a04 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	0018      	movs	r0, r3
 8006be2:	f000 fa95 	bl	8007110 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006be6:	193b      	adds	r3, r7, r4
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d005      	beq.n	8006bfa <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	23a7      	movs	r3, #167	; 0xa7
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	2102      	movs	r1, #2
 8006bf6:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bf8:	e00c      	b.n	8006c14 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	23a7      	movs	r3, #167	; 0xa7
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	2101      	movs	r1, #1
 8006c02:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c04:	e006      	b.n	8006c14 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	0011      	movs	r1, r2
 8006c0c:	0018      	movs	r0, r3
 8006c0e:	f000 f997 	bl	8006f40 <USBD_CtlError>
  }
}
 8006c12:	46c0      	nop			; (mov r8, r8)
 8006c14:	46c0      	nop			; (mov r8, r8)
 8006c16:	46bd      	mov	sp, r7
 8006c18:	b005      	add	sp, #20
 8006c1a:	bd90      	pop	{r4, r7, pc}
 8006c1c:	0000029e 	.word	0x0000029e

08006c20 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	885b      	ldrh	r3, [r3, #2]
 8006c2e:	b2da      	uxtb	r2, r3
 8006c30:	4b4c      	ldr	r3, [pc, #304]	; (8006d64 <USBD_SetConfig+0x144>)
 8006c32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006c34:	4b4b      	ldr	r3, [pc, #300]	; (8006d64 <USBD_SetConfig+0x144>)
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d906      	bls.n	8006c4a <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8006c3c:	683a      	ldr	r2, [r7, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	0011      	movs	r1, r2
 8006c42:	0018      	movs	r0, r3
 8006c44:	f000 f97c 	bl	8006f40 <USBD_CtlError>
 8006c48:	e088      	b.n	8006d5c <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	23a7      	movs	r3, #167	; 0xa7
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	5cd3      	ldrb	r3, [r2, r3]
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d002      	beq.n	8006c5c <USBD_SetConfig+0x3c>
 8006c56:	2b03      	cmp	r3, #3
 8006c58:	d029      	beq.n	8006cae <USBD_SetConfig+0x8e>
 8006c5a:	e071      	b.n	8006d40 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006c5c:	4b41      	ldr	r3, [pc, #260]	; (8006d64 <USBD_SetConfig+0x144>)
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d01f      	beq.n	8006ca4 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8006c64:	4b3f      	ldr	r3, [pc, #252]	; (8006d64 <USBD_SetConfig+0x144>)
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	001a      	movs	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	23a7      	movs	r3, #167	; 0xa7
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	2103      	movs	r1, #3
 8006c76:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006c78:	4b3a      	ldr	r3, [pc, #232]	; (8006d64 <USBD_SetConfig+0x144>)
 8006c7a:	781a      	ldrb	r2, [r3, #0]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	0011      	movs	r1, r2
 8006c80:	0018      	movs	r0, r3
 8006c82:	f7ff f8c6 	bl	8005e12 <USBD_SetClassConfig>
 8006c86:	0003      	movs	r3, r0
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d106      	bne.n	8006c9a <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8006c8c:	683a      	ldr	r2, [r7, #0]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	0011      	movs	r1, r2
 8006c92:	0018      	movs	r0, r3
 8006c94:	f000 f954 	bl	8006f40 <USBD_CtlError>
            return;
 8006c98:	e060      	b.n	8006d5c <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	0018      	movs	r0, r3
 8006c9e:	f000 fa37 	bl	8007110 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006ca2:	e05b      	b.n	8006d5c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	0018      	movs	r0, r3
 8006ca8:	f000 fa32 	bl	8007110 <USBD_CtlSendStatus>
        break;
 8006cac:	e056      	b.n	8006d5c <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006cae:	4b2d      	ldr	r3, [pc, #180]	; (8006d64 <USBD_SetConfig+0x144>)
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d115      	bne.n	8006ce2 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	23a7      	movs	r3, #167	; 0xa7
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	2102      	movs	r1, #2
 8006cbe:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8006cc0:	4b28      	ldr	r3, [pc, #160]	; (8006d64 <USBD_SetConfig+0x144>)
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	001a      	movs	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006cca:	4b26      	ldr	r3, [pc, #152]	; (8006d64 <USBD_SetConfig+0x144>)
 8006ccc:	781a      	ldrb	r2, [r3, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	0011      	movs	r1, r2
 8006cd2:	0018      	movs	r0, r3
 8006cd4:	f7ff f8c4 	bl	8005e60 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	0018      	movs	r0, r3
 8006cdc:	f000 fa18 	bl	8007110 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006ce0:	e03c      	b.n	8006d5c <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8006ce2:	4b20      	ldr	r3, [pc, #128]	; (8006d64 <USBD_SetConfig+0x144>)
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	001a      	movs	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d022      	beq.n	8006d36 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	b2da      	uxtb	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	0011      	movs	r1, r2
 8006cfa:	0018      	movs	r0, r3
 8006cfc:	f7ff f8b0 	bl	8005e60 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006d00:	4b18      	ldr	r3, [pc, #96]	; (8006d64 <USBD_SetConfig+0x144>)
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	001a      	movs	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006d0a:	4b16      	ldr	r3, [pc, #88]	; (8006d64 <USBD_SetConfig+0x144>)
 8006d0c:	781a      	ldrb	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	0011      	movs	r1, r2
 8006d12:	0018      	movs	r0, r3
 8006d14:	f7ff f87d 	bl	8005e12 <USBD_SetClassConfig>
 8006d18:	0003      	movs	r3, r0
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d106      	bne.n	8006d2c <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8006d1e:	683a      	ldr	r2, [r7, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	0011      	movs	r1, r2
 8006d24:	0018      	movs	r0, r3
 8006d26:	f000 f90b 	bl	8006f40 <USBD_CtlError>
            return;
 8006d2a:	e017      	b.n	8006d5c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	0018      	movs	r0, r3
 8006d30:	f000 f9ee 	bl	8007110 <USBD_CtlSendStatus>
        break;
 8006d34:	e012      	b.n	8006d5c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	0018      	movs	r0, r3
 8006d3a:	f000 f9e9 	bl	8007110 <USBD_CtlSendStatus>
        break;
 8006d3e:	e00d      	b.n	8006d5c <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8006d40:	683a      	ldr	r2, [r7, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	0011      	movs	r1, r2
 8006d46:	0018      	movs	r0, r3
 8006d48:	f000 f8fa 	bl	8006f40 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006d4c:	4b05      	ldr	r3, [pc, #20]	; (8006d64 <USBD_SetConfig+0x144>)
 8006d4e:	781a      	ldrb	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	0011      	movs	r1, r2
 8006d54:	0018      	movs	r0, r3
 8006d56:	f7ff f883 	bl	8005e60 <USBD_ClrClassConfig>
        break;
 8006d5a:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	b002      	add	sp, #8
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	46c0      	nop			; (mov r8, r8)
 8006d64:	200001e0 	.word	0x200001e0

08006d68 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	88db      	ldrh	r3, [r3, #6]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d006      	beq.n	8006d88 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8006d7a:	683a      	ldr	r2, [r7, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	0011      	movs	r1, r2
 8006d80:	0018      	movs	r0, r3
 8006d82:	f000 f8dd 	bl	8006f40 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006d86:	e026      	b.n	8006dd6 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	23a7      	movs	r3, #167	; 0xa7
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	5cd3      	ldrb	r3, [r2, r3]
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	dc02      	bgt.n	8006d9a <USBD_GetConfig+0x32>
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	dc03      	bgt.n	8006da0 <USBD_GetConfig+0x38>
 8006d98:	e016      	b.n	8006dc8 <USBD_GetConfig+0x60>
 8006d9a:	2b03      	cmp	r3, #3
 8006d9c:	d00c      	beq.n	8006db8 <USBD_GetConfig+0x50>
 8006d9e:	e013      	b.n	8006dc8 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	3308      	adds	r3, #8
 8006daa:	0019      	movs	r1, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	0018      	movs	r0, r3
 8006db2:	f000 f943 	bl	800703c <USBD_CtlSendData>
        break;
 8006db6:	e00e      	b.n	8006dd6 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	1d19      	adds	r1, r3, #4
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	0018      	movs	r0, r3
 8006dc2:	f000 f93b 	bl	800703c <USBD_CtlSendData>
        break;
 8006dc6:	e006      	b.n	8006dd6 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8006dc8:	683a      	ldr	r2, [r7, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	0011      	movs	r1, r2
 8006dce:	0018      	movs	r0, r3
 8006dd0:	f000 f8b6 	bl	8006f40 <USBD_CtlError>
        break;
 8006dd4:	46c0      	nop			; (mov r8, r8)
}
 8006dd6:	46c0      	nop			; (mov r8, r8)
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	b002      	add	sp, #8
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b082      	sub	sp, #8
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
 8006de6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	23a7      	movs	r3, #167	; 0xa7
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	5cd3      	ldrb	r3, [r2, r3]
 8006df0:	3b01      	subs	r3, #1
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d822      	bhi.n	8006e3c <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	88db      	ldrh	r3, [r3, #6]
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d006      	beq.n	8006e0c <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	0011      	movs	r1, r2
 8006e04:	0018      	movs	r0, r3
 8006e06:	f000 f89b 	bl	8006f40 <USBD_CtlError>
        break;
 8006e0a:	e01e      	b.n	8006e4a <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	23a9      	movs	r3, #169	; 0xa9
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	58d3      	ldr	r3, [r2, r3]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d005      	beq.n	8006e2a <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	2202      	movs	r2, #2
 8006e24:	431a      	orrs	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	330c      	adds	r3, #12
 8006e2e:	0019      	movs	r1, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2202      	movs	r2, #2
 8006e34:	0018      	movs	r0, r3
 8006e36:	f000 f901 	bl	800703c <USBD_CtlSendData>
      break;
 8006e3a:	e006      	b.n	8006e4a <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8006e3c:	683a      	ldr	r2, [r7, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	0011      	movs	r1, r2
 8006e42:	0018      	movs	r0, r3
 8006e44:	f000 f87c 	bl	8006f40 <USBD_CtlError>
      break;
 8006e48:	46c0      	nop			; (mov r8, r8)
  }
}
 8006e4a:	46c0      	nop			; (mov r8, r8)
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	b002      	add	sp, #8
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b082      	sub	sp, #8
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	885b      	ldrh	r3, [r3, #2]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d108      	bne.n	8006e76 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	23a9      	movs	r3, #169	; 0xa9
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	2101      	movs	r1, #1
 8006e6c:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	0018      	movs	r0, r3
 8006e72:	f000 f94d 	bl	8007110 <USBD_CtlSendStatus>
  }
}
 8006e76:	46c0      	nop			; (mov r8, r8)
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	b002      	add	sp, #8
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b082      	sub	sp, #8
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
 8006e86:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	23a7      	movs	r3, #167	; 0xa7
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	5cd3      	ldrb	r3, [r2, r3]
 8006e90:	3b01      	subs	r3, #1
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d80d      	bhi.n	8006eb2 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	885b      	ldrh	r3, [r3, #2]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d110      	bne.n	8006ec0 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	23a9      	movs	r3, #169	; 0xa9
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	0018      	movs	r0, r3
 8006eac:	f000 f930 	bl	8007110 <USBD_CtlSendStatus>
      }
      break;
 8006eb0:	e006      	b.n	8006ec0 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8006eb2:	683a      	ldr	r2, [r7, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	0011      	movs	r1, r2
 8006eb8:	0018      	movs	r0, r3
 8006eba:	f000 f841 	bl	8006f40 <USBD_CtlError>
      break;
 8006ebe:	e000      	b.n	8006ec2 <USBD_ClrFeature+0x44>
      break;
 8006ec0:	46c0      	nop			; (mov r8, r8)
  }
}
 8006ec2:	46c0      	nop			; (mov r8, r8)
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	b002      	add	sp, #8
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b082      	sub	sp, #8
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
 8006ed2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	781a      	ldrb	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	785a      	ldrb	r2, [r3, #1]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	3302      	adds	r3, #2
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	3303      	adds	r3, #3
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	021b      	lsls	r3, r3, #8
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	18d3      	adds	r3, r2, r3
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	3304      	adds	r3, #4
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	3305      	adds	r3, #5
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	021b      	lsls	r3, r3, #8
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	18d3      	adds	r3, r2, r3
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	3306      	adds	r3, #6
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	3307      	adds	r3, #7
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	021b      	lsls	r3, r3, #8
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	18d3      	adds	r3, r2, r3
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	80da      	strh	r2, [r3, #6]

}
 8006f38:	46c0      	nop			; (mov r8, r8)
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	b002      	add	sp, #8
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2180      	movs	r1, #128	; 0x80
 8006f4e:	0018      	movs	r0, r3
 8006f50:	f000 fcd1 	bl	80078f6 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2100      	movs	r1, #0
 8006f58:	0018      	movs	r0, r3
 8006f5a:	f000 fccc 	bl	80078f6 <USBD_LL_StallEP>
}
 8006f5e:	46c0      	nop			; (mov r8, r8)
 8006f60:	46bd      	mov	sp, r7
 8006f62:	b002      	add	sp, #8
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006f66:	b590      	push	{r4, r7, lr}
 8006f68:	b087      	sub	sp, #28
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	60f8      	str	r0, [r7, #12]
 8006f6e:	60b9      	str	r1, [r7, #8]
 8006f70:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006f72:	2417      	movs	r4, #23
 8006f74:	193b      	adds	r3, r7, r4
 8006f76:	2200      	movs	r2, #0
 8006f78:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d03c      	beq.n	8006ffa <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	0018      	movs	r0, r3
 8006f84:	f000 f83d 	bl	8007002 <USBD_GetLen>
 8006f88:	0003      	movs	r3, r0
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	18db      	adds	r3, r3, r3
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006f96:	193b      	adds	r3, r7, r4
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	193a      	adds	r2, r7, r4
 8006f9c:	1c59      	adds	r1, r3, #1
 8006f9e:	7011      	strb	r1, [r2, #0]
 8006fa0:	001a      	movs	r2, r3
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	189b      	adds	r3, r3, r2
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	7812      	ldrb	r2, [r2, #0]
 8006faa:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006fac:	193b      	adds	r3, r7, r4
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	193a      	adds	r2, r7, r4
 8006fb2:	1c59      	adds	r1, r3, #1
 8006fb4:	7011      	strb	r1, [r2, #0]
 8006fb6:	001a      	movs	r2, r3
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	189b      	adds	r3, r3, r2
 8006fbc:	2203      	movs	r2, #3
 8006fbe:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006fc0:	e017      	b.n	8006ff2 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	1c5a      	adds	r2, r3, #1
 8006fc6:	60fa      	str	r2, [r7, #12]
 8006fc8:	2417      	movs	r4, #23
 8006fca:	193a      	adds	r2, r7, r4
 8006fcc:	7812      	ldrb	r2, [r2, #0]
 8006fce:	1939      	adds	r1, r7, r4
 8006fd0:	1c50      	adds	r0, r2, #1
 8006fd2:	7008      	strb	r0, [r1, #0]
 8006fd4:	0011      	movs	r1, r2
 8006fd6:	68ba      	ldr	r2, [r7, #8]
 8006fd8:	1852      	adds	r2, r2, r1
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006fde:	193b      	adds	r3, r7, r4
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	193a      	adds	r2, r7, r4
 8006fe4:	1c59      	adds	r1, r3, #1
 8006fe6:	7011      	strb	r1, [r2, #0]
 8006fe8:	001a      	movs	r2, r3
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	189b      	adds	r3, r3, r2
 8006fee:	2200      	movs	r2, #0
 8006ff0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1e3      	bne.n	8006fc2 <USBD_GetString+0x5c>
    }
  }
}
 8006ffa:	46c0      	nop			; (mov r8, r8)
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	b007      	add	sp, #28
 8007000:	bd90      	pop	{r4, r7, pc}

08007002 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b084      	sub	sp, #16
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800700a:	230f      	movs	r3, #15
 800700c:	18fb      	adds	r3, r7, r3
 800700e:	2200      	movs	r2, #0
 8007010:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8007012:	e008      	b.n	8007026 <USBD_GetLen+0x24>
  {
    len++;
 8007014:	210f      	movs	r1, #15
 8007016:	187b      	adds	r3, r7, r1
 8007018:	781a      	ldrb	r2, [r3, #0]
 800701a:	187b      	adds	r3, r7, r1
 800701c:	3201      	adds	r2, #1
 800701e:	701a      	strb	r2, [r3, #0]
    buf++;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	3301      	adds	r3, #1
 8007024:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1f2      	bne.n	8007014 <USBD_GetLen+0x12>
  }

  return len;
 800702e:	230f      	movs	r3, #15
 8007030:	18fb      	adds	r3, r7, r3
 8007032:	781b      	ldrb	r3, [r3, #0]
}
 8007034:	0018      	movs	r0, r3
 8007036:	46bd      	mov	sp, r7
 8007038:	b004      	add	sp, #16
 800703a:	bd80      	pop	{r7, pc}

0800703c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	1dbb      	adds	r3, r7, #6
 8007048:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	23a5      	movs	r3, #165	; 0xa5
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	2102      	movs	r1, #2
 8007052:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8007054:	1dbb      	adds	r3, r7, #6
 8007056:	881a      	ldrh	r2, [r3, #0]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800705c:	1dbb      	adds	r3, r7, #6
 800705e:	881a      	ldrh	r2, [r3, #0]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007064:	1dbb      	adds	r3, r7, #6
 8007066:	881b      	ldrh	r3, [r3, #0]
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	2100      	movs	r1, #0
 800706e:	f000 fcf4 	bl	8007a5a <USBD_LL_Transmit>

  return USBD_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	0018      	movs	r0, r3
 8007076:	46bd      	mov	sp, r7
 8007078:	b004      	add	sp, #16
 800707a:	bd80      	pop	{r7, pc}

0800707c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	1dbb      	adds	r3, r7, #6
 8007088:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800708a:	1dbb      	adds	r3, r7, #6
 800708c:	881b      	ldrh	r3, [r3, #0]
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	2100      	movs	r1, #0
 8007094:	f000 fce1 	bl	8007a5a <USBD_LL_Transmit>

  return USBD_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	0018      	movs	r0, r3
 800709c:	46bd      	mov	sp, r7
 800709e:	b004      	add	sp, #16
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b084      	sub	sp, #16
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	60f8      	str	r0, [r7, #12]
 80070aa:	60b9      	str	r1, [r7, #8]
 80070ac:	1dbb      	adds	r3, r7, #6
 80070ae:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	23a5      	movs	r3, #165	; 0xa5
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	2103      	movs	r1, #3
 80070b8:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 80070ba:	1dbb      	adds	r3, r7, #6
 80070bc:	8819      	ldrh	r1, [r3, #0]
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	23ae      	movs	r3, #174	; 0xae
 80070c2:	005b      	lsls	r3, r3, #1
 80070c4:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 80070c6:	1dbb      	adds	r3, r7, #6
 80070c8:	8819      	ldrh	r1, [r3, #0]
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	23b0      	movs	r3, #176	; 0xb0
 80070ce:	005b      	lsls	r3, r3, #1
 80070d0:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070d2:	1dbb      	adds	r3, r7, #6
 80070d4:	881b      	ldrh	r3, [r3, #0]
 80070d6:	68ba      	ldr	r2, [r7, #8]
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	2100      	movs	r1, #0
 80070dc:	f000 fcf4 	bl	8007ac8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	0018      	movs	r0, r3
 80070e4:	46bd      	mov	sp, r7
 80070e6:	b004      	add	sp, #16
 80070e8:	bd80      	pop	{r7, pc}

080070ea <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b084      	sub	sp, #16
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	60f8      	str	r0, [r7, #12]
 80070f2:	60b9      	str	r1, [r7, #8]
 80070f4:	1dbb      	adds	r3, r7, #6
 80070f6:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070f8:	1dbb      	adds	r3, r7, #6
 80070fa:	881b      	ldrh	r3, [r3, #0]
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	2100      	movs	r1, #0
 8007102:	f000 fce1 	bl	8007ac8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	0018      	movs	r0, r3
 800710a:	46bd      	mov	sp, r7
 800710c:	b004      	add	sp, #16
 800710e:	bd80      	pop	{r7, pc}

08007110 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	23a5      	movs	r3, #165	; 0xa5
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	2104      	movs	r1, #4
 8007120:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	2300      	movs	r3, #0
 8007126:	2200      	movs	r2, #0
 8007128:	2100      	movs	r1, #0
 800712a:	f000 fc96 	bl	8007a5a <USBD_LL_Transmit>

  return USBD_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	0018      	movs	r0, r3
 8007132:	46bd      	mov	sp, r7
 8007134:	b002      	add	sp, #8
 8007136:	bd80      	pop	{r7, pc}

08007138 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	23a5      	movs	r3, #165	; 0xa5
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	2105      	movs	r1, #5
 8007148:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	2300      	movs	r3, #0
 800714e:	2200      	movs	r2, #0
 8007150:	2100      	movs	r1, #0
 8007152:	f000 fcb9 	bl	8007ac8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	0018      	movs	r0, r3
 800715a:	46bd      	mov	sp, r7
 800715c:	b002      	add	sp, #8
 800715e:	bd80      	pop	{r7, pc}

08007160 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007164:	4914      	ldr	r1, [pc, #80]	; (80071b8 <MX_USB_DEVICE_Init+0x58>)
 8007166:	4b15      	ldr	r3, [pc, #84]	; (80071bc <MX_USB_DEVICE_Init+0x5c>)
 8007168:	2200      	movs	r2, #0
 800716a:	0018      	movs	r0, r3
 800716c:	f7fe fdea 	bl	8005d44 <USBD_Init>
 8007170:	1e03      	subs	r3, r0, #0
 8007172:	d001      	beq.n	8007178 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007174:	f7f9 fa70 	bl	8000658 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007178:	4a11      	ldr	r2, [pc, #68]	; (80071c0 <MX_USB_DEVICE_Init+0x60>)
 800717a:	4b10      	ldr	r3, [pc, #64]	; (80071bc <MX_USB_DEVICE_Init+0x5c>)
 800717c:	0011      	movs	r1, r2
 800717e:	0018      	movs	r0, r3
 8007180:	f7fe fe11 	bl	8005da6 <USBD_RegisterClass>
 8007184:	1e03      	subs	r3, r0, #0
 8007186:	d001      	beq.n	800718c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8007188:	f7f9 fa66 	bl	8000658 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800718c:	4a0d      	ldr	r2, [pc, #52]	; (80071c4 <MX_USB_DEVICE_Init+0x64>)
 800718e:	4b0b      	ldr	r3, [pc, #44]	; (80071bc <MX_USB_DEVICE_Init+0x5c>)
 8007190:	0011      	movs	r1, r2
 8007192:	0018      	movs	r0, r3
 8007194:	f7fe fd26 	bl	8005be4 <USBD_CDC_RegisterInterface>
 8007198:	1e03      	subs	r3, r0, #0
 800719a:	d001      	beq.n	80071a0 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800719c:	f7f9 fa5c 	bl	8000658 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80071a0:	4b06      	ldr	r3, [pc, #24]	; (80071bc <MX_USB_DEVICE_Init+0x5c>)
 80071a2:	0018      	movs	r0, r3
 80071a4:	f7fe fe1f 	bl	8005de6 <USBD_Start>
 80071a8:	1e03      	subs	r3, r0, #0
 80071aa:	d001      	beq.n	80071b0 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 80071ac:	f7f9 fa54 	bl	8000658 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80071b0:	46c0      	nop			; (mov r8, r8)
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	46c0      	nop			; (mov r8, r8)
 80071b8:	20000130 	.word	0x20000130
 80071bc:	200001e4 	.word	0x200001e4
 80071c0:	2000001c 	.word	0x2000001c
 80071c4:	20000120 	.word	0x20000120

080071c8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80071cc:	4907      	ldr	r1, [pc, #28]	; (80071ec <CDC_Init_FS+0x24>)
 80071ce:	4b08      	ldr	r3, [pc, #32]	; (80071f0 <CDC_Init_FS+0x28>)
 80071d0:	2200      	movs	r2, #0
 80071d2:	0018      	movs	r0, r3
 80071d4:	f7fe fd21 	bl	8005c1a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80071d8:	4a06      	ldr	r2, [pc, #24]	; (80071f4 <CDC_Init_FS+0x2c>)
 80071da:	4b05      	ldr	r3, [pc, #20]	; (80071f0 <CDC_Init_FS+0x28>)
 80071dc:	0011      	movs	r1, r2
 80071de:	0018      	movs	r0, r3
 80071e0:	f7fe fd37 	bl	8005c52 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80071e4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80071e6:	0018      	movs	r0, r3
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	200008a8 	.word	0x200008a8
 80071f0:	200001e4 	.word	0x200001e4
 80071f4:	200004a8 	.word	0x200004a8

080071f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80071fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80071fe:	0018      	movs	r0, r3
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6039      	str	r1, [r7, #0]
 800720c:	0011      	movs	r1, r2
 800720e:	1dfb      	adds	r3, r7, #7
 8007210:	1c02      	adds	r2, r0, #0
 8007212:	701a      	strb	r2, [r3, #0]
 8007214:	1d3b      	adds	r3, r7, #4
 8007216:	1c0a      	adds	r2, r1, #0
 8007218:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800721a:	1dfb      	adds	r3, r7, #7
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	2b23      	cmp	r3, #35	; 0x23
 8007220:	d804      	bhi.n	800722c <CDC_Control_FS+0x28>
 8007222:	009a      	lsls	r2, r3, #2
 8007224:	4b04      	ldr	r3, [pc, #16]	; (8007238 <CDC_Control_FS+0x34>)
 8007226:	18d3      	adds	r3, r2, r3
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800722c:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800722e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007230:	0018      	movs	r0, r3
 8007232:	46bd      	mov	sp, r7
 8007234:	b002      	add	sp, #8
 8007236:	bd80      	pop	{r7, pc}
 8007238:	08007d70 	.word	0x08007d70

0800723c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800723c:	b590      	push	{r4, r7, lr}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	4b13      	ldr	r3, [pc, #76]	; (8007298 <CDC_Receive_FS+0x5c>)
 800724a:	0011      	movs	r1, r2
 800724c:	0018      	movs	r0, r3
 800724e:	f7fe fd00 	bl	8005c52 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007252:	4b11      	ldr	r3, [pc, #68]	; (8007298 <CDC_Receive_FS+0x5c>)
 8007254:	0018      	movs	r0, r3
 8007256:	f7fe fd47 	bl	8005ce8 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	240f      	movs	r4, #15
 8007260:	193b      	adds	r3, r7, r4
 8007262:	701a      	strb	r2, [r3, #0]
  memset(buffer, '\0', 64);
 8007264:	4b0d      	ldr	r3, [pc, #52]	; (800729c <CDC_Receive_FS+0x60>)
 8007266:	2240      	movs	r2, #64	; 0x40
 8007268:	2100      	movs	r1, #0
 800726a:	0018      	movs	r0, r3
 800726c:	f000 fccc 	bl	8007c08 <memset>
  memcpy(buffer, Buf, len);
 8007270:	193b      	adds	r3, r7, r4
 8007272:	781a      	ldrb	r2, [r3, #0]
 8007274:	6879      	ldr	r1, [r7, #4]
 8007276:	4b09      	ldr	r3, [pc, #36]	; (800729c <CDC_Receive_FS+0x60>)
 8007278:	0018      	movs	r0, r3
 800727a:	f000 fcf1 	bl	8007c60 <memcpy>
  memset(Buf, '\0', len);
 800727e:	193b      	adds	r3, r7, r4
 8007280:	781a      	ldrb	r2, [r3, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2100      	movs	r1, #0
 8007286:	0018      	movs	r0, r3
 8007288:	f000 fcbe 	bl	8007c08 <memset>
  return (USBD_OK);
 800728c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800728e:	0018      	movs	r0, r3
 8007290:	46bd      	mov	sp, r7
 8007292:	b005      	add	sp, #20
 8007294:	bd90      	pop	{r4, r7, pc}
 8007296:	46c0      	nop			; (mov r8, r8)
 8007298:	200001e4 	.word	0x200001e4
 800729c:	2000019c 	.word	0x2000019c

080072a0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80072a0:	b5b0      	push	{r4, r5, r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	000a      	movs	r2, r1
 80072aa:	1cbb      	adds	r3, r7, #2
 80072ac:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 80072ae:	230f      	movs	r3, #15
 80072b0:	18fb      	adds	r3, r7, r3
 80072b2:	2200      	movs	r2, #0
 80072b4:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80072b6:	4a11      	ldr	r2, [pc, #68]	; (80072fc <CDC_Transmit_FS+0x5c>)
 80072b8:	23ae      	movs	r3, #174	; 0xae
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	58d3      	ldr	r3, [r2, r3]
 80072be:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80072c0:	68ba      	ldr	r2, [r7, #8]
 80072c2:	2385      	movs	r3, #133	; 0x85
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	58d3      	ldr	r3, [r2, r3]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d001      	beq.n	80072d0 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e010      	b.n	80072f2 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80072d0:	1cbb      	adds	r3, r7, #2
 80072d2:	881a      	ldrh	r2, [r3, #0]
 80072d4:	6879      	ldr	r1, [r7, #4]
 80072d6:	4b09      	ldr	r3, [pc, #36]	; (80072fc <CDC_Transmit_FS+0x5c>)
 80072d8:	0018      	movs	r0, r3
 80072da:	f7fe fc9e 	bl	8005c1a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80072de:	250f      	movs	r5, #15
 80072e0:	197c      	adds	r4, r7, r5
 80072e2:	4b06      	ldr	r3, [pc, #24]	; (80072fc <CDC_Transmit_FS+0x5c>)
 80072e4:	0018      	movs	r0, r3
 80072e6:	f7fe fcc8 	bl	8005c7a <USBD_CDC_TransmitPacket>
 80072ea:	0003      	movs	r3, r0
 80072ec:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 80072ee:	197b      	adds	r3, r7, r5
 80072f0:	781b      	ldrb	r3, [r3, #0]
}
 80072f2:	0018      	movs	r0, r3
 80072f4:	46bd      	mov	sp, r7
 80072f6:	b004      	add	sp, #16
 80072f8:	bdb0      	pop	{r4, r5, r7, pc}
 80072fa:	46c0      	nop			; (mov r8, r8)
 80072fc:	200001e4 	.word	0x200001e4

08007300 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	0002      	movs	r2, r0
 8007308:	6039      	str	r1, [r7, #0]
 800730a:	1dfb      	adds	r3, r7, #7
 800730c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	2212      	movs	r2, #18
 8007312:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007314:	4b02      	ldr	r3, [pc, #8]	; (8007320 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007316:	0018      	movs	r0, r3
 8007318:	46bd      	mov	sp, r7
 800731a:	b002      	add	sp, #8
 800731c:	bd80      	pop	{r7, pc}
 800731e:	46c0      	nop			; (mov r8, r8)
 8007320:	2000014c 	.word	0x2000014c

08007324 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	0002      	movs	r2, r0
 800732c:	6039      	str	r1, [r7, #0]
 800732e:	1dfb      	adds	r3, r7, #7
 8007330:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	2204      	movs	r2, #4
 8007336:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007338:	4b02      	ldr	r3, [pc, #8]	; (8007344 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800733a:	0018      	movs	r0, r3
 800733c:	46bd      	mov	sp, r7
 800733e:	b002      	add	sp, #8
 8007340:	bd80      	pop	{r7, pc}
 8007342:	46c0      	nop			; (mov r8, r8)
 8007344:	20000160 	.word	0x20000160

08007348 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	0002      	movs	r2, r0
 8007350:	6039      	str	r1, [r7, #0]
 8007352:	1dfb      	adds	r3, r7, #7
 8007354:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8007356:	1dfb      	adds	r3, r7, #7
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d106      	bne.n	800736c <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	4908      	ldr	r1, [pc, #32]	; (8007384 <USBD_FS_ProductStrDescriptor+0x3c>)
 8007362:	4b09      	ldr	r3, [pc, #36]	; (8007388 <USBD_FS_ProductStrDescriptor+0x40>)
 8007364:	0018      	movs	r0, r3
 8007366:	f7ff fdfe 	bl	8006f66 <USBD_GetString>
 800736a:	e005      	b.n	8007378 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800736c:	683a      	ldr	r2, [r7, #0]
 800736e:	4905      	ldr	r1, [pc, #20]	; (8007384 <USBD_FS_ProductStrDescriptor+0x3c>)
 8007370:	4b05      	ldr	r3, [pc, #20]	; (8007388 <USBD_FS_ProductStrDescriptor+0x40>)
 8007372:	0018      	movs	r0, r3
 8007374:	f7ff fdf7 	bl	8006f66 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007378:	4b02      	ldr	r3, [pc, #8]	; (8007384 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800737a:	0018      	movs	r0, r3
 800737c:	46bd      	mov	sp, r7
 800737e:	b002      	add	sp, #8
 8007380:	bd80      	pop	{r7, pc}
 8007382:	46c0      	nop			; (mov r8, r8)
 8007384:	20000ca8 	.word	0x20000ca8
 8007388:	08007cb0 	.word	0x08007cb0

0800738c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	0002      	movs	r2, r0
 8007394:	6039      	str	r1, [r7, #0]
 8007396:	1dfb      	adds	r3, r7, #7
 8007398:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800739a:	683a      	ldr	r2, [r7, #0]
 800739c:	4904      	ldr	r1, [pc, #16]	; (80073b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800739e:	4b05      	ldr	r3, [pc, #20]	; (80073b4 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80073a0:	0018      	movs	r0, r3
 80073a2:	f7ff fde0 	bl	8006f66 <USBD_GetString>
  return USBD_StrDesc;
 80073a6:	4b02      	ldr	r3, [pc, #8]	; (80073b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80073a8:	0018      	movs	r0, r3
 80073aa:	46bd      	mov	sp, r7
 80073ac:	b002      	add	sp, #8
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	20000ca8 	.word	0x20000ca8
 80073b4:	08007cc4 	.word	0x08007cc4

080073b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	0002      	movs	r2, r0
 80073c0:	6039      	str	r1, [r7, #0]
 80073c2:	1dfb      	adds	r3, r7, #7
 80073c4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	221a      	movs	r2, #26
 80073ca:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80073cc:	f000 f84c 	bl	8007468 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80073d0:	4b02      	ldr	r3, [pc, #8]	; (80073dc <USBD_FS_SerialStrDescriptor+0x24>)
}
 80073d2:	0018      	movs	r0, r3
 80073d4:	46bd      	mov	sp, r7
 80073d6:	b002      	add	sp, #8
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	46c0      	nop			; (mov r8, r8)
 80073dc:	20000164 	.word	0x20000164

080073e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	0002      	movs	r2, r0
 80073e8:	6039      	str	r1, [r7, #0]
 80073ea:	1dfb      	adds	r3, r7, #7
 80073ec:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80073ee:	1dfb      	adds	r3, r7, #7
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d106      	bne.n	8007404 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	4908      	ldr	r1, [pc, #32]	; (800741c <USBD_FS_ConfigStrDescriptor+0x3c>)
 80073fa:	4b09      	ldr	r3, [pc, #36]	; (8007420 <USBD_FS_ConfigStrDescriptor+0x40>)
 80073fc:	0018      	movs	r0, r3
 80073fe:	f7ff fdb2 	bl	8006f66 <USBD_GetString>
 8007402:	e005      	b.n	8007410 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007404:	683a      	ldr	r2, [r7, #0]
 8007406:	4905      	ldr	r1, [pc, #20]	; (800741c <USBD_FS_ConfigStrDescriptor+0x3c>)
 8007408:	4b05      	ldr	r3, [pc, #20]	; (8007420 <USBD_FS_ConfigStrDescriptor+0x40>)
 800740a:	0018      	movs	r0, r3
 800740c:	f7ff fdab 	bl	8006f66 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007410:	4b02      	ldr	r3, [pc, #8]	; (800741c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8007412:	0018      	movs	r0, r3
 8007414:	46bd      	mov	sp, r7
 8007416:	b002      	add	sp, #8
 8007418:	bd80      	pop	{r7, pc}
 800741a:	46c0      	nop			; (mov r8, r8)
 800741c:	20000ca8 	.word	0x20000ca8
 8007420:	08007cd8 	.word	0x08007cd8

08007424 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	0002      	movs	r2, r0
 800742c:	6039      	str	r1, [r7, #0]
 800742e:	1dfb      	adds	r3, r7, #7
 8007430:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8007432:	1dfb      	adds	r3, r7, #7
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d106      	bne.n	8007448 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	4908      	ldr	r1, [pc, #32]	; (8007460 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800743e:	4b09      	ldr	r3, [pc, #36]	; (8007464 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8007440:	0018      	movs	r0, r3
 8007442:	f7ff fd90 	bl	8006f66 <USBD_GetString>
 8007446:	e005      	b.n	8007454 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007448:	683a      	ldr	r2, [r7, #0]
 800744a:	4905      	ldr	r1, [pc, #20]	; (8007460 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800744c:	4b05      	ldr	r3, [pc, #20]	; (8007464 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800744e:	0018      	movs	r0, r3
 8007450:	f7ff fd89 	bl	8006f66 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007454:	4b02      	ldr	r3, [pc, #8]	; (8007460 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8007456:	0018      	movs	r0, r3
 8007458:	46bd      	mov	sp, r7
 800745a:	b002      	add	sp, #8
 800745c:	bd80      	pop	{r7, pc}
 800745e:	46c0      	nop			; (mov r8, r8)
 8007460:	20000ca8 	.word	0x20000ca8
 8007464:	08007ce4 	.word	0x08007ce4

08007468 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800746e:	4b10      	ldr	r3, [pc, #64]	; (80074b0 <Get_SerialNum+0x48>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007474:	4b0f      	ldr	r3, [pc, #60]	; (80074b4 <Get_SerialNum+0x4c>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800747a:	4b0f      	ldr	r3, [pc, #60]	; (80074b8 <Get_SerialNum+0x50>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	18d3      	adds	r3, r2, r3
 8007486:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00b      	beq.n	80074a6 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800748e:	490b      	ldr	r1, [pc, #44]	; (80074bc <Get_SerialNum+0x54>)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2208      	movs	r2, #8
 8007494:	0018      	movs	r0, r3
 8007496:	f000 f815 	bl	80074c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800749a:	4909      	ldr	r1, [pc, #36]	; (80074c0 <Get_SerialNum+0x58>)
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	2204      	movs	r2, #4
 80074a0:	0018      	movs	r0, r3
 80074a2:	f000 f80f 	bl	80074c4 <IntToUnicode>
  }
}
 80074a6:	46c0      	nop			; (mov r8, r8)
 80074a8:	46bd      	mov	sp, r7
 80074aa:	b004      	add	sp, #16
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	46c0      	nop			; (mov r8, r8)
 80074b0:	1ff80050 	.word	0x1ff80050
 80074b4:	1ff80054 	.word	0x1ff80054
 80074b8:	1ff80058 	.word	0x1ff80058
 80074bc:	20000166 	.word	0x20000166
 80074c0:	20000176 	.word	0x20000176

080074c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b086      	sub	sp, #24
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	1dfb      	adds	r3, r7, #7
 80074d0:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 80074d2:	2117      	movs	r1, #23
 80074d4:	187b      	adds	r3, r7, r1
 80074d6:	2200      	movs	r2, #0
 80074d8:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80074da:	187b      	adds	r3, r7, r1
 80074dc:	2200      	movs	r2, #0
 80074de:	701a      	strb	r2, [r3, #0]
 80074e0:	e02f      	b.n	8007542 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	0f1b      	lsrs	r3, r3, #28
 80074e6:	2b09      	cmp	r3, #9
 80074e8:	d80d      	bhi.n	8007506 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	0f1b      	lsrs	r3, r3, #28
 80074ee:	b2da      	uxtb	r2, r3
 80074f0:	2317      	movs	r3, #23
 80074f2:	18fb      	adds	r3, r7, r3
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	005b      	lsls	r3, r3, #1
 80074f8:	0019      	movs	r1, r3
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	185b      	adds	r3, r3, r1
 80074fe:	3230      	adds	r2, #48	; 0x30
 8007500:	b2d2      	uxtb	r2, r2
 8007502:	701a      	strb	r2, [r3, #0]
 8007504:	e00c      	b.n	8007520 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	0f1b      	lsrs	r3, r3, #28
 800750a:	b2da      	uxtb	r2, r3
 800750c:	2317      	movs	r3, #23
 800750e:	18fb      	adds	r3, r7, r3
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	005b      	lsls	r3, r3, #1
 8007514:	0019      	movs	r1, r3
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	185b      	adds	r3, r3, r1
 800751a:	3237      	adds	r2, #55	; 0x37
 800751c:	b2d2      	uxtb	r2, r2
 800751e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	011b      	lsls	r3, r3, #4
 8007524:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007526:	2117      	movs	r1, #23
 8007528:	187b      	adds	r3, r7, r1
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	005b      	lsls	r3, r3, #1
 800752e:	3301      	adds	r3, #1
 8007530:	68ba      	ldr	r2, [r7, #8]
 8007532:	18d3      	adds	r3, r2, r3
 8007534:	2200      	movs	r2, #0
 8007536:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007538:	187b      	adds	r3, r7, r1
 800753a:	781a      	ldrb	r2, [r3, #0]
 800753c:	187b      	adds	r3, r7, r1
 800753e:	3201      	adds	r2, #1
 8007540:	701a      	strb	r2, [r3, #0]
 8007542:	2317      	movs	r3, #23
 8007544:	18fa      	adds	r2, r7, r3
 8007546:	1dfb      	adds	r3, r7, #7
 8007548:	7812      	ldrb	r2, [r2, #0]
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	429a      	cmp	r2, r3
 800754e:	d3c8      	bcc.n	80074e2 <IntToUnicode+0x1e>
  }
}
 8007550:	46c0      	nop			; (mov r8, r8)
 8007552:	46c0      	nop			; (mov r8, r8)
 8007554:	46bd      	mov	sp, r7
 8007556:	b006      	add	sp, #24
 8007558:	bd80      	pop	{r7, pc}
	...

0800755c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a0a      	ldr	r2, [pc, #40]	; (8007594 <HAL_PCD_MspInit+0x38>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d10e      	bne.n	800758c <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800756e:	4b0a      	ldr	r3, [pc, #40]	; (8007598 <HAL_PCD_MspInit+0x3c>)
 8007570:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007572:	4b09      	ldr	r3, [pc, #36]	; (8007598 <HAL_PCD_MspInit+0x3c>)
 8007574:	2180      	movs	r1, #128	; 0x80
 8007576:	0409      	lsls	r1, r1, #16
 8007578:	430a      	orrs	r2, r1
 800757a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800757c:	2200      	movs	r2, #0
 800757e:	2100      	movs	r1, #0
 8007580:	201f      	movs	r0, #31
 8007582:	f7f9 fa17 	bl	80009b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8007586:	201f      	movs	r0, #31
 8007588:	f7f9 fa29 	bl	80009de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800758c:	46c0      	nop			; (mov r8, r8)
 800758e:	46bd      	mov	sp, r7
 8007590:	b002      	add	sp, #8
 8007592:	bd80      	pop	{r7, pc}
 8007594:	40005c00 	.word	0x40005c00
 8007598:	40021000 	.word	0x40021000

0800759c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	23bc      	movs	r3, #188	; 0xbc
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	58d2      	ldr	r2, [r2, r3]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	21ac      	movs	r1, #172	; 0xac
 80075b0:	0089      	lsls	r1, r1, #2
 80075b2:	468c      	mov	ip, r1
 80075b4:	4463      	add	r3, ip
 80075b6:	0019      	movs	r1, r3
 80075b8:	0010      	movs	r0, r2
 80075ba:	f7fe fc67 	bl	8005e8c <USBD_LL_SetupStage>
}
 80075be:	46c0      	nop			; (mov r8, r8)
 80075c0:	46bd      	mov	sp, r7
 80075c2:	b002      	add	sp, #8
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075c6:	b590      	push	{r4, r7, lr}
 80075c8:	b083      	sub	sp, #12
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
 80075ce:	000a      	movs	r2, r1
 80075d0:	1cfb      	adds	r3, r7, #3
 80075d2:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	23bc      	movs	r3, #188	; 0xbc
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	58d4      	ldr	r4, [r2, r3]
 80075dc:	1cfb      	adds	r3, r7, #3
 80075de:	781a      	ldrb	r2, [r3, #0]
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	23be      	movs	r3, #190	; 0xbe
 80075e4:	0059      	lsls	r1, r3, #1
 80075e6:	0013      	movs	r3, r2
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	189b      	adds	r3, r3, r2
 80075ec:	00db      	lsls	r3, r3, #3
 80075ee:	18c3      	adds	r3, r0, r3
 80075f0:	185b      	adds	r3, r3, r1
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	1cfb      	adds	r3, r7, #3
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	0019      	movs	r1, r3
 80075fa:	0020      	movs	r0, r4
 80075fc:	f7fe fca4 	bl	8005f48 <USBD_LL_DataOutStage>
}
 8007600:	46c0      	nop			; (mov r8, r8)
 8007602:	46bd      	mov	sp, r7
 8007604:	b003      	add	sp, #12
 8007606:	bd90      	pop	{r4, r7, pc}

08007608 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	000a      	movs	r2, r1
 8007612:	1cfb      	adds	r3, r7, #3
 8007614:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	23bc      	movs	r3, #188	; 0xbc
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	58d0      	ldr	r0, [r2, r3]
 800761e:	1cfb      	adds	r3, r7, #3
 8007620:	781a      	ldrb	r2, [r3, #0]
 8007622:	6879      	ldr	r1, [r7, #4]
 8007624:	0013      	movs	r3, r2
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	189b      	adds	r3, r3, r2
 800762a:	00db      	lsls	r3, r3, #3
 800762c:	18cb      	adds	r3, r1, r3
 800762e:	333c      	adds	r3, #60	; 0x3c
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	1cfb      	adds	r3, r7, #3
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	0019      	movs	r1, r3
 8007638:	f7fe fd08 	bl	800604c <USBD_LL_DataInStage>
}
 800763c:	46c0      	nop			; (mov r8, r8)
 800763e:	46bd      	mov	sp, r7
 8007640:	b002      	add	sp, #8
 8007642:	bd80      	pop	{r7, pc}

08007644 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	23bc      	movs	r3, #188	; 0xbc
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	58d3      	ldr	r3, [r2, r3]
 8007654:	0018      	movs	r0, r3
 8007656:	f7fe fe3f 	bl	80062d8 <USBD_LL_SOF>
}
 800765a:	46c0      	nop			; (mov r8, r8)
 800765c:	46bd      	mov	sp, r7
 800765e:	b002      	add	sp, #8
 8007660:	bd80      	pop	{r7, pc}

08007662 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b084      	sub	sp, #16
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800766a:	230f      	movs	r3, #15
 800766c:	18fb      	adds	r3, r7, r3
 800766e:	2201      	movs	r2, #1
 8007670:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	2b02      	cmp	r3, #2
 8007678:	d001      	beq.n	800767e <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800767a:	f7f8 ffed 	bl	8000658 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	23bc      	movs	r3, #188	; 0xbc
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	58d2      	ldr	r2, [r2, r3]
 8007686:	230f      	movs	r3, #15
 8007688:	18fb      	adds	r3, r7, r3
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	0019      	movs	r1, r3
 800768e:	0010      	movs	r0, r2
 8007690:	f7fe fde1 	bl	8006256 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	23bc      	movs	r3, #188	; 0xbc
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	58d3      	ldr	r3, [r2, r3]
 800769c:	0018      	movs	r0, r3
 800769e:	f7fe fd92 	bl	80061c6 <USBD_LL_Reset>
}
 80076a2:	46c0      	nop			; (mov r8, r8)
 80076a4:	46bd      	mov	sp, r7
 80076a6:	b004      	add	sp, #16
 80076a8:	bd80      	pop	{r7, pc}
	...

080076ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	23bc      	movs	r3, #188	; 0xbc
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	58d3      	ldr	r3, [r2, r3]
 80076bc:	0018      	movs	r0, r3
 80076be:	f7fe fddb 	bl	8006278 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	699b      	ldr	r3, [r3, #24]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d005      	beq.n	80076d6 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80076ca:	4b05      	ldr	r3, [pc, #20]	; (80076e0 <HAL_PCD_SuspendCallback+0x34>)
 80076cc:	691a      	ldr	r2, [r3, #16]
 80076ce:	4b04      	ldr	r3, [pc, #16]	; (80076e0 <HAL_PCD_SuspendCallback+0x34>)
 80076d0:	2106      	movs	r1, #6
 80076d2:	430a      	orrs	r2, r1
 80076d4:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 80076d6:	46c0      	nop			; (mov r8, r8)
 80076d8:	46bd      	mov	sp, r7
 80076da:	b002      	add	sp, #8
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	46c0      	nop			; (mov r8, r8)
 80076e0:	e000ed00 	.word	0xe000ed00

080076e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	699b      	ldr	r3, [r3, #24]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d007      	beq.n	8007704 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80076f4:	4b09      	ldr	r3, [pc, #36]	; (800771c <HAL_PCD_ResumeCallback+0x38>)
 80076f6:	691a      	ldr	r2, [r3, #16]
 80076f8:	4b08      	ldr	r3, [pc, #32]	; (800771c <HAL_PCD_ResumeCallback+0x38>)
 80076fa:	2106      	movs	r1, #6
 80076fc:	438a      	bics	r2, r1
 80076fe:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8007700:	f000 fa44 	bl	8007b8c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	23bc      	movs	r3, #188	; 0xbc
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	58d3      	ldr	r3, [r2, r3]
 800770c:	0018      	movs	r0, r3
 800770e:	f7fe fdcb 	bl	80062a8 <USBD_LL_Resume>
}
 8007712:	46c0      	nop			; (mov r8, r8)
 8007714:	46bd      	mov	sp, r7
 8007716:	b002      	add	sp, #8
 8007718:	bd80      	pop	{r7, pc}
 800771a:	46c0      	nop			; (mov r8, r8)
 800771c:	e000ed00 	.word	0xe000ed00

08007720 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007728:	4a2d      	ldr	r2, [pc, #180]	; (80077e0 <USBD_LL_Init+0xc0>)
 800772a:	23bc      	movs	r3, #188	; 0xbc
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	6879      	ldr	r1, [r7, #4]
 8007730:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	23b0      	movs	r3, #176	; 0xb0
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	4929      	ldr	r1, [pc, #164]	; (80077e0 <USBD_LL_Init+0xc0>)
 800773a:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800773c:	4b28      	ldr	r3, [pc, #160]	; (80077e0 <USBD_LL_Init+0xc0>)
 800773e:	4a29      	ldr	r2, [pc, #164]	; (80077e4 <USBD_LL_Init+0xc4>)
 8007740:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007742:	4b27      	ldr	r3, [pc, #156]	; (80077e0 <USBD_LL_Init+0xc0>)
 8007744:	2208      	movs	r2, #8
 8007746:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007748:	4b25      	ldr	r3, [pc, #148]	; (80077e0 <USBD_LL_Init+0xc0>)
 800774a:	2202      	movs	r2, #2
 800774c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800774e:	4b24      	ldr	r3, [pc, #144]	; (80077e0 <USBD_LL_Init+0xc0>)
 8007750:	2202      	movs	r2, #2
 8007752:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007754:	4b22      	ldr	r3, [pc, #136]	; (80077e0 <USBD_LL_Init+0xc0>)
 8007756:	2200      	movs	r2, #0
 8007758:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800775a:	4b21      	ldr	r3, [pc, #132]	; (80077e0 <USBD_LL_Init+0xc0>)
 800775c:	2200      	movs	r2, #0
 800775e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007760:	4b1f      	ldr	r3, [pc, #124]	; (80077e0 <USBD_LL_Init+0xc0>)
 8007762:	2200      	movs	r2, #0
 8007764:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007766:	4b1e      	ldr	r3, [pc, #120]	; (80077e0 <USBD_LL_Init+0xc0>)
 8007768:	0018      	movs	r0, r3
 800776a:	f7f9 f955 	bl	8000a18 <HAL_PCD_Init>
 800776e:	1e03      	subs	r3, r0, #0
 8007770:	d001      	beq.n	8007776 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8007772:	f7f8 ff71 	bl	8000658 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	23b0      	movs	r3, #176	; 0xb0
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	58d0      	ldr	r0, [r2, r3]
 800777e:	2318      	movs	r3, #24
 8007780:	2200      	movs	r2, #0
 8007782:	2100      	movs	r1, #0
 8007784:	f7fa ff16 	bl	80025b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	23b0      	movs	r3, #176	; 0xb0
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	58d0      	ldr	r0, [r2, r3]
 8007790:	2358      	movs	r3, #88	; 0x58
 8007792:	2200      	movs	r2, #0
 8007794:	2180      	movs	r1, #128	; 0x80
 8007796:	f7fa ff0d 	bl	80025b4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	23b0      	movs	r3, #176	; 0xb0
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	58d0      	ldr	r0, [r2, r3]
 80077a2:	23c0      	movs	r3, #192	; 0xc0
 80077a4:	2200      	movs	r2, #0
 80077a6:	2181      	movs	r1, #129	; 0x81
 80077a8:	f7fa ff04 	bl	80025b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	23b0      	movs	r3, #176	; 0xb0
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	58d0      	ldr	r0, [r2, r3]
 80077b4:	2388      	movs	r3, #136	; 0x88
 80077b6:	005b      	lsls	r3, r3, #1
 80077b8:	2200      	movs	r2, #0
 80077ba:	2101      	movs	r1, #1
 80077bc:	f7fa fefa 	bl	80025b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	23b0      	movs	r3, #176	; 0xb0
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	58d0      	ldr	r0, [r2, r3]
 80077c8:	2380      	movs	r3, #128	; 0x80
 80077ca:	005b      	lsls	r3, r3, #1
 80077cc:	2200      	movs	r2, #0
 80077ce:	2182      	movs	r1, #130	; 0x82
 80077d0:	f7fa fef0 	bl	80025b4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	0018      	movs	r0, r3
 80077d8:	46bd      	mov	sp, r7
 80077da:	b002      	add	sp, #8
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	46c0      	nop			; (mov r8, r8)
 80077e0:	20000ea8 	.word	0x20000ea8
 80077e4:	40005c00 	.word	0x40005c00

080077e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80077e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077f0:	210f      	movs	r1, #15
 80077f2:	187b      	adds	r3, r7, r1
 80077f4:	2200      	movs	r2, #0
 80077f6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077f8:	260e      	movs	r6, #14
 80077fa:	19bb      	adds	r3, r7, r6
 80077fc:	2200      	movs	r2, #0
 80077fe:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	23b0      	movs	r3, #176	; 0xb0
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	58d3      	ldr	r3, [r2, r3]
 8007808:	000d      	movs	r5, r1
 800780a:	187c      	adds	r4, r7, r1
 800780c:	0018      	movs	r0, r3
 800780e:	f7f9 fa03 	bl	8000c18 <HAL_PCD_Start>
 8007812:	0003      	movs	r3, r0
 8007814:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007816:	19bc      	adds	r4, r7, r6
 8007818:	197b      	adds	r3, r7, r5
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	0018      	movs	r0, r3
 800781e:	f000 f9bc 	bl	8007b9a <USBD_Get_USB_Status>
 8007822:	0003      	movs	r3, r0
 8007824:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007826:	19bb      	adds	r3, r7, r6
 8007828:	781b      	ldrb	r3, [r3, #0]
}
 800782a:	0018      	movs	r0, r3
 800782c:	46bd      	mov	sp, r7
 800782e:	b005      	add	sp, #20
 8007830:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007832 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007832:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007834:	b085      	sub	sp, #20
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
 800783a:	000c      	movs	r4, r1
 800783c:	0010      	movs	r0, r2
 800783e:	0019      	movs	r1, r3
 8007840:	1cfb      	adds	r3, r7, #3
 8007842:	1c22      	adds	r2, r4, #0
 8007844:	701a      	strb	r2, [r3, #0]
 8007846:	1cbb      	adds	r3, r7, #2
 8007848:	1c02      	adds	r2, r0, #0
 800784a:	701a      	strb	r2, [r3, #0]
 800784c:	003b      	movs	r3, r7
 800784e:	1c0a      	adds	r2, r1, #0
 8007850:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007852:	260f      	movs	r6, #15
 8007854:	19bb      	adds	r3, r7, r6
 8007856:	2200      	movs	r2, #0
 8007858:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800785a:	250e      	movs	r5, #14
 800785c:	197b      	adds	r3, r7, r5
 800785e:	2200      	movs	r2, #0
 8007860:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	23b0      	movs	r3, #176	; 0xb0
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	58d0      	ldr	r0, [r2, r3]
 800786a:	19bc      	adds	r4, r7, r6
 800786c:	1cbb      	adds	r3, r7, #2
 800786e:	781d      	ldrb	r5, [r3, #0]
 8007870:	003b      	movs	r3, r7
 8007872:	881a      	ldrh	r2, [r3, #0]
 8007874:	1cfb      	adds	r3, r7, #3
 8007876:	7819      	ldrb	r1, [r3, #0]
 8007878:	002b      	movs	r3, r5
 800787a:	f7f9 fb62 	bl	8000f42 <HAL_PCD_EP_Open>
 800787e:	0003      	movs	r3, r0
 8007880:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007882:	250e      	movs	r5, #14
 8007884:	197c      	adds	r4, r7, r5
 8007886:	19bb      	adds	r3, r7, r6
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	0018      	movs	r0, r3
 800788c:	f000 f985 	bl	8007b9a <USBD_Get_USB_Status>
 8007890:	0003      	movs	r3, r0
 8007892:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007894:	197b      	adds	r3, r7, r5
 8007896:	781b      	ldrb	r3, [r3, #0]
}
 8007898:	0018      	movs	r0, r3
 800789a:	46bd      	mov	sp, r7
 800789c:	b005      	add	sp, #20
 800789e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080078a0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	000a      	movs	r2, r1
 80078aa:	1cfb      	adds	r3, r7, #3
 80078ac:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078ae:	210f      	movs	r1, #15
 80078b0:	187b      	adds	r3, r7, r1
 80078b2:	2200      	movs	r2, #0
 80078b4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078b6:	260e      	movs	r6, #14
 80078b8:	19bb      	adds	r3, r7, r6
 80078ba:	2200      	movs	r2, #0
 80078bc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	23b0      	movs	r3, #176	; 0xb0
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	58d2      	ldr	r2, [r2, r3]
 80078c6:	000d      	movs	r5, r1
 80078c8:	187c      	adds	r4, r7, r1
 80078ca:	1cfb      	adds	r3, r7, #3
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	0019      	movs	r1, r3
 80078d0:	0010      	movs	r0, r2
 80078d2:	f7f9 fba5 	bl	8001020 <HAL_PCD_EP_Close>
 80078d6:	0003      	movs	r3, r0
 80078d8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078da:	19bc      	adds	r4, r7, r6
 80078dc:	197b      	adds	r3, r7, r5
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	0018      	movs	r0, r3
 80078e2:	f000 f95a 	bl	8007b9a <USBD_Get_USB_Status>
 80078e6:	0003      	movs	r3, r0
 80078e8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80078ea:	19bb      	adds	r3, r7, r6
 80078ec:	781b      	ldrb	r3, [r3, #0]
}
 80078ee:	0018      	movs	r0, r3
 80078f0:	46bd      	mov	sp, r7
 80078f2:	b005      	add	sp, #20
 80078f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080078f6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078f8:	b085      	sub	sp, #20
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
 80078fe:	000a      	movs	r2, r1
 8007900:	1cfb      	adds	r3, r7, #3
 8007902:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007904:	210f      	movs	r1, #15
 8007906:	187b      	adds	r3, r7, r1
 8007908:	2200      	movs	r2, #0
 800790a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800790c:	260e      	movs	r6, #14
 800790e:	19bb      	adds	r3, r7, r6
 8007910:	2200      	movs	r2, #0
 8007912:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	23b0      	movs	r3, #176	; 0xb0
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	58d2      	ldr	r2, [r2, r3]
 800791c:	000d      	movs	r5, r1
 800791e:	187c      	adds	r4, r7, r1
 8007920:	1cfb      	adds	r3, r7, #3
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	0019      	movs	r1, r3
 8007926:	0010      	movs	r0, r2
 8007928:	f7f9 fc57 	bl	80011da <HAL_PCD_EP_SetStall>
 800792c:	0003      	movs	r3, r0
 800792e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007930:	19bc      	adds	r4, r7, r6
 8007932:	197b      	adds	r3, r7, r5
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	0018      	movs	r0, r3
 8007938:	f000 f92f 	bl	8007b9a <USBD_Get_USB_Status>
 800793c:	0003      	movs	r3, r0
 800793e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007940:	19bb      	adds	r3, r7, r6
 8007942:	781b      	ldrb	r3, [r3, #0]
}
 8007944:	0018      	movs	r0, r3
 8007946:	46bd      	mov	sp, r7
 8007948:	b005      	add	sp, #20
 800794a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800794c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800794c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	000a      	movs	r2, r1
 8007956:	1cfb      	adds	r3, r7, #3
 8007958:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800795a:	210f      	movs	r1, #15
 800795c:	187b      	adds	r3, r7, r1
 800795e:	2200      	movs	r2, #0
 8007960:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007962:	260e      	movs	r6, #14
 8007964:	19bb      	adds	r3, r7, r6
 8007966:	2200      	movs	r2, #0
 8007968:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	23b0      	movs	r3, #176	; 0xb0
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	58d2      	ldr	r2, [r2, r3]
 8007972:	000d      	movs	r5, r1
 8007974:	187c      	adds	r4, r7, r1
 8007976:	1cfb      	adds	r3, r7, #3
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	0019      	movs	r1, r3
 800797c:	0010      	movs	r0, r2
 800797e:	f7f9 fc88 	bl	8001292 <HAL_PCD_EP_ClrStall>
 8007982:	0003      	movs	r3, r0
 8007984:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007986:	19bc      	adds	r4, r7, r6
 8007988:	197b      	adds	r3, r7, r5
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	0018      	movs	r0, r3
 800798e:	f000 f904 	bl	8007b9a <USBD_Get_USB_Status>
 8007992:	0003      	movs	r3, r0
 8007994:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007996:	19bb      	adds	r3, r7, r6
 8007998:	781b      	ldrb	r3, [r3, #0]
}
 800799a:	0018      	movs	r0, r3
 800799c:	46bd      	mov	sp, r7
 800799e:	b005      	add	sp, #20
 80079a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080079a2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b084      	sub	sp, #16
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
 80079aa:	000a      	movs	r2, r1
 80079ac:	1cfb      	adds	r3, r7, #3
 80079ae:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	23b0      	movs	r3, #176	; 0xb0
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	58d3      	ldr	r3, [r2, r3]
 80079b8:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80079ba:	1cfb      	adds	r3, r7, #3
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	b25b      	sxtb	r3, r3
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	da0d      	bge.n	80079e0 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80079c4:	1cfb      	adds	r3, r7, #3
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	227f      	movs	r2, #127	; 0x7f
 80079ca:	4013      	ands	r3, r2
 80079cc:	68f9      	ldr	r1, [r7, #12]
 80079ce:	1c5a      	adds	r2, r3, #1
 80079d0:	0013      	movs	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	189b      	adds	r3, r3, r2
 80079d6:	00db      	lsls	r3, r3, #3
 80079d8:	18cb      	adds	r3, r1, r3
 80079da:	3302      	adds	r3, #2
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	e00d      	b.n	80079fc <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80079e0:	1cfb      	adds	r3, r7, #3
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	227f      	movs	r2, #127	; 0x7f
 80079e6:	401a      	ands	r2, r3
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	23b5      	movs	r3, #181	; 0xb5
 80079ec:	0059      	lsls	r1, r3, #1
 80079ee:	0013      	movs	r3, r2
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	189b      	adds	r3, r3, r2
 80079f4:	00db      	lsls	r3, r3, #3
 80079f6:	18c3      	adds	r3, r0, r3
 80079f8:	185b      	adds	r3, r3, r1
 80079fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80079fc:	0018      	movs	r0, r3
 80079fe:	46bd      	mov	sp, r7
 8007a00:	b004      	add	sp, #16
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a06:	b085      	sub	sp, #20
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	000a      	movs	r2, r1
 8007a0e:	1cfb      	adds	r3, r7, #3
 8007a10:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a12:	210f      	movs	r1, #15
 8007a14:	187b      	adds	r3, r7, r1
 8007a16:	2200      	movs	r2, #0
 8007a18:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a1a:	260e      	movs	r6, #14
 8007a1c:	19bb      	adds	r3, r7, r6
 8007a1e:	2200      	movs	r2, #0
 8007a20:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	23b0      	movs	r3, #176	; 0xb0
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	58d2      	ldr	r2, [r2, r3]
 8007a2a:	000d      	movs	r5, r1
 8007a2c:	187c      	adds	r4, r7, r1
 8007a2e:	1cfb      	adds	r3, r7, #3
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	0019      	movs	r1, r3
 8007a34:	0010      	movs	r0, r2
 8007a36:	f7f9 fa59 	bl	8000eec <HAL_PCD_SetAddress>
 8007a3a:	0003      	movs	r3, r0
 8007a3c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a3e:	19bc      	adds	r4, r7, r6
 8007a40:	197b      	adds	r3, r7, r5
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	0018      	movs	r0, r3
 8007a46:	f000 f8a8 	bl	8007b9a <USBD_Get_USB_Status>
 8007a4a:	0003      	movs	r3, r0
 8007a4c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007a4e:	19bb      	adds	r3, r7, r6
 8007a50:	781b      	ldrb	r3, [r3, #0]
}
 8007a52:	0018      	movs	r0, r3
 8007a54:	46bd      	mov	sp, r7
 8007a56:	b005      	add	sp, #20
 8007a58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007a5a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007a5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a5c:	b087      	sub	sp, #28
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	60f8      	str	r0, [r7, #12]
 8007a62:	0008      	movs	r0, r1
 8007a64:	607a      	str	r2, [r7, #4]
 8007a66:	0019      	movs	r1, r3
 8007a68:	230b      	movs	r3, #11
 8007a6a:	18fb      	adds	r3, r7, r3
 8007a6c:	1c02      	adds	r2, r0, #0
 8007a6e:	701a      	strb	r2, [r3, #0]
 8007a70:	2408      	movs	r4, #8
 8007a72:	193b      	adds	r3, r7, r4
 8007a74:	1c0a      	adds	r2, r1, #0
 8007a76:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a78:	2117      	movs	r1, #23
 8007a7a:	187b      	adds	r3, r7, r1
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a80:	2516      	movs	r5, #22
 8007a82:	197b      	adds	r3, r7, r5
 8007a84:	2200      	movs	r2, #0
 8007a86:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	23b0      	movs	r3, #176	; 0xb0
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	58d0      	ldr	r0, [r2, r3]
 8007a90:	193b      	adds	r3, r7, r4
 8007a92:	881d      	ldrh	r5, [r3, #0]
 8007a94:	000e      	movs	r6, r1
 8007a96:	187c      	adds	r4, r7, r1
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	230b      	movs	r3, #11
 8007a9c:	18fb      	adds	r3, r7, r3
 8007a9e:	7819      	ldrb	r1, [r3, #0]
 8007aa0:	002b      	movs	r3, r5
 8007aa2:	f7f9 fb5e 	bl	8001162 <HAL_PCD_EP_Transmit>
 8007aa6:	0003      	movs	r3, r0
 8007aa8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007aaa:	2516      	movs	r5, #22
 8007aac:	197c      	adds	r4, r7, r5
 8007aae:	19bb      	adds	r3, r7, r6
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	0018      	movs	r0, r3
 8007ab4:	f000 f871 	bl	8007b9a <USBD_Get_USB_Status>
 8007ab8:	0003      	movs	r3, r0
 8007aba:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007abc:	197b      	adds	r3, r7, r5
 8007abe:	781b      	ldrb	r3, [r3, #0]
}
 8007ac0:	0018      	movs	r0, r3
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	b007      	add	sp, #28
 8007ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ac8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007aca:	b087      	sub	sp, #28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	0008      	movs	r0, r1
 8007ad2:	607a      	str	r2, [r7, #4]
 8007ad4:	0019      	movs	r1, r3
 8007ad6:	230b      	movs	r3, #11
 8007ad8:	18fb      	adds	r3, r7, r3
 8007ada:	1c02      	adds	r2, r0, #0
 8007adc:	701a      	strb	r2, [r3, #0]
 8007ade:	2408      	movs	r4, #8
 8007ae0:	193b      	adds	r3, r7, r4
 8007ae2:	1c0a      	adds	r2, r1, #0
 8007ae4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ae6:	2117      	movs	r1, #23
 8007ae8:	187b      	adds	r3, r7, r1
 8007aea:	2200      	movs	r2, #0
 8007aec:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007aee:	2516      	movs	r5, #22
 8007af0:	197b      	adds	r3, r7, r5
 8007af2:	2200      	movs	r2, #0
 8007af4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007af6:	68fa      	ldr	r2, [r7, #12]
 8007af8:	23b0      	movs	r3, #176	; 0xb0
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	58d0      	ldr	r0, [r2, r3]
 8007afe:	193b      	adds	r3, r7, r4
 8007b00:	881d      	ldrh	r5, [r3, #0]
 8007b02:	000e      	movs	r6, r1
 8007b04:	187c      	adds	r4, r7, r1
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	230b      	movs	r3, #11
 8007b0a:	18fb      	adds	r3, r7, r3
 8007b0c:	7819      	ldrb	r1, [r3, #0]
 8007b0e:	002b      	movs	r3, r5
 8007b10:	f7f9 fad7 	bl	80010c2 <HAL_PCD_EP_Receive>
 8007b14:	0003      	movs	r3, r0
 8007b16:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b18:	2516      	movs	r5, #22
 8007b1a:	197c      	adds	r4, r7, r5
 8007b1c:	19bb      	adds	r3, r7, r6
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	0018      	movs	r0, r3
 8007b22:	f000 f83a 	bl	8007b9a <USBD_Get_USB_Status>
 8007b26:	0003      	movs	r3, r0
 8007b28:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007b2a:	197b      	adds	r3, r7, r5
 8007b2c:	781b      	ldrb	r3, [r3, #0]
}
 8007b2e:	0018      	movs	r0, r3
 8007b30:	46bd      	mov	sp, r7
 8007b32:	b007      	add	sp, #28
 8007b34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007b36 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b082      	sub	sp, #8
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
 8007b3e:	000a      	movs	r2, r1
 8007b40:	1cfb      	adds	r3, r7, #3
 8007b42:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	23b0      	movs	r3, #176	; 0xb0
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	58d2      	ldr	r2, [r2, r3]
 8007b4c:	1cfb      	adds	r3, r7, #3
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	0019      	movs	r1, r3
 8007b52:	0010      	movs	r0, r2
 8007b54:	f7f9 faec 	bl	8001130 <HAL_PCD_EP_GetRxCount>
 8007b58:	0003      	movs	r3, r0
}
 8007b5a:	0018      	movs	r0, r3
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	b002      	add	sp, #8
 8007b60:	bd80      	pop	{r7, pc}
	...

08007b64 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007b6c:	4b02      	ldr	r3, [pc, #8]	; (8007b78 <USBD_static_malloc+0x14>)
}
 8007b6e:	0018      	movs	r0, r3
 8007b70:	46bd      	mov	sp, r7
 8007b72:	b002      	add	sp, #8
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	46c0      	nop			; (mov r8, r8)
 8007b78:	2000119c 	.word	0x2000119c

08007b7c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]

}
 8007b84:	46c0      	nop			; (mov r8, r8)
 8007b86:	46bd      	mov	sp, r7
 8007b88:	b002      	add	sp, #8
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007b90:	f7f8 fcca 	bl	8000528 <SystemClock_Config>
}
 8007b94:	46c0      	nop			; (mov r8, r8)
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b084      	sub	sp, #16
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	0002      	movs	r2, r0
 8007ba2:	1dfb      	adds	r3, r7, #7
 8007ba4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ba6:	230f      	movs	r3, #15
 8007ba8:	18fb      	adds	r3, r7, r3
 8007baa:	2200      	movs	r2, #0
 8007bac:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8007bae:	1dfb      	adds	r3, r7, #7
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	2b03      	cmp	r3, #3
 8007bb4:	d017      	beq.n	8007be6 <USBD_Get_USB_Status+0x4c>
 8007bb6:	dc1b      	bgt.n	8007bf0 <USBD_Get_USB_Status+0x56>
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	d00f      	beq.n	8007bdc <USBD_Get_USB_Status+0x42>
 8007bbc:	dc18      	bgt.n	8007bf0 <USBD_Get_USB_Status+0x56>
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d002      	beq.n	8007bc8 <USBD_Get_USB_Status+0x2e>
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d005      	beq.n	8007bd2 <USBD_Get_USB_Status+0x38>
 8007bc6:	e013      	b.n	8007bf0 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007bc8:	230f      	movs	r3, #15
 8007bca:	18fb      	adds	r3, r7, r3
 8007bcc:	2200      	movs	r2, #0
 8007bce:	701a      	strb	r2, [r3, #0]
    break;
 8007bd0:	e013      	b.n	8007bfa <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007bd2:	230f      	movs	r3, #15
 8007bd4:	18fb      	adds	r3, r7, r3
 8007bd6:	2202      	movs	r2, #2
 8007bd8:	701a      	strb	r2, [r3, #0]
    break;
 8007bda:	e00e      	b.n	8007bfa <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007bdc:	230f      	movs	r3, #15
 8007bde:	18fb      	adds	r3, r7, r3
 8007be0:	2201      	movs	r2, #1
 8007be2:	701a      	strb	r2, [r3, #0]
    break;
 8007be4:	e009      	b.n	8007bfa <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007be6:	230f      	movs	r3, #15
 8007be8:	18fb      	adds	r3, r7, r3
 8007bea:	2202      	movs	r2, #2
 8007bec:	701a      	strb	r2, [r3, #0]
    break;
 8007bee:	e004      	b.n	8007bfa <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8007bf0:	230f      	movs	r3, #15
 8007bf2:	18fb      	adds	r3, r7, r3
 8007bf4:	2202      	movs	r2, #2
 8007bf6:	701a      	strb	r2, [r3, #0]
    break;
 8007bf8:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8007bfa:	230f      	movs	r3, #15
 8007bfc:	18fb      	adds	r3, r7, r3
 8007bfe:	781b      	ldrb	r3, [r3, #0]
}
 8007c00:	0018      	movs	r0, r3
 8007c02:	46bd      	mov	sp, r7
 8007c04:	b004      	add	sp, #16
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <memset>:
 8007c08:	0003      	movs	r3, r0
 8007c0a:	1882      	adds	r2, r0, r2
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d100      	bne.n	8007c12 <memset+0xa>
 8007c10:	4770      	bx	lr
 8007c12:	7019      	strb	r1, [r3, #0]
 8007c14:	3301      	adds	r3, #1
 8007c16:	e7f9      	b.n	8007c0c <memset+0x4>

08007c18 <__libc_init_array>:
 8007c18:	b570      	push	{r4, r5, r6, lr}
 8007c1a:	2600      	movs	r6, #0
 8007c1c:	4c0c      	ldr	r4, [pc, #48]	; (8007c50 <__libc_init_array+0x38>)
 8007c1e:	4d0d      	ldr	r5, [pc, #52]	; (8007c54 <__libc_init_array+0x3c>)
 8007c20:	1b64      	subs	r4, r4, r5
 8007c22:	10a4      	asrs	r4, r4, #2
 8007c24:	42a6      	cmp	r6, r4
 8007c26:	d109      	bne.n	8007c3c <__libc_init_array+0x24>
 8007c28:	2600      	movs	r6, #0
 8007c2a:	f000 f823 	bl	8007c74 <_init>
 8007c2e:	4c0a      	ldr	r4, [pc, #40]	; (8007c58 <__libc_init_array+0x40>)
 8007c30:	4d0a      	ldr	r5, [pc, #40]	; (8007c5c <__libc_init_array+0x44>)
 8007c32:	1b64      	subs	r4, r4, r5
 8007c34:	10a4      	asrs	r4, r4, #2
 8007c36:	42a6      	cmp	r6, r4
 8007c38:	d105      	bne.n	8007c46 <__libc_init_array+0x2e>
 8007c3a:	bd70      	pop	{r4, r5, r6, pc}
 8007c3c:	00b3      	lsls	r3, r6, #2
 8007c3e:	58eb      	ldr	r3, [r5, r3]
 8007c40:	4798      	blx	r3
 8007c42:	3601      	adds	r6, #1
 8007c44:	e7ee      	b.n	8007c24 <__libc_init_array+0xc>
 8007c46:	00b3      	lsls	r3, r6, #2
 8007c48:	58eb      	ldr	r3, [r5, r3]
 8007c4a:	4798      	blx	r3
 8007c4c:	3601      	adds	r6, #1
 8007c4e:	e7f2      	b.n	8007c36 <__libc_init_array+0x1e>
 8007c50:	08007e08 	.word	0x08007e08
 8007c54:	08007e08 	.word	0x08007e08
 8007c58:	08007e0c 	.word	0x08007e0c
 8007c5c:	08007e08 	.word	0x08007e08

08007c60 <memcpy>:
 8007c60:	2300      	movs	r3, #0
 8007c62:	b510      	push	{r4, lr}
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d100      	bne.n	8007c6a <memcpy+0xa>
 8007c68:	bd10      	pop	{r4, pc}
 8007c6a:	5ccc      	ldrb	r4, [r1, r3]
 8007c6c:	54c4      	strb	r4, [r0, r3]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	e7f8      	b.n	8007c64 <memcpy+0x4>
	...

08007c74 <_init>:
 8007c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c76:	46c0      	nop			; (mov r8, r8)
 8007c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c7a:	bc08      	pop	{r3}
 8007c7c:	469e      	mov	lr, r3
 8007c7e:	4770      	bx	lr

08007c80 <_fini>:
 8007c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c82:	46c0      	nop			; (mov r8, r8)
 8007c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c86:	bc08      	pop	{r3}
 8007c88:	469e      	mov	lr, r3
 8007c8a:	4770      	bx	lr

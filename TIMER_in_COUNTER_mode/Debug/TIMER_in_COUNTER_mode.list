
TIMER_in_COUNTER_mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bfc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08002cbc  08002cbc  00012cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d58  08002d58  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002d58  08002d58  00012d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d60  08002d60  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d60  08002d60  00012d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d64  08002d64  00012d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08002d74  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08002d74  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006f4d  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014e9  00000000  00000000  00026fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007d0  00000000  00000000  000284b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005ef  00000000  00000000  00028c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00012c2c  00000000  00000000  0002926f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008912  00000000  00000000  0003be9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00075fc4  00000000  00000000  000447ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001c28  00000000  00000000  000ba774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000bc39c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002ca4 	.word	0x08002ca4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002ca4 	.word	0x08002ca4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 fa44 	bl	8000768 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 fa3f 	bl	8000768 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__aeabi_fdiv>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	464f      	mov	r7, r9
 8000458:	4646      	mov	r6, r8
 800045a:	46d6      	mov	lr, sl
 800045c:	0245      	lsls	r5, r0, #9
 800045e:	b5c0      	push	{r6, r7, lr}
 8000460:	0047      	lsls	r7, r0, #1
 8000462:	1c0c      	adds	r4, r1, #0
 8000464:	0a6d      	lsrs	r5, r5, #9
 8000466:	0e3f      	lsrs	r7, r7, #24
 8000468:	0fc6      	lsrs	r6, r0, #31
 800046a:	2f00      	cmp	r7, #0
 800046c:	d100      	bne.n	8000470 <__aeabi_fdiv+0x1c>
 800046e:	e06f      	b.n	8000550 <__aeabi_fdiv+0xfc>
 8000470:	2fff      	cmp	r7, #255	; 0xff
 8000472:	d100      	bne.n	8000476 <__aeabi_fdiv+0x22>
 8000474:	e074      	b.n	8000560 <__aeabi_fdiv+0x10c>
 8000476:	2300      	movs	r3, #0
 8000478:	2280      	movs	r2, #128	; 0x80
 800047a:	4699      	mov	r9, r3
 800047c:	469a      	mov	sl, r3
 800047e:	00ed      	lsls	r5, r5, #3
 8000480:	04d2      	lsls	r2, r2, #19
 8000482:	4315      	orrs	r5, r2
 8000484:	3f7f      	subs	r7, #127	; 0x7f
 8000486:	0263      	lsls	r3, r4, #9
 8000488:	0a5b      	lsrs	r3, r3, #9
 800048a:	4698      	mov	r8, r3
 800048c:	0063      	lsls	r3, r4, #1
 800048e:	0e1b      	lsrs	r3, r3, #24
 8000490:	0fe4      	lsrs	r4, r4, #31
 8000492:	2b00      	cmp	r3, #0
 8000494:	d04d      	beq.n	8000532 <__aeabi_fdiv+0xde>
 8000496:	2bff      	cmp	r3, #255	; 0xff
 8000498:	d045      	beq.n	8000526 <__aeabi_fdiv+0xd2>
 800049a:	4642      	mov	r2, r8
 800049c:	2180      	movs	r1, #128	; 0x80
 800049e:	00d2      	lsls	r2, r2, #3
 80004a0:	04c9      	lsls	r1, r1, #19
 80004a2:	4311      	orrs	r1, r2
 80004a4:	4688      	mov	r8, r1
 80004a6:	2200      	movs	r2, #0
 80004a8:	3b7f      	subs	r3, #127	; 0x7f
 80004aa:	0031      	movs	r1, r6
 80004ac:	1aff      	subs	r7, r7, r3
 80004ae:	464b      	mov	r3, r9
 80004b0:	4061      	eors	r1, r4
 80004b2:	b2c9      	uxtb	r1, r1
 80004b4:	2b0f      	cmp	r3, #15
 80004b6:	d900      	bls.n	80004ba <__aeabi_fdiv+0x66>
 80004b8:	e0b8      	b.n	800062c <__aeabi_fdiv+0x1d8>
 80004ba:	4870      	ldr	r0, [pc, #448]	; (800067c <__aeabi_fdiv+0x228>)
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	58c3      	ldr	r3, [r0, r3]
 80004c0:	469f      	mov	pc, r3
 80004c2:	2300      	movs	r3, #0
 80004c4:	4698      	mov	r8, r3
 80004c6:	0026      	movs	r6, r4
 80004c8:	4645      	mov	r5, r8
 80004ca:	4692      	mov	sl, r2
 80004cc:	4653      	mov	r3, sl
 80004ce:	2b02      	cmp	r3, #2
 80004d0:	d100      	bne.n	80004d4 <__aeabi_fdiv+0x80>
 80004d2:	e08d      	b.n	80005f0 <__aeabi_fdiv+0x19c>
 80004d4:	2b03      	cmp	r3, #3
 80004d6:	d100      	bne.n	80004da <__aeabi_fdiv+0x86>
 80004d8:	e0a1      	b.n	800061e <__aeabi_fdiv+0x1ca>
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d018      	beq.n	8000510 <__aeabi_fdiv+0xbc>
 80004de:	003b      	movs	r3, r7
 80004e0:	337f      	adds	r3, #127	; 0x7f
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	dd6d      	ble.n	80005c2 <__aeabi_fdiv+0x16e>
 80004e6:	076a      	lsls	r2, r5, #29
 80004e8:	d004      	beq.n	80004f4 <__aeabi_fdiv+0xa0>
 80004ea:	220f      	movs	r2, #15
 80004ec:	402a      	ands	r2, r5
 80004ee:	2a04      	cmp	r2, #4
 80004f0:	d000      	beq.n	80004f4 <__aeabi_fdiv+0xa0>
 80004f2:	3504      	adds	r5, #4
 80004f4:	012a      	lsls	r2, r5, #4
 80004f6:	d503      	bpl.n	8000500 <__aeabi_fdiv+0xac>
 80004f8:	4b61      	ldr	r3, [pc, #388]	; (8000680 <__aeabi_fdiv+0x22c>)
 80004fa:	401d      	ands	r5, r3
 80004fc:	003b      	movs	r3, r7
 80004fe:	3380      	adds	r3, #128	; 0x80
 8000500:	2bfe      	cmp	r3, #254	; 0xfe
 8000502:	dd00      	ble.n	8000506 <__aeabi_fdiv+0xb2>
 8000504:	e074      	b.n	80005f0 <__aeabi_fdiv+0x19c>
 8000506:	01aa      	lsls	r2, r5, #6
 8000508:	0a52      	lsrs	r2, r2, #9
 800050a:	b2d8      	uxtb	r0, r3
 800050c:	e002      	b.n	8000514 <__aeabi_fdiv+0xc0>
 800050e:	000e      	movs	r6, r1
 8000510:	2000      	movs	r0, #0
 8000512:	2200      	movs	r2, #0
 8000514:	05c0      	lsls	r0, r0, #23
 8000516:	07f6      	lsls	r6, r6, #31
 8000518:	4310      	orrs	r0, r2
 800051a:	4330      	orrs	r0, r6
 800051c:	bce0      	pop	{r5, r6, r7}
 800051e:	46ba      	mov	sl, r7
 8000520:	46b1      	mov	r9, r6
 8000522:	46a8      	mov	r8, r5
 8000524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000526:	4643      	mov	r3, r8
 8000528:	2b00      	cmp	r3, #0
 800052a:	d13f      	bne.n	80005ac <__aeabi_fdiv+0x158>
 800052c:	2202      	movs	r2, #2
 800052e:	3fff      	subs	r7, #255	; 0xff
 8000530:	e003      	b.n	800053a <__aeabi_fdiv+0xe6>
 8000532:	4643      	mov	r3, r8
 8000534:	2b00      	cmp	r3, #0
 8000536:	d12d      	bne.n	8000594 <__aeabi_fdiv+0x140>
 8000538:	2201      	movs	r2, #1
 800053a:	0031      	movs	r1, r6
 800053c:	464b      	mov	r3, r9
 800053e:	4061      	eors	r1, r4
 8000540:	b2c9      	uxtb	r1, r1
 8000542:	4313      	orrs	r3, r2
 8000544:	2b0f      	cmp	r3, #15
 8000546:	d838      	bhi.n	80005ba <__aeabi_fdiv+0x166>
 8000548:	484e      	ldr	r0, [pc, #312]	; (8000684 <__aeabi_fdiv+0x230>)
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	58c3      	ldr	r3, [r0, r3]
 800054e:	469f      	mov	pc, r3
 8000550:	2d00      	cmp	r5, #0
 8000552:	d113      	bne.n	800057c <__aeabi_fdiv+0x128>
 8000554:	2304      	movs	r3, #4
 8000556:	4699      	mov	r9, r3
 8000558:	3b03      	subs	r3, #3
 800055a:	2700      	movs	r7, #0
 800055c:	469a      	mov	sl, r3
 800055e:	e792      	b.n	8000486 <__aeabi_fdiv+0x32>
 8000560:	2d00      	cmp	r5, #0
 8000562:	d105      	bne.n	8000570 <__aeabi_fdiv+0x11c>
 8000564:	2308      	movs	r3, #8
 8000566:	4699      	mov	r9, r3
 8000568:	3b06      	subs	r3, #6
 800056a:	27ff      	movs	r7, #255	; 0xff
 800056c:	469a      	mov	sl, r3
 800056e:	e78a      	b.n	8000486 <__aeabi_fdiv+0x32>
 8000570:	230c      	movs	r3, #12
 8000572:	4699      	mov	r9, r3
 8000574:	3b09      	subs	r3, #9
 8000576:	27ff      	movs	r7, #255	; 0xff
 8000578:	469a      	mov	sl, r3
 800057a:	e784      	b.n	8000486 <__aeabi_fdiv+0x32>
 800057c:	0028      	movs	r0, r5
 800057e:	f000 f8d5 	bl	800072c <__clzsi2>
 8000582:	2776      	movs	r7, #118	; 0x76
 8000584:	1f43      	subs	r3, r0, #5
 8000586:	409d      	lsls	r5, r3
 8000588:	2300      	movs	r3, #0
 800058a:	427f      	negs	r7, r7
 800058c:	4699      	mov	r9, r3
 800058e:	469a      	mov	sl, r3
 8000590:	1a3f      	subs	r7, r7, r0
 8000592:	e778      	b.n	8000486 <__aeabi_fdiv+0x32>
 8000594:	4640      	mov	r0, r8
 8000596:	f000 f8c9 	bl	800072c <__clzsi2>
 800059a:	4642      	mov	r2, r8
 800059c:	1f43      	subs	r3, r0, #5
 800059e:	409a      	lsls	r2, r3
 80005a0:	2376      	movs	r3, #118	; 0x76
 80005a2:	425b      	negs	r3, r3
 80005a4:	4690      	mov	r8, r2
 80005a6:	1a1b      	subs	r3, r3, r0
 80005a8:	2200      	movs	r2, #0
 80005aa:	e77e      	b.n	80004aa <__aeabi_fdiv+0x56>
 80005ac:	2303      	movs	r3, #3
 80005ae:	464a      	mov	r2, r9
 80005b0:	431a      	orrs	r2, r3
 80005b2:	4691      	mov	r9, r2
 80005b4:	33fc      	adds	r3, #252	; 0xfc
 80005b6:	2203      	movs	r2, #3
 80005b8:	e777      	b.n	80004aa <__aeabi_fdiv+0x56>
 80005ba:	000e      	movs	r6, r1
 80005bc:	20ff      	movs	r0, #255	; 0xff
 80005be:	2200      	movs	r2, #0
 80005c0:	e7a8      	b.n	8000514 <__aeabi_fdiv+0xc0>
 80005c2:	2201      	movs	r2, #1
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	2b1b      	cmp	r3, #27
 80005c8:	dca2      	bgt.n	8000510 <__aeabi_fdiv+0xbc>
 80005ca:	379e      	adds	r7, #158	; 0x9e
 80005cc:	002a      	movs	r2, r5
 80005ce:	40bd      	lsls	r5, r7
 80005d0:	40da      	lsrs	r2, r3
 80005d2:	1e6b      	subs	r3, r5, #1
 80005d4:	419d      	sbcs	r5, r3
 80005d6:	4315      	orrs	r5, r2
 80005d8:	076a      	lsls	r2, r5, #29
 80005da:	d004      	beq.n	80005e6 <__aeabi_fdiv+0x192>
 80005dc:	220f      	movs	r2, #15
 80005de:	402a      	ands	r2, r5
 80005e0:	2a04      	cmp	r2, #4
 80005e2:	d000      	beq.n	80005e6 <__aeabi_fdiv+0x192>
 80005e4:	3504      	adds	r5, #4
 80005e6:	016a      	lsls	r2, r5, #5
 80005e8:	d544      	bpl.n	8000674 <__aeabi_fdiv+0x220>
 80005ea:	2001      	movs	r0, #1
 80005ec:	2200      	movs	r2, #0
 80005ee:	e791      	b.n	8000514 <__aeabi_fdiv+0xc0>
 80005f0:	20ff      	movs	r0, #255	; 0xff
 80005f2:	2200      	movs	r2, #0
 80005f4:	e78e      	b.n	8000514 <__aeabi_fdiv+0xc0>
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	2600      	movs	r6, #0
 80005fa:	20ff      	movs	r0, #255	; 0xff
 80005fc:	03d2      	lsls	r2, r2, #15
 80005fe:	e789      	b.n	8000514 <__aeabi_fdiv+0xc0>
 8000600:	2300      	movs	r3, #0
 8000602:	4698      	mov	r8, r3
 8000604:	2280      	movs	r2, #128	; 0x80
 8000606:	03d2      	lsls	r2, r2, #15
 8000608:	4215      	tst	r5, r2
 800060a:	d008      	beq.n	800061e <__aeabi_fdiv+0x1ca>
 800060c:	4643      	mov	r3, r8
 800060e:	4213      	tst	r3, r2
 8000610:	d105      	bne.n	800061e <__aeabi_fdiv+0x1ca>
 8000612:	431a      	orrs	r2, r3
 8000614:	0252      	lsls	r2, r2, #9
 8000616:	0026      	movs	r6, r4
 8000618:	20ff      	movs	r0, #255	; 0xff
 800061a:	0a52      	lsrs	r2, r2, #9
 800061c:	e77a      	b.n	8000514 <__aeabi_fdiv+0xc0>
 800061e:	2280      	movs	r2, #128	; 0x80
 8000620:	03d2      	lsls	r2, r2, #15
 8000622:	432a      	orrs	r2, r5
 8000624:	0252      	lsls	r2, r2, #9
 8000626:	20ff      	movs	r0, #255	; 0xff
 8000628:	0a52      	lsrs	r2, r2, #9
 800062a:	e773      	b.n	8000514 <__aeabi_fdiv+0xc0>
 800062c:	4642      	mov	r2, r8
 800062e:	016b      	lsls	r3, r5, #5
 8000630:	0155      	lsls	r5, r2, #5
 8000632:	42ab      	cmp	r3, r5
 8000634:	d21a      	bcs.n	800066c <__aeabi_fdiv+0x218>
 8000636:	201b      	movs	r0, #27
 8000638:	2200      	movs	r2, #0
 800063a:	3f01      	subs	r7, #1
 800063c:	2601      	movs	r6, #1
 800063e:	001c      	movs	r4, r3
 8000640:	0052      	lsls	r2, r2, #1
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	2c00      	cmp	r4, #0
 8000646:	db01      	blt.n	800064c <__aeabi_fdiv+0x1f8>
 8000648:	429d      	cmp	r5, r3
 800064a:	d801      	bhi.n	8000650 <__aeabi_fdiv+0x1fc>
 800064c:	1b5b      	subs	r3, r3, r5
 800064e:	4332      	orrs	r2, r6
 8000650:	3801      	subs	r0, #1
 8000652:	2800      	cmp	r0, #0
 8000654:	d1f3      	bne.n	800063e <__aeabi_fdiv+0x1ea>
 8000656:	1e58      	subs	r0, r3, #1
 8000658:	4183      	sbcs	r3, r0
 800065a:	4313      	orrs	r3, r2
 800065c:	001d      	movs	r5, r3
 800065e:	003b      	movs	r3, r7
 8000660:	337f      	adds	r3, #127	; 0x7f
 8000662:	000e      	movs	r6, r1
 8000664:	2b00      	cmp	r3, #0
 8000666:	dd00      	ble.n	800066a <__aeabi_fdiv+0x216>
 8000668:	e73d      	b.n	80004e6 <__aeabi_fdiv+0x92>
 800066a:	e7aa      	b.n	80005c2 <__aeabi_fdiv+0x16e>
 800066c:	201a      	movs	r0, #26
 800066e:	2201      	movs	r2, #1
 8000670:	1b5b      	subs	r3, r3, r5
 8000672:	e7e3      	b.n	800063c <__aeabi_fdiv+0x1e8>
 8000674:	01aa      	lsls	r2, r5, #6
 8000676:	2000      	movs	r0, #0
 8000678:	0a52      	lsrs	r2, r2, #9
 800067a:	e74b      	b.n	8000514 <__aeabi_fdiv+0xc0>
 800067c:	08002cbc 	.word	0x08002cbc
 8000680:	f7ffffff 	.word	0xf7ffffff
 8000684:	08002cfc 	.word	0x08002cfc

08000688 <__aeabi_i2f>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2800      	cmp	r0, #0
 800068c:	d013      	beq.n	80006b6 <__aeabi_i2f+0x2e>
 800068e:	17c3      	asrs	r3, r0, #31
 8000690:	18c5      	adds	r5, r0, r3
 8000692:	405d      	eors	r5, r3
 8000694:	0fc4      	lsrs	r4, r0, #31
 8000696:	0028      	movs	r0, r5
 8000698:	f000 f848 	bl	800072c <__clzsi2>
 800069c:	239e      	movs	r3, #158	; 0x9e
 800069e:	0001      	movs	r1, r0
 80006a0:	1a1b      	subs	r3, r3, r0
 80006a2:	2b96      	cmp	r3, #150	; 0x96
 80006a4:	dc0f      	bgt.n	80006c6 <__aeabi_i2f+0x3e>
 80006a6:	2808      	cmp	r0, #8
 80006a8:	d031      	beq.n	800070e <__aeabi_i2f+0x86>
 80006aa:	3908      	subs	r1, #8
 80006ac:	408d      	lsls	r5, r1
 80006ae:	026d      	lsls	r5, r5, #9
 80006b0:	0a6d      	lsrs	r5, r5, #9
 80006b2:	b2d8      	uxtb	r0, r3
 80006b4:	e002      	b.n	80006bc <__aeabi_i2f+0x34>
 80006b6:	2400      	movs	r4, #0
 80006b8:	2000      	movs	r0, #0
 80006ba:	2500      	movs	r5, #0
 80006bc:	05c0      	lsls	r0, r0, #23
 80006be:	4328      	orrs	r0, r5
 80006c0:	07e4      	lsls	r4, r4, #31
 80006c2:	4320      	orrs	r0, r4
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	2b99      	cmp	r3, #153	; 0x99
 80006c8:	dd0c      	ble.n	80006e4 <__aeabi_i2f+0x5c>
 80006ca:	2205      	movs	r2, #5
 80006cc:	1a12      	subs	r2, r2, r0
 80006ce:	0028      	movs	r0, r5
 80006d0:	40d0      	lsrs	r0, r2
 80006d2:	0002      	movs	r2, r0
 80006d4:	0008      	movs	r0, r1
 80006d6:	301b      	adds	r0, #27
 80006d8:	4085      	lsls	r5, r0
 80006da:	0028      	movs	r0, r5
 80006dc:	1e45      	subs	r5, r0, #1
 80006de:	41a8      	sbcs	r0, r5
 80006e0:	4302      	orrs	r2, r0
 80006e2:	0015      	movs	r5, r2
 80006e4:	2905      	cmp	r1, #5
 80006e6:	dc16      	bgt.n	8000716 <__aeabi_i2f+0x8e>
 80006e8:	002a      	movs	r2, r5
 80006ea:	480f      	ldr	r0, [pc, #60]	; (8000728 <__aeabi_i2f+0xa0>)
 80006ec:	4002      	ands	r2, r0
 80006ee:	076e      	lsls	r6, r5, #29
 80006f0:	d009      	beq.n	8000706 <__aeabi_i2f+0x7e>
 80006f2:	260f      	movs	r6, #15
 80006f4:	4035      	ands	r5, r6
 80006f6:	2d04      	cmp	r5, #4
 80006f8:	d005      	beq.n	8000706 <__aeabi_i2f+0x7e>
 80006fa:	3204      	adds	r2, #4
 80006fc:	0155      	lsls	r5, r2, #5
 80006fe:	d502      	bpl.n	8000706 <__aeabi_i2f+0x7e>
 8000700:	239f      	movs	r3, #159	; 0x9f
 8000702:	4002      	ands	r2, r0
 8000704:	1a5b      	subs	r3, r3, r1
 8000706:	0192      	lsls	r2, r2, #6
 8000708:	0a55      	lsrs	r5, r2, #9
 800070a:	b2d8      	uxtb	r0, r3
 800070c:	e7d6      	b.n	80006bc <__aeabi_i2f+0x34>
 800070e:	026d      	lsls	r5, r5, #9
 8000710:	2096      	movs	r0, #150	; 0x96
 8000712:	0a6d      	lsrs	r5, r5, #9
 8000714:	e7d2      	b.n	80006bc <__aeabi_i2f+0x34>
 8000716:	1f4a      	subs	r2, r1, #5
 8000718:	4095      	lsls	r5, r2
 800071a:	002a      	movs	r2, r5
 800071c:	4802      	ldr	r0, [pc, #8]	; (8000728 <__aeabi_i2f+0xa0>)
 800071e:	4002      	ands	r2, r0
 8000720:	076e      	lsls	r6, r5, #29
 8000722:	d0f0      	beq.n	8000706 <__aeabi_i2f+0x7e>
 8000724:	e7e5      	b.n	80006f2 <__aeabi_i2f+0x6a>
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	fbffffff 	.word	0xfbffffff

0800072c <__clzsi2>:
 800072c:	211c      	movs	r1, #28
 800072e:	2301      	movs	r3, #1
 8000730:	041b      	lsls	r3, r3, #16
 8000732:	4298      	cmp	r0, r3
 8000734:	d301      	bcc.n	800073a <__clzsi2+0xe>
 8000736:	0c00      	lsrs	r0, r0, #16
 8000738:	3910      	subs	r1, #16
 800073a:	0a1b      	lsrs	r3, r3, #8
 800073c:	4298      	cmp	r0, r3
 800073e:	d301      	bcc.n	8000744 <__clzsi2+0x18>
 8000740:	0a00      	lsrs	r0, r0, #8
 8000742:	3908      	subs	r1, #8
 8000744:	091b      	lsrs	r3, r3, #4
 8000746:	4298      	cmp	r0, r3
 8000748:	d301      	bcc.n	800074e <__clzsi2+0x22>
 800074a:	0900      	lsrs	r0, r0, #4
 800074c:	3904      	subs	r1, #4
 800074e:	a202      	add	r2, pc, #8	; (adr r2, 8000758 <__clzsi2+0x2c>)
 8000750:	5c10      	ldrb	r0, [r2, r0]
 8000752:	1840      	adds	r0, r0, r1
 8000754:	4770      	bx	lr
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	02020304 	.word	0x02020304
 800075c:	01010101 	.word	0x01010101
	...

08000768 <__clzdi2>:
 8000768:	b510      	push	{r4, lr}
 800076a:	2900      	cmp	r1, #0
 800076c:	d103      	bne.n	8000776 <__clzdi2+0xe>
 800076e:	f7ff ffdd 	bl	800072c <__clzsi2>
 8000772:	3020      	adds	r0, #32
 8000774:	e002      	b.n	800077c <__clzdi2+0x14>
 8000776:	0008      	movs	r0, r1
 8000778:	f7ff ffd8 	bl	800072c <__clzsi2>
 800077c:	bd10      	pop	{r4, pc}
 800077e:	46c0      	nop			; (mov r8, r8)

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000784:	f000 fa78 	bl	8000c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000788:	f000 f814 	bl	80007b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078c:	f000 f940 	bl	8000a10 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000790:	f000 f86a 	bl	8000868 <MX_TIM2_Init>
  MX_TIM21_Init();
 8000794:	f000 f8e4 	bl	8000960 <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000798:	4b04      	ldr	r3, [pc, #16]	; (80007ac <main+0x2c>)
 800079a:	2100      	movs	r1, #0
 800079c:	0018      	movs	r0, r3
 800079e:	f001 fbad 	bl	8001efc <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start(&htim21);
 80007a2:	4b03      	ldr	r3, [pc, #12]	; (80007b0 <main+0x30>)
 80007a4:	0018      	movs	r0, r3
 80007a6:	f001 fb1d 	bl	8001de4 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <main+0x2a>
 80007ac:	20000028 	.word	0x20000028
 80007b0:	20000068 	.word	0x20000068

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b590      	push	{r4, r7, lr}
 80007b6:	b095      	sub	sp, #84	; 0x54
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	2418      	movs	r4, #24
 80007bc:	193b      	adds	r3, r7, r4
 80007be:	0018      	movs	r0, r3
 80007c0:	2338      	movs	r3, #56	; 0x38
 80007c2:	001a      	movs	r2, r3
 80007c4:	2100      	movs	r1, #0
 80007c6:	f002 fa41 	bl	8002c4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	0018      	movs	r0, r3
 80007ce:	2314      	movs	r3, #20
 80007d0:	001a      	movs	r2, r3
 80007d2:	2100      	movs	r1, #0
 80007d4:	f002 fa3a 	bl	8002c4c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d8:	4b21      	ldr	r3, [pc, #132]	; (8000860 <SystemClock_Config+0xac>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a21      	ldr	r2, [pc, #132]	; (8000864 <SystemClock_Config+0xb0>)
 80007de:	401a      	ands	r2, r3
 80007e0:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <SystemClock_Config+0xac>)
 80007e2:	2180      	movs	r1, #128	; 0x80
 80007e4:	0109      	lsls	r1, r1, #4
 80007e6:	430a      	orrs	r2, r1
 80007e8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ea:	0021      	movs	r1, r4
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	2201      	movs	r2, #1
 80007f0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	2280      	movs	r2, #128	; 0x80
 80007f6:	0252      	lsls	r2, r2, #9
 80007f8:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2202      	movs	r2, #2
 80007fe:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2280      	movs	r2, #128	; 0x80
 8000804:	0252      	lsls	r2, r2, #9
 8000806:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 8000808:	187b      	adds	r3, r7, r1
 800080a:	22c0      	movs	r2, #192	; 0xc0
 800080c:	0312      	lsls	r2, r2, #12
 800080e:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000810:	187b      	adds	r3, r7, r1
 8000812:	2280      	movs	r2, #128	; 0x80
 8000814:	03d2      	lsls	r2, r2, #15
 8000816:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000818:	187b      	adds	r3, r7, r1
 800081a:	0018      	movs	r0, r3
 800081c:	f000 fcf0 	bl	8001200 <HAL_RCC_OscConfig>
 8000820:	1e03      	subs	r3, r0, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000824:	f000 f962 	bl	8000aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	220f      	movs	r2, #15
 800082c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2203      	movs	r2, #3
 8000832:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	2101      	movs	r1, #1
 800084a:	0018      	movs	r0, r3
 800084c:	f001 f89c 	bl	8001988 <HAL_RCC_ClockConfig>
 8000850:	1e03      	subs	r3, r0, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000854:	f000 f94a 	bl	8000aec <Error_Handler>
  }
}
 8000858:	46c0      	nop			; (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	b015      	add	sp, #84	; 0x54
 800085e:	bd90      	pop	{r4, r7, pc}
 8000860:	40007000 	.word	0x40007000
 8000864:	ffffe7ff 	.word	0xffffe7ff

08000868 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	; 0x28
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800086e:	2318      	movs	r3, #24
 8000870:	18fb      	adds	r3, r7, r3
 8000872:	0018      	movs	r0, r3
 8000874:	2310      	movs	r3, #16
 8000876:	001a      	movs	r2, r3
 8000878:	2100      	movs	r1, #0
 800087a:	f002 f9e7 	bl	8002c4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087e:	2310      	movs	r3, #16
 8000880:	18fb      	adds	r3, r7, r3
 8000882:	0018      	movs	r0, r3
 8000884:	2308      	movs	r3, #8
 8000886:	001a      	movs	r2, r3
 8000888:	2100      	movs	r1, #0
 800088a:	f002 f9df 	bl	8002c4c <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800088e:	003b      	movs	r3, r7
 8000890:	0018      	movs	r0, r3
 8000892:	2310      	movs	r3, #16
 8000894:	001a      	movs	r2, r3
 8000896:	2100      	movs	r1, #0
 8000898:	f002 f9d8 	bl	8002c4c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800089c:	4b2e      	ldr	r3, [pc, #184]	; (8000958 <MX_TIM2_Init+0xf0>)
 800089e:	2280      	movs	r2, #128	; 0x80
 80008a0:	05d2      	lsls	r2, r2, #23
 80008a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 80008a4:	4b2c      	ldr	r3, [pc, #176]	; (8000958 <MX_TIM2_Init+0xf0>)
 80008a6:	221f      	movs	r2, #31
 80008a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008aa:	4b2b      	ldr	r3, [pc, #172]	; (8000958 <MX_TIM2_Init+0xf0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80008b0:	4b29      	ldr	r3, [pc, #164]	; (8000958 <MX_TIM2_Init+0xf0>)
 80008b2:	4a2a      	ldr	r2, [pc, #168]	; (800095c <MX_TIM2_Init+0xf4>)
 80008b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b6:	4b28      	ldr	r3, [pc, #160]	; (8000958 <MX_TIM2_Init+0xf0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008bc:	4b26      	ldr	r3, [pc, #152]	; (8000958 <MX_TIM2_Init+0xf0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008c2:	4b25      	ldr	r3, [pc, #148]	; (8000958 <MX_TIM2_Init+0xf0>)
 80008c4:	0018      	movs	r0, r3
 80008c6:	f001 fa4d 	bl	8001d64 <HAL_TIM_Base_Init>
 80008ca:	1e03      	subs	r3, r0, #0
 80008cc:	d001      	beq.n	80008d2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80008ce:	f000 f90d 	bl	8000aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d2:	2118      	movs	r1, #24
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	2280      	movs	r2, #128	; 0x80
 80008d8:	0152      	lsls	r2, r2, #5
 80008da:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008dc:	187a      	adds	r2, r7, r1
 80008de:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <MX_TIM2_Init+0xf0>)
 80008e0:	0011      	movs	r1, r2
 80008e2:	0018      	movs	r0, r3
 80008e4:	f001 fd5e 	bl	80023a4 <HAL_TIM_ConfigClockSource>
 80008e8:	1e03      	subs	r3, r0, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80008ec:	f000 f8fe 	bl	8000aec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80008f0:	4b19      	ldr	r3, [pc, #100]	; (8000958 <MX_TIM2_Init+0xf0>)
 80008f2:	0018      	movs	r0, r3
 80008f4:	f001 faba 	bl	8001e6c <HAL_TIM_IC_Init>
 80008f8:	1e03      	subs	r3, r0, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80008fc:	f000 f8f6 	bl	8000aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000900:	2110      	movs	r1, #16
 8000902:	187b      	adds	r3, r7, r1
 8000904:	2220      	movs	r2, #32
 8000906:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2200      	movs	r2, #0
 800090c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800090e:	187a      	adds	r2, r7, r1
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_TIM2_Init+0xf0>)
 8000912:	0011      	movs	r1, r2
 8000914:	0018      	movs	r0, r3
 8000916:	f002 f941 	bl	8002b9c <HAL_TIMEx_MasterConfigSynchronization>
 800091a:	1e03      	subs	r3, r0, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 800091e:	f000 f8e5 	bl	8000aec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000922:	003b      	movs	r3, r7
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000928:	003b      	movs	r3, r7
 800092a:	2201      	movs	r2, #1
 800092c:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800092e:	003b      	movs	r3, r7
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000934:	003b      	movs	r3, r7
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800093a:	0039      	movs	r1, r7
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_TIM2_Init+0xf0>)
 800093e:	2200      	movs	r2, #0
 8000940:	0018      	movs	r0, r3
 8000942:	f001 fc8b 	bl	800225c <HAL_TIM_IC_ConfigChannel>
 8000946:	1e03      	subs	r3, r0, #0
 8000948:	d001      	beq.n	800094e <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 800094a:	f000 f8cf 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	b00a      	add	sp, #40	; 0x28
 8000954:	bd80      	pop	{r7, pc}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	20000028 	.word	0x20000028
 800095c:	0000270f 	.word	0x0000270f

08000960 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000966:	230c      	movs	r3, #12
 8000968:	18fb      	adds	r3, r7, r3
 800096a:	0018      	movs	r0, r3
 800096c:	2314      	movs	r3, #20
 800096e:	001a      	movs	r2, r3
 8000970:	2100      	movs	r1, #0
 8000972:	f002 f96b 	bl	8002c4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	0018      	movs	r0, r3
 800097a:	2308      	movs	r3, #8
 800097c:	001a      	movs	r2, r3
 800097e:	2100      	movs	r1, #0
 8000980:	f002 f964 	bl	8002c4c <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8000984:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <MX_TIM21_Init+0xa4>)
 8000986:	4a20      	ldr	r2, [pc, #128]	; (8000a08 <MX_TIM21_Init+0xa8>)
 8000988:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 800098a:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <MX_TIM21_Init+0xa4>)
 800098c:	2200      	movs	r2, #0
 800098e:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000990:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <MX_TIM21_Init+0xa4>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 65535;
 8000996:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <MX_TIM21_Init+0xa4>)
 8000998:	4a1c      	ldr	r2, [pc, #112]	; (8000a0c <MX_TIM21_Init+0xac>)
 800099a:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800099c:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <MX_TIM21_Init+0xa4>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a2:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <MX_TIM21_Init+0xa4>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 80009a8:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <MX_TIM21_Init+0xa4>)
 80009aa:	0018      	movs	r0, r3
 80009ac:	f001 f9da 	bl	8001d64 <HAL_TIM_Base_Init>
 80009b0:	1e03      	subs	r3, r0, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 80009b4:	f000 f89a 	bl	8000aec <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80009b8:	210c      	movs	r1, #12
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	2207      	movs	r2, #7
 80009be:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	2200      	movs	r2, #0
 80009c4:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim21, &sSlaveConfig) != HAL_OK)
 80009c6:	187a      	adds	r2, r7, r1
 80009c8:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <MX_TIM21_Init+0xa4>)
 80009ca:	0011      	movs	r1, r2
 80009cc:	0018      	movs	r0, r3
 80009ce:	f001 fdbd 	bl	800254c <HAL_TIM_SlaveConfigSynchro>
 80009d2:	1e03      	subs	r3, r0, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM21_Init+0x7a>
  {
    Error_Handler();
 80009d6:	f000 f889 	bl	8000aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	2200      	movs	r2, #0
 80009e4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80009e6:	1d3a      	adds	r2, r7, #4
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <MX_TIM21_Init+0xa4>)
 80009ea:	0011      	movs	r1, r2
 80009ec:	0018      	movs	r0, r3
 80009ee:	f002 f8d5 	bl	8002b9c <HAL_TIMEx_MasterConfigSynchronization>
 80009f2:	1e03      	subs	r3, r0, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM21_Init+0x9a>
  {
    Error_Handler();
 80009f6:	f000 f879 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	b008      	add	sp, #32
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	20000068 	.word	0x20000068
 8000a08:	40010800 	.word	0x40010800
 8000a0c:	0000ffff 	.word	0x0000ffff

08000a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <MX_GPIO_Init+0x40>)
 8000a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <MX_GPIO_Init+0x40>)
 8000a1c:	2180      	movs	r1, #128	; 0x80
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <MX_GPIO_Init+0x40>)
 8000a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a26:	2280      	movs	r2, #128	; 0x80
 8000a28:	4013      	ands	r3, r2
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <MX_GPIO_Init+0x40>)
 8000a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a32:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <MX_GPIO_Init+0x40>)
 8000a34:	2101      	movs	r1, #1
 8000a36:	430a      	orrs	r2, r1
 8000a38:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a3a:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <MX_GPIO_Init+0x40>)
 8000a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a3e:	2201      	movs	r2, #1
 8000a40:	4013      	ands	r3, r2
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	b002      	add	sp, #8
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	40021000 	.word	0x40021000

08000a54 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
/* Measure Frequency */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	7e1b      	ldrb	r3, [r3, #24]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d130      	bne.n	8000ac6 <HAL_TIM_IC_CaptureCallback+0x72>
		if (Is_First_Captured == 0) //if the first rising edge is not captured
 8000a64:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d10a      	bne.n	8000a82 <HAL_TIM_IC_CaptureCallback+0x2e>
		{
			TIM2->CNT=0;
 8000a6c:	2380      	movs	r3, #128	; 0x80
 8000a6e:	05db      	lsls	r3, r3, #23
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
			TIM21->CNT=0;
 8000a74:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	625a      	str	r2, [r3, #36]	; 0x24

			Is_First_Captured=1;
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	601a      	str	r2, [r3, #0]

			Frequency = ((float)10000000/((counter21*10000)+counter2));
			Is_First_Captured=0;
		}
	}
}
 8000a80:	e021      	b.n	8000ac6 <HAL_TIM_IC_CaptureCallback+0x72>
			counter2= TIM2->CNT;
 8000a82:	2380      	movs	r3, #128	; 0x80
 8000a84:	05db      	lsls	r3, r3, #23
 8000a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <HAL_TIM_IC_CaptureCallback+0x84>)
 8000a8c:	801a      	strh	r2, [r3, #0]
			counter21= TIM21->CNT;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <HAL_TIM_IC_CaptureCallback+0x88>)
 8000a96:	801a      	strh	r2, [r3, #0]
			Frequency = ((float)10000000/((counter21*10000)+counter2));
 8000a98:	4b10      	ldr	r3, [pc, #64]	; (8000adc <HAL_TIM_IC_CaptureCallback+0x88>)
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	001a      	movs	r2, r3
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000aa0:	4353      	muls	r3, r2
 8000aa2:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <HAL_TIM_IC_CaptureCallback+0x84>)
 8000aa4:	8812      	ldrh	r2, [r2, #0]
 8000aa6:	189b      	adds	r3, r3, r2
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f7ff fded 	bl	8000688 <__aeabi_i2f>
 8000aae:	1c03      	adds	r3, r0, #0
 8000ab0:	1c19      	adds	r1, r3, #0
 8000ab2:	480c      	ldr	r0, [pc, #48]	; (8000ae4 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000ab4:	f7ff fcce 	bl	8000454 <__aeabi_fdiv>
 8000ab8:	1c03      	adds	r3, r0, #0
 8000aba:	1c1a      	adds	r2, r3, #0
 8000abc:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000abe:	601a      	str	r2, [r3, #0]
			Is_First_Captured=0;
 8000ac0:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	b002      	add	sp, #8
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	200000ac 	.word	0x200000ac
 8000ad4:	40010800 	.word	0x40010800
 8000ad8:	200000a8 	.word	0x200000a8
 8000adc:	200000aa 	.word	0x200000aa
 8000ae0:	00002710 	.word	0x00002710
 8000ae4:	4b189680 	.word	0x4b189680
 8000ae8:	200000b0 	.word	0x200000b0

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <Error_Handler+0x8>
	...

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afc:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <HAL_MspInit+0x24>)
 8000afe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_MspInit+0x24>)
 8000b02:	2101      	movs	r1, #1
 8000b04:	430a      	orrs	r2, r1
 8000b06:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b08:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <HAL_MspInit+0x24>)
 8000b0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <HAL_MspInit+0x24>)
 8000b0e:	2180      	movs	r1, #128	; 0x80
 8000b10:	0549      	lsls	r1, r1, #21
 8000b12:	430a      	orrs	r2, r1
 8000b14:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40021000 	.word	0x40021000

08000b20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b089      	sub	sp, #36	; 0x24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	240c      	movs	r4, #12
 8000b2a:	193b      	adds	r3, r7, r4
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	2314      	movs	r3, #20
 8000b30:	001a      	movs	r2, r3
 8000b32:	2100      	movs	r1, #0
 8000b34:	f002 f88a 	bl	8002c4c <memset>
  if(htim_base->Instance==TIM2)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	2380      	movs	r3, #128	; 0x80
 8000b3e:	05db      	lsls	r3, r3, #23
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d131      	bne.n	8000ba8 <HAL_TIM_Base_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b44:	4b20      	ldr	r3, [pc, #128]	; (8000bc8 <HAL_TIM_Base_MspInit+0xa8>)
 8000b46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b48:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <HAL_TIM_Base_MspInit+0xa8>)
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	430a      	orrs	r2, r1
 8000b4e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b50:	4b1d      	ldr	r3, [pc, #116]	; (8000bc8 <HAL_TIM_Base_MspInit+0xa8>)
 8000b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b54:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <HAL_TIM_Base_MspInit+0xa8>)
 8000b56:	2101      	movs	r1, #1
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b5c:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <HAL_TIM_Base_MspInit+0xa8>)
 8000b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b60:	2201      	movs	r2, #1
 8000b62:	4013      	ands	r3, r2
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b68:	0021      	movs	r1, r4
 8000b6a:	187b      	adds	r3, r7, r1
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	2202      	movs	r2, #2
 8000b74:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	187b      	adds	r3, r7, r1
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	2202      	movs	r2, #2
 8000b86:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b88:	187a      	adds	r2, r7, r1
 8000b8a:	23a0      	movs	r3, #160	; 0xa0
 8000b8c:	05db      	lsls	r3, r3, #23
 8000b8e:	0011      	movs	r1, r2
 8000b90:	0018      	movs	r0, r3
 8000b92:	f000 f9bf 	bl	8000f14 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2100      	movs	r1, #0
 8000b9a:	200f      	movs	r0, #15
 8000b9c:	f000 f988 	bl	8000eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ba0:	200f      	movs	r0, #15
 8000ba2:	f000 f99a 	bl	8000eda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 8000ba6:	e00a      	b.n	8000bbe <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM21)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a07      	ldr	r2, [pc, #28]	; (8000bcc <HAL_TIM_Base_MspInit+0xac>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d105      	bne.n	8000bbe <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8000bb2:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <HAL_TIM_Base_MspInit+0xa8>)
 8000bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bb6:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <HAL_TIM_Base_MspInit+0xa8>)
 8000bb8:	2104      	movs	r1, #4
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b009      	add	sp, #36	; 0x24
 8000bc4:	bd90      	pop	{r4, r7, pc}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40010800 	.word	0x40010800

08000bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <NMI_Handler+0x4>

08000bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <HardFault_Handler+0x4>

08000bdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf4:	f000 f894 	bl	8000d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf8:	46c0      	nop			; (mov r8, r8)
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c04:	4b03      	ldr	r3, [pc, #12]	; (8000c14 <TIM2_IRQHandler+0x14>)
 8000c06:	0018      	movs	r0, r3
 8000c08:	f001 fa40 	bl	800208c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c0c:	46c0      	nop			; (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	20000028 	.word	0x20000028

08000c18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000c24:	480d      	ldr	r0, [pc, #52]	; (8000c5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c26:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c28:	f7ff fff6 	bl	8000c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c2c:	480c      	ldr	r0, [pc, #48]	; (8000c60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c2e:	490d      	ldr	r1, [pc, #52]	; (8000c64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c30:	4a0d      	ldr	r2, [pc, #52]	; (8000c68 <LoopForever+0xe>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c42:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c44:	4c0a      	ldr	r4, [pc, #40]	; (8000c70 <LoopForever+0x16>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c52:	f002 f803 	bl	8002c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c56:	f7ff fd93 	bl	8000780 <main>

08000c5a <LoopForever>:

LoopForever:
    b LoopForever
 8000c5a:	e7fe      	b.n	8000c5a <LoopForever>
  ldr   r0, =_estack
 8000c5c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c64:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c68:	08002d68 	.word	0x08002d68
  ldr r2, =_sbss
 8000c6c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c70:	200000b8 	.word	0x200000b8

08000c74 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c74:	e7fe      	b.n	8000c74 <ADC1_COMP_IRQHandler>
	...

08000c78 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c7e:	1dfb      	adds	r3, r7, #7
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000c84:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <HAL_Init+0x3c>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <HAL_Init+0x3c>)
 8000c8a:	2140      	movs	r1, #64	; 0x40
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c90:	2000      	movs	r0, #0
 8000c92:	f000 f811 	bl	8000cb8 <HAL_InitTick>
 8000c96:	1e03      	subs	r3, r0, #0
 8000c98:	d003      	beq.n	8000ca2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000c9a:	1dfb      	adds	r3, r7, #7
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	701a      	strb	r2, [r3, #0]
 8000ca0:	e001      	b.n	8000ca6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ca2:	f7ff ff29 	bl	8000af8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ca6:	1dfb      	adds	r3, r7, #7
 8000ca8:	781b      	ldrb	r3, [r3, #0]
}
 8000caa:	0018      	movs	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b002      	add	sp, #8
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	40022000 	.word	0x40022000

08000cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc0:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <HAL_InitTick+0x5c>)
 8000cc2:	681c      	ldr	r4, [r3, #0]
 8000cc4:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <HAL_InitTick+0x60>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	0019      	movs	r1, r3
 8000cca:	23fa      	movs	r3, #250	; 0xfa
 8000ccc:	0098      	lsls	r0, r3, #2
 8000cce:	f7ff fa1b 	bl	8000108 <__udivsi3>
 8000cd2:	0003      	movs	r3, r0
 8000cd4:	0019      	movs	r1, r3
 8000cd6:	0020      	movs	r0, r4
 8000cd8:	f7ff fa16 	bl	8000108 <__udivsi3>
 8000cdc:	0003      	movs	r3, r0
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f000 f90b 	bl	8000efa <HAL_SYSTICK_Config>
 8000ce4:	1e03      	subs	r3, r0, #0
 8000ce6:	d001      	beq.n	8000cec <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	e00f      	b.n	8000d0c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b03      	cmp	r3, #3
 8000cf0:	d80b      	bhi.n	8000d0a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	425b      	negs	r3, r3
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f000 f8d8 	bl	8000eb0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_InitTick+0x64>)
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d06:	2300      	movs	r3, #0
 8000d08:	e000      	b.n	8000d0c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
}
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b003      	add	sp, #12
 8000d12:	bd90      	pop	{r4, r7, pc}
 8000d14:	20000000 	.word	0x20000000
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	20000004 	.word	0x20000004

08000d20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <HAL_IncTick+0x1c>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	001a      	movs	r2, r3
 8000d2a:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <HAL_IncTick+0x20>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	18d2      	adds	r2, r2, r3
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <HAL_IncTick+0x20>)
 8000d32:	601a      	str	r2, [r3, #0]
}
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	200000b4 	.word	0x200000b4

08000d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  return uwTick;
 8000d48:	4b02      	ldr	r3, [pc, #8]	; (8000d54 <HAL_GetTick+0x10>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
}
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	200000b4 	.word	0x200000b4

08000d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	0002      	movs	r2, r0
 8000d60:	1dfb      	adds	r3, r7, #7
 8000d62:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d64:	1dfb      	adds	r3, r7, #7
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b7f      	cmp	r3, #127	; 0x7f
 8000d6a:	d809      	bhi.n	8000d80 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d6c:	1dfb      	adds	r3, r7, #7
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	001a      	movs	r2, r3
 8000d72:	231f      	movs	r3, #31
 8000d74:	401a      	ands	r2, r3
 8000d76:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <__NVIC_EnableIRQ+0x30>)
 8000d78:	2101      	movs	r1, #1
 8000d7a:	4091      	lsls	r1, r2
 8000d7c:	000a      	movs	r2, r1
 8000d7e:	601a      	str	r2, [r3, #0]
  }
}
 8000d80:	46c0      	nop			; (mov r8, r8)
 8000d82:	46bd      	mov	sp, r7
 8000d84:	b002      	add	sp, #8
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	e000e100 	.word	0xe000e100

08000d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d8c:	b590      	push	{r4, r7, lr}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	0002      	movs	r2, r0
 8000d94:	6039      	str	r1, [r7, #0]
 8000d96:	1dfb      	adds	r3, r7, #7
 8000d98:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d9a:	1dfb      	adds	r3, r7, #7
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b7f      	cmp	r3, #127	; 0x7f
 8000da0:	d828      	bhi.n	8000df4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000da2:	4a2f      	ldr	r2, [pc, #188]	; (8000e60 <__NVIC_SetPriority+0xd4>)
 8000da4:	1dfb      	adds	r3, r7, #7
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	b25b      	sxtb	r3, r3
 8000daa:	089b      	lsrs	r3, r3, #2
 8000dac:	33c0      	adds	r3, #192	; 0xc0
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	589b      	ldr	r3, [r3, r2]
 8000db2:	1dfa      	adds	r2, r7, #7
 8000db4:	7812      	ldrb	r2, [r2, #0]
 8000db6:	0011      	movs	r1, r2
 8000db8:	2203      	movs	r2, #3
 8000dba:	400a      	ands	r2, r1
 8000dbc:	00d2      	lsls	r2, r2, #3
 8000dbe:	21ff      	movs	r1, #255	; 0xff
 8000dc0:	4091      	lsls	r1, r2
 8000dc2:	000a      	movs	r2, r1
 8000dc4:	43d2      	mvns	r2, r2
 8000dc6:	401a      	ands	r2, r3
 8000dc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	019b      	lsls	r3, r3, #6
 8000dce:	22ff      	movs	r2, #255	; 0xff
 8000dd0:	401a      	ands	r2, r3
 8000dd2:	1dfb      	adds	r3, r7, #7
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	2303      	movs	r3, #3
 8000dda:	4003      	ands	r3, r0
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000de0:	481f      	ldr	r0, [pc, #124]	; (8000e60 <__NVIC_SetPriority+0xd4>)
 8000de2:	1dfb      	adds	r3, r7, #7
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	b25b      	sxtb	r3, r3
 8000de8:	089b      	lsrs	r3, r3, #2
 8000dea:	430a      	orrs	r2, r1
 8000dec:	33c0      	adds	r3, #192	; 0xc0
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000df2:	e031      	b.n	8000e58 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000df4:	4a1b      	ldr	r2, [pc, #108]	; (8000e64 <__NVIC_SetPriority+0xd8>)
 8000df6:	1dfb      	adds	r3, r7, #7
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	0019      	movs	r1, r3
 8000dfc:	230f      	movs	r3, #15
 8000dfe:	400b      	ands	r3, r1
 8000e00:	3b08      	subs	r3, #8
 8000e02:	089b      	lsrs	r3, r3, #2
 8000e04:	3306      	adds	r3, #6
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	18d3      	adds	r3, r2, r3
 8000e0a:	3304      	adds	r3, #4
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	1dfa      	adds	r2, r7, #7
 8000e10:	7812      	ldrb	r2, [r2, #0]
 8000e12:	0011      	movs	r1, r2
 8000e14:	2203      	movs	r2, #3
 8000e16:	400a      	ands	r2, r1
 8000e18:	00d2      	lsls	r2, r2, #3
 8000e1a:	21ff      	movs	r1, #255	; 0xff
 8000e1c:	4091      	lsls	r1, r2
 8000e1e:	000a      	movs	r2, r1
 8000e20:	43d2      	mvns	r2, r2
 8000e22:	401a      	ands	r2, r3
 8000e24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	019b      	lsls	r3, r3, #6
 8000e2a:	22ff      	movs	r2, #255	; 0xff
 8000e2c:	401a      	ands	r2, r3
 8000e2e:	1dfb      	adds	r3, r7, #7
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	0018      	movs	r0, r3
 8000e34:	2303      	movs	r3, #3
 8000e36:	4003      	ands	r3, r0
 8000e38:	00db      	lsls	r3, r3, #3
 8000e3a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e3c:	4809      	ldr	r0, [pc, #36]	; (8000e64 <__NVIC_SetPriority+0xd8>)
 8000e3e:	1dfb      	adds	r3, r7, #7
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	001c      	movs	r4, r3
 8000e44:	230f      	movs	r3, #15
 8000e46:	4023      	ands	r3, r4
 8000e48:	3b08      	subs	r3, #8
 8000e4a:	089b      	lsrs	r3, r3, #2
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	3306      	adds	r3, #6
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	18c3      	adds	r3, r0, r3
 8000e54:	3304      	adds	r3, #4
 8000e56:	601a      	str	r2, [r3, #0]
}
 8000e58:	46c0      	nop			; (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b003      	add	sp, #12
 8000e5e:	bd90      	pop	{r4, r7, pc}
 8000e60:	e000e100 	.word	0xe000e100
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	1e5a      	subs	r2, r3, #1
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	045b      	lsls	r3, r3, #17
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d301      	bcc.n	8000e80 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e010      	b.n	8000ea2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e80:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <SysTick_Config+0x44>)
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	3a01      	subs	r2, #1
 8000e86:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e88:	2301      	movs	r3, #1
 8000e8a:	425b      	negs	r3, r3
 8000e8c:	2103      	movs	r1, #3
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f7ff ff7c 	bl	8000d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e94:	4b05      	ldr	r3, [pc, #20]	; (8000eac <SysTick_Config+0x44>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9a:	4b04      	ldr	r3, [pc, #16]	; (8000eac <SysTick_Config+0x44>)
 8000e9c:	2207      	movs	r2, #7
 8000e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	b002      	add	sp, #8
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	e000e010 	.word	0xe000e010

08000eb0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60b9      	str	r1, [r7, #8]
 8000eb8:	607a      	str	r2, [r7, #4]
 8000eba:	210f      	movs	r1, #15
 8000ebc:	187b      	adds	r3, r7, r1
 8000ebe:	1c02      	adds	r2, r0, #0
 8000ec0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	b25b      	sxtb	r3, r3
 8000eca:	0011      	movs	r1, r2
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f7ff ff5d 	bl	8000d8c <__NVIC_SetPriority>
}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	b004      	add	sp, #16
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	0002      	movs	r2, r0
 8000ee2:	1dfb      	adds	r3, r7, #7
 8000ee4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee6:	1dfb      	adds	r3, r7, #7
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	b25b      	sxtb	r3, r3
 8000eec:	0018      	movs	r0, r3
 8000eee:	f7ff ff33 	bl	8000d58 <__NVIC_EnableIRQ>
}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	b002      	add	sp, #8
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	0018      	movs	r0, r3
 8000f06:	f7ff ffaf 	bl	8000e68 <SysTick_Config>
 8000f0a:	0003      	movs	r3, r0
}
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	b002      	add	sp, #8
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f2a:	e14f      	b.n	80011cc <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2101      	movs	r1, #1
 8000f32:	697a      	ldr	r2, [r7, #20]
 8000f34:	4091      	lsls	r1, r2
 8000f36:	000a      	movs	r2, r1
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d100      	bne.n	8000f44 <HAL_GPIO_Init+0x30>
 8000f42:	e140      	b.n	80011c6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2203      	movs	r2, #3
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d005      	beq.n	8000f5c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2203      	movs	r2, #3
 8000f56:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d130      	bne.n	8000fbe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	2203      	movs	r2, #3
 8000f68:	409a      	lsls	r2, r3
 8000f6a:	0013      	movs	r3, r2
 8000f6c:	43da      	mvns	r2, r3
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	68da      	ldr	r2, [r3, #12]
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	409a      	lsls	r2, r3
 8000f7e:	0013      	movs	r3, r2
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f92:	2201      	movs	r2, #1
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	409a      	lsls	r2, r3
 8000f98:	0013      	movs	r3, r2
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	091b      	lsrs	r3, r3, #4
 8000fa8:	2201      	movs	r2, #1
 8000faa:	401a      	ands	r2, r3
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	409a      	lsls	r2, r3
 8000fb0:	0013      	movs	r3, r2
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	2b03      	cmp	r3, #3
 8000fc8:	d017      	beq.n	8000ffa <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	0013      	movs	r3, r2
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	689a      	ldr	r2, [r3, #8]
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	409a      	lsls	r2, r3
 8000fec:	0013      	movs	r3, r2
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	2203      	movs	r2, #3
 8001000:	4013      	ands	r3, r2
 8001002:	2b02      	cmp	r3, #2
 8001004:	d123      	bne.n	800104e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	08da      	lsrs	r2, r3, #3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3208      	adds	r2, #8
 800100e:	0092      	lsls	r2, r2, #2
 8001010:	58d3      	ldr	r3, [r2, r3]
 8001012:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	2207      	movs	r2, #7
 8001018:	4013      	ands	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	220f      	movs	r2, #15
 800101e:	409a      	lsls	r2, r3
 8001020:	0013      	movs	r3, r2
 8001022:	43da      	mvns	r2, r3
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	691a      	ldr	r2, [r3, #16]
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	2107      	movs	r1, #7
 8001032:	400b      	ands	r3, r1
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	409a      	lsls	r2, r3
 8001038:	0013      	movs	r3, r2
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	08da      	lsrs	r2, r3, #3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3208      	adds	r2, #8
 8001048:	0092      	lsls	r2, r2, #2
 800104a:	6939      	ldr	r1, [r7, #16]
 800104c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	2203      	movs	r2, #3
 800105a:	409a      	lsls	r2, r3
 800105c:	0013      	movs	r3, r2
 800105e:	43da      	mvns	r2, r3
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2203      	movs	r2, #3
 800106c:	401a      	ands	r2, r3
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	409a      	lsls	r2, r3
 8001074:	0013      	movs	r3, r2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	23c0      	movs	r3, #192	; 0xc0
 8001088:	029b      	lsls	r3, r3, #10
 800108a:	4013      	ands	r3, r2
 800108c:	d100      	bne.n	8001090 <HAL_GPIO_Init+0x17c>
 800108e:	e09a      	b.n	80011c6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001090:	4b54      	ldr	r3, [pc, #336]	; (80011e4 <HAL_GPIO_Init+0x2d0>)
 8001092:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001094:	4b53      	ldr	r3, [pc, #332]	; (80011e4 <HAL_GPIO_Init+0x2d0>)
 8001096:	2101      	movs	r1, #1
 8001098:	430a      	orrs	r2, r1
 800109a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800109c:	4a52      	ldr	r2, [pc, #328]	; (80011e8 <HAL_GPIO_Init+0x2d4>)
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	089b      	lsrs	r3, r3, #2
 80010a2:	3302      	adds	r3, #2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	589b      	ldr	r3, [r3, r2]
 80010a8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	2203      	movs	r2, #3
 80010ae:	4013      	ands	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	220f      	movs	r2, #15
 80010b4:	409a      	lsls	r2, r3
 80010b6:	0013      	movs	r3, r2
 80010b8:	43da      	mvns	r2, r3
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	23a0      	movs	r3, #160	; 0xa0
 80010c4:	05db      	lsls	r3, r3, #23
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d019      	beq.n	80010fe <HAL_GPIO_Init+0x1ea>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a47      	ldr	r2, [pc, #284]	; (80011ec <HAL_GPIO_Init+0x2d8>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d013      	beq.n	80010fa <HAL_GPIO_Init+0x1e6>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a46      	ldr	r2, [pc, #280]	; (80011f0 <HAL_GPIO_Init+0x2dc>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d00d      	beq.n	80010f6 <HAL_GPIO_Init+0x1e2>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a45      	ldr	r2, [pc, #276]	; (80011f4 <HAL_GPIO_Init+0x2e0>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d007      	beq.n	80010f2 <HAL_GPIO_Init+0x1de>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a44      	ldr	r2, [pc, #272]	; (80011f8 <HAL_GPIO_Init+0x2e4>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d101      	bne.n	80010ee <HAL_GPIO_Init+0x1da>
 80010ea:	2305      	movs	r3, #5
 80010ec:	e008      	b.n	8001100 <HAL_GPIO_Init+0x1ec>
 80010ee:	2306      	movs	r3, #6
 80010f0:	e006      	b.n	8001100 <HAL_GPIO_Init+0x1ec>
 80010f2:	2303      	movs	r3, #3
 80010f4:	e004      	b.n	8001100 <HAL_GPIO_Init+0x1ec>
 80010f6:	2302      	movs	r3, #2
 80010f8:	e002      	b.n	8001100 <HAL_GPIO_Init+0x1ec>
 80010fa:	2301      	movs	r3, #1
 80010fc:	e000      	b.n	8001100 <HAL_GPIO_Init+0x1ec>
 80010fe:	2300      	movs	r3, #0
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	2103      	movs	r1, #3
 8001104:	400a      	ands	r2, r1
 8001106:	0092      	lsls	r2, r2, #2
 8001108:	4093      	lsls	r3, r2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001110:	4935      	ldr	r1, [pc, #212]	; (80011e8 <HAL_GPIO_Init+0x2d4>)
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	089b      	lsrs	r3, r3, #2
 8001116:	3302      	adds	r3, #2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800111e:	4b37      	ldr	r3, [pc, #220]	; (80011fc <HAL_GPIO_Init+0x2e8>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	43da      	mvns	r2, r3
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	2380      	movs	r3, #128	; 0x80
 8001134:	035b      	lsls	r3, r3, #13
 8001136:	4013      	ands	r3, r2
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4313      	orrs	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001142:	4b2e      	ldr	r3, [pc, #184]	; (80011fc <HAL_GPIO_Init+0x2e8>)
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001148:	4b2c      	ldr	r3, [pc, #176]	; (80011fc <HAL_GPIO_Init+0x2e8>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	43da      	mvns	r2, r3
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685a      	ldr	r2, [r3, #4]
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	039b      	lsls	r3, r3, #14
 8001160:	4013      	ands	r3, r2
 8001162:	d003      	beq.n	800116c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800116c:	4b23      	ldr	r3, [pc, #140]	; (80011fc <HAL_GPIO_Init+0x2e8>)
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001172:	4b22      	ldr	r3, [pc, #136]	; (80011fc <HAL_GPIO_Init+0x2e8>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	43da      	mvns	r2, r3
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4013      	ands	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685a      	ldr	r2, [r3, #4]
 8001186:	2380      	movs	r3, #128	; 0x80
 8001188:	029b      	lsls	r3, r3, #10
 800118a:	4013      	ands	r3, r2
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4313      	orrs	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001196:	4b19      	ldr	r3, [pc, #100]	; (80011fc <HAL_GPIO_Init+0x2e8>)
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800119c:	4b17      	ldr	r3, [pc, #92]	; (80011fc <HAL_GPIO_Init+0x2e8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	43da      	mvns	r2, r3
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	4013      	ands	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685a      	ldr	r2, [r3, #4]
 80011b0:	2380      	movs	r3, #128	; 0x80
 80011b2:	025b      	lsls	r3, r3, #9
 80011b4:	4013      	ands	r3, r2
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011c0:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <HAL_GPIO_Init+0x2e8>)
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	3301      	adds	r3, #1
 80011ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	40da      	lsrs	r2, r3
 80011d4:	1e13      	subs	r3, r2, #0
 80011d6:	d000      	beq.n	80011da <HAL_GPIO_Init+0x2c6>
 80011d8:	e6a8      	b.n	8000f2c <HAL_GPIO_Init+0x18>
  }
}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	46c0      	nop			; (mov r8, r8)
 80011de:	46bd      	mov	sp, r7
 80011e0:	b006      	add	sp, #24
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40010000 	.word	0x40010000
 80011ec:	50000400 	.word	0x50000400
 80011f0:	50000800 	.word	0x50000800
 80011f4:	50000c00 	.word	0x50000c00
 80011f8:	50001c00 	.word	0x50001c00
 80011fc:	40010400 	.word	0x40010400

08001200 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001200:	b5b0      	push	{r4, r5, r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d102      	bne.n	8001214 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	f000 fbaf 	bl	8001972 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001214:	4bcf      	ldr	r3, [pc, #828]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	220c      	movs	r2, #12
 800121a:	4013      	ands	r3, r2
 800121c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800121e:	4bcd      	ldr	r3, [pc, #820]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 8001220:	68da      	ldr	r2, [r3, #12]
 8001222:	2380      	movs	r3, #128	; 0x80
 8001224:	025b      	lsls	r3, r3, #9
 8001226:	4013      	ands	r3, r2
 8001228:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2201      	movs	r2, #1
 8001230:	4013      	ands	r3, r2
 8001232:	d100      	bne.n	8001236 <HAL_RCC_OscConfig+0x36>
 8001234:	e07e      	b.n	8001334 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001236:	6a3b      	ldr	r3, [r7, #32]
 8001238:	2b08      	cmp	r3, #8
 800123a:	d007      	beq.n	800124c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800123c:	6a3b      	ldr	r3, [r7, #32]
 800123e:	2b0c      	cmp	r3, #12
 8001240:	d112      	bne.n	8001268 <HAL_RCC_OscConfig+0x68>
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	2380      	movs	r3, #128	; 0x80
 8001246:	025b      	lsls	r3, r3, #9
 8001248:	429a      	cmp	r2, r3
 800124a:	d10d      	bne.n	8001268 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124c:	4bc1      	ldr	r3, [pc, #772]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	029b      	lsls	r3, r3, #10
 8001254:	4013      	ands	r3, r2
 8001256:	d100      	bne.n	800125a <HAL_RCC_OscConfig+0x5a>
 8001258:	e06b      	b.n	8001332 <HAL_RCC_OscConfig+0x132>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d167      	bne.n	8001332 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	f000 fb85 	bl	8001972 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685a      	ldr	r2, [r3, #4]
 800126c:	2380      	movs	r3, #128	; 0x80
 800126e:	025b      	lsls	r3, r3, #9
 8001270:	429a      	cmp	r2, r3
 8001272:	d107      	bne.n	8001284 <HAL_RCC_OscConfig+0x84>
 8001274:	4bb7      	ldr	r3, [pc, #732]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4bb6      	ldr	r3, [pc, #728]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 800127a:	2180      	movs	r1, #128	; 0x80
 800127c:	0249      	lsls	r1, r1, #9
 800127e:	430a      	orrs	r2, r1
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	e027      	b.n	80012d4 <HAL_RCC_OscConfig+0xd4>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	23a0      	movs	r3, #160	; 0xa0
 800128a:	02db      	lsls	r3, r3, #11
 800128c:	429a      	cmp	r2, r3
 800128e:	d10e      	bne.n	80012ae <HAL_RCC_OscConfig+0xae>
 8001290:	4bb0      	ldr	r3, [pc, #704]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4baf      	ldr	r3, [pc, #700]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 8001296:	2180      	movs	r1, #128	; 0x80
 8001298:	02c9      	lsls	r1, r1, #11
 800129a:	430a      	orrs	r2, r1
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	4bad      	ldr	r3, [pc, #692]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	4bac      	ldr	r3, [pc, #688]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 80012a4:	2180      	movs	r1, #128	; 0x80
 80012a6:	0249      	lsls	r1, r1, #9
 80012a8:	430a      	orrs	r2, r1
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	e012      	b.n	80012d4 <HAL_RCC_OscConfig+0xd4>
 80012ae:	4ba9      	ldr	r3, [pc, #676]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	4ba8      	ldr	r3, [pc, #672]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 80012b4:	49a8      	ldr	r1, [pc, #672]	; (8001558 <HAL_RCC_OscConfig+0x358>)
 80012b6:	400a      	ands	r2, r1
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	4ba6      	ldr	r3, [pc, #664]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	025b      	lsls	r3, r3, #9
 80012c2:	4013      	ands	r3, r2
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4ba2      	ldr	r3, [pc, #648]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4ba1      	ldr	r3, [pc, #644]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 80012ce:	49a3      	ldr	r1, [pc, #652]	; (800155c <HAL_RCC_OscConfig+0x35c>)
 80012d0:	400a      	ands	r2, r1
 80012d2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d015      	beq.n	8001308 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012dc:	f7ff fd32 	bl	8000d44 <HAL_GetTick>
 80012e0:	0003      	movs	r3, r0
 80012e2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012e4:	e009      	b.n	80012fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e6:	f7ff fd2d 	bl	8000d44 <HAL_GetTick>
 80012ea:	0002      	movs	r2, r0
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b64      	cmp	r3, #100	; 0x64
 80012f2:	d902      	bls.n	80012fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	f000 fb3c 	bl	8001972 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012fa:	4b96      	ldr	r3, [pc, #600]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	2380      	movs	r3, #128	; 0x80
 8001300:	029b      	lsls	r3, r3, #10
 8001302:	4013      	ands	r3, r2
 8001304:	d0ef      	beq.n	80012e6 <HAL_RCC_OscConfig+0xe6>
 8001306:	e015      	b.n	8001334 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fd1c 	bl	8000d44 <HAL_GetTick>
 800130c:	0003      	movs	r3, r0
 800130e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001312:	f7ff fd17 	bl	8000d44 <HAL_GetTick>
 8001316:	0002      	movs	r2, r0
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b64      	cmp	r3, #100	; 0x64
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e326      	b.n	8001972 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001324:	4b8b      	ldr	r3, [pc, #556]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	2380      	movs	r3, #128	; 0x80
 800132a:	029b      	lsls	r3, r3, #10
 800132c:	4013      	ands	r3, r2
 800132e:	d1f0      	bne.n	8001312 <HAL_RCC_OscConfig+0x112>
 8001330:	e000      	b.n	8001334 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001332:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2202      	movs	r2, #2
 800133a:	4013      	ands	r3, r2
 800133c:	d100      	bne.n	8001340 <HAL_RCC_OscConfig+0x140>
 800133e:	e08b      	b.n	8001458 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001346:	6a3b      	ldr	r3, [r7, #32]
 8001348:	2b04      	cmp	r3, #4
 800134a:	d005      	beq.n	8001358 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800134c:	6a3b      	ldr	r3, [r7, #32]
 800134e:	2b0c      	cmp	r3, #12
 8001350:	d13e      	bne.n	80013d0 <HAL_RCC_OscConfig+0x1d0>
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d13b      	bne.n	80013d0 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001358:	4b7e      	ldr	r3, [pc, #504]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2204      	movs	r2, #4
 800135e:	4013      	ands	r3, r2
 8001360:	d004      	beq.n	800136c <HAL_RCC_OscConfig+0x16c>
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d101      	bne.n	800136c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e302      	b.n	8001972 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136c:	4b79      	ldr	r3, [pc, #484]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	4a7b      	ldr	r2, [pc, #492]	; (8001560 <HAL_RCC_OscConfig+0x360>)
 8001372:	4013      	ands	r3, r2
 8001374:	0019      	movs	r1, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	021a      	lsls	r2, r3, #8
 800137c:	4b75      	ldr	r3, [pc, #468]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 800137e:	430a      	orrs	r2, r1
 8001380:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001382:	4b74      	ldr	r3, [pc, #464]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2209      	movs	r2, #9
 8001388:	4393      	bics	r3, r2
 800138a:	0019      	movs	r1, r3
 800138c:	4b71      	ldr	r3, [pc, #452]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	430a      	orrs	r2, r1
 8001392:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001394:	f000 fc40 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 8001398:	0001      	movs	r1, r0
 800139a:	4b6e      	ldr	r3, [pc, #440]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	091b      	lsrs	r3, r3, #4
 80013a0:	220f      	movs	r2, #15
 80013a2:	4013      	ands	r3, r2
 80013a4:	4a6f      	ldr	r2, [pc, #444]	; (8001564 <HAL_RCC_OscConfig+0x364>)
 80013a6:	5cd3      	ldrb	r3, [r2, r3]
 80013a8:	000a      	movs	r2, r1
 80013aa:	40da      	lsrs	r2, r3
 80013ac:	4b6e      	ldr	r3, [pc, #440]	; (8001568 <HAL_RCC_OscConfig+0x368>)
 80013ae:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80013b0:	4b6e      	ldr	r3, [pc, #440]	; (800156c <HAL_RCC_OscConfig+0x36c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2513      	movs	r5, #19
 80013b6:	197c      	adds	r4, r7, r5
 80013b8:	0018      	movs	r0, r3
 80013ba:	f7ff fc7d 	bl	8000cb8 <HAL_InitTick>
 80013be:	0003      	movs	r3, r0
 80013c0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80013c2:	197b      	adds	r3, r7, r5
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d046      	beq.n	8001458 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80013ca:	197b      	adds	r3, r7, r5
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	e2d0      	b.n	8001972 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d027      	beq.n	8001426 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80013d6:	4b5f      	ldr	r3, [pc, #380]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2209      	movs	r2, #9
 80013dc:	4393      	bics	r3, r2
 80013de:	0019      	movs	r1, r3
 80013e0:	4b5c      	ldr	r3, [pc, #368]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e8:	f7ff fcac 	bl	8000d44 <HAL_GetTick>
 80013ec:	0003      	movs	r3, r0
 80013ee:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013f0:	e008      	b.n	8001404 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f2:	f7ff fca7 	bl	8000d44 <HAL_GetTick>
 80013f6:	0002      	movs	r2, r0
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e2b6      	b.n	8001972 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001404:	4b53      	ldr	r3, [pc, #332]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2204      	movs	r2, #4
 800140a:	4013      	ands	r3, r2
 800140c:	d0f1      	beq.n	80013f2 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140e:	4b51      	ldr	r3, [pc, #324]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	4a53      	ldr	r2, [pc, #332]	; (8001560 <HAL_RCC_OscConfig+0x360>)
 8001414:	4013      	ands	r3, r2
 8001416:	0019      	movs	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	021a      	lsls	r2, r3, #8
 800141e:	4b4d      	ldr	r3, [pc, #308]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 8001420:	430a      	orrs	r2, r1
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	e018      	b.n	8001458 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001426:	4b4b      	ldr	r3, [pc, #300]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	4b4a      	ldr	r3, [pc, #296]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 800142c:	2101      	movs	r1, #1
 800142e:	438a      	bics	r2, r1
 8001430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001432:	f7ff fc87 	bl	8000d44 <HAL_GetTick>
 8001436:	0003      	movs	r3, r0
 8001438:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800143c:	f7ff fc82 	bl	8000d44 <HAL_GetTick>
 8001440:	0002      	movs	r2, r0
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e291      	b.n	8001972 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800144e:	4b41      	ldr	r3, [pc, #260]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2204      	movs	r2, #4
 8001454:	4013      	ands	r3, r2
 8001456:	d1f1      	bne.n	800143c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2210      	movs	r2, #16
 800145e:	4013      	ands	r3, r2
 8001460:	d100      	bne.n	8001464 <HAL_RCC_OscConfig+0x264>
 8001462:	e0a1      	b.n	80015a8 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001464:	6a3b      	ldr	r3, [r7, #32]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d140      	bne.n	80014ec <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800146a:	4b3a      	ldr	r3, [pc, #232]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	2380      	movs	r3, #128	; 0x80
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4013      	ands	r3, r2
 8001474:	d005      	beq.n	8001482 <HAL_RCC_OscConfig+0x282>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e277      	b.n	8001972 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001482:	4b34      	ldr	r3, [pc, #208]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	4a3a      	ldr	r2, [pc, #232]	; (8001570 <HAL_RCC_OscConfig+0x370>)
 8001488:	4013      	ands	r3, r2
 800148a:	0019      	movs	r1, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001490:	4b30      	ldr	r3, [pc, #192]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 8001492:	430a      	orrs	r2, r1
 8001494:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001496:	4b2f      	ldr	r3, [pc, #188]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	021b      	lsls	r3, r3, #8
 800149c:	0a19      	lsrs	r1, r3, #8
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a1b      	ldr	r3, [r3, #32]
 80014a2:	061a      	lsls	r2, r3, #24
 80014a4:	4b2b      	ldr	r3, [pc, #172]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 80014a6:	430a      	orrs	r2, r1
 80014a8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ae:	0b5b      	lsrs	r3, r3, #13
 80014b0:	3301      	adds	r3, #1
 80014b2:	2280      	movs	r2, #128	; 0x80
 80014b4:	0212      	lsls	r2, r2, #8
 80014b6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80014b8:	4b26      	ldr	r3, [pc, #152]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	091b      	lsrs	r3, r3, #4
 80014be:	210f      	movs	r1, #15
 80014c0:	400b      	ands	r3, r1
 80014c2:	4928      	ldr	r1, [pc, #160]	; (8001564 <HAL_RCC_OscConfig+0x364>)
 80014c4:	5ccb      	ldrb	r3, [r1, r3]
 80014c6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014c8:	4b27      	ldr	r3, [pc, #156]	; (8001568 <HAL_RCC_OscConfig+0x368>)
 80014ca:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80014cc:	4b27      	ldr	r3, [pc, #156]	; (800156c <HAL_RCC_OscConfig+0x36c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2513      	movs	r5, #19
 80014d2:	197c      	adds	r4, r7, r5
 80014d4:	0018      	movs	r0, r3
 80014d6:	f7ff fbef 	bl	8000cb8 <HAL_InitTick>
 80014da:	0003      	movs	r3, r0
 80014dc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80014de:	197b      	adds	r3, r7, r5
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d060      	beq.n	80015a8 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80014e6:	197b      	adds	r3, r7, r5
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	e242      	b.n	8001972 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	69db      	ldr	r3, [r3, #28]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d03f      	beq.n	8001574 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014f4:	4b17      	ldr	r3, [pc, #92]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b16      	ldr	r3, [pc, #88]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 80014fa:	2180      	movs	r1, #128	; 0x80
 80014fc:	0049      	lsls	r1, r1, #1
 80014fe:	430a      	orrs	r2, r1
 8001500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001502:	f7ff fc1f 	bl	8000d44 <HAL_GetTick>
 8001506:	0003      	movs	r3, r0
 8001508:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800150c:	f7ff fc1a 	bl	8000d44 <HAL_GetTick>
 8001510:	0002      	movs	r2, r0
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e229      	b.n	8001972 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800151e:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	2380      	movs	r3, #128	; 0x80
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4013      	ands	r3, r2
 8001528:	d0f0      	beq.n	800150c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	4a10      	ldr	r2, [pc, #64]	; (8001570 <HAL_RCC_OscConfig+0x370>)
 8001530:	4013      	ands	r3, r2
 8001532:	0019      	movs	r1, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 800153a:	430a      	orrs	r2, r1
 800153c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800153e:	4b05      	ldr	r3, [pc, #20]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	0a19      	lsrs	r1, r3, #8
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	061a      	lsls	r2, r3, #24
 800154c:	4b01      	ldr	r3, [pc, #4]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 800154e:	430a      	orrs	r2, r1
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	e029      	b.n	80015a8 <HAL_RCC_OscConfig+0x3a8>
 8001554:	40021000 	.word	0x40021000
 8001558:	fffeffff 	.word	0xfffeffff
 800155c:	fffbffff 	.word	0xfffbffff
 8001560:	ffffe0ff 	.word	0xffffe0ff
 8001564:	08002d3c 	.word	0x08002d3c
 8001568:	20000000 	.word	0x20000000
 800156c:	20000004 	.word	0x20000004
 8001570:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001574:	4bbd      	ldr	r3, [pc, #756]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4bbc      	ldr	r3, [pc, #752]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 800157a:	49bd      	ldr	r1, [pc, #756]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 800157c:	400a      	ands	r2, r1
 800157e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001580:	f7ff fbe0 	bl	8000d44 <HAL_GetTick>
 8001584:	0003      	movs	r3, r0
 8001586:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800158a:	f7ff fbdb 	bl	8000d44 <HAL_GetTick>
 800158e:	0002      	movs	r2, r0
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e1ea      	b.n	8001972 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800159c:	4bb3      	ldr	r3, [pc, #716]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4013      	ands	r3, r2
 80015a6:	d1f0      	bne.n	800158a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2208      	movs	r2, #8
 80015ae:	4013      	ands	r3, r2
 80015b0:	d036      	beq.n	8001620 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d019      	beq.n	80015ee <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ba:	4bac      	ldr	r3, [pc, #688]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 80015bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015be:	4bab      	ldr	r3, [pc, #684]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 80015c0:	2101      	movs	r1, #1
 80015c2:	430a      	orrs	r2, r1
 80015c4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c6:	f7ff fbbd 	bl	8000d44 <HAL_GetTick>
 80015ca:	0003      	movs	r3, r0
 80015cc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015d0:	f7ff fbb8 	bl	8000d44 <HAL_GetTick>
 80015d4:	0002      	movs	r2, r0
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e1c7      	b.n	8001972 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015e2:	4ba2      	ldr	r3, [pc, #648]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 80015e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015e6:	2202      	movs	r2, #2
 80015e8:	4013      	ands	r3, r2
 80015ea:	d0f1      	beq.n	80015d0 <HAL_RCC_OscConfig+0x3d0>
 80015ec:	e018      	b.n	8001620 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ee:	4b9f      	ldr	r3, [pc, #636]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 80015f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015f2:	4b9e      	ldr	r3, [pc, #632]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 80015f4:	2101      	movs	r1, #1
 80015f6:	438a      	bics	r2, r1
 80015f8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fa:	f7ff fba3 	bl	8000d44 <HAL_GetTick>
 80015fe:	0003      	movs	r3, r0
 8001600:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001604:	f7ff fb9e 	bl	8000d44 <HAL_GetTick>
 8001608:	0002      	movs	r2, r0
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e1ad      	b.n	8001972 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001616:	4b95      	ldr	r3, [pc, #596]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 8001618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800161a:	2202      	movs	r2, #2
 800161c:	4013      	ands	r3, r2
 800161e:	d1f1      	bne.n	8001604 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2204      	movs	r2, #4
 8001626:	4013      	ands	r3, r2
 8001628:	d100      	bne.n	800162c <HAL_RCC_OscConfig+0x42c>
 800162a:	e0ae      	b.n	800178a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800162c:	2027      	movs	r0, #39	; 0x27
 800162e:	183b      	adds	r3, r7, r0
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001634:	4b8d      	ldr	r3, [pc, #564]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 8001636:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001638:	2380      	movs	r3, #128	; 0x80
 800163a:	055b      	lsls	r3, r3, #21
 800163c:	4013      	ands	r3, r2
 800163e:	d109      	bne.n	8001654 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001640:	4b8a      	ldr	r3, [pc, #552]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 8001642:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001644:	4b89      	ldr	r3, [pc, #548]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 8001646:	2180      	movs	r1, #128	; 0x80
 8001648:	0549      	lsls	r1, r1, #21
 800164a:	430a      	orrs	r2, r1
 800164c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800164e:	183b      	adds	r3, r7, r0
 8001650:	2201      	movs	r2, #1
 8001652:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001654:	4b87      	ldr	r3, [pc, #540]	; (8001874 <HAL_RCC_OscConfig+0x674>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	4013      	ands	r3, r2
 800165e:	d11a      	bne.n	8001696 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001660:	4b84      	ldr	r3, [pc, #528]	; (8001874 <HAL_RCC_OscConfig+0x674>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b83      	ldr	r3, [pc, #524]	; (8001874 <HAL_RCC_OscConfig+0x674>)
 8001666:	2180      	movs	r1, #128	; 0x80
 8001668:	0049      	lsls	r1, r1, #1
 800166a:	430a      	orrs	r2, r1
 800166c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800166e:	f7ff fb69 	bl	8000d44 <HAL_GetTick>
 8001672:	0003      	movs	r3, r0
 8001674:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001678:	f7ff fb64 	bl	8000d44 <HAL_GetTick>
 800167c:	0002      	movs	r2, r0
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b64      	cmp	r3, #100	; 0x64
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e173      	b.n	8001972 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168a:	4b7a      	ldr	r3, [pc, #488]	; (8001874 <HAL_RCC_OscConfig+0x674>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	4013      	ands	r3, r2
 8001694:	d0f0      	beq.n	8001678 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	429a      	cmp	r2, r3
 80016a0:	d107      	bne.n	80016b2 <HAL_RCC_OscConfig+0x4b2>
 80016a2:	4b72      	ldr	r3, [pc, #456]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 80016a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016a6:	4b71      	ldr	r3, [pc, #452]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 80016a8:	2180      	movs	r1, #128	; 0x80
 80016aa:	0049      	lsls	r1, r1, #1
 80016ac:	430a      	orrs	r2, r1
 80016ae:	651a      	str	r2, [r3, #80]	; 0x50
 80016b0:	e031      	b.n	8001716 <HAL_RCC_OscConfig+0x516>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10c      	bne.n	80016d4 <HAL_RCC_OscConfig+0x4d4>
 80016ba:	4b6c      	ldr	r3, [pc, #432]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 80016bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016be:	4b6b      	ldr	r3, [pc, #428]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 80016c0:	496b      	ldr	r1, [pc, #428]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 80016c2:	400a      	ands	r2, r1
 80016c4:	651a      	str	r2, [r3, #80]	; 0x50
 80016c6:	4b69      	ldr	r3, [pc, #420]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 80016c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016ca:	4b68      	ldr	r3, [pc, #416]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 80016cc:	496a      	ldr	r1, [pc, #424]	; (8001878 <HAL_RCC_OscConfig+0x678>)
 80016ce:	400a      	ands	r2, r1
 80016d0:	651a      	str	r2, [r3, #80]	; 0x50
 80016d2:	e020      	b.n	8001716 <HAL_RCC_OscConfig+0x516>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	23a0      	movs	r3, #160	; 0xa0
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	429a      	cmp	r2, r3
 80016de:	d10e      	bne.n	80016fe <HAL_RCC_OscConfig+0x4fe>
 80016e0:	4b62      	ldr	r3, [pc, #392]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 80016e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016e4:	4b61      	ldr	r3, [pc, #388]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 80016e6:	2180      	movs	r1, #128	; 0x80
 80016e8:	00c9      	lsls	r1, r1, #3
 80016ea:	430a      	orrs	r2, r1
 80016ec:	651a      	str	r2, [r3, #80]	; 0x50
 80016ee:	4b5f      	ldr	r3, [pc, #380]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 80016f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016f2:	4b5e      	ldr	r3, [pc, #376]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 80016f4:	2180      	movs	r1, #128	; 0x80
 80016f6:	0049      	lsls	r1, r1, #1
 80016f8:	430a      	orrs	r2, r1
 80016fa:	651a      	str	r2, [r3, #80]	; 0x50
 80016fc:	e00b      	b.n	8001716 <HAL_RCC_OscConfig+0x516>
 80016fe:	4b5b      	ldr	r3, [pc, #364]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 8001700:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001702:	4b5a      	ldr	r3, [pc, #360]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 8001704:	495a      	ldr	r1, [pc, #360]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 8001706:	400a      	ands	r2, r1
 8001708:	651a      	str	r2, [r3, #80]	; 0x50
 800170a:	4b58      	ldr	r3, [pc, #352]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 800170c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800170e:	4b57      	ldr	r3, [pc, #348]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 8001710:	4959      	ldr	r1, [pc, #356]	; (8001878 <HAL_RCC_OscConfig+0x678>)
 8001712:	400a      	ands	r2, r1
 8001714:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d015      	beq.n	800174a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171e:	f7ff fb11 	bl	8000d44 <HAL_GetTick>
 8001722:	0003      	movs	r3, r0
 8001724:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001726:	e009      	b.n	800173c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001728:	f7ff fb0c 	bl	8000d44 <HAL_GetTick>
 800172c:	0002      	movs	r2, r0
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	4a52      	ldr	r2, [pc, #328]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e11a      	b.n	8001972 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800173c:	4b4b      	ldr	r3, [pc, #300]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 800173e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001740:	2380      	movs	r3, #128	; 0x80
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4013      	ands	r3, r2
 8001746:	d0ef      	beq.n	8001728 <HAL_RCC_OscConfig+0x528>
 8001748:	e014      	b.n	8001774 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174a:	f7ff fafb 	bl	8000d44 <HAL_GetTick>
 800174e:	0003      	movs	r3, r0
 8001750:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001752:	e009      	b.n	8001768 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001754:	f7ff faf6 	bl	8000d44 <HAL_GetTick>
 8001758:	0002      	movs	r2, r0
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	4a47      	ldr	r2, [pc, #284]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e104      	b.n	8001972 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001768:	4b40      	ldr	r3, [pc, #256]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 800176a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800176c:	2380      	movs	r3, #128	; 0x80
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4013      	ands	r3, r2
 8001772:	d1ef      	bne.n	8001754 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001774:	2327      	movs	r3, #39	; 0x27
 8001776:	18fb      	adds	r3, r7, r3
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d105      	bne.n	800178a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800177e:	4b3b      	ldr	r3, [pc, #236]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 8001780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001782:	4b3a      	ldr	r3, [pc, #232]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 8001784:	493e      	ldr	r1, [pc, #248]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 8001786:	400a      	ands	r2, r1
 8001788:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2220      	movs	r2, #32
 8001790:	4013      	ands	r3, r2
 8001792:	d049      	beq.n	8001828 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d026      	beq.n	80017ea <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800179c:	4b33      	ldr	r3, [pc, #204]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	4b32      	ldr	r3, [pc, #200]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 80017a2:	2101      	movs	r1, #1
 80017a4:	430a      	orrs	r2, r1
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	4b30      	ldr	r3, [pc, #192]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 80017aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017ac:	4b2f      	ldr	r3, [pc, #188]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 80017ae:	2101      	movs	r1, #1
 80017b0:	430a      	orrs	r2, r1
 80017b2:	635a      	str	r2, [r3, #52]	; 0x34
 80017b4:	4b33      	ldr	r3, [pc, #204]	; (8001884 <HAL_RCC_OscConfig+0x684>)
 80017b6:	6a1a      	ldr	r2, [r3, #32]
 80017b8:	4b32      	ldr	r3, [pc, #200]	; (8001884 <HAL_RCC_OscConfig+0x684>)
 80017ba:	2180      	movs	r1, #128	; 0x80
 80017bc:	0189      	lsls	r1, r1, #6
 80017be:	430a      	orrs	r2, r1
 80017c0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c2:	f7ff fabf 	bl	8000d44 <HAL_GetTick>
 80017c6:	0003      	movs	r3, r0
 80017c8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017cc:	f7ff faba 	bl	8000d44 <HAL_GetTick>
 80017d0:	0002      	movs	r2, r0
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e0c9      	b.n	8001972 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017de:	4b23      	ldr	r3, [pc, #140]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	2202      	movs	r2, #2
 80017e4:	4013      	ands	r3, r2
 80017e6:	d0f1      	beq.n	80017cc <HAL_RCC_OscConfig+0x5cc>
 80017e8:	e01e      	b.n	8001828 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80017ea:	4b20      	ldr	r3, [pc, #128]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	4b1f      	ldr	r3, [pc, #124]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 80017f0:	2101      	movs	r1, #1
 80017f2:	438a      	bics	r2, r1
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	4b23      	ldr	r3, [pc, #140]	; (8001884 <HAL_RCC_OscConfig+0x684>)
 80017f8:	6a1a      	ldr	r2, [r3, #32]
 80017fa:	4b22      	ldr	r3, [pc, #136]	; (8001884 <HAL_RCC_OscConfig+0x684>)
 80017fc:	4922      	ldr	r1, [pc, #136]	; (8001888 <HAL_RCC_OscConfig+0x688>)
 80017fe:	400a      	ands	r2, r1
 8001800:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001802:	f7ff fa9f 	bl	8000d44 <HAL_GetTick>
 8001806:	0003      	movs	r3, r0
 8001808:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800180c:	f7ff fa9a 	bl	8000d44 <HAL_GetTick>
 8001810:	0002      	movs	r2, r0
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e0a9      	b.n	8001972 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800181e:	4b13      	ldr	r3, [pc, #76]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	2202      	movs	r2, #2
 8001824:	4013      	ands	r3, r2
 8001826:	d1f1      	bne.n	800180c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182c:	2b00      	cmp	r3, #0
 800182e:	d100      	bne.n	8001832 <HAL_RCC_OscConfig+0x632>
 8001830:	e09e      	b.n	8001970 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001832:	6a3b      	ldr	r3, [r7, #32]
 8001834:	2b0c      	cmp	r3, #12
 8001836:	d100      	bne.n	800183a <HAL_RCC_OscConfig+0x63a>
 8001838:	e077      	b.n	800192a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183e:	2b02      	cmp	r3, #2
 8001840:	d158      	bne.n	80018f4 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	4b09      	ldr	r3, [pc, #36]	; (800186c <HAL_RCC_OscConfig+0x66c>)
 8001848:	4910      	ldr	r1, [pc, #64]	; (800188c <HAL_RCC_OscConfig+0x68c>)
 800184a:	400a      	ands	r2, r1
 800184c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184e:	f7ff fa79 	bl	8000d44 <HAL_GetTick>
 8001852:	0003      	movs	r3, r0
 8001854:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001856:	e01b      	b.n	8001890 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001858:	f7ff fa74 	bl	8000d44 <HAL_GetTick>
 800185c:	0002      	movs	r2, r0
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d914      	bls.n	8001890 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e083      	b.n	8001972 <HAL_RCC_OscConfig+0x772>
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	40021000 	.word	0x40021000
 8001870:	fffffeff 	.word	0xfffffeff
 8001874:	40007000 	.word	0x40007000
 8001878:	fffffbff 	.word	0xfffffbff
 800187c:	00001388 	.word	0x00001388
 8001880:	efffffff 	.word	0xefffffff
 8001884:	40010000 	.word	0x40010000
 8001888:	ffffdfff 	.word	0xffffdfff
 800188c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001890:	4b3a      	ldr	r3, [pc, #232]	; (800197c <HAL_RCC_OscConfig+0x77c>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	049b      	lsls	r3, r3, #18
 8001898:	4013      	ands	r3, r2
 800189a:	d1dd      	bne.n	8001858 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800189c:	4b37      	ldr	r3, [pc, #220]	; (800197c <HAL_RCC_OscConfig+0x77c>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	4a37      	ldr	r2, [pc, #220]	; (8001980 <HAL_RCC_OscConfig+0x780>)
 80018a2:	4013      	ands	r3, r2
 80018a4:	0019      	movs	r1, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b4:	431a      	orrs	r2, r3
 80018b6:	4b31      	ldr	r3, [pc, #196]	; (800197c <HAL_RCC_OscConfig+0x77c>)
 80018b8:	430a      	orrs	r2, r1
 80018ba:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018bc:	4b2f      	ldr	r3, [pc, #188]	; (800197c <HAL_RCC_OscConfig+0x77c>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4b2e      	ldr	r3, [pc, #184]	; (800197c <HAL_RCC_OscConfig+0x77c>)
 80018c2:	2180      	movs	r1, #128	; 0x80
 80018c4:	0449      	lsls	r1, r1, #17
 80018c6:	430a      	orrs	r2, r1
 80018c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ca:	f7ff fa3b 	bl	8000d44 <HAL_GetTick>
 80018ce:	0003      	movs	r3, r0
 80018d0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d4:	f7ff fa36 	bl	8000d44 <HAL_GetTick>
 80018d8:	0002      	movs	r2, r0
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e045      	b.n	8001972 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80018e6:	4b25      	ldr	r3, [pc, #148]	; (800197c <HAL_RCC_OscConfig+0x77c>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	2380      	movs	r3, #128	; 0x80
 80018ec:	049b      	lsls	r3, r3, #18
 80018ee:	4013      	ands	r3, r2
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0x6d4>
 80018f2:	e03d      	b.n	8001970 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f4:	4b21      	ldr	r3, [pc, #132]	; (800197c <HAL_RCC_OscConfig+0x77c>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4b20      	ldr	r3, [pc, #128]	; (800197c <HAL_RCC_OscConfig+0x77c>)
 80018fa:	4922      	ldr	r1, [pc, #136]	; (8001984 <HAL_RCC_OscConfig+0x784>)
 80018fc:	400a      	ands	r2, r1
 80018fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001900:	f7ff fa20 	bl	8000d44 <HAL_GetTick>
 8001904:	0003      	movs	r3, r0
 8001906:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800190a:	f7ff fa1b 	bl	8000d44 <HAL_GetTick>
 800190e:	0002      	movs	r2, r0
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e02a      	b.n	8001972 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800191c:	4b17      	ldr	r3, [pc, #92]	; (800197c <HAL_RCC_OscConfig+0x77c>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	049b      	lsls	r3, r3, #18
 8001924:	4013      	ands	r3, r2
 8001926:	d1f0      	bne.n	800190a <HAL_RCC_OscConfig+0x70a>
 8001928:	e022      	b.n	8001970 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192e:	2b01      	cmp	r3, #1
 8001930:	d101      	bne.n	8001936 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e01d      	b.n	8001972 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <HAL_RCC_OscConfig+0x77c>)
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193c:	69fa      	ldr	r2, [r7, #28]
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	025b      	lsls	r3, r3, #9
 8001942:	401a      	ands	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001948:	429a      	cmp	r2, r3
 800194a:	d10f      	bne.n	800196c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800194c:	69fa      	ldr	r2, [r7, #28]
 800194e:	23f0      	movs	r3, #240	; 0xf0
 8001950:	039b      	lsls	r3, r3, #14
 8001952:	401a      	ands	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001958:	429a      	cmp	r2, r3
 800195a:	d107      	bne.n	800196c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800195c:	69fa      	ldr	r2, [r7, #28]
 800195e:	23c0      	movs	r3, #192	; 0xc0
 8001960:	041b      	lsls	r3, r3, #16
 8001962:	401a      	ands	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001968:	429a      	cmp	r2, r3
 800196a:	d001      	beq.n	8001970 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e000      	b.n	8001972 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	0018      	movs	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	b00a      	add	sp, #40	; 0x28
 8001978:	bdb0      	pop	{r4, r5, r7, pc}
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	40021000 	.word	0x40021000
 8001980:	ff02ffff 	.word	0xff02ffff
 8001984:	feffffff 	.word	0xfeffffff

08001988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001988:	b5b0      	push	{r4, r5, r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d101      	bne.n	800199c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e128      	b.n	8001bee <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800199c:	4b96      	ldr	r3, [pc, #600]	; (8001bf8 <HAL_RCC_ClockConfig+0x270>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2201      	movs	r2, #1
 80019a2:	4013      	ands	r3, r2
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d91e      	bls.n	80019e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019aa:	4b93      	ldr	r3, [pc, #588]	; (8001bf8 <HAL_RCC_ClockConfig+0x270>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2201      	movs	r2, #1
 80019b0:	4393      	bics	r3, r2
 80019b2:	0019      	movs	r1, r3
 80019b4:	4b90      	ldr	r3, [pc, #576]	; (8001bf8 <HAL_RCC_ClockConfig+0x270>)
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	430a      	orrs	r2, r1
 80019ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019bc:	f7ff f9c2 	bl	8000d44 <HAL_GetTick>
 80019c0:	0003      	movs	r3, r0
 80019c2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c4:	e009      	b.n	80019da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c6:	f7ff f9bd 	bl	8000d44 <HAL_GetTick>
 80019ca:	0002      	movs	r2, r0
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	4a8a      	ldr	r2, [pc, #552]	; (8001bfc <HAL_RCC_ClockConfig+0x274>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e109      	b.n	8001bee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019da:	4b87      	ldr	r3, [pc, #540]	; (8001bf8 <HAL_RCC_ClockConfig+0x270>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2201      	movs	r2, #1
 80019e0:	4013      	ands	r3, r2
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d1ee      	bne.n	80019c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2202      	movs	r2, #2
 80019ee:	4013      	ands	r3, r2
 80019f0:	d009      	beq.n	8001a06 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019f2:	4b83      	ldr	r3, [pc, #524]	; (8001c00 <HAL_RCC_ClockConfig+0x278>)
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	22f0      	movs	r2, #240	; 0xf0
 80019f8:	4393      	bics	r3, r2
 80019fa:	0019      	movs	r1, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	4b7f      	ldr	r3, [pc, #508]	; (8001c00 <HAL_RCC_ClockConfig+0x278>)
 8001a02:	430a      	orrs	r2, r1
 8001a04:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d100      	bne.n	8001a12 <HAL_RCC_ClockConfig+0x8a>
 8001a10:	e089      	b.n	8001b26 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d107      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a1a:	4b79      	ldr	r3, [pc, #484]	; (8001c00 <HAL_RCC_ClockConfig+0x278>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	2380      	movs	r3, #128	; 0x80
 8001a20:	029b      	lsls	r3, r3, #10
 8001a22:	4013      	ands	r3, r2
 8001a24:	d120      	bne.n	8001a68 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e0e1      	b.n	8001bee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b03      	cmp	r3, #3
 8001a30:	d107      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a32:	4b73      	ldr	r3, [pc, #460]	; (8001c00 <HAL_RCC_ClockConfig+0x278>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	2380      	movs	r3, #128	; 0x80
 8001a38:	049b      	lsls	r3, r3, #18
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d114      	bne.n	8001a68 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e0d5      	b.n	8001bee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d106      	bne.n	8001a58 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a4a:	4b6d      	ldr	r3, [pc, #436]	; (8001c00 <HAL_RCC_ClockConfig+0x278>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2204      	movs	r2, #4
 8001a50:	4013      	ands	r3, r2
 8001a52:	d109      	bne.n	8001a68 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e0ca      	b.n	8001bee <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a58:	4b69      	ldr	r3, [pc, #420]	; (8001c00 <HAL_RCC_ClockConfig+0x278>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	2380      	movs	r3, #128	; 0x80
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4013      	ands	r3, r2
 8001a62:	d101      	bne.n	8001a68 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e0c2      	b.n	8001bee <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a68:	4b65      	ldr	r3, [pc, #404]	; (8001c00 <HAL_RCC_ClockConfig+0x278>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	4393      	bics	r3, r2
 8001a70:	0019      	movs	r1, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	4b62      	ldr	r3, [pc, #392]	; (8001c00 <HAL_RCC_ClockConfig+0x278>)
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a7c:	f7ff f962 	bl	8000d44 <HAL_GetTick>
 8001a80:	0003      	movs	r3, r0
 8001a82:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d111      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a8c:	e009      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a8e:	f7ff f959 	bl	8000d44 <HAL_GetTick>
 8001a92:	0002      	movs	r2, r0
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	4a58      	ldr	r2, [pc, #352]	; (8001bfc <HAL_RCC_ClockConfig+0x274>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e0a5      	b.n	8001bee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aa2:	4b57      	ldr	r3, [pc, #348]	; (8001c00 <HAL_RCC_ClockConfig+0x278>)
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d1ef      	bne.n	8001a8e <HAL_RCC_ClockConfig+0x106>
 8001aae:	e03a      	b.n	8001b26 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d111      	bne.n	8001adc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ab8:	e009      	b.n	8001ace <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aba:	f7ff f943 	bl	8000d44 <HAL_GetTick>
 8001abe:	0002      	movs	r2, r0
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	4a4d      	ldr	r2, [pc, #308]	; (8001bfc <HAL_RCC_ClockConfig+0x274>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e08f      	b.n	8001bee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ace:	4b4c      	ldr	r3, [pc, #304]	; (8001c00 <HAL_RCC_ClockConfig+0x278>)
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	220c      	movs	r2, #12
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	2b0c      	cmp	r3, #12
 8001ad8:	d1ef      	bne.n	8001aba <HAL_RCC_ClockConfig+0x132>
 8001ada:	e024      	b.n	8001b26 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d11b      	bne.n	8001b1c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ae4:	e009      	b.n	8001afa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae6:	f7ff f92d 	bl	8000d44 <HAL_GetTick>
 8001aea:	0002      	movs	r2, r0
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	4a42      	ldr	r2, [pc, #264]	; (8001bfc <HAL_RCC_ClockConfig+0x274>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e079      	b.n	8001bee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001afa:	4b41      	ldr	r3, [pc, #260]	; (8001c00 <HAL_RCC_ClockConfig+0x278>)
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	220c      	movs	r2, #12
 8001b00:	4013      	ands	r3, r2
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	d1ef      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0x15e>
 8001b06:	e00e      	b.n	8001b26 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b08:	f7ff f91c 	bl	8000d44 <HAL_GetTick>
 8001b0c:	0002      	movs	r2, r0
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	4a3a      	ldr	r2, [pc, #232]	; (8001bfc <HAL_RCC_ClockConfig+0x274>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e068      	b.n	8001bee <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b1c:	4b38      	ldr	r3, [pc, #224]	; (8001c00 <HAL_RCC_ClockConfig+0x278>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	220c      	movs	r2, #12
 8001b22:	4013      	ands	r3, r2
 8001b24:	d1f0      	bne.n	8001b08 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b26:	4b34      	ldr	r3, [pc, #208]	; (8001bf8 <HAL_RCC_ClockConfig+0x270>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d21e      	bcs.n	8001b72 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b34:	4b30      	ldr	r3, [pc, #192]	; (8001bf8 <HAL_RCC_ClockConfig+0x270>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	4393      	bics	r3, r2
 8001b3c:	0019      	movs	r1, r3
 8001b3e:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <HAL_RCC_ClockConfig+0x270>)
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b46:	f7ff f8fd 	bl	8000d44 <HAL_GetTick>
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4e:	e009      	b.n	8001b64 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b50:	f7ff f8f8 	bl	8000d44 <HAL_GetTick>
 8001b54:	0002      	movs	r2, r0
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	4a28      	ldr	r2, [pc, #160]	; (8001bfc <HAL_RCC_ClockConfig+0x274>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e044      	b.n	8001bee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b64:	4b24      	ldr	r3, [pc, #144]	; (8001bf8 <HAL_RCC_ClockConfig+0x270>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d1ee      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2204      	movs	r2, #4
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d009      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b7c:	4b20      	ldr	r3, [pc, #128]	; (8001c00 <HAL_RCC_ClockConfig+0x278>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	4a20      	ldr	r2, [pc, #128]	; (8001c04 <HAL_RCC_ClockConfig+0x27c>)
 8001b82:	4013      	ands	r3, r2
 8001b84:	0019      	movs	r1, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68da      	ldr	r2, [r3, #12]
 8001b8a:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <HAL_RCC_ClockConfig+0x278>)
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2208      	movs	r2, #8
 8001b96:	4013      	ands	r3, r2
 8001b98:	d00a      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b9a:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <HAL_RCC_ClockConfig+0x278>)
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	4a1a      	ldr	r2, [pc, #104]	; (8001c08 <HAL_RCC_ClockConfig+0x280>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	0019      	movs	r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	00da      	lsls	r2, r3, #3
 8001baa:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <HAL_RCC_ClockConfig+0x278>)
 8001bac:	430a      	orrs	r2, r1
 8001bae:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bb0:	f000 f832 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 8001bb4:	0001      	movs	r1, r0
 8001bb6:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_RCC_ClockConfig+0x278>)
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	091b      	lsrs	r3, r3, #4
 8001bbc:	220f      	movs	r2, #15
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	4a12      	ldr	r2, [pc, #72]	; (8001c0c <HAL_RCC_ClockConfig+0x284>)
 8001bc2:	5cd3      	ldrb	r3, [r2, r3]
 8001bc4:	000a      	movs	r2, r1
 8001bc6:	40da      	lsrs	r2, r3
 8001bc8:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <HAL_RCC_ClockConfig+0x288>)
 8001bca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bcc:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <HAL_RCC_ClockConfig+0x28c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	250b      	movs	r5, #11
 8001bd2:	197c      	adds	r4, r7, r5
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f7ff f86f 	bl	8000cb8 <HAL_InitTick>
 8001bda:	0003      	movs	r3, r0
 8001bdc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001bde:	197b      	adds	r3, r7, r5
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d002      	beq.n	8001bec <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001be6:	197b      	adds	r3, r7, r5
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	e000      	b.n	8001bee <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	0018      	movs	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	b004      	add	sp, #16
 8001bf4:	bdb0      	pop	{r4, r5, r7, pc}
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	40022000 	.word	0x40022000
 8001bfc:	00001388 	.word	0x00001388
 8001c00:	40021000 	.word	0x40021000
 8001c04:	fffff8ff 	.word	0xfffff8ff
 8001c08:	ffffc7ff 	.word	0xffffc7ff
 8001c0c:	08002d3c 	.word	0x08002d3c
 8001c10:	20000000 	.word	0x20000000
 8001c14:	20000004 	.word	0x20000004

08001c18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c18:	b5b0      	push	{r4, r5, r7, lr}
 8001c1a:	b08e      	sub	sp, #56	; 0x38
 8001c1c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001c1e:	4b4c      	ldr	r3, [pc, #304]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c26:	230c      	movs	r3, #12
 8001c28:	4013      	ands	r3, r2
 8001c2a:	2b0c      	cmp	r3, #12
 8001c2c:	d014      	beq.n	8001c58 <HAL_RCC_GetSysClockFreq+0x40>
 8001c2e:	d900      	bls.n	8001c32 <HAL_RCC_GetSysClockFreq+0x1a>
 8001c30:	e07b      	b.n	8001d2a <HAL_RCC_GetSysClockFreq+0x112>
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	d002      	beq.n	8001c3c <HAL_RCC_GetSysClockFreq+0x24>
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d00b      	beq.n	8001c52 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c3a:	e076      	b.n	8001d2a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c3c:	4b44      	ldr	r3, [pc, #272]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2210      	movs	r2, #16
 8001c42:	4013      	ands	r3, r2
 8001c44:	d002      	beq.n	8001c4c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001c46:	4b43      	ldr	r3, [pc, #268]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c48:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001c4a:	e07c      	b.n	8001d46 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001c4c:	4b42      	ldr	r3, [pc, #264]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x140>)
 8001c4e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c50:	e079      	b.n	8001d46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c52:	4b42      	ldr	r3, [pc, #264]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x144>)
 8001c54:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c56:	e076      	b.n	8001d46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c5a:	0c9a      	lsrs	r2, r3, #18
 8001c5c:	230f      	movs	r3, #15
 8001c5e:	401a      	ands	r2, r3
 8001c60:	4b3f      	ldr	r3, [pc, #252]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x148>)
 8001c62:	5c9b      	ldrb	r3, [r3, r2]
 8001c64:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c68:	0d9a      	lsrs	r2, r3, #22
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	3301      	adds	r3, #1
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c72:	4b37      	ldr	r3, [pc, #220]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c74:	68da      	ldr	r2, [r3, #12]
 8001c76:	2380      	movs	r3, #128	; 0x80
 8001c78:	025b      	lsls	r3, r3, #9
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d01a      	beq.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c80:	61bb      	str	r3, [r7, #24]
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
 8001c86:	4a35      	ldr	r2, [pc, #212]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x144>)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	69b8      	ldr	r0, [r7, #24]
 8001c8c:	69f9      	ldr	r1, [r7, #28]
 8001c8e:	f7fe fae7 	bl	8000260 <__aeabi_lmul>
 8001c92:	0002      	movs	r2, r0
 8001c94:	000b      	movs	r3, r1
 8001c96:	0010      	movs	r0, r2
 8001c98:	0019      	movs	r1, r3
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f7fe fabb 	bl	8000220 <__aeabi_uldivmod>
 8001caa:	0002      	movs	r2, r0
 8001cac:	000b      	movs	r3, r1
 8001cae:	0013      	movs	r3, r2
 8001cb0:	637b      	str	r3, [r7, #52]	; 0x34
 8001cb2:	e037      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001cb4:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x138>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2210      	movs	r2, #16
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d01a      	beq.n	8001cf4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	4a23      	ldr	r2, [pc, #140]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001cc8:	2300      	movs	r3, #0
 8001cca:	68b8      	ldr	r0, [r7, #8]
 8001ccc:	68f9      	ldr	r1, [r7, #12]
 8001cce:	f7fe fac7 	bl	8000260 <__aeabi_lmul>
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	000b      	movs	r3, r1
 8001cd6:	0010      	movs	r0, r2
 8001cd8:	0019      	movs	r1, r3
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	603b      	str	r3, [r7, #0]
 8001cde:	2300      	movs	r3, #0
 8001ce0:	607b      	str	r3, [r7, #4]
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f7fe fa9b 	bl	8000220 <__aeabi_uldivmod>
 8001cea:	0002      	movs	r2, r0
 8001cec:	000b      	movs	r3, r1
 8001cee:	0013      	movs	r3, r2
 8001cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8001cf2:	e017      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	0019      	movs	r1, r3
 8001cfc:	4a16      	ldr	r2, [pc, #88]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x140>)
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f7fe faae 	bl	8000260 <__aeabi_lmul>
 8001d04:	0002      	movs	r2, r0
 8001d06:	000b      	movs	r3, r1
 8001d08:	0010      	movs	r0, r2
 8001d0a:	0019      	movs	r1, r3
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	001c      	movs	r4, r3
 8001d10:	2300      	movs	r3, #0
 8001d12:	001d      	movs	r5, r3
 8001d14:	0022      	movs	r2, r4
 8001d16:	002b      	movs	r3, r5
 8001d18:	f7fe fa82 	bl	8000220 <__aeabi_uldivmod>
 8001d1c:	0002      	movs	r2, r0
 8001d1e:	000b      	movs	r3, r1
 8001d20:	0013      	movs	r3, r2
 8001d22:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d26:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d28:	e00d      	b.n	8001d46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001d2a:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	0b5b      	lsrs	r3, r3, #13
 8001d30:	2207      	movs	r2, #7
 8001d32:	4013      	ands	r3, r2
 8001d34:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001d36:	6a3b      	ldr	r3, [r7, #32]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	2280      	movs	r2, #128	; 0x80
 8001d3c:	0212      	lsls	r2, r2, #8
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	0013      	movs	r3, r2
 8001d42:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d44:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001d48:	0018      	movs	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	b00e      	add	sp, #56	; 0x38
 8001d4e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d50:	40021000 	.word	0x40021000
 8001d54:	003d0900 	.word	0x003d0900
 8001d58:	00f42400 	.word	0x00f42400
 8001d5c:	007a1200 	.word	0x007a1200
 8001d60:	08002d4c 	.word	0x08002d4c

08001d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e032      	b.n	8001ddc <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2239      	movs	r2, #57	; 0x39
 8001d7a:	5c9b      	ldrb	r3, [r3, r2]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d107      	bne.n	8001d92 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2238      	movs	r2, #56	; 0x38
 8001d86:	2100      	movs	r1, #0
 8001d88:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f7fe fec7 	bl	8000b20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2239      	movs	r2, #57	; 0x39
 8001d96:	2102      	movs	r1, #2
 8001d98:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3304      	adds	r3, #4
 8001da2:	0019      	movs	r1, r3
 8001da4:	0010      	movs	r0, r2
 8001da6:	f000 fc37 	bl	8002618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	223e      	movs	r2, #62	; 0x3e
 8001dae:	2101      	movs	r1, #1
 8001db0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	223a      	movs	r2, #58	; 0x3a
 8001db6:	2101      	movs	r1, #1
 8001db8:	5499      	strb	r1, [r3, r2]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	223b      	movs	r2, #59	; 0x3b
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	5499      	strb	r1, [r3, r2]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	223c      	movs	r2, #60	; 0x3c
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	5499      	strb	r1, [r3, r2]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	223d      	movs	r2, #61	; 0x3d
 8001dce:	2101      	movs	r1, #1
 8001dd0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2239      	movs	r2, #57	; 0x39
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	0018      	movs	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	b002      	add	sp, #8
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2239      	movs	r2, #57	; 0x39
 8001df0:	5c9b      	ldrb	r3, [r3, r2]
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d001      	beq.n	8001dfc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e02e      	b.n	8001e5a <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2239      	movs	r2, #57	; 0x39
 8001e00:	2102      	movs	r1, #2
 8001e02:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	2380      	movs	r3, #128	; 0x80
 8001e0a:	05db      	lsls	r3, r3, #23
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d009      	beq.n	8001e24 <HAL_TIM_Base_Start+0x40>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a13      	ldr	r2, [pc, #76]	; (8001e64 <HAL_TIM_Base_Start+0x80>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d004      	beq.n	8001e24 <HAL_TIM_Base_Start+0x40>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a12      	ldr	r2, [pc, #72]	; (8001e68 <HAL_TIM_Base_Start+0x84>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d111      	bne.n	8001e48 <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	2207      	movs	r2, #7
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2b06      	cmp	r3, #6
 8001e34:	d010      	beq.n	8001e58 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2101      	movs	r1, #1
 8001e42:	430a      	orrs	r2, r1
 8001e44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e46:	e007      	b.n	8001e58 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2101      	movs	r1, #1
 8001e54:	430a      	orrs	r2, r1
 8001e56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	b004      	add	sp, #16
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	40010800 	.word	0x40010800
 8001e68:	40011400 	.word	0x40011400

08001e6c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e032      	b.n	8001ee4 <HAL_TIM_IC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2239      	movs	r2, #57	; 0x39
 8001e82:	5c9b      	ldrb	r3, [r3, r2]
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d107      	bne.n	8001e9a <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2238      	movs	r2, #56	; 0x38
 8001e8e:	2100      	movs	r1, #0
 8001e90:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	0018      	movs	r0, r3
 8001e96:	f000 f829 	bl	8001eec <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2239      	movs	r2, #57	; 0x39
 8001e9e:	2102      	movs	r1, #2
 8001ea0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	0019      	movs	r1, r3
 8001eac:	0010      	movs	r0, r2
 8001eae:	f000 fbb3 	bl	8002618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	223e      	movs	r2, #62	; 0x3e
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	223a      	movs	r2, #58	; 0x3a
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	5499      	strb	r1, [r3, r2]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	223b      	movs	r2, #59	; 0x3b
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	5499      	strb	r1, [r3, r2]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	223c      	movs	r2, #60	; 0x3c
 8001ece:	2101      	movs	r1, #1
 8001ed0:	5499      	strb	r1, [r3, r2]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	223d      	movs	r2, #61	; 0x3d
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2239      	movs	r2, #57	; 0x39
 8001ede:	2101      	movs	r1, #1
 8001ee0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	b002      	add	sp, #8
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001ef4:	46c0      	nop			; (mov r8, r8)
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	b002      	add	sp, #8
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f06:	230f      	movs	r3, #15
 8001f08:	18fb      	adds	r3, r7, r3
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d104      	bne.n	8001f1e <HAL_TIM_IC_Start_IT+0x22>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	223a      	movs	r2, #58	; 0x3a
 8001f18:	5c9b      	ldrb	r3, [r3, r2]
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	e013      	b.n	8001f46 <HAL_TIM_IC_Start_IT+0x4a>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d104      	bne.n	8001f2e <HAL_TIM_IC_Start_IT+0x32>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	223b      	movs	r2, #59	; 0x3b
 8001f28:	5c9b      	ldrb	r3, [r3, r2]
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	e00b      	b.n	8001f46 <HAL_TIM_IC_Start_IT+0x4a>
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d104      	bne.n	8001f3e <HAL_TIM_IC_Start_IT+0x42>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	223c      	movs	r2, #60	; 0x3c
 8001f38:	5c9b      	ldrb	r3, [r3, r2]
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	e003      	b.n	8001f46 <HAL_TIM_IC_Start_IT+0x4a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	223d      	movs	r2, #61	; 0x3d
 8001f42:	5c9b      	ldrb	r3, [r3, r2]
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	210e      	movs	r1, #14
 8001f48:	187a      	adds	r2, r7, r1
 8001f4a:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f4c:	187b      	adds	r3, r7, r1
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d001      	beq.n	8001f58 <HAL_TIM_IC_Start_IT+0x5c>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e090      	b.n	800207a <HAL_TIM_IC_Start_IT+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d104      	bne.n	8001f68 <HAL_TIM_IC_Start_IT+0x6c>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	223a      	movs	r2, #58	; 0x3a
 8001f62:	2102      	movs	r1, #2
 8001f64:	5499      	strb	r1, [r3, r2]
 8001f66:	e013      	b.n	8001f90 <HAL_TIM_IC_Start_IT+0x94>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	d104      	bne.n	8001f78 <HAL_TIM_IC_Start_IT+0x7c>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	223b      	movs	r2, #59	; 0x3b
 8001f72:	2102      	movs	r1, #2
 8001f74:	5499      	strb	r1, [r3, r2]
 8001f76:	e00b      	b.n	8001f90 <HAL_TIM_IC_Start_IT+0x94>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d104      	bne.n	8001f88 <HAL_TIM_IC_Start_IT+0x8c>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	223c      	movs	r2, #60	; 0x3c
 8001f82:	2102      	movs	r1, #2
 8001f84:	5499      	strb	r1, [r3, r2]
 8001f86:	e003      	b.n	8001f90 <HAL_TIM_IC_Start_IT+0x94>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	223d      	movs	r2, #61	; 0x3d
 8001f8c:	2102      	movs	r1, #2
 8001f8e:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	2b0c      	cmp	r3, #12
 8001f94:	d02a      	beq.n	8001fec <HAL_TIM_IC_Start_IT+0xf0>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	2b0c      	cmp	r3, #12
 8001f9a:	d830      	bhi.n	8001ffe <HAL_TIM_IC_Start_IT+0x102>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d01b      	beq.n	8001fda <HAL_TIM_IC_Start_IT+0xde>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d82a      	bhi.n	8001ffe <HAL_TIM_IC_Start_IT+0x102>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_TIM_IC_Start_IT+0xba>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	2b04      	cmp	r3, #4
 8001fb2:	d009      	beq.n	8001fc8 <HAL_TIM_IC_Start_IT+0xcc>
 8001fb4:	e023      	b.n	8001ffe <HAL_TIM_IC_Start_IT+0x102>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68da      	ldr	r2, [r3, #12]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2102      	movs	r1, #2
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	60da      	str	r2, [r3, #12]
      break;
 8001fc6:	e01f      	b.n	8002008 <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2104      	movs	r1, #4
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	60da      	str	r2, [r3, #12]
      break;
 8001fd8:	e016      	b.n	8002008 <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2108      	movs	r1, #8
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	60da      	str	r2, [r3, #12]
      break;
 8001fea:	e00d      	b.n	8002008 <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2110      	movs	r1, #16
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	60da      	str	r2, [r3, #12]
      break;
 8001ffc:	e004      	b.n	8002008 <HAL_TIM_IC_Start_IT+0x10c>
    }

    default:
      status = HAL_ERROR;
 8001ffe:	230f      	movs	r3, #15
 8002000:	18fb      	adds	r3, r7, r3
 8002002:	2201      	movs	r2, #1
 8002004:	701a      	strb	r2, [r3, #0]
      break;
 8002006:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8002008:	230f      	movs	r3, #15
 800200a:	18fb      	adds	r3, r7, r3
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d130      	bne.n	8002074 <HAL_TIM_IC_Start_IT+0x178>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6839      	ldr	r1, [r7, #0]
 8002018:	2201      	movs	r2, #1
 800201a:	0018      	movs	r0, r3
 800201c:	f000 fd9a 	bl	8002b54 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	2380      	movs	r3, #128	; 0x80
 8002026:	05db      	lsls	r3, r3, #23
 8002028:	429a      	cmp	r2, r3
 800202a:	d009      	beq.n	8002040 <HAL_TIM_IC_Start_IT+0x144>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a14      	ldr	r2, [pc, #80]	; (8002084 <HAL_TIM_IC_Start_IT+0x188>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d004      	beq.n	8002040 <HAL_TIM_IC_Start_IT+0x144>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a13      	ldr	r2, [pc, #76]	; (8002088 <HAL_TIM_IC_Start_IT+0x18c>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d111      	bne.n	8002064 <HAL_TIM_IC_Start_IT+0x168>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	2207      	movs	r2, #7
 8002048:	4013      	ands	r3, r2
 800204a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	2b06      	cmp	r3, #6
 8002050:	d010      	beq.n	8002074 <HAL_TIM_IC_Start_IT+0x178>
      {
        __HAL_TIM_ENABLE(htim);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2101      	movs	r1, #1
 800205e:	430a      	orrs	r2, r1
 8002060:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002062:	e007      	b.n	8002074 <HAL_TIM_IC_Start_IT+0x178>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2101      	movs	r1, #1
 8002070:	430a      	orrs	r2, r1
 8002072:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002074:	230f      	movs	r3, #15
 8002076:	18fb      	adds	r3, r7, r3
 8002078:	781b      	ldrb	r3, [r3, #0]
}
 800207a:	0018      	movs	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	b004      	add	sp, #16
 8002080:	bd80      	pop	{r7, pc}
 8002082:	46c0      	nop			; (mov r8, r8)
 8002084:	40010800 	.word	0x40010800
 8002088:	40011400 	.word	0x40011400

0800208c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	2202      	movs	r2, #2
 800209c:	4013      	ands	r3, r2
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d124      	bne.n	80020ec <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	2202      	movs	r2, #2
 80020aa:	4013      	ands	r3, r2
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d11d      	bne.n	80020ec <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2203      	movs	r2, #3
 80020b6:	4252      	negs	r2, r2
 80020b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	2203      	movs	r2, #3
 80020c8:	4013      	ands	r3, r2
 80020ca:	d004      	beq.n	80020d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	0018      	movs	r0, r3
 80020d0:	f7fe fcc0 	bl	8000a54 <HAL_TIM_IC_CaptureCallback>
 80020d4:	e007      	b.n	80020e6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	0018      	movs	r0, r3
 80020da:	f000 fa85 	bl	80025e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	0018      	movs	r0, r3
 80020e2:	f000 fa89 	bl	80025f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	2204      	movs	r2, #4
 80020f4:	4013      	ands	r3, r2
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d125      	bne.n	8002146 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	2204      	movs	r2, #4
 8002102:	4013      	ands	r3, r2
 8002104:	2b04      	cmp	r3, #4
 8002106:	d11e      	bne.n	8002146 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2205      	movs	r2, #5
 800210e:	4252      	negs	r2, r2
 8002110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2202      	movs	r2, #2
 8002116:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	699a      	ldr	r2, [r3, #24]
 800211e:	23c0      	movs	r3, #192	; 0xc0
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4013      	ands	r3, r2
 8002124:	d004      	beq.n	8002130 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	0018      	movs	r0, r3
 800212a:	f7fe fc93 	bl	8000a54 <HAL_TIM_IC_CaptureCallback>
 800212e:	e007      	b.n	8002140 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	0018      	movs	r0, r3
 8002134:	f000 fa58 	bl	80025e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	0018      	movs	r0, r3
 800213c:	f000 fa5c 	bl	80025f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	2208      	movs	r2, #8
 800214e:	4013      	ands	r3, r2
 8002150:	2b08      	cmp	r3, #8
 8002152:	d124      	bne.n	800219e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	2208      	movs	r2, #8
 800215c:	4013      	ands	r3, r2
 800215e:	2b08      	cmp	r3, #8
 8002160:	d11d      	bne.n	800219e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2209      	movs	r2, #9
 8002168:	4252      	negs	r2, r2
 800216a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2204      	movs	r2, #4
 8002170:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	2203      	movs	r2, #3
 800217a:	4013      	ands	r3, r2
 800217c:	d004      	beq.n	8002188 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	0018      	movs	r0, r3
 8002182:	f7fe fc67 	bl	8000a54 <HAL_TIM_IC_CaptureCallback>
 8002186:	e007      	b.n	8002198 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	0018      	movs	r0, r3
 800218c:	f000 fa2c 	bl	80025e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	0018      	movs	r0, r3
 8002194:	f000 fa30 	bl	80025f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	2210      	movs	r2, #16
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b10      	cmp	r3, #16
 80021aa:	d125      	bne.n	80021f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	2210      	movs	r2, #16
 80021b4:	4013      	ands	r3, r2
 80021b6:	2b10      	cmp	r3, #16
 80021b8:	d11e      	bne.n	80021f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2211      	movs	r2, #17
 80021c0:	4252      	negs	r2, r2
 80021c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2208      	movs	r2, #8
 80021c8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	69da      	ldr	r2, [r3, #28]
 80021d0:	23c0      	movs	r3, #192	; 0xc0
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4013      	ands	r3, r2
 80021d6:	d004      	beq.n	80021e2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	0018      	movs	r0, r3
 80021dc:	f7fe fc3a 	bl	8000a54 <HAL_TIM_IC_CaptureCallback>
 80021e0:	e007      	b.n	80021f2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	0018      	movs	r0, r3
 80021e6:	f000 f9ff 	bl	80025e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	0018      	movs	r0, r3
 80021ee:	f000 fa03 	bl	80025f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	2201      	movs	r2, #1
 8002200:	4013      	ands	r3, r2
 8002202:	2b01      	cmp	r3, #1
 8002204:	d10f      	bne.n	8002226 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	2201      	movs	r2, #1
 800220e:	4013      	ands	r3, r2
 8002210:	2b01      	cmp	r3, #1
 8002212:	d108      	bne.n	8002226 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2202      	movs	r2, #2
 800221a:	4252      	negs	r2, r2
 800221c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	0018      	movs	r0, r3
 8002222:	f000 f9d9 	bl	80025d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	2240      	movs	r2, #64	; 0x40
 800222e:	4013      	ands	r3, r2
 8002230:	2b40      	cmp	r3, #64	; 0x40
 8002232:	d10f      	bne.n	8002254 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	2240      	movs	r2, #64	; 0x40
 800223c:	4013      	ands	r3, r2
 800223e:	2b40      	cmp	r3, #64	; 0x40
 8002240:	d108      	bne.n	8002254 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2241      	movs	r2, #65	; 0x41
 8002248:	4252      	negs	r2, r2
 800224a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	0018      	movs	r0, r3
 8002250:	f000 f9da 	bl	8002608 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002254:	46c0      	nop			; (mov r8, r8)
 8002256:	46bd      	mov	sp, r7
 8002258:	b002      	add	sp, #8
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002268:	2317      	movs	r3, #23
 800226a:	18fb      	adds	r3, r7, r3
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2238      	movs	r2, #56	; 0x38
 8002274:	5c9b      	ldrb	r3, [r3, r2]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d101      	bne.n	800227e <HAL_TIM_IC_ConfigChannel+0x22>
 800227a:	2302      	movs	r3, #2
 800227c:	e08c      	b.n	8002398 <HAL_TIM_IC_ConfigChannel+0x13c>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2238      	movs	r2, #56	; 0x38
 8002282:	2101      	movs	r1, #1
 8002284:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d11b      	bne.n	80022c4 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800229c:	f000 faa2 	bl	80027e4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699a      	ldr	r2, [r3, #24]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	210c      	movs	r1, #12
 80022ac:	438a      	bics	r2, r1
 80022ae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6999      	ldr	r1, [r3, #24]
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	430a      	orrs	r2, r1
 80022c0:	619a      	str	r2, [r3, #24]
 80022c2:	e062      	b.n	800238a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d11c      	bne.n	8002304 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80022da:	f000 fb07 	bl	80028ec <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	699a      	ldr	r2, [r3, #24]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	492d      	ldr	r1, [pc, #180]	; (80023a0 <HAL_TIM_IC_ConfigChannel+0x144>)
 80022ea:	400a      	ands	r2, r1
 80022ec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6999      	ldr	r1, [r3, #24]
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	021a      	lsls	r2, r3, #8
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	619a      	str	r2, [r3, #24]
 8002302:	e042      	b.n	800238a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b08      	cmp	r3, #8
 8002308:	d11b      	bne.n	8002342 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800231a:	f000 fb5b 	bl	80029d4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	69da      	ldr	r2, [r3, #28]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	210c      	movs	r1, #12
 800232a:	438a      	bics	r2, r1
 800232c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	69d9      	ldr	r1, [r3, #28]
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	61da      	str	r2, [r3, #28]
 8002340:	e023      	b.n	800238a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b0c      	cmp	r3, #12
 8002346:	d11c      	bne.n	8002382 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002358:	f000 fb7c 	bl	8002a54 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	69da      	ldr	r2, [r3, #28]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	490e      	ldr	r1, [pc, #56]	; (80023a0 <HAL_TIM_IC_ConfigChannel+0x144>)
 8002368:	400a      	ands	r2, r1
 800236a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	69d9      	ldr	r1, [r3, #28]
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	021a      	lsls	r2, r3, #8
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	61da      	str	r2, [r3, #28]
 8002380:	e003      	b.n	800238a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8002382:	2317      	movs	r3, #23
 8002384:	18fb      	adds	r3, r7, r3
 8002386:	2201      	movs	r2, #1
 8002388:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2238      	movs	r2, #56	; 0x38
 800238e:	2100      	movs	r1, #0
 8002390:	5499      	strb	r1, [r3, r2]

  return status;
 8002392:	2317      	movs	r3, #23
 8002394:	18fb      	adds	r3, r7, r3
 8002396:	781b      	ldrb	r3, [r3, #0]
}
 8002398:	0018      	movs	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	b006      	add	sp, #24
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	fffff3ff 	.word	0xfffff3ff

080023a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023ae:	230f      	movs	r3, #15
 80023b0:	18fb      	adds	r3, r7, r3
 80023b2:	2200      	movs	r2, #0
 80023b4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2238      	movs	r2, #56	; 0x38
 80023ba:	5c9b      	ldrb	r3, [r3, r2]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d101      	bne.n	80023c4 <HAL_TIM_ConfigClockSource+0x20>
 80023c0:	2302      	movs	r3, #2
 80023c2:	e0bc      	b.n	800253e <HAL_TIM_ConfigClockSource+0x19a>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2238      	movs	r2, #56	; 0x38
 80023c8:	2101      	movs	r1, #1
 80023ca:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2239      	movs	r2, #57	; 0x39
 80023d0:	2102      	movs	r1, #2
 80023d2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2277      	movs	r2, #119	; 0x77
 80023e0:	4393      	bics	r3, r2
 80023e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	4a58      	ldr	r2, [pc, #352]	; (8002548 <HAL_TIM_ConfigClockSource+0x1a4>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2280      	movs	r2, #128	; 0x80
 80023fa:	0192      	lsls	r2, r2, #6
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d040      	beq.n	8002482 <HAL_TIM_ConfigClockSource+0xde>
 8002400:	2280      	movs	r2, #128	; 0x80
 8002402:	0192      	lsls	r2, r2, #6
 8002404:	4293      	cmp	r3, r2
 8002406:	d900      	bls.n	800240a <HAL_TIM_ConfigClockSource+0x66>
 8002408:	e088      	b.n	800251c <HAL_TIM_ConfigClockSource+0x178>
 800240a:	2280      	movs	r2, #128	; 0x80
 800240c:	0152      	lsls	r2, r2, #5
 800240e:	4293      	cmp	r3, r2
 8002410:	d100      	bne.n	8002414 <HAL_TIM_ConfigClockSource+0x70>
 8002412:	e088      	b.n	8002526 <HAL_TIM_ConfigClockSource+0x182>
 8002414:	2280      	movs	r2, #128	; 0x80
 8002416:	0152      	lsls	r2, r2, #5
 8002418:	4293      	cmp	r3, r2
 800241a:	d900      	bls.n	800241e <HAL_TIM_ConfigClockSource+0x7a>
 800241c:	e07e      	b.n	800251c <HAL_TIM_ConfigClockSource+0x178>
 800241e:	2b70      	cmp	r3, #112	; 0x70
 8002420:	d018      	beq.n	8002454 <HAL_TIM_ConfigClockSource+0xb0>
 8002422:	d900      	bls.n	8002426 <HAL_TIM_ConfigClockSource+0x82>
 8002424:	e07a      	b.n	800251c <HAL_TIM_ConfigClockSource+0x178>
 8002426:	2b60      	cmp	r3, #96	; 0x60
 8002428:	d04f      	beq.n	80024ca <HAL_TIM_ConfigClockSource+0x126>
 800242a:	d900      	bls.n	800242e <HAL_TIM_ConfigClockSource+0x8a>
 800242c:	e076      	b.n	800251c <HAL_TIM_ConfigClockSource+0x178>
 800242e:	2b50      	cmp	r3, #80	; 0x50
 8002430:	d03b      	beq.n	80024aa <HAL_TIM_ConfigClockSource+0x106>
 8002432:	d900      	bls.n	8002436 <HAL_TIM_ConfigClockSource+0x92>
 8002434:	e072      	b.n	800251c <HAL_TIM_ConfigClockSource+0x178>
 8002436:	2b40      	cmp	r3, #64	; 0x40
 8002438:	d057      	beq.n	80024ea <HAL_TIM_ConfigClockSource+0x146>
 800243a:	d900      	bls.n	800243e <HAL_TIM_ConfigClockSource+0x9a>
 800243c:	e06e      	b.n	800251c <HAL_TIM_ConfigClockSource+0x178>
 800243e:	2b30      	cmp	r3, #48	; 0x30
 8002440:	d063      	beq.n	800250a <HAL_TIM_ConfigClockSource+0x166>
 8002442:	d86b      	bhi.n	800251c <HAL_TIM_ConfigClockSource+0x178>
 8002444:	2b20      	cmp	r3, #32
 8002446:	d060      	beq.n	800250a <HAL_TIM_ConfigClockSource+0x166>
 8002448:	d868      	bhi.n	800251c <HAL_TIM_ConfigClockSource+0x178>
 800244a:	2b00      	cmp	r3, #0
 800244c:	d05d      	beq.n	800250a <HAL_TIM_ConfigClockSource+0x166>
 800244e:	2b10      	cmp	r3, #16
 8002450:	d05b      	beq.n	800250a <HAL_TIM_ConfigClockSource+0x166>
 8002452:	e063      	b.n	800251c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002464:	f000 fb56 	bl	8002b14 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2277      	movs	r2, #119	; 0x77
 8002474:	4313      	orrs	r3, r2
 8002476:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	609a      	str	r2, [r3, #8]
      break;
 8002480:	e052      	b.n	8002528 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002492:	f000 fb3f 	bl	8002b14 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2180      	movs	r1, #128	; 0x80
 80024a2:	01c9      	lsls	r1, r1, #7
 80024a4:	430a      	orrs	r2, r1
 80024a6:	609a      	str	r2, [r3, #8]
      break;
 80024a8:	e03e      	b.n	8002528 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024b6:	001a      	movs	r2, r3
 80024b8:	f000 f9ea 	bl	8002890 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2150      	movs	r1, #80	; 0x50
 80024c2:	0018      	movs	r0, r3
 80024c4:	f000 fb0c 	bl	8002ae0 <TIM_ITRx_SetConfig>
      break;
 80024c8:	e02e      	b.n	8002528 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024d6:	001a      	movs	r2, r3
 80024d8:	f000 fa4a 	bl	8002970 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2160      	movs	r1, #96	; 0x60
 80024e2:	0018      	movs	r0, r3
 80024e4:	f000 fafc 	bl	8002ae0 <TIM_ITRx_SetConfig>
      break;
 80024e8:	e01e      	b.n	8002528 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024f6:	001a      	movs	r2, r3
 80024f8:	f000 f9ca 	bl	8002890 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2140      	movs	r1, #64	; 0x40
 8002502:	0018      	movs	r0, r3
 8002504:	f000 faec 	bl	8002ae0 <TIM_ITRx_SetConfig>
      break;
 8002508:	e00e      	b.n	8002528 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	0019      	movs	r1, r3
 8002514:	0010      	movs	r0, r2
 8002516:	f000 fae3 	bl	8002ae0 <TIM_ITRx_SetConfig>
      break;
 800251a:	e005      	b.n	8002528 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800251c:	230f      	movs	r3, #15
 800251e:	18fb      	adds	r3, r7, r3
 8002520:	2201      	movs	r2, #1
 8002522:	701a      	strb	r2, [r3, #0]
      break;
 8002524:	e000      	b.n	8002528 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002526:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2239      	movs	r2, #57	; 0x39
 800252c:	2101      	movs	r1, #1
 800252e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2238      	movs	r2, #56	; 0x38
 8002534:	2100      	movs	r1, #0
 8002536:	5499      	strb	r1, [r3, r2]

  return status;
 8002538:	230f      	movs	r3, #15
 800253a:	18fb      	adds	r3, r7, r3
 800253c:	781b      	ldrb	r3, [r3, #0]
}
 800253e:	0018      	movs	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	b004      	add	sp, #16
 8002544:	bd80      	pop	{r7, pc}
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	ffff00ff 	.word	0xffff00ff

0800254c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2238      	movs	r2, #56	; 0x38
 800255a:	5c9b      	ldrb	r3, [r3, r2]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002560:	2302      	movs	r3, #2
 8002562:	e032      	b.n	80025ca <HAL_TIM_SlaveConfigSynchro+0x7e>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2238      	movs	r2, #56	; 0x38
 8002568:	2101      	movs	r1, #1
 800256a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2239      	movs	r2, #57	; 0x39
 8002570:	2102      	movs	r1, #2
 8002572:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	0011      	movs	r1, r2
 800257a:	0018      	movs	r0, r3
 800257c:	f000 f8a0 	bl	80026c0 <TIM_SlaveTimer_SetConfig>
 8002580:	1e03      	subs	r3, r0, #0
 8002582:	d009      	beq.n	8002598 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2239      	movs	r2, #57	; 0x39
 8002588:	2101      	movs	r1, #1
 800258a:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2238      	movs	r2, #56	; 0x38
 8002590:	2100      	movs	r1, #0
 8002592:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e018      	b.n	80025ca <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2140      	movs	r1, #64	; 0x40
 80025a4:	438a      	bics	r2, r1
 80025a6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4908      	ldr	r1, [pc, #32]	; (80025d4 <HAL_TIM_SlaveConfigSynchro+0x88>)
 80025b4:	400a      	ands	r2, r1
 80025b6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2239      	movs	r2, #57	; 0x39
 80025bc:	2101      	movs	r1, #1
 80025be:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2238      	movs	r2, #56	; 0x38
 80025c4:	2100      	movs	r1, #0
 80025c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	0018      	movs	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	b002      	add	sp, #8
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	ffffbfff 	.word	0xffffbfff

080025d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80025e0:	46c0      	nop			; (mov r8, r8)
 80025e2:	46bd      	mov	sp, r7
 80025e4:	b002      	add	sp, #8
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025f0:	46c0      	nop			; (mov r8, r8)
 80025f2:	46bd      	mov	sp, r7
 80025f4:	b002      	add	sp, #8
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002600:	46c0      	nop			; (mov r8, r8)
 8002602:	46bd      	mov	sp, r7
 8002604:	b002      	add	sp, #8
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002610:	46c0      	nop			; (mov r8, r8)
 8002612:	46bd      	mov	sp, r7
 8002614:	b002      	add	sp, #8
 8002616:	bd80      	pop	{r7, pc}

08002618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	2380      	movs	r3, #128	; 0x80
 800262c:	05db      	lsls	r3, r3, #23
 800262e:	429a      	cmp	r2, r3
 8002630:	d007      	beq.n	8002642 <TIM_Base_SetConfig+0x2a>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a1f      	ldr	r2, [pc, #124]	; (80026b4 <TIM_Base_SetConfig+0x9c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d003      	beq.n	8002642 <TIM_Base_SetConfig+0x2a>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a1e      	ldr	r2, [pc, #120]	; (80026b8 <TIM_Base_SetConfig+0xa0>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d108      	bne.n	8002654 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2270      	movs	r2, #112	; 0x70
 8002646:	4393      	bics	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	4313      	orrs	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	2380      	movs	r3, #128	; 0x80
 8002658:	05db      	lsls	r3, r3, #23
 800265a:	429a      	cmp	r2, r3
 800265c:	d007      	beq.n	800266e <TIM_Base_SetConfig+0x56>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a14      	ldr	r2, [pc, #80]	; (80026b4 <TIM_Base_SetConfig+0x9c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d003      	beq.n	800266e <TIM_Base_SetConfig+0x56>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a13      	ldr	r2, [pc, #76]	; (80026b8 <TIM_Base_SetConfig+0xa0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d108      	bne.n	8002680 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	4a12      	ldr	r2, [pc, #72]	; (80026bc <TIM_Base_SetConfig+0xa4>)
 8002672:	4013      	ands	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4313      	orrs	r3, r2
 800267e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2280      	movs	r2, #128	; 0x80
 8002684:	4393      	bics	r3, r2
 8002686:	001a      	movs	r2, r3
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	4313      	orrs	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	615a      	str	r2, [r3, #20]
}
 80026ac:	46c0      	nop			; (mov r8, r8)
 80026ae:	46bd      	mov	sp, r7
 80026b0:	b004      	add	sp, #16
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40010800 	.word	0x40010800
 80026b8:	40011400 	.word	0x40011400
 80026bc:	fffffcff 	.word	0xfffffcff

080026c0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026ca:	2317      	movs	r3, #23
 80026cc:	18fb      	adds	r3, r7, r3
 80026ce:	2200      	movs	r2, #0
 80026d0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	2270      	movs	r2, #112	; 0x70
 80026de:	4393      	bics	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	2207      	movs	r2, #7
 80026f0:	4393      	bics	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b70      	cmp	r3, #112	; 0x70
 800270c:	d015      	beq.n	800273a <TIM_SlaveTimer_SetConfig+0x7a>
 800270e:	d900      	bls.n	8002712 <TIM_SlaveTimer_SetConfig+0x52>
 8002710:	e05b      	b.n	80027ca <TIM_SlaveTimer_SetConfig+0x10a>
 8002712:	2b60      	cmp	r3, #96	; 0x60
 8002714:	d04f      	beq.n	80027b6 <TIM_SlaveTimer_SetConfig+0xf6>
 8002716:	d858      	bhi.n	80027ca <TIM_SlaveTimer_SetConfig+0x10a>
 8002718:	2b50      	cmp	r3, #80	; 0x50
 800271a:	d042      	beq.n	80027a2 <TIM_SlaveTimer_SetConfig+0xe2>
 800271c:	d855      	bhi.n	80027ca <TIM_SlaveTimer_SetConfig+0x10a>
 800271e:	2b40      	cmp	r3, #64	; 0x40
 8002720:	d016      	beq.n	8002750 <TIM_SlaveTimer_SetConfig+0x90>
 8002722:	d852      	bhi.n	80027ca <TIM_SlaveTimer_SetConfig+0x10a>
 8002724:	2b30      	cmp	r3, #48	; 0x30
 8002726:	d055      	beq.n	80027d4 <TIM_SlaveTimer_SetConfig+0x114>
 8002728:	d84f      	bhi.n	80027ca <TIM_SlaveTimer_SetConfig+0x10a>
 800272a:	2b20      	cmp	r3, #32
 800272c:	d052      	beq.n	80027d4 <TIM_SlaveTimer_SetConfig+0x114>
 800272e:	d84c      	bhi.n	80027ca <TIM_SlaveTimer_SetConfig+0x10a>
 8002730:	2b00      	cmp	r3, #0
 8002732:	d04f      	beq.n	80027d4 <TIM_SlaveTimer_SetConfig+0x114>
 8002734:	2b10      	cmp	r3, #16
 8002736:	d04d      	beq.n	80027d4 <TIM_SlaveTimer_SetConfig+0x114>
 8002738:	e047      	b.n	80027ca <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800274a:	f000 f9e3 	bl	8002b14 <TIM_ETR_SetConfig>
      break;
 800274e:	e042      	b.n	80027d6 <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b05      	cmp	r3, #5
 8002756:	d101      	bne.n	800275c <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e03f      	b.n	80027dc <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6a1a      	ldr	r2, [r3, #32]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2101      	movs	r1, #1
 8002770:	438a      	bics	r2, r1
 8002772:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	22f0      	movs	r2, #240	; 0xf0
 8002780:	4393      	bics	r3, r2
 8002782:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	011b      	lsls	r3, r3, #4
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	4313      	orrs	r3, r2
 800278e:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68ba      	ldr	r2, [r7, #8]
 8002796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	621a      	str	r2, [r3, #32]
      break;
 80027a0:	e019      	b.n	80027d6 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ae:	001a      	movs	r2, r3
 80027b0:	f000 f86e 	bl	8002890 <TIM_TI1_ConfigInputStage>
      break;
 80027b4:	e00f      	b.n	80027d6 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027c2:	001a      	movs	r2, r3
 80027c4:	f000 f8d4 	bl	8002970 <TIM_TI2_ConfigInputStage>
      break;
 80027c8:	e005      	b.n	80027d6 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80027ca:	2317      	movs	r3, #23
 80027cc:	18fb      	adds	r3, r7, r3
 80027ce:	2201      	movs	r2, #1
 80027d0:	701a      	strb	r2, [r3, #0]
      break;
 80027d2:	e000      	b.n	80027d6 <TIM_SlaveTimer_SetConfig+0x116>
      break;
 80027d4:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 80027d6:	2317      	movs	r3, #23
 80027d8:	18fb      	adds	r3, r7, r3
 80027da:	781b      	ldrb	r3, [r3, #0]
}
 80027dc:	0018      	movs	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	b006      	add	sp, #24
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
 80027f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	2201      	movs	r2, #1
 80027f8:	4393      	bics	r3, r2
 80027fa:	001a      	movs	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	2380      	movs	r3, #128	; 0x80
 8002810:	05db      	lsls	r3, r3, #23
 8002812:	429a      	cmp	r2, r3
 8002814:	d007      	beq.n	8002826 <TIM_TI1_SetConfig+0x42>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	4a1b      	ldr	r2, [pc, #108]	; (8002888 <TIM_TI1_SetConfig+0xa4>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d003      	beq.n	8002826 <TIM_TI1_SetConfig+0x42>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	4a1a      	ldr	r2, [pc, #104]	; (800288c <TIM_TI1_SetConfig+0xa8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d101      	bne.n	800282a <TIM_TI1_SetConfig+0x46>
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <TIM_TI1_SetConfig+0x48>
 800282a:	2300      	movs	r3, #0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	2203      	movs	r2, #3
 8002834:	4393      	bics	r3, r2
 8002836:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4313      	orrs	r3, r2
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	e003      	b.n	800284a <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	2201      	movs	r2, #1
 8002846:	4313      	orrs	r3, r2
 8002848:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	22f0      	movs	r2, #240	; 0xf0
 800284e:	4393      	bics	r3, r2
 8002850:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	011b      	lsls	r3, r3, #4
 8002856:	22ff      	movs	r2, #255	; 0xff
 8002858:	4013      	ands	r3, r2
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	4313      	orrs	r3, r2
 800285e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	220a      	movs	r2, #10
 8002864:	4393      	bics	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	220a      	movs	r2, #10
 800286c:	4013      	ands	r3, r2
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	621a      	str	r2, [r3, #32]
}
 8002880:	46c0      	nop			; (mov r8, r8)
 8002882:	46bd      	mov	sp, r7
 8002884:	b006      	add	sp, #24
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40010800 	.word	0x40010800
 800288c:	40011400 	.word	0x40011400

08002890 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	2201      	movs	r2, #1
 80028a8:	4393      	bics	r3, r2
 80028aa:	001a      	movs	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	22f0      	movs	r2, #240	; 0xf0
 80028ba:	4393      	bics	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	011b      	lsls	r3, r3, #4
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	220a      	movs	r2, #10
 80028cc:	4393      	bics	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	621a      	str	r2, [r3, #32]
}
 80028e4:	46c0      	nop			; (mov r8, r8)
 80028e6:	46bd      	mov	sp, r7
 80028e8:	b006      	add	sp, #24
 80028ea:	bd80      	pop	{r7, pc}

080028ec <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
 80028f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	2210      	movs	r2, #16
 8002900:	4393      	bics	r3, r2
 8002902:	001a      	movs	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	4a14      	ldr	r2, [pc, #80]	; (8002968 <TIM_TI2_SetConfig+0x7c>)
 8002918:	4013      	ands	r3, r2
 800291a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	021b      	lsls	r3, r3, #8
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	4313      	orrs	r3, r2
 8002924:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	4a10      	ldr	r2, [pc, #64]	; (800296c <TIM_TI2_SetConfig+0x80>)
 800292a:	4013      	ands	r3, r2
 800292c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	031b      	lsls	r3, r3, #12
 8002932:	041b      	lsls	r3, r3, #16
 8002934:	0c1b      	lsrs	r3, r3, #16
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	4313      	orrs	r3, r2
 800293a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	22a0      	movs	r2, #160	; 0xa0
 8002940:	4393      	bics	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	22a0      	movs	r2, #160	; 0xa0
 800294a:	4013      	ands	r3, r2
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	621a      	str	r2, [r3, #32]
}
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	46bd      	mov	sp, r7
 8002962:	b006      	add	sp, #24
 8002964:	bd80      	pop	{r7, pc}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	fffffcff 	.word	0xfffffcff
 800296c:	ffff0fff 	.word	0xffff0fff

08002970 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	2210      	movs	r2, #16
 8002982:	4393      	bics	r3, r2
 8002984:	001a      	movs	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	4a0d      	ldr	r2, [pc, #52]	; (80029d0 <TIM_TI2_ConfigInputStage+0x60>)
 800299a:	4013      	ands	r3, r2
 800299c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	031b      	lsls	r3, r3, #12
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	22a0      	movs	r2, #160	; 0xa0
 80029ac:	4393      	bics	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	011b      	lsls	r3, r3, #4
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	621a      	str	r2, [r3, #32]
}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	46bd      	mov	sp, r7
 80029ca:	b006      	add	sp, #24
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	46c0      	nop			; (mov r8, r8)
 80029d0:	ffff0fff 	.word	0xffff0fff

080029d4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
 80029e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	4a19      	ldr	r2, [pc, #100]	; (8002a4c <TIM_TI3_SetConfig+0x78>)
 80029e8:	401a      	ands	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2203      	movs	r2, #3
 80029fe:	4393      	bics	r3, r2
 8002a00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	22f0      	movs	r2, #240	; 0xf0
 8002a0e:	4393      	bics	r3, r2
 8002a10:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	011b      	lsls	r3, r3, #4
 8002a16:	22ff      	movs	r2, #255	; 0xff
 8002a18:	4013      	ands	r3, r2
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	4a0b      	ldr	r2, [pc, #44]	; (8002a50 <TIM_TI3_SetConfig+0x7c>)
 8002a24:	4013      	ands	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	021a      	lsls	r2, r3, #8
 8002a2c:	23a0      	movs	r3, #160	; 0xa0
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	4013      	ands	r3, r2
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	621a      	str	r2, [r3, #32]
}
 8002a44:	46c0      	nop			; (mov r8, r8)
 8002a46:	46bd      	mov	sp, r7
 8002a48:	b006      	add	sp, #24
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	fffffeff 	.word	0xfffffeff
 8002a50:	fffff5ff 	.word	0xfffff5ff

08002a54 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
 8002a60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	4a1a      	ldr	r2, [pc, #104]	; (8002ad0 <TIM_TI4_SetConfig+0x7c>)
 8002a68:	401a      	ands	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	4a15      	ldr	r2, [pc, #84]	; (8002ad4 <TIM_TI4_SetConfig+0x80>)
 8002a7e:	4013      	ands	r3, r2
 8002a80:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	021b      	lsls	r3, r3, #8
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	4a12      	ldr	r2, [pc, #72]	; (8002ad8 <TIM_TI4_SetConfig+0x84>)
 8002a90:	4013      	ands	r3, r2
 8002a92:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	031b      	lsls	r3, r3, #12
 8002a98:	041b      	lsls	r3, r3, #16
 8002a9a:	0c1b      	lsrs	r3, r3, #16
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	4a0d      	ldr	r2, [pc, #52]	; (8002adc <TIM_TI4_SetConfig+0x88>)
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	031a      	lsls	r2, r3, #12
 8002aae:	23a0      	movs	r3, #160	; 0xa0
 8002ab0:	021b      	lsls	r3, r3, #8
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	621a      	str	r2, [r3, #32]
}
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	b006      	add	sp, #24
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	ffffefff 	.word	0xffffefff
 8002ad4:	fffffcff 	.word	0xfffffcff
 8002ad8:	ffff0fff 	.word	0xffff0fff
 8002adc:	ffff5fff 	.word	0xffff5fff

08002ae0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2270      	movs	r2, #112	; 0x70
 8002af4:	4393      	bics	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	2207      	movs	r2, #7
 8002b00:	4313      	orrs	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	609a      	str	r2, [r3, #8]
}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	b004      	add	sp, #16
 8002b10:	bd80      	pop	{r7, pc}
	...

08002b14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
 8002b20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	4a09      	ldr	r2, [pc, #36]	; (8002b50 <TIM_ETR_SetConfig+0x3c>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	021a      	lsls	r2, r3, #8
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	431a      	orrs	r2, r3
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	609a      	str	r2, [r3, #8]
}
 8002b48:	46c0      	nop			; (mov r8, r8)
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b006      	add	sp, #24
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	ffff00ff 	.word	0xffff00ff

08002b54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	221f      	movs	r2, #31
 8002b64:	4013      	ands	r3, r2
 8002b66:	2201      	movs	r2, #1
 8002b68:	409a      	lsls	r2, r3
 8002b6a:	0013      	movs	r3, r2
 8002b6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	43d2      	mvns	r2, r2
 8002b76:	401a      	ands	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a1a      	ldr	r2, [r3, #32]
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	211f      	movs	r1, #31
 8002b84:	400b      	ands	r3, r1
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4099      	lsls	r1, r3
 8002b8a:	000b      	movs	r3, r1
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	621a      	str	r2, [r3, #32]
}
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	46bd      	mov	sp, r7
 8002b96:	b006      	add	sp, #24
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2238      	movs	r2, #56	; 0x38
 8002baa:	5c9b      	ldrb	r3, [r3, r2]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d101      	bne.n	8002bb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e042      	b.n	8002c3a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2238      	movs	r2, #56	; 0x38
 8002bb8:	2101      	movs	r1, #1
 8002bba:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2239      	movs	r2, #57	; 0x39
 8002bc0:	2102      	movs	r1, #2
 8002bc2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2270      	movs	r2, #112	; 0x70
 8002bd8:	4393      	bics	r3, r2
 8002bda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	2380      	movs	r3, #128	; 0x80
 8002bf4:	05db      	lsls	r3, r3, #23
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d009      	beq.n	8002c0e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a11      	ldr	r2, [pc, #68]	; (8002c44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d004      	beq.n	8002c0e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a0f      	ldr	r2, [pc, #60]	; (8002c48 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d10c      	bne.n	8002c28 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2280      	movs	r2, #128	; 0x80
 8002c12:	4393      	bics	r3, r2
 8002c14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2239      	movs	r2, #57	; 0x39
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2238      	movs	r2, #56	; 0x38
 8002c34:	2100      	movs	r1, #0
 8002c36:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	b004      	add	sp, #16
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	46c0      	nop			; (mov r8, r8)
 8002c44:	40010800 	.word	0x40010800
 8002c48:	40011400 	.word	0x40011400

08002c4c <memset>:
 8002c4c:	0003      	movs	r3, r0
 8002c4e:	1882      	adds	r2, r0, r2
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d100      	bne.n	8002c56 <memset+0xa>
 8002c54:	4770      	bx	lr
 8002c56:	7019      	strb	r1, [r3, #0]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	e7f9      	b.n	8002c50 <memset+0x4>

08002c5c <__libc_init_array>:
 8002c5c:	b570      	push	{r4, r5, r6, lr}
 8002c5e:	2600      	movs	r6, #0
 8002c60:	4c0c      	ldr	r4, [pc, #48]	; (8002c94 <__libc_init_array+0x38>)
 8002c62:	4d0d      	ldr	r5, [pc, #52]	; (8002c98 <__libc_init_array+0x3c>)
 8002c64:	1b64      	subs	r4, r4, r5
 8002c66:	10a4      	asrs	r4, r4, #2
 8002c68:	42a6      	cmp	r6, r4
 8002c6a:	d109      	bne.n	8002c80 <__libc_init_array+0x24>
 8002c6c:	2600      	movs	r6, #0
 8002c6e:	f000 f819 	bl	8002ca4 <_init>
 8002c72:	4c0a      	ldr	r4, [pc, #40]	; (8002c9c <__libc_init_array+0x40>)
 8002c74:	4d0a      	ldr	r5, [pc, #40]	; (8002ca0 <__libc_init_array+0x44>)
 8002c76:	1b64      	subs	r4, r4, r5
 8002c78:	10a4      	asrs	r4, r4, #2
 8002c7a:	42a6      	cmp	r6, r4
 8002c7c:	d105      	bne.n	8002c8a <__libc_init_array+0x2e>
 8002c7e:	bd70      	pop	{r4, r5, r6, pc}
 8002c80:	00b3      	lsls	r3, r6, #2
 8002c82:	58eb      	ldr	r3, [r5, r3]
 8002c84:	4798      	blx	r3
 8002c86:	3601      	adds	r6, #1
 8002c88:	e7ee      	b.n	8002c68 <__libc_init_array+0xc>
 8002c8a:	00b3      	lsls	r3, r6, #2
 8002c8c:	58eb      	ldr	r3, [r5, r3]
 8002c8e:	4798      	blx	r3
 8002c90:	3601      	adds	r6, #1
 8002c92:	e7f2      	b.n	8002c7a <__libc_init_array+0x1e>
 8002c94:	08002d60 	.word	0x08002d60
 8002c98:	08002d60 	.word	0x08002d60
 8002c9c:	08002d64 	.word	0x08002d64
 8002ca0:	08002d60 	.word	0x08002d60

08002ca4 <_init>:
 8002ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002caa:	bc08      	pop	{r3}
 8002cac:	469e      	mov	lr, r3
 8002cae:	4770      	bx	lr

08002cb0 <_fini>:
 8002cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cb6:	bc08      	pop	{r3}
 8002cb8:	469e      	mov	lr, r3
 8002cba:	4770      	bx	lr


USB_HID_KEYBOARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076e0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080077a0  080077a0  000177a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007860  08007860  00020158  2**0
                  CONTENTS
  4 .ARM          00000008  08007860  08007860  00017860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007868  08007868  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007868  08007868  00017868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800786c  0800786c  0001786c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  08007870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f8  20000158  080079c8  00020158  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000950  080079c8  00020950  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000afc1  00000000  00000000  000201c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002662  00000000  00000000  0002b184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e0  00000000  00000000  0002d7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000073b  00000000  00000000  0002e1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015299  00000000  00000000  0002e903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000da3d  00000000  00000000  00043b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00076f2d  00000000  00000000  000515d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002194  00000000  00000000  000c8508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000ca69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000158 	.word	0x20000158
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007788 	.word	0x08007788

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000015c 	.word	0x2000015c
 8000104:	08007788 	.word	0x08007788

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004ae:	f000 f955 	bl	800075c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004b2:	f000 f859 	bl	8000568 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004b6:	f000 f8cd 	bl	8000654 <MX_GPIO_Init>
	MX_USB_DEVICE_Init();
 80004ba:	f006 fcb7 	bl	8006e2c <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */
	keyBoardHIDsub.MODIFIER = 0x02; //print char in capital
 80004be:	4b28      	ldr	r3, [pc, #160]	; (8000560 <main+0xb8>)
 80004c0:	2202      	movs	r2, #2
 80004c2:	701a      	strb	r2, [r3, #0]
	keyBoardHIDsub.KEYCODE1 = 0x04; //print "A"
 80004c4:	4b26      	ldr	r3, [pc, #152]	; (8000560 <main+0xb8>)
 80004c6:	2204      	movs	r2, #4
 80004c8:	709a      	strb	r2, [r3, #2]
	keyBoardHIDsub.KEYCODE2 = 0x05; //print "b"
 80004ca:	4b25      	ldr	r3, [pc, #148]	; (8000560 <main+0xb8>)
 80004cc:	2205      	movs	r2, #5
 80004ce:	70da      	strb	r2, [r3, #3]
	keyBoardHIDsub.KEYCODE3 = 0x06; //print "c"
 80004d0:	4b23      	ldr	r3, [pc, #140]	; (8000560 <main+0xb8>)
 80004d2:	2206      	movs	r2, #6
 80004d4:	711a      	strb	r2, [r3, #4]
	keyBoardHIDsub.KEYCODE4 = 0x07; //print "D"
 80004d6:	4b22      	ldr	r3, [pc, #136]	; (8000560 <main+0xb8>)
 80004d8:	2207      	movs	r2, #7
 80004da:	715a      	strb	r2, [r3, #5]
	keyBoardHIDsub.KEYCODE5 = 0x08; //print "E"
 80004dc:	4b20      	ldr	r3, [pc, #128]	; (8000560 <main+0xb8>)
 80004de:	2208      	movs	r2, #8
 80004e0:	719a      	strb	r2, [r3, #6]
	keyBoardHIDsub.KEYCODE6 = 0x2C; //print " " a space
 80004e2:	4b1f      	ldr	r3, [pc, #124]	; (8000560 <main+0xb8>)
 80004e4:	222c      	movs	r2, #44	; 0x2c
 80004e6:	71da      	strb	r2, [r3, #7]

		/* USER CODE BEGIN 3 */

		// Send the buffer using USBD_HID_SendReport
		 // Populate the buffer with the HID report data
		    uint8_t buffer[sizeof(keyBoardHIDsub)] = {0}; // Initialize the buffer with zeros
 80004e8:	003b      	movs	r3, r7
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	2200      	movs	r2, #0
 80004f0:	605a      	str	r2, [r3, #4]
		    buffer[0] = keyBoardHIDsub.MODIFIER;
 80004f2:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <main+0xb8>)
 80004f4:	781a      	ldrb	r2, [r3, #0]
 80004f6:	003b      	movs	r3, r7
 80004f8:	701a      	strb	r2, [r3, #0]
		    buffer[2] = keyBoardHIDsub.KEYCODE1;
 80004fa:	4b19      	ldr	r3, [pc, #100]	; (8000560 <main+0xb8>)
 80004fc:	789a      	ldrb	r2, [r3, #2]
 80004fe:	003b      	movs	r3, r7
 8000500:	709a      	strb	r2, [r3, #2]
		    buffer[3] = keyBoardHIDsub.KEYCODE2;
 8000502:	4b17      	ldr	r3, [pc, #92]	; (8000560 <main+0xb8>)
 8000504:	78da      	ldrb	r2, [r3, #3]
 8000506:	003b      	movs	r3, r7
 8000508:	70da      	strb	r2, [r3, #3]
		    buffer[4] = keyBoardHIDsub.KEYCODE3;
 800050a:	4b15      	ldr	r3, [pc, #84]	; (8000560 <main+0xb8>)
 800050c:	791a      	ldrb	r2, [r3, #4]
 800050e:	003b      	movs	r3, r7
 8000510:	711a      	strb	r2, [r3, #4]
		    buffer[5] = keyBoardHIDsub.KEYCODE4;
 8000512:	4b13      	ldr	r3, [pc, #76]	; (8000560 <main+0xb8>)
 8000514:	795a      	ldrb	r2, [r3, #5]
 8000516:	003b      	movs	r3, r7
 8000518:	715a      	strb	r2, [r3, #5]
		    buffer[6] = keyBoardHIDsub.KEYCODE5;
 800051a:	4b11      	ldr	r3, [pc, #68]	; (8000560 <main+0xb8>)
 800051c:	799a      	ldrb	r2, [r3, #6]
 800051e:	003b      	movs	r3, r7
 8000520:	719a      	strb	r2, [r3, #6]
		    buffer[7] = keyBoardHIDsub.KEYCODE6;
 8000522:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <main+0xb8>)
 8000524:	79da      	ldrb	r2, [r3, #7]
 8000526:	003b      	movs	r3, r7
 8000528:	71da      	strb	r2, [r3, #7]

		    // Send the buffer using USBD_HID_SendReport
		    USBD_HID_SendReport(&hUsbDeviceFS, buffer, sizeof(buffer));
 800052a:	0039      	movs	r1, r7
 800052c:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <main+0xbc>)
 800052e:	2208      	movs	r2, #8
 8000530:	0018      	movs	r0, r3
 8000532:	f005 fa21 	bl	8005978 <USBD_HID_SendReport>
		    HAL_Delay(50);
 8000536:	2032      	movs	r0, #50	; 0x32
 8000538:	f000 f980 	bl	800083c <HAL_Delay>

		    // Reset the buffer and send a release report
		    memset(buffer, 0, sizeof(buffer));
 800053c:	003b      	movs	r3, r7
 800053e:	2208      	movs	r2, #8
 8000540:	2100      	movs	r1, #0
 8000542:	0018      	movs	r0, r3
 8000544:	f007 f8f4 	bl	8007730 <memset>
		    USBD_HID_SendReport(&hUsbDeviceFS, buffer, sizeof(buffer));
 8000548:	0039      	movs	r1, r7
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <main+0xbc>)
 800054c:	2208      	movs	r2, #8
 800054e:	0018      	movs	r0, r3
 8000550:	f005 fa12 	bl	8005978 <USBD_HID_SendReport>
		    HAL_Delay(1000);
 8000554:	23fa      	movs	r3, #250	; 0xfa
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	0018      	movs	r0, r3
 800055a:	f000 f96f 	bl	800083c <HAL_Delay>
	while (1) {
 800055e:	e7c3      	b.n	80004e8 <main+0x40>
 8000560:	20000174 	.word	0x20000174
 8000564:	20000184 	.word	0x20000184

08000568 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000568:	b590      	push	{r4, r7, lr}
 800056a:	b09d      	sub	sp, #116	; 0x74
 800056c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800056e:	2438      	movs	r4, #56	; 0x38
 8000570:	193b      	adds	r3, r7, r4
 8000572:	0018      	movs	r0, r3
 8000574:	2338      	movs	r3, #56	; 0x38
 8000576:	001a      	movs	r2, r3
 8000578:	2100      	movs	r1, #0
 800057a:	f007 f8d9 	bl	8007730 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800057e:	2324      	movs	r3, #36	; 0x24
 8000580:	18fb      	adds	r3, r7, r3
 8000582:	0018      	movs	r0, r3
 8000584:	2314      	movs	r3, #20
 8000586:	001a      	movs	r2, r3
 8000588:	2100      	movs	r1, #0
 800058a:	f007 f8d1 	bl	8007730 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800058e:	003b      	movs	r3, r7
 8000590:	0018      	movs	r0, r3
 8000592:	2324      	movs	r3, #36	; 0x24
 8000594:	001a      	movs	r2, r3
 8000596:	2100      	movs	r1, #0
 8000598:	f007 f8ca 	bl	8007730 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059c:	4b2b      	ldr	r3, [pc, #172]	; (800064c <SystemClock_Config+0xe4>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a2b      	ldr	r2, [pc, #172]	; (8000650 <SystemClock_Config+0xe8>)
 80005a2:	401a      	ands	r2, r3
 80005a4:	4b29      	ldr	r3, [pc, #164]	; (800064c <SystemClock_Config+0xe4>)
 80005a6:	2180      	movs	r1, #128	; 0x80
 80005a8:	0109      	lsls	r1, r1, #4
 80005aa:	430a      	orrs	r2, r1
 80005ac:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80005ae:	0021      	movs	r1, r4
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	2222      	movs	r2, #34	; 0x22
 80005b4:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_HSI48;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2201      	movs	r2, #1
 80005ba:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	2210      	movs	r2, #16
 80005c0:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	2201      	movs	r2, #1
 80005c6:	619a      	str	r2, [r3, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	2202      	movs	r2, #2
 80005cc:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	2200      	movs	r2, #0
 80005d2:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	2280      	movs	r2, #128	; 0x80
 80005d8:	02d2      	lsls	r2, r2, #11
 80005da:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2280      	movs	r2, #128	; 0x80
 80005e0:	03d2      	lsls	r2, r2, #15
 80005e2:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	0018      	movs	r0, r3
 80005e8:	f002 f862 	bl	80026b0 <HAL_RCC_OscConfig>
 80005ec:	1e03      	subs	r3, r0, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x8c>
		Error_Handler();
 80005f0:	f000 f846 	bl	8000680 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005f4:	2124      	movs	r1, #36	; 0x24
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	220f      	movs	r2, #15
 80005fa:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	2203      	movs	r2, #3
 8000600:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000602:	187b      	adds	r3, r7, r1
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000608:	187b      	adds	r3, r7, r1
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060e:	187b      	adds	r3, r7, r1
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000614:	187b      	adds	r3, r7, r1
 8000616:	2101      	movs	r1, #1
 8000618:	0018      	movs	r0, r3
 800061a:	f002 fc0d 	bl	8002e38 <HAL_RCC_ClockConfig>
 800061e:	1e03      	subs	r3, r0, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xbe>
		Error_Handler();
 8000622:	f000 f82d 	bl	8000680 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000626:	003b      	movs	r3, r7
 8000628:	2240      	movs	r2, #64	; 0x40
 800062a:	601a      	str	r2, [r3, #0]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800062c:	003b      	movs	r3, r7
 800062e:	2280      	movs	r2, #128	; 0x80
 8000630:	04d2      	lsls	r2, r2, #19
 8000632:	621a      	str	r2, [r3, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000634:	003b      	movs	r3, r7
 8000636:	0018      	movs	r0, r3
 8000638:	f002 fdec 	bl	8003214 <HAL_RCCEx_PeriphCLKConfig>
 800063c:	1e03      	subs	r3, r0, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0xdc>
		Error_Handler();
 8000640:	f000 f81e 	bl	8000680 <Error_Handler>
	}
}
 8000644:	46c0      	nop			; (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	b01d      	add	sp, #116	; 0x74
 800064a:	bd90      	pop	{r4, r7, pc}
 800064c:	40007000 	.word	0x40007000
 8000650:	ffffe7ff 	.word	0xffffe7ff

08000654 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <MX_GPIO_Init+0x28>)
 800065c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800065e:	4b07      	ldr	r3, [pc, #28]	; (800067c <MX_GPIO_Init+0x28>)
 8000660:	2101      	movs	r1, #1
 8000662:	430a      	orrs	r2, r1
 8000664:	62da      	str	r2, [r3, #44]	; 0x2c
 8000666:	4b05      	ldr	r3, [pc, #20]	; (800067c <MX_GPIO_Init+0x28>)
 8000668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800066a:	2201      	movs	r2, #1
 800066c:	4013      	ands	r3, r2
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	b002      	add	sp, #8
 8000678:	bd80      	pop	{r7, pc}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	40021000 	.word	0x40021000

08000680 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000684:	b672      	cpsid	i
}
 8000686:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000688:	e7fe      	b.n	8000688 <Error_Handler+0x8>
	...

0800068c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000690:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <HAL_MspInit+0x24>)
 8000692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <HAL_MspInit+0x24>)
 8000696:	2101      	movs	r1, #1
 8000698:	430a      	orrs	r2, r1
 800069a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <HAL_MspInit+0x24>)
 800069e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006a0:	4b03      	ldr	r3, [pc, #12]	; (80006b0 <HAL_MspInit+0x24>)
 80006a2:	2180      	movs	r1, #128	; 0x80
 80006a4:	0549      	lsls	r1, r1, #21
 80006a6:	430a      	orrs	r2, r1
 80006a8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40021000 	.word	0x40021000

080006b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <NMI_Handler+0x4>

080006ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006be:	e7fe      	b.n	80006be <HardFault_Handler+0x4>

080006c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006c4:	46c0      	nop			; (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d8:	f000 f894 	bl	8000804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006dc:	46c0      	nop			; (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80006e8:	4b03      	ldr	r3, [pc, #12]	; (80006f8 <USB_IRQHandler+0x14>)
 80006ea:	0018      	movs	r0, r3
 80006ec:	f000 face 	bl	8000c8c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80006f0:	46c0      	nop			; (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	20000648 	.word	0x20000648

080006fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000700:	46c0      	nop			; (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000708:	480d      	ldr	r0, [pc, #52]	; (8000740 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800070a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800070c:	f7ff fff6 	bl	80006fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000710:	480c      	ldr	r0, [pc, #48]	; (8000744 <LoopForever+0x6>)
  ldr r1, =_edata
 8000712:	490d      	ldr	r1, [pc, #52]	; (8000748 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000714:	4a0d      	ldr	r2, [pc, #52]	; (800074c <LoopForever+0xe>)
  movs r3, #0
 8000716:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000718:	e002      	b.n	8000720 <LoopCopyDataInit>

0800071a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800071a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800071c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800071e:	3304      	adds	r3, #4

08000720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000724:	d3f9      	bcc.n	800071a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000726:	4a0a      	ldr	r2, [pc, #40]	; (8000750 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000728:	4c0a      	ldr	r4, [pc, #40]	; (8000754 <LoopForever+0x16>)
  movs r3, #0
 800072a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800072c:	e001      	b.n	8000732 <LoopFillZerobss>

0800072e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800072e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000730:	3204      	adds	r2, #4

08000732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000734:	d3fb      	bcc.n	800072e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000736:	f007 f803 	bl	8007740 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800073a:	f7ff feb5 	bl	80004a8 <main>

0800073e <LoopForever>:

LoopForever:
    b LoopForever
 800073e:	e7fe      	b.n	800073e <LoopForever>
  ldr   r0, =_estack
 8000740:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000748:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 800074c:	08007870 	.word	0x08007870
  ldr r2, =_sbss
 8000750:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8000754:	20000950 	.word	0x20000950

08000758 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000758:	e7fe      	b.n	8000758 <ADC1_COMP_IRQHandler>
	...

0800075c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000762:	1dfb      	adds	r3, r7, #7
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000768:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <HAL_Init+0x3c>)
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <HAL_Init+0x3c>)
 800076e:	2140      	movs	r1, #64	; 0x40
 8000770:	430a      	orrs	r2, r1
 8000772:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000774:	2000      	movs	r0, #0
 8000776:	f000 f811 	bl	800079c <HAL_InitTick>
 800077a:	1e03      	subs	r3, r0, #0
 800077c:	d003      	beq.n	8000786 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800077e:	1dfb      	adds	r3, r7, #7
 8000780:	2201      	movs	r2, #1
 8000782:	701a      	strb	r2, [r3, #0]
 8000784:	e001      	b.n	800078a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000786:	f7ff ff81 	bl	800068c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800078a:	1dfb      	adds	r3, r7, #7
 800078c:	781b      	ldrb	r3, [r3, #0]
}
 800078e:	0018      	movs	r0, r3
 8000790:	46bd      	mov	sp, r7
 8000792:	b002      	add	sp, #8
 8000794:	bd80      	pop	{r7, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	40022000 	.word	0x40022000

0800079c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <HAL_InitTick+0x5c>)
 80007a6:	681c      	ldr	r4, [r3, #0]
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <HAL_InitTick+0x60>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	0019      	movs	r1, r3
 80007ae:	23fa      	movs	r3, #250	; 0xfa
 80007b0:	0098      	lsls	r0, r3, #2
 80007b2:	f7ff fca9 	bl	8000108 <__udivsi3>
 80007b6:	0003      	movs	r3, r0
 80007b8:	0019      	movs	r1, r3
 80007ba:	0020      	movs	r0, r4
 80007bc:	f7ff fca4 	bl	8000108 <__udivsi3>
 80007c0:	0003      	movs	r3, r0
 80007c2:	0018      	movs	r0, r3
 80007c4:	f000 f92f 	bl	8000a26 <HAL_SYSTICK_Config>
 80007c8:	1e03      	subs	r3, r0, #0
 80007ca:	d001      	beq.n	80007d0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80007cc:	2301      	movs	r3, #1
 80007ce:	e00f      	b.n	80007f0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b03      	cmp	r3, #3
 80007d4:	d80b      	bhi.n	80007ee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d6:	6879      	ldr	r1, [r7, #4]
 80007d8:	2301      	movs	r3, #1
 80007da:	425b      	negs	r3, r3
 80007dc:	2200      	movs	r2, #0
 80007de:	0018      	movs	r0, r3
 80007e0:	f000 f8fc 	bl	80009dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_InitTick+0x64>)
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007ea:	2300      	movs	r3, #0
 80007ec:	e000      	b.n	80007f0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
}
 80007f0:	0018      	movs	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b003      	add	sp, #12
 80007f6:	bd90      	pop	{r4, r7, pc}
 80007f8:	20000000 	.word	0x20000000
 80007fc:	20000008 	.word	0x20000008
 8000800:	20000004 	.word	0x20000004

08000804 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <HAL_IncTick+0x1c>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	001a      	movs	r2, r3
 800080e:	4b05      	ldr	r3, [pc, #20]	; (8000824 <HAL_IncTick+0x20>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	18d2      	adds	r2, r2, r3
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <HAL_IncTick+0x20>)
 8000816:	601a      	str	r2, [r3, #0]
}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	20000008 	.word	0x20000008
 8000824:	2000017c 	.word	0x2000017c

08000828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  return uwTick;
 800082c:	4b02      	ldr	r3, [pc, #8]	; (8000838 <HAL_GetTick+0x10>)
 800082e:	681b      	ldr	r3, [r3, #0]
}
 8000830:	0018      	movs	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	2000017c 	.word	0x2000017c

0800083c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000844:	f7ff fff0 	bl	8000828 <HAL_GetTick>
 8000848:	0003      	movs	r3, r0
 800084a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	3301      	adds	r3, #1
 8000854:	d005      	beq.n	8000862 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000856:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <HAL_Delay+0x44>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	001a      	movs	r2, r3
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	189b      	adds	r3, r3, r2
 8000860:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	f7ff ffe0 	bl	8000828 <HAL_GetTick>
 8000868:	0002      	movs	r2, r0
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	68fa      	ldr	r2, [r7, #12]
 8000870:	429a      	cmp	r2, r3
 8000872:	d8f7      	bhi.n	8000864 <HAL_Delay+0x28>
  {
  }
}
 8000874:	46c0      	nop			; (mov r8, r8)
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	b004      	add	sp, #16
 800087c:	bd80      	pop	{r7, pc}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	20000008 	.word	0x20000008

08000884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	0002      	movs	r2, r0
 800088c:	1dfb      	adds	r3, r7, #7
 800088e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000890:	1dfb      	adds	r3, r7, #7
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b7f      	cmp	r3, #127	; 0x7f
 8000896:	d809      	bhi.n	80008ac <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000898:	1dfb      	adds	r3, r7, #7
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	001a      	movs	r2, r3
 800089e:	231f      	movs	r3, #31
 80008a0:	401a      	ands	r2, r3
 80008a2:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <__NVIC_EnableIRQ+0x30>)
 80008a4:	2101      	movs	r1, #1
 80008a6:	4091      	lsls	r1, r2
 80008a8:	000a      	movs	r2, r1
 80008aa:	601a      	str	r2, [r3, #0]
  }
}
 80008ac:	46c0      	nop			; (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	b002      	add	sp, #8
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	e000e100 	.word	0xe000e100

080008b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b8:	b590      	push	{r4, r7, lr}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	0002      	movs	r2, r0
 80008c0:	6039      	str	r1, [r7, #0]
 80008c2:	1dfb      	adds	r3, r7, #7
 80008c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008c6:	1dfb      	adds	r3, r7, #7
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b7f      	cmp	r3, #127	; 0x7f
 80008cc:	d828      	bhi.n	8000920 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008ce:	4a2f      	ldr	r2, [pc, #188]	; (800098c <__NVIC_SetPriority+0xd4>)
 80008d0:	1dfb      	adds	r3, r7, #7
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	b25b      	sxtb	r3, r3
 80008d6:	089b      	lsrs	r3, r3, #2
 80008d8:	33c0      	adds	r3, #192	; 0xc0
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	589b      	ldr	r3, [r3, r2]
 80008de:	1dfa      	adds	r2, r7, #7
 80008e0:	7812      	ldrb	r2, [r2, #0]
 80008e2:	0011      	movs	r1, r2
 80008e4:	2203      	movs	r2, #3
 80008e6:	400a      	ands	r2, r1
 80008e8:	00d2      	lsls	r2, r2, #3
 80008ea:	21ff      	movs	r1, #255	; 0xff
 80008ec:	4091      	lsls	r1, r2
 80008ee:	000a      	movs	r2, r1
 80008f0:	43d2      	mvns	r2, r2
 80008f2:	401a      	ands	r2, r3
 80008f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	019b      	lsls	r3, r3, #6
 80008fa:	22ff      	movs	r2, #255	; 0xff
 80008fc:	401a      	ands	r2, r3
 80008fe:	1dfb      	adds	r3, r7, #7
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	0018      	movs	r0, r3
 8000904:	2303      	movs	r3, #3
 8000906:	4003      	ands	r3, r0
 8000908:	00db      	lsls	r3, r3, #3
 800090a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800090c:	481f      	ldr	r0, [pc, #124]	; (800098c <__NVIC_SetPriority+0xd4>)
 800090e:	1dfb      	adds	r3, r7, #7
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	b25b      	sxtb	r3, r3
 8000914:	089b      	lsrs	r3, r3, #2
 8000916:	430a      	orrs	r2, r1
 8000918:	33c0      	adds	r3, #192	; 0xc0
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800091e:	e031      	b.n	8000984 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000920:	4a1b      	ldr	r2, [pc, #108]	; (8000990 <__NVIC_SetPriority+0xd8>)
 8000922:	1dfb      	adds	r3, r7, #7
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	0019      	movs	r1, r3
 8000928:	230f      	movs	r3, #15
 800092a:	400b      	ands	r3, r1
 800092c:	3b08      	subs	r3, #8
 800092e:	089b      	lsrs	r3, r3, #2
 8000930:	3306      	adds	r3, #6
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	18d3      	adds	r3, r2, r3
 8000936:	3304      	adds	r3, #4
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	1dfa      	adds	r2, r7, #7
 800093c:	7812      	ldrb	r2, [r2, #0]
 800093e:	0011      	movs	r1, r2
 8000940:	2203      	movs	r2, #3
 8000942:	400a      	ands	r2, r1
 8000944:	00d2      	lsls	r2, r2, #3
 8000946:	21ff      	movs	r1, #255	; 0xff
 8000948:	4091      	lsls	r1, r2
 800094a:	000a      	movs	r2, r1
 800094c:	43d2      	mvns	r2, r2
 800094e:	401a      	ands	r2, r3
 8000950:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	019b      	lsls	r3, r3, #6
 8000956:	22ff      	movs	r2, #255	; 0xff
 8000958:	401a      	ands	r2, r3
 800095a:	1dfb      	adds	r3, r7, #7
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	0018      	movs	r0, r3
 8000960:	2303      	movs	r3, #3
 8000962:	4003      	ands	r3, r0
 8000964:	00db      	lsls	r3, r3, #3
 8000966:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000968:	4809      	ldr	r0, [pc, #36]	; (8000990 <__NVIC_SetPriority+0xd8>)
 800096a:	1dfb      	adds	r3, r7, #7
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	001c      	movs	r4, r3
 8000970:	230f      	movs	r3, #15
 8000972:	4023      	ands	r3, r4
 8000974:	3b08      	subs	r3, #8
 8000976:	089b      	lsrs	r3, r3, #2
 8000978:	430a      	orrs	r2, r1
 800097a:	3306      	adds	r3, #6
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	18c3      	adds	r3, r0, r3
 8000980:	3304      	adds	r3, #4
 8000982:	601a      	str	r2, [r3, #0]
}
 8000984:	46c0      	nop			; (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	b003      	add	sp, #12
 800098a:	bd90      	pop	{r4, r7, pc}
 800098c:	e000e100 	.word	0xe000e100
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	1e5a      	subs	r2, r3, #1
 80009a0:	2380      	movs	r3, #128	; 0x80
 80009a2:	045b      	lsls	r3, r3, #17
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d301      	bcc.n	80009ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009a8:	2301      	movs	r3, #1
 80009aa:	e010      	b.n	80009ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ac:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <SysTick_Config+0x44>)
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	3a01      	subs	r2, #1
 80009b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009b4:	2301      	movs	r3, #1
 80009b6:	425b      	negs	r3, r3
 80009b8:	2103      	movs	r1, #3
 80009ba:	0018      	movs	r0, r3
 80009bc:	f7ff ff7c 	bl	80008b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <SysTick_Config+0x44>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009c6:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <SysTick_Config+0x44>)
 80009c8:	2207      	movs	r2, #7
 80009ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	0018      	movs	r0, r3
 80009d0:	46bd      	mov	sp, r7
 80009d2:	b002      	add	sp, #8
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	e000e010 	.word	0xe000e010

080009dc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60b9      	str	r1, [r7, #8]
 80009e4:	607a      	str	r2, [r7, #4]
 80009e6:	210f      	movs	r1, #15
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	1c02      	adds	r2, r0, #0
 80009ec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009ee:	68ba      	ldr	r2, [r7, #8]
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b25b      	sxtb	r3, r3
 80009f6:	0011      	movs	r1, r2
 80009f8:	0018      	movs	r0, r3
 80009fa:	f7ff ff5d 	bl	80008b8 <__NVIC_SetPriority>
}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	b004      	add	sp, #16
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	0002      	movs	r2, r0
 8000a0e:	1dfb      	adds	r3, r7, #7
 8000a10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a12:	1dfb      	adds	r3, r7, #7
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	b25b      	sxtb	r3, r3
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f7ff ff33 	bl	8000884 <__NVIC_EnableIRQ>
}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	46bd      	mov	sp, r7
 8000a22:	b002      	add	sp, #8
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b082      	sub	sp, #8
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	0018      	movs	r0, r3
 8000a32:	f7ff ffaf 	bl	8000994 <SysTick_Config>
 8000a36:	0003      	movs	r3, r0
}
 8000a38:	0018      	movs	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	b002      	add	sp, #8
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a42:	b08b      	sub	sp, #44	; 0x2c
 8000a44:	af06      	add	r7, sp, #24
 8000a46:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d101      	bne.n	8000a52 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e0f0      	b.n	8000c34 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a79      	ldr	r2, [pc, #484]	; (8000c3c <HAL_PCD_Init+0x1fc>)
 8000a56:	5c9b      	ldrb	r3, [r3, r2]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d108      	bne.n	8000a70 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	23aa      	movs	r3, #170	; 0xaa
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	2100      	movs	r1, #0
 8000a66:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f006 fb34 	bl	80070d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4a72      	ldr	r2, [pc, #456]	; (8000c3c <HAL_PCD_Init+0x1fc>)
 8000a74:	2103      	movs	r1, #3
 8000a76:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f002 fd6d 	bl	800355c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a82:	230f      	movs	r3, #15
 8000a84:	18fb      	adds	r3, r7, r3
 8000a86:	2200      	movs	r2, #0
 8000a88:	701a      	strb	r2, [r3, #0]
 8000a8a:	e049      	b.n	8000b20 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000a8c:	200f      	movs	r0, #15
 8000a8e:	183b      	adds	r3, r7, r0
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	6879      	ldr	r1, [r7, #4]
 8000a94:	1c5a      	adds	r2, r3, #1
 8000a96:	0013      	movs	r3, r2
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	189b      	adds	r3, r3, r2
 8000a9c:	00db      	lsls	r3, r3, #3
 8000a9e:	18cb      	adds	r3, r1, r3
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000aa6:	183b      	adds	r3, r7, r0
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	1c5a      	adds	r2, r3, #1
 8000aae:	0013      	movs	r3, r2
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	189b      	adds	r3, r3, r2
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	183a      	adds	r2, r7, r0
 8000ab8:	7812      	ldrb	r2, [r2, #0]
 8000aba:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000abc:	183b      	adds	r3, r7, r0
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	6879      	ldr	r1, [r7, #4]
 8000ac2:	1c5a      	adds	r2, r3, #1
 8000ac4:	0013      	movs	r3, r2
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	189b      	adds	r3, r3, r2
 8000aca:	00db      	lsls	r3, r3, #3
 8000acc:	18cb      	adds	r3, r1, r3
 8000ace:	3303      	adds	r3, #3
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ad4:	183b      	adds	r3, r7, r0
 8000ad6:	781a      	ldrb	r2, [r3, #0]
 8000ad8:	6879      	ldr	r1, [r7, #4]
 8000ada:	0013      	movs	r3, r2
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	189b      	adds	r3, r3, r2
 8000ae0:	00db      	lsls	r3, r3, #3
 8000ae2:	18cb      	adds	r3, r1, r3
 8000ae4:	3338      	adds	r3, #56	; 0x38
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000aea:	183b      	adds	r3, r7, r0
 8000aec:	781a      	ldrb	r2, [r3, #0]
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	0013      	movs	r3, r2
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	189b      	adds	r3, r3, r2
 8000af6:	00db      	lsls	r3, r3, #3
 8000af8:	18cb      	adds	r3, r1, r3
 8000afa:	333c      	adds	r3, #60	; 0x3c
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000b00:	183b      	adds	r3, r7, r0
 8000b02:	781a      	ldrb	r2, [r3, #0]
 8000b04:	6879      	ldr	r1, [r7, #4]
 8000b06:	0013      	movs	r3, r2
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	189b      	adds	r3, r3, r2
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	18cb      	adds	r3, r1, r3
 8000b10:	3340      	adds	r3, #64	; 0x40
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b16:	183b      	adds	r3, r7, r0
 8000b18:	781a      	ldrb	r2, [r3, #0]
 8000b1a:	183b      	adds	r3, r7, r0
 8000b1c:	3201      	adds	r2, #1
 8000b1e:	701a      	strb	r2, [r3, #0]
 8000b20:	210f      	movs	r1, #15
 8000b22:	187b      	adds	r3, r7, r1
 8000b24:	781a      	ldrb	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d3ae      	bcc.n	8000a8c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	2200      	movs	r2, #0
 8000b32:	701a      	strb	r2, [r3, #0]
 8000b34:	e056      	b.n	8000be4 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000b36:	240f      	movs	r4, #15
 8000b38:	193b      	adds	r3, r7, r4
 8000b3a:	781a      	ldrb	r2, [r3, #0]
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	236a      	movs	r3, #106	; 0x6a
 8000b40:	33ff      	adds	r3, #255	; 0xff
 8000b42:	0019      	movs	r1, r3
 8000b44:	0013      	movs	r3, r2
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	189b      	adds	r3, r3, r2
 8000b4a:	00db      	lsls	r3, r3, #3
 8000b4c:	18c3      	adds	r3, r0, r3
 8000b4e:	185b      	adds	r3, r3, r1
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000b54:	193b      	adds	r3, r7, r4
 8000b56:	781a      	ldrb	r2, [r3, #0]
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	23b4      	movs	r3, #180	; 0xb4
 8000b5c:	0059      	lsls	r1, r3, #1
 8000b5e:	0013      	movs	r3, r2
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	189b      	adds	r3, r3, r2
 8000b64:	00db      	lsls	r3, r3, #3
 8000b66:	18c3      	adds	r3, r0, r3
 8000b68:	185b      	adds	r3, r3, r1
 8000b6a:	193a      	adds	r2, r7, r4
 8000b6c:	7812      	ldrb	r2, [r2, #0]
 8000b6e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000b70:	193b      	adds	r3, r7, r4
 8000b72:	781a      	ldrb	r2, [r3, #0]
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	236c      	movs	r3, #108	; 0x6c
 8000b78:	33ff      	adds	r3, #255	; 0xff
 8000b7a:	0019      	movs	r1, r3
 8000b7c:	0013      	movs	r3, r2
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	189b      	adds	r3, r3, r2
 8000b82:	00db      	lsls	r3, r3, #3
 8000b84:	18c3      	adds	r3, r0, r3
 8000b86:	185b      	adds	r3, r3, r1
 8000b88:	2200      	movs	r2, #0
 8000b8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000b8c:	193b      	adds	r3, r7, r4
 8000b8e:	781a      	ldrb	r2, [r3, #0]
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	23bc      	movs	r3, #188	; 0xbc
 8000b94:	0059      	lsls	r1, r3, #1
 8000b96:	0013      	movs	r3, r2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	189b      	adds	r3, r3, r2
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	18c3      	adds	r3, r0, r3
 8000ba0:	185b      	adds	r3, r3, r1
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000ba6:	193b      	adds	r3, r7, r4
 8000ba8:	781a      	ldrb	r2, [r3, #0]
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	23be      	movs	r3, #190	; 0xbe
 8000bae:	0059      	lsls	r1, r3, #1
 8000bb0:	0013      	movs	r3, r2
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	189b      	adds	r3, r3, r2
 8000bb6:	00db      	lsls	r3, r3, #3
 8000bb8:	18c3      	adds	r3, r0, r3
 8000bba:	185b      	adds	r3, r3, r1
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000bc0:	193b      	adds	r3, r7, r4
 8000bc2:	781a      	ldrb	r2, [r3, #0]
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	23c0      	movs	r3, #192	; 0xc0
 8000bc8:	0059      	lsls	r1, r3, #1
 8000bca:	0013      	movs	r3, r2
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	189b      	adds	r3, r3, r2
 8000bd0:	00db      	lsls	r3, r3, #3
 8000bd2:	18c3      	adds	r3, r0, r3
 8000bd4:	185b      	adds	r3, r3, r1
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bda:	193b      	adds	r3, r7, r4
 8000bdc:	781a      	ldrb	r2, [r3, #0]
 8000bde:	193b      	adds	r3, r7, r4
 8000be0:	3201      	adds	r2, #1
 8000be2:	701a      	strb	r2, [r3, #0]
 8000be4:	230f      	movs	r3, #15
 8000be6:	18fb      	adds	r3, r7, r3
 8000be8:	781a      	ldrb	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d3a1      	bcc.n	8000b36 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6818      	ldr	r0, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	466a      	mov	r2, sp
 8000bfa:	0011      	movs	r1, r2
 8000bfc:	001a      	movs	r2, r3
 8000bfe:	3210      	adds	r2, #16
 8000c00:	ca70      	ldmia	r2!, {r4, r5, r6}
 8000c02:	c170      	stmia	r1!, {r4, r5, r6}
 8000c04:	ca30      	ldmia	r2!, {r4, r5}
 8000c06:	c130      	stmia	r1!, {r4, r5}
 8000c08:	6859      	ldr	r1, [r3, #4]
 8000c0a:	689a      	ldr	r2, [r3, #8]
 8000c0c:	68db      	ldr	r3, [r3, #12]
 8000c0e:	f002 fcbf 	bl	8003590 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2224      	movs	r2, #36	; 0x24
 8000c16:	2100      	movs	r1, #0
 8000c18:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a07      	ldr	r2, [pc, #28]	; (8000c3c <HAL_PCD_Init+0x1fc>)
 8000c1e:	2101      	movs	r1, #1
 8000c20:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	69db      	ldr	r3, [r3, #28]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d103      	bne.n	8000c32 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f001 fd09 	bl	8002644 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000c32:	2300      	movs	r3, #0
}
 8000c34:	0018      	movs	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b005      	add	sp, #20
 8000c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c3c:	000002a9 	.word	0x000002a9

08000c40 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	23aa      	movs	r3, #170	; 0xaa
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	5cd3      	ldrb	r3, [r2, r3]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d101      	bne.n	8000c58 <HAL_PCD_Start+0x18>
 8000c54:	2302      	movs	r3, #2
 8000c56:	e014      	b.n	8000c82 <HAL_PCD_Start+0x42>
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	23aa      	movs	r3, #170	; 0xaa
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	2101      	movs	r1, #1
 8000c60:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	0018      	movs	r0, r3
 8000c68:	f002 fc62 	bl	8003530 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	0018      	movs	r0, r3
 8000c72:	f004 fc65 	bl	8005540 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	23aa      	movs	r3, #170	; 0xaa
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	0018      	movs	r0, r3
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b002      	add	sp, #8
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f004 fc67 	bl	800556c <USB_ReadInterrupts>
 8000c9e:	0003      	movs	r3, r0
 8000ca0:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	2380      	movs	r3, #128	; 0x80
 8000ca6:	021b      	lsls	r3, r3, #8
 8000ca8:	4013      	ands	r3, r2
 8000caa:	d004      	beq.n	8000cb6 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f000 fb48 	bl	8001344 <PCD_EP_ISR_Handler>

    return;
 8000cb4:	e11d      	b.n	8000ef2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	2380      	movs	r3, #128	; 0x80
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	d015      	beq.n	8000cec <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2244      	movs	r2, #68	; 0x44
 8000cc6:	5a9b      	ldrh	r3, [r3, r2]
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	498a      	ldr	r1, [pc, #552]	; (8000ef8 <HAL_PCD_IRQHandler+0x26c>)
 8000cd0:	400a      	ands	r2, r1
 8000cd2:	b291      	uxth	r1, r2
 8000cd4:	2244      	movs	r2, #68	; 0x44
 8000cd6:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f006 fa7f 	bl	80071de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f000 f915 	bl	8000f14 <HAL_PCD_SetAddress>

    return;
 8000cea:	e102      	b.n	8000ef2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000cec:	68fa      	ldr	r2, [r7, #12]
 8000cee:	2380      	movs	r3, #128	; 0x80
 8000cf0:	01db      	lsls	r3, r3, #7
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	d00c      	beq.n	8000d10 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2244      	movs	r2, #68	; 0x44
 8000cfc:	5a9b      	ldrh	r3, [r3, r2]
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	497d      	ldr	r1, [pc, #500]	; (8000efc <HAL_PCD_IRQHandler+0x270>)
 8000d06:	400a      	ands	r2, r1
 8000d08:	b291      	uxth	r1, r2
 8000d0a:	2244      	movs	r2, #68	; 0x44
 8000d0c:	5299      	strh	r1, [r3, r2]

    return;
 8000d0e:	e0f0      	b.n	8000ef2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000d10:	68fa      	ldr	r2, [r7, #12]
 8000d12:	2380      	movs	r3, #128	; 0x80
 8000d14:	019b      	lsls	r3, r3, #6
 8000d16:	4013      	ands	r3, r2
 8000d18:	d00c      	beq.n	8000d34 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2244      	movs	r2, #68	; 0x44
 8000d20:	5a9b      	ldrh	r3, [r3, r2]
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4975      	ldr	r1, [pc, #468]	; (8000f00 <HAL_PCD_IRQHandler+0x274>)
 8000d2a:	400a      	ands	r2, r1
 8000d2c:	b291      	uxth	r1, r2
 8000d2e:	2244      	movs	r2, #68	; 0x44
 8000d30:	5299      	strh	r1, [r3, r2]

    return;
 8000d32:	e0de      	b.n	8000ef2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	2380      	movs	r3, #128	; 0x80
 8000d38:	015b      	lsls	r3, r3, #5
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	d038      	beq.n	8000db0 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2240      	movs	r2, #64	; 0x40
 8000d44:	5a9b      	ldrh	r3, [r3, r2]
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2104      	movs	r1, #4
 8000d4e:	438a      	bics	r2, r1
 8000d50:	b291      	uxth	r1, r2
 8000d52:	2240      	movs	r2, #64	; 0x40
 8000d54:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2240      	movs	r2, #64	; 0x40
 8000d5c:	5a9b      	ldrh	r3, [r3, r2]
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2108      	movs	r1, #8
 8000d66:	438a      	bics	r2, r1
 8000d68:	b291      	uxth	r1, r2
 8000d6a:	2240      	movs	r2, #64	; 0x40
 8000d6c:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	23b8      	movs	r3, #184	; 0xb8
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	5cd3      	ldrb	r3, [r2, r3]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d109      	bne.n	8000d8e <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	23b8      	movs	r3, #184	; 0xb8
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	2100      	movs	r1, #0
 8000d82:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2100      	movs	r1, #0
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f001 fc85 	bl	8002698 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	0018      	movs	r0, r3
 8000d92:	f006 fa65 	bl	8007260 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2244      	movs	r2, #68	; 0x44
 8000d9c:	5a9b      	ldrh	r3, [r3, r2]
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4957      	ldr	r1, [pc, #348]	; (8000f04 <HAL_PCD_IRQHandler+0x278>)
 8000da6:	400a      	ands	r2, r1
 8000da8:	b291      	uxth	r1, r2
 8000daa:	2244      	movs	r2, #68	; 0x44
 8000dac:	5299      	strh	r1, [r3, r2]

    return;
 8000dae:	e0a0      	b.n	8000ef2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000db0:	68fa      	ldr	r2, [r7, #12]
 8000db2:	2380      	movs	r3, #128	; 0x80
 8000db4:	011b      	lsls	r3, r3, #4
 8000db6:	4013      	ands	r3, r2
 8000db8:	d028      	beq.n	8000e0c <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2240      	movs	r2, #64	; 0x40
 8000dc0:	5a9b      	ldrh	r3, [r3, r2]
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2108      	movs	r1, #8
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	b291      	uxth	r1, r2
 8000dce:	2240      	movs	r2, #64	; 0x40
 8000dd0:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2244      	movs	r2, #68	; 0x44
 8000dd8:	5a9b      	ldrh	r3, [r3, r2]
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4949      	ldr	r1, [pc, #292]	; (8000f08 <HAL_PCD_IRQHandler+0x27c>)
 8000de2:	400a      	ands	r2, r1
 8000de4:	b291      	uxth	r1, r2
 8000de6:	2244      	movs	r2, #68	; 0x44
 8000de8:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2240      	movs	r2, #64	; 0x40
 8000df0:	5a9b      	ldrh	r3, [r3, r2]
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2104      	movs	r1, #4
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	b291      	uxth	r1, r2
 8000dfe:	2240      	movs	r2, #64	; 0x40
 8000e00:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	0018      	movs	r0, r3
 8000e06:	f006 fa0f 	bl	8007228 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000e0a:	e072      	b.n	8000ef2 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2280      	movs	r2, #128	; 0x80
 8000e10:	4013      	ands	r3, r2
 8000e12:	d046      	beq.n	8000ea2 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2244      	movs	r2, #68	; 0x44
 8000e1a:	5a9b      	ldrh	r3, [r3, r2]
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2180      	movs	r1, #128	; 0x80
 8000e24:	438a      	bics	r2, r1
 8000e26:	b291      	uxth	r1, r2
 8000e28:	2244      	movs	r2, #68	; 0x44
 8000e2a:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	23b8      	movs	r3, #184	; 0xb8
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	5cd3      	ldrb	r3, [r2, r3]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d12f      	bne.n	8000e98 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2240      	movs	r2, #64	; 0x40
 8000e3e:	5a9b      	ldrh	r3, [r3, r2]
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2104      	movs	r1, #4
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	b291      	uxth	r1, r2
 8000e4c:	2240      	movs	r2, #64	; 0x40
 8000e4e:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2240      	movs	r2, #64	; 0x40
 8000e56:	5a9b      	ldrh	r3, [r3, r2]
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2108      	movs	r1, #8
 8000e60:	430a      	orrs	r2, r1
 8000e62:	b291      	uxth	r1, r2
 8000e64:	2240      	movs	r2, #64	; 0x40
 8000e66:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	23b8      	movs	r3, #184	; 0xb8
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	2101      	movs	r1, #1
 8000e70:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2254      	movs	r2, #84	; 0x54
 8000e78:	5a9b      	ldrh	r3, [r3, r2]
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	089b      	lsrs	r3, r3, #2
 8000e7e:	223c      	movs	r2, #60	; 0x3c
 8000e80:	4013      	ands	r3, r2
 8000e82:	0019      	movs	r1, r3
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	23b9      	movs	r3, #185	; 0xb9
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2101      	movs	r1, #1
 8000e90:	0018      	movs	r0, r3
 8000e92:	f001 fc01 	bl	8002698 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8000e96:	e02c      	b.n	8000ef2 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f006 f9c4 	bl	8007228 <HAL_PCD_SuspendCallback>
    return;
 8000ea0:	e027      	b.n	8000ef2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	2380      	movs	r3, #128	; 0x80
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	d010      	beq.n	8000ece <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2244      	movs	r2, #68	; 0x44
 8000eb2:	5a9b      	ldrh	r3, [r3, r2]
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4914      	ldr	r1, [pc, #80]	; (8000f0c <HAL_PCD_IRQHandler+0x280>)
 8000ebc:	400a      	ands	r2, r1
 8000ebe:	b291      	uxth	r1, r2
 8000ec0:	2244      	movs	r2, #68	; 0x44
 8000ec2:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f006 f97a 	bl	80071c0 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000ecc:	e011      	b.n	8000ef2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	d00c      	beq.n	8000ef2 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2244      	movs	r2, #68	; 0x44
 8000ede:	5a9b      	ldrh	r3, [r3, r2]
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	490a      	ldr	r1, [pc, #40]	; (8000f10 <HAL_PCD_IRQHandler+0x284>)
 8000ee8:	400a      	ands	r2, r1
 8000eea:	b291      	uxth	r1, r2
 8000eec:	2244      	movs	r2, #68	; 0x44
 8000eee:	5299      	strh	r1, [r3, r2]

    return;
 8000ef0:	46c0      	nop			; (mov r8, r8)
  }
}
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b004      	add	sp, #16
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	fffffbff 	.word	0xfffffbff
 8000efc:	ffffbfff 	.word	0xffffbfff
 8000f00:	ffffdfff 	.word	0xffffdfff
 8000f04:	ffffefff 	.word	0xffffefff
 8000f08:	fffff7ff 	.word	0xfffff7ff
 8000f0c:	fffffdff 	.word	0xfffffdff
 8000f10:	fffffeff 	.word	0xfffffeff

08000f14 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	000a      	movs	r2, r1
 8000f1e:	1cfb      	adds	r3, r7, #3
 8000f20:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	23aa      	movs	r3, #170	; 0xaa
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	5cd3      	ldrb	r3, [r2, r3]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d101      	bne.n	8000f32 <HAL_PCD_SetAddress+0x1e>
 8000f2e:	2302      	movs	r3, #2
 8000f30:	e017      	b.n	8000f62 <HAL_PCD_SetAddress+0x4e>
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	23aa      	movs	r3, #170	; 0xaa
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	2101      	movs	r1, #1
 8000f3a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	1cfa      	adds	r2, r7, #3
 8000f40:	2124      	movs	r1, #36	; 0x24
 8000f42:	7812      	ldrb	r2, [r2, #0]
 8000f44:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	1cfb      	adds	r3, r7, #3
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	0019      	movs	r1, r3
 8000f50:	0010      	movs	r0, r2
 8000f52:	f004 fae1 	bl	8005518 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	23aa      	movs	r3, #170	; 0xaa
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	0018      	movs	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	b002      	add	sp, #8
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000f6a:	b590      	push	{r4, r7, lr}
 8000f6c:	b085      	sub	sp, #20
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	000c      	movs	r4, r1
 8000f74:	0010      	movs	r0, r2
 8000f76:	0019      	movs	r1, r3
 8000f78:	1cfb      	adds	r3, r7, #3
 8000f7a:	1c22      	adds	r2, r4, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
 8000f7e:	003b      	movs	r3, r7
 8000f80:	1c02      	adds	r2, r0, #0
 8000f82:	801a      	strh	r2, [r3, #0]
 8000f84:	1cbb      	adds	r3, r7, #2
 8000f86:	1c0a      	adds	r2, r1, #0
 8000f88:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000f8a:	230b      	movs	r3, #11
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000f92:	1cfb      	adds	r3, r7, #3
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	b25b      	sxtb	r3, r3
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	da0f      	bge.n	8000fbc <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f9c:	1cfb      	adds	r3, r7, #3
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2207      	movs	r2, #7
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	1c5a      	adds	r2, r3, #1
 8000fa6:	0013      	movs	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	189b      	adds	r3, r3, r2
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	18d3      	adds	r3, r2, r3
 8000fb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	705a      	strb	r2, [r3, #1]
 8000fba:	e00f      	b.n	8000fdc <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000fbc:	1cfb      	adds	r3, r7, #3
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	0013      	movs	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	189b      	adds	r3, r3, r2
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	3369      	adds	r3, #105	; 0x69
 8000fce:	33ff      	adds	r3, #255	; 0xff
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	18d3      	adds	r3, r2, r3
 8000fd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000fdc:	1cfb      	adds	r3, r7, #3
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2207      	movs	r2, #7
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000fea:	003b      	movs	r3, r7
 8000fec:	881a      	ldrh	r2, [r3, #0]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	1cba      	adds	r2, r7, #2
 8000ff6:	7812      	ldrb	r2, [r2, #0]
 8000ff8:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000ffa:	1cbb      	adds	r3, r7, #2
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d102      	bne.n	8001008 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	2200      	movs	r2, #0
 8001006:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	23aa      	movs	r3, #170	; 0xaa
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	5cd3      	ldrb	r3, [r2, r3]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d101      	bne.n	8001018 <HAL_PCD_EP_Open+0xae>
 8001014:	2302      	movs	r3, #2
 8001016:	e013      	b.n	8001040 <HAL_PCD_EP_Open+0xd6>
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	23aa      	movs	r3, #170	; 0xaa
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	2101      	movs	r1, #1
 8001020:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	0011      	movs	r1, r2
 800102a:	0018      	movs	r0, r3
 800102c:	f002 fad8 	bl	80035e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	23aa      	movs	r3, #170	; 0xaa
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	2100      	movs	r1, #0
 8001038:	54d1      	strb	r1, [r2, r3]

  return ret;
 800103a:	230b      	movs	r3, #11
 800103c:	18fb      	adds	r3, r7, r3
 800103e:	781b      	ldrb	r3, [r3, #0]
}
 8001040:	0018      	movs	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	b005      	add	sp, #20
 8001046:	bd90      	pop	{r4, r7, pc}

08001048 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	000a      	movs	r2, r1
 8001052:	1cfb      	adds	r3, r7, #3
 8001054:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001056:	1cfb      	adds	r3, r7, #3
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	b25b      	sxtb	r3, r3
 800105c:	2b00      	cmp	r3, #0
 800105e:	da0f      	bge.n	8001080 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001060:	1cfb      	adds	r3, r7, #3
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2207      	movs	r2, #7
 8001066:	4013      	ands	r3, r2
 8001068:	1c5a      	adds	r2, r3, #1
 800106a:	0013      	movs	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	189b      	adds	r3, r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	18d3      	adds	r3, r2, r3
 8001076:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2201      	movs	r2, #1
 800107c:	705a      	strb	r2, [r3, #1]
 800107e:	e00f      	b.n	80010a0 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001080:	1cfb      	adds	r3, r7, #3
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2207      	movs	r2, #7
 8001086:	401a      	ands	r2, r3
 8001088:	0013      	movs	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	189b      	adds	r3, r3, r2
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	3369      	adds	r3, #105	; 0x69
 8001092:	33ff      	adds	r3, #255	; 0xff
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	18d3      	adds	r3, r2, r3
 8001098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2200      	movs	r2, #0
 800109e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80010a0:	1cfb      	adds	r3, r7, #3
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2207      	movs	r2, #7
 80010a6:	4013      	ands	r3, r2
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	23aa      	movs	r3, #170	; 0xaa
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	5cd3      	ldrb	r3, [r2, r3]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d101      	bne.n	80010be <HAL_PCD_EP_Close+0x76>
 80010ba:	2302      	movs	r3, #2
 80010bc:	e011      	b.n	80010e2 <HAL_PCD_EP_Close+0x9a>
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	23aa      	movs	r3, #170	; 0xaa
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	2101      	movs	r1, #1
 80010c6:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	0011      	movs	r1, r2
 80010d0:	0018      	movs	r0, r3
 80010d2:	f002 fe27 	bl	8003d24 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	23aa      	movs	r3, #170	; 0xaa
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	2100      	movs	r1, #0
 80010de:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	0018      	movs	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	b004      	add	sp, #16
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b086      	sub	sp, #24
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	60f8      	str	r0, [r7, #12]
 80010f2:	607a      	str	r2, [r7, #4]
 80010f4:	603b      	str	r3, [r7, #0]
 80010f6:	200b      	movs	r0, #11
 80010f8:	183b      	adds	r3, r7, r0
 80010fa:	1c0a      	adds	r2, r1, #0
 80010fc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010fe:	0001      	movs	r1, r0
 8001100:	187b      	adds	r3, r7, r1
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2207      	movs	r2, #7
 8001106:	401a      	ands	r2, r3
 8001108:	0013      	movs	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	189b      	adds	r3, r3, r2
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	3369      	adds	r3, #105	; 0x69
 8001112:	33ff      	adds	r3, #255	; 0xff
 8001114:	68fa      	ldr	r2, [r7, #12]
 8001116:	18d3      	adds	r3, r2, r3
 8001118:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	683a      	ldr	r2, [r7, #0]
 8001124:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	2200      	movs	r2, #0
 800112a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	2200      	movs	r2, #0
 8001130:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001132:	187b      	adds	r3, r7, r1
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2207      	movs	r2, #7
 8001138:	4013      	ands	r3, r2
 800113a:	b2da      	uxtb	r2, r3
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	0011      	movs	r1, r2
 8001148:	0018      	movs	r0, r3
 800114a:	f002 ffab 	bl	80040a4 <USB_EPStartXfer>

  return HAL_OK;
 800114e:	2300      	movs	r3, #0
}
 8001150:	0018      	movs	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	b006      	add	sp, #24
 8001156:	bd80      	pop	{r7, pc}

08001158 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	607a      	str	r2, [r7, #4]
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	200b      	movs	r0, #11
 8001166:	183b      	adds	r3, r7, r0
 8001168:	1c0a      	adds	r2, r1, #0
 800116a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800116c:	183b      	adds	r3, r7, r0
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2207      	movs	r2, #7
 8001172:	4013      	ands	r3, r2
 8001174:	1c5a      	adds	r2, r3, #1
 8001176:	0013      	movs	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	189b      	adds	r3, r3, r2
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	18d3      	adds	r3, r2, r3
 8001182:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	2224      	movs	r2, #36	; 0x24
 8001194:	2101      	movs	r1, #1
 8001196:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	2200      	movs	r2, #0
 80011a2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	2201      	movs	r2, #1
 80011a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80011aa:	183b      	adds	r3, r7, r0
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2207      	movs	r2, #7
 80011b0:	4013      	ands	r3, r2
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	697a      	ldr	r2, [r7, #20]
 80011be:	0011      	movs	r1, r2
 80011c0:	0018      	movs	r0, r3
 80011c2:	f002 ff6f 	bl	80040a4 <USB_EPStartXfer>

  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	0018      	movs	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	b006      	add	sp, #24
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	000a      	movs	r2, r1
 80011da:	1cfb      	adds	r3, r7, #3
 80011dc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80011de:	1cfb      	adds	r3, r7, #3
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2207      	movs	r2, #7
 80011e4:	401a      	ands	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d901      	bls.n	80011f2 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e046      	b.n	8001280 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80011f2:	1cfb      	adds	r3, r7, #3
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	b25b      	sxtb	r3, r3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	da0f      	bge.n	800121c <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011fc:	1cfb      	adds	r3, r7, #3
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2207      	movs	r2, #7
 8001202:	4013      	ands	r3, r2
 8001204:	1c5a      	adds	r2, r3, #1
 8001206:	0013      	movs	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	189b      	adds	r3, r3, r2
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	18d3      	adds	r3, r2, r3
 8001212:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2201      	movs	r2, #1
 8001218:	705a      	strb	r2, [r3, #1]
 800121a:	e00d      	b.n	8001238 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800121c:	1cfb      	adds	r3, r7, #3
 800121e:	781a      	ldrb	r2, [r3, #0]
 8001220:	0013      	movs	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	189b      	adds	r3, r3, r2
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	3369      	adds	r3, #105	; 0x69
 800122a:	33ff      	adds	r3, #255	; 0xff
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	18d3      	adds	r3, r2, r3
 8001230:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2200      	movs	r2, #0
 8001236:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2201      	movs	r2, #1
 800123c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800123e:	1cfb      	adds	r3, r7, #3
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2207      	movs	r2, #7
 8001244:	4013      	ands	r3, r2
 8001246:	b2da      	uxtb	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	23aa      	movs	r3, #170	; 0xaa
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	5cd3      	ldrb	r3, [r2, r3]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d101      	bne.n	800125c <HAL_PCD_EP_SetStall+0x8c>
 8001258:	2302      	movs	r3, #2
 800125a:	e011      	b.n	8001280 <HAL_PCD_EP_SetStall+0xb0>
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	23aa      	movs	r3, #170	; 0xaa
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	2101      	movs	r1, #1
 8001264:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	0011      	movs	r1, r2
 800126e:	0018      	movs	r0, r3
 8001270:	f004 f850 	bl	8005314 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	23aa      	movs	r3, #170	; 0xaa
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	2100      	movs	r1, #0
 800127c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800127e:	2300      	movs	r3, #0
}
 8001280:	0018      	movs	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	b004      	add	sp, #16
 8001286:	bd80      	pop	{r7, pc}

08001288 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	000a      	movs	r2, r1
 8001292:	1cfb      	adds	r3, r7, #3
 8001294:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001296:	1cfb      	adds	r3, r7, #3
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	220f      	movs	r2, #15
 800129c:	401a      	ands	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d901      	bls.n	80012aa <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e048      	b.n	800133c <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80012aa:	1cfb      	adds	r3, r7, #3
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	b25b      	sxtb	r3, r3
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	da0f      	bge.n	80012d4 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012b4:	1cfb      	adds	r3, r7, #3
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2207      	movs	r2, #7
 80012ba:	4013      	ands	r3, r2
 80012bc:	1c5a      	adds	r2, r3, #1
 80012be:	0013      	movs	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	189b      	adds	r3, r3, r2
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	18d3      	adds	r3, r2, r3
 80012ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2201      	movs	r2, #1
 80012d0:	705a      	strb	r2, [r3, #1]
 80012d2:	e00f      	b.n	80012f4 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012d4:	1cfb      	adds	r3, r7, #3
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2207      	movs	r2, #7
 80012da:	401a      	ands	r2, r3
 80012dc:	0013      	movs	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	189b      	adds	r3, r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	3369      	adds	r3, #105	; 0x69
 80012e6:	33ff      	adds	r3, #255	; 0xff
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	18d3      	adds	r3, r2, r3
 80012ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2200      	movs	r2, #0
 80012f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2200      	movs	r2, #0
 80012f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012fa:	1cfb      	adds	r3, r7, #3
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2207      	movs	r2, #7
 8001300:	4013      	ands	r3, r2
 8001302:	b2da      	uxtb	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	23aa      	movs	r3, #170	; 0xaa
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	5cd3      	ldrb	r3, [r2, r3]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d101      	bne.n	8001318 <HAL_PCD_EP_ClrStall+0x90>
 8001314:	2302      	movs	r3, #2
 8001316:	e011      	b.n	800133c <HAL_PCD_EP_ClrStall+0xb4>
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	23aa      	movs	r3, #170	; 0xaa
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	2101      	movs	r1, #1
 8001320:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	0011      	movs	r1, r2
 800132a:	0018      	movs	r0, r3
 800132c:	f004 f842 	bl	80053b4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	23aa      	movs	r3, #170	; 0xaa
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	2100      	movs	r1, #0
 8001338:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800133a:	2300      	movs	r3, #0
}
 800133c:	0018      	movs	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	b004      	add	sp, #16
 8001342:	bd80      	pop	{r7, pc}

08001344 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001344:	b5b0      	push	{r4, r5, r7, lr}
 8001346:	b096      	sub	sp, #88	; 0x58
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800134c:	f000 fbec 	bl	8001b28 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	204e      	movs	r0, #78	; 0x4e
 8001356:	183b      	adds	r3, r7, r0
 8001358:	2144      	movs	r1, #68	; 0x44
 800135a:	5a52      	ldrh	r2, [r2, r1]
 800135c:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800135e:	183b      	adds	r3, r7, r0
 8001360:	881b      	ldrh	r3, [r3, #0]
 8001362:	b2da      	uxtb	r2, r3
 8001364:	244d      	movs	r4, #77	; 0x4d
 8001366:	193b      	adds	r3, r7, r4
 8001368:	210f      	movs	r1, #15
 800136a:	400a      	ands	r2, r1
 800136c:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800136e:	193b      	adds	r3, r7, r4
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d000      	beq.n	8001378 <PCD_EP_ISR_Handler+0x34>
 8001376:	e18f      	b.n	8001698 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001378:	183b      	adds	r3, r7, r0
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	2210      	movs	r2, #16
 800137e:	4013      	ands	r3, r2
 8001380:	d155      	bne.n	800142e <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	b29a      	uxth	r2, r3
 800138a:	200e      	movs	r0, #14
 800138c:	183b      	adds	r3, r7, r0
 800138e:	49bb      	ldr	r1, [pc, #748]	; (800167c <PCD_EP_ISR_Handler+0x338>)
 8001390:	400a      	ands	r2, r1
 8001392:	801a      	strh	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	183a      	adds	r2, r7, r0
 800139a:	8812      	ldrh	r2, [r2, #0]
 800139c:	49b8      	ldr	r1, [pc, #736]	; (8001680 <PCD_EP_ISR_Handler+0x33c>)
 800139e:	430a      	orrs	r2, r1
 80013a0:	b292      	uxth	r2, r2
 80013a2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3328      	adds	r3, #40	; 0x28
 80013a8:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2250      	movs	r2, #80	; 0x50
 80013b0:	5a9b      	ldrh	r3, [r3, r2]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	001a      	movs	r2, r3
 80013b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	18d2      	adds	r2, r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	18d3      	adds	r3, r2, r3
 80013c4:	4aaf      	ldr	r2, [pc, #700]	; (8001684 <PCD_EP_ISR_Handler+0x340>)
 80013c6:	4694      	mov	ip, r2
 80013c8:	4463      	add	r3, ip
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	059b      	lsls	r3, r3, #22
 80013ce:	0d9a      	lsrs	r2, r3, #22
 80013d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013d2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80013d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013d6:	695a      	ldr	r2, [r3, #20]
 80013d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013da:	69db      	ldr	r3, [r3, #28]
 80013dc:	18d2      	adds	r2, r2, r3
 80013de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013e0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2100      	movs	r1, #0
 80013e6:	0018      	movs	r0, r3
 80013e8:	f005 fecc 	bl	8007184 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2224      	movs	r2, #36	; 0x24
 80013f0:	5c9b      	ldrb	r3, [r3, r2]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d101      	bne.n	80013fc <PCD_EP_ISR_Handler+0xb8>
 80013f8:	f000 fb96 	bl	8001b28 <PCD_EP_ISR_Handler+0x7e4>
 80013fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <PCD_EP_ISR_Handler+0xc4>
 8001404:	f000 fb90 	bl	8001b28 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2224      	movs	r2, #36	; 0x24
 800140c:	5c9b      	ldrb	r3, [r3, r2]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2280      	movs	r2, #128	; 0x80
 8001412:	4252      	negs	r2, r2
 8001414:	4313      	orrs	r3, r2
 8001416:	b2da      	uxtb	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	b291      	uxth	r1, r2
 800141e:	224c      	movs	r2, #76	; 0x4c
 8001420:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2224      	movs	r2, #36	; 0x24
 8001426:	2100      	movs	r1, #0
 8001428:	5499      	strb	r1, [r3, r2]
 800142a:	f000 fb7d 	bl	8001b28 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3369      	adds	r3, #105	; 0x69
 8001432:	33ff      	adds	r3, #255	; 0xff
 8001434:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	214a      	movs	r1, #74	; 0x4a
 800143c:	187b      	adds	r3, r7, r1
 800143e:	8812      	ldrh	r2, [r2, #0]
 8001440:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001442:	187b      	adds	r3, r7, r1
 8001444:	881a      	ldrh	r2, [r3, #0]
 8001446:	2380      	movs	r3, #128	; 0x80
 8001448:	011b      	lsls	r3, r3, #4
 800144a:	4013      	ands	r3, r2
 800144c:	d037      	beq.n	80014be <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2250      	movs	r2, #80	; 0x50
 8001454:	5a9b      	ldrh	r3, [r3, r2]
 8001456:	b29b      	uxth	r3, r3
 8001458:	001a      	movs	r2, r3
 800145a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	18d2      	adds	r2, r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	18d3      	adds	r3, r2, r3
 8001468:	4a87      	ldr	r2, [pc, #540]	; (8001688 <PCD_EP_ISR_Handler+0x344>)
 800146a:	4694      	mov	ip, r2
 800146c:	4463      	add	r3, ip
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	059b      	lsls	r3, r3, #22
 8001472:	0d9a      	lsrs	r2, r3, #22
 8001474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001476:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6818      	ldr	r0, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	22ac      	movs	r2, #172	; 0xac
 8001480:	0092      	lsls	r2, r2, #2
 8001482:	1899      	adds	r1, r3, r2
 8001484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001486:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800148a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800148c:	b29b      	uxth	r3, r3
 800148e:	f004 f8c4 	bl	800561a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	b29a      	uxth	r2, r3
 800149a:	2010      	movs	r0, #16
 800149c:	183b      	adds	r3, r7, r0
 800149e:	497b      	ldr	r1, [pc, #492]	; (800168c <PCD_EP_ISR_Handler+0x348>)
 80014a0:	400a      	ands	r2, r1
 80014a2:	801a      	strh	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	183a      	adds	r2, r7, r0
 80014aa:	8812      	ldrh	r2, [r2, #0]
 80014ac:	2180      	movs	r1, #128	; 0x80
 80014ae:	430a      	orrs	r2, r1
 80014b0:	b292      	uxth	r2, r2
 80014b2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	0018      	movs	r0, r3
 80014b8:	f005 fe2e 	bl	8007118 <HAL_PCD_SetupStageCallback>
 80014bc:	e334      	b.n	8001b28 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80014be:	234a      	movs	r3, #74	; 0x4a
 80014c0:	18fb      	adds	r3, r7, r3
 80014c2:	2200      	movs	r2, #0
 80014c4:	5e9b      	ldrsh	r3, [r3, r2]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	db00      	blt.n	80014cc <PCD_EP_ISR_Handler+0x188>
 80014ca:	e32d      	b.n	8001b28 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	201e      	movs	r0, #30
 80014d6:	183b      	adds	r3, r7, r0
 80014d8:	496c      	ldr	r1, [pc, #432]	; (800168c <PCD_EP_ISR_Handler+0x348>)
 80014da:	400a      	ands	r2, r1
 80014dc:	801a      	strh	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	183a      	adds	r2, r7, r0
 80014e4:	8812      	ldrh	r2, [r2, #0]
 80014e6:	2180      	movs	r1, #128	; 0x80
 80014e8:	430a      	orrs	r2, r1
 80014ea:	b292      	uxth	r2, r2
 80014ec:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2250      	movs	r2, #80	; 0x50
 80014f4:	5a9b      	ldrh	r3, [r3, r2]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	001a      	movs	r2, r3
 80014fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	18d2      	adds	r2, r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	18d3      	adds	r3, r2, r3
 8001508:	4a5f      	ldr	r2, [pc, #380]	; (8001688 <PCD_EP_ISR_Handler+0x344>)
 800150a:	4694      	mov	ip, r2
 800150c:	4463      	add	r3, ip
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	059b      	lsls	r3, r3, #22
 8001512:	0d9a      	lsrs	r2, r3, #22
 8001514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001516:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d01a      	beq.n	8001556 <PCD_EP_ISR_Handler+0x212>
 8001520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d016      	beq.n	8001556 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6818      	ldr	r0, [r3, #0]
 800152c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800152e:	6959      	ldr	r1, [r3, #20]
 8001530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001532:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001534:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001536:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001538:	b29b      	uxth	r3, r3
 800153a:	f004 f86e 	bl	800561a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800153e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001540:	695a      	ldr	r2, [r3, #20]
 8001542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	18d2      	adds	r2, r2, r3
 8001548:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800154a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2100      	movs	r1, #0
 8001550:	0018      	movs	r0, r3
 8001552:	f005 fdf6 	bl	8007142 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	214a      	movs	r1, #74	; 0x4a
 800155c:	187b      	adds	r3, r7, r1
 800155e:	8812      	ldrh	r2, [r2, #0]
 8001560:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001562:	187b      	adds	r3, r7, r1
 8001564:	881a      	ldrh	r2, [r3, #0]
 8001566:	2380      	movs	r3, #128	; 0x80
 8001568:	011b      	lsls	r3, r3, #4
 800156a:	4013      	ands	r3, r2
 800156c:	d000      	beq.n	8001570 <PCD_EP_ISR_Handler+0x22c>
 800156e:	e2db      	b.n	8001b28 <PCD_EP_ISR_Handler+0x7e4>
 8001570:	187b      	adds	r3, r7, r1
 8001572:	881a      	ldrh	r2, [r3, #0]
 8001574:	23c0      	movs	r3, #192	; 0xc0
 8001576:	019b      	lsls	r3, r3, #6
 8001578:	401a      	ands	r2, r3
 800157a:	23c0      	movs	r3, #192	; 0xc0
 800157c:	019b      	lsls	r3, r3, #6
 800157e:	429a      	cmp	r2, r3
 8001580:	d100      	bne.n	8001584 <PCD_EP_ISR_Handler+0x240>
 8001582:	e2d1      	b.n	8001b28 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	61bb      	str	r3, [r7, #24]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2250      	movs	r2, #80	; 0x50
 8001590:	5a9b      	ldrh	r3, [r3, r2]
 8001592:	b29b      	uxth	r3, r3
 8001594:	001a      	movs	r2, r3
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	189b      	adds	r3, r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	4a3a      	ldr	r2, [pc, #232]	; (8001688 <PCD_EP_ISR_Handler+0x344>)
 80015a0:	4694      	mov	ip, r2
 80015a2:	4463      	add	r3, ip
 80015a4:	617b      	str	r3, [r7, #20]
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	059b      	lsls	r3, r3, #22
 80015ae:	0d9b      	lsrs	r3, r3, #22
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	801a      	strh	r2, [r3, #0]
 80015b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	2b3e      	cmp	r3, #62	; 0x3e
 80015bc:	d91a      	bls.n	80015f4 <PCD_EP_ISR_Handler+0x2b0>
 80015be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	095b      	lsrs	r3, r3, #5
 80015c4:	647b      	str	r3, [r7, #68]	; 0x44
 80015c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	221f      	movs	r2, #31
 80015cc:	4013      	ands	r3, r2
 80015ce:	d102      	bne.n	80015d6 <PCD_EP_ISR_Handler+0x292>
 80015d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015d2:	3b01      	subs	r3, #1
 80015d4:	647b      	str	r3, [r7, #68]	; 0x44
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	b29a      	uxth	r2, r3
 80015dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015de:	b29b      	uxth	r3, r3
 80015e0:	029b      	lsls	r3, r3, #10
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	4a25      	ldr	r2, [pc, #148]	; (8001680 <PCD_EP_ISR_Handler+0x33c>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	801a      	strh	r2, [r3, #0]
 80015f2:	e023      	b.n	800163c <PCD_EP_ISR_Handler+0x2f8>
 80015f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d108      	bne.n	800160e <PCD_EP_ISR_Handler+0x2ca>
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	881b      	ldrh	r3, [r3, #0]
 8001600:	b29b      	uxth	r3, r3
 8001602:	4a1f      	ldr	r2, [pc, #124]	; (8001680 <PCD_EP_ISR_Handler+0x33c>)
 8001604:	4313      	orrs	r3, r2
 8001606:	b29a      	uxth	r2, r3
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	801a      	strh	r2, [r3, #0]
 800160c:	e016      	b.n	800163c <PCD_EP_ISR_Handler+0x2f8>
 800160e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	085b      	lsrs	r3, r3, #1
 8001614:	647b      	str	r3, [r7, #68]	; 0x44
 8001616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	2201      	movs	r2, #1
 800161c:	4013      	ands	r3, r2
 800161e:	d002      	beq.n	8001626 <PCD_EP_ISR_Handler+0x2e2>
 8001620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001622:	3301      	adds	r3, #1
 8001624:	647b      	str	r3, [r7, #68]	; 0x44
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	b29a      	uxth	r2, r3
 800162c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800162e:	b29b      	uxth	r3, r3
 8001630:	029b      	lsls	r3, r3, #10
 8001632:	b29b      	uxth	r3, r3
 8001634:	4313      	orrs	r3, r2
 8001636:	b29a      	uxth	r2, r3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	b29a      	uxth	r2, r3
 8001644:	2012      	movs	r0, #18
 8001646:	183b      	adds	r3, r7, r0
 8001648:	4911      	ldr	r1, [pc, #68]	; (8001690 <PCD_EP_ISR_Handler+0x34c>)
 800164a:	400a      	ands	r2, r1
 800164c:	801a      	strh	r2, [r3, #0]
 800164e:	183b      	adds	r3, r7, r0
 8001650:	183a      	adds	r2, r7, r0
 8001652:	8812      	ldrh	r2, [r2, #0]
 8001654:	2180      	movs	r1, #128	; 0x80
 8001656:	0149      	lsls	r1, r1, #5
 8001658:	404a      	eors	r2, r1
 800165a:	801a      	strh	r2, [r3, #0]
 800165c:	183b      	adds	r3, r7, r0
 800165e:	183a      	adds	r2, r7, r0
 8001660:	8812      	ldrh	r2, [r2, #0]
 8001662:	2180      	movs	r1, #128	; 0x80
 8001664:	0189      	lsls	r1, r1, #6
 8001666:	404a      	eors	r2, r1
 8001668:	801a      	strh	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	183a      	adds	r2, r7, r0
 8001670:	8812      	ldrh	r2, [r2, #0]
 8001672:	4908      	ldr	r1, [pc, #32]	; (8001694 <PCD_EP_ISR_Handler+0x350>)
 8001674:	430a      	orrs	r2, r1
 8001676:	b292      	uxth	r2, r2
 8001678:	801a      	strh	r2, [r3, #0]
 800167a:	e255      	b.n	8001b28 <PCD_EP_ISR_Handler+0x7e4>
 800167c:	ffff8f0f 	.word	0xffff8f0f
 8001680:	ffff8000 	.word	0xffff8000
 8001684:	00000402 	.word	0x00000402
 8001688:	00000406 	.word	0x00000406
 800168c:	00000f8f 	.word	0x00000f8f
 8001690:	ffffbf8f 	.word	0xffffbf8f
 8001694:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	001a      	movs	r2, r3
 800169e:	204d      	movs	r0, #77	; 0x4d
 80016a0:	183b      	adds	r3, r7, r0
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	18d2      	adds	r2, r2, r3
 80016a8:	214a      	movs	r1, #74	; 0x4a
 80016aa:	187b      	adds	r3, r7, r1
 80016ac:	8812      	ldrh	r2, [r2, #0]
 80016ae:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80016b0:	187b      	adds	r3, r7, r1
 80016b2:	2200      	movs	r2, #0
 80016b4:	5e9b      	ldrsh	r3, [r3, r2]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	db00      	blt.n	80016bc <PCD_EP_ISR_Handler+0x378>
 80016ba:	e0fa      	b.n	80018b2 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	001a      	movs	r2, r3
 80016c2:	183b      	adds	r3, r7, r0
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	18d3      	adds	r3, r2, r3
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	2448      	movs	r4, #72	; 0x48
 80016d0:	193b      	adds	r3, r7, r4
 80016d2:	49d1      	ldr	r1, [pc, #836]	; (8001a18 <PCD_EP_ISR_Handler+0x6d4>)
 80016d4:	400a      	ands	r2, r1
 80016d6:	801a      	strh	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	001a      	movs	r2, r3
 80016de:	183b      	adds	r3, r7, r0
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	18d3      	adds	r3, r2, r3
 80016e6:	193a      	adds	r2, r7, r4
 80016e8:	8812      	ldrh	r2, [r2, #0]
 80016ea:	2180      	movs	r1, #128	; 0x80
 80016ec:	430a      	orrs	r2, r1
 80016ee:	b292      	uxth	r2, r2
 80016f0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80016f2:	183b      	adds	r3, r7, r0
 80016f4:	781a      	ldrb	r2, [r3, #0]
 80016f6:	0013      	movs	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	189b      	adds	r3, r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	3369      	adds	r3, #105	; 0x69
 8001700:	33ff      	adds	r3, #255	; 0xff
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	18d3      	adds	r3, r2, r3
 8001706:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001708:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800170a:	7b1b      	ldrb	r3, [r3, #12]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d125      	bne.n	800175c <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2250      	movs	r2, #80	; 0x50
 8001716:	5a9b      	ldrh	r3, [r3, r2]
 8001718:	b29b      	uxth	r3, r3
 800171a:	001a      	movs	r2, r3
 800171c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	18d2      	adds	r2, r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	18d3      	adds	r3, r2, r3
 800172a:	4abc      	ldr	r2, [pc, #752]	; (8001a1c <PCD_EP_ISR_Handler+0x6d8>)
 800172c:	4694      	mov	ip, r2
 800172e:	4463      	add	r3, ip
 8001730:	881a      	ldrh	r2, [r3, #0]
 8001732:	2450      	movs	r4, #80	; 0x50
 8001734:	193b      	adds	r3, r7, r4
 8001736:	0592      	lsls	r2, r2, #22
 8001738:	0d92      	lsrs	r2, r2, #22
 800173a:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 800173c:	193b      	adds	r3, r7, r4
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d100      	bne.n	8001746 <PCD_EP_ISR_Handler+0x402>
 8001744:	e08d      	b.n	8001862 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6818      	ldr	r0, [r3, #0]
 800174a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800174c:	6959      	ldr	r1, [r3, #20]
 800174e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001750:	88da      	ldrh	r2, [r3, #6]
 8001752:	193b      	adds	r3, r7, r4
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	f003 ff60 	bl	800561a <USB_ReadPMA>
 800175a:	e082      	b.n	8001862 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800175c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800175e:	78db      	ldrb	r3, [r3, #3]
 8001760:	2b02      	cmp	r3, #2
 8001762:	d10c      	bne.n	800177e <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001764:	2350      	movs	r3, #80	; 0x50
 8001766:	18fc      	adds	r4, r7, r3
 8001768:	234a      	movs	r3, #74	; 0x4a
 800176a:	18fb      	adds	r3, r7, r3
 800176c:	881a      	ldrh	r2, [r3, #0]
 800176e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	0018      	movs	r0, r3
 8001774:	f000 f9ec 	bl	8001b50 <HAL_PCD_EP_DB_Receive>
 8001778:	0003      	movs	r3, r0
 800177a:	8023      	strh	r3, [r4, #0]
 800177c:	e071      	b.n	8001862 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	001a      	movs	r2, r3
 8001784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	18d3      	adds	r3, r2, r3
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	b29a      	uxth	r2, r3
 8001790:	2052      	movs	r0, #82	; 0x52
 8001792:	183b      	adds	r3, r7, r0
 8001794:	49a2      	ldr	r1, [pc, #648]	; (8001a20 <PCD_EP_ISR_Handler+0x6dc>)
 8001796:	400a      	ands	r2, r1
 8001798:	801a      	strh	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	001a      	movs	r2, r3
 80017a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	18d3      	adds	r3, r2, r3
 80017a8:	183a      	adds	r2, r7, r0
 80017aa:	8812      	ldrh	r2, [r2, #0]
 80017ac:	499d      	ldr	r1, [pc, #628]	; (8001a24 <PCD_EP_ISR_Handler+0x6e0>)
 80017ae:	430a      	orrs	r2, r1
 80017b0:	b292      	uxth	r2, r2
 80017b2:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	001a      	movs	r2, r3
 80017ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	18d3      	adds	r3, r2, r3
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	001a      	movs	r2, r3
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	01db      	lsls	r3, r3, #7
 80017cc:	4013      	ands	r3, r2
 80017ce:	d024      	beq.n	800181a <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2250      	movs	r2, #80	; 0x50
 80017d6:	5a9b      	ldrh	r3, [r3, r2]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	001a      	movs	r2, r3
 80017dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	18d2      	adds	r2, r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	18d3      	adds	r3, r2, r3
 80017ea:	4a8f      	ldr	r2, [pc, #572]	; (8001a28 <PCD_EP_ISR_Handler+0x6e4>)
 80017ec:	4694      	mov	ip, r2
 80017ee:	4463      	add	r3, ip
 80017f0:	881a      	ldrh	r2, [r3, #0]
 80017f2:	2450      	movs	r4, #80	; 0x50
 80017f4:	193b      	adds	r3, r7, r4
 80017f6:	0592      	lsls	r2, r2, #22
 80017f8:	0d92      	lsrs	r2, r2, #22
 80017fa:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80017fc:	193b      	adds	r3, r7, r4
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d02e      	beq.n	8001862 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6818      	ldr	r0, [r3, #0]
 8001808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800180a:	6959      	ldr	r1, [r3, #20]
 800180c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800180e:	891a      	ldrh	r2, [r3, #8]
 8001810:	193b      	adds	r3, r7, r4
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	f003 ff01 	bl	800561a <USB_ReadPMA>
 8001818:	e023      	b.n	8001862 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2250      	movs	r2, #80	; 0x50
 8001820:	5a9b      	ldrh	r3, [r3, r2]
 8001822:	b29b      	uxth	r3, r3
 8001824:	001a      	movs	r2, r3
 8001826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	18d2      	adds	r2, r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	18d3      	adds	r3, r2, r3
 8001834:	4a79      	ldr	r2, [pc, #484]	; (8001a1c <PCD_EP_ISR_Handler+0x6d8>)
 8001836:	4694      	mov	ip, r2
 8001838:	4463      	add	r3, ip
 800183a:	881a      	ldrh	r2, [r3, #0]
 800183c:	2450      	movs	r4, #80	; 0x50
 800183e:	193b      	adds	r3, r7, r4
 8001840:	0592      	lsls	r2, r2, #22
 8001842:	0d92      	lsrs	r2, r2, #22
 8001844:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001846:	193b      	adds	r3, r7, r4
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d009      	beq.n	8001862 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6818      	ldr	r0, [r3, #0]
 8001852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001854:	6959      	ldr	r1, [r3, #20]
 8001856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001858:	895a      	ldrh	r2, [r3, #10]
 800185a:	193b      	adds	r3, r7, r4
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	f003 fedc 	bl	800561a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001864:	69da      	ldr	r2, [r3, #28]
 8001866:	2150      	movs	r1, #80	; 0x50
 8001868:	187b      	adds	r3, r7, r1
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	18d2      	adds	r2, r2, r3
 800186e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001870:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001874:	695a      	ldr	r2, [r3, #20]
 8001876:	187b      	adds	r3, r7, r1
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	18d2      	adds	r2, r2, r3
 800187c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800187e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d005      	beq.n	8001894 <PCD_EP_ISR_Handler+0x550>
 8001888:	187b      	adds	r3, r7, r1
 800188a:	881a      	ldrh	r2, [r3, #0]
 800188c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	429a      	cmp	r2, r3
 8001892:	d207      	bcs.n	80018a4 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001896:	781a      	ldrb	r2, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	0011      	movs	r1, r2
 800189c:	0018      	movs	r0, r3
 800189e:	f005 fc50 	bl	8007142 <HAL_PCD_DataOutStageCallback>
 80018a2:	e006      	b.n	80018b2 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80018aa:	0011      	movs	r1, r2
 80018ac:	0018      	movs	r0, r3
 80018ae:	f002 fbf9 	bl	80040a4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80018b2:	244a      	movs	r4, #74	; 0x4a
 80018b4:	193b      	adds	r3, r7, r4
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	2280      	movs	r2, #128	; 0x80
 80018ba:	4013      	ands	r3, r2
 80018bc:	d100      	bne.n	80018c0 <PCD_EP_ISR_Handler+0x57c>
 80018be:	e133      	b.n	8001b28 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80018c0:	204d      	movs	r0, #77	; 0x4d
 80018c2:	183b      	adds	r3, r7, r0
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	0013      	movs	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	189b      	adds	r3, r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	18d3      	adds	r3, r2, r3
 80018d4:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	001a      	movs	r2, r3
 80018dc:	183b      	adds	r3, r7, r0
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	18d3      	adds	r3, r2, r3
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	2542      	movs	r5, #66	; 0x42
 80018ea:	197b      	adds	r3, r7, r5
 80018ec:	494f      	ldr	r1, [pc, #316]	; (8001a2c <PCD_EP_ISR_Handler+0x6e8>)
 80018ee:	400a      	ands	r2, r1
 80018f0:	801a      	strh	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	001a      	movs	r2, r3
 80018f8:	183b      	adds	r3, r7, r0
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	18d3      	adds	r3, r2, r3
 8001900:	197a      	adds	r2, r7, r5
 8001902:	8812      	ldrh	r2, [r2, #0]
 8001904:	494a      	ldr	r1, [pc, #296]	; (8001a30 <PCD_EP_ISR_Handler+0x6ec>)
 8001906:	430a      	orrs	r2, r1
 8001908:	b292      	uxth	r2, r2
 800190a:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 800190c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800190e:	78db      	ldrb	r3, [r3, #3]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d000      	beq.n	8001916 <PCD_EP_ISR_Handler+0x5d2>
 8001914:	e0af      	b.n	8001a76 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8001916:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001918:	2200      	movs	r2, #0
 800191a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800191c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800191e:	7b1b      	ldrb	r3, [r3, #12]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d100      	bne.n	8001926 <PCD_EP_ISR_Handler+0x5e2>
 8001924:	e09f      	b.n	8001a66 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001926:	193b      	adds	r3, r7, r4
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	2240      	movs	r2, #64	; 0x40
 800192c:	4013      	ands	r3, r2
 800192e:	d046      	beq.n	80019be <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001932:	785b      	ldrb	r3, [r3, #1]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d125      	bne.n	8001984 <PCD_EP_ISR_Handler+0x640>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2250      	movs	r2, #80	; 0x50
 8001944:	5a9b      	ldrh	r3, [r3, r2]
 8001946:	b29b      	uxth	r3, r3
 8001948:	001a      	movs	r2, r3
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	189b      	adds	r3, r3, r2
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
 8001950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	00da      	lsls	r2, r3, #3
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	18d3      	adds	r3, r2, r3
 800195a:	4a33      	ldr	r2, [pc, #204]	; (8001a28 <PCD_EP_ISR_Handler+0x6e4>)
 800195c:	4694      	mov	ip, r2
 800195e:	4463      	add	r3, ip
 8001960:	623b      	str	r3, [r7, #32]
 8001962:	6a3b      	ldr	r3, [r7, #32]
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	b29b      	uxth	r3, r3
 8001968:	059b      	lsls	r3, r3, #22
 800196a:	0d9b      	lsrs	r3, r3, #22
 800196c:	b29a      	uxth	r2, r3
 800196e:	6a3b      	ldr	r3, [r7, #32]
 8001970:	801a      	strh	r2, [r3, #0]
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	b29b      	uxth	r3, r3
 8001978:	4a2d      	ldr	r2, [pc, #180]	; (8001a30 <PCD_EP_ISR_Handler+0x6ec>)
 800197a:	4313      	orrs	r3, r2
 800197c:	b29a      	uxth	r2, r3
 800197e:	6a3b      	ldr	r3, [r7, #32]
 8001980:	801a      	strh	r2, [r3, #0]
 8001982:	e070      	b.n	8001a66 <PCD_EP_ISR_Handler+0x722>
 8001984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001986:	785b      	ldrb	r3, [r3, #1]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d16c      	bne.n	8001a66 <PCD_EP_ISR_Handler+0x722>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2250      	movs	r2, #80	; 0x50
 8001998:	5a9b      	ldrh	r3, [r3, r2]
 800199a:	b29b      	uxth	r3, r3
 800199c:	001a      	movs	r2, r3
 800199e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a0:	189b      	adds	r3, r3, r2
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	00da      	lsls	r2, r3, #3
 80019aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ac:	18d3      	adds	r3, r2, r3
 80019ae:	4a1e      	ldr	r2, [pc, #120]	; (8001a28 <PCD_EP_ISR_Handler+0x6e4>)
 80019b0:	4694      	mov	ip, r2
 80019b2:	4463      	add	r3, ip
 80019b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80019b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b8:	2200      	movs	r2, #0
 80019ba:	801a      	strh	r2, [r3, #0]
 80019bc:	e053      	b.n	8001a66 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019c6:	785b      	ldrb	r3, [r3, #1]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d133      	bne.n	8001a34 <PCD_EP_ISR_Handler+0x6f0>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	637b      	str	r3, [r7, #52]	; 0x34
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2250      	movs	r2, #80	; 0x50
 80019d8:	5a9b      	ldrh	r3, [r3, r2]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	001a      	movs	r2, r3
 80019de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e0:	189b      	adds	r3, r3, r2
 80019e2:	637b      	str	r3, [r7, #52]	; 0x34
 80019e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	00da      	lsls	r2, r3, #3
 80019ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ec:	18d3      	adds	r3, r2, r3
 80019ee:	4a0b      	ldr	r2, [pc, #44]	; (8001a1c <PCD_EP_ISR_Handler+0x6d8>)
 80019f0:	4694      	mov	ip, r2
 80019f2:	4463      	add	r3, ip
 80019f4:	633b      	str	r3, [r7, #48]	; 0x30
 80019f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	059b      	lsls	r3, r3, #22
 80019fe:	0d9b      	lsrs	r3, r3, #22
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a04:	801a      	strh	r2, [r3, #0]
 8001a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	4a08      	ldr	r2, [pc, #32]	; (8001a30 <PCD_EP_ISR_Handler+0x6ec>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a14:	801a      	strh	r2, [r3, #0]
 8001a16:	e026      	b.n	8001a66 <PCD_EP_ISR_Handler+0x722>
 8001a18:	00000f8f 	.word	0x00000f8f
 8001a1c:	00000406 	.word	0x00000406
 8001a20:	ffff8f8f 	.word	0xffff8f8f
 8001a24:	ffff80c0 	.word	0xffff80c0
 8001a28:	00000402 	.word	0x00000402
 8001a2c:	ffff8f0f 	.word	0xffff8f0f
 8001a30:	ffff8000 	.word	0xffff8000
 8001a34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a36:	785b      	ldrb	r3, [r3, #1]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d114      	bne.n	8001a66 <PCD_EP_ISR_Handler+0x722>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2250      	movs	r2, #80	; 0x50
 8001a42:	5a9b      	ldrh	r3, [r3, r2]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	001a      	movs	r2, r3
 8001a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a4a:	189b      	adds	r3, r3, r2
 8001a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	00da      	lsls	r2, r3, #3
 8001a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a56:	18d3      	adds	r3, r2, r3
 8001a58:	4a3b      	ldr	r2, [pc, #236]	; (8001b48 <PCD_EP_ISR_Handler+0x804>)
 8001a5a:	4694      	mov	ip, r2
 8001a5c:	4463      	add	r3, ip
 8001a5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a62:	2200      	movs	r2, #0
 8001a64:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a68:	781a      	ldrb	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	0011      	movs	r1, r2
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f005 fb88 	bl	8007184 <HAL_PCD_DataInStageCallback>
 8001a74:	e058      	b.n	8001b28 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001a76:	234a      	movs	r3, #74	; 0x4a
 8001a78:	18fb      	adds	r3, r7, r3
 8001a7a:	881a      	ldrh	r2, [r3, #0]
 8001a7c:	2380      	movs	r3, #128	; 0x80
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	4013      	ands	r3, r2
 8001a82:	d149      	bne.n	8001b18 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2250      	movs	r2, #80	; 0x50
 8001a8a:	5a9b      	ldrh	r3, [r3, r2]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	001a      	movs	r2, r3
 8001a90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	18d2      	adds	r2, r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	18d3      	adds	r3, r2, r3
 8001a9e:	4a2b      	ldr	r2, [pc, #172]	; (8001b4c <PCD_EP_ISR_Handler+0x808>)
 8001aa0:	4694      	mov	ip, r2
 8001aa2:	4463      	add	r3, ip
 8001aa4:	881a      	ldrh	r2, [r3, #0]
 8001aa6:	2140      	movs	r1, #64	; 0x40
 8001aa8:	187b      	adds	r3, r7, r1
 8001aaa:	0592      	lsls	r2, r2, #22
 8001aac:	0d92      	lsrs	r2, r2, #22
 8001aae:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8001ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ab2:	699a      	ldr	r2, [r3, #24]
 8001ab4:	187b      	adds	r3, r7, r1
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d907      	bls.n	8001acc <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8001abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001abe:	699a      	ldr	r2, [r3, #24]
 8001ac0:	187b      	adds	r3, r7, r1
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	1ad2      	subs	r2, r2, r3
 8001ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ac8:	619a      	str	r2, [r3, #24]
 8001aca:	e002      	b.n	8001ad2 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8001acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ace:	2200      	movs	r2, #0
 8001ad0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d107      	bne.n	8001aea <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001adc:	781a      	ldrb	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	0011      	movs	r1, r2
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f005 fb4e 	bl	8007184 <HAL_PCD_DataInStageCallback>
 8001ae8:	e01e      	b.n	8001b28 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aec:	695a      	ldr	r2, [r3, #20]
 8001aee:	2140      	movs	r1, #64	; 0x40
 8001af0:	187b      	adds	r3, r7, r1
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	18d2      	adds	r2, r2, r3
 8001af6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001af8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001afa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001afc:	69da      	ldr	r2, [r3, #28]
 8001afe:	187b      	adds	r3, r7, r1
 8001b00:	881b      	ldrh	r3, [r3, #0]
 8001b02:	18d2      	adds	r2, r2, r3
 8001b04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b06:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b0e:	0011      	movs	r1, r2
 8001b10:	0018      	movs	r0, r3
 8001b12:	f002 fac7 	bl	80040a4 <USB_EPStartXfer>
 8001b16:	e007      	b.n	8001b28 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001b18:	234a      	movs	r3, #74	; 0x4a
 8001b1a:	18fb      	adds	r3, r7, r3
 8001b1c:	881a      	ldrh	r2, [r3, #0]
 8001b1e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	0018      	movs	r0, r3
 8001b24:	f000 f930 	bl	8001d88 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2244      	movs	r2, #68	; 0x44
 8001b2e:	5a9b      	ldrh	r3, [r3, r2]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	b21b      	sxth	r3, r3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	da01      	bge.n	8001b3c <PCD_EP_ISR_Handler+0x7f8>
 8001b38:	f7ff fc0a 	bl	8001350 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	0018      	movs	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	b016      	add	sp, #88	; 0x58
 8001b44:	bdb0      	pop	{r4, r5, r7, pc}
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	00000406 	.word	0x00000406
 8001b4c:	00000402 	.word	0x00000402

08001b50 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001b50:	b590      	push	{r4, r7, lr}
 8001b52:	b089      	sub	sp, #36	; 0x24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	1dbb      	adds	r3, r7, #6
 8001b5c:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b5e:	1dbb      	adds	r3, r7, #6
 8001b60:	881a      	ldrh	r2, [r3, #0]
 8001b62:	2380      	movs	r3, #128	; 0x80
 8001b64:	01db      	lsls	r3, r3, #7
 8001b66:	4013      	ands	r3, r2
 8001b68:	d100      	bne.n	8001b6c <HAL_PCD_EP_DB_Receive+0x1c>
 8001b6a:	e07d      	b.n	8001c68 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2250      	movs	r2, #80	; 0x50
 8001b72:	5a9b      	ldrh	r3, [r3, r2]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	001a      	movs	r2, r3
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	18d2      	adds	r2, r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	18d3      	adds	r3, r2, r3
 8001b86:	4a7a      	ldr	r2, [pc, #488]	; (8001d70 <HAL_PCD_EP_DB_Receive+0x220>)
 8001b88:	4694      	mov	ip, r2
 8001b8a:	4463      	add	r3, ip
 8001b8c:	881a      	ldrh	r2, [r3, #0]
 8001b8e:	211a      	movs	r1, #26
 8001b90:	187b      	adds	r3, r7, r1
 8001b92:	0592      	lsls	r2, r2, #22
 8001b94:	0d92      	lsrs	r2, r2, #22
 8001b96:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	699a      	ldr	r2, [r3, #24]
 8001b9c:	187b      	adds	r3, r7, r1
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d307      	bcc.n	8001bb4 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	699a      	ldr	r2, [r3, #24]
 8001ba8:	187b      	adds	r3, r7, r1
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	1ad2      	subs	r2, r2, r3
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	619a      	str	r2, [r3, #24]
 8001bb2:	e002      	b.n	8001bba <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d121      	bne.n	8001c06 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	001a      	movs	r2, r3
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	18d3      	adds	r3, r2, r3
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	2018      	movs	r0, #24
 8001bd6:	183b      	adds	r3, r7, r0
 8001bd8:	4966      	ldr	r1, [pc, #408]	; (8001d74 <HAL_PCD_EP_DB_Receive+0x224>)
 8001bda:	400a      	ands	r2, r1
 8001bdc:	801a      	strh	r2, [r3, #0]
 8001bde:	183b      	adds	r3, r7, r0
 8001be0:	183a      	adds	r2, r7, r0
 8001be2:	8812      	ldrh	r2, [r2, #0]
 8001be4:	2180      	movs	r1, #128	; 0x80
 8001be6:	0189      	lsls	r1, r1, #6
 8001be8:	404a      	eors	r2, r1
 8001bea:	801a      	strh	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	001a      	movs	r2, r3
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	18d3      	adds	r3, r2, r3
 8001bfa:	183a      	adds	r2, r7, r0
 8001bfc:	8812      	ldrh	r2, [r2, #0]
 8001bfe:	495e      	ldr	r1, [pc, #376]	; (8001d78 <HAL_PCD_EP_DB_Receive+0x228>)
 8001c00:	430a      	orrs	r2, r1
 8001c02:	b292      	uxth	r2, r2
 8001c04:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c06:	1dbb      	adds	r3, r7, #6
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	2240      	movs	r2, #64	; 0x40
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d01a      	beq.n	8001c46 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	001a      	movs	r2, r3
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	18d3      	adds	r3, r2, r3
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	2016      	movs	r0, #22
 8001c24:	183b      	adds	r3, r7, r0
 8001c26:	4955      	ldr	r1, [pc, #340]	; (8001d7c <HAL_PCD_EP_DB_Receive+0x22c>)
 8001c28:	400a      	ands	r2, r1
 8001c2a:	801a      	strh	r2, [r3, #0]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	001a      	movs	r2, r3
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	18d3      	adds	r3, r2, r3
 8001c3a:	183a      	adds	r2, r7, r0
 8001c3c:	8812      	ldrh	r2, [r2, #0]
 8001c3e:	4950      	ldr	r1, [pc, #320]	; (8001d80 <HAL_PCD_EP_DB_Receive+0x230>)
 8001c40:	430a      	orrs	r2, r1
 8001c42:	b292      	uxth	r2, r2
 8001c44:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001c46:	241a      	movs	r4, #26
 8001c48:	193b      	adds	r3, r7, r4
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d100      	bne.n	8001c52 <HAL_PCD_EP_DB_Receive+0x102>
 8001c50:	e086      	b.n	8001d60 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6818      	ldr	r0, [r3, #0]
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	6959      	ldr	r1, [r3, #20]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	891a      	ldrh	r2, [r3, #8]
 8001c5e:	193b      	adds	r3, r7, r4
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	f003 fcda 	bl	800561a <USB_ReadPMA>
 8001c66:	e07b      	b.n	8001d60 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2250      	movs	r2, #80	; 0x50
 8001c6e:	5a9b      	ldrh	r3, [r3, r2]
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	001a      	movs	r2, r3
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	18d2      	adds	r2, r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	18d3      	adds	r3, r2, r3
 8001c82:	4a40      	ldr	r2, [pc, #256]	; (8001d84 <HAL_PCD_EP_DB_Receive+0x234>)
 8001c84:	4694      	mov	ip, r2
 8001c86:	4463      	add	r3, ip
 8001c88:	881a      	ldrh	r2, [r3, #0]
 8001c8a:	211a      	movs	r1, #26
 8001c8c:	187b      	adds	r3, r7, r1
 8001c8e:	0592      	lsls	r2, r2, #22
 8001c90:	0d92      	lsrs	r2, r2, #22
 8001c92:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	699a      	ldr	r2, [r3, #24]
 8001c98:	187b      	adds	r3, r7, r1
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d307      	bcc.n	8001cb0 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	699a      	ldr	r2, [r3, #24]
 8001ca4:	187b      	adds	r3, r7, r1
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	1ad2      	subs	r2, r2, r3
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	619a      	str	r2, [r3, #24]
 8001cae:	e002      	b.n	8001cb6 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d121      	bne.n	8001d02 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	001a      	movs	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	18d3      	adds	r3, r2, r3
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	201e      	movs	r0, #30
 8001cd2:	183b      	adds	r3, r7, r0
 8001cd4:	4927      	ldr	r1, [pc, #156]	; (8001d74 <HAL_PCD_EP_DB_Receive+0x224>)
 8001cd6:	400a      	ands	r2, r1
 8001cd8:	801a      	strh	r2, [r3, #0]
 8001cda:	183b      	adds	r3, r7, r0
 8001cdc:	183a      	adds	r2, r7, r0
 8001cde:	8812      	ldrh	r2, [r2, #0]
 8001ce0:	2180      	movs	r1, #128	; 0x80
 8001ce2:	0189      	lsls	r1, r1, #6
 8001ce4:	404a      	eors	r2, r1
 8001ce6:	801a      	strh	r2, [r3, #0]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	001a      	movs	r2, r3
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	18d3      	adds	r3, r2, r3
 8001cf6:	183a      	adds	r2, r7, r0
 8001cf8:	8812      	ldrh	r2, [r2, #0]
 8001cfa:	491f      	ldr	r1, [pc, #124]	; (8001d78 <HAL_PCD_EP_DB_Receive+0x228>)
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	b292      	uxth	r2, r2
 8001d00:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001d02:	1dbb      	adds	r3, r7, #6
 8001d04:	881b      	ldrh	r3, [r3, #0]
 8001d06:	2240      	movs	r2, #64	; 0x40
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d11a      	bne.n	8001d42 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	001a      	movs	r2, r3
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	18d3      	adds	r3, r2, r3
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	201c      	movs	r0, #28
 8001d20:	183b      	adds	r3, r7, r0
 8001d22:	4916      	ldr	r1, [pc, #88]	; (8001d7c <HAL_PCD_EP_DB_Receive+0x22c>)
 8001d24:	400a      	ands	r2, r1
 8001d26:	801a      	strh	r2, [r3, #0]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	001a      	movs	r2, r3
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	18d3      	adds	r3, r2, r3
 8001d36:	183a      	adds	r2, r7, r0
 8001d38:	8812      	ldrh	r2, [r2, #0]
 8001d3a:	4911      	ldr	r1, [pc, #68]	; (8001d80 <HAL_PCD_EP_DB_Receive+0x230>)
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	b292      	uxth	r2, r2
 8001d40:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001d42:	241a      	movs	r4, #26
 8001d44:	193b      	adds	r3, r7, r4
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d009      	beq.n	8001d60 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6818      	ldr	r0, [r3, #0]
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	6959      	ldr	r1, [r3, #20]
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	895a      	ldrh	r2, [r3, #10]
 8001d58:	193b      	adds	r3, r7, r4
 8001d5a:	881b      	ldrh	r3, [r3, #0]
 8001d5c:	f003 fc5d 	bl	800561a <USB_ReadPMA>
    }
  }

  return count;
 8001d60:	231a      	movs	r3, #26
 8001d62:	18fb      	adds	r3, r7, r3
 8001d64:	881b      	ldrh	r3, [r3, #0]
}
 8001d66:	0018      	movs	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	b009      	add	sp, #36	; 0x24
 8001d6c:	bd90      	pop	{r4, r7, pc}
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	00000402 	.word	0x00000402
 8001d74:	ffffbf8f 	.word	0xffffbf8f
 8001d78:	ffff8080 	.word	0xffff8080
 8001d7c:	ffff8f8f 	.word	0xffff8f8f
 8001d80:	ffff80c0 	.word	0xffff80c0
 8001d84:	00000406 	.word	0x00000406

08001d88 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b0a4      	sub	sp, #144	; 0x90
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	1dbb      	adds	r3, r7, #6
 8001d94:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d96:	1dbb      	adds	r3, r7, #6
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	2240      	movs	r2, #64	; 0x40
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d100      	bne.n	8001da2 <HAL_PCD_EP_DB_Transmit+0x1a>
 8001da0:	e1e4      	b.n	800216c <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2250      	movs	r2, #80	; 0x50
 8001da8:	5a9b      	ldrh	r3, [r3, r2]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	001a      	movs	r2, r3
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	18d2      	adds	r2, r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	18d3      	adds	r3, r2, r3
 8001dbc:	4ad0      	ldr	r2, [pc, #832]	; (8002100 <HAL_PCD_EP_DB_Transmit+0x378>)
 8001dbe:	4694      	mov	ip, r2
 8001dc0:	4463      	add	r3, ip
 8001dc2:	881a      	ldrh	r2, [r3, #0]
 8001dc4:	2186      	movs	r1, #134	; 0x86
 8001dc6:	187b      	adds	r3, r7, r1
 8001dc8:	0592      	lsls	r2, r2, #22
 8001dca:	0d92      	lsrs	r2, r2, #22
 8001dcc:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	699a      	ldr	r2, [r3, #24]
 8001dd2:	187b      	adds	r3, r7, r1
 8001dd4:	881b      	ldrh	r3, [r3, #0]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d907      	bls.n	8001dea <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	699a      	ldr	r2, [r3, #24]
 8001dde:	187b      	adds	r3, r7, r1
 8001de0:	881b      	ldrh	r3, [r3, #0]
 8001de2:	1ad2      	subs	r2, r2, r3
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	619a      	str	r2, [r3, #24]
 8001de8:	e002      	b.n	8001df0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d000      	beq.n	8001dfa <HAL_PCD_EP_DB_Transmit+0x72>
 8001df8:	e0b5      	b.n	8001f66 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	785b      	ldrb	r3, [r3, #1]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d125      	bne.n	8001e4e <HAL_PCD_EP_DB_Transmit+0xc6>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2250      	movs	r2, #80	; 0x50
 8001e0e:	5a9b      	ldrh	r3, [r3, r2]
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	001a      	movs	r2, r3
 8001e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e16:	189b      	adds	r3, r3, r2
 8001e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	00da      	lsls	r2, r3, #3
 8001e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e22:	18d3      	adds	r3, r2, r3
 8001e24:	4ab6      	ldr	r2, [pc, #728]	; (8002100 <HAL_PCD_EP_DB_Transmit+0x378>)
 8001e26:	4694      	mov	ip, r2
 8001e28:	4463      	add	r3, ip
 8001e2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	059b      	lsls	r3, r3, #22
 8001e34:	0d9b      	lsrs	r3, r3, #22
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3a:	801a      	strh	r2, [r3, #0]
 8001e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	4ab0      	ldr	r2, [pc, #704]	; (8002104 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e4a:	801a      	strh	r2, [r3, #0]
 8001e4c:	e01b      	b.n	8001e86 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	785b      	ldrb	r3, [r3, #1]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d117      	bne.n	8001e86 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2250      	movs	r2, #80	; 0x50
 8001e62:	5a9b      	ldrh	r3, [r3, r2]
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	001a      	movs	r2, r3
 8001e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e6a:	189b      	adds	r3, r3, r2
 8001e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	00da      	lsls	r2, r3, #3
 8001e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e76:	18d3      	adds	r3, r2, r3
 8001e78:	4aa1      	ldr	r2, [pc, #644]	; (8002100 <HAL_PCD_EP_DB_Transmit+0x378>)
 8001e7a:	4694      	mov	ip, r2
 8001e7c:	4463      	add	r3, ip
 8001e7e:	633b      	str	r3, [r7, #48]	; 0x30
 8001e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e82:	2200      	movs	r2, #0
 8001e84:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	785b      	ldrb	r3, [r3, #1]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d125      	bne.n	8001ee0 <HAL_PCD_EP_DB_Transmit+0x158>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	61fb      	str	r3, [r7, #28]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2250      	movs	r2, #80	; 0x50
 8001ea0:	5a9b      	ldrh	r3, [r3, r2]
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	001a      	movs	r2, r3
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	189b      	adds	r3, r3, r2
 8001eaa:	61fb      	str	r3, [r7, #28]
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	00da      	lsls	r2, r3, #3
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	18d3      	adds	r3, r2, r3
 8001eb6:	4a94      	ldr	r2, [pc, #592]	; (8002108 <HAL_PCD_EP_DB_Transmit+0x380>)
 8001eb8:	4694      	mov	ip, r2
 8001eba:	4463      	add	r3, ip
 8001ebc:	61bb      	str	r3, [r7, #24]
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	059b      	lsls	r3, r3, #22
 8001ec6:	0d9b      	lsrs	r3, r3, #22
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	801a      	strh	r2, [r3, #0]
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	4a8b      	ldr	r2, [pc, #556]	; (8002104 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	801a      	strh	r2, [r3, #0]
 8001ede:	e018      	b.n	8001f12 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	785b      	ldrb	r3, [r3, #1]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d114      	bne.n	8001f12 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2250      	movs	r2, #80	; 0x50
 8001eee:	5a9b      	ldrh	r3, [r3, r2]
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	001a      	movs	r2, r3
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	189b      	adds	r3, r3, r2
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	00da      	lsls	r2, r3, #3
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	18d3      	adds	r3, r2, r3
 8001f04:	4a80      	ldr	r2, [pc, #512]	; (8002108 <HAL_PCD_EP_DB_Transmit+0x380>)
 8001f06:	4694      	mov	ip, r2
 8001f08:	4463      	add	r3, ip
 8001f0a:	623b      	str	r3, [r7, #32]
 8001f0c:	6a3b      	ldr	r3, [r7, #32]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	781a      	ldrb	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	0011      	movs	r1, r2
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	f005 f932 	bl	8007184 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f20:	1dbb      	adds	r3, r7, #6
 8001f22:	881a      	ldrh	r2, [r3, #0]
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	01db      	lsls	r3, r3, #7
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d100      	bne.n	8001f2e <HAL_PCD_EP_DB_Transmit+0x1a6>
 8001f2c:	e309      	b.n	8002542 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	001a      	movs	r2, r3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	18d3      	adds	r3, r2, r3
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	2016      	movs	r0, #22
 8001f42:	183b      	adds	r3, r7, r0
 8001f44:	4971      	ldr	r1, [pc, #452]	; (800210c <HAL_PCD_EP_DB_Transmit+0x384>)
 8001f46:	400a      	ands	r2, r1
 8001f48:	801a      	strh	r2, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	001a      	movs	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	18d3      	adds	r3, r2, r3
 8001f58:	183a      	adds	r2, r7, r0
 8001f5a:	8812      	ldrh	r2, [r2, #0]
 8001f5c:	496c      	ldr	r1, [pc, #432]	; (8002110 <HAL_PCD_EP_DB_Transmit+0x388>)
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	b292      	uxth	r2, r2
 8001f62:	801a      	strh	r2, [r3, #0]
 8001f64:	e2ed      	b.n	8002542 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f66:	1dbb      	adds	r3, r7, #6
 8001f68:	881a      	ldrh	r2, [r3, #0]
 8001f6a:	2380      	movs	r3, #128	; 0x80
 8001f6c:	01db      	lsls	r3, r3, #7
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d01a      	beq.n	8001fa8 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	001a      	movs	r2, r3
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	18d3      	adds	r3, r2, r3
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	208a      	movs	r0, #138	; 0x8a
 8001f86:	183b      	adds	r3, r7, r0
 8001f88:	4960      	ldr	r1, [pc, #384]	; (800210c <HAL_PCD_EP_DB_Transmit+0x384>)
 8001f8a:	400a      	ands	r2, r1
 8001f8c:	801a      	strh	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	001a      	movs	r2, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	18d3      	adds	r3, r2, r3
 8001f9c:	183a      	adds	r2, r7, r0
 8001f9e:	8812      	ldrh	r2, [r2, #0]
 8001fa0:	495b      	ldr	r1, [pc, #364]	; (8002110 <HAL_PCD_EP_DB_Transmit+0x388>)
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	b292      	uxth	r2, r2
 8001fa6:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	2224      	movs	r2, #36	; 0x24
 8001fac:	5c9b      	ldrb	r3, [r3, r2]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d000      	beq.n	8001fb4 <HAL_PCD_EP_DB_Transmit+0x22c>
 8001fb2:	e2c6      	b.n	8002542 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	695a      	ldr	r2, [r3, #20]
 8001fb8:	2186      	movs	r1, #134	; 0x86
 8001fba:	187b      	adds	r3, r7, r1
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	18d2      	adds	r2, r2, r3
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	69da      	ldr	r2, [r3, #28]
 8001fc8:	187b      	adds	r3, r7, r1
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	18d2      	adds	r2, r2, r3
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	6a1a      	ldr	r2, [r3, #32]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d30c      	bcc.n	8001ff8 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	218c      	movs	r1, #140	; 0x8c
 8001fe4:	187a      	adds	r2, r7, r1
 8001fe6:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	6a1a      	ldr	r2, [r3, #32]
 8001fec:	187b      	adds	r3, r7, r1
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	1ad2      	subs	r2, r2, r3
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	621a      	str	r2, [r3, #32]
 8001ff6:	e01a      	b.n	800202e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10a      	bne.n	8002016 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8002000:	2386      	movs	r3, #134	; 0x86
 8002002:	18fb      	adds	r3, r7, r3
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	228c      	movs	r2, #140	; 0x8c
 8002008:	18ba      	adds	r2, r7, r2
 800200a:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	2224      	movs	r2, #36	; 0x24
 8002010:	2100      	movs	r1, #0
 8002012:	5499      	strb	r1, [r3, r2]
 8002014:	e00b      	b.n	800202e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	2224      	movs	r2, #36	; 0x24
 800201a:	2100      	movs	r1, #0
 800201c:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	228c      	movs	r2, #140	; 0x8c
 8002024:	18ba      	adds	r2, r7, r2
 8002026:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2200      	movs	r2, #0
 800202c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	785b      	ldrb	r3, [r3, #1]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d000      	beq.n	8002038 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8002036:	e06d      	b.n	8002114 <HAL_PCD_EP_DB_Transmit+0x38c>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2250      	movs	r2, #80	; 0x50
 8002044:	5a9b      	ldrh	r3, [r3, r2]
 8002046:	b29b      	uxth	r3, r3
 8002048:	001a      	movs	r2, r3
 800204a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800204c:	189b      	adds	r3, r3, r2
 800204e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	00da      	lsls	r2, r3, #3
 8002056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002058:	18d3      	adds	r3, r2, r3
 800205a:	4a29      	ldr	r2, [pc, #164]	; (8002100 <HAL_PCD_EP_DB_Transmit+0x378>)
 800205c:	4694      	mov	ip, r2
 800205e:	4463      	add	r3, ip
 8002060:	63bb      	str	r3, [r7, #56]	; 0x38
 8002062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	b29b      	uxth	r3, r3
 8002068:	059b      	lsls	r3, r3, #22
 800206a:	0d9b      	lsrs	r3, r3, #22
 800206c:	b29a      	uxth	r2, r3
 800206e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002070:	801a      	strh	r2, [r3, #0]
 8002072:	228c      	movs	r2, #140	; 0x8c
 8002074:	18bb      	adds	r3, r7, r2
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b3e      	cmp	r3, #62	; 0x3e
 800207a:	d91a      	bls.n	80020b2 <HAL_PCD_EP_DB_Transmit+0x32a>
 800207c:	18bb      	adds	r3, r7, r2
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	095b      	lsrs	r3, r3, #5
 8002082:	64bb      	str	r3, [r7, #72]	; 0x48
 8002084:	18bb      	adds	r3, r7, r2
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	221f      	movs	r2, #31
 800208a:	4013      	ands	r3, r2
 800208c:	d102      	bne.n	8002094 <HAL_PCD_EP_DB_Transmit+0x30c>
 800208e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002090:	3b01      	subs	r3, #1
 8002092:	64bb      	str	r3, [r7, #72]	; 0x48
 8002094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	b29a      	uxth	r2, r3
 800209a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800209c:	b29b      	uxth	r3, r3
 800209e:	029b      	lsls	r3, r3, #10
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	4313      	orrs	r3, r2
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	4a17      	ldr	r2, [pc, #92]	; (8002104 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ae:	801a      	strh	r2, [r3, #0]
 80020b0:	e04f      	b.n	8002152 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80020b2:	238c      	movs	r3, #140	; 0x8c
 80020b4:	18fb      	adds	r3, r7, r3
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d108      	bne.n	80020ce <HAL_PCD_EP_DB_Transmit+0x346>
 80020bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	4a10      	ldr	r2, [pc, #64]	; (8002104 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ca:	801a      	strh	r2, [r3, #0]
 80020cc:	e041      	b.n	8002152 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80020ce:	228c      	movs	r2, #140	; 0x8c
 80020d0:	18bb      	adds	r3, r7, r2
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	085b      	lsrs	r3, r3, #1
 80020d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80020d8:	18bb      	adds	r3, r7, r2
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2201      	movs	r2, #1
 80020de:	4013      	ands	r3, r2
 80020e0:	d002      	beq.n	80020e8 <HAL_PCD_EP_DB_Transmit+0x360>
 80020e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020e4:	3301      	adds	r3, #1
 80020e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80020e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	029b      	lsls	r3, r3, #10
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	4313      	orrs	r3, r2
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020fc:	801a      	strh	r2, [r3, #0]
 80020fe:	e028      	b.n	8002152 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8002100:	00000402 	.word	0x00000402
 8002104:	ffff8000 	.word	0xffff8000
 8002108:	00000406 	.word	0x00000406
 800210c:	ffff8f8f 	.word	0xffff8f8f
 8002110:	ffffc080 	.word	0xffffc080
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	785b      	ldrb	r3, [r3, #1]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d11a      	bne.n	8002152 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	647b      	str	r3, [r7, #68]	; 0x44
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2250      	movs	r2, #80	; 0x50
 8002128:	5a9b      	ldrh	r3, [r3, r2]
 800212a:	b29b      	uxth	r3, r3
 800212c:	001a      	movs	r2, r3
 800212e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002130:	189b      	adds	r3, r3, r2
 8002132:	647b      	str	r3, [r7, #68]	; 0x44
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	00da      	lsls	r2, r3, #3
 800213a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800213c:	18d3      	adds	r3, r2, r3
 800213e:	4adb      	ldr	r2, [pc, #876]	; (80024ac <HAL_PCD_EP_DB_Transmit+0x724>)
 8002140:	4694      	mov	ip, r2
 8002142:	4463      	add	r3, ip
 8002144:	643b      	str	r3, [r7, #64]	; 0x40
 8002146:	238c      	movs	r3, #140	; 0x8c
 8002148:	18fb      	adds	r3, r7, r3
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	b29a      	uxth	r2, r3
 800214e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002150:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6818      	ldr	r0, [r3, #0]
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	6959      	ldr	r1, [r3, #20]
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	891a      	ldrh	r2, [r3, #8]
 800215e:	238c      	movs	r3, #140	; 0x8c
 8002160:	18fb      	adds	r3, r7, r3
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	b29b      	uxth	r3, r3
 8002166:	f003 fa0f 	bl	8005588 <USB_WritePMA>
 800216a:	e1ea      	b.n	8002542 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2250      	movs	r2, #80	; 0x50
 8002172:	5a9b      	ldrh	r3, [r3, r2]
 8002174:	b29b      	uxth	r3, r3
 8002176:	001a      	movs	r2, r3
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	18d2      	adds	r2, r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	18d3      	adds	r3, r2, r3
 8002186:	4aca      	ldr	r2, [pc, #808]	; (80024b0 <HAL_PCD_EP_DB_Transmit+0x728>)
 8002188:	4694      	mov	ip, r2
 800218a:	4463      	add	r3, ip
 800218c:	881a      	ldrh	r2, [r3, #0]
 800218e:	2186      	movs	r1, #134	; 0x86
 8002190:	187b      	adds	r3, r7, r1
 8002192:	0592      	lsls	r2, r2, #22
 8002194:	0d92      	lsrs	r2, r2, #22
 8002196:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	699a      	ldr	r2, [r3, #24]
 800219c:	187b      	adds	r3, r7, r1
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d307      	bcc.n	80021b4 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	699a      	ldr	r2, [r3, #24]
 80021a8:	187b      	adds	r3, r7, r1
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	1ad2      	subs	r2, r2, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	619a      	str	r2, [r3, #24]
 80021b2:	e002      	b.n	80021ba <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	2200      	movs	r2, #0
 80021b8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d000      	beq.n	80021c4 <HAL_PCD_EP_DB_Transmit+0x43c>
 80021c2:	e0bb      	b.n	800233c <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	785b      	ldrb	r3, [r3, #1]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d125      	bne.n	8002218 <HAL_PCD_EP_DB_Transmit+0x490>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2250      	movs	r2, #80	; 0x50
 80021d8:	5a9b      	ldrh	r3, [r3, r2]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	001a      	movs	r2, r3
 80021de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021e0:	189b      	adds	r3, r3, r2
 80021e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	00da      	lsls	r2, r3, #3
 80021ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021ec:	18d3      	adds	r3, r2, r3
 80021ee:	4aaf      	ldr	r2, [pc, #700]	; (80024ac <HAL_PCD_EP_DB_Transmit+0x724>)
 80021f0:	4694      	mov	ip, r2
 80021f2:	4463      	add	r3, ip
 80021f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80021f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	059b      	lsls	r3, r3, #22
 80021fe:	0d9b      	lsrs	r3, r3, #22
 8002200:	b29a      	uxth	r2, r3
 8002202:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002204:	801a      	strh	r2, [r3, #0]
 8002206:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	b29b      	uxth	r3, r3
 800220c:	4aa9      	ldr	r2, [pc, #676]	; (80024b4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800220e:	4313      	orrs	r3, r2
 8002210:	b29a      	uxth	r2, r3
 8002212:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002214:	801a      	strh	r2, [r3, #0]
 8002216:	e01b      	b.n	8002250 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	785b      	ldrb	r3, [r3, #1]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d117      	bne.n	8002250 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	667b      	str	r3, [r7, #100]	; 0x64
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2250      	movs	r2, #80	; 0x50
 800222c:	5a9b      	ldrh	r3, [r3, r2]
 800222e:	b29b      	uxth	r3, r3
 8002230:	001a      	movs	r2, r3
 8002232:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002234:	189b      	adds	r3, r3, r2
 8002236:	667b      	str	r3, [r7, #100]	; 0x64
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	00da      	lsls	r2, r3, #3
 800223e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002240:	18d3      	adds	r3, r2, r3
 8002242:	4a9a      	ldr	r2, [pc, #616]	; (80024ac <HAL_PCD_EP_DB_Transmit+0x724>)
 8002244:	4694      	mov	ip, r2
 8002246:	4463      	add	r3, ip
 8002248:	663b      	str	r3, [r7, #96]	; 0x60
 800224a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800224c:	2200      	movs	r2, #0
 800224e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	677b      	str	r3, [r7, #116]	; 0x74
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	785b      	ldrb	r3, [r3, #1]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d12b      	bne.n	80022b6 <HAL_PCD_EP_DB_Transmit+0x52e>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2250      	movs	r2, #80	; 0x50
 800226a:	5a9b      	ldrh	r3, [r3, r2]
 800226c:	b29b      	uxth	r3, r3
 800226e:	001a      	movs	r2, r3
 8002270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002272:	189b      	adds	r3, r3, r2
 8002274:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	00da      	lsls	r2, r3, #3
 800227c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800227e:	18d3      	adds	r3, r2, r3
 8002280:	4a8b      	ldr	r2, [pc, #556]	; (80024b0 <HAL_PCD_EP_DB_Transmit+0x728>)
 8002282:	4694      	mov	ip, r2
 8002284:	4463      	add	r3, ip
 8002286:	2180      	movs	r1, #128	; 0x80
 8002288:	187a      	adds	r2, r7, r1
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	187b      	adds	r3, r7, r1
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	b29b      	uxth	r3, r3
 8002294:	059b      	lsls	r3, r3, #22
 8002296:	0d9b      	lsrs	r3, r3, #22
 8002298:	b29a      	uxth	r2, r3
 800229a:	187b      	adds	r3, r7, r1
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	801a      	strh	r2, [r3, #0]
 80022a0:	187b      	adds	r3, r7, r1
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	4a82      	ldr	r2, [pc, #520]	; (80024b4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	187b      	adds	r3, r7, r1
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	801a      	strh	r2, [r3, #0]
 80022b4:	e018      	b.n	80022e8 <HAL_PCD_EP_DB_Transmit+0x560>
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	785b      	ldrb	r3, [r3, #1]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d114      	bne.n	80022e8 <HAL_PCD_EP_DB_Transmit+0x560>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2250      	movs	r2, #80	; 0x50
 80022c4:	5a9b      	ldrh	r3, [r3, r2]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	001a      	movs	r2, r3
 80022ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022cc:	189b      	adds	r3, r3, r2
 80022ce:	677b      	str	r3, [r7, #116]	; 0x74
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	00da      	lsls	r2, r3, #3
 80022d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022d8:	18d3      	adds	r3, r2, r3
 80022da:	4a75      	ldr	r2, [pc, #468]	; (80024b0 <HAL_PCD_EP_DB_Transmit+0x728>)
 80022dc:	4694      	mov	ip, r2
 80022de:	4463      	add	r3, ip
 80022e0:	673b      	str	r3, [r7, #112]	; 0x70
 80022e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022e4:	2200      	movs	r2, #0
 80022e6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	781a      	ldrb	r2, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	0011      	movs	r1, r2
 80022f0:	0018      	movs	r0, r3
 80022f2:	f004 ff47 	bl	8007184 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80022f6:	1dbb      	adds	r3, r7, #6
 80022f8:	881a      	ldrh	r2, [r3, #0]
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	01db      	lsls	r3, r3, #7
 80022fe:	4013      	ands	r3, r2
 8002300:	d000      	beq.n	8002304 <HAL_PCD_EP_DB_Transmit+0x57c>
 8002302:	e11e      	b.n	8002542 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	001a      	movs	r2, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	18d3      	adds	r3, r2, r3
 8002312:	881b      	ldrh	r3, [r3, #0]
 8002314:	b29a      	uxth	r2, r3
 8002316:	2088      	movs	r0, #136	; 0x88
 8002318:	183b      	adds	r3, r7, r0
 800231a:	4967      	ldr	r1, [pc, #412]	; (80024b8 <HAL_PCD_EP_DB_Transmit+0x730>)
 800231c:	400a      	ands	r2, r1
 800231e:	801a      	strh	r2, [r3, #0]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	001a      	movs	r2, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	18d3      	adds	r3, r2, r3
 800232e:	183a      	adds	r2, r7, r0
 8002330:	8812      	ldrh	r2, [r2, #0]
 8002332:	4962      	ldr	r1, [pc, #392]	; (80024bc <HAL_PCD_EP_DB_Transmit+0x734>)
 8002334:	430a      	orrs	r2, r1
 8002336:	b292      	uxth	r2, r2
 8002338:	801a      	strh	r2, [r3, #0]
 800233a:	e102      	b.n	8002542 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800233c:	1dbb      	adds	r3, r7, #6
 800233e:	881a      	ldrh	r2, [r3, #0]
 8002340:	2380      	movs	r3, #128	; 0x80
 8002342:	01db      	lsls	r3, r3, #7
 8002344:	4013      	ands	r3, r2
 8002346:	d11a      	bne.n	800237e <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	001a      	movs	r2, r3
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	18d3      	adds	r3, r2, r3
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	b29a      	uxth	r2, r3
 800235a:	204e      	movs	r0, #78	; 0x4e
 800235c:	183b      	adds	r3, r7, r0
 800235e:	4956      	ldr	r1, [pc, #344]	; (80024b8 <HAL_PCD_EP_DB_Transmit+0x730>)
 8002360:	400a      	ands	r2, r1
 8002362:	801a      	strh	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	001a      	movs	r2, r3
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	18d3      	adds	r3, r2, r3
 8002372:	183a      	adds	r2, r7, r0
 8002374:	8812      	ldrh	r2, [r2, #0]
 8002376:	4951      	ldr	r1, [pc, #324]	; (80024bc <HAL_PCD_EP_DB_Transmit+0x734>)
 8002378:	430a      	orrs	r2, r1
 800237a:	b292      	uxth	r2, r2
 800237c:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	2224      	movs	r2, #36	; 0x24
 8002382:	5c9b      	ldrb	r3, [r3, r2]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d000      	beq.n	800238a <HAL_PCD_EP_DB_Transmit+0x602>
 8002388:	e0db      	b.n	8002542 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	695a      	ldr	r2, [r3, #20]
 800238e:	2186      	movs	r1, #134	; 0x86
 8002390:	187b      	adds	r3, r7, r1
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	18d2      	adds	r2, r2, r3
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	69da      	ldr	r2, [r3, #28]
 800239e:	187b      	adds	r3, r7, r1
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	18d2      	adds	r2, r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	6a1a      	ldr	r2, [r3, #32]
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d30c      	bcc.n	80023ce <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	218c      	movs	r1, #140	; 0x8c
 80023ba:	187a      	adds	r2, r7, r1
 80023bc:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	6a1a      	ldr	r2, [r3, #32]
 80023c2:	187b      	adds	r3, r7, r1
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	1ad2      	subs	r2, r2, r3
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	621a      	str	r2, [r3, #32]
 80023cc:	e01a      	b.n	8002404 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10a      	bne.n	80023ec <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 80023d6:	2386      	movs	r3, #134	; 0x86
 80023d8:	18fb      	adds	r3, r7, r3
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	228c      	movs	r2, #140	; 0x8c
 80023de:	18ba      	adds	r2, r7, r2
 80023e0:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2224      	movs	r2, #36	; 0x24
 80023e6:	2100      	movs	r1, #0
 80023e8:	5499      	strb	r1, [r3, r2]
 80023ea:	e00b      	b.n	8002404 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	228c      	movs	r2, #140	; 0x8c
 80023f2:	18ba      	adds	r2, r7, r2
 80023f4:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2200      	movs	r2, #0
 80023fa:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	2224      	movs	r2, #36	; 0x24
 8002400:	2100      	movs	r1, #0
 8002402:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	657b      	str	r3, [r7, #84]	; 0x54
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	785b      	ldrb	r3, [r3, #1]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d000      	beq.n	8002414 <HAL_PCD_EP_DB_Transmit+0x68c>
 8002412:	e06e      	b.n	80024f2 <HAL_PCD_EP_DB_Transmit+0x76a>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	65fb      	str	r3, [r7, #92]	; 0x5c
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2250      	movs	r2, #80	; 0x50
 8002420:	5a9b      	ldrh	r3, [r3, r2]
 8002422:	b29b      	uxth	r3, r3
 8002424:	001a      	movs	r2, r3
 8002426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002428:	189b      	adds	r3, r3, r2
 800242a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	00da      	lsls	r2, r3, #3
 8002432:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002434:	18d3      	adds	r3, r2, r3
 8002436:	4a1e      	ldr	r2, [pc, #120]	; (80024b0 <HAL_PCD_EP_DB_Transmit+0x728>)
 8002438:	4694      	mov	ip, r2
 800243a:	4463      	add	r3, ip
 800243c:	65bb      	str	r3, [r7, #88]	; 0x58
 800243e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	b29b      	uxth	r3, r3
 8002444:	059b      	lsls	r3, r3, #22
 8002446:	0d9b      	lsrs	r3, r3, #22
 8002448:	b29a      	uxth	r2, r3
 800244a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800244c:	801a      	strh	r2, [r3, #0]
 800244e:	228c      	movs	r2, #140	; 0x8c
 8002450:	18bb      	adds	r3, r7, r2
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b3e      	cmp	r3, #62	; 0x3e
 8002456:	d91a      	bls.n	800248e <HAL_PCD_EP_DB_Transmit+0x706>
 8002458:	18bb      	adds	r3, r7, r2
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	095b      	lsrs	r3, r3, #5
 800245e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002460:	18bb      	adds	r3, r7, r2
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	221f      	movs	r2, #31
 8002466:	4013      	ands	r3, r2
 8002468:	d102      	bne.n	8002470 <HAL_PCD_EP_DB_Transmit+0x6e8>
 800246a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800246c:	3b01      	subs	r3, #1
 800246e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002470:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	b29a      	uxth	r2, r3
 8002476:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002478:	b29b      	uxth	r3, r3
 800247a:	029b      	lsls	r3, r3, #10
 800247c:	b29b      	uxth	r3, r3
 800247e:	4313      	orrs	r3, r2
 8002480:	b29b      	uxth	r3, r3
 8002482:	4a0c      	ldr	r2, [pc, #48]	; (80024b4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002484:	4313      	orrs	r3, r2
 8002486:	b29a      	uxth	r2, r3
 8002488:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800248a:	801a      	strh	r2, [r3, #0]
 800248c:	e04d      	b.n	800252a <HAL_PCD_EP_DB_Transmit+0x7a2>
 800248e:	238c      	movs	r3, #140	; 0x8c
 8002490:	18fb      	adds	r3, r7, r3
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d113      	bne.n	80024c0 <HAL_PCD_EP_DB_Transmit+0x738>
 8002498:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	b29b      	uxth	r3, r3
 800249e:	4a05      	ldr	r2, [pc, #20]	; (80024b4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024a6:	801a      	strh	r2, [r3, #0]
 80024a8:	e03f      	b.n	800252a <HAL_PCD_EP_DB_Transmit+0x7a2>
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	00000402 	.word	0x00000402
 80024b0:	00000406 	.word	0x00000406
 80024b4:	ffff8000 	.word	0xffff8000
 80024b8:	ffff8f8f 	.word	0xffff8f8f
 80024bc:	ffffc080 	.word	0xffffc080
 80024c0:	228c      	movs	r2, #140	; 0x8c
 80024c2:	18bb      	adds	r3, r7, r2
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	085b      	lsrs	r3, r3, #1
 80024c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80024ca:	18bb      	adds	r3, r7, r2
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2201      	movs	r2, #1
 80024d0:	4013      	ands	r3, r2
 80024d2:	d002      	beq.n	80024da <HAL_PCD_EP_DB_Transmit+0x752>
 80024d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024d6:	3301      	adds	r3, #1
 80024d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80024da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	b29a      	uxth	r2, r3
 80024e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	029b      	lsls	r3, r3, #10
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	4313      	orrs	r3, r2
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024ee:	801a      	strh	r2, [r3, #0]
 80024f0:	e01b      	b.n	800252a <HAL_PCD_EP_DB_Transmit+0x7a2>
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	785b      	ldrb	r3, [r3, #1]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d117      	bne.n	800252a <HAL_PCD_EP_DB_Transmit+0x7a2>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2250      	movs	r2, #80	; 0x50
 8002500:	5a9b      	ldrh	r3, [r3, r2]
 8002502:	b29b      	uxth	r3, r3
 8002504:	001a      	movs	r2, r3
 8002506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002508:	189b      	adds	r3, r3, r2
 800250a:	657b      	str	r3, [r7, #84]	; 0x54
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	00da      	lsls	r2, r3, #3
 8002512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002514:	18d3      	adds	r3, r2, r3
 8002516:	4a21      	ldr	r2, [pc, #132]	; (800259c <HAL_PCD_EP_DB_Transmit+0x814>)
 8002518:	4694      	mov	ip, r2
 800251a:	4463      	add	r3, ip
 800251c:	653b      	str	r3, [r7, #80]	; 0x50
 800251e:	238c      	movs	r3, #140	; 0x8c
 8002520:	18fb      	adds	r3, r7, r3
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	b29a      	uxth	r2, r3
 8002526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002528:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	6959      	ldr	r1, [r3, #20]
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	895a      	ldrh	r2, [r3, #10]
 8002536:	238c      	movs	r3, #140	; 0x8c
 8002538:	18fb      	adds	r3, r7, r3
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	b29b      	uxth	r3, r3
 800253e:	f003 f823 	bl	8005588 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	001a      	movs	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	18d3      	adds	r3, r2, r3
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	b29a      	uxth	r2, r3
 8002554:	2014      	movs	r0, #20
 8002556:	183b      	adds	r3, r7, r0
 8002558:	4911      	ldr	r1, [pc, #68]	; (80025a0 <HAL_PCD_EP_DB_Transmit+0x818>)
 800255a:	400a      	ands	r2, r1
 800255c:	801a      	strh	r2, [r3, #0]
 800255e:	183b      	adds	r3, r7, r0
 8002560:	183a      	adds	r2, r7, r0
 8002562:	8812      	ldrh	r2, [r2, #0]
 8002564:	2110      	movs	r1, #16
 8002566:	404a      	eors	r2, r1
 8002568:	801a      	strh	r2, [r3, #0]
 800256a:	183b      	adds	r3, r7, r0
 800256c:	183a      	adds	r2, r7, r0
 800256e:	8812      	ldrh	r2, [r2, #0]
 8002570:	2120      	movs	r1, #32
 8002572:	404a      	eors	r2, r1
 8002574:	801a      	strh	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	001a      	movs	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	18d3      	adds	r3, r2, r3
 8002584:	183a      	adds	r2, r7, r0
 8002586:	8812      	ldrh	r2, [r2, #0]
 8002588:	4906      	ldr	r1, [pc, #24]	; (80025a4 <HAL_PCD_EP_DB_Transmit+0x81c>)
 800258a:	430a      	orrs	r2, r1
 800258c:	b292      	uxth	r2, r2
 800258e:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	0018      	movs	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	b024      	add	sp, #144	; 0x90
 8002598:	bd80      	pop	{r7, pc}
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	00000406 	.word	0x00000406
 80025a0:	ffff8fbf 	.word	0xffff8fbf
 80025a4:	ffff8080 	.word	0xffff8080

080025a8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b087      	sub	sp, #28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	0008      	movs	r0, r1
 80025b2:	0011      	movs	r1, r2
 80025b4:	607b      	str	r3, [r7, #4]
 80025b6:	240a      	movs	r4, #10
 80025b8:	193b      	adds	r3, r7, r4
 80025ba:	1c02      	adds	r2, r0, #0
 80025bc:	801a      	strh	r2, [r3, #0]
 80025be:	2308      	movs	r3, #8
 80025c0:	18fb      	adds	r3, r7, r3
 80025c2:	1c0a      	adds	r2, r1, #0
 80025c4:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80025c6:	0021      	movs	r1, r4
 80025c8:	187b      	adds	r3, r7, r1
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	2280      	movs	r2, #128	; 0x80
 80025ce:	4013      	ands	r3, r2
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00c      	beq.n	80025f0 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025d6:	187b      	adds	r3, r7, r1
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	2207      	movs	r2, #7
 80025dc:	4013      	ands	r3, r2
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	0013      	movs	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	189b      	adds	r3, r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	18d3      	adds	r3, r2, r3
 80025ec:	617b      	str	r3, [r7, #20]
 80025ee:	e00b      	b.n	8002608 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80025f0:	230a      	movs	r3, #10
 80025f2:	18fb      	adds	r3, r7, r3
 80025f4:	881a      	ldrh	r2, [r3, #0]
 80025f6:	0013      	movs	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	189b      	adds	r3, r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	3369      	adds	r3, #105	; 0x69
 8002600:	33ff      	adds	r3, #255	; 0xff
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	18d3      	adds	r3, r2, r3
 8002606:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002608:	2308      	movs	r3, #8
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d107      	bne.n	8002622 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	2200      	movs	r2, #0
 8002616:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	b29a      	uxth	r2, r3
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	80da      	strh	r2, [r3, #6]
 8002620:	e00b      	b.n	800263a <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	2201      	movs	r2, #1
 8002626:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	b29a      	uxth	r2, r3
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	0c1b      	lsrs	r3, r3, #16
 8002634:	b29a      	uxth	r2, r3
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	0018      	movs	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	b007      	add	sp, #28
 8002642:	bd90      	pop	{r4, r7, pc}

08002644 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	23ba      	movs	r3, #186	; 0xba
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	2101      	movs	r1, #1
 800265a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	23b8      	movs	r3, #184	; 0xb8
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	2100      	movs	r1, #0
 8002664:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2254      	movs	r2, #84	; 0x54
 800266a:	5a9b      	ldrh	r3, [r3, r2]
 800266c:	b29b      	uxth	r3, r3
 800266e:	2201      	movs	r2, #1
 8002670:	4313      	orrs	r3, r2
 8002672:	b299      	uxth	r1, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2254      	movs	r2, #84	; 0x54
 8002678:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2254      	movs	r2, #84	; 0x54
 800267e:	5a9b      	ldrh	r3, [r3, r2]
 8002680:	b29b      	uxth	r3, r3
 8002682:	2202      	movs	r2, #2
 8002684:	4313      	orrs	r3, r2
 8002686:	b299      	uxth	r1, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2254      	movs	r2, #84	; 0x54
 800268c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	0018      	movs	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	b004      	add	sp, #16
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	000a      	movs	r2, r1
 80026a2:	1cfb      	adds	r3, r7, #3
 80026a4:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	46bd      	mov	sp, r7
 80026aa:	b002      	add	sp, #8
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b0:	b5b0      	push	{r4, r5, r7, lr}
 80026b2:	b08a      	sub	sp, #40	; 0x28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d102      	bne.n	80026c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	f000 fbaf 	bl	8002e22 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026c4:	4bcf      	ldr	r3, [pc, #828]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	220c      	movs	r2, #12
 80026ca:	4013      	ands	r3, r2
 80026cc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026ce:	4bcd      	ldr	r3, [pc, #820]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	2380      	movs	r3, #128	; 0x80
 80026d4:	025b      	lsls	r3, r3, #9
 80026d6:	4013      	ands	r3, r2
 80026d8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2201      	movs	r2, #1
 80026e0:	4013      	ands	r3, r2
 80026e2:	d100      	bne.n	80026e6 <HAL_RCC_OscConfig+0x36>
 80026e4:	e07e      	b.n	80027e4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d007      	beq.n	80026fc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	2b0c      	cmp	r3, #12
 80026f0:	d112      	bne.n	8002718 <HAL_RCC_OscConfig+0x68>
 80026f2:	69fa      	ldr	r2, [r7, #28]
 80026f4:	2380      	movs	r3, #128	; 0x80
 80026f6:	025b      	lsls	r3, r3, #9
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d10d      	bne.n	8002718 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026fc:	4bc1      	ldr	r3, [pc, #772]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	029b      	lsls	r3, r3, #10
 8002704:	4013      	ands	r3, r2
 8002706:	d100      	bne.n	800270a <HAL_RCC_OscConfig+0x5a>
 8002708:	e06b      	b.n	80027e2 <HAL_RCC_OscConfig+0x132>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d167      	bne.n	80027e2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	f000 fb85 	bl	8002e22 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	2380      	movs	r3, #128	; 0x80
 800271e:	025b      	lsls	r3, r3, #9
 8002720:	429a      	cmp	r2, r3
 8002722:	d107      	bne.n	8002734 <HAL_RCC_OscConfig+0x84>
 8002724:	4bb7      	ldr	r3, [pc, #732]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4bb6      	ldr	r3, [pc, #728]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 800272a:	2180      	movs	r1, #128	; 0x80
 800272c:	0249      	lsls	r1, r1, #9
 800272e:	430a      	orrs	r2, r1
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	e027      	b.n	8002784 <HAL_RCC_OscConfig+0xd4>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	23a0      	movs	r3, #160	; 0xa0
 800273a:	02db      	lsls	r3, r3, #11
 800273c:	429a      	cmp	r2, r3
 800273e:	d10e      	bne.n	800275e <HAL_RCC_OscConfig+0xae>
 8002740:	4bb0      	ldr	r3, [pc, #704]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4baf      	ldr	r3, [pc, #700]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 8002746:	2180      	movs	r1, #128	; 0x80
 8002748:	02c9      	lsls	r1, r1, #11
 800274a:	430a      	orrs	r2, r1
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	4bad      	ldr	r3, [pc, #692]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	4bac      	ldr	r3, [pc, #688]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 8002754:	2180      	movs	r1, #128	; 0x80
 8002756:	0249      	lsls	r1, r1, #9
 8002758:	430a      	orrs	r2, r1
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	e012      	b.n	8002784 <HAL_RCC_OscConfig+0xd4>
 800275e:	4ba9      	ldr	r3, [pc, #676]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	4ba8      	ldr	r3, [pc, #672]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 8002764:	49a8      	ldr	r1, [pc, #672]	; (8002a08 <HAL_RCC_OscConfig+0x358>)
 8002766:	400a      	ands	r2, r1
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	4ba6      	ldr	r3, [pc, #664]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	2380      	movs	r3, #128	; 0x80
 8002770:	025b      	lsls	r3, r3, #9
 8002772:	4013      	ands	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4ba2      	ldr	r3, [pc, #648]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4ba1      	ldr	r3, [pc, #644]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 800277e:	49a3      	ldr	r1, [pc, #652]	; (8002a0c <HAL_RCC_OscConfig+0x35c>)
 8002780:	400a      	ands	r2, r1
 8002782:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d015      	beq.n	80027b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278c:	f7fe f84c 	bl	8000828 <HAL_GetTick>
 8002790:	0003      	movs	r3, r0
 8002792:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002794:	e009      	b.n	80027aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002796:	f7fe f847 	bl	8000828 <HAL_GetTick>
 800279a:	0002      	movs	r2, r0
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b64      	cmp	r3, #100	; 0x64
 80027a2:	d902      	bls.n	80027aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	f000 fb3c 	bl	8002e22 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027aa:	4b96      	ldr	r3, [pc, #600]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	2380      	movs	r3, #128	; 0x80
 80027b0:	029b      	lsls	r3, r3, #10
 80027b2:	4013      	ands	r3, r2
 80027b4:	d0ef      	beq.n	8002796 <HAL_RCC_OscConfig+0xe6>
 80027b6:	e015      	b.n	80027e4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b8:	f7fe f836 	bl	8000828 <HAL_GetTick>
 80027bc:	0003      	movs	r3, r0
 80027be:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027c2:	f7fe f831 	bl	8000828 <HAL_GetTick>
 80027c6:	0002      	movs	r2, r0
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b64      	cmp	r3, #100	; 0x64
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e326      	b.n	8002e22 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027d4:	4b8b      	ldr	r3, [pc, #556]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	2380      	movs	r3, #128	; 0x80
 80027da:	029b      	lsls	r3, r3, #10
 80027dc:	4013      	ands	r3, r2
 80027de:	d1f0      	bne.n	80027c2 <HAL_RCC_OscConfig+0x112>
 80027e0:	e000      	b.n	80027e4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2202      	movs	r2, #2
 80027ea:	4013      	ands	r3, r2
 80027ec:	d100      	bne.n	80027f0 <HAL_RCC_OscConfig+0x140>
 80027ee:	e08b      	b.n	8002908 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d005      	beq.n	8002808 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027fc:	6a3b      	ldr	r3, [r7, #32]
 80027fe:	2b0c      	cmp	r3, #12
 8002800:	d13e      	bne.n	8002880 <HAL_RCC_OscConfig+0x1d0>
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d13b      	bne.n	8002880 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002808:	4b7e      	ldr	r3, [pc, #504]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2204      	movs	r2, #4
 800280e:	4013      	ands	r3, r2
 8002810:	d004      	beq.n	800281c <HAL_RCC_OscConfig+0x16c>
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e302      	b.n	8002e22 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281c:	4b79      	ldr	r3, [pc, #484]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	4a7b      	ldr	r2, [pc, #492]	; (8002a10 <HAL_RCC_OscConfig+0x360>)
 8002822:	4013      	ands	r3, r2
 8002824:	0019      	movs	r1, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	021a      	lsls	r2, r3, #8
 800282c:	4b75      	ldr	r3, [pc, #468]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 800282e:	430a      	orrs	r2, r1
 8002830:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002832:	4b74      	ldr	r3, [pc, #464]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2209      	movs	r2, #9
 8002838:	4393      	bics	r3, r2
 800283a:	0019      	movs	r1, r3
 800283c:	4b71      	ldr	r3, [pc, #452]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	430a      	orrs	r2, r1
 8002842:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002844:	f000 fc40 	bl	80030c8 <HAL_RCC_GetSysClockFreq>
 8002848:	0001      	movs	r1, r0
 800284a:	4b6e      	ldr	r3, [pc, #440]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	091b      	lsrs	r3, r3, #4
 8002850:	220f      	movs	r2, #15
 8002852:	4013      	ands	r3, r2
 8002854:	4a6f      	ldr	r2, [pc, #444]	; (8002a14 <HAL_RCC_OscConfig+0x364>)
 8002856:	5cd3      	ldrb	r3, [r2, r3]
 8002858:	000a      	movs	r2, r1
 800285a:	40da      	lsrs	r2, r3
 800285c:	4b6e      	ldr	r3, [pc, #440]	; (8002a18 <HAL_RCC_OscConfig+0x368>)
 800285e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002860:	4b6e      	ldr	r3, [pc, #440]	; (8002a1c <HAL_RCC_OscConfig+0x36c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2513      	movs	r5, #19
 8002866:	197c      	adds	r4, r7, r5
 8002868:	0018      	movs	r0, r3
 800286a:	f7fd ff97 	bl	800079c <HAL_InitTick>
 800286e:	0003      	movs	r3, r0
 8002870:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002872:	197b      	adds	r3, r7, r5
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d046      	beq.n	8002908 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800287a:	197b      	adds	r3, r7, r5
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	e2d0      	b.n	8002e22 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d027      	beq.n	80028d6 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002886:	4b5f      	ldr	r3, [pc, #380]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2209      	movs	r2, #9
 800288c:	4393      	bics	r3, r2
 800288e:	0019      	movs	r1, r3
 8002890:	4b5c      	ldr	r3, [pc, #368]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	430a      	orrs	r2, r1
 8002896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002898:	f7fd ffc6 	bl	8000828 <HAL_GetTick>
 800289c:	0003      	movs	r3, r0
 800289e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028a2:	f7fd ffc1 	bl	8000828 <HAL_GetTick>
 80028a6:	0002      	movs	r2, r0
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e2b6      	b.n	8002e22 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028b4:	4b53      	ldr	r3, [pc, #332]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2204      	movs	r2, #4
 80028ba:	4013      	ands	r3, r2
 80028bc:	d0f1      	beq.n	80028a2 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028be:	4b51      	ldr	r3, [pc, #324]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	4a53      	ldr	r2, [pc, #332]	; (8002a10 <HAL_RCC_OscConfig+0x360>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	0019      	movs	r1, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	021a      	lsls	r2, r3, #8
 80028ce:	4b4d      	ldr	r3, [pc, #308]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 80028d0:	430a      	orrs	r2, r1
 80028d2:	605a      	str	r2, [r3, #4]
 80028d4:	e018      	b.n	8002908 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028d6:	4b4b      	ldr	r3, [pc, #300]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	4b4a      	ldr	r3, [pc, #296]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 80028dc:	2101      	movs	r1, #1
 80028de:	438a      	bics	r2, r1
 80028e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e2:	f7fd ffa1 	bl	8000828 <HAL_GetTick>
 80028e6:	0003      	movs	r3, r0
 80028e8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ec:	f7fd ff9c 	bl	8000828 <HAL_GetTick>
 80028f0:	0002      	movs	r2, r0
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e291      	b.n	8002e22 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028fe:	4b41      	ldr	r3, [pc, #260]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2204      	movs	r2, #4
 8002904:	4013      	ands	r3, r2
 8002906:	d1f1      	bne.n	80028ec <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2210      	movs	r2, #16
 800290e:	4013      	ands	r3, r2
 8002910:	d100      	bne.n	8002914 <HAL_RCC_OscConfig+0x264>
 8002912:	e0a1      	b.n	8002a58 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002914:	6a3b      	ldr	r3, [r7, #32]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d140      	bne.n	800299c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800291a:	4b3a      	ldr	r3, [pc, #232]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	2380      	movs	r3, #128	; 0x80
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4013      	ands	r3, r2
 8002924:	d005      	beq.n	8002932 <HAL_RCC_OscConfig+0x282>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e277      	b.n	8002e22 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002932:	4b34      	ldr	r3, [pc, #208]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	4a3a      	ldr	r2, [pc, #232]	; (8002a20 <HAL_RCC_OscConfig+0x370>)
 8002938:	4013      	ands	r3, r2
 800293a:	0019      	movs	r1, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002940:	4b30      	ldr	r3, [pc, #192]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 8002942:	430a      	orrs	r2, r1
 8002944:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002946:	4b2f      	ldr	r3, [pc, #188]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	021b      	lsls	r3, r3, #8
 800294c:	0a19      	lsrs	r1, r3, #8
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	061a      	lsls	r2, r3, #24
 8002954:	4b2b      	ldr	r3, [pc, #172]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 8002956:	430a      	orrs	r2, r1
 8002958:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	0b5b      	lsrs	r3, r3, #13
 8002960:	3301      	adds	r3, #1
 8002962:	2280      	movs	r2, #128	; 0x80
 8002964:	0212      	lsls	r2, r2, #8
 8002966:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002968:	4b26      	ldr	r3, [pc, #152]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	091b      	lsrs	r3, r3, #4
 800296e:	210f      	movs	r1, #15
 8002970:	400b      	ands	r3, r1
 8002972:	4928      	ldr	r1, [pc, #160]	; (8002a14 <HAL_RCC_OscConfig+0x364>)
 8002974:	5ccb      	ldrb	r3, [r1, r3]
 8002976:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002978:	4b27      	ldr	r3, [pc, #156]	; (8002a18 <HAL_RCC_OscConfig+0x368>)
 800297a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800297c:	4b27      	ldr	r3, [pc, #156]	; (8002a1c <HAL_RCC_OscConfig+0x36c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2513      	movs	r5, #19
 8002982:	197c      	adds	r4, r7, r5
 8002984:	0018      	movs	r0, r3
 8002986:	f7fd ff09 	bl	800079c <HAL_InitTick>
 800298a:	0003      	movs	r3, r0
 800298c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800298e:	197b      	adds	r3, r7, r5
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d060      	beq.n	8002a58 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8002996:	197b      	adds	r3, r7, r5
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	e242      	b.n	8002e22 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d03f      	beq.n	8002a24 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029a4:	4b17      	ldr	r3, [pc, #92]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	4b16      	ldr	r3, [pc, #88]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 80029aa:	2180      	movs	r1, #128	; 0x80
 80029ac:	0049      	lsls	r1, r1, #1
 80029ae:	430a      	orrs	r2, r1
 80029b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b2:	f7fd ff39 	bl	8000828 <HAL_GetTick>
 80029b6:	0003      	movs	r3, r0
 80029b8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029bc:	f7fd ff34 	bl	8000828 <HAL_GetTick>
 80029c0:	0002      	movs	r2, r0
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e229      	b.n	8002e22 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80029ce:	4b0d      	ldr	r3, [pc, #52]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	2380      	movs	r3, #128	; 0x80
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4013      	ands	r3, r2
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029da:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	4a10      	ldr	r2, [pc, #64]	; (8002a20 <HAL_RCC_OscConfig+0x370>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	0019      	movs	r1, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029e8:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 80029ea:	430a      	orrs	r2, r1
 80029ec:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029ee:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	021b      	lsls	r3, r3, #8
 80029f4:	0a19      	lsrs	r1, r3, #8
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	061a      	lsls	r2, r3, #24
 80029fc:	4b01      	ldr	r3, [pc, #4]	; (8002a04 <HAL_RCC_OscConfig+0x354>)
 80029fe:	430a      	orrs	r2, r1
 8002a00:	605a      	str	r2, [r3, #4]
 8002a02:	e029      	b.n	8002a58 <HAL_RCC_OscConfig+0x3a8>
 8002a04:	40021000 	.word	0x40021000
 8002a08:	fffeffff 	.word	0xfffeffff
 8002a0c:	fffbffff 	.word	0xfffbffff
 8002a10:	ffffe0ff 	.word	0xffffe0ff
 8002a14:	080077e4 	.word	0x080077e4
 8002a18:	20000000 	.word	0x20000000
 8002a1c:	20000004 	.word	0x20000004
 8002a20:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a24:	4bbd      	ldr	r3, [pc, #756]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	4bbc      	ldr	r3, [pc, #752]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002a2a:	49bd      	ldr	r1, [pc, #756]	; (8002d20 <HAL_RCC_OscConfig+0x670>)
 8002a2c:	400a      	ands	r2, r1
 8002a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a30:	f7fd fefa 	bl	8000828 <HAL_GetTick>
 8002a34:	0003      	movs	r3, r0
 8002a36:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a3a:	f7fd fef5 	bl	8000828 <HAL_GetTick>
 8002a3e:	0002      	movs	r2, r0
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e1ea      	b.n	8002e22 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002a4c:	4bb3      	ldr	r3, [pc, #716]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	2380      	movs	r3, #128	; 0x80
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4013      	ands	r3, r2
 8002a56:	d1f0      	bne.n	8002a3a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2208      	movs	r2, #8
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d036      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d019      	beq.n	8002a9e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a6a:	4bac      	ldr	r3, [pc, #688]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002a6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a6e:	4bab      	ldr	r3, [pc, #684]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002a70:	2101      	movs	r1, #1
 8002a72:	430a      	orrs	r2, r1
 8002a74:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a76:	f7fd fed7 	bl	8000828 <HAL_GetTick>
 8002a7a:	0003      	movs	r3, r0
 8002a7c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a80:	f7fd fed2 	bl	8000828 <HAL_GetTick>
 8002a84:	0002      	movs	r2, r0
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e1c7      	b.n	8002e22 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a92:	4ba2      	ldr	r3, [pc, #648]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a96:	2202      	movs	r2, #2
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d0f1      	beq.n	8002a80 <HAL_RCC_OscConfig+0x3d0>
 8002a9c:	e018      	b.n	8002ad0 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a9e:	4b9f      	ldr	r3, [pc, #636]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002aa0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002aa2:	4b9e      	ldr	r3, [pc, #632]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	438a      	bics	r2, r1
 8002aa8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aaa:	f7fd febd 	bl	8000828 <HAL_GetTick>
 8002aae:	0003      	movs	r3, r0
 8002ab0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ab4:	f7fd feb8 	bl	8000828 <HAL_GetTick>
 8002ab8:	0002      	movs	r2, r0
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e1ad      	b.n	8002e22 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ac6:	4b95      	ldr	r3, [pc, #596]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aca:	2202      	movs	r2, #2
 8002acc:	4013      	ands	r3, r2
 8002ace:	d1f1      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2204      	movs	r2, #4
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d100      	bne.n	8002adc <HAL_RCC_OscConfig+0x42c>
 8002ada:	e0ae      	b.n	8002c3a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002adc:	2027      	movs	r0, #39	; 0x27
 8002ade:	183b      	adds	r3, r7, r0
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ae4:	4b8d      	ldr	r3, [pc, #564]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002ae6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ae8:	2380      	movs	r3, #128	; 0x80
 8002aea:	055b      	lsls	r3, r3, #21
 8002aec:	4013      	ands	r3, r2
 8002aee:	d109      	bne.n	8002b04 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002af0:	4b8a      	ldr	r3, [pc, #552]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002af2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002af4:	4b89      	ldr	r3, [pc, #548]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002af6:	2180      	movs	r1, #128	; 0x80
 8002af8:	0549      	lsls	r1, r1, #21
 8002afa:	430a      	orrs	r2, r1
 8002afc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002afe:	183b      	adds	r3, r7, r0
 8002b00:	2201      	movs	r2, #1
 8002b02:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b04:	4b87      	ldr	r3, [pc, #540]	; (8002d24 <HAL_RCC_OscConfig+0x674>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	2380      	movs	r3, #128	; 0x80
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d11a      	bne.n	8002b46 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b10:	4b84      	ldr	r3, [pc, #528]	; (8002d24 <HAL_RCC_OscConfig+0x674>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4b83      	ldr	r3, [pc, #524]	; (8002d24 <HAL_RCC_OscConfig+0x674>)
 8002b16:	2180      	movs	r1, #128	; 0x80
 8002b18:	0049      	lsls	r1, r1, #1
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b1e:	f7fd fe83 	bl	8000828 <HAL_GetTick>
 8002b22:	0003      	movs	r3, r0
 8002b24:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b28:	f7fd fe7e 	bl	8000828 <HAL_GetTick>
 8002b2c:	0002      	movs	r2, r0
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b64      	cmp	r3, #100	; 0x64
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e173      	b.n	8002e22 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3a:	4b7a      	ldr	r3, [pc, #488]	; (8002d24 <HAL_RCC_OscConfig+0x674>)
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	2380      	movs	r3, #128	; 0x80
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	4013      	ands	r3, r2
 8002b44:	d0f0      	beq.n	8002b28 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	2380      	movs	r3, #128	; 0x80
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d107      	bne.n	8002b62 <HAL_RCC_OscConfig+0x4b2>
 8002b52:	4b72      	ldr	r3, [pc, #456]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002b54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b56:	4b71      	ldr	r3, [pc, #452]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002b58:	2180      	movs	r1, #128	; 0x80
 8002b5a:	0049      	lsls	r1, r1, #1
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	651a      	str	r2, [r3, #80]	; 0x50
 8002b60:	e031      	b.n	8002bc6 <HAL_RCC_OscConfig+0x516>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10c      	bne.n	8002b84 <HAL_RCC_OscConfig+0x4d4>
 8002b6a:	4b6c      	ldr	r3, [pc, #432]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002b6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b6e:	4b6b      	ldr	r3, [pc, #428]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002b70:	496b      	ldr	r1, [pc, #428]	; (8002d20 <HAL_RCC_OscConfig+0x670>)
 8002b72:	400a      	ands	r2, r1
 8002b74:	651a      	str	r2, [r3, #80]	; 0x50
 8002b76:	4b69      	ldr	r3, [pc, #420]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002b78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b7a:	4b68      	ldr	r3, [pc, #416]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002b7c:	496a      	ldr	r1, [pc, #424]	; (8002d28 <HAL_RCC_OscConfig+0x678>)
 8002b7e:	400a      	ands	r2, r1
 8002b80:	651a      	str	r2, [r3, #80]	; 0x50
 8002b82:	e020      	b.n	8002bc6 <HAL_RCC_OscConfig+0x516>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	23a0      	movs	r3, #160	; 0xa0
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d10e      	bne.n	8002bae <HAL_RCC_OscConfig+0x4fe>
 8002b90:	4b62      	ldr	r3, [pc, #392]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002b92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b94:	4b61      	ldr	r3, [pc, #388]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002b96:	2180      	movs	r1, #128	; 0x80
 8002b98:	00c9      	lsls	r1, r1, #3
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	651a      	str	r2, [r3, #80]	; 0x50
 8002b9e:	4b5f      	ldr	r3, [pc, #380]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002ba0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ba2:	4b5e      	ldr	r3, [pc, #376]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002ba4:	2180      	movs	r1, #128	; 0x80
 8002ba6:	0049      	lsls	r1, r1, #1
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	651a      	str	r2, [r3, #80]	; 0x50
 8002bac:	e00b      	b.n	8002bc6 <HAL_RCC_OscConfig+0x516>
 8002bae:	4b5b      	ldr	r3, [pc, #364]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002bb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bb2:	4b5a      	ldr	r3, [pc, #360]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002bb4:	495a      	ldr	r1, [pc, #360]	; (8002d20 <HAL_RCC_OscConfig+0x670>)
 8002bb6:	400a      	ands	r2, r1
 8002bb8:	651a      	str	r2, [r3, #80]	; 0x50
 8002bba:	4b58      	ldr	r3, [pc, #352]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002bbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bbe:	4b57      	ldr	r3, [pc, #348]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002bc0:	4959      	ldr	r1, [pc, #356]	; (8002d28 <HAL_RCC_OscConfig+0x678>)
 8002bc2:	400a      	ands	r2, r1
 8002bc4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d015      	beq.n	8002bfa <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bce:	f7fd fe2b 	bl	8000828 <HAL_GetTick>
 8002bd2:	0003      	movs	r3, r0
 8002bd4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bd6:	e009      	b.n	8002bec <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd8:	f7fd fe26 	bl	8000828 <HAL_GetTick>
 8002bdc:	0002      	movs	r2, r0
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	4a52      	ldr	r2, [pc, #328]	; (8002d2c <HAL_RCC_OscConfig+0x67c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e11a      	b.n	8002e22 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bec:	4b4b      	ldr	r3, [pc, #300]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002bee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bf0:	2380      	movs	r3, #128	; 0x80
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d0ef      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x528>
 8002bf8:	e014      	b.n	8002c24 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bfa:	f7fd fe15 	bl	8000828 <HAL_GetTick>
 8002bfe:	0003      	movs	r3, r0
 8002c00:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c02:	e009      	b.n	8002c18 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c04:	f7fd fe10 	bl	8000828 <HAL_GetTick>
 8002c08:	0002      	movs	r2, r0
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	4a47      	ldr	r2, [pc, #284]	; (8002d2c <HAL_RCC_OscConfig+0x67c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e104      	b.n	8002e22 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c18:	4b40      	ldr	r3, [pc, #256]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002c1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c1c:	2380      	movs	r3, #128	; 0x80
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4013      	ands	r3, r2
 8002c22:	d1ef      	bne.n	8002c04 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c24:	2327      	movs	r3, #39	; 0x27
 8002c26:	18fb      	adds	r3, r7, r3
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d105      	bne.n	8002c3a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c2e:	4b3b      	ldr	r3, [pc, #236]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002c30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c32:	4b3a      	ldr	r3, [pc, #232]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002c34:	493e      	ldr	r1, [pc, #248]	; (8002d30 <HAL_RCC_OscConfig+0x680>)
 8002c36:	400a      	ands	r2, r1
 8002c38:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	4013      	ands	r3, r2
 8002c42:	d049      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d026      	beq.n	8002c9a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002c4c:	4b33      	ldr	r3, [pc, #204]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	4b32      	ldr	r3, [pc, #200]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002c52:	2101      	movs	r1, #1
 8002c54:	430a      	orrs	r2, r1
 8002c56:	609a      	str	r2, [r3, #8]
 8002c58:	4b30      	ldr	r3, [pc, #192]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002c5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c5c:	4b2f      	ldr	r3, [pc, #188]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002c5e:	2101      	movs	r1, #1
 8002c60:	430a      	orrs	r2, r1
 8002c62:	635a      	str	r2, [r3, #52]	; 0x34
 8002c64:	4b33      	ldr	r3, [pc, #204]	; (8002d34 <HAL_RCC_OscConfig+0x684>)
 8002c66:	6a1a      	ldr	r2, [r3, #32]
 8002c68:	4b32      	ldr	r3, [pc, #200]	; (8002d34 <HAL_RCC_OscConfig+0x684>)
 8002c6a:	2180      	movs	r1, #128	; 0x80
 8002c6c:	0189      	lsls	r1, r1, #6
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c72:	f7fd fdd9 	bl	8000828 <HAL_GetTick>
 8002c76:	0003      	movs	r3, r0
 8002c78:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c7c:	f7fd fdd4 	bl	8000828 <HAL_GetTick>
 8002c80:	0002      	movs	r2, r0
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e0c9      	b.n	8002e22 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c8e:	4b23      	ldr	r3, [pc, #140]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2202      	movs	r2, #2
 8002c94:	4013      	ands	r3, r2
 8002c96:	d0f1      	beq.n	8002c7c <HAL_RCC_OscConfig+0x5cc>
 8002c98:	e01e      	b.n	8002cd8 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002c9a:	4b20      	ldr	r3, [pc, #128]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	4b1f      	ldr	r3, [pc, #124]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	438a      	bics	r2, r1
 8002ca4:	609a      	str	r2, [r3, #8]
 8002ca6:	4b23      	ldr	r3, [pc, #140]	; (8002d34 <HAL_RCC_OscConfig+0x684>)
 8002ca8:	6a1a      	ldr	r2, [r3, #32]
 8002caa:	4b22      	ldr	r3, [pc, #136]	; (8002d34 <HAL_RCC_OscConfig+0x684>)
 8002cac:	4922      	ldr	r1, [pc, #136]	; (8002d38 <HAL_RCC_OscConfig+0x688>)
 8002cae:	400a      	ands	r2, r1
 8002cb0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb2:	f7fd fdb9 	bl	8000828 <HAL_GetTick>
 8002cb6:	0003      	movs	r3, r0
 8002cb8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cbc:	f7fd fdb4 	bl	8000828 <HAL_GetTick>
 8002cc0:	0002      	movs	r2, r0
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e0a9      	b.n	8002e22 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002cce:	4b13      	ldr	r3, [pc, #76]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	d1f1      	bne.n	8002cbc <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d100      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x632>
 8002ce0:	e09e      	b.n	8002e20 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	2b0c      	cmp	r3, #12
 8002ce6:	d100      	bne.n	8002cea <HAL_RCC_OscConfig+0x63a>
 8002ce8:	e077      	b.n	8002dda <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d158      	bne.n	8002da4 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf2:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	4b09      	ldr	r3, [pc, #36]	; (8002d1c <HAL_RCC_OscConfig+0x66c>)
 8002cf8:	4910      	ldr	r1, [pc, #64]	; (8002d3c <HAL_RCC_OscConfig+0x68c>)
 8002cfa:	400a      	ands	r2, r1
 8002cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfe:	f7fd fd93 	bl	8000828 <HAL_GetTick>
 8002d02:	0003      	movs	r3, r0
 8002d04:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d06:	e01b      	b.n	8002d40 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d08:	f7fd fd8e 	bl	8000828 <HAL_GetTick>
 8002d0c:	0002      	movs	r2, r0
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d914      	bls.n	8002d40 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e083      	b.n	8002e22 <HAL_RCC_OscConfig+0x772>
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	fffffeff 	.word	0xfffffeff
 8002d24:	40007000 	.word	0x40007000
 8002d28:	fffffbff 	.word	0xfffffbff
 8002d2c:	00001388 	.word	0x00001388
 8002d30:	efffffff 	.word	0xefffffff
 8002d34:	40010000 	.word	0x40010000
 8002d38:	ffffdfff 	.word	0xffffdfff
 8002d3c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d40:	4b3a      	ldr	r3, [pc, #232]	; (8002e2c <HAL_RCC_OscConfig+0x77c>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	2380      	movs	r3, #128	; 0x80
 8002d46:	049b      	lsls	r3, r3, #18
 8002d48:	4013      	ands	r3, r2
 8002d4a:	d1dd      	bne.n	8002d08 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d4c:	4b37      	ldr	r3, [pc, #220]	; (8002e2c <HAL_RCC_OscConfig+0x77c>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	4a37      	ldr	r2, [pc, #220]	; (8002e30 <HAL_RCC_OscConfig+0x780>)
 8002d52:	4013      	ands	r3, r2
 8002d54:	0019      	movs	r1, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d64:	431a      	orrs	r2, r3
 8002d66:	4b31      	ldr	r3, [pc, #196]	; (8002e2c <HAL_RCC_OscConfig+0x77c>)
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d6c:	4b2f      	ldr	r3, [pc, #188]	; (8002e2c <HAL_RCC_OscConfig+0x77c>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	4b2e      	ldr	r3, [pc, #184]	; (8002e2c <HAL_RCC_OscConfig+0x77c>)
 8002d72:	2180      	movs	r1, #128	; 0x80
 8002d74:	0449      	lsls	r1, r1, #17
 8002d76:	430a      	orrs	r2, r1
 8002d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7a:	f7fd fd55 	bl	8000828 <HAL_GetTick>
 8002d7e:	0003      	movs	r3, r0
 8002d80:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d84:	f7fd fd50 	bl	8000828 <HAL_GetTick>
 8002d88:	0002      	movs	r2, r0
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e045      	b.n	8002e22 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002d96:	4b25      	ldr	r3, [pc, #148]	; (8002e2c <HAL_RCC_OscConfig+0x77c>)
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	2380      	movs	r3, #128	; 0x80
 8002d9c:	049b      	lsls	r3, r3, #18
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d0f0      	beq.n	8002d84 <HAL_RCC_OscConfig+0x6d4>
 8002da2:	e03d      	b.n	8002e20 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da4:	4b21      	ldr	r3, [pc, #132]	; (8002e2c <HAL_RCC_OscConfig+0x77c>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4b20      	ldr	r3, [pc, #128]	; (8002e2c <HAL_RCC_OscConfig+0x77c>)
 8002daa:	4922      	ldr	r1, [pc, #136]	; (8002e34 <HAL_RCC_OscConfig+0x784>)
 8002dac:	400a      	ands	r2, r1
 8002dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db0:	f7fd fd3a 	bl	8000828 <HAL_GetTick>
 8002db4:	0003      	movs	r3, r0
 8002db6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dba:	f7fd fd35 	bl	8000828 <HAL_GetTick>
 8002dbe:	0002      	movs	r2, r0
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e02a      	b.n	8002e22 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002dcc:	4b17      	ldr	r3, [pc, #92]	; (8002e2c <HAL_RCC_OscConfig+0x77c>)
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	2380      	movs	r3, #128	; 0x80
 8002dd2:	049b      	lsls	r3, r3, #18
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d1f0      	bne.n	8002dba <HAL_RCC_OscConfig+0x70a>
 8002dd8:	e022      	b.n	8002e20 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e01d      	b.n	8002e22 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002de6:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <HAL_RCC_OscConfig+0x77c>)
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dec:	69fa      	ldr	r2, [r7, #28]
 8002dee:	2380      	movs	r3, #128	; 0x80
 8002df0:	025b      	lsls	r3, r3, #9
 8002df2:	401a      	ands	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d10f      	bne.n	8002e1c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002dfc:	69fa      	ldr	r2, [r7, #28]
 8002dfe:	23f0      	movs	r3, #240	; 0xf0
 8002e00:	039b      	lsls	r3, r3, #14
 8002e02:	401a      	ands	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d107      	bne.n	8002e1c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002e0c:	69fa      	ldr	r2, [r7, #28]
 8002e0e:	23c0      	movs	r3, #192	; 0xc0
 8002e10:	041b      	lsls	r3, r3, #16
 8002e12:	401a      	ands	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d001      	beq.n	8002e20 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e000      	b.n	8002e22 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	0018      	movs	r0, r3
 8002e24:	46bd      	mov	sp, r7
 8002e26:	b00a      	add	sp, #40	; 0x28
 8002e28:	bdb0      	pop	{r4, r5, r7, pc}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	ff02ffff 	.word	0xff02ffff
 8002e34:	feffffff 	.word	0xfeffffff

08002e38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e38:	b5b0      	push	{r4, r5, r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e128      	b.n	800309e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e4c:	4b96      	ldr	r3, [pc, #600]	; (80030a8 <HAL_RCC_ClockConfig+0x270>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2201      	movs	r2, #1
 8002e52:	4013      	ands	r3, r2
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d91e      	bls.n	8002e98 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5a:	4b93      	ldr	r3, [pc, #588]	; (80030a8 <HAL_RCC_ClockConfig+0x270>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	4393      	bics	r3, r2
 8002e62:	0019      	movs	r1, r3
 8002e64:	4b90      	ldr	r3, [pc, #576]	; (80030a8 <HAL_RCC_ClockConfig+0x270>)
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e6c:	f7fd fcdc 	bl	8000828 <HAL_GetTick>
 8002e70:	0003      	movs	r3, r0
 8002e72:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e74:	e009      	b.n	8002e8a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e76:	f7fd fcd7 	bl	8000828 <HAL_GetTick>
 8002e7a:	0002      	movs	r2, r0
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	4a8a      	ldr	r2, [pc, #552]	; (80030ac <HAL_RCC_ClockConfig+0x274>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e109      	b.n	800309e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8a:	4b87      	ldr	r3, [pc, #540]	; (80030a8 <HAL_RCC_ClockConfig+0x270>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	4013      	ands	r3, r2
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d1ee      	bne.n	8002e76 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	d009      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea2:	4b83      	ldr	r3, [pc, #524]	; (80030b0 <HAL_RCC_ClockConfig+0x278>)
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	22f0      	movs	r2, #240	; 0xf0
 8002ea8:	4393      	bics	r3, r2
 8002eaa:	0019      	movs	r1, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	4b7f      	ldr	r3, [pc, #508]	; (80030b0 <HAL_RCC_ClockConfig+0x278>)
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d100      	bne.n	8002ec2 <HAL_RCC_ClockConfig+0x8a>
 8002ec0:	e089      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d107      	bne.n	8002eda <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002eca:	4b79      	ldr	r3, [pc, #484]	; (80030b0 <HAL_RCC_ClockConfig+0x278>)
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	2380      	movs	r3, #128	; 0x80
 8002ed0:	029b      	lsls	r3, r3, #10
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	d120      	bne.n	8002f18 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e0e1      	b.n	800309e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	d107      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ee2:	4b73      	ldr	r3, [pc, #460]	; (80030b0 <HAL_RCC_ClockConfig+0x278>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	2380      	movs	r3, #128	; 0x80
 8002ee8:	049b      	lsls	r3, r3, #18
 8002eea:	4013      	ands	r3, r2
 8002eec:	d114      	bne.n	8002f18 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e0d5      	b.n	800309e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d106      	bne.n	8002f08 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002efa:	4b6d      	ldr	r3, [pc, #436]	; (80030b0 <HAL_RCC_ClockConfig+0x278>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2204      	movs	r2, #4
 8002f00:	4013      	ands	r3, r2
 8002f02:	d109      	bne.n	8002f18 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0ca      	b.n	800309e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f08:	4b69      	ldr	r3, [pc, #420]	; (80030b0 <HAL_RCC_ClockConfig+0x278>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	2380      	movs	r3, #128	; 0x80
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4013      	ands	r3, r2
 8002f12:	d101      	bne.n	8002f18 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e0c2      	b.n	800309e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f18:	4b65      	ldr	r3, [pc, #404]	; (80030b0 <HAL_RCC_ClockConfig+0x278>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	2203      	movs	r2, #3
 8002f1e:	4393      	bics	r3, r2
 8002f20:	0019      	movs	r1, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	4b62      	ldr	r3, [pc, #392]	; (80030b0 <HAL_RCC_ClockConfig+0x278>)
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f2c:	f7fd fc7c 	bl	8000828 <HAL_GetTick>
 8002f30:	0003      	movs	r3, r0
 8002f32:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d111      	bne.n	8002f60 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f3c:	e009      	b.n	8002f52 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f3e:	f7fd fc73 	bl	8000828 <HAL_GetTick>
 8002f42:	0002      	movs	r2, r0
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	4a58      	ldr	r2, [pc, #352]	; (80030ac <HAL_RCC_ClockConfig+0x274>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e0a5      	b.n	800309e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f52:	4b57      	ldr	r3, [pc, #348]	; (80030b0 <HAL_RCC_ClockConfig+0x278>)
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	220c      	movs	r2, #12
 8002f58:	4013      	ands	r3, r2
 8002f5a:	2b08      	cmp	r3, #8
 8002f5c:	d1ef      	bne.n	8002f3e <HAL_RCC_ClockConfig+0x106>
 8002f5e:	e03a      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b03      	cmp	r3, #3
 8002f66:	d111      	bne.n	8002f8c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f68:	e009      	b.n	8002f7e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f6a:	f7fd fc5d 	bl	8000828 <HAL_GetTick>
 8002f6e:	0002      	movs	r2, r0
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	4a4d      	ldr	r2, [pc, #308]	; (80030ac <HAL_RCC_ClockConfig+0x274>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e08f      	b.n	800309e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f7e:	4b4c      	ldr	r3, [pc, #304]	; (80030b0 <HAL_RCC_ClockConfig+0x278>)
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	220c      	movs	r2, #12
 8002f84:	4013      	ands	r3, r2
 8002f86:	2b0c      	cmp	r3, #12
 8002f88:	d1ef      	bne.n	8002f6a <HAL_RCC_ClockConfig+0x132>
 8002f8a:	e024      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d11b      	bne.n	8002fcc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f94:	e009      	b.n	8002faa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f96:	f7fd fc47 	bl	8000828 <HAL_GetTick>
 8002f9a:	0002      	movs	r2, r0
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	4a42      	ldr	r2, [pc, #264]	; (80030ac <HAL_RCC_ClockConfig+0x274>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e079      	b.n	800309e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002faa:	4b41      	ldr	r3, [pc, #260]	; (80030b0 <HAL_RCC_ClockConfig+0x278>)
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	220c      	movs	r2, #12
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d1ef      	bne.n	8002f96 <HAL_RCC_ClockConfig+0x15e>
 8002fb6:	e00e      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb8:	f7fd fc36 	bl	8000828 <HAL_GetTick>
 8002fbc:	0002      	movs	r2, r0
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	4a3a      	ldr	r2, [pc, #232]	; (80030ac <HAL_RCC_ClockConfig+0x274>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e068      	b.n	800309e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002fcc:	4b38      	ldr	r3, [pc, #224]	; (80030b0 <HAL_RCC_ClockConfig+0x278>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	220c      	movs	r2, #12
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	d1f0      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd6:	4b34      	ldr	r3, [pc, #208]	; (80030a8 <HAL_RCC_ClockConfig+0x270>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	4013      	ands	r3, r2
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d21e      	bcs.n	8003022 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe4:	4b30      	ldr	r3, [pc, #192]	; (80030a8 <HAL_RCC_ClockConfig+0x270>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	4393      	bics	r3, r2
 8002fec:	0019      	movs	r1, r3
 8002fee:	4b2e      	ldr	r3, [pc, #184]	; (80030a8 <HAL_RCC_ClockConfig+0x270>)
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ff6:	f7fd fc17 	bl	8000828 <HAL_GetTick>
 8002ffa:	0003      	movs	r3, r0
 8002ffc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffe:	e009      	b.n	8003014 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003000:	f7fd fc12 	bl	8000828 <HAL_GetTick>
 8003004:	0002      	movs	r2, r0
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	4a28      	ldr	r2, [pc, #160]	; (80030ac <HAL_RCC_ClockConfig+0x274>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e044      	b.n	800309e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003014:	4b24      	ldr	r3, [pc, #144]	; (80030a8 <HAL_RCC_ClockConfig+0x270>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2201      	movs	r2, #1
 800301a:	4013      	ands	r3, r2
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d1ee      	bne.n	8003000 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2204      	movs	r2, #4
 8003028:	4013      	ands	r3, r2
 800302a:	d009      	beq.n	8003040 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800302c:	4b20      	ldr	r3, [pc, #128]	; (80030b0 <HAL_RCC_ClockConfig+0x278>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	4a20      	ldr	r2, [pc, #128]	; (80030b4 <HAL_RCC_ClockConfig+0x27c>)
 8003032:	4013      	ands	r3, r2
 8003034:	0019      	movs	r1, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	4b1d      	ldr	r3, [pc, #116]	; (80030b0 <HAL_RCC_ClockConfig+0x278>)
 800303c:	430a      	orrs	r2, r1
 800303e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2208      	movs	r2, #8
 8003046:	4013      	ands	r3, r2
 8003048:	d00a      	beq.n	8003060 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800304a:	4b19      	ldr	r3, [pc, #100]	; (80030b0 <HAL_RCC_ClockConfig+0x278>)
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	4a1a      	ldr	r2, [pc, #104]	; (80030b8 <HAL_RCC_ClockConfig+0x280>)
 8003050:	4013      	ands	r3, r2
 8003052:	0019      	movs	r1, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	00da      	lsls	r2, r3, #3
 800305a:	4b15      	ldr	r3, [pc, #84]	; (80030b0 <HAL_RCC_ClockConfig+0x278>)
 800305c:	430a      	orrs	r2, r1
 800305e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003060:	f000 f832 	bl	80030c8 <HAL_RCC_GetSysClockFreq>
 8003064:	0001      	movs	r1, r0
 8003066:	4b12      	ldr	r3, [pc, #72]	; (80030b0 <HAL_RCC_ClockConfig+0x278>)
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	091b      	lsrs	r3, r3, #4
 800306c:	220f      	movs	r2, #15
 800306e:	4013      	ands	r3, r2
 8003070:	4a12      	ldr	r2, [pc, #72]	; (80030bc <HAL_RCC_ClockConfig+0x284>)
 8003072:	5cd3      	ldrb	r3, [r2, r3]
 8003074:	000a      	movs	r2, r1
 8003076:	40da      	lsrs	r2, r3
 8003078:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <HAL_RCC_ClockConfig+0x288>)
 800307a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800307c:	4b11      	ldr	r3, [pc, #68]	; (80030c4 <HAL_RCC_ClockConfig+0x28c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	250b      	movs	r5, #11
 8003082:	197c      	adds	r4, r7, r5
 8003084:	0018      	movs	r0, r3
 8003086:	f7fd fb89 	bl	800079c <HAL_InitTick>
 800308a:	0003      	movs	r3, r0
 800308c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800308e:	197b      	adds	r3, r7, r5
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d002      	beq.n	800309c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003096:	197b      	adds	r3, r7, r5
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	e000      	b.n	800309e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	0018      	movs	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	b004      	add	sp, #16
 80030a4:	bdb0      	pop	{r4, r5, r7, pc}
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	40022000 	.word	0x40022000
 80030ac:	00001388 	.word	0x00001388
 80030b0:	40021000 	.word	0x40021000
 80030b4:	fffff8ff 	.word	0xfffff8ff
 80030b8:	ffffc7ff 	.word	0xffffc7ff
 80030bc:	080077e4 	.word	0x080077e4
 80030c0:	20000000 	.word	0x20000000
 80030c4:	20000004 	.word	0x20000004

080030c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030c8:	b5b0      	push	{r4, r5, r7, lr}
 80030ca:	b08e      	sub	sp, #56	; 0x38
 80030cc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80030ce:	4b4c      	ldr	r3, [pc, #304]	; (8003200 <HAL_RCC_GetSysClockFreq+0x138>)
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030d6:	230c      	movs	r3, #12
 80030d8:	4013      	ands	r3, r2
 80030da:	2b0c      	cmp	r3, #12
 80030dc:	d014      	beq.n	8003108 <HAL_RCC_GetSysClockFreq+0x40>
 80030de:	d900      	bls.n	80030e2 <HAL_RCC_GetSysClockFreq+0x1a>
 80030e0:	e07b      	b.n	80031da <HAL_RCC_GetSysClockFreq+0x112>
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d002      	beq.n	80030ec <HAL_RCC_GetSysClockFreq+0x24>
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d00b      	beq.n	8003102 <HAL_RCC_GetSysClockFreq+0x3a>
 80030ea:	e076      	b.n	80031da <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80030ec:	4b44      	ldr	r3, [pc, #272]	; (8003200 <HAL_RCC_GetSysClockFreq+0x138>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2210      	movs	r2, #16
 80030f2:	4013      	ands	r3, r2
 80030f4:	d002      	beq.n	80030fc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80030f6:	4b43      	ldr	r3, [pc, #268]	; (8003204 <HAL_RCC_GetSysClockFreq+0x13c>)
 80030f8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80030fa:	e07c      	b.n	80031f6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80030fc:	4b42      	ldr	r3, [pc, #264]	; (8003208 <HAL_RCC_GetSysClockFreq+0x140>)
 80030fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003100:	e079      	b.n	80031f6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003102:	4b42      	ldr	r3, [pc, #264]	; (800320c <HAL_RCC_GetSysClockFreq+0x144>)
 8003104:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003106:	e076      	b.n	80031f6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310a:	0c9a      	lsrs	r2, r3, #18
 800310c:	230f      	movs	r3, #15
 800310e:	401a      	ands	r2, r3
 8003110:	4b3f      	ldr	r3, [pc, #252]	; (8003210 <HAL_RCC_GetSysClockFreq+0x148>)
 8003112:	5c9b      	ldrb	r3, [r3, r2]
 8003114:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003118:	0d9a      	lsrs	r2, r3, #22
 800311a:	2303      	movs	r3, #3
 800311c:	4013      	ands	r3, r2
 800311e:	3301      	adds	r3, #1
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003122:	4b37      	ldr	r3, [pc, #220]	; (8003200 <HAL_RCC_GetSysClockFreq+0x138>)
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	2380      	movs	r3, #128	; 0x80
 8003128:	025b      	lsls	r3, r3, #9
 800312a:	4013      	ands	r3, r2
 800312c:	d01a      	beq.n	8003164 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800312e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003130:	61bb      	str	r3, [r7, #24]
 8003132:	2300      	movs	r3, #0
 8003134:	61fb      	str	r3, [r7, #28]
 8003136:	4a35      	ldr	r2, [pc, #212]	; (800320c <HAL_RCC_GetSysClockFreq+0x144>)
 8003138:	2300      	movs	r3, #0
 800313a:	69b8      	ldr	r0, [r7, #24]
 800313c:	69f9      	ldr	r1, [r7, #28]
 800313e:	f7fd f88f 	bl	8000260 <__aeabi_lmul>
 8003142:	0002      	movs	r2, r0
 8003144:	000b      	movs	r3, r1
 8003146:	0010      	movs	r0, r2
 8003148:	0019      	movs	r1, r3
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	613b      	str	r3, [r7, #16]
 800314e:	2300      	movs	r3, #0
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f7fd f863 	bl	8000220 <__aeabi_uldivmod>
 800315a:	0002      	movs	r2, r0
 800315c:	000b      	movs	r3, r1
 800315e:	0013      	movs	r3, r2
 8003160:	637b      	str	r3, [r7, #52]	; 0x34
 8003162:	e037      	b.n	80031d4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003164:	4b26      	ldr	r3, [pc, #152]	; (8003200 <HAL_RCC_GetSysClockFreq+0x138>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2210      	movs	r2, #16
 800316a:	4013      	ands	r3, r2
 800316c:	d01a      	beq.n	80031a4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800316e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003170:	60bb      	str	r3, [r7, #8]
 8003172:	2300      	movs	r3, #0
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	4a23      	ldr	r2, [pc, #140]	; (8003204 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003178:	2300      	movs	r3, #0
 800317a:	68b8      	ldr	r0, [r7, #8]
 800317c:	68f9      	ldr	r1, [r7, #12]
 800317e:	f7fd f86f 	bl	8000260 <__aeabi_lmul>
 8003182:	0002      	movs	r2, r0
 8003184:	000b      	movs	r3, r1
 8003186:	0010      	movs	r0, r2
 8003188:	0019      	movs	r1, r3
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	603b      	str	r3, [r7, #0]
 800318e:	2300      	movs	r3, #0
 8003190:	607b      	str	r3, [r7, #4]
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f7fd f843 	bl	8000220 <__aeabi_uldivmod>
 800319a:	0002      	movs	r2, r0
 800319c:	000b      	movs	r3, r1
 800319e:	0013      	movs	r3, r2
 80031a0:	637b      	str	r3, [r7, #52]	; 0x34
 80031a2:	e017      	b.n	80031d4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80031a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a6:	0018      	movs	r0, r3
 80031a8:	2300      	movs	r3, #0
 80031aa:	0019      	movs	r1, r3
 80031ac:	4a16      	ldr	r2, [pc, #88]	; (8003208 <HAL_RCC_GetSysClockFreq+0x140>)
 80031ae:	2300      	movs	r3, #0
 80031b0:	f7fd f856 	bl	8000260 <__aeabi_lmul>
 80031b4:	0002      	movs	r2, r0
 80031b6:	000b      	movs	r3, r1
 80031b8:	0010      	movs	r0, r2
 80031ba:	0019      	movs	r1, r3
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	001c      	movs	r4, r3
 80031c0:	2300      	movs	r3, #0
 80031c2:	001d      	movs	r5, r3
 80031c4:	0022      	movs	r2, r4
 80031c6:	002b      	movs	r3, r5
 80031c8:	f7fd f82a 	bl	8000220 <__aeabi_uldivmod>
 80031cc:	0002      	movs	r2, r0
 80031ce:	000b      	movs	r3, r1
 80031d0:	0013      	movs	r3, r2
 80031d2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80031d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031d6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80031d8:	e00d      	b.n	80031f6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80031da:	4b09      	ldr	r3, [pc, #36]	; (8003200 <HAL_RCC_GetSysClockFreq+0x138>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	0b5b      	lsrs	r3, r3, #13
 80031e0:	2207      	movs	r2, #7
 80031e2:	4013      	ands	r3, r2
 80031e4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80031e6:	6a3b      	ldr	r3, [r7, #32]
 80031e8:	3301      	adds	r3, #1
 80031ea:	2280      	movs	r2, #128	; 0x80
 80031ec:	0212      	lsls	r2, r2, #8
 80031ee:	409a      	lsls	r2, r3
 80031f0:	0013      	movs	r3, r2
 80031f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80031f4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80031f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80031f8:	0018      	movs	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	b00e      	add	sp, #56	; 0x38
 80031fe:	bdb0      	pop	{r4, r5, r7, pc}
 8003200:	40021000 	.word	0x40021000
 8003204:	003d0900 	.word	0x003d0900
 8003208:	00f42400 	.word	0x00f42400
 800320c:	007a1200 	.word	0x007a1200
 8003210:	080077f4 	.word	0x080077f4

08003214 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800321c:	2317      	movs	r3, #23
 800321e:	18fb      	adds	r3, r7, r3
 8003220:	2200      	movs	r2, #0
 8003222:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2220      	movs	r2, #32
 800322a:	4013      	ands	r3, r2
 800322c:	d106      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	2380      	movs	r3, #128	; 0x80
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	4013      	ands	r3, r2
 8003238:	d100      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x28>
 800323a:	e104      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800323c:	4bb1      	ldr	r3, [pc, #708]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800323e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003240:	2380      	movs	r3, #128	; 0x80
 8003242:	055b      	lsls	r3, r3, #21
 8003244:	4013      	ands	r3, r2
 8003246:	d10a      	bne.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003248:	4bae      	ldr	r3, [pc, #696]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800324a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800324c:	4bad      	ldr	r3, [pc, #692]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800324e:	2180      	movs	r1, #128	; 0x80
 8003250:	0549      	lsls	r1, r1, #21
 8003252:	430a      	orrs	r2, r1
 8003254:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003256:	2317      	movs	r3, #23
 8003258:	18fb      	adds	r3, r7, r3
 800325a:	2201      	movs	r2, #1
 800325c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325e:	4baa      	ldr	r3, [pc, #680]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	2380      	movs	r3, #128	; 0x80
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	4013      	ands	r3, r2
 8003268:	d11a      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800326a:	4ba7      	ldr	r3, [pc, #668]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	4ba6      	ldr	r3, [pc, #664]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003270:	2180      	movs	r1, #128	; 0x80
 8003272:	0049      	lsls	r1, r1, #1
 8003274:	430a      	orrs	r2, r1
 8003276:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003278:	f7fd fad6 	bl	8000828 <HAL_GetTick>
 800327c:	0003      	movs	r3, r0
 800327e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003280:	e008      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003282:	f7fd fad1 	bl	8000828 <HAL_GetTick>
 8003286:	0002      	movs	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b64      	cmp	r3, #100	; 0x64
 800328e:	d901      	bls.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e133      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003294:	4b9c      	ldr	r3, [pc, #624]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	2380      	movs	r3, #128	; 0x80
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	4013      	ands	r3, r2
 800329e:	d0f0      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80032a0:	4b98      	ldr	r3, [pc, #608]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	23c0      	movs	r3, #192	; 0xc0
 80032a6:	039b      	lsls	r3, r3, #14
 80032a8:	4013      	ands	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	23c0      	movs	r3, #192	; 0xc0
 80032b2:	039b      	lsls	r3, r3, #14
 80032b4:	4013      	ands	r3, r2
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d107      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	23c0      	movs	r3, #192	; 0xc0
 80032c2:	039b      	lsls	r3, r3, #14
 80032c4:	4013      	ands	r3, r2
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d013      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	23c0      	movs	r3, #192	; 0xc0
 80032d2:	029b      	lsls	r3, r3, #10
 80032d4:	401a      	ands	r2, r3
 80032d6:	23c0      	movs	r3, #192	; 0xc0
 80032d8:	029b      	lsls	r3, r3, #10
 80032da:	429a      	cmp	r2, r3
 80032dc:	d10a      	bne.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80032de:	4b89      	ldr	r3, [pc, #548]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	2380      	movs	r3, #128	; 0x80
 80032e4:	029b      	lsls	r3, r3, #10
 80032e6:	401a      	ands	r2, r3
 80032e8:	2380      	movs	r3, #128	; 0x80
 80032ea:	029b      	lsls	r3, r3, #10
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d101      	bne.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e103      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80032f4:	4b83      	ldr	r3, [pc, #524]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032f8:	23c0      	movs	r3, #192	; 0xc0
 80032fa:	029b      	lsls	r3, r3, #10
 80032fc:	4013      	ands	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d049      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	23c0      	movs	r3, #192	; 0xc0
 800330c:	029b      	lsls	r3, r3, #10
 800330e:	4013      	ands	r3, r2
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	429a      	cmp	r2, r3
 8003314:	d004      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2220      	movs	r2, #32
 800331c:	4013      	ands	r3, r2
 800331e:	d10d      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	23c0      	movs	r3, #192	; 0xc0
 8003326:	029b      	lsls	r3, r3, #10
 8003328:	4013      	ands	r3, r2
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	429a      	cmp	r2, r3
 800332e:	d034      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	2380      	movs	r3, #128	; 0x80
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	4013      	ands	r3, r2
 800333a:	d02e      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800333c:	4b71      	ldr	r3, [pc, #452]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800333e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003340:	4a72      	ldr	r2, [pc, #456]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003342:	4013      	ands	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003346:	4b6f      	ldr	r3, [pc, #444]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003348:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800334a:	4b6e      	ldr	r3, [pc, #440]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800334c:	2180      	movs	r1, #128	; 0x80
 800334e:	0309      	lsls	r1, r1, #12
 8003350:	430a      	orrs	r2, r1
 8003352:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003354:	4b6b      	ldr	r3, [pc, #428]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003356:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003358:	4b6a      	ldr	r3, [pc, #424]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800335a:	496d      	ldr	r1, [pc, #436]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800335c:	400a      	ands	r2, r1
 800335e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003360:	4b68      	ldr	r3, [pc, #416]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	2380      	movs	r3, #128	; 0x80
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	4013      	ands	r3, r2
 800336e:	d014      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003370:	f7fd fa5a 	bl	8000828 <HAL_GetTick>
 8003374:	0003      	movs	r3, r0
 8003376:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003378:	e009      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800337a:	f7fd fa55 	bl	8000828 <HAL_GetTick>
 800337e:	0002      	movs	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	4a63      	ldr	r2, [pc, #396]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d901      	bls.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e0b6      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800338e:	4b5d      	ldr	r3, [pc, #372]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003390:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003392:	2380      	movs	r3, #128	; 0x80
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4013      	ands	r3, r2
 8003398:	d0ef      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	2380      	movs	r3, #128	; 0x80
 80033a0:	011b      	lsls	r3, r3, #4
 80033a2:	4013      	ands	r3, r2
 80033a4:	d01f      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	23c0      	movs	r3, #192	; 0xc0
 80033ac:	029b      	lsls	r3, r3, #10
 80033ae:	401a      	ands	r2, r3
 80033b0:	23c0      	movs	r3, #192	; 0xc0
 80033b2:	029b      	lsls	r3, r3, #10
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d10c      	bne.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80033b8:	4b52      	ldr	r3, [pc, #328]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a56      	ldr	r2, [pc, #344]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033be:	4013      	ands	r3, r2
 80033c0:	0019      	movs	r1, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	23c0      	movs	r3, #192	; 0xc0
 80033c8:	039b      	lsls	r3, r3, #14
 80033ca:	401a      	ands	r2, r3
 80033cc:	4b4d      	ldr	r3, [pc, #308]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033ce:	430a      	orrs	r2, r1
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	4b4c      	ldr	r3, [pc, #304]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033d4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	23c0      	movs	r3, #192	; 0xc0
 80033dc:	029b      	lsls	r3, r3, #10
 80033de:	401a      	ands	r2, r3
 80033e0:	4b48      	ldr	r3, [pc, #288]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033e2:	430a      	orrs	r2, r1
 80033e4:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2220      	movs	r2, #32
 80033ec:	4013      	ands	r3, r2
 80033ee:	d01f      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	23c0      	movs	r3, #192	; 0xc0
 80033f6:	029b      	lsls	r3, r3, #10
 80033f8:	401a      	ands	r2, r3
 80033fa:	23c0      	movs	r3, #192	; 0xc0
 80033fc:	029b      	lsls	r3, r3, #10
 80033fe:	429a      	cmp	r2, r3
 8003400:	d10c      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003402:	4b40      	ldr	r3, [pc, #256]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a44      	ldr	r2, [pc, #272]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003408:	4013      	ands	r3, r2
 800340a:	0019      	movs	r1, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	23c0      	movs	r3, #192	; 0xc0
 8003412:	039b      	lsls	r3, r3, #14
 8003414:	401a      	ands	r2, r3
 8003416:	4b3b      	ldr	r3, [pc, #236]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003418:	430a      	orrs	r2, r1
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	4b39      	ldr	r3, [pc, #228]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800341e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	23c0      	movs	r3, #192	; 0xc0
 8003426:	029b      	lsls	r3, r3, #10
 8003428:	401a      	ands	r2, r3
 800342a:	4b36      	ldr	r3, [pc, #216]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800342c:	430a      	orrs	r2, r1
 800342e:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003430:	2317      	movs	r3, #23
 8003432:	18fb      	adds	r3, r7, r3
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d105      	bne.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800343a:	4b32      	ldr	r3, [pc, #200]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800343c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800343e:	4b31      	ldr	r3, [pc, #196]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003440:	4936      	ldr	r1, [pc, #216]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003442:	400a      	ands	r2, r1
 8003444:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2201      	movs	r2, #1
 800344c:	4013      	ands	r3, r2
 800344e:	d009      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003450:	4b2c      	ldr	r3, [pc, #176]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003454:	2203      	movs	r2, #3
 8003456:	4393      	bics	r3, r2
 8003458:	0019      	movs	r1, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	4b29      	ldr	r3, [pc, #164]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003460:	430a      	orrs	r2, r1
 8003462:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2202      	movs	r2, #2
 800346a:	4013      	ands	r3, r2
 800346c:	d009      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800346e:	4b25      	ldr	r3, [pc, #148]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003472:	220c      	movs	r2, #12
 8003474:	4393      	bics	r3, r2
 8003476:	0019      	movs	r1, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	4b21      	ldr	r3, [pc, #132]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800347e:	430a      	orrs	r2, r1
 8003480:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2204      	movs	r2, #4
 8003488:	4013      	ands	r3, r2
 800348a:	d009      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800348c:	4b1d      	ldr	r3, [pc, #116]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800348e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003490:	4a23      	ldr	r2, [pc, #140]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8003492:	4013      	ands	r3, r2
 8003494:	0019      	movs	r1, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	695a      	ldr	r2, [r3, #20]
 800349a:	4b1a      	ldr	r3, [pc, #104]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800349c:	430a      	orrs	r2, r1
 800349e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2208      	movs	r2, #8
 80034a6:	4013      	ands	r3, r2
 80034a8:	d009      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034aa:	4b16      	ldr	r3, [pc, #88]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ae:	4a1d      	ldr	r2, [pc, #116]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	0019      	movs	r1, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699a      	ldr	r2, [r3, #24]
 80034b8:	4b12      	ldr	r3, [pc, #72]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034ba:	430a      	orrs	r2, r1
 80034bc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2240      	movs	r2, #64	; 0x40
 80034c4:	4013      	ands	r3, r2
 80034c6:	d009      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034c8:	4b0e      	ldr	r3, [pc, #56]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034cc:	4a16      	ldr	r2, [pc, #88]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80034ce:	4013      	ands	r3, r2
 80034d0:	0019      	movs	r1, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1a      	ldr	r2, [r3, #32]
 80034d6:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034d8:	430a      	orrs	r2, r1
 80034da:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2280      	movs	r2, #128	; 0x80
 80034e2:	4013      	ands	r3, r2
 80034e4:	d009      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80034e6:	4b07      	ldr	r3, [pc, #28]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ea:	4a10      	ldr	r2, [pc, #64]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80034ec:	4013      	ands	r3, r2
 80034ee:	0019      	movs	r1, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	69da      	ldr	r2, [r3, #28]
 80034f4:	4b03      	ldr	r3, [pc, #12]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034f6:	430a      	orrs	r2, r1
 80034f8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	0018      	movs	r0, r3
 80034fe:	46bd      	mov	sp, r7
 8003500:	b006      	add	sp, #24
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40021000 	.word	0x40021000
 8003508:	40007000 	.word	0x40007000
 800350c:	fffcffff 	.word	0xfffcffff
 8003510:	fff7ffff 	.word	0xfff7ffff
 8003514:	00001388 	.word	0x00001388
 8003518:	ffcfffff 	.word	0xffcfffff
 800351c:	efffffff 	.word	0xefffffff
 8003520:	fffff3ff 	.word	0xfffff3ff
 8003524:	ffffcfff 	.word	0xffffcfff
 8003528:	fbffffff 	.word	0xfbffffff
 800352c:	fff3ffff 	.word	0xfff3ffff

08003530 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2244      	movs	r2, #68	; 0x44
 800353c:	2100      	movs	r1, #0
 800353e:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003540:	4b05      	ldr	r3, [pc, #20]	; (8003558 <USB_EnableGlobalInt+0x28>)
 8003542:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	b299      	uxth	r1, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2240      	movs	r2, #64	; 0x40
 800354c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	0018      	movs	r0, r3
 8003552:	46bd      	mov	sp, r7
 8003554:	b004      	add	sp, #16
 8003556:	bd80      	pop	{r7, pc}
 8003558:	0000bf80 	.word	0x0000bf80

0800355c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003564:	4b09      	ldr	r3, [pc, #36]	; (800358c <USB_DisableGlobalInt+0x30>)
 8003566:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2240      	movs	r2, #64	; 0x40
 800356c:	5a9b      	ldrh	r3, [r3, r2]
 800356e:	b29b      	uxth	r3, r3
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	b292      	uxth	r2, r2
 8003574:	43d2      	mvns	r2, r2
 8003576:	b292      	uxth	r2, r2
 8003578:	4013      	ands	r3, r2
 800357a:	b299      	uxth	r1, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2240      	movs	r2, #64	; 0x40
 8003580:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	0018      	movs	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	b004      	add	sp, #16
 800358a:	bd80      	pop	{r7, pc}
 800358c:	0000bf80 	.word	0x0000bf80

08003590 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003590:	b084      	sub	sp, #16
 8003592:	b590      	push	{r4, r7, lr}
 8003594:	b083      	sub	sp, #12
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	2004      	movs	r0, #4
 800359c:	2410      	movs	r4, #16
 800359e:	1900      	adds	r0, r0, r4
 80035a0:	2408      	movs	r4, #8
 80035a2:	46a4      	mov	ip, r4
 80035a4:	44bc      	add	ip, r7
 80035a6:	4460      	add	r0, ip
 80035a8:	6001      	str	r1, [r0, #0]
 80035aa:	6042      	str	r2, [r0, #4]
 80035ac:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2240      	movs	r2, #64	; 0x40
 80035b2:	2101      	movs	r1, #1
 80035b4:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2240      	movs	r2, #64	; 0x40
 80035ba:	2100      	movs	r1, #0
 80035bc:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2244      	movs	r2, #68	; 0x44
 80035c2:	2100      	movs	r1, #0
 80035c4:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2250      	movs	r2, #80	; 0x50
 80035ca:	2100      	movs	r1, #0
 80035cc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	0018      	movs	r0, r3
 80035d2:	46bd      	mov	sp, r7
 80035d4:	b003      	add	sp, #12
 80035d6:	bc90      	pop	{r4, r7}
 80035d8:	bc08      	pop	{r3}
 80035da:	b004      	add	sp, #16
 80035dc:	4718      	bx	r3
	...

080035e0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b09c      	sub	sp, #112	; 0x70
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80035ea:	236f      	movs	r3, #111	; 0x6f
 80035ec:	18fb      	adds	r3, r7, r3
 80035ee:	2200      	movs	r2, #0
 80035f0:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	18d3      	adds	r3, r2, r3
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	b29a      	uxth	r2, r3
 8003600:	236c      	movs	r3, #108	; 0x6c
 8003602:	18fb      	adds	r3, r7, r3
 8003604:	49a3      	ldr	r1, [pc, #652]	; (8003894 <USB_ActivateEndpoint+0x2b4>)
 8003606:	400a      	ands	r2, r1
 8003608:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	78db      	ldrb	r3, [r3, #3]
 800360e:	2b03      	cmp	r3, #3
 8003610:	d017      	beq.n	8003642 <USB_ActivateEndpoint+0x62>
 8003612:	dc28      	bgt.n	8003666 <USB_ActivateEndpoint+0x86>
 8003614:	2b02      	cmp	r3, #2
 8003616:	d00e      	beq.n	8003636 <USB_ActivateEndpoint+0x56>
 8003618:	dc25      	bgt.n	8003666 <USB_ActivateEndpoint+0x86>
 800361a:	2b00      	cmp	r3, #0
 800361c:	d002      	beq.n	8003624 <USB_ActivateEndpoint+0x44>
 800361e:	2b01      	cmp	r3, #1
 8003620:	d018      	beq.n	8003654 <USB_ActivateEndpoint+0x74>
 8003622:	e020      	b.n	8003666 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003624:	226c      	movs	r2, #108	; 0x6c
 8003626:	18bb      	adds	r3, r7, r2
 8003628:	18ba      	adds	r2, r7, r2
 800362a:	8812      	ldrh	r2, [r2, #0]
 800362c:	2180      	movs	r1, #128	; 0x80
 800362e:	0089      	lsls	r1, r1, #2
 8003630:	430a      	orrs	r2, r1
 8003632:	801a      	strh	r2, [r3, #0]
      break;
 8003634:	e01c      	b.n	8003670 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8003636:	226c      	movs	r2, #108	; 0x6c
 8003638:	18bb      	adds	r3, r7, r2
 800363a:	18ba      	adds	r2, r7, r2
 800363c:	8812      	ldrh	r2, [r2, #0]
 800363e:	801a      	strh	r2, [r3, #0]
      break;
 8003640:	e016      	b.n	8003670 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003642:	226c      	movs	r2, #108	; 0x6c
 8003644:	18bb      	adds	r3, r7, r2
 8003646:	18ba      	adds	r2, r7, r2
 8003648:	8812      	ldrh	r2, [r2, #0]
 800364a:	21c0      	movs	r1, #192	; 0xc0
 800364c:	00c9      	lsls	r1, r1, #3
 800364e:	430a      	orrs	r2, r1
 8003650:	801a      	strh	r2, [r3, #0]
      break;
 8003652:	e00d      	b.n	8003670 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003654:	226c      	movs	r2, #108	; 0x6c
 8003656:	18bb      	adds	r3, r7, r2
 8003658:	18ba      	adds	r2, r7, r2
 800365a:	8812      	ldrh	r2, [r2, #0]
 800365c:	2180      	movs	r1, #128	; 0x80
 800365e:	00c9      	lsls	r1, r1, #3
 8003660:	430a      	orrs	r2, r1
 8003662:	801a      	strh	r2, [r3, #0]
      break;
 8003664:	e004      	b.n	8003670 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8003666:	236f      	movs	r3, #111	; 0x6f
 8003668:	18fb      	adds	r3, r7, r3
 800366a:	2201      	movs	r2, #1
 800366c:	701a      	strb	r2, [r3, #0]
      break;
 800366e:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	18d3      	adds	r3, r2, r3
 800367a:	226c      	movs	r2, #108	; 0x6c
 800367c:	18ba      	adds	r2, r7, r2
 800367e:	8812      	ldrh	r2, [r2, #0]
 8003680:	4985      	ldr	r1, [pc, #532]	; (8003898 <USB_ActivateEndpoint+0x2b8>)
 8003682:	430a      	orrs	r2, r1
 8003684:	b292      	uxth	r2, r2
 8003686:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	18d3      	adds	r3, r2, r3
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	b29b      	uxth	r3, r3
 8003696:	b21b      	sxth	r3, r3
 8003698:	4a80      	ldr	r2, [pc, #512]	; (800389c <USB_ActivateEndpoint+0x2bc>)
 800369a:	4013      	ands	r3, r2
 800369c:	b21a      	sxth	r2, r3
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	b21b      	sxth	r3, r3
 80036a4:	4313      	orrs	r3, r2
 80036a6:	b21a      	sxth	r2, r3
 80036a8:	2166      	movs	r1, #102	; 0x66
 80036aa:	187b      	adds	r3, r7, r1
 80036ac:	801a      	strh	r2, [r3, #0]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	18d3      	adds	r3, r2, r3
 80036b8:	187a      	adds	r2, r7, r1
 80036ba:	8812      	ldrh	r2, [r2, #0]
 80036bc:	4976      	ldr	r1, [pc, #472]	; (8003898 <USB_ActivateEndpoint+0x2b8>)
 80036be:	430a      	orrs	r2, r1
 80036c0:	b292      	uxth	r2, r2
 80036c2:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	7b1b      	ldrb	r3, [r3, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d000      	beq.n	80036ce <USB_ActivateEndpoint+0xee>
 80036cc:	e178      	b.n	80039c0 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	785b      	ldrb	r3, [r3, #1]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d100      	bne.n	80036d8 <USB_ActivateEndpoint+0xf8>
 80036d6:	e07a      	b.n	80037ce <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	61bb      	str	r3, [r7, #24]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2250      	movs	r2, #80	; 0x50
 80036e0:	5a9b      	ldrh	r3, [r3, r2]
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	001a      	movs	r2, r3
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	189b      	adds	r3, r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	00da      	lsls	r2, r3, #3
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	18d3      	adds	r3, r2, r3
 80036f6:	2280      	movs	r2, #128	; 0x80
 80036f8:	00d2      	lsls	r2, r2, #3
 80036fa:	4694      	mov	ip, r2
 80036fc:	4463      	add	r3, ip
 80036fe:	617b      	str	r3, [r7, #20]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	88db      	ldrh	r3, [r3, #6]
 8003704:	085b      	lsrs	r3, r3, #1
 8003706:	b29b      	uxth	r3, r3
 8003708:	18db      	adds	r3, r3, r3
 800370a:	b29a      	uxth	r2, r3
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	18d2      	adds	r2, r2, r3
 800371a:	2112      	movs	r1, #18
 800371c:	187b      	adds	r3, r7, r1
 800371e:	8812      	ldrh	r2, [r2, #0]
 8003720:	801a      	strh	r2, [r3, #0]
 8003722:	187b      	adds	r3, r7, r1
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	2240      	movs	r2, #64	; 0x40
 8003728:	4013      	ands	r3, r2
 800372a:	d016      	beq.n	800375a <USB_ActivateEndpoint+0x17a>
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	18d3      	adds	r3, r2, r3
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	b29a      	uxth	r2, r3
 800373a:	2010      	movs	r0, #16
 800373c:	183b      	adds	r3, r7, r0
 800373e:	4957      	ldr	r1, [pc, #348]	; (800389c <USB_ActivateEndpoint+0x2bc>)
 8003740:	400a      	ands	r2, r1
 8003742:	801a      	strh	r2, [r3, #0]
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	18d3      	adds	r3, r2, r3
 800374e:	183a      	adds	r2, r7, r0
 8003750:	8812      	ldrh	r2, [r2, #0]
 8003752:	4953      	ldr	r1, [pc, #332]	; (80038a0 <USB_ActivateEndpoint+0x2c0>)
 8003754:	430a      	orrs	r2, r1
 8003756:	b292      	uxth	r2, r2
 8003758:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	78db      	ldrb	r3, [r3, #3]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d01d      	beq.n	800379e <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	18d3      	adds	r3, r2, r3
 800376c:	881b      	ldrh	r3, [r3, #0]
 800376e:	b29a      	uxth	r2, r3
 8003770:	200c      	movs	r0, #12
 8003772:	183b      	adds	r3, r7, r0
 8003774:	494b      	ldr	r1, [pc, #300]	; (80038a4 <USB_ActivateEndpoint+0x2c4>)
 8003776:	400a      	ands	r2, r1
 8003778:	801a      	strh	r2, [r3, #0]
 800377a:	183b      	adds	r3, r7, r0
 800377c:	183a      	adds	r2, r7, r0
 800377e:	8812      	ldrh	r2, [r2, #0]
 8003780:	2120      	movs	r1, #32
 8003782:	404a      	eors	r2, r1
 8003784:	801a      	strh	r2, [r3, #0]
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	18d3      	adds	r3, r2, r3
 8003790:	183a      	adds	r2, r7, r0
 8003792:	8812      	ldrh	r2, [r2, #0]
 8003794:	4940      	ldr	r1, [pc, #256]	; (8003898 <USB_ActivateEndpoint+0x2b8>)
 8003796:	430a      	orrs	r2, r1
 8003798:	b292      	uxth	r2, r2
 800379a:	801a      	strh	r2, [r3, #0]
 800379c:	e2b4      	b.n	8003d08 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	18d3      	adds	r3, r2, r3
 80037a8:	881b      	ldrh	r3, [r3, #0]
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	200e      	movs	r0, #14
 80037ae:	183b      	adds	r3, r7, r0
 80037b0:	493c      	ldr	r1, [pc, #240]	; (80038a4 <USB_ActivateEndpoint+0x2c4>)
 80037b2:	400a      	ands	r2, r1
 80037b4:	801a      	strh	r2, [r3, #0]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	18d3      	adds	r3, r2, r3
 80037c0:	183a      	adds	r2, r7, r0
 80037c2:	8812      	ldrh	r2, [r2, #0]
 80037c4:	4934      	ldr	r1, [pc, #208]	; (8003898 <USB_ActivateEndpoint+0x2b8>)
 80037c6:	430a      	orrs	r2, r1
 80037c8:	b292      	uxth	r2, r2
 80037ca:	801a      	strh	r2, [r3, #0]
 80037cc:	e29c      	b.n	8003d08 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	633b      	str	r3, [r7, #48]	; 0x30
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2250      	movs	r2, #80	; 0x50
 80037d6:	5a9b      	ldrh	r3, [r3, r2]
 80037d8:	b29b      	uxth	r3, r3
 80037da:	001a      	movs	r2, r3
 80037dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037de:	189b      	adds	r3, r3, r2
 80037e0:	633b      	str	r3, [r7, #48]	; 0x30
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	00da      	lsls	r2, r3, #3
 80037e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ea:	18d3      	adds	r3, r2, r3
 80037ec:	4a2e      	ldr	r2, [pc, #184]	; (80038a8 <USB_ActivateEndpoint+0x2c8>)
 80037ee:	4694      	mov	ip, r2
 80037f0:	4463      	add	r3, ip
 80037f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	88db      	ldrh	r3, [r3, #6]
 80037f8:	085b      	lsrs	r3, r3, #1
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	18db      	adds	r3, r3, r3
 80037fe:	b29a      	uxth	r2, r3
 8003800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003802:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	62bb      	str	r3, [r7, #40]	; 0x28
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2250      	movs	r2, #80	; 0x50
 800380c:	5a9b      	ldrh	r3, [r3, r2]
 800380e:	b29b      	uxth	r3, r3
 8003810:	001a      	movs	r2, r3
 8003812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003814:	189b      	adds	r3, r3, r2
 8003816:	62bb      	str	r3, [r7, #40]	; 0x28
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	00da      	lsls	r2, r3, #3
 800381e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003820:	18d3      	adds	r3, r2, r3
 8003822:	4a22      	ldr	r2, [pc, #136]	; (80038ac <USB_ActivateEndpoint+0x2cc>)
 8003824:	4694      	mov	ip, r2
 8003826:	4463      	add	r3, ip
 8003828:	627b      	str	r3, [r7, #36]	; 0x24
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	b29b      	uxth	r3, r3
 8003830:	059b      	lsls	r3, r3, #22
 8003832:	0d9b      	lsrs	r3, r3, #22
 8003834:	b29a      	uxth	r2, r3
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	801a      	strh	r2, [r3, #0]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	2b3e      	cmp	r3, #62	; 0x3e
 8003840:	d91a      	bls.n	8003878 <USB_ActivateEndpoint+0x298>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	095b      	lsrs	r3, r3, #5
 8003848:	66bb      	str	r3, [r7, #104]	; 0x68
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	221f      	movs	r2, #31
 8003850:	4013      	ands	r3, r2
 8003852:	d102      	bne.n	800385a <USB_ActivateEndpoint+0x27a>
 8003854:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003856:	3b01      	subs	r3, #1
 8003858:	66bb      	str	r3, [r7, #104]	; 0x68
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	881b      	ldrh	r3, [r3, #0]
 800385e:	b29a      	uxth	r2, r3
 8003860:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003862:	b29b      	uxth	r3, r3
 8003864:	029b      	lsls	r3, r3, #10
 8003866:	b29b      	uxth	r3, r3
 8003868:	4313      	orrs	r3, r2
 800386a:	b29b      	uxth	r3, r3
 800386c:	4a10      	ldr	r2, [pc, #64]	; (80038b0 <USB_ActivateEndpoint+0x2d0>)
 800386e:	4313      	orrs	r3, r2
 8003870:	b29a      	uxth	r2, r3
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	801a      	strh	r2, [r3, #0]
 8003876:	e034      	b.n	80038e2 <USB_ActivateEndpoint+0x302>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d119      	bne.n	80038b4 <USB_ActivateEndpoint+0x2d4>
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	b29b      	uxth	r3, r3
 8003886:	4a0a      	ldr	r2, [pc, #40]	; (80038b0 <USB_ActivateEndpoint+0x2d0>)
 8003888:	4313      	orrs	r3, r2
 800388a:	b29a      	uxth	r2, r3
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	801a      	strh	r2, [r3, #0]
 8003890:	e027      	b.n	80038e2 <USB_ActivateEndpoint+0x302>
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	ffff898f 	.word	0xffff898f
 8003898:	ffff8080 	.word	0xffff8080
 800389c:	ffff8f8f 	.word	0xffff8f8f
 80038a0:	ffff80c0 	.word	0xffff80c0
 80038a4:	ffff8fbf 	.word	0xffff8fbf
 80038a8:	00000404 	.word	0x00000404
 80038ac:	00000406 	.word	0x00000406
 80038b0:	ffff8000 	.word	0xffff8000
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	085b      	lsrs	r3, r3, #1
 80038ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	2201      	movs	r2, #1
 80038c2:	4013      	ands	r3, r2
 80038c4:	d002      	beq.n	80038cc <USB_ActivateEndpoint+0x2ec>
 80038c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038c8:	3301      	adds	r3, #1
 80038ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	881b      	ldrh	r3, [r3, #0]
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	029b      	lsls	r3, r3, #10
 80038d8:	b29b      	uxth	r3, r3
 80038da:	4313      	orrs	r3, r2
 80038dc:	b29a      	uxth	r2, r3
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	18d2      	adds	r2, r2, r3
 80038ec:	2122      	movs	r1, #34	; 0x22
 80038ee:	187b      	adds	r3, r7, r1
 80038f0:	8812      	ldrh	r2, [r2, #0]
 80038f2:	801a      	strh	r2, [r3, #0]
 80038f4:	187b      	adds	r3, r7, r1
 80038f6:	881a      	ldrh	r2, [r3, #0]
 80038f8:	2380      	movs	r3, #128	; 0x80
 80038fa:	01db      	lsls	r3, r3, #7
 80038fc:	4013      	ands	r3, r2
 80038fe:	d016      	beq.n	800392e <USB_ActivateEndpoint+0x34e>
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	18d3      	adds	r3, r2, r3
 800390a:	881b      	ldrh	r3, [r3, #0]
 800390c:	b29a      	uxth	r2, r3
 800390e:	2020      	movs	r0, #32
 8003910:	183b      	adds	r3, r7, r0
 8003912:	49dd      	ldr	r1, [pc, #884]	; (8003c88 <USB_ActivateEndpoint+0x6a8>)
 8003914:	400a      	ands	r2, r1
 8003916:	801a      	strh	r2, [r3, #0]
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	18d3      	adds	r3, r2, r3
 8003922:	183a      	adds	r2, r7, r0
 8003924:	8812      	ldrh	r2, [r2, #0]
 8003926:	49d9      	ldr	r1, [pc, #868]	; (8003c8c <USB_ActivateEndpoint+0x6ac>)
 8003928:	430a      	orrs	r2, r1
 800392a:	b292      	uxth	r2, r2
 800392c:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d125      	bne.n	8003982 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	18d3      	adds	r3, r2, r3
 8003940:	881b      	ldrh	r3, [r3, #0]
 8003942:	b29a      	uxth	r2, r3
 8003944:	201c      	movs	r0, #28
 8003946:	183b      	adds	r3, r7, r0
 8003948:	49d1      	ldr	r1, [pc, #836]	; (8003c90 <USB_ActivateEndpoint+0x6b0>)
 800394a:	400a      	ands	r2, r1
 800394c:	801a      	strh	r2, [r3, #0]
 800394e:	183b      	adds	r3, r7, r0
 8003950:	183a      	adds	r2, r7, r0
 8003952:	8812      	ldrh	r2, [r2, #0]
 8003954:	2180      	movs	r1, #128	; 0x80
 8003956:	0149      	lsls	r1, r1, #5
 8003958:	404a      	eors	r2, r1
 800395a:	801a      	strh	r2, [r3, #0]
 800395c:	183b      	adds	r3, r7, r0
 800395e:	183a      	adds	r2, r7, r0
 8003960:	8812      	ldrh	r2, [r2, #0]
 8003962:	2180      	movs	r1, #128	; 0x80
 8003964:	0189      	lsls	r1, r1, #6
 8003966:	404a      	eors	r2, r1
 8003968:	801a      	strh	r2, [r3, #0]
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	18d3      	adds	r3, r2, r3
 8003974:	183a      	adds	r2, r7, r0
 8003976:	8812      	ldrh	r2, [r2, #0]
 8003978:	49c6      	ldr	r1, [pc, #792]	; (8003c94 <USB_ActivateEndpoint+0x6b4>)
 800397a:	430a      	orrs	r2, r1
 800397c:	b292      	uxth	r2, r2
 800397e:	801a      	strh	r2, [r3, #0]
 8003980:	e1c2      	b.n	8003d08 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	18d3      	adds	r3, r2, r3
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	b29a      	uxth	r2, r3
 8003990:	201e      	movs	r0, #30
 8003992:	183b      	adds	r3, r7, r0
 8003994:	49be      	ldr	r1, [pc, #760]	; (8003c90 <USB_ActivateEndpoint+0x6b0>)
 8003996:	400a      	ands	r2, r1
 8003998:	801a      	strh	r2, [r3, #0]
 800399a:	183b      	adds	r3, r7, r0
 800399c:	183a      	adds	r2, r7, r0
 800399e:	8812      	ldrh	r2, [r2, #0]
 80039a0:	2180      	movs	r1, #128	; 0x80
 80039a2:	0189      	lsls	r1, r1, #6
 80039a4:	404a      	eors	r2, r1
 80039a6:	801a      	strh	r2, [r3, #0]
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	18d3      	adds	r3, r2, r3
 80039b2:	183a      	adds	r2, r7, r0
 80039b4:	8812      	ldrh	r2, [r2, #0]
 80039b6:	49b7      	ldr	r1, [pc, #732]	; (8003c94 <USB_ActivateEndpoint+0x6b4>)
 80039b8:	430a      	orrs	r2, r1
 80039ba:	b292      	uxth	r2, r2
 80039bc:	801a      	strh	r2, [r3, #0]
 80039be:	e1a3      	b.n	8003d08 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	78db      	ldrb	r3, [r3, #3]
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d117      	bne.n	80039f8 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	18d3      	adds	r3, r2, r3
 80039d2:	881b      	ldrh	r3, [r3, #0]
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	2062      	movs	r0, #98	; 0x62
 80039d8:	183b      	adds	r3, r7, r0
 80039da:	49ab      	ldr	r1, [pc, #684]	; (8003c88 <USB_ActivateEndpoint+0x6a8>)
 80039dc:	400a      	ands	r2, r1
 80039de:	801a      	strh	r2, [r3, #0]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	18d3      	adds	r3, r2, r3
 80039ea:	183a      	adds	r2, r7, r0
 80039ec:	8812      	ldrh	r2, [r2, #0]
 80039ee:	49aa      	ldr	r1, [pc, #680]	; (8003c98 <USB_ActivateEndpoint+0x6b8>)
 80039f0:	430a      	orrs	r2, r1
 80039f2:	b292      	uxth	r2, r2
 80039f4:	801a      	strh	r2, [r3, #0]
 80039f6:	e016      	b.n	8003a26 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	18d3      	adds	r3, r2, r3
 8003a02:	881b      	ldrh	r3, [r3, #0]
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	2064      	movs	r0, #100	; 0x64
 8003a08:	183b      	adds	r3, r7, r0
 8003a0a:	49a4      	ldr	r1, [pc, #656]	; (8003c9c <USB_ActivateEndpoint+0x6bc>)
 8003a0c:	400a      	ands	r2, r1
 8003a0e:	801a      	strh	r2, [r3, #0]
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	18d3      	adds	r3, r2, r3
 8003a1a:	183a      	adds	r2, r7, r0
 8003a1c:	8812      	ldrh	r2, [r2, #0]
 8003a1e:	499d      	ldr	r1, [pc, #628]	; (8003c94 <USB_ActivateEndpoint+0x6b4>)
 8003a20:	430a      	orrs	r2, r1
 8003a22:	b292      	uxth	r2, r2
 8003a24:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2250      	movs	r2, #80	; 0x50
 8003a2e:	5a9b      	ldrh	r3, [r3, r2]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	001a      	movs	r2, r3
 8003a34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a36:	189b      	adds	r3, r3, r2
 8003a38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	00da      	lsls	r2, r3, #3
 8003a40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a42:	18d3      	adds	r3, r2, r3
 8003a44:	2280      	movs	r2, #128	; 0x80
 8003a46:	00d2      	lsls	r2, r2, #3
 8003a48:	4694      	mov	ip, r2
 8003a4a:	4463      	add	r3, ip
 8003a4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	891b      	ldrh	r3, [r3, #8]
 8003a52:	085b      	lsrs	r3, r3, #1
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	18db      	adds	r3, r3, r3
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a5c:	801a      	strh	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	657b      	str	r3, [r7, #84]	; 0x54
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2250      	movs	r2, #80	; 0x50
 8003a66:	5a9b      	ldrh	r3, [r3, r2]
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	001a      	movs	r2, r3
 8003a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a6e:	189b      	adds	r3, r3, r2
 8003a70:	657b      	str	r3, [r7, #84]	; 0x54
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	00da      	lsls	r2, r3, #3
 8003a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a7a:	18d3      	adds	r3, r2, r3
 8003a7c:	4a88      	ldr	r2, [pc, #544]	; (8003ca0 <USB_ActivateEndpoint+0x6c0>)
 8003a7e:	4694      	mov	ip, r2
 8003a80:	4463      	add	r3, ip
 8003a82:	653b      	str	r3, [r7, #80]	; 0x50
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	895b      	ldrh	r3, [r3, #10]
 8003a88:	085b      	lsrs	r3, r3, #1
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	18db      	adds	r3, r3, r3
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a92:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	785b      	ldrb	r3, [r3, #1]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d000      	beq.n	8003a9e <USB_ActivateEndpoint+0x4be>
 8003a9c:	e087      	b.n	8003bae <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	18d2      	adds	r2, r2, r3
 8003aa8:	2140      	movs	r1, #64	; 0x40
 8003aaa:	187b      	adds	r3, r7, r1
 8003aac:	8812      	ldrh	r2, [r2, #0]
 8003aae:	801a      	strh	r2, [r3, #0]
 8003ab0:	187b      	adds	r3, r7, r1
 8003ab2:	881a      	ldrh	r2, [r3, #0]
 8003ab4:	2380      	movs	r3, #128	; 0x80
 8003ab6:	01db      	lsls	r3, r3, #7
 8003ab8:	4013      	ands	r3, r2
 8003aba:	d016      	beq.n	8003aea <USB_ActivateEndpoint+0x50a>
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	18d3      	adds	r3, r2, r3
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	203e      	movs	r0, #62	; 0x3e
 8003acc:	183b      	adds	r3, r7, r0
 8003ace:	496e      	ldr	r1, [pc, #440]	; (8003c88 <USB_ActivateEndpoint+0x6a8>)
 8003ad0:	400a      	ands	r2, r1
 8003ad2:	801a      	strh	r2, [r3, #0]
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	18d3      	adds	r3, r2, r3
 8003ade:	183a      	adds	r2, r7, r0
 8003ae0:	8812      	ldrh	r2, [r2, #0]
 8003ae2:	496a      	ldr	r1, [pc, #424]	; (8003c8c <USB_ActivateEndpoint+0x6ac>)
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	b292      	uxth	r2, r2
 8003ae8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	18d2      	adds	r2, r2, r3
 8003af4:	213c      	movs	r1, #60	; 0x3c
 8003af6:	187b      	adds	r3, r7, r1
 8003af8:	8812      	ldrh	r2, [r2, #0]
 8003afa:	801a      	strh	r2, [r3, #0]
 8003afc:	187b      	adds	r3, r7, r1
 8003afe:	881b      	ldrh	r3, [r3, #0]
 8003b00:	2240      	movs	r2, #64	; 0x40
 8003b02:	4013      	ands	r3, r2
 8003b04:	d016      	beq.n	8003b34 <USB_ActivateEndpoint+0x554>
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	18d3      	adds	r3, r2, r3
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	203a      	movs	r0, #58	; 0x3a
 8003b16:	183b      	adds	r3, r7, r0
 8003b18:	495b      	ldr	r1, [pc, #364]	; (8003c88 <USB_ActivateEndpoint+0x6a8>)
 8003b1a:	400a      	ands	r2, r1
 8003b1c:	801a      	strh	r2, [r3, #0]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	18d3      	adds	r3, r2, r3
 8003b28:	183a      	adds	r2, r7, r0
 8003b2a:	8812      	ldrh	r2, [r2, #0]
 8003b2c:	495d      	ldr	r1, [pc, #372]	; (8003ca4 <USB_ActivateEndpoint+0x6c4>)
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	b292      	uxth	r2, r2
 8003b32:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	18d3      	adds	r3, r2, r3
 8003b3e:	881b      	ldrh	r3, [r3, #0]
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	2038      	movs	r0, #56	; 0x38
 8003b44:	183b      	adds	r3, r7, r0
 8003b46:	4952      	ldr	r1, [pc, #328]	; (8003c90 <USB_ActivateEndpoint+0x6b0>)
 8003b48:	400a      	ands	r2, r1
 8003b4a:	801a      	strh	r2, [r3, #0]
 8003b4c:	183b      	adds	r3, r7, r0
 8003b4e:	183a      	adds	r2, r7, r0
 8003b50:	8812      	ldrh	r2, [r2, #0]
 8003b52:	2180      	movs	r1, #128	; 0x80
 8003b54:	0149      	lsls	r1, r1, #5
 8003b56:	404a      	eors	r2, r1
 8003b58:	801a      	strh	r2, [r3, #0]
 8003b5a:	183b      	adds	r3, r7, r0
 8003b5c:	183a      	adds	r2, r7, r0
 8003b5e:	8812      	ldrh	r2, [r2, #0]
 8003b60:	2180      	movs	r1, #128	; 0x80
 8003b62:	0189      	lsls	r1, r1, #6
 8003b64:	404a      	eors	r2, r1
 8003b66:	801a      	strh	r2, [r3, #0]
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	18d3      	adds	r3, r2, r3
 8003b72:	183a      	adds	r2, r7, r0
 8003b74:	8812      	ldrh	r2, [r2, #0]
 8003b76:	4947      	ldr	r1, [pc, #284]	; (8003c94 <USB_ActivateEndpoint+0x6b4>)
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	b292      	uxth	r2, r2
 8003b7c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	18d3      	adds	r3, r2, r3
 8003b88:	881b      	ldrh	r3, [r3, #0]
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	2036      	movs	r0, #54	; 0x36
 8003b8e:	183b      	adds	r3, r7, r0
 8003b90:	4945      	ldr	r1, [pc, #276]	; (8003ca8 <USB_ActivateEndpoint+0x6c8>)
 8003b92:	400a      	ands	r2, r1
 8003b94:	801a      	strh	r2, [r3, #0]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	18d3      	adds	r3, r2, r3
 8003ba0:	183a      	adds	r2, r7, r0
 8003ba2:	8812      	ldrh	r2, [r2, #0]
 8003ba4:	493b      	ldr	r1, [pc, #236]	; (8003c94 <USB_ActivateEndpoint+0x6b4>)
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	b292      	uxth	r2, r2
 8003baa:	801a      	strh	r2, [r3, #0]
 8003bac:	e0ac      	b.n	8003d08 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	18d2      	adds	r2, r2, r3
 8003bb8:	214e      	movs	r1, #78	; 0x4e
 8003bba:	187b      	adds	r3, r7, r1
 8003bbc:	8812      	ldrh	r2, [r2, #0]
 8003bbe:	801a      	strh	r2, [r3, #0]
 8003bc0:	187b      	adds	r3, r7, r1
 8003bc2:	881a      	ldrh	r2, [r3, #0]
 8003bc4:	2380      	movs	r3, #128	; 0x80
 8003bc6:	01db      	lsls	r3, r3, #7
 8003bc8:	4013      	ands	r3, r2
 8003bca:	d016      	beq.n	8003bfa <USB_ActivateEndpoint+0x61a>
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	18d3      	adds	r3, r2, r3
 8003bd6:	881b      	ldrh	r3, [r3, #0]
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	204c      	movs	r0, #76	; 0x4c
 8003bdc:	183b      	adds	r3, r7, r0
 8003bde:	492a      	ldr	r1, [pc, #168]	; (8003c88 <USB_ActivateEndpoint+0x6a8>)
 8003be0:	400a      	ands	r2, r1
 8003be2:	801a      	strh	r2, [r3, #0]
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	18d3      	adds	r3, r2, r3
 8003bee:	183a      	adds	r2, r7, r0
 8003bf0:	8812      	ldrh	r2, [r2, #0]
 8003bf2:	4926      	ldr	r1, [pc, #152]	; (8003c8c <USB_ActivateEndpoint+0x6ac>)
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	b292      	uxth	r2, r2
 8003bf8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	18d2      	adds	r2, r2, r3
 8003c04:	214a      	movs	r1, #74	; 0x4a
 8003c06:	187b      	adds	r3, r7, r1
 8003c08:	8812      	ldrh	r2, [r2, #0]
 8003c0a:	801a      	strh	r2, [r3, #0]
 8003c0c:	187b      	adds	r3, r7, r1
 8003c0e:	881b      	ldrh	r3, [r3, #0]
 8003c10:	2240      	movs	r2, #64	; 0x40
 8003c12:	4013      	ands	r3, r2
 8003c14:	d016      	beq.n	8003c44 <USB_ActivateEndpoint+0x664>
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	18d3      	adds	r3, r2, r3
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	2048      	movs	r0, #72	; 0x48
 8003c26:	183b      	adds	r3, r7, r0
 8003c28:	4917      	ldr	r1, [pc, #92]	; (8003c88 <USB_ActivateEndpoint+0x6a8>)
 8003c2a:	400a      	ands	r2, r1
 8003c2c:	801a      	strh	r2, [r3, #0]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	18d3      	adds	r3, r2, r3
 8003c38:	183a      	adds	r2, r7, r0
 8003c3a:	8812      	ldrh	r2, [r2, #0]
 8003c3c:	4919      	ldr	r1, [pc, #100]	; (8003ca4 <USB_ActivateEndpoint+0x6c4>)
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	b292      	uxth	r2, r2
 8003c42:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	78db      	ldrb	r3, [r3, #3]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d02f      	beq.n	8003cac <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	18d3      	adds	r3, r2, r3
 8003c56:	881b      	ldrh	r3, [r3, #0]
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	2044      	movs	r0, #68	; 0x44
 8003c5c:	183b      	adds	r3, r7, r0
 8003c5e:	4912      	ldr	r1, [pc, #72]	; (8003ca8 <USB_ActivateEndpoint+0x6c8>)
 8003c60:	400a      	ands	r2, r1
 8003c62:	801a      	strh	r2, [r3, #0]
 8003c64:	183b      	adds	r3, r7, r0
 8003c66:	183a      	adds	r2, r7, r0
 8003c68:	8812      	ldrh	r2, [r2, #0]
 8003c6a:	2120      	movs	r1, #32
 8003c6c:	404a      	eors	r2, r1
 8003c6e:	801a      	strh	r2, [r3, #0]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	18d3      	adds	r3, r2, r3
 8003c7a:	183a      	adds	r2, r7, r0
 8003c7c:	8812      	ldrh	r2, [r2, #0]
 8003c7e:	4905      	ldr	r1, [pc, #20]	; (8003c94 <USB_ActivateEndpoint+0x6b4>)
 8003c80:	430a      	orrs	r2, r1
 8003c82:	b292      	uxth	r2, r2
 8003c84:	801a      	strh	r2, [r3, #0]
 8003c86:	e028      	b.n	8003cda <USB_ActivateEndpoint+0x6fa>
 8003c88:	ffff8f8f 	.word	0xffff8f8f
 8003c8c:	ffffc080 	.word	0xffffc080
 8003c90:	ffffbf8f 	.word	0xffffbf8f
 8003c94:	ffff8080 	.word	0xffff8080
 8003c98:	ffff8180 	.word	0xffff8180
 8003c9c:	ffff8e8f 	.word	0xffff8e8f
 8003ca0:	00000404 	.word	0x00000404
 8003ca4:	ffff80c0 	.word	0xffff80c0
 8003ca8:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	18d3      	adds	r3, r2, r3
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	2046      	movs	r0, #70	; 0x46
 8003cbc:	183b      	adds	r3, r7, r0
 8003cbe:	4916      	ldr	r1, [pc, #88]	; (8003d18 <USB_ActivateEndpoint+0x738>)
 8003cc0:	400a      	ands	r2, r1
 8003cc2:	801a      	strh	r2, [r3, #0]
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	18d3      	adds	r3, r2, r3
 8003cce:	183a      	adds	r2, r7, r0
 8003cd0:	8812      	ldrh	r2, [r2, #0]
 8003cd2:	4912      	ldr	r1, [pc, #72]	; (8003d1c <USB_ActivateEndpoint+0x73c>)
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	b292      	uxth	r2, r2
 8003cd8:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	18d3      	adds	r3, r2, r3
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	2042      	movs	r0, #66	; 0x42
 8003cea:	183b      	adds	r3, r7, r0
 8003cec:	490c      	ldr	r1, [pc, #48]	; (8003d20 <USB_ActivateEndpoint+0x740>)
 8003cee:	400a      	ands	r2, r1
 8003cf0:	801a      	strh	r2, [r3, #0]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	18d3      	adds	r3, r2, r3
 8003cfc:	183a      	adds	r2, r7, r0
 8003cfe:	8812      	ldrh	r2, [r2, #0]
 8003d00:	4906      	ldr	r1, [pc, #24]	; (8003d1c <USB_ActivateEndpoint+0x73c>)
 8003d02:	430a      	orrs	r2, r1
 8003d04:	b292      	uxth	r2, r2
 8003d06:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8003d08:	236f      	movs	r3, #111	; 0x6f
 8003d0a:	18fb      	adds	r3, r7, r3
 8003d0c:	781b      	ldrb	r3, [r3, #0]
}
 8003d0e:	0018      	movs	r0, r3
 8003d10:	46bd      	mov	sp, r7
 8003d12:	b01c      	add	sp, #112	; 0x70
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	ffff8fbf 	.word	0xffff8fbf
 8003d1c:	ffff8080 	.word	0xffff8080
 8003d20:	ffffbf8f 	.word	0xffffbf8f

08003d24 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08c      	sub	sp, #48	; 0x30
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	7b1b      	ldrb	r3, [r3, #12]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d000      	beq.n	8003d38 <USB_DeactivateEndpoint+0x14>
 8003d36:	e07e      	b.n	8003e36 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	785b      	ldrb	r3, [r3, #1]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d03c      	beq.n	8003dba <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	18d2      	adds	r2, r2, r3
 8003d4a:	210c      	movs	r1, #12
 8003d4c:	187b      	adds	r3, r7, r1
 8003d4e:	8812      	ldrh	r2, [r2, #0]
 8003d50:	801a      	strh	r2, [r3, #0]
 8003d52:	187b      	adds	r3, r7, r1
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	2240      	movs	r2, #64	; 0x40
 8003d58:	4013      	ands	r3, r2
 8003d5a:	d016      	beq.n	8003d8a <USB_DeactivateEndpoint+0x66>
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	18d3      	adds	r3, r2, r3
 8003d66:	881b      	ldrh	r3, [r3, #0]
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	200a      	movs	r0, #10
 8003d6c:	183b      	adds	r3, r7, r0
 8003d6e:	49c7      	ldr	r1, [pc, #796]	; (800408c <USB_DeactivateEndpoint+0x368>)
 8003d70:	400a      	ands	r2, r1
 8003d72:	801a      	strh	r2, [r3, #0]
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	18d3      	adds	r3, r2, r3
 8003d7e:	183a      	adds	r2, r7, r0
 8003d80:	8812      	ldrh	r2, [r2, #0]
 8003d82:	49c3      	ldr	r1, [pc, #780]	; (8004090 <USB_DeactivateEndpoint+0x36c>)
 8003d84:	430a      	orrs	r2, r1
 8003d86:	b292      	uxth	r2, r2
 8003d88:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	18d3      	adds	r3, r2, r3
 8003d94:	881b      	ldrh	r3, [r3, #0]
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	2008      	movs	r0, #8
 8003d9a:	183b      	adds	r3, r7, r0
 8003d9c:	49bd      	ldr	r1, [pc, #756]	; (8004094 <USB_DeactivateEndpoint+0x370>)
 8003d9e:	400a      	ands	r2, r1
 8003da0:	801a      	strh	r2, [r3, #0]
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	18d3      	adds	r3, r2, r3
 8003dac:	183a      	adds	r2, r7, r0
 8003dae:	8812      	ldrh	r2, [r2, #0]
 8003db0:	49b9      	ldr	r1, [pc, #740]	; (8004098 <USB_DeactivateEndpoint+0x374>)
 8003db2:	430a      	orrs	r2, r1
 8003db4:	b292      	uxth	r2, r2
 8003db6:	801a      	strh	r2, [r3, #0]
 8003db8:	e163      	b.n	8004082 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	18d2      	adds	r2, r2, r3
 8003dc4:	2112      	movs	r1, #18
 8003dc6:	187b      	adds	r3, r7, r1
 8003dc8:	8812      	ldrh	r2, [r2, #0]
 8003dca:	801a      	strh	r2, [r3, #0]
 8003dcc:	187b      	adds	r3, r7, r1
 8003dce:	881a      	ldrh	r2, [r3, #0]
 8003dd0:	2380      	movs	r3, #128	; 0x80
 8003dd2:	01db      	lsls	r3, r3, #7
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	d016      	beq.n	8003e06 <USB_DeactivateEndpoint+0xe2>
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	18d3      	adds	r3, r2, r3
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	2010      	movs	r0, #16
 8003de8:	183b      	adds	r3, r7, r0
 8003dea:	49a8      	ldr	r1, [pc, #672]	; (800408c <USB_DeactivateEndpoint+0x368>)
 8003dec:	400a      	ands	r2, r1
 8003dee:	801a      	strh	r2, [r3, #0]
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	18d3      	adds	r3, r2, r3
 8003dfa:	183a      	adds	r2, r7, r0
 8003dfc:	8812      	ldrh	r2, [r2, #0]
 8003dfe:	49a7      	ldr	r1, [pc, #668]	; (800409c <USB_DeactivateEndpoint+0x378>)
 8003e00:	430a      	orrs	r2, r1
 8003e02:	b292      	uxth	r2, r2
 8003e04:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	18d3      	adds	r3, r2, r3
 8003e10:	881b      	ldrh	r3, [r3, #0]
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	200e      	movs	r0, #14
 8003e16:	183b      	adds	r3, r7, r0
 8003e18:	49a1      	ldr	r1, [pc, #644]	; (80040a0 <USB_DeactivateEndpoint+0x37c>)
 8003e1a:	400a      	ands	r2, r1
 8003e1c:	801a      	strh	r2, [r3, #0]
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	18d3      	adds	r3, r2, r3
 8003e28:	183a      	adds	r2, r7, r0
 8003e2a:	8812      	ldrh	r2, [r2, #0]
 8003e2c:	499a      	ldr	r1, [pc, #616]	; (8004098 <USB_DeactivateEndpoint+0x374>)
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	b292      	uxth	r2, r2
 8003e32:	801a      	strh	r2, [r3, #0]
 8003e34:	e125      	b.n	8004082 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	785b      	ldrb	r3, [r3, #1]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d000      	beq.n	8003e40 <USB_DeactivateEndpoint+0x11c>
 8003e3e:	e090      	b.n	8003f62 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	18d2      	adds	r2, r2, r3
 8003e4a:	2120      	movs	r1, #32
 8003e4c:	187b      	adds	r3, r7, r1
 8003e4e:	8812      	ldrh	r2, [r2, #0]
 8003e50:	801a      	strh	r2, [r3, #0]
 8003e52:	187b      	adds	r3, r7, r1
 8003e54:	881a      	ldrh	r2, [r3, #0]
 8003e56:	2380      	movs	r3, #128	; 0x80
 8003e58:	01db      	lsls	r3, r3, #7
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	d016      	beq.n	8003e8c <USB_DeactivateEndpoint+0x168>
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	18d3      	adds	r3, r2, r3
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	201e      	movs	r0, #30
 8003e6e:	183b      	adds	r3, r7, r0
 8003e70:	4986      	ldr	r1, [pc, #536]	; (800408c <USB_DeactivateEndpoint+0x368>)
 8003e72:	400a      	ands	r2, r1
 8003e74:	801a      	strh	r2, [r3, #0]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	18d3      	adds	r3, r2, r3
 8003e80:	183a      	adds	r2, r7, r0
 8003e82:	8812      	ldrh	r2, [r2, #0]
 8003e84:	4985      	ldr	r1, [pc, #532]	; (800409c <USB_DeactivateEndpoint+0x378>)
 8003e86:	430a      	orrs	r2, r1
 8003e88:	b292      	uxth	r2, r2
 8003e8a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	18d2      	adds	r2, r2, r3
 8003e96:	211c      	movs	r1, #28
 8003e98:	187b      	adds	r3, r7, r1
 8003e9a:	8812      	ldrh	r2, [r2, #0]
 8003e9c:	801a      	strh	r2, [r3, #0]
 8003e9e:	187b      	adds	r3, r7, r1
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	2240      	movs	r2, #64	; 0x40
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	d016      	beq.n	8003ed6 <USB_DeactivateEndpoint+0x1b2>
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	18d3      	adds	r3, r2, r3
 8003eb2:	881b      	ldrh	r3, [r3, #0]
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	201a      	movs	r0, #26
 8003eb8:	183b      	adds	r3, r7, r0
 8003eba:	4974      	ldr	r1, [pc, #464]	; (800408c <USB_DeactivateEndpoint+0x368>)
 8003ebc:	400a      	ands	r2, r1
 8003ebe:	801a      	strh	r2, [r3, #0]
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	18d3      	adds	r3, r2, r3
 8003eca:	183a      	adds	r2, r7, r0
 8003ecc:	8812      	ldrh	r2, [r2, #0]
 8003ece:	4970      	ldr	r1, [pc, #448]	; (8004090 <USB_DeactivateEndpoint+0x36c>)
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	b292      	uxth	r2, r2
 8003ed4:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	18d3      	adds	r3, r2, r3
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	2018      	movs	r0, #24
 8003ee6:	183b      	adds	r3, r7, r0
 8003ee8:	4968      	ldr	r1, [pc, #416]	; (800408c <USB_DeactivateEndpoint+0x368>)
 8003eea:	400a      	ands	r2, r1
 8003eec:	801a      	strh	r2, [r3, #0]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	18d3      	adds	r3, r2, r3
 8003ef8:	183a      	adds	r2, r7, r0
 8003efa:	8812      	ldrh	r2, [r2, #0]
 8003efc:	4964      	ldr	r1, [pc, #400]	; (8004090 <USB_DeactivateEndpoint+0x36c>)
 8003efe:	430a      	orrs	r2, r1
 8003f00:	b292      	uxth	r2, r2
 8003f02:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	18d3      	adds	r3, r2, r3
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	2016      	movs	r0, #22
 8003f14:	183b      	adds	r3, r7, r0
 8003f16:	4962      	ldr	r1, [pc, #392]	; (80040a0 <USB_DeactivateEndpoint+0x37c>)
 8003f18:	400a      	ands	r2, r1
 8003f1a:	801a      	strh	r2, [r3, #0]
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	18d3      	adds	r3, r2, r3
 8003f26:	183a      	adds	r2, r7, r0
 8003f28:	8812      	ldrh	r2, [r2, #0]
 8003f2a:	495b      	ldr	r1, [pc, #364]	; (8004098 <USB_DeactivateEndpoint+0x374>)
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	b292      	uxth	r2, r2
 8003f30:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	18d3      	adds	r3, r2, r3
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	2014      	movs	r0, #20
 8003f42:	183b      	adds	r3, r7, r0
 8003f44:	4953      	ldr	r1, [pc, #332]	; (8004094 <USB_DeactivateEndpoint+0x370>)
 8003f46:	400a      	ands	r2, r1
 8003f48:	801a      	strh	r2, [r3, #0]
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	18d3      	adds	r3, r2, r3
 8003f54:	183a      	adds	r2, r7, r0
 8003f56:	8812      	ldrh	r2, [r2, #0]
 8003f58:	494f      	ldr	r1, [pc, #316]	; (8004098 <USB_DeactivateEndpoint+0x374>)
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	b292      	uxth	r2, r2
 8003f5e:	801a      	strh	r2, [r3, #0]
 8003f60:	e08f      	b.n	8004082 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	18d2      	adds	r2, r2, r3
 8003f6c:	212e      	movs	r1, #46	; 0x2e
 8003f6e:	187b      	adds	r3, r7, r1
 8003f70:	8812      	ldrh	r2, [r2, #0]
 8003f72:	801a      	strh	r2, [r3, #0]
 8003f74:	187b      	adds	r3, r7, r1
 8003f76:	881a      	ldrh	r2, [r3, #0]
 8003f78:	2380      	movs	r3, #128	; 0x80
 8003f7a:	01db      	lsls	r3, r3, #7
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	d016      	beq.n	8003fae <USB_DeactivateEndpoint+0x28a>
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	18d3      	adds	r3, r2, r3
 8003f8a:	881b      	ldrh	r3, [r3, #0]
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	202c      	movs	r0, #44	; 0x2c
 8003f90:	183b      	adds	r3, r7, r0
 8003f92:	493e      	ldr	r1, [pc, #248]	; (800408c <USB_DeactivateEndpoint+0x368>)
 8003f94:	400a      	ands	r2, r1
 8003f96:	801a      	strh	r2, [r3, #0]
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	18d3      	adds	r3, r2, r3
 8003fa2:	183a      	adds	r2, r7, r0
 8003fa4:	8812      	ldrh	r2, [r2, #0]
 8003fa6:	493d      	ldr	r1, [pc, #244]	; (800409c <USB_DeactivateEndpoint+0x378>)
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	b292      	uxth	r2, r2
 8003fac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	18d2      	adds	r2, r2, r3
 8003fb8:	212a      	movs	r1, #42	; 0x2a
 8003fba:	187b      	adds	r3, r7, r1
 8003fbc:	8812      	ldrh	r2, [r2, #0]
 8003fbe:	801a      	strh	r2, [r3, #0]
 8003fc0:	187b      	adds	r3, r7, r1
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	2240      	movs	r2, #64	; 0x40
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	d016      	beq.n	8003ff8 <USB_DeactivateEndpoint+0x2d4>
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	18d3      	adds	r3, r2, r3
 8003fd4:	881b      	ldrh	r3, [r3, #0]
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	2028      	movs	r0, #40	; 0x28
 8003fda:	183b      	adds	r3, r7, r0
 8003fdc:	492b      	ldr	r1, [pc, #172]	; (800408c <USB_DeactivateEndpoint+0x368>)
 8003fde:	400a      	ands	r2, r1
 8003fe0:	801a      	strh	r2, [r3, #0]
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	18d3      	adds	r3, r2, r3
 8003fec:	183a      	adds	r2, r7, r0
 8003fee:	8812      	ldrh	r2, [r2, #0]
 8003ff0:	4927      	ldr	r1, [pc, #156]	; (8004090 <USB_DeactivateEndpoint+0x36c>)
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	b292      	uxth	r2, r2
 8003ff6:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	18d3      	adds	r3, r2, r3
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	b29a      	uxth	r2, r3
 8004006:	2026      	movs	r0, #38	; 0x26
 8004008:	183b      	adds	r3, r7, r0
 800400a:	4920      	ldr	r1, [pc, #128]	; (800408c <USB_DeactivateEndpoint+0x368>)
 800400c:	400a      	ands	r2, r1
 800400e:	801a      	strh	r2, [r3, #0]
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	18d3      	adds	r3, r2, r3
 800401a:	183a      	adds	r2, r7, r0
 800401c:	8812      	ldrh	r2, [r2, #0]
 800401e:	491f      	ldr	r1, [pc, #124]	; (800409c <USB_DeactivateEndpoint+0x378>)
 8004020:	430a      	orrs	r2, r1
 8004022:	b292      	uxth	r2, r2
 8004024:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	18d3      	adds	r3, r2, r3
 8004030:	881b      	ldrh	r3, [r3, #0]
 8004032:	b29a      	uxth	r2, r3
 8004034:	2024      	movs	r0, #36	; 0x24
 8004036:	183b      	adds	r3, r7, r0
 8004038:	4916      	ldr	r1, [pc, #88]	; (8004094 <USB_DeactivateEndpoint+0x370>)
 800403a:	400a      	ands	r2, r1
 800403c:	801a      	strh	r2, [r3, #0]
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	18d3      	adds	r3, r2, r3
 8004048:	183a      	adds	r2, r7, r0
 800404a:	8812      	ldrh	r2, [r2, #0]
 800404c:	4912      	ldr	r1, [pc, #72]	; (8004098 <USB_DeactivateEndpoint+0x374>)
 800404e:	430a      	orrs	r2, r1
 8004050:	b292      	uxth	r2, r2
 8004052:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	18d3      	adds	r3, r2, r3
 800405e:	881b      	ldrh	r3, [r3, #0]
 8004060:	b29a      	uxth	r2, r3
 8004062:	2022      	movs	r0, #34	; 0x22
 8004064:	183b      	adds	r3, r7, r0
 8004066:	490e      	ldr	r1, [pc, #56]	; (80040a0 <USB_DeactivateEndpoint+0x37c>)
 8004068:	400a      	ands	r2, r1
 800406a:	801a      	strh	r2, [r3, #0]
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	18d3      	adds	r3, r2, r3
 8004076:	183a      	adds	r2, r7, r0
 8004078:	8812      	ldrh	r2, [r2, #0]
 800407a:	4907      	ldr	r1, [pc, #28]	; (8004098 <USB_DeactivateEndpoint+0x374>)
 800407c:	430a      	orrs	r2, r1
 800407e:	b292      	uxth	r2, r2
 8004080:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	0018      	movs	r0, r3
 8004086:	46bd      	mov	sp, r7
 8004088:	b00c      	add	sp, #48	; 0x30
 800408a:	bd80      	pop	{r7, pc}
 800408c:	ffff8f8f 	.word	0xffff8f8f
 8004090:	ffff80c0 	.word	0xffff80c0
 8004094:	ffff8fbf 	.word	0xffff8fbf
 8004098:	ffff8080 	.word	0xffff8080
 800409c:	ffffc080 	.word	0xffffc080
 80040a0:	ffffbf8f 	.word	0xffffbf8f

080040a4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80040a4:	b590      	push	{r4, r7, lr}
 80040a6:	b0c3      	sub	sp, #268	; 0x10c
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	785b      	ldrb	r3, [r3, #1]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d001      	beq.n	80040ba <USB_EPStartXfer+0x16>
 80040b6:	f000 fd2d 	bl	8004b14 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	699a      	ldr	r2, [r3, #24]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d905      	bls.n	80040d2 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	1d7a      	adds	r2, r7, #5
 80040cc:	32ff      	adds	r2, #255	; 0xff
 80040ce:	6013      	str	r3, [r2, #0]
 80040d0:	e004      	b.n	80040dc <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	1d7a      	adds	r2, r7, #5
 80040d8:	32ff      	adds	r2, #255	; 0xff
 80040da:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	7b1b      	ldrb	r3, [r3, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d125      	bne.n	8004130 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	6959      	ldr	r1, [r3, #20]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	88da      	ldrh	r2, [r3, #6]
 80040ec:	1d7b      	adds	r3, r7, #5
 80040ee:	33ff      	adds	r3, #255	; 0xff
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f001 fa47 	bl	8005588 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	613b      	str	r3, [r7, #16]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2250      	movs	r2, #80	; 0x50
 8004102:	5a9b      	ldrh	r3, [r3, r2]
 8004104:	b29b      	uxth	r3, r3
 8004106:	001a      	movs	r2, r3
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	189b      	adds	r3, r3, r2
 800410c:	613b      	str	r3, [r7, #16]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	00da      	lsls	r2, r3, #3
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	18d3      	adds	r3, r2, r3
 8004118:	4ad7      	ldr	r2, [pc, #860]	; (8004478 <USB_EPStartXfer+0x3d4>)
 800411a:	4694      	mov	ip, r2
 800411c:	4463      	add	r3, ip
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	1d7b      	adds	r3, r7, #5
 8004122:	33ff      	adds	r3, #255	; 0xff
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	b29a      	uxth	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	801a      	strh	r2, [r3, #0]
 800412c:	f000 fccd 	bl	8004aca <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	78db      	ldrb	r3, [r3, #3]
 8004134:	2b02      	cmp	r3, #2
 8004136:	d000      	beq.n	800413a <USB_EPStartXfer+0x96>
 8004138:	e362      	b.n	8004800 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	6a1a      	ldr	r2, [r3, #32]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	429a      	cmp	r2, r3
 8004144:	d800      	bhi.n	8004148 <USB_EPStartXfer+0xa4>
 8004146:	e309      	b.n	800475c <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	18d3      	adds	r3, r2, r3
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	b29a      	uxth	r2, r3
 8004156:	2056      	movs	r0, #86	; 0x56
 8004158:	183b      	adds	r3, r7, r0
 800415a:	49c8      	ldr	r1, [pc, #800]	; (800447c <USB_EPStartXfer+0x3d8>)
 800415c:	400a      	ands	r2, r1
 800415e:	801a      	strh	r2, [r3, #0]
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	18d3      	adds	r3, r2, r3
 800416a:	183a      	adds	r2, r7, r0
 800416c:	8812      	ldrh	r2, [r2, #0]
 800416e:	49c4      	ldr	r1, [pc, #784]	; (8004480 <USB_EPStartXfer+0x3dc>)
 8004170:	430a      	orrs	r2, r1
 8004172:	b292      	uxth	r2, r2
 8004174:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	6a1a      	ldr	r2, [r3, #32]
 800417a:	1d7b      	adds	r3, r7, #5
 800417c:	33ff      	adds	r3, #255	; 0xff
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	1ad2      	subs	r2, r2, r3
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	18d3      	adds	r3, r2, r3
 8004190:	881b      	ldrh	r3, [r3, #0]
 8004192:	b29b      	uxth	r3, r3
 8004194:	001a      	movs	r2, r3
 8004196:	2340      	movs	r3, #64	; 0x40
 8004198:	4013      	ands	r3, r2
 800419a:	d100      	bne.n	800419e <USB_EPStartXfer+0xfa>
 800419c:	e176      	b.n	800448c <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	633b      	str	r3, [r7, #48]	; 0x30
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	785b      	ldrb	r3, [r3, #1]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d000      	beq.n	80041ac <USB_EPStartXfer+0x108>
 80041aa:	e074      	b.n	8004296 <USB_EPStartXfer+0x1f2>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2250      	movs	r2, #80	; 0x50
 80041b4:	5a9b      	ldrh	r3, [r3, r2]
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	001a      	movs	r2, r3
 80041ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041bc:	189b      	adds	r3, r3, r2
 80041be:	62bb      	str	r3, [r7, #40]	; 0x28
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	00da      	lsls	r2, r3, #3
 80041c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c8:	18d3      	adds	r3, r2, r3
 80041ca:	4aae      	ldr	r2, [pc, #696]	; (8004484 <USB_EPStartXfer+0x3e0>)
 80041cc:	4694      	mov	ip, r2
 80041ce:	4463      	add	r3, ip
 80041d0:	627b      	str	r3, [r7, #36]	; 0x24
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	059b      	lsls	r3, r3, #22
 80041da:	0d9b      	lsrs	r3, r3, #22
 80041dc:	b29a      	uxth	r2, r3
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	801a      	strh	r2, [r3, #0]
 80041e2:	1d7b      	adds	r3, r7, #5
 80041e4:	33ff      	adds	r3, #255	; 0xff
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b3e      	cmp	r3, #62	; 0x3e
 80041ea:	d924      	bls.n	8004236 <USB_EPStartXfer+0x192>
 80041ec:	1d7b      	adds	r3, r7, #5
 80041ee:	33ff      	adds	r3, #255	; 0xff
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	095b      	lsrs	r3, r3, #5
 80041f4:	1c7a      	adds	r2, r7, #1
 80041f6:	32ff      	adds	r2, #255	; 0xff
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	1d7b      	adds	r3, r7, #5
 80041fc:	33ff      	adds	r3, #255	; 0xff
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	221f      	movs	r2, #31
 8004202:	4013      	ands	r3, r2
 8004204:	d106      	bne.n	8004214 <USB_EPStartXfer+0x170>
 8004206:	1c7b      	adds	r3, r7, #1
 8004208:	33ff      	adds	r3, #255	; 0xff
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	3b01      	subs	r3, #1
 800420e:	1c7a      	adds	r2, r7, #1
 8004210:	32ff      	adds	r2, #255	; 0xff
 8004212:	6013      	str	r3, [r2, #0]
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	881b      	ldrh	r3, [r3, #0]
 8004218:	b29a      	uxth	r2, r3
 800421a:	1c7b      	adds	r3, r7, #1
 800421c:	33ff      	adds	r3, #255	; 0xff
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	b29b      	uxth	r3, r3
 8004222:	029b      	lsls	r3, r3, #10
 8004224:	b29b      	uxth	r3, r3
 8004226:	4313      	orrs	r3, r2
 8004228:	b29b      	uxth	r3, r3
 800422a:	4a97      	ldr	r2, [pc, #604]	; (8004488 <USB_EPStartXfer+0x3e4>)
 800422c:	4313      	orrs	r3, r2
 800422e:	b29a      	uxth	r2, r3
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	801a      	strh	r2, [r3, #0]
 8004234:	e04a      	b.n	80042cc <USB_EPStartXfer+0x228>
 8004236:	1d7b      	adds	r3, r7, #5
 8004238:	33ff      	adds	r3, #255	; 0xff
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d108      	bne.n	8004252 <USB_EPStartXfer+0x1ae>
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004242:	881b      	ldrh	r3, [r3, #0]
 8004244:	b29b      	uxth	r3, r3
 8004246:	4a90      	ldr	r2, [pc, #576]	; (8004488 <USB_EPStartXfer+0x3e4>)
 8004248:	4313      	orrs	r3, r2
 800424a:	b29a      	uxth	r2, r3
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	801a      	strh	r2, [r3, #0]
 8004250:	e03c      	b.n	80042cc <USB_EPStartXfer+0x228>
 8004252:	1d7b      	adds	r3, r7, #5
 8004254:	33ff      	adds	r3, #255	; 0xff
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	085b      	lsrs	r3, r3, #1
 800425a:	1c7a      	adds	r2, r7, #1
 800425c:	32ff      	adds	r2, #255	; 0xff
 800425e:	6013      	str	r3, [r2, #0]
 8004260:	1d7b      	adds	r3, r7, #5
 8004262:	33ff      	adds	r3, #255	; 0xff
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2201      	movs	r2, #1
 8004268:	4013      	ands	r3, r2
 800426a:	d006      	beq.n	800427a <USB_EPStartXfer+0x1d6>
 800426c:	1c7b      	adds	r3, r7, #1
 800426e:	33ff      	adds	r3, #255	; 0xff
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	3301      	adds	r3, #1
 8004274:	1c7a      	adds	r2, r7, #1
 8004276:	32ff      	adds	r2, #255	; 0xff
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	881b      	ldrh	r3, [r3, #0]
 800427e:	b29a      	uxth	r2, r3
 8004280:	1c7b      	adds	r3, r7, #1
 8004282:	33ff      	adds	r3, #255	; 0xff
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	b29b      	uxth	r3, r3
 8004288:	029b      	lsls	r3, r3, #10
 800428a:	b29b      	uxth	r3, r3
 800428c:	4313      	orrs	r3, r2
 800428e:	b29a      	uxth	r2, r3
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	801a      	strh	r2, [r3, #0]
 8004294:	e01a      	b.n	80042cc <USB_EPStartXfer+0x228>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	785b      	ldrb	r3, [r3, #1]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d116      	bne.n	80042cc <USB_EPStartXfer+0x228>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2250      	movs	r2, #80	; 0x50
 80042a2:	5a9b      	ldrh	r3, [r3, r2]
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	001a      	movs	r2, r3
 80042a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042aa:	189b      	adds	r3, r3, r2
 80042ac:	633b      	str	r3, [r7, #48]	; 0x30
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	00da      	lsls	r2, r3, #3
 80042b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b6:	18d3      	adds	r3, r2, r3
 80042b8:	4a72      	ldr	r2, [pc, #456]	; (8004484 <USB_EPStartXfer+0x3e0>)
 80042ba:	4694      	mov	ip, r2
 80042bc:	4463      	add	r3, ip
 80042be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042c0:	1d7b      	adds	r3, r7, #5
 80042c2:	33ff      	adds	r3, #255	; 0xff
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80042cc:	2076      	movs	r0, #118	; 0x76
 80042ce:	183b      	adds	r3, r7, r0
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	8952      	ldrh	r2, [r2, #10]
 80042d4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	6959      	ldr	r1, [r3, #20]
 80042da:	1d7b      	adds	r3, r7, #5
 80042dc:	33ff      	adds	r3, #255	; 0xff
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	b29c      	uxth	r4, r3
 80042e2:	183b      	adds	r3, r7, r0
 80042e4:	881a      	ldrh	r2, [r3, #0]
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	0023      	movs	r3, r4
 80042ea:	f001 f94d 	bl	8005588 <USB_WritePMA>
            ep->xfer_buff += len;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	695a      	ldr	r2, [r3, #20]
 80042f2:	1d7b      	adds	r3, r7, #5
 80042f4:	33ff      	adds	r3, #255	; 0xff
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	18d2      	adds	r2, r2, r3
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	6a1a      	ldr	r2, [r3, #32]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	429a      	cmp	r2, r3
 8004308:	d908      	bls.n	800431c <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	6a1a      	ldr	r2, [r3, #32]
 800430e:	1d7b      	adds	r3, r7, #5
 8004310:	33ff      	adds	r3, #255	; 0xff
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	1ad2      	subs	r2, r2, r3
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	621a      	str	r2, [r3, #32]
 800431a:	e007      	b.n	800432c <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	1d7a      	adds	r2, r7, #5
 8004322:	32ff      	adds	r2, #255	; 0xff
 8004324:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2200      	movs	r2, #0
 800432a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	785b      	ldrb	r3, [r3, #1]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d000      	beq.n	8004336 <USB_EPStartXfer+0x292>
 8004334:	e070      	b.n	8004418 <USB_EPStartXfer+0x374>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	61bb      	str	r3, [r7, #24]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2250      	movs	r2, #80	; 0x50
 800433e:	5a9b      	ldrh	r3, [r3, r2]
 8004340:	b29b      	uxth	r3, r3
 8004342:	001a      	movs	r2, r3
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	189b      	adds	r3, r3, r2
 8004348:	61bb      	str	r3, [r7, #24]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	00da      	lsls	r2, r3, #3
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	18d3      	adds	r3, r2, r3
 8004354:	4a48      	ldr	r2, [pc, #288]	; (8004478 <USB_EPStartXfer+0x3d4>)
 8004356:	4694      	mov	ip, r2
 8004358:	4463      	add	r3, ip
 800435a:	617b      	str	r3, [r7, #20]
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	881b      	ldrh	r3, [r3, #0]
 8004360:	b29b      	uxth	r3, r3
 8004362:	059b      	lsls	r3, r3, #22
 8004364:	0d9b      	lsrs	r3, r3, #22
 8004366:	b29a      	uxth	r2, r3
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	801a      	strh	r2, [r3, #0]
 800436c:	1d7b      	adds	r3, r7, #5
 800436e:	33ff      	adds	r3, #255	; 0xff
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b3e      	cmp	r3, #62	; 0x3e
 8004374:	d922      	bls.n	80043bc <USB_EPStartXfer+0x318>
 8004376:	1d7b      	adds	r3, r7, #5
 8004378:	33ff      	adds	r3, #255	; 0xff
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	095b      	lsrs	r3, r3, #5
 800437e:	21fc      	movs	r1, #252	; 0xfc
 8004380:	187a      	adds	r2, r7, r1
 8004382:	6013      	str	r3, [r2, #0]
 8004384:	1d7b      	adds	r3, r7, #5
 8004386:	33ff      	adds	r3, #255	; 0xff
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	221f      	movs	r2, #31
 800438c:	4013      	ands	r3, r2
 800438e:	d104      	bne.n	800439a <USB_EPStartXfer+0x2f6>
 8004390:	187b      	adds	r3, r7, r1
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	3b01      	subs	r3, #1
 8004396:	187a      	adds	r2, r7, r1
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	881b      	ldrh	r3, [r3, #0]
 800439e:	b29a      	uxth	r2, r3
 80043a0:	23fc      	movs	r3, #252	; 0xfc
 80043a2:	18fb      	adds	r3, r7, r3
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	029b      	lsls	r3, r3, #10
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	4313      	orrs	r3, r2
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	4a35      	ldr	r2, [pc, #212]	; (8004488 <USB_EPStartXfer+0x3e4>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	801a      	strh	r2, [r3, #0]
 80043ba:	e04a      	b.n	8004452 <USB_EPStartXfer+0x3ae>
 80043bc:	1d7b      	adds	r3, r7, #5
 80043be:	33ff      	adds	r3, #255	; 0xff
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d108      	bne.n	80043d8 <USB_EPStartXfer+0x334>
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	881b      	ldrh	r3, [r3, #0]
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	4a2e      	ldr	r2, [pc, #184]	; (8004488 <USB_EPStartXfer+0x3e4>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	801a      	strh	r2, [r3, #0]
 80043d6:	e03c      	b.n	8004452 <USB_EPStartXfer+0x3ae>
 80043d8:	1d7b      	adds	r3, r7, #5
 80043da:	33ff      	adds	r3, #255	; 0xff
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	085b      	lsrs	r3, r3, #1
 80043e0:	21fc      	movs	r1, #252	; 0xfc
 80043e2:	187a      	adds	r2, r7, r1
 80043e4:	6013      	str	r3, [r2, #0]
 80043e6:	1d7b      	adds	r3, r7, #5
 80043e8:	33ff      	adds	r3, #255	; 0xff
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2201      	movs	r2, #1
 80043ee:	4013      	ands	r3, r2
 80043f0:	d004      	beq.n	80043fc <USB_EPStartXfer+0x358>
 80043f2:	187b      	adds	r3, r7, r1
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	3301      	adds	r3, #1
 80043f8:	187a      	adds	r2, r7, r1
 80043fa:	6013      	str	r3, [r2, #0]
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	881b      	ldrh	r3, [r3, #0]
 8004400:	b29a      	uxth	r2, r3
 8004402:	23fc      	movs	r3, #252	; 0xfc
 8004404:	18fb      	adds	r3, r7, r3
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	b29b      	uxth	r3, r3
 800440a:	029b      	lsls	r3, r3, #10
 800440c:	b29b      	uxth	r3, r3
 800440e:	4313      	orrs	r3, r2
 8004410:	b29a      	uxth	r2, r3
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	801a      	strh	r2, [r3, #0]
 8004416:	e01c      	b.n	8004452 <USB_EPStartXfer+0x3ae>
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	785b      	ldrb	r3, [r3, #1]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d118      	bne.n	8004452 <USB_EPStartXfer+0x3ae>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	623b      	str	r3, [r7, #32]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2250      	movs	r2, #80	; 0x50
 8004428:	5a9b      	ldrh	r3, [r3, r2]
 800442a:	b29b      	uxth	r3, r3
 800442c:	001a      	movs	r2, r3
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	189b      	adds	r3, r3, r2
 8004432:	623b      	str	r3, [r7, #32]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	00da      	lsls	r2, r3, #3
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	18d3      	adds	r3, r2, r3
 800443e:	4a0e      	ldr	r2, [pc, #56]	; (8004478 <USB_EPStartXfer+0x3d4>)
 8004440:	4694      	mov	ip, r2
 8004442:	4463      	add	r3, ip
 8004444:	61fb      	str	r3, [r7, #28]
 8004446:	1d7b      	adds	r3, r7, #5
 8004448:	33ff      	adds	r3, #255	; 0xff
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	b29a      	uxth	r2, r3
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004452:	2076      	movs	r0, #118	; 0x76
 8004454:	183b      	adds	r3, r7, r0
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	8912      	ldrh	r2, [r2, #8]
 800445a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	6959      	ldr	r1, [r3, #20]
 8004460:	1d7b      	adds	r3, r7, #5
 8004462:	33ff      	adds	r3, #255	; 0xff
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	b29c      	uxth	r4, r3
 8004468:	183b      	adds	r3, r7, r0
 800446a:	881a      	ldrh	r2, [r3, #0]
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	0023      	movs	r3, r4
 8004470:	f001 f88a 	bl	8005588 <USB_WritePMA>
 8004474:	e329      	b.n	8004aca <USB_EPStartXfer+0xa26>
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	00000402 	.word	0x00000402
 800447c:	ffff8f8f 	.word	0xffff8f8f
 8004480:	ffff8180 	.word	0xffff8180
 8004484:	00000406 	.word	0x00000406
 8004488:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	785b      	ldrb	r3, [r3, #1]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d000      	beq.n	8004496 <USB_EPStartXfer+0x3f2>
 8004494:	e070      	b.n	8004578 <USB_EPStartXfer+0x4d4>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	64bb      	str	r3, [r7, #72]	; 0x48
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2250      	movs	r2, #80	; 0x50
 800449e:	5a9b      	ldrh	r3, [r3, r2]
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	001a      	movs	r2, r3
 80044a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044a6:	189b      	adds	r3, r3, r2
 80044a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	00da      	lsls	r2, r3, #3
 80044b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044b2:	18d3      	adds	r3, r2, r3
 80044b4:	4acd      	ldr	r2, [pc, #820]	; (80047ec <USB_EPStartXfer+0x748>)
 80044b6:	4694      	mov	ip, r2
 80044b8:	4463      	add	r3, ip
 80044ba:	647b      	str	r3, [r7, #68]	; 0x44
 80044bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	059b      	lsls	r3, r3, #22
 80044c4:	0d9b      	lsrs	r3, r3, #22
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ca:	801a      	strh	r2, [r3, #0]
 80044cc:	1d7b      	adds	r3, r7, #5
 80044ce:	33ff      	adds	r3, #255	; 0xff
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b3e      	cmp	r3, #62	; 0x3e
 80044d4:	d922      	bls.n	800451c <USB_EPStartXfer+0x478>
 80044d6:	1d7b      	adds	r3, r7, #5
 80044d8:	33ff      	adds	r3, #255	; 0xff
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	095b      	lsrs	r3, r3, #5
 80044de:	21f8      	movs	r1, #248	; 0xf8
 80044e0:	187a      	adds	r2, r7, r1
 80044e2:	6013      	str	r3, [r2, #0]
 80044e4:	1d7b      	adds	r3, r7, #5
 80044e6:	33ff      	adds	r3, #255	; 0xff
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	221f      	movs	r2, #31
 80044ec:	4013      	ands	r3, r2
 80044ee:	d104      	bne.n	80044fa <USB_EPStartXfer+0x456>
 80044f0:	187b      	adds	r3, r7, r1
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	3b01      	subs	r3, #1
 80044f6:	187a      	adds	r2, r7, r1
 80044f8:	6013      	str	r3, [r2, #0]
 80044fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044fc:	881b      	ldrh	r3, [r3, #0]
 80044fe:	b29a      	uxth	r2, r3
 8004500:	23f8      	movs	r3, #248	; 0xf8
 8004502:	18fb      	adds	r3, r7, r3
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	b29b      	uxth	r3, r3
 8004508:	029b      	lsls	r3, r3, #10
 800450a:	b29b      	uxth	r3, r3
 800450c:	4313      	orrs	r3, r2
 800450e:	b29b      	uxth	r3, r3
 8004510:	4ab7      	ldr	r2, [pc, #732]	; (80047f0 <USB_EPStartXfer+0x74c>)
 8004512:	4313      	orrs	r3, r2
 8004514:	b29a      	uxth	r2, r3
 8004516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004518:	801a      	strh	r2, [r3, #0]
 800451a:	e04a      	b.n	80045b2 <USB_EPStartXfer+0x50e>
 800451c:	1d7b      	adds	r3, r7, #5
 800451e:	33ff      	adds	r3, #255	; 0xff
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d108      	bne.n	8004538 <USB_EPStartXfer+0x494>
 8004526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004528:	881b      	ldrh	r3, [r3, #0]
 800452a:	b29b      	uxth	r3, r3
 800452c:	4ab0      	ldr	r2, [pc, #704]	; (80047f0 <USB_EPStartXfer+0x74c>)
 800452e:	4313      	orrs	r3, r2
 8004530:	b29a      	uxth	r2, r3
 8004532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004534:	801a      	strh	r2, [r3, #0]
 8004536:	e03c      	b.n	80045b2 <USB_EPStartXfer+0x50e>
 8004538:	1d7b      	adds	r3, r7, #5
 800453a:	33ff      	adds	r3, #255	; 0xff
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	085b      	lsrs	r3, r3, #1
 8004540:	21f8      	movs	r1, #248	; 0xf8
 8004542:	187a      	adds	r2, r7, r1
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	1d7b      	adds	r3, r7, #5
 8004548:	33ff      	adds	r3, #255	; 0xff
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2201      	movs	r2, #1
 800454e:	4013      	ands	r3, r2
 8004550:	d004      	beq.n	800455c <USB_EPStartXfer+0x4b8>
 8004552:	187b      	adds	r3, r7, r1
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	3301      	adds	r3, #1
 8004558:	187a      	adds	r2, r7, r1
 800455a:	6013      	str	r3, [r2, #0]
 800455c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800455e:	881b      	ldrh	r3, [r3, #0]
 8004560:	b29a      	uxth	r2, r3
 8004562:	23f8      	movs	r3, #248	; 0xf8
 8004564:	18fb      	adds	r3, r7, r3
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	b29b      	uxth	r3, r3
 800456a:	029b      	lsls	r3, r3, #10
 800456c:	b29b      	uxth	r3, r3
 800456e:	4313      	orrs	r3, r2
 8004570:	b29a      	uxth	r2, r3
 8004572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004574:	801a      	strh	r2, [r3, #0]
 8004576:	e01c      	b.n	80045b2 <USB_EPStartXfer+0x50e>
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	785b      	ldrb	r3, [r3, #1]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d118      	bne.n	80045b2 <USB_EPStartXfer+0x50e>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	653b      	str	r3, [r7, #80]	; 0x50
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2250      	movs	r2, #80	; 0x50
 8004588:	5a9b      	ldrh	r3, [r3, r2]
 800458a:	b29b      	uxth	r3, r3
 800458c:	001a      	movs	r2, r3
 800458e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004590:	189b      	adds	r3, r3, r2
 8004592:	653b      	str	r3, [r7, #80]	; 0x50
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	00da      	lsls	r2, r3, #3
 800459a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800459c:	18d3      	adds	r3, r2, r3
 800459e:	4a93      	ldr	r2, [pc, #588]	; (80047ec <USB_EPStartXfer+0x748>)
 80045a0:	4694      	mov	ip, r2
 80045a2:	4463      	add	r3, ip
 80045a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045a6:	1d7b      	adds	r3, r7, #5
 80045a8:	33ff      	adds	r3, #255	; 0xff
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80045b2:	2076      	movs	r0, #118	; 0x76
 80045b4:	183b      	adds	r3, r7, r0
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	8912      	ldrh	r2, [r2, #8]
 80045ba:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	6959      	ldr	r1, [r3, #20]
 80045c0:	1d7b      	adds	r3, r7, #5
 80045c2:	33ff      	adds	r3, #255	; 0xff
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	b29c      	uxth	r4, r3
 80045c8:	183b      	adds	r3, r7, r0
 80045ca:	881a      	ldrh	r2, [r3, #0]
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	0023      	movs	r3, r4
 80045d0:	f000 ffda 	bl	8005588 <USB_WritePMA>
            ep->xfer_buff += len;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	695a      	ldr	r2, [r3, #20]
 80045d8:	1d7b      	adds	r3, r7, #5
 80045da:	33ff      	adds	r3, #255	; 0xff
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	18d2      	adds	r2, r2, r3
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	6a1a      	ldr	r2, [r3, #32]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d908      	bls.n	8004602 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	6a1a      	ldr	r2, [r3, #32]
 80045f4:	1d7b      	adds	r3, r7, #5
 80045f6:	33ff      	adds	r3, #255	; 0xff
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	1ad2      	subs	r2, r2, r3
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	621a      	str	r2, [r3, #32]
 8004600:	e007      	b.n	8004612 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	1d7a      	adds	r2, r7, #5
 8004608:	32ff      	adds	r2, #255	; 0xff
 800460a:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	2200      	movs	r2, #0
 8004610:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	643b      	str	r3, [r7, #64]	; 0x40
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	785b      	ldrb	r3, [r3, #1]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d000      	beq.n	8004620 <USB_EPStartXfer+0x57c>
 800461e:	e070      	b.n	8004702 <USB_EPStartXfer+0x65e>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	63bb      	str	r3, [r7, #56]	; 0x38
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2250      	movs	r2, #80	; 0x50
 8004628:	5a9b      	ldrh	r3, [r3, r2]
 800462a:	b29b      	uxth	r3, r3
 800462c:	001a      	movs	r2, r3
 800462e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004630:	189b      	adds	r3, r3, r2
 8004632:	63bb      	str	r3, [r7, #56]	; 0x38
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	00da      	lsls	r2, r3, #3
 800463a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463c:	18d3      	adds	r3, r2, r3
 800463e:	4a6d      	ldr	r2, [pc, #436]	; (80047f4 <USB_EPStartXfer+0x750>)
 8004640:	4694      	mov	ip, r2
 8004642:	4463      	add	r3, ip
 8004644:	637b      	str	r3, [r7, #52]	; 0x34
 8004646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	b29b      	uxth	r3, r3
 800464c:	059b      	lsls	r3, r3, #22
 800464e:	0d9b      	lsrs	r3, r3, #22
 8004650:	b29a      	uxth	r2, r3
 8004652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004654:	801a      	strh	r2, [r3, #0]
 8004656:	1d7b      	adds	r3, r7, #5
 8004658:	33ff      	adds	r3, #255	; 0xff
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2b3e      	cmp	r3, #62	; 0x3e
 800465e:	d922      	bls.n	80046a6 <USB_EPStartXfer+0x602>
 8004660:	1d7b      	adds	r3, r7, #5
 8004662:	33ff      	adds	r3, #255	; 0xff
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	21f4      	movs	r1, #244	; 0xf4
 800466a:	187a      	adds	r2, r7, r1
 800466c:	6013      	str	r3, [r2, #0]
 800466e:	1d7b      	adds	r3, r7, #5
 8004670:	33ff      	adds	r3, #255	; 0xff
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	221f      	movs	r2, #31
 8004676:	4013      	ands	r3, r2
 8004678:	d104      	bne.n	8004684 <USB_EPStartXfer+0x5e0>
 800467a:	187b      	adds	r3, r7, r1
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	3b01      	subs	r3, #1
 8004680:	187a      	adds	r2, r7, r1
 8004682:	6013      	str	r3, [r2, #0]
 8004684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004686:	881b      	ldrh	r3, [r3, #0]
 8004688:	b29a      	uxth	r2, r3
 800468a:	23f4      	movs	r3, #244	; 0xf4
 800468c:	18fb      	adds	r3, r7, r3
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	b29b      	uxth	r3, r3
 8004692:	029b      	lsls	r3, r3, #10
 8004694:	b29b      	uxth	r3, r3
 8004696:	4313      	orrs	r3, r2
 8004698:	b29b      	uxth	r3, r3
 800469a:	4a55      	ldr	r2, [pc, #340]	; (80047f0 <USB_EPStartXfer+0x74c>)
 800469c:	4313      	orrs	r3, r2
 800469e:	b29a      	uxth	r2, r3
 80046a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a2:	801a      	strh	r2, [r3, #0]
 80046a4:	e048      	b.n	8004738 <USB_EPStartXfer+0x694>
 80046a6:	1d7b      	adds	r3, r7, #5
 80046a8:	33ff      	adds	r3, #255	; 0xff
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d108      	bne.n	80046c2 <USB_EPStartXfer+0x61e>
 80046b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b2:	881b      	ldrh	r3, [r3, #0]
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	4a4e      	ldr	r2, [pc, #312]	; (80047f0 <USB_EPStartXfer+0x74c>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046be:	801a      	strh	r2, [r3, #0]
 80046c0:	e03a      	b.n	8004738 <USB_EPStartXfer+0x694>
 80046c2:	1d7b      	adds	r3, r7, #5
 80046c4:	33ff      	adds	r3, #255	; 0xff
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	085b      	lsrs	r3, r3, #1
 80046ca:	21f4      	movs	r1, #244	; 0xf4
 80046cc:	187a      	adds	r2, r7, r1
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	1d7b      	adds	r3, r7, #5
 80046d2:	33ff      	adds	r3, #255	; 0xff
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2201      	movs	r2, #1
 80046d8:	4013      	ands	r3, r2
 80046da:	d004      	beq.n	80046e6 <USB_EPStartXfer+0x642>
 80046dc:	187b      	adds	r3, r7, r1
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	3301      	adds	r3, #1
 80046e2:	187a      	adds	r2, r7, r1
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e8:	881b      	ldrh	r3, [r3, #0]
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	23f4      	movs	r3, #244	; 0xf4
 80046ee:	18fb      	adds	r3, r7, r3
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	029b      	lsls	r3, r3, #10
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	4313      	orrs	r3, r2
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046fe:	801a      	strh	r2, [r3, #0]
 8004700:	e01a      	b.n	8004738 <USB_EPStartXfer+0x694>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	785b      	ldrb	r3, [r3, #1]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d116      	bne.n	8004738 <USB_EPStartXfer+0x694>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2250      	movs	r2, #80	; 0x50
 800470e:	5a9b      	ldrh	r3, [r3, r2]
 8004710:	b29b      	uxth	r3, r3
 8004712:	001a      	movs	r2, r3
 8004714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004716:	189b      	adds	r3, r3, r2
 8004718:	643b      	str	r3, [r7, #64]	; 0x40
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	00da      	lsls	r2, r3, #3
 8004720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004722:	18d3      	adds	r3, r2, r3
 8004724:	4a33      	ldr	r2, [pc, #204]	; (80047f4 <USB_EPStartXfer+0x750>)
 8004726:	4694      	mov	ip, r2
 8004728:	4463      	add	r3, ip
 800472a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800472c:	1d7b      	adds	r3, r7, #5
 800472e:	33ff      	adds	r3, #255	; 0xff
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	b29a      	uxth	r2, r3
 8004734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004736:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004738:	2076      	movs	r0, #118	; 0x76
 800473a:	183b      	adds	r3, r7, r0
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	8952      	ldrh	r2, [r2, #10]
 8004740:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	6959      	ldr	r1, [r3, #20]
 8004746:	1d7b      	adds	r3, r7, #5
 8004748:	33ff      	adds	r3, #255	; 0xff
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	b29c      	uxth	r4, r3
 800474e:	183b      	adds	r3, r7, r0
 8004750:	881a      	ldrh	r2, [r3, #0]
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	0023      	movs	r3, r4
 8004756:	f000 ff17 	bl	8005588 <USB_WritePMA>
 800475a:	e1b6      	b.n	8004aca <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	1d7a      	adds	r2, r7, #5
 8004762:	32ff      	adds	r2, #255	; 0xff
 8004764:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	18d3      	adds	r3, r2, r3
 8004770:	881b      	ldrh	r3, [r3, #0]
 8004772:	b29a      	uxth	r2, r3
 8004774:	2062      	movs	r0, #98	; 0x62
 8004776:	183b      	adds	r3, r7, r0
 8004778:	491f      	ldr	r1, [pc, #124]	; (80047f8 <USB_EPStartXfer+0x754>)
 800477a:	400a      	ands	r2, r1
 800477c:	801a      	strh	r2, [r3, #0]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	18d3      	adds	r3, r2, r3
 8004788:	183a      	adds	r2, r7, r0
 800478a:	8812      	ldrh	r2, [r2, #0]
 800478c:	491b      	ldr	r1, [pc, #108]	; (80047fc <USB_EPStartXfer+0x758>)
 800478e:	430a      	orrs	r2, r1
 8004790:	b292      	uxth	r2, r2
 8004792:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2250      	movs	r2, #80	; 0x50
 800479c:	5a9b      	ldrh	r3, [r3, r2]
 800479e:	b29b      	uxth	r3, r3
 80047a0:	001a      	movs	r2, r3
 80047a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047a4:	189b      	adds	r3, r3, r2
 80047a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	00da      	lsls	r2, r3, #3
 80047ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047b0:	18d3      	adds	r3, r2, r3
 80047b2:	4a0e      	ldr	r2, [pc, #56]	; (80047ec <USB_EPStartXfer+0x748>)
 80047b4:	4694      	mov	ip, r2
 80047b6:	4463      	add	r3, ip
 80047b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80047ba:	1d7b      	adds	r3, r7, #5
 80047bc:	33ff      	adds	r3, #255	; 0xff
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047c4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80047c6:	2076      	movs	r0, #118	; 0x76
 80047c8:	183b      	adds	r3, r7, r0
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	8912      	ldrh	r2, [r2, #8]
 80047ce:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	6959      	ldr	r1, [r3, #20]
 80047d4:	1d7b      	adds	r3, r7, #5
 80047d6:	33ff      	adds	r3, #255	; 0xff
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	b29c      	uxth	r4, r3
 80047dc:	183b      	adds	r3, r7, r0
 80047de:	881a      	ldrh	r2, [r3, #0]
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	0023      	movs	r3, r4
 80047e4:	f000 fed0 	bl	8005588 <USB_WritePMA>
 80047e8:	e16f      	b.n	8004aca <USB_EPStartXfer+0xa26>
 80047ea:	46c0      	nop			; (mov r8, r8)
 80047ec:	00000402 	.word	0x00000402
 80047f0:	ffff8000 	.word	0xffff8000
 80047f4:	00000406 	.word	0x00000406
 80047f8:	ffff8e8f 	.word	0xffff8e8f
 80047fc:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	6a1a      	ldr	r2, [r3, #32]
 8004804:	1d7b      	adds	r3, r7, #5
 8004806:	33ff      	adds	r3, #255	; 0xff
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	1ad2      	subs	r2, r2, r3
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	18d3      	adds	r3, r2, r3
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	b29b      	uxth	r3, r3
 800481e:	001a      	movs	r2, r3
 8004820:	2340      	movs	r3, #64	; 0x40
 8004822:	4013      	ands	r3, r2
 8004824:	d100      	bne.n	8004828 <USB_EPStartXfer+0x784>
 8004826:	e0a4      	b.n	8004972 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	673b      	str	r3, [r7, #112]	; 0x70
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	785b      	ldrb	r3, [r3, #1]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d000      	beq.n	8004836 <USB_EPStartXfer+0x792>
 8004834:	e070      	b.n	8004918 <USB_EPStartXfer+0x874>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	66bb      	str	r3, [r7, #104]	; 0x68
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2250      	movs	r2, #80	; 0x50
 800483e:	5a9b      	ldrh	r3, [r3, r2]
 8004840:	b29b      	uxth	r3, r3
 8004842:	001a      	movs	r2, r3
 8004844:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004846:	189b      	adds	r3, r3, r2
 8004848:	66bb      	str	r3, [r7, #104]	; 0x68
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	00da      	lsls	r2, r3, #3
 8004850:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004852:	18d3      	adds	r3, r2, r3
 8004854:	4abc      	ldr	r2, [pc, #752]	; (8004b48 <USB_EPStartXfer+0xaa4>)
 8004856:	4694      	mov	ip, r2
 8004858:	4463      	add	r3, ip
 800485a:	667b      	str	r3, [r7, #100]	; 0x64
 800485c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800485e:	881b      	ldrh	r3, [r3, #0]
 8004860:	b29b      	uxth	r3, r3
 8004862:	059b      	lsls	r3, r3, #22
 8004864:	0d9b      	lsrs	r3, r3, #22
 8004866:	b29a      	uxth	r2, r3
 8004868:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800486a:	801a      	strh	r2, [r3, #0]
 800486c:	1d7b      	adds	r3, r7, #5
 800486e:	33ff      	adds	r3, #255	; 0xff
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b3e      	cmp	r3, #62	; 0x3e
 8004874:	d922      	bls.n	80048bc <USB_EPStartXfer+0x818>
 8004876:	1d7b      	adds	r3, r7, #5
 8004878:	33ff      	adds	r3, #255	; 0xff
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	095b      	lsrs	r3, r3, #5
 800487e:	21f0      	movs	r1, #240	; 0xf0
 8004880:	187a      	adds	r2, r7, r1
 8004882:	6013      	str	r3, [r2, #0]
 8004884:	1d7b      	adds	r3, r7, #5
 8004886:	33ff      	adds	r3, #255	; 0xff
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	221f      	movs	r2, #31
 800488c:	4013      	ands	r3, r2
 800488e:	d104      	bne.n	800489a <USB_EPStartXfer+0x7f6>
 8004890:	187b      	adds	r3, r7, r1
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	3b01      	subs	r3, #1
 8004896:	187a      	adds	r2, r7, r1
 8004898:	6013      	str	r3, [r2, #0]
 800489a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800489c:	881b      	ldrh	r3, [r3, #0]
 800489e:	b29a      	uxth	r2, r3
 80048a0:	23f0      	movs	r3, #240	; 0xf0
 80048a2:	18fb      	adds	r3, r7, r3
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	029b      	lsls	r3, r3, #10
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	4313      	orrs	r3, r2
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	4aa6      	ldr	r2, [pc, #664]	; (8004b4c <USB_EPStartXfer+0xaa8>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048b8:	801a      	strh	r2, [r3, #0]
 80048ba:	e048      	b.n	800494e <USB_EPStartXfer+0x8aa>
 80048bc:	1d7b      	adds	r3, r7, #5
 80048be:	33ff      	adds	r3, #255	; 0xff
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d108      	bne.n	80048d8 <USB_EPStartXfer+0x834>
 80048c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048c8:	881b      	ldrh	r3, [r3, #0]
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	4a9f      	ldr	r2, [pc, #636]	; (8004b4c <USB_EPStartXfer+0xaa8>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048d4:	801a      	strh	r2, [r3, #0]
 80048d6:	e03a      	b.n	800494e <USB_EPStartXfer+0x8aa>
 80048d8:	1d7b      	adds	r3, r7, #5
 80048da:	33ff      	adds	r3, #255	; 0xff
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	085b      	lsrs	r3, r3, #1
 80048e0:	21f0      	movs	r1, #240	; 0xf0
 80048e2:	187a      	adds	r2, r7, r1
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	1d7b      	adds	r3, r7, #5
 80048e8:	33ff      	adds	r3, #255	; 0xff
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2201      	movs	r2, #1
 80048ee:	4013      	ands	r3, r2
 80048f0:	d004      	beq.n	80048fc <USB_EPStartXfer+0x858>
 80048f2:	187b      	adds	r3, r7, r1
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3301      	adds	r3, #1
 80048f8:	187a      	adds	r2, r7, r1
 80048fa:	6013      	str	r3, [r2, #0]
 80048fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048fe:	881b      	ldrh	r3, [r3, #0]
 8004900:	b29a      	uxth	r2, r3
 8004902:	23f0      	movs	r3, #240	; 0xf0
 8004904:	18fb      	adds	r3, r7, r3
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	b29b      	uxth	r3, r3
 800490a:	029b      	lsls	r3, r3, #10
 800490c:	b29b      	uxth	r3, r3
 800490e:	4313      	orrs	r3, r2
 8004910:	b29a      	uxth	r2, r3
 8004912:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004914:	801a      	strh	r2, [r3, #0]
 8004916:	e01a      	b.n	800494e <USB_EPStartXfer+0x8aa>
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	785b      	ldrb	r3, [r3, #1]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d116      	bne.n	800494e <USB_EPStartXfer+0x8aa>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2250      	movs	r2, #80	; 0x50
 8004924:	5a9b      	ldrh	r3, [r3, r2]
 8004926:	b29b      	uxth	r3, r3
 8004928:	001a      	movs	r2, r3
 800492a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800492c:	189b      	adds	r3, r3, r2
 800492e:	673b      	str	r3, [r7, #112]	; 0x70
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	00da      	lsls	r2, r3, #3
 8004936:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004938:	18d3      	adds	r3, r2, r3
 800493a:	4a83      	ldr	r2, [pc, #524]	; (8004b48 <USB_EPStartXfer+0xaa4>)
 800493c:	4694      	mov	ip, r2
 800493e:	4463      	add	r3, ip
 8004940:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004942:	1d7b      	adds	r3, r7, #5
 8004944:	33ff      	adds	r3, #255	; 0xff
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	b29a      	uxth	r2, r3
 800494a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800494c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800494e:	2076      	movs	r0, #118	; 0x76
 8004950:	183b      	adds	r3, r7, r0
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	8952      	ldrh	r2, [r2, #10]
 8004956:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	6959      	ldr	r1, [r3, #20]
 800495c:	1d7b      	adds	r3, r7, #5
 800495e:	33ff      	adds	r3, #255	; 0xff
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	b29c      	uxth	r4, r3
 8004964:	183b      	adds	r3, r7, r0
 8004966:	881a      	ldrh	r2, [r3, #0]
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	0023      	movs	r3, r4
 800496c:	f000 fe0c 	bl	8005588 <USB_WritePMA>
 8004970:	e0ab      	b.n	8004aca <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	785b      	ldrb	r3, [r3, #1]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d000      	beq.n	800497c <USB_EPStartXfer+0x8d8>
 800497a:	e070      	b.n	8004a5e <USB_EPStartXfer+0x9ba>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2250      	movs	r2, #80	; 0x50
 8004984:	5a9b      	ldrh	r3, [r3, r2]
 8004986:	b29b      	uxth	r3, r3
 8004988:	001a      	movs	r2, r3
 800498a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800498c:	189b      	adds	r3, r3, r2
 800498e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	00da      	lsls	r2, r3, #3
 8004996:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004998:	18d3      	adds	r3, r2, r3
 800499a:	4a6d      	ldr	r2, [pc, #436]	; (8004b50 <USB_EPStartXfer+0xaac>)
 800499c:	4694      	mov	ip, r2
 800499e:	4463      	add	r3, ip
 80049a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80049a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	059b      	lsls	r3, r3, #22
 80049aa:	0d9b      	lsrs	r3, r3, #22
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049b0:	801a      	strh	r2, [r3, #0]
 80049b2:	1d7b      	adds	r3, r7, #5
 80049b4:	33ff      	adds	r3, #255	; 0xff
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2b3e      	cmp	r3, #62	; 0x3e
 80049ba:	d922      	bls.n	8004a02 <USB_EPStartXfer+0x95e>
 80049bc:	1d7b      	adds	r3, r7, #5
 80049be:	33ff      	adds	r3, #255	; 0xff
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	095b      	lsrs	r3, r3, #5
 80049c4:	21ec      	movs	r1, #236	; 0xec
 80049c6:	187a      	adds	r2, r7, r1
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	1d7b      	adds	r3, r7, #5
 80049cc:	33ff      	adds	r3, #255	; 0xff
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	221f      	movs	r2, #31
 80049d2:	4013      	ands	r3, r2
 80049d4:	d104      	bne.n	80049e0 <USB_EPStartXfer+0x93c>
 80049d6:	187b      	adds	r3, r7, r1
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	3b01      	subs	r3, #1
 80049dc:	187a      	adds	r2, r7, r1
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	23ec      	movs	r3, #236	; 0xec
 80049e8:	18fb      	adds	r3, r7, r3
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	029b      	lsls	r3, r3, #10
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	4313      	orrs	r3, r2
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	4a55      	ldr	r2, [pc, #340]	; (8004b4c <USB_EPStartXfer+0xaa8>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049fe:	801a      	strh	r2, [r3, #0]
 8004a00:	e052      	b.n	8004aa8 <USB_EPStartXfer+0xa04>
 8004a02:	1d7b      	adds	r3, r7, #5
 8004a04:	33ff      	adds	r3, #255	; 0xff
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d108      	bne.n	8004a1e <USB_EPStartXfer+0x97a>
 8004a0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a0e:	881b      	ldrh	r3, [r3, #0]
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	4a4e      	ldr	r2, [pc, #312]	; (8004b4c <USB_EPStartXfer+0xaa8>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a1a:	801a      	strh	r2, [r3, #0]
 8004a1c:	e044      	b.n	8004aa8 <USB_EPStartXfer+0xa04>
 8004a1e:	1d7b      	adds	r3, r7, #5
 8004a20:	33ff      	adds	r3, #255	; 0xff
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	085b      	lsrs	r3, r3, #1
 8004a26:	21ec      	movs	r1, #236	; 0xec
 8004a28:	187a      	adds	r2, r7, r1
 8004a2a:	6013      	str	r3, [r2, #0]
 8004a2c:	1d7b      	adds	r3, r7, #5
 8004a2e:	33ff      	adds	r3, #255	; 0xff
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2201      	movs	r2, #1
 8004a34:	4013      	ands	r3, r2
 8004a36:	d004      	beq.n	8004a42 <USB_EPStartXfer+0x99e>
 8004a38:	187b      	adds	r3, r7, r1
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	187a      	adds	r2, r7, r1
 8004a40:	6013      	str	r3, [r2, #0]
 8004a42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a44:	881b      	ldrh	r3, [r3, #0]
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	23ec      	movs	r3, #236	; 0xec
 8004a4a:	18fb      	adds	r3, r7, r3
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	029b      	lsls	r3, r3, #10
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	4313      	orrs	r3, r2
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a5a:	801a      	strh	r2, [r3, #0]
 8004a5c:	e024      	b.n	8004aa8 <USB_EPStartXfer+0xa04>
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	785b      	ldrb	r3, [r3, #1]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d120      	bne.n	8004aa8 <USB_EPStartXfer+0xa04>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2184      	movs	r1, #132	; 0x84
 8004a6a:	187a      	adds	r2, r7, r1
 8004a6c:	6013      	str	r3, [r2, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2250      	movs	r2, #80	; 0x50
 8004a72:	5a9b      	ldrh	r3, [r3, r2]
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	001a      	movs	r2, r3
 8004a78:	187b      	adds	r3, r7, r1
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	189b      	adds	r3, r3, r2
 8004a7e:	187a      	adds	r2, r7, r1
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	00da      	lsls	r2, r3, #3
 8004a88:	187b      	adds	r3, r7, r1
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	18d3      	adds	r3, r2, r3
 8004a8e:	4a30      	ldr	r2, [pc, #192]	; (8004b50 <USB_EPStartXfer+0xaac>)
 8004a90:	4694      	mov	ip, r2
 8004a92:	4463      	add	r3, ip
 8004a94:	2180      	movs	r1, #128	; 0x80
 8004a96:	187a      	adds	r2, r7, r1
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	1d7b      	adds	r3, r7, #5
 8004a9c:	33ff      	adds	r3, #255	; 0xff
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	187b      	adds	r3, r7, r1
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004aa8:	2076      	movs	r0, #118	; 0x76
 8004aaa:	183b      	adds	r3, r7, r0
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	8912      	ldrh	r2, [r2, #8]
 8004ab0:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	6959      	ldr	r1, [r3, #20]
 8004ab6:	1d7b      	adds	r3, r7, #5
 8004ab8:	33ff      	adds	r3, #255	; 0xff
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	b29c      	uxth	r4, r3
 8004abe:	183b      	adds	r3, r7, r0
 8004ac0:	881a      	ldrh	r2, [r3, #0]
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	0023      	movs	r3, r4
 8004ac6:	f000 fd5f 	bl	8005588 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	18d3      	adds	r3, r2, r3
 8004ad4:	881b      	ldrh	r3, [r3, #0]
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	200a      	movs	r0, #10
 8004ada:	183b      	adds	r3, r7, r0
 8004adc:	491d      	ldr	r1, [pc, #116]	; (8004b54 <USB_EPStartXfer+0xab0>)
 8004ade:	400a      	ands	r2, r1
 8004ae0:	801a      	strh	r2, [r3, #0]
 8004ae2:	183b      	adds	r3, r7, r0
 8004ae4:	183a      	adds	r2, r7, r0
 8004ae6:	8812      	ldrh	r2, [r2, #0]
 8004ae8:	2110      	movs	r1, #16
 8004aea:	404a      	eors	r2, r1
 8004aec:	801a      	strh	r2, [r3, #0]
 8004aee:	183b      	adds	r3, r7, r0
 8004af0:	183a      	adds	r2, r7, r0
 8004af2:	8812      	ldrh	r2, [r2, #0]
 8004af4:	2120      	movs	r1, #32
 8004af6:	404a      	eors	r2, r1
 8004af8:	801a      	strh	r2, [r3, #0]
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	18d3      	adds	r3, r2, r3
 8004b04:	183a      	adds	r2, r7, r0
 8004b06:	8812      	ldrh	r2, [r2, #0]
 8004b08:	4913      	ldr	r1, [pc, #76]	; (8004b58 <USB_EPStartXfer+0xab4>)
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	b292      	uxth	r2, r2
 8004b0e:	801a      	strh	r2, [r3, #0]
 8004b10:	f000 fbf4 	bl	80052fc <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	7b1b      	ldrb	r3, [r3, #12]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d000      	beq.n	8004b1e <USB_EPStartXfer+0xa7a>
 8004b1c:	e0a9      	b.n	8004c72 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	699a      	ldr	r2, [r3, #24]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d918      	bls.n	8004b5c <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	1d7a      	adds	r2, r7, #5
 8004b30:	32ff      	adds	r2, #255	; 0xff
 8004b32:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	699a      	ldr	r2, [r3, #24]
 8004b38:	1d7b      	adds	r3, r7, #5
 8004b3a:	33ff      	adds	r3, #255	; 0xff
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	1ad2      	subs	r2, r2, r3
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	619a      	str	r2, [r3, #24]
 8004b44:	e012      	b.n	8004b6c <USB_EPStartXfer+0xac8>
 8004b46:	46c0      	nop			; (mov r8, r8)
 8004b48:	00000406 	.word	0x00000406
 8004b4c:	ffff8000 	.word	0xffff8000
 8004b50:	00000402 	.word	0x00000402
 8004b54:	ffff8fbf 	.word	0xffff8fbf
 8004b58:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	1d7a      	adds	r2, r7, #5
 8004b62:	32ff      	adds	r2, #255	; 0xff
 8004b64:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2190      	movs	r1, #144	; 0x90
 8004b70:	187a      	adds	r2, r7, r1
 8004b72:	6013      	str	r3, [r2, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2250      	movs	r2, #80	; 0x50
 8004b78:	5a9b      	ldrh	r3, [r3, r2]
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	001a      	movs	r2, r3
 8004b7e:	187b      	adds	r3, r7, r1
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	189b      	adds	r3, r3, r2
 8004b84:	187a      	adds	r2, r7, r1
 8004b86:	6013      	str	r3, [r2, #0]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	00da      	lsls	r2, r3, #3
 8004b8e:	187b      	adds	r3, r7, r1
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	18d3      	adds	r3, r2, r3
 8004b94:	4acf      	ldr	r2, [pc, #828]	; (8004ed4 <USB_EPStartXfer+0xe30>)
 8004b96:	4694      	mov	ip, r2
 8004b98:	4463      	add	r3, ip
 8004b9a:	218c      	movs	r1, #140	; 0x8c
 8004b9c:	187a      	adds	r2, r7, r1
 8004b9e:	6013      	str	r3, [r2, #0]
 8004ba0:	187b      	adds	r3, r7, r1
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	881b      	ldrh	r3, [r3, #0]
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	059b      	lsls	r3, r3, #22
 8004baa:	0d9b      	lsrs	r3, r3, #22
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	187b      	adds	r3, r7, r1
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	801a      	strh	r2, [r3, #0]
 8004bb4:	1d7b      	adds	r3, r7, #5
 8004bb6:	33ff      	adds	r3, #255	; 0xff
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2b3e      	cmp	r3, #62	; 0x3e
 8004bbc:	d925      	bls.n	8004c0a <USB_EPStartXfer+0xb66>
 8004bbe:	1d7b      	adds	r3, r7, #5
 8004bc0:	33ff      	adds	r3, #255	; 0xff
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	095b      	lsrs	r3, r3, #5
 8004bc6:	21e8      	movs	r1, #232	; 0xe8
 8004bc8:	187a      	adds	r2, r7, r1
 8004bca:	6013      	str	r3, [r2, #0]
 8004bcc:	1d7b      	adds	r3, r7, #5
 8004bce:	33ff      	adds	r3, #255	; 0xff
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	221f      	movs	r2, #31
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	d104      	bne.n	8004be2 <USB_EPStartXfer+0xb3e>
 8004bd8:	187b      	adds	r3, r7, r1
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	187a      	adds	r2, r7, r1
 8004be0:	6013      	str	r3, [r2, #0]
 8004be2:	218c      	movs	r1, #140	; 0x8c
 8004be4:	187b      	adds	r3, r7, r1
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	881b      	ldrh	r3, [r3, #0]
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	23e8      	movs	r3, #232	; 0xe8
 8004bee:	18fb      	adds	r3, r7, r3
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	029b      	lsls	r3, r3, #10
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	4ab6      	ldr	r2, [pc, #728]	; (8004ed8 <USB_EPStartXfer+0xe34>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	187b      	adds	r3, r7, r1
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	801a      	strh	r2, [r3, #0]
 8004c08:	e353      	b.n	80052b2 <USB_EPStartXfer+0x120e>
 8004c0a:	1d7b      	adds	r3, r7, #5
 8004c0c:	33ff      	adds	r3, #255	; 0xff
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10b      	bne.n	8004c2c <USB_EPStartXfer+0xb88>
 8004c14:	218c      	movs	r1, #140	; 0x8c
 8004c16:	187b      	adds	r3, r7, r1
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	881b      	ldrh	r3, [r3, #0]
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	4aae      	ldr	r2, [pc, #696]	; (8004ed8 <USB_EPStartXfer+0xe34>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	187b      	adds	r3, r7, r1
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	801a      	strh	r2, [r3, #0]
 8004c2a:	e342      	b.n	80052b2 <USB_EPStartXfer+0x120e>
 8004c2c:	1d7b      	adds	r3, r7, #5
 8004c2e:	33ff      	adds	r3, #255	; 0xff
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	085b      	lsrs	r3, r3, #1
 8004c34:	21e8      	movs	r1, #232	; 0xe8
 8004c36:	187a      	adds	r2, r7, r1
 8004c38:	6013      	str	r3, [r2, #0]
 8004c3a:	1d7b      	adds	r3, r7, #5
 8004c3c:	33ff      	adds	r3, #255	; 0xff
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2201      	movs	r2, #1
 8004c42:	4013      	ands	r3, r2
 8004c44:	d004      	beq.n	8004c50 <USB_EPStartXfer+0xbac>
 8004c46:	187b      	adds	r3, r7, r1
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	187a      	adds	r2, r7, r1
 8004c4e:	6013      	str	r3, [r2, #0]
 8004c50:	218c      	movs	r1, #140	; 0x8c
 8004c52:	187b      	adds	r3, r7, r1
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	881b      	ldrh	r3, [r3, #0]
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	23e8      	movs	r3, #232	; 0xe8
 8004c5c:	18fb      	adds	r3, r7, r3
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	029b      	lsls	r3, r3, #10
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	4313      	orrs	r3, r2
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	187b      	adds	r3, r7, r1
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	801a      	strh	r2, [r3, #0]
 8004c70:	e31f      	b.n	80052b2 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	78db      	ldrb	r3, [r3, #3]
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d000      	beq.n	8004c7c <USB_EPStartXfer+0xbd8>
 8004c7a:	e191      	b.n	8004fa0 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	785b      	ldrb	r3, [r3, #1]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d000      	beq.n	8004c86 <USB_EPStartXfer+0xbe2>
 8004c84:	e07c      	b.n	8004d80 <USB_EPStartXfer+0xcdc>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	21ac      	movs	r1, #172	; 0xac
 8004c8a:	187a      	adds	r2, r7, r1
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2250      	movs	r2, #80	; 0x50
 8004c92:	5a9b      	ldrh	r3, [r3, r2]
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	001a      	movs	r2, r3
 8004c98:	187b      	adds	r3, r7, r1
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	189b      	adds	r3, r3, r2
 8004c9e:	187a      	adds	r2, r7, r1
 8004ca0:	6013      	str	r3, [r2, #0]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	00da      	lsls	r2, r3, #3
 8004ca8:	187b      	adds	r3, r7, r1
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	18d3      	adds	r3, r2, r3
 8004cae:	4a8b      	ldr	r2, [pc, #556]	; (8004edc <USB_EPStartXfer+0xe38>)
 8004cb0:	4694      	mov	ip, r2
 8004cb2:	4463      	add	r3, ip
 8004cb4:	21a8      	movs	r1, #168	; 0xa8
 8004cb6:	187a      	adds	r2, r7, r1
 8004cb8:	6013      	str	r3, [r2, #0]
 8004cba:	187b      	adds	r3, r7, r1
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	881b      	ldrh	r3, [r3, #0]
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	059b      	lsls	r3, r3, #22
 8004cc4:	0d9b      	lsrs	r3, r3, #22
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	187b      	adds	r3, r7, r1
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	801a      	strh	r2, [r3, #0]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	2b3e      	cmp	r3, #62	; 0x3e
 8004cd4:	d923      	bls.n	8004d1e <USB_EPStartXfer+0xc7a>
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	095b      	lsrs	r3, r3, #5
 8004cdc:	21e4      	movs	r1, #228	; 0xe4
 8004cde:	187a      	adds	r2, r7, r1
 8004ce0:	6013      	str	r3, [r2, #0]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	221f      	movs	r2, #31
 8004ce8:	4013      	ands	r3, r2
 8004cea:	d104      	bne.n	8004cf6 <USB_EPStartXfer+0xc52>
 8004cec:	187b      	adds	r3, r7, r1
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	187a      	adds	r2, r7, r1
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	21a8      	movs	r1, #168	; 0xa8
 8004cf8:	187b      	adds	r3, r7, r1
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	881b      	ldrh	r3, [r3, #0]
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	23e4      	movs	r3, #228	; 0xe4
 8004d02:	18fb      	adds	r3, r7, r3
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	029b      	lsls	r3, r3, #10
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	4a71      	ldr	r2, [pc, #452]	; (8004ed8 <USB_EPStartXfer+0xe34>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	187b      	adds	r3, r7, r1
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	801a      	strh	r2, [r3, #0]
 8004d1c:	e054      	b.n	8004dc8 <USB_EPStartXfer+0xd24>
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10b      	bne.n	8004d3e <USB_EPStartXfer+0xc9a>
 8004d26:	21a8      	movs	r1, #168	; 0xa8
 8004d28:	187b      	adds	r3, r7, r1
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	881b      	ldrh	r3, [r3, #0]
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	4a69      	ldr	r2, [pc, #420]	; (8004ed8 <USB_EPStartXfer+0xe34>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	187b      	adds	r3, r7, r1
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	801a      	strh	r2, [r3, #0]
 8004d3c:	e044      	b.n	8004dc8 <USB_EPStartXfer+0xd24>
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	085b      	lsrs	r3, r3, #1
 8004d44:	21e4      	movs	r1, #228	; 0xe4
 8004d46:	187a      	adds	r2, r7, r1
 8004d48:	6013      	str	r3, [r2, #0]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	4013      	ands	r3, r2
 8004d52:	d004      	beq.n	8004d5e <USB_EPStartXfer+0xcba>
 8004d54:	187b      	adds	r3, r7, r1
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	187a      	adds	r2, r7, r1
 8004d5c:	6013      	str	r3, [r2, #0]
 8004d5e:	21a8      	movs	r1, #168	; 0xa8
 8004d60:	187b      	adds	r3, r7, r1
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	881b      	ldrh	r3, [r3, #0]
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	23e4      	movs	r3, #228	; 0xe4
 8004d6a:	18fb      	adds	r3, r7, r3
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	029b      	lsls	r3, r3, #10
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	4313      	orrs	r3, r2
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	187b      	adds	r3, r7, r1
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	801a      	strh	r2, [r3, #0]
 8004d7e:	e023      	b.n	8004dc8 <USB_EPStartXfer+0xd24>
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	785b      	ldrb	r3, [r3, #1]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d11f      	bne.n	8004dc8 <USB_EPStartXfer+0xd24>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	21b4      	movs	r1, #180	; 0xb4
 8004d8c:	187a      	adds	r2, r7, r1
 8004d8e:	6013      	str	r3, [r2, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2250      	movs	r2, #80	; 0x50
 8004d94:	5a9b      	ldrh	r3, [r3, r2]
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	001a      	movs	r2, r3
 8004d9a:	187b      	adds	r3, r7, r1
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	189b      	adds	r3, r3, r2
 8004da0:	187a      	adds	r2, r7, r1
 8004da2:	6013      	str	r3, [r2, #0]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	00da      	lsls	r2, r3, #3
 8004daa:	187b      	adds	r3, r7, r1
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	18d3      	adds	r3, r2, r3
 8004db0:	4a4a      	ldr	r2, [pc, #296]	; (8004edc <USB_EPStartXfer+0xe38>)
 8004db2:	4694      	mov	ip, r2
 8004db4:	4463      	add	r3, ip
 8004db6:	21b0      	movs	r1, #176	; 0xb0
 8004db8:	187a      	adds	r2, r7, r1
 8004dba:	6013      	str	r3, [r2, #0]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	187b      	adds	r3, r7, r1
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	801a      	strh	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	22a4      	movs	r2, #164	; 0xa4
 8004dcc:	18ba      	adds	r2, r7, r2
 8004dce:	6013      	str	r3, [r2, #0]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	785b      	ldrb	r3, [r3, #1]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d000      	beq.n	8004dda <USB_EPStartXfer+0xd36>
 8004dd8:	e082      	b.n	8004ee0 <USB_EPStartXfer+0xe3c>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	219c      	movs	r1, #156	; 0x9c
 8004dde:	187a      	adds	r2, r7, r1
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2250      	movs	r2, #80	; 0x50
 8004de6:	5a9b      	ldrh	r3, [r3, r2]
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	001a      	movs	r2, r3
 8004dec:	187b      	adds	r3, r7, r1
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	189b      	adds	r3, r3, r2
 8004df2:	187a      	adds	r2, r7, r1
 8004df4:	6013      	str	r3, [r2, #0]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	00da      	lsls	r2, r3, #3
 8004dfc:	187b      	adds	r3, r7, r1
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	18d3      	adds	r3, r2, r3
 8004e02:	4a34      	ldr	r2, [pc, #208]	; (8004ed4 <USB_EPStartXfer+0xe30>)
 8004e04:	4694      	mov	ip, r2
 8004e06:	4463      	add	r3, ip
 8004e08:	2198      	movs	r1, #152	; 0x98
 8004e0a:	187a      	adds	r2, r7, r1
 8004e0c:	6013      	str	r3, [r2, #0]
 8004e0e:	187b      	adds	r3, r7, r1
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	881b      	ldrh	r3, [r3, #0]
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	059b      	lsls	r3, r3, #22
 8004e18:	0d9b      	lsrs	r3, r3, #22
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	187b      	adds	r3, r7, r1
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	801a      	strh	r2, [r3, #0]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	2b3e      	cmp	r3, #62	; 0x3e
 8004e28:	d923      	bls.n	8004e72 <USB_EPStartXfer+0xdce>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	095b      	lsrs	r3, r3, #5
 8004e30:	21e0      	movs	r1, #224	; 0xe0
 8004e32:	187a      	adds	r2, r7, r1
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	221f      	movs	r2, #31
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	d104      	bne.n	8004e4a <USB_EPStartXfer+0xda6>
 8004e40:	187b      	adds	r3, r7, r1
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3b01      	subs	r3, #1
 8004e46:	187a      	adds	r2, r7, r1
 8004e48:	6013      	str	r3, [r2, #0]
 8004e4a:	2198      	movs	r1, #152	; 0x98
 8004e4c:	187b      	adds	r3, r7, r1
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	23e0      	movs	r3, #224	; 0xe0
 8004e56:	18fb      	adds	r3, r7, r3
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	029b      	lsls	r3, r3, #10
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	4313      	orrs	r3, r2
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	4a1c      	ldr	r2, [pc, #112]	; (8004ed8 <USB_EPStartXfer+0xe34>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	187b      	adds	r3, r7, r1
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	801a      	strh	r2, [r3, #0]
 8004e70:	e057      	b.n	8004f22 <USB_EPStartXfer+0xe7e>
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10b      	bne.n	8004e92 <USB_EPStartXfer+0xdee>
 8004e7a:	2198      	movs	r1, #152	; 0x98
 8004e7c:	187b      	adds	r3, r7, r1
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	881b      	ldrh	r3, [r3, #0]
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	4a14      	ldr	r2, [pc, #80]	; (8004ed8 <USB_EPStartXfer+0xe34>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	187b      	adds	r3, r7, r1
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	801a      	strh	r2, [r3, #0]
 8004e90:	e047      	b.n	8004f22 <USB_EPStartXfer+0xe7e>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	085b      	lsrs	r3, r3, #1
 8004e98:	21e0      	movs	r1, #224	; 0xe0
 8004e9a:	187a      	adds	r2, r7, r1
 8004e9c:	6013      	str	r3, [r2, #0]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	d004      	beq.n	8004eb2 <USB_EPStartXfer+0xe0e>
 8004ea8:	187b      	adds	r3, r7, r1
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	3301      	adds	r3, #1
 8004eae:	187a      	adds	r2, r7, r1
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	2198      	movs	r1, #152	; 0x98
 8004eb4:	187b      	adds	r3, r7, r1
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	881b      	ldrh	r3, [r3, #0]
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	23e0      	movs	r3, #224	; 0xe0
 8004ebe:	18fb      	adds	r3, r7, r3
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	029b      	lsls	r3, r3, #10
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	187b      	adds	r3, r7, r1
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	801a      	strh	r2, [r3, #0]
 8004ed2:	e026      	b.n	8004f22 <USB_EPStartXfer+0xe7e>
 8004ed4:	00000406 	.word	0x00000406
 8004ed8:	ffff8000 	.word	0xffff8000
 8004edc:	00000402 	.word	0x00000402
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	785b      	ldrb	r3, [r3, #1]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d11c      	bne.n	8004f22 <USB_EPStartXfer+0xe7e>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2250      	movs	r2, #80	; 0x50
 8004eec:	5a9b      	ldrh	r3, [r3, r2]
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	001a      	movs	r2, r3
 8004ef2:	21a4      	movs	r1, #164	; 0xa4
 8004ef4:	187b      	adds	r3, r7, r1
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	189b      	adds	r3, r3, r2
 8004efa:	187a      	adds	r2, r7, r1
 8004efc:	6013      	str	r3, [r2, #0]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	00da      	lsls	r2, r3, #3
 8004f04:	187b      	adds	r3, r7, r1
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	18d3      	adds	r3, r2, r3
 8004f0a:	4ad2      	ldr	r2, [pc, #840]	; (8005254 <USB_EPStartXfer+0x11b0>)
 8004f0c:	4694      	mov	ip, r2
 8004f0e:	4463      	add	r3, ip
 8004f10:	21a0      	movs	r1, #160	; 0xa0
 8004f12:	187a      	adds	r2, r7, r1
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	187b      	adds	r3, r7, r1
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d100      	bne.n	8004f2c <USB_EPStartXfer+0xe88>
 8004f2a:	e1c2      	b.n	80052b2 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	18d2      	adds	r2, r2, r3
 8004f36:	2196      	movs	r1, #150	; 0x96
 8004f38:	187b      	adds	r3, r7, r1
 8004f3a:	8812      	ldrh	r2, [r2, #0]
 8004f3c:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004f3e:	187b      	adds	r3, r7, r1
 8004f40:	881a      	ldrh	r2, [r3, #0]
 8004f42:	2380      	movs	r3, #128	; 0x80
 8004f44:	01db      	lsls	r3, r3, #7
 8004f46:	4013      	ands	r3, r2
 8004f48:	d004      	beq.n	8004f54 <USB_EPStartXfer+0xeb0>
 8004f4a:	187b      	adds	r3, r7, r1
 8004f4c:	881b      	ldrh	r3, [r3, #0]
 8004f4e:	2240      	movs	r2, #64	; 0x40
 8004f50:	4013      	ands	r3, r2
 8004f52:	d10d      	bne.n	8004f70 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004f54:	2196      	movs	r1, #150	; 0x96
 8004f56:	187b      	adds	r3, r7, r1
 8004f58:	881a      	ldrh	r2, [r3, #0]
 8004f5a:	2380      	movs	r3, #128	; 0x80
 8004f5c:	01db      	lsls	r3, r3, #7
 8004f5e:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004f60:	d000      	beq.n	8004f64 <USB_EPStartXfer+0xec0>
 8004f62:	e1a6      	b.n	80052b2 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004f64:	187b      	adds	r3, r7, r1
 8004f66:	881b      	ldrh	r3, [r3, #0]
 8004f68:	2240      	movs	r2, #64	; 0x40
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	d000      	beq.n	8004f70 <USB_EPStartXfer+0xecc>
 8004f6e:	e1a0      	b.n	80052b2 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	18d3      	adds	r3, r2, r3
 8004f7a:	881b      	ldrh	r3, [r3, #0]
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	2094      	movs	r0, #148	; 0x94
 8004f80:	183b      	adds	r3, r7, r0
 8004f82:	49b5      	ldr	r1, [pc, #724]	; (8005258 <USB_EPStartXfer+0x11b4>)
 8004f84:	400a      	ands	r2, r1
 8004f86:	801a      	strh	r2, [r3, #0]
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	18d3      	adds	r3, r2, r3
 8004f92:	183a      	adds	r2, r7, r0
 8004f94:	8812      	ldrh	r2, [r2, #0]
 8004f96:	49b1      	ldr	r1, [pc, #708]	; (800525c <USB_EPStartXfer+0x11b8>)
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	b292      	uxth	r2, r2
 8004f9c:	801a      	strh	r2, [r3, #0]
 8004f9e:	e188      	b.n	80052b2 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	78db      	ldrb	r3, [r3, #3]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d000      	beq.n	8004faa <USB_EPStartXfer+0xf06>
 8004fa8:	e181      	b.n	80052ae <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	699a      	ldr	r2, [r3, #24]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d90d      	bls.n	8004fd2 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	1d7a      	adds	r2, r7, #5
 8004fbc:	32ff      	adds	r2, #255	; 0xff
 8004fbe:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	699a      	ldr	r2, [r3, #24]
 8004fc4:	1d7b      	adds	r3, r7, #5
 8004fc6:	33ff      	adds	r3, #255	; 0xff
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	1ad2      	subs	r2, r2, r3
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	619a      	str	r2, [r3, #24]
 8004fd0:	e007      	b.n	8004fe2 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	1d7a      	adds	r2, r7, #5
 8004fd8:	32ff      	adds	r2, #255	; 0xff
 8004fda:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	785b      	ldrb	r3, [r3, #1]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d000      	beq.n	8004fec <USB_EPStartXfer+0xf48>
 8004fea:	e082      	b.n	80050f2 <USB_EPStartXfer+0x104e>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	21cc      	movs	r1, #204	; 0xcc
 8004ff0:	187a      	adds	r2, r7, r1
 8004ff2:	6013      	str	r3, [r2, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2250      	movs	r2, #80	; 0x50
 8004ff8:	5a9b      	ldrh	r3, [r3, r2]
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	001a      	movs	r2, r3
 8004ffe:	187b      	adds	r3, r7, r1
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	189b      	adds	r3, r3, r2
 8005004:	187a      	adds	r2, r7, r1
 8005006:	6013      	str	r3, [r2, #0]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	00da      	lsls	r2, r3, #3
 800500e:	187b      	adds	r3, r7, r1
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	18d3      	adds	r3, r2, r3
 8005014:	4a92      	ldr	r2, [pc, #584]	; (8005260 <USB_EPStartXfer+0x11bc>)
 8005016:	4694      	mov	ip, r2
 8005018:	4463      	add	r3, ip
 800501a:	21c8      	movs	r1, #200	; 0xc8
 800501c:	187a      	adds	r2, r7, r1
 800501e:	6013      	str	r3, [r2, #0]
 8005020:	187b      	adds	r3, r7, r1
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	881b      	ldrh	r3, [r3, #0]
 8005026:	b29b      	uxth	r3, r3
 8005028:	059b      	lsls	r3, r3, #22
 800502a:	0d9b      	lsrs	r3, r3, #22
 800502c:	b29a      	uxth	r2, r3
 800502e:	187b      	adds	r3, r7, r1
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	801a      	strh	r2, [r3, #0]
 8005034:	1d7b      	adds	r3, r7, #5
 8005036:	33ff      	adds	r3, #255	; 0xff
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2b3e      	cmp	r3, #62	; 0x3e
 800503c:	d925      	bls.n	800508a <USB_EPStartXfer+0xfe6>
 800503e:	1d7b      	adds	r3, r7, #5
 8005040:	33ff      	adds	r3, #255	; 0xff
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	095b      	lsrs	r3, r3, #5
 8005046:	21dc      	movs	r1, #220	; 0xdc
 8005048:	187a      	adds	r2, r7, r1
 800504a:	6013      	str	r3, [r2, #0]
 800504c:	1d7b      	adds	r3, r7, #5
 800504e:	33ff      	adds	r3, #255	; 0xff
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	221f      	movs	r2, #31
 8005054:	4013      	ands	r3, r2
 8005056:	d104      	bne.n	8005062 <USB_EPStartXfer+0xfbe>
 8005058:	187b      	adds	r3, r7, r1
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	3b01      	subs	r3, #1
 800505e:	187a      	adds	r2, r7, r1
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	21c8      	movs	r1, #200	; 0xc8
 8005064:	187b      	adds	r3, r7, r1
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	881b      	ldrh	r3, [r3, #0]
 800506a:	b29a      	uxth	r2, r3
 800506c:	23dc      	movs	r3, #220	; 0xdc
 800506e:	18fb      	adds	r3, r7, r3
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	b29b      	uxth	r3, r3
 8005074:	029b      	lsls	r3, r3, #10
 8005076:	b29b      	uxth	r3, r3
 8005078:	4313      	orrs	r3, r2
 800507a:	b29b      	uxth	r3, r3
 800507c:	4a79      	ldr	r2, [pc, #484]	; (8005264 <USB_EPStartXfer+0x11c0>)
 800507e:	4313      	orrs	r3, r2
 8005080:	b29a      	uxth	r2, r3
 8005082:	187b      	adds	r3, r7, r1
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	801a      	strh	r2, [r3, #0]
 8005088:	e058      	b.n	800513c <USB_EPStartXfer+0x1098>
 800508a:	1d7b      	adds	r3, r7, #5
 800508c:	33ff      	adds	r3, #255	; 0xff
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10b      	bne.n	80050ac <USB_EPStartXfer+0x1008>
 8005094:	21c8      	movs	r1, #200	; 0xc8
 8005096:	187b      	adds	r3, r7, r1
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	b29b      	uxth	r3, r3
 800509e:	4a71      	ldr	r2, [pc, #452]	; (8005264 <USB_EPStartXfer+0x11c0>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	187b      	adds	r3, r7, r1
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	801a      	strh	r2, [r3, #0]
 80050aa:	e047      	b.n	800513c <USB_EPStartXfer+0x1098>
 80050ac:	1d7b      	adds	r3, r7, #5
 80050ae:	33ff      	adds	r3, #255	; 0xff
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	085b      	lsrs	r3, r3, #1
 80050b4:	21dc      	movs	r1, #220	; 0xdc
 80050b6:	187a      	adds	r2, r7, r1
 80050b8:	6013      	str	r3, [r2, #0]
 80050ba:	1d7b      	adds	r3, r7, #5
 80050bc:	33ff      	adds	r3, #255	; 0xff
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2201      	movs	r2, #1
 80050c2:	4013      	ands	r3, r2
 80050c4:	d004      	beq.n	80050d0 <USB_EPStartXfer+0x102c>
 80050c6:	187b      	adds	r3, r7, r1
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	3301      	adds	r3, #1
 80050cc:	187a      	adds	r2, r7, r1
 80050ce:	6013      	str	r3, [r2, #0]
 80050d0:	21c8      	movs	r1, #200	; 0xc8
 80050d2:	187b      	adds	r3, r7, r1
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	881b      	ldrh	r3, [r3, #0]
 80050d8:	b29a      	uxth	r2, r3
 80050da:	23dc      	movs	r3, #220	; 0xdc
 80050dc:	18fb      	adds	r3, r7, r3
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	029b      	lsls	r3, r3, #10
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	4313      	orrs	r3, r2
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	187b      	adds	r3, r7, r1
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	801a      	strh	r2, [r3, #0]
 80050f0:	e024      	b.n	800513c <USB_EPStartXfer+0x1098>
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	785b      	ldrb	r3, [r3, #1]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d120      	bne.n	800513c <USB_EPStartXfer+0x1098>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	21d4      	movs	r1, #212	; 0xd4
 80050fe:	187a      	adds	r2, r7, r1
 8005100:	6013      	str	r3, [r2, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2250      	movs	r2, #80	; 0x50
 8005106:	5a9b      	ldrh	r3, [r3, r2]
 8005108:	b29b      	uxth	r3, r3
 800510a:	001a      	movs	r2, r3
 800510c:	187b      	adds	r3, r7, r1
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	189b      	adds	r3, r3, r2
 8005112:	187a      	adds	r2, r7, r1
 8005114:	6013      	str	r3, [r2, #0]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	00da      	lsls	r2, r3, #3
 800511c:	187b      	adds	r3, r7, r1
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	18d3      	adds	r3, r2, r3
 8005122:	4a4f      	ldr	r2, [pc, #316]	; (8005260 <USB_EPStartXfer+0x11bc>)
 8005124:	4694      	mov	ip, r2
 8005126:	4463      	add	r3, ip
 8005128:	21d0      	movs	r1, #208	; 0xd0
 800512a:	187a      	adds	r2, r7, r1
 800512c:	6013      	str	r3, [r2, #0]
 800512e:	1d7b      	adds	r3, r7, #5
 8005130:	33ff      	adds	r3, #255	; 0xff
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	b29a      	uxth	r2, r3
 8005136:	187b      	adds	r3, r7, r1
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	801a      	strh	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	22c4      	movs	r2, #196	; 0xc4
 8005140:	18ba      	adds	r2, r7, r2
 8005142:	6013      	str	r3, [r2, #0]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	785b      	ldrb	r3, [r3, #1]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d000      	beq.n	800514e <USB_EPStartXfer+0x10aa>
 800514c:	e08c      	b.n	8005268 <USB_EPStartXfer+0x11c4>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	21bc      	movs	r1, #188	; 0xbc
 8005152:	187a      	adds	r2, r7, r1
 8005154:	6013      	str	r3, [r2, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2250      	movs	r2, #80	; 0x50
 800515a:	5a9b      	ldrh	r3, [r3, r2]
 800515c:	b29b      	uxth	r3, r3
 800515e:	001a      	movs	r2, r3
 8005160:	187b      	adds	r3, r7, r1
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	189b      	adds	r3, r3, r2
 8005166:	187a      	adds	r2, r7, r1
 8005168:	6013      	str	r3, [r2, #0]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	00da      	lsls	r2, r3, #3
 8005170:	187b      	adds	r3, r7, r1
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	18d3      	adds	r3, r2, r3
 8005176:	4a37      	ldr	r2, [pc, #220]	; (8005254 <USB_EPStartXfer+0x11b0>)
 8005178:	4694      	mov	ip, r2
 800517a:	4463      	add	r3, ip
 800517c:	21b8      	movs	r1, #184	; 0xb8
 800517e:	187a      	adds	r2, r7, r1
 8005180:	6013      	str	r3, [r2, #0]
 8005182:	187b      	adds	r3, r7, r1
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	881b      	ldrh	r3, [r3, #0]
 8005188:	b29b      	uxth	r3, r3
 800518a:	059b      	lsls	r3, r3, #22
 800518c:	0d9b      	lsrs	r3, r3, #22
 800518e:	b29a      	uxth	r2, r3
 8005190:	187b      	adds	r3, r7, r1
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	801a      	strh	r2, [r3, #0]
 8005196:	1d7b      	adds	r3, r7, #5
 8005198:	33ff      	adds	r3, #255	; 0xff
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b3e      	cmp	r3, #62	; 0x3e
 800519e:	d925      	bls.n	80051ec <USB_EPStartXfer+0x1148>
 80051a0:	1d7b      	adds	r3, r7, #5
 80051a2:	33ff      	adds	r3, #255	; 0xff
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	095b      	lsrs	r3, r3, #5
 80051a8:	21d8      	movs	r1, #216	; 0xd8
 80051aa:	187a      	adds	r2, r7, r1
 80051ac:	6013      	str	r3, [r2, #0]
 80051ae:	1d7b      	adds	r3, r7, #5
 80051b0:	33ff      	adds	r3, #255	; 0xff
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	221f      	movs	r2, #31
 80051b6:	4013      	ands	r3, r2
 80051b8:	d104      	bne.n	80051c4 <USB_EPStartXfer+0x1120>
 80051ba:	187b      	adds	r3, r7, r1
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	3b01      	subs	r3, #1
 80051c0:	187a      	adds	r2, r7, r1
 80051c2:	6013      	str	r3, [r2, #0]
 80051c4:	21b8      	movs	r1, #184	; 0xb8
 80051c6:	187b      	adds	r3, r7, r1
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	881b      	ldrh	r3, [r3, #0]
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	23d8      	movs	r3, #216	; 0xd8
 80051d0:	18fb      	adds	r3, r7, r3
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	029b      	lsls	r3, r3, #10
 80051d8:	b29b      	uxth	r3, r3
 80051da:	4313      	orrs	r3, r2
 80051dc:	b29b      	uxth	r3, r3
 80051de:	4a21      	ldr	r2, [pc, #132]	; (8005264 <USB_EPStartXfer+0x11c0>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	187b      	adds	r3, r7, r1
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	801a      	strh	r2, [r3, #0]
 80051ea:	e062      	b.n	80052b2 <USB_EPStartXfer+0x120e>
 80051ec:	1d7b      	adds	r3, r7, #5
 80051ee:	33ff      	adds	r3, #255	; 0xff
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10b      	bne.n	800520e <USB_EPStartXfer+0x116a>
 80051f6:	21b8      	movs	r1, #184	; 0xb8
 80051f8:	187b      	adds	r3, r7, r1
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	b29b      	uxth	r3, r3
 8005200:	4a18      	ldr	r2, [pc, #96]	; (8005264 <USB_EPStartXfer+0x11c0>)
 8005202:	4313      	orrs	r3, r2
 8005204:	b29a      	uxth	r2, r3
 8005206:	187b      	adds	r3, r7, r1
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	801a      	strh	r2, [r3, #0]
 800520c:	e051      	b.n	80052b2 <USB_EPStartXfer+0x120e>
 800520e:	1d7b      	adds	r3, r7, #5
 8005210:	33ff      	adds	r3, #255	; 0xff
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	085b      	lsrs	r3, r3, #1
 8005216:	21d8      	movs	r1, #216	; 0xd8
 8005218:	187a      	adds	r2, r7, r1
 800521a:	6013      	str	r3, [r2, #0]
 800521c:	1d7b      	adds	r3, r7, #5
 800521e:	33ff      	adds	r3, #255	; 0xff
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2201      	movs	r2, #1
 8005224:	4013      	ands	r3, r2
 8005226:	d004      	beq.n	8005232 <USB_EPStartXfer+0x118e>
 8005228:	187b      	adds	r3, r7, r1
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	3301      	adds	r3, #1
 800522e:	187a      	adds	r2, r7, r1
 8005230:	6013      	str	r3, [r2, #0]
 8005232:	21b8      	movs	r1, #184	; 0xb8
 8005234:	187b      	adds	r3, r7, r1
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	881b      	ldrh	r3, [r3, #0]
 800523a:	b29a      	uxth	r2, r3
 800523c:	23d8      	movs	r3, #216	; 0xd8
 800523e:	18fb      	adds	r3, r7, r3
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	b29b      	uxth	r3, r3
 8005244:	029b      	lsls	r3, r3, #10
 8005246:	b29b      	uxth	r3, r3
 8005248:	4313      	orrs	r3, r2
 800524a:	b29a      	uxth	r2, r3
 800524c:	187b      	adds	r3, r7, r1
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	801a      	strh	r2, [r3, #0]
 8005252:	e02e      	b.n	80052b2 <USB_EPStartXfer+0x120e>
 8005254:	00000406 	.word	0x00000406
 8005258:	ffff8f8f 	.word	0xffff8f8f
 800525c:	ffff80c0 	.word	0xffff80c0
 8005260:	00000402 	.word	0x00000402
 8005264:	ffff8000 	.word	0xffff8000
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	785b      	ldrb	r3, [r3, #1]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d120      	bne.n	80052b2 <USB_EPStartXfer+0x120e>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2250      	movs	r2, #80	; 0x50
 8005274:	5a9b      	ldrh	r3, [r3, r2]
 8005276:	b29b      	uxth	r3, r3
 8005278:	001a      	movs	r2, r3
 800527a:	21c4      	movs	r1, #196	; 0xc4
 800527c:	187b      	adds	r3, r7, r1
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	189b      	adds	r3, r3, r2
 8005282:	187a      	adds	r2, r7, r1
 8005284:	6013      	str	r3, [r2, #0]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	00da      	lsls	r2, r3, #3
 800528c:	187b      	adds	r3, r7, r1
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	18d3      	adds	r3, r2, r3
 8005292:	4a1d      	ldr	r2, [pc, #116]	; (8005308 <USB_EPStartXfer+0x1264>)
 8005294:	4694      	mov	ip, r2
 8005296:	4463      	add	r3, ip
 8005298:	21c0      	movs	r1, #192	; 0xc0
 800529a:	187a      	adds	r2, r7, r1
 800529c:	6013      	str	r3, [r2, #0]
 800529e:	1d7b      	adds	r3, r7, #5
 80052a0:	33ff      	adds	r3, #255	; 0xff
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	187b      	adds	r3, r7, r1
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	801a      	strh	r2, [r3, #0]
 80052ac:	e001      	b.n	80052b2 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e025      	b.n	80052fe <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	18d3      	adds	r3, r2, r3
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	b29a      	uxth	r2, r3
 80052c0:	208a      	movs	r0, #138	; 0x8a
 80052c2:	183b      	adds	r3, r7, r0
 80052c4:	4911      	ldr	r1, [pc, #68]	; (800530c <USB_EPStartXfer+0x1268>)
 80052c6:	400a      	ands	r2, r1
 80052c8:	801a      	strh	r2, [r3, #0]
 80052ca:	183b      	adds	r3, r7, r0
 80052cc:	183a      	adds	r2, r7, r0
 80052ce:	8812      	ldrh	r2, [r2, #0]
 80052d0:	2180      	movs	r1, #128	; 0x80
 80052d2:	0149      	lsls	r1, r1, #5
 80052d4:	404a      	eors	r2, r1
 80052d6:	801a      	strh	r2, [r3, #0]
 80052d8:	183b      	adds	r3, r7, r0
 80052da:	183a      	adds	r2, r7, r0
 80052dc:	8812      	ldrh	r2, [r2, #0]
 80052de:	2180      	movs	r1, #128	; 0x80
 80052e0:	0189      	lsls	r1, r1, #6
 80052e2:	404a      	eors	r2, r1
 80052e4:	801a      	strh	r2, [r3, #0]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	18d3      	adds	r3, r2, r3
 80052f0:	183a      	adds	r2, r7, r0
 80052f2:	8812      	ldrh	r2, [r2, #0]
 80052f4:	4906      	ldr	r1, [pc, #24]	; (8005310 <USB_EPStartXfer+0x126c>)
 80052f6:	430a      	orrs	r2, r1
 80052f8:	b292      	uxth	r2, r2
 80052fa:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	0018      	movs	r0, r3
 8005300:	46bd      	mov	sp, r7
 8005302:	b043      	add	sp, #268	; 0x10c
 8005304:	bd90      	pop	{r4, r7, pc}
 8005306:	46c0      	nop			; (mov r8, r8)
 8005308:	00000406 	.word	0x00000406
 800530c:	ffffbf8f 	.word	0xffffbf8f
 8005310:	ffff8080 	.word	0xffff8080

08005314 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	785b      	ldrb	r3, [r3, #1]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d01d      	beq.n	8005362 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	18d3      	adds	r3, r2, r3
 8005330:	881b      	ldrh	r3, [r3, #0]
 8005332:	b29a      	uxth	r2, r3
 8005334:	200c      	movs	r0, #12
 8005336:	183b      	adds	r3, r7, r0
 8005338:	491b      	ldr	r1, [pc, #108]	; (80053a8 <USB_EPSetStall+0x94>)
 800533a:	400a      	ands	r2, r1
 800533c:	801a      	strh	r2, [r3, #0]
 800533e:	183b      	adds	r3, r7, r0
 8005340:	183a      	adds	r2, r7, r0
 8005342:	8812      	ldrh	r2, [r2, #0]
 8005344:	2110      	movs	r1, #16
 8005346:	404a      	eors	r2, r1
 8005348:	801a      	strh	r2, [r3, #0]
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	18d3      	adds	r3, r2, r3
 8005354:	183a      	adds	r2, r7, r0
 8005356:	8812      	ldrh	r2, [r2, #0]
 8005358:	4914      	ldr	r1, [pc, #80]	; (80053ac <USB_EPSetStall+0x98>)
 800535a:	430a      	orrs	r2, r1
 800535c:	b292      	uxth	r2, r2
 800535e:	801a      	strh	r2, [r3, #0]
 8005360:	e01d      	b.n	800539e <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	18d3      	adds	r3, r2, r3
 800536c:	881b      	ldrh	r3, [r3, #0]
 800536e:	b29a      	uxth	r2, r3
 8005370:	200e      	movs	r0, #14
 8005372:	183b      	adds	r3, r7, r0
 8005374:	490e      	ldr	r1, [pc, #56]	; (80053b0 <USB_EPSetStall+0x9c>)
 8005376:	400a      	ands	r2, r1
 8005378:	801a      	strh	r2, [r3, #0]
 800537a:	183b      	adds	r3, r7, r0
 800537c:	183a      	adds	r2, r7, r0
 800537e:	8812      	ldrh	r2, [r2, #0]
 8005380:	2180      	movs	r1, #128	; 0x80
 8005382:	0149      	lsls	r1, r1, #5
 8005384:	404a      	eors	r2, r1
 8005386:	801a      	strh	r2, [r3, #0]
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	18d3      	adds	r3, r2, r3
 8005392:	183a      	adds	r2, r7, r0
 8005394:	8812      	ldrh	r2, [r2, #0]
 8005396:	4905      	ldr	r1, [pc, #20]	; (80053ac <USB_EPSetStall+0x98>)
 8005398:	430a      	orrs	r2, r1
 800539a:	b292      	uxth	r2, r2
 800539c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	0018      	movs	r0, r3
 80053a2:	46bd      	mov	sp, r7
 80053a4:	b004      	add	sp, #16
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	ffff8fbf 	.word	0xffff8fbf
 80053ac:	ffff8080 	.word	0xffff8080
 80053b0:	ffffbf8f 	.word	0xffffbf8f

080053b4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b086      	sub	sp, #24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	7b1b      	ldrb	r3, [r3, #12]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d000      	beq.n	80053c8 <USB_EPClearStall+0x14>
 80053c6:	e095      	b.n	80054f4 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	785b      	ldrb	r3, [r3, #1]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d046      	beq.n	800545e <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	18d2      	adds	r2, r2, r3
 80053da:	2110      	movs	r1, #16
 80053dc:	187b      	adds	r3, r7, r1
 80053de:	8812      	ldrh	r2, [r2, #0]
 80053e0:	801a      	strh	r2, [r3, #0]
 80053e2:	187b      	adds	r3, r7, r1
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	2240      	movs	r2, #64	; 0x40
 80053e8:	4013      	ands	r3, r2
 80053ea:	d016      	beq.n	800541a <USB_EPClearStall+0x66>
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	18d3      	adds	r3, r2, r3
 80053f6:	881b      	ldrh	r3, [r3, #0]
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	200e      	movs	r0, #14
 80053fc:	183b      	adds	r3, r7, r0
 80053fe:	4940      	ldr	r1, [pc, #256]	; (8005500 <USB_EPClearStall+0x14c>)
 8005400:	400a      	ands	r2, r1
 8005402:	801a      	strh	r2, [r3, #0]
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	18d3      	adds	r3, r2, r3
 800540e:	183a      	adds	r2, r7, r0
 8005410:	8812      	ldrh	r2, [r2, #0]
 8005412:	493c      	ldr	r1, [pc, #240]	; (8005504 <USB_EPClearStall+0x150>)
 8005414:	430a      	orrs	r2, r1
 8005416:	b292      	uxth	r2, r2
 8005418:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	78db      	ldrb	r3, [r3, #3]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d068      	beq.n	80054f4 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	18d3      	adds	r3, r2, r3
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	b29a      	uxth	r2, r3
 8005430:	200c      	movs	r0, #12
 8005432:	183b      	adds	r3, r7, r0
 8005434:	4934      	ldr	r1, [pc, #208]	; (8005508 <USB_EPClearStall+0x154>)
 8005436:	400a      	ands	r2, r1
 8005438:	801a      	strh	r2, [r3, #0]
 800543a:	183b      	adds	r3, r7, r0
 800543c:	183a      	adds	r2, r7, r0
 800543e:	8812      	ldrh	r2, [r2, #0]
 8005440:	2120      	movs	r1, #32
 8005442:	404a      	eors	r2, r1
 8005444:	801a      	strh	r2, [r3, #0]
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	18d3      	adds	r3, r2, r3
 8005450:	183a      	adds	r2, r7, r0
 8005452:	8812      	ldrh	r2, [r2, #0]
 8005454:	492d      	ldr	r1, [pc, #180]	; (800550c <USB_EPClearStall+0x158>)
 8005456:	430a      	orrs	r2, r1
 8005458:	b292      	uxth	r2, r2
 800545a:	801a      	strh	r2, [r3, #0]
 800545c:	e04a      	b.n	80054f4 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	18d2      	adds	r2, r2, r3
 8005468:	2116      	movs	r1, #22
 800546a:	187b      	adds	r3, r7, r1
 800546c:	8812      	ldrh	r2, [r2, #0]
 800546e:	801a      	strh	r2, [r3, #0]
 8005470:	187b      	adds	r3, r7, r1
 8005472:	881a      	ldrh	r2, [r3, #0]
 8005474:	2380      	movs	r3, #128	; 0x80
 8005476:	01db      	lsls	r3, r3, #7
 8005478:	4013      	ands	r3, r2
 800547a:	d016      	beq.n	80054aa <USB_EPClearStall+0xf6>
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	18d3      	adds	r3, r2, r3
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	b29a      	uxth	r2, r3
 800548a:	2014      	movs	r0, #20
 800548c:	183b      	adds	r3, r7, r0
 800548e:	491c      	ldr	r1, [pc, #112]	; (8005500 <USB_EPClearStall+0x14c>)
 8005490:	400a      	ands	r2, r1
 8005492:	801a      	strh	r2, [r3, #0]
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	18d3      	adds	r3, r2, r3
 800549e:	183a      	adds	r2, r7, r0
 80054a0:	8812      	ldrh	r2, [r2, #0]
 80054a2:	491b      	ldr	r1, [pc, #108]	; (8005510 <USB_EPClearStall+0x15c>)
 80054a4:	430a      	orrs	r2, r1
 80054a6:	b292      	uxth	r2, r2
 80054a8:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	18d3      	adds	r3, r2, r3
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	2012      	movs	r0, #18
 80054ba:	183b      	adds	r3, r7, r0
 80054bc:	4915      	ldr	r1, [pc, #84]	; (8005514 <USB_EPClearStall+0x160>)
 80054be:	400a      	ands	r2, r1
 80054c0:	801a      	strh	r2, [r3, #0]
 80054c2:	183b      	adds	r3, r7, r0
 80054c4:	183a      	adds	r2, r7, r0
 80054c6:	8812      	ldrh	r2, [r2, #0]
 80054c8:	2180      	movs	r1, #128	; 0x80
 80054ca:	0149      	lsls	r1, r1, #5
 80054cc:	404a      	eors	r2, r1
 80054ce:	801a      	strh	r2, [r3, #0]
 80054d0:	183b      	adds	r3, r7, r0
 80054d2:	183a      	adds	r2, r7, r0
 80054d4:	8812      	ldrh	r2, [r2, #0]
 80054d6:	2180      	movs	r1, #128	; 0x80
 80054d8:	0189      	lsls	r1, r1, #6
 80054da:	404a      	eors	r2, r1
 80054dc:	801a      	strh	r2, [r3, #0]
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	18d3      	adds	r3, r2, r3
 80054e8:	183a      	adds	r2, r7, r0
 80054ea:	8812      	ldrh	r2, [r2, #0]
 80054ec:	4907      	ldr	r1, [pc, #28]	; (800550c <USB_EPClearStall+0x158>)
 80054ee:	430a      	orrs	r2, r1
 80054f0:	b292      	uxth	r2, r2
 80054f2:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	0018      	movs	r0, r3
 80054f8:	46bd      	mov	sp, r7
 80054fa:	b006      	add	sp, #24
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	46c0      	nop			; (mov r8, r8)
 8005500:	ffff8f8f 	.word	0xffff8f8f
 8005504:	ffff80c0 	.word	0xffff80c0
 8005508:	ffff8fbf 	.word	0xffff8fbf
 800550c:	ffff8080 	.word	0xffff8080
 8005510:	ffffc080 	.word	0xffffc080
 8005514:	ffffbf8f 	.word	0xffffbf8f

08005518 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	000a      	movs	r2, r1
 8005522:	1cfb      	adds	r3, r7, #3
 8005524:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8005526:	1cfb      	adds	r3, r7, #3
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d103      	bne.n	8005536 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	224c      	movs	r2, #76	; 0x4c
 8005532:	2180      	movs	r1, #128	; 0x80
 8005534:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	0018      	movs	r0, r3
 800553a:	46bd      	mov	sp, r7
 800553c:	b002      	add	sp, #8
 800553e:	bd80      	pop	{r7, pc}

08005540 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2258      	movs	r2, #88	; 0x58
 800554c:	5a9b      	ldrh	r3, [r3, r2]
 800554e:	b29b      	uxth	r3, r3
 8005550:	4a05      	ldr	r2, [pc, #20]	; (8005568 <USB_DevConnect+0x28>)
 8005552:	4313      	orrs	r3, r2
 8005554:	b299      	uxth	r1, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2258      	movs	r2, #88	; 0x58
 800555a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	0018      	movs	r0, r3
 8005560:	46bd      	mov	sp, r7
 8005562:	b002      	add	sp, #8
 8005564:	bd80      	pop	{r7, pc}
 8005566:	46c0      	nop			; (mov r8, r8)
 8005568:	ffff8000 	.word	0xffff8000

0800556c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2244      	movs	r2, #68	; 0x44
 8005578:	5a9b      	ldrh	r3, [r3, r2]
 800557a:	b29b      	uxth	r3, r3
 800557c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800557e:	68fb      	ldr	r3, [r7, #12]
}
 8005580:	0018      	movs	r0, r3
 8005582:	46bd      	mov	sp, r7
 8005584:	b004      	add	sp, #16
 8005586:	bd80      	pop	{r7, pc}

08005588 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b08a      	sub	sp, #40	; 0x28
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	0019      	movs	r1, r3
 8005594:	1dbb      	adds	r3, r7, #6
 8005596:	801a      	strh	r2, [r3, #0]
 8005598:	1d3b      	adds	r3, r7, #4
 800559a:	1c0a      	adds	r2, r1, #0
 800559c:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800559e:	1d3b      	adds	r3, r7, #4
 80055a0:	881b      	ldrh	r3, [r3, #0]
 80055a2:	3301      	adds	r3, #1
 80055a4:	085b      	lsrs	r3, r3, #1
 80055a6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80055b0:	1dbb      	adds	r3, r7, #6
 80055b2:	881a      	ldrh	r2, [r3, #0]
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	18d3      	adds	r3, r2, r3
 80055b8:	2280      	movs	r2, #128	; 0x80
 80055ba:	00d2      	lsls	r2, r2, #3
 80055bc:	4694      	mov	ip, r2
 80055be:	4463      	add	r3, ip
 80055c0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	627b      	str	r3, [r7, #36]	; 0x24
 80055c6:	e020      	b.n	800560a <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	781a      	ldrb	r2, [r3, #0]
 80055cc:	2112      	movs	r1, #18
 80055ce:	187b      	adds	r3, r7, r1
 80055d0:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	3301      	adds	r3, #1
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	021b      	lsls	r3, r3, #8
 80055da:	b21a      	sxth	r2, r3
 80055dc:	187b      	adds	r3, r7, r1
 80055de:	2000      	movs	r0, #0
 80055e0:	5e1b      	ldrsh	r3, [r3, r0]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	b21a      	sxth	r2, r3
 80055e6:	187b      	adds	r3, r7, r1
 80055e8:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	187a      	adds	r2, r7, r1
 80055ee:	8812      	ldrh	r2, [r2, #0]
 80055f0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80055f2:	6a3b      	ldr	r3, [r7, #32]
 80055f4:	3302      	adds	r3, #2
 80055f6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	3301      	adds	r3, #1
 80055fc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	3301      	adds	r3, #1
 8005602:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	3b01      	subs	r3, #1
 8005608:	627b      	str	r3, [r7, #36]	; 0x24
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1db      	bne.n	80055c8 <USB_WritePMA+0x40>
  }
}
 8005610:	46c0      	nop			; (mov r8, r8)
 8005612:	46c0      	nop			; (mov r8, r8)
 8005614:	46bd      	mov	sp, r7
 8005616:	b00a      	add	sp, #40	; 0x28
 8005618:	bd80      	pop	{r7, pc}

0800561a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b08a      	sub	sp, #40	; 0x28
 800561e:	af00      	add	r7, sp, #0
 8005620:	60f8      	str	r0, [r7, #12]
 8005622:	60b9      	str	r1, [r7, #8]
 8005624:	0019      	movs	r1, r3
 8005626:	1dbb      	adds	r3, r7, #6
 8005628:	801a      	strh	r2, [r3, #0]
 800562a:	1d3b      	adds	r3, r7, #4
 800562c:	1c0a      	adds	r2, r1, #0
 800562e:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005630:	1d3b      	adds	r3, r7, #4
 8005632:	881b      	ldrh	r3, [r3, #0]
 8005634:	085b      	lsrs	r3, r3, #1
 8005636:	b29b      	uxth	r3, r3
 8005638:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005642:	1dbb      	adds	r3, r7, #6
 8005644:	881a      	ldrh	r2, [r3, #0]
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	18d3      	adds	r3, r2, r3
 800564a:	2280      	movs	r2, #128	; 0x80
 800564c:	00d2      	lsls	r2, r2, #3
 800564e:	4694      	mov	ip, r2
 8005650:	4463      	add	r3, ip
 8005652:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	627b      	str	r3, [r7, #36]	; 0x24
 8005658:	e018      	b.n	800568c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	881b      	ldrh	r3, [r3, #0]
 800565e:	b29b      	uxth	r3, r3
 8005660:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	3302      	adds	r3, #2
 8005666:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	b2da      	uxtb	r2, r3
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	3301      	adds	r3, #1
 8005674:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	0a1b      	lsrs	r3, r3, #8
 800567a:	b2da      	uxtb	r2, r3
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	3301      	adds	r3, #1
 8005684:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005688:	3b01      	subs	r3, #1
 800568a:	627b      	str	r3, [r7, #36]	; 0x24
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1e3      	bne.n	800565a <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005692:	1d3b      	adds	r3, r7, #4
 8005694:	881b      	ldrh	r3, [r3, #0]
 8005696:	2201      	movs	r2, #1
 8005698:	4013      	ands	r3, r2
 800569a:	b29b      	uxth	r3, r3
 800569c:	2b00      	cmp	r3, #0
 800569e:	d007      	beq.n	80056b0 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	881b      	ldrh	r3, [r3, #0]
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	b2da      	uxtb	r2, r3
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	701a      	strb	r2, [r3, #0]
  }
}
 80056b0:	46c0      	nop			; (mov r8, r8)
 80056b2:	46bd      	mov	sp, r7
 80056b4:	b00a      	add	sp, #40	; 0x28
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <USBD_HID_Init>:
 *         Initialize the HID interface
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	000a      	movs	r2, r1
 80056c2:	1cfb      	adds	r3, r7, #3
 80056c4:	701a      	strb	r2, [r3, #0]
	/* Open EP IN */
	USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	2304      	movs	r3, #4
 80056ca:	2203      	movs	r2, #3
 80056cc:	2181      	movs	r1, #129	; 0x81
 80056ce:	f001 fe5a 	bl	8007386 <USBD_LL_OpenEP>
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	62da      	str	r2, [r3, #44]	; 0x2c

	pdev->pClassData = USBD_malloc (sizeof(USBD_HID_HandleTypeDef));
 80056d8:	2010      	movs	r0, #16
 80056da:	f001 ffd7 	bl	800768c <USBD_static_malloc>
 80056de:	0001      	movs	r1, r0
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	23ae      	movs	r3, #174	; 0xae
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	50d1      	str	r1, [r2, r3]

	if (pdev->pClassData == NULL) {
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	23ae      	movs	r3, #174	; 0xae
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	58d3      	ldr	r3, [r2, r3]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d101      	bne.n	80056f8 <USBD_HID_Init+0x40>
		return USBD_FAIL;
 80056f4:	2302      	movs	r3, #2
 80056f6:	e006      	b.n	8005706 <USBD_HID_Init+0x4e>
	}

	((USBD_HID_HandleTypeDef*) pdev->pClassData)->state = HID_IDLE;
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	23ae      	movs	r3, #174	; 0xae
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	58d3      	ldr	r3, [r2, r3]
 8005700:	2200      	movs	r2, #0
 8005702:	731a      	strb	r2, [r3, #12]

	return USBD_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	0018      	movs	r0, r3
 8005708:	46bd      	mov	sp, r7
 800570a:	b002      	add	sp, #8
 800570c:	bd80      	pop	{r7, pc}

0800570e <USBD_HID_DeInit>:
 *         DeInitialize the HID layer
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 800570e:	b580      	push	{r7, lr}
 8005710:	b082      	sub	sp, #8
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
 8005716:	000a      	movs	r2, r1
 8005718:	1cfb      	adds	r3, r7, #3
 800571a:	701a      	strb	r2, [r3, #0]
	/* Close HID EPs */
	USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2181      	movs	r1, #129	; 0x81
 8005720:	0018      	movs	r0, r3
 8005722:	f001 fe67 	bl	80073f4 <USBD_LL_CloseEP>
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	62da      	str	r2, [r3, #44]	; 0x2c

	/* FRee allocated memory */
	if (pdev->pClassData != NULL) {
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	23ae      	movs	r3, #174	; 0xae
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	58d3      	ldr	r3, [r2, r3]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00b      	beq.n	8005750 <USBD_HID_DeInit+0x42>
		USBD_free(pdev->pClassData);
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	23ae      	movs	r3, #174	; 0xae
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	58d3      	ldr	r3, [r2, r3]
 8005740:	0018      	movs	r0, r3
 8005742:	f001 ffaf 	bl	80076a4 <USBD_static_free>
		pdev->pClassData = NULL;
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	23ae      	movs	r3, #174	; 0xae
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	2100      	movs	r1, #0
 800574e:	50d1      	str	r1, [r2, r3]
	}

	return USBD_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	0018      	movs	r0, r3
 8005754:	46bd      	mov	sp, r7
 8005756:	b002      	add	sp, #8
 8005758:	bd80      	pop	{r7, pc}
	...

0800575c <USBD_HID_Setup>:
 * @param  pdev: instance
 * @param  req: usb requests
 * @retval status
 */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev,
		USBD_SetupReqTypedef *req) {
 800575c:	b580      	push	{r7, lr}
 800575e:	b088      	sub	sp, #32
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
	USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	23ae      	movs	r3, #174	; 0xae
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	58d3      	ldr	r3, [r2, r3]
 800576e:	613b      	str	r3, [r7, #16]
	uint16_t len = 0U;
 8005770:	231e      	movs	r3, #30
 8005772:	18fb      	adds	r3, r7, r3
 8005774:	2200      	movs	r2, #0
 8005776:	801a      	strh	r2, [r3, #0]
	uint8_t *pbuf = NULL;
 8005778:	2300      	movs	r3, #0
 800577a:	61bb      	str	r3, [r7, #24]
	uint16_t status_info = 0U;
 800577c:	230e      	movs	r3, #14
 800577e:	18fb      	adds	r3, r7, r3
 8005780:	2200      	movs	r2, #0
 8005782:	801a      	strh	r2, [r3, #0]
	USBD_StatusTypeDef ret = USBD_OK;
 8005784:	2317      	movs	r3, #23
 8005786:	18fb      	adds	r3, r7, r3
 8005788:	2200      	movs	r2, #0
 800578a:	701a      	strb	r2, [r3, #0]

	switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	001a      	movs	r2, r3
 8005792:	2360      	movs	r3, #96	; 0x60
 8005794:	4013      	ands	r3, r2
 8005796:	d03a      	beq.n	800580e <USBD_HID_Setup+0xb2>
 8005798:	2b20      	cmp	r3, #32
 800579a:	d000      	beq.n	800579e <USBD_HID_Setup+0x42>
 800579c:	e0d6      	b.n	800594c <USBD_HID_Setup+0x1f0>
	case USB_REQ_TYPE_CLASS:
		switch (req->bRequest) {
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	785b      	ldrb	r3, [r3, #1]
 80057a2:	2b0b      	cmp	r3, #11
 80057a4:	d008      	beq.n	80057b8 <USBD_HID_Setup+0x5c>
 80057a6:	dc26      	bgt.n	80057f6 <USBD_HID_Setup+0x9a>
 80057a8:	2b0a      	cmp	r3, #10
 80057aa:	d013      	beq.n	80057d4 <USBD_HID_Setup+0x78>
 80057ac:	dc23      	bgt.n	80057f6 <USBD_HID_Setup+0x9a>
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d019      	beq.n	80057e6 <USBD_HID_Setup+0x8a>
 80057b2:	2b03      	cmp	r3, #3
 80057b4:	d007      	beq.n	80057c6 <USBD_HID_Setup+0x6a>
 80057b6:	e01e      	b.n	80057f6 <USBD_HID_Setup+0x9a>
		case HID_REQ_SET_PROTOCOL:
			hhid->Protocol = (uint8_t) (req->wValue);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	885b      	ldrh	r3, [r3, #2]
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	001a      	movs	r2, r3
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	601a      	str	r2, [r3, #0]
			break;
 80057c4:	e022      	b.n	800580c <USBD_HID_Setup+0xb0>

		case HID_REQ_GET_PROTOCOL:
			USBD_CtlSendData(pdev, (uint8_t*) (void*) &hhid->Protocol, 1U);
 80057c6:	6939      	ldr	r1, [r7, #16]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	0018      	movs	r0, r3
 80057ce:	f001 fabf 	bl	8006d50 <USBD_CtlSendData>
			break;
 80057d2:	e01b      	b.n	800580c <USBD_HID_Setup+0xb0>

		case HID_REQ_SET_IDLE:
			hhid->IdleState = (uint8_t) (req->wValue >> 8);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	885b      	ldrh	r3, [r3, #2]
 80057d8:	0a1b      	lsrs	r3, r3, #8
 80057da:	b29b      	uxth	r3, r3
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	001a      	movs	r2, r3
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	605a      	str	r2, [r3, #4]
			break;
 80057e4:	e012      	b.n	800580c <USBD_HID_Setup+0xb0>

		case HID_REQ_GET_IDLE:
			USBD_CtlSendData(pdev, (uint8_t*) (void*) &hhid->IdleState, 1U);
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	1d19      	adds	r1, r3, #4
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	0018      	movs	r0, r3
 80057f0:	f001 faae 	bl	8006d50 <USBD_CtlSendData>
			break;
 80057f4:	e00a      	b.n	800580c <USBD_HID_Setup+0xb0>

		default:
			USBD_CtlError(pdev, req);
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	0011      	movs	r1, r2
 80057fc:	0018      	movs	r0, r3
 80057fe:	f001 fa29 	bl	8006c54 <USBD_CtlError>
			ret = USBD_FAIL;
 8005802:	2317      	movs	r3, #23
 8005804:	18fb      	adds	r3, r7, r3
 8005806:	2202      	movs	r2, #2
 8005808:	701a      	strb	r2, [r3, #0]
			break;
 800580a:	46c0      	nop			; (mov r8, r8)
		}
		break;
 800580c:	e0a9      	b.n	8005962 <USBD_HID_Setup+0x206>
	case USB_REQ_TYPE_STANDARD:
		switch (req->bRequest) {
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	785b      	ldrb	r3, [r3, #1]
 8005812:	2b0b      	cmp	r3, #11
 8005814:	d100      	bne.n	8005818 <USBD_HID_Setup+0xbc>
 8005816:	e075      	b.n	8005904 <USBD_HID_Setup+0x1a8>
 8005818:	dd00      	ble.n	800581c <USBD_HID_Setup+0xc0>
 800581a:	e08b      	b.n	8005934 <USBD_HID_Setup+0x1d8>
 800581c:	2b0a      	cmp	r3, #10
 800581e:	d057      	beq.n	80058d0 <USBD_HID_Setup+0x174>
 8005820:	dd00      	ble.n	8005824 <USBD_HID_Setup+0xc8>
 8005822:	e087      	b.n	8005934 <USBD_HID_Setup+0x1d8>
 8005824:	2b00      	cmp	r3, #0
 8005826:	d002      	beq.n	800582e <USBD_HID_Setup+0xd2>
 8005828:	2b06      	cmp	r3, #6
 800582a:	d019      	beq.n	8005860 <USBD_HID_Setup+0x104>
 800582c:	e082      	b.n	8005934 <USBD_HID_Setup+0x1d8>
		case USB_REQ_GET_STATUS:
			if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	23a7      	movs	r3, #167	; 0xa7
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	5cd3      	ldrb	r3, [r2, r3]
 8005836:	2b03      	cmp	r3, #3
 8005838:	d107      	bne.n	800584a <USBD_HID_Setup+0xee>
				USBD_CtlSendData(pdev, (uint8_t*) (void*) &status_info, 2U);
 800583a:	230e      	movs	r3, #14
 800583c:	18f9      	adds	r1, r7, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2202      	movs	r2, #2
 8005842:	0018      	movs	r0, r3
 8005844:	f001 fa84 	bl	8006d50 <USBD_CtlSendData>
			} else {
				USBD_CtlError(pdev, req);
				ret = USBD_FAIL;
			}
			break;
 8005848:	e07f      	b.n	800594a <USBD_HID_Setup+0x1ee>
				USBD_CtlError(pdev, req);
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	0011      	movs	r1, r2
 8005850:	0018      	movs	r0, r3
 8005852:	f001 f9ff 	bl	8006c54 <USBD_CtlError>
				ret = USBD_FAIL;
 8005856:	2317      	movs	r3, #23
 8005858:	18fb      	adds	r3, r7, r3
 800585a:	2202      	movs	r2, #2
 800585c:	701a      	strb	r2, [r3, #0]
			break;
 800585e:	e074      	b.n	800594a <USBD_HID_Setup+0x1ee>

		case USB_REQ_GET_DESCRIPTOR:
			if (req->wValue >> 8 == HID_REPORT_DESC) {
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	885b      	ldrh	r3, [r3, #2]
 8005864:	0a1b      	lsrs	r3, r3, #8
 8005866:	b29b      	uxth	r3, r3
 8005868:	2b22      	cmp	r3, #34	; 0x22
 800586a:	d10b      	bne.n	8005884 <USBD_HID_Setup+0x128>
				len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	88db      	ldrh	r3, [r3, #6]
 8005870:	221e      	movs	r2, #30
 8005872:	18ba      	adds	r2, r7, r2
 8005874:	b299      	uxth	r1, r3
 8005876:	293f      	cmp	r1, #63	; 0x3f
 8005878:	d900      	bls.n	800587c <USBD_HID_Setup+0x120>
 800587a:	233f      	movs	r3, #63	; 0x3f
 800587c:	8013      	strh	r3, [r2, #0]
				pbuf = HID_MOUSE_ReportDesc;
 800587e:	4b3c      	ldr	r3, [pc, #240]	; (8005970 <USBD_HID_Setup+0x214>)
 8005880:	61bb      	str	r3, [r7, #24]
 8005882:	e01c      	b.n	80058be <USBD_HID_Setup+0x162>
			} else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE) {
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	885b      	ldrh	r3, [r3, #2]
 8005888:	0a1b      	lsrs	r3, r3, #8
 800588a:	b29b      	uxth	r3, r3
 800588c:	2b21      	cmp	r3, #33	; 0x21
 800588e:	d10b      	bne.n	80058a8 <USBD_HID_Setup+0x14c>
				pbuf = USBD_HID_Desc;
 8005890:	4b38      	ldr	r3, [pc, #224]	; (8005974 <USBD_HID_Setup+0x218>)
 8005892:	61bb      	str	r3, [r7, #24]
				len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	88db      	ldrh	r3, [r3, #6]
 8005898:	221e      	movs	r2, #30
 800589a:	18ba      	adds	r2, r7, r2
 800589c:	b299      	uxth	r1, r3
 800589e:	2909      	cmp	r1, #9
 80058a0:	d900      	bls.n	80058a4 <USBD_HID_Setup+0x148>
 80058a2:	2309      	movs	r3, #9
 80058a4:	8013      	strh	r3, [r2, #0]
 80058a6:	e00a      	b.n	80058be <USBD_HID_Setup+0x162>
			} else {
				USBD_CtlError(pdev, req);
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	0011      	movs	r1, r2
 80058ae:	0018      	movs	r0, r3
 80058b0:	f001 f9d0 	bl	8006c54 <USBD_CtlError>
				ret = USBD_FAIL;
 80058b4:	2317      	movs	r3, #23
 80058b6:	18fb      	adds	r3, r7, r3
 80058b8:	2202      	movs	r2, #2
 80058ba:	701a      	strb	r2, [r3, #0]
				break;
 80058bc:	e045      	b.n	800594a <USBD_HID_Setup+0x1ee>
			}
			USBD_CtlSendData(pdev, pbuf, len);
 80058be:	231e      	movs	r3, #30
 80058c0:	18fb      	adds	r3, r7, r3
 80058c2:	881a      	ldrh	r2, [r3, #0]
 80058c4:	69b9      	ldr	r1, [r7, #24]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	0018      	movs	r0, r3
 80058ca:	f001 fa41 	bl	8006d50 <USBD_CtlSendData>
			break;
 80058ce:	e03c      	b.n	800594a <USBD_HID_Setup+0x1ee>

		case USB_REQ_GET_INTERFACE:
			if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	23a7      	movs	r3, #167	; 0xa7
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	5cd3      	ldrb	r3, [r2, r3]
 80058d8:	2b03      	cmp	r3, #3
 80058da:	d108      	bne.n	80058ee <USBD_HID_Setup+0x192>
				USBD_CtlSendData(pdev, (uint8_t*) (void*) &hhid->AltSetting,
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	3308      	adds	r3, #8
 80058e0:	0019      	movs	r1, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	0018      	movs	r0, r3
 80058e8:	f001 fa32 	bl	8006d50 <USBD_CtlSendData>
						1U);
			} else {
				USBD_CtlError(pdev, req);
				ret = USBD_FAIL;
			}
			break;
 80058ec:	e02d      	b.n	800594a <USBD_HID_Setup+0x1ee>
				USBD_CtlError(pdev, req);
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	0011      	movs	r1, r2
 80058f4:	0018      	movs	r0, r3
 80058f6:	f001 f9ad 	bl	8006c54 <USBD_CtlError>
				ret = USBD_FAIL;
 80058fa:	2317      	movs	r3, #23
 80058fc:	18fb      	adds	r3, r7, r3
 80058fe:	2202      	movs	r2, #2
 8005900:	701a      	strb	r2, [r3, #0]
			break;
 8005902:	e022      	b.n	800594a <USBD_HID_Setup+0x1ee>

		case USB_REQ_SET_INTERFACE:
			if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	23a7      	movs	r3, #167	; 0xa7
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	5cd3      	ldrb	r3, [r2, r3]
 800590c:	2b03      	cmp	r3, #3
 800590e:	d106      	bne.n	800591e <USBD_HID_Setup+0x1c2>
				hhid->AltSetting = (uint8_t) (req->wValue);
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	885b      	ldrh	r3, [r3, #2]
 8005914:	b2db      	uxtb	r3, r3
 8005916:	001a      	movs	r2, r3
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	609a      	str	r2, [r3, #8]
			} else {
				USBD_CtlError(pdev, req);
				ret = USBD_FAIL;
			}
			break;
 800591c:	e015      	b.n	800594a <USBD_HID_Setup+0x1ee>
				USBD_CtlError(pdev, req);
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	0011      	movs	r1, r2
 8005924:	0018      	movs	r0, r3
 8005926:	f001 f995 	bl	8006c54 <USBD_CtlError>
				ret = USBD_FAIL;
 800592a:	2317      	movs	r3, #23
 800592c:	18fb      	adds	r3, r7, r3
 800592e:	2202      	movs	r2, #2
 8005930:	701a      	strb	r2, [r3, #0]
			break;
 8005932:	e00a      	b.n	800594a <USBD_HID_Setup+0x1ee>

		default:
			USBD_CtlError(pdev, req);
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	0011      	movs	r1, r2
 800593a:	0018      	movs	r0, r3
 800593c:	f001 f98a 	bl	8006c54 <USBD_CtlError>
			ret = USBD_FAIL;
 8005940:	2317      	movs	r3, #23
 8005942:	18fb      	adds	r3, r7, r3
 8005944:	2202      	movs	r2, #2
 8005946:	701a      	strb	r2, [r3, #0]
			break;
 8005948:	46c0      	nop			; (mov r8, r8)
		}
		break;
 800594a:	e00a      	b.n	8005962 <USBD_HID_Setup+0x206>

	default:
		USBD_CtlError(pdev, req);
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	0011      	movs	r1, r2
 8005952:	0018      	movs	r0, r3
 8005954:	f001 f97e 	bl	8006c54 <USBD_CtlError>
		ret = USBD_FAIL;
 8005958:	2317      	movs	r3, #23
 800595a:	18fb      	adds	r3, r7, r3
 800595c:	2202      	movs	r2, #2
 800595e:	701a      	strb	r2, [r3, #0]
		break;
 8005960:	46c0      	nop			; (mov r8, r8)
	}

	return ret;
 8005962:	2317      	movs	r3, #23
 8005964:	18fb      	adds	r3, r7, r3
 8005966:	781b      	ldrb	r3, [r3, #0]
}
 8005968:	0018      	movs	r0, r3
 800596a:	46bd      	mov	sp, r7
 800596c:	b008      	add	sp, #32
 800596e:	bd80      	pop	{r7, pc}
 8005970:	200000c8 	.word	0x200000c8
 8005974:	200000b0 	.word	0x200000b0

08005978 <USBD_HID_SendReport>:
 * @param  pdev: device instance
 * @param  buff: pointer to report
 * @retval status
 */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report,
		uint16_t len) {
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	1dbb      	adds	r3, r7, #6
 8005984:	801a      	strh	r2, [r3, #0]
	USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	23ae      	movs	r3, #174	; 0xae
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	58d3      	ldr	r3, [r2, r3]
 800598e:	617b      	str	r3, [r7, #20]

	if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	23a7      	movs	r3, #167	; 0xa7
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	5cd3      	ldrb	r3, [r2, r3]
 8005998:	2b03      	cmp	r3, #3
 800599a:	d10d      	bne.n	80059b8 <USBD_HID_SendReport+0x40>
		if (hhid->state == HID_IDLE) {
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	7b1b      	ldrb	r3, [r3, #12]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d109      	bne.n	80059b8 <USBD_HID_SendReport+0x40>
			hhid->state = HID_BUSY;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	2201      	movs	r2, #1
 80059a8:	731a      	strb	r2, [r3, #12]
			USBD_LL_Transmit(pdev,
 80059aa:	1dbb      	adds	r3, r7, #6
 80059ac:	881b      	ldrh	r3, [r3, #0]
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	2181      	movs	r1, #129	; 0x81
 80059b4:	f001 fdfb 	bl	80075ae <USBD_LL_Transmit>
			HID_EPIN_ADDR, report, len);
		}
	}
	return USBD_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	0018      	movs	r0, r3
 80059bc:	46bd      	mov	sp, r7
 80059be:	b006      	add	sp, #24
 80059c0:	bd80      	pop	{r7, pc}
	...

080059c4 <USBD_HID_GetFSCfgDesc>:
 *         return FS configuration descriptor
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_HID_GetFSCfgDesc(uint16_t *length) {
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
	*length = sizeof(USBD_HID_CfgFSDesc);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2222      	movs	r2, #34	; 0x22
 80059d0:	801a      	strh	r2, [r3, #0]
	return USBD_HID_CfgFSDesc;
 80059d2:	4b02      	ldr	r3, [pc, #8]	; (80059dc <USBD_HID_GetFSCfgDesc+0x18>)
}
 80059d4:	0018      	movs	r0, r3
 80059d6:	46bd      	mov	sp, r7
 80059d8:	b002      	add	sp, #8
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	20000044 	.word	0x20000044

080059e0 <USBD_HID_GetHSCfgDesc>:
 *         return HS configuration descriptor
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_HID_GetHSCfgDesc(uint16_t *length) {
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
	*length = sizeof(USBD_HID_CfgHSDesc);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2222      	movs	r2, #34	; 0x22
 80059ec:	801a      	strh	r2, [r3, #0]
	return USBD_HID_CfgHSDesc;
 80059ee:	4b02      	ldr	r3, [pc, #8]	; (80059f8 <USBD_HID_GetHSCfgDesc+0x18>)
}
 80059f0:	0018      	movs	r0, r3
 80059f2:	46bd      	mov	sp, r7
 80059f4:	b002      	add	sp, #8
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	20000068 	.word	0x20000068

080059fc <USBD_HID_GetOtherSpeedCfgDesc>:
 *         return other speed configuration descriptor
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length) {
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
	*length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2222      	movs	r2, #34	; 0x22
 8005a08:	801a      	strh	r2, [r3, #0]
	return USBD_HID_OtherSpeedCfgDesc;
 8005a0a:	4b02      	ldr	r3, [pc, #8]	; (8005a14 <USBD_HID_GetOtherSpeedCfgDesc+0x18>)
}
 8005a0c:	0018      	movs	r0, r3
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	b002      	add	sp, #8
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	2000008c 	.word	0x2000008c

08005a18 <USBD_HID_DataIn>:
 *         handle data IN Stage
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum) {
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	000a      	movs	r2, r1
 8005a22:	1cfb      	adds	r3, r7, #3
 8005a24:	701a      	strb	r2, [r3, #0]

	/* Ensure that the FIFO is empty before a new transfer, this condition could
	 be caused by  a new transfer before the end of the previous transfer */
	((USBD_HID_HandleTypeDef*) pdev->pClassData)->state = HID_IDLE;
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	23ae      	movs	r3, #174	; 0xae
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	58d3      	ldr	r3, [r2, r3]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	731a      	strb	r2, [r3, #12]
	return USBD_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	0018      	movs	r0, r3
 8005a36:	46bd      	mov	sp, r7
 8005a38:	b002      	add	sp, #8
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <USBD_HID_GetDeviceQualifierDesc>:
 * @brief  DeviceQualifierDescriptor
 *         return Device Qualifier descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_HID_GetDeviceQualifierDesc(uint16_t *length) {
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
	*length = sizeof(USBD_HID_DeviceQualifierDesc);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	220a      	movs	r2, #10
 8005a48:	801a      	strh	r2, [r3, #0]
	return USBD_HID_DeviceQualifierDesc;
 8005a4a:	4b02      	ldr	r3, [pc, #8]	; (8005a54 <USBD_HID_GetDeviceQualifierDesc+0x18>)
}
 8005a4c:	0018      	movs	r0, r3
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	b002      	add	sp, #8
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	200000bc 	.word	0x200000bc

08005a58 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	1dfb      	adds	r3, r7, #7
 8005a64:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	e020      	b.n	8005ab2 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	23ad      	movs	r3, #173	; 0xad
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	58d3      	ldr	r3, [r2, r3]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d004      	beq.n	8005a86 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	23ad      	movs	r3, #173	; 0xad
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	2100      	movs	r1, #0
 8005a84:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d004      	beq.n	8005a96 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	23ac      	movs	r3, #172	; 0xac
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	68b9      	ldr	r1, [r7, #8]
 8005a94:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	23a7      	movs	r3, #167	; 0xa7
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	2101      	movs	r1, #1
 8005a9e:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	1dfa      	adds	r2, r7, #7
 8005aa4:	7812      	ldrb	r2, [r2, #0]
 8005aa6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	0018      	movs	r0, r3
 8005aac:	f001 fbf6 	bl	800729c <USBD_LL_Init>

  return USBD_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	0018      	movs	r0, r3
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	b004      	add	sp, #16
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b084      	sub	sp, #16
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
 8005ac2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005ac4:	200f      	movs	r0, #15
 8005ac6:	183b      	adds	r3, r7, r0
 8005ac8:	2200      	movs	r2, #0
 8005aca:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d008      	beq.n	8005ae4 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	23ad      	movs	r3, #173	; 0xad
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	6839      	ldr	r1, [r7, #0]
 8005ada:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8005adc:	183b      	adds	r3, r7, r0
 8005ade:	2200      	movs	r2, #0
 8005ae0:	701a      	strb	r2, [r3, #0]
 8005ae2:	e003      	b.n	8005aec <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005ae4:	230f      	movs	r3, #15
 8005ae6:	18fb      	adds	r3, r7, r3
 8005ae8:	2202      	movs	r2, #2
 8005aea:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005aec:	230f      	movs	r3, #15
 8005aee:	18fb      	adds	r3, r7, r3
 8005af0:	781b      	ldrb	r3, [r3, #0]
}
 8005af2:	0018      	movs	r0, r3
 8005af4:	46bd      	mov	sp, r7
 8005af6:	b004      	add	sp, #16
 8005af8:	bd80      	pop	{r7, pc}

08005afa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b082      	sub	sp, #8
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	0018      	movs	r0, r3
 8005b06:	f001 fc19 	bl	800733c <USBD_LL_Start>

  return USBD_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	0018      	movs	r0, r3
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	b002      	add	sp, #8
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	0018      	movs	r0, r3
 8005b20:	46bd      	mov	sp, r7
 8005b22:	b002      	add	sp, #8
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005b26:	b590      	push	{r4, r7, lr}
 8005b28:	b085      	sub	sp, #20
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
 8005b2e:	000a      	movs	r2, r1
 8005b30:	1cfb      	adds	r3, r7, #3
 8005b32:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005b34:	240f      	movs	r4, #15
 8005b36:	193b      	adds	r3, r7, r4
 8005b38:	2202      	movs	r2, #2
 8005b3a:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	23ad      	movs	r3, #173	; 0xad
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	58d3      	ldr	r3, [r2, r3]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00e      	beq.n	8005b66 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	23ad      	movs	r3, #173	; 0xad
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	58d3      	ldr	r3, [r2, r3]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	1cfa      	adds	r2, r7, #3
 8005b54:	7811      	ldrb	r1, [r2, #0]
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	0010      	movs	r0, r2
 8005b5a:	4798      	blx	r3
 8005b5c:	1e03      	subs	r3, r0, #0
 8005b5e:	d102      	bne.n	8005b66 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8005b60:	193b      	adds	r3, r7, r4
 8005b62:	2200      	movs	r2, #0
 8005b64:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8005b66:	230f      	movs	r3, #15
 8005b68:	18fb      	adds	r3, r7, r3
 8005b6a:	781b      	ldrb	r3, [r3, #0]
}
 8005b6c:	0018      	movs	r0, r3
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	b005      	add	sp, #20
 8005b72:	bd90      	pop	{r4, r7, pc}

08005b74 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	000a      	movs	r2, r1
 8005b7e:	1cfb      	adds	r3, r7, #3
 8005b80:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	23ad      	movs	r3, #173	; 0xad
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	58d3      	ldr	r3, [r2, r3]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	1cfa      	adds	r2, r7, #3
 8005b8e:	7811      	ldrb	r1, [r2, #0]
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	0010      	movs	r0, r2
 8005b94:	4798      	blx	r3

  return USBD_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	0018      	movs	r0, r3
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	b002      	add	sp, #8
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	22aa      	movs	r2, #170	; 0xaa
 8005bae:	0092      	lsls	r2, r2, #2
 8005bb0:	4694      	mov	ip, r2
 8005bb2:	4463      	add	r3, ip
 8005bb4:	683a      	ldr	r2, [r7, #0]
 8005bb6:	0011      	movs	r1, r2
 8005bb8:	0018      	movs	r0, r3
 8005bba:	f001 f810 	bl	8006bde <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	23a5      	movs	r3, #165	; 0xa5
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	2101      	movs	r1, #1
 8005bc6:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a23      	ldr	r2, [pc, #140]	; (8005c58 <USBD_LL_SetupStage+0xb8>)
 8005bcc:	5a9b      	ldrh	r3, [r3, r2]
 8005bce:	0019      	movs	r1, r3
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	23a6      	movs	r3, #166	; 0xa6
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	23aa      	movs	r3, #170	; 0xaa
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	5cd3      	ldrb	r3, [r2, r3]
 8005be0:	001a      	movs	r2, r3
 8005be2:	231f      	movs	r3, #31
 8005be4:	4013      	ands	r3, r2
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d019      	beq.n	8005c1e <USBD_LL_SetupStage+0x7e>
 8005bea:	d822      	bhi.n	8005c32 <USBD_LL_SetupStage+0x92>
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d002      	beq.n	8005bf6 <USBD_LL_SetupStage+0x56>
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d00a      	beq.n	8005c0a <USBD_LL_SetupStage+0x6a>
 8005bf4:	e01d      	b.n	8005c32 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	22aa      	movs	r2, #170	; 0xaa
 8005bfa:	0092      	lsls	r2, r2, #2
 8005bfc:	189a      	adds	r2, r3, r2
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	0011      	movs	r1, r2
 8005c02:	0018      	movs	r0, r3
 8005c04:	f000 fa10 	bl	8006028 <USBD_StdDevReq>
      break;
 8005c08:	e020      	b.n	8005c4c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	22aa      	movs	r2, #170	; 0xaa
 8005c0e:	0092      	lsls	r2, r2, #2
 8005c10:	189a      	adds	r2, r3, r2
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	0011      	movs	r1, r2
 8005c16:	0018      	movs	r0, r3
 8005c18:	f000 fa78 	bl	800610c <USBD_StdItfReq>
      break;
 8005c1c:	e016      	b.n	8005c4c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	22aa      	movs	r2, #170	; 0xaa
 8005c22:	0092      	lsls	r2, r2, #2
 8005c24:	189a      	adds	r2, r3, r2
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	0011      	movs	r1, r2
 8005c2a:	0018      	movs	r0, r3
 8005c2c:	f000 fac5 	bl	80061ba <USBD_StdEPReq>
      break;
 8005c30:	e00c      	b.n	8005c4c <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	23aa      	movs	r3, #170	; 0xaa
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	5cd3      	ldrb	r3, [r2, r3]
 8005c3a:	227f      	movs	r2, #127	; 0x7f
 8005c3c:	4393      	bics	r3, r2
 8005c3e:	b2da      	uxtb	r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	0011      	movs	r1, r2
 8005c44:	0018      	movs	r0, r3
 8005c46:	f001 fc00 	bl	800744a <USBD_LL_StallEP>
      break;
 8005c4a:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	0018      	movs	r0, r3
 8005c50:	46bd      	mov	sp, r7
 8005c52:	b002      	add	sp, #8
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	46c0      	nop			; (mov r8, r8)
 8005c58:	000002ae 	.word	0x000002ae

08005c5c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	607a      	str	r2, [r7, #4]
 8005c66:	200b      	movs	r0, #11
 8005c68:	183b      	adds	r3, r7, r0
 8005c6a:	1c0a      	adds	r2, r1, #0
 8005c6c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005c6e:	183b      	adds	r3, r7, r0
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d154      	bne.n	8005d20 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	3355      	adds	r3, #85	; 0x55
 8005c7a:	33ff      	adds	r3, #255	; 0xff
 8005c7c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	23a5      	movs	r3, #165	; 0xa5
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	58d3      	ldr	r3, [r2, r3]
 8005c86:	2b03      	cmp	r3, #3
 8005c88:	d139      	bne.n	8005cfe <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	68da      	ldr	r2, [r3, #12]
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d919      	bls.n	8005cca <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	68da      	ldr	r2, [r3, #12]
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	1ad2      	subs	r2, r2, r3
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	68da      	ldr	r2, [r3, #12]
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d203      	bcs.n	8005cb8 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	e002      	b.n	8005cbe <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	6879      	ldr	r1, [r7, #4]
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	001a      	movs	r2, r3
 8005cc4:	f001 f877 	bl	8006db6 <USBD_CtlContinueRx>
 8005cc8:	e045      	b.n	8005d56 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	23ad      	movs	r3, #173	; 0xad
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	58d3      	ldr	r3, [r2, r3]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00d      	beq.n	8005cf4 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	23a7      	movs	r3, #167	; 0xa7
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005ce0:	2b03      	cmp	r3, #3
 8005ce2:	d107      	bne.n	8005cf4 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	23ad      	movs	r3, #173	; 0xad
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	58d3      	ldr	r3, [r2, r3]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	0010      	movs	r0, r2
 8005cf2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	0018      	movs	r0, r3
 8005cf8:	f001 f870 	bl	8006ddc <USBD_CtlSendStatus>
 8005cfc:	e02b      	b.n	8005d56 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	23a5      	movs	r3, #165	; 0xa5
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	58d3      	ldr	r3, [r2, r3]
 8005d06:	2b05      	cmp	r3, #5
 8005d08:	d125      	bne.n	8005d56 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	23a5      	movs	r3, #165	; 0xa5
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	2100      	movs	r1, #0
 8005d12:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2100      	movs	r1, #0
 8005d18:	0018      	movs	r0, r3
 8005d1a:	f001 fb96 	bl	800744a <USBD_LL_StallEP>
 8005d1e:	e01a      	b.n	8005d56 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	23ad      	movs	r3, #173	; 0xad
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	58d3      	ldr	r3, [r2, r3]
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d011      	beq.n	8005d52 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	23a7      	movs	r3, #167	; 0xa7
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8005d36:	2b03      	cmp	r3, #3
 8005d38:	d10b      	bne.n	8005d52 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	23ad      	movs	r3, #173	; 0xad
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	58d3      	ldr	r3, [r2, r3]
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	220b      	movs	r2, #11
 8005d46:	18ba      	adds	r2, r7, r2
 8005d48:	7811      	ldrb	r1, [r2, #0]
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	0010      	movs	r0, r2
 8005d4e:	4798      	blx	r3
 8005d50:	e001      	b.n	8005d56 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005d52:	2302      	movs	r3, #2
 8005d54:	e000      	b.n	8005d58 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	0018      	movs	r0, r3
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	b006      	add	sp, #24
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	607a      	str	r2, [r7, #4]
 8005d6a:	200b      	movs	r0, #11
 8005d6c:	183b      	adds	r3, r7, r0
 8005d6e:	1c0a      	adds	r2, r1, #0
 8005d70:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005d72:	183b      	adds	r3, r7, r0
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d000      	beq.n	8005d7c <USBD_LL_DataInStage+0x1c>
 8005d7a:	e08e      	b.n	8005e9a <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	3314      	adds	r3, #20
 8005d80:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	23a5      	movs	r3, #165	; 0xa5
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	58d3      	ldr	r3, [r2, r3]
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d164      	bne.n	8005e58 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	68da      	ldr	r2, [r3, #12]
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d915      	bls.n	8005dc6 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	68da      	ldr	r2, [r3, #12]
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	1ad2      	subs	r2, r2, r3
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	6879      	ldr	r1, [r7, #4]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	0018      	movs	r0, r3
 8005db4:	f000 ffec 	bl	8006d90 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	2300      	movs	r3, #0
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	2100      	movs	r1, #0
 8005dc0:	f001 fc2c 	bl	800761c <USBD_LL_PrepareReceive>
 8005dc4:	e059      	b.n	8005e7a <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	689a      	ldr	r2, [r3, #8]
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	0019      	movs	r1, r3
 8005dd0:	0010      	movs	r0, r2
 8005dd2:	f7fa fa1f 	bl	8000214 <__aeabi_uidivmod>
 8005dd6:	1e0b      	subs	r3, r1, #0
 8005dd8:	d11f      	bne.n	8005e1a <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	689a      	ldr	r2, [r3, #8]
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d319      	bcc.n	8005e1a <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	689a      	ldr	r2, [r3, #8]
 8005dea:	68f9      	ldr	r1, [r7, #12]
 8005dec:	23a6      	movs	r3, #166	; 0xa6
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d211      	bcs.n	8005e1a <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	0018      	movs	r0, r3
 8005dfe:	f000 ffc7 	bl	8006d90 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	23a6      	movs	r3, #166	; 0xa6
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	2100      	movs	r1, #0
 8005e0a:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	2300      	movs	r3, #0
 8005e10:	2200      	movs	r2, #0
 8005e12:	2100      	movs	r1, #0
 8005e14:	f001 fc02 	bl	800761c <USBD_LL_PrepareReceive>
 8005e18:	e02f      	b.n	8005e7a <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	23ad      	movs	r3, #173	; 0xad
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	58d3      	ldr	r3, [r2, r3]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00d      	beq.n	8005e44 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	23a7      	movs	r3, #167	; 0xa7
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005e30:	2b03      	cmp	r3, #3
 8005e32:	d107      	bne.n	8005e44 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	23ad      	movs	r3, #173	; 0xad
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	58d3      	ldr	r3, [r2, r3]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	0010      	movs	r0, r2
 8005e42:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2180      	movs	r1, #128	; 0x80
 8005e48:	0018      	movs	r0, r3
 8005e4a:	f001 fafe 	bl	800744a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	0018      	movs	r0, r3
 8005e52:	f000 ffd7 	bl	8006e04 <USBD_CtlReceiveStatus>
 8005e56:	e010      	b.n	8005e7a <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	23a5      	movs	r3, #165	; 0xa5
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	58d3      	ldr	r3, [r2, r3]
 8005e60:	2b04      	cmp	r3, #4
 8005e62:	d005      	beq.n	8005e70 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	23a5      	movs	r3, #165	; 0xa5
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d104      	bne.n	8005e7a <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2180      	movs	r1, #128	; 0x80
 8005e74:	0018      	movs	r0, r3
 8005e76:	f001 fae8 	bl	800744a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	23a8      	movs	r3, #168	; 0xa8
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	5cd3      	ldrb	r3, [r2, r3]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d124      	bne.n	8005ed0 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	0018      	movs	r0, r3
 8005e8a:	f7ff fe43 	bl	8005b14 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	23a8      	movs	r3, #168	; 0xa8
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	2100      	movs	r1, #0
 8005e96:	54d1      	strb	r1, [r2, r3]
 8005e98:	e01a      	b.n	8005ed0 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	23ad      	movs	r3, #173	; 0xad
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	58d3      	ldr	r3, [r2, r3]
 8005ea2:	695b      	ldr	r3, [r3, #20]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d011      	beq.n	8005ecc <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	23a7      	movs	r3, #167	; 0xa7
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8005eb0:	2b03      	cmp	r3, #3
 8005eb2:	d10b      	bne.n	8005ecc <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	23ad      	movs	r3, #173	; 0xad
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	58d3      	ldr	r3, [r2, r3]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	220b      	movs	r2, #11
 8005ec0:	18ba      	adds	r2, r7, r2
 8005ec2:	7811      	ldrb	r1, [r2, #0]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	0010      	movs	r0, r2
 8005ec8:	4798      	blx	r3
 8005eca:	e001      	b.n	8005ed0 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005ecc:	2302      	movs	r3, #2
 8005ece:	e000      	b.n	8005ed2 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	0018      	movs	r0, r3
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	b006      	add	sp, #24
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b082      	sub	sp, #8
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	2340      	movs	r3, #64	; 0x40
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	2100      	movs	r1, #0
 8005eea:	f001 fa4c 	bl	8007386 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	23ac      	movs	r3, #172	; 0xac
 8005ef2:	005b      	lsls	r3, r3, #1
 8005ef4:	2101      	movs	r1, #1
 8005ef6:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	23b2      	movs	r3, #178	; 0xb2
 8005efc:	005b      	lsls	r3, r3, #1
 8005efe:	2140      	movs	r1, #64	; 0x40
 8005f00:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	2340      	movs	r3, #64	; 0x40
 8005f06:	2200      	movs	r2, #0
 8005f08:	2180      	movs	r1, #128	; 0x80
 8005f0a:	f001 fa3c 	bl	8007386 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2240      	movs	r2, #64	; 0x40
 8005f18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	23a7      	movs	r3, #167	; 0xa7
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	2101      	movs	r1, #1
 8005f22:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	23a5      	movs	r3, #165	; 0xa5
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	23a9      	movs	r3, #169	; 0xa9
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	23ae      	movs	r3, #174	; 0xae
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	58d3      	ldr	r3, [r2, r3]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00a      	beq.n	8005f60 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	23ad      	movs	r3, #173	; 0xad
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	58d3      	ldr	r3, [r2, r3]
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	b2d9      	uxtb	r1, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	0018      	movs	r0, r3
 8005f5e:	4790      	blx	r2
  }

  return USBD_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	0018      	movs	r0, r3
 8005f64:	46bd      	mov	sp, r7
 8005f66:	b002      	add	sp, #8
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b082      	sub	sp, #8
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
 8005f72:	000a      	movs	r2, r1
 8005f74:	1cfb      	adds	r3, r7, #3
 8005f76:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	1cfa      	adds	r2, r7, #3
 8005f7c:	7812      	ldrb	r2, [r2, #0]
 8005f7e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	0018      	movs	r0, r3
 8005f84:	46bd      	mov	sp, r7
 8005f86:	b002      	add	sp, #8
 8005f88:	bd80      	pop	{r7, pc}
	...

08005f8c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	23a7      	movs	r3, #167	; 0xa7
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	5cd1      	ldrb	r1, [r2, r3]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a06      	ldr	r2, [pc, #24]	; (8005fb8 <USBD_LL_Suspend+0x2c>)
 8005fa0:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	23a7      	movs	r3, #167	; 0xa7
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	2104      	movs	r1, #4
 8005faa:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	0018      	movs	r0, r3
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	b002      	add	sp, #8
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	46c0      	nop			; (mov r8, r8)
 8005fb8:	0000029d 	.word	0x0000029d

08005fbc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	23a7      	movs	r3, #167	; 0xa7
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	5cd3      	ldrb	r3, [r2, r3]
 8005fcc:	2b04      	cmp	r3, #4
 8005fce:	d106      	bne.n	8005fde <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a05      	ldr	r2, [pc, #20]	; (8005fe8 <USBD_LL_Resume+0x2c>)
 8005fd4:	5c99      	ldrb	r1, [r3, r2]
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	23a7      	movs	r3, #167	; 0xa7
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	0018      	movs	r0, r3
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	b002      	add	sp, #8
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	0000029d 	.word	0x0000029d

08005fec <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	23a7      	movs	r3, #167	; 0xa7
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	5cd3      	ldrb	r3, [r2, r3]
 8005ffc:	2b03      	cmp	r3, #3
 8005ffe:	d10e      	bne.n	800601e <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	23ad      	movs	r3, #173	; 0xad
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	58d3      	ldr	r3, [r2, r3]
 8006008:	69db      	ldr	r3, [r3, #28]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d007      	beq.n	800601e <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	23ad      	movs	r3, #173	; 0xad
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	58d3      	ldr	r3, [r2, r3]
 8006016:	69db      	ldr	r3, [r3, #28]
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	0010      	movs	r0, r2
 800601c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	0018      	movs	r0, r3
 8006022:	46bd      	mov	sp, r7
 8006024:	b002      	add	sp, #8
 8006026:	bd80      	pop	{r7, pc}

08006028 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006032:	230f      	movs	r3, #15
 8006034:	18fb      	adds	r3, r7, r3
 8006036:	2200      	movs	r2, #0
 8006038:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	001a      	movs	r2, r3
 8006040:	2360      	movs	r3, #96	; 0x60
 8006042:	4013      	ands	r3, r2
 8006044:	2b40      	cmp	r3, #64	; 0x40
 8006046:	d004      	beq.n	8006052 <USBD_StdDevReq+0x2a>
 8006048:	d84f      	bhi.n	80060ea <USBD_StdDevReq+0xc2>
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00b      	beq.n	8006066 <USBD_StdDevReq+0x3e>
 800604e:	2b20      	cmp	r3, #32
 8006050:	d14b      	bne.n	80060ea <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	23ad      	movs	r3, #173	; 0xad
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	58d3      	ldr	r3, [r2, r3]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	6839      	ldr	r1, [r7, #0]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	0010      	movs	r0, r2
 8006062:	4798      	blx	r3
      break;
 8006064:	e048      	b.n	80060f8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	785b      	ldrb	r3, [r3, #1]
 800606a:	2b09      	cmp	r3, #9
 800606c:	d835      	bhi.n	80060da <USBD_StdDevReq+0xb2>
 800606e:	009a      	lsls	r2, r3, #2
 8006070:	4b25      	ldr	r3, [pc, #148]	; (8006108 <USBD_StdDevReq+0xe0>)
 8006072:	18d3      	adds	r3, r2, r3
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006078:	683a      	ldr	r2, [r7, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	0011      	movs	r1, r2
 800607e:	0018      	movs	r0, r3
 8006080:	f000 fa52 	bl	8006528 <USBD_GetDescriptor>
          break;
 8006084:	e030      	b.n	80060e8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	0011      	movs	r1, r2
 800608c:	0018      	movs	r0, r3
 800608e:	f000 fbfd 	bl	800688c <USBD_SetAddress>
          break;
 8006092:	e029      	b.n	80060e8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	0011      	movs	r1, r2
 800609a:	0018      	movs	r0, r3
 800609c:	f000 fc4a 	bl	8006934 <USBD_SetConfig>
          break;
 80060a0:	e022      	b.n	80060e8 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	0011      	movs	r1, r2
 80060a8:	0018      	movs	r0, r3
 80060aa:	f000 fce7 	bl	8006a7c <USBD_GetConfig>
          break;
 80060ae:	e01b      	b.n	80060e8 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80060b0:	683a      	ldr	r2, [r7, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	0011      	movs	r1, r2
 80060b6:	0018      	movs	r0, r3
 80060b8:	f000 fd1b 	bl	8006af2 <USBD_GetStatus>
          break;
 80060bc:	e014      	b.n	80060e8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	0011      	movs	r1, r2
 80060c4:	0018      	movs	r0, r3
 80060c6:	f000 fd4e 	bl	8006b66 <USBD_SetFeature>
          break;
 80060ca:	e00d      	b.n	80060e8 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	0011      	movs	r1, r2
 80060d2:	0018      	movs	r0, r3
 80060d4:	f000 fd5d 	bl	8006b92 <USBD_ClrFeature>
          break;
 80060d8:	e006      	b.n	80060e8 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80060da:	683a      	ldr	r2, [r7, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	0011      	movs	r1, r2
 80060e0:	0018      	movs	r0, r3
 80060e2:	f000 fdb7 	bl	8006c54 <USBD_CtlError>
          break;
 80060e6:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80060e8:	e006      	b.n	80060f8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	0011      	movs	r1, r2
 80060f0:	0018      	movs	r0, r3
 80060f2:	f000 fdaf 	bl	8006c54 <USBD_CtlError>
      break;
 80060f6:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80060f8:	230f      	movs	r3, #15
 80060fa:	18fb      	adds	r3, r7, r3
 80060fc:	781b      	ldrb	r3, [r3, #0]
}
 80060fe:	0018      	movs	r0, r3
 8006100:	46bd      	mov	sp, r7
 8006102:	b004      	add	sp, #16
 8006104:	bd80      	pop	{r7, pc}
 8006106:	46c0      	nop			; (mov r8, r8)
 8006108:	08007800 	.word	0x08007800

0800610c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800610c:	b5b0      	push	{r4, r5, r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006116:	230f      	movs	r3, #15
 8006118:	18fb      	adds	r3, r7, r3
 800611a:	2200      	movs	r2, #0
 800611c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	001a      	movs	r2, r3
 8006124:	2360      	movs	r3, #96	; 0x60
 8006126:	4013      	ands	r3, r2
 8006128:	2b40      	cmp	r3, #64	; 0x40
 800612a:	d004      	beq.n	8006136 <USBD_StdItfReq+0x2a>
 800612c:	d839      	bhi.n	80061a2 <USBD_StdItfReq+0x96>
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <USBD_StdItfReq+0x2a>
 8006132:	2b20      	cmp	r3, #32
 8006134:	d135      	bne.n	80061a2 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	23a7      	movs	r3, #167	; 0xa7
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	5cd3      	ldrb	r3, [r2, r3]
 800613e:	3b01      	subs	r3, #1
 8006140:	2b02      	cmp	r3, #2
 8006142:	d825      	bhi.n	8006190 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	889b      	ldrh	r3, [r3, #4]
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b01      	cmp	r3, #1
 800614c:	d819      	bhi.n	8006182 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	23ad      	movs	r3, #173	; 0xad
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	58d3      	ldr	r3, [r2, r3]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	250f      	movs	r5, #15
 800615a:	197c      	adds	r4, r7, r5
 800615c:	6839      	ldr	r1, [r7, #0]
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	0010      	movs	r0, r2
 8006162:	4798      	blx	r3
 8006164:	0003      	movs	r3, r0
 8006166:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	88db      	ldrh	r3, [r3, #6]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d116      	bne.n	800619e <USBD_StdItfReq+0x92>
 8006170:	197b      	adds	r3, r7, r5
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d112      	bne.n	800619e <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	0018      	movs	r0, r3
 800617c:	f000 fe2e 	bl	8006ddc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006180:	e00d      	b.n	800619e <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	0011      	movs	r1, r2
 8006188:	0018      	movs	r0, r3
 800618a:	f000 fd63 	bl	8006c54 <USBD_CtlError>
          break;
 800618e:	e006      	b.n	800619e <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8006190:	683a      	ldr	r2, [r7, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	0011      	movs	r1, r2
 8006196:	0018      	movs	r0, r3
 8006198:	f000 fd5c 	bl	8006c54 <USBD_CtlError>
          break;
 800619c:	e000      	b.n	80061a0 <USBD_StdItfReq+0x94>
          break;
 800619e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80061a0:	e006      	b.n	80061b0 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	0011      	movs	r1, r2
 80061a8:	0018      	movs	r0, r3
 80061aa:	f000 fd53 	bl	8006c54 <USBD_CtlError>
      break;
 80061ae:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	0018      	movs	r0, r3
 80061b4:	46bd      	mov	sp, r7
 80061b6:	b004      	add	sp, #16
 80061b8:	bdb0      	pop	{r4, r5, r7, pc}

080061ba <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80061ba:	b5b0      	push	{r4, r5, r7, lr}
 80061bc:	b084      	sub	sp, #16
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80061c4:	230f      	movs	r3, #15
 80061c6:	18fb      	adds	r3, r7, r3
 80061c8:	2200      	movs	r2, #0
 80061ca:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	889a      	ldrh	r2, [r3, #4]
 80061d0:	230e      	movs	r3, #14
 80061d2:	18fb      	adds	r3, r7, r3
 80061d4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	001a      	movs	r2, r3
 80061dc:	2360      	movs	r3, #96	; 0x60
 80061de:	4013      	ands	r3, r2
 80061e0:	2b40      	cmp	r3, #64	; 0x40
 80061e2:	d006      	beq.n	80061f2 <USBD_StdEPReq+0x38>
 80061e4:	d900      	bls.n	80061e8 <USBD_StdEPReq+0x2e>
 80061e6:	e190      	b.n	800650a <USBD_StdEPReq+0x350>
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00c      	beq.n	8006206 <USBD_StdEPReq+0x4c>
 80061ec:	2b20      	cmp	r3, #32
 80061ee:	d000      	beq.n	80061f2 <USBD_StdEPReq+0x38>
 80061f0:	e18b      	b.n	800650a <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	23ad      	movs	r3, #173	; 0xad
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	58d3      	ldr	r3, [r2, r3]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	6839      	ldr	r1, [r7, #0]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	0010      	movs	r0, r2
 8006202:	4798      	blx	r3
      break;
 8006204:	e188      	b.n	8006518 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	001a      	movs	r2, r3
 800620c:	2360      	movs	r3, #96	; 0x60
 800620e:	4013      	ands	r3, r2
 8006210:	2b20      	cmp	r3, #32
 8006212:	d10f      	bne.n	8006234 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	23ad      	movs	r3, #173	; 0xad
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	58d3      	ldr	r3, [r2, r3]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	250f      	movs	r5, #15
 8006220:	197c      	adds	r4, r7, r5
 8006222:	6839      	ldr	r1, [r7, #0]
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	0010      	movs	r0, r2
 8006228:	4798      	blx	r3
 800622a:	0003      	movs	r3, r0
 800622c:	7023      	strb	r3, [r4, #0]

        return ret;
 800622e:	197b      	adds	r3, r7, r5
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	e174      	b.n	800651e <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	785b      	ldrb	r3, [r3, #1]
 8006238:	2b03      	cmp	r3, #3
 800623a:	d007      	beq.n	800624c <USBD_StdEPReq+0x92>
 800623c:	dd00      	ble.n	8006240 <USBD_StdEPReq+0x86>
 800623e:	e15c      	b.n	80064fa <USBD_StdEPReq+0x340>
 8006240:	2b00      	cmp	r3, #0
 8006242:	d100      	bne.n	8006246 <USBD_StdEPReq+0x8c>
 8006244:	e092      	b.n	800636c <USBD_StdEPReq+0x1b2>
 8006246:	2b01      	cmp	r3, #1
 8006248:	d04b      	beq.n	80062e2 <USBD_StdEPReq+0x128>
 800624a:	e156      	b.n	80064fa <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	23a7      	movs	r3, #167	; 0xa7
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	5cd3      	ldrb	r3, [r2, r3]
 8006254:	2b02      	cmp	r3, #2
 8006256:	d002      	beq.n	800625e <USBD_StdEPReq+0xa4>
 8006258:	2b03      	cmp	r3, #3
 800625a:	d01d      	beq.n	8006298 <USBD_StdEPReq+0xde>
 800625c:	e039      	b.n	80062d2 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800625e:	220e      	movs	r2, #14
 8006260:	18bb      	adds	r3, r7, r2
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d010      	beq.n	800628a <USBD_StdEPReq+0xd0>
 8006268:	18bb      	adds	r3, r7, r2
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	2b80      	cmp	r3, #128	; 0x80
 800626e:	d00c      	beq.n	800628a <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006270:	18bb      	adds	r3, r7, r2
 8006272:	781a      	ldrb	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	0011      	movs	r1, r2
 8006278:	0018      	movs	r0, r3
 800627a:	f001 f8e6 	bl	800744a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2180      	movs	r1, #128	; 0x80
 8006282:	0018      	movs	r0, r3
 8006284:	f001 f8e1 	bl	800744a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006288:	e02a      	b.n	80062e0 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800628a:	683a      	ldr	r2, [r7, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	0011      	movs	r1, r2
 8006290:	0018      	movs	r0, r3
 8006292:	f000 fcdf 	bl	8006c54 <USBD_CtlError>
              break;
 8006296:	e023      	b.n	80062e0 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	885b      	ldrh	r3, [r3, #2]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d113      	bne.n	80062c8 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 80062a0:	220e      	movs	r2, #14
 80062a2:	18bb      	adds	r3, r7, r2
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00e      	beq.n	80062c8 <USBD_StdEPReq+0x10e>
 80062aa:	18bb      	adds	r3, r7, r2
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	2b80      	cmp	r3, #128	; 0x80
 80062b0:	d00a      	beq.n	80062c8 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	88db      	ldrh	r3, [r3, #6]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d106      	bne.n	80062c8 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80062ba:	18bb      	adds	r3, r7, r2
 80062bc:	781a      	ldrb	r2, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	0011      	movs	r1, r2
 80062c2:	0018      	movs	r0, r3
 80062c4:	f001 f8c1 	bl	800744a <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	0018      	movs	r0, r3
 80062cc:	f000 fd86 	bl	8006ddc <USBD_CtlSendStatus>

              break;
 80062d0:	e006      	b.n	80062e0 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	0011      	movs	r1, r2
 80062d8:	0018      	movs	r0, r3
 80062da:	f000 fcbb 	bl	8006c54 <USBD_CtlError>
              break;
 80062de:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80062e0:	e112      	b.n	8006508 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	23a7      	movs	r3, #167	; 0xa7
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	5cd3      	ldrb	r3, [r2, r3]
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d002      	beq.n	80062f4 <USBD_StdEPReq+0x13a>
 80062ee:	2b03      	cmp	r3, #3
 80062f0:	d01d      	beq.n	800632e <USBD_StdEPReq+0x174>
 80062f2:	e032      	b.n	800635a <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062f4:	220e      	movs	r2, #14
 80062f6:	18bb      	adds	r3, r7, r2
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d010      	beq.n	8006320 <USBD_StdEPReq+0x166>
 80062fe:	18bb      	adds	r3, r7, r2
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	2b80      	cmp	r3, #128	; 0x80
 8006304:	d00c      	beq.n	8006320 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006306:	18bb      	adds	r3, r7, r2
 8006308:	781a      	ldrb	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	0011      	movs	r1, r2
 800630e:	0018      	movs	r0, r3
 8006310:	f001 f89b 	bl	800744a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2180      	movs	r1, #128	; 0x80
 8006318:	0018      	movs	r0, r3
 800631a:	f001 f896 	bl	800744a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800631e:	e024      	b.n	800636a <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8006320:	683a      	ldr	r2, [r7, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	0011      	movs	r1, r2
 8006326:	0018      	movs	r0, r3
 8006328:	f000 fc94 	bl	8006c54 <USBD_CtlError>
              break;
 800632c:	e01d      	b.n	800636a <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	885b      	ldrh	r3, [r3, #2]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d118      	bne.n	8006368 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006336:	210e      	movs	r1, #14
 8006338:	187b      	adds	r3, r7, r1
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	227f      	movs	r2, #127	; 0x7f
 800633e:	4013      	ands	r3, r2
 8006340:	d006      	beq.n	8006350 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006342:	187b      	adds	r3, r7, r1
 8006344:	781a      	ldrb	r2, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	0011      	movs	r1, r2
 800634a:	0018      	movs	r0, r3
 800634c:	f001 f8a8 	bl	80074a0 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	0018      	movs	r0, r3
 8006354:	f000 fd42 	bl	8006ddc <USBD_CtlSendStatus>
              }
              break;
 8006358:	e006      	b.n	8006368 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800635a:	683a      	ldr	r2, [r7, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	0011      	movs	r1, r2
 8006360:	0018      	movs	r0, r3
 8006362:	f000 fc77 	bl	8006c54 <USBD_CtlError>
              break;
 8006366:	e000      	b.n	800636a <USBD_StdEPReq+0x1b0>
              break;
 8006368:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800636a:	e0cd      	b.n	8006508 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	23a7      	movs	r3, #167	; 0xa7
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	5cd3      	ldrb	r3, [r2, r3]
 8006374:	2b02      	cmp	r3, #2
 8006376:	d002      	beq.n	800637e <USBD_StdEPReq+0x1c4>
 8006378:	2b03      	cmp	r3, #3
 800637a:	d03c      	beq.n	80063f6 <USBD_StdEPReq+0x23c>
 800637c:	e0b5      	b.n	80064ea <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800637e:	220e      	movs	r2, #14
 8006380:	18bb      	adds	r3, r7, r2
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00a      	beq.n	800639e <USBD_StdEPReq+0x1e4>
 8006388:	18bb      	adds	r3, r7, r2
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	2b80      	cmp	r3, #128	; 0x80
 800638e:	d006      	beq.n	800639e <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8006390:	683a      	ldr	r2, [r7, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	0011      	movs	r1, r2
 8006396:	0018      	movs	r0, r3
 8006398:	f000 fc5c 	bl	8006c54 <USBD_CtlError>
                break;
 800639c:	e0ac      	b.n	80064f8 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800639e:	220e      	movs	r2, #14
 80063a0:	18bb      	adds	r3, r7, r2
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	b25b      	sxtb	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	da0c      	bge.n	80063c4 <USBD_StdEPReq+0x20a>
 80063aa:	18bb      	adds	r3, r7, r2
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	227f      	movs	r2, #127	; 0x7f
 80063b0:	401a      	ands	r2, r3
 80063b2:	0013      	movs	r3, r2
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	189b      	adds	r3, r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	3310      	adds	r3, #16
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	18d3      	adds	r3, r2, r3
 80063c0:	3304      	adds	r3, #4
 80063c2:	e00d      	b.n	80063e0 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80063c4:	230e      	movs	r3, #14
 80063c6:	18fb      	adds	r3, r7, r3
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	227f      	movs	r2, #127	; 0x7f
 80063cc:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063ce:	0013      	movs	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	189b      	adds	r3, r3, r2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	3351      	adds	r3, #81	; 0x51
 80063d8:	33ff      	adds	r3, #255	; 0xff
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	18d3      	adds	r3, r2, r3
 80063de:	3304      	adds	r3, #4
 80063e0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	2200      	movs	r2, #0
 80063e6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80063e8:	68b9      	ldr	r1, [r7, #8]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2202      	movs	r2, #2
 80063ee:	0018      	movs	r0, r3
 80063f0:	f000 fcae 	bl	8006d50 <USBD_CtlSendData>
              break;
 80063f4:	e080      	b.n	80064f8 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80063f6:	220e      	movs	r2, #14
 80063f8:	18bb      	adds	r3, r7, r2
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	b25b      	sxtb	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	da14      	bge.n	800642c <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006402:	18bb      	adds	r3, r7, r2
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	220f      	movs	r2, #15
 8006408:	401a      	ands	r2, r3
 800640a:	6879      	ldr	r1, [r7, #4]
 800640c:	0013      	movs	r3, r2
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	189b      	adds	r3, r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	18cb      	adds	r3, r1, r3
 8006416:	3318      	adds	r3, #24
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d11e      	bne.n	800645c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800641e:	683a      	ldr	r2, [r7, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	0011      	movs	r1, r2
 8006424:	0018      	movs	r0, r3
 8006426:	f000 fc15 	bl	8006c54 <USBD_CtlError>
                  break;
 800642a:	e065      	b.n	80064f8 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800642c:	230e      	movs	r3, #14
 800642e:	18fb      	adds	r3, r7, r3
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	220f      	movs	r2, #15
 8006434:	401a      	ands	r2, r3
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	23ac      	movs	r3, #172	; 0xac
 800643a:	0059      	lsls	r1, r3, #1
 800643c:	0013      	movs	r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	189b      	adds	r3, r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	18c3      	adds	r3, r0, r3
 8006446:	185b      	adds	r3, r3, r1
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d106      	bne.n	800645c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800644e:	683a      	ldr	r2, [r7, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	0011      	movs	r1, r2
 8006454:	0018      	movs	r0, r3
 8006456:	f000 fbfd 	bl	8006c54 <USBD_CtlError>
                  break;
 800645a:	e04d      	b.n	80064f8 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800645c:	220e      	movs	r2, #14
 800645e:	18bb      	adds	r3, r7, r2
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	b25b      	sxtb	r3, r3
 8006464:	2b00      	cmp	r3, #0
 8006466:	da0c      	bge.n	8006482 <USBD_StdEPReq+0x2c8>
 8006468:	18bb      	adds	r3, r7, r2
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	227f      	movs	r2, #127	; 0x7f
 800646e:	401a      	ands	r2, r3
 8006470:	0013      	movs	r3, r2
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	189b      	adds	r3, r3, r2
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	3310      	adds	r3, #16
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	18d3      	adds	r3, r2, r3
 800647e:	3304      	adds	r3, #4
 8006480:	e00d      	b.n	800649e <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006482:	230e      	movs	r3, #14
 8006484:	18fb      	adds	r3, r7, r3
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	227f      	movs	r2, #127	; 0x7f
 800648a:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800648c:	0013      	movs	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	189b      	adds	r3, r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	3351      	adds	r3, #81	; 0x51
 8006496:	33ff      	adds	r3, #255	; 0xff
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	18d3      	adds	r3, r2, r3
 800649c:	3304      	adds	r3, #4
 800649e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80064a0:	220e      	movs	r2, #14
 80064a2:	18bb      	adds	r3, r7, r2
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d003      	beq.n	80064b2 <USBD_StdEPReq+0x2f8>
 80064aa:	18bb      	adds	r3, r7, r2
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	2b80      	cmp	r3, #128	; 0x80
 80064b0:	d103      	bne.n	80064ba <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	2200      	movs	r2, #0
 80064b6:	601a      	str	r2, [r3, #0]
 80064b8:	e010      	b.n	80064dc <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80064ba:	230e      	movs	r3, #14
 80064bc:	18fb      	adds	r3, r7, r3
 80064be:	781a      	ldrb	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	0011      	movs	r1, r2
 80064c4:	0018      	movs	r0, r3
 80064c6:	f001 f816 	bl	80074f6 <USBD_LL_IsStallEP>
 80064ca:	1e03      	subs	r3, r0, #0
 80064cc:	d003      	beq.n	80064d6 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	2201      	movs	r2, #1
 80064d2:	601a      	str	r2, [r3, #0]
 80064d4:	e002      	b.n	80064dc <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	2200      	movs	r2, #0
 80064da:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80064dc:	68b9      	ldr	r1, [r7, #8]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2202      	movs	r2, #2
 80064e2:	0018      	movs	r0, r3
 80064e4:	f000 fc34 	bl	8006d50 <USBD_CtlSendData>
              break;
 80064e8:	e006      	b.n	80064f8 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 80064ea:	683a      	ldr	r2, [r7, #0]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	0011      	movs	r1, r2
 80064f0:	0018      	movs	r0, r3
 80064f2:	f000 fbaf 	bl	8006c54 <USBD_CtlError>
              break;
 80064f6:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80064f8:	e006      	b.n	8006508 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 80064fa:	683a      	ldr	r2, [r7, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	0011      	movs	r1, r2
 8006500:	0018      	movs	r0, r3
 8006502:	f000 fba7 	bl	8006c54 <USBD_CtlError>
          break;
 8006506:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006508:	e006      	b.n	8006518 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	0011      	movs	r1, r2
 8006510:	0018      	movs	r0, r3
 8006512:	f000 fb9f 	bl	8006c54 <USBD_CtlError>
      break;
 8006516:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8006518:	230f      	movs	r3, #15
 800651a:	18fb      	adds	r3, r7, r3
 800651c:	781b      	ldrb	r3, [r3, #0]
}
 800651e:	0018      	movs	r0, r3
 8006520:	46bd      	mov	sp, r7
 8006522:	b004      	add	sp, #16
 8006524:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006528 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006532:	2308      	movs	r3, #8
 8006534:	18fb      	adds	r3, r7, r3
 8006536:	2200      	movs	r2, #0
 8006538:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800653a:	2300      	movs	r3, #0
 800653c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800653e:	230b      	movs	r3, #11
 8006540:	18fb      	adds	r3, r7, r3
 8006542:	2200      	movs	r2, #0
 8006544:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	885b      	ldrh	r3, [r3, #2]
 800654a:	0a1b      	lsrs	r3, r3, #8
 800654c:	b29b      	uxth	r3, r3
 800654e:	2b07      	cmp	r3, #7
 8006550:	d900      	bls.n	8006554 <USBD_GetDescriptor+0x2c>
 8006552:	e159      	b.n	8006808 <USBD_GetDescriptor+0x2e0>
 8006554:	009a      	lsls	r2, r3, #2
 8006556:	4bcb      	ldr	r3, [pc, #812]	; (8006884 <USBD_GetDescriptor+0x35c>)
 8006558:	18d3      	adds	r3, r2, r3
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	23ac      	movs	r3, #172	; 0xac
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	58d3      	ldr	r3, [r2, r3]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	7c12      	ldrb	r2, [r2, #16]
 800656c:	2108      	movs	r1, #8
 800656e:	1879      	adds	r1, r7, r1
 8006570:	0010      	movs	r0, r2
 8006572:	4798      	blx	r3
 8006574:	0003      	movs	r3, r0
 8006576:	60fb      	str	r3, [r7, #12]
      break;
 8006578:	e153      	b.n	8006822 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	7c1b      	ldrb	r3, [r3, #16]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10f      	bne.n	80065a2 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	23ad      	movs	r3, #173	; 0xad
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	58d3      	ldr	r3, [r2, r3]
 800658a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658c:	2208      	movs	r2, #8
 800658e:	18ba      	adds	r2, r7, r2
 8006590:	0010      	movs	r0, r2
 8006592:	4798      	blx	r3
 8006594:	0003      	movs	r3, r0
 8006596:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	3301      	adds	r3, #1
 800659c:	2202      	movs	r2, #2
 800659e:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80065a0:	e13f      	b.n	8006822 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	23ad      	movs	r3, #173	; 0xad
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	58d3      	ldr	r3, [r2, r3]
 80065aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ac:	2208      	movs	r2, #8
 80065ae:	18ba      	adds	r2, r7, r2
 80065b0:	0010      	movs	r0, r2
 80065b2:	4798      	blx	r3
 80065b4:	0003      	movs	r3, r0
 80065b6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	3301      	adds	r3, #1
 80065bc:	2202      	movs	r2, #2
 80065be:	701a      	strb	r2, [r3, #0]
      break;
 80065c0:	e12f      	b.n	8006822 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	885b      	ldrh	r3, [r3, #2]
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b05      	cmp	r3, #5
 80065ca:	d900      	bls.n	80065ce <USBD_GetDescriptor+0xa6>
 80065cc:	e0d0      	b.n	8006770 <USBD_GetDescriptor+0x248>
 80065ce:	009a      	lsls	r2, r3, #2
 80065d0:	4bad      	ldr	r3, [pc, #692]	; (8006888 <USBD_GetDescriptor+0x360>)
 80065d2:	18d3      	adds	r3, r2, r3
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	23ac      	movs	r3, #172	; 0xac
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	58d3      	ldr	r3, [r2, r3]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00d      	beq.n	8006602 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	23ac      	movs	r3, #172	; 0xac
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	58d3      	ldr	r3, [r2, r3]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	7c12      	ldrb	r2, [r2, #16]
 80065f4:	2108      	movs	r1, #8
 80065f6:	1879      	adds	r1, r7, r1
 80065f8:	0010      	movs	r0, r2
 80065fa:	4798      	blx	r3
 80065fc:	0003      	movs	r3, r0
 80065fe:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006600:	e0c3      	b.n	800678a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006602:	683a      	ldr	r2, [r7, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	0011      	movs	r1, r2
 8006608:	0018      	movs	r0, r3
 800660a:	f000 fb23 	bl	8006c54 <USBD_CtlError>
            err++;
 800660e:	210b      	movs	r1, #11
 8006610:	187b      	adds	r3, r7, r1
 8006612:	781a      	ldrb	r2, [r3, #0]
 8006614:	187b      	adds	r3, r7, r1
 8006616:	3201      	adds	r2, #1
 8006618:	701a      	strb	r2, [r3, #0]
          break;
 800661a:	e0b6      	b.n	800678a <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	23ac      	movs	r3, #172	; 0xac
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	58d3      	ldr	r3, [r2, r3]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00d      	beq.n	8006646 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	23ac      	movs	r3, #172	; 0xac
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	58d3      	ldr	r3, [r2, r3]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	7c12      	ldrb	r2, [r2, #16]
 8006638:	2108      	movs	r1, #8
 800663a:	1879      	adds	r1, r7, r1
 800663c:	0010      	movs	r0, r2
 800663e:	4798      	blx	r3
 8006640:	0003      	movs	r3, r0
 8006642:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006644:	e0a1      	b.n	800678a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006646:	683a      	ldr	r2, [r7, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	0011      	movs	r1, r2
 800664c:	0018      	movs	r0, r3
 800664e:	f000 fb01 	bl	8006c54 <USBD_CtlError>
            err++;
 8006652:	210b      	movs	r1, #11
 8006654:	187b      	adds	r3, r7, r1
 8006656:	781a      	ldrb	r2, [r3, #0]
 8006658:	187b      	adds	r3, r7, r1
 800665a:	3201      	adds	r2, #1
 800665c:	701a      	strb	r2, [r3, #0]
          break;
 800665e:	e094      	b.n	800678a <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	23ac      	movs	r3, #172	; 0xac
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	58d3      	ldr	r3, [r2, r3]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00d      	beq.n	800668a <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	23ac      	movs	r3, #172	; 0xac
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	58d3      	ldr	r3, [r2, r3]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	7c12      	ldrb	r2, [r2, #16]
 800667c:	2108      	movs	r1, #8
 800667e:	1879      	adds	r1, r7, r1
 8006680:	0010      	movs	r0, r2
 8006682:	4798      	blx	r3
 8006684:	0003      	movs	r3, r0
 8006686:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006688:	e07f      	b.n	800678a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800668a:	683a      	ldr	r2, [r7, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	0011      	movs	r1, r2
 8006690:	0018      	movs	r0, r3
 8006692:	f000 fadf 	bl	8006c54 <USBD_CtlError>
            err++;
 8006696:	210b      	movs	r1, #11
 8006698:	187b      	adds	r3, r7, r1
 800669a:	781a      	ldrb	r2, [r3, #0]
 800669c:	187b      	adds	r3, r7, r1
 800669e:	3201      	adds	r2, #1
 80066a0:	701a      	strb	r2, [r3, #0]
          break;
 80066a2:	e072      	b.n	800678a <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	23ac      	movs	r3, #172	; 0xac
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	58d3      	ldr	r3, [r2, r3]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00d      	beq.n	80066ce <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	23ac      	movs	r3, #172	; 0xac
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	58d3      	ldr	r3, [r2, r3]
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	7c12      	ldrb	r2, [r2, #16]
 80066c0:	2108      	movs	r1, #8
 80066c2:	1879      	adds	r1, r7, r1
 80066c4:	0010      	movs	r0, r2
 80066c6:	4798      	blx	r3
 80066c8:	0003      	movs	r3, r0
 80066ca:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066cc:	e05d      	b.n	800678a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	0011      	movs	r1, r2
 80066d4:	0018      	movs	r0, r3
 80066d6:	f000 fabd 	bl	8006c54 <USBD_CtlError>
            err++;
 80066da:	210b      	movs	r1, #11
 80066dc:	187b      	adds	r3, r7, r1
 80066de:	781a      	ldrb	r2, [r3, #0]
 80066e0:	187b      	adds	r3, r7, r1
 80066e2:	3201      	adds	r2, #1
 80066e4:	701a      	strb	r2, [r3, #0]
          break;
 80066e6:	e050      	b.n	800678a <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	23ac      	movs	r3, #172	; 0xac
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	58d3      	ldr	r3, [r2, r3]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00d      	beq.n	8006712 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	23ac      	movs	r3, #172	; 0xac
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	58d3      	ldr	r3, [r2, r3]
 80066fe:	695b      	ldr	r3, [r3, #20]
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	7c12      	ldrb	r2, [r2, #16]
 8006704:	2108      	movs	r1, #8
 8006706:	1879      	adds	r1, r7, r1
 8006708:	0010      	movs	r0, r2
 800670a:	4798      	blx	r3
 800670c:	0003      	movs	r3, r0
 800670e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006710:	e03b      	b.n	800678a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	0011      	movs	r1, r2
 8006718:	0018      	movs	r0, r3
 800671a:	f000 fa9b 	bl	8006c54 <USBD_CtlError>
            err++;
 800671e:	210b      	movs	r1, #11
 8006720:	187b      	adds	r3, r7, r1
 8006722:	781a      	ldrb	r2, [r3, #0]
 8006724:	187b      	adds	r3, r7, r1
 8006726:	3201      	adds	r2, #1
 8006728:	701a      	strb	r2, [r3, #0]
          break;
 800672a:	e02e      	b.n	800678a <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	23ac      	movs	r3, #172	; 0xac
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	58d3      	ldr	r3, [r2, r3]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00d      	beq.n	8006756 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	23ac      	movs	r3, #172	; 0xac
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	58d3      	ldr	r3, [r2, r3]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	7c12      	ldrb	r2, [r2, #16]
 8006748:	2108      	movs	r1, #8
 800674a:	1879      	adds	r1, r7, r1
 800674c:	0010      	movs	r0, r2
 800674e:	4798      	blx	r3
 8006750:	0003      	movs	r3, r0
 8006752:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006754:	e019      	b.n	800678a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	0011      	movs	r1, r2
 800675c:	0018      	movs	r0, r3
 800675e:	f000 fa79 	bl	8006c54 <USBD_CtlError>
            err++;
 8006762:	210b      	movs	r1, #11
 8006764:	187b      	adds	r3, r7, r1
 8006766:	781a      	ldrb	r2, [r3, #0]
 8006768:	187b      	adds	r3, r7, r1
 800676a:	3201      	adds	r2, #1
 800676c:	701a      	strb	r2, [r3, #0]
          break;
 800676e:	e00c      	b.n	800678a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	0011      	movs	r1, r2
 8006776:	0018      	movs	r0, r3
 8006778:	f000 fa6c 	bl	8006c54 <USBD_CtlError>
          err++;
 800677c:	210b      	movs	r1, #11
 800677e:	187b      	adds	r3, r7, r1
 8006780:	781a      	ldrb	r2, [r3, #0]
 8006782:	187b      	adds	r3, r7, r1
 8006784:	3201      	adds	r2, #1
 8006786:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8006788:	e04b      	b.n	8006822 <USBD_GetDescriptor+0x2fa>
 800678a:	e04a      	b.n	8006822 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	7c1b      	ldrb	r3, [r3, #16]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10b      	bne.n	80067ac <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	23ad      	movs	r3, #173	; 0xad
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	58d3      	ldr	r3, [r2, r3]
 800679c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800679e:	2208      	movs	r2, #8
 80067a0:	18ba      	adds	r2, r7, r2
 80067a2:	0010      	movs	r0, r2
 80067a4:	4798      	blx	r3
 80067a6:	0003      	movs	r3, r0
 80067a8:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067aa:	e03a      	b.n	8006822 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80067ac:	683a      	ldr	r2, [r7, #0]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	0011      	movs	r1, r2
 80067b2:	0018      	movs	r0, r3
 80067b4:	f000 fa4e 	bl	8006c54 <USBD_CtlError>
        err++;
 80067b8:	210b      	movs	r1, #11
 80067ba:	187b      	adds	r3, r7, r1
 80067bc:	781a      	ldrb	r2, [r3, #0]
 80067be:	187b      	adds	r3, r7, r1
 80067c0:	3201      	adds	r2, #1
 80067c2:	701a      	strb	r2, [r3, #0]
      break;
 80067c4:	e02d      	b.n	8006822 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	7c1b      	ldrb	r3, [r3, #16]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10f      	bne.n	80067ee <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	23ad      	movs	r3, #173	; 0xad
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	58d3      	ldr	r3, [r2, r3]
 80067d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d8:	2208      	movs	r2, #8
 80067da:	18ba      	adds	r2, r7, r2
 80067dc:	0010      	movs	r0, r2
 80067de:	4798      	blx	r3
 80067e0:	0003      	movs	r3, r0
 80067e2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	3301      	adds	r3, #1
 80067e8:	2207      	movs	r2, #7
 80067ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067ec:	e019      	b.n	8006822 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	0011      	movs	r1, r2
 80067f4:	0018      	movs	r0, r3
 80067f6:	f000 fa2d 	bl	8006c54 <USBD_CtlError>
        err++;
 80067fa:	210b      	movs	r1, #11
 80067fc:	187b      	adds	r3, r7, r1
 80067fe:	781a      	ldrb	r2, [r3, #0]
 8006800:	187b      	adds	r3, r7, r1
 8006802:	3201      	adds	r2, #1
 8006804:	701a      	strb	r2, [r3, #0]
      break;
 8006806:	e00c      	b.n	8006822 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	0011      	movs	r1, r2
 800680e:	0018      	movs	r0, r3
 8006810:	f000 fa20 	bl	8006c54 <USBD_CtlError>
      err++;
 8006814:	210b      	movs	r1, #11
 8006816:	187b      	adds	r3, r7, r1
 8006818:	781a      	ldrb	r2, [r3, #0]
 800681a:	187b      	adds	r3, r7, r1
 800681c:	3201      	adds	r2, #1
 800681e:	701a      	strb	r2, [r3, #0]
      break;
 8006820:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 8006822:	230b      	movs	r3, #11
 8006824:	18fb      	adds	r3, r7, r3
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d127      	bne.n	800687c <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800682c:	2108      	movs	r1, #8
 800682e:	187b      	adds	r3, r7, r1
 8006830:	881b      	ldrh	r3, [r3, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d019      	beq.n	800686a <USBD_GetDescriptor+0x342>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	88db      	ldrh	r3, [r3, #6]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d015      	beq.n	800686a <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	88da      	ldrh	r2, [r3, #6]
 8006842:	187b      	adds	r3, r7, r1
 8006844:	881b      	ldrh	r3, [r3, #0]
 8006846:	1c18      	adds	r0, r3, #0
 8006848:	1c11      	adds	r1, r2, #0
 800684a:	b28a      	uxth	r2, r1
 800684c:	b283      	uxth	r3, r0
 800684e:	429a      	cmp	r2, r3
 8006850:	d900      	bls.n	8006854 <USBD_GetDescriptor+0x32c>
 8006852:	1c01      	adds	r1, r0, #0
 8006854:	b28a      	uxth	r2, r1
 8006856:	2108      	movs	r1, #8
 8006858:	187b      	adds	r3, r7, r1
 800685a:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800685c:	187b      	adds	r3, r7, r1
 800685e:	881a      	ldrh	r2, [r3, #0]
 8006860:	68f9      	ldr	r1, [r7, #12]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	0018      	movs	r0, r3
 8006866:	f000 fa73 	bl	8006d50 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	88db      	ldrh	r3, [r3, #6]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d105      	bne.n	800687e <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	0018      	movs	r0, r3
 8006876:	f000 fab1 	bl	8006ddc <USBD_CtlSendStatus>
 800687a:	e000      	b.n	800687e <USBD_GetDescriptor+0x356>
    return;
 800687c:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800687e:	46bd      	mov	sp, r7
 8006880:	b004      	add	sp, #16
 8006882:	bd80      	pop	{r7, pc}
 8006884:	08007828 	.word	0x08007828
 8006888:	08007848 	.word	0x08007848

0800688c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800688c:	b590      	push	{r4, r7, lr}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	889b      	ldrh	r3, [r3, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d13d      	bne.n	800691a <USBD_SetAddress+0x8e>
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	88db      	ldrh	r3, [r3, #6]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d139      	bne.n	800691a <USBD_SetAddress+0x8e>
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	885b      	ldrh	r3, [r3, #2]
 80068aa:	2b7f      	cmp	r3, #127	; 0x7f
 80068ac:	d835      	bhi.n	800691a <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	885b      	ldrh	r3, [r3, #2]
 80068b2:	b2da      	uxtb	r2, r3
 80068b4:	230f      	movs	r3, #15
 80068b6:	18fb      	adds	r3, r7, r3
 80068b8:	217f      	movs	r1, #127	; 0x7f
 80068ba:	400a      	ands	r2, r1
 80068bc:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	23a7      	movs	r3, #167	; 0xa7
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	5cd3      	ldrb	r3, [r2, r3]
 80068c6:	2b03      	cmp	r3, #3
 80068c8:	d106      	bne.n	80068d8 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 80068ca:	683a      	ldr	r2, [r7, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	0011      	movs	r1, r2
 80068d0:	0018      	movs	r0, r3
 80068d2:	f000 f9bf 	bl	8006c54 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068d6:	e027      	b.n	8006928 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	240f      	movs	r4, #15
 80068dc:	193a      	adds	r2, r7, r4
 80068de:	4914      	ldr	r1, [pc, #80]	; (8006930 <USBD_SetAddress+0xa4>)
 80068e0:	7812      	ldrb	r2, [r2, #0]
 80068e2:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80068e4:	193b      	adds	r3, r7, r4
 80068e6:	781a      	ldrb	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	0011      	movs	r1, r2
 80068ec:	0018      	movs	r0, r3
 80068ee:	f000 fe33 	bl	8007558 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	0018      	movs	r0, r3
 80068f6:	f000 fa71 	bl	8006ddc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80068fa:	193b      	adds	r3, r7, r4
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d005      	beq.n	800690e <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	23a7      	movs	r3, #167	; 0xa7
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	2102      	movs	r1, #2
 800690a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800690c:	e00c      	b.n	8006928 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	23a7      	movs	r3, #167	; 0xa7
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	2101      	movs	r1, #1
 8006916:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006918:	e006      	b.n	8006928 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800691a:	683a      	ldr	r2, [r7, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	0011      	movs	r1, r2
 8006920:	0018      	movs	r0, r3
 8006922:	f000 f997 	bl	8006c54 <USBD_CtlError>
  }
}
 8006926:	46c0      	nop			; (mov r8, r8)
 8006928:	46c0      	nop			; (mov r8, r8)
 800692a:	46bd      	mov	sp, r7
 800692c:	b005      	add	sp, #20
 800692e:	bd90      	pop	{r4, r7, pc}
 8006930:	0000029e 	.word	0x0000029e

08006934 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	885b      	ldrh	r3, [r3, #2]
 8006942:	b2da      	uxtb	r2, r3
 8006944:	4b4c      	ldr	r3, [pc, #304]	; (8006a78 <USBD_SetConfig+0x144>)
 8006946:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006948:	4b4b      	ldr	r3, [pc, #300]	; (8006a78 <USBD_SetConfig+0x144>)
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d906      	bls.n	800695e <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8006950:	683a      	ldr	r2, [r7, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	0011      	movs	r1, r2
 8006956:	0018      	movs	r0, r3
 8006958:	f000 f97c 	bl	8006c54 <USBD_CtlError>
 800695c:	e088      	b.n	8006a70 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	23a7      	movs	r3, #167	; 0xa7
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	5cd3      	ldrb	r3, [r2, r3]
 8006966:	2b02      	cmp	r3, #2
 8006968:	d002      	beq.n	8006970 <USBD_SetConfig+0x3c>
 800696a:	2b03      	cmp	r3, #3
 800696c:	d029      	beq.n	80069c2 <USBD_SetConfig+0x8e>
 800696e:	e071      	b.n	8006a54 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006970:	4b41      	ldr	r3, [pc, #260]	; (8006a78 <USBD_SetConfig+0x144>)
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d01f      	beq.n	80069b8 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8006978:	4b3f      	ldr	r3, [pc, #252]	; (8006a78 <USBD_SetConfig+0x144>)
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	001a      	movs	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	23a7      	movs	r3, #167	; 0xa7
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	2103      	movs	r1, #3
 800698a:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800698c:	4b3a      	ldr	r3, [pc, #232]	; (8006a78 <USBD_SetConfig+0x144>)
 800698e:	781a      	ldrb	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	0011      	movs	r1, r2
 8006994:	0018      	movs	r0, r3
 8006996:	f7ff f8c6 	bl	8005b26 <USBD_SetClassConfig>
 800699a:	0003      	movs	r3, r0
 800699c:	2b02      	cmp	r3, #2
 800699e:	d106      	bne.n	80069ae <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 80069a0:	683a      	ldr	r2, [r7, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	0011      	movs	r1, r2
 80069a6:	0018      	movs	r0, r3
 80069a8:	f000 f954 	bl	8006c54 <USBD_CtlError>
            return;
 80069ac:	e060      	b.n	8006a70 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	0018      	movs	r0, r3
 80069b2:	f000 fa13 	bl	8006ddc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80069b6:	e05b      	b.n	8006a70 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	0018      	movs	r0, r3
 80069bc:	f000 fa0e 	bl	8006ddc <USBD_CtlSendStatus>
        break;
 80069c0:	e056      	b.n	8006a70 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80069c2:	4b2d      	ldr	r3, [pc, #180]	; (8006a78 <USBD_SetConfig+0x144>)
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d115      	bne.n	80069f6 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	23a7      	movs	r3, #167	; 0xa7
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	2102      	movs	r1, #2
 80069d2:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 80069d4:	4b28      	ldr	r3, [pc, #160]	; (8006a78 <USBD_SetConfig+0x144>)
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	001a      	movs	r2, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80069de:	4b26      	ldr	r3, [pc, #152]	; (8006a78 <USBD_SetConfig+0x144>)
 80069e0:	781a      	ldrb	r2, [r3, #0]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	0011      	movs	r1, r2
 80069e6:	0018      	movs	r0, r3
 80069e8:	f7ff f8c4 	bl	8005b74 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	0018      	movs	r0, r3
 80069f0:	f000 f9f4 	bl	8006ddc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80069f4:	e03c      	b.n	8006a70 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 80069f6:	4b20      	ldr	r3, [pc, #128]	; (8006a78 <USBD_SetConfig+0x144>)
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	001a      	movs	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d022      	beq.n	8006a4a <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	b2da      	uxtb	r2, r3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	0011      	movs	r1, r2
 8006a0e:	0018      	movs	r0, r3
 8006a10:	f7ff f8b0 	bl	8005b74 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006a14:	4b18      	ldr	r3, [pc, #96]	; (8006a78 <USBD_SetConfig+0x144>)
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	001a      	movs	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006a1e:	4b16      	ldr	r3, [pc, #88]	; (8006a78 <USBD_SetConfig+0x144>)
 8006a20:	781a      	ldrb	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	0011      	movs	r1, r2
 8006a26:	0018      	movs	r0, r3
 8006a28:	f7ff f87d 	bl	8005b26 <USBD_SetClassConfig>
 8006a2c:	0003      	movs	r3, r0
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d106      	bne.n	8006a40 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8006a32:	683a      	ldr	r2, [r7, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	0011      	movs	r1, r2
 8006a38:	0018      	movs	r0, r3
 8006a3a:	f000 f90b 	bl	8006c54 <USBD_CtlError>
            return;
 8006a3e:	e017      	b.n	8006a70 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	0018      	movs	r0, r3
 8006a44:	f000 f9ca 	bl	8006ddc <USBD_CtlSendStatus>
        break;
 8006a48:	e012      	b.n	8006a70 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	0018      	movs	r0, r3
 8006a4e:	f000 f9c5 	bl	8006ddc <USBD_CtlSendStatus>
        break;
 8006a52:	e00d      	b.n	8006a70 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8006a54:	683a      	ldr	r2, [r7, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	0011      	movs	r1, r2
 8006a5a:	0018      	movs	r0, r3
 8006a5c:	f000 f8fa 	bl	8006c54 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006a60:	4b05      	ldr	r3, [pc, #20]	; (8006a78 <USBD_SetConfig+0x144>)
 8006a62:	781a      	ldrb	r2, [r3, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	0011      	movs	r1, r2
 8006a68:	0018      	movs	r0, r3
 8006a6a:	f7ff f883 	bl	8005b74 <USBD_ClrClassConfig>
        break;
 8006a6e:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8006a70:	46bd      	mov	sp, r7
 8006a72:	b002      	add	sp, #8
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	46c0      	nop			; (mov r8, r8)
 8006a78:	20000180 	.word	0x20000180

08006a7c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	88db      	ldrh	r3, [r3, #6]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d006      	beq.n	8006a9c <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8006a8e:	683a      	ldr	r2, [r7, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	0011      	movs	r1, r2
 8006a94:	0018      	movs	r0, r3
 8006a96:	f000 f8dd 	bl	8006c54 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a9a:	e026      	b.n	8006aea <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	23a7      	movs	r3, #167	; 0xa7
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	5cd3      	ldrb	r3, [r2, r3]
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	dc02      	bgt.n	8006aae <USBD_GetConfig+0x32>
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	dc03      	bgt.n	8006ab4 <USBD_GetConfig+0x38>
 8006aac:	e016      	b.n	8006adc <USBD_GetConfig+0x60>
 8006aae:	2b03      	cmp	r3, #3
 8006ab0:	d00c      	beq.n	8006acc <USBD_GetConfig+0x50>
 8006ab2:	e013      	b.n	8006adc <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	3308      	adds	r3, #8
 8006abe:	0019      	movs	r1, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	0018      	movs	r0, r3
 8006ac6:	f000 f943 	bl	8006d50 <USBD_CtlSendData>
        break;
 8006aca:	e00e      	b.n	8006aea <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	1d19      	adds	r1, r3, #4
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	0018      	movs	r0, r3
 8006ad6:	f000 f93b 	bl	8006d50 <USBD_CtlSendData>
        break;
 8006ada:	e006      	b.n	8006aea <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8006adc:	683a      	ldr	r2, [r7, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	0011      	movs	r1, r2
 8006ae2:	0018      	movs	r0, r3
 8006ae4:	f000 f8b6 	bl	8006c54 <USBD_CtlError>
        break;
 8006ae8:	46c0      	nop			; (mov r8, r8)
}
 8006aea:	46c0      	nop			; (mov r8, r8)
 8006aec:	46bd      	mov	sp, r7
 8006aee:	b002      	add	sp, #8
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b082      	sub	sp, #8
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
 8006afa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	23a7      	movs	r3, #167	; 0xa7
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	5cd3      	ldrb	r3, [r2, r3]
 8006b04:	3b01      	subs	r3, #1
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d822      	bhi.n	8006b50 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	88db      	ldrh	r3, [r3, #6]
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d006      	beq.n	8006b20 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8006b12:	683a      	ldr	r2, [r7, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	0011      	movs	r1, r2
 8006b18:	0018      	movs	r0, r3
 8006b1a:	f000 f89b 	bl	8006c54 <USBD_CtlError>
        break;
 8006b1e:	e01e      	b.n	8006b5e <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	23a9      	movs	r3, #169	; 0xa9
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	58d3      	ldr	r3, [r2, r3]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d005      	beq.n	8006b3e <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	2202      	movs	r2, #2
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	330c      	adds	r3, #12
 8006b42:	0019      	movs	r1, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2202      	movs	r2, #2
 8006b48:	0018      	movs	r0, r3
 8006b4a:	f000 f901 	bl	8006d50 <USBD_CtlSendData>
      break;
 8006b4e:	e006      	b.n	8006b5e <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8006b50:	683a      	ldr	r2, [r7, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	0011      	movs	r1, r2
 8006b56:	0018      	movs	r0, r3
 8006b58:	f000 f87c 	bl	8006c54 <USBD_CtlError>
      break;
 8006b5c:	46c0      	nop			; (mov r8, r8)
  }
}
 8006b5e:	46c0      	nop			; (mov r8, r8)
 8006b60:	46bd      	mov	sp, r7
 8006b62:	b002      	add	sp, #8
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b082      	sub	sp, #8
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
 8006b6e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	885b      	ldrh	r3, [r3, #2]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d108      	bne.n	8006b8a <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	23a9      	movs	r3, #169	; 0xa9
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	2101      	movs	r1, #1
 8006b80:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	0018      	movs	r0, r3
 8006b86:	f000 f929 	bl	8006ddc <USBD_CtlSendStatus>
  }
}
 8006b8a:	46c0      	nop			; (mov r8, r8)
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	b002      	add	sp, #8
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b082      	sub	sp, #8
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
 8006b9a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	23a7      	movs	r3, #167	; 0xa7
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	5cd3      	ldrb	r3, [r2, r3]
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d80d      	bhi.n	8006bc6 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	885b      	ldrh	r3, [r3, #2]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d110      	bne.n	8006bd4 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	23a9      	movs	r3, #169	; 0xa9
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	2100      	movs	r1, #0
 8006bba:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	0018      	movs	r0, r3
 8006bc0:	f000 f90c 	bl	8006ddc <USBD_CtlSendStatus>
      }
      break;
 8006bc4:	e006      	b.n	8006bd4 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	0011      	movs	r1, r2
 8006bcc:	0018      	movs	r0, r3
 8006bce:	f000 f841 	bl	8006c54 <USBD_CtlError>
      break;
 8006bd2:	e000      	b.n	8006bd6 <USBD_ClrFeature+0x44>
      break;
 8006bd4:	46c0      	nop			; (mov r8, r8)
  }
}
 8006bd6:	46c0      	nop			; (mov r8, r8)
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	b002      	add	sp, #8
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b082      	sub	sp, #8
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
 8006be6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	781a      	ldrb	r2, [r3, #0]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	785a      	ldrb	r2, [r3, #1]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	3302      	adds	r3, #2
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	3303      	adds	r3, #3
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	021b      	lsls	r3, r3, #8
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	18d3      	adds	r3, r2, r3
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	3304      	adds	r3, #4
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	3305      	adds	r3, #5
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	021b      	lsls	r3, r3, #8
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	18d3      	adds	r3, r2, r3
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	3306      	adds	r3, #6
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	b29a      	uxth	r2, r3
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	3307      	adds	r3, #7
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	021b      	lsls	r3, r3, #8
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	18d3      	adds	r3, r2, r3
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	80da      	strh	r2, [r3, #6]

}
 8006c4c:	46c0      	nop			; (mov r8, r8)
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	b002      	add	sp, #8
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2180      	movs	r1, #128	; 0x80
 8006c62:	0018      	movs	r0, r3
 8006c64:	f000 fbf1 	bl	800744a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	0018      	movs	r0, r3
 8006c6e:	f000 fbec 	bl	800744a <USBD_LL_StallEP>
}
 8006c72:	46c0      	nop			; (mov r8, r8)
 8006c74:	46bd      	mov	sp, r7
 8006c76:	b002      	add	sp, #8
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c7a:	b590      	push	{r4, r7, lr}
 8006c7c:	b087      	sub	sp, #28
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	60f8      	str	r0, [r7, #12]
 8006c82:	60b9      	str	r1, [r7, #8]
 8006c84:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c86:	2417      	movs	r4, #23
 8006c88:	193b      	adds	r3, r7, r4
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d03c      	beq.n	8006d0e <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	0018      	movs	r0, r3
 8006c98:	f000 f83d 	bl	8006d16 <USBD_GetLen>
 8006c9c:	0003      	movs	r3, r0
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	18db      	adds	r3, r3, r3
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006caa:	193b      	adds	r3, r7, r4
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	193a      	adds	r2, r7, r4
 8006cb0:	1c59      	adds	r1, r3, #1
 8006cb2:	7011      	strb	r1, [r2, #0]
 8006cb4:	001a      	movs	r2, r3
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	189b      	adds	r3, r3, r2
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	7812      	ldrb	r2, [r2, #0]
 8006cbe:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006cc0:	193b      	adds	r3, r7, r4
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	193a      	adds	r2, r7, r4
 8006cc6:	1c59      	adds	r1, r3, #1
 8006cc8:	7011      	strb	r1, [r2, #0]
 8006cca:	001a      	movs	r2, r3
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	189b      	adds	r3, r3, r2
 8006cd0:	2203      	movs	r2, #3
 8006cd2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006cd4:	e017      	b.n	8006d06 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	1c5a      	adds	r2, r3, #1
 8006cda:	60fa      	str	r2, [r7, #12]
 8006cdc:	2417      	movs	r4, #23
 8006cde:	193a      	adds	r2, r7, r4
 8006ce0:	7812      	ldrb	r2, [r2, #0]
 8006ce2:	1939      	adds	r1, r7, r4
 8006ce4:	1c50      	adds	r0, r2, #1
 8006ce6:	7008      	strb	r0, [r1, #0]
 8006ce8:	0011      	movs	r1, r2
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	1852      	adds	r2, r2, r1
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006cf2:	193b      	adds	r3, r7, r4
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	193a      	adds	r2, r7, r4
 8006cf8:	1c59      	adds	r1, r3, #1
 8006cfa:	7011      	strb	r1, [r2, #0]
 8006cfc:	001a      	movs	r2, r3
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	189b      	adds	r3, r3, r2
 8006d02:	2200      	movs	r2, #0
 8006d04:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1e3      	bne.n	8006cd6 <USBD_GetString+0x5c>
    }
  }
}
 8006d0e:	46c0      	nop			; (mov r8, r8)
 8006d10:	46bd      	mov	sp, r7
 8006d12:	b007      	add	sp, #28
 8006d14:	bd90      	pop	{r4, r7, pc}

08006d16 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b084      	sub	sp, #16
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006d1e:	230f      	movs	r3, #15
 8006d20:	18fb      	adds	r3, r7, r3
 8006d22:	2200      	movs	r2, #0
 8006d24:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8006d26:	e008      	b.n	8006d3a <USBD_GetLen+0x24>
  {
    len++;
 8006d28:	210f      	movs	r1, #15
 8006d2a:	187b      	adds	r3, r7, r1
 8006d2c:	781a      	ldrb	r2, [r3, #0]
 8006d2e:	187b      	adds	r3, r7, r1
 8006d30:	3201      	adds	r2, #1
 8006d32:	701a      	strb	r2, [r3, #0]
    buf++;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	3301      	adds	r3, #1
 8006d38:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1f2      	bne.n	8006d28 <USBD_GetLen+0x12>
  }

  return len;
 8006d42:	230f      	movs	r3, #15
 8006d44:	18fb      	adds	r3, r7, r3
 8006d46:	781b      	ldrb	r3, [r3, #0]
}
 8006d48:	0018      	movs	r0, r3
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	b004      	add	sp, #16
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	1dbb      	adds	r3, r7, #6
 8006d5c:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	23a5      	movs	r3, #165	; 0xa5
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	2102      	movs	r1, #2
 8006d66:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8006d68:	1dbb      	adds	r3, r7, #6
 8006d6a:	881a      	ldrh	r2, [r3, #0]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006d70:	1dbb      	adds	r3, r7, #6
 8006d72:	881a      	ldrh	r2, [r3, #0]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d78:	1dbb      	adds	r3, r7, #6
 8006d7a:	881b      	ldrh	r3, [r3, #0]
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	2100      	movs	r1, #0
 8006d82:	f000 fc14 	bl	80075ae <USBD_LL_Transmit>

  return USBD_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	0018      	movs	r0, r3
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	b004      	add	sp, #16
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	1dbb      	adds	r3, r7, #6
 8006d9c:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d9e:	1dbb      	adds	r3, r7, #6
 8006da0:	881b      	ldrh	r3, [r3, #0]
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	2100      	movs	r1, #0
 8006da8:	f000 fc01 	bl	80075ae <USBD_LL_Transmit>

  return USBD_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	0018      	movs	r0, r3
 8006db0:	46bd      	mov	sp, r7
 8006db2:	b004      	add	sp, #16
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b084      	sub	sp, #16
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	60f8      	str	r0, [r7, #12]
 8006dbe:	60b9      	str	r1, [r7, #8]
 8006dc0:	1dbb      	adds	r3, r7, #6
 8006dc2:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006dc4:	1dbb      	adds	r3, r7, #6
 8006dc6:	881b      	ldrh	r3, [r3, #0]
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	2100      	movs	r1, #0
 8006dce:	f000 fc25 	bl	800761c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	0018      	movs	r0, r3
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	b004      	add	sp, #16
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	23a5      	movs	r3, #165	; 0xa5
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	2104      	movs	r1, #4
 8006dec:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	2300      	movs	r3, #0
 8006df2:	2200      	movs	r2, #0
 8006df4:	2100      	movs	r1, #0
 8006df6:	f000 fbda 	bl	80075ae <USBD_LL_Transmit>

  return USBD_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	0018      	movs	r0, r3
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	b002      	add	sp, #8
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	23a5      	movs	r3, #165	; 0xa5
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	2105      	movs	r1, #5
 8006e14:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	2300      	movs	r3, #0
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	f000 fbfd 	bl	800761c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	0018      	movs	r0, r3
 8006e26:	46bd      	mov	sp, r7
 8006e28:	b002      	add	sp, #8
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006e30:	490f      	ldr	r1, [pc, #60]	; (8006e70 <MX_USB_DEVICE_Init+0x44>)
 8006e32:	4b10      	ldr	r3, [pc, #64]	; (8006e74 <MX_USB_DEVICE_Init+0x48>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	0018      	movs	r0, r3
 8006e38:	f7fe fe0e 	bl	8005a58 <USBD_Init>
 8006e3c:	1e03      	subs	r3, r0, #0
 8006e3e:	d001      	beq.n	8006e44 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006e40:	f7f9 fc1e 	bl	8000680 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006e44:	4a0c      	ldr	r2, [pc, #48]	; (8006e78 <MX_USB_DEVICE_Init+0x4c>)
 8006e46:	4b0b      	ldr	r3, [pc, #44]	; (8006e74 <MX_USB_DEVICE_Init+0x48>)
 8006e48:	0011      	movs	r1, r2
 8006e4a:	0018      	movs	r0, r3
 8006e4c:	f7fe fe35 	bl	8005aba <USBD_RegisterClass>
 8006e50:	1e03      	subs	r3, r0, #0
 8006e52:	d001      	beq.n	8006e58 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8006e54:	f7f9 fc14 	bl	8000680 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006e58:	4b06      	ldr	r3, [pc, #24]	; (8006e74 <MX_USB_DEVICE_Init+0x48>)
 8006e5a:	0018      	movs	r0, r3
 8006e5c:	f7fe fe4d 	bl	8005afa <USBD_Start>
 8006e60:	1e03      	subs	r3, r0, #0
 8006e62:	d001      	beq.n	8006e68 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006e64:	f7f9 fc0c 	bl	8000680 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006e68:	46c0      	nop			; (mov r8, r8)
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	46c0      	nop			; (mov r8, r8)
 8006e70:	20000108 	.word	0x20000108
 8006e74:	20000184 	.word	0x20000184
 8006e78:	2000000c 	.word	0x2000000c

08006e7c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	0002      	movs	r2, r0
 8006e84:	6039      	str	r1, [r7, #0]
 8006e86:	1dfb      	adds	r3, r7, #7
 8006e88:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	2212      	movs	r2, #18
 8006e8e:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006e90:	4b02      	ldr	r3, [pc, #8]	; (8006e9c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006e92:	0018      	movs	r0, r3
 8006e94:	46bd      	mov	sp, r7
 8006e96:	b002      	add	sp, #8
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	46c0      	nop			; (mov r8, r8)
 8006e9c:	20000124 	.word	0x20000124

08006ea0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	0002      	movs	r2, r0
 8006ea8:	6039      	str	r1, [r7, #0]
 8006eaa:	1dfb      	adds	r3, r7, #7
 8006eac:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	2204      	movs	r2, #4
 8006eb2:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006eb4:	4b02      	ldr	r3, [pc, #8]	; (8006ec0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006eb6:	0018      	movs	r0, r3
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	b002      	add	sp, #8
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	46c0      	nop			; (mov r8, r8)
 8006ec0:	20000138 	.word	0x20000138

08006ec4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	0002      	movs	r2, r0
 8006ecc:	6039      	str	r1, [r7, #0]
 8006ece:	1dfb      	adds	r3, r7, #7
 8006ed0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8006ed2:	1dfb      	adds	r3, r7, #7
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d106      	bne.n	8006ee8 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006eda:	683a      	ldr	r2, [r7, #0]
 8006edc:	4908      	ldr	r1, [pc, #32]	; (8006f00 <USBD_FS_ProductStrDescriptor+0x3c>)
 8006ede:	4b09      	ldr	r3, [pc, #36]	; (8006f04 <USBD_FS_ProductStrDescriptor+0x40>)
 8006ee0:	0018      	movs	r0, r3
 8006ee2:	f7ff feca 	bl	8006c7a <USBD_GetString>
 8006ee6:	e005      	b.n	8006ef4 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006ee8:	683a      	ldr	r2, [r7, #0]
 8006eea:	4905      	ldr	r1, [pc, #20]	; (8006f00 <USBD_FS_ProductStrDescriptor+0x3c>)
 8006eec:	4b05      	ldr	r3, [pc, #20]	; (8006f04 <USBD_FS_ProductStrDescriptor+0x40>)
 8006eee:	0018      	movs	r0, r3
 8006ef0:	f7ff fec3 	bl	8006c7a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ef4:	4b02      	ldr	r3, [pc, #8]	; (8006f00 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8006ef6:	0018      	movs	r0, r3
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	b002      	add	sp, #8
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	46c0      	nop			; (mov r8, r8)
 8006f00:	20000448 	.word	0x20000448
 8006f04:	080077a0 	.word	0x080077a0

08006f08 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	0002      	movs	r2, r0
 8006f10:	6039      	str	r1, [r7, #0]
 8006f12:	1dfb      	adds	r3, r7, #7
 8006f14:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006f16:	683a      	ldr	r2, [r7, #0]
 8006f18:	4904      	ldr	r1, [pc, #16]	; (8006f2c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006f1a:	4b05      	ldr	r3, [pc, #20]	; (8006f30 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8006f1c:	0018      	movs	r0, r3
 8006f1e:	f7ff feac 	bl	8006c7a <USBD_GetString>
  return USBD_StrDesc;
 8006f22:	4b02      	ldr	r3, [pc, #8]	; (8006f2c <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8006f24:	0018      	movs	r0, r3
 8006f26:	46bd      	mov	sp, r7
 8006f28:	b002      	add	sp, #8
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	20000448 	.word	0x20000448
 8006f30:	080077b4 	.word	0x080077b4

08006f34 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	0002      	movs	r2, r0
 8006f3c:	6039      	str	r1, [r7, #0]
 8006f3e:	1dfb      	adds	r3, r7, #7
 8006f40:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	221a      	movs	r2, #26
 8006f46:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006f48:	f000 f84c 	bl	8006fe4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006f4c:	4b02      	ldr	r3, [pc, #8]	; (8006f58 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8006f4e:	0018      	movs	r0, r3
 8006f50:	46bd      	mov	sp, r7
 8006f52:	b002      	add	sp, #8
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	46c0      	nop			; (mov r8, r8)
 8006f58:	2000013c 	.word	0x2000013c

08006f5c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	0002      	movs	r2, r0
 8006f64:	6039      	str	r1, [r7, #0]
 8006f66:	1dfb      	adds	r3, r7, #7
 8006f68:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8006f6a:	1dfb      	adds	r3, r7, #7
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d106      	bne.n	8006f80 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f72:	683a      	ldr	r2, [r7, #0]
 8006f74:	4908      	ldr	r1, [pc, #32]	; (8006f98 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8006f76:	4b09      	ldr	r3, [pc, #36]	; (8006f9c <USBD_FS_ConfigStrDescriptor+0x40>)
 8006f78:	0018      	movs	r0, r3
 8006f7a:	f7ff fe7e 	bl	8006c7a <USBD_GetString>
 8006f7e:	e005      	b.n	8006f8c <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f80:	683a      	ldr	r2, [r7, #0]
 8006f82:	4905      	ldr	r1, [pc, #20]	; (8006f98 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8006f84:	4b05      	ldr	r3, [pc, #20]	; (8006f9c <USBD_FS_ConfigStrDescriptor+0x40>)
 8006f86:	0018      	movs	r0, r3
 8006f88:	f7ff fe77 	bl	8006c7a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f8c:	4b02      	ldr	r3, [pc, #8]	; (8006f98 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8006f8e:	0018      	movs	r0, r3
 8006f90:	46bd      	mov	sp, r7
 8006f92:	b002      	add	sp, #8
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	46c0      	nop			; (mov r8, r8)
 8006f98:	20000448 	.word	0x20000448
 8006f9c:	080077c8 	.word	0x080077c8

08006fa0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	0002      	movs	r2, r0
 8006fa8:	6039      	str	r1, [r7, #0]
 8006faa:	1dfb      	adds	r3, r7, #7
 8006fac:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8006fae:	1dfb      	adds	r3, r7, #7
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d106      	bne.n	8006fc4 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	4908      	ldr	r1, [pc, #32]	; (8006fdc <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8006fba:	4b09      	ldr	r3, [pc, #36]	; (8006fe0 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8006fbc:	0018      	movs	r0, r3
 8006fbe:	f7ff fe5c 	bl	8006c7a <USBD_GetString>
 8006fc2:	e005      	b.n	8006fd0 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006fc4:	683a      	ldr	r2, [r7, #0]
 8006fc6:	4905      	ldr	r1, [pc, #20]	; (8006fdc <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8006fc8:	4b05      	ldr	r3, [pc, #20]	; (8006fe0 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8006fca:	0018      	movs	r0, r3
 8006fcc:	f7ff fe55 	bl	8006c7a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006fd0:	4b02      	ldr	r3, [pc, #8]	; (8006fdc <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8006fd2:	0018      	movs	r0, r3
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	b002      	add	sp, #8
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	46c0      	nop			; (mov r8, r8)
 8006fdc:	20000448 	.word	0x20000448
 8006fe0:	080077d4 	.word	0x080077d4

08006fe4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006fea:	4b10      	ldr	r3, [pc, #64]	; (800702c <Get_SerialNum+0x48>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006ff0:	4b0f      	ldr	r3, [pc, #60]	; (8007030 <Get_SerialNum+0x4c>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006ff6:	4b0f      	ldr	r3, [pc, #60]	; (8007034 <Get_SerialNum+0x50>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	18d3      	adds	r3, r2, r3
 8007002:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00b      	beq.n	8007022 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800700a:	490b      	ldr	r1, [pc, #44]	; (8007038 <Get_SerialNum+0x54>)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2208      	movs	r2, #8
 8007010:	0018      	movs	r0, r3
 8007012:	f000 f815 	bl	8007040 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007016:	4909      	ldr	r1, [pc, #36]	; (800703c <Get_SerialNum+0x58>)
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	2204      	movs	r2, #4
 800701c:	0018      	movs	r0, r3
 800701e:	f000 f80f 	bl	8007040 <IntToUnicode>
  }
}
 8007022:	46c0      	nop			; (mov r8, r8)
 8007024:	46bd      	mov	sp, r7
 8007026:	b004      	add	sp, #16
 8007028:	bd80      	pop	{r7, pc}
 800702a:	46c0      	nop			; (mov r8, r8)
 800702c:	1ff80050 	.word	0x1ff80050
 8007030:	1ff80054 	.word	0x1ff80054
 8007034:	1ff80058 	.word	0x1ff80058
 8007038:	2000013e 	.word	0x2000013e
 800703c:	2000014e 	.word	0x2000014e

08007040 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b086      	sub	sp, #24
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	1dfb      	adds	r3, r7, #7
 800704c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800704e:	2117      	movs	r1, #23
 8007050:	187b      	adds	r3, r7, r1
 8007052:	2200      	movs	r2, #0
 8007054:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8007056:	187b      	adds	r3, r7, r1
 8007058:	2200      	movs	r2, #0
 800705a:	701a      	strb	r2, [r3, #0]
 800705c:	e02f      	b.n	80070be <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	0f1b      	lsrs	r3, r3, #28
 8007062:	2b09      	cmp	r3, #9
 8007064:	d80d      	bhi.n	8007082 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	0f1b      	lsrs	r3, r3, #28
 800706a:	b2da      	uxtb	r2, r3
 800706c:	2317      	movs	r3, #23
 800706e:	18fb      	adds	r3, r7, r3
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	005b      	lsls	r3, r3, #1
 8007074:	0019      	movs	r1, r3
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	185b      	adds	r3, r3, r1
 800707a:	3230      	adds	r2, #48	; 0x30
 800707c:	b2d2      	uxtb	r2, r2
 800707e:	701a      	strb	r2, [r3, #0]
 8007080:	e00c      	b.n	800709c <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	0f1b      	lsrs	r3, r3, #28
 8007086:	b2da      	uxtb	r2, r3
 8007088:	2317      	movs	r3, #23
 800708a:	18fb      	adds	r3, r7, r3
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	005b      	lsls	r3, r3, #1
 8007090:	0019      	movs	r1, r3
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	185b      	adds	r3, r3, r1
 8007096:	3237      	adds	r2, #55	; 0x37
 8007098:	b2d2      	uxtb	r2, r2
 800709a:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	011b      	lsls	r3, r3, #4
 80070a0:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80070a2:	2117      	movs	r1, #23
 80070a4:	187b      	adds	r3, r7, r1
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	005b      	lsls	r3, r3, #1
 80070aa:	3301      	adds	r3, #1
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	18d3      	adds	r3, r2, r3
 80070b0:	2200      	movs	r2, #0
 80070b2:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80070b4:	187b      	adds	r3, r7, r1
 80070b6:	781a      	ldrb	r2, [r3, #0]
 80070b8:	187b      	adds	r3, r7, r1
 80070ba:	3201      	adds	r2, #1
 80070bc:	701a      	strb	r2, [r3, #0]
 80070be:	2317      	movs	r3, #23
 80070c0:	18fa      	adds	r2, r7, r3
 80070c2:	1dfb      	adds	r3, r7, #7
 80070c4:	7812      	ldrb	r2, [r2, #0]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d3c8      	bcc.n	800705e <IntToUnicode+0x1e>
  }
}
 80070cc:	46c0      	nop			; (mov r8, r8)
 80070ce:	46c0      	nop			; (mov r8, r8)
 80070d0:	46bd      	mov	sp, r7
 80070d2:	b006      	add	sp, #24
 80070d4:	bd80      	pop	{r7, pc}
	...

080070d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a0a      	ldr	r2, [pc, #40]	; (8007110 <HAL_PCD_MspInit+0x38>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d10e      	bne.n	8007108 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80070ea:	4b0a      	ldr	r3, [pc, #40]	; (8007114 <HAL_PCD_MspInit+0x3c>)
 80070ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070ee:	4b09      	ldr	r3, [pc, #36]	; (8007114 <HAL_PCD_MspInit+0x3c>)
 80070f0:	2180      	movs	r1, #128	; 0x80
 80070f2:	0409      	lsls	r1, r1, #16
 80070f4:	430a      	orrs	r2, r1
 80070f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80070f8:	2200      	movs	r2, #0
 80070fa:	2100      	movs	r1, #0
 80070fc:	201f      	movs	r0, #31
 80070fe:	f7f9 fc6d 	bl	80009dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8007102:	201f      	movs	r0, #31
 8007104:	f7f9 fc7f 	bl	8000a06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007108:	46c0      	nop			; (mov r8, r8)
 800710a:	46bd      	mov	sp, r7
 800710c:	b002      	add	sp, #8
 800710e:	bd80      	pop	{r7, pc}
 8007110:	40005c00 	.word	0x40005c00
 8007114:	40021000 	.word	0x40021000

08007118 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	23bc      	movs	r3, #188	; 0xbc
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	58d2      	ldr	r2, [r2, r3]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	21ac      	movs	r1, #172	; 0xac
 800712c:	0089      	lsls	r1, r1, #2
 800712e:	468c      	mov	ip, r1
 8007130:	4463      	add	r3, ip
 8007132:	0019      	movs	r1, r3
 8007134:	0010      	movs	r0, r2
 8007136:	f7fe fd33 	bl	8005ba0 <USBD_LL_SetupStage>
}
 800713a:	46c0      	nop			; (mov r8, r8)
 800713c:	46bd      	mov	sp, r7
 800713e:	b002      	add	sp, #8
 8007140:	bd80      	pop	{r7, pc}

08007142 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007142:	b590      	push	{r4, r7, lr}
 8007144:	b083      	sub	sp, #12
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
 800714a:	000a      	movs	r2, r1
 800714c:	1cfb      	adds	r3, r7, #3
 800714e:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	23bc      	movs	r3, #188	; 0xbc
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	58d4      	ldr	r4, [r2, r3]
 8007158:	1cfb      	adds	r3, r7, #3
 800715a:	781a      	ldrb	r2, [r3, #0]
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	23be      	movs	r3, #190	; 0xbe
 8007160:	0059      	lsls	r1, r3, #1
 8007162:	0013      	movs	r3, r2
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	189b      	adds	r3, r3, r2
 8007168:	00db      	lsls	r3, r3, #3
 800716a:	18c3      	adds	r3, r0, r3
 800716c:	185b      	adds	r3, r3, r1
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	1cfb      	adds	r3, r7, #3
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	0019      	movs	r1, r3
 8007176:	0020      	movs	r0, r4
 8007178:	f7fe fd70 	bl	8005c5c <USBD_LL_DataOutStage>
}
 800717c:	46c0      	nop			; (mov r8, r8)
 800717e:	46bd      	mov	sp, r7
 8007180:	b003      	add	sp, #12
 8007182:	bd90      	pop	{r4, r7, pc}

08007184 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	000a      	movs	r2, r1
 800718e:	1cfb      	adds	r3, r7, #3
 8007190:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	23bc      	movs	r3, #188	; 0xbc
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	58d0      	ldr	r0, [r2, r3]
 800719a:	1cfb      	adds	r3, r7, #3
 800719c:	781a      	ldrb	r2, [r3, #0]
 800719e:	6879      	ldr	r1, [r7, #4]
 80071a0:	0013      	movs	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	189b      	adds	r3, r3, r2
 80071a6:	00db      	lsls	r3, r3, #3
 80071a8:	18cb      	adds	r3, r1, r3
 80071aa:	333c      	adds	r3, #60	; 0x3c
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	1cfb      	adds	r3, r7, #3
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	0019      	movs	r1, r3
 80071b4:	f7fe fdd4 	bl	8005d60 <USBD_LL_DataInStage>
}
 80071b8:	46c0      	nop			; (mov r8, r8)
 80071ba:	46bd      	mov	sp, r7
 80071bc:	b002      	add	sp, #8
 80071be:	bd80      	pop	{r7, pc}

080071c0 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	23bc      	movs	r3, #188	; 0xbc
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	58d3      	ldr	r3, [r2, r3]
 80071d0:	0018      	movs	r0, r3
 80071d2:	f7fe ff0b 	bl	8005fec <USBD_LL_SOF>
}
 80071d6:	46c0      	nop			; (mov r8, r8)
 80071d8:	46bd      	mov	sp, r7
 80071da:	b002      	add	sp, #8
 80071dc:	bd80      	pop	{r7, pc}

080071de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b084      	sub	sp, #16
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80071e6:	230f      	movs	r3, #15
 80071e8:	18fb      	adds	r3, r7, r3
 80071ea:	2201      	movs	r2, #1
 80071ec:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d001      	beq.n	80071fa <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 80071f6:	f7f9 fa43 	bl	8000680 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	23bc      	movs	r3, #188	; 0xbc
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	58d2      	ldr	r2, [r2, r3]
 8007202:	230f      	movs	r3, #15
 8007204:	18fb      	adds	r3, r7, r3
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	0019      	movs	r1, r3
 800720a:	0010      	movs	r0, r2
 800720c:	f7fe fead 	bl	8005f6a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	23bc      	movs	r3, #188	; 0xbc
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	58d3      	ldr	r3, [r2, r3]
 8007218:	0018      	movs	r0, r3
 800721a:	f7fe fe5e 	bl	8005eda <USBD_LL_Reset>
}
 800721e:	46c0      	nop			; (mov r8, r8)
 8007220:	46bd      	mov	sp, r7
 8007222:	b004      	add	sp, #16
 8007224:	bd80      	pop	{r7, pc}
	...

08007228 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	23bc      	movs	r3, #188	; 0xbc
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	58d3      	ldr	r3, [r2, r3]
 8007238:	0018      	movs	r0, r3
 800723a:	f7fe fea7 	bl	8005f8c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	699b      	ldr	r3, [r3, #24]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d005      	beq.n	8007252 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007246:	4b05      	ldr	r3, [pc, #20]	; (800725c <HAL_PCD_SuspendCallback+0x34>)
 8007248:	691a      	ldr	r2, [r3, #16]
 800724a:	4b04      	ldr	r3, [pc, #16]	; (800725c <HAL_PCD_SuspendCallback+0x34>)
 800724c:	2106      	movs	r1, #6
 800724e:	430a      	orrs	r2, r1
 8007250:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8007252:	46c0      	nop			; (mov r8, r8)
 8007254:	46bd      	mov	sp, r7
 8007256:	b002      	add	sp, #8
 8007258:	bd80      	pop	{r7, pc}
 800725a:	46c0      	nop			; (mov r8, r8)
 800725c:	e000ed00 	.word	0xe000ed00

08007260 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	699b      	ldr	r3, [r3, #24]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d007      	beq.n	8007280 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007270:	4b09      	ldr	r3, [pc, #36]	; (8007298 <HAL_PCD_ResumeCallback+0x38>)
 8007272:	691a      	ldr	r2, [r3, #16]
 8007274:	4b08      	ldr	r3, [pc, #32]	; (8007298 <HAL_PCD_ResumeCallback+0x38>)
 8007276:	2106      	movs	r1, #6
 8007278:	438a      	bics	r2, r1
 800727a:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800727c:	f000 fa1a 	bl	80076b4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	23bc      	movs	r3, #188	; 0xbc
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	58d3      	ldr	r3, [r2, r3]
 8007288:	0018      	movs	r0, r3
 800728a:	f7fe fe97 	bl	8005fbc <USBD_LL_Resume>
}
 800728e:	46c0      	nop			; (mov r8, r8)
 8007290:	46bd      	mov	sp, r7
 8007292:	b002      	add	sp, #8
 8007294:	bd80      	pop	{r7, pc}
 8007296:	46c0      	nop			; (mov r8, r8)
 8007298:	e000ed00 	.word	0xe000ed00

0800729c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80072a4:	4a23      	ldr	r2, [pc, #140]	; (8007334 <USBD_LL_Init+0x98>)
 80072a6:	23bc      	movs	r3, #188	; 0xbc
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	6879      	ldr	r1, [r7, #4]
 80072ac:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	23b0      	movs	r3, #176	; 0xb0
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	491f      	ldr	r1, [pc, #124]	; (8007334 <USBD_LL_Init+0x98>)
 80072b6:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 80072b8:	4b1e      	ldr	r3, [pc, #120]	; (8007334 <USBD_LL_Init+0x98>)
 80072ba:	4a1f      	ldr	r2, [pc, #124]	; (8007338 <USBD_LL_Init+0x9c>)
 80072bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80072be:	4b1d      	ldr	r3, [pc, #116]	; (8007334 <USBD_LL_Init+0x98>)
 80072c0:	2208      	movs	r2, #8
 80072c2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80072c4:	4b1b      	ldr	r3, [pc, #108]	; (8007334 <USBD_LL_Init+0x98>)
 80072c6:	2202      	movs	r2, #2
 80072c8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80072ca:	4b1a      	ldr	r3, [pc, #104]	; (8007334 <USBD_LL_Init+0x98>)
 80072cc:	2202      	movs	r2, #2
 80072ce:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80072d0:	4b18      	ldr	r3, [pc, #96]	; (8007334 <USBD_LL_Init+0x98>)
 80072d2:	2200      	movs	r2, #0
 80072d4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80072d6:	4b17      	ldr	r3, [pc, #92]	; (8007334 <USBD_LL_Init+0x98>)
 80072d8:	2200      	movs	r2, #0
 80072da:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80072dc:	4b15      	ldr	r3, [pc, #84]	; (8007334 <USBD_LL_Init+0x98>)
 80072de:	2200      	movs	r2, #0
 80072e0:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80072e2:	4b14      	ldr	r3, [pc, #80]	; (8007334 <USBD_LL_Init+0x98>)
 80072e4:	0018      	movs	r0, r3
 80072e6:	f7f9 fbab 	bl	8000a40 <HAL_PCD_Init>
 80072ea:	1e03      	subs	r3, r0, #0
 80072ec:	d001      	beq.n	80072f2 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 80072ee:	f7f9 f9c7 	bl	8000680 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	23b0      	movs	r3, #176	; 0xb0
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	58d0      	ldr	r0, [r2, r3]
 80072fa:	2318      	movs	r3, #24
 80072fc:	2200      	movs	r2, #0
 80072fe:	2100      	movs	r1, #0
 8007300:	f7fb f952 	bl	80025a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	23b0      	movs	r3, #176	; 0xb0
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	58d0      	ldr	r0, [r2, r3]
 800730c:	2358      	movs	r3, #88	; 0x58
 800730e:	2200      	movs	r2, #0
 8007310:	2180      	movs	r1, #128	; 0x80
 8007312:	f7fb f949 	bl	80025a8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	23b0      	movs	r3, #176	; 0xb0
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	58d0      	ldr	r0, [r2, r3]
 800731e:	2380      	movs	r3, #128	; 0x80
 8007320:	005b      	lsls	r3, r3, #1
 8007322:	2200      	movs	r2, #0
 8007324:	2181      	movs	r1, #129	; 0x81
 8007326:	f7fb f93f 	bl	80025a8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	0018      	movs	r0, r3
 800732e:	46bd      	mov	sp, r7
 8007330:	b002      	add	sp, #8
 8007332:	bd80      	pop	{r7, pc}
 8007334:	20000648 	.word	0x20000648
 8007338:	40005c00 	.word	0x40005c00

0800733c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800733c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007344:	210f      	movs	r1, #15
 8007346:	187b      	adds	r3, r7, r1
 8007348:	2200      	movs	r2, #0
 800734a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800734c:	260e      	movs	r6, #14
 800734e:	19bb      	adds	r3, r7, r6
 8007350:	2200      	movs	r2, #0
 8007352:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	23b0      	movs	r3, #176	; 0xb0
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	58d3      	ldr	r3, [r2, r3]
 800735c:	000d      	movs	r5, r1
 800735e:	187c      	adds	r4, r7, r1
 8007360:	0018      	movs	r0, r3
 8007362:	f7f9 fc6d 	bl	8000c40 <HAL_PCD_Start>
 8007366:	0003      	movs	r3, r0
 8007368:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800736a:	19bc      	adds	r4, r7, r6
 800736c:	197b      	adds	r3, r7, r5
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	0018      	movs	r0, r3
 8007372:	f000 f9a6 	bl	80076c2 <USBD_Get_USB_Status>
 8007376:	0003      	movs	r3, r0
 8007378:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800737a:	19bb      	adds	r3, r7, r6
 800737c:	781b      	ldrb	r3, [r3, #0]
}
 800737e:	0018      	movs	r0, r3
 8007380:	46bd      	mov	sp, r7
 8007382:	b005      	add	sp, #20
 8007384:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007386 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007386:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007388:	b085      	sub	sp, #20
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
 800738e:	000c      	movs	r4, r1
 8007390:	0010      	movs	r0, r2
 8007392:	0019      	movs	r1, r3
 8007394:	1cfb      	adds	r3, r7, #3
 8007396:	1c22      	adds	r2, r4, #0
 8007398:	701a      	strb	r2, [r3, #0]
 800739a:	1cbb      	adds	r3, r7, #2
 800739c:	1c02      	adds	r2, r0, #0
 800739e:	701a      	strb	r2, [r3, #0]
 80073a0:	003b      	movs	r3, r7
 80073a2:	1c0a      	adds	r2, r1, #0
 80073a4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073a6:	260f      	movs	r6, #15
 80073a8:	19bb      	adds	r3, r7, r6
 80073aa:	2200      	movs	r2, #0
 80073ac:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073ae:	250e      	movs	r5, #14
 80073b0:	197b      	adds	r3, r7, r5
 80073b2:	2200      	movs	r2, #0
 80073b4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	23b0      	movs	r3, #176	; 0xb0
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	58d0      	ldr	r0, [r2, r3]
 80073be:	19bc      	adds	r4, r7, r6
 80073c0:	1cbb      	adds	r3, r7, #2
 80073c2:	781d      	ldrb	r5, [r3, #0]
 80073c4:	003b      	movs	r3, r7
 80073c6:	881a      	ldrh	r2, [r3, #0]
 80073c8:	1cfb      	adds	r3, r7, #3
 80073ca:	7819      	ldrb	r1, [r3, #0]
 80073cc:	002b      	movs	r3, r5
 80073ce:	f7f9 fdcc 	bl	8000f6a <HAL_PCD_EP_Open>
 80073d2:	0003      	movs	r3, r0
 80073d4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073d6:	250e      	movs	r5, #14
 80073d8:	197c      	adds	r4, r7, r5
 80073da:	19bb      	adds	r3, r7, r6
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	0018      	movs	r0, r3
 80073e0:	f000 f96f 	bl	80076c2 <USBD_Get_USB_Status>
 80073e4:	0003      	movs	r3, r0
 80073e6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80073e8:	197b      	adds	r3, r7, r5
 80073ea:	781b      	ldrb	r3, [r3, #0]
}
 80073ec:	0018      	movs	r0, r3
 80073ee:	46bd      	mov	sp, r7
 80073f0:	b005      	add	sp, #20
 80073f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080073f4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	000a      	movs	r2, r1
 80073fe:	1cfb      	adds	r3, r7, #3
 8007400:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007402:	210f      	movs	r1, #15
 8007404:	187b      	adds	r3, r7, r1
 8007406:	2200      	movs	r2, #0
 8007408:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800740a:	260e      	movs	r6, #14
 800740c:	19bb      	adds	r3, r7, r6
 800740e:	2200      	movs	r2, #0
 8007410:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	23b0      	movs	r3, #176	; 0xb0
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	58d2      	ldr	r2, [r2, r3]
 800741a:	000d      	movs	r5, r1
 800741c:	187c      	adds	r4, r7, r1
 800741e:	1cfb      	adds	r3, r7, #3
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	0019      	movs	r1, r3
 8007424:	0010      	movs	r0, r2
 8007426:	f7f9 fe0f 	bl	8001048 <HAL_PCD_EP_Close>
 800742a:	0003      	movs	r3, r0
 800742c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800742e:	19bc      	adds	r4, r7, r6
 8007430:	197b      	adds	r3, r7, r5
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	0018      	movs	r0, r3
 8007436:	f000 f944 	bl	80076c2 <USBD_Get_USB_Status>
 800743a:	0003      	movs	r3, r0
 800743c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800743e:	19bb      	adds	r3, r7, r6
 8007440:	781b      	ldrb	r3, [r3, #0]
}
 8007442:	0018      	movs	r0, r3
 8007444:	46bd      	mov	sp, r7
 8007446:	b005      	add	sp, #20
 8007448:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800744a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800744a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800744c:	b085      	sub	sp, #20
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
 8007452:	000a      	movs	r2, r1
 8007454:	1cfb      	adds	r3, r7, #3
 8007456:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007458:	210f      	movs	r1, #15
 800745a:	187b      	adds	r3, r7, r1
 800745c:	2200      	movs	r2, #0
 800745e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007460:	260e      	movs	r6, #14
 8007462:	19bb      	adds	r3, r7, r6
 8007464:	2200      	movs	r2, #0
 8007466:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	23b0      	movs	r3, #176	; 0xb0
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	58d2      	ldr	r2, [r2, r3]
 8007470:	000d      	movs	r5, r1
 8007472:	187c      	adds	r4, r7, r1
 8007474:	1cfb      	adds	r3, r7, #3
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	0019      	movs	r1, r3
 800747a:	0010      	movs	r0, r2
 800747c:	f7f9 fea8 	bl	80011d0 <HAL_PCD_EP_SetStall>
 8007480:	0003      	movs	r3, r0
 8007482:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007484:	19bc      	adds	r4, r7, r6
 8007486:	197b      	adds	r3, r7, r5
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	0018      	movs	r0, r3
 800748c:	f000 f919 	bl	80076c2 <USBD_Get_USB_Status>
 8007490:	0003      	movs	r3, r0
 8007492:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007494:	19bb      	adds	r3, r7, r6
 8007496:	781b      	ldrb	r3, [r3, #0]
}
 8007498:	0018      	movs	r0, r3
 800749a:	46bd      	mov	sp, r7
 800749c:	b005      	add	sp, #20
 800749e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080074a0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	000a      	movs	r2, r1
 80074aa:	1cfb      	adds	r3, r7, #3
 80074ac:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074ae:	210f      	movs	r1, #15
 80074b0:	187b      	adds	r3, r7, r1
 80074b2:	2200      	movs	r2, #0
 80074b4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074b6:	260e      	movs	r6, #14
 80074b8:	19bb      	adds	r3, r7, r6
 80074ba:	2200      	movs	r2, #0
 80074bc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	23b0      	movs	r3, #176	; 0xb0
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	58d2      	ldr	r2, [r2, r3]
 80074c6:	000d      	movs	r5, r1
 80074c8:	187c      	adds	r4, r7, r1
 80074ca:	1cfb      	adds	r3, r7, #3
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	0019      	movs	r1, r3
 80074d0:	0010      	movs	r0, r2
 80074d2:	f7f9 fed9 	bl	8001288 <HAL_PCD_EP_ClrStall>
 80074d6:	0003      	movs	r3, r0
 80074d8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074da:	19bc      	adds	r4, r7, r6
 80074dc:	197b      	adds	r3, r7, r5
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	0018      	movs	r0, r3
 80074e2:	f000 f8ee 	bl	80076c2 <USBD_Get_USB_Status>
 80074e6:	0003      	movs	r3, r0
 80074e8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80074ea:	19bb      	adds	r3, r7, r6
 80074ec:	781b      	ldrb	r3, [r3, #0]
}
 80074ee:	0018      	movs	r0, r3
 80074f0:	46bd      	mov	sp, r7
 80074f2:	b005      	add	sp, #20
 80074f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080074f6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074f6:	b580      	push	{r7, lr}
 80074f8:	b084      	sub	sp, #16
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
 80074fe:	000a      	movs	r2, r1
 8007500:	1cfb      	adds	r3, r7, #3
 8007502:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	23b0      	movs	r3, #176	; 0xb0
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	58d3      	ldr	r3, [r2, r3]
 800750c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800750e:	1cfb      	adds	r3, r7, #3
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	b25b      	sxtb	r3, r3
 8007514:	2b00      	cmp	r3, #0
 8007516:	da0d      	bge.n	8007534 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007518:	1cfb      	adds	r3, r7, #3
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	227f      	movs	r2, #127	; 0x7f
 800751e:	4013      	ands	r3, r2
 8007520:	68f9      	ldr	r1, [r7, #12]
 8007522:	1c5a      	adds	r2, r3, #1
 8007524:	0013      	movs	r3, r2
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	189b      	adds	r3, r3, r2
 800752a:	00db      	lsls	r3, r3, #3
 800752c:	18cb      	adds	r3, r1, r3
 800752e:	3302      	adds	r3, #2
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	e00d      	b.n	8007550 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007534:	1cfb      	adds	r3, r7, #3
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	227f      	movs	r2, #127	; 0x7f
 800753a:	401a      	ands	r2, r3
 800753c:	68f8      	ldr	r0, [r7, #12]
 800753e:	23b5      	movs	r3, #181	; 0xb5
 8007540:	0059      	lsls	r1, r3, #1
 8007542:	0013      	movs	r3, r2
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	189b      	adds	r3, r3, r2
 8007548:	00db      	lsls	r3, r3, #3
 800754a:	18c3      	adds	r3, r0, r3
 800754c:	185b      	adds	r3, r3, r1
 800754e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007550:	0018      	movs	r0, r3
 8007552:	46bd      	mov	sp, r7
 8007554:	b004      	add	sp, #16
 8007556:	bd80      	pop	{r7, pc}

08007558 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	000a      	movs	r2, r1
 8007562:	1cfb      	adds	r3, r7, #3
 8007564:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007566:	210f      	movs	r1, #15
 8007568:	187b      	adds	r3, r7, r1
 800756a:	2200      	movs	r2, #0
 800756c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800756e:	260e      	movs	r6, #14
 8007570:	19bb      	adds	r3, r7, r6
 8007572:	2200      	movs	r2, #0
 8007574:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	23b0      	movs	r3, #176	; 0xb0
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	58d2      	ldr	r2, [r2, r3]
 800757e:	000d      	movs	r5, r1
 8007580:	187c      	adds	r4, r7, r1
 8007582:	1cfb      	adds	r3, r7, #3
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	0019      	movs	r1, r3
 8007588:	0010      	movs	r0, r2
 800758a:	f7f9 fcc3 	bl	8000f14 <HAL_PCD_SetAddress>
 800758e:	0003      	movs	r3, r0
 8007590:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007592:	19bc      	adds	r4, r7, r6
 8007594:	197b      	adds	r3, r7, r5
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	0018      	movs	r0, r3
 800759a:	f000 f892 	bl	80076c2 <USBD_Get_USB_Status>
 800759e:	0003      	movs	r3, r0
 80075a0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80075a2:	19bb      	adds	r3, r7, r6
 80075a4:	781b      	ldrb	r3, [r3, #0]
}
 80075a6:	0018      	movs	r0, r3
 80075a8:	46bd      	mov	sp, r7
 80075aa:	b005      	add	sp, #20
 80075ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080075ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80075ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075b0:	b087      	sub	sp, #28
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	60f8      	str	r0, [r7, #12]
 80075b6:	0008      	movs	r0, r1
 80075b8:	607a      	str	r2, [r7, #4]
 80075ba:	0019      	movs	r1, r3
 80075bc:	230b      	movs	r3, #11
 80075be:	18fb      	adds	r3, r7, r3
 80075c0:	1c02      	adds	r2, r0, #0
 80075c2:	701a      	strb	r2, [r3, #0]
 80075c4:	2408      	movs	r4, #8
 80075c6:	193b      	adds	r3, r7, r4
 80075c8:	1c0a      	adds	r2, r1, #0
 80075ca:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075cc:	2117      	movs	r1, #23
 80075ce:	187b      	adds	r3, r7, r1
 80075d0:	2200      	movs	r2, #0
 80075d2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075d4:	2516      	movs	r5, #22
 80075d6:	197b      	adds	r3, r7, r5
 80075d8:	2200      	movs	r2, #0
 80075da:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	23b0      	movs	r3, #176	; 0xb0
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	58d0      	ldr	r0, [r2, r3]
 80075e4:	193b      	adds	r3, r7, r4
 80075e6:	881d      	ldrh	r5, [r3, #0]
 80075e8:	000e      	movs	r6, r1
 80075ea:	187c      	adds	r4, r7, r1
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	230b      	movs	r3, #11
 80075f0:	18fb      	adds	r3, r7, r3
 80075f2:	7819      	ldrb	r1, [r3, #0]
 80075f4:	002b      	movs	r3, r5
 80075f6:	f7f9 fdaf 	bl	8001158 <HAL_PCD_EP_Transmit>
 80075fa:	0003      	movs	r3, r0
 80075fc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075fe:	2516      	movs	r5, #22
 8007600:	197c      	adds	r4, r7, r5
 8007602:	19bb      	adds	r3, r7, r6
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	0018      	movs	r0, r3
 8007608:	f000 f85b 	bl	80076c2 <USBD_Get_USB_Status>
 800760c:	0003      	movs	r3, r0
 800760e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007610:	197b      	adds	r3, r7, r5
 8007612:	781b      	ldrb	r3, [r3, #0]
}
 8007614:	0018      	movs	r0, r3
 8007616:	46bd      	mov	sp, r7
 8007618:	b007      	add	sp, #28
 800761a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800761c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800761c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800761e:	b087      	sub	sp, #28
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	0008      	movs	r0, r1
 8007626:	607a      	str	r2, [r7, #4]
 8007628:	0019      	movs	r1, r3
 800762a:	230b      	movs	r3, #11
 800762c:	18fb      	adds	r3, r7, r3
 800762e:	1c02      	adds	r2, r0, #0
 8007630:	701a      	strb	r2, [r3, #0]
 8007632:	2408      	movs	r4, #8
 8007634:	193b      	adds	r3, r7, r4
 8007636:	1c0a      	adds	r2, r1, #0
 8007638:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800763a:	2117      	movs	r1, #23
 800763c:	187b      	adds	r3, r7, r1
 800763e:	2200      	movs	r2, #0
 8007640:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007642:	2516      	movs	r5, #22
 8007644:	197b      	adds	r3, r7, r5
 8007646:	2200      	movs	r2, #0
 8007648:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	23b0      	movs	r3, #176	; 0xb0
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	58d0      	ldr	r0, [r2, r3]
 8007652:	193b      	adds	r3, r7, r4
 8007654:	881d      	ldrh	r5, [r3, #0]
 8007656:	000e      	movs	r6, r1
 8007658:	187c      	adds	r4, r7, r1
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	230b      	movs	r3, #11
 800765e:	18fb      	adds	r3, r7, r3
 8007660:	7819      	ldrb	r1, [r3, #0]
 8007662:	002b      	movs	r3, r5
 8007664:	f7f9 fd41 	bl	80010ea <HAL_PCD_EP_Receive>
 8007668:	0003      	movs	r3, r0
 800766a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800766c:	2516      	movs	r5, #22
 800766e:	197c      	adds	r4, r7, r5
 8007670:	19bb      	adds	r3, r7, r6
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	0018      	movs	r0, r3
 8007676:	f000 f824 	bl	80076c2 <USBD_Get_USB_Status>
 800767a:	0003      	movs	r3, r0
 800767c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800767e:	197b      	adds	r3, r7, r5
 8007680:	781b      	ldrb	r3, [r3, #0]
}
 8007682:	0018      	movs	r0, r3
 8007684:	46bd      	mov	sp, r7
 8007686:	b007      	add	sp, #28
 8007688:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800768c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007694:	4b02      	ldr	r3, [pc, #8]	; (80076a0 <USBD_static_malloc+0x14>)
}
 8007696:	0018      	movs	r0, r3
 8007698:	46bd      	mov	sp, r7
 800769a:	b002      	add	sp, #8
 800769c:	bd80      	pop	{r7, pc}
 800769e:	46c0      	nop			; (mov r8, r8)
 80076a0:	2000093c 	.word	0x2000093c

080076a4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]

}
 80076ac:	46c0      	nop			; (mov r8, r8)
 80076ae:	46bd      	mov	sp, r7
 80076b0:	b002      	add	sp, #8
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80076b8:	f7f8 ff56 	bl	8000568 <SystemClock_Config>
}
 80076bc:	46c0      	nop			; (mov r8, r8)
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b084      	sub	sp, #16
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	0002      	movs	r2, r0
 80076ca:	1dfb      	adds	r3, r7, #7
 80076cc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076ce:	230f      	movs	r3, #15
 80076d0:	18fb      	adds	r3, r7, r3
 80076d2:	2200      	movs	r2, #0
 80076d4:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 80076d6:	1dfb      	adds	r3, r7, #7
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	2b03      	cmp	r3, #3
 80076dc:	d017      	beq.n	800770e <USBD_Get_USB_Status+0x4c>
 80076de:	dc1b      	bgt.n	8007718 <USBD_Get_USB_Status+0x56>
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d00f      	beq.n	8007704 <USBD_Get_USB_Status+0x42>
 80076e4:	dc18      	bgt.n	8007718 <USBD_Get_USB_Status+0x56>
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d002      	beq.n	80076f0 <USBD_Get_USB_Status+0x2e>
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d005      	beq.n	80076fa <USBD_Get_USB_Status+0x38>
 80076ee:	e013      	b.n	8007718 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80076f0:	230f      	movs	r3, #15
 80076f2:	18fb      	adds	r3, r7, r3
 80076f4:	2200      	movs	r2, #0
 80076f6:	701a      	strb	r2, [r3, #0]
    break;
 80076f8:	e013      	b.n	8007722 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80076fa:	230f      	movs	r3, #15
 80076fc:	18fb      	adds	r3, r7, r3
 80076fe:	2202      	movs	r2, #2
 8007700:	701a      	strb	r2, [r3, #0]
    break;
 8007702:	e00e      	b.n	8007722 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007704:	230f      	movs	r3, #15
 8007706:	18fb      	adds	r3, r7, r3
 8007708:	2201      	movs	r2, #1
 800770a:	701a      	strb	r2, [r3, #0]
    break;
 800770c:	e009      	b.n	8007722 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800770e:	230f      	movs	r3, #15
 8007710:	18fb      	adds	r3, r7, r3
 8007712:	2202      	movs	r2, #2
 8007714:	701a      	strb	r2, [r3, #0]
    break;
 8007716:	e004      	b.n	8007722 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8007718:	230f      	movs	r3, #15
 800771a:	18fb      	adds	r3, r7, r3
 800771c:	2202      	movs	r2, #2
 800771e:	701a      	strb	r2, [r3, #0]
    break;
 8007720:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8007722:	230f      	movs	r3, #15
 8007724:	18fb      	adds	r3, r7, r3
 8007726:	781b      	ldrb	r3, [r3, #0]
}
 8007728:	0018      	movs	r0, r3
 800772a:	46bd      	mov	sp, r7
 800772c:	b004      	add	sp, #16
 800772e:	bd80      	pop	{r7, pc}

08007730 <memset>:
 8007730:	0003      	movs	r3, r0
 8007732:	1882      	adds	r2, r0, r2
 8007734:	4293      	cmp	r3, r2
 8007736:	d100      	bne.n	800773a <memset+0xa>
 8007738:	4770      	bx	lr
 800773a:	7019      	strb	r1, [r3, #0]
 800773c:	3301      	adds	r3, #1
 800773e:	e7f9      	b.n	8007734 <memset+0x4>

08007740 <__libc_init_array>:
 8007740:	b570      	push	{r4, r5, r6, lr}
 8007742:	2600      	movs	r6, #0
 8007744:	4c0c      	ldr	r4, [pc, #48]	; (8007778 <__libc_init_array+0x38>)
 8007746:	4d0d      	ldr	r5, [pc, #52]	; (800777c <__libc_init_array+0x3c>)
 8007748:	1b64      	subs	r4, r4, r5
 800774a:	10a4      	asrs	r4, r4, #2
 800774c:	42a6      	cmp	r6, r4
 800774e:	d109      	bne.n	8007764 <__libc_init_array+0x24>
 8007750:	2600      	movs	r6, #0
 8007752:	f000 f819 	bl	8007788 <_init>
 8007756:	4c0a      	ldr	r4, [pc, #40]	; (8007780 <__libc_init_array+0x40>)
 8007758:	4d0a      	ldr	r5, [pc, #40]	; (8007784 <__libc_init_array+0x44>)
 800775a:	1b64      	subs	r4, r4, r5
 800775c:	10a4      	asrs	r4, r4, #2
 800775e:	42a6      	cmp	r6, r4
 8007760:	d105      	bne.n	800776e <__libc_init_array+0x2e>
 8007762:	bd70      	pop	{r4, r5, r6, pc}
 8007764:	00b3      	lsls	r3, r6, #2
 8007766:	58eb      	ldr	r3, [r5, r3]
 8007768:	4798      	blx	r3
 800776a:	3601      	adds	r6, #1
 800776c:	e7ee      	b.n	800774c <__libc_init_array+0xc>
 800776e:	00b3      	lsls	r3, r6, #2
 8007770:	58eb      	ldr	r3, [r5, r3]
 8007772:	4798      	blx	r3
 8007774:	3601      	adds	r6, #1
 8007776:	e7f2      	b.n	800775e <__libc_init_array+0x1e>
 8007778:	08007868 	.word	0x08007868
 800777c:	08007868 	.word	0x08007868
 8007780:	0800786c 	.word	0x0800786c
 8007784:	08007868 	.word	0x08007868

08007788 <_init>:
 8007788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800778a:	46c0      	nop			; (mov r8, r8)
 800778c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800778e:	bc08      	pop	{r3}
 8007790:	469e      	mov	lr, r3
 8007792:	4770      	bx	lr

08007794 <_fini>:
 8007794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007796:	46c0      	nop			; (mov r8, r8)
 8007798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800779a:	bc08      	pop	{r3}
 800779c:	469e      	mov	lr, r3
 800779e:	4770      	bx	lr

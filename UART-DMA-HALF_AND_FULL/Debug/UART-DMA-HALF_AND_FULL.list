
UART-DMA-HALF_AND_FULL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ff4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080030b4  080030b4  000130b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003120  08003120  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003120  08003120  00013120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003128  08003128  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003128  08003128  00013128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800312c  0800312c  0001312c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  2000000c  0800313c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  0800313c  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008fdb  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016b1  00000000  00000000  0002900f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000738  00000000  00000000  0002a6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b0  00000000  00000000  0002adf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012bd6  00000000  00000000  0002b4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009332  00000000  00000000  0003e07e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00073c05  00000000  00000000  000473b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bafb5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018e4  00000000  00000000  000bb008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800309c 	.word	0x0800309c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800309c 	.word	0x0800309c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004ae:	f000 fa7d 	bl	80009ac <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004b2:	f000 f83f 	bl	8000534 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004b6:	f000 f8fd 	bl	80006b4 <MX_GPIO_Init>
	MX_DMA_Init();
 80004ba:	f000 f8dd 	bl	8000678 <MX_DMA_Init>
	MX_USART1_UART_Init();
 80004be:	f000 f8ab 	bl	8000618 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	for (int i = 0; i < 200; i++) {
 80004c2:	2300      	movs	r3, #0
 80004c4:	607b      	str	r3, [r7, #4]
 80004c6:	e007      	b.n	80004d8 <main+0x30>
		data[i] = 'x';
 80004c8:	4a16      	ldr	r2, [pc, #88]	; (8000524 <main+0x7c>)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	18d3      	adds	r3, r2, r3
 80004ce:	2278      	movs	r2, #120	; 0x78
 80004d0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 200; i++) {
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	3301      	adds	r3, #1
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2bc7      	cmp	r3, #199	; 0xc7
 80004dc:	ddf4      	ble.n	80004c8 <main+0x20>
	}
	HAL_UART_Transmit(&huart1, data, sizeof(data), 1000);
 80004de:	23fa      	movs	r3, #250	; 0xfa
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	4910      	ldr	r1, [pc, #64]	; (8000524 <main+0x7c>)
 80004e4:	4810      	ldr	r0, [pc, #64]	; (8000528 <main+0x80>)
 80004e6:	22c8      	movs	r2, #200	; 0xc8
 80004e8:	f001 ff04 	bl	80022f4 <HAL_UART_Transmit>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(BSP_GREEN_LED_GPIO_Port, BSP_GREEN_LED_Pin);
 80004ec:	4b0f      	ldr	r3, [pc, #60]	; (800052c <main+0x84>)
 80004ee:	2110      	movs	r1, #16
 80004f0:	0018      	movs	r0, r3
 80004f2:	f000 ff1a 	bl	800132a <HAL_GPIO_TogglePin>
		HAL_Delay(250);
 80004f6:	20fa      	movs	r0, #250	; 0xfa
 80004f8:	f000 fac8 	bl	8000a8c <HAL_Delay>

		count++;
 80004fc:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <main+0x88>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	3301      	adds	r3, #1
 8000502:	b2da      	uxtb	r2, r3
 8000504:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <main+0x88>)
 8000506:	701a      	strb	r2, [r3, #0]

		if ((count % 2) == 0) {
 8000508:	4b09      	ldr	r3, [pc, #36]	; (8000530 <main+0x88>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2201      	movs	r2, #1
 800050e:	4013      	ands	r3, r2
 8000510:	b2db      	uxtb	r3, r3
 8000512:	2b00      	cmp	r3, #0
 8000514:	d1ea      	bne.n	80004ec <main+0x44>
			HAL_UART_Transmit_DMA(&huart1, data, sizeof(data));
 8000516:	4903      	ldr	r1, [pc, #12]	; (8000524 <main+0x7c>)
 8000518:	4b03      	ldr	r3, [pc, #12]	; (8000528 <main+0x80>)
 800051a:	22c8      	movs	r2, #200	; 0xc8
 800051c:	0018      	movs	r0, r3
 800051e:	f001 ff89 	bl	8002434 <HAL_UART_Transmit_DMA>
		HAL_GPIO_TogglePin(BSP_GREEN_LED_GPIO_Port, BSP_GREEN_LED_Pin);
 8000522:	e7e3      	b.n	80004ec <main+0x44>
 8000524:	200000f8 	.word	0x200000f8
 8000528:	20000028 	.word	0x20000028
 800052c:	50000400 	.word	0x50000400
 8000530:	200001c0 	.word	0x200001c0

08000534 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000534:	b590      	push	{r4, r7, lr}
 8000536:	b09d      	sub	sp, #116	; 0x74
 8000538:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800053a:	2438      	movs	r4, #56	; 0x38
 800053c:	193b      	adds	r3, r7, r4
 800053e:	0018      	movs	r0, r3
 8000540:	2338      	movs	r3, #56	; 0x38
 8000542:	001a      	movs	r2, r3
 8000544:	2100      	movs	r1, #0
 8000546:	f002 fda1 	bl	800308c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800054a:	2324      	movs	r3, #36	; 0x24
 800054c:	18fb      	adds	r3, r7, r3
 800054e:	0018      	movs	r0, r3
 8000550:	2314      	movs	r3, #20
 8000552:	001a      	movs	r2, r3
 8000554:	2100      	movs	r1, #0
 8000556:	f002 fd99 	bl	800308c <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800055a:	003b      	movs	r3, r7
 800055c:	0018      	movs	r0, r3
 800055e:	2324      	movs	r3, #36	; 0x24
 8000560:	001a      	movs	r2, r3
 8000562:	2100      	movs	r1, #0
 8000564:	f002 fd92 	bl	800308c <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000568:	4b29      	ldr	r3, [pc, #164]	; (8000610 <SystemClock_Config+0xdc>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a29      	ldr	r2, [pc, #164]	; (8000614 <SystemClock_Config+0xe0>)
 800056e:	401a      	ands	r2, r3
 8000570:	4b27      	ldr	r3, [pc, #156]	; (8000610 <SystemClock_Config+0xdc>)
 8000572:	2180      	movs	r1, #128	; 0x80
 8000574:	0109      	lsls	r1, r1, #4
 8000576:	430a      	orrs	r2, r1
 8000578:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057a:	0021      	movs	r1, r4
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2202      	movs	r2, #2
 8000580:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2201      	movs	r2, #1
 8000586:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2210      	movs	r2, #16
 800058c:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2202      	movs	r2, #2
 8000592:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2200      	movs	r2, #0
 8000598:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 800059a:	187b      	adds	r3, r7, r1
 800059c:	2200      	movs	r2, #0
 800059e:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	2280      	movs	r2, #128	; 0x80
 80005a4:	0412      	lsls	r2, r2, #16
 80005a6:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	0018      	movs	r0, r3
 80005ac:	f000 fed8 	bl	8001360 <HAL_RCC_OscConfig>
 80005b0:	1e03      	subs	r3, r0, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x84>
		Error_Handler();
 80005b4:	f000 f91a 	bl	80007ec <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005b8:	2124      	movs	r1, #36	; 0x24
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	220f      	movs	r2, #15
 80005be:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	2203      	movs	r2, #3
 80005c4:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2200      	movs	r2, #0
 80005d0:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	2200      	movs	r2, #0
 80005d6:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	2100      	movs	r1, #0
 80005dc:	0018      	movs	r0, r3
 80005de:	f001 fa83 	bl	8001ae8 <HAL_RCC_ClockConfig>
 80005e2:	1e03      	subs	r3, r0, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xb6>
		Error_Handler();
 80005e6:	f000 f901 	bl	80007ec <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80005ea:	003b      	movs	r3, r7
 80005ec:	2201      	movs	r2, #1
 80005ee:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005f0:	003b      	movs	r3, r7
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80005f6:	003b      	movs	r3, r7
 80005f8:	0018      	movs	r0, r3
 80005fa:	f001 fc99 	bl	8001f30 <HAL_RCCEx_PeriphCLKConfig>
 80005fe:	1e03      	subs	r3, r0, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xd2>
		Error_Handler();
 8000602:	f000 f8f3 	bl	80007ec <Error_Handler>
	}
}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	46bd      	mov	sp, r7
 800060a:	b01d      	add	sp, #116	; 0x74
 800060c:	bd90      	pop	{r4, r7, pc}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	40007000 	.word	0x40007000
 8000614:	ffffe7ff 	.word	0xffffe7ff

08000618 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800061c:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_USART1_UART_Init+0x58>)
 800061e:	4a15      	ldr	r2, [pc, #84]	; (8000674 <MX_USART1_UART_Init+0x5c>)
 8000620:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <MX_USART1_UART_Init+0x58>)
 8000624:	22e1      	movs	r2, #225	; 0xe1
 8000626:	0252      	lsls	r2, r2, #9
 8000628:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_USART1_UART_Init+0x58>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_USART1_UART_Init+0x58>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_USART1_UART_Init+0x58>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_USART1_UART_Init+0x58>)
 800063e:	220c      	movs	r2, #12
 8000640:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <MX_USART1_UART_Init+0x58>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_USART1_UART_Init+0x58>)
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <MX_USART1_UART_Init+0x58>)
 8000650:	2200      	movs	r2, #0
 8000652:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_USART1_UART_Init+0x58>)
 8000656:	2200      	movs	r2, #0
 8000658:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800065a:	4b05      	ldr	r3, [pc, #20]	; (8000670 <MX_USART1_UART_Init+0x58>)
 800065c:	0018      	movs	r0, r3
 800065e:	f001 fdf5 	bl	800224c <HAL_UART_Init>
 8000662:	1e03      	subs	r3, r0, #0
 8000664:	d001      	beq.n	800066a <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8000666:	f000 f8c1 	bl	80007ec <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000028 	.word	0x20000028
 8000674:	40013800 	.word	0x40013800

08000678 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_DMA_Init+0x38>)
 8000680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_DMA_Init+0x38>)
 8000684:	2101      	movs	r1, #1
 8000686:	430a      	orrs	r2, r1
 8000688:	631a      	str	r2, [r3, #48]	; 0x30
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_DMA_Init+0x38>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	2201      	movs	r2, #1
 8000690:	4013      	ands	r3, r2
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel2_3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000696:	2200      	movs	r2, #0
 8000698:	2100      	movs	r1, #0
 800069a:	200a      	movs	r0, #10
 800069c:	f000 fac6 	bl	8000c2c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80006a0:	200a      	movs	r0, #10
 80006a2:	f000 fad8 	bl	8000c56 <HAL_NVIC_EnableIRQ>

}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b002      	add	sp, #8
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	40021000 	.word	0x40021000

080006b4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006b4:	b590      	push	{r4, r7, lr}
 80006b6:	b08b      	sub	sp, #44	; 0x2c
 80006b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006ba:	2414      	movs	r4, #20
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	0018      	movs	r0, r3
 80006c0:	2314      	movs	r3, #20
 80006c2:	001a      	movs	r2, r3
 80006c4:	2100      	movs	r1, #0
 80006c6:	f002 fce1 	bl	800308c <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	4b26      	ldr	r3, [pc, #152]	; (8000764 <MX_GPIO_Init+0xb0>)
 80006cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006ce:	4b25      	ldr	r3, [pc, #148]	; (8000764 <MX_GPIO_Init+0xb0>)
 80006d0:	2104      	movs	r1, #4
 80006d2:	430a      	orrs	r2, r1
 80006d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80006d6:	4b23      	ldr	r3, [pc, #140]	; (8000764 <MX_GPIO_Init+0xb0>)
 80006d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006da:	2204      	movs	r2, #4
 80006dc:	4013      	ands	r3, r2
 80006de:	613b      	str	r3, [r7, #16]
 80006e0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80006e2:	4b20      	ldr	r3, [pc, #128]	; (8000764 <MX_GPIO_Init+0xb0>)
 80006e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006e6:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <MX_GPIO_Init+0xb0>)
 80006e8:	2180      	movs	r1, #128	; 0x80
 80006ea:	430a      	orrs	r2, r1
 80006ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80006ee:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <MX_GPIO_Init+0xb0>)
 80006f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006f2:	2280      	movs	r2, #128	; 0x80
 80006f4:	4013      	ands	r3, r2
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <MX_GPIO_Init+0xb0>)
 80006fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006fe:	4b19      	ldr	r3, [pc, #100]	; (8000764 <MX_GPIO_Init+0xb0>)
 8000700:	2101      	movs	r1, #1
 8000702:	430a      	orrs	r2, r1
 8000704:	62da      	str	r2, [r3, #44]	; 0x2c
 8000706:	4b17      	ldr	r3, [pc, #92]	; (8000764 <MX_GPIO_Init+0xb0>)
 8000708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800070a:	2201      	movs	r2, #1
 800070c:	4013      	ands	r3, r2
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_GPIO_Init+0xb0>)
 8000714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <MX_GPIO_Init+0xb0>)
 8000718:	2102      	movs	r1, #2
 800071a:	430a      	orrs	r2, r1
 800071c:	62da      	str	r2, [r3, #44]	; 0x2c
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_GPIO_Init+0xb0>)
 8000720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000722:	2202      	movs	r2, #2
 8000724:	4013      	ands	r3, r2
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BSP_GREEN_LED_GPIO_Port, BSP_GREEN_LED_Pin,
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_GPIO_Init+0xb4>)
 800072c:	2200      	movs	r2, #0
 800072e:	2110      	movs	r1, #16
 8000730:	0018      	movs	r0, r3
 8000732:	f000 fddd 	bl	80012f0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : BSP_GREEN_LED_Pin */
	GPIO_InitStruct.Pin = BSP_GREEN_LED_Pin;
 8000736:	0021      	movs	r1, r4
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2210      	movs	r2, #16
 800073c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2201      	movs	r2, #1
 8000742:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2200      	movs	r2, #0
 800074e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(BSP_GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8000750:	187b      	adds	r3, r7, r1
 8000752:	4a05      	ldr	r2, [pc, #20]	; (8000768 <MX_GPIO_Init+0xb4>)
 8000754:	0019      	movs	r1, r3
 8000756:	0010      	movs	r0, r2
 8000758:	f000 fc54 	bl	8001004 <HAL_GPIO_Init>

}
 800075c:	46c0      	nop			; (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	b00b      	add	sp, #44	; 0x2c
 8000762:	bd90      	pop	{r4, r7, pc}
 8000764:	40021000 	.word	0x40021000
 8000768:	50000400 	.word	0x50000400

0800076c <HAL_UART_TxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 100; i++) {
 8000774:	2300      	movs	r3, #0
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	e00e      	b.n	8000798 <HAL_UART_TxHalfCpltCallback+0x2c>
		data[i] = 'z';
 800077a:	4a0b      	ldr	r2, [pc, #44]	; (80007a8 <HAL_UART_TxHalfCpltCallback+0x3c>)
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	18d3      	adds	r3, r2, r3
 8000780:	227a      	movs	r2, #122	; 0x7a
 8000782:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart, data, sizeof(data), 1000);
 8000784:	23fa      	movs	r3, #250	; 0xfa
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	4907      	ldr	r1, [pc, #28]	; (80007a8 <HAL_UART_TxHalfCpltCallback+0x3c>)
 800078a:	1d38      	adds	r0, r7, #4
 800078c:	22c8      	movs	r2, #200	; 0xc8
 800078e:	f001 fdb1 	bl	80022f4 <HAL_UART_Transmit>
	for (int i = 0; i < 100; i++) {
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	3301      	adds	r3, #1
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	2b63      	cmp	r3, #99	; 0x63
 800079c:	dded      	ble.n	800077a <HAL_UART_TxHalfCpltCallback+0xe>

	}

}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	46c0      	nop			; (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	b004      	add	sp, #16
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200000f8 	.word	0x200000f8

080007ac <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 100; i++) {
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	e00e      	b.n	80007d8 <HAL_UART_TxCpltCallback+0x2c>
		data[i] = 'y';
 80007ba:	4a0b      	ldr	r2, [pc, #44]	; (80007e8 <HAL_UART_TxCpltCallback+0x3c>)
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	18d3      	adds	r3, r2, r3
 80007c0:	2279      	movs	r2, #121	; 0x79
 80007c2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart, data, sizeof(data), 1000);
 80007c4:	23fa      	movs	r3, #250	; 0xfa
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	4907      	ldr	r1, [pc, #28]	; (80007e8 <HAL_UART_TxCpltCallback+0x3c>)
 80007ca:	1d38      	adds	r0, r7, #4
 80007cc:	22c8      	movs	r2, #200	; 0xc8
 80007ce:	f001 fd91 	bl	80022f4 <HAL_UART_Transmit>
	for (int i = 0; i < 100; i++) {
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	3301      	adds	r3, #1
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	2b63      	cmp	r3, #99	; 0x63
 80007dc:	dded      	ble.n	80007ba <HAL_UART_TxCpltCallback+0xe>

	}
}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	b004      	add	sp, #16
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	200000f8 	.word	0x200000f8

080007ec <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f0:	b672      	cpsid	i
}
 80007f2:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80007f4:	e7fe      	b.n	80007f4 <Error_Handler+0x8>
	...

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <HAL_MspInit+0x24>)
 80007fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <HAL_MspInit+0x24>)
 8000802:	2101      	movs	r1, #1
 8000804:	430a      	orrs	r2, r1
 8000806:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <HAL_MspInit+0x24>)
 800080a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800080c:	4b03      	ldr	r3, [pc, #12]	; (800081c <HAL_MspInit+0x24>)
 800080e:	2180      	movs	r1, #128	; 0x80
 8000810:	0549      	lsls	r1, r1, #21
 8000812:	430a      	orrs	r2, r1
 8000814:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40021000 	.word	0x40021000

08000820 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b089      	sub	sp, #36	; 0x24
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	240c      	movs	r4, #12
 800082a:	193b      	adds	r3, r7, r4
 800082c:	0018      	movs	r0, r3
 800082e:	2314      	movs	r3, #20
 8000830:	001a      	movs	r2, r3
 8000832:	2100      	movs	r1, #0
 8000834:	f002 fc2a 	bl	800308c <memset>
  if(huart->Instance==USART1)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a2d      	ldr	r2, [pc, #180]	; (80008f4 <HAL_UART_MspInit+0xd4>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d153      	bne.n	80008ea <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000842:	4b2d      	ldr	r3, [pc, #180]	; (80008f8 <HAL_UART_MspInit+0xd8>)
 8000844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000846:	4b2c      	ldr	r3, [pc, #176]	; (80008f8 <HAL_UART_MspInit+0xd8>)
 8000848:	2180      	movs	r1, #128	; 0x80
 800084a:	01c9      	lsls	r1, r1, #7
 800084c:	430a      	orrs	r2, r1
 800084e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000850:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <HAL_UART_MspInit+0xd8>)
 8000852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000854:	4b28      	ldr	r3, [pc, #160]	; (80008f8 <HAL_UART_MspInit+0xd8>)
 8000856:	2101      	movs	r1, #1
 8000858:	430a      	orrs	r2, r1
 800085a:	62da      	str	r2, [r3, #44]	; 0x2c
 800085c:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <HAL_UART_MspInit+0xd8>)
 800085e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000860:	2201      	movs	r2, #1
 8000862:	4013      	ands	r3, r2
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BSP_UART_TX_Pin|BSP_UART_RX_Pin;
 8000868:	193b      	adds	r3, r7, r4
 800086a:	22c0      	movs	r2, #192	; 0xc0
 800086c:	00d2      	lsls	r2, r2, #3
 800086e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	0021      	movs	r1, r4
 8000872:	187b      	adds	r3, r7, r1
 8000874:	2202      	movs	r2, #2
 8000876:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	187b      	adds	r3, r7, r1
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087e:	187b      	adds	r3, r7, r1
 8000880:	2203      	movs	r2, #3
 8000882:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2204      	movs	r2, #4
 8000888:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	187a      	adds	r2, r7, r1
 800088c:	23a0      	movs	r3, #160	; 0xa0
 800088e:	05db      	lsls	r3, r3, #23
 8000890:	0011      	movs	r1, r2
 8000892:	0018      	movs	r0, r3
 8000894:	f000 fbb6 	bl	8001004 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8000898:	4b18      	ldr	r3, [pc, #96]	; (80008fc <HAL_UART_MspInit+0xdc>)
 800089a:	4a19      	ldr	r2, [pc, #100]	; (8000900 <HAL_UART_MspInit+0xe0>)
 800089c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_3;
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <HAL_UART_MspInit+0xdc>)
 80008a0:	2203      	movs	r2, #3
 80008a2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <HAL_UART_MspInit+0xdc>)
 80008a6:	2210      	movs	r2, #16
 80008a8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <HAL_UART_MspInit+0xdc>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_UART_MspInit+0xdc>)
 80008b2:	2280      	movs	r2, #128	; 0x80
 80008b4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <HAL_UART_MspInit+0xdc>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <HAL_UART_MspInit+0xdc>)
 80008be:	2200      	movs	r2, #0
 80008c0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <HAL_UART_MspInit+0xdc>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <HAL_UART_MspInit+0xdc>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <HAL_UART_MspInit+0xdc>)
 80008d0:	0018      	movs	r0, r3
 80008d2:	f000 f9dd 	bl	8000c90 <HAL_DMA_Init>
 80008d6:	1e03      	subs	r3, r0, #0
 80008d8:	d001      	beq.n	80008de <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 80008da:	f7ff ff87 	bl	80007ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4a06      	ldr	r2, [pc, #24]	; (80008fc <HAL_UART_MspInit+0xdc>)
 80008e2:	671a      	str	r2, [r3, #112]	; 0x70
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <HAL_UART_MspInit+0xdc>)
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	b009      	add	sp, #36	; 0x24
 80008f0:	bd90      	pop	{r4, r7, pc}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	40013800 	.word	0x40013800
 80008f8:	40021000 	.word	0x40021000
 80008fc:	200000b0 	.word	0x200000b0
 8000900:	4002001c 	.word	0x4002001c

08000904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <NMI_Handler+0x4>

0800090a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <HardFault_Handler+0x4>

08000910 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000928:	f000 f894 	bl	8000a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000938:	4b03      	ldr	r3, [pc, #12]	; (8000948 <DMA1_Channel2_3_IRQHandler+0x14>)
 800093a:	0018      	movs	r0, r3
 800093c:	f000 fa86 	bl	8000e4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000940:	46c0      	nop			; (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	200000b0 	.word	0x200000b0

0800094c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000950:	46c0      	nop			; (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000958:	480d      	ldr	r0, [pc, #52]	; (8000990 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800095a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800095c:	f7ff fff6 	bl	800094c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000960:	480c      	ldr	r0, [pc, #48]	; (8000994 <LoopForever+0x6>)
  ldr r1, =_edata
 8000962:	490d      	ldr	r1, [pc, #52]	; (8000998 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000964:	4a0d      	ldr	r2, [pc, #52]	; (800099c <LoopForever+0xe>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000968:	e002      	b.n	8000970 <LoopCopyDataInit>

0800096a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800096c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096e:	3304      	adds	r3, #4

08000970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000974:	d3f9      	bcc.n	800096a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000976:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000978:	4c0a      	ldr	r4, [pc, #40]	; (80009a4 <LoopForever+0x16>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800097c:	e001      	b.n	8000982 <LoopFillZerobss>

0800097e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000980:	3204      	adds	r2, #4

08000982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000984:	d3fb      	bcc.n	800097e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000986:	f002 fb5d 	bl	8003044 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800098a:	f7ff fd8d 	bl	80004a8 <main>

0800098e <LoopForever>:

LoopForever:
    b LoopForever
 800098e:	e7fe      	b.n	800098e <LoopForever>
  ldr   r0, =_estack
 8000990:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000998:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800099c:	08003130 	.word	0x08003130
  ldr r2, =_sbss
 80009a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009a4:	200001c8 	.word	0x200001c8

080009a8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a8:	e7fe      	b.n	80009a8 <ADC1_COMP_IRQHandler>
	...

080009ac <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009b2:	1dfb      	adds	r3, r7, #7
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80009b8:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <HAL_Init+0x3c>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <HAL_Init+0x3c>)
 80009be:	2140      	movs	r1, #64	; 0x40
 80009c0:	430a      	orrs	r2, r1
 80009c2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009c4:	2000      	movs	r0, #0
 80009c6:	f000 f811 	bl	80009ec <HAL_InitTick>
 80009ca:	1e03      	subs	r3, r0, #0
 80009cc:	d003      	beq.n	80009d6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80009ce:	1dfb      	adds	r3, r7, #7
 80009d0:	2201      	movs	r2, #1
 80009d2:	701a      	strb	r2, [r3, #0]
 80009d4:	e001      	b.n	80009da <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009d6:	f7ff ff0f 	bl	80007f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009da:	1dfb      	adds	r3, r7, #7
 80009dc:	781b      	ldrb	r3, [r3, #0]
}
 80009de:	0018      	movs	r0, r3
 80009e0:	46bd      	mov	sp, r7
 80009e2:	b002      	add	sp, #8
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	40022000 	.word	0x40022000

080009ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <HAL_InitTick+0x5c>)
 80009f6:	681c      	ldr	r4, [r3, #0]
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <HAL_InitTick+0x60>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	0019      	movs	r1, r3
 80009fe:	23fa      	movs	r3, #250	; 0xfa
 8000a00:	0098      	lsls	r0, r3, #2
 8000a02:	f7ff fb81 	bl	8000108 <__udivsi3>
 8000a06:	0003      	movs	r3, r0
 8000a08:	0019      	movs	r1, r3
 8000a0a:	0020      	movs	r0, r4
 8000a0c:	f7ff fb7c 	bl	8000108 <__udivsi3>
 8000a10:	0003      	movs	r3, r0
 8000a12:	0018      	movs	r0, r3
 8000a14:	f000 f92f 	bl	8000c76 <HAL_SYSTICK_Config>
 8000a18:	1e03      	subs	r3, r0, #0
 8000a1a:	d001      	beq.n	8000a20 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	e00f      	b.n	8000a40 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2b03      	cmp	r3, #3
 8000a24:	d80b      	bhi.n	8000a3e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a26:	6879      	ldr	r1, [r7, #4]
 8000a28:	2301      	movs	r3, #1
 8000a2a:	425b      	negs	r3, r3
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f000 f8fc 	bl	8000c2c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_InitTick+0x64>)
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	e000      	b.n	8000a40 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
}
 8000a40:	0018      	movs	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	b003      	add	sp, #12
 8000a46:	bd90      	pop	{r4, r7, pc}
 8000a48:	20000000 	.word	0x20000000
 8000a4c:	20000008 	.word	0x20000008
 8000a50:	20000004 	.word	0x20000004

08000a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <HAL_IncTick+0x1c>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <HAL_IncTick+0x20>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	18d2      	adds	r2, r2, r3
 8000a64:	4b03      	ldr	r3, [pc, #12]	; (8000a74 <HAL_IncTick+0x20>)
 8000a66:	601a      	str	r2, [r3, #0]
}
 8000a68:	46c0      	nop			; (mov r8, r8)
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	20000008 	.word	0x20000008
 8000a74:	200001c4 	.word	0x200001c4

08000a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a7c:	4b02      	ldr	r3, [pc, #8]	; (8000a88 <HAL_GetTick+0x10>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
}
 8000a80:	0018      	movs	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	200001c4 	.word	0x200001c4

08000a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a94:	f7ff fff0 	bl	8000a78 <HAL_GetTick>
 8000a98:	0003      	movs	r3, r0
 8000a9a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	d005      	beq.n	8000ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <HAL_Delay+0x44>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	001a      	movs	r2, r3
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	189b      	adds	r3, r3, r2
 8000ab0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	f7ff ffe0 	bl	8000a78 <HAL_GetTick>
 8000ab8:	0002      	movs	r2, r0
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d8f7      	bhi.n	8000ab4 <HAL_Delay+0x28>
  {
  }
}
 8000ac4:	46c0      	nop			; (mov r8, r8)
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	b004      	add	sp, #16
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	20000008 	.word	0x20000008

08000ad4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	0002      	movs	r2, r0
 8000adc:	1dfb      	adds	r3, r7, #7
 8000ade:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ae0:	1dfb      	adds	r3, r7, #7
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b7f      	cmp	r3, #127	; 0x7f
 8000ae6:	d809      	bhi.n	8000afc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ae8:	1dfb      	adds	r3, r7, #7
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	001a      	movs	r2, r3
 8000aee:	231f      	movs	r3, #31
 8000af0:	401a      	ands	r2, r3
 8000af2:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <__NVIC_EnableIRQ+0x30>)
 8000af4:	2101      	movs	r1, #1
 8000af6:	4091      	lsls	r1, r2
 8000af8:	000a      	movs	r2, r1
 8000afa:	601a      	str	r2, [r3, #0]
  }
}
 8000afc:	46c0      	nop			; (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	b002      	add	sp, #8
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	e000e100 	.word	0xe000e100

08000b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b08:	b590      	push	{r4, r7, lr}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	0002      	movs	r2, r0
 8000b10:	6039      	str	r1, [r7, #0]
 8000b12:	1dfb      	adds	r3, r7, #7
 8000b14:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b16:	1dfb      	adds	r3, r7, #7
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b7f      	cmp	r3, #127	; 0x7f
 8000b1c:	d828      	bhi.n	8000b70 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b1e:	4a2f      	ldr	r2, [pc, #188]	; (8000bdc <__NVIC_SetPriority+0xd4>)
 8000b20:	1dfb      	adds	r3, r7, #7
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	b25b      	sxtb	r3, r3
 8000b26:	089b      	lsrs	r3, r3, #2
 8000b28:	33c0      	adds	r3, #192	; 0xc0
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	589b      	ldr	r3, [r3, r2]
 8000b2e:	1dfa      	adds	r2, r7, #7
 8000b30:	7812      	ldrb	r2, [r2, #0]
 8000b32:	0011      	movs	r1, r2
 8000b34:	2203      	movs	r2, #3
 8000b36:	400a      	ands	r2, r1
 8000b38:	00d2      	lsls	r2, r2, #3
 8000b3a:	21ff      	movs	r1, #255	; 0xff
 8000b3c:	4091      	lsls	r1, r2
 8000b3e:	000a      	movs	r2, r1
 8000b40:	43d2      	mvns	r2, r2
 8000b42:	401a      	ands	r2, r3
 8000b44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	019b      	lsls	r3, r3, #6
 8000b4a:	22ff      	movs	r2, #255	; 0xff
 8000b4c:	401a      	ands	r2, r3
 8000b4e:	1dfb      	adds	r3, r7, #7
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	0018      	movs	r0, r3
 8000b54:	2303      	movs	r3, #3
 8000b56:	4003      	ands	r3, r0
 8000b58:	00db      	lsls	r3, r3, #3
 8000b5a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b5c:	481f      	ldr	r0, [pc, #124]	; (8000bdc <__NVIC_SetPriority+0xd4>)
 8000b5e:	1dfb      	adds	r3, r7, #7
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	b25b      	sxtb	r3, r3
 8000b64:	089b      	lsrs	r3, r3, #2
 8000b66:	430a      	orrs	r2, r1
 8000b68:	33c0      	adds	r3, #192	; 0xc0
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b6e:	e031      	b.n	8000bd4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b70:	4a1b      	ldr	r2, [pc, #108]	; (8000be0 <__NVIC_SetPriority+0xd8>)
 8000b72:	1dfb      	adds	r3, r7, #7
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	0019      	movs	r1, r3
 8000b78:	230f      	movs	r3, #15
 8000b7a:	400b      	ands	r3, r1
 8000b7c:	3b08      	subs	r3, #8
 8000b7e:	089b      	lsrs	r3, r3, #2
 8000b80:	3306      	adds	r3, #6
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	18d3      	adds	r3, r2, r3
 8000b86:	3304      	adds	r3, #4
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	1dfa      	adds	r2, r7, #7
 8000b8c:	7812      	ldrb	r2, [r2, #0]
 8000b8e:	0011      	movs	r1, r2
 8000b90:	2203      	movs	r2, #3
 8000b92:	400a      	ands	r2, r1
 8000b94:	00d2      	lsls	r2, r2, #3
 8000b96:	21ff      	movs	r1, #255	; 0xff
 8000b98:	4091      	lsls	r1, r2
 8000b9a:	000a      	movs	r2, r1
 8000b9c:	43d2      	mvns	r2, r2
 8000b9e:	401a      	ands	r2, r3
 8000ba0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	019b      	lsls	r3, r3, #6
 8000ba6:	22ff      	movs	r2, #255	; 0xff
 8000ba8:	401a      	ands	r2, r3
 8000baa:	1dfb      	adds	r3, r7, #7
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	0018      	movs	r0, r3
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	4003      	ands	r3, r0
 8000bb4:	00db      	lsls	r3, r3, #3
 8000bb6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bb8:	4809      	ldr	r0, [pc, #36]	; (8000be0 <__NVIC_SetPriority+0xd8>)
 8000bba:	1dfb      	adds	r3, r7, #7
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	001c      	movs	r4, r3
 8000bc0:	230f      	movs	r3, #15
 8000bc2:	4023      	ands	r3, r4
 8000bc4:	3b08      	subs	r3, #8
 8000bc6:	089b      	lsrs	r3, r3, #2
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	3306      	adds	r3, #6
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	18c3      	adds	r3, r0, r3
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	601a      	str	r2, [r3, #0]
}
 8000bd4:	46c0      	nop			; (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	b003      	add	sp, #12
 8000bda:	bd90      	pop	{r4, r7, pc}
 8000bdc:	e000e100 	.word	0xe000e100
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	1e5a      	subs	r2, r3, #1
 8000bf0:	2380      	movs	r3, #128	; 0x80
 8000bf2:	045b      	lsls	r3, r3, #17
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d301      	bcc.n	8000bfc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e010      	b.n	8000c1e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <SysTick_Config+0x44>)
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	3a01      	subs	r2, #1
 8000c02:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c04:	2301      	movs	r3, #1
 8000c06:	425b      	negs	r3, r3
 8000c08:	2103      	movs	r1, #3
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f7ff ff7c 	bl	8000b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <SysTick_Config+0x44>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c16:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <SysTick_Config+0x44>)
 8000c18:	2207      	movs	r2, #7
 8000c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	0018      	movs	r0, r3
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b002      	add	sp, #8
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	e000e010 	.word	0xe000e010

08000c2c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60b9      	str	r1, [r7, #8]
 8000c34:	607a      	str	r2, [r7, #4]
 8000c36:	210f      	movs	r1, #15
 8000c38:	187b      	adds	r3, r7, r1
 8000c3a:	1c02      	adds	r2, r0, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	187b      	adds	r3, r7, r1
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	b25b      	sxtb	r3, r3
 8000c46:	0011      	movs	r1, r2
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f7ff ff5d 	bl	8000b08 <__NVIC_SetPriority>
}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	46bd      	mov	sp, r7
 8000c52:	b004      	add	sp, #16
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	0002      	movs	r2, r0
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c62:	1dfb      	adds	r3, r7, #7
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	b25b      	sxtb	r3, r3
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f7ff ff33 	bl	8000ad4 <__NVIC_EnableIRQ>
}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	46bd      	mov	sp, r7
 8000c72:	b002      	add	sp, #8
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	0018      	movs	r0, r3
 8000c82:	f7ff ffaf 	bl	8000be4 <SysTick_Config>
 8000c86:	0003      	movs	r3, r0
}
 8000c88:	0018      	movs	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	b002      	add	sp, #8
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d101      	bne.n	8000ca2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e061      	b.n	8000d66 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a32      	ldr	r2, [pc, #200]	; (8000d70 <HAL_DMA_Init+0xe0>)
 8000ca8:	4694      	mov	ip, r2
 8000caa:	4463      	add	r3, ip
 8000cac:	2114      	movs	r1, #20
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f7ff fa2a 	bl	8000108 <__udivsi3>
 8000cb4:	0003      	movs	r3, r0
 8000cb6:	009a      	lsls	r2, r3, #2
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a2d      	ldr	r2, [pc, #180]	; (8000d74 <HAL_DMA_Init+0xe4>)
 8000cc0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2225      	movs	r2, #37	; 0x25
 8000cc6:	2102      	movs	r1, #2
 8000cc8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	4a28      	ldr	r2, [pc, #160]	; (8000d78 <HAL_DMA_Init+0xe8>)
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000ce2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	691b      	ldr	r3, [r3, #16]
 8000ce8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6a1b      	ldr	r3, [r3, #32]
 8000d00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	68fa      	ldr	r2, [r7, #12]
 8000d0e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	689a      	ldr	r2, [r3, #8]
 8000d14:	2380      	movs	r3, #128	; 0x80
 8000d16:	01db      	lsls	r3, r3, #7
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d018      	beq.n	8000d4e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000d1c:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <HAL_DMA_Init+0xec>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d24:	211c      	movs	r1, #28
 8000d26:	400b      	ands	r3, r1
 8000d28:	210f      	movs	r1, #15
 8000d2a:	4099      	lsls	r1, r3
 8000d2c:	000b      	movs	r3, r1
 8000d2e:	43d9      	mvns	r1, r3
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <HAL_DMA_Init+0xec>)
 8000d32:	400a      	ands	r2, r1
 8000d34:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <HAL_DMA_Init+0xec>)
 8000d38:	6819      	ldr	r1, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685a      	ldr	r2, [r3, #4]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	201c      	movs	r0, #28
 8000d44:	4003      	ands	r3, r0
 8000d46:	409a      	lsls	r2, r3
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <HAL_DMA_Init+0xec>)
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2200      	movs	r2, #0
 8000d52:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2225      	movs	r2, #37	; 0x25
 8000d58:	2101      	movs	r1, #1
 8000d5a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2224      	movs	r2, #36	; 0x24
 8000d60:	2100      	movs	r1, #0
 8000d62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	0018      	movs	r0, r3
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	b004      	add	sp, #16
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	bffdfff8 	.word	0xbffdfff8
 8000d74:	40020000 	.word	0x40020000
 8000d78:	ffff800f 	.word	0xffff800f
 8000d7c:	400200a8 	.word	0x400200a8

08000d80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
 8000d8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d8e:	2317      	movs	r3, #23
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	2224      	movs	r2, #36	; 0x24
 8000d9a:	5c9b      	ldrb	r3, [r3, r2]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d101      	bne.n	8000da4 <HAL_DMA_Start_IT+0x24>
 8000da0:	2302      	movs	r3, #2
 8000da2:	e04f      	b.n	8000e44 <HAL_DMA_Start_IT+0xc4>
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	2224      	movs	r2, #36	; 0x24
 8000da8:	2101      	movs	r1, #1
 8000daa:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2225      	movs	r2, #37	; 0x25
 8000db0:	5c9b      	ldrb	r3, [r3, r2]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d13a      	bne.n	8000e2e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	2225      	movs	r2, #37	; 0x25
 8000dbc:	2102      	movs	r1, #2
 8000dbe:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	438a      	bics	r2, r1
 8000dd4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	68b9      	ldr	r1, [r7, #8]
 8000ddc:	68f8      	ldr	r0, [r7, #12]
 8000dde:	f000 f8e3 	bl	8000fa8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d008      	beq.n	8000dfc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	210e      	movs	r1, #14
 8000df6:	430a      	orrs	r2, r1
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	e00f      	b.n	8000e1c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2104      	movs	r1, #4
 8000e08:	438a      	bics	r2, r1
 8000e0a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	210a      	movs	r1, #10
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2101      	movs	r1, #1
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	e007      	b.n	8000e3e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	2224      	movs	r2, #36	; 0x24
 8000e32:	2100      	movs	r1, #0
 8000e34:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000e36:	2317      	movs	r3, #23
 8000e38:	18fb      	adds	r3, r7, r3
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8000e3e:	2317      	movs	r3, #23
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	781b      	ldrb	r3, [r3, #0]
}
 8000e44:	0018      	movs	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	b006      	add	sp, #24
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e68:	221c      	movs	r2, #28
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	2204      	movs	r2, #4
 8000e6e:	409a      	lsls	r2, r3
 8000e70:	0013      	movs	r3, r2
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	4013      	ands	r3, r2
 8000e76:	d026      	beq.n	8000ec6 <HAL_DMA_IRQHandler+0x7a>
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	2204      	movs	r2, #4
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	d022      	beq.n	8000ec6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2220      	movs	r2, #32
 8000e88:	4013      	ands	r3, r2
 8000e8a:	d107      	bne.n	8000e9c <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2104      	movs	r1, #4
 8000e98:	438a      	bics	r2, r1
 8000e9a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea0:	221c      	movs	r2, #28
 8000ea2:	401a      	ands	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	2104      	movs	r1, #4
 8000eaa:	4091      	lsls	r1, r2
 8000eac:	000a      	movs	r2, r1
 8000eae:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d100      	bne.n	8000eba <HAL_DMA_IRQHandler+0x6e>
 8000eb8:	e071      	b.n	8000f9e <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	0010      	movs	r0, r2
 8000ec2:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8000ec4:	e06b      	b.n	8000f9e <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	221c      	movs	r2, #28
 8000ecc:	4013      	ands	r3, r2
 8000ece:	2202      	movs	r2, #2
 8000ed0:	409a      	lsls	r2, r3
 8000ed2:	0013      	movs	r3, r2
 8000ed4:	68fa      	ldr	r2, [r7, #12]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	d02d      	beq.n	8000f36 <HAL_DMA_IRQHandler+0xea>
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	2202      	movs	r2, #2
 8000ede:	4013      	ands	r3, r2
 8000ee0:	d029      	beq.n	8000f36 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2220      	movs	r2, #32
 8000eea:	4013      	ands	r3, r2
 8000eec:	d10b      	bne.n	8000f06 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	210a      	movs	r1, #10
 8000efa:	438a      	bics	r2, r1
 8000efc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2225      	movs	r2, #37	; 0x25
 8000f02:	2101      	movs	r1, #1
 8000f04:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	221c      	movs	r2, #28
 8000f0c:	401a      	ands	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	2102      	movs	r1, #2
 8000f14:	4091      	lsls	r1, r2
 8000f16:	000a      	movs	r2, r1
 8000f18:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2224      	movs	r2, #36	; 0x24
 8000f1e:	2100      	movs	r1, #0
 8000f20:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d039      	beq.n	8000f9e <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	0010      	movs	r0, r2
 8000f32:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000f34:	e033      	b.n	8000f9e <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3a:	221c      	movs	r2, #28
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	2208      	movs	r2, #8
 8000f40:	409a      	lsls	r2, r3
 8000f42:	0013      	movs	r3, r2
 8000f44:	68fa      	ldr	r2, [r7, #12]
 8000f46:	4013      	ands	r3, r2
 8000f48:	d02a      	beq.n	8000fa0 <HAL_DMA_IRQHandler+0x154>
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	2208      	movs	r2, #8
 8000f4e:	4013      	ands	r3, r2
 8000f50:	d026      	beq.n	8000fa0 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	210e      	movs	r1, #14
 8000f5e:	438a      	bics	r2, r1
 8000f60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	221c      	movs	r2, #28
 8000f68:	401a      	ands	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	2101      	movs	r1, #1
 8000f70:	4091      	lsls	r1, r2
 8000f72:	000a      	movs	r2, r1
 8000f74:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2225      	movs	r2, #37	; 0x25
 8000f80:	2101      	movs	r1, #1
 8000f82:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2224      	movs	r2, #36	; 0x24
 8000f88:	2100      	movs	r1, #0
 8000f8a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d005      	beq.n	8000fa0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	0010      	movs	r0, r2
 8000f9c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	46c0      	nop			; (mov r8, r8)
}
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b004      	add	sp, #16
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	221c      	movs	r2, #28
 8000fbc:	401a      	ands	r2, r3
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	4091      	lsls	r1, r2
 8000fc6:	000a      	movs	r2, r1
 8000fc8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	683a      	ldr	r2, [r7, #0]
 8000fd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	2b10      	cmp	r3, #16
 8000fd8:	d108      	bne.n	8000fec <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000fea:	e007      	b.n	8000ffc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	68ba      	ldr	r2, [r7, #8]
 8000ff2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	60da      	str	r2, [r3, #12]
}
 8000ffc:	46c0      	nop			; (mov r8, r8)
 8000ffe:	46bd      	mov	sp, r7
 8001000:	b004      	add	sp, #16
 8001002:	bd80      	pop	{r7, pc}

08001004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800101a:	e14f      	b.n	80012bc <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2101      	movs	r1, #1
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	4091      	lsls	r1, r2
 8001026:	000a      	movs	r2, r1
 8001028:	4013      	ands	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d100      	bne.n	8001034 <HAL_GPIO_Init+0x30>
 8001032:	e140      	b.n	80012b6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2203      	movs	r2, #3
 800103a:	4013      	ands	r3, r2
 800103c:	2b01      	cmp	r3, #1
 800103e:	d005      	beq.n	800104c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2203      	movs	r2, #3
 8001046:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001048:	2b02      	cmp	r3, #2
 800104a:	d130      	bne.n	80010ae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	2203      	movs	r2, #3
 8001058:	409a      	lsls	r2, r3
 800105a:	0013      	movs	r3, r2
 800105c:	43da      	mvns	r2, r3
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	68da      	ldr	r2, [r3, #12]
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	409a      	lsls	r2, r3
 800106e:	0013      	movs	r3, r2
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4313      	orrs	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001082:	2201      	movs	r2, #1
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	409a      	lsls	r2, r3
 8001088:	0013      	movs	r3, r2
 800108a:	43da      	mvns	r2, r3
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	091b      	lsrs	r3, r3, #4
 8001098:	2201      	movs	r2, #1
 800109a:	401a      	ands	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	409a      	lsls	r2, r3
 80010a0:	0013      	movs	r3, r2
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	2203      	movs	r2, #3
 80010b4:	4013      	ands	r3, r2
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	d017      	beq.n	80010ea <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	2203      	movs	r2, #3
 80010c6:	409a      	lsls	r2, r3
 80010c8:	0013      	movs	r3, r2
 80010ca:	43da      	mvns	r2, r3
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	689a      	ldr	r2, [r3, #8]
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	409a      	lsls	r2, r3
 80010dc:	0013      	movs	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2203      	movs	r2, #3
 80010f0:	4013      	ands	r3, r2
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d123      	bne.n	800113e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	08da      	lsrs	r2, r3, #3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3208      	adds	r2, #8
 80010fe:	0092      	lsls	r2, r2, #2
 8001100:	58d3      	ldr	r3, [r2, r3]
 8001102:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	2207      	movs	r2, #7
 8001108:	4013      	ands	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	220f      	movs	r2, #15
 800110e:	409a      	lsls	r2, r3
 8001110:	0013      	movs	r3, r2
 8001112:	43da      	mvns	r2, r3
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	691a      	ldr	r2, [r3, #16]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	2107      	movs	r1, #7
 8001122:	400b      	ands	r3, r1
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	409a      	lsls	r2, r3
 8001128:	0013      	movs	r3, r2
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	08da      	lsrs	r2, r3, #3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3208      	adds	r2, #8
 8001138:	0092      	lsls	r2, r2, #2
 800113a:	6939      	ldr	r1, [r7, #16]
 800113c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	2203      	movs	r2, #3
 800114a:	409a      	lsls	r2, r3
 800114c:	0013      	movs	r3, r2
 800114e:	43da      	mvns	r2, r3
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2203      	movs	r2, #3
 800115c:	401a      	ands	r2, r3
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	409a      	lsls	r2, r3
 8001164:	0013      	movs	r3, r2
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	23c0      	movs	r3, #192	; 0xc0
 8001178:	029b      	lsls	r3, r3, #10
 800117a:	4013      	ands	r3, r2
 800117c:	d100      	bne.n	8001180 <HAL_GPIO_Init+0x17c>
 800117e:	e09a      	b.n	80012b6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001180:	4b54      	ldr	r3, [pc, #336]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 8001182:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001184:	4b53      	ldr	r3, [pc, #332]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 8001186:	2101      	movs	r1, #1
 8001188:	430a      	orrs	r2, r1
 800118a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800118c:	4a52      	ldr	r2, [pc, #328]	; (80012d8 <HAL_GPIO_Init+0x2d4>)
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	089b      	lsrs	r3, r3, #2
 8001192:	3302      	adds	r3, #2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	589b      	ldr	r3, [r3, r2]
 8001198:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	2203      	movs	r2, #3
 800119e:	4013      	ands	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	220f      	movs	r2, #15
 80011a4:	409a      	lsls	r2, r3
 80011a6:	0013      	movs	r3, r2
 80011a8:	43da      	mvns	r2, r3
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	23a0      	movs	r3, #160	; 0xa0
 80011b4:	05db      	lsls	r3, r3, #23
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d019      	beq.n	80011ee <HAL_GPIO_Init+0x1ea>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a47      	ldr	r2, [pc, #284]	; (80012dc <HAL_GPIO_Init+0x2d8>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d013      	beq.n	80011ea <HAL_GPIO_Init+0x1e6>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a46      	ldr	r2, [pc, #280]	; (80012e0 <HAL_GPIO_Init+0x2dc>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d00d      	beq.n	80011e6 <HAL_GPIO_Init+0x1e2>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a45      	ldr	r2, [pc, #276]	; (80012e4 <HAL_GPIO_Init+0x2e0>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d007      	beq.n	80011e2 <HAL_GPIO_Init+0x1de>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a44      	ldr	r2, [pc, #272]	; (80012e8 <HAL_GPIO_Init+0x2e4>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d101      	bne.n	80011de <HAL_GPIO_Init+0x1da>
 80011da:	2305      	movs	r3, #5
 80011dc:	e008      	b.n	80011f0 <HAL_GPIO_Init+0x1ec>
 80011de:	2306      	movs	r3, #6
 80011e0:	e006      	b.n	80011f0 <HAL_GPIO_Init+0x1ec>
 80011e2:	2303      	movs	r3, #3
 80011e4:	e004      	b.n	80011f0 <HAL_GPIO_Init+0x1ec>
 80011e6:	2302      	movs	r3, #2
 80011e8:	e002      	b.n	80011f0 <HAL_GPIO_Init+0x1ec>
 80011ea:	2301      	movs	r3, #1
 80011ec:	e000      	b.n	80011f0 <HAL_GPIO_Init+0x1ec>
 80011ee:	2300      	movs	r3, #0
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	2103      	movs	r1, #3
 80011f4:	400a      	ands	r2, r1
 80011f6:	0092      	lsls	r2, r2, #2
 80011f8:	4093      	lsls	r3, r2
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001200:	4935      	ldr	r1, [pc, #212]	; (80012d8 <HAL_GPIO_Init+0x2d4>)
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	089b      	lsrs	r3, r3, #2
 8001206:	3302      	adds	r3, #2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800120e:	4b37      	ldr	r3, [pc, #220]	; (80012ec <HAL_GPIO_Init+0x2e8>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	43da      	mvns	r2, r3
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	2380      	movs	r3, #128	; 0x80
 8001224:	035b      	lsls	r3, r3, #13
 8001226:	4013      	ands	r3, r2
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001232:	4b2e      	ldr	r3, [pc, #184]	; (80012ec <HAL_GPIO_Init+0x2e8>)
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001238:	4b2c      	ldr	r3, [pc, #176]	; (80012ec <HAL_GPIO_Init+0x2e8>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	43da      	mvns	r2, r3
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	2380      	movs	r3, #128	; 0x80
 800124e:	039b      	lsls	r3, r3, #14
 8001250:	4013      	ands	r3, r2
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800125c:	4b23      	ldr	r3, [pc, #140]	; (80012ec <HAL_GPIO_Init+0x2e8>)
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001262:	4b22      	ldr	r3, [pc, #136]	; (80012ec <HAL_GPIO_Init+0x2e8>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	43da      	mvns	r2, r3
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	2380      	movs	r3, #128	; 0x80
 8001278:	029b      	lsls	r3, r3, #10
 800127a:	4013      	ands	r3, r2
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4313      	orrs	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001286:	4b19      	ldr	r3, [pc, #100]	; (80012ec <HAL_GPIO_Init+0x2e8>)
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800128c:	4b17      	ldr	r3, [pc, #92]	; (80012ec <HAL_GPIO_Init+0x2e8>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	43da      	mvns	r2, r3
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	2380      	movs	r3, #128	; 0x80
 80012a2:	025b      	lsls	r3, r3, #9
 80012a4:	4013      	ands	r3, r2
 80012a6:	d003      	beq.n	80012b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012b0:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <HAL_GPIO_Init+0x2e8>)
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	3301      	adds	r3, #1
 80012ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	40da      	lsrs	r2, r3
 80012c4:	1e13      	subs	r3, r2, #0
 80012c6:	d000      	beq.n	80012ca <HAL_GPIO_Init+0x2c6>
 80012c8:	e6a8      	b.n	800101c <HAL_GPIO_Init+0x18>
  }
}
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	46c0      	nop			; (mov r8, r8)
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b006      	add	sp, #24
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40010000 	.word	0x40010000
 80012dc:	50000400 	.word	0x50000400
 80012e0:	50000800 	.word	0x50000800
 80012e4:	50000c00 	.word	0x50000c00
 80012e8:	50001c00 	.word	0x50001c00
 80012ec:	40010400 	.word	0x40010400

080012f0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	0008      	movs	r0, r1
 80012fa:	0011      	movs	r1, r2
 80012fc:	1cbb      	adds	r3, r7, #2
 80012fe:	1c02      	adds	r2, r0, #0
 8001300:	801a      	strh	r2, [r3, #0]
 8001302:	1c7b      	adds	r3, r7, #1
 8001304:	1c0a      	adds	r2, r1, #0
 8001306:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001308:	1c7b      	adds	r3, r7, #1
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d004      	beq.n	800131a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001310:	1cbb      	adds	r3, r7, #2
 8001312:	881a      	ldrh	r2, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001318:	e003      	b.n	8001322 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800131a:	1cbb      	adds	r3, r7, #2
 800131c:	881a      	ldrh	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001322:	46c0      	nop			; (mov r8, r8)
 8001324:	46bd      	mov	sp, r7
 8001326:	b002      	add	sp, #8
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b084      	sub	sp, #16
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	000a      	movs	r2, r1
 8001334:	1cbb      	adds	r3, r7, #2
 8001336:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800133e:	1cbb      	adds	r3, r7, #2
 8001340:	881b      	ldrh	r3, [r3, #0]
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	4013      	ands	r3, r2
 8001346:	041a      	lsls	r2, r3, #16
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	43db      	mvns	r3, r3
 800134c:	1cb9      	adds	r1, r7, #2
 800134e:	8809      	ldrh	r1, [r1, #0]
 8001350:	400b      	ands	r3, r1
 8001352:	431a      	orrs	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	619a      	str	r2, [r3, #24]
}
 8001358:	46c0      	nop			; (mov r8, r8)
 800135a:	46bd      	mov	sp, r7
 800135c:	b004      	add	sp, #16
 800135e:	bd80      	pop	{r7, pc}

08001360 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001360:	b5b0      	push	{r4, r5, r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d102      	bne.n	8001374 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	f000 fbaf 	bl	8001ad2 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001374:	4bcf      	ldr	r3, [pc, #828]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	220c      	movs	r2, #12
 800137a:	4013      	ands	r3, r2
 800137c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800137e:	4bcd      	ldr	r3, [pc, #820]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 8001380:	68da      	ldr	r2, [r3, #12]
 8001382:	2380      	movs	r3, #128	; 0x80
 8001384:	025b      	lsls	r3, r3, #9
 8001386:	4013      	ands	r3, r2
 8001388:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2201      	movs	r2, #1
 8001390:	4013      	ands	r3, r2
 8001392:	d100      	bne.n	8001396 <HAL_RCC_OscConfig+0x36>
 8001394:	e07e      	b.n	8001494 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001396:	6a3b      	ldr	r3, [r7, #32]
 8001398:	2b08      	cmp	r3, #8
 800139a:	d007      	beq.n	80013ac <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800139c:	6a3b      	ldr	r3, [r7, #32]
 800139e:	2b0c      	cmp	r3, #12
 80013a0:	d112      	bne.n	80013c8 <HAL_RCC_OscConfig+0x68>
 80013a2:	69fa      	ldr	r2, [r7, #28]
 80013a4:	2380      	movs	r3, #128	; 0x80
 80013a6:	025b      	lsls	r3, r3, #9
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d10d      	bne.n	80013c8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ac:	4bc1      	ldr	r3, [pc, #772]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	2380      	movs	r3, #128	; 0x80
 80013b2:	029b      	lsls	r3, r3, #10
 80013b4:	4013      	ands	r3, r2
 80013b6:	d100      	bne.n	80013ba <HAL_RCC_OscConfig+0x5a>
 80013b8:	e06b      	b.n	8001492 <HAL_RCC_OscConfig+0x132>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d167      	bne.n	8001492 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	f000 fb85 	bl	8001ad2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	2380      	movs	r3, #128	; 0x80
 80013ce:	025b      	lsls	r3, r3, #9
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d107      	bne.n	80013e4 <HAL_RCC_OscConfig+0x84>
 80013d4:	4bb7      	ldr	r3, [pc, #732]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4bb6      	ldr	r3, [pc, #728]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 80013da:	2180      	movs	r1, #128	; 0x80
 80013dc:	0249      	lsls	r1, r1, #9
 80013de:	430a      	orrs	r2, r1
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	e027      	b.n	8001434 <HAL_RCC_OscConfig+0xd4>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	23a0      	movs	r3, #160	; 0xa0
 80013ea:	02db      	lsls	r3, r3, #11
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d10e      	bne.n	800140e <HAL_RCC_OscConfig+0xae>
 80013f0:	4bb0      	ldr	r3, [pc, #704]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4baf      	ldr	r3, [pc, #700]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 80013f6:	2180      	movs	r1, #128	; 0x80
 80013f8:	02c9      	lsls	r1, r1, #11
 80013fa:	430a      	orrs	r2, r1
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	4bad      	ldr	r3, [pc, #692]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	4bac      	ldr	r3, [pc, #688]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 8001404:	2180      	movs	r1, #128	; 0x80
 8001406:	0249      	lsls	r1, r1, #9
 8001408:	430a      	orrs	r2, r1
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	e012      	b.n	8001434 <HAL_RCC_OscConfig+0xd4>
 800140e:	4ba9      	ldr	r3, [pc, #676]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	4ba8      	ldr	r3, [pc, #672]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 8001414:	49a8      	ldr	r1, [pc, #672]	; (80016b8 <HAL_RCC_OscConfig+0x358>)
 8001416:	400a      	ands	r2, r1
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	4ba6      	ldr	r3, [pc, #664]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	2380      	movs	r3, #128	; 0x80
 8001420:	025b      	lsls	r3, r3, #9
 8001422:	4013      	ands	r3, r2
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	4ba2      	ldr	r3, [pc, #648]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4ba1      	ldr	r3, [pc, #644]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 800142e:	49a3      	ldr	r1, [pc, #652]	; (80016bc <HAL_RCC_OscConfig+0x35c>)
 8001430:	400a      	ands	r2, r1
 8001432:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d015      	beq.n	8001468 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143c:	f7ff fb1c 	bl	8000a78 <HAL_GetTick>
 8001440:	0003      	movs	r3, r0
 8001442:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001444:	e009      	b.n	800145a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001446:	f7ff fb17 	bl	8000a78 <HAL_GetTick>
 800144a:	0002      	movs	r2, r0
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b64      	cmp	r3, #100	; 0x64
 8001452:	d902      	bls.n	800145a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	f000 fb3c 	bl	8001ad2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800145a:	4b96      	ldr	r3, [pc, #600]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	2380      	movs	r3, #128	; 0x80
 8001460:	029b      	lsls	r3, r3, #10
 8001462:	4013      	ands	r3, r2
 8001464:	d0ef      	beq.n	8001446 <HAL_RCC_OscConfig+0xe6>
 8001466:	e015      	b.n	8001494 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff fb06 	bl	8000a78 <HAL_GetTick>
 800146c:	0003      	movs	r3, r0
 800146e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001472:	f7ff fb01 	bl	8000a78 <HAL_GetTick>
 8001476:	0002      	movs	r2, r0
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b64      	cmp	r3, #100	; 0x64
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e326      	b.n	8001ad2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001484:	4b8b      	ldr	r3, [pc, #556]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	029b      	lsls	r3, r3, #10
 800148c:	4013      	ands	r3, r2
 800148e:	d1f0      	bne.n	8001472 <HAL_RCC_OscConfig+0x112>
 8001490:	e000      	b.n	8001494 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001492:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2202      	movs	r2, #2
 800149a:	4013      	ands	r3, r2
 800149c:	d100      	bne.n	80014a0 <HAL_RCC_OscConfig+0x140>
 800149e:	e08b      	b.n	80015b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014a6:	6a3b      	ldr	r3, [r7, #32]
 80014a8:	2b04      	cmp	r3, #4
 80014aa:	d005      	beq.n	80014b8 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014ac:	6a3b      	ldr	r3, [r7, #32]
 80014ae:	2b0c      	cmp	r3, #12
 80014b0:	d13e      	bne.n	8001530 <HAL_RCC_OscConfig+0x1d0>
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d13b      	bne.n	8001530 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80014b8:	4b7e      	ldr	r3, [pc, #504]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2204      	movs	r2, #4
 80014be:	4013      	ands	r3, r2
 80014c0:	d004      	beq.n	80014cc <HAL_RCC_OscConfig+0x16c>
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d101      	bne.n	80014cc <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e302      	b.n	8001ad2 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014cc:	4b79      	ldr	r3, [pc, #484]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	4a7b      	ldr	r2, [pc, #492]	; (80016c0 <HAL_RCC_OscConfig+0x360>)
 80014d2:	4013      	ands	r3, r2
 80014d4:	0019      	movs	r1, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	021a      	lsls	r2, r3, #8
 80014dc:	4b75      	ldr	r3, [pc, #468]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 80014de:	430a      	orrs	r2, r1
 80014e0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80014e2:	4b74      	ldr	r3, [pc, #464]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2209      	movs	r2, #9
 80014e8:	4393      	bics	r3, r2
 80014ea:	0019      	movs	r1, r3
 80014ec:	4b71      	ldr	r3, [pc, #452]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 80014ee:	697a      	ldr	r2, [r7, #20]
 80014f0:	430a      	orrs	r2, r1
 80014f2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014f4:	f000 fc40 	bl	8001d78 <HAL_RCC_GetSysClockFreq>
 80014f8:	0001      	movs	r1, r0
 80014fa:	4b6e      	ldr	r3, [pc, #440]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	091b      	lsrs	r3, r3, #4
 8001500:	220f      	movs	r2, #15
 8001502:	4013      	ands	r3, r2
 8001504:	4a6f      	ldr	r2, [pc, #444]	; (80016c4 <HAL_RCC_OscConfig+0x364>)
 8001506:	5cd3      	ldrb	r3, [r2, r3]
 8001508:	000a      	movs	r2, r1
 800150a:	40da      	lsrs	r2, r3
 800150c:	4b6e      	ldr	r3, [pc, #440]	; (80016c8 <HAL_RCC_OscConfig+0x368>)
 800150e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001510:	4b6e      	ldr	r3, [pc, #440]	; (80016cc <HAL_RCC_OscConfig+0x36c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2513      	movs	r5, #19
 8001516:	197c      	adds	r4, r7, r5
 8001518:	0018      	movs	r0, r3
 800151a:	f7ff fa67 	bl	80009ec <HAL_InitTick>
 800151e:	0003      	movs	r3, r0
 8001520:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001522:	197b      	adds	r3, r7, r5
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d046      	beq.n	80015b8 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800152a:	197b      	adds	r3, r7, r5
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	e2d0      	b.n	8001ad2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d027      	beq.n	8001586 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001536:	4b5f      	ldr	r3, [pc, #380]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2209      	movs	r2, #9
 800153c:	4393      	bics	r3, r2
 800153e:	0019      	movs	r1, r3
 8001540:	4b5c      	ldr	r3, [pc, #368]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	430a      	orrs	r2, r1
 8001546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001548:	f7ff fa96 	bl	8000a78 <HAL_GetTick>
 800154c:	0003      	movs	r3, r0
 800154e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001552:	f7ff fa91 	bl	8000a78 <HAL_GetTick>
 8001556:	0002      	movs	r2, r0
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e2b6      	b.n	8001ad2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001564:	4b53      	ldr	r3, [pc, #332]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2204      	movs	r2, #4
 800156a:	4013      	ands	r3, r2
 800156c:	d0f1      	beq.n	8001552 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156e:	4b51      	ldr	r3, [pc, #324]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	4a53      	ldr	r2, [pc, #332]	; (80016c0 <HAL_RCC_OscConfig+0x360>)
 8001574:	4013      	ands	r3, r2
 8001576:	0019      	movs	r1, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	021a      	lsls	r2, r3, #8
 800157e:	4b4d      	ldr	r3, [pc, #308]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 8001580:	430a      	orrs	r2, r1
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	e018      	b.n	80015b8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001586:	4b4b      	ldr	r3, [pc, #300]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	4b4a      	ldr	r3, [pc, #296]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 800158c:	2101      	movs	r1, #1
 800158e:	438a      	bics	r2, r1
 8001590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001592:	f7ff fa71 	bl	8000a78 <HAL_GetTick>
 8001596:	0003      	movs	r3, r0
 8001598:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800159c:	f7ff fa6c 	bl	8000a78 <HAL_GetTick>
 80015a0:	0002      	movs	r2, r0
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e291      	b.n	8001ad2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015ae:	4b41      	ldr	r3, [pc, #260]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2204      	movs	r2, #4
 80015b4:	4013      	ands	r3, r2
 80015b6:	d1f1      	bne.n	800159c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2210      	movs	r2, #16
 80015be:	4013      	ands	r3, r2
 80015c0:	d100      	bne.n	80015c4 <HAL_RCC_OscConfig+0x264>
 80015c2:	e0a1      	b.n	8001708 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015c4:	6a3b      	ldr	r3, [r7, #32]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d140      	bne.n	800164c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015ca:	4b3a      	ldr	r3, [pc, #232]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4013      	ands	r3, r2
 80015d4:	d005      	beq.n	80015e2 <HAL_RCC_OscConfig+0x282>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e277      	b.n	8001ad2 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015e2:	4b34      	ldr	r3, [pc, #208]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	4a3a      	ldr	r2, [pc, #232]	; (80016d0 <HAL_RCC_OscConfig+0x370>)
 80015e8:	4013      	ands	r3, r2
 80015ea:	0019      	movs	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015f0:	4b30      	ldr	r3, [pc, #192]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 80015f2:	430a      	orrs	r2, r1
 80015f4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015f6:	4b2f      	ldr	r3, [pc, #188]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	021b      	lsls	r3, r3, #8
 80015fc:	0a19      	lsrs	r1, r3, #8
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	061a      	lsls	r2, r3, #24
 8001604:	4b2b      	ldr	r3, [pc, #172]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 8001606:	430a      	orrs	r2, r1
 8001608:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160e:	0b5b      	lsrs	r3, r3, #13
 8001610:	3301      	adds	r3, #1
 8001612:	2280      	movs	r2, #128	; 0x80
 8001614:	0212      	lsls	r2, r2, #8
 8001616:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001618:	4b26      	ldr	r3, [pc, #152]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	091b      	lsrs	r3, r3, #4
 800161e:	210f      	movs	r1, #15
 8001620:	400b      	ands	r3, r1
 8001622:	4928      	ldr	r1, [pc, #160]	; (80016c4 <HAL_RCC_OscConfig+0x364>)
 8001624:	5ccb      	ldrb	r3, [r1, r3]
 8001626:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001628:	4b27      	ldr	r3, [pc, #156]	; (80016c8 <HAL_RCC_OscConfig+0x368>)
 800162a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800162c:	4b27      	ldr	r3, [pc, #156]	; (80016cc <HAL_RCC_OscConfig+0x36c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2513      	movs	r5, #19
 8001632:	197c      	adds	r4, r7, r5
 8001634:	0018      	movs	r0, r3
 8001636:	f7ff f9d9 	bl	80009ec <HAL_InitTick>
 800163a:	0003      	movs	r3, r0
 800163c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800163e:	197b      	adds	r3, r7, r5
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d060      	beq.n	8001708 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001646:	197b      	adds	r3, r7, r5
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	e242      	b.n	8001ad2 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	69db      	ldr	r3, [r3, #28]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d03f      	beq.n	80016d4 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001654:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 800165a:	2180      	movs	r1, #128	; 0x80
 800165c:	0049      	lsls	r1, r1, #1
 800165e:	430a      	orrs	r2, r1
 8001660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001662:	f7ff fa09 	bl	8000a78 <HAL_GetTick>
 8001666:	0003      	movs	r3, r0
 8001668:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800166c:	f7ff fa04 	bl	8000a78 <HAL_GetTick>
 8001670:	0002      	movs	r2, r0
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e229      	b.n	8001ad2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800167e:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	2380      	movs	r3, #128	; 0x80
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4013      	ands	r3, r2
 8001688:	d0f0      	beq.n	800166c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800168a:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	4a10      	ldr	r2, [pc, #64]	; (80016d0 <HAL_RCC_OscConfig+0x370>)
 8001690:	4013      	ands	r3, r2
 8001692:	0019      	movs	r1, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 800169a:	430a      	orrs	r2, r1
 800169c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800169e:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	021b      	lsls	r3, r3, #8
 80016a4:	0a19      	lsrs	r1, r3, #8
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	061a      	lsls	r2, r3, #24
 80016ac:	4b01      	ldr	r3, [pc, #4]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 80016ae:	430a      	orrs	r2, r1
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	e029      	b.n	8001708 <HAL_RCC_OscConfig+0x3a8>
 80016b4:	40021000 	.word	0x40021000
 80016b8:	fffeffff 	.word	0xfffeffff
 80016bc:	fffbffff 	.word	0xfffbffff
 80016c0:	ffffe0ff 	.word	0xffffe0ff
 80016c4:	080030b4 	.word	0x080030b4
 80016c8:	20000000 	.word	0x20000000
 80016cc:	20000004 	.word	0x20000004
 80016d0:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016d4:	4bbd      	ldr	r3, [pc, #756]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4bbc      	ldr	r3, [pc, #752]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 80016da:	49bd      	ldr	r1, [pc, #756]	; (80019d0 <HAL_RCC_OscConfig+0x670>)
 80016dc:	400a      	ands	r2, r1
 80016de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7ff f9ca 	bl	8000a78 <HAL_GetTick>
 80016e4:	0003      	movs	r3, r0
 80016e6:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016ea:	f7ff f9c5 	bl	8000a78 <HAL_GetTick>
 80016ee:	0002      	movs	r2, r0
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e1ea      	b.n	8001ad2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80016fc:	4bb3      	ldr	r3, [pc, #716]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4013      	ands	r3, r2
 8001706:	d1f0      	bne.n	80016ea <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2208      	movs	r2, #8
 800170e:	4013      	ands	r3, r2
 8001710:	d036      	beq.n	8001780 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d019      	beq.n	800174e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800171a:	4bac      	ldr	r3, [pc, #688]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 800171c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800171e:	4bab      	ldr	r3, [pc, #684]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 8001720:	2101      	movs	r1, #1
 8001722:	430a      	orrs	r2, r1
 8001724:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001726:	f7ff f9a7 	bl	8000a78 <HAL_GetTick>
 800172a:	0003      	movs	r3, r0
 800172c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001730:	f7ff f9a2 	bl	8000a78 <HAL_GetTick>
 8001734:	0002      	movs	r2, r0
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e1c7      	b.n	8001ad2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001742:	4ba2      	ldr	r3, [pc, #648]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 8001744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001746:	2202      	movs	r2, #2
 8001748:	4013      	ands	r3, r2
 800174a:	d0f1      	beq.n	8001730 <HAL_RCC_OscConfig+0x3d0>
 800174c:	e018      	b.n	8001780 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800174e:	4b9f      	ldr	r3, [pc, #636]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 8001750:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001752:	4b9e      	ldr	r3, [pc, #632]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 8001754:	2101      	movs	r1, #1
 8001756:	438a      	bics	r2, r1
 8001758:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175a:	f7ff f98d 	bl	8000a78 <HAL_GetTick>
 800175e:	0003      	movs	r3, r0
 8001760:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001764:	f7ff f988 	bl	8000a78 <HAL_GetTick>
 8001768:	0002      	movs	r2, r0
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e1ad      	b.n	8001ad2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001776:	4b95      	ldr	r3, [pc, #596]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 8001778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800177a:	2202      	movs	r2, #2
 800177c:	4013      	ands	r3, r2
 800177e:	d1f1      	bne.n	8001764 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2204      	movs	r2, #4
 8001786:	4013      	ands	r3, r2
 8001788:	d100      	bne.n	800178c <HAL_RCC_OscConfig+0x42c>
 800178a:	e0ae      	b.n	80018ea <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800178c:	2027      	movs	r0, #39	; 0x27
 800178e:	183b      	adds	r3, r7, r0
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001794:	4b8d      	ldr	r3, [pc, #564]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 8001796:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	055b      	lsls	r3, r3, #21
 800179c:	4013      	ands	r3, r2
 800179e:	d109      	bne.n	80017b4 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017a0:	4b8a      	ldr	r3, [pc, #552]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 80017a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017a4:	4b89      	ldr	r3, [pc, #548]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 80017a6:	2180      	movs	r1, #128	; 0x80
 80017a8:	0549      	lsls	r1, r1, #21
 80017aa:	430a      	orrs	r2, r1
 80017ac:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80017ae:	183b      	adds	r3, r7, r0
 80017b0:	2201      	movs	r2, #1
 80017b2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b4:	4b87      	ldr	r3, [pc, #540]	; (80019d4 <HAL_RCC_OscConfig+0x674>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4013      	ands	r3, r2
 80017be:	d11a      	bne.n	80017f6 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017c0:	4b84      	ldr	r3, [pc, #528]	; (80019d4 <HAL_RCC_OscConfig+0x674>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b83      	ldr	r3, [pc, #524]	; (80019d4 <HAL_RCC_OscConfig+0x674>)
 80017c6:	2180      	movs	r1, #128	; 0x80
 80017c8:	0049      	lsls	r1, r1, #1
 80017ca:	430a      	orrs	r2, r1
 80017cc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ce:	f7ff f953 	bl	8000a78 <HAL_GetTick>
 80017d2:	0003      	movs	r3, r0
 80017d4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d8:	f7ff f94e 	bl	8000a78 <HAL_GetTick>
 80017dc:	0002      	movs	r2, r0
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b64      	cmp	r3, #100	; 0x64
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e173      	b.n	8001ad2 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ea:	4b7a      	ldr	r3, [pc, #488]	; (80019d4 <HAL_RCC_OscConfig+0x674>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	4013      	ands	r3, r2
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	2380      	movs	r3, #128	; 0x80
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	429a      	cmp	r2, r3
 8001800:	d107      	bne.n	8001812 <HAL_RCC_OscConfig+0x4b2>
 8001802:	4b72      	ldr	r3, [pc, #456]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 8001804:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001806:	4b71      	ldr	r3, [pc, #452]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 8001808:	2180      	movs	r1, #128	; 0x80
 800180a:	0049      	lsls	r1, r1, #1
 800180c:	430a      	orrs	r2, r1
 800180e:	651a      	str	r2, [r3, #80]	; 0x50
 8001810:	e031      	b.n	8001876 <HAL_RCC_OscConfig+0x516>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10c      	bne.n	8001834 <HAL_RCC_OscConfig+0x4d4>
 800181a:	4b6c      	ldr	r3, [pc, #432]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 800181c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800181e:	4b6b      	ldr	r3, [pc, #428]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 8001820:	496b      	ldr	r1, [pc, #428]	; (80019d0 <HAL_RCC_OscConfig+0x670>)
 8001822:	400a      	ands	r2, r1
 8001824:	651a      	str	r2, [r3, #80]	; 0x50
 8001826:	4b69      	ldr	r3, [pc, #420]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 8001828:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800182a:	4b68      	ldr	r3, [pc, #416]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 800182c:	496a      	ldr	r1, [pc, #424]	; (80019d8 <HAL_RCC_OscConfig+0x678>)
 800182e:	400a      	ands	r2, r1
 8001830:	651a      	str	r2, [r3, #80]	; 0x50
 8001832:	e020      	b.n	8001876 <HAL_RCC_OscConfig+0x516>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	23a0      	movs	r3, #160	; 0xa0
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	429a      	cmp	r2, r3
 800183e:	d10e      	bne.n	800185e <HAL_RCC_OscConfig+0x4fe>
 8001840:	4b62      	ldr	r3, [pc, #392]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 8001842:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001844:	4b61      	ldr	r3, [pc, #388]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 8001846:	2180      	movs	r1, #128	; 0x80
 8001848:	00c9      	lsls	r1, r1, #3
 800184a:	430a      	orrs	r2, r1
 800184c:	651a      	str	r2, [r3, #80]	; 0x50
 800184e:	4b5f      	ldr	r3, [pc, #380]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 8001850:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001852:	4b5e      	ldr	r3, [pc, #376]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 8001854:	2180      	movs	r1, #128	; 0x80
 8001856:	0049      	lsls	r1, r1, #1
 8001858:	430a      	orrs	r2, r1
 800185a:	651a      	str	r2, [r3, #80]	; 0x50
 800185c:	e00b      	b.n	8001876 <HAL_RCC_OscConfig+0x516>
 800185e:	4b5b      	ldr	r3, [pc, #364]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 8001860:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001862:	4b5a      	ldr	r3, [pc, #360]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 8001864:	495a      	ldr	r1, [pc, #360]	; (80019d0 <HAL_RCC_OscConfig+0x670>)
 8001866:	400a      	ands	r2, r1
 8001868:	651a      	str	r2, [r3, #80]	; 0x50
 800186a:	4b58      	ldr	r3, [pc, #352]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 800186c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800186e:	4b57      	ldr	r3, [pc, #348]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 8001870:	4959      	ldr	r1, [pc, #356]	; (80019d8 <HAL_RCC_OscConfig+0x678>)
 8001872:	400a      	ands	r2, r1
 8001874:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d015      	beq.n	80018aa <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187e:	f7ff f8fb 	bl	8000a78 <HAL_GetTick>
 8001882:	0003      	movs	r3, r0
 8001884:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001886:	e009      	b.n	800189c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001888:	f7ff f8f6 	bl	8000a78 <HAL_GetTick>
 800188c:	0002      	movs	r2, r0
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	4a52      	ldr	r2, [pc, #328]	; (80019dc <HAL_RCC_OscConfig+0x67c>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e11a      	b.n	8001ad2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800189c:	4b4b      	ldr	r3, [pc, #300]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 800189e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018a0:	2380      	movs	r3, #128	; 0x80
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4013      	ands	r3, r2
 80018a6:	d0ef      	beq.n	8001888 <HAL_RCC_OscConfig+0x528>
 80018a8:	e014      	b.n	80018d4 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018aa:	f7ff f8e5 	bl	8000a78 <HAL_GetTick>
 80018ae:	0003      	movs	r3, r0
 80018b0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018b2:	e009      	b.n	80018c8 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018b4:	f7ff f8e0 	bl	8000a78 <HAL_GetTick>
 80018b8:	0002      	movs	r2, r0
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	4a47      	ldr	r2, [pc, #284]	; (80019dc <HAL_RCC_OscConfig+0x67c>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e104      	b.n	8001ad2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018c8:	4b40      	ldr	r3, [pc, #256]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 80018ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018cc:	2380      	movs	r3, #128	; 0x80
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4013      	ands	r3, r2
 80018d2:	d1ef      	bne.n	80018b4 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018d4:	2327      	movs	r3, #39	; 0x27
 80018d6:	18fb      	adds	r3, r7, r3
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d105      	bne.n	80018ea <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018de:	4b3b      	ldr	r3, [pc, #236]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 80018e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018e2:	4b3a      	ldr	r3, [pc, #232]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 80018e4:	493e      	ldr	r1, [pc, #248]	; (80019e0 <HAL_RCC_OscConfig+0x680>)
 80018e6:	400a      	ands	r2, r1
 80018e8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2220      	movs	r2, #32
 80018f0:	4013      	ands	r3, r2
 80018f2:	d049      	beq.n	8001988 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d026      	beq.n	800194a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80018fc:	4b33      	ldr	r3, [pc, #204]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	4b32      	ldr	r3, [pc, #200]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 8001902:	2101      	movs	r1, #1
 8001904:	430a      	orrs	r2, r1
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	4b30      	ldr	r3, [pc, #192]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 800190a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800190c:	4b2f      	ldr	r3, [pc, #188]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 800190e:	2101      	movs	r1, #1
 8001910:	430a      	orrs	r2, r1
 8001912:	635a      	str	r2, [r3, #52]	; 0x34
 8001914:	4b33      	ldr	r3, [pc, #204]	; (80019e4 <HAL_RCC_OscConfig+0x684>)
 8001916:	6a1a      	ldr	r2, [r3, #32]
 8001918:	4b32      	ldr	r3, [pc, #200]	; (80019e4 <HAL_RCC_OscConfig+0x684>)
 800191a:	2180      	movs	r1, #128	; 0x80
 800191c:	0189      	lsls	r1, r1, #6
 800191e:	430a      	orrs	r2, r1
 8001920:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001922:	f7ff f8a9 	bl	8000a78 <HAL_GetTick>
 8001926:	0003      	movs	r3, r0
 8001928:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800192c:	f7ff f8a4 	bl	8000a78 <HAL_GetTick>
 8001930:	0002      	movs	r2, r0
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e0c9      	b.n	8001ad2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800193e:	4b23      	ldr	r3, [pc, #140]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	2202      	movs	r2, #2
 8001944:	4013      	ands	r3, r2
 8001946:	d0f1      	beq.n	800192c <HAL_RCC_OscConfig+0x5cc>
 8001948:	e01e      	b.n	8001988 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800194a:	4b20      	ldr	r3, [pc, #128]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 800194c:	689a      	ldr	r2, [r3, #8]
 800194e:	4b1f      	ldr	r3, [pc, #124]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 8001950:	2101      	movs	r1, #1
 8001952:	438a      	bics	r2, r1
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	4b23      	ldr	r3, [pc, #140]	; (80019e4 <HAL_RCC_OscConfig+0x684>)
 8001958:	6a1a      	ldr	r2, [r3, #32]
 800195a:	4b22      	ldr	r3, [pc, #136]	; (80019e4 <HAL_RCC_OscConfig+0x684>)
 800195c:	4922      	ldr	r1, [pc, #136]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 800195e:	400a      	ands	r2, r1
 8001960:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001962:	f7ff f889 	bl	8000a78 <HAL_GetTick>
 8001966:	0003      	movs	r3, r0
 8001968:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800196c:	f7ff f884 	bl	8000a78 <HAL_GetTick>
 8001970:	0002      	movs	r2, r0
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e0a9      	b.n	8001ad2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800197e:	4b13      	ldr	r3, [pc, #76]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	2202      	movs	r2, #2
 8001984:	4013      	ands	r3, r2
 8001986:	d1f1      	bne.n	800196c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198c:	2b00      	cmp	r3, #0
 800198e:	d100      	bne.n	8001992 <HAL_RCC_OscConfig+0x632>
 8001990:	e09e      	b.n	8001ad0 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001992:	6a3b      	ldr	r3, [r7, #32]
 8001994:	2b0c      	cmp	r3, #12
 8001996:	d100      	bne.n	800199a <HAL_RCC_OscConfig+0x63a>
 8001998:	e077      	b.n	8001a8a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d158      	bne.n	8001a54 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	4b09      	ldr	r3, [pc, #36]	; (80019cc <HAL_RCC_OscConfig+0x66c>)
 80019a8:	4910      	ldr	r1, [pc, #64]	; (80019ec <HAL_RCC_OscConfig+0x68c>)
 80019aa:	400a      	ands	r2, r1
 80019ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ae:	f7ff f863 	bl	8000a78 <HAL_GetTick>
 80019b2:	0003      	movs	r3, r0
 80019b4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019b6:	e01b      	b.n	80019f0 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b8:	f7ff f85e 	bl	8000a78 <HAL_GetTick>
 80019bc:	0002      	movs	r2, r0
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d914      	bls.n	80019f0 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e083      	b.n	8001ad2 <HAL_RCC_OscConfig+0x772>
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	40021000 	.word	0x40021000
 80019d0:	fffffeff 	.word	0xfffffeff
 80019d4:	40007000 	.word	0x40007000
 80019d8:	fffffbff 	.word	0xfffffbff
 80019dc:	00001388 	.word	0x00001388
 80019e0:	efffffff 	.word	0xefffffff
 80019e4:	40010000 	.word	0x40010000
 80019e8:	ffffdfff 	.word	0xffffdfff
 80019ec:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019f0:	4b3a      	ldr	r3, [pc, #232]	; (8001adc <HAL_RCC_OscConfig+0x77c>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	049b      	lsls	r3, r3, #18
 80019f8:	4013      	ands	r3, r2
 80019fa:	d1dd      	bne.n	80019b8 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019fc:	4b37      	ldr	r3, [pc, #220]	; (8001adc <HAL_RCC_OscConfig+0x77c>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	4a37      	ldr	r2, [pc, #220]	; (8001ae0 <HAL_RCC_OscConfig+0x780>)
 8001a02:	4013      	ands	r3, r2
 8001a04:	0019      	movs	r1, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a14:	431a      	orrs	r2, r3
 8001a16:	4b31      	ldr	r3, [pc, #196]	; (8001adc <HAL_RCC_OscConfig+0x77c>)
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a1c:	4b2f      	ldr	r3, [pc, #188]	; (8001adc <HAL_RCC_OscConfig+0x77c>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4b2e      	ldr	r3, [pc, #184]	; (8001adc <HAL_RCC_OscConfig+0x77c>)
 8001a22:	2180      	movs	r1, #128	; 0x80
 8001a24:	0449      	lsls	r1, r1, #17
 8001a26:	430a      	orrs	r2, r1
 8001a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2a:	f7ff f825 	bl	8000a78 <HAL_GetTick>
 8001a2e:	0003      	movs	r3, r0
 8001a30:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a34:	f7ff f820 	bl	8000a78 <HAL_GetTick>
 8001a38:	0002      	movs	r2, r0
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e045      	b.n	8001ad2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001a46:	4b25      	ldr	r3, [pc, #148]	; (8001adc <HAL_RCC_OscConfig+0x77c>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	049b      	lsls	r3, r3, #18
 8001a4e:	4013      	ands	r3, r2
 8001a50:	d0f0      	beq.n	8001a34 <HAL_RCC_OscConfig+0x6d4>
 8001a52:	e03d      	b.n	8001ad0 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a54:	4b21      	ldr	r3, [pc, #132]	; (8001adc <HAL_RCC_OscConfig+0x77c>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b20      	ldr	r3, [pc, #128]	; (8001adc <HAL_RCC_OscConfig+0x77c>)
 8001a5a:	4922      	ldr	r1, [pc, #136]	; (8001ae4 <HAL_RCC_OscConfig+0x784>)
 8001a5c:	400a      	ands	r2, r1
 8001a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a60:	f7ff f80a 	bl	8000a78 <HAL_GetTick>
 8001a64:	0003      	movs	r3, r0
 8001a66:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a6a:	f7ff f805 	bl	8000a78 <HAL_GetTick>
 8001a6e:	0002      	movs	r2, r0
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e02a      	b.n	8001ad2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a7c:	4b17      	ldr	r3, [pc, #92]	; (8001adc <HAL_RCC_OscConfig+0x77c>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	2380      	movs	r3, #128	; 0x80
 8001a82:	049b      	lsls	r3, r3, #18
 8001a84:	4013      	ands	r3, r2
 8001a86:	d1f0      	bne.n	8001a6a <HAL_RCC_OscConfig+0x70a>
 8001a88:	e022      	b.n	8001ad0 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d101      	bne.n	8001a96 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e01d      	b.n	8001ad2 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a96:	4b11      	ldr	r3, [pc, #68]	; (8001adc <HAL_RCC_OscConfig+0x77c>)
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a9c:	69fa      	ldr	r2, [r7, #28]
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	025b      	lsls	r3, r3, #9
 8001aa2:	401a      	ands	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d10f      	bne.n	8001acc <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001aac:	69fa      	ldr	r2, [r7, #28]
 8001aae:	23f0      	movs	r3, #240	; 0xf0
 8001ab0:	039b      	lsls	r3, r3, #14
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d107      	bne.n	8001acc <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001abc:	69fa      	ldr	r2, [r7, #28]
 8001abe:	23c0      	movs	r3, #192	; 0xc0
 8001ac0:	041b      	lsls	r3, r3, #16
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d001      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e000      	b.n	8001ad2 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	b00a      	add	sp, #40	; 0x28
 8001ad8:	bdb0      	pop	{r4, r5, r7, pc}
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	ff02ffff 	.word	0xff02ffff
 8001ae4:	feffffff 	.word	0xfeffffff

08001ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae8:	b5b0      	push	{r4, r5, r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e128      	b.n	8001d4e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001afc:	4b96      	ldr	r3, [pc, #600]	; (8001d58 <HAL_RCC_ClockConfig+0x270>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2201      	movs	r2, #1
 8001b02:	4013      	ands	r3, r2
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d91e      	bls.n	8001b48 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0a:	4b93      	ldr	r3, [pc, #588]	; (8001d58 <HAL_RCC_ClockConfig+0x270>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	4393      	bics	r3, r2
 8001b12:	0019      	movs	r1, r3
 8001b14:	4b90      	ldr	r3, [pc, #576]	; (8001d58 <HAL_RCC_ClockConfig+0x270>)
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b1c:	f7fe ffac 	bl	8000a78 <HAL_GetTick>
 8001b20:	0003      	movs	r3, r0
 8001b22:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b24:	e009      	b.n	8001b3a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b26:	f7fe ffa7 	bl	8000a78 <HAL_GetTick>
 8001b2a:	0002      	movs	r2, r0
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	4a8a      	ldr	r2, [pc, #552]	; (8001d5c <HAL_RCC_ClockConfig+0x274>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e109      	b.n	8001d4e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3a:	4b87      	ldr	r3, [pc, #540]	; (8001d58 <HAL_RCC_ClockConfig+0x270>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	4013      	ands	r3, r2
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d1ee      	bne.n	8001b26 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d009      	beq.n	8001b66 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b52:	4b83      	ldr	r3, [pc, #524]	; (8001d60 <HAL_RCC_ClockConfig+0x278>)
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	22f0      	movs	r2, #240	; 0xf0
 8001b58:	4393      	bics	r3, r2
 8001b5a:	0019      	movs	r1, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	4b7f      	ldr	r3, [pc, #508]	; (8001d60 <HAL_RCC_ClockConfig+0x278>)
 8001b62:	430a      	orrs	r2, r1
 8001b64:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d100      	bne.n	8001b72 <HAL_RCC_ClockConfig+0x8a>
 8001b70:	e089      	b.n	8001c86 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d107      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b7a:	4b79      	ldr	r3, [pc, #484]	; (8001d60 <HAL_RCC_ClockConfig+0x278>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	2380      	movs	r3, #128	; 0x80
 8001b80:	029b      	lsls	r3, r3, #10
 8001b82:	4013      	ands	r3, r2
 8001b84:	d120      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e0e1      	b.n	8001d4e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b03      	cmp	r3, #3
 8001b90:	d107      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b92:	4b73      	ldr	r3, [pc, #460]	; (8001d60 <HAL_RCC_ClockConfig+0x278>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	049b      	lsls	r3, r3, #18
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d114      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e0d5      	b.n	8001d4e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d106      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001baa:	4b6d      	ldr	r3, [pc, #436]	; (8001d60 <HAL_RCC_ClockConfig+0x278>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2204      	movs	r2, #4
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	d109      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0ca      	b.n	8001d4e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001bb8:	4b69      	ldr	r3, [pc, #420]	; (8001d60 <HAL_RCC_ClockConfig+0x278>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	2380      	movs	r3, #128	; 0x80
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d101      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e0c2      	b.n	8001d4e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bc8:	4b65      	ldr	r3, [pc, #404]	; (8001d60 <HAL_RCC_ClockConfig+0x278>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	2203      	movs	r2, #3
 8001bce:	4393      	bics	r3, r2
 8001bd0:	0019      	movs	r1, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	4b62      	ldr	r3, [pc, #392]	; (8001d60 <HAL_RCC_ClockConfig+0x278>)
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bdc:	f7fe ff4c 	bl	8000a78 <HAL_GetTick>
 8001be0:	0003      	movs	r3, r0
 8001be2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d111      	bne.n	8001c10 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bec:	e009      	b.n	8001c02 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bee:	f7fe ff43 	bl	8000a78 <HAL_GetTick>
 8001bf2:	0002      	movs	r2, r0
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	4a58      	ldr	r2, [pc, #352]	; (8001d5c <HAL_RCC_ClockConfig+0x274>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e0a5      	b.n	8001d4e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c02:	4b57      	ldr	r3, [pc, #348]	; (8001d60 <HAL_RCC_ClockConfig+0x278>)
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	220c      	movs	r2, #12
 8001c08:	4013      	ands	r3, r2
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d1ef      	bne.n	8001bee <HAL_RCC_ClockConfig+0x106>
 8001c0e:	e03a      	b.n	8001c86 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b03      	cmp	r3, #3
 8001c16:	d111      	bne.n	8001c3c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c18:	e009      	b.n	8001c2e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c1a:	f7fe ff2d 	bl	8000a78 <HAL_GetTick>
 8001c1e:	0002      	movs	r2, r0
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	4a4d      	ldr	r2, [pc, #308]	; (8001d5c <HAL_RCC_ClockConfig+0x274>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e08f      	b.n	8001d4e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c2e:	4b4c      	ldr	r3, [pc, #304]	; (8001d60 <HAL_RCC_ClockConfig+0x278>)
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	220c      	movs	r2, #12
 8001c34:	4013      	ands	r3, r2
 8001c36:	2b0c      	cmp	r3, #12
 8001c38:	d1ef      	bne.n	8001c1a <HAL_RCC_ClockConfig+0x132>
 8001c3a:	e024      	b.n	8001c86 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d11b      	bne.n	8001c7c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c44:	e009      	b.n	8001c5a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c46:	f7fe ff17 	bl	8000a78 <HAL_GetTick>
 8001c4a:	0002      	movs	r2, r0
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	4a42      	ldr	r2, [pc, #264]	; (8001d5c <HAL_RCC_ClockConfig+0x274>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e079      	b.n	8001d4e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c5a:	4b41      	ldr	r3, [pc, #260]	; (8001d60 <HAL_RCC_ClockConfig+0x278>)
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	220c      	movs	r2, #12
 8001c60:	4013      	ands	r3, r2
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	d1ef      	bne.n	8001c46 <HAL_RCC_ClockConfig+0x15e>
 8001c66:	e00e      	b.n	8001c86 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c68:	f7fe ff06 	bl	8000a78 <HAL_GetTick>
 8001c6c:	0002      	movs	r2, r0
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	4a3a      	ldr	r2, [pc, #232]	; (8001d5c <HAL_RCC_ClockConfig+0x274>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e068      	b.n	8001d4e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c7c:	4b38      	ldr	r3, [pc, #224]	; (8001d60 <HAL_RCC_ClockConfig+0x278>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	220c      	movs	r2, #12
 8001c82:	4013      	ands	r3, r2
 8001c84:	d1f0      	bne.n	8001c68 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c86:	4b34      	ldr	r3, [pc, #208]	; (8001d58 <HAL_RCC_ClockConfig+0x270>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d21e      	bcs.n	8001cd2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c94:	4b30      	ldr	r3, [pc, #192]	; (8001d58 <HAL_RCC_ClockConfig+0x270>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	4393      	bics	r3, r2
 8001c9c:	0019      	movs	r1, r3
 8001c9e:	4b2e      	ldr	r3, [pc, #184]	; (8001d58 <HAL_RCC_ClockConfig+0x270>)
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ca6:	f7fe fee7 	bl	8000a78 <HAL_GetTick>
 8001caa:	0003      	movs	r3, r0
 8001cac:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cae:	e009      	b.n	8001cc4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb0:	f7fe fee2 	bl	8000a78 <HAL_GetTick>
 8001cb4:	0002      	movs	r2, r0
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	4a28      	ldr	r2, [pc, #160]	; (8001d5c <HAL_RCC_ClockConfig+0x274>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e044      	b.n	8001d4e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc4:	4b24      	ldr	r3, [pc, #144]	; (8001d58 <HAL_RCC_ClockConfig+0x270>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	4013      	ands	r3, r2
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d1ee      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2204      	movs	r2, #4
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d009      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cdc:	4b20      	ldr	r3, [pc, #128]	; (8001d60 <HAL_RCC_ClockConfig+0x278>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	4a20      	ldr	r2, [pc, #128]	; (8001d64 <HAL_RCC_ClockConfig+0x27c>)
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	0019      	movs	r1, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <HAL_RCC_ClockConfig+0x278>)
 8001cec:	430a      	orrs	r2, r1
 8001cee:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2208      	movs	r2, #8
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d00a      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cfa:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <HAL_RCC_ClockConfig+0x278>)
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	4a1a      	ldr	r2, [pc, #104]	; (8001d68 <HAL_RCC_ClockConfig+0x280>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	0019      	movs	r1, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	00da      	lsls	r2, r3, #3
 8001d0a:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <HAL_RCC_ClockConfig+0x278>)
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d10:	f000 f832 	bl	8001d78 <HAL_RCC_GetSysClockFreq>
 8001d14:	0001      	movs	r1, r0
 8001d16:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <HAL_RCC_ClockConfig+0x278>)
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	091b      	lsrs	r3, r3, #4
 8001d1c:	220f      	movs	r2, #15
 8001d1e:	4013      	ands	r3, r2
 8001d20:	4a12      	ldr	r2, [pc, #72]	; (8001d6c <HAL_RCC_ClockConfig+0x284>)
 8001d22:	5cd3      	ldrb	r3, [r2, r3]
 8001d24:	000a      	movs	r2, r1
 8001d26:	40da      	lsrs	r2, r3
 8001d28:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <HAL_RCC_ClockConfig+0x288>)
 8001d2a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d2c:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <HAL_RCC_ClockConfig+0x28c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	250b      	movs	r5, #11
 8001d32:	197c      	adds	r4, r7, r5
 8001d34:	0018      	movs	r0, r3
 8001d36:	f7fe fe59 	bl	80009ec <HAL_InitTick>
 8001d3a:	0003      	movs	r3, r0
 8001d3c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001d3e:	197b      	adds	r3, r7, r5
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d002      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001d46:	197b      	adds	r3, r7, r5
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	e000      	b.n	8001d4e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	0018      	movs	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	b004      	add	sp, #16
 8001d54:	bdb0      	pop	{r4, r5, r7, pc}
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	40022000 	.word	0x40022000
 8001d5c:	00001388 	.word	0x00001388
 8001d60:	40021000 	.word	0x40021000
 8001d64:	fffff8ff 	.word	0xfffff8ff
 8001d68:	ffffc7ff 	.word	0xffffc7ff
 8001d6c:	080030b4 	.word	0x080030b4
 8001d70:	20000000 	.word	0x20000000
 8001d74:	20000004 	.word	0x20000004

08001d78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d78:	b5b0      	push	{r4, r5, r7, lr}
 8001d7a:	b08e      	sub	sp, #56	; 0x38
 8001d7c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001d7e:	4b4c      	ldr	r3, [pc, #304]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d86:	230c      	movs	r3, #12
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b0c      	cmp	r3, #12
 8001d8c:	d014      	beq.n	8001db8 <HAL_RCC_GetSysClockFreq+0x40>
 8001d8e:	d900      	bls.n	8001d92 <HAL_RCC_GetSysClockFreq+0x1a>
 8001d90:	e07b      	b.n	8001e8a <HAL_RCC_GetSysClockFreq+0x112>
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d002      	beq.n	8001d9c <HAL_RCC_GetSysClockFreq+0x24>
 8001d96:	2b08      	cmp	r3, #8
 8001d98:	d00b      	beq.n	8001db2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d9a:	e076      	b.n	8001e8a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d9c:	4b44      	ldr	r3, [pc, #272]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2210      	movs	r2, #16
 8001da2:	4013      	ands	r3, r2
 8001da4:	d002      	beq.n	8001dac <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001da6:	4b43      	ldr	r3, [pc, #268]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001da8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001daa:	e07c      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001dac:	4b42      	ldr	r3, [pc, #264]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x140>)
 8001dae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001db0:	e079      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001db2:	4b42      	ldr	r3, [pc, #264]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x144>)
 8001db4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001db6:	e076      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dba:	0c9a      	lsrs	r2, r3, #18
 8001dbc:	230f      	movs	r3, #15
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	4b3f      	ldr	r3, [pc, #252]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x148>)
 8001dc2:	5c9b      	ldrb	r3, [r3, r2]
 8001dc4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc8:	0d9a      	lsrs	r2, r3, #22
 8001dca:	2303      	movs	r3, #3
 8001dcc:	4013      	ands	r3, r2
 8001dce:	3301      	adds	r3, #1
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dd2:	4b37      	ldr	r3, [pc, #220]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	2380      	movs	r3, #128	; 0x80
 8001dd8:	025b      	lsls	r3, r3, #9
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d01a      	beq.n	8001e14 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de0:	61bb      	str	r3, [r7, #24]
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
 8001de6:	4a35      	ldr	r2, [pc, #212]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x144>)
 8001de8:	2300      	movs	r3, #0
 8001dea:	69b8      	ldr	r0, [r7, #24]
 8001dec:	69f9      	ldr	r1, [r7, #28]
 8001dee:	f7fe fa37 	bl	8000260 <__aeabi_lmul>
 8001df2:	0002      	movs	r2, r0
 8001df4:	000b      	movs	r3, r1
 8001df6:	0010      	movs	r0, r2
 8001df8:	0019      	movs	r1, r3
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f7fe fa0b 	bl	8000220 <__aeabi_uldivmod>
 8001e0a:	0002      	movs	r2, r0
 8001e0c:	000b      	movs	r3, r1
 8001e0e:	0013      	movs	r3, r2
 8001e10:	637b      	str	r3, [r7, #52]	; 0x34
 8001e12:	e037      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e14:	4b26      	ldr	r3, [pc, #152]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2210      	movs	r2, #16
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d01a      	beq.n	8001e54 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	4a23      	ldr	r2, [pc, #140]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001e28:	2300      	movs	r3, #0
 8001e2a:	68b8      	ldr	r0, [r7, #8]
 8001e2c:	68f9      	ldr	r1, [r7, #12]
 8001e2e:	f7fe fa17 	bl	8000260 <__aeabi_lmul>
 8001e32:	0002      	movs	r2, r0
 8001e34:	000b      	movs	r3, r1
 8001e36:	0010      	movs	r0, r2
 8001e38:	0019      	movs	r1, r3
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	603b      	str	r3, [r7, #0]
 8001e3e:	2300      	movs	r3, #0
 8001e40:	607b      	str	r3, [r7, #4]
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f7fe f9eb 	bl	8000220 <__aeabi_uldivmod>
 8001e4a:	0002      	movs	r2, r0
 8001e4c:	000b      	movs	r3, r1
 8001e4e:	0013      	movs	r3, r2
 8001e50:	637b      	str	r3, [r7, #52]	; 0x34
 8001e52:	e017      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e56:	0018      	movs	r0, r3
 8001e58:	2300      	movs	r3, #0
 8001e5a:	0019      	movs	r1, r3
 8001e5c:	4a16      	ldr	r2, [pc, #88]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x140>)
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f7fe f9fe 	bl	8000260 <__aeabi_lmul>
 8001e64:	0002      	movs	r2, r0
 8001e66:	000b      	movs	r3, r1
 8001e68:	0010      	movs	r0, r2
 8001e6a:	0019      	movs	r1, r3
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	001c      	movs	r4, r3
 8001e70:	2300      	movs	r3, #0
 8001e72:	001d      	movs	r5, r3
 8001e74:	0022      	movs	r2, r4
 8001e76:	002b      	movs	r3, r5
 8001e78:	f7fe f9d2 	bl	8000220 <__aeabi_uldivmod>
 8001e7c:	0002      	movs	r2, r0
 8001e7e:	000b      	movs	r3, r1
 8001e80:	0013      	movs	r3, r2
 8001e82:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e86:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e88:	e00d      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001e8a:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	0b5b      	lsrs	r3, r3, #13
 8001e90:	2207      	movs	r2, #7
 8001e92:	4013      	ands	r3, r2
 8001e94:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001e96:	6a3b      	ldr	r3, [r7, #32]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	2280      	movs	r2, #128	; 0x80
 8001e9c:	0212      	lsls	r2, r2, #8
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	0013      	movs	r3, r2
 8001ea2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ea4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b00e      	add	sp, #56	; 0x38
 8001eae:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	003d0900 	.word	0x003d0900
 8001eb8:	00f42400 	.word	0x00f42400
 8001ebc:	007a1200 	.word	0x007a1200
 8001ec0:	080030cc 	.word	0x080030cc

08001ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec8:	4b02      	ldr	r3, [pc, #8]	; (8001ed4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001eca:	681b      	ldr	r3, [r3, #0]
}
 8001ecc:	0018      	movs	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	20000000 	.word	0x20000000

08001ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001edc:	f7ff fff2 	bl	8001ec4 <HAL_RCC_GetHCLKFreq>
 8001ee0:	0001      	movs	r1, r0
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	0a1b      	lsrs	r3, r3, #8
 8001ee8:	2207      	movs	r2, #7
 8001eea:	4013      	ands	r3, r2
 8001eec:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001eee:	5cd3      	ldrb	r3, [r2, r3]
 8001ef0:	40d9      	lsrs	r1, r3
 8001ef2:	000b      	movs	r3, r1
}
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	40021000 	.word	0x40021000
 8001f00:	080030c4 	.word	0x080030c4

08001f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f08:	f7ff ffdc 	bl	8001ec4 <HAL_RCC_GetHCLKFreq>
 8001f0c:	0001      	movs	r1, r0
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	0adb      	lsrs	r3, r3, #11
 8001f14:	2207      	movs	r2, #7
 8001f16:	4013      	ands	r3, r2
 8001f18:	4a04      	ldr	r2, [pc, #16]	; (8001f2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f1a:	5cd3      	ldrb	r3, [r2, r3]
 8001f1c:	40d9      	lsrs	r1, r3
 8001f1e:	000b      	movs	r3, r1
}
 8001f20:	0018      	movs	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	080030c4 	.word	0x080030c4

08001f30 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001f38:	2317      	movs	r3, #23
 8001f3a:	18fb      	adds	r3, r7, r3
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2220      	movs	r2, #32
 8001f46:	4013      	ands	r3, r2
 8001f48:	d106      	bne.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	2380      	movs	r3, #128	; 0x80
 8001f50:	011b      	lsls	r3, r3, #4
 8001f52:	4013      	ands	r3, r2
 8001f54:	d100      	bne.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001f56:	e104      	b.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f58:	4bb1      	ldr	r3, [pc, #708]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	055b      	lsls	r3, r3, #21
 8001f60:	4013      	ands	r3, r2
 8001f62:	d10a      	bne.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f64:	4bae      	ldr	r3, [pc, #696]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f68:	4bad      	ldr	r3, [pc, #692]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f6a:	2180      	movs	r1, #128	; 0x80
 8001f6c:	0549      	lsls	r1, r1, #21
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001f72:	2317      	movs	r3, #23
 8001f74:	18fb      	adds	r3, r7, r3
 8001f76:	2201      	movs	r2, #1
 8001f78:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7a:	4baa      	ldr	r3, [pc, #680]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	2380      	movs	r3, #128	; 0x80
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4013      	ands	r3, r2
 8001f84:	d11a      	bne.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f86:	4ba7      	ldr	r3, [pc, #668]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	4ba6      	ldr	r3, [pc, #664]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f8c:	2180      	movs	r1, #128	; 0x80
 8001f8e:	0049      	lsls	r1, r1, #1
 8001f90:	430a      	orrs	r2, r1
 8001f92:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f94:	f7fe fd70 	bl	8000a78 <HAL_GetTick>
 8001f98:	0003      	movs	r3, r0
 8001f9a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f9e:	f7fe fd6b 	bl	8000a78 <HAL_GetTick>
 8001fa2:	0002      	movs	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b64      	cmp	r3, #100	; 0x64
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e133      	b.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb0:	4b9c      	ldr	r3, [pc, #624]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	2380      	movs	r3, #128	; 0x80
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d0f0      	beq.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001fbc:	4b98      	ldr	r3, [pc, #608]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	23c0      	movs	r3, #192	; 0xc0
 8001fc2:	039b      	lsls	r3, r3, #14
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	23c0      	movs	r3, #192	; 0xc0
 8001fce:	039b      	lsls	r3, r3, #14
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d107      	bne.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	23c0      	movs	r3, #192	; 0xc0
 8001fde:	039b      	lsls	r3, r3, #14
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d013      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	23c0      	movs	r3, #192	; 0xc0
 8001fee:	029b      	lsls	r3, r3, #10
 8001ff0:	401a      	ands	r2, r3
 8001ff2:	23c0      	movs	r3, #192	; 0xc0
 8001ff4:	029b      	lsls	r3, r3, #10
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d10a      	bne.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001ffa:	4b89      	ldr	r3, [pc, #548]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	2380      	movs	r3, #128	; 0x80
 8002000:	029b      	lsls	r3, r3, #10
 8002002:	401a      	ands	r2, r3
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	029b      	lsls	r3, r3, #10
 8002008:	429a      	cmp	r2, r3
 800200a:	d101      	bne.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e103      	b.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002010:	4b83      	ldr	r3, [pc, #524]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002012:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002014:	23c0      	movs	r3, #192	; 0xc0
 8002016:	029b      	lsls	r3, r3, #10
 8002018:	4013      	ands	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d049      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	23c0      	movs	r3, #192	; 0xc0
 8002028:	029b      	lsls	r3, r3, #10
 800202a:	4013      	ands	r3, r2
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	429a      	cmp	r2, r3
 8002030:	d004      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2220      	movs	r2, #32
 8002038:	4013      	ands	r3, r2
 800203a:	d10d      	bne.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	23c0      	movs	r3, #192	; 0xc0
 8002042:	029b      	lsls	r3, r3, #10
 8002044:	4013      	ands	r3, r2
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	429a      	cmp	r2, r3
 800204a:	d034      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	2380      	movs	r3, #128	; 0x80
 8002052:	011b      	lsls	r3, r3, #4
 8002054:	4013      	ands	r3, r2
 8002056:	d02e      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002058:	4b71      	ldr	r3, [pc, #452]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800205a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800205c:	4a72      	ldr	r2, [pc, #456]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800205e:	4013      	ands	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002062:	4b6f      	ldr	r3, [pc, #444]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002064:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002066:	4b6e      	ldr	r3, [pc, #440]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002068:	2180      	movs	r1, #128	; 0x80
 800206a:	0309      	lsls	r1, r1, #12
 800206c:	430a      	orrs	r2, r1
 800206e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002070:	4b6b      	ldr	r3, [pc, #428]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002072:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002074:	4b6a      	ldr	r3, [pc, #424]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002076:	496d      	ldr	r1, [pc, #436]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002078:	400a      	ands	r2, r1
 800207a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800207c:	4b68      	ldr	r3, [pc, #416]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	4013      	ands	r3, r2
 800208a:	d014      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208c:	f7fe fcf4 	bl	8000a78 <HAL_GetTick>
 8002090:	0003      	movs	r3, r0
 8002092:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002094:	e009      	b.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002096:	f7fe fcef 	bl	8000a78 <HAL_GetTick>
 800209a:	0002      	movs	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	4a63      	ldr	r2, [pc, #396]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d901      	bls.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e0b6      	b.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020aa:	4b5d      	ldr	r3, [pc, #372]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020ae:	2380      	movs	r3, #128	; 0x80
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4013      	ands	r3, r2
 80020b4:	d0ef      	beq.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	2380      	movs	r3, #128	; 0x80
 80020bc:	011b      	lsls	r3, r3, #4
 80020be:	4013      	ands	r3, r2
 80020c0:	d01f      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	23c0      	movs	r3, #192	; 0xc0
 80020c8:	029b      	lsls	r3, r3, #10
 80020ca:	401a      	ands	r2, r3
 80020cc:	23c0      	movs	r3, #192	; 0xc0
 80020ce:	029b      	lsls	r3, r3, #10
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d10c      	bne.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80020d4:	4b52      	ldr	r3, [pc, #328]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a56      	ldr	r2, [pc, #344]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80020da:	4013      	ands	r3, r2
 80020dc:	0019      	movs	r1, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	23c0      	movs	r3, #192	; 0xc0
 80020e4:	039b      	lsls	r3, r3, #14
 80020e6:	401a      	ands	r2, r3
 80020e8:	4b4d      	ldr	r3, [pc, #308]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020ea:	430a      	orrs	r2, r1
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	4b4c      	ldr	r3, [pc, #304]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020f0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	23c0      	movs	r3, #192	; 0xc0
 80020f8:	029b      	lsls	r3, r3, #10
 80020fa:	401a      	ands	r2, r3
 80020fc:	4b48      	ldr	r3, [pc, #288]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020fe:	430a      	orrs	r2, r1
 8002100:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2220      	movs	r2, #32
 8002108:	4013      	ands	r3, r2
 800210a:	d01f      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	23c0      	movs	r3, #192	; 0xc0
 8002112:	029b      	lsls	r3, r3, #10
 8002114:	401a      	ands	r2, r3
 8002116:	23c0      	movs	r3, #192	; 0xc0
 8002118:	029b      	lsls	r3, r3, #10
 800211a:	429a      	cmp	r2, r3
 800211c:	d10c      	bne.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800211e:	4b40      	ldr	r3, [pc, #256]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a44      	ldr	r2, [pc, #272]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002124:	4013      	ands	r3, r2
 8002126:	0019      	movs	r1, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	23c0      	movs	r3, #192	; 0xc0
 800212e:	039b      	lsls	r3, r3, #14
 8002130:	401a      	ands	r2, r3
 8002132:	4b3b      	ldr	r3, [pc, #236]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002134:	430a      	orrs	r2, r1
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	4b39      	ldr	r3, [pc, #228]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800213a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	23c0      	movs	r3, #192	; 0xc0
 8002142:	029b      	lsls	r3, r3, #10
 8002144:	401a      	ands	r2, r3
 8002146:	4b36      	ldr	r3, [pc, #216]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002148:	430a      	orrs	r2, r1
 800214a:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800214c:	2317      	movs	r3, #23
 800214e:	18fb      	adds	r3, r7, r3
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d105      	bne.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002156:	4b32      	ldr	r3, [pc, #200]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800215a:	4b31      	ldr	r3, [pc, #196]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800215c:	4936      	ldr	r1, [pc, #216]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800215e:	400a      	ands	r2, r1
 8002160:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2201      	movs	r2, #1
 8002168:	4013      	ands	r3, r2
 800216a:	d009      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800216c:	4b2c      	ldr	r3, [pc, #176]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800216e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002170:	2203      	movs	r2, #3
 8002172:	4393      	bics	r3, r2
 8002174:	0019      	movs	r1, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68da      	ldr	r2, [r3, #12]
 800217a:	4b29      	ldr	r3, [pc, #164]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800217c:	430a      	orrs	r2, r1
 800217e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2202      	movs	r2, #2
 8002186:	4013      	ands	r3, r2
 8002188:	d009      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800218a:	4b25      	ldr	r3, [pc, #148]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800218c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218e:	220c      	movs	r2, #12
 8002190:	4393      	bics	r3, r2
 8002192:	0019      	movs	r1, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691a      	ldr	r2, [r3, #16]
 8002198:	4b21      	ldr	r3, [pc, #132]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800219a:	430a      	orrs	r2, r1
 800219c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2204      	movs	r2, #4
 80021a4:	4013      	ands	r3, r2
 80021a6:	d009      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021a8:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ac:	4a23      	ldr	r2, [pc, #140]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	0019      	movs	r1, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	695a      	ldr	r2, [r3, #20]
 80021b6:	4b1a      	ldr	r3, [pc, #104]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021b8:	430a      	orrs	r2, r1
 80021ba:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2208      	movs	r2, #8
 80021c2:	4013      	ands	r3, r2
 80021c4:	d009      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021c6:	4b16      	ldr	r3, [pc, #88]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ca:	4a1d      	ldr	r2, [pc, #116]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	0019      	movs	r1, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	699a      	ldr	r2, [r3, #24]
 80021d4:	4b12      	ldr	r3, [pc, #72]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021d6:	430a      	orrs	r2, r1
 80021d8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2240      	movs	r2, #64	; 0x40
 80021e0:	4013      	ands	r3, r2
 80021e2:	d009      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021e4:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e8:	4a16      	ldr	r2, [pc, #88]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80021ea:	4013      	ands	r3, r2
 80021ec:	0019      	movs	r1, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1a      	ldr	r2, [r3, #32]
 80021f2:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021f4:	430a      	orrs	r2, r1
 80021f6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2280      	movs	r2, #128	; 0x80
 80021fe:	4013      	ands	r3, r2
 8002200:	d009      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002202:	4b07      	ldr	r3, [pc, #28]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002206:	4a10      	ldr	r2, [pc, #64]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002208:	4013      	ands	r3, r2
 800220a:	0019      	movs	r1, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69da      	ldr	r2, [r3, #28]
 8002210:	4b03      	ldr	r3, [pc, #12]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002212:	430a      	orrs	r2, r1
 8002214:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	0018      	movs	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	b006      	add	sp, #24
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40021000 	.word	0x40021000
 8002224:	40007000 	.word	0x40007000
 8002228:	fffcffff 	.word	0xfffcffff
 800222c:	fff7ffff 	.word	0xfff7ffff
 8002230:	00001388 	.word	0x00001388
 8002234:	ffcfffff 	.word	0xffcfffff
 8002238:	efffffff 	.word	0xefffffff
 800223c:	fffff3ff 	.word	0xfffff3ff
 8002240:	ffffcfff 	.word	0xffffcfff
 8002244:	fbffffff 	.word	0xfbffffff
 8002248:	fff3ffff 	.word	0xfff3ffff

0800224c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e044      	b.n	80022e8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002262:	2b00      	cmp	r3, #0
 8002264:	d107      	bne.n	8002276 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2278      	movs	r2, #120	; 0x78
 800226a:	2100      	movs	r1, #0
 800226c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	0018      	movs	r0, r3
 8002272:	f7fe fad5 	bl	8000820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2224      	movs	r2, #36	; 0x24
 800227a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2101      	movs	r1, #1
 8002288:	438a      	bics	r2, r1
 800228a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	0018      	movs	r0, r3
 8002290:	f000 f968 	bl	8002564 <UART_SetConfig>
 8002294:	0003      	movs	r3, r0
 8002296:	2b01      	cmp	r3, #1
 8002298:	d101      	bne.n	800229e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e024      	b.n	80022e8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	0018      	movs	r0, r3
 80022aa:	f000 fbdf 	bl	8002a6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	490d      	ldr	r1, [pc, #52]	; (80022f0 <HAL_UART_Init+0xa4>)
 80022ba:	400a      	ands	r2, r1
 80022bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	212a      	movs	r1, #42	; 0x2a
 80022ca:	438a      	bics	r2, r1
 80022cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2101      	movs	r1, #1
 80022da:	430a      	orrs	r2, r1
 80022dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	0018      	movs	r0, r3
 80022e2:	f000 fc77 	bl	8002bd4 <UART_CheckIdleState>
 80022e6:	0003      	movs	r3, r0
}
 80022e8:	0018      	movs	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	b002      	add	sp, #8
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	ffffb7ff 	.word	0xffffb7ff

080022f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08a      	sub	sp, #40	; 0x28
 80022f8:	af02      	add	r7, sp, #8
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	603b      	str	r3, [r7, #0]
 8002300:	1dbb      	adds	r3, r7, #6
 8002302:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002308:	2b20      	cmp	r3, #32
 800230a:	d000      	beq.n	800230e <HAL_UART_Transmit+0x1a>
 800230c:	e08c      	b.n	8002428 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <HAL_UART_Transmit+0x28>
 8002314:	1dbb      	adds	r3, r7, #6
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e084      	b.n	800242a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	2380      	movs	r3, #128	; 0x80
 8002326:	015b      	lsls	r3, r3, #5
 8002328:	429a      	cmp	r2, r3
 800232a:	d109      	bne.n	8002340 <HAL_UART_Transmit+0x4c>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d105      	bne.n	8002340 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2201      	movs	r2, #1
 8002338:	4013      	ands	r3, r2
 800233a:	d001      	beq.n	8002340 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e074      	b.n	800242a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2284      	movs	r2, #132	; 0x84
 8002344:	2100      	movs	r1, #0
 8002346:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2221      	movs	r2, #33	; 0x21
 800234c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800234e:	f7fe fb93 	bl	8000a78 <HAL_GetTick>
 8002352:	0003      	movs	r3, r0
 8002354:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1dba      	adds	r2, r7, #6
 800235a:	2150      	movs	r1, #80	; 0x50
 800235c:	8812      	ldrh	r2, [r2, #0]
 800235e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	1dba      	adds	r2, r7, #6
 8002364:	2152      	movs	r1, #82	; 0x52
 8002366:	8812      	ldrh	r2, [r2, #0]
 8002368:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	2380      	movs	r3, #128	; 0x80
 8002370:	015b      	lsls	r3, r3, #5
 8002372:	429a      	cmp	r2, r3
 8002374:	d108      	bne.n	8002388 <HAL_UART_Transmit+0x94>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d104      	bne.n	8002388 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800237e:	2300      	movs	r3, #0
 8002380:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	61bb      	str	r3, [r7, #24]
 8002386:	e003      	b.n	8002390 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800238c:	2300      	movs	r3, #0
 800238e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002390:	e02f      	b.n	80023f2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	0013      	movs	r3, r2
 800239c:	2200      	movs	r2, #0
 800239e:	2180      	movs	r1, #128	; 0x80
 80023a0:	f000 fcc0 	bl	8002d24 <UART_WaitOnFlagUntilTimeout>
 80023a4:	1e03      	subs	r3, r0, #0
 80023a6:	d004      	beq.n	80023b2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2220      	movs	r2, #32
 80023ac:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e03b      	b.n	800242a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10b      	bne.n	80023d0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	001a      	movs	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	05d2      	lsls	r2, r2, #23
 80023c4:	0dd2      	lsrs	r2, r2, #23
 80023c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	3302      	adds	r3, #2
 80023cc:	61bb      	str	r3, [r7, #24]
 80023ce:	e007      	b.n	80023e0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	781a      	ldrb	r2, [r3, #0]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3301      	adds	r3, #1
 80023de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2252      	movs	r2, #82	; 0x52
 80023e4:	5a9b      	ldrh	r3, [r3, r2]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	3b01      	subs	r3, #1
 80023ea:	b299      	uxth	r1, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2252      	movs	r2, #82	; 0x52
 80023f0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2252      	movs	r2, #82	; 0x52
 80023f6:	5a9b      	ldrh	r3, [r3, r2]
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1c9      	bne.n	8002392 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	0013      	movs	r3, r2
 8002408:	2200      	movs	r2, #0
 800240a:	2140      	movs	r1, #64	; 0x40
 800240c:	f000 fc8a 	bl	8002d24 <UART_WaitOnFlagUntilTimeout>
 8002410:	1e03      	subs	r3, r0, #0
 8002412:	d004      	beq.n	800241e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2220      	movs	r2, #32
 8002418:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e005      	b.n	800242a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2220      	movs	r2, #32
 8002422:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002424:	2300      	movs	r3, #0
 8002426:	e000      	b.n	800242a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002428:	2302      	movs	r3, #2
  }
}
 800242a:	0018      	movs	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	b008      	add	sp, #32
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b088      	sub	sp, #32
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	1dbb      	adds	r3, r7, #6
 8002440:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002446:	2b20      	cmp	r3, #32
 8002448:	d000      	beq.n	800244c <HAL_UART_Transmit_DMA+0x18>
 800244a:	e077      	b.n	800253c <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_UART_Transmit_DMA+0x26>
 8002452:	1dbb      	adds	r3, r7, #6
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e06f      	b.n	800253e <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	2380      	movs	r3, #128	; 0x80
 8002464:	015b      	lsls	r3, r3, #5
 8002466:	429a      	cmp	r2, r3
 8002468:	d109      	bne.n	800247e <HAL_UART_Transmit_DMA+0x4a>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d105      	bne.n	800247e <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	2201      	movs	r2, #1
 8002476:	4013      	ands	r3, r2
 8002478:	d001      	beq.n	800247e <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e05f      	b.n	800253e <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	1dba      	adds	r2, r7, #6
 8002488:	2150      	movs	r1, #80	; 0x50
 800248a:	8812      	ldrh	r2, [r2, #0]
 800248c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	1dba      	adds	r2, r7, #6
 8002492:	2152      	movs	r1, #82	; 0x52
 8002494:	8812      	ldrh	r2, [r2, #0]
 8002496:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2284      	movs	r2, #132	; 0x84
 800249c:	2100      	movs	r1, #0
 800249e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2221      	movs	r2, #33	; 0x21
 80024a4:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d027      	beq.n	80024fe <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b2:	4a25      	ldr	r2, [pc, #148]	; (8002548 <HAL_UART_Transmit_DMA+0x114>)
 80024b4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ba:	4a24      	ldr	r2, [pc, #144]	; (800254c <HAL_UART_Transmit_DMA+0x118>)
 80024bc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c2:	4a23      	ldr	r2, [pc, #140]	; (8002550 <HAL_UART_Transmit_DMA+0x11c>)
 80024c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ca:	2200      	movs	r2, #0
 80024cc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d6:	0019      	movs	r1, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	3328      	adds	r3, #40	; 0x28
 80024de:	001a      	movs	r2, r3
 80024e0:	1dbb      	adds	r3, r7, #6
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	f7fe fc4c 	bl	8000d80 <HAL_DMA_Start_IT>
 80024e8:	1e03      	subs	r3, r0, #0
 80024ea:	d008      	beq.n	80024fe <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2284      	movs	r2, #132	; 0x84
 80024f0:	2110      	movs	r1, #16
 80024f2:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2220      	movs	r2, #32
 80024f8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e01f      	b.n	800253e <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2240      	movs	r2, #64	; 0x40
 8002504:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002506:	f3ef 8310 	mrs	r3, PRIMASK
 800250a:	613b      	str	r3, [r7, #16]
  return(result);
 800250c:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800250e:	61fb      	str	r3, [r7, #28]
 8002510:	2301      	movs	r3, #1
 8002512:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f383 8810 	msr	PRIMASK, r3
}
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2180      	movs	r1, #128	; 0x80
 8002528:	430a      	orrs	r2, r1
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	f383 8810 	msr	PRIMASK, r3
}
 8002536:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8002538:	2300      	movs	r3, #0
 800253a:	e000      	b.n	800253e <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800253c:	2302      	movs	r3, #2
  }
}
 800253e:	0018      	movs	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	b008      	add	sp, #32
 8002544:	bd80      	pop	{r7, pc}
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	08002f09 	.word	0x08002f09
 800254c:	08002fa1 	.word	0x08002fa1
 8002550:	08002fbf 	.word	0x08002fbf

08002554 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800255c:	46c0      	nop			; (mov r8, r8)
 800255e:	46bd      	mov	sp, r7
 8002560:	b002      	add	sp, #8
 8002562:	bd80      	pop	{r7, pc}

08002564 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002564:	b5b0      	push	{r4, r5, r7, lr}
 8002566:	b08e      	sub	sp, #56	; 0x38
 8002568:	af00      	add	r7, sp, #0
 800256a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800256c:	231a      	movs	r3, #26
 800256e:	2218      	movs	r2, #24
 8002570:	189b      	adds	r3, r3, r2
 8002572:	19db      	adds	r3, r3, r7
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	431a      	orrs	r2, r3
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	431a      	orrs	r2, r3
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	4313      	orrs	r3, r2
 800258e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4ac6      	ldr	r2, [pc, #792]	; (80028b0 <UART_SetConfig+0x34c>)
 8002598:	4013      	ands	r3, r2
 800259a:	0019      	movs	r1, r3
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025a2:	430a      	orrs	r2, r1
 80025a4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	4ac1      	ldr	r2, [pc, #772]	; (80028b4 <UART_SetConfig+0x350>)
 80025ae:	4013      	ands	r3, r2
 80025b0:	0019      	movs	r1, r3
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4abb      	ldr	r2, [pc, #748]	; (80028b8 <UART_SetConfig+0x354>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d004      	beq.n	80025d8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025d4:	4313      	orrs	r3, r2
 80025d6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	4ab7      	ldr	r2, [pc, #732]	; (80028bc <UART_SetConfig+0x358>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	0019      	movs	r1, r3
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025ea:	430a      	orrs	r2, r1
 80025ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4ab3      	ldr	r2, [pc, #716]	; (80028c0 <UART_SetConfig+0x35c>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d131      	bne.n	800265c <UART_SetConfig+0xf8>
 80025f8:	4bb2      	ldr	r3, [pc, #712]	; (80028c4 <UART_SetConfig+0x360>)
 80025fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025fc:	2203      	movs	r2, #3
 80025fe:	4013      	ands	r3, r2
 8002600:	2b03      	cmp	r3, #3
 8002602:	d01d      	beq.n	8002640 <UART_SetConfig+0xdc>
 8002604:	d823      	bhi.n	800264e <UART_SetConfig+0xea>
 8002606:	2b02      	cmp	r3, #2
 8002608:	d00c      	beq.n	8002624 <UART_SetConfig+0xc0>
 800260a:	d820      	bhi.n	800264e <UART_SetConfig+0xea>
 800260c:	2b00      	cmp	r3, #0
 800260e:	d002      	beq.n	8002616 <UART_SetConfig+0xb2>
 8002610:	2b01      	cmp	r3, #1
 8002612:	d00e      	beq.n	8002632 <UART_SetConfig+0xce>
 8002614:	e01b      	b.n	800264e <UART_SetConfig+0xea>
 8002616:	231b      	movs	r3, #27
 8002618:	2218      	movs	r2, #24
 800261a:	189b      	adds	r3, r3, r2
 800261c:	19db      	adds	r3, r3, r7
 800261e:	2201      	movs	r2, #1
 8002620:	701a      	strb	r2, [r3, #0]
 8002622:	e09c      	b.n	800275e <UART_SetConfig+0x1fa>
 8002624:	231b      	movs	r3, #27
 8002626:	2218      	movs	r2, #24
 8002628:	189b      	adds	r3, r3, r2
 800262a:	19db      	adds	r3, r3, r7
 800262c:	2202      	movs	r2, #2
 800262e:	701a      	strb	r2, [r3, #0]
 8002630:	e095      	b.n	800275e <UART_SetConfig+0x1fa>
 8002632:	231b      	movs	r3, #27
 8002634:	2218      	movs	r2, #24
 8002636:	189b      	adds	r3, r3, r2
 8002638:	19db      	adds	r3, r3, r7
 800263a:	2204      	movs	r2, #4
 800263c:	701a      	strb	r2, [r3, #0]
 800263e:	e08e      	b.n	800275e <UART_SetConfig+0x1fa>
 8002640:	231b      	movs	r3, #27
 8002642:	2218      	movs	r2, #24
 8002644:	189b      	adds	r3, r3, r2
 8002646:	19db      	adds	r3, r3, r7
 8002648:	2208      	movs	r2, #8
 800264a:	701a      	strb	r2, [r3, #0]
 800264c:	e087      	b.n	800275e <UART_SetConfig+0x1fa>
 800264e:	231b      	movs	r3, #27
 8002650:	2218      	movs	r2, #24
 8002652:	189b      	adds	r3, r3, r2
 8002654:	19db      	adds	r3, r3, r7
 8002656:	2210      	movs	r2, #16
 8002658:	701a      	strb	r2, [r3, #0]
 800265a:	e080      	b.n	800275e <UART_SetConfig+0x1fa>
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a99      	ldr	r2, [pc, #612]	; (80028c8 <UART_SetConfig+0x364>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d131      	bne.n	80026ca <UART_SetConfig+0x166>
 8002666:	4b97      	ldr	r3, [pc, #604]	; (80028c4 <UART_SetConfig+0x360>)
 8002668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266a:	220c      	movs	r2, #12
 800266c:	4013      	ands	r3, r2
 800266e:	2b0c      	cmp	r3, #12
 8002670:	d01d      	beq.n	80026ae <UART_SetConfig+0x14a>
 8002672:	d823      	bhi.n	80026bc <UART_SetConfig+0x158>
 8002674:	2b08      	cmp	r3, #8
 8002676:	d00c      	beq.n	8002692 <UART_SetConfig+0x12e>
 8002678:	d820      	bhi.n	80026bc <UART_SetConfig+0x158>
 800267a:	2b00      	cmp	r3, #0
 800267c:	d002      	beq.n	8002684 <UART_SetConfig+0x120>
 800267e:	2b04      	cmp	r3, #4
 8002680:	d00e      	beq.n	80026a0 <UART_SetConfig+0x13c>
 8002682:	e01b      	b.n	80026bc <UART_SetConfig+0x158>
 8002684:	231b      	movs	r3, #27
 8002686:	2218      	movs	r2, #24
 8002688:	189b      	adds	r3, r3, r2
 800268a:	19db      	adds	r3, r3, r7
 800268c:	2200      	movs	r2, #0
 800268e:	701a      	strb	r2, [r3, #0]
 8002690:	e065      	b.n	800275e <UART_SetConfig+0x1fa>
 8002692:	231b      	movs	r3, #27
 8002694:	2218      	movs	r2, #24
 8002696:	189b      	adds	r3, r3, r2
 8002698:	19db      	adds	r3, r3, r7
 800269a:	2202      	movs	r2, #2
 800269c:	701a      	strb	r2, [r3, #0]
 800269e:	e05e      	b.n	800275e <UART_SetConfig+0x1fa>
 80026a0:	231b      	movs	r3, #27
 80026a2:	2218      	movs	r2, #24
 80026a4:	189b      	adds	r3, r3, r2
 80026a6:	19db      	adds	r3, r3, r7
 80026a8:	2204      	movs	r2, #4
 80026aa:	701a      	strb	r2, [r3, #0]
 80026ac:	e057      	b.n	800275e <UART_SetConfig+0x1fa>
 80026ae:	231b      	movs	r3, #27
 80026b0:	2218      	movs	r2, #24
 80026b2:	189b      	adds	r3, r3, r2
 80026b4:	19db      	adds	r3, r3, r7
 80026b6:	2208      	movs	r2, #8
 80026b8:	701a      	strb	r2, [r3, #0]
 80026ba:	e050      	b.n	800275e <UART_SetConfig+0x1fa>
 80026bc:	231b      	movs	r3, #27
 80026be:	2218      	movs	r2, #24
 80026c0:	189b      	adds	r3, r3, r2
 80026c2:	19db      	adds	r3, r3, r7
 80026c4:	2210      	movs	r2, #16
 80026c6:	701a      	strb	r2, [r3, #0]
 80026c8:	e049      	b.n	800275e <UART_SetConfig+0x1fa>
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a7a      	ldr	r2, [pc, #488]	; (80028b8 <UART_SetConfig+0x354>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d13e      	bne.n	8002752 <UART_SetConfig+0x1ee>
 80026d4:	4b7b      	ldr	r3, [pc, #492]	; (80028c4 <UART_SetConfig+0x360>)
 80026d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026d8:	23c0      	movs	r3, #192	; 0xc0
 80026da:	011b      	lsls	r3, r3, #4
 80026dc:	4013      	ands	r3, r2
 80026de:	22c0      	movs	r2, #192	; 0xc0
 80026e0:	0112      	lsls	r2, r2, #4
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d027      	beq.n	8002736 <UART_SetConfig+0x1d2>
 80026e6:	22c0      	movs	r2, #192	; 0xc0
 80026e8:	0112      	lsls	r2, r2, #4
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d82a      	bhi.n	8002744 <UART_SetConfig+0x1e0>
 80026ee:	2280      	movs	r2, #128	; 0x80
 80026f0:	0112      	lsls	r2, r2, #4
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d011      	beq.n	800271a <UART_SetConfig+0x1b6>
 80026f6:	2280      	movs	r2, #128	; 0x80
 80026f8:	0112      	lsls	r2, r2, #4
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d822      	bhi.n	8002744 <UART_SetConfig+0x1e0>
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d004      	beq.n	800270c <UART_SetConfig+0x1a8>
 8002702:	2280      	movs	r2, #128	; 0x80
 8002704:	00d2      	lsls	r2, r2, #3
 8002706:	4293      	cmp	r3, r2
 8002708:	d00e      	beq.n	8002728 <UART_SetConfig+0x1c4>
 800270a:	e01b      	b.n	8002744 <UART_SetConfig+0x1e0>
 800270c:	231b      	movs	r3, #27
 800270e:	2218      	movs	r2, #24
 8002710:	189b      	adds	r3, r3, r2
 8002712:	19db      	adds	r3, r3, r7
 8002714:	2200      	movs	r2, #0
 8002716:	701a      	strb	r2, [r3, #0]
 8002718:	e021      	b.n	800275e <UART_SetConfig+0x1fa>
 800271a:	231b      	movs	r3, #27
 800271c:	2218      	movs	r2, #24
 800271e:	189b      	adds	r3, r3, r2
 8002720:	19db      	adds	r3, r3, r7
 8002722:	2202      	movs	r2, #2
 8002724:	701a      	strb	r2, [r3, #0]
 8002726:	e01a      	b.n	800275e <UART_SetConfig+0x1fa>
 8002728:	231b      	movs	r3, #27
 800272a:	2218      	movs	r2, #24
 800272c:	189b      	adds	r3, r3, r2
 800272e:	19db      	adds	r3, r3, r7
 8002730:	2204      	movs	r2, #4
 8002732:	701a      	strb	r2, [r3, #0]
 8002734:	e013      	b.n	800275e <UART_SetConfig+0x1fa>
 8002736:	231b      	movs	r3, #27
 8002738:	2218      	movs	r2, #24
 800273a:	189b      	adds	r3, r3, r2
 800273c:	19db      	adds	r3, r3, r7
 800273e:	2208      	movs	r2, #8
 8002740:	701a      	strb	r2, [r3, #0]
 8002742:	e00c      	b.n	800275e <UART_SetConfig+0x1fa>
 8002744:	231b      	movs	r3, #27
 8002746:	2218      	movs	r2, #24
 8002748:	189b      	adds	r3, r3, r2
 800274a:	19db      	adds	r3, r3, r7
 800274c:	2210      	movs	r2, #16
 800274e:	701a      	strb	r2, [r3, #0]
 8002750:	e005      	b.n	800275e <UART_SetConfig+0x1fa>
 8002752:	231b      	movs	r3, #27
 8002754:	2218      	movs	r2, #24
 8002756:	189b      	adds	r3, r3, r2
 8002758:	19db      	adds	r3, r3, r7
 800275a:	2210      	movs	r2, #16
 800275c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a55      	ldr	r2, [pc, #340]	; (80028b8 <UART_SetConfig+0x354>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d000      	beq.n	800276a <UART_SetConfig+0x206>
 8002768:	e084      	b.n	8002874 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800276a:	231b      	movs	r3, #27
 800276c:	2218      	movs	r2, #24
 800276e:	189b      	adds	r3, r3, r2
 8002770:	19db      	adds	r3, r3, r7
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b08      	cmp	r3, #8
 8002776:	d01d      	beq.n	80027b4 <UART_SetConfig+0x250>
 8002778:	dc20      	bgt.n	80027bc <UART_SetConfig+0x258>
 800277a:	2b04      	cmp	r3, #4
 800277c:	d015      	beq.n	80027aa <UART_SetConfig+0x246>
 800277e:	dc1d      	bgt.n	80027bc <UART_SetConfig+0x258>
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <UART_SetConfig+0x226>
 8002784:	2b02      	cmp	r3, #2
 8002786:	d005      	beq.n	8002794 <UART_SetConfig+0x230>
 8002788:	e018      	b.n	80027bc <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800278a:	f7ff fba5 	bl	8001ed8 <HAL_RCC_GetPCLK1Freq>
 800278e:	0003      	movs	r3, r0
 8002790:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002792:	e01c      	b.n	80027ce <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002794:	4b4b      	ldr	r3, [pc, #300]	; (80028c4 <UART_SetConfig+0x360>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2210      	movs	r2, #16
 800279a:	4013      	ands	r3, r2
 800279c:	d002      	beq.n	80027a4 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800279e:	4b4b      	ldr	r3, [pc, #300]	; (80028cc <UART_SetConfig+0x368>)
 80027a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80027a2:	e014      	b.n	80027ce <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 80027a4:	4b4a      	ldr	r3, [pc, #296]	; (80028d0 <UART_SetConfig+0x36c>)
 80027a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027a8:	e011      	b.n	80027ce <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027aa:	f7ff fae5 	bl	8001d78 <HAL_RCC_GetSysClockFreq>
 80027ae:	0003      	movs	r3, r0
 80027b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027b2:	e00c      	b.n	80027ce <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027b4:	2380      	movs	r3, #128	; 0x80
 80027b6:	021b      	lsls	r3, r3, #8
 80027b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027ba:	e008      	b.n	80027ce <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80027c0:	231a      	movs	r3, #26
 80027c2:	2218      	movs	r2, #24
 80027c4:	189b      	adds	r3, r3, r2
 80027c6:	19db      	adds	r3, r3, r7
 80027c8:	2201      	movs	r2, #1
 80027ca:	701a      	strb	r2, [r3, #0]
        break;
 80027cc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80027ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d100      	bne.n	80027d6 <UART_SetConfig+0x272>
 80027d4:	e132      	b.n	8002a3c <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	0013      	movs	r3, r2
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	189b      	adds	r3, r3, r2
 80027e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d305      	bcc.n	80027f2 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80027ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d906      	bls.n	8002800 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 80027f2:	231a      	movs	r3, #26
 80027f4:	2218      	movs	r2, #24
 80027f6:	189b      	adds	r3, r3, r2
 80027f8:	19db      	adds	r3, r3, r7
 80027fa:	2201      	movs	r2, #1
 80027fc:	701a      	strb	r2, [r3, #0]
 80027fe:	e11d      	b.n	8002a3c <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]
 8002808:	6939      	ldr	r1, [r7, #16]
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	000b      	movs	r3, r1
 800280e:	0e1b      	lsrs	r3, r3, #24
 8002810:	0010      	movs	r0, r2
 8002812:	0205      	lsls	r5, r0, #8
 8002814:	431d      	orrs	r5, r3
 8002816:	000b      	movs	r3, r1
 8002818:	021c      	lsls	r4, r3, #8
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	085b      	lsrs	r3, r3, #1
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	68b8      	ldr	r0, [r7, #8]
 8002828:	68f9      	ldr	r1, [r7, #12]
 800282a:	1900      	adds	r0, r0, r4
 800282c:	4169      	adcs	r1, r5
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	603b      	str	r3, [r7, #0]
 8002834:	2300      	movs	r3, #0
 8002836:	607b      	str	r3, [r7, #4]
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f7fd fcf0 	bl	8000220 <__aeabi_uldivmod>
 8002840:	0002      	movs	r2, r0
 8002842:	000b      	movs	r3, r1
 8002844:	0013      	movs	r3, r2
 8002846:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002848:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800284a:	23c0      	movs	r3, #192	; 0xc0
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	429a      	cmp	r2, r3
 8002850:	d309      	bcc.n	8002866 <UART_SetConfig+0x302>
 8002852:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002854:	2380      	movs	r3, #128	; 0x80
 8002856:	035b      	lsls	r3, r3, #13
 8002858:	429a      	cmp	r2, r3
 800285a:	d204      	bcs.n	8002866 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002862:	60da      	str	r2, [r3, #12]
 8002864:	e0ea      	b.n	8002a3c <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8002866:	231a      	movs	r3, #26
 8002868:	2218      	movs	r2, #24
 800286a:	189b      	adds	r3, r3, r2
 800286c:	19db      	adds	r3, r3, r7
 800286e:	2201      	movs	r2, #1
 8002870:	701a      	strb	r2, [r3, #0]
 8002872:	e0e3      	b.n	8002a3c <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	69da      	ldr	r2, [r3, #28]
 8002878:	2380      	movs	r3, #128	; 0x80
 800287a:	021b      	lsls	r3, r3, #8
 800287c:	429a      	cmp	r2, r3
 800287e:	d000      	beq.n	8002882 <UART_SetConfig+0x31e>
 8002880:	e085      	b.n	800298e <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8002882:	231b      	movs	r3, #27
 8002884:	2218      	movs	r2, #24
 8002886:	189b      	adds	r3, r3, r2
 8002888:	19db      	adds	r3, r3, r7
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b08      	cmp	r3, #8
 800288e:	d837      	bhi.n	8002900 <UART_SetConfig+0x39c>
 8002890:	009a      	lsls	r2, r3, #2
 8002892:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <UART_SetConfig+0x370>)
 8002894:	18d3      	adds	r3, r2, r3
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800289a:	f7ff fb1d 	bl	8001ed8 <HAL_RCC_GetPCLK1Freq>
 800289e:	0003      	movs	r3, r0
 80028a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028a2:	e036      	b.n	8002912 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80028a4:	f7ff fb2e 	bl	8001f04 <HAL_RCC_GetPCLK2Freq>
 80028a8:	0003      	movs	r3, r0
 80028aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028ac:	e031      	b.n	8002912 <UART_SetConfig+0x3ae>
 80028ae:	46c0      	nop			; (mov r8, r8)
 80028b0:	efff69f3 	.word	0xefff69f3
 80028b4:	ffffcfff 	.word	0xffffcfff
 80028b8:	40004800 	.word	0x40004800
 80028bc:	fffff4ff 	.word	0xfffff4ff
 80028c0:	40013800 	.word	0x40013800
 80028c4:	40021000 	.word	0x40021000
 80028c8:	40004400 	.word	0x40004400
 80028cc:	003d0900 	.word	0x003d0900
 80028d0:	00f42400 	.word	0x00f42400
 80028d4:	080030d8 	.word	0x080030d8
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028d8:	4b60      	ldr	r3, [pc, #384]	; (8002a5c <UART_SetConfig+0x4f8>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2210      	movs	r2, #16
 80028de:	4013      	ands	r3, r2
 80028e0:	d002      	beq.n	80028e8 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80028e2:	4b5f      	ldr	r3, [pc, #380]	; (8002a60 <UART_SetConfig+0x4fc>)
 80028e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80028e6:	e014      	b.n	8002912 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 80028e8:	4b5e      	ldr	r3, [pc, #376]	; (8002a64 <UART_SetConfig+0x500>)
 80028ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028ec:	e011      	b.n	8002912 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028ee:	f7ff fa43 	bl	8001d78 <HAL_RCC_GetSysClockFreq>
 80028f2:	0003      	movs	r3, r0
 80028f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028f6:	e00c      	b.n	8002912 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028f8:	2380      	movs	r3, #128	; 0x80
 80028fa:	021b      	lsls	r3, r3, #8
 80028fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028fe:	e008      	b.n	8002912 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8002900:	2300      	movs	r3, #0
 8002902:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002904:	231a      	movs	r3, #26
 8002906:	2218      	movs	r2, #24
 8002908:	189b      	adds	r3, r3, r2
 800290a:	19db      	adds	r3, r3, r7
 800290c:	2201      	movs	r2, #1
 800290e:	701a      	strb	r2, [r3, #0]
        break;
 8002910:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002914:	2b00      	cmp	r3, #0
 8002916:	d100      	bne.n	800291a <UART_SetConfig+0x3b6>
 8002918:	e090      	b.n	8002a3c <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800291a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291c:	005a      	lsls	r2, r3, #1
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	085b      	lsrs	r3, r3, #1
 8002924:	18d2      	adds	r2, r2, r3
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	0019      	movs	r1, r3
 800292c:	0010      	movs	r0, r2
 800292e:	f7fd fbeb 	bl	8000108 <__udivsi3>
 8002932:	0003      	movs	r3, r0
 8002934:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002938:	2b0f      	cmp	r3, #15
 800293a:	d921      	bls.n	8002980 <UART_SetConfig+0x41c>
 800293c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800293e:	2380      	movs	r3, #128	; 0x80
 8002940:	025b      	lsls	r3, r3, #9
 8002942:	429a      	cmp	r2, r3
 8002944:	d21c      	bcs.n	8002980 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002948:	b29a      	uxth	r2, r3
 800294a:	200e      	movs	r0, #14
 800294c:	2418      	movs	r4, #24
 800294e:	1903      	adds	r3, r0, r4
 8002950:	19db      	adds	r3, r3, r7
 8002952:	210f      	movs	r1, #15
 8002954:	438a      	bics	r2, r1
 8002956:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295a:	085b      	lsrs	r3, r3, #1
 800295c:	b29b      	uxth	r3, r3
 800295e:	2207      	movs	r2, #7
 8002960:	4013      	ands	r3, r2
 8002962:	b299      	uxth	r1, r3
 8002964:	1903      	adds	r3, r0, r4
 8002966:	19db      	adds	r3, r3, r7
 8002968:	1902      	adds	r2, r0, r4
 800296a:	19d2      	adds	r2, r2, r7
 800296c:	8812      	ldrh	r2, [r2, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	1902      	adds	r2, r0, r4
 8002978:	19d2      	adds	r2, r2, r7
 800297a:	8812      	ldrh	r2, [r2, #0]
 800297c:	60da      	str	r2, [r3, #12]
 800297e:	e05d      	b.n	8002a3c <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002980:	231a      	movs	r3, #26
 8002982:	2218      	movs	r2, #24
 8002984:	189b      	adds	r3, r3, r2
 8002986:	19db      	adds	r3, r3, r7
 8002988:	2201      	movs	r2, #1
 800298a:	701a      	strb	r2, [r3, #0]
 800298c:	e056      	b.n	8002a3c <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800298e:	231b      	movs	r3, #27
 8002990:	2218      	movs	r2, #24
 8002992:	189b      	adds	r3, r3, r2
 8002994:	19db      	adds	r3, r3, r7
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b08      	cmp	r3, #8
 800299a:	d822      	bhi.n	80029e2 <UART_SetConfig+0x47e>
 800299c:	009a      	lsls	r2, r3, #2
 800299e:	4b32      	ldr	r3, [pc, #200]	; (8002a68 <UART_SetConfig+0x504>)
 80029a0:	18d3      	adds	r3, r2, r3
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029a6:	f7ff fa97 	bl	8001ed8 <HAL_RCC_GetPCLK1Freq>
 80029aa:	0003      	movs	r3, r0
 80029ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029ae:	e021      	b.n	80029f4 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80029b0:	f7ff faa8 	bl	8001f04 <HAL_RCC_GetPCLK2Freq>
 80029b4:	0003      	movs	r3, r0
 80029b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029b8:	e01c      	b.n	80029f4 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029ba:	4b28      	ldr	r3, [pc, #160]	; (8002a5c <UART_SetConfig+0x4f8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2210      	movs	r2, #16
 80029c0:	4013      	ands	r3, r2
 80029c2:	d002      	beq.n	80029ca <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80029c4:	4b26      	ldr	r3, [pc, #152]	; (8002a60 <UART_SetConfig+0x4fc>)
 80029c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80029c8:	e014      	b.n	80029f4 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 80029ca:	4b26      	ldr	r3, [pc, #152]	; (8002a64 <UART_SetConfig+0x500>)
 80029cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029ce:	e011      	b.n	80029f4 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029d0:	f7ff f9d2 	bl	8001d78 <HAL_RCC_GetSysClockFreq>
 80029d4:	0003      	movs	r3, r0
 80029d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029d8:	e00c      	b.n	80029f4 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029da:	2380      	movs	r3, #128	; 0x80
 80029dc:	021b      	lsls	r3, r3, #8
 80029de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029e0:	e008      	b.n	80029f4 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80029e6:	231a      	movs	r3, #26
 80029e8:	2218      	movs	r2, #24
 80029ea:	189b      	adds	r3, r3, r2
 80029ec:	19db      	adds	r3, r3, r7
 80029ee:	2201      	movs	r2, #1
 80029f0:	701a      	strb	r2, [r3, #0]
        break;
 80029f2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80029f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d020      	beq.n	8002a3c <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	085a      	lsrs	r2, r3, #1
 8002a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a02:	18d2      	adds	r2, r2, r3
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	0019      	movs	r1, r3
 8002a0a:	0010      	movs	r0, r2
 8002a0c:	f7fd fb7c 	bl	8000108 <__udivsi3>
 8002a10:	0003      	movs	r3, r0
 8002a12:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a16:	2b0f      	cmp	r3, #15
 8002a18:	d90a      	bls.n	8002a30 <UART_SetConfig+0x4cc>
 8002a1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a1c:	2380      	movs	r3, #128	; 0x80
 8002a1e:	025b      	lsls	r3, r3, #9
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d205      	bcs.n	8002a30 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	60da      	str	r2, [r3, #12]
 8002a2e:	e005      	b.n	8002a3c <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002a30:	231a      	movs	r3, #26
 8002a32:	2218      	movs	r2, #24
 8002a34:	189b      	adds	r3, r3, r2
 8002a36:	19db      	adds	r3, r3, r7
 8002a38:	2201      	movs	r2, #1
 8002a3a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	2200      	movs	r2, #0
 8002a46:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002a48:	231a      	movs	r3, #26
 8002a4a:	2218      	movs	r2, #24
 8002a4c:	189b      	adds	r3, r3, r2
 8002a4e:	19db      	adds	r3, r3, r7
 8002a50:	781b      	ldrb	r3, [r3, #0]
}
 8002a52:	0018      	movs	r0, r3
 8002a54:	46bd      	mov	sp, r7
 8002a56:	b00e      	add	sp, #56	; 0x38
 8002a58:	bdb0      	pop	{r4, r5, r7, pc}
 8002a5a:	46c0      	nop			; (mov r8, r8)
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	003d0900 	.word	0x003d0900
 8002a64:	00f42400 	.word	0x00f42400
 8002a68:	080030fc 	.word	0x080030fc

08002a6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	2201      	movs	r2, #1
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d00b      	beq.n	8002a96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	4a4a      	ldr	r2, [pc, #296]	; (8002bb0 <UART_AdvFeatureConfig+0x144>)
 8002a86:	4013      	ands	r3, r2
 8002a88:	0019      	movs	r1, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	d00b      	beq.n	8002ab8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	4a43      	ldr	r2, [pc, #268]	; (8002bb4 <UART_AdvFeatureConfig+0x148>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	0019      	movs	r1, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	2204      	movs	r2, #4
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d00b      	beq.n	8002ada <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	4a3b      	ldr	r2, [pc, #236]	; (8002bb8 <UART_AdvFeatureConfig+0x14c>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	0019      	movs	r1, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	2208      	movs	r2, #8
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d00b      	beq.n	8002afc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	4a34      	ldr	r2, [pc, #208]	; (8002bbc <UART_AdvFeatureConfig+0x150>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	0019      	movs	r1, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	2210      	movs	r2, #16
 8002b02:	4013      	ands	r3, r2
 8002b04:	d00b      	beq.n	8002b1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	4a2c      	ldr	r2, [pc, #176]	; (8002bc0 <UART_AdvFeatureConfig+0x154>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	0019      	movs	r1, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	2220      	movs	r2, #32
 8002b24:	4013      	ands	r3, r2
 8002b26:	d00b      	beq.n	8002b40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	4a25      	ldr	r2, [pc, #148]	; (8002bc4 <UART_AdvFeatureConfig+0x158>)
 8002b30:	4013      	ands	r3, r2
 8002b32:	0019      	movs	r1, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	2240      	movs	r2, #64	; 0x40
 8002b46:	4013      	ands	r3, r2
 8002b48:	d01d      	beq.n	8002b86 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	4a1d      	ldr	r2, [pc, #116]	; (8002bc8 <UART_AdvFeatureConfig+0x15c>)
 8002b52:	4013      	ands	r3, r2
 8002b54:	0019      	movs	r1, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b66:	2380      	movs	r3, #128	; 0x80
 8002b68:	035b      	lsls	r3, r3, #13
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d10b      	bne.n	8002b86 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	4a15      	ldr	r2, [pc, #84]	; (8002bcc <UART_AdvFeatureConfig+0x160>)
 8002b76:	4013      	ands	r3, r2
 8002b78:	0019      	movs	r1, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	2280      	movs	r2, #128	; 0x80
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d00b      	beq.n	8002ba8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	4a0e      	ldr	r2, [pc, #56]	; (8002bd0 <UART_AdvFeatureConfig+0x164>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	0019      	movs	r1, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	605a      	str	r2, [r3, #4]
  }
}
 8002ba8:	46c0      	nop			; (mov r8, r8)
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b002      	add	sp, #8
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	fffdffff 	.word	0xfffdffff
 8002bb4:	fffeffff 	.word	0xfffeffff
 8002bb8:	fffbffff 	.word	0xfffbffff
 8002bbc:	ffff7fff 	.word	0xffff7fff
 8002bc0:	ffffefff 	.word	0xffffefff
 8002bc4:	ffffdfff 	.word	0xffffdfff
 8002bc8:	ffefffff 	.word	0xffefffff
 8002bcc:	ff9fffff 	.word	0xff9fffff
 8002bd0:	fff7ffff 	.word	0xfff7ffff

08002bd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b092      	sub	sp, #72	; 0x48
 8002bd8:	af02      	add	r7, sp, #8
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2284      	movs	r2, #132	; 0x84
 8002be0:	2100      	movs	r1, #0
 8002be2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002be4:	f7fd ff48 	bl	8000a78 <HAL_GetTick>
 8002be8:	0003      	movs	r3, r0
 8002bea:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2208      	movs	r2, #8
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d12c      	bne.n	8002c54 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bfc:	2280      	movs	r2, #128	; 0x80
 8002bfe:	0391      	lsls	r1, r2, #14
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	4a46      	ldr	r2, [pc, #280]	; (8002d1c <UART_CheckIdleState+0x148>)
 8002c04:	9200      	str	r2, [sp, #0]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f000 f88c 	bl	8002d24 <UART_WaitOnFlagUntilTimeout>
 8002c0c:	1e03      	subs	r3, r0, #0
 8002c0e:	d021      	beq.n	8002c54 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c10:	f3ef 8310 	mrs	r3, PRIMASK
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002c18:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c20:	f383 8810 	msr	PRIMASK, r3
}
 8002c24:	46c0      	nop			; (mov r8, r8)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2180      	movs	r1, #128	; 0x80
 8002c32:	438a      	bics	r2, r1
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3c:	f383 8810 	msr	PRIMASK, r3
}
 8002c40:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2220      	movs	r2, #32
 8002c46:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2278      	movs	r2, #120	; 0x78
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e05f      	b.n	8002d14 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2204      	movs	r2, #4
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d146      	bne.n	8002cf0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c64:	2280      	movs	r2, #128	; 0x80
 8002c66:	03d1      	lsls	r1, r2, #15
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	4a2c      	ldr	r2, [pc, #176]	; (8002d1c <UART_CheckIdleState+0x148>)
 8002c6c:	9200      	str	r2, [sp, #0]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f000 f858 	bl	8002d24 <UART_WaitOnFlagUntilTimeout>
 8002c74:	1e03      	subs	r3, r0, #0
 8002c76:	d03b      	beq.n	8002cf0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c78:	f3ef 8310 	mrs	r3, PRIMASK
 8002c7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c80:	637b      	str	r3, [r7, #52]	; 0x34
 8002c82:	2301      	movs	r3, #1
 8002c84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f383 8810 	msr	PRIMASK, r3
}
 8002c8c:	46c0      	nop			; (mov r8, r8)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4921      	ldr	r1, [pc, #132]	; (8002d20 <UART_CheckIdleState+0x14c>)
 8002c9a:	400a      	ands	r2, r1
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	f383 8810 	msr	PRIMASK, r3
}
 8002ca8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002caa:	f3ef 8310 	mrs	r3, PRIMASK
 8002cae:	61bb      	str	r3, [r7, #24]
  return(result);
 8002cb0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cb2:	633b      	str	r3, [r7, #48]	; 0x30
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f383 8810 	msr	PRIMASK, r3
}
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2101      	movs	r1, #1
 8002ccc:	438a      	bics	r2, r1
 8002cce:	609a      	str	r2, [r3, #8]
 8002cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	f383 8810 	msr	PRIMASK, r3
}
 8002cda:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2280      	movs	r2, #128	; 0x80
 8002ce0:	2120      	movs	r1, #32
 8002ce2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2278      	movs	r2, #120	; 0x78
 8002ce8:	2100      	movs	r1, #0
 8002cea:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e011      	b.n	8002d14 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2280      	movs	r2, #128	; 0x80
 8002cfa:	2120      	movs	r1, #32
 8002cfc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2278      	movs	r2, #120	; 0x78
 8002d0e:	2100      	movs	r1, #0
 8002d10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	0018      	movs	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	b010      	add	sp, #64	; 0x40
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	01ffffff 	.word	0x01ffffff
 8002d20:	fffffedf 	.word	0xfffffedf

08002d24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	1dfb      	adds	r3, r7, #7
 8002d32:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d34:	e04b      	b.n	8002dce <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	d048      	beq.n	8002dce <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d3c:	f7fd fe9c 	bl	8000a78 <HAL_GetTick>
 8002d40:	0002      	movs	r2, r0
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d302      	bcc.n	8002d52 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e04b      	b.n	8002dee <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2204      	movs	r2, #4
 8002d5e:	4013      	ands	r3, r2
 8002d60:	d035      	beq.n	8002dce <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	2208      	movs	r2, #8
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d111      	bne.n	8002d94 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2208      	movs	r2, #8
 8002d76:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f000 f860 	bl	8002e40 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2284      	movs	r2, #132	; 0x84
 8002d84:	2108      	movs	r1, #8
 8002d86:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2278      	movs	r2, #120	; 0x78
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e02c      	b.n	8002dee <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	69da      	ldr	r2, [r3, #28]
 8002d9a:	2380      	movs	r3, #128	; 0x80
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	401a      	ands	r2, r3
 8002da0:	2380      	movs	r3, #128	; 0x80
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d112      	bne.n	8002dce <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2280      	movs	r2, #128	; 0x80
 8002dae:	0112      	lsls	r2, r2, #4
 8002db0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	0018      	movs	r0, r3
 8002db6:	f000 f843 	bl	8002e40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2284      	movs	r2, #132	; 0x84
 8002dbe:	2120      	movs	r1, #32
 8002dc0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2278      	movs	r2, #120	; 0x78
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e00f      	b.n	8002dee <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	425a      	negs	r2, r3
 8002dde:	4153      	adcs	r3, r2
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	001a      	movs	r2, r3
 8002de4:	1dfb      	adds	r3, r7, #7
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d0a4      	beq.n	8002d36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	0018      	movs	r0, r3
 8002df0:	46bd      	mov	sp, r7
 8002df2:	b004      	add	sp, #16
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b086      	sub	sp, #24
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8002e02:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e04:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	2301      	movs	r3, #1
 8002e0a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f383 8810 	msr	PRIMASK, r3
}
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	21c0      	movs	r1, #192	; 0xc0
 8002e20:	438a      	bics	r2, r1
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	f383 8810 	msr	PRIMASK, r3
}
 8002e2e:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2220      	movs	r2, #32
 8002e34:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	b006      	add	sp, #24
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08e      	sub	sp, #56	; 0x38
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e48:	f3ef 8310 	mrs	r3, PRIMASK
 8002e4c:	617b      	str	r3, [r7, #20]
  return(result);
 8002e4e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e50:	637b      	str	r3, [r7, #52]	; 0x34
 8002e52:	2301      	movs	r3, #1
 8002e54:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	f383 8810 	msr	PRIMASK, r3
}
 8002e5c:	46c0      	nop			; (mov r8, r8)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4926      	ldr	r1, [pc, #152]	; (8002f04 <UART_EndRxTransfer+0xc4>)
 8002e6a:	400a      	ands	r2, r1
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	f383 8810 	msr	PRIMASK, r3
}
 8002e78:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e7a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e7e:	623b      	str	r3, [r7, #32]
  return(result);
 8002e80:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e82:	633b      	str	r3, [r7, #48]	; 0x30
 8002e84:	2301      	movs	r3, #1
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	f383 8810 	msr	PRIMASK, r3
}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	438a      	bics	r2, r1
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea6:	f383 8810 	msr	PRIMASK, r3
}
 8002eaa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d118      	bne.n	8002ee6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eb4:	f3ef 8310 	mrs	r3, PRIMASK
 8002eb8:	60bb      	str	r3, [r7, #8]
  return(result);
 8002eba:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f383 8810 	msr	PRIMASK, r3
}
 8002ec8:	46c0      	nop			; (mov r8, r8)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2110      	movs	r1, #16
 8002ed6:	438a      	bics	r2, r1
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002edc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	f383 8810 	msr	PRIMASK, r3
}
 8002ee4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2280      	movs	r2, #128	; 0x80
 8002eea:	2120      	movs	r1, #32
 8002eec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	46bd      	mov	sp, r7
 8002efe:	b00e      	add	sp, #56	; 0x38
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	fffffedf 	.word	0xfffffedf

08002f08 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08c      	sub	sp, #48	; 0x30
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f14:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d135      	bne.n	8002f8e <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8002f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f24:	2252      	movs	r2, #82	; 0x52
 8002f26:	2100      	movs	r1, #0
 8002f28:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f2a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f2e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f30:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002f32:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f34:	2301      	movs	r3, #1
 8002f36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	f383 8810 	msr	PRIMASK, r3
}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2180      	movs	r1, #128	; 0x80
 8002f4c:	438a      	bics	r2, r1
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f383 8810 	msr	PRIMASK, r3
}
 8002f5a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f5c:	f3ef 8310 	mrs	r3, PRIMASK
 8002f60:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f62:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
 8002f66:	2301      	movs	r3, #1
 8002f68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	f383 8810 	msr	PRIMASK, r3
}
 8002f70:	46c0      	nop			; (mov r8, r8)
 8002f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2140      	movs	r1, #64	; 0x40
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	f383 8810 	msr	PRIMASK, r3
}
 8002f8c:	e004      	b.n	8002f98 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8002f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f90:	0018      	movs	r0, r3
 8002f92:	f7fd fc0b 	bl	80007ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	46c0      	nop			; (mov r8, r8)
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	b00c      	add	sp, #48	; 0x30
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fac:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f7fd fbdb 	bl	800076c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	b004      	add	sp, #16
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b086      	sub	sp, #24
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fca:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fd0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2280      	movs	r2, #128	; 0x80
 8002fd6:	589b      	ldr	r3, [r3, r2]
 8002fd8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2280      	movs	r2, #128	; 0x80
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	2b80      	cmp	r3, #128	; 0x80
 8002fe6:	d10a      	bne.n	8002ffe <UART_DMAError+0x40>
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	2b21      	cmp	r3, #33	; 0x21
 8002fec:	d107      	bne.n	8002ffe <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2252      	movs	r2, #82	; 0x52
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f7ff fefc 	bl	8002df6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	2240      	movs	r2, #64	; 0x40
 8003006:	4013      	ands	r3, r2
 8003008:	2b40      	cmp	r3, #64	; 0x40
 800300a:	d10a      	bne.n	8003022 <UART_DMAError+0x64>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2b22      	cmp	r3, #34	; 0x22
 8003010:	d107      	bne.n	8003022 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	225a      	movs	r2, #90	; 0x5a
 8003016:	2100      	movs	r1, #0
 8003018:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	0018      	movs	r0, r3
 800301e:	f7ff ff0f 	bl	8002e40 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2284      	movs	r2, #132	; 0x84
 8003026:	589b      	ldr	r3, [r3, r2]
 8003028:	2210      	movs	r2, #16
 800302a:	431a      	orrs	r2, r3
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2184      	movs	r1, #132	; 0x84
 8003030:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	0018      	movs	r0, r3
 8003036:	f7ff fa8d 	bl	8002554 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	46bd      	mov	sp, r7
 800303e:	b006      	add	sp, #24
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <__libc_init_array>:
 8003044:	b570      	push	{r4, r5, r6, lr}
 8003046:	2600      	movs	r6, #0
 8003048:	4d0c      	ldr	r5, [pc, #48]	; (800307c <__libc_init_array+0x38>)
 800304a:	4c0d      	ldr	r4, [pc, #52]	; (8003080 <__libc_init_array+0x3c>)
 800304c:	1b64      	subs	r4, r4, r5
 800304e:	10a4      	asrs	r4, r4, #2
 8003050:	42a6      	cmp	r6, r4
 8003052:	d109      	bne.n	8003068 <__libc_init_array+0x24>
 8003054:	2600      	movs	r6, #0
 8003056:	f000 f821 	bl	800309c <_init>
 800305a:	4d0a      	ldr	r5, [pc, #40]	; (8003084 <__libc_init_array+0x40>)
 800305c:	4c0a      	ldr	r4, [pc, #40]	; (8003088 <__libc_init_array+0x44>)
 800305e:	1b64      	subs	r4, r4, r5
 8003060:	10a4      	asrs	r4, r4, #2
 8003062:	42a6      	cmp	r6, r4
 8003064:	d105      	bne.n	8003072 <__libc_init_array+0x2e>
 8003066:	bd70      	pop	{r4, r5, r6, pc}
 8003068:	00b3      	lsls	r3, r6, #2
 800306a:	58eb      	ldr	r3, [r5, r3]
 800306c:	4798      	blx	r3
 800306e:	3601      	adds	r6, #1
 8003070:	e7ee      	b.n	8003050 <__libc_init_array+0xc>
 8003072:	00b3      	lsls	r3, r6, #2
 8003074:	58eb      	ldr	r3, [r5, r3]
 8003076:	4798      	blx	r3
 8003078:	3601      	adds	r6, #1
 800307a:	e7f2      	b.n	8003062 <__libc_init_array+0x1e>
 800307c:	08003128 	.word	0x08003128
 8003080:	08003128 	.word	0x08003128
 8003084:	08003128 	.word	0x08003128
 8003088:	0800312c 	.word	0x0800312c

0800308c <memset>:
 800308c:	0003      	movs	r3, r0
 800308e:	1882      	adds	r2, r0, r2
 8003090:	4293      	cmp	r3, r2
 8003092:	d100      	bne.n	8003096 <memset+0xa>
 8003094:	4770      	bx	lr
 8003096:	7019      	strb	r1, [r3, #0]
 8003098:	3301      	adds	r3, #1
 800309a:	e7f9      	b.n	8003090 <memset+0x4>

0800309c <_init>:
 800309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030a2:	bc08      	pop	{r3}
 80030a4:	469e      	mov	lr, r3
 80030a6:	4770      	bx	lr

080030a8 <_fini>:
 80030a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ae:	bc08      	pop	{r3}
 80030b0:	469e      	mov	lr, r3
 80030b2:	4770      	bx	lr

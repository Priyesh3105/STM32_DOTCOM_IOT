
RTC_ALARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e0c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08003ecc  08003ecc  00013ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fa8  08003fa8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003fa8  08003fa8  00013fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fb0  08003fb0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fb0  08003fb0  00013fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fb4  08003fb4  00013fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003fb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20000070  08004028  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  08004028  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab92  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019e3  00000000  00000000  0002ac2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e8  00000000  00000000  0002c610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000840  00000000  00000000  0002cef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014680  00000000  00000000  0002d738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b5dd  00000000  00000000  00041db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e058  00000000  00000000  0004d395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cb3ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022f0  00000000  00000000  000cb440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003eb4 	.word	0x08003eb4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003eb4 	.word	0x08003eb4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4647      	mov	r7, r8
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	4699      	mov	r9, r3
 8000280:	0c3b      	lsrs	r3, r7, #16
 8000282:	469c      	mov	ip, r3
 8000284:	0413      	lsls	r3, r2, #16
 8000286:	0c1b      	lsrs	r3, r3, #16
 8000288:	001d      	movs	r5, r3
 800028a:	000e      	movs	r6, r1
 800028c:	4661      	mov	r1, ip
 800028e:	0400      	lsls	r0, r0, #16
 8000290:	0c14      	lsrs	r4, r2, #16
 8000292:	0c00      	lsrs	r0, r0, #16
 8000294:	4345      	muls	r5, r0
 8000296:	434b      	muls	r3, r1
 8000298:	4360      	muls	r0, r4
 800029a:	4361      	muls	r1, r4
 800029c:	18c0      	adds	r0, r0, r3
 800029e:	0c2c      	lsrs	r4, r5, #16
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4372      	muls	r2, r6
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	4463      	add	r3, ip
 80002ba:	042d      	lsls	r5, r5, #16
 80002bc:	0c2d      	lsrs	r5, r5, #16
 80002be:	18c9      	adds	r1, r1, r3
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	1889      	adds	r1, r1, r2
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	469b      	mov	fp, r3
 8000306:	d433      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000308:	465a      	mov	r2, fp
 800030a:	4653      	mov	r3, sl
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83a      	bhi.n	8000392 <__udivmoddi4+0xc2>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e078      	b.n	8000414 <__udivmoddi4+0x144>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e075      	b.n	800041a <__udivmoddi4+0x14a>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e028      	b.n	800039a <__udivmoddi4+0xca>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	2320      	movs	r3, #32
 8000374:	1a9b      	subs	r3, r3, r2
 8000376:	4652      	mov	r2, sl
 8000378:	40da      	lsrs	r2, r3
 800037a:	4641      	mov	r1, r8
 800037c:	0013      	movs	r3, r2
 800037e:	464a      	mov	r2, r9
 8000380:	408a      	lsls	r2, r1
 8000382:	0017      	movs	r7, r2
 8000384:	4642      	mov	r2, r8
 8000386:	431f      	orrs	r7, r3
 8000388:	4653      	mov	r3, sl
 800038a:	4093      	lsls	r3, r2
 800038c:	001e      	movs	r6, r3
 800038e:	42af      	cmp	r7, r5
 8000390:	d9c4      	bls.n	800031c <__udivmoddi4+0x4c>
 8000392:	2200      	movs	r2, #0
 8000394:	2300      	movs	r3, #0
 8000396:	9200      	str	r2, [sp, #0]
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	4643      	mov	r3, r8
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0d9      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a0:	07fb      	lsls	r3, r7, #31
 80003a2:	0872      	lsrs	r2, r6, #1
 80003a4:	431a      	orrs	r2, r3
 80003a6:	4646      	mov	r6, r8
 80003a8:	087b      	lsrs	r3, r7, #1
 80003aa:	e00e      	b.n	80003ca <__udivmoddi4+0xfa>
 80003ac:	42ab      	cmp	r3, r5
 80003ae:	d101      	bne.n	80003b4 <__udivmoddi4+0xe4>
 80003b0:	42a2      	cmp	r2, r4
 80003b2:	d80c      	bhi.n	80003ce <__udivmoddi4+0xfe>
 80003b4:	1aa4      	subs	r4, r4, r2
 80003b6:	419d      	sbcs	r5, r3
 80003b8:	2001      	movs	r0, #1
 80003ba:	1924      	adds	r4, r4, r4
 80003bc:	416d      	adcs	r5, r5
 80003be:	2100      	movs	r1, #0
 80003c0:	3e01      	subs	r6, #1
 80003c2:	1824      	adds	r4, r4, r0
 80003c4:	414d      	adcs	r5, r1
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d006      	beq.n	80003d8 <__udivmoddi4+0x108>
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d9ee      	bls.n	80003ac <__udivmoddi4+0xdc>
 80003ce:	3e01      	subs	r6, #1
 80003d0:	1924      	adds	r4, r4, r4
 80003d2:	416d      	adcs	r5, r5
 80003d4:	2e00      	cmp	r6, #0
 80003d6:	d1f8      	bne.n	80003ca <__udivmoddi4+0xfa>
 80003d8:	9800      	ldr	r0, [sp, #0]
 80003da:	9901      	ldr	r1, [sp, #4]
 80003dc:	465b      	mov	r3, fp
 80003de:	1900      	adds	r0, r0, r4
 80003e0:	4169      	adcs	r1, r5
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	db24      	blt.n	8000430 <__udivmoddi4+0x160>
 80003e6:	002b      	movs	r3, r5
 80003e8:	465a      	mov	r2, fp
 80003ea:	4644      	mov	r4, r8
 80003ec:	40d3      	lsrs	r3, r2
 80003ee:	002a      	movs	r2, r5
 80003f0:	40e2      	lsrs	r2, r4
 80003f2:	001c      	movs	r4, r3
 80003f4:	465b      	mov	r3, fp
 80003f6:	0015      	movs	r5, r2
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db2a      	blt.n	8000452 <__udivmoddi4+0x182>
 80003fc:	0026      	movs	r6, r4
 80003fe:	409e      	lsls	r6, r3
 8000400:	0033      	movs	r3, r6
 8000402:	0026      	movs	r6, r4
 8000404:	4647      	mov	r7, r8
 8000406:	40be      	lsls	r6, r7
 8000408:	0032      	movs	r2, r6
 800040a:	1a80      	subs	r0, r0, r2
 800040c:	4199      	sbcs	r1, r3
 800040e:	9000      	str	r0, [sp, #0]
 8000410:	9101      	str	r1, [sp, #4]
 8000412:	e79f      	b.n	8000354 <__udivmoddi4+0x84>
 8000414:	42a3      	cmp	r3, r4
 8000416:	d8bc      	bhi.n	8000392 <__udivmoddi4+0xc2>
 8000418:	e783      	b.n	8000322 <__udivmoddi4+0x52>
 800041a:	4642      	mov	r2, r8
 800041c:	2320      	movs	r3, #32
 800041e:	2100      	movs	r1, #0
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	2200      	movs	r2, #0
 8000424:	9100      	str	r1, [sp, #0]
 8000426:	9201      	str	r2, [sp, #4]
 8000428:	2201      	movs	r2, #1
 800042a:	40da      	lsrs	r2, r3
 800042c:	9201      	str	r2, [sp, #4]
 800042e:	e786      	b.n	800033e <__udivmoddi4+0x6e>
 8000430:	4642      	mov	r2, r8
 8000432:	2320      	movs	r3, #32
 8000434:	1a9b      	subs	r3, r3, r2
 8000436:	002a      	movs	r2, r5
 8000438:	4646      	mov	r6, r8
 800043a:	409a      	lsls	r2, r3
 800043c:	0023      	movs	r3, r4
 800043e:	40f3      	lsrs	r3, r6
 8000440:	4644      	mov	r4, r8
 8000442:	4313      	orrs	r3, r2
 8000444:	002a      	movs	r2, r5
 8000446:	40e2      	lsrs	r2, r4
 8000448:	001c      	movs	r4, r3
 800044a:	465b      	mov	r3, fp
 800044c:	0015      	movs	r5, r2
 800044e:	2b00      	cmp	r3, #0
 8000450:	dad4      	bge.n	80003fc <__udivmoddi4+0x12c>
 8000452:	4642      	mov	r2, r8
 8000454:	002f      	movs	r7, r5
 8000456:	2320      	movs	r3, #32
 8000458:	0026      	movs	r6, r4
 800045a:	4097      	lsls	r7, r2
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	40de      	lsrs	r6, r3
 8000460:	003b      	movs	r3, r7
 8000462:	4333      	orrs	r3, r6
 8000464:	e7cd      	b.n	8000402 <__udivmoddi4+0x132>
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	; (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b083      	sub	sp, #12
 80004c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c2:	f000 fb27 	bl	8000b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c6:	f000 f85f 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ca:	f000 f9a3 	bl	8000814 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004ce:	f000 f971 	bl	80007b4 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80004d2:	f000 f8d3 	bl	800067c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80004d6:	4924      	ldr	r1, [pc, #144]	; (8000568 <main+0xac>)
 80004d8:	4b24      	ldr	r3, [pc, #144]	; (800056c <main+0xb0>)
 80004da:	2200      	movs	r2, #0
 80004dc:	0018      	movs	r0, r3
 80004de:	f001 fedb 	bl	8002298 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80004e2:	4923      	ldr	r1, [pc, #140]	; (8000570 <main+0xb4>)
 80004e4:	4b21      	ldr	r3, [pc, #132]	; (800056c <main+0xb0>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	0018      	movs	r0, r3
 80004ea:	f001 ffc7 	bl	800247c <HAL_RTC_GetDate>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80004ee:	491e      	ldr	r1, [pc, #120]	; (8000568 <main+0xac>)
 80004f0:	4b1e      	ldr	r3, [pc, #120]	; (800056c <main+0xb0>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	0018      	movs	r0, r3
 80004f6:	f001 fecf 	bl	8002298 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80004fa:	491d      	ldr	r1, [pc, #116]	; (8000570 <main+0xb4>)
 80004fc:	4b1b      	ldr	r3, [pc, #108]	; (800056c <main+0xb0>)
 80004fe:	2200      	movs	r2, #0
 8000500:	0018      	movs	r0, r3
 8000502:	f001 ffbb 	bl	800247c <HAL_RTC_GetDate>

		sprintf(date, "Date: %02d.%02d.%02d\t", sDate.Date, sDate.Month,
 8000506:	4b1a      	ldr	r3, [pc, #104]	; (8000570 <main+0xb4>)
 8000508:	789b      	ldrb	r3, [r3, #2]
 800050a:	001a      	movs	r2, r3
 800050c:	4b18      	ldr	r3, [pc, #96]	; (8000570 <main+0xb4>)
 800050e:	785b      	ldrb	r3, [r3, #1]
 8000510:	001c      	movs	r4, r3
				sDate.Year);
 8000512:	4b17      	ldr	r3, [pc, #92]	; (8000570 <main+0xb4>)
 8000514:	78db      	ldrb	r3, [r3, #3]
		sprintf(date, "Date: %02d.%02d.%02d\t", sDate.Date, sDate.Month,
 8000516:	4917      	ldr	r1, [pc, #92]	; (8000574 <main+0xb8>)
 8000518:	4817      	ldr	r0, [pc, #92]	; (8000578 <main+0xbc>)
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	0023      	movs	r3, r4
 800051e:	f003 f85f 	bl	80035e0 <siprintf>
		sprintf(time, "Time: %02d.%02d.%02d\r\n", sTime.Hours, sTime.Minutes,
 8000522:	4b11      	ldr	r3, [pc, #68]	; (8000568 <main+0xac>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	001a      	movs	r2, r3
 8000528:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <main+0xac>)
 800052a:	785b      	ldrb	r3, [r3, #1]
 800052c:	001c      	movs	r4, r3
				sTime.Seconds);
 800052e:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <main+0xac>)
 8000530:	789b      	ldrb	r3, [r3, #2]
		sprintf(time, "Time: %02d.%02d.%02d\r\n", sTime.Hours, sTime.Minutes,
 8000532:	4912      	ldr	r1, [pc, #72]	; (800057c <main+0xc0>)
 8000534:	4812      	ldr	r0, [pc, #72]	; (8000580 <main+0xc4>)
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	0023      	movs	r3, r4
 800053a:	f003 f851 	bl	80035e0 <siprintf>

		HAL_UART_Transmit(&huart1, (uint8_t*) date, sizeof(date), 300);
 800053e:	2396      	movs	r3, #150	; 0x96
 8000540:	005b      	lsls	r3, r3, #1
 8000542:	490d      	ldr	r1, [pc, #52]	; (8000578 <main+0xbc>)
 8000544:	480f      	ldr	r0, [pc, #60]	; (8000584 <main+0xc8>)
 8000546:	221e      	movs	r2, #30
 8000548:	f002 faca 	bl	8002ae0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*) time, sizeof(time), 300);
 800054c:	2396      	movs	r3, #150	; 0x96
 800054e:	005b      	lsls	r3, r3, #1
 8000550:	490b      	ldr	r1, [pc, #44]	; (8000580 <main+0xc4>)
 8000552:	480c      	ldr	r0, [pc, #48]	; (8000584 <main+0xc8>)
 8000554:	221e      	movs	r2, #30
 8000556:	f002 fac3 	bl	8002ae0 <HAL_UART_Transmit>
		HAL_Delay(1000);
 800055a:	23fa      	movs	r3, #250	; 0xfa
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	0018      	movs	r0, r3
 8000560:	f000 fb48 	bl	8000bf4 <HAL_Delay>
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000564:	e7c3      	b.n	80004ee <main+0x32>
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	2000008c 	.word	0x2000008c
 800056c:	200000a4 	.word	0x200000a4
 8000570:	200000a0 	.word	0x200000a0
 8000574:	08003ecc 	.word	0x08003ecc
 8000578:	20000150 	.word	0x20000150
 800057c:	08003ee4 	.word	0x08003ee4
 8000580:	20000170 	.word	0x20000170
 8000584:	200000c8 	.word	0x200000c8

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b590      	push	{r4, r7, lr}
 800058a:	b09d      	sub	sp, #116	; 0x74
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	2438      	movs	r4, #56	; 0x38
 8000590:	193b      	adds	r3, r7, r4
 8000592:	0018      	movs	r0, r3
 8000594:	2338      	movs	r3, #56	; 0x38
 8000596:	001a      	movs	r2, r3
 8000598:	2100      	movs	r1, #0
 800059a:	f003 f819 	bl	80035d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059e:	2324      	movs	r3, #36	; 0x24
 80005a0:	18fb      	adds	r3, r7, r3
 80005a2:	0018      	movs	r0, r3
 80005a4:	2314      	movs	r3, #20
 80005a6:	001a      	movs	r2, r3
 80005a8:	2100      	movs	r1, #0
 80005aa:	f003 f811 	bl	80035d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005ae:	003b      	movs	r3, r7
 80005b0:	0018      	movs	r0, r3
 80005b2:	2324      	movs	r3, #36	; 0x24
 80005b4:	001a      	movs	r2, r3
 80005b6:	2100      	movs	r1, #0
 80005b8:	f003 f80a 	bl	80035d0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005bc:	4b2d      	ldr	r3, [pc, #180]	; (8000674 <SystemClock_Config+0xec>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a2d      	ldr	r2, [pc, #180]	; (8000678 <SystemClock_Config+0xf0>)
 80005c2:	401a      	ands	r2, r3
 80005c4:	4b2b      	ldr	r3, [pc, #172]	; (8000674 <SystemClock_Config+0xec>)
 80005c6:	2180      	movs	r1, #128	; 0x80
 80005c8:	0109      	lsls	r1, r1, #4
 80005ca:	430a      	orrs	r2, r1
 80005cc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80005ce:	0021      	movs	r1, r4
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	220a      	movs	r2, #10
 80005d4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2201      	movs	r2, #1
 80005da:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2210      	movs	r2, #16
 80005e0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2201      	movs	r2, #1
 80005e6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2202      	movs	r2, #2
 80005ec:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2200      	movs	r2, #0
 80005f2:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	02d2      	lsls	r2, r2, #11
 80005fa:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	03d2      	lsls	r2, r2, #15
 8000602:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	187b      	adds	r3, r7, r1
 8000606:	0018      	movs	r0, r3
 8000608:	f000 fd8a 	bl	8001120 <HAL_RCC_OscConfig>
 800060c:	1e03      	subs	r3, r0, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000610:	f000 f978 	bl	8000904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000614:	2124      	movs	r1, #36	; 0x24
 8000616:	187b      	adds	r3, r7, r1
 8000618:	220f      	movs	r2, #15
 800061a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2203      	movs	r2, #3
 8000620:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2101      	movs	r1, #1
 8000638:	0018      	movs	r0, r3
 800063a:	f001 f935 	bl	80018a8 <HAL_RCC_ClockConfig>
 800063e:	1e03      	subs	r3, r0, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000642:	f000 f95f 	bl	8000904 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 8000646:	003b      	movs	r3, r7
 8000648:	2221      	movs	r2, #33	; 0x21
 800064a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800064c:	003b      	movs	r3, r7
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000652:	003b      	movs	r3, r7
 8000654:	2280      	movs	r2, #128	; 0x80
 8000656:	0292      	lsls	r2, r2, #10
 8000658:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800065a:	003b      	movs	r3, r7
 800065c:	0018      	movs	r0, r3
 800065e:	f001 fb47 	bl	8001cf0 <HAL_RCCEx_PeriphCLKConfig>
 8000662:	1e03      	subs	r3, r0, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000666:	f000 f94d 	bl	8000904 <Error_Handler>
  }
}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b01d      	add	sp, #116	; 0x74
 8000670:	bd90      	pop	{r4, r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	40007000 	.word	0x40007000
 8000678:	ffffe7ff 	.word	0xffffe7ff

0800067c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b090      	sub	sp, #64	; 0x40
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000682:	232c      	movs	r3, #44	; 0x2c
 8000684:	18fb      	adds	r3, r7, r3
 8000686:	0018      	movs	r0, r3
 8000688:	2314      	movs	r3, #20
 800068a:	001a      	movs	r2, r3
 800068c:	2100      	movs	r1, #0
 800068e:	f002 ff9f 	bl	80035d0 <memset>
  RTC_DateTypeDef sDate = {0};
 8000692:	2328      	movs	r3, #40	; 0x28
 8000694:	18fb      	adds	r3, r7, r3
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800069a:	003b      	movs	r3, r7
 800069c:	0018      	movs	r0, r3
 800069e:	2328      	movs	r3, #40	; 0x28
 80006a0:	001a      	movs	r2, r3
 80006a2:	2100      	movs	r1, #0
 80006a4:	f002 ff94 	bl	80035d0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006a8:	4b40      	ldr	r3, [pc, #256]	; (80007ac <MX_RTC_Init+0x130>)
 80006aa:	4a41      	ldr	r2, [pc, #260]	; (80007b0 <MX_RTC_Init+0x134>)
 80006ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006ae:	4b3f      	ldr	r3, [pc, #252]	; (80007ac <MX_RTC_Init+0x130>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006b4:	4b3d      	ldr	r3, [pc, #244]	; (80007ac <MX_RTC_Init+0x130>)
 80006b6:	227f      	movs	r2, #127	; 0x7f
 80006b8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006ba:	4b3c      	ldr	r3, [pc, #240]	; (80007ac <MX_RTC_Init+0x130>)
 80006bc:	22ff      	movs	r2, #255	; 0xff
 80006be:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006c0:	4b3a      	ldr	r3, [pc, #232]	; (80007ac <MX_RTC_Init+0x130>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80006c6:	4b39      	ldr	r3, [pc, #228]	; (80007ac <MX_RTC_Init+0x130>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006cc:	4b37      	ldr	r3, [pc, #220]	; (80007ac <MX_RTC_Init+0x130>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006d2:	4b36      	ldr	r3, [pc, #216]	; (80007ac <MX_RTC_Init+0x130>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006d8:	4b34      	ldr	r3, [pc, #208]	; (80007ac <MX_RTC_Init+0x130>)
 80006da:	0018      	movs	r0, r3
 80006dc:	f001 fc96 	bl	800200c <HAL_RTC_Init>
 80006e0:	1e03      	subs	r3, r0, #0
 80006e2:	d001      	beq.n	80006e8 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 80006e4:	f000 f90e 	bl	8000904 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 80006e8:	212c      	movs	r1, #44	; 0x2c
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2212      	movs	r2, #18
 80006ee:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x30;
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2230      	movs	r2, #48	; 0x30
 80006f4:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	2200      	movs	r2, #0
 80006fa:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000708:	1879      	adds	r1, r7, r1
 800070a:	4b28      	ldr	r3, [pc, #160]	; (80007ac <MX_RTC_Init+0x130>)
 800070c:	2201      	movs	r2, #1
 800070e:	0018      	movs	r0, r3
 8000710:	f001 fd18 	bl	8002144 <HAL_RTC_SetTime>
 8000714:	1e03      	subs	r3, r0, #0
 8000716:	d001      	beq.n	800071c <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8000718:	f000 f8f4 	bl	8000904 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 800071c:	2128      	movs	r1, #40	; 0x28
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2204      	movs	r2, #4
 8000722:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_AUGUST;
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2208      	movs	r2, #8
 8000728:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x3;
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2203      	movs	r2, #3
 800072e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x23;
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2223      	movs	r2, #35	; 0x23
 8000734:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000736:	1879      	adds	r1, r7, r1
 8000738:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <MX_RTC_Init+0x130>)
 800073a:	2201      	movs	r2, #1
 800073c:	0018      	movs	r0, r3
 800073e:	f001 fe09 	bl	8002354 <HAL_RTC_SetDate>
 8000742:	1e03      	subs	r3, r0, #0
 8000744:	d001      	beq.n	800074a <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8000746:	f000 f8dd 	bl	8000904 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x12;
 800074a:	003b      	movs	r3, r7
 800074c:	2212      	movs	r2, #18
 800074e:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x32;
 8000750:	003b      	movs	r3, r7
 8000752:	2232      	movs	r2, #50	; 0x32
 8000754:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x1;
 8000756:	003b      	movs	r3, r7
 8000758:	2201      	movs	r2, #1
 800075a:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800075c:	003b      	movs	r3, r7
 800075e:	2200      	movs	r2, #0
 8000760:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000762:	003b      	movs	r3, r7
 8000764:	2200      	movs	r2, #0
 8000766:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000768:	003b      	movs	r3, r7
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_SECONDS;
 800076e:	003b      	movs	r3, r7
 8000770:	2280      	movs	r2, #128	; 0x80
 8000772:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000774:	003b      	movs	r3, r7
 8000776:	2200      	movs	r2, #0
 8000778:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800077a:	003b      	movs	r3, r7
 800077c:	2200      	movs	r2, #0
 800077e:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x3;
 8000780:	003b      	movs	r3, r7
 8000782:	2220      	movs	r2, #32
 8000784:	2103      	movs	r1, #3
 8000786:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000788:	003b      	movs	r3, r7
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	0052      	lsls	r2, r2, #1
 800078e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000790:	0039      	movs	r1, r7
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_RTC_Init+0x130>)
 8000794:	2201      	movs	r2, #1
 8000796:	0018      	movs	r0, r3
 8000798:	f001 fec0 	bl	800251c <HAL_RTC_SetAlarm_IT>
 800079c:	1e03      	subs	r3, r0, #0
 800079e:	d001      	beq.n	80007a4 <MX_RTC_Init+0x128>
  {
    Error_Handler();
 80007a0:	f000 f8b0 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007a4:	46c0      	nop			; (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	b010      	add	sp, #64	; 0x40
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200000a4 	.word	0x200000a4
 80007b0:	40002800 	.word	0x40002800

080007b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007ba:	4a15      	ldr	r2, [pc, #84]	; (8000810 <MX_USART1_UART_Init+0x5c>)
 80007bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007c0:	22e1      	movs	r2, #225	; 0xe1
 80007c2:	0252      	lsls	r2, r2, #9
 80007c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007da:	220c      	movs	r2, #12
 80007dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007f6:	4b05      	ldr	r3, [pc, #20]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007f8:	0018      	movs	r0, r3
 80007fa:	f002 f91d 	bl	8002a38 <HAL_UART_Init>
 80007fe:	1e03      	subs	r3, r0, #0
 8000800:	d001      	beq.n	8000806 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000802:	f000 f87f 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200000c8 	.word	0x200000c8
 8000810:	40013800 	.word	0x40013800

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b08b      	sub	sp, #44	; 0x2c
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	2414      	movs	r4, #20
 800081c:	193b      	adds	r3, r7, r4
 800081e:	0018      	movs	r0, r3
 8000820:	2314      	movs	r3, #20
 8000822:	001a      	movs	r2, r3
 8000824:	2100      	movs	r1, #0
 8000826:	f002 fed3 	bl	80035d0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	4b26      	ldr	r3, [pc, #152]	; (80008c4 <MX_GPIO_Init+0xb0>)
 800082c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800082e:	4b25      	ldr	r3, [pc, #148]	; (80008c4 <MX_GPIO_Init+0xb0>)
 8000830:	2104      	movs	r1, #4
 8000832:	430a      	orrs	r2, r1
 8000834:	62da      	str	r2, [r3, #44]	; 0x2c
 8000836:	4b23      	ldr	r3, [pc, #140]	; (80008c4 <MX_GPIO_Init+0xb0>)
 8000838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800083a:	2204      	movs	r2, #4
 800083c:	4013      	ands	r3, r2
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000842:	4b20      	ldr	r3, [pc, #128]	; (80008c4 <MX_GPIO_Init+0xb0>)
 8000844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000846:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <MX_GPIO_Init+0xb0>)
 8000848:	2180      	movs	r1, #128	; 0x80
 800084a:	430a      	orrs	r2, r1
 800084c:	62da      	str	r2, [r3, #44]	; 0x2c
 800084e:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <MX_GPIO_Init+0xb0>)
 8000850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000852:	2280      	movs	r2, #128	; 0x80
 8000854:	4013      	ands	r3, r2
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <MX_GPIO_Init+0xb0>)
 800085c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800085e:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <MX_GPIO_Init+0xb0>)
 8000860:	2101      	movs	r1, #1
 8000862:	430a      	orrs	r2, r1
 8000864:	62da      	str	r2, [r3, #44]	; 0x2c
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <MX_GPIO_Init+0xb0>)
 8000868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800086a:	2201      	movs	r2, #1
 800086c:	4013      	ands	r3, r2
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000872:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_GPIO_Init+0xb0>)
 8000874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000876:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <MX_GPIO_Init+0xb0>)
 8000878:	2102      	movs	r1, #2
 800087a:	430a      	orrs	r2, r1
 800087c:	62da      	str	r2, [r3, #44]	; 0x2c
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_GPIO_Init+0xb0>)
 8000880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000882:	2202      	movs	r2, #2
 8000884:	4013      	ands	r3, r2
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_GREEN_LED_GPIO_Port, BSP_GREEN_LED_Pin, GPIO_PIN_RESET);
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_GPIO_Init+0xb4>)
 800088c:	2200      	movs	r2, #0
 800088e:	2110      	movs	r1, #16
 8000890:	0018      	movs	r0, r3
 8000892:	f000 fc27 	bl	80010e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_GREEN_LED_Pin */
  GPIO_InitStruct.Pin = BSP_GREEN_LED_Pin;
 8000896:	0021      	movs	r1, r4
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2210      	movs	r2, #16
 800089c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2201      	movs	r2, #1
 80008a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BSP_GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	4a05      	ldr	r2, [pc, #20]	; (80008c8 <MX_GPIO_Init+0xb4>)
 80008b4:	0019      	movs	r1, r3
 80008b6:	0010      	movs	r0, r2
 80008b8:	f000 fa9e 	bl	8000df8 <HAL_GPIO_Init>

}
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	b00b      	add	sp, #44	; 0x2c
 80008c2:	bd90      	pop	{r4, r7, pc}
 80008c4:	40021000 	.word	0x40021000
 80008c8:	50000400 	.word	0x50000400

080008cc <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BSP_GREEN_LED_GPIO_Port, BSP_GREEN_LED_Pin, GPIO_PIN_SET);
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <HAL_RTC_AlarmAEventCallback+0x2c>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	2110      	movs	r1, #16
 80008da:	0018      	movs	r0, r3
 80008dc:	f000 fc02 	bl	80010e4 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1,"Alarm_ON\r\n",10,1000);
 80008e0:	23fa      	movs	r3, #250	; 0xfa
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	4905      	ldr	r1, [pc, #20]	; (80008fc <HAL_RTC_AlarmAEventCallback+0x30>)
 80008e6:	4806      	ldr	r0, [pc, #24]	; (8000900 <HAL_RTC_AlarmAEventCallback+0x34>)
 80008e8:	220a      	movs	r2, #10
 80008ea:	f002 f8f9 	bl	8002ae0 <HAL_UART_Transmit>
}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b002      	add	sp, #8
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	50000400 	.word	0x50000400
 80008fc:	08003efc 	.word	0x08003efc
 8000900:	200000c8 	.word	0x200000c8

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800090c:	e7fe      	b.n	800090c <Error_Handler+0x8>
	...

08000910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000914:	4b07      	ldr	r3, [pc, #28]	; (8000934 <HAL_MspInit+0x24>)
 8000916:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <HAL_MspInit+0x24>)
 800091a:	2101      	movs	r1, #1
 800091c:	430a      	orrs	r2, r1
 800091e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000920:	4b04      	ldr	r3, [pc, #16]	; (8000934 <HAL_MspInit+0x24>)
 8000922:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000924:	4b03      	ldr	r3, [pc, #12]	; (8000934 <HAL_MspInit+0x24>)
 8000926:	2180      	movs	r1, #128	; 0x80
 8000928:	0549      	lsls	r1, r1, #21
 800092a:	430a      	orrs	r2, r1
 800092c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40021000 	.word	0x40021000

08000938 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <HAL_RTC_MspInit+0x38>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d10e      	bne.n	8000968 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_RTC_MspInit+0x3c>)
 800094c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <HAL_RTC_MspInit+0x3c>)
 8000950:	2180      	movs	r1, #128	; 0x80
 8000952:	02c9      	lsls	r1, r1, #11
 8000954:	430a      	orrs	r2, r1
 8000956:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000958:	2200      	movs	r2, #0
 800095a:	2100      	movs	r1, #0
 800095c:	2002      	movs	r0, #2
 800095e:	f000 fa19 	bl	8000d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000962:	2002      	movs	r0, #2
 8000964:	f000 fa2b 	bl	8000dbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000968:	46c0      	nop			; (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	b002      	add	sp, #8
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40002800 	.word	0x40002800
 8000974:	40021000 	.word	0x40021000

08000978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000978:	b590      	push	{r4, r7, lr}
 800097a:	b089      	sub	sp, #36	; 0x24
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	240c      	movs	r4, #12
 8000982:	193b      	adds	r3, r7, r4
 8000984:	0018      	movs	r0, r3
 8000986:	2314      	movs	r3, #20
 8000988:	001a      	movs	r2, r3
 800098a:	2100      	movs	r1, #0
 800098c:	f002 fe20 	bl	80035d0 <memset>
  if(huart->Instance==USART1)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a18      	ldr	r2, [pc, #96]	; (80009f8 <HAL_UART_MspInit+0x80>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d12a      	bne.n	80009f0 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <HAL_UART_MspInit+0x84>)
 800099c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800099e:	4b17      	ldr	r3, [pc, #92]	; (80009fc <HAL_UART_MspInit+0x84>)
 80009a0:	2180      	movs	r1, #128	; 0x80
 80009a2:	01c9      	lsls	r1, r1, #7
 80009a4:	430a      	orrs	r2, r1
 80009a6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <HAL_UART_MspInit+0x84>)
 80009aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009ac:	4b13      	ldr	r3, [pc, #76]	; (80009fc <HAL_UART_MspInit+0x84>)
 80009ae:	2101      	movs	r1, #1
 80009b0:	430a      	orrs	r2, r1
 80009b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <HAL_UART_MspInit+0x84>)
 80009b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009b8:	2201      	movs	r2, #1
 80009ba:	4013      	ands	r3, r2
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BSP_UART_TX_Pin|BSP_UART_RX_Pin;
 80009c0:	193b      	adds	r3, r7, r4
 80009c2:	22c0      	movs	r2, #192	; 0xc0
 80009c4:	00d2      	lsls	r2, r2, #3
 80009c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	0021      	movs	r1, r4
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2202      	movs	r2, #2
 80009ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d6:	187b      	adds	r3, r7, r1
 80009d8:	2203      	movs	r2, #3
 80009da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2204      	movs	r2, #4
 80009e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	187a      	adds	r2, r7, r1
 80009e4:	23a0      	movs	r3, #160	; 0xa0
 80009e6:	05db      	lsls	r3, r3, #23
 80009e8:	0011      	movs	r1, r2
 80009ea:	0018      	movs	r0, r3
 80009ec:	f000 fa04 	bl	8000df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b009      	add	sp, #36	; 0x24
 80009f6:	bd90      	pop	{r4, r7, pc}
 80009f8:	40013800 	.word	0x40013800
 80009fc:	40021000 	.word	0x40021000

08000a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <NMI_Handler+0x4>

08000a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <HardFault_Handler+0x4>

08000a0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a10:	46c0      	nop			; (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a24:	f000 f8ca 	bl	8000bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a28:	46c0      	nop			; (mov r8, r8)
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000a34:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <RTC_IRQHandler+0x14>)
 8000a36:	0018      	movs	r0, r3
 8000a38:	f001 fed2 	bl	80027e0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000a3c:	46c0      	nop			; (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	200000a4 	.word	0x200000a4

08000a48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a50:	4a14      	ldr	r2, [pc, #80]	; (8000aa4 <_sbrk+0x5c>)
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <_sbrk+0x60>)
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a5c:	4b13      	ldr	r3, [pc, #76]	; (8000aac <_sbrk+0x64>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d102      	bne.n	8000a6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <_sbrk+0x64>)
 8000a66:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <_sbrk+0x68>)
 8000a68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <_sbrk+0x64>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	18d3      	adds	r3, r2, r3
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d207      	bcs.n	8000a88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a78:	f002 fd80 	bl	800357c <__errno>
 8000a7c:	0003      	movs	r3, r0
 8000a7e:	220c      	movs	r2, #12
 8000a80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a82:	2301      	movs	r3, #1
 8000a84:	425b      	negs	r3, r3
 8000a86:	e009      	b.n	8000a9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <_sbrk+0x64>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a8e:	4b07      	ldr	r3, [pc, #28]	; (8000aac <_sbrk+0x64>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	18d2      	adds	r2, r2, r3
 8000a96:	4b05      	ldr	r3, [pc, #20]	; (8000aac <_sbrk+0x64>)
 8000a98:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
}
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	b006      	add	sp, #24
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20002000 	.word	0x20002000
 8000aa8:	00000400 	.word	0x00000400
 8000aac:	20000190 	.word	0x20000190
 8000ab0:	200001a8 	.word	0x200001a8

08000ab4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000ac0:	480d      	ldr	r0, [pc, #52]	; (8000af8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ac2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ac4:	f7ff fff6 	bl	8000ab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac8:	480c      	ldr	r0, [pc, #48]	; (8000afc <LoopForever+0x6>)
  ldr r1, =_edata
 8000aca:	490d      	ldr	r1, [pc, #52]	; (8000b00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000acc:	4a0d      	ldr	r2, [pc, #52]	; (8000b04 <LoopForever+0xe>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad0:	e002      	b.n	8000ad8 <LoopCopyDataInit>

08000ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad6:	3304      	adds	r3, #4

08000ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000adc:	d3f9      	bcc.n	8000ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ae0:	4c0a      	ldr	r4, [pc, #40]	; (8000b0c <LoopForever+0x16>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae4:	e001      	b.n	8000aea <LoopFillZerobss>

08000ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae8:	3204      	adds	r2, #4

08000aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aec:	d3fb      	bcc.n	8000ae6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aee:	f002 fd4b 	bl	8003588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000af2:	f7ff fce3 	bl	80004bc <main>

08000af6 <LoopForever>:

LoopForever:
    b LoopForever
 8000af6:	e7fe      	b.n	8000af6 <LoopForever>
  ldr   r0, =_estack
 8000af8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b00:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b04:	08003fb8 	.word	0x08003fb8
  ldr r2, =_sbss
 8000b08:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b0c:	200001a8 	.word	0x200001a8

08000b10 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b10:	e7fe      	b.n	8000b10 <ADC1_COMP_IRQHandler>
	...

08000b14 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b1a:	1dfb      	adds	r3, r7, #7
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000b20:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <HAL_Init+0x3c>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <HAL_Init+0x3c>)
 8000b26:	2140      	movs	r1, #64	; 0x40
 8000b28:	430a      	orrs	r2, r1
 8000b2a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f000 f811 	bl	8000b54 <HAL_InitTick>
 8000b32:	1e03      	subs	r3, r0, #0
 8000b34:	d003      	beq.n	8000b3e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	2201      	movs	r2, #1
 8000b3a:	701a      	strb	r2, [r3, #0]
 8000b3c:	e001      	b.n	8000b42 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b3e:	f7ff fee7 	bl	8000910 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b42:	1dfb      	adds	r3, r7, #7
 8000b44:	781b      	ldrb	r3, [r3, #0]
}
 8000b46:	0018      	movs	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b002      	add	sp, #8
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	40022000 	.word	0x40022000

08000b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b5c:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <HAL_InitTick+0x5c>)
 8000b5e:	681c      	ldr	r4, [r3, #0]
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <HAL_InitTick+0x60>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	0019      	movs	r1, r3
 8000b66:	23fa      	movs	r3, #250	; 0xfa
 8000b68:	0098      	lsls	r0, r3, #2
 8000b6a:	f7ff fad7 	bl	800011c <__udivsi3>
 8000b6e:	0003      	movs	r3, r0
 8000b70:	0019      	movs	r1, r3
 8000b72:	0020      	movs	r0, r4
 8000b74:	f7ff fad2 	bl	800011c <__udivsi3>
 8000b78:	0003      	movs	r3, r0
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f000 f92f 	bl	8000dde <HAL_SYSTICK_Config>
 8000b80:	1e03      	subs	r3, r0, #0
 8000b82:	d001      	beq.n	8000b88 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b84:	2301      	movs	r3, #1
 8000b86:	e00f      	b.n	8000ba8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b03      	cmp	r3, #3
 8000b8c:	d80b      	bhi.n	8000ba6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	2301      	movs	r3, #1
 8000b92:	425b      	negs	r3, r3
 8000b94:	2200      	movs	r2, #0
 8000b96:	0018      	movs	r0, r3
 8000b98:	f000 f8fc 	bl	8000d94 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_InitTick+0x64>)
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	e000      	b.n	8000ba8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
}
 8000ba8:	0018      	movs	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	b003      	add	sp, #12
 8000bae:	bd90      	pop	{r4, r7, pc}
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	20000008 	.word	0x20000008
 8000bb8:	20000004 	.word	0x20000004

08000bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <HAL_IncTick+0x1c>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	001a      	movs	r2, r3
 8000bc6:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <HAL_IncTick+0x20>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	18d2      	adds	r2, r2, r3
 8000bcc:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <HAL_IncTick+0x20>)
 8000bce:	601a      	str	r2, [r3, #0]
}
 8000bd0:	46c0      	nop			; (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000194 	.word	0x20000194

08000be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  return uwTick;
 8000be4:	4b02      	ldr	r3, [pc, #8]	; (8000bf0 <HAL_GetTick+0x10>)
 8000be6:	681b      	ldr	r3, [r3, #0]
}
 8000be8:	0018      	movs	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	20000194 	.word	0x20000194

08000bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bfc:	f7ff fff0 	bl	8000be0 <HAL_GetTick>
 8000c00:	0003      	movs	r3, r0
 8000c02:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	d005      	beq.n	8000c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <HAL_Delay+0x44>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	001a      	movs	r2, r3
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	189b      	adds	r3, r3, r2
 8000c18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	f7ff ffe0 	bl	8000be0 <HAL_GetTick>
 8000c20:	0002      	movs	r2, r0
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d8f7      	bhi.n	8000c1c <HAL_Delay+0x28>
  {
  }
}
 8000c2c:	46c0      	nop			; (mov r8, r8)
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b004      	add	sp, #16
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	20000008 	.word	0x20000008

08000c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	0002      	movs	r2, r0
 8000c44:	1dfb      	adds	r3, r7, #7
 8000c46:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c48:	1dfb      	adds	r3, r7, #7
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b7f      	cmp	r3, #127	; 0x7f
 8000c4e:	d809      	bhi.n	8000c64 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c50:	1dfb      	adds	r3, r7, #7
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	001a      	movs	r2, r3
 8000c56:	231f      	movs	r3, #31
 8000c58:	401a      	ands	r2, r3
 8000c5a:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <__NVIC_EnableIRQ+0x30>)
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	4091      	lsls	r1, r2
 8000c60:	000a      	movs	r2, r1
 8000c62:	601a      	str	r2, [r3, #0]
  }
}
 8000c64:	46c0      	nop			; (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	b002      	add	sp, #8
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	e000e100 	.word	0xe000e100

08000c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c70:	b590      	push	{r4, r7, lr}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	0002      	movs	r2, r0
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	1dfb      	adds	r3, r7, #7
 8000c7c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c7e:	1dfb      	adds	r3, r7, #7
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b7f      	cmp	r3, #127	; 0x7f
 8000c84:	d828      	bhi.n	8000cd8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c86:	4a2f      	ldr	r2, [pc, #188]	; (8000d44 <__NVIC_SetPriority+0xd4>)
 8000c88:	1dfb      	adds	r3, r7, #7
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	b25b      	sxtb	r3, r3
 8000c8e:	089b      	lsrs	r3, r3, #2
 8000c90:	33c0      	adds	r3, #192	; 0xc0
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	589b      	ldr	r3, [r3, r2]
 8000c96:	1dfa      	adds	r2, r7, #7
 8000c98:	7812      	ldrb	r2, [r2, #0]
 8000c9a:	0011      	movs	r1, r2
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	400a      	ands	r2, r1
 8000ca0:	00d2      	lsls	r2, r2, #3
 8000ca2:	21ff      	movs	r1, #255	; 0xff
 8000ca4:	4091      	lsls	r1, r2
 8000ca6:	000a      	movs	r2, r1
 8000ca8:	43d2      	mvns	r2, r2
 8000caa:	401a      	ands	r2, r3
 8000cac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	019b      	lsls	r3, r3, #6
 8000cb2:	22ff      	movs	r2, #255	; 0xff
 8000cb4:	401a      	ands	r2, r3
 8000cb6:	1dfb      	adds	r3, r7, #7
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	0018      	movs	r0, r3
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	4003      	ands	r3, r0
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cc4:	481f      	ldr	r0, [pc, #124]	; (8000d44 <__NVIC_SetPriority+0xd4>)
 8000cc6:	1dfb      	adds	r3, r7, #7
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	b25b      	sxtb	r3, r3
 8000ccc:	089b      	lsrs	r3, r3, #2
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	33c0      	adds	r3, #192	; 0xc0
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cd6:	e031      	b.n	8000d3c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cd8:	4a1b      	ldr	r2, [pc, #108]	; (8000d48 <__NVIC_SetPriority+0xd8>)
 8000cda:	1dfb      	adds	r3, r7, #7
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	0019      	movs	r1, r3
 8000ce0:	230f      	movs	r3, #15
 8000ce2:	400b      	ands	r3, r1
 8000ce4:	3b08      	subs	r3, #8
 8000ce6:	089b      	lsrs	r3, r3, #2
 8000ce8:	3306      	adds	r3, #6
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	18d3      	adds	r3, r2, r3
 8000cee:	3304      	adds	r3, #4
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	1dfa      	adds	r2, r7, #7
 8000cf4:	7812      	ldrb	r2, [r2, #0]
 8000cf6:	0011      	movs	r1, r2
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	400a      	ands	r2, r1
 8000cfc:	00d2      	lsls	r2, r2, #3
 8000cfe:	21ff      	movs	r1, #255	; 0xff
 8000d00:	4091      	lsls	r1, r2
 8000d02:	000a      	movs	r2, r1
 8000d04:	43d2      	mvns	r2, r2
 8000d06:	401a      	ands	r2, r3
 8000d08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	019b      	lsls	r3, r3, #6
 8000d0e:	22ff      	movs	r2, #255	; 0xff
 8000d10:	401a      	ands	r2, r3
 8000d12:	1dfb      	adds	r3, r7, #7
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	0018      	movs	r0, r3
 8000d18:	2303      	movs	r3, #3
 8000d1a:	4003      	ands	r3, r0
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d20:	4809      	ldr	r0, [pc, #36]	; (8000d48 <__NVIC_SetPriority+0xd8>)
 8000d22:	1dfb      	adds	r3, r7, #7
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	001c      	movs	r4, r3
 8000d28:	230f      	movs	r3, #15
 8000d2a:	4023      	ands	r3, r4
 8000d2c:	3b08      	subs	r3, #8
 8000d2e:	089b      	lsrs	r3, r3, #2
 8000d30:	430a      	orrs	r2, r1
 8000d32:	3306      	adds	r3, #6
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	18c3      	adds	r3, r0, r3
 8000d38:	3304      	adds	r3, #4
 8000d3a:	601a      	str	r2, [r3, #0]
}
 8000d3c:	46c0      	nop			; (mov r8, r8)
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	b003      	add	sp, #12
 8000d42:	bd90      	pop	{r4, r7, pc}
 8000d44:	e000e100 	.word	0xe000e100
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	1e5a      	subs	r2, r3, #1
 8000d58:	2380      	movs	r3, #128	; 0x80
 8000d5a:	045b      	lsls	r3, r3, #17
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d301      	bcc.n	8000d64 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d60:	2301      	movs	r3, #1
 8000d62:	e010      	b.n	8000d86 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d64:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <SysTick_Config+0x44>)
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	3a01      	subs	r2, #1
 8000d6a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	425b      	negs	r3, r3
 8000d70:	2103      	movs	r1, #3
 8000d72:	0018      	movs	r0, r3
 8000d74:	f7ff ff7c 	bl	8000c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <SysTick_Config+0x44>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7e:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <SysTick_Config+0x44>)
 8000d80:	2207      	movs	r2, #7
 8000d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	0018      	movs	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	b002      	add	sp, #8
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	e000e010 	.word	0xe000e010

08000d94 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
 8000d9e:	210f      	movs	r1, #15
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	1c02      	adds	r2, r0, #0
 8000da4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000da6:	68ba      	ldr	r2, [r7, #8]
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	b25b      	sxtb	r3, r3
 8000dae:	0011      	movs	r1, r2
 8000db0:	0018      	movs	r0, r3
 8000db2:	f7ff ff5d 	bl	8000c70 <__NVIC_SetPriority>
}
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b004      	add	sp, #16
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	0002      	movs	r2, r0
 8000dc6:	1dfb      	adds	r3, r7, #7
 8000dc8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dca:	1dfb      	adds	r3, r7, #7
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	b25b      	sxtb	r3, r3
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f7ff ff33 	bl	8000c3c <__NVIC_EnableIRQ>
}
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	b002      	add	sp, #8
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	0018      	movs	r0, r3
 8000dea:	f7ff ffaf 	bl	8000d4c <SysTick_Config>
 8000dee:	0003      	movs	r3, r0
}
 8000df0:	0018      	movs	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	b002      	add	sp, #8
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e0e:	e14f      	b.n	80010b0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2101      	movs	r1, #1
 8000e16:	697a      	ldr	r2, [r7, #20]
 8000e18:	4091      	lsls	r1, r2
 8000e1a:	000a      	movs	r2, r1
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d100      	bne.n	8000e28 <HAL_GPIO_Init+0x30>
 8000e26:	e140      	b.n	80010aa <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	4013      	ands	r3, r2
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d005      	beq.n	8000e40 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2203      	movs	r2, #3
 8000e3a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d130      	bne.n	8000ea2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	409a      	lsls	r2, r3
 8000e4e:	0013      	movs	r3, r2
 8000e50:	43da      	mvns	r2, r3
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	68da      	ldr	r2, [r3, #12]
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	409a      	lsls	r2, r3
 8000e62:	0013      	movs	r3, r2
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e76:	2201      	movs	r2, #1
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	0013      	movs	r3, r2
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	091b      	lsrs	r3, r3, #4
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	401a      	ands	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
 8000e94:	0013      	movs	r3, r2
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	2b03      	cmp	r3, #3
 8000eac:	d017      	beq.n	8000ede <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	2203      	movs	r2, #3
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	0013      	movs	r3, r2
 8000ebe:	43da      	mvns	r2, r3
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	689a      	ldr	r2, [r3, #8]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	409a      	lsls	r2, r3
 8000ed0:	0013      	movs	r3, r2
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d123      	bne.n	8000f32 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	08da      	lsrs	r2, r3, #3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3208      	adds	r2, #8
 8000ef2:	0092      	lsls	r2, r2, #2
 8000ef4:	58d3      	ldr	r3, [r2, r3]
 8000ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	2207      	movs	r2, #7
 8000efc:	4013      	ands	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	220f      	movs	r2, #15
 8000f02:	409a      	lsls	r2, r3
 8000f04:	0013      	movs	r3, r2
 8000f06:	43da      	mvns	r2, r3
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	691a      	ldr	r2, [r3, #16]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	2107      	movs	r1, #7
 8000f16:	400b      	ands	r3, r1
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	409a      	lsls	r2, r3
 8000f1c:	0013      	movs	r3, r2
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	08da      	lsrs	r2, r3, #3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3208      	adds	r2, #8
 8000f2c:	0092      	lsls	r2, r2, #2
 8000f2e:	6939      	ldr	r1, [r7, #16]
 8000f30:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	409a      	lsls	r2, r3
 8000f40:	0013      	movs	r3, r2
 8000f42:	43da      	mvns	r2, r3
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	2203      	movs	r2, #3
 8000f50:	401a      	ands	r2, r3
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	409a      	lsls	r2, r3
 8000f58:	0013      	movs	r3, r2
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685a      	ldr	r2, [r3, #4]
 8000f6a:	23c0      	movs	r3, #192	; 0xc0
 8000f6c:	029b      	lsls	r3, r3, #10
 8000f6e:	4013      	ands	r3, r2
 8000f70:	d100      	bne.n	8000f74 <HAL_GPIO_Init+0x17c>
 8000f72:	e09a      	b.n	80010aa <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f74:	4b54      	ldr	r3, [pc, #336]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 8000f76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f78:	4b53      	ldr	r3, [pc, #332]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f80:	4a52      	ldr	r2, [pc, #328]	; (80010cc <HAL_GPIO_Init+0x2d4>)
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	089b      	lsrs	r3, r3, #2
 8000f86:	3302      	adds	r3, #2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	589b      	ldr	r3, [r3, r2]
 8000f8c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	2203      	movs	r2, #3
 8000f92:	4013      	ands	r3, r2
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	220f      	movs	r2, #15
 8000f98:	409a      	lsls	r2, r3
 8000f9a:	0013      	movs	r3, r2
 8000f9c:	43da      	mvns	r2, r3
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	23a0      	movs	r3, #160	; 0xa0
 8000fa8:	05db      	lsls	r3, r3, #23
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d019      	beq.n	8000fe2 <HAL_GPIO_Init+0x1ea>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a47      	ldr	r2, [pc, #284]	; (80010d0 <HAL_GPIO_Init+0x2d8>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d013      	beq.n	8000fde <HAL_GPIO_Init+0x1e6>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a46      	ldr	r2, [pc, #280]	; (80010d4 <HAL_GPIO_Init+0x2dc>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d00d      	beq.n	8000fda <HAL_GPIO_Init+0x1e2>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a45      	ldr	r2, [pc, #276]	; (80010d8 <HAL_GPIO_Init+0x2e0>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d007      	beq.n	8000fd6 <HAL_GPIO_Init+0x1de>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a44      	ldr	r2, [pc, #272]	; (80010dc <HAL_GPIO_Init+0x2e4>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d101      	bne.n	8000fd2 <HAL_GPIO_Init+0x1da>
 8000fce:	2305      	movs	r3, #5
 8000fd0:	e008      	b.n	8000fe4 <HAL_GPIO_Init+0x1ec>
 8000fd2:	2306      	movs	r3, #6
 8000fd4:	e006      	b.n	8000fe4 <HAL_GPIO_Init+0x1ec>
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e004      	b.n	8000fe4 <HAL_GPIO_Init+0x1ec>
 8000fda:	2302      	movs	r3, #2
 8000fdc:	e002      	b.n	8000fe4 <HAL_GPIO_Init+0x1ec>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e000      	b.n	8000fe4 <HAL_GPIO_Init+0x1ec>
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	697a      	ldr	r2, [r7, #20]
 8000fe6:	2103      	movs	r1, #3
 8000fe8:	400a      	ands	r2, r1
 8000fea:	0092      	lsls	r2, r2, #2
 8000fec:	4093      	lsls	r3, r2
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ff4:	4935      	ldr	r1, [pc, #212]	; (80010cc <HAL_GPIO_Init+0x2d4>)
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	089b      	lsrs	r3, r3, #2
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001002:	4b37      	ldr	r3, [pc, #220]	; (80010e0 <HAL_GPIO_Init+0x2e8>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	43da      	mvns	r2, r3
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	4013      	ands	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	2380      	movs	r3, #128	; 0x80
 8001018:	035b      	lsls	r3, r3, #13
 800101a:	4013      	ands	r3, r2
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4313      	orrs	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001026:	4b2e      	ldr	r3, [pc, #184]	; (80010e0 <HAL_GPIO_Init+0x2e8>)
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800102c:	4b2c      	ldr	r3, [pc, #176]	; (80010e0 <HAL_GPIO_Init+0x2e8>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	43da      	mvns	r2, r3
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685a      	ldr	r2, [r3, #4]
 8001040:	2380      	movs	r3, #128	; 0x80
 8001042:	039b      	lsls	r3, r3, #14
 8001044:	4013      	ands	r3, r2
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001050:	4b23      	ldr	r3, [pc, #140]	; (80010e0 <HAL_GPIO_Init+0x2e8>)
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001056:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <HAL_GPIO_Init+0x2e8>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	43da      	mvns	r2, r3
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685a      	ldr	r2, [r3, #4]
 800106a:	2380      	movs	r3, #128	; 0x80
 800106c:	029b      	lsls	r3, r3, #10
 800106e:	4013      	ands	r3, r2
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800107a:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <HAL_GPIO_Init+0x2e8>)
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001080:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <HAL_GPIO_Init+0x2e8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	43da      	mvns	r2, r3
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	025b      	lsls	r3, r3, #9
 8001098:	4013      	ands	r3, r2
 800109a:	d003      	beq.n	80010a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010a4:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <HAL_GPIO_Init+0x2e8>)
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	3301      	adds	r3, #1
 80010ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	40da      	lsrs	r2, r3
 80010b8:	1e13      	subs	r3, r2, #0
 80010ba:	d000      	beq.n	80010be <HAL_GPIO_Init+0x2c6>
 80010bc:	e6a8      	b.n	8000e10 <HAL_GPIO_Init+0x18>
  }
}
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	46c0      	nop			; (mov r8, r8)
 80010c2:	46bd      	mov	sp, r7
 80010c4:	b006      	add	sp, #24
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40010000 	.word	0x40010000
 80010d0:	50000400 	.word	0x50000400
 80010d4:	50000800 	.word	0x50000800
 80010d8:	50000c00 	.word	0x50000c00
 80010dc:	50001c00 	.word	0x50001c00
 80010e0:	40010400 	.word	0x40010400

080010e4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	0008      	movs	r0, r1
 80010ee:	0011      	movs	r1, r2
 80010f0:	1cbb      	adds	r3, r7, #2
 80010f2:	1c02      	adds	r2, r0, #0
 80010f4:	801a      	strh	r2, [r3, #0]
 80010f6:	1c7b      	adds	r3, r7, #1
 80010f8:	1c0a      	adds	r2, r1, #0
 80010fa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010fc:	1c7b      	adds	r3, r7, #1
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d004      	beq.n	800110e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001104:	1cbb      	adds	r3, r7, #2
 8001106:	881a      	ldrh	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800110c:	e003      	b.n	8001116 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800110e:	1cbb      	adds	r3, r7, #2
 8001110:	881a      	ldrh	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	46bd      	mov	sp, r7
 800111a:	b002      	add	sp, #8
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001120:	b5b0      	push	{r4, r5, r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d102      	bne.n	8001134 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	f000 fbaf 	bl	8001892 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001134:	4bcf      	ldr	r3, [pc, #828]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	220c      	movs	r2, #12
 800113a:	4013      	ands	r3, r2
 800113c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800113e:	4bcd      	ldr	r3, [pc, #820]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 8001140:	68da      	ldr	r2, [r3, #12]
 8001142:	2380      	movs	r3, #128	; 0x80
 8001144:	025b      	lsls	r3, r3, #9
 8001146:	4013      	ands	r3, r2
 8001148:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2201      	movs	r2, #1
 8001150:	4013      	ands	r3, r2
 8001152:	d100      	bne.n	8001156 <HAL_RCC_OscConfig+0x36>
 8001154:	e07e      	b.n	8001254 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001156:	6a3b      	ldr	r3, [r7, #32]
 8001158:	2b08      	cmp	r3, #8
 800115a:	d007      	beq.n	800116c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800115c:	6a3b      	ldr	r3, [r7, #32]
 800115e:	2b0c      	cmp	r3, #12
 8001160:	d112      	bne.n	8001188 <HAL_RCC_OscConfig+0x68>
 8001162:	69fa      	ldr	r2, [r7, #28]
 8001164:	2380      	movs	r3, #128	; 0x80
 8001166:	025b      	lsls	r3, r3, #9
 8001168:	429a      	cmp	r2, r3
 800116a:	d10d      	bne.n	8001188 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800116c:	4bc1      	ldr	r3, [pc, #772]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	2380      	movs	r3, #128	; 0x80
 8001172:	029b      	lsls	r3, r3, #10
 8001174:	4013      	ands	r3, r2
 8001176:	d100      	bne.n	800117a <HAL_RCC_OscConfig+0x5a>
 8001178:	e06b      	b.n	8001252 <HAL_RCC_OscConfig+0x132>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d167      	bne.n	8001252 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	f000 fb85 	bl	8001892 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	025b      	lsls	r3, r3, #9
 8001190:	429a      	cmp	r2, r3
 8001192:	d107      	bne.n	80011a4 <HAL_RCC_OscConfig+0x84>
 8001194:	4bb7      	ldr	r3, [pc, #732]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4bb6      	ldr	r3, [pc, #728]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 800119a:	2180      	movs	r1, #128	; 0x80
 800119c:	0249      	lsls	r1, r1, #9
 800119e:	430a      	orrs	r2, r1
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	e027      	b.n	80011f4 <HAL_RCC_OscConfig+0xd4>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	23a0      	movs	r3, #160	; 0xa0
 80011aa:	02db      	lsls	r3, r3, #11
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d10e      	bne.n	80011ce <HAL_RCC_OscConfig+0xae>
 80011b0:	4bb0      	ldr	r3, [pc, #704]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4baf      	ldr	r3, [pc, #700]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 80011b6:	2180      	movs	r1, #128	; 0x80
 80011b8:	02c9      	lsls	r1, r1, #11
 80011ba:	430a      	orrs	r2, r1
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	4bad      	ldr	r3, [pc, #692]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	4bac      	ldr	r3, [pc, #688]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 80011c4:	2180      	movs	r1, #128	; 0x80
 80011c6:	0249      	lsls	r1, r1, #9
 80011c8:	430a      	orrs	r2, r1
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	e012      	b.n	80011f4 <HAL_RCC_OscConfig+0xd4>
 80011ce:	4ba9      	ldr	r3, [pc, #676]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	4ba8      	ldr	r3, [pc, #672]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 80011d4:	49a8      	ldr	r1, [pc, #672]	; (8001478 <HAL_RCC_OscConfig+0x358>)
 80011d6:	400a      	ands	r2, r1
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	4ba6      	ldr	r3, [pc, #664]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	2380      	movs	r3, #128	; 0x80
 80011e0:	025b      	lsls	r3, r3, #9
 80011e2:	4013      	ands	r3, r2
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4ba2      	ldr	r3, [pc, #648]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4ba1      	ldr	r3, [pc, #644]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 80011ee:	49a3      	ldr	r1, [pc, #652]	; (800147c <HAL_RCC_OscConfig+0x35c>)
 80011f0:	400a      	ands	r2, r1
 80011f2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d015      	beq.n	8001228 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fc:	f7ff fcf0 	bl	8000be0 <HAL_GetTick>
 8001200:	0003      	movs	r3, r0
 8001202:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001204:	e009      	b.n	800121a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001206:	f7ff fceb 	bl	8000be0 <HAL_GetTick>
 800120a:	0002      	movs	r2, r0
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b64      	cmp	r3, #100	; 0x64
 8001212:	d902      	bls.n	800121a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	f000 fb3c 	bl	8001892 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800121a:	4b96      	ldr	r3, [pc, #600]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	2380      	movs	r3, #128	; 0x80
 8001220:	029b      	lsls	r3, r3, #10
 8001222:	4013      	ands	r3, r2
 8001224:	d0ef      	beq.n	8001206 <HAL_RCC_OscConfig+0xe6>
 8001226:	e015      	b.n	8001254 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7ff fcda 	bl	8000be0 <HAL_GetTick>
 800122c:	0003      	movs	r3, r0
 800122e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001230:	e008      	b.n	8001244 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001232:	f7ff fcd5 	bl	8000be0 <HAL_GetTick>
 8001236:	0002      	movs	r2, r0
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b64      	cmp	r3, #100	; 0x64
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e326      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001244:	4b8b      	ldr	r3, [pc, #556]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	2380      	movs	r3, #128	; 0x80
 800124a:	029b      	lsls	r3, r3, #10
 800124c:	4013      	ands	r3, r2
 800124e:	d1f0      	bne.n	8001232 <HAL_RCC_OscConfig+0x112>
 8001250:	e000      	b.n	8001254 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001252:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2202      	movs	r2, #2
 800125a:	4013      	ands	r3, r2
 800125c:	d100      	bne.n	8001260 <HAL_RCC_OscConfig+0x140>
 800125e:	e08b      	b.n	8001378 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001266:	6a3b      	ldr	r3, [r7, #32]
 8001268:	2b04      	cmp	r3, #4
 800126a:	d005      	beq.n	8001278 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800126c:	6a3b      	ldr	r3, [r7, #32]
 800126e:	2b0c      	cmp	r3, #12
 8001270:	d13e      	bne.n	80012f0 <HAL_RCC_OscConfig+0x1d0>
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d13b      	bne.n	80012f0 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001278:	4b7e      	ldr	r3, [pc, #504]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2204      	movs	r2, #4
 800127e:	4013      	ands	r3, r2
 8001280:	d004      	beq.n	800128c <HAL_RCC_OscConfig+0x16c>
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d101      	bne.n	800128c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e302      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128c:	4b79      	ldr	r3, [pc, #484]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	4a7b      	ldr	r2, [pc, #492]	; (8001480 <HAL_RCC_OscConfig+0x360>)
 8001292:	4013      	ands	r3, r2
 8001294:	0019      	movs	r1, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	021a      	lsls	r2, r3, #8
 800129c:	4b75      	ldr	r3, [pc, #468]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 800129e:	430a      	orrs	r2, r1
 80012a0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80012a2:	4b74      	ldr	r3, [pc, #464]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2209      	movs	r2, #9
 80012a8:	4393      	bics	r3, r2
 80012aa:	0019      	movs	r1, r3
 80012ac:	4b71      	ldr	r3, [pc, #452]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	430a      	orrs	r2, r1
 80012b2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012b4:	f000 fc40 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 80012b8:	0001      	movs	r1, r0
 80012ba:	4b6e      	ldr	r3, [pc, #440]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	091b      	lsrs	r3, r3, #4
 80012c0:	220f      	movs	r2, #15
 80012c2:	4013      	ands	r3, r2
 80012c4:	4a6f      	ldr	r2, [pc, #444]	; (8001484 <HAL_RCC_OscConfig+0x364>)
 80012c6:	5cd3      	ldrb	r3, [r2, r3]
 80012c8:	000a      	movs	r2, r1
 80012ca:	40da      	lsrs	r2, r3
 80012cc:	4b6e      	ldr	r3, [pc, #440]	; (8001488 <HAL_RCC_OscConfig+0x368>)
 80012ce:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80012d0:	4b6e      	ldr	r3, [pc, #440]	; (800148c <HAL_RCC_OscConfig+0x36c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2513      	movs	r5, #19
 80012d6:	197c      	adds	r4, r7, r5
 80012d8:	0018      	movs	r0, r3
 80012da:	f7ff fc3b 	bl	8000b54 <HAL_InitTick>
 80012de:	0003      	movs	r3, r0
 80012e0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80012e2:	197b      	adds	r3, r7, r5
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d046      	beq.n	8001378 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80012ea:	197b      	adds	r3, r7, r5
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	e2d0      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d027      	beq.n	8001346 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80012f6:	4b5f      	ldr	r3, [pc, #380]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2209      	movs	r2, #9
 80012fc:	4393      	bics	r3, r2
 80012fe:	0019      	movs	r1, r3
 8001300:	4b5c      	ldr	r3, [pc, #368]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	430a      	orrs	r2, r1
 8001306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fc6a 	bl	8000be0 <HAL_GetTick>
 800130c:	0003      	movs	r3, r0
 800130e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001312:	f7ff fc65 	bl	8000be0 <HAL_GetTick>
 8001316:	0002      	movs	r2, r0
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e2b6      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001324:	4b53      	ldr	r3, [pc, #332]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2204      	movs	r2, #4
 800132a:	4013      	ands	r3, r2
 800132c:	d0f1      	beq.n	8001312 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132e:	4b51      	ldr	r3, [pc, #324]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	4a53      	ldr	r2, [pc, #332]	; (8001480 <HAL_RCC_OscConfig+0x360>)
 8001334:	4013      	ands	r3, r2
 8001336:	0019      	movs	r1, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	691b      	ldr	r3, [r3, #16]
 800133c:	021a      	lsls	r2, r3, #8
 800133e:	4b4d      	ldr	r3, [pc, #308]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 8001340:	430a      	orrs	r2, r1
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	e018      	b.n	8001378 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001346:	4b4b      	ldr	r3, [pc, #300]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	4b4a      	ldr	r3, [pc, #296]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 800134c:	2101      	movs	r1, #1
 800134e:	438a      	bics	r2, r1
 8001350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001352:	f7ff fc45 	bl	8000be0 <HAL_GetTick>
 8001356:	0003      	movs	r3, r0
 8001358:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800135c:	f7ff fc40 	bl	8000be0 <HAL_GetTick>
 8001360:	0002      	movs	r2, r0
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e291      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800136e:	4b41      	ldr	r3, [pc, #260]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2204      	movs	r2, #4
 8001374:	4013      	ands	r3, r2
 8001376:	d1f1      	bne.n	800135c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2210      	movs	r2, #16
 800137e:	4013      	ands	r3, r2
 8001380:	d100      	bne.n	8001384 <HAL_RCC_OscConfig+0x264>
 8001382:	e0a1      	b.n	80014c8 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001384:	6a3b      	ldr	r3, [r7, #32]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d140      	bne.n	800140c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800138a:	4b3a      	ldr	r3, [pc, #232]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	2380      	movs	r3, #128	; 0x80
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4013      	ands	r3, r2
 8001394:	d005      	beq.n	80013a2 <HAL_RCC_OscConfig+0x282>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e277      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013a2:	4b34      	ldr	r3, [pc, #208]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	4a3a      	ldr	r2, [pc, #232]	; (8001490 <HAL_RCC_OscConfig+0x370>)
 80013a8:	4013      	ands	r3, r2
 80013aa:	0019      	movs	r1, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013b0:	4b30      	ldr	r3, [pc, #192]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 80013b2:	430a      	orrs	r2, r1
 80013b4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013b6:	4b2f      	ldr	r3, [pc, #188]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	0a19      	lsrs	r1, r3, #8
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a1b      	ldr	r3, [r3, #32]
 80013c2:	061a      	lsls	r2, r3, #24
 80013c4:	4b2b      	ldr	r3, [pc, #172]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 80013c6:	430a      	orrs	r2, r1
 80013c8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ce:	0b5b      	lsrs	r3, r3, #13
 80013d0:	3301      	adds	r3, #1
 80013d2:	2280      	movs	r2, #128	; 0x80
 80013d4:	0212      	lsls	r2, r2, #8
 80013d6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80013d8:	4b26      	ldr	r3, [pc, #152]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	091b      	lsrs	r3, r3, #4
 80013de:	210f      	movs	r1, #15
 80013e0:	400b      	ands	r3, r1
 80013e2:	4928      	ldr	r1, [pc, #160]	; (8001484 <HAL_RCC_OscConfig+0x364>)
 80013e4:	5ccb      	ldrb	r3, [r1, r3]
 80013e6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80013e8:	4b27      	ldr	r3, [pc, #156]	; (8001488 <HAL_RCC_OscConfig+0x368>)
 80013ea:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80013ec:	4b27      	ldr	r3, [pc, #156]	; (800148c <HAL_RCC_OscConfig+0x36c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2513      	movs	r5, #19
 80013f2:	197c      	adds	r4, r7, r5
 80013f4:	0018      	movs	r0, r3
 80013f6:	f7ff fbad 	bl	8000b54 <HAL_InitTick>
 80013fa:	0003      	movs	r3, r0
 80013fc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80013fe:	197b      	adds	r3, r7, r5
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d060      	beq.n	80014c8 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001406:	197b      	adds	r3, r7, r5
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	e242      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69db      	ldr	r3, [r3, #28]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d03f      	beq.n	8001494 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001414:	4b17      	ldr	r3, [pc, #92]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b16      	ldr	r3, [pc, #88]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 800141a:	2180      	movs	r1, #128	; 0x80
 800141c:	0049      	lsls	r1, r1, #1
 800141e:	430a      	orrs	r2, r1
 8001420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001422:	f7ff fbdd 	bl	8000be0 <HAL_GetTick>
 8001426:	0003      	movs	r3, r0
 8001428:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800142c:	f7ff fbd8 	bl	8000be0 <HAL_GetTick>
 8001430:	0002      	movs	r2, r0
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e229      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800143e:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	2380      	movs	r3, #128	; 0x80
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4013      	ands	r3, r2
 8001448:	d0f0      	beq.n	800142c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	4a10      	ldr	r2, [pc, #64]	; (8001490 <HAL_RCC_OscConfig+0x370>)
 8001450:	4013      	ands	r3, r2
 8001452:	0019      	movs	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 800145a:	430a      	orrs	r2, r1
 800145c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	0a19      	lsrs	r1, r3, #8
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a1b      	ldr	r3, [r3, #32]
 800146a:	061a      	lsls	r2, r3, #24
 800146c:	4b01      	ldr	r3, [pc, #4]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 800146e:	430a      	orrs	r2, r1
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	e029      	b.n	80014c8 <HAL_RCC_OscConfig+0x3a8>
 8001474:	40021000 	.word	0x40021000
 8001478:	fffeffff 	.word	0xfffeffff
 800147c:	fffbffff 	.word	0xfffbffff
 8001480:	ffffe0ff 	.word	0xffffe0ff
 8001484:	08003f08 	.word	0x08003f08
 8001488:	20000000 	.word	0x20000000
 800148c:	20000004 	.word	0x20000004
 8001490:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001494:	4bbd      	ldr	r3, [pc, #756]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4bbc      	ldr	r3, [pc, #752]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 800149a:	49bd      	ldr	r1, [pc, #756]	; (8001790 <HAL_RCC_OscConfig+0x670>)
 800149c:	400a      	ands	r2, r1
 800149e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a0:	f7ff fb9e 	bl	8000be0 <HAL_GetTick>
 80014a4:	0003      	movs	r3, r0
 80014a6:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014aa:	f7ff fb99 	bl	8000be0 <HAL_GetTick>
 80014ae:	0002      	movs	r2, r0
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e1ea      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80014bc:	4bb3      	ldr	r3, [pc, #716]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	2380      	movs	r3, #128	; 0x80
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4013      	ands	r3, r2
 80014c6:	d1f0      	bne.n	80014aa <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2208      	movs	r2, #8
 80014ce:	4013      	ands	r3, r2
 80014d0:	d036      	beq.n	8001540 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d019      	beq.n	800150e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014da:	4bac      	ldr	r3, [pc, #688]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 80014dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014de:	4bab      	ldr	r3, [pc, #684]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 80014e0:	2101      	movs	r1, #1
 80014e2:	430a      	orrs	r2, r1
 80014e4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e6:	f7ff fb7b 	bl	8000be0 <HAL_GetTick>
 80014ea:	0003      	movs	r3, r0
 80014ec:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f0:	f7ff fb76 	bl	8000be0 <HAL_GetTick>
 80014f4:	0002      	movs	r2, r0
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e1c7      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001502:	4ba2      	ldr	r3, [pc, #648]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001506:	2202      	movs	r2, #2
 8001508:	4013      	ands	r3, r2
 800150a:	d0f1      	beq.n	80014f0 <HAL_RCC_OscConfig+0x3d0>
 800150c:	e018      	b.n	8001540 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800150e:	4b9f      	ldr	r3, [pc, #636]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001510:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001512:	4b9e      	ldr	r3, [pc, #632]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001514:	2101      	movs	r1, #1
 8001516:	438a      	bics	r2, r1
 8001518:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151a:	f7ff fb61 	bl	8000be0 <HAL_GetTick>
 800151e:	0003      	movs	r3, r0
 8001520:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001524:	f7ff fb5c 	bl	8000be0 <HAL_GetTick>
 8001528:	0002      	movs	r2, r0
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e1ad      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001536:	4b95      	ldr	r3, [pc, #596]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800153a:	2202      	movs	r2, #2
 800153c:	4013      	ands	r3, r2
 800153e:	d1f1      	bne.n	8001524 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2204      	movs	r2, #4
 8001546:	4013      	ands	r3, r2
 8001548:	d100      	bne.n	800154c <HAL_RCC_OscConfig+0x42c>
 800154a:	e0ae      	b.n	80016aa <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800154c:	2027      	movs	r0, #39	; 0x27
 800154e:	183b      	adds	r3, r7, r0
 8001550:	2200      	movs	r2, #0
 8001552:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001554:	4b8d      	ldr	r3, [pc, #564]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001556:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001558:	2380      	movs	r3, #128	; 0x80
 800155a:	055b      	lsls	r3, r3, #21
 800155c:	4013      	ands	r3, r2
 800155e:	d109      	bne.n	8001574 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001560:	4b8a      	ldr	r3, [pc, #552]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001562:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001564:	4b89      	ldr	r3, [pc, #548]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001566:	2180      	movs	r1, #128	; 0x80
 8001568:	0549      	lsls	r1, r1, #21
 800156a:	430a      	orrs	r2, r1
 800156c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800156e:	183b      	adds	r3, r7, r0
 8001570:	2201      	movs	r2, #1
 8001572:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001574:	4b87      	ldr	r3, [pc, #540]	; (8001794 <HAL_RCC_OscConfig+0x674>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4013      	ands	r3, r2
 800157e:	d11a      	bne.n	80015b6 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001580:	4b84      	ldr	r3, [pc, #528]	; (8001794 <HAL_RCC_OscConfig+0x674>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b83      	ldr	r3, [pc, #524]	; (8001794 <HAL_RCC_OscConfig+0x674>)
 8001586:	2180      	movs	r1, #128	; 0x80
 8001588:	0049      	lsls	r1, r1, #1
 800158a:	430a      	orrs	r2, r1
 800158c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800158e:	f7ff fb27 	bl	8000be0 <HAL_GetTick>
 8001592:	0003      	movs	r3, r0
 8001594:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001598:	f7ff fb22 	bl	8000be0 <HAL_GetTick>
 800159c:	0002      	movs	r2, r0
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b64      	cmp	r3, #100	; 0x64
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e173      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015aa:	4b7a      	ldr	r3, [pc, #488]	; (8001794 <HAL_RCC_OscConfig+0x674>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	2380      	movs	r3, #128	; 0x80
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4013      	ands	r3, r2
 80015b4:	d0f0      	beq.n	8001598 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689a      	ldr	r2, [r3, #8]
 80015ba:	2380      	movs	r3, #128	; 0x80
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	429a      	cmp	r2, r3
 80015c0:	d107      	bne.n	80015d2 <HAL_RCC_OscConfig+0x4b2>
 80015c2:	4b72      	ldr	r3, [pc, #456]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 80015c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015c6:	4b71      	ldr	r3, [pc, #452]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 80015c8:	2180      	movs	r1, #128	; 0x80
 80015ca:	0049      	lsls	r1, r1, #1
 80015cc:	430a      	orrs	r2, r1
 80015ce:	651a      	str	r2, [r3, #80]	; 0x50
 80015d0:	e031      	b.n	8001636 <HAL_RCC_OscConfig+0x516>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10c      	bne.n	80015f4 <HAL_RCC_OscConfig+0x4d4>
 80015da:	4b6c      	ldr	r3, [pc, #432]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 80015dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015de:	4b6b      	ldr	r3, [pc, #428]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 80015e0:	496b      	ldr	r1, [pc, #428]	; (8001790 <HAL_RCC_OscConfig+0x670>)
 80015e2:	400a      	ands	r2, r1
 80015e4:	651a      	str	r2, [r3, #80]	; 0x50
 80015e6:	4b69      	ldr	r3, [pc, #420]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 80015e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015ea:	4b68      	ldr	r3, [pc, #416]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 80015ec:	496a      	ldr	r1, [pc, #424]	; (8001798 <HAL_RCC_OscConfig+0x678>)
 80015ee:	400a      	ands	r2, r1
 80015f0:	651a      	str	r2, [r3, #80]	; 0x50
 80015f2:	e020      	b.n	8001636 <HAL_RCC_OscConfig+0x516>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	23a0      	movs	r3, #160	; 0xa0
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d10e      	bne.n	800161e <HAL_RCC_OscConfig+0x4fe>
 8001600:	4b62      	ldr	r3, [pc, #392]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001602:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001604:	4b61      	ldr	r3, [pc, #388]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001606:	2180      	movs	r1, #128	; 0x80
 8001608:	00c9      	lsls	r1, r1, #3
 800160a:	430a      	orrs	r2, r1
 800160c:	651a      	str	r2, [r3, #80]	; 0x50
 800160e:	4b5f      	ldr	r3, [pc, #380]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001610:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001612:	4b5e      	ldr	r3, [pc, #376]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001614:	2180      	movs	r1, #128	; 0x80
 8001616:	0049      	lsls	r1, r1, #1
 8001618:	430a      	orrs	r2, r1
 800161a:	651a      	str	r2, [r3, #80]	; 0x50
 800161c:	e00b      	b.n	8001636 <HAL_RCC_OscConfig+0x516>
 800161e:	4b5b      	ldr	r3, [pc, #364]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001620:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001622:	4b5a      	ldr	r3, [pc, #360]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001624:	495a      	ldr	r1, [pc, #360]	; (8001790 <HAL_RCC_OscConfig+0x670>)
 8001626:	400a      	ands	r2, r1
 8001628:	651a      	str	r2, [r3, #80]	; 0x50
 800162a:	4b58      	ldr	r3, [pc, #352]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 800162c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800162e:	4b57      	ldr	r3, [pc, #348]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001630:	4959      	ldr	r1, [pc, #356]	; (8001798 <HAL_RCC_OscConfig+0x678>)
 8001632:	400a      	ands	r2, r1
 8001634:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d015      	beq.n	800166a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163e:	f7ff facf 	bl	8000be0 <HAL_GetTick>
 8001642:	0003      	movs	r3, r0
 8001644:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001646:	e009      	b.n	800165c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001648:	f7ff faca 	bl	8000be0 <HAL_GetTick>
 800164c:	0002      	movs	r2, r0
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	4a52      	ldr	r2, [pc, #328]	; (800179c <HAL_RCC_OscConfig+0x67c>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e11a      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800165c:	4b4b      	ldr	r3, [pc, #300]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 800165e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001660:	2380      	movs	r3, #128	; 0x80
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4013      	ands	r3, r2
 8001666:	d0ef      	beq.n	8001648 <HAL_RCC_OscConfig+0x528>
 8001668:	e014      	b.n	8001694 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166a:	f7ff fab9 	bl	8000be0 <HAL_GetTick>
 800166e:	0003      	movs	r3, r0
 8001670:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001672:	e009      	b.n	8001688 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001674:	f7ff fab4 	bl	8000be0 <HAL_GetTick>
 8001678:	0002      	movs	r2, r0
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	4a47      	ldr	r2, [pc, #284]	; (800179c <HAL_RCC_OscConfig+0x67c>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e104      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001688:	4b40      	ldr	r3, [pc, #256]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 800168a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800168c:	2380      	movs	r3, #128	; 0x80
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4013      	ands	r3, r2
 8001692:	d1ef      	bne.n	8001674 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001694:	2327      	movs	r3, #39	; 0x27
 8001696:	18fb      	adds	r3, r7, r3
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d105      	bne.n	80016aa <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800169e:	4b3b      	ldr	r3, [pc, #236]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 80016a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016a2:	4b3a      	ldr	r3, [pc, #232]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 80016a4:	493e      	ldr	r1, [pc, #248]	; (80017a0 <HAL_RCC_OscConfig+0x680>)
 80016a6:	400a      	ands	r2, r1
 80016a8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2220      	movs	r2, #32
 80016b0:	4013      	ands	r3, r2
 80016b2:	d049      	beq.n	8001748 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d026      	beq.n	800170a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80016bc:	4b33      	ldr	r3, [pc, #204]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	4b32      	ldr	r3, [pc, #200]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 80016c2:	2101      	movs	r1, #1
 80016c4:	430a      	orrs	r2, r1
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	4b30      	ldr	r3, [pc, #192]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 80016ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016cc:	4b2f      	ldr	r3, [pc, #188]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 80016ce:	2101      	movs	r1, #1
 80016d0:	430a      	orrs	r2, r1
 80016d2:	635a      	str	r2, [r3, #52]	; 0x34
 80016d4:	4b33      	ldr	r3, [pc, #204]	; (80017a4 <HAL_RCC_OscConfig+0x684>)
 80016d6:	6a1a      	ldr	r2, [r3, #32]
 80016d8:	4b32      	ldr	r3, [pc, #200]	; (80017a4 <HAL_RCC_OscConfig+0x684>)
 80016da:	2180      	movs	r1, #128	; 0x80
 80016dc:	0189      	lsls	r1, r1, #6
 80016de:	430a      	orrs	r2, r1
 80016e0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e2:	f7ff fa7d 	bl	8000be0 <HAL_GetTick>
 80016e6:	0003      	movs	r3, r0
 80016e8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016ec:	f7ff fa78 	bl	8000be0 <HAL_GetTick>
 80016f0:	0002      	movs	r2, r0
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e0c9      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80016fe:	4b23      	ldr	r3, [pc, #140]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	2202      	movs	r2, #2
 8001704:	4013      	ands	r3, r2
 8001706:	d0f1      	beq.n	80016ec <HAL_RCC_OscConfig+0x5cc>
 8001708:	e01e      	b.n	8001748 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800170a:	4b20      	ldr	r3, [pc, #128]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 800170c:	689a      	ldr	r2, [r3, #8]
 800170e:	4b1f      	ldr	r3, [pc, #124]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001710:	2101      	movs	r1, #1
 8001712:	438a      	bics	r2, r1
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	4b23      	ldr	r3, [pc, #140]	; (80017a4 <HAL_RCC_OscConfig+0x684>)
 8001718:	6a1a      	ldr	r2, [r3, #32]
 800171a:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <HAL_RCC_OscConfig+0x684>)
 800171c:	4922      	ldr	r1, [pc, #136]	; (80017a8 <HAL_RCC_OscConfig+0x688>)
 800171e:	400a      	ands	r2, r1
 8001720:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001722:	f7ff fa5d 	bl	8000be0 <HAL_GetTick>
 8001726:	0003      	movs	r3, r0
 8001728:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800172c:	f7ff fa58 	bl	8000be0 <HAL_GetTick>
 8001730:	0002      	movs	r2, r0
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e0a9      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800173e:	4b13      	ldr	r3, [pc, #76]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2202      	movs	r2, #2
 8001744:	4013      	ands	r3, r2
 8001746:	d1f1      	bne.n	800172c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174c:	2b00      	cmp	r3, #0
 800174e:	d100      	bne.n	8001752 <HAL_RCC_OscConfig+0x632>
 8001750:	e09e      	b.n	8001890 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001752:	6a3b      	ldr	r3, [r7, #32]
 8001754:	2b0c      	cmp	r3, #12
 8001756:	d100      	bne.n	800175a <HAL_RCC_OscConfig+0x63a>
 8001758:	e077      	b.n	800184a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175e:	2b02      	cmp	r3, #2
 8001760:	d158      	bne.n	8001814 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001768:	4910      	ldr	r1, [pc, #64]	; (80017ac <HAL_RCC_OscConfig+0x68c>)
 800176a:	400a      	ands	r2, r1
 800176c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176e:	f7ff fa37 	bl	8000be0 <HAL_GetTick>
 8001772:	0003      	movs	r3, r0
 8001774:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001776:	e01b      	b.n	80017b0 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001778:	f7ff fa32 	bl	8000be0 <HAL_GetTick>
 800177c:	0002      	movs	r2, r0
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d914      	bls.n	80017b0 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e083      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	40021000 	.word	0x40021000
 8001790:	fffffeff 	.word	0xfffffeff
 8001794:	40007000 	.word	0x40007000
 8001798:	fffffbff 	.word	0xfffffbff
 800179c:	00001388 	.word	0x00001388
 80017a0:	efffffff 	.word	0xefffffff
 80017a4:	40010000 	.word	0x40010000
 80017a8:	ffffdfff 	.word	0xffffdfff
 80017ac:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017b0:	4b3a      	ldr	r3, [pc, #232]	; (800189c <HAL_RCC_OscConfig+0x77c>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	2380      	movs	r3, #128	; 0x80
 80017b6:	049b      	lsls	r3, r3, #18
 80017b8:	4013      	ands	r3, r2
 80017ba:	d1dd      	bne.n	8001778 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017bc:	4b37      	ldr	r3, [pc, #220]	; (800189c <HAL_RCC_OscConfig+0x77c>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	4a37      	ldr	r2, [pc, #220]	; (80018a0 <HAL_RCC_OscConfig+0x780>)
 80017c2:	4013      	ands	r3, r2
 80017c4:	0019      	movs	r1, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	431a      	orrs	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d4:	431a      	orrs	r2, r3
 80017d6:	4b31      	ldr	r3, [pc, #196]	; (800189c <HAL_RCC_OscConfig+0x77c>)
 80017d8:	430a      	orrs	r2, r1
 80017da:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017dc:	4b2f      	ldr	r3, [pc, #188]	; (800189c <HAL_RCC_OscConfig+0x77c>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b2e      	ldr	r3, [pc, #184]	; (800189c <HAL_RCC_OscConfig+0x77c>)
 80017e2:	2180      	movs	r1, #128	; 0x80
 80017e4:	0449      	lsls	r1, r1, #17
 80017e6:	430a      	orrs	r2, r1
 80017e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ea:	f7ff f9f9 	bl	8000be0 <HAL_GetTick>
 80017ee:	0003      	movs	r3, r0
 80017f0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f4:	f7ff f9f4 	bl	8000be0 <HAL_GetTick>
 80017f8:	0002      	movs	r2, r0
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e045      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001806:	4b25      	ldr	r3, [pc, #148]	; (800189c <HAL_RCC_OscConfig+0x77c>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	049b      	lsls	r3, r3, #18
 800180e:	4013      	ands	r3, r2
 8001810:	d0f0      	beq.n	80017f4 <HAL_RCC_OscConfig+0x6d4>
 8001812:	e03d      	b.n	8001890 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001814:	4b21      	ldr	r3, [pc, #132]	; (800189c <HAL_RCC_OscConfig+0x77c>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b20      	ldr	r3, [pc, #128]	; (800189c <HAL_RCC_OscConfig+0x77c>)
 800181a:	4922      	ldr	r1, [pc, #136]	; (80018a4 <HAL_RCC_OscConfig+0x784>)
 800181c:	400a      	ands	r2, r1
 800181e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001820:	f7ff f9de 	bl	8000be0 <HAL_GetTick>
 8001824:	0003      	movs	r3, r0
 8001826:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800182a:	f7ff f9d9 	bl	8000be0 <HAL_GetTick>
 800182e:	0002      	movs	r2, r0
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e02a      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800183c:	4b17      	ldr	r3, [pc, #92]	; (800189c <HAL_RCC_OscConfig+0x77c>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	2380      	movs	r3, #128	; 0x80
 8001842:	049b      	lsls	r3, r3, #18
 8001844:	4013      	ands	r3, r2
 8001846:	d1f0      	bne.n	800182a <HAL_RCC_OscConfig+0x70a>
 8001848:	e022      	b.n	8001890 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184e:	2b01      	cmp	r3, #1
 8001850:	d101      	bne.n	8001856 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e01d      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <HAL_RCC_OscConfig+0x77c>)
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800185c:	69fa      	ldr	r2, [r7, #28]
 800185e:	2380      	movs	r3, #128	; 0x80
 8001860:	025b      	lsls	r3, r3, #9
 8001862:	401a      	ands	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	429a      	cmp	r2, r3
 800186a:	d10f      	bne.n	800188c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800186c:	69fa      	ldr	r2, [r7, #28]
 800186e:	23f0      	movs	r3, #240	; 0xf0
 8001870:	039b      	lsls	r3, r3, #14
 8001872:	401a      	ands	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001878:	429a      	cmp	r2, r3
 800187a:	d107      	bne.n	800188c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800187c:	69fa      	ldr	r2, [r7, #28]
 800187e:	23c0      	movs	r3, #192	; 0xc0
 8001880:	041b      	lsls	r3, r3, #16
 8001882:	401a      	ands	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001888:	429a      	cmp	r2, r3
 800188a:	d001      	beq.n	8001890 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e000      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	0018      	movs	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	b00a      	add	sp, #40	; 0x28
 8001898:	bdb0      	pop	{r4, r5, r7, pc}
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	40021000 	.word	0x40021000
 80018a0:	ff02ffff 	.word	0xff02ffff
 80018a4:	feffffff 	.word	0xfeffffff

080018a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018a8:	b5b0      	push	{r4, r5, r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e128      	b.n	8001b0e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018bc:	4b96      	ldr	r3, [pc, #600]	; (8001b18 <HAL_RCC_ClockConfig+0x270>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2201      	movs	r2, #1
 80018c2:	4013      	ands	r3, r2
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d91e      	bls.n	8001908 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ca:	4b93      	ldr	r3, [pc, #588]	; (8001b18 <HAL_RCC_ClockConfig+0x270>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2201      	movs	r2, #1
 80018d0:	4393      	bics	r3, r2
 80018d2:	0019      	movs	r1, r3
 80018d4:	4b90      	ldr	r3, [pc, #576]	; (8001b18 <HAL_RCC_ClockConfig+0x270>)
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	430a      	orrs	r2, r1
 80018da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018dc:	f7ff f980 	bl	8000be0 <HAL_GetTick>
 80018e0:	0003      	movs	r3, r0
 80018e2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e4:	e009      	b.n	80018fa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e6:	f7ff f97b 	bl	8000be0 <HAL_GetTick>
 80018ea:	0002      	movs	r2, r0
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	4a8a      	ldr	r2, [pc, #552]	; (8001b1c <HAL_RCC_ClockConfig+0x274>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e109      	b.n	8001b0e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fa:	4b87      	ldr	r3, [pc, #540]	; (8001b18 <HAL_RCC_ClockConfig+0x270>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2201      	movs	r2, #1
 8001900:	4013      	ands	r3, r2
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	429a      	cmp	r2, r3
 8001906:	d1ee      	bne.n	80018e6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2202      	movs	r2, #2
 800190e:	4013      	ands	r3, r2
 8001910:	d009      	beq.n	8001926 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001912:	4b83      	ldr	r3, [pc, #524]	; (8001b20 <HAL_RCC_ClockConfig+0x278>)
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	22f0      	movs	r2, #240	; 0xf0
 8001918:	4393      	bics	r3, r2
 800191a:	0019      	movs	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	4b7f      	ldr	r3, [pc, #508]	; (8001b20 <HAL_RCC_ClockConfig+0x278>)
 8001922:	430a      	orrs	r2, r1
 8001924:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2201      	movs	r2, #1
 800192c:	4013      	ands	r3, r2
 800192e:	d100      	bne.n	8001932 <HAL_RCC_ClockConfig+0x8a>
 8001930:	e089      	b.n	8001a46 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b02      	cmp	r3, #2
 8001938:	d107      	bne.n	800194a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800193a:	4b79      	ldr	r3, [pc, #484]	; (8001b20 <HAL_RCC_ClockConfig+0x278>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	029b      	lsls	r3, r3, #10
 8001942:	4013      	ands	r3, r2
 8001944:	d120      	bne.n	8001988 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e0e1      	b.n	8001b0e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b03      	cmp	r3, #3
 8001950:	d107      	bne.n	8001962 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001952:	4b73      	ldr	r3, [pc, #460]	; (8001b20 <HAL_RCC_ClockConfig+0x278>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	2380      	movs	r3, #128	; 0x80
 8001958:	049b      	lsls	r3, r3, #18
 800195a:	4013      	ands	r3, r2
 800195c:	d114      	bne.n	8001988 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e0d5      	b.n	8001b0e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d106      	bne.n	8001978 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800196a:	4b6d      	ldr	r3, [pc, #436]	; (8001b20 <HAL_RCC_ClockConfig+0x278>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2204      	movs	r2, #4
 8001970:	4013      	ands	r3, r2
 8001972:	d109      	bne.n	8001988 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e0ca      	b.n	8001b0e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001978:	4b69      	ldr	r3, [pc, #420]	; (8001b20 <HAL_RCC_ClockConfig+0x278>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4013      	ands	r3, r2
 8001982:	d101      	bne.n	8001988 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e0c2      	b.n	8001b0e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001988:	4b65      	ldr	r3, [pc, #404]	; (8001b20 <HAL_RCC_ClockConfig+0x278>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	2203      	movs	r2, #3
 800198e:	4393      	bics	r3, r2
 8001990:	0019      	movs	r1, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	4b62      	ldr	r3, [pc, #392]	; (8001b20 <HAL_RCC_ClockConfig+0x278>)
 8001998:	430a      	orrs	r2, r1
 800199a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800199c:	f7ff f920 	bl	8000be0 <HAL_GetTick>
 80019a0:	0003      	movs	r3, r0
 80019a2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d111      	bne.n	80019d0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019ac:	e009      	b.n	80019c2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ae:	f7ff f917 	bl	8000be0 <HAL_GetTick>
 80019b2:	0002      	movs	r2, r0
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	4a58      	ldr	r2, [pc, #352]	; (8001b1c <HAL_RCC_ClockConfig+0x274>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e0a5      	b.n	8001b0e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019c2:	4b57      	ldr	r3, [pc, #348]	; (8001b20 <HAL_RCC_ClockConfig+0x278>)
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	220c      	movs	r2, #12
 80019c8:	4013      	ands	r3, r2
 80019ca:	2b08      	cmp	r3, #8
 80019cc:	d1ef      	bne.n	80019ae <HAL_RCC_ClockConfig+0x106>
 80019ce:	e03a      	b.n	8001a46 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b03      	cmp	r3, #3
 80019d6:	d111      	bne.n	80019fc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019d8:	e009      	b.n	80019ee <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019da:	f7ff f901 	bl	8000be0 <HAL_GetTick>
 80019de:	0002      	movs	r2, r0
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	4a4d      	ldr	r2, [pc, #308]	; (8001b1c <HAL_RCC_ClockConfig+0x274>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e08f      	b.n	8001b0e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019ee:	4b4c      	ldr	r3, [pc, #304]	; (8001b20 <HAL_RCC_ClockConfig+0x278>)
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	220c      	movs	r2, #12
 80019f4:	4013      	ands	r3, r2
 80019f6:	2b0c      	cmp	r3, #12
 80019f8:	d1ef      	bne.n	80019da <HAL_RCC_ClockConfig+0x132>
 80019fa:	e024      	b.n	8001a46 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d11b      	bne.n	8001a3c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a04:	e009      	b.n	8001a1a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a06:	f7ff f8eb 	bl	8000be0 <HAL_GetTick>
 8001a0a:	0002      	movs	r2, r0
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	4a42      	ldr	r2, [pc, #264]	; (8001b1c <HAL_RCC_ClockConfig+0x274>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e079      	b.n	8001b0e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a1a:	4b41      	ldr	r3, [pc, #260]	; (8001b20 <HAL_RCC_ClockConfig+0x278>)
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	220c      	movs	r2, #12
 8001a20:	4013      	ands	r3, r2
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	d1ef      	bne.n	8001a06 <HAL_RCC_ClockConfig+0x15e>
 8001a26:	e00e      	b.n	8001a46 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a28:	f7ff f8da 	bl	8000be0 <HAL_GetTick>
 8001a2c:	0002      	movs	r2, r0
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	4a3a      	ldr	r2, [pc, #232]	; (8001b1c <HAL_RCC_ClockConfig+0x274>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e068      	b.n	8001b0e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a3c:	4b38      	ldr	r3, [pc, #224]	; (8001b20 <HAL_RCC_ClockConfig+0x278>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	220c      	movs	r2, #12
 8001a42:	4013      	ands	r3, r2
 8001a44:	d1f0      	bne.n	8001a28 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a46:	4b34      	ldr	r3, [pc, #208]	; (8001b18 <HAL_RCC_ClockConfig+0x270>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d21e      	bcs.n	8001a92 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a54:	4b30      	ldr	r3, [pc, #192]	; (8001b18 <HAL_RCC_ClockConfig+0x270>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	4393      	bics	r3, r2
 8001a5c:	0019      	movs	r1, r3
 8001a5e:	4b2e      	ldr	r3, [pc, #184]	; (8001b18 <HAL_RCC_ClockConfig+0x270>)
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a66:	f7ff f8bb 	bl	8000be0 <HAL_GetTick>
 8001a6a:	0003      	movs	r3, r0
 8001a6c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6e:	e009      	b.n	8001a84 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a70:	f7ff f8b6 	bl	8000be0 <HAL_GetTick>
 8001a74:	0002      	movs	r2, r0
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	4a28      	ldr	r2, [pc, #160]	; (8001b1c <HAL_RCC_ClockConfig+0x274>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e044      	b.n	8001b0e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a84:	4b24      	ldr	r3, [pc, #144]	; (8001b18 <HAL_RCC_ClockConfig+0x270>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d1ee      	bne.n	8001a70 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2204      	movs	r2, #4
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d009      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a9c:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <HAL_RCC_ClockConfig+0x278>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	4a20      	ldr	r2, [pc, #128]	; (8001b24 <HAL_RCC_ClockConfig+0x27c>)
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	0019      	movs	r1, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <HAL_RCC_ClockConfig+0x278>)
 8001aac:	430a      	orrs	r2, r1
 8001aae:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2208      	movs	r2, #8
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d00a      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001aba:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <HAL_RCC_ClockConfig+0x278>)
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	4a1a      	ldr	r2, [pc, #104]	; (8001b28 <HAL_RCC_ClockConfig+0x280>)
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	0019      	movs	r1, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	00da      	lsls	r2, r3, #3
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <HAL_RCC_ClockConfig+0x278>)
 8001acc:	430a      	orrs	r2, r1
 8001ace:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ad0:	f000 f832 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 8001ad4:	0001      	movs	r1, r0
 8001ad6:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <HAL_RCC_ClockConfig+0x278>)
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	091b      	lsrs	r3, r3, #4
 8001adc:	220f      	movs	r2, #15
 8001ade:	4013      	ands	r3, r2
 8001ae0:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <HAL_RCC_ClockConfig+0x284>)
 8001ae2:	5cd3      	ldrb	r3, [r2, r3]
 8001ae4:	000a      	movs	r2, r1
 8001ae6:	40da      	lsrs	r2, r3
 8001ae8:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <HAL_RCC_ClockConfig+0x288>)
 8001aea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <HAL_RCC_ClockConfig+0x28c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	250b      	movs	r5, #11
 8001af2:	197c      	adds	r4, r7, r5
 8001af4:	0018      	movs	r0, r3
 8001af6:	f7ff f82d 	bl	8000b54 <HAL_InitTick>
 8001afa:	0003      	movs	r3, r0
 8001afc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001afe:	197b      	adds	r3, r7, r5
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001b06:	197b      	adds	r3, r7, r5
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	e000      	b.n	8001b0e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	0018      	movs	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	b004      	add	sp, #16
 8001b14:	bdb0      	pop	{r4, r5, r7, pc}
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	40022000 	.word	0x40022000
 8001b1c:	00001388 	.word	0x00001388
 8001b20:	40021000 	.word	0x40021000
 8001b24:	fffff8ff 	.word	0xfffff8ff
 8001b28:	ffffc7ff 	.word	0xffffc7ff
 8001b2c:	08003f08 	.word	0x08003f08
 8001b30:	20000000 	.word	0x20000000
 8001b34:	20000004 	.word	0x20000004

08001b38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b38:	b5b0      	push	{r4, r5, r7, lr}
 8001b3a:	b08e      	sub	sp, #56	; 0x38
 8001b3c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001b3e:	4b4c      	ldr	r3, [pc, #304]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b46:	230c      	movs	r3, #12
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2b0c      	cmp	r3, #12
 8001b4c:	d014      	beq.n	8001b78 <HAL_RCC_GetSysClockFreq+0x40>
 8001b4e:	d900      	bls.n	8001b52 <HAL_RCC_GetSysClockFreq+0x1a>
 8001b50:	e07b      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0x112>
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d002      	beq.n	8001b5c <HAL_RCC_GetSysClockFreq+0x24>
 8001b56:	2b08      	cmp	r3, #8
 8001b58:	d00b      	beq.n	8001b72 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b5a:	e076      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001b5c:	4b44      	ldr	r3, [pc, #272]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2210      	movs	r2, #16
 8001b62:	4013      	ands	r3, r2
 8001b64:	d002      	beq.n	8001b6c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001b66:	4b43      	ldr	r3, [pc, #268]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001b68:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001b6a:	e07c      	b.n	8001c66 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001b6c:	4b42      	ldr	r3, [pc, #264]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x140>)
 8001b6e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b70:	e079      	b.n	8001c66 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b72:	4b42      	ldr	r3, [pc, #264]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x144>)
 8001b74:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b76:	e076      	b.n	8001c66 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b7a:	0c9a      	lsrs	r2, r3, #18
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	401a      	ands	r2, r3
 8001b80:	4b3f      	ldr	r3, [pc, #252]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x148>)
 8001b82:	5c9b      	ldrb	r3, [r3, r2]
 8001b84:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b88:	0d9a      	lsrs	r2, r3, #22
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	3301      	adds	r3, #1
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b92:	4b37      	ldr	r3, [pc, #220]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	025b      	lsls	r3, r3, #9
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d01a      	beq.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba0:	61bb      	str	r3, [r7, #24]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
 8001ba6:	4a35      	ldr	r2, [pc, #212]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x144>)
 8001ba8:	2300      	movs	r3, #0
 8001baa:	69b8      	ldr	r0, [r7, #24]
 8001bac:	69f9      	ldr	r1, [r7, #28]
 8001bae:	f7fe fb61 	bl	8000274 <__aeabi_lmul>
 8001bb2:	0002      	movs	r2, r0
 8001bb4:	000b      	movs	r3, r1
 8001bb6:	0010      	movs	r0, r2
 8001bb8:	0019      	movs	r1, r3
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	f7fe fb35 	bl	8000234 <__aeabi_uldivmod>
 8001bca:	0002      	movs	r2, r0
 8001bcc:	000b      	movs	r3, r1
 8001bce:	0013      	movs	r3, r2
 8001bd0:	637b      	str	r3, [r7, #52]	; 0x34
 8001bd2:	e037      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001bd4:	4b26      	ldr	r3, [pc, #152]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x138>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2210      	movs	r2, #16
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d01a      	beq.n	8001c14 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	4a23      	ldr	r2, [pc, #140]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001be8:	2300      	movs	r3, #0
 8001bea:	68b8      	ldr	r0, [r7, #8]
 8001bec:	68f9      	ldr	r1, [r7, #12]
 8001bee:	f7fe fb41 	bl	8000274 <__aeabi_lmul>
 8001bf2:	0002      	movs	r2, r0
 8001bf4:	000b      	movs	r3, r1
 8001bf6:	0010      	movs	r0, r2
 8001bf8:	0019      	movs	r1, r3
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	603b      	str	r3, [r7, #0]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	607b      	str	r3, [r7, #4]
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f7fe fb15 	bl	8000234 <__aeabi_uldivmod>
 8001c0a:	0002      	movs	r2, r0
 8001c0c:	000b      	movs	r3, r1
 8001c0e:	0013      	movs	r3, r2
 8001c10:	637b      	str	r3, [r7, #52]	; 0x34
 8001c12:	e017      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c16:	0018      	movs	r0, r3
 8001c18:	2300      	movs	r3, #0
 8001c1a:	0019      	movs	r1, r3
 8001c1c:	4a16      	ldr	r2, [pc, #88]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x140>)
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f7fe fb28 	bl	8000274 <__aeabi_lmul>
 8001c24:	0002      	movs	r2, r0
 8001c26:	000b      	movs	r3, r1
 8001c28:	0010      	movs	r0, r2
 8001c2a:	0019      	movs	r1, r3
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2e:	001c      	movs	r4, r3
 8001c30:	2300      	movs	r3, #0
 8001c32:	001d      	movs	r5, r3
 8001c34:	0022      	movs	r2, r4
 8001c36:	002b      	movs	r3, r5
 8001c38:	f7fe fafc 	bl	8000234 <__aeabi_uldivmod>
 8001c3c:	0002      	movs	r2, r0
 8001c3e:	000b      	movs	r3, r1
 8001c40:	0013      	movs	r3, r2
 8001c42:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c46:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c48:	e00d      	b.n	8001c66 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	0b5b      	lsrs	r3, r3, #13
 8001c50:	2207      	movs	r2, #7
 8001c52:	4013      	ands	r3, r2
 8001c54:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001c56:	6a3b      	ldr	r3, [r7, #32]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0212      	lsls	r2, r2, #8
 8001c5e:	409a      	lsls	r2, r3
 8001c60:	0013      	movs	r3, r2
 8001c62:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c64:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001c68:	0018      	movs	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	b00e      	add	sp, #56	; 0x38
 8001c6e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c70:	40021000 	.word	0x40021000
 8001c74:	003d0900 	.word	0x003d0900
 8001c78:	00f42400 	.word	0x00f42400
 8001c7c:	007a1200 	.word	0x007a1200
 8001c80:	08003f20 	.word	0x08003f20

08001c84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c88:	4b02      	ldr	r3, [pc, #8]	; (8001c94 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	46c0      	nop			; (mov r8, r8)
 8001c94:	20000000 	.word	0x20000000

08001c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c9c:	f7ff fff2 	bl	8001c84 <HAL_RCC_GetHCLKFreq>
 8001ca0:	0001      	movs	r1, r0
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	0a1b      	lsrs	r3, r3, #8
 8001ca8:	2207      	movs	r2, #7
 8001caa:	4013      	ands	r3, r2
 8001cac:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cae:	5cd3      	ldrb	r3, [r2, r3]
 8001cb0:	40d9      	lsrs	r1, r3
 8001cb2:	000b      	movs	r3, r1
}
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	08003f18 	.word	0x08003f18

08001cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cc8:	f7ff ffdc 	bl	8001c84 <HAL_RCC_GetHCLKFreq>
 8001ccc:	0001      	movs	r1, r0
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	0adb      	lsrs	r3, r3, #11
 8001cd4:	2207      	movs	r2, #7
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	4a04      	ldr	r2, [pc, #16]	; (8001cec <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cda:	5cd3      	ldrb	r3, [r2, r3]
 8001cdc:	40d9      	lsrs	r1, r3
 8001cde:	000b      	movs	r3, r1
}
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	08003f18 	.word	0x08003f18

08001cf0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001cf8:	2317      	movs	r3, #23
 8001cfa:	18fb      	adds	r3, r7, r3
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2220      	movs	r2, #32
 8001d06:	4013      	ands	r3, r2
 8001d08:	d106      	bne.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	2380      	movs	r3, #128	; 0x80
 8001d10:	011b      	lsls	r3, r3, #4
 8001d12:	4013      	ands	r3, r2
 8001d14:	d100      	bne.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001d16:	e104      	b.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d18:	4bb1      	ldr	r3, [pc, #708]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d1c:	2380      	movs	r3, #128	; 0x80
 8001d1e:	055b      	lsls	r3, r3, #21
 8001d20:	4013      	ands	r3, r2
 8001d22:	d10a      	bne.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d24:	4bae      	ldr	r3, [pc, #696]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d28:	4bad      	ldr	r3, [pc, #692]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d2a:	2180      	movs	r1, #128	; 0x80
 8001d2c:	0549      	lsls	r1, r1, #21
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001d32:	2317      	movs	r3, #23
 8001d34:	18fb      	adds	r3, r7, r3
 8001d36:	2201      	movs	r2, #1
 8001d38:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3a:	4baa      	ldr	r3, [pc, #680]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	4013      	ands	r3, r2
 8001d44:	d11a      	bne.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d46:	4ba7      	ldr	r3, [pc, #668]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4ba6      	ldr	r3, [pc, #664]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001d4c:	2180      	movs	r1, #128	; 0x80
 8001d4e:	0049      	lsls	r1, r1, #1
 8001d50:	430a      	orrs	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d54:	f7fe ff44 	bl	8000be0 <HAL_GetTick>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5c:	e008      	b.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d5e:	f7fe ff3f 	bl	8000be0 <HAL_GetTick>
 8001d62:	0002      	movs	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b64      	cmp	r3, #100	; 0x64
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e133      	b.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d70:	4b9c      	ldr	r3, [pc, #624]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d0f0      	beq.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001d7c:	4b98      	ldr	r3, [pc, #608]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	23c0      	movs	r3, #192	; 0xc0
 8001d82:	039b      	lsls	r3, r3, #14
 8001d84:	4013      	ands	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	23c0      	movs	r3, #192	; 0xc0
 8001d8e:	039b      	lsls	r3, r3, #14
 8001d90:	4013      	ands	r3, r2
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d107      	bne.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	23c0      	movs	r3, #192	; 0xc0
 8001d9e:	039b      	lsls	r3, r3, #14
 8001da0:	4013      	ands	r3, r2
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d013      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	23c0      	movs	r3, #192	; 0xc0
 8001dae:	029b      	lsls	r3, r3, #10
 8001db0:	401a      	ands	r2, r3
 8001db2:	23c0      	movs	r3, #192	; 0xc0
 8001db4:	029b      	lsls	r3, r3, #10
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d10a      	bne.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001dba:	4b89      	ldr	r3, [pc, #548]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	029b      	lsls	r3, r3, #10
 8001dc2:	401a      	ands	r2, r3
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	029b      	lsls	r3, r3, #10
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d101      	bne.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e103      	b.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001dd0:	4b83      	ldr	r3, [pc, #524]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dd4:	23c0      	movs	r3, #192	; 0xc0
 8001dd6:	029b      	lsls	r3, r3, #10
 8001dd8:	4013      	ands	r3, r2
 8001dda:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d049      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	23c0      	movs	r3, #192	; 0xc0
 8001de8:	029b      	lsls	r3, r3, #10
 8001dea:	4013      	ands	r3, r2
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d004      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2220      	movs	r2, #32
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d10d      	bne.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	23c0      	movs	r3, #192	; 0xc0
 8001e02:	029b      	lsls	r3, r3, #10
 8001e04:	4013      	ands	r3, r2
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d034      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	011b      	lsls	r3, r3, #4
 8001e14:	4013      	ands	r3, r2
 8001e16:	d02e      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001e18:	4b71      	ldr	r3, [pc, #452]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e1c:	4a72      	ldr	r2, [pc, #456]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e22:	4b6f      	ldr	r3, [pc, #444]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e26:	4b6e      	ldr	r3, [pc, #440]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e28:	2180      	movs	r1, #128	; 0x80
 8001e2a:	0309      	lsls	r1, r1, #12
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e30:	4b6b      	ldr	r3, [pc, #428]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e34:	4b6a      	ldr	r3, [pc, #424]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e36:	496d      	ldr	r1, [pc, #436]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001e38:	400a      	ands	r2, r1
 8001e3a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001e3c:	4b68      	ldr	r3, [pc, #416]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	2380      	movs	r3, #128	; 0x80
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d014      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4c:	f7fe fec8 	bl	8000be0 <HAL_GetTick>
 8001e50:	0003      	movs	r3, r0
 8001e52:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e54:	e009      	b.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e56:	f7fe fec3 	bl	8000be0 <HAL_GetTick>
 8001e5a:	0002      	movs	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	4a63      	ldr	r2, [pc, #396]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e0b6      	b.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e6a:	4b5d      	ldr	r3, [pc, #372]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4013      	ands	r3, r2
 8001e74:	d0ef      	beq.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	2380      	movs	r3, #128	; 0x80
 8001e7c:	011b      	lsls	r3, r3, #4
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d01f      	beq.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	23c0      	movs	r3, #192	; 0xc0
 8001e88:	029b      	lsls	r3, r3, #10
 8001e8a:	401a      	ands	r2, r3
 8001e8c:	23c0      	movs	r3, #192	; 0xc0
 8001e8e:	029b      	lsls	r3, r3, #10
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d10c      	bne.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8001e94:	4b52      	ldr	r3, [pc, #328]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a56      	ldr	r2, [pc, #344]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	0019      	movs	r1, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	23c0      	movs	r3, #192	; 0xc0
 8001ea4:	039b      	lsls	r3, r3, #14
 8001ea6:	401a      	ands	r2, r3
 8001ea8:	4b4d      	ldr	r3, [pc, #308]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	4b4c      	ldr	r3, [pc, #304]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001eb0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	23c0      	movs	r3, #192	; 0xc0
 8001eb8:	029b      	lsls	r3, r3, #10
 8001eba:	401a      	ands	r2, r3
 8001ebc:	4b48      	ldr	r3, [pc, #288]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d01f      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	23c0      	movs	r3, #192	; 0xc0
 8001ed2:	029b      	lsls	r3, r3, #10
 8001ed4:	401a      	ands	r2, r3
 8001ed6:	23c0      	movs	r3, #192	; 0xc0
 8001ed8:	029b      	lsls	r3, r3, #10
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d10c      	bne.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001ede:	4b40      	ldr	r3, [pc, #256]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a44      	ldr	r2, [pc, #272]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	0019      	movs	r1, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	23c0      	movs	r3, #192	; 0xc0
 8001eee:	039b      	lsls	r3, r3, #14
 8001ef0:	401a      	ands	r2, r3
 8001ef2:	4b3b      	ldr	r3, [pc, #236]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	4b39      	ldr	r3, [pc, #228]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001efa:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	23c0      	movs	r3, #192	; 0xc0
 8001f02:	029b      	lsls	r3, r3, #10
 8001f04:	401a      	ands	r2, r3
 8001f06:	4b36      	ldr	r3, [pc, #216]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f0c:	2317      	movs	r3, #23
 8001f0e:	18fb      	adds	r3, r7, r3
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d105      	bne.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f16:	4b32      	ldr	r3, [pc, #200]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f1a:	4b31      	ldr	r3, [pc, #196]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f1c:	4936      	ldr	r1, [pc, #216]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f1e:	400a      	ands	r2, r1
 8001f20:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2201      	movs	r2, #1
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d009      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f2c:	4b2c      	ldr	r3, [pc, #176]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f30:	2203      	movs	r2, #3
 8001f32:	4393      	bics	r3, r2
 8001f34:	0019      	movs	r1, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	4b29      	ldr	r3, [pc, #164]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2202      	movs	r2, #2
 8001f46:	4013      	ands	r3, r2
 8001f48:	d009      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f4a:	4b25      	ldr	r3, [pc, #148]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4e:	220c      	movs	r2, #12
 8001f50:	4393      	bics	r3, r2
 8001f52:	0019      	movs	r1, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	691a      	ldr	r2, [r3, #16]
 8001f58:	4b21      	ldr	r3, [pc, #132]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2204      	movs	r2, #4
 8001f64:	4013      	ands	r3, r2
 8001f66:	d009      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f68:	4b1d      	ldr	r3, [pc, #116]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6c:	4a23      	ldr	r2, [pc, #140]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8001f6e:	4013      	ands	r3, r2
 8001f70:	0019      	movs	r1, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	695a      	ldr	r2, [r3, #20]
 8001f76:	4b1a      	ldr	r3, [pc, #104]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2208      	movs	r2, #8
 8001f82:	4013      	ands	r3, r2
 8001f84:	d009      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f86:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8a:	4a1d      	ldr	r2, [pc, #116]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	0019      	movs	r1, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	699a      	ldr	r2, [r3, #24]
 8001f94:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f96:	430a      	orrs	r2, r1
 8001f98:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2240      	movs	r2, #64	; 0x40
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d009      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001fa4:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa8:	4a16      	ldr	r2, [pc, #88]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001faa:	4013      	ands	r3, r2
 8001fac:	0019      	movs	r1, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a1a      	ldr	r2, [r3, #32]
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2280      	movs	r2, #128	; 0x80
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d009      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001fc2:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc6:	4a10      	ldr	r2, [pc, #64]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	0019      	movs	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69da      	ldr	r2, [r3, #28]
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	0018      	movs	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	b006      	add	sp, #24
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40007000 	.word	0x40007000
 8001fe8:	fffcffff 	.word	0xfffcffff
 8001fec:	fff7ffff 	.word	0xfff7ffff
 8001ff0:	00001388 	.word	0x00001388
 8001ff4:	ffcfffff 	.word	0xffcfffff
 8001ff8:	efffffff 	.word	0xefffffff
 8001ffc:	fffff3ff 	.word	0xfffff3ff
 8002000:	ffffcfff 	.word	0xffffcfff
 8002004:	fbffffff 	.word	0xfbffffff
 8002008:	fff3ffff 	.word	0xfff3ffff

0800200c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800200c:	b5b0      	push	{r4, r5, r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002014:	230f      	movs	r3, #15
 8002016:	18fb      	adds	r3, r7, r3
 8002018:	2201      	movs	r2, #1
 800201a:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e088      	b.n	8002138 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2221      	movs	r2, #33	; 0x21
 800202a:	5c9b      	ldrb	r3, [r3, r2]
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d107      	bne.n	8002042 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2220      	movs	r2, #32
 8002036:	2100      	movs	r1, #0
 8002038:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	0018      	movs	r0, r3
 800203e:	f7fe fc7b 	bl	8000938 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2221      	movs	r2, #33	; 0x21
 8002046:	2102      	movs	r1, #2
 8002048:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	2210      	movs	r2, #16
 8002052:	4013      	ands	r3, r2
 8002054:	2b10      	cmp	r3, #16
 8002056:	d05f      	beq.n	8002118 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	22ca      	movs	r2, #202	; 0xca
 800205e:	625a      	str	r2, [r3, #36]	; 0x24
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2253      	movs	r2, #83	; 0x53
 8002066:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002068:	250f      	movs	r5, #15
 800206a:	197c      	adds	r4, r7, r5
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	0018      	movs	r0, r3
 8002070:	f000 fc2c 	bl	80028cc <RTC_EnterInitMode>
 8002074:	0003      	movs	r3, r0
 8002076:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8002078:	0028      	movs	r0, r5
 800207a:	183b      	adds	r3, r7, r0
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d12c      	bne.n	80020dc <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	492c      	ldr	r1, [pc, #176]	; (8002140 <HAL_RTC_Init+0x134>)
 800208e:	400a      	ands	r2, r1
 8002090:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6899      	ldr	r1, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	431a      	orrs	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	68d2      	ldr	r2, [r2, #12]
 80020b8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6919      	ldr	r1, [r3, #16]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	041a      	lsls	r2, r3, #16
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80020ce:	183c      	adds	r4, r7, r0
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	0018      	movs	r0, r3
 80020d4:	f000 fc3e 	bl	8002954 <RTC_ExitInitMode>
 80020d8:	0003      	movs	r3, r0
 80020da:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80020dc:	230f      	movs	r3, #15
 80020de:	18fb      	adds	r3, r7, r3
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d113      	bne.n	800210e <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2103      	movs	r1, #3
 80020f2:	438a      	bics	r2, r1
 80020f4:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	69da      	ldr	r2, [r3, #28]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	22ff      	movs	r2, #255	; 0xff
 8002114:	625a      	str	r2, [r3, #36]	; 0x24
 8002116:	e003      	b.n	8002120 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002118:	230f      	movs	r3, #15
 800211a:	18fb      	adds	r3, r7, r3
 800211c:	2200      	movs	r2, #0
 800211e:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8002120:	230f      	movs	r3, #15
 8002122:	18fb      	adds	r3, r7, r3
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d103      	bne.n	8002132 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2221      	movs	r2, #33	; 0x21
 800212e:	2101      	movs	r1, #1
 8002130:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002132:	230f      	movs	r3, #15
 8002134:	18fb      	adds	r3, r7, r3
 8002136:	781b      	ldrb	r3, [r3, #0]
}
 8002138:	0018      	movs	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	b004      	add	sp, #16
 800213e:	bdb0      	pop	{r4, r5, r7, pc}
 8002140:	ff8fffbf 	.word	0xff8fffbf

08002144 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002144:	b5b0      	push	{r4, r5, r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2220      	movs	r2, #32
 8002158:	5c9b      	ldrb	r3, [r3, r2]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d101      	bne.n	8002162 <HAL_RTC_SetTime+0x1e>
 800215e:	2302      	movs	r3, #2
 8002160:	e092      	b.n	8002288 <HAL_RTC_SetTime+0x144>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2220      	movs	r2, #32
 8002166:	2101      	movs	r1, #1
 8002168:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2221      	movs	r2, #33	; 0x21
 800216e:	2102      	movs	r1, #2
 8002170:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d125      	bne.n	80021c4 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2240      	movs	r2, #64	; 0x40
 8002180:	4013      	ands	r3, r2
 8002182:	d102      	bne.n	800218a <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	2200      	movs	r2, #0
 8002188:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	0018      	movs	r0, r3
 8002190:	f000 fc0a 	bl	80029a8 <RTC_ByteToBcd2>
 8002194:	0003      	movs	r3, r0
 8002196:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	785b      	ldrb	r3, [r3, #1]
 800219c:	0018      	movs	r0, r3
 800219e:	f000 fc03 	bl	80029a8 <RTC_ByteToBcd2>
 80021a2:	0003      	movs	r3, r0
 80021a4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80021a6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	789b      	ldrb	r3, [r3, #2]
 80021ac:	0018      	movs	r0, r3
 80021ae:	f000 fbfb 	bl	80029a8 <RTC_ByteToBcd2>
 80021b2:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80021b4:	0022      	movs	r2, r4
 80021b6:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	78db      	ldrb	r3, [r3, #3]
 80021bc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80021be:	4313      	orrs	r3, r2
 80021c0:	617b      	str	r3, [r7, #20]
 80021c2:	e017      	b.n	80021f4 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	2240      	movs	r2, #64	; 0x40
 80021cc:	4013      	ands	r3, r2
 80021ce:	d102      	bne.n	80021d6 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	2200      	movs	r2, #0
 80021d4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	785b      	ldrb	r3, [r3, #1]
 80021e0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80021e2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80021e4:	68ba      	ldr	r2, [r7, #8]
 80021e6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80021e8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	78db      	ldrb	r3, [r3, #3]
 80021ee:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80021f0:	4313      	orrs	r3, r2
 80021f2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	22ca      	movs	r2, #202	; 0xca
 80021fa:	625a      	str	r2, [r3, #36]	; 0x24
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2253      	movs	r2, #83	; 0x53
 8002202:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002204:	2513      	movs	r5, #19
 8002206:	197c      	adds	r4, r7, r5
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	0018      	movs	r0, r3
 800220c:	f000 fb5e 	bl	80028cc <RTC_EnterInitMode>
 8002210:	0003      	movs	r3, r0
 8002212:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002214:	0028      	movs	r0, r5
 8002216:	183b      	adds	r3, r7, r0
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d120      	bne.n	8002260 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	491a      	ldr	r1, [pc, #104]	; (8002290 <HAL_RTC_SetTime+0x14c>)
 8002226:	400a      	ands	r2, r1
 8002228:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4917      	ldr	r1, [pc, #92]	; (8002294 <HAL_RTC_SetTime+0x150>)
 8002236:	400a      	ands	r2, r1
 8002238:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6899      	ldr	r1, [r3, #8]
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	68da      	ldr	r2, [r3, #12]
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	431a      	orrs	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	430a      	orrs	r2, r1
 8002250:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002252:	183c      	adds	r4, r7, r0
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	0018      	movs	r0, r3
 8002258:	f000 fb7c 	bl	8002954 <RTC_ExitInitMode>
 800225c:	0003      	movs	r3, r0
 800225e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8002260:	2313      	movs	r3, #19
 8002262:	18fb      	adds	r3, r7, r3
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d103      	bne.n	8002272 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2221      	movs	r2, #33	; 0x21
 800226e:	2101      	movs	r1, #1
 8002270:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	22ff      	movs	r2, #255	; 0xff
 8002278:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2220      	movs	r2, #32
 800227e:	2100      	movs	r1, #0
 8002280:	5499      	strb	r1, [r3, r2]

  return status;
 8002282:	2313      	movs	r3, #19
 8002284:	18fb      	adds	r3, r7, r3
 8002286:	781b      	ldrb	r3, [r3, #0]
}
 8002288:	0018      	movs	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	b006      	add	sp, #24
 800228e:	bdb0      	pop	{r4, r5, r7, pc}
 8002290:	007f7f7f 	.word	0x007f7f7f
 8002294:	fffbffff 	.word	0xfffbffff

08002298 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	045b      	lsls	r3, r3, #17
 80022ba:	0c5a      	lsrs	r2, r3, #17
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a22      	ldr	r2, [pc, #136]	; (8002350 <HAL_RTC_GetTime+0xb8>)
 80022c8:	4013      	ands	r3, r2
 80022ca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	0c1b      	lsrs	r3, r3, #16
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	223f      	movs	r2, #63	; 0x3f
 80022d4:	4013      	ands	r3, r2
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	227f      	movs	r2, #127	; 0x7f
 80022e4:	4013      	ands	r3, r2
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	227f      	movs	r2, #127	; 0x7f
 80022f2:	4013      	ands	r3, r2
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	0d9b      	lsrs	r3, r3, #22
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2201      	movs	r2, #1
 8002302:	4013      	ands	r3, r2
 8002304:	b2da      	uxtb	r2, r3
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d11a      	bne.n	8002346 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	0018      	movs	r0, r3
 8002316:	f000 fb68 	bl	80029ea <RTC_Bcd2ToByte>
 800231a:	0003      	movs	r3, r0
 800231c:	001a      	movs	r2, r3
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	785b      	ldrb	r3, [r3, #1]
 8002326:	0018      	movs	r0, r3
 8002328:	f000 fb5f 	bl	80029ea <RTC_Bcd2ToByte>
 800232c:	0003      	movs	r3, r0
 800232e:	001a      	movs	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	789b      	ldrb	r3, [r3, #2]
 8002338:	0018      	movs	r0, r3
 800233a:	f000 fb56 	bl	80029ea <RTC_Bcd2ToByte>
 800233e:	0003      	movs	r3, r0
 8002340:	001a      	movs	r2, r3
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	0018      	movs	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	b006      	add	sp, #24
 800234e:	bd80      	pop	{r7, pc}
 8002350:	007f7f7f 	.word	0x007f7f7f

08002354 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002354:	b5b0      	push	{r4, r5, r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2220      	movs	r2, #32
 8002368:	5c9b      	ldrb	r3, [r3, r2]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d101      	bne.n	8002372 <HAL_RTC_SetDate+0x1e>
 800236e:	2302      	movs	r3, #2
 8002370:	e07e      	b.n	8002470 <HAL_RTC_SetDate+0x11c>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2220      	movs	r2, #32
 8002376:	2101      	movs	r1, #1
 8002378:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2221      	movs	r2, #33	; 0x21
 800237e:	2102      	movs	r1, #2
 8002380:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10e      	bne.n	80023a6 <HAL_RTC_SetDate+0x52>
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	785b      	ldrb	r3, [r3, #1]
 800238c:	001a      	movs	r2, r3
 800238e:	2310      	movs	r3, #16
 8002390:	4013      	ands	r3, r2
 8002392:	d008      	beq.n	80023a6 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	785b      	ldrb	r3, [r3, #1]
 8002398:	2210      	movs	r2, #16
 800239a:	4393      	bics	r3, r2
 800239c:	b2db      	uxtb	r3, r3
 800239e:	330a      	adds	r3, #10
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d11c      	bne.n	80023e6 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	78db      	ldrb	r3, [r3, #3]
 80023b0:	0018      	movs	r0, r3
 80023b2:	f000 faf9 	bl	80029a8 <RTC_ByteToBcd2>
 80023b6:	0003      	movs	r3, r0
 80023b8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	785b      	ldrb	r3, [r3, #1]
 80023be:	0018      	movs	r0, r3
 80023c0:	f000 faf2 	bl	80029a8 <RTC_ByteToBcd2>
 80023c4:	0003      	movs	r3, r0
 80023c6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80023c8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	789b      	ldrb	r3, [r3, #2]
 80023ce:	0018      	movs	r0, r3
 80023d0:	f000 faea 	bl	80029a8 <RTC_ByteToBcd2>
 80023d4:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80023d6:	0022      	movs	r2, r4
 80023d8:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80023e0:	4313      	orrs	r3, r2
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	e00e      	b.n	8002404 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	78db      	ldrb	r3, [r3, #3]
 80023ea:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	785b      	ldrb	r3, [r3, #1]
 80023f0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80023f2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80023f8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002400:	4313      	orrs	r3, r2
 8002402:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	22ca      	movs	r2, #202	; 0xca
 800240a:	625a      	str	r2, [r3, #36]	; 0x24
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2253      	movs	r2, #83	; 0x53
 8002412:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002414:	2513      	movs	r5, #19
 8002416:	197c      	adds	r4, r7, r5
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	0018      	movs	r0, r3
 800241c:	f000 fa56 	bl	80028cc <RTC_EnterInitMode>
 8002420:	0003      	movs	r3, r0
 8002422:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002424:	0028      	movs	r0, r5
 8002426:	183b      	adds	r3, r7, r0
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10c      	bne.n	8002448 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	4910      	ldr	r1, [pc, #64]	; (8002478 <HAL_RTC_SetDate+0x124>)
 8002436:	400a      	ands	r2, r1
 8002438:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800243a:	183c      	adds	r4, r7, r0
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	0018      	movs	r0, r3
 8002440:	f000 fa88 	bl	8002954 <RTC_ExitInitMode>
 8002444:	0003      	movs	r3, r0
 8002446:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8002448:	2313      	movs	r3, #19
 800244a:	18fb      	adds	r3, r7, r3
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d103      	bne.n	800245a <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2221      	movs	r2, #33	; 0x21
 8002456:	2101      	movs	r1, #1
 8002458:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	22ff      	movs	r2, #255	; 0xff
 8002460:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2220      	movs	r2, #32
 8002466:	2100      	movs	r1, #0
 8002468:	5499      	strb	r1, [r3, r2]

  return status;
 800246a:	2313      	movs	r3, #19
 800246c:	18fb      	adds	r3, r7, r3
 800246e:	781b      	ldrb	r3, [r3, #0]
}
 8002470:	0018      	movs	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	b006      	add	sp, #24
 8002476:	bdb0      	pop	{r4, r5, r7, pc}
 8002478:	00ffff3f 	.word	0x00ffff3f

0800247c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	4a21      	ldr	r2, [pc, #132]	; (8002518 <HAL_RTC_GetDate+0x9c>)
 8002494:	4013      	ands	r3, r2
 8002496:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	0c1b      	lsrs	r3, r3, #16
 800249c:	b2da      	uxtb	r2, r3
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	0a1b      	lsrs	r3, r3, #8
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	221f      	movs	r2, #31
 80024aa:	4013      	ands	r3, r2
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	223f      	movs	r2, #63	; 0x3f
 80024b8:	4013      	ands	r3, r2
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	0b5b      	lsrs	r3, r3, #13
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2207      	movs	r2, #7
 80024c8:	4013      	ands	r3, r2
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d11a      	bne.n	800250c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	78db      	ldrb	r3, [r3, #3]
 80024da:	0018      	movs	r0, r3
 80024dc:	f000 fa85 	bl	80029ea <RTC_Bcd2ToByte>
 80024e0:	0003      	movs	r3, r0
 80024e2:	001a      	movs	r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	785b      	ldrb	r3, [r3, #1]
 80024ec:	0018      	movs	r0, r3
 80024ee:	f000 fa7c 	bl	80029ea <RTC_Bcd2ToByte>
 80024f2:	0003      	movs	r3, r0
 80024f4:	001a      	movs	r2, r3
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	789b      	ldrb	r3, [r3, #2]
 80024fe:	0018      	movs	r0, r3
 8002500:	f000 fa73 	bl	80029ea <RTC_Bcd2ToByte>
 8002504:	0003      	movs	r3, r0
 8002506:	001a      	movs	r2, r3
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	0018      	movs	r0, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	b006      	add	sp, #24
 8002514:	bd80      	pop	{r7, pc}
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	00ffff3f 	.word	0x00ffff3f

0800251c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800251c:	b590      	push	{r4, r7, lr}
 800251e:	b089      	sub	sp, #36	; 0x24
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002528:	4ba7      	ldr	r3, [pc, #668]	; (80027c8 <HAL_RTC_SetAlarm_IT+0x2ac>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	22fa      	movs	r2, #250	; 0xfa
 800252e:	01d1      	lsls	r1, r2, #7
 8002530:	0018      	movs	r0, r3
 8002532:	f7fd fdf3 	bl	800011c <__udivsi3>
 8002536:	0003      	movs	r3, r0
 8002538:	001a      	movs	r2, r3
 800253a:	0013      	movs	r3, r2
 800253c:	015b      	lsls	r3, r3, #5
 800253e:	1a9b      	subs	r3, r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	189b      	adds	r3, r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2220      	movs	r2, #32
 8002554:	5c9b      	ldrb	r3, [r3, r2]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d101      	bne.n	800255e <HAL_RTC_SetAlarm_IT+0x42>
 800255a:	2302      	movs	r3, #2
 800255c:	e130      	b.n	80027c0 <HAL_RTC_SetAlarm_IT+0x2a4>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2220      	movs	r2, #32
 8002562:	2101      	movs	r1, #1
 8002564:	5499      	strb	r1, [r3, r2]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2221      	movs	r2, #33	; 0x21
 800256a:	2102      	movs	r1, #2
 800256c:	5499      	strb	r1, [r3, r2]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d136      	bne.n	80025e2 <HAL_RTC_SetAlarm_IT+0xc6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	2240      	movs	r2, #64	; 0x40
 800257c:	4013      	ands	r3, r2
 800257e:	d102      	bne.n	8002586 <HAL_RTC_SetAlarm_IT+0x6a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2200      	movs	r2, #0
 8002584:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	0018      	movs	r0, r3
 800258c:	f000 fa0c 	bl	80029a8 <RTC_ByteToBcd2>
 8002590:	0003      	movs	r3, r0
 8002592:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	785b      	ldrb	r3, [r3, #1]
 8002598:	0018      	movs	r0, r3
 800259a:	f000 fa05 	bl	80029a8 <RTC_ByteToBcd2>
 800259e:	0003      	movs	r3, r0
 80025a0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80025a2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	789b      	ldrb	r3, [r3, #2]
 80025a8:	0018      	movs	r0, r3
 80025aa:	f000 f9fd 	bl	80029a8 <RTC_ByteToBcd2>
 80025ae:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80025b0:	0022      	movs	r2, r4
 80025b2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	78db      	ldrb	r3, [r3, #3]
 80025b8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80025ba:	431a      	orrs	r2, r3
 80025bc:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2220      	movs	r2, #32
 80025c2:	5c9b      	ldrb	r3, [r3, r2]
 80025c4:	0018      	movs	r0, r3
 80025c6:	f000 f9ef 	bl	80029a8 <RTC_ByteToBcd2>
 80025ca:	0003      	movs	r3, r0
 80025cc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80025ce:	0022      	movs	r2, r4
 80025d0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80025d6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80025dc:	4313      	orrs	r3, r2
 80025de:	61fb      	str	r3, [r7, #28]
 80025e0:	e022      	b.n	8002628 <HAL_RTC_SetAlarm_IT+0x10c>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2240      	movs	r2, #64	; 0x40
 80025ea:	4013      	ands	r3, r2
 80025ec:	d102      	bne.n	80025f4 <HAL_RTC_SetAlarm_IT+0xd8>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2200      	movs	r2, #0
 80025f2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	785b      	ldrb	r3, [r3, #1]
 80025fe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002600:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002606:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	78db      	ldrb	r3, [r3, #3]
 800260c:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800260e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2120      	movs	r1, #32
 8002614:	5c5b      	ldrb	r3, [r3, r1]
 8002616:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002618:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800261e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002624:	4313      	orrs	r3, r2
 8002626:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002630:	4313      	orrs	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	22ca      	movs	r2, #202	; 0xca
 800263a:	625a      	str	r2, [r3, #36]	; 0x24
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2253      	movs	r2, #83	; 0x53
 8002642:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002648:	2380      	movs	r3, #128	; 0x80
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	429a      	cmp	r2, r3
 800264e:	d146      	bne.n	80026de <HAL_RTC_SetAlarm_IT+0x1c2>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689a      	ldr	r2, [r3, #8]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	495c      	ldr	r1, [pc, #368]	; (80027cc <HAL_RTC_SetAlarm_IT+0x2b0>)
 800265c:	400a      	ands	r2, r1
 800265e:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	22ff      	movs	r2, #255	; 0xff
 8002668:	401a      	ands	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4958      	ldr	r1, [pc, #352]	; (80027d0 <HAL_RTC_SetAlarm_IT+0x2b4>)
 8002670:	430a      	orrs	r2, r1
 8002672:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	3b01      	subs	r3, #1
 8002678:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10d      	bne.n	800269c <HAL_RTC_SetAlarm_IT+0x180>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	22ff      	movs	r2, #255	; 0xff
 8002686:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2221      	movs	r2, #33	; 0x21
 800268c:	2103      	movs	r1, #3
 800268e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2220      	movs	r2, #32
 8002694:	2100      	movs	r1, #0
 8002696:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e091      	b.n	80027c0 <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	2201      	movs	r2, #1
 80026a4:	4013      	ands	r3, r2
 80026a6:	d0e5      	beq.n	8002674 <HAL_RTC_SetAlarm_IT+0x158>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	69fa      	ldr	r2, [r7, #28]
 80026ae:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2180      	movs	r1, #128	; 0x80
 80026c4:	0049      	lsls	r1, r1, #1
 80026c6:	430a      	orrs	r2, r1
 80026c8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2180      	movs	r1, #128	; 0x80
 80026d6:	0149      	lsls	r1, r1, #5
 80026d8:	430a      	orrs	r2, r1
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	e055      	b.n	800278a <HAL_RTC_SetAlarm_IT+0x26e>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	493a      	ldr	r1, [pc, #232]	; (80027d4 <HAL_RTC_SetAlarm_IT+0x2b8>)
 80026ea:	400a      	ands	r2, r1
 80026ec:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	22ff      	movs	r2, #255	; 0xff
 80026f6:	401a      	ands	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4936      	ldr	r1, [pc, #216]	; (80027d8 <HAL_RTC_SetAlarm_IT+0x2bc>)
 80026fe:	430a      	orrs	r2, r1
 8002700:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002702:	4b31      	ldr	r3, [pc, #196]	; (80027c8 <HAL_RTC_SetAlarm_IT+0x2ac>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	22fa      	movs	r2, #250	; 0xfa
 8002708:	01d1      	lsls	r1, r2, #7
 800270a:	0018      	movs	r0, r3
 800270c:	f7fd fd06 	bl	800011c <__udivsi3>
 8002710:	0003      	movs	r3, r0
 8002712:	001a      	movs	r2, r3
 8002714:	0013      	movs	r3, r2
 8002716:	015b      	lsls	r3, r3, #5
 8002718:	1a9b      	subs	r3, r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	189b      	adds	r3, r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	3b01      	subs	r3, #1
 8002726:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10d      	bne.n	800274a <HAL_RTC_SetAlarm_IT+0x22e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	22ff      	movs	r2, #255	; 0xff
 8002734:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2221      	movs	r2, #33	; 0x21
 800273a:	2103      	movs	r1, #3
 800273c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2220      	movs	r2, #32
 8002742:	2100      	movs	r1, #0
 8002744:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e03a      	b.n	80027c0 <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	2202      	movs	r2, #2
 8002752:	4013      	ands	r3, r2
 8002754:	d0e5      	beq.n	8002722 <HAL_RTC_SetAlarm_IT+0x206>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	69fa      	ldr	r2, [r7, #28]
 800275c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2180      	movs	r1, #128	; 0x80
 8002772:	0089      	lsls	r1, r1, #2
 8002774:	430a      	orrs	r2, r1
 8002776:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2180      	movs	r1, #128	; 0x80
 8002784:	0189      	lsls	r1, r1, #6
 8002786:	430a      	orrs	r2, r1
 8002788:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800278a:	4b14      	ldr	r3, [pc, #80]	; (80027dc <HAL_RTC_SetAlarm_IT+0x2c0>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	4b13      	ldr	r3, [pc, #76]	; (80027dc <HAL_RTC_SetAlarm_IT+0x2c0>)
 8002790:	2180      	movs	r1, #128	; 0x80
 8002792:	0289      	lsls	r1, r1, #10
 8002794:	430a      	orrs	r2, r1
 8002796:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002798:	4b10      	ldr	r3, [pc, #64]	; (80027dc <HAL_RTC_SetAlarm_IT+0x2c0>)
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <HAL_RTC_SetAlarm_IT+0x2c0>)
 800279e:	2180      	movs	r1, #128	; 0x80
 80027a0:	0289      	lsls	r1, r1, #10
 80027a2:	430a      	orrs	r2, r1
 80027a4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	22ff      	movs	r2, #255	; 0xff
 80027ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2221      	movs	r2, #33	; 0x21
 80027b2:	2101      	movs	r1, #1
 80027b4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2220      	movs	r2, #32
 80027ba:	2100      	movs	r1, #0
 80027bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	0018      	movs	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b009      	add	sp, #36	; 0x24
 80027c6:	bd90      	pop	{r4, r7, pc}
 80027c8:	20000000 	.word	0x20000000
 80027cc:	fffffeff 	.word	0xfffffeff
 80027d0:	fffffe7f 	.word	0xfffffe7f
 80027d4:	fffffdff 	.word	0xfffffdff
 80027d8:	fffffd7f 	.word	0xfffffd7f
 80027dc:	40010400 	.word	0x40010400

080027e0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80027e8:	4b21      	ldr	r3, [pc, #132]	; (8002870 <HAL_RTC_AlarmIRQHandler+0x90>)
 80027ea:	2280      	movs	r2, #128	; 0x80
 80027ec:	0292      	lsls	r2, r2, #10
 80027ee:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	2380      	movs	r3, #128	; 0x80
 80027f8:	015b      	lsls	r3, r3, #5
 80027fa:	4013      	ands	r3, r2
 80027fc:	d014      	beq.n	8002828 <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	2380      	movs	r3, #128	; 0x80
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	4013      	ands	r3, r2
 800280a:	d00d      	beq.n	8002828 <HAL_RTC_AlarmIRQHandler+0x48>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	22ff      	movs	r2, #255	; 0xff
 8002814:	401a      	ands	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4916      	ldr	r1, [pc, #88]	; (8002874 <HAL_RTC_AlarmIRQHandler+0x94>)
 800281c:	430a      	orrs	r2, r1
 800281e:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	0018      	movs	r0, r3
 8002824:	f7fe f852 	bl	80008cc <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	2380      	movs	r3, #128	; 0x80
 8002830:	019b      	lsls	r3, r3, #6
 8002832:	4013      	ands	r3, r2
 8002834:	d014      	beq.n	8002860 <HAL_RTC_AlarmIRQHandler+0x80>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	2380      	movs	r3, #128	; 0x80
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4013      	ands	r3, r2
 8002842:	d00d      	beq.n	8002860 <HAL_RTC_AlarmIRQHandler+0x80>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	22ff      	movs	r2, #255	; 0xff
 800284c:	401a      	ands	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4909      	ldr	r1, [pc, #36]	; (8002878 <HAL_RTC_AlarmIRQHandler+0x98>)
 8002854:	430a      	orrs	r2, r1
 8002856:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	0018      	movs	r0, r3
 800285c:	f000 f8e4 	bl	8002a28 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2221      	movs	r2, #33	; 0x21
 8002864:	2101      	movs	r1, #1
 8002866:	5499      	strb	r1, [r3, r2]
}
 8002868:	46c0      	nop			; (mov r8, r8)
 800286a:	46bd      	mov	sp, r7
 800286c:	b002      	add	sp, #8
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40010400 	.word	0x40010400
 8002874:	fffffe7f 	.word	0xfffffe7f
 8002878:	fffffd7f 	.word	0xfffffd7f

0800287c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a0e      	ldr	r2, [pc, #56]	; (80028c8 <HAL_RTC_WaitForSynchro+0x4c>)
 800288e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002890:	f7fe f9a6 	bl	8000be0 <HAL_GetTick>
 8002894:	0003      	movs	r3, r0
 8002896:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002898:	e00a      	b.n	80028b0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800289a:	f7fe f9a1 	bl	8000be0 <HAL_GetTick>
 800289e:	0002      	movs	r2, r0
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	1ad2      	subs	r2, r2, r3
 80028a4:	23fa      	movs	r3, #250	; 0xfa
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d901      	bls.n	80028b0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e006      	b.n	80028be <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2220      	movs	r2, #32
 80028b8:	4013      	ands	r3, r2
 80028ba:	d0ee      	beq.n	800289a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	0018      	movs	r0, r3
 80028c0:	46bd      	mov	sp, r7
 80028c2:	b004      	add	sp, #16
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	46c0      	nop			; (mov r8, r8)
 80028c8:	00017f5f 	.word	0x00017f5f

080028cc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80028d8:	230f      	movs	r3, #15
 80028da:	18fb      	adds	r3, r7, r3
 80028dc:	2200      	movs	r2, #0
 80028de:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	2240      	movs	r2, #64	; 0x40
 80028e8:	4013      	ands	r3, r2
 80028ea:	d12c      	bne.n	8002946 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2180      	movs	r1, #128	; 0x80
 80028f8:	430a      	orrs	r2, r1
 80028fa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80028fc:	f7fe f970 	bl	8000be0 <HAL_GetTick>
 8002900:	0003      	movs	r3, r0
 8002902:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002904:	e014      	b.n	8002930 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002906:	f7fe f96b 	bl	8000be0 <HAL_GetTick>
 800290a:	0002      	movs	r2, r0
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	1ad2      	subs	r2, r2, r3
 8002910:	200f      	movs	r0, #15
 8002912:	183b      	adds	r3, r7, r0
 8002914:	1839      	adds	r1, r7, r0
 8002916:	7809      	ldrb	r1, [r1, #0]
 8002918:	7019      	strb	r1, [r3, #0]
 800291a:	23fa      	movs	r3, #250	; 0xfa
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	429a      	cmp	r2, r3
 8002920:	d906      	bls.n	8002930 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2221      	movs	r2, #33	; 0x21
 8002926:	2104      	movs	r1, #4
 8002928:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 800292a:	183b      	adds	r3, r7, r0
 800292c:	2201      	movs	r2, #1
 800292e:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	2240      	movs	r2, #64	; 0x40
 8002938:	4013      	ands	r3, r2
 800293a:	d104      	bne.n	8002946 <RTC_EnterInitMode+0x7a>
 800293c:	230f      	movs	r3, #15
 800293e:	18fb      	adds	r3, r7, r3
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d1df      	bne.n	8002906 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8002946:	230f      	movs	r3, #15
 8002948:	18fb      	adds	r3, r7, r3
 800294a:	781b      	ldrb	r3, [r3, #0]
}
 800294c:	0018      	movs	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	b004      	add	sp, #16
 8002952:	bd80      	pop	{r7, pc}

08002954 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002954:	b590      	push	{r4, r7, lr}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800295c:	240f      	movs	r4, #15
 800295e:	193b      	adds	r3, r7, r4
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2180      	movs	r1, #128	; 0x80
 8002970:	438a      	bics	r2, r1
 8002972:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2220      	movs	r2, #32
 800297c:	4013      	ands	r3, r2
 800297e:	d10c      	bne.n	800299a <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	0018      	movs	r0, r3
 8002984:	f7ff ff7a 	bl	800287c <HAL_RTC_WaitForSynchro>
 8002988:	1e03      	subs	r3, r0, #0
 800298a:	d006      	beq.n	800299a <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2221      	movs	r2, #33	; 0x21
 8002990:	2104      	movs	r1, #4
 8002992:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8002994:	193b      	adds	r3, r7, r4
 8002996:	2201      	movs	r2, #1
 8002998:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800299a:	230f      	movs	r3, #15
 800299c:	18fb      	adds	r3, r7, r3
 800299e:	781b      	ldrb	r3, [r3, #0]
}
 80029a0:	0018      	movs	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	b005      	add	sp, #20
 80029a6:	bd90      	pop	{r4, r7, pc}

080029a8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	0002      	movs	r2, r0
 80029b0:	1dfb      	adds	r3, r7, #7
 80029b2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80029b8:	e007      	b.n	80029ca <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	3301      	adds	r3, #1
 80029be:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80029c0:	1dfb      	adds	r3, r7, #7
 80029c2:	1dfa      	adds	r2, r7, #7
 80029c4:	7812      	ldrb	r2, [r2, #0]
 80029c6:	3a0a      	subs	r2, #10
 80029c8:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 80029ca:	1dfb      	adds	r3, r7, #7
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b09      	cmp	r3, #9
 80029d0:	d8f3      	bhi.n	80029ba <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	1dfb      	adds	r3, r7, #7
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	4313      	orrs	r3, r2
 80029e0:	b2db      	uxtb	r3, r3
}
 80029e2:	0018      	movs	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b004      	add	sp, #16
 80029e8:	bd80      	pop	{r7, pc}

080029ea <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b084      	sub	sp, #16
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	0002      	movs	r2, r0
 80029f2:	1dfb      	adds	r3, r7, #7
 80029f4:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80029fa:	1dfb      	adds	r3, r7, #7
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	091b      	lsrs	r3, r3, #4
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	001a      	movs	r2, r3
 8002a04:	0013      	movs	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	189b      	adds	r3, r3, r2
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	1dfb      	adds	r3, r7, #7
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	210f      	movs	r1, #15
 8002a18:	400b      	ands	r3, r1
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	18d3      	adds	r3, r2, r3
 8002a1e:	b2db      	uxtb	r3, r3
}
 8002a20:	0018      	movs	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b004      	add	sp, #16
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002a30:	46c0      	nop			; (mov r8, r8)
 8002a32:	46bd      	mov	sp, r7
 8002a34:	b002      	add	sp, #8
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e044      	b.n	8002ad4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d107      	bne.n	8002a62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2278      	movs	r2, #120	; 0x78
 8002a56:	2100      	movs	r1, #0
 8002a58:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f7fd ff8b 	bl	8000978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2224      	movs	r2, #36	; 0x24
 8002a66:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2101      	movs	r1, #1
 8002a74:	438a      	bics	r2, r1
 8002a76:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f000 f8d0 	bl	8002c20 <UART_SetConfig>
 8002a80:	0003      	movs	r3, r0
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d101      	bne.n	8002a8a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e024      	b.n	8002ad4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	0018      	movs	r0, r3
 8002a96:	f000 fb47 	bl	8003128 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	490d      	ldr	r1, [pc, #52]	; (8002adc <HAL_UART_Init+0xa4>)
 8002aa6:	400a      	ands	r2, r1
 8002aa8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	212a      	movs	r1, #42	; 0x2a
 8002ab6:	438a      	bics	r2, r1
 8002ab8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	0018      	movs	r0, r3
 8002ace:	f000 fbdf 	bl	8003290 <UART_CheckIdleState>
 8002ad2:	0003      	movs	r3, r0
}
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b002      	add	sp, #8
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	ffffb7ff 	.word	0xffffb7ff

08002ae0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08a      	sub	sp, #40	; 0x28
 8002ae4:	af02      	add	r7, sp, #8
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	603b      	str	r3, [r7, #0]
 8002aec:	1dbb      	adds	r3, r7, #6
 8002aee:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af4:	2b20      	cmp	r3, #32
 8002af6:	d000      	beq.n	8002afa <HAL_UART_Transmit+0x1a>
 8002af8:	e08c      	b.n	8002c14 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <HAL_UART_Transmit+0x28>
 8002b00:	1dbb      	adds	r3, r7, #6
 8002b02:	881b      	ldrh	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e084      	b.n	8002c16 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	2380      	movs	r3, #128	; 0x80
 8002b12:	015b      	lsls	r3, r3, #5
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d109      	bne.n	8002b2c <HAL_UART_Transmit+0x4c>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d105      	bne.n	8002b2c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2201      	movs	r2, #1
 8002b24:	4013      	ands	r3, r2
 8002b26:	d001      	beq.n	8002b2c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e074      	b.n	8002c16 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2284      	movs	r2, #132	; 0x84
 8002b30:	2100      	movs	r1, #0
 8002b32:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2221      	movs	r2, #33	; 0x21
 8002b38:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b3a:	f7fe f851 	bl	8000be0 <HAL_GetTick>
 8002b3e:	0003      	movs	r3, r0
 8002b40:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	1dba      	adds	r2, r7, #6
 8002b46:	2150      	movs	r1, #80	; 0x50
 8002b48:	8812      	ldrh	r2, [r2, #0]
 8002b4a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	1dba      	adds	r2, r7, #6
 8002b50:	2152      	movs	r1, #82	; 0x52
 8002b52:	8812      	ldrh	r2, [r2, #0]
 8002b54:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	2380      	movs	r3, #128	; 0x80
 8002b5c:	015b      	lsls	r3, r3, #5
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d108      	bne.n	8002b74 <HAL_UART_Transmit+0x94>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d104      	bne.n	8002b74 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	61bb      	str	r3, [r7, #24]
 8002b72:	e003      	b.n	8002b7c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b7c:	e02f      	b.n	8002bde <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	0013      	movs	r3, r2
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2180      	movs	r1, #128	; 0x80
 8002b8c:	f000 fc28 	bl	80033e0 <UART_WaitOnFlagUntilTimeout>
 8002b90:	1e03      	subs	r3, r0, #0
 8002b92:	d004      	beq.n	8002b9e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2220      	movs	r2, #32
 8002b98:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e03b      	b.n	8002c16 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10b      	bne.n	8002bbc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	001a      	movs	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	05d2      	lsls	r2, r2, #23
 8002bb0:	0dd2      	lsrs	r2, r2, #23
 8002bb2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	3302      	adds	r3, #2
 8002bb8:	61bb      	str	r3, [r7, #24]
 8002bba:	e007      	b.n	8002bcc <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	781a      	ldrb	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2252      	movs	r2, #82	; 0x52
 8002bd0:	5a9b      	ldrh	r3, [r3, r2]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	b299      	uxth	r1, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2252      	movs	r2, #82	; 0x52
 8002bdc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2252      	movs	r2, #82	; 0x52
 8002be2:	5a9b      	ldrh	r3, [r3, r2]
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1c9      	bne.n	8002b7e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	0013      	movs	r3, r2
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2140      	movs	r1, #64	; 0x40
 8002bf8:	f000 fbf2 	bl	80033e0 <UART_WaitOnFlagUntilTimeout>
 8002bfc:	1e03      	subs	r3, r0, #0
 8002bfe:	d004      	beq.n	8002c0a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2220      	movs	r2, #32
 8002c04:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e005      	b.n	8002c16 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002c10:	2300      	movs	r3, #0
 8002c12:	e000      	b.n	8002c16 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002c14:	2302      	movs	r3, #2
  }
}
 8002c16:	0018      	movs	r0, r3
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	b008      	add	sp, #32
 8002c1c:	bd80      	pop	{r7, pc}
	...

08002c20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c20:	b5b0      	push	{r4, r5, r7, lr}
 8002c22:	b08e      	sub	sp, #56	; 0x38
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c28:	231a      	movs	r3, #26
 8002c2a:	2218      	movs	r2, #24
 8002c2c:	189b      	adds	r3, r3, r2
 8002c2e:	19db      	adds	r3, r3, r7
 8002c30:	2200      	movs	r2, #0
 8002c32:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	431a      	orrs	r2, r3
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4ac6      	ldr	r2, [pc, #792]	; (8002f6c <UART_SetConfig+0x34c>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	0019      	movs	r1, r3
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	4ac1      	ldr	r2, [pc, #772]	; (8002f70 <UART_SetConfig+0x350>)
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	0019      	movs	r1, r3
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4abb      	ldr	r2, [pc, #748]	; (8002f74 <UART_SetConfig+0x354>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d004      	beq.n	8002c94 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c90:	4313      	orrs	r3, r2
 8002c92:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	4ab7      	ldr	r2, [pc, #732]	; (8002f78 <UART_SetConfig+0x358>)
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	0019      	movs	r1, r3
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4ab3      	ldr	r2, [pc, #716]	; (8002f7c <UART_SetConfig+0x35c>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d131      	bne.n	8002d18 <UART_SetConfig+0xf8>
 8002cb4:	4bb2      	ldr	r3, [pc, #712]	; (8002f80 <UART_SetConfig+0x360>)
 8002cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb8:	2203      	movs	r2, #3
 8002cba:	4013      	ands	r3, r2
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d01d      	beq.n	8002cfc <UART_SetConfig+0xdc>
 8002cc0:	d823      	bhi.n	8002d0a <UART_SetConfig+0xea>
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d00c      	beq.n	8002ce0 <UART_SetConfig+0xc0>
 8002cc6:	d820      	bhi.n	8002d0a <UART_SetConfig+0xea>
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d002      	beq.n	8002cd2 <UART_SetConfig+0xb2>
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d00e      	beq.n	8002cee <UART_SetConfig+0xce>
 8002cd0:	e01b      	b.n	8002d0a <UART_SetConfig+0xea>
 8002cd2:	231b      	movs	r3, #27
 8002cd4:	2218      	movs	r2, #24
 8002cd6:	189b      	adds	r3, r3, r2
 8002cd8:	19db      	adds	r3, r3, r7
 8002cda:	2201      	movs	r2, #1
 8002cdc:	701a      	strb	r2, [r3, #0]
 8002cde:	e09c      	b.n	8002e1a <UART_SetConfig+0x1fa>
 8002ce0:	231b      	movs	r3, #27
 8002ce2:	2218      	movs	r2, #24
 8002ce4:	189b      	adds	r3, r3, r2
 8002ce6:	19db      	adds	r3, r3, r7
 8002ce8:	2202      	movs	r2, #2
 8002cea:	701a      	strb	r2, [r3, #0]
 8002cec:	e095      	b.n	8002e1a <UART_SetConfig+0x1fa>
 8002cee:	231b      	movs	r3, #27
 8002cf0:	2218      	movs	r2, #24
 8002cf2:	189b      	adds	r3, r3, r2
 8002cf4:	19db      	adds	r3, r3, r7
 8002cf6:	2204      	movs	r2, #4
 8002cf8:	701a      	strb	r2, [r3, #0]
 8002cfa:	e08e      	b.n	8002e1a <UART_SetConfig+0x1fa>
 8002cfc:	231b      	movs	r3, #27
 8002cfe:	2218      	movs	r2, #24
 8002d00:	189b      	adds	r3, r3, r2
 8002d02:	19db      	adds	r3, r3, r7
 8002d04:	2208      	movs	r2, #8
 8002d06:	701a      	strb	r2, [r3, #0]
 8002d08:	e087      	b.n	8002e1a <UART_SetConfig+0x1fa>
 8002d0a:	231b      	movs	r3, #27
 8002d0c:	2218      	movs	r2, #24
 8002d0e:	189b      	adds	r3, r3, r2
 8002d10:	19db      	adds	r3, r3, r7
 8002d12:	2210      	movs	r2, #16
 8002d14:	701a      	strb	r2, [r3, #0]
 8002d16:	e080      	b.n	8002e1a <UART_SetConfig+0x1fa>
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a99      	ldr	r2, [pc, #612]	; (8002f84 <UART_SetConfig+0x364>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d131      	bne.n	8002d86 <UART_SetConfig+0x166>
 8002d22:	4b97      	ldr	r3, [pc, #604]	; (8002f80 <UART_SetConfig+0x360>)
 8002d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d26:	220c      	movs	r2, #12
 8002d28:	4013      	ands	r3, r2
 8002d2a:	2b0c      	cmp	r3, #12
 8002d2c:	d01d      	beq.n	8002d6a <UART_SetConfig+0x14a>
 8002d2e:	d823      	bhi.n	8002d78 <UART_SetConfig+0x158>
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	d00c      	beq.n	8002d4e <UART_SetConfig+0x12e>
 8002d34:	d820      	bhi.n	8002d78 <UART_SetConfig+0x158>
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d002      	beq.n	8002d40 <UART_SetConfig+0x120>
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d00e      	beq.n	8002d5c <UART_SetConfig+0x13c>
 8002d3e:	e01b      	b.n	8002d78 <UART_SetConfig+0x158>
 8002d40:	231b      	movs	r3, #27
 8002d42:	2218      	movs	r2, #24
 8002d44:	189b      	adds	r3, r3, r2
 8002d46:	19db      	adds	r3, r3, r7
 8002d48:	2200      	movs	r2, #0
 8002d4a:	701a      	strb	r2, [r3, #0]
 8002d4c:	e065      	b.n	8002e1a <UART_SetConfig+0x1fa>
 8002d4e:	231b      	movs	r3, #27
 8002d50:	2218      	movs	r2, #24
 8002d52:	189b      	adds	r3, r3, r2
 8002d54:	19db      	adds	r3, r3, r7
 8002d56:	2202      	movs	r2, #2
 8002d58:	701a      	strb	r2, [r3, #0]
 8002d5a:	e05e      	b.n	8002e1a <UART_SetConfig+0x1fa>
 8002d5c:	231b      	movs	r3, #27
 8002d5e:	2218      	movs	r2, #24
 8002d60:	189b      	adds	r3, r3, r2
 8002d62:	19db      	adds	r3, r3, r7
 8002d64:	2204      	movs	r2, #4
 8002d66:	701a      	strb	r2, [r3, #0]
 8002d68:	e057      	b.n	8002e1a <UART_SetConfig+0x1fa>
 8002d6a:	231b      	movs	r3, #27
 8002d6c:	2218      	movs	r2, #24
 8002d6e:	189b      	adds	r3, r3, r2
 8002d70:	19db      	adds	r3, r3, r7
 8002d72:	2208      	movs	r2, #8
 8002d74:	701a      	strb	r2, [r3, #0]
 8002d76:	e050      	b.n	8002e1a <UART_SetConfig+0x1fa>
 8002d78:	231b      	movs	r3, #27
 8002d7a:	2218      	movs	r2, #24
 8002d7c:	189b      	adds	r3, r3, r2
 8002d7e:	19db      	adds	r3, r3, r7
 8002d80:	2210      	movs	r2, #16
 8002d82:	701a      	strb	r2, [r3, #0]
 8002d84:	e049      	b.n	8002e1a <UART_SetConfig+0x1fa>
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a7a      	ldr	r2, [pc, #488]	; (8002f74 <UART_SetConfig+0x354>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d13e      	bne.n	8002e0e <UART_SetConfig+0x1ee>
 8002d90:	4b7b      	ldr	r3, [pc, #492]	; (8002f80 <UART_SetConfig+0x360>)
 8002d92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d94:	23c0      	movs	r3, #192	; 0xc0
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	4013      	ands	r3, r2
 8002d9a:	22c0      	movs	r2, #192	; 0xc0
 8002d9c:	0112      	lsls	r2, r2, #4
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d027      	beq.n	8002df2 <UART_SetConfig+0x1d2>
 8002da2:	22c0      	movs	r2, #192	; 0xc0
 8002da4:	0112      	lsls	r2, r2, #4
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d82a      	bhi.n	8002e00 <UART_SetConfig+0x1e0>
 8002daa:	2280      	movs	r2, #128	; 0x80
 8002dac:	0112      	lsls	r2, r2, #4
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d011      	beq.n	8002dd6 <UART_SetConfig+0x1b6>
 8002db2:	2280      	movs	r2, #128	; 0x80
 8002db4:	0112      	lsls	r2, r2, #4
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d822      	bhi.n	8002e00 <UART_SetConfig+0x1e0>
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d004      	beq.n	8002dc8 <UART_SetConfig+0x1a8>
 8002dbe:	2280      	movs	r2, #128	; 0x80
 8002dc0:	00d2      	lsls	r2, r2, #3
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d00e      	beq.n	8002de4 <UART_SetConfig+0x1c4>
 8002dc6:	e01b      	b.n	8002e00 <UART_SetConfig+0x1e0>
 8002dc8:	231b      	movs	r3, #27
 8002dca:	2218      	movs	r2, #24
 8002dcc:	189b      	adds	r3, r3, r2
 8002dce:	19db      	adds	r3, r3, r7
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	701a      	strb	r2, [r3, #0]
 8002dd4:	e021      	b.n	8002e1a <UART_SetConfig+0x1fa>
 8002dd6:	231b      	movs	r3, #27
 8002dd8:	2218      	movs	r2, #24
 8002dda:	189b      	adds	r3, r3, r2
 8002ddc:	19db      	adds	r3, r3, r7
 8002dde:	2202      	movs	r2, #2
 8002de0:	701a      	strb	r2, [r3, #0]
 8002de2:	e01a      	b.n	8002e1a <UART_SetConfig+0x1fa>
 8002de4:	231b      	movs	r3, #27
 8002de6:	2218      	movs	r2, #24
 8002de8:	189b      	adds	r3, r3, r2
 8002dea:	19db      	adds	r3, r3, r7
 8002dec:	2204      	movs	r2, #4
 8002dee:	701a      	strb	r2, [r3, #0]
 8002df0:	e013      	b.n	8002e1a <UART_SetConfig+0x1fa>
 8002df2:	231b      	movs	r3, #27
 8002df4:	2218      	movs	r2, #24
 8002df6:	189b      	adds	r3, r3, r2
 8002df8:	19db      	adds	r3, r3, r7
 8002dfa:	2208      	movs	r2, #8
 8002dfc:	701a      	strb	r2, [r3, #0]
 8002dfe:	e00c      	b.n	8002e1a <UART_SetConfig+0x1fa>
 8002e00:	231b      	movs	r3, #27
 8002e02:	2218      	movs	r2, #24
 8002e04:	189b      	adds	r3, r3, r2
 8002e06:	19db      	adds	r3, r3, r7
 8002e08:	2210      	movs	r2, #16
 8002e0a:	701a      	strb	r2, [r3, #0]
 8002e0c:	e005      	b.n	8002e1a <UART_SetConfig+0x1fa>
 8002e0e:	231b      	movs	r3, #27
 8002e10:	2218      	movs	r2, #24
 8002e12:	189b      	adds	r3, r3, r2
 8002e14:	19db      	adds	r3, r3, r7
 8002e16:	2210      	movs	r2, #16
 8002e18:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a55      	ldr	r2, [pc, #340]	; (8002f74 <UART_SetConfig+0x354>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d000      	beq.n	8002e26 <UART_SetConfig+0x206>
 8002e24:	e084      	b.n	8002f30 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e26:	231b      	movs	r3, #27
 8002e28:	2218      	movs	r2, #24
 8002e2a:	189b      	adds	r3, r3, r2
 8002e2c:	19db      	adds	r3, r3, r7
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d01d      	beq.n	8002e70 <UART_SetConfig+0x250>
 8002e34:	dc20      	bgt.n	8002e78 <UART_SetConfig+0x258>
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d015      	beq.n	8002e66 <UART_SetConfig+0x246>
 8002e3a:	dc1d      	bgt.n	8002e78 <UART_SetConfig+0x258>
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d002      	beq.n	8002e46 <UART_SetConfig+0x226>
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d005      	beq.n	8002e50 <UART_SetConfig+0x230>
 8002e44:	e018      	b.n	8002e78 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e46:	f7fe ff27 	bl	8001c98 <HAL_RCC_GetPCLK1Freq>
 8002e4a:	0003      	movs	r3, r0
 8002e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e4e:	e01c      	b.n	8002e8a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e50:	4b4b      	ldr	r3, [pc, #300]	; (8002f80 <UART_SetConfig+0x360>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2210      	movs	r2, #16
 8002e56:	4013      	ands	r3, r2
 8002e58:	d002      	beq.n	8002e60 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002e5a:	4b4b      	ldr	r3, [pc, #300]	; (8002f88 <UART_SetConfig+0x368>)
 8002e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002e5e:	e014      	b.n	8002e8a <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8002e60:	4b4a      	ldr	r3, [pc, #296]	; (8002f8c <UART_SetConfig+0x36c>)
 8002e62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e64:	e011      	b.n	8002e8a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e66:	f7fe fe67 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 8002e6a:	0003      	movs	r3, r0
 8002e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e6e:	e00c      	b.n	8002e8a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e70:	2380      	movs	r3, #128	; 0x80
 8002e72:	021b      	lsls	r3, r3, #8
 8002e74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e76:	e008      	b.n	8002e8a <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002e7c:	231a      	movs	r3, #26
 8002e7e:	2218      	movs	r2, #24
 8002e80:	189b      	adds	r3, r3, r2
 8002e82:	19db      	adds	r3, r3, r7
 8002e84:	2201      	movs	r2, #1
 8002e86:	701a      	strb	r2, [r3, #0]
        break;
 8002e88:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d100      	bne.n	8002e92 <UART_SetConfig+0x272>
 8002e90:	e132      	b.n	80030f8 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	0013      	movs	r3, r2
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	189b      	adds	r3, r3, r2
 8002e9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d305      	bcc.n	8002eae <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ea8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d906      	bls.n	8002ebc <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8002eae:	231a      	movs	r3, #26
 8002eb0:	2218      	movs	r2, #24
 8002eb2:	189b      	adds	r3, r3, r2
 8002eb4:	19db      	adds	r3, r3, r7
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	701a      	strb	r2, [r3, #0]
 8002eba:	e11d      	b.n	80030f8 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebe:	613b      	str	r3, [r7, #16]
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	6939      	ldr	r1, [r7, #16]
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	000b      	movs	r3, r1
 8002eca:	0e1b      	lsrs	r3, r3, #24
 8002ecc:	0010      	movs	r0, r2
 8002ece:	0205      	lsls	r5, r0, #8
 8002ed0:	431d      	orrs	r5, r3
 8002ed2:	000b      	movs	r3, r1
 8002ed4:	021c      	lsls	r4, r3, #8
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	085b      	lsrs	r3, r3, #1
 8002edc:	60bb      	str	r3, [r7, #8]
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	68b8      	ldr	r0, [r7, #8]
 8002ee4:	68f9      	ldr	r1, [r7, #12]
 8002ee6:	1900      	adds	r0, r0, r4
 8002ee8:	4169      	adcs	r1, r5
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	603b      	str	r3, [r7, #0]
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	607b      	str	r3, [r7, #4]
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f7fd f99c 	bl	8000234 <__aeabi_uldivmod>
 8002efc:	0002      	movs	r2, r0
 8002efe:	000b      	movs	r3, r1
 8002f00:	0013      	movs	r3, r2
 8002f02:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f06:	23c0      	movs	r3, #192	; 0xc0
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d309      	bcc.n	8002f22 <UART_SetConfig+0x302>
 8002f0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f10:	2380      	movs	r3, #128	; 0x80
 8002f12:	035b      	lsls	r3, r3, #13
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d204      	bcs.n	8002f22 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f1e:	60da      	str	r2, [r3, #12]
 8002f20:	e0ea      	b.n	80030f8 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8002f22:	231a      	movs	r3, #26
 8002f24:	2218      	movs	r2, #24
 8002f26:	189b      	adds	r3, r3, r2
 8002f28:	19db      	adds	r3, r3, r7
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	701a      	strb	r2, [r3, #0]
 8002f2e:	e0e3      	b.n	80030f8 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	69da      	ldr	r2, [r3, #28]
 8002f34:	2380      	movs	r3, #128	; 0x80
 8002f36:	021b      	lsls	r3, r3, #8
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d000      	beq.n	8002f3e <UART_SetConfig+0x31e>
 8002f3c:	e085      	b.n	800304a <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8002f3e:	231b      	movs	r3, #27
 8002f40:	2218      	movs	r2, #24
 8002f42:	189b      	adds	r3, r3, r2
 8002f44:	19db      	adds	r3, r3, r7
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d837      	bhi.n	8002fbc <UART_SetConfig+0x39c>
 8002f4c:	009a      	lsls	r2, r3, #2
 8002f4e:	4b10      	ldr	r3, [pc, #64]	; (8002f90 <UART_SetConfig+0x370>)
 8002f50:	18d3      	adds	r3, r2, r3
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f56:	f7fe fe9f 	bl	8001c98 <HAL_RCC_GetPCLK1Freq>
 8002f5a:	0003      	movs	r3, r0
 8002f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f5e:	e036      	b.n	8002fce <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f60:	f7fe feb0 	bl	8001cc4 <HAL_RCC_GetPCLK2Freq>
 8002f64:	0003      	movs	r3, r0
 8002f66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f68:	e031      	b.n	8002fce <UART_SetConfig+0x3ae>
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	efff69f3 	.word	0xefff69f3
 8002f70:	ffffcfff 	.word	0xffffcfff
 8002f74:	40004800 	.word	0x40004800
 8002f78:	fffff4ff 	.word	0xfffff4ff
 8002f7c:	40013800 	.word	0x40013800
 8002f80:	40021000 	.word	0x40021000
 8002f84:	40004400 	.word	0x40004400
 8002f88:	003d0900 	.word	0x003d0900
 8002f8c:	00f42400 	.word	0x00f42400
 8002f90:	08003f2c 	.word	0x08003f2c
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f94:	4b60      	ldr	r3, [pc, #384]	; (8003118 <UART_SetConfig+0x4f8>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2210      	movs	r2, #16
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	d002      	beq.n	8002fa4 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002f9e:	4b5f      	ldr	r3, [pc, #380]	; (800311c <UART_SetConfig+0x4fc>)
 8002fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002fa2:	e014      	b.n	8002fce <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8002fa4:	4b5e      	ldr	r3, [pc, #376]	; (8003120 <UART_SetConfig+0x500>)
 8002fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fa8:	e011      	b.n	8002fce <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002faa:	f7fe fdc5 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 8002fae:	0003      	movs	r3, r0
 8002fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fb2:	e00c      	b.n	8002fce <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fb4:	2380      	movs	r3, #128	; 0x80
 8002fb6:	021b      	lsls	r3, r3, #8
 8002fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fba:	e008      	b.n	8002fce <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002fc0:	231a      	movs	r3, #26
 8002fc2:	2218      	movs	r2, #24
 8002fc4:	189b      	adds	r3, r3, r2
 8002fc6:	19db      	adds	r3, r3, r7
 8002fc8:	2201      	movs	r2, #1
 8002fca:	701a      	strb	r2, [r3, #0]
        break;
 8002fcc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d100      	bne.n	8002fd6 <UART_SetConfig+0x3b6>
 8002fd4:	e090      	b.n	80030f8 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd8:	005a      	lsls	r2, r3, #1
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	085b      	lsrs	r3, r3, #1
 8002fe0:	18d2      	adds	r2, r2, r3
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	0019      	movs	r1, r3
 8002fe8:	0010      	movs	r0, r2
 8002fea:	f7fd f897 	bl	800011c <__udivsi3>
 8002fee:	0003      	movs	r3, r0
 8002ff0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff4:	2b0f      	cmp	r3, #15
 8002ff6:	d921      	bls.n	800303c <UART_SetConfig+0x41c>
 8002ff8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ffa:	2380      	movs	r3, #128	; 0x80
 8002ffc:	025b      	lsls	r3, r3, #9
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d21c      	bcs.n	800303c <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003004:	b29a      	uxth	r2, r3
 8003006:	200e      	movs	r0, #14
 8003008:	2418      	movs	r4, #24
 800300a:	1903      	adds	r3, r0, r4
 800300c:	19db      	adds	r3, r3, r7
 800300e:	210f      	movs	r1, #15
 8003010:	438a      	bics	r2, r1
 8003012:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003016:	085b      	lsrs	r3, r3, #1
 8003018:	b29b      	uxth	r3, r3
 800301a:	2207      	movs	r2, #7
 800301c:	4013      	ands	r3, r2
 800301e:	b299      	uxth	r1, r3
 8003020:	1903      	adds	r3, r0, r4
 8003022:	19db      	adds	r3, r3, r7
 8003024:	1902      	adds	r2, r0, r4
 8003026:	19d2      	adds	r2, r2, r7
 8003028:	8812      	ldrh	r2, [r2, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	1902      	adds	r2, r0, r4
 8003034:	19d2      	adds	r2, r2, r7
 8003036:	8812      	ldrh	r2, [r2, #0]
 8003038:	60da      	str	r2, [r3, #12]
 800303a:	e05d      	b.n	80030f8 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 800303c:	231a      	movs	r3, #26
 800303e:	2218      	movs	r2, #24
 8003040:	189b      	adds	r3, r3, r2
 8003042:	19db      	adds	r3, r3, r7
 8003044:	2201      	movs	r2, #1
 8003046:	701a      	strb	r2, [r3, #0]
 8003048:	e056      	b.n	80030f8 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800304a:	231b      	movs	r3, #27
 800304c:	2218      	movs	r2, #24
 800304e:	189b      	adds	r3, r3, r2
 8003050:	19db      	adds	r3, r3, r7
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b08      	cmp	r3, #8
 8003056:	d822      	bhi.n	800309e <UART_SetConfig+0x47e>
 8003058:	009a      	lsls	r2, r3, #2
 800305a:	4b32      	ldr	r3, [pc, #200]	; (8003124 <UART_SetConfig+0x504>)
 800305c:	18d3      	adds	r3, r2, r3
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003062:	f7fe fe19 	bl	8001c98 <HAL_RCC_GetPCLK1Freq>
 8003066:	0003      	movs	r3, r0
 8003068:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800306a:	e021      	b.n	80030b0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800306c:	f7fe fe2a 	bl	8001cc4 <HAL_RCC_GetPCLK2Freq>
 8003070:	0003      	movs	r3, r0
 8003072:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003074:	e01c      	b.n	80030b0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003076:	4b28      	ldr	r3, [pc, #160]	; (8003118 <UART_SetConfig+0x4f8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2210      	movs	r2, #16
 800307c:	4013      	ands	r3, r2
 800307e:	d002      	beq.n	8003086 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003080:	4b26      	ldr	r3, [pc, #152]	; (800311c <UART_SetConfig+0x4fc>)
 8003082:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003084:	e014      	b.n	80030b0 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8003086:	4b26      	ldr	r3, [pc, #152]	; (8003120 <UART_SetConfig+0x500>)
 8003088:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800308a:	e011      	b.n	80030b0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800308c:	f7fe fd54 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 8003090:	0003      	movs	r3, r0
 8003092:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003094:	e00c      	b.n	80030b0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003096:	2380      	movs	r3, #128	; 0x80
 8003098:	021b      	lsls	r3, r3, #8
 800309a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800309c:	e008      	b.n	80030b0 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 800309e:	2300      	movs	r3, #0
 80030a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80030a2:	231a      	movs	r3, #26
 80030a4:	2218      	movs	r2, #24
 80030a6:	189b      	adds	r3, r3, r2
 80030a8:	19db      	adds	r3, r3, r7
 80030aa:	2201      	movs	r2, #1
 80030ac:	701a      	strb	r2, [r3, #0]
        break;
 80030ae:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80030b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d020      	beq.n	80030f8 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	085a      	lsrs	r2, r3, #1
 80030bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030be:	18d2      	adds	r2, r2, r3
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	0019      	movs	r1, r3
 80030c6:	0010      	movs	r0, r2
 80030c8:	f7fd f828 	bl	800011c <__udivsi3>
 80030cc:	0003      	movs	r3, r0
 80030ce:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d2:	2b0f      	cmp	r3, #15
 80030d4:	d90a      	bls.n	80030ec <UART_SetConfig+0x4cc>
 80030d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	025b      	lsls	r3, r3, #9
 80030dc:	429a      	cmp	r2, r3
 80030de:	d205      	bcs.n	80030ec <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	60da      	str	r2, [r3, #12]
 80030ea:	e005      	b.n	80030f8 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80030ec:	231a      	movs	r3, #26
 80030ee:	2218      	movs	r2, #24
 80030f0:	189b      	adds	r3, r3, r2
 80030f2:	19db      	adds	r3, r3, r7
 80030f4:	2201      	movs	r2, #1
 80030f6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	2200      	movs	r2, #0
 80030fc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	2200      	movs	r2, #0
 8003102:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003104:	231a      	movs	r3, #26
 8003106:	2218      	movs	r2, #24
 8003108:	189b      	adds	r3, r3, r2
 800310a:	19db      	adds	r3, r3, r7
 800310c:	781b      	ldrb	r3, [r3, #0]
}
 800310e:	0018      	movs	r0, r3
 8003110:	46bd      	mov	sp, r7
 8003112:	b00e      	add	sp, #56	; 0x38
 8003114:	bdb0      	pop	{r4, r5, r7, pc}
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	40021000 	.word	0x40021000
 800311c:	003d0900 	.word	0x003d0900
 8003120:	00f42400 	.word	0x00f42400
 8003124:	08003f50 	.word	0x08003f50

08003128 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	2201      	movs	r2, #1
 8003136:	4013      	ands	r3, r2
 8003138:	d00b      	beq.n	8003152 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	4a4a      	ldr	r2, [pc, #296]	; (800326c <UART_AdvFeatureConfig+0x144>)
 8003142:	4013      	ands	r3, r2
 8003144:	0019      	movs	r1, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	2202      	movs	r2, #2
 8003158:	4013      	ands	r3, r2
 800315a:	d00b      	beq.n	8003174 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	4a43      	ldr	r2, [pc, #268]	; (8003270 <UART_AdvFeatureConfig+0x148>)
 8003164:	4013      	ands	r3, r2
 8003166:	0019      	movs	r1, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	2204      	movs	r2, #4
 800317a:	4013      	ands	r3, r2
 800317c:	d00b      	beq.n	8003196 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	4a3b      	ldr	r2, [pc, #236]	; (8003274 <UART_AdvFeatureConfig+0x14c>)
 8003186:	4013      	ands	r3, r2
 8003188:	0019      	movs	r1, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	2208      	movs	r2, #8
 800319c:	4013      	ands	r3, r2
 800319e:	d00b      	beq.n	80031b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	4a34      	ldr	r2, [pc, #208]	; (8003278 <UART_AdvFeatureConfig+0x150>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	0019      	movs	r1, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	2210      	movs	r2, #16
 80031be:	4013      	ands	r3, r2
 80031c0:	d00b      	beq.n	80031da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	4a2c      	ldr	r2, [pc, #176]	; (800327c <UART_AdvFeatureConfig+0x154>)
 80031ca:	4013      	ands	r3, r2
 80031cc:	0019      	movs	r1, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	2220      	movs	r2, #32
 80031e0:	4013      	ands	r3, r2
 80031e2:	d00b      	beq.n	80031fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	4a25      	ldr	r2, [pc, #148]	; (8003280 <UART_AdvFeatureConfig+0x158>)
 80031ec:	4013      	ands	r3, r2
 80031ee:	0019      	movs	r1, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	2240      	movs	r2, #64	; 0x40
 8003202:	4013      	ands	r3, r2
 8003204:	d01d      	beq.n	8003242 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	4a1d      	ldr	r2, [pc, #116]	; (8003284 <UART_AdvFeatureConfig+0x15c>)
 800320e:	4013      	ands	r3, r2
 8003210:	0019      	movs	r1, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003222:	2380      	movs	r3, #128	; 0x80
 8003224:	035b      	lsls	r3, r3, #13
 8003226:	429a      	cmp	r2, r3
 8003228:	d10b      	bne.n	8003242 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	4a15      	ldr	r2, [pc, #84]	; (8003288 <UART_AdvFeatureConfig+0x160>)
 8003232:	4013      	ands	r3, r2
 8003234:	0019      	movs	r1, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	2280      	movs	r2, #128	; 0x80
 8003248:	4013      	ands	r3, r2
 800324a:	d00b      	beq.n	8003264 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	4a0e      	ldr	r2, [pc, #56]	; (800328c <UART_AdvFeatureConfig+0x164>)
 8003254:	4013      	ands	r3, r2
 8003256:	0019      	movs	r1, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	605a      	str	r2, [r3, #4]
  }
}
 8003264:	46c0      	nop			; (mov r8, r8)
 8003266:	46bd      	mov	sp, r7
 8003268:	b002      	add	sp, #8
 800326a:	bd80      	pop	{r7, pc}
 800326c:	fffdffff 	.word	0xfffdffff
 8003270:	fffeffff 	.word	0xfffeffff
 8003274:	fffbffff 	.word	0xfffbffff
 8003278:	ffff7fff 	.word	0xffff7fff
 800327c:	ffffefff 	.word	0xffffefff
 8003280:	ffffdfff 	.word	0xffffdfff
 8003284:	ffefffff 	.word	0xffefffff
 8003288:	ff9fffff 	.word	0xff9fffff
 800328c:	fff7ffff 	.word	0xfff7ffff

08003290 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b092      	sub	sp, #72	; 0x48
 8003294:	af02      	add	r7, sp, #8
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2284      	movs	r2, #132	; 0x84
 800329c:	2100      	movs	r1, #0
 800329e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032a0:	f7fd fc9e 	bl	8000be0 <HAL_GetTick>
 80032a4:	0003      	movs	r3, r0
 80032a6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2208      	movs	r2, #8
 80032b0:	4013      	ands	r3, r2
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d12c      	bne.n	8003310 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032b8:	2280      	movs	r2, #128	; 0x80
 80032ba:	0391      	lsls	r1, r2, #14
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	4a46      	ldr	r2, [pc, #280]	; (80033d8 <UART_CheckIdleState+0x148>)
 80032c0:	9200      	str	r2, [sp, #0]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f000 f88c 	bl	80033e0 <UART_WaitOnFlagUntilTimeout>
 80032c8:	1e03      	subs	r3, r0, #0
 80032ca:	d021      	beq.n	8003310 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032cc:	f3ef 8310 	mrs	r3, PRIMASK
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80032d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80032d6:	2301      	movs	r3, #1
 80032d8:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032dc:	f383 8810 	msr	PRIMASK, r3
}
 80032e0:	46c0      	nop			; (mov r8, r8)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2180      	movs	r1, #128	; 0x80
 80032ee:	438a      	bics	r2, r1
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f8:	f383 8810 	msr	PRIMASK, r3
}
 80032fc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2220      	movs	r2, #32
 8003302:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2278      	movs	r2, #120	; 0x78
 8003308:	2100      	movs	r1, #0
 800330a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e05f      	b.n	80033d0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2204      	movs	r2, #4
 8003318:	4013      	ands	r3, r2
 800331a:	2b04      	cmp	r3, #4
 800331c:	d146      	bne.n	80033ac <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800331e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003320:	2280      	movs	r2, #128	; 0x80
 8003322:	03d1      	lsls	r1, r2, #15
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	4a2c      	ldr	r2, [pc, #176]	; (80033d8 <UART_CheckIdleState+0x148>)
 8003328:	9200      	str	r2, [sp, #0]
 800332a:	2200      	movs	r2, #0
 800332c:	f000 f858 	bl	80033e0 <UART_WaitOnFlagUntilTimeout>
 8003330:	1e03      	subs	r3, r0, #0
 8003332:	d03b      	beq.n	80033ac <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003334:	f3ef 8310 	mrs	r3, PRIMASK
 8003338:	60fb      	str	r3, [r7, #12]
  return(result);
 800333a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800333c:	637b      	str	r3, [r7, #52]	; 0x34
 800333e:	2301      	movs	r3, #1
 8003340:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f383 8810 	msr	PRIMASK, r3
}
 8003348:	46c0      	nop			; (mov r8, r8)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4921      	ldr	r1, [pc, #132]	; (80033dc <UART_CheckIdleState+0x14c>)
 8003356:	400a      	ands	r2, r1
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800335c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f383 8810 	msr	PRIMASK, r3
}
 8003364:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003366:	f3ef 8310 	mrs	r3, PRIMASK
 800336a:	61bb      	str	r3, [r7, #24]
  return(result);
 800336c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800336e:	633b      	str	r3, [r7, #48]	; 0x30
 8003370:	2301      	movs	r3, #1
 8003372:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	f383 8810 	msr	PRIMASK, r3
}
 800337a:	46c0      	nop			; (mov r8, r8)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2101      	movs	r1, #1
 8003388:	438a      	bics	r2, r1
 800338a:	609a      	str	r2, [r3, #8]
 800338c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	f383 8810 	msr	PRIMASK, r3
}
 8003396:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2280      	movs	r2, #128	; 0x80
 800339c:	2120      	movs	r1, #32
 800339e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2278      	movs	r2, #120	; 0x78
 80033a4:	2100      	movs	r1, #0
 80033a6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e011      	b.n	80033d0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2220      	movs	r2, #32
 80033b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2280      	movs	r2, #128	; 0x80
 80033b6:	2120      	movs	r1, #32
 80033b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2278      	movs	r2, #120	; 0x78
 80033ca:	2100      	movs	r1, #0
 80033cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	0018      	movs	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	b010      	add	sp, #64	; 0x40
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	01ffffff 	.word	0x01ffffff
 80033dc:	fffffedf 	.word	0xfffffedf

080033e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	603b      	str	r3, [r7, #0]
 80033ec:	1dfb      	adds	r3, r7, #7
 80033ee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033f0:	e04b      	b.n	800348a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	3301      	adds	r3, #1
 80033f6:	d048      	beq.n	800348a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f8:	f7fd fbf2 	bl	8000be0 <HAL_GetTick>
 80033fc:	0002      	movs	r2, r0
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	429a      	cmp	r2, r3
 8003406:	d302      	bcc.n	800340e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e04b      	b.n	80034aa <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2204      	movs	r2, #4
 800341a:	4013      	ands	r3, r2
 800341c:	d035      	beq.n	800348a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	2208      	movs	r2, #8
 8003426:	4013      	ands	r3, r2
 8003428:	2b08      	cmp	r3, #8
 800342a:	d111      	bne.n	8003450 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2208      	movs	r2, #8
 8003432:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	0018      	movs	r0, r3
 8003438:	f000 f83c 	bl	80034b4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2284      	movs	r2, #132	; 0x84
 8003440:	2108      	movs	r1, #8
 8003442:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2278      	movs	r2, #120	; 0x78
 8003448:	2100      	movs	r1, #0
 800344a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e02c      	b.n	80034aa <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	69da      	ldr	r2, [r3, #28]
 8003456:	2380      	movs	r3, #128	; 0x80
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	401a      	ands	r2, r3
 800345c:	2380      	movs	r3, #128	; 0x80
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	429a      	cmp	r2, r3
 8003462:	d112      	bne.n	800348a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2280      	movs	r2, #128	; 0x80
 800346a:	0112      	lsls	r2, r2, #4
 800346c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	0018      	movs	r0, r3
 8003472:	f000 f81f 	bl	80034b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2284      	movs	r2, #132	; 0x84
 800347a:	2120      	movs	r1, #32
 800347c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2278      	movs	r2, #120	; 0x78
 8003482:	2100      	movs	r1, #0
 8003484:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e00f      	b.n	80034aa <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	4013      	ands	r3, r2
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	425a      	negs	r2, r3
 800349a:	4153      	adcs	r3, r2
 800349c:	b2db      	uxtb	r3, r3
 800349e:	001a      	movs	r2, r3
 80034a0:	1dfb      	adds	r3, r7, #7
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d0a4      	beq.n	80033f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	0018      	movs	r0, r3
 80034ac:	46bd      	mov	sp, r7
 80034ae:	b004      	add	sp, #16
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08e      	sub	sp, #56	; 0x38
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034bc:	f3ef 8310 	mrs	r3, PRIMASK
 80034c0:	617b      	str	r3, [r7, #20]
  return(result);
 80034c2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034c4:	637b      	str	r3, [r7, #52]	; 0x34
 80034c6:	2301      	movs	r3, #1
 80034c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	f383 8810 	msr	PRIMASK, r3
}
 80034d0:	46c0      	nop			; (mov r8, r8)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4926      	ldr	r1, [pc, #152]	; (8003578 <UART_EndRxTransfer+0xc4>)
 80034de:	400a      	ands	r2, r1
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	f383 8810 	msr	PRIMASK, r3
}
 80034ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034ee:	f3ef 8310 	mrs	r3, PRIMASK
 80034f2:	623b      	str	r3, [r7, #32]
  return(result);
 80034f4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034f6:	633b      	str	r3, [r7, #48]	; 0x30
 80034f8:	2301      	movs	r3, #1
 80034fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	f383 8810 	msr	PRIMASK, r3
}
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2101      	movs	r1, #1
 8003510:	438a      	bics	r2, r1
 8003512:	609a      	str	r2, [r3, #8]
 8003514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003516:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351a:	f383 8810 	msr	PRIMASK, r3
}
 800351e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003524:	2b01      	cmp	r3, #1
 8003526:	d118      	bne.n	800355a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003528:	f3ef 8310 	mrs	r3, PRIMASK
 800352c:	60bb      	str	r3, [r7, #8]
  return(result);
 800352e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003530:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003532:	2301      	movs	r3, #1
 8003534:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f383 8810 	msr	PRIMASK, r3
}
 800353c:	46c0      	nop			; (mov r8, r8)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2110      	movs	r1, #16
 800354a:	438a      	bics	r2, r1
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003550:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	f383 8810 	msr	PRIMASK, r3
}
 8003558:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2280      	movs	r2, #128	; 0x80
 800355e:	2120      	movs	r1, #32
 8003560:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800356e:	46c0      	nop			; (mov r8, r8)
 8003570:	46bd      	mov	sp, r7
 8003572:	b00e      	add	sp, #56	; 0x38
 8003574:	bd80      	pop	{r7, pc}
 8003576:	46c0      	nop			; (mov r8, r8)
 8003578:	fffffedf 	.word	0xfffffedf

0800357c <__errno>:
 800357c:	4b01      	ldr	r3, [pc, #4]	; (8003584 <__errno+0x8>)
 800357e:	6818      	ldr	r0, [r3, #0]
 8003580:	4770      	bx	lr
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	2000000c 	.word	0x2000000c

08003588 <__libc_init_array>:
 8003588:	b570      	push	{r4, r5, r6, lr}
 800358a:	2600      	movs	r6, #0
 800358c:	4d0c      	ldr	r5, [pc, #48]	; (80035c0 <__libc_init_array+0x38>)
 800358e:	4c0d      	ldr	r4, [pc, #52]	; (80035c4 <__libc_init_array+0x3c>)
 8003590:	1b64      	subs	r4, r4, r5
 8003592:	10a4      	asrs	r4, r4, #2
 8003594:	42a6      	cmp	r6, r4
 8003596:	d109      	bne.n	80035ac <__libc_init_array+0x24>
 8003598:	2600      	movs	r6, #0
 800359a:	f000 fc8b 	bl	8003eb4 <_init>
 800359e:	4d0a      	ldr	r5, [pc, #40]	; (80035c8 <__libc_init_array+0x40>)
 80035a0:	4c0a      	ldr	r4, [pc, #40]	; (80035cc <__libc_init_array+0x44>)
 80035a2:	1b64      	subs	r4, r4, r5
 80035a4:	10a4      	asrs	r4, r4, #2
 80035a6:	42a6      	cmp	r6, r4
 80035a8:	d105      	bne.n	80035b6 <__libc_init_array+0x2e>
 80035aa:	bd70      	pop	{r4, r5, r6, pc}
 80035ac:	00b3      	lsls	r3, r6, #2
 80035ae:	58eb      	ldr	r3, [r5, r3]
 80035b0:	4798      	blx	r3
 80035b2:	3601      	adds	r6, #1
 80035b4:	e7ee      	b.n	8003594 <__libc_init_array+0xc>
 80035b6:	00b3      	lsls	r3, r6, #2
 80035b8:	58eb      	ldr	r3, [r5, r3]
 80035ba:	4798      	blx	r3
 80035bc:	3601      	adds	r6, #1
 80035be:	e7f2      	b.n	80035a6 <__libc_init_array+0x1e>
 80035c0:	08003fb0 	.word	0x08003fb0
 80035c4:	08003fb0 	.word	0x08003fb0
 80035c8:	08003fb0 	.word	0x08003fb0
 80035cc:	08003fb4 	.word	0x08003fb4

080035d0 <memset>:
 80035d0:	0003      	movs	r3, r0
 80035d2:	1882      	adds	r2, r0, r2
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d100      	bne.n	80035da <memset+0xa>
 80035d8:	4770      	bx	lr
 80035da:	7019      	strb	r1, [r3, #0]
 80035dc:	3301      	adds	r3, #1
 80035de:	e7f9      	b.n	80035d4 <memset+0x4>

080035e0 <siprintf>:
 80035e0:	b40e      	push	{r1, r2, r3}
 80035e2:	b500      	push	{lr}
 80035e4:	490b      	ldr	r1, [pc, #44]	; (8003614 <siprintf+0x34>)
 80035e6:	b09c      	sub	sp, #112	; 0x70
 80035e8:	ab1d      	add	r3, sp, #116	; 0x74
 80035ea:	9002      	str	r0, [sp, #8]
 80035ec:	9006      	str	r0, [sp, #24]
 80035ee:	9107      	str	r1, [sp, #28]
 80035f0:	9104      	str	r1, [sp, #16]
 80035f2:	4809      	ldr	r0, [pc, #36]	; (8003618 <siprintf+0x38>)
 80035f4:	4909      	ldr	r1, [pc, #36]	; (800361c <siprintf+0x3c>)
 80035f6:	cb04      	ldmia	r3!, {r2}
 80035f8:	9105      	str	r1, [sp, #20]
 80035fa:	6800      	ldr	r0, [r0, #0]
 80035fc:	a902      	add	r1, sp, #8
 80035fe:	9301      	str	r3, [sp, #4]
 8003600:	f000 f870 	bl	80036e4 <_svfiprintf_r>
 8003604:	2300      	movs	r3, #0
 8003606:	9a02      	ldr	r2, [sp, #8]
 8003608:	7013      	strb	r3, [r2, #0]
 800360a:	b01c      	add	sp, #112	; 0x70
 800360c:	bc08      	pop	{r3}
 800360e:	b003      	add	sp, #12
 8003610:	4718      	bx	r3
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	7fffffff 	.word	0x7fffffff
 8003618:	2000000c 	.word	0x2000000c
 800361c:	ffff0208 	.word	0xffff0208

08003620 <__ssputs_r>:
 8003620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003622:	688e      	ldr	r6, [r1, #8]
 8003624:	b085      	sub	sp, #20
 8003626:	0007      	movs	r7, r0
 8003628:	000c      	movs	r4, r1
 800362a:	9203      	str	r2, [sp, #12]
 800362c:	9301      	str	r3, [sp, #4]
 800362e:	429e      	cmp	r6, r3
 8003630:	d83c      	bhi.n	80036ac <__ssputs_r+0x8c>
 8003632:	2390      	movs	r3, #144	; 0x90
 8003634:	898a      	ldrh	r2, [r1, #12]
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	421a      	tst	r2, r3
 800363a:	d034      	beq.n	80036a6 <__ssputs_r+0x86>
 800363c:	6909      	ldr	r1, [r1, #16]
 800363e:	6823      	ldr	r3, [r4, #0]
 8003640:	6960      	ldr	r0, [r4, #20]
 8003642:	1a5b      	subs	r3, r3, r1
 8003644:	9302      	str	r3, [sp, #8]
 8003646:	2303      	movs	r3, #3
 8003648:	4343      	muls	r3, r0
 800364a:	0fdd      	lsrs	r5, r3, #31
 800364c:	18ed      	adds	r5, r5, r3
 800364e:	9b01      	ldr	r3, [sp, #4]
 8003650:	9802      	ldr	r0, [sp, #8]
 8003652:	3301      	adds	r3, #1
 8003654:	181b      	adds	r3, r3, r0
 8003656:	106d      	asrs	r5, r5, #1
 8003658:	42ab      	cmp	r3, r5
 800365a:	d900      	bls.n	800365e <__ssputs_r+0x3e>
 800365c:	001d      	movs	r5, r3
 800365e:	0553      	lsls	r3, r2, #21
 8003660:	d532      	bpl.n	80036c8 <__ssputs_r+0xa8>
 8003662:	0029      	movs	r1, r5
 8003664:	0038      	movs	r0, r7
 8003666:	f000 fb53 	bl	8003d10 <_malloc_r>
 800366a:	1e06      	subs	r6, r0, #0
 800366c:	d109      	bne.n	8003682 <__ssputs_r+0x62>
 800366e:	230c      	movs	r3, #12
 8003670:	603b      	str	r3, [r7, #0]
 8003672:	2340      	movs	r3, #64	; 0x40
 8003674:	2001      	movs	r0, #1
 8003676:	89a2      	ldrh	r2, [r4, #12]
 8003678:	4240      	negs	r0, r0
 800367a:	4313      	orrs	r3, r2
 800367c:	81a3      	strh	r3, [r4, #12]
 800367e:	b005      	add	sp, #20
 8003680:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003682:	9a02      	ldr	r2, [sp, #8]
 8003684:	6921      	ldr	r1, [r4, #16]
 8003686:	f000 faba 	bl	8003bfe <memcpy>
 800368a:	89a3      	ldrh	r3, [r4, #12]
 800368c:	4a14      	ldr	r2, [pc, #80]	; (80036e0 <__ssputs_r+0xc0>)
 800368e:	401a      	ands	r2, r3
 8003690:	2380      	movs	r3, #128	; 0x80
 8003692:	4313      	orrs	r3, r2
 8003694:	81a3      	strh	r3, [r4, #12]
 8003696:	9b02      	ldr	r3, [sp, #8]
 8003698:	6126      	str	r6, [r4, #16]
 800369a:	18f6      	adds	r6, r6, r3
 800369c:	6026      	str	r6, [r4, #0]
 800369e:	6165      	str	r5, [r4, #20]
 80036a0:	9e01      	ldr	r6, [sp, #4]
 80036a2:	1aed      	subs	r5, r5, r3
 80036a4:	60a5      	str	r5, [r4, #8]
 80036a6:	9b01      	ldr	r3, [sp, #4]
 80036a8:	429e      	cmp	r6, r3
 80036aa:	d900      	bls.n	80036ae <__ssputs_r+0x8e>
 80036ac:	9e01      	ldr	r6, [sp, #4]
 80036ae:	0032      	movs	r2, r6
 80036b0:	9903      	ldr	r1, [sp, #12]
 80036b2:	6820      	ldr	r0, [r4, #0]
 80036b4:	f000 faac 	bl	8003c10 <memmove>
 80036b8:	68a3      	ldr	r3, [r4, #8]
 80036ba:	2000      	movs	r0, #0
 80036bc:	1b9b      	subs	r3, r3, r6
 80036be:	60a3      	str	r3, [r4, #8]
 80036c0:	6823      	ldr	r3, [r4, #0]
 80036c2:	199e      	adds	r6, r3, r6
 80036c4:	6026      	str	r6, [r4, #0]
 80036c6:	e7da      	b.n	800367e <__ssputs_r+0x5e>
 80036c8:	002a      	movs	r2, r5
 80036ca:	0038      	movs	r0, r7
 80036cc:	f000 fb96 	bl	8003dfc <_realloc_r>
 80036d0:	1e06      	subs	r6, r0, #0
 80036d2:	d1e0      	bne.n	8003696 <__ssputs_r+0x76>
 80036d4:	0038      	movs	r0, r7
 80036d6:	6921      	ldr	r1, [r4, #16]
 80036d8:	f000 faae 	bl	8003c38 <_free_r>
 80036dc:	e7c7      	b.n	800366e <__ssputs_r+0x4e>
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	fffffb7f 	.word	0xfffffb7f

080036e4 <_svfiprintf_r>:
 80036e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036e6:	b0a1      	sub	sp, #132	; 0x84
 80036e8:	9003      	str	r0, [sp, #12]
 80036ea:	001d      	movs	r5, r3
 80036ec:	898b      	ldrh	r3, [r1, #12]
 80036ee:	000f      	movs	r7, r1
 80036f0:	0016      	movs	r6, r2
 80036f2:	061b      	lsls	r3, r3, #24
 80036f4:	d511      	bpl.n	800371a <_svfiprintf_r+0x36>
 80036f6:	690b      	ldr	r3, [r1, #16]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10e      	bne.n	800371a <_svfiprintf_r+0x36>
 80036fc:	2140      	movs	r1, #64	; 0x40
 80036fe:	f000 fb07 	bl	8003d10 <_malloc_r>
 8003702:	6038      	str	r0, [r7, #0]
 8003704:	6138      	str	r0, [r7, #16]
 8003706:	2800      	cmp	r0, #0
 8003708:	d105      	bne.n	8003716 <_svfiprintf_r+0x32>
 800370a:	230c      	movs	r3, #12
 800370c:	9a03      	ldr	r2, [sp, #12]
 800370e:	3801      	subs	r0, #1
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	b021      	add	sp, #132	; 0x84
 8003714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003716:	2340      	movs	r3, #64	; 0x40
 8003718:	617b      	str	r3, [r7, #20]
 800371a:	2300      	movs	r3, #0
 800371c:	ac08      	add	r4, sp, #32
 800371e:	6163      	str	r3, [r4, #20]
 8003720:	3320      	adds	r3, #32
 8003722:	7663      	strb	r3, [r4, #25]
 8003724:	3310      	adds	r3, #16
 8003726:	76a3      	strb	r3, [r4, #26]
 8003728:	9507      	str	r5, [sp, #28]
 800372a:	0035      	movs	r5, r6
 800372c:	782b      	ldrb	r3, [r5, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <_svfiprintf_r+0x52>
 8003732:	2b25      	cmp	r3, #37	; 0x25
 8003734:	d147      	bne.n	80037c6 <_svfiprintf_r+0xe2>
 8003736:	1bab      	subs	r3, r5, r6
 8003738:	9305      	str	r3, [sp, #20]
 800373a:	42b5      	cmp	r5, r6
 800373c:	d00c      	beq.n	8003758 <_svfiprintf_r+0x74>
 800373e:	0032      	movs	r2, r6
 8003740:	0039      	movs	r1, r7
 8003742:	9803      	ldr	r0, [sp, #12]
 8003744:	f7ff ff6c 	bl	8003620 <__ssputs_r>
 8003748:	1c43      	adds	r3, r0, #1
 800374a:	d100      	bne.n	800374e <_svfiprintf_r+0x6a>
 800374c:	e0ae      	b.n	80038ac <_svfiprintf_r+0x1c8>
 800374e:	6962      	ldr	r2, [r4, #20]
 8003750:	9b05      	ldr	r3, [sp, #20]
 8003752:	4694      	mov	ip, r2
 8003754:	4463      	add	r3, ip
 8003756:	6163      	str	r3, [r4, #20]
 8003758:	782b      	ldrb	r3, [r5, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d100      	bne.n	8003760 <_svfiprintf_r+0x7c>
 800375e:	e0a5      	b.n	80038ac <_svfiprintf_r+0x1c8>
 8003760:	2201      	movs	r2, #1
 8003762:	2300      	movs	r3, #0
 8003764:	4252      	negs	r2, r2
 8003766:	6062      	str	r2, [r4, #4]
 8003768:	a904      	add	r1, sp, #16
 800376a:	3254      	adds	r2, #84	; 0x54
 800376c:	1852      	adds	r2, r2, r1
 800376e:	1c6e      	adds	r6, r5, #1
 8003770:	6023      	str	r3, [r4, #0]
 8003772:	60e3      	str	r3, [r4, #12]
 8003774:	60a3      	str	r3, [r4, #8]
 8003776:	7013      	strb	r3, [r2, #0]
 8003778:	65a3      	str	r3, [r4, #88]	; 0x58
 800377a:	2205      	movs	r2, #5
 800377c:	7831      	ldrb	r1, [r6, #0]
 800377e:	4854      	ldr	r0, [pc, #336]	; (80038d0 <_svfiprintf_r+0x1ec>)
 8003780:	f000 fa32 	bl	8003be8 <memchr>
 8003784:	1c75      	adds	r5, r6, #1
 8003786:	2800      	cmp	r0, #0
 8003788:	d11f      	bne.n	80037ca <_svfiprintf_r+0xe6>
 800378a:	6822      	ldr	r2, [r4, #0]
 800378c:	06d3      	lsls	r3, r2, #27
 800378e:	d504      	bpl.n	800379a <_svfiprintf_r+0xb6>
 8003790:	2353      	movs	r3, #83	; 0x53
 8003792:	a904      	add	r1, sp, #16
 8003794:	185b      	adds	r3, r3, r1
 8003796:	2120      	movs	r1, #32
 8003798:	7019      	strb	r1, [r3, #0]
 800379a:	0713      	lsls	r3, r2, #28
 800379c:	d504      	bpl.n	80037a8 <_svfiprintf_r+0xc4>
 800379e:	2353      	movs	r3, #83	; 0x53
 80037a0:	a904      	add	r1, sp, #16
 80037a2:	185b      	adds	r3, r3, r1
 80037a4:	212b      	movs	r1, #43	; 0x2b
 80037a6:	7019      	strb	r1, [r3, #0]
 80037a8:	7833      	ldrb	r3, [r6, #0]
 80037aa:	2b2a      	cmp	r3, #42	; 0x2a
 80037ac:	d016      	beq.n	80037dc <_svfiprintf_r+0xf8>
 80037ae:	0035      	movs	r5, r6
 80037b0:	2100      	movs	r1, #0
 80037b2:	200a      	movs	r0, #10
 80037b4:	68e3      	ldr	r3, [r4, #12]
 80037b6:	782a      	ldrb	r2, [r5, #0]
 80037b8:	1c6e      	adds	r6, r5, #1
 80037ba:	3a30      	subs	r2, #48	; 0x30
 80037bc:	2a09      	cmp	r2, #9
 80037be:	d94e      	bls.n	800385e <_svfiprintf_r+0x17a>
 80037c0:	2900      	cmp	r1, #0
 80037c2:	d111      	bne.n	80037e8 <_svfiprintf_r+0x104>
 80037c4:	e017      	b.n	80037f6 <_svfiprintf_r+0x112>
 80037c6:	3501      	adds	r5, #1
 80037c8:	e7b0      	b.n	800372c <_svfiprintf_r+0x48>
 80037ca:	4b41      	ldr	r3, [pc, #260]	; (80038d0 <_svfiprintf_r+0x1ec>)
 80037cc:	6822      	ldr	r2, [r4, #0]
 80037ce:	1ac0      	subs	r0, r0, r3
 80037d0:	2301      	movs	r3, #1
 80037d2:	4083      	lsls	r3, r0
 80037d4:	4313      	orrs	r3, r2
 80037d6:	002e      	movs	r6, r5
 80037d8:	6023      	str	r3, [r4, #0]
 80037da:	e7ce      	b.n	800377a <_svfiprintf_r+0x96>
 80037dc:	9b07      	ldr	r3, [sp, #28]
 80037de:	1d19      	adds	r1, r3, #4
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	9107      	str	r1, [sp, #28]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	db01      	blt.n	80037ec <_svfiprintf_r+0x108>
 80037e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80037ea:	e004      	b.n	80037f6 <_svfiprintf_r+0x112>
 80037ec:	425b      	negs	r3, r3
 80037ee:	60e3      	str	r3, [r4, #12]
 80037f0:	2302      	movs	r3, #2
 80037f2:	4313      	orrs	r3, r2
 80037f4:	6023      	str	r3, [r4, #0]
 80037f6:	782b      	ldrb	r3, [r5, #0]
 80037f8:	2b2e      	cmp	r3, #46	; 0x2e
 80037fa:	d10a      	bne.n	8003812 <_svfiprintf_r+0x12e>
 80037fc:	786b      	ldrb	r3, [r5, #1]
 80037fe:	2b2a      	cmp	r3, #42	; 0x2a
 8003800:	d135      	bne.n	800386e <_svfiprintf_r+0x18a>
 8003802:	9b07      	ldr	r3, [sp, #28]
 8003804:	3502      	adds	r5, #2
 8003806:	1d1a      	adds	r2, r3, #4
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	9207      	str	r2, [sp, #28]
 800380c:	2b00      	cmp	r3, #0
 800380e:	db2b      	blt.n	8003868 <_svfiprintf_r+0x184>
 8003810:	9309      	str	r3, [sp, #36]	; 0x24
 8003812:	4e30      	ldr	r6, [pc, #192]	; (80038d4 <_svfiprintf_r+0x1f0>)
 8003814:	2203      	movs	r2, #3
 8003816:	0030      	movs	r0, r6
 8003818:	7829      	ldrb	r1, [r5, #0]
 800381a:	f000 f9e5 	bl	8003be8 <memchr>
 800381e:	2800      	cmp	r0, #0
 8003820:	d006      	beq.n	8003830 <_svfiprintf_r+0x14c>
 8003822:	2340      	movs	r3, #64	; 0x40
 8003824:	1b80      	subs	r0, r0, r6
 8003826:	4083      	lsls	r3, r0
 8003828:	6822      	ldr	r2, [r4, #0]
 800382a:	3501      	adds	r5, #1
 800382c:	4313      	orrs	r3, r2
 800382e:	6023      	str	r3, [r4, #0]
 8003830:	7829      	ldrb	r1, [r5, #0]
 8003832:	2206      	movs	r2, #6
 8003834:	4828      	ldr	r0, [pc, #160]	; (80038d8 <_svfiprintf_r+0x1f4>)
 8003836:	1c6e      	adds	r6, r5, #1
 8003838:	7621      	strb	r1, [r4, #24]
 800383a:	f000 f9d5 	bl	8003be8 <memchr>
 800383e:	2800      	cmp	r0, #0
 8003840:	d03c      	beq.n	80038bc <_svfiprintf_r+0x1d8>
 8003842:	4b26      	ldr	r3, [pc, #152]	; (80038dc <_svfiprintf_r+0x1f8>)
 8003844:	2b00      	cmp	r3, #0
 8003846:	d125      	bne.n	8003894 <_svfiprintf_r+0x1b0>
 8003848:	2207      	movs	r2, #7
 800384a:	9b07      	ldr	r3, [sp, #28]
 800384c:	3307      	adds	r3, #7
 800384e:	4393      	bics	r3, r2
 8003850:	3308      	adds	r3, #8
 8003852:	9307      	str	r3, [sp, #28]
 8003854:	6963      	ldr	r3, [r4, #20]
 8003856:	9a04      	ldr	r2, [sp, #16]
 8003858:	189b      	adds	r3, r3, r2
 800385a:	6163      	str	r3, [r4, #20]
 800385c:	e765      	b.n	800372a <_svfiprintf_r+0x46>
 800385e:	4343      	muls	r3, r0
 8003860:	0035      	movs	r5, r6
 8003862:	2101      	movs	r1, #1
 8003864:	189b      	adds	r3, r3, r2
 8003866:	e7a6      	b.n	80037b6 <_svfiprintf_r+0xd2>
 8003868:	2301      	movs	r3, #1
 800386a:	425b      	negs	r3, r3
 800386c:	e7d0      	b.n	8003810 <_svfiprintf_r+0x12c>
 800386e:	2300      	movs	r3, #0
 8003870:	200a      	movs	r0, #10
 8003872:	001a      	movs	r2, r3
 8003874:	3501      	adds	r5, #1
 8003876:	6063      	str	r3, [r4, #4]
 8003878:	7829      	ldrb	r1, [r5, #0]
 800387a:	1c6e      	adds	r6, r5, #1
 800387c:	3930      	subs	r1, #48	; 0x30
 800387e:	2909      	cmp	r1, #9
 8003880:	d903      	bls.n	800388a <_svfiprintf_r+0x1a6>
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0c5      	beq.n	8003812 <_svfiprintf_r+0x12e>
 8003886:	9209      	str	r2, [sp, #36]	; 0x24
 8003888:	e7c3      	b.n	8003812 <_svfiprintf_r+0x12e>
 800388a:	4342      	muls	r2, r0
 800388c:	0035      	movs	r5, r6
 800388e:	2301      	movs	r3, #1
 8003890:	1852      	adds	r2, r2, r1
 8003892:	e7f1      	b.n	8003878 <_svfiprintf_r+0x194>
 8003894:	ab07      	add	r3, sp, #28
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	003a      	movs	r2, r7
 800389a:	0021      	movs	r1, r4
 800389c:	4b10      	ldr	r3, [pc, #64]	; (80038e0 <_svfiprintf_r+0x1fc>)
 800389e:	9803      	ldr	r0, [sp, #12]
 80038a0:	e000      	b.n	80038a4 <_svfiprintf_r+0x1c0>
 80038a2:	bf00      	nop
 80038a4:	9004      	str	r0, [sp, #16]
 80038a6:	9b04      	ldr	r3, [sp, #16]
 80038a8:	3301      	adds	r3, #1
 80038aa:	d1d3      	bne.n	8003854 <_svfiprintf_r+0x170>
 80038ac:	89bb      	ldrh	r3, [r7, #12]
 80038ae:	980d      	ldr	r0, [sp, #52]	; 0x34
 80038b0:	065b      	lsls	r3, r3, #25
 80038b2:	d400      	bmi.n	80038b6 <_svfiprintf_r+0x1d2>
 80038b4:	e72d      	b.n	8003712 <_svfiprintf_r+0x2e>
 80038b6:	2001      	movs	r0, #1
 80038b8:	4240      	negs	r0, r0
 80038ba:	e72a      	b.n	8003712 <_svfiprintf_r+0x2e>
 80038bc:	ab07      	add	r3, sp, #28
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	003a      	movs	r2, r7
 80038c2:	0021      	movs	r1, r4
 80038c4:	4b06      	ldr	r3, [pc, #24]	; (80038e0 <_svfiprintf_r+0x1fc>)
 80038c6:	9803      	ldr	r0, [sp, #12]
 80038c8:	f000 f87c 	bl	80039c4 <_printf_i>
 80038cc:	e7ea      	b.n	80038a4 <_svfiprintf_r+0x1c0>
 80038ce:	46c0      	nop			; (mov r8, r8)
 80038d0:	08003f74 	.word	0x08003f74
 80038d4:	08003f7a 	.word	0x08003f7a
 80038d8:	08003f7e 	.word	0x08003f7e
 80038dc:	00000000 	.word	0x00000000
 80038e0:	08003621 	.word	0x08003621

080038e4 <_printf_common>:
 80038e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038e6:	0015      	movs	r5, r2
 80038e8:	9301      	str	r3, [sp, #4]
 80038ea:	688a      	ldr	r2, [r1, #8]
 80038ec:	690b      	ldr	r3, [r1, #16]
 80038ee:	000c      	movs	r4, r1
 80038f0:	9000      	str	r0, [sp, #0]
 80038f2:	4293      	cmp	r3, r2
 80038f4:	da00      	bge.n	80038f8 <_printf_common+0x14>
 80038f6:	0013      	movs	r3, r2
 80038f8:	0022      	movs	r2, r4
 80038fa:	602b      	str	r3, [r5, #0]
 80038fc:	3243      	adds	r2, #67	; 0x43
 80038fe:	7812      	ldrb	r2, [r2, #0]
 8003900:	2a00      	cmp	r2, #0
 8003902:	d001      	beq.n	8003908 <_printf_common+0x24>
 8003904:	3301      	adds	r3, #1
 8003906:	602b      	str	r3, [r5, #0]
 8003908:	6823      	ldr	r3, [r4, #0]
 800390a:	069b      	lsls	r3, r3, #26
 800390c:	d502      	bpl.n	8003914 <_printf_common+0x30>
 800390e:	682b      	ldr	r3, [r5, #0]
 8003910:	3302      	adds	r3, #2
 8003912:	602b      	str	r3, [r5, #0]
 8003914:	6822      	ldr	r2, [r4, #0]
 8003916:	2306      	movs	r3, #6
 8003918:	0017      	movs	r7, r2
 800391a:	401f      	ands	r7, r3
 800391c:	421a      	tst	r2, r3
 800391e:	d027      	beq.n	8003970 <_printf_common+0x8c>
 8003920:	0023      	movs	r3, r4
 8003922:	3343      	adds	r3, #67	; 0x43
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	1e5a      	subs	r2, r3, #1
 8003928:	4193      	sbcs	r3, r2
 800392a:	6822      	ldr	r2, [r4, #0]
 800392c:	0692      	lsls	r2, r2, #26
 800392e:	d430      	bmi.n	8003992 <_printf_common+0xae>
 8003930:	0022      	movs	r2, r4
 8003932:	9901      	ldr	r1, [sp, #4]
 8003934:	9800      	ldr	r0, [sp, #0]
 8003936:	9e08      	ldr	r6, [sp, #32]
 8003938:	3243      	adds	r2, #67	; 0x43
 800393a:	47b0      	blx	r6
 800393c:	1c43      	adds	r3, r0, #1
 800393e:	d025      	beq.n	800398c <_printf_common+0xa8>
 8003940:	2306      	movs	r3, #6
 8003942:	6820      	ldr	r0, [r4, #0]
 8003944:	682a      	ldr	r2, [r5, #0]
 8003946:	68e1      	ldr	r1, [r4, #12]
 8003948:	2500      	movs	r5, #0
 800394a:	4003      	ands	r3, r0
 800394c:	2b04      	cmp	r3, #4
 800394e:	d103      	bne.n	8003958 <_printf_common+0x74>
 8003950:	1a8d      	subs	r5, r1, r2
 8003952:	43eb      	mvns	r3, r5
 8003954:	17db      	asrs	r3, r3, #31
 8003956:	401d      	ands	r5, r3
 8003958:	68a3      	ldr	r3, [r4, #8]
 800395a:	6922      	ldr	r2, [r4, #16]
 800395c:	4293      	cmp	r3, r2
 800395e:	dd01      	ble.n	8003964 <_printf_common+0x80>
 8003960:	1a9b      	subs	r3, r3, r2
 8003962:	18ed      	adds	r5, r5, r3
 8003964:	2700      	movs	r7, #0
 8003966:	42bd      	cmp	r5, r7
 8003968:	d120      	bne.n	80039ac <_printf_common+0xc8>
 800396a:	2000      	movs	r0, #0
 800396c:	e010      	b.n	8003990 <_printf_common+0xac>
 800396e:	3701      	adds	r7, #1
 8003970:	68e3      	ldr	r3, [r4, #12]
 8003972:	682a      	ldr	r2, [r5, #0]
 8003974:	1a9b      	subs	r3, r3, r2
 8003976:	42bb      	cmp	r3, r7
 8003978:	ddd2      	ble.n	8003920 <_printf_common+0x3c>
 800397a:	0022      	movs	r2, r4
 800397c:	2301      	movs	r3, #1
 800397e:	9901      	ldr	r1, [sp, #4]
 8003980:	9800      	ldr	r0, [sp, #0]
 8003982:	9e08      	ldr	r6, [sp, #32]
 8003984:	3219      	adds	r2, #25
 8003986:	47b0      	blx	r6
 8003988:	1c43      	adds	r3, r0, #1
 800398a:	d1f0      	bne.n	800396e <_printf_common+0x8a>
 800398c:	2001      	movs	r0, #1
 800398e:	4240      	negs	r0, r0
 8003990:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003992:	2030      	movs	r0, #48	; 0x30
 8003994:	18e1      	adds	r1, r4, r3
 8003996:	3143      	adds	r1, #67	; 0x43
 8003998:	7008      	strb	r0, [r1, #0]
 800399a:	0021      	movs	r1, r4
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	3145      	adds	r1, #69	; 0x45
 80039a0:	7809      	ldrb	r1, [r1, #0]
 80039a2:	18a2      	adds	r2, r4, r2
 80039a4:	3243      	adds	r2, #67	; 0x43
 80039a6:	3302      	adds	r3, #2
 80039a8:	7011      	strb	r1, [r2, #0]
 80039aa:	e7c1      	b.n	8003930 <_printf_common+0x4c>
 80039ac:	0022      	movs	r2, r4
 80039ae:	2301      	movs	r3, #1
 80039b0:	9901      	ldr	r1, [sp, #4]
 80039b2:	9800      	ldr	r0, [sp, #0]
 80039b4:	9e08      	ldr	r6, [sp, #32]
 80039b6:	321a      	adds	r2, #26
 80039b8:	47b0      	blx	r6
 80039ba:	1c43      	adds	r3, r0, #1
 80039bc:	d0e6      	beq.n	800398c <_printf_common+0xa8>
 80039be:	3701      	adds	r7, #1
 80039c0:	e7d1      	b.n	8003966 <_printf_common+0x82>
	...

080039c4 <_printf_i>:
 80039c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039c6:	b08b      	sub	sp, #44	; 0x2c
 80039c8:	9206      	str	r2, [sp, #24]
 80039ca:	000a      	movs	r2, r1
 80039cc:	3243      	adds	r2, #67	; 0x43
 80039ce:	9307      	str	r3, [sp, #28]
 80039d0:	9005      	str	r0, [sp, #20]
 80039d2:	9204      	str	r2, [sp, #16]
 80039d4:	7e0a      	ldrb	r2, [r1, #24]
 80039d6:	000c      	movs	r4, r1
 80039d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80039da:	2a78      	cmp	r2, #120	; 0x78
 80039dc:	d807      	bhi.n	80039ee <_printf_i+0x2a>
 80039de:	2a62      	cmp	r2, #98	; 0x62
 80039e0:	d809      	bhi.n	80039f6 <_printf_i+0x32>
 80039e2:	2a00      	cmp	r2, #0
 80039e4:	d100      	bne.n	80039e8 <_printf_i+0x24>
 80039e6:	e0c1      	b.n	8003b6c <_printf_i+0x1a8>
 80039e8:	2a58      	cmp	r2, #88	; 0x58
 80039ea:	d100      	bne.n	80039ee <_printf_i+0x2a>
 80039ec:	e08c      	b.n	8003b08 <_printf_i+0x144>
 80039ee:	0026      	movs	r6, r4
 80039f0:	3642      	adds	r6, #66	; 0x42
 80039f2:	7032      	strb	r2, [r6, #0]
 80039f4:	e022      	b.n	8003a3c <_printf_i+0x78>
 80039f6:	0010      	movs	r0, r2
 80039f8:	3863      	subs	r0, #99	; 0x63
 80039fa:	2815      	cmp	r0, #21
 80039fc:	d8f7      	bhi.n	80039ee <_printf_i+0x2a>
 80039fe:	f7fc fb83 	bl	8000108 <__gnu_thumb1_case_shi>
 8003a02:	0016      	.short	0x0016
 8003a04:	fff6001f 	.word	0xfff6001f
 8003a08:	fff6fff6 	.word	0xfff6fff6
 8003a0c:	001ffff6 	.word	0x001ffff6
 8003a10:	fff6fff6 	.word	0xfff6fff6
 8003a14:	fff6fff6 	.word	0xfff6fff6
 8003a18:	003600a8 	.word	0x003600a8
 8003a1c:	fff6009a 	.word	0xfff6009a
 8003a20:	00b9fff6 	.word	0x00b9fff6
 8003a24:	0036fff6 	.word	0x0036fff6
 8003a28:	fff6fff6 	.word	0xfff6fff6
 8003a2c:	009e      	.short	0x009e
 8003a2e:	0026      	movs	r6, r4
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	3642      	adds	r6, #66	; 0x42
 8003a34:	1d11      	adds	r1, r2, #4
 8003a36:	6019      	str	r1, [r3, #0]
 8003a38:	6813      	ldr	r3, [r2, #0]
 8003a3a:	7033      	strb	r3, [r6, #0]
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e0a7      	b.n	8003b90 <_printf_i+0x1cc>
 8003a40:	6808      	ldr	r0, [r1, #0]
 8003a42:	6819      	ldr	r1, [r3, #0]
 8003a44:	1d0a      	adds	r2, r1, #4
 8003a46:	0605      	lsls	r5, r0, #24
 8003a48:	d50b      	bpl.n	8003a62 <_printf_i+0x9e>
 8003a4a:	680d      	ldr	r5, [r1, #0]
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	2d00      	cmp	r5, #0
 8003a50:	da03      	bge.n	8003a5a <_printf_i+0x96>
 8003a52:	232d      	movs	r3, #45	; 0x2d
 8003a54:	9a04      	ldr	r2, [sp, #16]
 8003a56:	426d      	negs	r5, r5
 8003a58:	7013      	strb	r3, [r2, #0]
 8003a5a:	4b61      	ldr	r3, [pc, #388]	; (8003be0 <_printf_i+0x21c>)
 8003a5c:	270a      	movs	r7, #10
 8003a5e:	9303      	str	r3, [sp, #12]
 8003a60:	e01b      	b.n	8003a9a <_printf_i+0xd6>
 8003a62:	680d      	ldr	r5, [r1, #0]
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	0641      	lsls	r1, r0, #25
 8003a68:	d5f1      	bpl.n	8003a4e <_printf_i+0x8a>
 8003a6a:	b22d      	sxth	r5, r5
 8003a6c:	e7ef      	b.n	8003a4e <_printf_i+0x8a>
 8003a6e:	680d      	ldr	r5, [r1, #0]
 8003a70:	6819      	ldr	r1, [r3, #0]
 8003a72:	1d08      	adds	r0, r1, #4
 8003a74:	6018      	str	r0, [r3, #0]
 8003a76:	062e      	lsls	r6, r5, #24
 8003a78:	d501      	bpl.n	8003a7e <_printf_i+0xba>
 8003a7a:	680d      	ldr	r5, [r1, #0]
 8003a7c:	e003      	b.n	8003a86 <_printf_i+0xc2>
 8003a7e:	066d      	lsls	r5, r5, #25
 8003a80:	d5fb      	bpl.n	8003a7a <_printf_i+0xb6>
 8003a82:	680d      	ldr	r5, [r1, #0]
 8003a84:	b2ad      	uxth	r5, r5
 8003a86:	4b56      	ldr	r3, [pc, #344]	; (8003be0 <_printf_i+0x21c>)
 8003a88:	2708      	movs	r7, #8
 8003a8a:	9303      	str	r3, [sp, #12]
 8003a8c:	2a6f      	cmp	r2, #111	; 0x6f
 8003a8e:	d000      	beq.n	8003a92 <_printf_i+0xce>
 8003a90:	3702      	adds	r7, #2
 8003a92:	0023      	movs	r3, r4
 8003a94:	2200      	movs	r2, #0
 8003a96:	3343      	adds	r3, #67	; 0x43
 8003a98:	701a      	strb	r2, [r3, #0]
 8003a9a:	6863      	ldr	r3, [r4, #4]
 8003a9c:	60a3      	str	r3, [r4, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	db03      	blt.n	8003aaa <_printf_i+0xe6>
 8003aa2:	2204      	movs	r2, #4
 8003aa4:	6821      	ldr	r1, [r4, #0]
 8003aa6:	4391      	bics	r1, r2
 8003aa8:	6021      	str	r1, [r4, #0]
 8003aaa:	2d00      	cmp	r5, #0
 8003aac:	d102      	bne.n	8003ab4 <_printf_i+0xf0>
 8003aae:	9e04      	ldr	r6, [sp, #16]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00c      	beq.n	8003ace <_printf_i+0x10a>
 8003ab4:	9e04      	ldr	r6, [sp, #16]
 8003ab6:	0028      	movs	r0, r5
 8003ab8:	0039      	movs	r1, r7
 8003aba:	f7fc fbb5 	bl	8000228 <__aeabi_uidivmod>
 8003abe:	9b03      	ldr	r3, [sp, #12]
 8003ac0:	3e01      	subs	r6, #1
 8003ac2:	5c5b      	ldrb	r3, [r3, r1]
 8003ac4:	7033      	strb	r3, [r6, #0]
 8003ac6:	002b      	movs	r3, r5
 8003ac8:	0005      	movs	r5, r0
 8003aca:	429f      	cmp	r7, r3
 8003acc:	d9f3      	bls.n	8003ab6 <_printf_i+0xf2>
 8003ace:	2f08      	cmp	r7, #8
 8003ad0:	d109      	bne.n	8003ae6 <_printf_i+0x122>
 8003ad2:	6823      	ldr	r3, [r4, #0]
 8003ad4:	07db      	lsls	r3, r3, #31
 8003ad6:	d506      	bpl.n	8003ae6 <_printf_i+0x122>
 8003ad8:	6863      	ldr	r3, [r4, #4]
 8003ada:	6922      	ldr	r2, [r4, #16]
 8003adc:	4293      	cmp	r3, r2
 8003ade:	dc02      	bgt.n	8003ae6 <_printf_i+0x122>
 8003ae0:	2330      	movs	r3, #48	; 0x30
 8003ae2:	3e01      	subs	r6, #1
 8003ae4:	7033      	strb	r3, [r6, #0]
 8003ae6:	9b04      	ldr	r3, [sp, #16]
 8003ae8:	1b9b      	subs	r3, r3, r6
 8003aea:	6123      	str	r3, [r4, #16]
 8003aec:	9b07      	ldr	r3, [sp, #28]
 8003aee:	0021      	movs	r1, r4
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	9805      	ldr	r0, [sp, #20]
 8003af4:	9b06      	ldr	r3, [sp, #24]
 8003af6:	aa09      	add	r2, sp, #36	; 0x24
 8003af8:	f7ff fef4 	bl	80038e4 <_printf_common>
 8003afc:	1c43      	adds	r3, r0, #1
 8003afe:	d14c      	bne.n	8003b9a <_printf_i+0x1d6>
 8003b00:	2001      	movs	r0, #1
 8003b02:	4240      	negs	r0, r0
 8003b04:	b00b      	add	sp, #44	; 0x2c
 8003b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b08:	3145      	adds	r1, #69	; 0x45
 8003b0a:	700a      	strb	r2, [r1, #0]
 8003b0c:	4a34      	ldr	r2, [pc, #208]	; (8003be0 <_printf_i+0x21c>)
 8003b0e:	9203      	str	r2, [sp, #12]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	6821      	ldr	r1, [r4, #0]
 8003b14:	ca20      	ldmia	r2!, {r5}
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	0608      	lsls	r0, r1, #24
 8003b1a:	d516      	bpl.n	8003b4a <_printf_i+0x186>
 8003b1c:	07cb      	lsls	r3, r1, #31
 8003b1e:	d502      	bpl.n	8003b26 <_printf_i+0x162>
 8003b20:	2320      	movs	r3, #32
 8003b22:	4319      	orrs	r1, r3
 8003b24:	6021      	str	r1, [r4, #0]
 8003b26:	2710      	movs	r7, #16
 8003b28:	2d00      	cmp	r5, #0
 8003b2a:	d1b2      	bne.n	8003a92 <_printf_i+0xce>
 8003b2c:	2320      	movs	r3, #32
 8003b2e:	6822      	ldr	r2, [r4, #0]
 8003b30:	439a      	bics	r2, r3
 8003b32:	6022      	str	r2, [r4, #0]
 8003b34:	e7ad      	b.n	8003a92 <_printf_i+0xce>
 8003b36:	2220      	movs	r2, #32
 8003b38:	6809      	ldr	r1, [r1, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	6022      	str	r2, [r4, #0]
 8003b3e:	0022      	movs	r2, r4
 8003b40:	2178      	movs	r1, #120	; 0x78
 8003b42:	3245      	adds	r2, #69	; 0x45
 8003b44:	7011      	strb	r1, [r2, #0]
 8003b46:	4a27      	ldr	r2, [pc, #156]	; (8003be4 <_printf_i+0x220>)
 8003b48:	e7e1      	b.n	8003b0e <_printf_i+0x14a>
 8003b4a:	0648      	lsls	r0, r1, #25
 8003b4c:	d5e6      	bpl.n	8003b1c <_printf_i+0x158>
 8003b4e:	b2ad      	uxth	r5, r5
 8003b50:	e7e4      	b.n	8003b1c <_printf_i+0x158>
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	680d      	ldr	r5, [r1, #0]
 8003b56:	1d10      	adds	r0, r2, #4
 8003b58:	6949      	ldr	r1, [r1, #20]
 8003b5a:	6018      	str	r0, [r3, #0]
 8003b5c:	6813      	ldr	r3, [r2, #0]
 8003b5e:	062e      	lsls	r6, r5, #24
 8003b60:	d501      	bpl.n	8003b66 <_printf_i+0x1a2>
 8003b62:	6019      	str	r1, [r3, #0]
 8003b64:	e002      	b.n	8003b6c <_printf_i+0x1a8>
 8003b66:	066d      	lsls	r5, r5, #25
 8003b68:	d5fb      	bpl.n	8003b62 <_printf_i+0x19e>
 8003b6a:	8019      	strh	r1, [r3, #0]
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	9e04      	ldr	r6, [sp, #16]
 8003b70:	6123      	str	r3, [r4, #16]
 8003b72:	e7bb      	b.n	8003aec <_printf_i+0x128>
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	1d11      	adds	r1, r2, #4
 8003b78:	6019      	str	r1, [r3, #0]
 8003b7a:	6816      	ldr	r6, [r2, #0]
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	0030      	movs	r0, r6
 8003b80:	6862      	ldr	r2, [r4, #4]
 8003b82:	f000 f831 	bl	8003be8 <memchr>
 8003b86:	2800      	cmp	r0, #0
 8003b88:	d001      	beq.n	8003b8e <_printf_i+0x1ca>
 8003b8a:	1b80      	subs	r0, r0, r6
 8003b8c:	6060      	str	r0, [r4, #4]
 8003b8e:	6863      	ldr	r3, [r4, #4]
 8003b90:	6123      	str	r3, [r4, #16]
 8003b92:	2300      	movs	r3, #0
 8003b94:	9a04      	ldr	r2, [sp, #16]
 8003b96:	7013      	strb	r3, [r2, #0]
 8003b98:	e7a8      	b.n	8003aec <_printf_i+0x128>
 8003b9a:	6923      	ldr	r3, [r4, #16]
 8003b9c:	0032      	movs	r2, r6
 8003b9e:	9906      	ldr	r1, [sp, #24]
 8003ba0:	9805      	ldr	r0, [sp, #20]
 8003ba2:	9d07      	ldr	r5, [sp, #28]
 8003ba4:	47a8      	blx	r5
 8003ba6:	1c43      	adds	r3, r0, #1
 8003ba8:	d0aa      	beq.n	8003b00 <_printf_i+0x13c>
 8003baa:	6823      	ldr	r3, [r4, #0]
 8003bac:	079b      	lsls	r3, r3, #30
 8003bae:	d415      	bmi.n	8003bdc <_printf_i+0x218>
 8003bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bb2:	68e0      	ldr	r0, [r4, #12]
 8003bb4:	4298      	cmp	r0, r3
 8003bb6:	daa5      	bge.n	8003b04 <_printf_i+0x140>
 8003bb8:	0018      	movs	r0, r3
 8003bba:	e7a3      	b.n	8003b04 <_printf_i+0x140>
 8003bbc:	0022      	movs	r2, r4
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	9906      	ldr	r1, [sp, #24]
 8003bc2:	9805      	ldr	r0, [sp, #20]
 8003bc4:	9e07      	ldr	r6, [sp, #28]
 8003bc6:	3219      	adds	r2, #25
 8003bc8:	47b0      	blx	r6
 8003bca:	1c43      	adds	r3, r0, #1
 8003bcc:	d098      	beq.n	8003b00 <_printf_i+0x13c>
 8003bce:	3501      	adds	r5, #1
 8003bd0:	68e3      	ldr	r3, [r4, #12]
 8003bd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003bd4:	1a9b      	subs	r3, r3, r2
 8003bd6:	42ab      	cmp	r3, r5
 8003bd8:	dcf0      	bgt.n	8003bbc <_printf_i+0x1f8>
 8003bda:	e7e9      	b.n	8003bb0 <_printf_i+0x1ec>
 8003bdc:	2500      	movs	r5, #0
 8003bde:	e7f7      	b.n	8003bd0 <_printf_i+0x20c>
 8003be0:	08003f85 	.word	0x08003f85
 8003be4:	08003f96 	.word	0x08003f96

08003be8 <memchr>:
 8003be8:	b2c9      	uxtb	r1, r1
 8003bea:	1882      	adds	r2, r0, r2
 8003bec:	4290      	cmp	r0, r2
 8003bee:	d101      	bne.n	8003bf4 <memchr+0xc>
 8003bf0:	2000      	movs	r0, #0
 8003bf2:	4770      	bx	lr
 8003bf4:	7803      	ldrb	r3, [r0, #0]
 8003bf6:	428b      	cmp	r3, r1
 8003bf8:	d0fb      	beq.n	8003bf2 <memchr+0xa>
 8003bfa:	3001      	adds	r0, #1
 8003bfc:	e7f6      	b.n	8003bec <memchr+0x4>

08003bfe <memcpy>:
 8003bfe:	2300      	movs	r3, #0
 8003c00:	b510      	push	{r4, lr}
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d100      	bne.n	8003c08 <memcpy+0xa>
 8003c06:	bd10      	pop	{r4, pc}
 8003c08:	5ccc      	ldrb	r4, [r1, r3]
 8003c0a:	54c4      	strb	r4, [r0, r3]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	e7f8      	b.n	8003c02 <memcpy+0x4>

08003c10 <memmove>:
 8003c10:	b510      	push	{r4, lr}
 8003c12:	4288      	cmp	r0, r1
 8003c14:	d902      	bls.n	8003c1c <memmove+0xc>
 8003c16:	188b      	adds	r3, r1, r2
 8003c18:	4298      	cmp	r0, r3
 8003c1a:	d303      	bcc.n	8003c24 <memmove+0x14>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	e007      	b.n	8003c30 <memmove+0x20>
 8003c20:	5c8b      	ldrb	r3, [r1, r2]
 8003c22:	5483      	strb	r3, [r0, r2]
 8003c24:	3a01      	subs	r2, #1
 8003c26:	d2fb      	bcs.n	8003c20 <memmove+0x10>
 8003c28:	bd10      	pop	{r4, pc}
 8003c2a:	5ccc      	ldrb	r4, [r1, r3]
 8003c2c:	54c4      	strb	r4, [r0, r3]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d1fa      	bne.n	8003c2a <memmove+0x1a>
 8003c34:	e7f8      	b.n	8003c28 <memmove+0x18>
	...

08003c38 <_free_r>:
 8003c38:	b570      	push	{r4, r5, r6, lr}
 8003c3a:	0005      	movs	r5, r0
 8003c3c:	2900      	cmp	r1, #0
 8003c3e:	d010      	beq.n	8003c62 <_free_r+0x2a>
 8003c40:	1f0c      	subs	r4, r1, #4
 8003c42:	6823      	ldr	r3, [r4, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	da00      	bge.n	8003c4a <_free_r+0x12>
 8003c48:	18e4      	adds	r4, r4, r3
 8003c4a:	0028      	movs	r0, r5
 8003c4c:	f000 f918 	bl	8003e80 <__malloc_lock>
 8003c50:	4a1d      	ldr	r2, [pc, #116]	; (8003cc8 <_free_r+0x90>)
 8003c52:	6813      	ldr	r3, [r2, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d105      	bne.n	8003c64 <_free_r+0x2c>
 8003c58:	6063      	str	r3, [r4, #4]
 8003c5a:	6014      	str	r4, [r2, #0]
 8003c5c:	0028      	movs	r0, r5
 8003c5e:	f000 f917 	bl	8003e90 <__malloc_unlock>
 8003c62:	bd70      	pop	{r4, r5, r6, pc}
 8003c64:	42a3      	cmp	r3, r4
 8003c66:	d908      	bls.n	8003c7a <_free_r+0x42>
 8003c68:	6821      	ldr	r1, [r4, #0]
 8003c6a:	1860      	adds	r0, r4, r1
 8003c6c:	4283      	cmp	r3, r0
 8003c6e:	d1f3      	bne.n	8003c58 <_free_r+0x20>
 8003c70:	6818      	ldr	r0, [r3, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	1841      	adds	r1, r0, r1
 8003c76:	6021      	str	r1, [r4, #0]
 8003c78:	e7ee      	b.n	8003c58 <_free_r+0x20>
 8003c7a:	001a      	movs	r2, r3
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <_free_r+0x4e>
 8003c82:	42a3      	cmp	r3, r4
 8003c84:	d9f9      	bls.n	8003c7a <_free_r+0x42>
 8003c86:	6811      	ldr	r1, [r2, #0]
 8003c88:	1850      	adds	r0, r2, r1
 8003c8a:	42a0      	cmp	r0, r4
 8003c8c:	d10b      	bne.n	8003ca6 <_free_r+0x6e>
 8003c8e:	6820      	ldr	r0, [r4, #0]
 8003c90:	1809      	adds	r1, r1, r0
 8003c92:	1850      	adds	r0, r2, r1
 8003c94:	6011      	str	r1, [r2, #0]
 8003c96:	4283      	cmp	r3, r0
 8003c98:	d1e0      	bne.n	8003c5c <_free_r+0x24>
 8003c9a:	6818      	ldr	r0, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	1841      	adds	r1, r0, r1
 8003ca0:	6011      	str	r1, [r2, #0]
 8003ca2:	6053      	str	r3, [r2, #4]
 8003ca4:	e7da      	b.n	8003c5c <_free_r+0x24>
 8003ca6:	42a0      	cmp	r0, r4
 8003ca8:	d902      	bls.n	8003cb0 <_free_r+0x78>
 8003caa:	230c      	movs	r3, #12
 8003cac:	602b      	str	r3, [r5, #0]
 8003cae:	e7d5      	b.n	8003c5c <_free_r+0x24>
 8003cb0:	6821      	ldr	r1, [r4, #0]
 8003cb2:	1860      	adds	r0, r4, r1
 8003cb4:	4283      	cmp	r3, r0
 8003cb6:	d103      	bne.n	8003cc0 <_free_r+0x88>
 8003cb8:	6818      	ldr	r0, [r3, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	1841      	adds	r1, r0, r1
 8003cbe:	6021      	str	r1, [r4, #0]
 8003cc0:	6063      	str	r3, [r4, #4]
 8003cc2:	6054      	str	r4, [r2, #4]
 8003cc4:	e7ca      	b.n	8003c5c <_free_r+0x24>
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	20000198 	.word	0x20000198

08003ccc <sbrk_aligned>:
 8003ccc:	b570      	push	{r4, r5, r6, lr}
 8003cce:	4e0f      	ldr	r6, [pc, #60]	; (8003d0c <sbrk_aligned+0x40>)
 8003cd0:	000d      	movs	r5, r1
 8003cd2:	6831      	ldr	r1, [r6, #0]
 8003cd4:	0004      	movs	r4, r0
 8003cd6:	2900      	cmp	r1, #0
 8003cd8:	d102      	bne.n	8003ce0 <sbrk_aligned+0x14>
 8003cda:	f000 f8bf 	bl	8003e5c <_sbrk_r>
 8003cde:	6030      	str	r0, [r6, #0]
 8003ce0:	0029      	movs	r1, r5
 8003ce2:	0020      	movs	r0, r4
 8003ce4:	f000 f8ba 	bl	8003e5c <_sbrk_r>
 8003ce8:	1c43      	adds	r3, r0, #1
 8003cea:	d00a      	beq.n	8003d02 <sbrk_aligned+0x36>
 8003cec:	2303      	movs	r3, #3
 8003cee:	1cc5      	adds	r5, r0, #3
 8003cf0:	439d      	bics	r5, r3
 8003cf2:	42a8      	cmp	r0, r5
 8003cf4:	d007      	beq.n	8003d06 <sbrk_aligned+0x3a>
 8003cf6:	1a29      	subs	r1, r5, r0
 8003cf8:	0020      	movs	r0, r4
 8003cfa:	f000 f8af 	bl	8003e5c <_sbrk_r>
 8003cfe:	1c43      	adds	r3, r0, #1
 8003d00:	d101      	bne.n	8003d06 <sbrk_aligned+0x3a>
 8003d02:	2501      	movs	r5, #1
 8003d04:	426d      	negs	r5, r5
 8003d06:	0028      	movs	r0, r5
 8003d08:	bd70      	pop	{r4, r5, r6, pc}
 8003d0a:	46c0      	nop			; (mov r8, r8)
 8003d0c:	2000019c 	.word	0x2000019c

08003d10 <_malloc_r>:
 8003d10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d12:	2203      	movs	r2, #3
 8003d14:	1ccb      	adds	r3, r1, #3
 8003d16:	4393      	bics	r3, r2
 8003d18:	3308      	adds	r3, #8
 8003d1a:	0006      	movs	r6, r0
 8003d1c:	001f      	movs	r7, r3
 8003d1e:	2b0c      	cmp	r3, #12
 8003d20:	d232      	bcs.n	8003d88 <_malloc_r+0x78>
 8003d22:	270c      	movs	r7, #12
 8003d24:	42b9      	cmp	r1, r7
 8003d26:	d831      	bhi.n	8003d8c <_malloc_r+0x7c>
 8003d28:	0030      	movs	r0, r6
 8003d2a:	f000 f8a9 	bl	8003e80 <__malloc_lock>
 8003d2e:	4d32      	ldr	r5, [pc, #200]	; (8003df8 <_malloc_r+0xe8>)
 8003d30:	682b      	ldr	r3, [r5, #0]
 8003d32:	001c      	movs	r4, r3
 8003d34:	2c00      	cmp	r4, #0
 8003d36:	d12e      	bne.n	8003d96 <_malloc_r+0x86>
 8003d38:	0039      	movs	r1, r7
 8003d3a:	0030      	movs	r0, r6
 8003d3c:	f7ff ffc6 	bl	8003ccc <sbrk_aligned>
 8003d40:	0004      	movs	r4, r0
 8003d42:	1c43      	adds	r3, r0, #1
 8003d44:	d11e      	bne.n	8003d84 <_malloc_r+0x74>
 8003d46:	682c      	ldr	r4, [r5, #0]
 8003d48:	0025      	movs	r5, r4
 8003d4a:	2d00      	cmp	r5, #0
 8003d4c:	d14a      	bne.n	8003de4 <_malloc_r+0xd4>
 8003d4e:	6823      	ldr	r3, [r4, #0]
 8003d50:	0029      	movs	r1, r5
 8003d52:	18e3      	adds	r3, r4, r3
 8003d54:	0030      	movs	r0, r6
 8003d56:	9301      	str	r3, [sp, #4]
 8003d58:	f000 f880 	bl	8003e5c <_sbrk_r>
 8003d5c:	9b01      	ldr	r3, [sp, #4]
 8003d5e:	4283      	cmp	r3, r0
 8003d60:	d143      	bne.n	8003dea <_malloc_r+0xda>
 8003d62:	6823      	ldr	r3, [r4, #0]
 8003d64:	3703      	adds	r7, #3
 8003d66:	1aff      	subs	r7, r7, r3
 8003d68:	2303      	movs	r3, #3
 8003d6a:	439f      	bics	r7, r3
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	2f0c      	cmp	r7, #12
 8003d70:	d200      	bcs.n	8003d74 <_malloc_r+0x64>
 8003d72:	270c      	movs	r7, #12
 8003d74:	0039      	movs	r1, r7
 8003d76:	0030      	movs	r0, r6
 8003d78:	f7ff ffa8 	bl	8003ccc <sbrk_aligned>
 8003d7c:	1c43      	adds	r3, r0, #1
 8003d7e:	d034      	beq.n	8003dea <_malloc_r+0xda>
 8003d80:	6823      	ldr	r3, [r4, #0]
 8003d82:	19df      	adds	r7, r3, r7
 8003d84:	6027      	str	r7, [r4, #0]
 8003d86:	e013      	b.n	8003db0 <_malloc_r+0xa0>
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	dacb      	bge.n	8003d24 <_malloc_r+0x14>
 8003d8c:	230c      	movs	r3, #12
 8003d8e:	2500      	movs	r5, #0
 8003d90:	6033      	str	r3, [r6, #0]
 8003d92:	0028      	movs	r0, r5
 8003d94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003d96:	6822      	ldr	r2, [r4, #0]
 8003d98:	1bd1      	subs	r1, r2, r7
 8003d9a:	d420      	bmi.n	8003dde <_malloc_r+0xce>
 8003d9c:	290b      	cmp	r1, #11
 8003d9e:	d917      	bls.n	8003dd0 <_malloc_r+0xc0>
 8003da0:	19e2      	adds	r2, r4, r7
 8003da2:	6027      	str	r7, [r4, #0]
 8003da4:	42a3      	cmp	r3, r4
 8003da6:	d111      	bne.n	8003dcc <_malloc_r+0xbc>
 8003da8:	602a      	str	r2, [r5, #0]
 8003daa:	6863      	ldr	r3, [r4, #4]
 8003dac:	6011      	str	r1, [r2, #0]
 8003dae:	6053      	str	r3, [r2, #4]
 8003db0:	0030      	movs	r0, r6
 8003db2:	0025      	movs	r5, r4
 8003db4:	f000 f86c 	bl	8003e90 <__malloc_unlock>
 8003db8:	2207      	movs	r2, #7
 8003dba:	350b      	adds	r5, #11
 8003dbc:	1d23      	adds	r3, r4, #4
 8003dbe:	4395      	bics	r5, r2
 8003dc0:	1aea      	subs	r2, r5, r3
 8003dc2:	429d      	cmp	r5, r3
 8003dc4:	d0e5      	beq.n	8003d92 <_malloc_r+0x82>
 8003dc6:	1b5b      	subs	r3, r3, r5
 8003dc8:	50a3      	str	r3, [r4, r2]
 8003dca:	e7e2      	b.n	8003d92 <_malloc_r+0x82>
 8003dcc:	605a      	str	r2, [r3, #4]
 8003dce:	e7ec      	b.n	8003daa <_malloc_r+0x9a>
 8003dd0:	6862      	ldr	r2, [r4, #4]
 8003dd2:	42a3      	cmp	r3, r4
 8003dd4:	d101      	bne.n	8003dda <_malloc_r+0xca>
 8003dd6:	602a      	str	r2, [r5, #0]
 8003dd8:	e7ea      	b.n	8003db0 <_malloc_r+0xa0>
 8003dda:	605a      	str	r2, [r3, #4]
 8003ddc:	e7e8      	b.n	8003db0 <_malloc_r+0xa0>
 8003dde:	0023      	movs	r3, r4
 8003de0:	6864      	ldr	r4, [r4, #4]
 8003de2:	e7a7      	b.n	8003d34 <_malloc_r+0x24>
 8003de4:	002c      	movs	r4, r5
 8003de6:	686d      	ldr	r5, [r5, #4]
 8003de8:	e7af      	b.n	8003d4a <_malloc_r+0x3a>
 8003dea:	230c      	movs	r3, #12
 8003dec:	0030      	movs	r0, r6
 8003dee:	6033      	str	r3, [r6, #0]
 8003df0:	f000 f84e 	bl	8003e90 <__malloc_unlock>
 8003df4:	e7cd      	b.n	8003d92 <_malloc_r+0x82>
 8003df6:	46c0      	nop			; (mov r8, r8)
 8003df8:	20000198 	.word	0x20000198

08003dfc <_realloc_r>:
 8003dfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dfe:	0007      	movs	r7, r0
 8003e00:	000e      	movs	r6, r1
 8003e02:	0014      	movs	r4, r2
 8003e04:	2900      	cmp	r1, #0
 8003e06:	d105      	bne.n	8003e14 <_realloc_r+0x18>
 8003e08:	0011      	movs	r1, r2
 8003e0a:	f7ff ff81 	bl	8003d10 <_malloc_r>
 8003e0e:	0005      	movs	r5, r0
 8003e10:	0028      	movs	r0, r5
 8003e12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e14:	2a00      	cmp	r2, #0
 8003e16:	d103      	bne.n	8003e20 <_realloc_r+0x24>
 8003e18:	f7ff ff0e 	bl	8003c38 <_free_r>
 8003e1c:	0025      	movs	r5, r4
 8003e1e:	e7f7      	b.n	8003e10 <_realloc_r+0x14>
 8003e20:	f000 f83e 	bl	8003ea0 <_malloc_usable_size_r>
 8003e24:	9001      	str	r0, [sp, #4]
 8003e26:	4284      	cmp	r4, r0
 8003e28:	d803      	bhi.n	8003e32 <_realloc_r+0x36>
 8003e2a:	0035      	movs	r5, r6
 8003e2c:	0843      	lsrs	r3, r0, #1
 8003e2e:	42a3      	cmp	r3, r4
 8003e30:	d3ee      	bcc.n	8003e10 <_realloc_r+0x14>
 8003e32:	0021      	movs	r1, r4
 8003e34:	0038      	movs	r0, r7
 8003e36:	f7ff ff6b 	bl	8003d10 <_malloc_r>
 8003e3a:	1e05      	subs	r5, r0, #0
 8003e3c:	d0e8      	beq.n	8003e10 <_realloc_r+0x14>
 8003e3e:	9b01      	ldr	r3, [sp, #4]
 8003e40:	0022      	movs	r2, r4
 8003e42:	429c      	cmp	r4, r3
 8003e44:	d900      	bls.n	8003e48 <_realloc_r+0x4c>
 8003e46:	001a      	movs	r2, r3
 8003e48:	0031      	movs	r1, r6
 8003e4a:	0028      	movs	r0, r5
 8003e4c:	f7ff fed7 	bl	8003bfe <memcpy>
 8003e50:	0031      	movs	r1, r6
 8003e52:	0038      	movs	r0, r7
 8003e54:	f7ff fef0 	bl	8003c38 <_free_r>
 8003e58:	e7da      	b.n	8003e10 <_realloc_r+0x14>
	...

08003e5c <_sbrk_r>:
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	b570      	push	{r4, r5, r6, lr}
 8003e60:	4d06      	ldr	r5, [pc, #24]	; (8003e7c <_sbrk_r+0x20>)
 8003e62:	0004      	movs	r4, r0
 8003e64:	0008      	movs	r0, r1
 8003e66:	602b      	str	r3, [r5, #0]
 8003e68:	f7fc fdee 	bl	8000a48 <_sbrk>
 8003e6c:	1c43      	adds	r3, r0, #1
 8003e6e:	d103      	bne.n	8003e78 <_sbrk_r+0x1c>
 8003e70:	682b      	ldr	r3, [r5, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d000      	beq.n	8003e78 <_sbrk_r+0x1c>
 8003e76:	6023      	str	r3, [r4, #0]
 8003e78:	bd70      	pop	{r4, r5, r6, pc}
 8003e7a:	46c0      	nop			; (mov r8, r8)
 8003e7c:	200001a0 	.word	0x200001a0

08003e80 <__malloc_lock>:
 8003e80:	b510      	push	{r4, lr}
 8003e82:	4802      	ldr	r0, [pc, #8]	; (8003e8c <__malloc_lock+0xc>)
 8003e84:	f000 f814 	bl	8003eb0 <__retarget_lock_acquire_recursive>
 8003e88:	bd10      	pop	{r4, pc}
 8003e8a:	46c0      	nop			; (mov r8, r8)
 8003e8c:	200001a4 	.word	0x200001a4

08003e90 <__malloc_unlock>:
 8003e90:	b510      	push	{r4, lr}
 8003e92:	4802      	ldr	r0, [pc, #8]	; (8003e9c <__malloc_unlock+0xc>)
 8003e94:	f000 f80d 	bl	8003eb2 <__retarget_lock_release_recursive>
 8003e98:	bd10      	pop	{r4, pc}
 8003e9a:	46c0      	nop			; (mov r8, r8)
 8003e9c:	200001a4 	.word	0x200001a4

08003ea0 <_malloc_usable_size_r>:
 8003ea0:	1f0b      	subs	r3, r1, #4
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	1f18      	subs	r0, r3, #4
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	da01      	bge.n	8003eae <_malloc_usable_size_r+0xe>
 8003eaa:	580b      	ldr	r3, [r1, r0]
 8003eac:	18c0      	adds	r0, r0, r3
 8003eae:	4770      	bx	lr

08003eb0 <__retarget_lock_acquire_recursive>:
 8003eb0:	4770      	bx	lr

08003eb2 <__retarget_lock_release_recursive>:
 8003eb2:	4770      	bx	lr

08003eb4 <_init>:
 8003eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eba:	bc08      	pop	{r3}
 8003ebc:	469e      	mov	lr, r3
 8003ebe:	4770      	bx	lr

08003ec0 <_fini>:
 8003ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ec2:	46c0      	nop			; (mov r8, r8)
 8003ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ec6:	bc08      	pop	{r3}
 8003ec8:	469e      	mov	lr, r3
 8003eca:	4770      	bx	lr

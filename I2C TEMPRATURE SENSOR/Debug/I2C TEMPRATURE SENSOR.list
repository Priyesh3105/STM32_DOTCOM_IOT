
I2C TEMPRATURE SENSOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006860  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08006920  08006920  00016920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ab0  08006ab0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006ab0  08006ab0  00016ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ab8  08006ab8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ab8  08006ab8  00016ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006abc  08006abc  00016abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006ac0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000070  08006b30  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08006b30  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c10c  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b18  00000000  00000000  0002c1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a30  00000000  00000000  0002dcc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002e6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014023  00000000  00000000  0002f068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d721  00000000  00000000  0004308b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00078f63  00000000  00000000  000507ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c970f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b34  00000000  00000000  000c9760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006908 	.word	0x08006908

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08006908 	.word	0x08006908

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f84c 	bl	8000310 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4647      	mov	r7, r8
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	4699      	mov	r9, r3
 8000290:	0c3b      	lsrs	r3, r7, #16
 8000292:	469c      	mov	ip, r3
 8000294:	0413      	lsls	r3, r2, #16
 8000296:	0c1b      	lsrs	r3, r3, #16
 8000298:	001d      	movs	r5, r3
 800029a:	000e      	movs	r6, r1
 800029c:	4661      	mov	r1, ip
 800029e:	0400      	lsls	r0, r0, #16
 80002a0:	0c14      	lsrs	r4, r2, #16
 80002a2:	0c00      	lsrs	r0, r0, #16
 80002a4:	4345      	muls	r5, r0
 80002a6:	434b      	muls	r3, r1
 80002a8:	4360      	muls	r0, r4
 80002aa:	4361      	muls	r1, r4
 80002ac:	18c0      	adds	r0, r0, r3
 80002ae:	0c2c      	lsrs	r4, r5, #16
 80002b0:	1820      	adds	r0, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	4283      	cmp	r3, r0
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4372      	muls	r2, r6
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	4463      	add	r3, ip
 80002ca:	042d      	lsls	r5, r5, #16
 80002cc:	0c2d      	lsrs	r5, r5, #16
 80002ce:	18c9      	adds	r1, r1, r3
 80002d0:	0400      	lsls	r0, r0, #16
 80002d2:	1940      	adds	r0, r0, r5
 80002d4:	1889      	adds	r1, r1, r2
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__aeabi_f2uiz>:
 80002e0:	219e      	movs	r1, #158	; 0x9e
 80002e2:	b510      	push	{r4, lr}
 80002e4:	05c9      	lsls	r1, r1, #23
 80002e6:	1c04      	adds	r4, r0, #0
 80002e8:	f002 fb60 	bl	80029ac <__aeabi_fcmpge>
 80002ec:	2800      	cmp	r0, #0
 80002ee:	d103      	bne.n	80002f8 <__aeabi_f2uiz+0x18>
 80002f0:	1c20      	adds	r0, r4, #0
 80002f2:	f000 fd4b 	bl	8000d8c <__aeabi_f2iz>
 80002f6:	bd10      	pop	{r4, pc}
 80002f8:	219e      	movs	r1, #158	; 0x9e
 80002fa:	1c20      	adds	r0, r4, #0
 80002fc:	05c9      	lsls	r1, r1, #23
 80002fe:	f000 fb97 	bl	8000a30 <__aeabi_fsub>
 8000302:	f000 fd43 	bl	8000d8c <__aeabi_f2iz>
 8000306:	2380      	movs	r3, #128	; 0x80
 8000308:	061b      	lsls	r3, r3, #24
 800030a:	469c      	mov	ip, r3
 800030c:	4460      	add	r0, ip
 800030e:	e7f2      	b.n	80002f6 <__aeabi_f2uiz+0x16>

08000310 <__udivmoddi4>:
 8000310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000312:	4657      	mov	r7, sl
 8000314:	464e      	mov	r6, r9
 8000316:	4645      	mov	r5, r8
 8000318:	46de      	mov	lr, fp
 800031a:	b5e0      	push	{r5, r6, r7, lr}
 800031c:	0004      	movs	r4, r0
 800031e:	000d      	movs	r5, r1
 8000320:	4692      	mov	sl, r2
 8000322:	4699      	mov	r9, r3
 8000324:	b083      	sub	sp, #12
 8000326:	428b      	cmp	r3, r1
 8000328:	d830      	bhi.n	800038c <__udivmoddi4+0x7c>
 800032a:	d02d      	beq.n	8000388 <__udivmoddi4+0x78>
 800032c:	4649      	mov	r1, r9
 800032e:	4650      	mov	r0, sl
 8000330:	f002 fb64 	bl	80029fc <__clzdi2>
 8000334:	0029      	movs	r1, r5
 8000336:	0006      	movs	r6, r0
 8000338:	0020      	movs	r0, r4
 800033a:	f002 fb5f 	bl	80029fc <__clzdi2>
 800033e:	1a33      	subs	r3, r6, r0
 8000340:	4698      	mov	r8, r3
 8000342:	3b20      	subs	r3, #32
 8000344:	469b      	mov	fp, r3
 8000346:	d433      	bmi.n	80003b0 <__udivmoddi4+0xa0>
 8000348:	465a      	mov	r2, fp
 800034a:	4653      	mov	r3, sl
 800034c:	4093      	lsls	r3, r2
 800034e:	4642      	mov	r2, r8
 8000350:	001f      	movs	r7, r3
 8000352:	4653      	mov	r3, sl
 8000354:	4093      	lsls	r3, r2
 8000356:	001e      	movs	r6, r3
 8000358:	42af      	cmp	r7, r5
 800035a:	d83a      	bhi.n	80003d2 <__udivmoddi4+0xc2>
 800035c:	42af      	cmp	r7, r5
 800035e:	d100      	bne.n	8000362 <__udivmoddi4+0x52>
 8000360:	e078      	b.n	8000454 <__udivmoddi4+0x144>
 8000362:	465b      	mov	r3, fp
 8000364:	1ba4      	subs	r4, r4, r6
 8000366:	41bd      	sbcs	r5, r7
 8000368:	2b00      	cmp	r3, #0
 800036a:	da00      	bge.n	800036e <__udivmoddi4+0x5e>
 800036c:	e075      	b.n	800045a <__udivmoddi4+0x14a>
 800036e:	2200      	movs	r2, #0
 8000370:	2300      	movs	r3, #0
 8000372:	9200      	str	r2, [sp, #0]
 8000374:	9301      	str	r3, [sp, #4]
 8000376:	2301      	movs	r3, #1
 8000378:	465a      	mov	r2, fp
 800037a:	4093      	lsls	r3, r2
 800037c:	9301      	str	r3, [sp, #4]
 800037e:	2301      	movs	r3, #1
 8000380:	4642      	mov	r2, r8
 8000382:	4093      	lsls	r3, r2
 8000384:	9300      	str	r3, [sp, #0]
 8000386:	e028      	b.n	80003da <__udivmoddi4+0xca>
 8000388:	4282      	cmp	r2, r0
 800038a:	d9cf      	bls.n	800032c <__udivmoddi4+0x1c>
 800038c:	2200      	movs	r2, #0
 800038e:	2300      	movs	r3, #0
 8000390:	9200      	str	r2, [sp, #0]
 8000392:	9301      	str	r3, [sp, #4]
 8000394:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <__udivmoddi4+0x8e>
 800039a:	601c      	str	r4, [r3, #0]
 800039c:	605d      	str	r5, [r3, #4]
 800039e:	9800      	ldr	r0, [sp, #0]
 80003a0:	9901      	ldr	r1, [sp, #4]
 80003a2:	b003      	add	sp, #12
 80003a4:	bcf0      	pop	{r4, r5, r6, r7}
 80003a6:	46bb      	mov	fp, r7
 80003a8:	46b2      	mov	sl, r6
 80003aa:	46a9      	mov	r9, r5
 80003ac:	46a0      	mov	r8, r4
 80003ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003b0:	4642      	mov	r2, r8
 80003b2:	2320      	movs	r3, #32
 80003b4:	1a9b      	subs	r3, r3, r2
 80003b6:	4652      	mov	r2, sl
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	4641      	mov	r1, r8
 80003bc:	0013      	movs	r3, r2
 80003be:	464a      	mov	r2, r9
 80003c0:	408a      	lsls	r2, r1
 80003c2:	0017      	movs	r7, r2
 80003c4:	4642      	mov	r2, r8
 80003c6:	431f      	orrs	r7, r3
 80003c8:	4653      	mov	r3, sl
 80003ca:	4093      	lsls	r3, r2
 80003cc:	001e      	movs	r6, r3
 80003ce:	42af      	cmp	r7, r5
 80003d0:	d9c4      	bls.n	800035c <__udivmoddi4+0x4c>
 80003d2:	2200      	movs	r2, #0
 80003d4:	2300      	movs	r3, #0
 80003d6:	9200      	str	r2, [sp, #0]
 80003d8:	9301      	str	r3, [sp, #4]
 80003da:	4643      	mov	r3, r8
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d0d9      	beq.n	8000394 <__udivmoddi4+0x84>
 80003e0:	07fb      	lsls	r3, r7, #31
 80003e2:	0872      	lsrs	r2, r6, #1
 80003e4:	431a      	orrs	r2, r3
 80003e6:	4646      	mov	r6, r8
 80003e8:	087b      	lsrs	r3, r7, #1
 80003ea:	e00e      	b.n	800040a <__udivmoddi4+0xfa>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	d101      	bne.n	80003f4 <__udivmoddi4+0xe4>
 80003f0:	42a2      	cmp	r2, r4
 80003f2:	d80c      	bhi.n	800040e <__udivmoddi4+0xfe>
 80003f4:	1aa4      	subs	r4, r4, r2
 80003f6:	419d      	sbcs	r5, r3
 80003f8:	2001      	movs	r0, #1
 80003fa:	1924      	adds	r4, r4, r4
 80003fc:	416d      	adcs	r5, r5
 80003fe:	2100      	movs	r1, #0
 8000400:	3e01      	subs	r6, #1
 8000402:	1824      	adds	r4, r4, r0
 8000404:	414d      	adcs	r5, r1
 8000406:	2e00      	cmp	r6, #0
 8000408:	d006      	beq.n	8000418 <__udivmoddi4+0x108>
 800040a:	42ab      	cmp	r3, r5
 800040c:	d9ee      	bls.n	80003ec <__udivmoddi4+0xdc>
 800040e:	3e01      	subs	r6, #1
 8000410:	1924      	adds	r4, r4, r4
 8000412:	416d      	adcs	r5, r5
 8000414:	2e00      	cmp	r6, #0
 8000416:	d1f8      	bne.n	800040a <__udivmoddi4+0xfa>
 8000418:	9800      	ldr	r0, [sp, #0]
 800041a:	9901      	ldr	r1, [sp, #4]
 800041c:	465b      	mov	r3, fp
 800041e:	1900      	adds	r0, r0, r4
 8000420:	4169      	adcs	r1, r5
 8000422:	2b00      	cmp	r3, #0
 8000424:	db24      	blt.n	8000470 <__udivmoddi4+0x160>
 8000426:	002b      	movs	r3, r5
 8000428:	465a      	mov	r2, fp
 800042a:	4644      	mov	r4, r8
 800042c:	40d3      	lsrs	r3, r2
 800042e:	002a      	movs	r2, r5
 8000430:	40e2      	lsrs	r2, r4
 8000432:	001c      	movs	r4, r3
 8000434:	465b      	mov	r3, fp
 8000436:	0015      	movs	r5, r2
 8000438:	2b00      	cmp	r3, #0
 800043a:	db2a      	blt.n	8000492 <__udivmoddi4+0x182>
 800043c:	0026      	movs	r6, r4
 800043e:	409e      	lsls	r6, r3
 8000440:	0033      	movs	r3, r6
 8000442:	0026      	movs	r6, r4
 8000444:	4647      	mov	r7, r8
 8000446:	40be      	lsls	r6, r7
 8000448:	0032      	movs	r2, r6
 800044a:	1a80      	subs	r0, r0, r2
 800044c:	4199      	sbcs	r1, r3
 800044e:	9000      	str	r0, [sp, #0]
 8000450:	9101      	str	r1, [sp, #4]
 8000452:	e79f      	b.n	8000394 <__udivmoddi4+0x84>
 8000454:	42a3      	cmp	r3, r4
 8000456:	d8bc      	bhi.n	80003d2 <__udivmoddi4+0xc2>
 8000458:	e783      	b.n	8000362 <__udivmoddi4+0x52>
 800045a:	4642      	mov	r2, r8
 800045c:	2320      	movs	r3, #32
 800045e:	2100      	movs	r1, #0
 8000460:	1a9b      	subs	r3, r3, r2
 8000462:	2200      	movs	r2, #0
 8000464:	9100      	str	r1, [sp, #0]
 8000466:	9201      	str	r2, [sp, #4]
 8000468:	2201      	movs	r2, #1
 800046a:	40da      	lsrs	r2, r3
 800046c:	9201      	str	r2, [sp, #4]
 800046e:	e786      	b.n	800037e <__udivmoddi4+0x6e>
 8000470:	4642      	mov	r2, r8
 8000472:	2320      	movs	r3, #32
 8000474:	1a9b      	subs	r3, r3, r2
 8000476:	002a      	movs	r2, r5
 8000478:	4646      	mov	r6, r8
 800047a:	409a      	lsls	r2, r3
 800047c:	0023      	movs	r3, r4
 800047e:	40f3      	lsrs	r3, r6
 8000480:	4644      	mov	r4, r8
 8000482:	4313      	orrs	r3, r2
 8000484:	002a      	movs	r2, r5
 8000486:	40e2      	lsrs	r2, r4
 8000488:	001c      	movs	r4, r3
 800048a:	465b      	mov	r3, fp
 800048c:	0015      	movs	r5, r2
 800048e:	2b00      	cmp	r3, #0
 8000490:	dad4      	bge.n	800043c <__udivmoddi4+0x12c>
 8000492:	4642      	mov	r2, r8
 8000494:	002f      	movs	r7, r5
 8000496:	2320      	movs	r3, #32
 8000498:	0026      	movs	r6, r4
 800049a:	4097      	lsls	r7, r2
 800049c:	1a9b      	subs	r3, r3, r2
 800049e:	40de      	lsrs	r6, r3
 80004a0:	003b      	movs	r3, r7
 80004a2:	4333      	orrs	r3, r6
 80004a4:	e7cd      	b.n	8000442 <__udivmoddi4+0x132>
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_fadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	46c6      	mov	lr, r8
 80004ac:	0243      	lsls	r3, r0, #9
 80004ae:	0a5b      	lsrs	r3, r3, #9
 80004b0:	024e      	lsls	r6, r1, #9
 80004b2:	0045      	lsls	r5, r0, #1
 80004b4:	004f      	lsls	r7, r1, #1
 80004b6:	00da      	lsls	r2, r3, #3
 80004b8:	0fc4      	lsrs	r4, r0, #31
 80004ba:	469c      	mov	ip, r3
 80004bc:	0a70      	lsrs	r0, r6, #9
 80004be:	4690      	mov	r8, r2
 80004c0:	b500      	push	{lr}
 80004c2:	0e2d      	lsrs	r5, r5, #24
 80004c4:	0e3f      	lsrs	r7, r7, #24
 80004c6:	0fc9      	lsrs	r1, r1, #31
 80004c8:	09b6      	lsrs	r6, r6, #6
 80004ca:	428c      	cmp	r4, r1
 80004cc:	d04b      	beq.n	8000566 <__aeabi_fadd+0xbe>
 80004ce:	1bea      	subs	r2, r5, r7
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	dd36      	ble.n	8000542 <__aeabi_fadd+0x9a>
 80004d4:	2f00      	cmp	r7, #0
 80004d6:	d061      	beq.n	800059c <__aeabi_fadd+0xf4>
 80004d8:	2dff      	cmp	r5, #255	; 0xff
 80004da:	d100      	bne.n	80004de <__aeabi_fadd+0x36>
 80004dc:	e0ad      	b.n	800063a <__aeabi_fadd+0x192>
 80004de:	2380      	movs	r3, #128	; 0x80
 80004e0:	04db      	lsls	r3, r3, #19
 80004e2:	431e      	orrs	r6, r3
 80004e4:	2a1b      	cmp	r2, #27
 80004e6:	dc00      	bgt.n	80004ea <__aeabi_fadd+0x42>
 80004e8:	e0d3      	b.n	8000692 <__aeabi_fadd+0x1ea>
 80004ea:	2001      	movs	r0, #1
 80004ec:	4643      	mov	r3, r8
 80004ee:	1a18      	subs	r0, r3, r0
 80004f0:	0143      	lsls	r3, r0, #5
 80004f2:	d400      	bmi.n	80004f6 <__aeabi_fadd+0x4e>
 80004f4:	e08c      	b.n	8000610 <__aeabi_fadd+0x168>
 80004f6:	0180      	lsls	r0, r0, #6
 80004f8:	0987      	lsrs	r7, r0, #6
 80004fa:	0038      	movs	r0, r7
 80004fc:	f002 fa60 	bl	80029c0 <__clzsi2>
 8000500:	3805      	subs	r0, #5
 8000502:	4087      	lsls	r7, r0
 8000504:	4285      	cmp	r5, r0
 8000506:	dc00      	bgt.n	800050a <__aeabi_fadd+0x62>
 8000508:	e0b6      	b.n	8000678 <__aeabi_fadd+0x1d0>
 800050a:	1a2d      	subs	r5, r5, r0
 800050c:	48b3      	ldr	r0, [pc, #716]	; (80007dc <__aeabi_fadd+0x334>)
 800050e:	4038      	ands	r0, r7
 8000510:	0743      	lsls	r3, r0, #29
 8000512:	d004      	beq.n	800051e <__aeabi_fadd+0x76>
 8000514:	230f      	movs	r3, #15
 8000516:	4003      	ands	r3, r0
 8000518:	2b04      	cmp	r3, #4
 800051a:	d000      	beq.n	800051e <__aeabi_fadd+0x76>
 800051c:	3004      	adds	r0, #4
 800051e:	0143      	lsls	r3, r0, #5
 8000520:	d400      	bmi.n	8000524 <__aeabi_fadd+0x7c>
 8000522:	e078      	b.n	8000616 <__aeabi_fadd+0x16e>
 8000524:	1c6a      	adds	r2, r5, #1
 8000526:	2dfe      	cmp	r5, #254	; 0xfe
 8000528:	d065      	beq.n	80005f6 <__aeabi_fadd+0x14e>
 800052a:	0180      	lsls	r0, r0, #6
 800052c:	0a43      	lsrs	r3, r0, #9
 800052e:	469c      	mov	ip, r3
 8000530:	b2d2      	uxtb	r2, r2
 8000532:	4663      	mov	r3, ip
 8000534:	05d0      	lsls	r0, r2, #23
 8000536:	4318      	orrs	r0, r3
 8000538:	07e4      	lsls	r4, r4, #31
 800053a:	4320      	orrs	r0, r4
 800053c:	bc80      	pop	{r7}
 800053e:	46b8      	mov	r8, r7
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	2a00      	cmp	r2, #0
 8000544:	d035      	beq.n	80005b2 <__aeabi_fadd+0x10a>
 8000546:	1b7a      	subs	r2, r7, r5
 8000548:	2d00      	cmp	r5, #0
 800054a:	d000      	beq.n	800054e <__aeabi_fadd+0xa6>
 800054c:	e0af      	b.n	80006ae <__aeabi_fadd+0x206>
 800054e:	4643      	mov	r3, r8
 8000550:	2b00      	cmp	r3, #0
 8000552:	d100      	bne.n	8000556 <__aeabi_fadd+0xae>
 8000554:	e0a7      	b.n	80006a6 <__aeabi_fadd+0x1fe>
 8000556:	1e53      	subs	r3, r2, #1
 8000558:	2a01      	cmp	r2, #1
 800055a:	d100      	bne.n	800055e <__aeabi_fadd+0xb6>
 800055c:	e12f      	b.n	80007be <__aeabi_fadd+0x316>
 800055e:	2aff      	cmp	r2, #255	; 0xff
 8000560:	d069      	beq.n	8000636 <__aeabi_fadd+0x18e>
 8000562:	001a      	movs	r2, r3
 8000564:	e0aa      	b.n	80006bc <__aeabi_fadd+0x214>
 8000566:	1be9      	subs	r1, r5, r7
 8000568:	2900      	cmp	r1, #0
 800056a:	dd70      	ble.n	800064e <__aeabi_fadd+0x1a6>
 800056c:	2f00      	cmp	r7, #0
 800056e:	d037      	beq.n	80005e0 <__aeabi_fadd+0x138>
 8000570:	2dff      	cmp	r5, #255	; 0xff
 8000572:	d062      	beq.n	800063a <__aeabi_fadd+0x192>
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	04db      	lsls	r3, r3, #19
 8000578:	431e      	orrs	r6, r3
 800057a:	291b      	cmp	r1, #27
 800057c:	dc00      	bgt.n	8000580 <__aeabi_fadd+0xd8>
 800057e:	e0b0      	b.n	80006e2 <__aeabi_fadd+0x23a>
 8000580:	2001      	movs	r0, #1
 8000582:	4440      	add	r0, r8
 8000584:	0143      	lsls	r3, r0, #5
 8000586:	d543      	bpl.n	8000610 <__aeabi_fadd+0x168>
 8000588:	3501      	adds	r5, #1
 800058a:	2dff      	cmp	r5, #255	; 0xff
 800058c:	d033      	beq.n	80005f6 <__aeabi_fadd+0x14e>
 800058e:	2301      	movs	r3, #1
 8000590:	4a93      	ldr	r2, [pc, #588]	; (80007e0 <__aeabi_fadd+0x338>)
 8000592:	4003      	ands	r3, r0
 8000594:	0840      	lsrs	r0, r0, #1
 8000596:	4010      	ands	r0, r2
 8000598:	4318      	orrs	r0, r3
 800059a:	e7b9      	b.n	8000510 <__aeabi_fadd+0x68>
 800059c:	2e00      	cmp	r6, #0
 800059e:	d100      	bne.n	80005a2 <__aeabi_fadd+0xfa>
 80005a0:	e083      	b.n	80006aa <__aeabi_fadd+0x202>
 80005a2:	1e51      	subs	r1, r2, #1
 80005a4:	2a01      	cmp	r2, #1
 80005a6:	d100      	bne.n	80005aa <__aeabi_fadd+0x102>
 80005a8:	e0d8      	b.n	800075c <__aeabi_fadd+0x2b4>
 80005aa:	2aff      	cmp	r2, #255	; 0xff
 80005ac:	d045      	beq.n	800063a <__aeabi_fadd+0x192>
 80005ae:	000a      	movs	r2, r1
 80005b0:	e798      	b.n	80004e4 <__aeabi_fadd+0x3c>
 80005b2:	27fe      	movs	r7, #254	; 0xfe
 80005b4:	1c6a      	adds	r2, r5, #1
 80005b6:	4217      	tst	r7, r2
 80005b8:	d000      	beq.n	80005bc <__aeabi_fadd+0x114>
 80005ba:	e086      	b.n	80006ca <__aeabi_fadd+0x222>
 80005bc:	2d00      	cmp	r5, #0
 80005be:	d000      	beq.n	80005c2 <__aeabi_fadd+0x11a>
 80005c0:	e0b7      	b.n	8000732 <__aeabi_fadd+0x28a>
 80005c2:	4643      	mov	r3, r8
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d100      	bne.n	80005ca <__aeabi_fadd+0x122>
 80005c8:	e0f3      	b.n	80007b2 <__aeabi_fadd+0x30a>
 80005ca:	2200      	movs	r2, #0
 80005cc:	2e00      	cmp	r6, #0
 80005ce:	d0b0      	beq.n	8000532 <__aeabi_fadd+0x8a>
 80005d0:	1b98      	subs	r0, r3, r6
 80005d2:	0143      	lsls	r3, r0, #5
 80005d4:	d400      	bmi.n	80005d8 <__aeabi_fadd+0x130>
 80005d6:	e0fa      	b.n	80007ce <__aeabi_fadd+0x326>
 80005d8:	4643      	mov	r3, r8
 80005da:	000c      	movs	r4, r1
 80005dc:	1af0      	subs	r0, r6, r3
 80005de:	e797      	b.n	8000510 <__aeabi_fadd+0x68>
 80005e0:	2e00      	cmp	r6, #0
 80005e2:	d100      	bne.n	80005e6 <__aeabi_fadd+0x13e>
 80005e4:	e0c8      	b.n	8000778 <__aeabi_fadd+0x2d0>
 80005e6:	1e4a      	subs	r2, r1, #1
 80005e8:	2901      	cmp	r1, #1
 80005ea:	d100      	bne.n	80005ee <__aeabi_fadd+0x146>
 80005ec:	e0ae      	b.n	800074c <__aeabi_fadd+0x2a4>
 80005ee:	29ff      	cmp	r1, #255	; 0xff
 80005f0:	d023      	beq.n	800063a <__aeabi_fadd+0x192>
 80005f2:	0011      	movs	r1, r2
 80005f4:	e7c1      	b.n	800057a <__aeabi_fadd+0xd2>
 80005f6:	2300      	movs	r3, #0
 80005f8:	22ff      	movs	r2, #255	; 0xff
 80005fa:	469c      	mov	ip, r3
 80005fc:	e799      	b.n	8000532 <__aeabi_fadd+0x8a>
 80005fe:	21fe      	movs	r1, #254	; 0xfe
 8000600:	1c6a      	adds	r2, r5, #1
 8000602:	4211      	tst	r1, r2
 8000604:	d077      	beq.n	80006f6 <__aeabi_fadd+0x24e>
 8000606:	2aff      	cmp	r2, #255	; 0xff
 8000608:	d0f5      	beq.n	80005f6 <__aeabi_fadd+0x14e>
 800060a:	0015      	movs	r5, r2
 800060c:	4446      	add	r6, r8
 800060e:	0870      	lsrs	r0, r6, #1
 8000610:	0743      	lsls	r3, r0, #29
 8000612:	d000      	beq.n	8000616 <__aeabi_fadd+0x16e>
 8000614:	e77e      	b.n	8000514 <__aeabi_fadd+0x6c>
 8000616:	08c3      	lsrs	r3, r0, #3
 8000618:	2dff      	cmp	r5, #255	; 0xff
 800061a:	d00e      	beq.n	800063a <__aeabi_fadd+0x192>
 800061c:	025b      	lsls	r3, r3, #9
 800061e:	0a5b      	lsrs	r3, r3, #9
 8000620:	469c      	mov	ip, r3
 8000622:	b2ea      	uxtb	r2, r5
 8000624:	e785      	b.n	8000532 <__aeabi_fadd+0x8a>
 8000626:	2e00      	cmp	r6, #0
 8000628:	d007      	beq.n	800063a <__aeabi_fadd+0x192>
 800062a:	2280      	movs	r2, #128	; 0x80
 800062c:	03d2      	lsls	r2, r2, #15
 800062e:	4213      	tst	r3, r2
 8000630:	d003      	beq.n	800063a <__aeabi_fadd+0x192>
 8000632:	4210      	tst	r0, r2
 8000634:	d101      	bne.n	800063a <__aeabi_fadd+0x192>
 8000636:	000c      	movs	r4, r1
 8000638:	0003      	movs	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d0db      	beq.n	80005f6 <__aeabi_fadd+0x14e>
 800063e:	2080      	movs	r0, #128	; 0x80
 8000640:	03c0      	lsls	r0, r0, #15
 8000642:	4318      	orrs	r0, r3
 8000644:	0240      	lsls	r0, r0, #9
 8000646:	0a43      	lsrs	r3, r0, #9
 8000648:	469c      	mov	ip, r3
 800064a:	22ff      	movs	r2, #255	; 0xff
 800064c:	e771      	b.n	8000532 <__aeabi_fadd+0x8a>
 800064e:	2900      	cmp	r1, #0
 8000650:	d0d5      	beq.n	80005fe <__aeabi_fadd+0x156>
 8000652:	1b7a      	subs	r2, r7, r5
 8000654:	2d00      	cmp	r5, #0
 8000656:	d160      	bne.n	800071a <__aeabi_fadd+0x272>
 8000658:	4643      	mov	r3, r8
 800065a:	2b00      	cmp	r3, #0
 800065c:	d024      	beq.n	80006a8 <__aeabi_fadd+0x200>
 800065e:	1e53      	subs	r3, r2, #1
 8000660:	2a01      	cmp	r2, #1
 8000662:	d073      	beq.n	800074c <__aeabi_fadd+0x2a4>
 8000664:	2aff      	cmp	r2, #255	; 0xff
 8000666:	d0e7      	beq.n	8000638 <__aeabi_fadd+0x190>
 8000668:	001a      	movs	r2, r3
 800066a:	2a1b      	cmp	r2, #27
 800066c:	dc00      	bgt.n	8000670 <__aeabi_fadd+0x1c8>
 800066e:	e085      	b.n	800077c <__aeabi_fadd+0x2d4>
 8000670:	2001      	movs	r0, #1
 8000672:	003d      	movs	r5, r7
 8000674:	1980      	adds	r0, r0, r6
 8000676:	e785      	b.n	8000584 <__aeabi_fadd+0xdc>
 8000678:	2320      	movs	r3, #32
 800067a:	003a      	movs	r2, r7
 800067c:	1b45      	subs	r5, r0, r5
 800067e:	0038      	movs	r0, r7
 8000680:	3501      	adds	r5, #1
 8000682:	40ea      	lsrs	r2, r5
 8000684:	1b5d      	subs	r5, r3, r5
 8000686:	40a8      	lsls	r0, r5
 8000688:	1e43      	subs	r3, r0, #1
 800068a:	4198      	sbcs	r0, r3
 800068c:	2500      	movs	r5, #0
 800068e:	4310      	orrs	r0, r2
 8000690:	e73e      	b.n	8000510 <__aeabi_fadd+0x68>
 8000692:	2320      	movs	r3, #32
 8000694:	0030      	movs	r0, r6
 8000696:	1a9b      	subs	r3, r3, r2
 8000698:	0031      	movs	r1, r6
 800069a:	4098      	lsls	r0, r3
 800069c:	40d1      	lsrs	r1, r2
 800069e:	1e43      	subs	r3, r0, #1
 80006a0:	4198      	sbcs	r0, r3
 80006a2:	4308      	orrs	r0, r1
 80006a4:	e722      	b.n	80004ec <__aeabi_fadd+0x44>
 80006a6:	000c      	movs	r4, r1
 80006a8:	0003      	movs	r3, r0
 80006aa:	0015      	movs	r5, r2
 80006ac:	e7b4      	b.n	8000618 <__aeabi_fadd+0x170>
 80006ae:	2fff      	cmp	r7, #255	; 0xff
 80006b0:	d0c1      	beq.n	8000636 <__aeabi_fadd+0x18e>
 80006b2:	2380      	movs	r3, #128	; 0x80
 80006b4:	4640      	mov	r0, r8
 80006b6:	04db      	lsls	r3, r3, #19
 80006b8:	4318      	orrs	r0, r3
 80006ba:	4680      	mov	r8, r0
 80006bc:	2a1b      	cmp	r2, #27
 80006be:	dd51      	ble.n	8000764 <__aeabi_fadd+0x2bc>
 80006c0:	2001      	movs	r0, #1
 80006c2:	000c      	movs	r4, r1
 80006c4:	003d      	movs	r5, r7
 80006c6:	1a30      	subs	r0, r6, r0
 80006c8:	e712      	b.n	80004f0 <__aeabi_fadd+0x48>
 80006ca:	4643      	mov	r3, r8
 80006cc:	1b9f      	subs	r7, r3, r6
 80006ce:	017b      	lsls	r3, r7, #5
 80006d0:	d42b      	bmi.n	800072a <__aeabi_fadd+0x282>
 80006d2:	2f00      	cmp	r7, #0
 80006d4:	d000      	beq.n	80006d8 <__aeabi_fadd+0x230>
 80006d6:	e710      	b.n	80004fa <__aeabi_fadd+0x52>
 80006d8:	2300      	movs	r3, #0
 80006da:	2400      	movs	r4, #0
 80006dc:	2200      	movs	r2, #0
 80006de:	469c      	mov	ip, r3
 80006e0:	e727      	b.n	8000532 <__aeabi_fadd+0x8a>
 80006e2:	2320      	movs	r3, #32
 80006e4:	0032      	movs	r2, r6
 80006e6:	0030      	movs	r0, r6
 80006e8:	40ca      	lsrs	r2, r1
 80006ea:	1a59      	subs	r1, r3, r1
 80006ec:	4088      	lsls	r0, r1
 80006ee:	1e43      	subs	r3, r0, #1
 80006f0:	4198      	sbcs	r0, r3
 80006f2:	4310      	orrs	r0, r2
 80006f4:	e745      	b.n	8000582 <__aeabi_fadd+0xda>
 80006f6:	2d00      	cmp	r5, #0
 80006f8:	d14a      	bne.n	8000790 <__aeabi_fadd+0x2e8>
 80006fa:	4643      	mov	r3, r8
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d063      	beq.n	80007c8 <__aeabi_fadd+0x320>
 8000700:	2200      	movs	r2, #0
 8000702:	2e00      	cmp	r6, #0
 8000704:	d100      	bne.n	8000708 <__aeabi_fadd+0x260>
 8000706:	e714      	b.n	8000532 <__aeabi_fadd+0x8a>
 8000708:	0030      	movs	r0, r6
 800070a:	4440      	add	r0, r8
 800070c:	0143      	lsls	r3, r0, #5
 800070e:	d400      	bmi.n	8000712 <__aeabi_fadd+0x26a>
 8000710:	e77e      	b.n	8000610 <__aeabi_fadd+0x168>
 8000712:	4b32      	ldr	r3, [pc, #200]	; (80007dc <__aeabi_fadd+0x334>)
 8000714:	3501      	adds	r5, #1
 8000716:	4018      	ands	r0, r3
 8000718:	e77a      	b.n	8000610 <__aeabi_fadd+0x168>
 800071a:	2fff      	cmp	r7, #255	; 0xff
 800071c:	d08c      	beq.n	8000638 <__aeabi_fadd+0x190>
 800071e:	2380      	movs	r3, #128	; 0x80
 8000720:	4641      	mov	r1, r8
 8000722:	04db      	lsls	r3, r3, #19
 8000724:	4319      	orrs	r1, r3
 8000726:	4688      	mov	r8, r1
 8000728:	e79f      	b.n	800066a <__aeabi_fadd+0x1c2>
 800072a:	4643      	mov	r3, r8
 800072c:	000c      	movs	r4, r1
 800072e:	1af7      	subs	r7, r6, r3
 8000730:	e6e3      	b.n	80004fa <__aeabi_fadd+0x52>
 8000732:	4642      	mov	r2, r8
 8000734:	2a00      	cmp	r2, #0
 8000736:	d000      	beq.n	800073a <__aeabi_fadd+0x292>
 8000738:	e775      	b.n	8000626 <__aeabi_fadd+0x17e>
 800073a:	2e00      	cmp	r6, #0
 800073c:	d000      	beq.n	8000740 <__aeabi_fadd+0x298>
 800073e:	e77a      	b.n	8000636 <__aeabi_fadd+0x18e>
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	03db      	lsls	r3, r3, #15
 8000744:	2400      	movs	r4, #0
 8000746:	469c      	mov	ip, r3
 8000748:	22ff      	movs	r2, #255	; 0xff
 800074a:	e6f2      	b.n	8000532 <__aeabi_fadd+0x8a>
 800074c:	0030      	movs	r0, r6
 800074e:	4440      	add	r0, r8
 8000750:	2501      	movs	r5, #1
 8000752:	0143      	lsls	r3, r0, #5
 8000754:	d400      	bmi.n	8000758 <__aeabi_fadd+0x2b0>
 8000756:	e75b      	b.n	8000610 <__aeabi_fadd+0x168>
 8000758:	2502      	movs	r5, #2
 800075a:	e718      	b.n	800058e <__aeabi_fadd+0xe6>
 800075c:	4643      	mov	r3, r8
 800075e:	2501      	movs	r5, #1
 8000760:	1b98      	subs	r0, r3, r6
 8000762:	e6c5      	b.n	80004f0 <__aeabi_fadd+0x48>
 8000764:	2320      	movs	r3, #32
 8000766:	4644      	mov	r4, r8
 8000768:	4640      	mov	r0, r8
 800076a:	40d4      	lsrs	r4, r2
 800076c:	1a9a      	subs	r2, r3, r2
 800076e:	4090      	lsls	r0, r2
 8000770:	1e43      	subs	r3, r0, #1
 8000772:	4198      	sbcs	r0, r3
 8000774:	4320      	orrs	r0, r4
 8000776:	e7a4      	b.n	80006c2 <__aeabi_fadd+0x21a>
 8000778:	000d      	movs	r5, r1
 800077a:	e74d      	b.n	8000618 <__aeabi_fadd+0x170>
 800077c:	2320      	movs	r3, #32
 800077e:	4641      	mov	r1, r8
 8000780:	4640      	mov	r0, r8
 8000782:	40d1      	lsrs	r1, r2
 8000784:	1a9a      	subs	r2, r3, r2
 8000786:	4090      	lsls	r0, r2
 8000788:	1e43      	subs	r3, r0, #1
 800078a:	4198      	sbcs	r0, r3
 800078c:	4308      	orrs	r0, r1
 800078e:	e770      	b.n	8000672 <__aeabi_fadd+0x1ca>
 8000790:	4642      	mov	r2, r8
 8000792:	2a00      	cmp	r2, #0
 8000794:	d100      	bne.n	8000798 <__aeabi_fadd+0x2f0>
 8000796:	e74f      	b.n	8000638 <__aeabi_fadd+0x190>
 8000798:	2e00      	cmp	r6, #0
 800079a:	d100      	bne.n	800079e <__aeabi_fadd+0x2f6>
 800079c:	e74d      	b.n	800063a <__aeabi_fadd+0x192>
 800079e:	2280      	movs	r2, #128	; 0x80
 80007a0:	03d2      	lsls	r2, r2, #15
 80007a2:	4213      	tst	r3, r2
 80007a4:	d100      	bne.n	80007a8 <__aeabi_fadd+0x300>
 80007a6:	e748      	b.n	800063a <__aeabi_fadd+0x192>
 80007a8:	4210      	tst	r0, r2
 80007aa:	d000      	beq.n	80007ae <__aeabi_fadd+0x306>
 80007ac:	e745      	b.n	800063a <__aeabi_fadd+0x192>
 80007ae:	0003      	movs	r3, r0
 80007b0:	e743      	b.n	800063a <__aeabi_fadd+0x192>
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	d090      	beq.n	80006d8 <__aeabi_fadd+0x230>
 80007b6:	000c      	movs	r4, r1
 80007b8:	4684      	mov	ip, r0
 80007ba:	2200      	movs	r2, #0
 80007bc:	e6b9      	b.n	8000532 <__aeabi_fadd+0x8a>
 80007be:	4643      	mov	r3, r8
 80007c0:	000c      	movs	r4, r1
 80007c2:	1af0      	subs	r0, r6, r3
 80007c4:	3501      	adds	r5, #1
 80007c6:	e693      	b.n	80004f0 <__aeabi_fadd+0x48>
 80007c8:	4684      	mov	ip, r0
 80007ca:	2200      	movs	r2, #0
 80007cc:	e6b1      	b.n	8000532 <__aeabi_fadd+0x8a>
 80007ce:	2800      	cmp	r0, #0
 80007d0:	d000      	beq.n	80007d4 <__aeabi_fadd+0x32c>
 80007d2:	e71d      	b.n	8000610 <__aeabi_fadd+0x168>
 80007d4:	2300      	movs	r3, #0
 80007d6:	2400      	movs	r4, #0
 80007d8:	469c      	mov	ip, r3
 80007da:	e6aa      	b.n	8000532 <__aeabi_fadd+0x8a>
 80007dc:	fbffffff 	.word	0xfbffffff
 80007e0:	7dffffff 	.word	0x7dffffff

080007e4 <__aeabi_fmul>:
 80007e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007e6:	464f      	mov	r7, r9
 80007e8:	4646      	mov	r6, r8
 80007ea:	46d6      	mov	lr, sl
 80007ec:	0244      	lsls	r4, r0, #9
 80007ee:	0045      	lsls	r5, r0, #1
 80007f0:	b5c0      	push	{r6, r7, lr}
 80007f2:	0a64      	lsrs	r4, r4, #9
 80007f4:	1c0f      	adds	r7, r1, #0
 80007f6:	0e2d      	lsrs	r5, r5, #24
 80007f8:	0fc6      	lsrs	r6, r0, #31
 80007fa:	2d00      	cmp	r5, #0
 80007fc:	d100      	bne.n	8000800 <__aeabi_fmul+0x1c>
 80007fe:	e08d      	b.n	800091c <__aeabi_fmul+0x138>
 8000800:	2dff      	cmp	r5, #255	; 0xff
 8000802:	d100      	bne.n	8000806 <__aeabi_fmul+0x22>
 8000804:	e092      	b.n	800092c <__aeabi_fmul+0x148>
 8000806:	2300      	movs	r3, #0
 8000808:	2080      	movs	r0, #128	; 0x80
 800080a:	4699      	mov	r9, r3
 800080c:	469a      	mov	sl, r3
 800080e:	00e4      	lsls	r4, r4, #3
 8000810:	04c0      	lsls	r0, r0, #19
 8000812:	4304      	orrs	r4, r0
 8000814:	3d7f      	subs	r5, #127	; 0x7f
 8000816:	0278      	lsls	r0, r7, #9
 8000818:	0a43      	lsrs	r3, r0, #9
 800081a:	4698      	mov	r8, r3
 800081c:	007b      	lsls	r3, r7, #1
 800081e:	0e1b      	lsrs	r3, r3, #24
 8000820:	0fff      	lsrs	r7, r7, #31
 8000822:	2b00      	cmp	r3, #0
 8000824:	d100      	bne.n	8000828 <__aeabi_fmul+0x44>
 8000826:	e070      	b.n	800090a <__aeabi_fmul+0x126>
 8000828:	2bff      	cmp	r3, #255	; 0xff
 800082a:	d100      	bne.n	800082e <__aeabi_fmul+0x4a>
 800082c:	e086      	b.n	800093c <__aeabi_fmul+0x158>
 800082e:	4642      	mov	r2, r8
 8000830:	00d0      	lsls	r0, r2, #3
 8000832:	2280      	movs	r2, #128	; 0x80
 8000834:	3b7f      	subs	r3, #127	; 0x7f
 8000836:	18ed      	adds	r5, r5, r3
 8000838:	2300      	movs	r3, #0
 800083a:	04d2      	lsls	r2, r2, #19
 800083c:	4302      	orrs	r2, r0
 800083e:	4690      	mov	r8, r2
 8000840:	469c      	mov	ip, r3
 8000842:	0031      	movs	r1, r6
 8000844:	464b      	mov	r3, r9
 8000846:	4079      	eors	r1, r7
 8000848:	1c68      	adds	r0, r5, #1
 800084a:	2b0f      	cmp	r3, #15
 800084c:	d81c      	bhi.n	8000888 <__aeabi_fmul+0xa4>
 800084e:	4a76      	ldr	r2, [pc, #472]	; (8000a28 <__aeabi_fmul+0x244>)
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	58d3      	ldr	r3, [r2, r3]
 8000854:	469f      	mov	pc, r3
 8000856:	0039      	movs	r1, r7
 8000858:	4644      	mov	r4, r8
 800085a:	46e2      	mov	sl, ip
 800085c:	4653      	mov	r3, sl
 800085e:	2b02      	cmp	r3, #2
 8000860:	d00f      	beq.n	8000882 <__aeabi_fmul+0x9e>
 8000862:	2b03      	cmp	r3, #3
 8000864:	d100      	bne.n	8000868 <__aeabi_fmul+0x84>
 8000866:	e0d7      	b.n	8000a18 <__aeabi_fmul+0x234>
 8000868:	2b01      	cmp	r3, #1
 800086a:	d137      	bne.n	80008dc <__aeabi_fmul+0xf8>
 800086c:	2000      	movs	r0, #0
 800086e:	2400      	movs	r4, #0
 8000870:	05c0      	lsls	r0, r0, #23
 8000872:	4320      	orrs	r0, r4
 8000874:	07c9      	lsls	r1, r1, #31
 8000876:	4308      	orrs	r0, r1
 8000878:	bce0      	pop	{r5, r6, r7}
 800087a:	46ba      	mov	sl, r7
 800087c:	46b1      	mov	r9, r6
 800087e:	46a8      	mov	r8, r5
 8000880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000882:	20ff      	movs	r0, #255	; 0xff
 8000884:	2400      	movs	r4, #0
 8000886:	e7f3      	b.n	8000870 <__aeabi_fmul+0x8c>
 8000888:	0c26      	lsrs	r6, r4, #16
 800088a:	0424      	lsls	r4, r4, #16
 800088c:	0c22      	lsrs	r2, r4, #16
 800088e:	4644      	mov	r4, r8
 8000890:	0424      	lsls	r4, r4, #16
 8000892:	0c24      	lsrs	r4, r4, #16
 8000894:	4643      	mov	r3, r8
 8000896:	0027      	movs	r7, r4
 8000898:	0c1b      	lsrs	r3, r3, #16
 800089a:	4357      	muls	r7, r2
 800089c:	4374      	muls	r4, r6
 800089e:	435a      	muls	r2, r3
 80008a0:	435e      	muls	r6, r3
 80008a2:	1912      	adds	r2, r2, r4
 80008a4:	0c3b      	lsrs	r3, r7, #16
 80008a6:	189b      	adds	r3, r3, r2
 80008a8:	429c      	cmp	r4, r3
 80008aa:	d903      	bls.n	80008b4 <__aeabi_fmul+0xd0>
 80008ac:	2280      	movs	r2, #128	; 0x80
 80008ae:	0252      	lsls	r2, r2, #9
 80008b0:	4694      	mov	ip, r2
 80008b2:	4466      	add	r6, ip
 80008b4:	043f      	lsls	r7, r7, #16
 80008b6:	041a      	lsls	r2, r3, #16
 80008b8:	0c3f      	lsrs	r7, r7, #16
 80008ba:	19d2      	adds	r2, r2, r7
 80008bc:	0194      	lsls	r4, r2, #6
 80008be:	1e67      	subs	r7, r4, #1
 80008c0:	41bc      	sbcs	r4, r7
 80008c2:	0c1b      	lsrs	r3, r3, #16
 80008c4:	0e92      	lsrs	r2, r2, #26
 80008c6:	199b      	adds	r3, r3, r6
 80008c8:	4314      	orrs	r4, r2
 80008ca:	019b      	lsls	r3, r3, #6
 80008cc:	431c      	orrs	r4, r3
 80008ce:	011b      	lsls	r3, r3, #4
 80008d0:	d400      	bmi.n	80008d4 <__aeabi_fmul+0xf0>
 80008d2:	e09b      	b.n	8000a0c <__aeabi_fmul+0x228>
 80008d4:	2301      	movs	r3, #1
 80008d6:	0862      	lsrs	r2, r4, #1
 80008d8:	401c      	ands	r4, r3
 80008da:	4314      	orrs	r4, r2
 80008dc:	0002      	movs	r2, r0
 80008de:	327f      	adds	r2, #127	; 0x7f
 80008e0:	2a00      	cmp	r2, #0
 80008e2:	dd64      	ble.n	80009ae <__aeabi_fmul+0x1ca>
 80008e4:	0763      	lsls	r3, r4, #29
 80008e6:	d004      	beq.n	80008f2 <__aeabi_fmul+0x10e>
 80008e8:	230f      	movs	r3, #15
 80008ea:	4023      	ands	r3, r4
 80008ec:	2b04      	cmp	r3, #4
 80008ee:	d000      	beq.n	80008f2 <__aeabi_fmul+0x10e>
 80008f0:	3404      	adds	r4, #4
 80008f2:	0123      	lsls	r3, r4, #4
 80008f4:	d503      	bpl.n	80008fe <__aeabi_fmul+0x11a>
 80008f6:	0002      	movs	r2, r0
 80008f8:	4b4c      	ldr	r3, [pc, #304]	; (8000a2c <__aeabi_fmul+0x248>)
 80008fa:	3280      	adds	r2, #128	; 0x80
 80008fc:	401c      	ands	r4, r3
 80008fe:	2afe      	cmp	r2, #254	; 0xfe
 8000900:	dcbf      	bgt.n	8000882 <__aeabi_fmul+0x9e>
 8000902:	01a4      	lsls	r4, r4, #6
 8000904:	0a64      	lsrs	r4, r4, #9
 8000906:	b2d0      	uxtb	r0, r2
 8000908:	e7b2      	b.n	8000870 <__aeabi_fmul+0x8c>
 800090a:	4643      	mov	r3, r8
 800090c:	2b00      	cmp	r3, #0
 800090e:	d13d      	bne.n	800098c <__aeabi_fmul+0x1a8>
 8000910:	464a      	mov	r2, r9
 8000912:	3301      	adds	r3, #1
 8000914:	431a      	orrs	r2, r3
 8000916:	4691      	mov	r9, r2
 8000918:	469c      	mov	ip, r3
 800091a:	e792      	b.n	8000842 <__aeabi_fmul+0x5e>
 800091c:	2c00      	cmp	r4, #0
 800091e:	d129      	bne.n	8000974 <__aeabi_fmul+0x190>
 8000920:	2304      	movs	r3, #4
 8000922:	4699      	mov	r9, r3
 8000924:	3b03      	subs	r3, #3
 8000926:	2500      	movs	r5, #0
 8000928:	469a      	mov	sl, r3
 800092a:	e774      	b.n	8000816 <__aeabi_fmul+0x32>
 800092c:	2c00      	cmp	r4, #0
 800092e:	d11b      	bne.n	8000968 <__aeabi_fmul+0x184>
 8000930:	2308      	movs	r3, #8
 8000932:	4699      	mov	r9, r3
 8000934:	3b06      	subs	r3, #6
 8000936:	25ff      	movs	r5, #255	; 0xff
 8000938:	469a      	mov	sl, r3
 800093a:	e76c      	b.n	8000816 <__aeabi_fmul+0x32>
 800093c:	4643      	mov	r3, r8
 800093e:	35ff      	adds	r5, #255	; 0xff
 8000940:	2b00      	cmp	r3, #0
 8000942:	d10b      	bne.n	800095c <__aeabi_fmul+0x178>
 8000944:	2302      	movs	r3, #2
 8000946:	464a      	mov	r2, r9
 8000948:	431a      	orrs	r2, r3
 800094a:	4691      	mov	r9, r2
 800094c:	469c      	mov	ip, r3
 800094e:	e778      	b.n	8000842 <__aeabi_fmul+0x5e>
 8000950:	4653      	mov	r3, sl
 8000952:	0031      	movs	r1, r6
 8000954:	2b02      	cmp	r3, #2
 8000956:	d000      	beq.n	800095a <__aeabi_fmul+0x176>
 8000958:	e783      	b.n	8000862 <__aeabi_fmul+0x7e>
 800095a:	e792      	b.n	8000882 <__aeabi_fmul+0x9e>
 800095c:	2303      	movs	r3, #3
 800095e:	464a      	mov	r2, r9
 8000960:	431a      	orrs	r2, r3
 8000962:	4691      	mov	r9, r2
 8000964:	469c      	mov	ip, r3
 8000966:	e76c      	b.n	8000842 <__aeabi_fmul+0x5e>
 8000968:	230c      	movs	r3, #12
 800096a:	4699      	mov	r9, r3
 800096c:	3b09      	subs	r3, #9
 800096e:	25ff      	movs	r5, #255	; 0xff
 8000970:	469a      	mov	sl, r3
 8000972:	e750      	b.n	8000816 <__aeabi_fmul+0x32>
 8000974:	0020      	movs	r0, r4
 8000976:	f002 f823 	bl	80029c0 <__clzsi2>
 800097a:	2576      	movs	r5, #118	; 0x76
 800097c:	1f43      	subs	r3, r0, #5
 800097e:	409c      	lsls	r4, r3
 8000980:	2300      	movs	r3, #0
 8000982:	426d      	negs	r5, r5
 8000984:	4699      	mov	r9, r3
 8000986:	469a      	mov	sl, r3
 8000988:	1a2d      	subs	r5, r5, r0
 800098a:	e744      	b.n	8000816 <__aeabi_fmul+0x32>
 800098c:	4640      	mov	r0, r8
 800098e:	f002 f817 	bl	80029c0 <__clzsi2>
 8000992:	4642      	mov	r2, r8
 8000994:	1f43      	subs	r3, r0, #5
 8000996:	409a      	lsls	r2, r3
 8000998:	2300      	movs	r3, #0
 800099a:	1a2d      	subs	r5, r5, r0
 800099c:	4690      	mov	r8, r2
 800099e:	469c      	mov	ip, r3
 80009a0:	3d76      	subs	r5, #118	; 0x76
 80009a2:	e74e      	b.n	8000842 <__aeabi_fmul+0x5e>
 80009a4:	2480      	movs	r4, #128	; 0x80
 80009a6:	2100      	movs	r1, #0
 80009a8:	20ff      	movs	r0, #255	; 0xff
 80009aa:	03e4      	lsls	r4, r4, #15
 80009ac:	e760      	b.n	8000870 <__aeabi_fmul+0x8c>
 80009ae:	2301      	movs	r3, #1
 80009b0:	1a9b      	subs	r3, r3, r2
 80009b2:	2b1b      	cmp	r3, #27
 80009b4:	dd00      	ble.n	80009b8 <__aeabi_fmul+0x1d4>
 80009b6:	e759      	b.n	800086c <__aeabi_fmul+0x88>
 80009b8:	0022      	movs	r2, r4
 80009ba:	309e      	adds	r0, #158	; 0x9e
 80009bc:	40da      	lsrs	r2, r3
 80009be:	4084      	lsls	r4, r0
 80009c0:	0013      	movs	r3, r2
 80009c2:	1e62      	subs	r2, r4, #1
 80009c4:	4194      	sbcs	r4, r2
 80009c6:	431c      	orrs	r4, r3
 80009c8:	0763      	lsls	r3, r4, #29
 80009ca:	d004      	beq.n	80009d6 <__aeabi_fmul+0x1f2>
 80009cc:	230f      	movs	r3, #15
 80009ce:	4023      	ands	r3, r4
 80009d0:	2b04      	cmp	r3, #4
 80009d2:	d000      	beq.n	80009d6 <__aeabi_fmul+0x1f2>
 80009d4:	3404      	adds	r4, #4
 80009d6:	0163      	lsls	r3, r4, #5
 80009d8:	d51a      	bpl.n	8000a10 <__aeabi_fmul+0x22c>
 80009da:	2001      	movs	r0, #1
 80009dc:	2400      	movs	r4, #0
 80009de:	e747      	b.n	8000870 <__aeabi_fmul+0x8c>
 80009e0:	2080      	movs	r0, #128	; 0x80
 80009e2:	03c0      	lsls	r0, r0, #15
 80009e4:	4204      	tst	r4, r0
 80009e6:	d009      	beq.n	80009fc <__aeabi_fmul+0x218>
 80009e8:	4643      	mov	r3, r8
 80009ea:	4203      	tst	r3, r0
 80009ec:	d106      	bne.n	80009fc <__aeabi_fmul+0x218>
 80009ee:	4644      	mov	r4, r8
 80009f0:	4304      	orrs	r4, r0
 80009f2:	0264      	lsls	r4, r4, #9
 80009f4:	0039      	movs	r1, r7
 80009f6:	20ff      	movs	r0, #255	; 0xff
 80009f8:	0a64      	lsrs	r4, r4, #9
 80009fa:	e739      	b.n	8000870 <__aeabi_fmul+0x8c>
 80009fc:	2080      	movs	r0, #128	; 0x80
 80009fe:	03c0      	lsls	r0, r0, #15
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0264      	lsls	r4, r4, #9
 8000a04:	0031      	movs	r1, r6
 8000a06:	20ff      	movs	r0, #255	; 0xff
 8000a08:	0a64      	lsrs	r4, r4, #9
 8000a0a:	e731      	b.n	8000870 <__aeabi_fmul+0x8c>
 8000a0c:	0028      	movs	r0, r5
 8000a0e:	e765      	b.n	80008dc <__aeabi_fmul+0xf8>
 8000a10:	01a4      	lsls	r4, r4, #6
 8000a12:	2000      	movs	r0, #0
 8000a14:	0a64      	lsrs	r4, r4, #9
 8000a16:	e72b      	b.n	8000870 <__aeabi_fmul+0x8c>
 8000a18:	2080      	movs	r0, #128	; 0x80
 8000a1a:	03c0      	lsls	r0, r0, #15
 8000a1c:	4304      	orrs	r4, r0
 8000a1e:	0264      	lsls	r4, r4, #9
 8000a20:	20ff      	movs	r0, #255	; 0xff
 8000a22:	0a64      	lsrs	r4, r4, #9
 8000a24:	e724      	b.n	8000870 <__aeabi_fmul+0x8c>
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	08006950 	.word	0x08006950
 8000a2c:	f7ffffff 	.word	0xf7ffffff

08000a30 <__aeabi_fsub>:
 8000a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a32:	46ce      	mov	lr, r9
 8000a34:	4647      	mov	r7, r8
 8000a36:	0243      	lsls	r3, r0, #9
 8000a38:	0a5b      	lsrs	r3, r3, #9
 8000a3a:	024e      	lsls	r6, r1, #9
 8000a3c:	00da      	lsls	r2, r3, #3
 8000a3e:	4694      	mov	ip, r2
 8000a40:	0a72      	lsrs	r2, r6, #9
 8000a42:	4691      	mov	r9, r2
 8000a44:	0045      	lsls	r5, r0, #1
 8000a46:	004a      	lsls	r2, r1, #1
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	0e2d      	lsrs	r5, r5, #24
 8000a4c:	001f      	movs	r7, r3
 8000a4e:	0fc4      	lsrs	r4, r0, #31
 8000a50:	0e12      	lsrs	r2, r2, #24
 8000a52:	0fc9      	lsrs	r1, r1, #31
 8000a54:	09b6      	lsrs	r6, r6, #6
 8000a56:	2aff      	cmp	r2, #255	; 0xff
 8000a58:	d05b      	beq.n	8000b12 <__aeabi_fsub+0xe2>
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	4041      	eors	r1, r0
 8000a5e:	428c      	cmp	r4, r1
 8000a60:	d039      	beq.n	8000ad6 <__aeabi_fsub+0xa6>
 8000a62:	1aa8      	subs	r0, r5, r2
 8000a64:	2800      	cmp	r0, #0
 8000a66:	dd5a      	ble.n	8000b1e <__aeabi_fsub+0xee>
 8000a68:	2a00      	cmp	r2, #0
 8000a6a:	d06a      	beq.n	8000b42 <__aeabi_fsub+0x112>
 8000a6c:	2dff      	cmp	r5, #255	; 0xff
 8000a6e:	d100      	bne.n	8000a72 <__aeabi_fsub+0x42>
 8000a70:	e0d9      	b.n	8000c26 <__aeabi_fsub+0x1f6>
 8000a72:	2280      	movs	r2, #128	; 0x80
 8000a74:	04d2      	lsls	r2, r2, #19
 8000a76:	4316      	orrs	r6, r2
 8000a78:	281b      	cmp	r0, #27
 8000a7a:	dc00      	bgt.n	8000a7e <__aeabi_fsub+0x4e>
 8000a7c:	e0e9      	b.n	8000c52 <__aeabi_fsub+0x222>
 8000a7e:	2001      	movs	r0, #1
 8000a80:	4663      	mov	r3, ip
 8000a82:	1a18      	subs	r0, r3, r0
 8000a84:	0143      	lsls	r3, r0, #5
 8000a86:	d400      	bmi.n	8000a8a <__aeabi_fsub+0x5a>
 8000a88:	e0b4      	b.n	8000bf4 <__aeabi_fsub+0x1c4>
 8000a8a:	0180      	lsls	r0, r0, #6
 8000a8c:	0987      	lsrs	r7, r0, #6
 8000a8e:	0038      	movs	r0, r7
 8000a90:	f001 ff96 	bl	80029c0 <__clzsi2>
 8000a94:	3805      	subs	r0, #5
 8000a96:	4087      	lsls	r7, r0
 8000a98:	4285      	cmp	r5, r0
 8000a9a:	dc00      	bgt.n	8000a9e <__aeabi_fsub+0x6e>
 8000a9c:	e0cc      	b.n	8000c38 <__aeabi_fsub+0x208>
 8000a9e:	1a2d      	subs	r5, r5, r0
 8000aa0:	48b5      	ldr	r0, [pc, #724]	; (8000d78 <__aeabi_fsub+0x348>)
 8000aa2:	4038      	ands	r0, r7
 8000aa4:	0743      	lsls	r3, r0, #29
 8000aa6:	d004      	beq.n	8000ab2 <__aeabi_fsub+0x82>
 8000aa8:	230f      	movs	r3, #15
 8000aaa:	4003      	ands	r3, r0
 8000aac:	2b04      	cmp	r3, #4
 8000aae:	d000      	beq.n	8000ab2 <__aeabi_fsub+0x82>
 8000ab0:	3004      	adds	r0, #4
 8000ab2:	0143      	lsls	r3, r0, #5
 8000ab4:	d400      	bmi.n	8000ab8 <__aeabi_fsub+0x88>
 8000ab6:	e0a0      	b.n	8000bfa <__aeabi_fsub+0x1ca>
 8000ab8:	1c6a      	adds	r2, r5, #1
 8000aba:	2dfe      	cmp	r5, #254	; 0xfe
 8000abc:	d100      	bne.n	8000ac0 <__aeabi_fsub+0x90>
 8000abe:	e08d      	b.n	8000bdc <__aeabi_fsub+0x1ac>
 8000ac0:	0180      	lsls	r0, r0, #6
 8000ac2:	0a47      	lsrs	r7, r0, #9
 8000ac4:	b2d2      	uxtb	r2, r2
 8000ac6:	05d0      	lsls	r0, r2, #23
 8000ac8:	4338      	orrs	r0, r7
 8000aca:	07e4      	lsls	r4, r4, #31
 8000acc:	4320      	orrs	r0, r4
 8000ace:	bcc0      	pop	{r6, r7}
 8000ad0:	46b9      	mov	r9, r7
 8000ad2:	46b0      	mov	r8, r6
 8000ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ad6:	1aa8      	subs	r0, r5, r2
 8000ad8:	4680      	mov	r8, r0
 8000ada:	2800      	cmp	r0, #0
 8000adc:	dd45      	ble.n	8000b6a <__aeabi_fsub+0x13a>
 8000ade:	2a00      	cmp	r2, #0
 8000ae0:	d070      	beq.n	8000bc4 <__aeabi_fsub+0x194>
 8000ae2:	2dff      	cmp	r5, #255	; 0xff
 8000ae4:	d100      	bne.n	8000ae8 <__aeabi_fsub+0xb8>
 8000ae6:	e09e      	b.n	8000c26 <__aeabi_fsub+0x1f6>
 8000ae8:	2380      	movs	r3, #128	; 0x80
 8000aea:	04db      	lsls	r3, r3, #19
 8000aec:	431e      	orrs	r6, r3
 8000aee:	4643      	mov	r3, r8
 8000af0:	2b1b      	cmp	r3, #27
 8000af2:	dc00      	bgt.n	8000af6 <__aeabi_fsub+0xc6>
 8000af4:	e0d2      	b.n	8000c9c <__aeabi_fsub+0x26c>
 8000af6:	2001      	movs	r0, #1
 8000af8:	4460      	add	r0, ip
 8000afa:	0143      	lsls	r3, r0, #5
 8000afc:	d57a      	bpl.n	8000bf4 <__aeabi_fsub+0x1c4>
 8000afe:	3501      	adds	r5, #1
 8000b00:	2dff      	cmp	r5, #255	; 0xff
 8000b02:	d06b      	beq.n	8000bdc <__aeabi_fsub+0x1ac>
 8000b04:	2301      	movs	r3, #1
 8000b06:	4a9d      	ldr	r2, [pc, #628]	; (8000d7c <__aeabi_fsub+0x34c>)
 8000b08:	4003      	ands	r3, r0
 8000b0a:	0840      	lsrs	r0, r0, #1
 8000b0c:	4010      	ands	r0, r2
 8000b0e:	4318      	orrs	r0, r3
 8000b10:	e7c8      	b.n	8000aa4 <__aeabi_fsub+0x74>
 8000b12:	2e00      	cmp	r6, #0
 8000b14:	d020      	beq.n	8000b58 <__aeabi_fsub+0x128>
 8000b16:	428c      	cmp	r4, r1
 8000b18:	d023      	beq.n	8000b62 <__aeabi_fsub+0x132>
 8000b1a:	0028      	movs	r0, r5
 8000b1c:	38ff      	subs	r0, #255	; 0xff
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	d039      	beq.n	8000b96 <__aeabi_fsub+0x166>
 8000b22:	1b57      	subs	r7, r2, r5
 8000b24:	2d00      	cmp	r5, #0
 8000b26:	d000      	beq.n	8000b2a <__aeabi_fsub+0xfa>
 8000b28:	e09d      	b.n	8000c66 <__aeabi_fsub+0x236>
 8000b2a:	4663      	mov	r3, ip
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d100      	bne.n	8000b32 <__aeabi_fsub+0x102>
 8000b30:	e0db      	b.n	8000cea <__aeabi_fsub+0x2ba>
 8000b32:	1e7b      	subs	r3, r7, #1
 8000b34:	2f01      	cmp	r7, #1
 8000b36:	d100      	bne.n	8000b3a <__aeabi_fsub+0x10a>
 8000b38:	e10d      	b.n	8000d56 <__aeabi_fsub+0x326>
 8000b3a:	2fff      	cmp	r7, #255	; 0xff
 8000b3c:	d071      	beq.n	8000c22 <__aeabi_fsub+0x1f2>
 8000b3e:	001f      	movs	r7, r3
 8000b40:	e098      	b.n	8000c74 <__aeabi_fsub+0x244>
 8000b42:	2e00      	cmp	r6, #0
 8000b44:	d100      	bne.n	8000b48 <__aeabi_fsub+0x118>
 8000b46:	e0a7      	b.n	8000c98 <__aeabi_fsub+0x268>
 8000b48:	1e42      	subs	r2, r0, #1
 8000b4a:	2801      	cmp	r0, #1
 8000b4c:	d100      	bne.n	8000b50 <__aeabi_fsub+0x120>
 8000b4e:	e0e6      	b.n	8000d1e <__aeabi_fsub+0x2ee>
 8000b50:	28ff      	cmp	r0, #255	; 0xff
 8000b52:	d068      	beq.n	8000c26 <__aeabi_fsub+0x1f6>
 8000b54:	0010      	movs	r0, r2
 8000b56:	e78f      	b.n	8000a78 <__aeabi_fsub+0x48>
 8000b58:	2001      	movs	r0, #1
 8000b5a:	4041      	eors	r1, r0
 8000b5c:	42a1      	cmp	r1, r4
 8000b5e:	d000      	beq.n	8000b62 <__aeabi_fsub+0x132>
 8000b60:	e77f      	b.n	8000a62 <__aeabi_fsub+0x32>
 8000b62:	20ff      	movs	r0, #255	; 0xff
 8000b64:	4240      	negs	r0, r0
 8000b66:	4680      	mov	r8, r0
 8000b68:	44a8      	add	r8, r5
 8000b6a:	4640      	mov	r0, r8
 8000b6c:	2800      	cmp	r0, #0
 8000b6e:	d038      	beq.n	8000be2 <__aeabi_fsub+0x1b2>
 8000b70:	1b51      	subs	r1, r2, r5
 8000b72:	2d00      	cmp	r5, #0
 8000b74:	d100      	bne.n	8000b78 <__aeabi_fsub+0x148>
 8000b76:	e0ae      	b.n	8000cd6 <__aeabi_fsub+0x2a6>
 8000b78:	2aff      	cmp	r2, #255	; 0xff
 8000b7a:	d100      	bne.n	8000b7e <__aeabi_fsub+0x14e>
 8000b7c:	e0df      	b.n	8000d3e <__aeabi_fsub+0x30e>
 8000b7e:	2380      	movs	r3, #128	; 0x80
 8000b80:	4660      	mov	r0, ip
 8000b82:	04db      	lsls	r3, r3, #19
 8000b84:	4318      	orrs	r0, r3
 8000b86:	4684      	mov	ip, r0
 8000b88:	291b      	cmp	r1, #27
 8000b8a:	dc00      	bgt.n	8000b8e <__aeabi_fsub+0x15e>
 8000b8c:	e0d9      	b.n	8000d42 <__aeabi_fsub+0x312>
 8000b8e:	2001      	movs	r0, #1
 8000b90:	0015      	movs	r5, r2
 8000b92:	1980      	adds	r0, r0, r6
 8000b94:	e7b1      	b.n	8000afa <__aeabi_fsub+0xca>
 8000b96:	20fe      	movs	r0, #254	; 0xfe
 8000b98:	1c6a      	adds	r2, r5, #1
 8000b9a:	4210      	tst	r0, r2
 8000b9c:	d171      	bne.n	8000c82 <__aeabi_fsub+0x252>
 8000b9e:	2d00      	cmp	r5, #0
 8000ba0:	d000      	beq.n	8000ba4 <__aeabi_fsub+0x174>
 8000ba2:	e0a6      	b.n	8000cf2 <__aeabi_fsub+0x2c2>
 8000ba4:	4663      	mov	r3, ip
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d100      	bne.n	8000bac <__aeabi_fsub+0x17c>
 8000baa:	e0d9      	b.n	8000d60 <__aeabi_fsub+0x330>
 8000bac:	2200      	movs	r2, #0
 8000bae:	2e00      	cmp	r6, #0
 8000bb0:	d100      	bne.n	8000bb4 <__aeabi_fsub+0x184>
 8000bb2:	e788      	b.n	8000ac6 <__aeabi_fsub+0x96>
 8000bb4:	1b98      	subs	r0, r3, r6
 8000bb6:	0143      	lsls	r3, r0, #5
 8000bb8:	d400      	bmi.n	8000bbc <__aeabi_fsub+0x18c>
 8000bba:	e0e1      	b.n	8000d80 <__aeabi_fsub+0x350>
 8000bbc:	4663      	mov	r3, ip
 8000bbe:	000c      	movs	r4, r1
 8000bc0:	1af0      	subs	r0, r6, r3
 8000bc2:	e76f      	b.n	8000aa4 <__aeabi_fsub+0x74>
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	d100      	bne.n	8000bca <__aeabi_fsub+0x19a>
 8000bc8:	e0b7      	b.n	8000d3a <__aeabi_fsub+0x30a>
 8000bca:	0002      	movs	r2, r0
 8000bcc:	3a01      	subs	r2, #1
 8000bce:	2801      	cmp	r0, #1
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_fsub+0x1a4>
 8000bd2:	e09c      	b.n	8000d0e <__aeabi_fsub+0x2de>
 8000bd4:	28ff      	cmp	r0, #255	; 0xff
 8000bd6:	d026      	beq.n	8000c26 <__aeabi_fsub+0x1f6>
 8000bd8:	4690      	mov	r8, r2
 8000bda:	e788      	b.n	8000aee <__aeabi_fsub+0xbe>
 8000bdc:	22ff      	movs	r2, #255	; 0xff
 8000bde:	2700      	movs	r7, #0
 8000be0:	e771      	b.n	8000ac6 <__aeabi_fsub+0x96>
 8000be2:	20fe      	movs	r0, #254	; 0xfe
 8000be4:	1c6a      	adds	r2, r5, #1
 8000be6:	4210      	tst	r0, r2
 8000be8:	d064      	beq.n	8000cb4 <__aeabi_fsub+0x284>
 8000bea:	2aff      	cmp	r2, #255	; 0xff
 8000bec:	d0f6      	beq.n	8000bdc <__aeabi_fsub+0x1ac>
 8000bee:	0015      	movs	r5, r2
 8000bf0:	4466      	add	r6, ip
 8000bf2:	0870      	lsrs	r0, r6, #1
 8000bf4:	0743      	lsls	r3, r0, #29
 8000bf6:	d000      	beq.n	8000bfa <__aeabi_fsub+0x1ca>
 8000bf8:	e756      	b.n	8000aa8 <__aeabi_fsub+0x78>
 8000bfa:	08c3      	lsrs	r3, r0, #3
 8000bfc:	2dff      	cmp	r5, #255	; 0xff
 8000bfe:	d012      	beq.n	8000c26 <__aeabi_fsub+0x1f6>
 8000c00:	025b      	lsls	r3, r3, #9
 8000c02:	0a5f      	lsrs	r7, r3, #9
 8000c04:	b2ea      	uxtb	r2, r5
 8000c06:	e75e      	b.n	8000ac6 <__aeabi_fsub+0x96>
 8000c08:	4662      	mov	r2, ip
 8000c0a:	2a00      	cmp	r2, #0
 8000c0c:	d100      	bne.n	8000c10 <__aeabi_fsub+0x1e0>
 8000c0e:	e096      	b.n	8000d3e <__aeabi_fsub+0x30e>
 8000c10:	2e00      	cmp	r6, #0
 8000c12:	d008      	beq.n	8000c26 <__aeabi_fsub+0x1f6>
 8000c14:	2280      	movs	r2, #128	; 0x80
 8000c16:	03d2      	lsls	r2, r2, #15
 8000c18:	4213      	tst	r3, r2
 8000c1a:	d004      	beq.n	8000c26 <__aeabi_fsub+0x1f6>
 8000c1c:	4648      	mov	r0, r9
 8000c1e:	4210      	tst	r0, r2
 8000c20:	d101      	bne.n	8000c26 <__aeabi_fsub+0x1f6>
 8000c22:	000c      	movs	r4, r1
 8000c24:	464b      	mov	r3, r9
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d0d8      	beq.n	8000bdc <__aeabi_fsub+0x1ac>
 8000c2a:	2780      	movs	r7, #128	; 0x80
 8000c2c:	03ff      	lsls	r7, r7, #15
 8000c2e:	431f      	orrs	r7, r3
 8000c30:	027f      	lsls	r7, r7, #9
 8000c32:	22ff      	movs	r2, #255	; 0xff
 8000c34:	0a7f      	lsrs	r7, r7, #9
 8000c36:	e746      	b.n	8000ac6 <__aeabi_fsub+0x96>
 8000c38:	2320      	movs	r3, #32
 8000c3a:	003a      	movs	r2, r7
 8000c3c:	1b45      	subs	r5, r0, r5
 8000c3e:	0038      	movs	r0, r7
 8000c40:	3501      	adds	r5, #1
 8000c42:	40ea      	lsrs	r2, r5
 8000c44:	1b5d      	subs	r5, r3, r5
 8000c46:	40a8      	lsls	r0, r5
 8000c48:	1e43      	subs	r3, r0, #1
 8000c4a:	4198      	sbcs	r0, r3
 8000c4c:	2500      	movs	r5, #0
 8000c4e:	4310      	orrs	r0, r2
 8000c50:	e728      	b.n	8000aa4 <__aeabi_fsub+0x74>
 8000c52:	2320      	movs	r3, #32
 8000c54:	1a1b      	subs	r3, r3, r0
 8000c56:	0032      	movs	r2, r6
 8000c58:	409e      	lsls	r6, r3
 8000c5a:	40c2      	lsrs	r2, r0
 8000c5c:	0030      	movs	r0, r6
 8000c5e:	1e43      	subs	r3, r0, #1
 8000c60:	4198      	sbcs	r0, r3
 8000c62:	4310      	orrs	r0, r2
 8000c64:	e70c      	b.n	8000a80 <__aeabi_fsub+0x50>
 8000c66:	2aff      	cmp	r2, #255	; 0xff
 8000c68:	d0db      	beq.n	8000c22 <__aeabi_fsub+0x1f2>
 8000c6a:	2380      	movs	r3, #128	; 0x80
 8000c6c:	4660      	mov	r0, ip
 8000c6e:	04db      	lsls	r3, r3, #19
 8000c70:	4318      	orrs	r0, r3
 8000c72:	4684      	mov	ip, r0
 8000c74:	2f1b      	cmp	r7, #27
 8000c76:	dd56      	ble.n	8000d26 <__aeabi_fsub+0x2f6>
 8000c78:	2001      	movs	r0, #1
 8000c7a:	000c      	movs	r4, r1
 8000c7c:	0015      	movs	r5, r2
 8000c7e:	1a30      	subs	r0, r6, r0
 8000c80:	e700      	b.n	8000a84 <__aeabi_fsub+0x54>
 8000c82:	4663      	mov	r3, ip
 8000c84:	1b9f      	subs	r7, r3, r6
 8000c86:	017b      	lsls	r3, r7, #5
 8000c88:	d43d      	bmi.n	8000d06 <__aeabi_fsub+0x2d6>
 8000c8a:	2f00      	cmp	r7, #0
 8000c8c:	d000      	beq.n	8000c90 <__aeabi_fsub+0x260>
 8000c8e:	e6fe      	b.n	8000a8e <__aeabi_fsub+0x5e>
 8000c90:	2400      	movs	r4, #0
 8000c92:	2200      	movs	r2, #0
 8000c94:	2700      	movs	r7, #0
 8000c96:	e716      	b.n	8000ac6 <__aeabi_fsub+0x96>
 8000c98:	0005      	movs	r5, r0
 8000c9a:	e7af      	b.n	8000bfc <__aeabi_fsub+0x1cc>
 8000c9c:	0032      	movs	r2, r6
 8000c9e:	4643      	mov	r3, r8
 8000ca0:	4641      	mov	r1, r8
 8000ca2:	40da      	lsrs	r2, r3
 8000ca4:	2320      	movs	r3, #32
 8000ca6:	1a5b      	subs	r3, r3, r1
 8000ca8:	409e      	lsls	r6, r3
 8000caa:	0030      	movs	r0, r6
 8000cac:	1e43      	subs	r3, r0, #1
 8000cae:	4198      	sbcs	r0, r3
 8000cb0:	4310      	orrs	r0, r2
 8000cb2:	e721      	b.n	8000af8 <__aeabi_fsub+0xc8>
 8000cb4:	2d00      	cmp	r5, #0
 8000cb6:	d1a7      	bne.n	8000c08 <__aeabi_fsub+0x1d8>
 8000cb8:	4663      	mov	r3, ip
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d059      	beq.n	8000d72 <__aeabi_fsub+0x342>
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d100      	bne.n	8000cc6 <__aeabi_fsub+0x296>
 8000cc4:	e6ff      	b.n	8000ac6 <__aeabi_fsub+0x96>
 8000cc6:	0030      	movs	r0, r6
 8000cc8:	4460      	add	r0, ip
 8000cca:	0143      	lsls	r3, r0, #5
 8000ccc:	d592      	bpl.n	8000bf4 <__aeabi_fsub+0x1c4>
 8000cce:	4b2a      	ldr	r3, [pc, #168]	; (8000d78 <__aeabi_fsub+0x348>)
 8000cd0:	3501      	adds	r5, #1
 8000cd2:	4018      	ands	r0, r3
 8000cd4:	e78e      	b.n	8000bf4 <__aeabi_fsub+0x1c4>
 8000cd6:	4663      	mov	r3, ip
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d047      	beq.n	8000d6c <__aeabi_fsub+0x33c>
 8000cdc:	1e4b      	subs	r3, r1, #1
 8000cde:	2901      	cmp	r1, #1
 8000ce0:	d015      	beq.n	8000d0e <__aeabi_fsub+0x2de>
 8000ce2:	29ff      	cmp	r1, #255	; 0xff
 8000ce4:	d02b      	beq.n	8000d3e <__aeabi_fsub+0x30e>
 8000ce6:	0019      	movs	r1, r3
 8000ce8:	e74e      	b.n	8000b88 <__aeabi_fsub+0x158>
 8000cea:	000c      	movs	r4, r1
 8000cec:	464b      	mov	r3, r9
 8000cee:	003d      	movs	r5, r7
 8000cf0:	e784      	b.n	8000bfc <__aeabi_fsub+0x1cc>
 8000cf2:	4662      	mov	r2, ip
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	d18b      	bne.n	8000c10 <__aeabi_fsub+0x1e0>
 8000cf8:	2e00      	cmp	r6, #0
 8000cfa:	d192      	bne.n	8000c22 <__aeabi_fsub+0x1f2>
 8000cfc:	2780      	movs	r7, #128	; 0x80
 8000cfe:	2400      	movs	r4, #0
 8000d00:	22ff      	movs	r2, #255	; 0xff
 8000d02:	03ff      	lsls	r7, r7, #15
 8000d04:	e6df      	b.n	8000ac6 <__aeabi_fsub+0x96>
 8000d06:	4663      	mov	r3, ip
 8000d08:	000c      	movs	r4, r1
 8000d0a:	1af7      	subs	r7, r6, r3
 8000d0c:	e6bf      	b.n	8000a8e <__aeabi_fsub+0x5e>
 8000d0e:	0030      	movs	r0, r6
 8000d10:	4460      	add	r0, ip
 8000d12:	2501      	movs	r5, #1
 8000d14:	0143      	lsls	r3, r0, #5
 8000d16:	d400      	bmi.n	8000d1a <__aeabi_fsub+0x2ea>
 8000d18:	e76c      	b.n	8000bf4 <__aeabi_fsub+0x1c4>
 8000d1a:	2502      	movs	r5, #2
 8000d1c:	e6f2      	b.n	8000b04 <__aeabi_fsub+0xd4>
 8000d1e:	4663      	mov	r3, ip
 8000d20:	2501      	movs	r5, #1
 8000d22:	1b98      	subs	r0, r3, r6
 8000d24:	e6ae      	b.n	8000a84 <__aeabi_fsub+0x54>
 8000d26:	2320      	movs	r3, #32
 8000d28:	4664      	mov	r4, ip
 8000d2a:	4660      	mov	r0, ip
 8000d2c:	40fc      	lsrs	r4, r7
 8000d2e:	1bdf      	subs	r7, r3, r7
 8000d30:	40b8      	lsls	r0, r7
 8000d32:	1e43      	subs	r3, r0, #1
 8000d34:	4198      	sbcs	r0, r3
 8000d36:	4320      	orrs	r0, r4
 8000d38:	e79f      	b.n	8000c7a <__aeabi_fsub+0x24a>
 8000d3a:	0005      	movs	r5, r0
 8000d3c:	e75e      	b.n	8000bfc <__aeabi_fsub+0x1cc>
 8000d3e:	464b      	mov	r3, r9
 8000d40:	e771      	b.n	8000c26 <__aeabi_fsub+0x1f6>
 8000d42:	2320      	movs	r3, #32
 8000d44:	4665      	mov	r5, ip
 8000d46:	4660      	mov	r0, ip
 8000d48:	40cd      	lsrs	r5, r1
 8000d4a:	1a59      	subs	r1, r3, r1
 8000d4c:	4088      	lsls	r0, r1
 8000d4e:	1e43      	subs	r3, r0, #1
 8000d50:	4198      	sbcs	r0, r3
 8000d52:	4328      	orrs	r0, r5
 8000d54:	e71c      	b.n	8000b90 <__aeabi_fsub+0x160>
 8000d56:	4663      	mov	r3, ip
 8000d58:	000c      	movs	r4, r1
 8000d5a:	2501      	movs	r5, #1
 8000d5c:	1af0      	subs	r0, r6, r3
 8000d5e:	e691      	b.n	8000a84 <__aeabi_fsub+0x54>
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d095      	beq.n	8000c90 <__aeabi_fsub+0x260>
 8000d64:	000c      	movs	r4, r1
 8000d66:	464f      	mov	r7, r9
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e6ac      	b.n	8000ac6 <__aeabi_fsub+0x96>
 8000d6c:	464b      	mov	r3, r9
 8000d6e:	000d      	movs	r5, r1
 8000d70:	e744      	b.n	8000bfc <__aeabi_fsub+0x1cc>
 8000d72:	464f      	mov	r7, r9
 8000d74:	2200      	movs	r2, #0
 8000d76:	e6a6      	b.n	8000ac6 <__aeabi_fsub+0x96>
 8000d78:	fbffffff 	.word	0xfbffffff
 8000d7c:	7dffffff 	.word	0x7dffffff
 8000d80:	2800      	cmp	r0, #0
 8000d82:	d000      	beq.n	8000d86 <__aeabi_fsub+0x356>
 8000d84:	e736      	b.n	8000bf4 <__aeabi_fsub+0x1c4>
 8000d86:	2400      	movs	r4, #0
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e69c      	b.n	8000ac6 <__aeabi_fsub+0x96>

08000d8c <__aeabi_f2iz>:
 8000d8c:	0241      	lsls	r1, r0, #9
 8000d8e:	0042      	lsls	r2, r0, #1
 8000d90:	0fc3      	lsrs	r3, r0, #31
 8000d92:	0a49      	lsrs	r1, r1, #9
 8000d94:	2000      	movs	r0, #0
 8000d96:	0e12      	lsrs	r2, r2, #24
 8000d98:	2a7e      	cmp	r2, #126	; 0x7e
 8000d9a:	dd03      	ble.n	8000da4 <__aeabi_f2iz+0x18>
 8000d9c:	2a9d      	cmp	r2, #157	; 0x9d
 8000d9e:	dd02      	ble.n	8000da6 <__aeabi_f2iz+0x1a>
 8000da0:	4a09      	ldr	r2, [pc, #36]	; (8000dc8 <__aeabi_f2iz+0x3c>)
 8000da2:	1898      	adds	r0, r3, r2
 8000da4:	4770      	bx	lr
 8000da6:	2080      	movs	r0, #128	; 0x80
 8000da8:	0400      	lsls	r0, r0, #16
 8000daa:	4301      	orrs	r1, r0
 8000dac:	2a95      	cmp	r2, #149	; 0x95
 8000dae:	dc07      	bgt.n	8000dc0 <__aeabi_f2iz+0x34>
 8000db0:	2096      	movs	r0, #150	; 0x96
 8000db2:	1a82      	subs	r2, r0, r2
 8000db4:	40d1      	lsrs	r1, r2
 8000db6:	4248      	negs	r0, r1
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1f3      	bne.n	8000da4 <__aeabi_f2iz+0x18>
 8000dbc:	0008      	movs	r0, r1
 8000dbe:	e7f1      	b.n	8000da4 <__aeabi_f2iz+0x18>
 8000dc0:	3a96      	subs	r2, #150	; 0x96
 8000dc2:	4091      	lsls	r1, r2
 8000dc4:	e7f7      	b.n	8000db6 <__aeabi_f2iz+0x2a>
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	7fffffff 	.word	0x7fffffff

08000dcc <__aeabi_i2f>:
 8000dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dce:	2800      	cmp	r0, #0
 8000dd0:	d013      	beq.n	8000dfa <__aeabi_i2f+0x2e>
 8000dd2:	17c3      	asrs	r3, r0, #31
 8000dd4:	18c6      	adds	r6, r0, r3
 8000dd6:	405e      	eors	r6, r3
 8000dd8:	0fc4      	lsrs	r4, r0, #31
 8000dda:	0030      	movs	r0, r6
 8000ddc:	f001 fdf0 	bl	80029c0 <__clzsi2>
 8000de0:	239e      	movs	r3, #158	; 0x9e
 8000de2:	0005      	movs	r5, r0
 8000de4:	1a1b      	subs	r3, r3, r0
 8000de6:	2b96      	cmp	r3, #150	; 0x96
 8000de8:	dc0f      	bgt.n	8000e0a <__aeabi_i2f+0x3e>
 8000dea:	2808      	cmp	r0, #8
 8000dec:	dd01      	ble.n	8000df2 <__aeabi_i2f+0x26>
 8000dee:	3d08      	subs	r5, #8
 8000df0:	40ae      	lsls	r6, r5
 8000df2:	0276      	lsls	r6, r6, #9
 8000df4:	0a76      	lsrs	r6, r6, #9
 8000df6:	b2d8      	uxtb	r0, r3
 8000df8:	e002      	b.n	8000e00 <__aeabi_i2f+0x34>
 8000dfa:	2400      	movs	r4, #0
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	2600      	movs	r6, #0
 8000e00:	05c0      	lsls	r0, r0, #23
 8000e02:	4330      	orrs	r0, r6
 8000e04:	07e4      	lsls	r4, r4, #31
 8000e06:	4320      	orrs	r0, r4
 8000e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e0a:	2b99      	cmp	r3, #153	; 0x99
 8000e0c:	dd0c      	ble.n	8000e28 <__aeabi_i2f+0x5c>
 8000e0e:	2205      	movs	r2, #5
 8000e10:	0031      	movs	r1, r6
 8000e12:	1a12      	subs	r2, r2, r0
 8000e14:	40d1      	lsrs	r1, r2
 8000e16:	000a      	movs	r2, r1
 8000e18:	0001      	movs	r1, r0
 8000e1a:	0030      	movs	r0, r6
 8000e1c:	311b      	adds	r1, #27
 8000e1e:	4088      	lsls	r0, r1
 8000e20:	1e41      	subs	r1, r0, #1
 8000e22:	4188      	sbcs	r0, r1
 8000e24:	4302      	orrs	r2, r0
 8000e26:	0016      	movs	r6, r2
 8000e28:	2d05      	cmp	r5, #5
 8000e2a:	dc12      	bgt.n	8000e52 <__aeabi_i2f+0x86>
 8000e2c:	0031      	movs	r1, r6
 8000e2e:	4f0d      	ldr	r7, [pc, #52]	; (8000e64 <__aeabi_i2f+0x98>)
 8000e30:	4039      	ands	r1, r7
 8000e32:	0772      	lsls	r2, r6, #29
 8000e34:	d009      	beq.n	8000e4a <__aeabi_i2f+0x7e>
 8000e36:	200f      	movs	r0, #15
 8000e38:	4030      	ands	r0, r6
 8000e3a:	2804      	cmp	r0, #4
 8000e3c:	d005      	beq.n	8000e4a <__aeabi_i2f+0x7e>
 8000e3e:	3104      	adds	r1, #4
 8000e40:	014a      	lsls	r2, r1, #5
 8000e42:	d502      	bpl.n	8000e4a <__aeabi_i2f+0x7e>
 8000e44:	239f      	movs	r3, #159	; 0x9f
 8000e46:	4039      	ands	r1, r7
 8000e48:	1b5b      	subs	r3, r3, r5
 8000e4a:	0189      	lsls	r1, r1, #6
 8000e4c:	0a4e      	lsrs	r6, r1, #9
 8000e4e:	b2d8      	uxtb	r0, r3
 8000e50:	e7d6      	b.n	8000e00 <__aeabi_i2f+0x34>
 8000e52:	1f6a      	subs	r2, r5, #5
 8000e54:	4096      	lsls	r6, r2
 8000e56:	0031      	movs	r1, r6
 8000e58:	4f02      	ldr	r7, [pc, #8]	; (8000e64 <__aeabi_i2f+0x98>)
 8000e5a:	4039      	ands	r1, r7
 8000e5c:	0772      	lsls	r2, r6, #29
 8000e5e:	d0f4      	beq.n	8000e4a <__aeabi_i2f+0x7e>
 8000e60:	e7e9      	b.n	8000e36 <__aeabi_i2f+0x6a>
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	fbffffff 	.word	0xfbffffff

08000e68 <__aeabi_ui2f>:
 8000e68:	b570      	push	{r4, r5, r6, lr}
 8000e6a:	1e05      	subs	r5, r0, #0
 8000e6c:	d00e      	beq.n	8000e8c <__aeabi_ui2f+0x24>
 8000e6e:	f001 fda7 	bl	80029c0 <__clzsi2>
 8000e72:	239e      	movs	r3, #158	; 0x9e
 8000e74:	0004      	movs	r4, r0
 8000e76:	1a1b      	subs	r3, r3, r0
 8000e78:	2b96      	cmp	r3, #150	; 0x96
 8000e7a:	dc0c      	bgt.n	8000e96 <__aeabi_ui2f+0x2e>
 8000e7c:	2808      	cmp	r0, #8
 8000e7e:	dd01      	ble.n	8000e84 <__aeabi_ui2f+0x1c>
 8000e80:	3c08      	subs	r4, #8
 8000e82:	40a5      	lsls	r5, r4
 8000e84:	026d      	lsls	r5, r5, #9
 8000e86:	0a6d      	lsrs	r5, r5, #9
 8000e88:	b2d8      	uxtb	r0, r3
 8000e8a:	e001      	b.n	8000e90 <__aeabi_ui2f+0x28>
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	2500      	movs	r5, #0
 8000e90:	05c0      	lsls	r0, r0, #23
 8000e92:	4328      	orrs	r0, r5
 8000e94:	bd70      	pop	{r4, r5, r6, pc}
 8000e96:	2b99      	cmp	r3, #153	; 0x99
 8000e98:	dd09      	ble.n	8000eae <__aeabi_ui2f+0x46>
 8000e9a:	0002      	movs	r2, r0
 8000e9c:	0029      	movs	r1, r5
 8000e9e:	321b      	adds	r2, #27
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	1e4a      	subs	r2, r1, #1
 8000ea4:	4191      	sbcs	r1, r2
 8000ea6:	2205      	movs	r2, #5
 8000ea8:	1a12      	subs	r2, r2, r0
 8000eaa:	40d5      	lsrs	r5, r2
 8000eac:	430d      	orrs	r5, r1
 8000eae:	2c05      	cmp	r4, #5
 8000eb0:	dc12      	bgt.n	8000ed8 <__aeabi_ui2f+0x70>
 8000eb2:	0029      	movs	r1, r5
 8000eb4:	4e0c      	ldr	r6, [pc, #48]	; (8000ee8 <__aeabi_ui2f+0x80>)
 8000eb6:	4031      	ands	r1, r6
 8000eb8:	076a      	lsls	r2, r5, #29
 8000eba:	d009      	beq.n	8000ed0 <__aeabi_ui2f+0x68>
 8000ebc:	200f      	movs	r0, #15
 8000ebe:	4028      	ands	r0, r5
 8000ec0:	2804      	cmp	r0, #4
 8000ec2:	d005      	beq.n	8000ed0 <__aeabi_ui2f+0x68>
 8000ec4:	3104      	adds	r1, #4
 8000ec6:	014a      	lsls	r2, r1, #5
 8000ec8:	d502      	bpl.n	8000ed0 <__aeabi_ui2f+0x68>
 8000eca:	239f      	movs	r3, #159	; 0x9f
 8000ecc:	4031      	ands	r1, r6
 8000ece:	1b1b      	subs	r3, r3, r4
 8000ed0:	0189      	lsls	r1, r1, #6
 8000ed2:	0a4d      	lsrs	r5, r1, #9
 8000ed4:	b2d8      	uxtb	r0, r3
 8000ed6:	e7db      	b.n	8000e90 <__aeabi_ui2f+0x28>
 8000ed8:	1f62      	subs	r2, r4, #5
 8000eda:	4095      	lsls	r5, r2
 8000edc:	0029      	movs	r1, r5
 8000ede:	4e02      	ldr	r6, [pc, #8]	; (8000ee8 <__aeabi_ui2f+0x80>)
 8000ee0:	4031      	ands	r1, r6
 8000ee2:	076a      	lsls	r2, r5, #29
 8000ee4:	d0f4      	beq.n	8000ed0 <__aeabi_ui2f+0x68>
 8000ee6:	e7e9      	b.n	8000ebc <__aeabi_ui2f+0x54>
 8000ee8:	fbffffff 	.word	0xfbffffff

08000eec <__aeabi_dadd>:
 8000eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eee:	464f      	mov	r7, r9
 8000ef0:	4646      	mov	r6, r8
 8000ef2:	46d6      	mov	lr, sl
 8000ef4:	000d      	movs	r5, r1
 8000ef6:	0004      	movs	r4, r0
 8000ef8:	b5c0      	push	{r6, r7, lr}
 8000efa:	001f      	movs	r7, r3
 8000efc:	0011      	movs	r1, r2
 8000efe:	0328      	lsls	r0, r5, #12
 8000f00:	0f62      	lsrs	r2, r4, #29
 8000f02:	0a40      	lsrs	r0, r0, #9
 8000f04:	4310      	orrs	r0, r2
 8000f06:	007a      	lsls	r2, r7, #1
 8000f08:	0d52      	lsrs	r2, r2, #21
 8000f0a:	00e3      	lsls	r3, r4, #3
 8000f0c:	033c      	lsls	r4, r7, #12
 8000f0e:	4691      	mov	r9, r2
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0ffa      	lsrs	r2, r7, #31
 8000f14:	0f4f      	lsrs	r7, r1, #29
 8000f16:	006e      	lsls	r6, r5, #1
 8000f18:	4327      	orrs	r7, r4
 8000f1a:	4692      	mov	sl, r2
 8000f1c:	46b8      	mov	r8, r7
 8000f1e:	0d76      	lsrs	r6, r6, #21
 8000f20:	0fed      	lsrs	r5, r5, #31
 8000f22:	00c9      	lsls	r1, r1, #3
 8000f24:	4295      	cmp	r5, r2
 8000f26:	d100      	bne.n	8000f2a <__aeabi_dadd+0x3e>
 8000f28:	e099      	b.n	800105e <__aeabi_dadd+0x172>
 8000f2a:	464c      	mov	r4, r9
 8000f2c:	1b34      	subs	r4, r6, r4
 8000f2e:	46a4      	mov	ip, r4
 8000f30:	2c00      	cmp	r4, #0
 8000f32:	dc00      	bgt.n	8000f36 <__aeabi_dadd+0x4a>
 8000f34:	e07c      	b.n	8001030 <__aeabi_dadd+0x144>
 8000f36:	464a      	mov	r2, r9
 8000f38:	2a00      	cmp	r2, #0
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_dadd+0x52>
 8000f3c:	e0b8      	b.n	80010b0 <__aeabi_dadd+0x1c4>
 8000f3e:	4ac5      	ldr	r2, [pc, #788]	; (8001254 <__aeabi_dadd+0x368>)
 8000f40:	4296      	cmp	r6, r2
 8000f42:	d100      	bne.n	8000f46 <__aeabi_dadd+0x5a>
 8000f44:	e11c      	b.n	8001180 <__aeabi_dadd+0x294>
 8000f46:	2280      	movs	r2, #128	; 0x80
 8000f48:	003c      	movs	r4, r7
 8000f4a:	0412      	lsls	r2, r2, #16
 8000f4c:	4314      	orrs	r4, r2
 8000f4e:	46a0      	mov	r8, r4
 8000f50:	4662      	mov	r2, ip
 8000f52:	2a38      	cmp	r2, #56	; 0x38
 8000f54:	dd00      	ble.n	8000f58 <__aeabi_dadd+0x6c>
 8000f56:	e161      	b.n	800121c <__aeabi_dadd+0x330>
 8000f58:	2a1f      	cmp	r2, #31
 8000f5a:	dd00      	ble.n	8000f5e <__aeabi_dadd+0x72>
 8000f5c:	e1cc      	b.n	80012f8 <__aeabi_dadd+0x40c>
 8000f5e:	4664      	mov	r4, ip
 8000f60:	2220      	movs	r2, #32
 8000f62:	1b12      	subs	r2, r2, r4
 8000f64:	4644      	mov	r4, r8
 8000f66:	4094      	lsls	r4, r2
 8000f68:	000f      	movs	r7, r1
 8000f6a:	46a1      	mov	r9, r4
 8000f6c:	4664      	mov	r4, ip
 8000f6e:	4091      	lsls	r1, r2
 8000f70:	40e7      	lsrs	r7, r4
 8000f72:	464c      	mov	r4, r9
 8000f74:	1e4a      	subs	r2, r1, #1
 8000f76:	4191      	sbcs	r1, r2
 8000f78:	433c      	orrs	r4, r7
 8000f7a:	4642      	mov	r2, r8
 8000f7c:	4321      	orrs	r1, r4
 8000f7e:	4664      	mov	r4, ip
 8000f80:	40e2      	lsrs	r2, r4
 8000f82:	1a80      	subs	r0, r0, r2
 8000f84:	1a5c      	subs	r4, r3, r1
 8000f86:	42a3      	cmp	r3, r4
 8000f88:	419b      	sbcs	r3, r3
 8000f8a:	425f      	negs	r7, r3
 8000f8c:	1bc7      	subs	r7, r0, r7
 8000f8e:	023b      	lsls	r3, r7, #8
 8000f90:	d400      	bmi.n	8000f94 <__aeabi_dadd+0xa8>
 8000f92:	e0d0      	b.n	8001136 <__aeabi_dadd+0x24a>
 8000f94:	027f      	lsls	r7, r7, #9
 8000f96:	0a7f      	lsrs	r7, r7, #9
 8000f98:	2f00      	cmp	r7, #0
 8000f9a:	d100      	bne.n	8000f9e <__aeabi_dadd+0xb2>
 8000f9c:	e0ff      	b.n	800119e <__aeabi_dadd+0x2b2>
 8000f9e:	0038      	movs	r0, r7
 8000fa0:	f001 fd0e 	bl	80029c0 <__clzsi2>
 8000fa4:	0001      	movs	r1, r0
 8000fa6:	3908      	subs	r1, #8
 8000fa8:	2320      	movs	r3, #32
 8000faa:	0022      	movs	r2, r4
 8000fac:	1a5b      	subs	r3, r3, r1
 8000fae:	408f      	lsls	r7, r1
 8000fb0:	40da      	lsrs	r2, r3
 8000fb2:	408c      	lsls	r4, r1
 8000fb4:	4317      	orrs	r7, r2
 8000fb6:	42b1      	cmp	r1, r6
 8000fb8:	da00      	bge.n	8000fbc <__aeabi_dadd+0xd0>
 8000fba:	e0ff      	b.n	80011bc <__aeabi_dadd+0x2d0>
 8000fbc:	1b89      	subs	r1, r1, r6
 8000fbe:	1c4b      	adds	r3, r1, #1
 8000fc0:	2b1f      	cmp	r3, #31
 8000fc2:	dd00      	ble.n	8000fc6 <__aeabi_dadd+0xda>
 8000fc4:	e0a8      	b.n	8001118 <__aeabi_dadd+0x22c>
 8000fc6:	2220      	movs	r2, #32
 8000fc8:	0039      	movs	r1, r7
 8000fca:	1ad2      	subs	r2, r2, r3
 8000fcc:	0020      	movs	r0, r4
 8000fce:	4094      	lsls	r4, r2
 8000fd0:	4091      	lsls	r1, r2
 8000fd2:	40d8      	lsrs	r0, r3
 8000fd4:	1e62      	subs	r2, r4, #1
 8000fd6:	4194      	sbcs	r4, r2
 8000fd8:	40df      	lsrs	r7, r3
 8000fda:	2600      	movs	r6, #0
 8000fdc:	4301      	orrs	r1, r0
 8000fde:	430c      	orrs	r4, r1
 8000fe0:	0763      	lsls	r3, r4, #29
 8000fe2:	d009      	beq.n	8000ff8 <__aeabi_dadd+0x10c>
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	4023      	ands	r3, r4
 8000fe8:	2b04      	cmp	r3, #4
 8000fea:	d005      	beq.n	8000ff8 <__aeabi_dadd+0x10c>
 8000fec:	1d23      	adds	r3, r4, #4
 8000fee:	42a3      	cmp	r3, r4
 8000ff0:	41a4      	sbcs	r4, r4
 8000ff2:	4264      	negs	r4, r4
 8000ff4:	193f      	adds	r7, r7, r4
 8000ff6:	001c      	movs	r4, r3
 8000ff8:	023b      	lsls	r3, r7, #8
 8000ffa:	d400      	bmi.n	8000ffe <__aeabi_dadd+0x112>
 8000ffc:	e09e      	b.n	800113c <__aeabi_dadd+0x250>
 8000ffe:	4b95      	ldr	r3, [pc, #596]	; (8001254 <__aeabi_dadd+0x368>)
 8001000:	3601      	adds	r6, #1
 8001002:	429e      	cmp	r6, r3
 8001004:	d100      	bne.n	8001008 <__aeabi_dadd+0x11c>
 8001006:	e0b7      	b.n	8001178 <__aeabi_dadd+0x28c>
 8001008:	4a93      	ldr	r2, [pc, #588]	; (8001258 <__aeabi_dadd+0x36c>)
 800100a:	08e4      	lsrs	r4, r4, #3
 800100c:	4017      	ands	r7, r2
 800100e:	077b      	lsls	r3, r7, #29
 8001010:	0571      	lsls	r1, r6, #21
 8001012:	027f      	lsls	r7, r7, #9
 8001014:	4323      	orrs	r3, r4
 8001016:	0b3f      	lsrs	r7, r7, #12
 8001018:	0d4a      	lsrs	r2, r1, #21
 800101a:	0512      	lsls	r2, r2, #20
 800101c:	433a      	orrs	r2, r7
 800101e:	07ed      	lsls	r5, r5, #31
 8001020:	432a      	orrs	r2, r5
 8001022:	0018      	movs	r0, r3
 8001024:	0011      	movs	r1, r2
 8001026:	bce0      	pop	{r5, r6, r7}
 8001028:	46ba      	mov	sl, r7
 800102a:	46b1      	mov	r9, r6
 800102c:	46a8      	mov	r8, r5
 800102e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001030:	2c00      	cmp	r4, #0
 8001032:	d04b      	beq.n	80010cc <__aeabi_dadd+0x1e0>
 8001034:	464c      	mov	r4, r9
 8001036:	1ba4      	subs	r4, r4, r6
 8001038:	46a4      	mov	ip, r4
 800103a:	2e00      	cmp	r6, #0
 800103c:	d000      	beq.n	8001040 <__aeabi_dadd+0x154>
 800103e:	e123      	b.n	8001288 <__aeabi_dadd+0x39c>
 8001040:	0004      	movs	r4, r0
 8001042:	431c      	orrs	r4, r3
 8001044:	d100      	bne.n	8001048 <__aeabi_dadd+0x15c>
 8001046:	e1af      	b.n	80013a8 <__aeabi_dadd+0x4bc>
 8001048:	4662      	mov	r2, ip
 800104a:	1e54      	subs	r4, r2, #1
 800104c:	2a01      	cmp	r2, #1
 800104e:	d100      	bne.n	8001052 <__aeabi_dadd+0x166>
 8001050:	e215      	b.n	800147e <__aeabi_dadd+0x592>
 8001052:	4d80      	ldr	r5, [pc, #512]	; (8001254 <__aeabi_dadd+0x368>)
 8001054:	45ac      	cmp	ip, r5
 8001056:	d100      	bne.n	800105a <__aeabi_dadd+0x16e>
 8001058:	e1c8      	b.n	80013ec <__aeabi_dadd+0x500>
 800105a:	46a4      	mov	ip, r4
 800105c:	e11b      	b.n	8001296 <__aeabi_dadd+0x3aa>
 800105e:	464a      	mov	r2, r9
 8001060:	1ab2      	subs	r2, r6, r2
 8001062:	4694      	mov	ip, r2
 8001064:	2a00      	cmp	r2, #0
 8001066:	dc00      	bgt.n	800106a <__aeabi_dadd+0x17e>
 8001068:	e0ac      	b.n	80011c4 <__aeabi_dadd+0x2d8>
 800106a:	464a      	mov	r2, r9
 800106c:	2a00      	cmp	r2, #0
 800106e:	d043      	beq.n	80010f8 <__aeabi_dadd+0x20c>
 8001070:	4a78      	ldr	r2, [pc, #480]	; (8001254 <__aeabi_dadd+0x368>)
 8001072:	4296      	cmp	r6, r2
 8001074:	d100      	bne.n	8001078 <__aeabi_dadd+0x18c>
 8001076:	e1af      	b.n	80013d8 <__aeabi_dadd+0x4ec>
 8001078:	2280      	movs	r2, #128	; 0x80
 800107a:	003c      	movs	r4, r7
 800107c:	0412      	lsls	r2, r2, #16
 800107e:	4314      	orrs	r4, r2
 8001080:	46a0      	mov	r8, r4
 8001082:	4662      	mov	r2, ip
 8001084:	2a38      	cmp	r2, #56	; 0x38
 8001086:	dc67      	bgt.n	8001158 <__aeabi_dadd+0x26c>
 8001088:	2a1f      	cmp	r2, #31
 800108a:	dc00      	bgt.n	800108e <__aeabi_dadd+0x1a2>
 800108c:	e15f      	b.n	800134e <__aeabi_dadd+0x462>
 800108e:	4647      	mov	r7, r8
 8001090:	3a20      	subs	r2, #32
 8001092:	40d7      	lsrs	r7, r2
 8001094:	4662      	mov	r2, ip
 8001096:	2a20      	cmp	r2, #32
 8001098:	d005      	beq.n	80010a6 <__aeabi_dadd+0x1ba>
 800109a:	4664      	mov	r4, ip
 800109c:	2240      	movs	r2, #64	; 0x40
 800109e:	1b12      	subs	r2, r2, r4
 80010a0:	4644      	mov	r4, r8
 80010a2:	4094      	lsls	r4, r2
 80010a4:	4321      	orrs	r1, r4
 80010a6:	1e4a      	subs	r2, r1, #1
 80010a8:	4191      	sbcs	r1, r2
 80010aa:	000c      	movs	r4, r1
 80010ac:	433c      	orrs	r4, r7
 80010ae:	e057      	b.n	8001160 <__aeabi_dadd+0x274>
 80010b0:	003a      	movs	r2, r7
 80010b2:	430a      	orrs	r2, r1
 80010b4:	d100      	bne.n	80010b8 <__aeabi_dadd+0x1cc>
 80010b6:	e105      	b.n	80012c4 <__aeabi_dadd+0x3d8>
 80010b8:	0022      	movs	r2, r4
 80010ba:	3a01      	subs	r2, #1
 80010bc:	2c01      	cmp	r4, #1
 80010be:	d100      	bne.n	80010c2 <__aeabi_dadd+0x1d6>
 80010c0:	e182      	b.n	80013c8 <__aeabi_dadd+0x4dc>
 80010c2:	4c64      	ldr	r4, [pc, #400]	; (8001254 <__aeabi_dadd+0x368>)
 80010c4:	45a4      	cmp	ip, r4
 80010c6:	d05b      	beq.n	8001180 <__aeabi_dadd+0x294>
 80010c8:	4694      	mov	ip, r2
 80010ca:	e741      	b.n	8000f50 <__aeabi_dadd+0x64>
 80010cc:	4c63      	ldr	r4, [pc, #396]	; (800125c <__aeabi_dadd+0x370>)
 80010ce:	1c77      	adds	r7, r6, #1
 80010d0:	4227      	tst	r7, r4
 80010d2:	d000      	beq.n	80010d6 <__aeabi_dadd+0x1ea>
 80010d4:	e0c4      	b.n	8001260 <__aeabi_dadd+0x374>
 80010d6:	0004      	movs	r4, r0
 80010d8:	431c      	orrs	r4, r3
 80010da:	2e00      	cmp	r6, #0
 80010dc:	d000      	beq.n	80010e0 <__aeabi_dadd+0x1f4>
 80010de:	e169      	b.n	80013b4 <__aeabi_dadd+0x4c8>
 80010e0:	2c00      	cmp	r4, #0
 80010e2:	d100      	bne.n	80010e6 <__aeabi_dadd+0x1fa>
 80010e4:	e1bf      	b.n	8001466 <__aeabi_dadd+0x57a>
 80010e6:	4644      	mov	r4, r8
 80010e8:	430c      	orrs	r4, r1
 80010ea:	d000      	beq.n	80010ee <__aeabi_dadd+0x202>
 80010ec:	e1d0      	b.n	8001490 <__aeabi_dadd+0x5a4>
 80010ee:	0742      	lsls	r2, r0, #29
 80010f0:	08db      	lsrs	r3, r3, #3
 80010f2:	4313      	orrs	r3, r2
 80010f4:	08c0      	lsrs	r0, r0, #3
 80010f6:	e029      	b.n	800114c <__aeabi_dadd+0x260>
 80010f8:	003a      	movs	r2, r7
 80010fa:	430a      	orrs	r2, r1
 80010fc:	d100      	bne.n	8001100 <__aeabi_dadd+0x214>
 80010fe:	e170      	b.n	80013e2 <__aeabi_dadd+0x4f6>
 8001100:	4662      	mov	r2, ip
 8001102:	4664      	mov	r4, ip
 8001104:	3a01      	subs	r2, #1
 8001106:	2c01      	cmp	r4, #1
 8001108:	d100      	bne.n	800110c <__aeabi_dadd+0x220>
 800110a:	e0e0      	b.n	80012ce <__aeabi_dadd+0x3e2>
 800110c:	4c51      	ldr	r4, [pc, #324]	; (8001254 <__aeabi_dadd+0x368>)
 800110e:	45a4      	cmp	ip, r4
 8001110:	d100      	bne.n	8001114 <__aeabi_dadd+0x228>
 8001112:	e161      	b.n	80013d8 <__aeabi_dadd+0x4ec>
 8001114:	4694      	mov	ip, r2
 8001116:	e7b4      	b.n	8001082 <__aeabi_dadd+0x196>
 8001118:	003a      	movs	r2, r7
 800111a:	391f      	subs	r1, #31
 800111c:	40ca      	lsrs	r2, r1
 800111e:	0011      	movs	r1, r2
 8001120:	2b20      	cmp	r3, #32
 8001122:	d003      	beq.n	800112c <__aeabi_dadd+0x240>
 8001124:	2240      	movs	r2, #64	; 0x40
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	409f      	lsls	r7, r3
 800112a:	433c      	orrs	r4, r7
 800112c:	1e63      	subs	r3, r4, #1
 800112e:	419c      	sbcs	r4, r3
 8001130:	2700      	movs	r7, #0
 8001132:	2600      	movs	r6, #0
 8001134:	430c      	orrs	r4, r1
 8001136:	0763      	lsls	r3, r4, #29
 8001138:	d000      	beq.n	800113c <__aeabi_dadd+0x250>
 800113a:	e753      	b.n	8000fe4 <__aeabi_dadd+0xf8>
 800113c:	46b4      	mov	ip, r6
 800113e:	08e4      	lsrs	r4, r4, #3
 8001140:	077b      	lsls	r3, r7, #29
 8001142:	4323      	orrs	r3, r4
 8001144:	08f8      	lsrs	r0, r7, #3
 8001146:	4a43      	ldr	r2, [pc, #268]	; (8001254 <__aeabi_dadd+0x368>)
 8001148:	4594      	cmp	ip, r2
 800114a:	d01d      	beq.n	8001188 <__aeabi_dadd+0x29c>
 800114c:	4662      	mov	r2, ip
 800114e:	0307      	lsls	r7, r0, #12
 8001150:	0552      	lsls	r2, r2, #21
 8001152:	0b3f      	lsrs	r7, r7, #12
 8001154:	0d52      	lsrs	r2, r2, #21
 8001156:	e760      	b.n	800101a <__aeabi_dadd+0x12e>
 8001158:	4644      	mov	r4, r8
 800115a:	430c      	orrs	r4, r1
 800115c:	1e62      	subs	r2, r4, #1
 800115e:	4194      	sbcs	r4, r2
 8001160:	18e4      	adds	r4, r4, r3
 8001162:	429c      	cmp	r4, r3
 8001164:	419b      	sbcs	r3, r3
 8001166:	425f      	negs	r7, r3
 8001168:	183f      	adds	r7, r7, r0
 800116a:	023b      	lsls	r3, r7, #8
 800116c:	d5e3      	bpl.n	8001136 <__aeabi_dadd+0x24a>
 800116e:	4b39      	ldr	r3, [pc, #228]	; (8001254 <__aeabi_dadd+0x368>)
 8001170:	3601      	adds	r6, #1
 8001172:	429e      	cmp	r6, r3
 8001174:	d000      	beq.n	8001178 <__aeabi_dadd+0x28c>
 8001176:	e0b5      	b.n	80012e4 <__aeabi_dadd+0x3f8>
 8001178:	0032      	movs	r2, r6
 800117a:	2700      	movs	r7, #0
 800117c:	2300      	movs	r3, #0
 800117e:	e74c      	b.n	800101a <__aeabi_dadd+0x12e>
 8001180:	0742      	lsls	r2, r0, #29
 8001182:	08db      	lsrs	r3, r3, #3
 8001184:	4313      	orrs	r3, r2
 8001186:	08c0      	lsrs	r0, r0, #3
 8001188:	001a      	movs	r2, r3
 800118a:	4302      	orrs	r2, r0
 800118c:	d100      	bne.n	8001190 <__aeabi_dadd+0x2a4>
 800118e:	e1e1      	b.n	8001554 <__aeabi_dadd+0x668>
 8001190:	2780      	movs	r7, #128	; 0x80
 8001192:	033f      	lsls	r7, r7, #12
 8001194:	4307      	orrs	r7, r0
 8001196:	033f      	lsls	r7, r7, #12
 8001198:	4a2e      	ldr	r2, [pc, #184]	; (8001254 <__aeabi_dadd+0x368>)
 800119a:	0b3f      	lsrs	r7, r7, #12
 800119c:	e73d      	b.n	800101a <__aeabi_dadd+0x12e>
 800119e:	0020      	movs	r0, r4
 80011a0:	f001 fc0e 	bl	80029c0 <__clzsi2>
 80011a4:	0001      	movs	r1, r0
 80011a6:	3118      	adds	r1, #24
 80011a8:	291f      	cmp	r1, #31
 80011aa:	dc00      	bgt.n	80011ae <__aeabi_dadd+0x2c2>
 80011ac:	e6fc      	b.n	8000fa8 <__aeabi_dadd+0xbc>
 80011ae:	3808      	subs	r0, #8
 80011b0:	4084      	lsls	r4, r0
 80011b2:	0027      	movs	r7, r4
 80011b4:	2400      	movs	r4, #0
 80011b6:	42b1      	cmp	r1, r6
 80011b8:	db00      	blt.n	80011bc <__aeabi_dadd+0x2d0>
 80011ba:	e6ff      	b.n	8000fbc <__aeabi_dadd+0xd0>
 80011bc:	4a26      	ldr	r2, [pc, #152]	; (8001258 <__aeabi_dadd+0x36c>)
 80011be:	1a76      	subs	r6, r6, r1
 80011c0:	4017      	ands	r7, r2
 80011c2:	e70d      	b.n	8000fe0 <__aeabi_dadd+0xf4>
 80011c4:	2a00      	cmp	r2, #0
 80011c6:	d02f      	beq.n	8001228 <__aeabi_dadd+0x33c>
 80011c8:	464a      	mov	r2, r9
 80011ca:	1b92      	subs	r2, r2, r6
 80011cc:	4694      	mov	ip, r2
 80011ce:	2e00      	cmp	r6, #0
 80011d0:	d100      	bne.n	80011d4 <__aeabi_dadd+0x2e8>
 80011d2:	e0ad      	b.n	8001330 <__aeabi_dadd+0x444>
 80011d4:	4a1f      	ldr	r2, [pc, #124]	; (8001254 <__aeabi_dadd+0x368>)
 80011d6:	4591      	cmp	r9, r2
 80011d8:	d100      	bne.n	80011dc <__aeabi_dadd+0x2f0>
 80011da:	e10f      	b.n	80013fc <__aeabi_dadd+0x510>
 80011dc:	2280      	movs	r2, #128	; 0x80
 80011de:	0412      	lsls	r2, r2, #16
 80011e0:	4310      	orrs	r0, r2
 80011e2:	4662      	mov	r2, ip
 80011e4:	2a38      	cmp	r2, #56	; 0x38
 80011e6:	dd00      	ble.n	80011ea <__aeabi_dadd+0x2fe>
 80011e8:	e10f      	b.n	800140a <__aeabi_dadd+0x51e>
 80011ea:	2a1f      	cmp	r2, #31
 80011ec:	dd00      	ble.n	80011f0 <__aeabi_dadd+0x304>
 80011ee:	e180      	b.n	80014f2 <__aeabi_dadd+0x606>
 80011f0:	4664      	mov	r4, ip
 80011f2:	2220      	movs	r2, #32
 80011f4:	001e      	movs	r6, r3
 80011f6:	1b12      	subs	r2, r2, r4
 80011f8:	4667      	mov	r7, ip
 80011fa:	0004      	movs	r4, r0
 80011fc:	4093      	lsls	r3, r2
 80011fe:	4094      	lsls	r4, r2
 8001200:	40fe      	lsrs	r6, r7
 8001202:	1e5a      	subs	r2, r3, #1
 8001204:	4193      	sbcs	r3, r2
 8001206:	40f8      	lsrs	r0, r7
 8001208:	4334      	orrs	r4, r6
 800120a:	431c      	orrs	r4, r3
 800120c:	4480      	add	r8, r0
 800120e:	1864      	adds	r4, r4, r1
 8001210:	428c      	cmp	r4, r1
 8001212:	41bf      	sbcs	r7, r7
 8001214:	427f      	negs	r7, r7
 8001216:	464e      	mov	r6, r9
 8001218:	4447      	add	r7, r8
 800121a:	e7a6      	b.n	800116a <__aeabi_dadd+0x27e>
 800121c:	4642      	mov	r2, r8
 800121e:	430a      	orrs	r2, r1
 8001220:	0011      	movs	r1, r2
 8001222:	1e4a      	subs	r2, r1, #1
 8001224:	4191      	sbcs	r1, r2
 8001226:	e6ad      	b.n	8000f84 <__aeabi_dadd+0x98>
 8001228:	4c0c      	ldr	r4, [pc, #48]	; (800125c <__aeabi_dadd+0x370>)
 800122a:	1c72      	adds	r2, r6, #1
 800122c:	4222      	tst	r2, r4
 800122e:	d000      	beq.n	8001232 <__aeabi_dadd+0x346>
 8001230:	e0a1      	b.n	8001376 <__aeabi_dadd+0x48a>
 8001232:	0002      	movs	r2, r0
 8001234:	431a      	orrs	r2, r3
 8001236:	2e00      	cmp	r6, #0
 8001238:	d000      	beq.n	800123c <__aeabi_dadd+0x350>
 800123a:	e0fa      	b.n	8001432 <__aeabi_dadd+0x546>
 800123c:	2a00      	cmp	r2, #0
 800123e:	d100      	bne.n	8001242 <__aeabi_dadd+0x356>
 8001240:	e145      	b.n	80014ce <__aeabi_dadd+0x5e2>
 8001242:	003a      	movs	r2, r7
 8001244:	430a      	orrs	r2, r1
 8001246:	d000      	beq.n	800124a <__aeabi_dadd+0x35e>
 8001248:	e146      	b.n	80014d8 <__aeabi_dadd+0x5ec>
 800124a:	0742      	lsls	r2, r0, #29
 800124c:	08db      	lsrs	r3, r3, #3
 800124e:	4313      	orrs	r3, r2
 8001250:	08c0      	lsrs	r0, r0, #3
 8001252:	e77b      	b.n	800114c <__aeabi_dadd+0x260>
 8001254:	000007ff 	.word	0x000007ff
 8001258:	ff7fffff 	.word	0xff7fffff
 800125c:	000007fe 	.word	0x000007fe
 8001260:	4647      	mov	r7, r8
 8001262:	1a5c      	subs	r4, r3, r1
 8001264:	1bc2      	subs	r2, r0, r7
 8001266:	42a3      	cmp	r3, r4
 8001268:	41bf      	sbcs	r7, r7
 800126a:	427f      	negs	r7, r7
 800126c:	46b9      	mov	r9, r7
 800126e:	0017      	movs	r7, r2
 8001270:	464a      	mov	r2, r9
 8001272:	1abf      	subs	r7, r7, r2
 8001274:	023a      	lsls	r2, r7, #8
 8001276:	d500      	bpl.n	800127a <__aeabi_dadd+0x38e>
 8001278:	e08d      	b.n	8001396 <__aeabi_dadd+0x4aa>
 800127a:	0023      	movs	r3, r4
 800127c:	433b      	orrs	r3, r7
 800127e:	d000      	beq.n	8001282 <__aeabi_dadd+0x396>
 8001280:	e68a      	b.n	8000f98 <__aeabi_dadd+0xac>
 8001282:	2000      	movs	r0, #0
 8001284:	2500      	movs	r5, #0
 8001286:	e761      	b.n	800114c <__aeabi_dadd+0x260>
 8001288:	4cb4      	ldr	r4, [pc, #720]	; (800155c <__aeabi_dadd+0x670>)
 800128a:	45a1      	cmp	r9, r4
 800128c:	d100      	bne.n	8001290 <__aeabi_dadd+0x3a4>
 800128e:	e0ad      	b.n	80013ec <__aeabi_dadd+0x500>
 8001290:	2480      	movs	r4, #128	; 0x80
 8001292:	0424      	lsls	r4, r4, #16
 8001294:	4320      	orrs	r0, r4
 8001296:	4664      	mov	r4, ip
 8001298:	2c38      	cmp	r4, #56	; 0x38
 800129a:	dc3d      	bgt.n	8001318 <__aeabi_dadd+0x42c>
 800129c:	4662      	mov	r2, ip
 800129e:	2c1f      	cmp	r4, #31
 80012a0:	dd00      	ble.n	80012a4 <__aeabi_dadd+0x3b8>
 80012a2:	e0b7      	b.n	8001414 <__aeabi_dadd+0x528>
 80012a4:	2520      	movs	r5, #32
 80012a6:	001e      	movs	r6, r3
 80012a8:	1b2d      	subs	r5, r5, r4
 80012aa:	0004      	movs	r4, r0
 80012ac:	40ab      	lsls	r3, r5
 80012ae:	40ac      	lsls	r4, r5
 80012b0:	40d6      	lsrs	r6, r2
 80012b2:	40d0      	lsrs	r0, r2
 80012b4:	4642      	mov	r2, r8
 80012b6:	1e5d      	subs	r5, r3, #1
 80012b8:	41ab      	sbcs	r3, r5
 80012ba:	4334      	orrs	r4, r6
 80012bc:	1a12      	subs	r2, r2, r0
 80012be:	4690      	mov	r8, r2
 80012c0:	4323      	orrs	r3, r4
 80012c2:	e02c      	b.n	800131e <__aeabi_dadd+0x432>
 80012c4:	0742      	lsls	r2, r0, #29
 80012c6:	08db      	lsrs	r3, r3, #3
 80012c8:	4313      	orrs	r3, r2
 80012ca:	08c0      	lsrs	r0, r0, #3
 80012cc:	e73b      	b.n	8001146 <__aeabi_dadd+0x25a>
 80012ce:	185c      	adds	r4, r3, r1
 80012d0:	429c      	cmp	r4, r3
 80012d2:	419b      	sbcs	r3, r3
 80012d4:	4440      	add	r0, r8
 80012d6:	425b      	negs	r3, r3
 80012d8:	18c7      	adds	r7, r0, r3
 80012da:	2601      	movs	r6, #1
 80012dc:	023b      	lsls	r3, r7, #8
 80012de:	d400      	bmi.n	80012e2 <__aeabi_dadd+0x3f6>
 80012e0:	e729      	b.n	8001136 <__aeabi_dadd+0x24a>
 80012e2:	2602      	movs	r6, #2
 80012e4:	4a9e      	ldr	r2, [pc, #632]	; (8001560 <__aeabi_dadd+0x674>)
 80012e6:	0863      	lsrs	r3, r4, #1
 80012e8:	4017      	ands	r7, r2
 80012ea:	2201      	movs	r2, #1
 80012ec:	4014      	ands	r4, r2
 80012ee:	431c      	orrs	r4, r3
 80012f0:	07fb      	lsls	r3, r7, #31
 80012f2:	431c      	orrs	r4, r3
 80012f4:	087f      	lsrs	r7, r7, #1
 80012f6:	e673      	b.n	8000fe0 <__aeabi_dadd+0xf4>
 80012f8:	4644      	mov	r4, r8
 80012fa:	3a20      	subs	r2, #32
 80012fc:	40d4      	lsrs	r4, r2
 80012fe:	4662      	mov	r2, ip
 8001300:	2a20      	cmp	r2, #32
 8001302:	d005      	beq.n	8001310 <__aeabi_dadd+0x424>
 8001304:	4667      	mov	r7, ip
 8001306:	2240      	movs	r2, #64	; 0x40
 8001308:	1bd2      	subs	r2, r2, r7
 800130a:	4647      	mov	r7, r8
 800130c:	4097      	lsls	r7, r2
 800130e:	4339      	orrs	r1, r7
 8001310:	1e4a      	subs	r2, r1, #1
 8001312:	4191      	sbcs	r1, r2
 8001314:	4321      	orrs	r1, r4
 8001316:	e635      	b.n	8000f84 <__aeabi_dadd+0x98>
 8001318:	4303      	orrs	r3, r0
 800131a:	1e58      	subs	r0, r3, #1
 800131c:	4183      	sbcs	r3, r0
 800131e:	1acc      	subs	r4, r1, r3
 8001320:	42a1      	cmp	r1, r4
 8001322:	41bf      	sbcs	r7, r7
 8001324:	4643      	mov	r3, r8
 8001326:	427f      	negs	r7, r7
 8001328:	4655      	mov	r5, sl
 800132a:	464e      	mov	r6, r9
 800132c:	1bdf      	subs	r7, r3, r7
 800132e:	e62e      	b.n	8000f8e <__aeabi_dadd+0xa2>
 8001330:	0002      	movs	r2, r0
 8001332:	431a      	orrs	r2, r3
 8001334:	d100      	bne.n	8001338 <__aeabi_dadd+0x44c>
 8001336:	e0bd      	b.n	80014b4 <__aeabi_dadd+0x5c8>
 8001338:	4662      	mov	r2, ip
 800133a:	4664      	mov	r4, ip
 800133c:	3a01      	subs	r2, #1
 800133e:	2c01      	cmp	r4, #1
 8001340:	d100      	bne.n	8001344 <__aeabi_dadd+0x458>
 8001342:	e0e5      	b.n	8001510 <__aeabi_dadd+0x624>
 8001344:	4c85      	ldr	r4, [pc, #532]	; (800155c <__aeabi_dadd+0x670>)
 8001346:	45a4      	cmp	ip, r4
 8001348:	d058      	beq.n	80013fc <__aeabi_dadd+0x510>
 800134a:	4694      	mov	ip, r2
 800134c:	e749      	b.n	80011e2 <__aeabi_dadd+0x2f6>
 800134e:	4664      	mov	r4, ip
 8001350:	2220      	movs	r2, #32
 8001352:	1b12      	subs	r2, r2, r4
 8001354:	4644      	mov	r4, r8
 8001356:	4094      	lsls	r4, r2
 8001358:	000f      	movs	r7, r1
 800135a:	46a1      	mov	r9, r4
 800135c:	4664      	mov	r4, ip
 800135e:	4091      	lsls	r1, r2
 8001360:	40e7      	lsrs	r7, r4
 8001362:	464c      	mov	r4, r9
 8001364:	1e4a      	subs	r2, r1, #1
 8001366:	4191      	sbcs	r1, r2
 8001368:	433c      	orrs	r4, r7
 800136a:	4642      	mov	r2, r8
 800136c:	430c      	orrs	r4, r1
 800136e:	4661      	mov	r1, ip
 8001370:	40ca      	lsrs	r2, r1
 8001372:	1880      	adds	r0, r0, r2
 8001374:	e6f4      	b.n	8001160 <__aeabi_dadd+0x274>
 8001376:	4c79      	ldr	r4, [pc, #484]	; (800155c <__aeabi_dadd+0x670>)
 8001378:	42a2      	cmp	r2, r4
 800137a:	d100      	bne.n	800137e <__aeabi_dadd+0x492>
 800137c:	e6fd      	b.n	800117a <__aeabi_dadd+0x28e>
 800137e:	1859      	adds	r1, r3, r1
 8001380:	4299      	cmp	r1, r3
 8001382:	419b      	sbcs	r3, r3
 8001384:	4440      	add	r0, r8
 8001386:	425f      	negs	r7, r3
 8001388:	19c7      	adds	r7, r0, r7
 800138a:	07fc      	lsls	r4, r7, #31
 800138c:	0849      	lsrs	r1, r1, #1
 800138e:	0016      	movs	r6, r2
 8001390:	430c      	orrs	r4, r1
 8001392:	087f      	lsrs	r7, r7, #1
 8001394:	e6cf      	b.n	8001136 <__aeabi_dadd+0x24a>
 8001396:	1acc      	subs	r4, r1, r3
 8001398:	42a1      	cmp	r1, r4
 800139a:	41bf      	sbcs	r7, r7
 800139c:	4643      	mov	r3, r8
 800139e:	427f      	negs	r7, r7
 80013a0:	1a18      	subs	r0, r3, r0
 80013a2:	4655      	mov	r5, sl
 80013a4:	1bc7      	subs	r7, r0, r7
 80013a6:	e5f7      	b.n	8000f98 <__aeabi_dadd+0xac>
 80013a8:	08c9      	lsrs	r1, r1, #3
 80013aa:	077b      	lsls	r3, r7, #29
 80013ac:	4655      	mov	r5, sl
 80013ae:	430b      	orrs	r3, r1
 80013b0:	08f8      	lsrs	r0, r7, #3
 80013b2:	e6c8      	b.n	8001146 <__aeabi_dadd+0x25a>
 80013b4:	2c00      	cmp	r4, #0
 80013b6:	d000      	beq.n	80013ba <__aeabi_dadd+0x4ce>
 80013b8:	e081      	b.n	80014be <__aeabi_dadd+0x5d2>
 80013ba:	4643      	mov	r3, r8
 80013bc:	430b      	orrs	r3, r1
 80013be:	d115      	bne.n	80013ec <__aeabi_dadd+0x500>
 80013c0:	2080      	movs	r0, #128	; 0x80
 80013c2:	2500      	movs	r5, #0
 80013c4:	0300      	lsls	r0, r0, #12
 80013c6:	e6e3      	b.n	8001190 <__aeabi_dadd+0x2a4>
 80013c8:	1a5c      	subs	r4, r3, r1
 80013ca:	42a3      	cmp	r3, r4
 80013cc:	419b      	sbcs	r3, r3
 80013ce:	1bc7      	subs	r7, r0, r7
 80013d0:	425b      	negs	r3, r3
 80013d2:	2601      	movs	r6, #1
 80013d4:	1aff      	subs	r7, r7, r3
 80013d6:	e5da      	b.n	8000f8e <__aeabi_dadd+0xa2>
 80013d8:	0742      	lsls	r2, r0, #29
 80013da:	08db      	lsrs	r3, r3, #3
 80013dc:	4313      	orrs	r3, r2
 80013de:	08c0      	lsrs	r0, r0, #3
 80013e0:	e6d2      	b.n	8001188 <__aeabi_dadd+0x29c>
 80013e2:	0742      	lsls	r2, r0, #29
 80013e4:	08db      	lsrs	r3, r3, #3
 80013e6:	4313      	orrs	r3, r2
 80013e8:	08c0      	lsrs	r0, r0, #3
 80013ea:	e6ac      	b.n	8001146 <__aeabi_dadd+0x25a>
 80013ec:	4643      	mov	r3, r8
 80013ee:	4642      	mov	r2, r8
 80013f0:	08c9      	lsrs	r1, r1, #3
 80013f2:	075b      	lsls	r3, r3, #29
 80013f4:	4655      	mov	r5, sl
 80013f6:	430b      	orrs	r3, r1
 80013f8:	08d0      	lsrs	r0, r2, #3
 80013fa:	e6c5      	b.n	8001188 <__aeabi_dadd+0x29c>
 80013fc:	4643      	mov	r3, r8
 80013fe:	4642      	mov	r2, r8
 8001400:	075b      	lsls	r3, r3, #29
 8001402:	08c9      	lsrs	r1, r1, #3
 8001404:	430b      	orrs	r3, r1
 8001406:	08d0      	lsrs	r0, r2, #3
 8001408:	e6be      	b.n	8001188 <__aeabi_dadd+0x29c>
 800140a:	4303      	orrs	r3, r0
 800140c:	001c      	movs	r4, r3
 800140e:	1e63      	subs	r3, r4, #1
 8001410:	419c      	sbcs	r4, r3
 8001412:	e6fc      	b.n	800120e <__aeabi_dadd+0x322>
 8001414:	0002      	movs	r2, r0
 8001416:	3c20      	subs	r4, #32
 8001418:	40e2      	lsrs	r2, r4
 800141a:	0014      	movs	r4, r2
 800141c:	4662      	mov	r2, ip
 800141e:	2a20      	cmp	r2, #32
 8001420:	d003      	beq.n	800142a <__aeabi_dadd+0x53e>
 8001422:	2540      	movs	r5, #64	; 0x40
 8001424:	1aad      	subs	r5, r5, r2
 8001426:	40a8      	lsls	r0, r5
 8001428:	4303      	orrs	r3, r0
 800142a:	1e58      	subs	r0, r3, #1
 800142c:	4183      	sbcs	r3, r0
 800142e:	4323      	orrs	r3, r4
 8001430:	e775      	b.n	800131e <__aeabi_dadd+0x432>
 8001432:	2a00      	cmp	r2, #0
 8001434:	d0e2      	beq.n	80013fc <__aeabi_dadd+0x510>
 8001436:	003a      	movs	r2, r7
 8001438:	430a      	orrs	r2, r1
 800143a:	d0cd      	beq.n	80013d8 <__aeabi_dadd+0x4ec>
 800143c:	0742      	lsls	r2, r0, #29
 800143e:	08db      	lsrs	r3, r3, #3
 8001440:	4313      	orrs	r3, r2
 8001442:	2280      	movs	r2, #128	; 0x80
 8001444:	08c0      	lsrs	r0, r0, #3
 8001446:	0312      	lsls	r2, r2, #12
 8001448:	4210      	tst	r0, r2
 800144a:	d006      	beq.n	800145a <__aeabi_dadd+0x56e>
 800144c:	08fc      	lsrs	r4, r7, #3
 800144e:	4214      	tst	r4, r2
 8001450:	d103      	bne.n	800145a <__aeabi_dadd+0x56e>
 8001452:	0020      	movs	r0, r4
 8001454:	08cb      	lsrs	r3, r1, #3
 8001456:	077a      	lsls	r2, r7, #29
 8001458:	4313      	orrs	r3, r2
 800145a:	0f5a      	lsrs	r2, r3, #29
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	0752      	lsls	r2, r2, #29
 8001460:	08db      	lsrs	r3, r3, #3
 8001462:	4313      	orrs	r3, r2
 8001464:	e690      	b.n	8001188 <__aeabi_dadd+0x29c>
 8001466:	4643      	mov	r3, r8
 8001468:	430b      	orrs	r3, r1
 800146a:	d100      	bne.n	800146e <__aeabi_dadd+0x582>
 800146c:	e709      	b.n	8001282 <__aeabi_dadd+0x396>
 800146e:	4643      	mov	r3, r8
 8001470:	4642      	mov	r2, r8
 8001472:	08c9      	lsrs	r1, r1, #3
 8001474:	075b      	lsls	r3, r3, #29
 8001476:	4655      	mov	r5, sl
 8001478:	430b      	orrs	r3, r1
 800147a:	08d0      	lsrs	r0, r2, #3
 800147c:	e666      	b.n	800114c <__aeabi_dadd+0x260>
 800147e:	1acc      	subs	r4, r1, r3
 8001480:	42a1      	cmp	r1, r4
 8001482:	4189      	sbcs	r1, r1
 8001484:	1a3f      	subs	r7, r7, r0
 8001486:	4249      	negs	r1, r1
 8001488:	4655      	mov	r5, sl
 800148a:	2601      	movs	r6, #1
 800148c:	1a7f      	subs	r7, r7, r1
 800148e:	e57e      	b.n	8000f8e <__aeabi_dadd+0xa2>
 8001490:	4642      	mov	r2, r8
 8001492:	1a5c      	subs	r4, r3, r1
 8001494:	1a87      	subs	r7, r0, r2
 8001496:	42a3      	cmp	r3, r4
 8001498:	4192      	sbcs	r2, r2
 800149a:	4252      	negs	r2, r2
 800149c:	1abf      	subs	r7, r7, r2
 800149e:	023a      	lsls	r2, r7, #8
 80014a0:	d53d      	bpl.n	800151e <__aeabi_dadd+0x632>
 80014a2:	1acc      	subs	r4, r1, r3
 80014a4:	42a1      	cmp	r1, r4
 80014a6:	4189      	sbcs	r1, r1
 80014a8:	4643      	mov	r3, r8
 80014aa:	4249      	negs	r1, r1
 80014ac:	1a1f      	subs	r7, r3, r0
 80014ae:	4655      	mov	r5, sl
 80014b0:	1a7f      	subs	r7, r7, r1
 80014b2:	e595      	b.n	8000fe0 <__aeabi_dadd+0xf4>
 80014b4:	077b      	lsls	r3, r7, #29
 80014b6:	08c9      	lsrs	r1, r1, #3
 80014b8:	430b      	orrs	r3, r1
 80014ba:	08f8      	lsrs	r0, r7, #3
 80014bc:	e643      	b.n	8001146 <__aeabi_dadd+0x25a>
 80014be:	4644      	mov	r4, r8
 80014c0:	08db      	lsrs	r3, r3, #3
 80014c2:	430c      	orrs	r4, r1
 80014c4:	d130      	bne.n	8001528 <__aeabi_dadd+0x63c>
 80014c6:	0742      	lsls	r2, r0, #29
 80014c8:	4313      	orrs	r3, r2
 80014ca:	08c0      	lsrs	r0, r0, #3
 80014cc:	e65c      	b.n	8001188 <__aeabi_dadd+0x29c>
 80014ce:	077b      	lsls	r3, r7, #29
 80014d0:	08c9      	lsrs	r1, r1, #3
 80014d2:	430b      	orrs	r3, r1
 80014d4:	08f8      	lsrs	r0, r7, #3
 80014d6:	e639      	b.n	800114c <__aeabi_dadd+0x260>
 80014d8:	185c      	adds	r4, r3, r1
 80014da:	429c      	cmp	r4, r3
 80014dc:	419b      	sbcs	r3, r3
 80014de:	4440      	add	r0, r8
 80014e0:	425b      	negs	r3, r3
 80014e2:	18c7      	adds	r7, r0, r3
 80014e4:	023b      	lsls	r3, r7, #8
 80014e6:	d400      	bmi.n	80014ea <__aeabi_dadd+0x5fe>
 80014e8:	e625      	b.n	8001136 <__aeabi_dadd+0x24a>
 80014ea:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <__aeabi_dadd+0x674>)
 80014ec:	2601      	movs	r6, #1
 80014ee:	401f      	ands	r7, r3
 80014f0:	e621      	b.n	8001136 <__aeabi_dadd+0x24a>
 80014f2:	0004      	movs	r4, r0
 80014f4:	3a20      	subs	r2, #32
 80014f6:	40d4      	lsrs	r4, r2
 80014f8:	4662      	mov	r2, ip
 80014fa:	2a20      	cmp	r2, #32
 80014fc:	d004      	beq.n	8001508 <__aeabi_dadd+0x61c>
 80014fe:	2240      	movs	r2, #64	; 0x40
 8001500:	4666      	mov	r6, ip
 8001502:	1b92      	subs	r2, r2, r6
 8001504:	4090      	lsls	r0, r2
 8001506:	4303      	orrs	r3, r0
 8001508:	1e5a      	subs	r2, r3, #1
 800150a:	4193      	sbcs	r3, r2
 800150c:	431c      	orrs	r4, r3
 800150e:	e67e      	b.n	800120e <__aeabi_dadd+0x322>
 8001510:	185c      	adds	r4, r3, r1
 8001512:	428c      	cmp	r4, r1
 8001514:	4189      	sbcs	r1, r1
 8001516:	4440      	add	r0, r8
 8001518:	4249      	negs	r1, r1
 800151a:	1847      	adds	r7, r0, r1
 800151c:	e6dd      	b.n	80012da <__aeabi_dadd+0x3ee>
 800151e:	0023      	movs	r3, r4
 8001520:	433b      	orrs	r3, r7
 8001522:	d100      	bne.n	8001526 <__aeabi_dadd+0x63a>
 8001524:	e6ad      	b.n	8001282 <__aeabi_dadd+0x396>
 8001526:	e606      	b.n	8001136 <__aeabi_dadd+0x24a>
 8001528:	0744      	lsls	r4, r0, #29
 800152a:	4323      	orrs	r3, r4
 800152c:	2480      	movs	r4, #128	; 0x80
 800152e:	08c0      	lsrs	r0, r0, #3
 8001530:	0324      	lsls	r4, r4, #12
 8001532:	4220      	tst	r0, r4
 8001534:	d008      	beq.n	8001548 <__aeabi_dadd+0x65c>
 8001536:	4642      	mov	r2, r8
 8001538:	08d6      	lsrs	r6, r2, #3
 800153a:	4226      	tst	r6, r4
 800153c:	d104      	bne.n	8001548 <__aeabi_dadd+0x65c>
 800153e:	4655      	mov	r5, sl
 8001540:	0030      	movs	r0, r6
 8001542:	08cb      	lsrs	r3, r1, #3
 8001544:	0751      	lsls	r1, r2, #29
 8001546:	430b      	orrs	r3, r1
 8001548:	0f5a      	lsrs	r2, r3, #29
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	08db      	lsrs	r3, r3, #3
 800154e:	0752      	lsls	r2, r2, #29
 8001550:	4313      	orrs	r3, r2
 8001552:	e619      	b.n	8001188 <__aeabi_dadd+0x29c>
 8001554:	2300      	movs	r3, #0
 8001556:	4a01      	ldr	r2, [pc, #4]	; (800155c <__aeabi_dadd+0x670>)
 8001558:	001f      	movs	r7, r3
 800155a:	e55e      	b.n	800101a <__aeabi_dadd+0x12e>
 800155c:	000007ff 	.word	0x000007ff
 8001560:	ff7fffff 	.word	0xff7fffff

08001564 <__aeabi_ddiv>:
 8001564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001566:	4657      	mov	r7, sl
 8001568:	464e      	mov	r6, r9
 800156a:	4645      	mov	r5, r8
 800156c:	46de      	mov	lr, fp
 800156e:	b5e0      	push	{r5, r6, r7, lr}
 8001570:	4681      	mov	r9, r0
 8001572:	0005      	movs	r5, r0
 8001574:	030c      	lsls	r4, r1, #12
 8001576:	0048      	lsls	r0, r1, #1
 8001578:	4692      	mov	sl, r2
 800157a:	001f      	movs	r7, r3
 800157c:	b085      	sub	sp, #20
 800157e:	0b24      	lsrs	r4, r4, #12
 8001580:	0d40      	lsrs	r0, r0, #21
 8001582:	0fce      	lsrs	r6, r1, #31
 8001584:	2800      	cmp	r0, #0
 8001586:	d100      	bne.n	800158a <__aeabi_ddiv+0x26>
 8001588:	e156      	b.n	8001838 <__aeabi_ddiv+0x2d4>
 800158a:	4bd4      	ldr	r3, [pc, #848]	; (80018dc <__aeabi_ddiv+0x378>)
 800158c:	4298      	cmp	r0, r3
 800158e:	d100      	bne.n	8001592 <__aeabi_ddiv+0x2e>
 8001590:	e172      	b.n	8001878 <__aeabi_ddiv+0x314>
 8001592:	0f6b      	lsrs	r3, r5, #29
 8001594:	00e4      	lsls	r4, r4, #3
 8001596:	431c      	orrs	r4, r3
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	041b      	lsls	r3, r3, #16
 800159c:	4323      	orrs	r3, r4
 800159e:	4698      	mov	r8, r3
 80015a0:	4bcf      	ldr	r3, [pc, #828]	; (80018e0 <__aeabi_ddiv+0x37c>)
 80015a2:	00ed      	lsls	r5, r5, #3
 80015a4:	469b      	mov	fp, r3
 80015a6:	2300      	movs	r3, #0
 80015a8:	4699      	mov	r9, r3
 80015aa:	4483      	add	fp, r0
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	033c      	lsls	r4, r7, #12
 80015b0:	007b      	lsls	r3, r7, #1
 80015b2:	4650      	mov	r0, sl
 80015b4:	0b24      	lsrs	r4, r4, #12
 80015b6:	0d5b      	lsrs	r3, r3, #21
 80015b8:	0fff      	lsrs	r7, r7, #31
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d100      	bne.n	80015c0 <__aeabi_ddiv+0x5c>
 80015be:	e11f      	b.n	8001800 <__aeabi_ddiv+0x29c>
 80015c0:	4ac6      	ldr	r2, [pc, #792]	; (80018dc <__aeabi_ddiv+0x378>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d100      	bne.n	80015c8 <__aeabi_ddiv+0x64>
 80015c6:	e162      	b.n	800188e <__aeabi_ddiv+0x32a>
 80015c8:	49c5      	ldr	r1, [pc, #788]	; (80018e0 <__aeabi_ddiv+0x37c>)
 80015ca:	0f42      	lsrs	r2, r0, #29
 80015cc:	468c      	mov	ip, r1
 80015ce:	00e4      	lsls	r4, r4, #3
 80015d0:	4659      	mov	r1, fp
 80015d2:	4314      	orrs	r4, r2
 80015d4:	2280      	movs	r2, #128	; 0x80
 80015d6:	4463      	add	r3, ip
 80015d8:	0412      	lsls	r2, r2, #16
 80015da:	1acb      	subs	r3, r1, r3
 80015dc:	4314      	orrs	r4, r2
 80015de:	469b      	mov	fp, r3
 80015e0:	00c2      	lsls	r2, r0, #3
 80015e2:	2000      	movs	r0, #0
 80015e4:	0033      	movs	r3, r6
 80015e6:	407b      	eors	r3, r7
 80015e8:	469a      	mov	sl, r3
 80015ea:	464b      	mov	r3, r9
 80015ec:	2b0f      	cmp	r3, #15
 80015ee:	d827      	bhi.n	8001640 <__aeabi_ddiv+0xdc>
 80015f0:	49bc      	ldr	r1, [pc, #752]	; (80018e4 <__aeabi_ddiv+0x380>)
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	58cb      	ldr	r3, [r1, r3]
 80015f6:	469f      	mov	pc, r3
 80015f8:	46b2      	mov	sl, r6
 80015fa:	9b00      	ldr	r3, [sp, #0]
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d016      	beq.n	800162e <__aeabi_ddiv+0xca>
 8001600:	2b03      	cmp	r3, #3
 8001602:	d100      	bne.n	8001606 <__aeabi_ddiv+0xa2>
 8001604:	e28e      	b.n	8001b24 <__aeabi_ddiv+0x5c0>
 8001606:	2b01      	cmp	r3, #1
 8001608:	d000      	beq.n	800160c <__aeabi_ddiv+0xa8>
 800160a:	e0d9      	b.n	80017c0 <__aeabi_ddiv+0x25c>
 800160c:	2300      	movs	r3, #0
 800160e:	2400      	movs	r4, #0
 8001610:	2500      	movs	r5, #0
 8001612:	4652      	mov	r2, sl
 8001614:	051b      	lsls	r3, r3, #20
 8001616:	4323      	orrs	r3, r4
 8001618:	07d2      	lsls	r2, r2, #31
 800161a:	4313      	orrs	r3, r2
 800161c:	0028      	movs	r0, r5
 800161e:	0019      	movs	r1, r3
 8001620:	b005      	add	sp, #20
 8001622:	bcf0      	pop	{r4, r5, r6, r7}
 8001624:	46bb      	mov	fp, r7
 8001626:	46b2      	mov	sl, r6
 8001628:	46a9      	mov	r9, r5
 800162a:	46a0      	mov	r8, r4
 800162c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800162e:	2400      	movs	r4, #0
 8001630:	2500      	movs	r5, #0
 8001632:	4baa      	ldr	r3, [pc, #680]	; (80018dc <__aeabi_ddiv+0x378>)
 8001634:	e7ed      	b.n	8001612 <__aeabi_ddiv+0xae>
 8001636:	46ba      	mov	sl, r7
 8001638:	46a0      	mov	r8, r4
 800163a:	0015      	movs	r5, r2
 800163c:	9000      	str	r0, [sp, #0]
 800163e:	e7dc      	b.n	80015fa <__aeabi_ddiv+0x96>
 8001640:	4544      	cmp	r4, r8
 8001642:	d200      	bcs.n	8001646 <__aeabi_ddiv+0xe2>
 8001644:	e1c7      	b.n	80019d6 <__aeabi_ddiv+0x472>
 8001646:	d100      	bne.n	800164a <__aeabi_ddiv+0xe6>
 8001648:	e1c2      	b.n	80019d0 <__aeabi_ddiv+0x46c>
 800164a:	2301      	movs	r3, #1
 800164c:	425b      	negs	r3, r3
 800164e:	469c      	mov	ip, r3
 8001650:	002e      	movs	r6, r5
 8001652:	4640      	mov	r0, r8
 8001654:	2500      	movs	r5, #0
 8001656:	44e3      	add	fp, ip
 8001658:	0223      	lsls	r3, r4, #8
 800165a:	0e14      	lsrs	r4, r2, #24
 800165c:	431c      	orrs	r4, r3
 800165e:	0c1b      	lsrs	r3, r3, #16
 8001660:	4699      	mov	r9, r3
 8001662:	0423      	lsls	r3, r4, #16
 8001664:	0c1f      	lsrs	r7, r3, #16
 8001666:	0212      	lsls	r2, r2, #8
 8001668:	4649      	mov	r1, r9
 800166a:	9200      	str	r2, [sp, #0]
 800166c:	9701      	str	r7, [sp, #4]
 800166e:	f7fe fde3 	bl	8000238 <__aeabi_uidivmod>
 8001672:	0002      	movs	r2, r0
 8001674:	437a      	muls	r2, r7
 8001676:	040b      	lsls	r3, r1, #16
 8001678:	0c31      	lsrs	r1, r6, #16
 800167a:	4680      	mov	r8, r0
 800167c:	4319      	orrs	r1, r3
 800167e:	428a      	cmp	r2, r1
 8001680:	d907      	bls.n	8001692 <__aeabi_ddiv+0x12e>
 8001682:	2301      	movs	r3, #1
 8001684:	425b      	negs	r3, r3
 8001686:	469c      	mov	ip, r3
 8001688:	1909      	adds	r1, r1, r4
 800168a:	44e0      	add	r8, ip
 800168c:	428c      	cmp	r4, r1
 800168e:	d800      	bhi.n	8001692 <__aeabi_ddiv+0x12e>
 8001690:	e207      	b.n	8001aa2 <__aeabi_ddiv+0x53e>
 8001692:	1a88      	subs	r0, r1, r2
 8001694:	4649      	mov	r1, r9
 8001696:	f7fe fdcf 	bl	8000238 <__aeabi_uidivmod>
 800169a:	0409      	lsls	r1, r1, #16
 800169c:	468c      	mov	ip, r1
 800169e:	0431      	lsls	r1, r6, #16
 80016a0:	4666      	mov	r6, ip
 80016a2:	9a01      	ldr	r2, [sp, #4]
 80016a4:	0c09      	lsrs	r1, r1, #16
 80016a6:	4342      	muls	r2, r0
 80016a8:	0003      	movs	r3, r0
 80016aa:	4331      	orrs	r1, r6
 80016ac:	428a      	cmp	r2, r1
 80016ae:	d904      	bls.n	80016ba <__aeabi_ddiv+0x156>
 80016b0:	1909      	adds	r1, r1, r4
 80016b2:	3b01      	subs	r3, #1
 80016b4:	428c      	cmp	r4, r1
 80016b6:	d800      	bhi.n	80016ba <__aeabi_ddiv+0x156>
 80016b8:	e1ed      	b.n	8001a96 <__aeabi_ddiv+0x532>
 80016ba:	1a88      	subs	r0, r1, r2
 80016bc:	4642      	mov	r2, r8
 80016be:	0412      	lsls	r2, r2, #16
 80016c0:	431a      	orrs	r2, r3
 80016c2:	4690      	mov	r8, r2
 80016c4:	4641      	mov	r1, r8
 80016c6:	9b00      	ldr	r3, [sp, #0]
 80016c8:	040e      	lsls	r6, r1, #16
 80016ca:	0c1b      	lsrs	r3, r3, #16
 80016cc:	001f      	movs	r7, r3
 80016ce:	9302      	str	r3, [sp, #8]
 80016d0:	9b00      	ldr	r3, [sp, #0]
 80016d2:	0c36      	lsrs	r6, r6, #16
 80016d4:	041b      	lsls	r3, r3, #16
 80016d6:	0c19      	lsrs	r1, r3, #16
 80016d8:	000b      	movs	r3, r1
 80016da:	4373      	muls	r3, r6
 80016dc:	0c12      	lsrs	r2, r2, #16
 80016de:	437e      	muls	r6, r7
 80016e0:	9103      	str	r1, [sp, #12]
 80016e2:	4351      	muls	r1, r2
 80016e4:	437a      	muls	r2, r7
 80016e6:	0c1f      	lsrs	r7, r3, #16
 80016e8:	46bc      	mov	ip, r7
 80016ea:	1876      	adds	r6, r6, r1
 80016ec:	4466      	add	r6, ip
 80016ee:	42b1      	cmp	r1, r6
 80016f0:	d903      	bls.n	80016fa <__aeabi_ddiv+0x196>
 80016f2:	2180      	movs	r1, #128	; 0x80
 80016f4:	0249      	lsls	r1, r1, #9
 80016f6:	468c      	mov	ip, r1
 80016f8:	4462      	add	r2, ip
 80016fa:	0c31      	lsrs	r1, r6, #16
 80016fc:	188a      	adds	r2, r1, r2
 80016fe:	0431      	lsls	r1, r6, #16
 8001700:	041e      	lsls	r6, r3, #16
 8001702:	0c36      	lsrs	r6, r6, #16
 8001704:	198e      	adds	r6, r1, r6
 8001706:	4290      	cmp	r0, r2
 8001708:	d302      	bcc.n	8001710 <__aeabi_ddiv+0x1ac>
 800170a:	d112      	bne.n	8001732 <__aeabi_ddiv+0x1ce>
 800170c:	42b5      	cmp	r5, r6
 800170e:	d210      	bcs.n	8001732 <__aeabi_ddiv+0x1ce>
 8001710:	4643      	mov	r3, r8
 8001712:	1e59      	subs	r1, r3, #1
 8001714:	9b00      	ldr	r3, [sp, #0]
 8001716:	469c      	mov	ip, r3
 8001718:	4465      	add	r5, ip
 800171a:	001f      	movs	r7, r3
 800171c:	429d      	cmp	r5, r3
 800171e:	419b      	sbcs	r3, r3
 8001720:	425b      	negs	r3, r3
 8001722:	191b      	adds	r3, r3, r4
 8001724:	18c0      	adds	r0, r0, r3
 8001726:	4284      	cmp	r4, r0
 8001728:	d200      	bcs.n	800172c <__aeabi_ddiv+0x1c8>
 800172a:	e1a0      	b.n	8001a6e <__aeabi_ddiv+0x50a>
 800172c:	d100      	bne.n	8001730 <__aeabi_ddiv+0x1cc>
 800172e:	e19b      	b.n	8001a68 <__aeabi_ddiv+0x504>
 8001730:	4688      	mov	r8, r1
 8001732:	1bae      	subs	r6, r5, r6
 8001734:	42b5      	cmp	r5, r6
 8001736:	41ad      	sbcs	r5, r5
 8001738:	1a80      	subs	r0, r0, r2
 800173a:	426d      	negs	r5, r5
 800173c:	1b40      	subs	r0, r0, r5
 800173e:	4284      	cmp	r4, r0
 8001740:	d100      	bne.n	8001744 <__aeabi_ddiv+0x1e0>
 8001742:	e1d5      	b.n	8001af0 <__aeabi_ddiv+0x58c>
 8001744:	4649      	mov	r1, r9
 8001746:	f7fe fd77 	bl	8000238 <__aeabi_uidivmod>
 800174a:	9a01      	ldr	r2, [sp, #4]
 800174c:	040b      	lsls	r3, r1, #16
 800174e:	4342      	muls	r2, r0
 8001750:	0c31      	lsrs	r1, r6, #16
 8001752:	0005      	movs	r5, r0
 8001754:	4319      	orrs	r1, r3
 8001756:	428a      	cmp	r2, r1
 8001758:	d900      	bls.n	800175c <__aeabi_ddiv+0x1f8>
 800175a:	e16c      	b.n	8001a36 <__aeabi_ddiv+0x4d2>
 800175c:	1a88      	subs	r0, r1, r2
 800175e:	4649      	mov	r1, r9
 8001760:	f7fe fd6a 	bl	8000238 <__aeabi_uidivmod>
 8001764:	9a01      	ldr	r2, [sp, #4]
 8001766:	0436      	lsls	r6, r6, #16
 8001768:	4342      	muls	r2, r0
 800176a:	0409      	lsls	r1, r1, #16
 800176c:	0c36      	lsrs	r6, r6, #16
 800176e:	0003      	movs	r3, r0
 8001770:	430e      	orrs	r6, r1
 8001772:	42b2      	cmp	r2, r6
 8001774:	d900      	bls.n	8001778 <__aeabi_ddiv+0x214>
 8001776:	e153      	b.n	8001a20 <__aeabi_ddiv+0x4bc>
 8001778:	9803      	ldr	r0, [sp, #12]
 800177a:	1ab6      	subs	r6, r6, r2
 800177c:	0002      	movs	r2, r0
 800177e:	042d      	lsls	r5, r5, #16
 8001780:	431d      	orrs	r5, r3
 8001782:	9f02      	ldr	r7, [sp, #8]
 8001784:	042b      	lsls	r3, r5, #16
 8001786:	0c1b      	lsrs	r3, r3, #16
 8001788:	435a      	muls	r2, r3
 800178a:	437b      	muls	r3, r7
 800178c:	469c      	mov	ip, r3
 800178e:	0c29      	lsrs	r1, r5, #16
 8001790:	4348      	muls	r0, r1
 8001792:	0c13      	lsrs	r3, r2, #16
 8001794:	4484      	add	ip, r0
 8001796:	4463      	add	r3, ip
 8001798:	4379      	muls	r1, r7
 800179a:	4298      	cmp	r0, r3
 800179c:	d903      	bls.n	80017a6 <__aeabi_ddiv+0x242>
 800179e:	2080      	movs	r0, #128	; 0x80
 80017a0:	0240      	lsls	r0, r0, #9
 80017a2:	4684      	mov	ip, r0
 80017a4:	4461      	add	r1, ip
 80017a6:	0c18      	lsrs	r0, r3, #16
 80017a8:	0412      	lsls	r2, r2, #16
 80017aa:	041b      	lsls	r3, r3, #16
 80017ac:	0c12      	lsrs	r2, r2, #16
 80017ae:	1841      	adds	r1, r0, r1
 80017b0:	189b      	adds	r3, r3, r2
 80017b2:	428e      	cmp	r6, r1
 80017b4:	d200      	bcs.n	80017b8 <__aeabi_ddiv+0x254>
 80017b6:	e0ff      	b.n	80019b8 <__aeabi_ddiv+0x454>
 80017b8:	d100      	bne.n	80017bc <__aeabi_ddiv+0x258>
 80017ba:	e0fa      	b.n	80019b2 <__aeabi_ddiv+0x44e>
 80017bc:	2301      	movs	r3, #1
 80017be:	431d      	orrs	r5, r3
 80017c0:	4a49      	ldr	r2, [pc, #292]	; (80018e8 <__aeabi_ddiv+0x384>)
 80017c2:	445a      	add	r2, fp
 80017c4:	2a00      	cmp	r2, #0
 80017c6:	dc00      	bgt.n	80017ca <__aeabi_ddiv+0x266>
 80017c8:	e0aa      	b.n	8001920 <__aeabi_ddiv+0x3bc>
 80017ca:	076b      	lsls	r3, r5, #29
 80017cc:	d000      	beq.n	80017d0 <__aeabi_ddiv+0x26c>
 80017ce:	e13d      	b.n	8001a4c <__aeabi_ddiv+0x4e8>
 80017d0:	08ed      	lsrs	r5, r5, #3
 80017d2:	4643      	mov	r3, r8
 80017d4:	01db      	lsls	r3, r3, #7
 80017d6:	d506      	bpl.n	80017e6 <__aeabi_ddiv+0x282>
 80017d8:	4642      	mov	r2, r8
 80017da:	4b44      	ldr	r3, [pc, #272]	; (80018ec <__aeabi_ddiv+0x388>)
 80017dc:	401a      	ands	r2, r3
 80017de:	4690      	mov	r8, r2
 80017e0:	2280      	movs	r2, #128	; 0x80
 80017e2:	00d2      	lsls	r2, r2, #3
 80017e4:	445a      	add	r2, fp
 80017e6:	4b42      	ldr	r3, [pc, #264]	; (80018f0 <__aeabi_ddiv+0x38c>)
 80017e8:	429a      	cmp	r2, r3
 80017ea:	dd00      	ble.n	80017ee <__aeabi_ddiv+0x28a>
 80017ec:	e71f      	b.n	800162e <__aeabi_ddiv+0xca>
 80017ee:	4643      	mov	r3, r8
 80017f0:	075b      	lsls	r3, r3, #29
 80017f2:	431d      	orrs	r5, r3
 80017f4:	4643      	mov	r3, r8
 80017f6:	0552      	lsls	r2, r2, #21
 80017f8:	025c      	lsls	r4, r3, #9
 80017fa:	0b24      	lsrs	r4, r4, #12
 80017fc:	0d53      	lsrs	r3, r2, #21
 80017fe:	e708      	b.n	8001612 <__aeabi_ddiv+0xae>
 8001800:	4652      	mov	r2, sl
 8001802:	4322      	orrs	r2, r4
 8001804:	d100      	bne.n	8001808 <__aeabi_ddiv+0x2a4>
 8001806:	e07b      	b.n	8001900 <__aeabi_ddiv+0x39c>
 8001808:	2c00      	cmp	r4, #0
 800180a:	d100      	bne.n	800180e <__aeabi_ddiv+0x2aa>
 800180c:	e0fa      	b.n	8001a04 <__aeabi_ddiv+0x4a0>
 800180e:	0020      	movs	r0, r4
 8001810:	f001 f8d6 	bl	80029c0 <__clzsi2>
 8001814:	0002      	movs	r2, r0
 8001816:	3a0b      	subs	r2, #11
 8001818:	231d      	movs	r3, #29
 800181a:	0001      	movs	r1, r0
 800181c:	1a9b      	subs	r3, r3, r2
 800181e:	4652      	mov	r2, sl
 8001820:	3908      	subs	r1, #8
 8001822:	40da      	lsrs	r2, r3
 8001824:	408c      	lsls	r4, r1
 8001826:	4314      	orrs	r4, r2
 8001828:	4652      	mov	r2, sl
 800182a:	408a      	lsls	r2, r1
 800182c:	4b31      	ldr	r3, [pc, #196]	; (80018f4 <__aeabi_ddiv+0x390>)
 800182e:	4458      	add	r0, fp
 8001830:	469b      	mov	fp, r3
 8001832:	4483      	add	fp, r0
 8001834:	2000      	movs	r0, #0
 8001836:	e6d5      	b.n	80015e4 <__aeabi_ddiv+0x80>
 8001838:	464b      	mov	r3, r9
 800183a:	4323      	orrs	r3, r4
 800183c:	4698      	mov	r8, r3
 800183e:	d044      	beq.n	80018ca <__aeabi_ddiv+0x366>
 8001840:	2c00      	cmp	r4, #0
 8001842:	d100      	bne.n	8001846 <__aeabi_ddiv+0x2e2>
 8001844:	e0ce      	b.n	80019e4 <__aeabi_ddiv+0x480>
 8001846:	0020      	movs	r0, r4
 8001848:	f001 f8ba 	bl	80029c0 <__clzsi2>
 800184c:	0001      	movs	r1, r0
 800184e:	0002      	movs	r2, r0
 8001850:	390b      	subs	r1, #11
 8001852:	231d      	movs	r3, #29
 8001854:	1a5b      	subs	r3, r3, r1
 8001856:	4649      	mov	r1, r9
 8001858:	0010      	movs	r0, r2
 800185a:	40d9      	lsrs	r1, r3
 800185c:	3808      	subs	r0, #8
 800185e:	4084      	lsls	r4, r0
 8001860:	000b      	movs	r3, r1
 8001862:	464d      	mov	r5, r9
 8001864:	4323      	orrs	r3, r4
 8001866:	4698      	mov	r8, r3
 8001868:	4085      	lsls	r5, r0
 800186a:	4823      	ldr	r0, [pc, #140]	; (80018f8 <__aeabi_ddiv+0x394>)
 800186c:	1a83      	subs	r3, r0, r2
 800186e:	469b      	mov	fp, r3
 8001870:	2300      	movs	r3, #0
 8001872:	4699      	mov	r9, r3
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	e69a      	b.n	80015ae <__aeabi_ddiv+0x4a>
 8001878:	464b      	mov	r3, r9
 800187a:	4323      	orrs	r3, r4
 800187c:	4698      	mov	r8, r3
 800187e:	d11d      	bne.n	80018bc <__aeabi_ddiv+0x358>
 8001880:	2308      	movs	r3, #8
 8001882:	4699      	mov	r9, r3
 8001884:	3b06      	subs	r3, #6
 8001886:	2500      	movs	r5, #0
 8001888:	4683      	mov	fp, r0
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	e68f      	b.n	80015ae <__aeabi_ddiv+0x4a>
 800188e:	4652      	mov	r2, sl
 8001890:	4322      	orrs	r2, r4
 8001892:	d109      	bne.n	80018a8 <__aeabi_ddiv+0x344>
 8001894:	2302      	movs	r3, #2
 8001896:	4649      	mov	r1, r9
 8001898:	4319      	orrs	r1, r3
 800189a:	4b18      	ldr	r3, [pc, #96]	; (80018fc <__aeabi_ddiv+0x398>)
 800189c:	4689      	mov	r9, r1
 800189e:	469c      	mov	ip, r3
 80018a0:	2400      	movs	r4, #0
 80018a2:	2002      	movs	r0, #2
 80018a4:	44e3      	add	fp, ip
 80018a6:	e69d      	b.n	80015e4 <__aeabi_ddiv+0x80>
 80018a8:	2303      	movs	r3, #3
 80018aa:	464a      	mov	r2, r9
 80018ac:	431a      	orrs	r2, r3
 80018ae:	4b13      	ldr	r3, [pc, #76]	; (80018fc <__aeabi_ddiv+0x398>)
 80018b0:	4691      	mov	r9, r2
 80018b2:	469c      	mov	ip, r3
 80018b4:	4652      	mov	r2, sl
 80018b6:	2003      	movs	r0, #3
 80018b8:	44e3      	add	fp, ip
 80018ba:	e693      	b.n	80015e4 <__aeabi_ddiv+0x80>
 80018bc:	230c      	movs	r3, #12
 80018be:	4699      	mov	r9, r3
 80018c0:	3b09      	subs	r3, #9
 80018c2:	46a0      	mov	r8, r4
 80018c4:	4683      	mov	fp, r0
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	e671      	b.n	80015ae <__aeabi_ddiv+0x4a>
 80018ca:	2304      	movs	r3, #4
 80018cc:	4699      	mov	r9, r3
 80018ce:	2300      	movs	r3, #0
 80018d0:	469b      	mov	fp, r3
 80018d2:	3301      	adds	r3, #1
 80018d4:	2500      	movs	r5, #0
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	e669      	b.n	80015ae <__aeabi_ddiv+0x4a>
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	000007ff 	.word	0x000007ff
 80018e0:	fffffc01 	.word	0xfffffc01
 80018e4:	08006990 	.word	0x08006990
 80018e8:	000003ff 	.word	0x000003ff
 80018ec:	feffffff 	.word	0xfeffffff
 80018f0:	000007fe 	.word	0x000007fe
 80018f4:	000003f3 	.word	0x000003f3
 80018f8:	fffffc0d 	.word	0xfffffc0d
 80018fc:	fffff801 	.word	0xfffff801
 8001900:	4649      	mov	r1, r9
 8001902:	2301      	movs	r3, #1
 8001904:	4319      	orrs	r1, r3
 8001906:	4689      	mov	r9, r1
 8001908:	2400      	movs	r4, #0
 800190a:	2001      	movs	r0, #1
 800190c:	e66a      	b.n	80015e4 <__aeabi_ddiv+0x80>
 800190e:	2300      	movs	r3, #0
 8001910:	2480      	movs	r4, #128	; 0x80
 8001912:	469a      	mov	sl, r3
 8001914:	2500      	movs	r5, #0
 8001916:	4b8a      	ldr	r3, [pc, #552]	; (8001b40 <__aeabi_ddiv+0x5dc>)
 8001918:	0324      	lsls	r4, r4, #12
 800191a:	e67a      	b.n	8001612 <__aeabi_ddiv+0xae>
 800191c:	2501      	movs	r5, #1
 800191e:	426d      	negs	r5, r5
 8001920:	2301      	movs	r3, #1
 8001922:	1a9b      	subs	r3, r3, r2
 8001924:	2b38      	cmp	r3, #56	; 0x38
 8001926:	dd00      	ble.n	800192a <__aeabi_ddiv+0x3c6>
 8001928:	e670      	b.n	800160c <__aeabi_ddiv+0xa8>
 800192a:	2b1f      	cmp	r3, #31
 800192c:	dc00      	bgt.n	8001930 <__aeabi_ddiv+0x3cc>
 800192e:	e0bf      	b.n	8001ab0 <__aeabi_ddiv+0x54c>
 8001930:	211f      	movs	r1, #31
 8001932:	4249      	negs	r1, r1
 8001934:	1a8a      	subs	r2, r1, r2
 8001936:	4641      	mov	r1, r8
 8001938:	40d1      	lsrs	r1, r2
 800193a:	000a      	movs	r2, r1
 800193c:	2b20      	cmp	r3, #32
 800193e:	d004      	beq.n	800194a <__aeabi_ddiv+0x3e6>
 8001940:	4641      	mov	r1, r8
 8001942:	4b80      	ldr	r3, [pc, #512]	; (8001b44 <__aeabi_ddiv+0x5e0>)
 8001944:	445b      	add	r3, fp
 8001946:	4099      	lsls	r1, r3
 8001948:	430d      	orrs	r5, r1
 800194a:	1e6b      	subs	r3, r5, #1
 800194c:	419d      	sbcs	r5, r3
 800194e:	2307      	movs	r3, #7
 8001950:	432a      	orrs	r2, r5
 8001952:	001d      	movs	r5, r3
 8001954:	2400      	movs	r4, #0
 8001956:	4015      	ands	r5, r2
 8001958:	4213      	tst	r3, r2
 800195a:	d100      	bne.n	800195e <__aeabi_ddiv+0x3fa>
 800195c:	e0d4      	b.n	8001b08 <__aeabi_ddiv+0x5a4>
 800195e:	210f      	movs	r1, #15
 8001960:	2300      	movs	r3, #0
 8001962:	4011      	ands	r1, r2
 8001964:	2904      	cmp	r1, #4
 8001966:	d100      	bne.n	800196a <__aeabi_ddiv+0x406>
 8001968:	e0cb      	b.n	8001b02 <__aeabi_ddiv+0x59e>
 800196a:	1d11      	adds	r1, r2, #4
 800196c:	4291      	cmp	r1, r2
 800196e:	4192      	sbcs	r2, r2
 8001970:	4252      	negs	r2, r2
 8001972:	189b      	adds	r3, r3, r2
 8001974:	000a      	movs	r2, r1
 8001976:	0219      	lsls	r1, r3, #8
 8001978:	d400      	bmi.n	800197c <__aeabi_ddiv+0x418>
 800197a:	e0c2      	b.n	8001b02 <__aeabi_ddiv+0x59e>
 800197c:	2301      	movs	r3, #1
 800197e:	2400      	movs	r4, #0
 8001980:	2500      	movs	r5, #0
 8001982:	e646      	b.n	8001612 <__aeabi_ddiv+0xae>
 8001984:	2380      	movs	r3, #128	; 0x80
 8001986:	4641      	mov	r1, r8
 8001988:	031b      	lsls	r3, r3, #12
 800198a:	4219      	tst	r1, r3
 800198c:	d008      	beq.n	80019a0 <__aeabi_ddiv+0x43c>
 800198e:	421c      	tst	r4, r3
 8001990:	d106      	bne.n	80019a0 <__aeabi_ddiv+0x43c>
 8001992:	431c      	orrs	r4, r3
 8001994:	0324      	lsls	r4, r4, #12
 8001996:	46ba      	mov	sl, r7
 8001998:	0015      	movs	r5, r2
 800199a:	4b69      	ldr	r3, [pc, #420]	; (8001b40 <__aeabi_ddiv+0x5dc>)
 800199c:	0b24      	lsrs	r4, r4, #12
 800199e:	e638      	b.n	8001612 <__aeabi_ddiv+0xae>
 80019a0:	2480      	movs	r4, #128	; 0x80
 80019a2:	4643      	mov	r3, r8
 80019a4:	0324      	lsls	r4, r4, #12
 80019a6:	431c      	orrs	r4, r3
 80019a8:	0324      	lsls	r4, r4, #12
 80019aa:	46b2      	mov	sl, r6
 80019ac:	4b64      	ldr	r3, [pc, #400]	; (8001b40 <__aeabi_ddiv+0x5dc>)
 80019ae:	0b24      	lsrs	r4, r4, #12
 80019b0:	e62f      	b.n	8001612 <__aeabi_ddiv+0xae>
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d100      	bne.n	80019b8 <__aeabi_ddiv+0x454>
 80019b6:	e703      	b.n	80017c0 <__aeabi_ddiv+0x25c>
 80019b8:	19a6      	adds	r6, r4, r6
 80019ba:	1e68      	subs	r0, r5, #1
 80019bc:	42a6      	cmp	r6, r4
 80019be:	d200      	bcs.n	80019c2 <__aeabi_ddiv+0x45e>
 80019c0:	e08d      	b.n	8001ade <__aeabi_ddiv+0x57a>
 80019c2:	428e      	cmp	r6, r1
 80019c4:	d200      	bcs.n	80019c8 <__aeabi_ddiv+0x464>
 80019c6:	e0a3      	b.n	8001b10 <__aeabi_ddiv+0x5ac>
 80019c8:	d100      	bne.n	80019cc <__aeabi_ddiv+0x468>
 80019ca:	e0b3      	b.n	8001b34 <__aeabi_ddiv+0x5d0>
 80019cc:	0005      	movs	r5, r0
 80019ce:	e6f5      	b.n	80017bc <__aeabi_ddiv+0x258>
 80019d0:	42aa      	cmp	r2, r5
 80019d2:	d900      	bls.n	80019d6 <__aeabi_ddiv+0x472>
 80019d4:	e639      	b.n	800164a <__aeabi_ddiv+0xe6>
 80019d6:	4643      	mov	r3, r8
 80019d8:	07de      	lsls	r6, r3, #31
 80019da:	0858      	lsrs	r0, r3, #1
 80019dc:	086b      	lsrs	r3, r5, #1
 80019de:	431e      	orrs	r6, r3
 80019e0:	07ed      	lsls	r5, r5, #31
 80019e2:	e639      	b.n	8001658 <__aeabi_ddiv+0xf4>
 80019e4:	4648      	mov	r0, r9
 80019e6:	f000 ffeb 	bl	80029c0 <__clzsi2>
 80019ea:	0001      	movs	r1, r0
 80019ec:	0002      	movs	r2, r0
 80019ee:	3115      	adds	r1, #21
 80019f0:	3220      	adds	r2, #32
 80019f2:	291c      	cmp	r1, #28
 80019f4:	dc00      	bgt.n	80019f8 <__aeabi_ddiv+0x494>
 80019f6:	e72c      	b.n	8001852 <__aeabi_ddiv+0x2ee>
 80019f8:	464b      	mov	r3, r9
 80019fa:	3808      	subs	r0, #8
 80019fc:	4083      	lsls	r3, r0
 80019fe:	2500      	movs	r5, #0
 8001a00:	4698      	mov	r8, r3
 8001a02:	e732      	b.n	800186a <__aeabi_ddiv+0x306>
 8001a04:	f000 ffdc 	bl	80029c0 <__clzsi2>
 8001a08:	0003      	movs	r3, r0
 8001a0a:	001a      	movs	r2, r3
 8001a0c:	3215      	adds	r2, #21
 8001a0e:	3020      	adds	r0, #32
 8001a10:	2a1c      	cmp	r2, #28
 8001a12:	dc00      	bgt.n	8001a16 <__aeabi_ddiv+0x4b2>
 8001a14:	e700      	b.n	8001818 <__aeabi_ddiv+0x2b4>
 8001a16:	4654      	mov	r4, sl
 8001a18:	3b08      	subs	r3, #8
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	409c      	lsls	r4, r3
 8001a1e:	e705      	b.n	800182c <__aeabi_ddiv+0x2c8>
 8001a20:	1936      	adds	r6, r6, r4
 8001a22:	3b01      	subs	r3, #1
 8001a24:	42b4      	cmp	r4, r6
 8001a26:	d900      	bls.n	8001a2a <__aeabi_ddiv+0x4c6>
 8001a28:	e6a6      	b.n	8001778 <__aeabi_ddiv+0x214>
 8001a2a:	42b2      	cmp	r2, r6
 8001a2c:	d800      	bhi.n	8001a30 <__aeabi_ddiv+0x4cc>
 8001a2e:	e6a3      	b.n	8001778 <__aeabi_ddiv+0x214>
 8001a30:	1e83      	subs	r3, r0, #2
 8001a32:	1936      	adds	r6, r6, r4
 8001a34:	e6a0      	b.n	8001778 <__aeabi_ddiv+0x214>
 8001a36:	1909      	adds	r1, r1, r4
 8001a38:	3d01      	subs	r5, #1
 8001a3a:	428c      	cmp	r4, r1
 8001a3c:	d900      	bls.n	8001a40 <__aeabi_ddiv+0x4dc>
 8001a3e:	e68d      	b.n	800175c <__aeabi_ddiv+0x1f8>
 8001a40:	428a      	cmp	r2, r1
 8001a42:	d800      	bhi.n	8001a46 <__aeabi_ddiv+0x4e2>
 8001a44:	e68a      	b.n	800175c <__aeabi_ddiv+0x1f8>
 8001a46:	1e85      	subs	r5, r0, #2
 8001a48:	1909      	adds	r1, r1, r4
 8001a4a:	e687      	b.n	800175c <__aeabi_ddiv+0x1f8>
 8001a4c:	230f      	movs	r3, #15
 8001a4e:	402b      	ands	r3, r5
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d100      	bne.n	8001a56 <__aeabi_ddiv+0x4f2>
 8001a54:	e6bc      	b.n	80017d0 <__aeabi_ddiv+0x26c>
 8001a56:	2305      	movs	r3, #5
 8001a58:	425b      	negs	r3, r3
 8001a5a:	42ab      	cmp	r3, r5
 8001a5c:	419b      	sbcs	r3, r3
 8001a5e:	3504      	adds	r5, #4
 8001a60:	425b      	negs	r3, r3
 8001a62:	08ed      	lsrs	r5, r5, #3
 8001a64:	4498      	add	r8, r3
 8001a66:	e6b4      	b.n	80017d2 <__aeabi_ddiv+0x26e>
 8001a68:	42af      	cmp	r7, r5
 8001a6a:	d900      	bls.n	8001a6e <__aeabi_ddiv+0x50a>
 8001a6c:	e660      	b.n	8001730 <__aeabi_ddiv+0x1cc>
 8001a6e:	4282      	cmp	r2, r0
 8001a70:	d804      	bhi.n	8001a7c <__aeabi_ddiv+0x518>
 8001a72:	d000      	beq.n	8001a76 <__aeabi_ddiv+0x512>
 8001a74:	e65c      	b.n	8001730 <__aeabi_ddiv+0x1cc>
 8001a76:	42ae      	cmp	r6, r5
 8001a78:	d800      	bhi.n	8001a7c <__aeabi_ddiv+0x518>
 8001a7a:	e659      	b.n	8001730 <__aeabi_ddiv+0x1cc>
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	425b      	negs	r3, r3
 8001a80:	469c      	mov	ip, r3
 8001a82:	9b00      	ldr	r3, [sp, #0]
 8001a84:	44e0      	add	r8, ip
 8001a86:	469c      	mov	ip, r3
 8001a88:	4465      	add	r5, ip
 8001a8a:	429d      	cmp	r5, r3
 8001a8c:	419b      	sbcs	r3, r3
 8001a8e:	425b      	negs	r3, r3
 8001a90:	191b      	adds	r3, r3, r4
 8001a92:	18c0      	adds	r0, r0, r3
 8001a94:	e64d      	b.n	8001732 <__aeabi_ddiv+0x1ce>
 8001a96:	428a      	cmp	r2, r1
 8001a98:	d800      	bhi.n	8001a9c <__aeabi_ddiv+0x538>
 8001a9a:	e60e      	b.n	80016ba <__aeabi_ddiv+0x156>
 8001a9c:	1e83      	subs	r3, r0, #2
 8001a9e:	1909      	adds	r1, r1, r4
 8001aa0:	e60b      	b.n	80016ba <__aeabi_ddiv+0x156>
 8001aa2:	428a      	cmp	r2, r1
 8001aa4:	d800      	bhi.n	8001aa8 <__aeabi_ddiv+0x544>
 8001aa6:	e5f4      	b.n	8001692 <__aeabi_ddiv+0x12e>
 8001aa8:	1e83      	subs	r3, r0, #2
 8001aaa:	4698      	mov	r8, r3
 8001aac:	1909      	adds	r1, r1, r4
 8001aae:	e5f0      	b.n	8001692 <__aeabi_ddiv+0x12e>
 8001ab0:	4925      	ldr	r1, [pc, #148]	; (8001b48 <__aeabi_ddiv+0x5e4>)
 8001ab2:	0028      	movs	r0, r5
 8001ab4:	4459      	add	r1, fp
 8001ab6:	408d      	lsls	r5, r1
 8001ab8:	4642      	mov	r2, r8
 8001aba:	408a      	lsls	r2, r1
 8001abc:	1e69      	subs	r1, r5, #1
 8001abe:	418d      	sbcs	r5, r1
 8001ac0:	4641      	mov	r1, r8
 8001ac2:	40d8      	lsrs	r0, r3
 8001ac4:	40d9      	lsrs	r1, r3
 8001ac6:	4302      	orrs	r2, r0
 8001ac8:	432a      	orrs	r2, r5
 8001aca:	000b      	movs	r3, r1
 8001acc:	0751      	lsls	r1, r2, #29
 8001ace:	d100      	bne.n	8001ad2 <__aeabi_ddiv+0x56e>
 8001ad0:	e751      	b.n	8001976 <__aeabi_ddiv+0x412>
 8001ad2:	210f      	movs	r1, #15
 8001ad4:	4011      	ands	r1, r2
 8001ad6:	2904      	cmp	r1, #4
 8001ad8:	d000      	beq.n	8001adc <__aeabi_ddiv+0x578>
 8001ada:	e746      	b.n	800196a <__aeabi_ddiv+0x406>
 8001adc:	e74b      	b.n	8001976 <__aeabi_ddiv+0x412>
 8001ade:	0005      	movs	r5, r0
 8001ae0:	428e      	cmp	r6, r1
 8001ae2:	d000      	beq.n	8001ae6 <__aeabi_ddiv+0x582>
 8001ae4:	e66a      	b.n	80017bc <__aeabi_ddiv+0x258>
 8001ae6:	9a00      	ldr	r2, [sp, #0]
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d000      	beq.n	8001aee <__aeabi_ddiv+0x58a>
 8001aec:	e666      	b.n	80017bc <__aeabi_ddiv+0x258>
 8001aee:	e667      	b.n	80017c0 <__aeabi_ddiv+0x25c>
 8001af0:	4a16      	ldr	r2, [pc, #88]	; (8001b4c <__aeabi_ddiv+0x5e8>)
 8001af2:	445a      	add	r2, fp
 8001af4:	2a00      	cmp	r2, #0
 8001af6:	dc00      	bgt.n	8001afa <__aeabi_ddiv+0x596>
 8001af8:	e710      	b.n	800191c <__aeabi_ddiv+0x3b8>
 8001afa:	2301      	movs	r3, #1
 8001afc:	2500      	movs	r5, #0
 8001afe:	4498      	add	r8, r3
 8001b00:	e667      	b.n	80017d2 <__aeabi_ddiv+0x26e>
 8001b02:	075d      	lsls	r5, r3, #29
 8001b04:	025b      	lsls	r3, r3, #9
 8001b06:	0b1c      	lsrs	r4, r3, #12
 8001b08:	08d2      	lsrs	r2, r2, #3
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	4315      	orrs	r5, r2
 8001b0e:	e580      	b.n	8001612 <__aeabi_ddiv+0xae>
 8001b10:	9800      	ldr	r0, [sp, #0]
 8001b12:	3d02      	subs	r5, #2
 8001b14:	0042      	lsls	r2, r0, #1
 8001b16:	4282      	cmp	r2, r0
 8001b18:	41bf      	sbcs	r7, r7
 8001b1a:	427f      	negs	r7, r7
 8001b1c:	193c      	adds	r4, r7, r4
 8001b1e:	1936      	adds	r6, r6, r4
 8001b20:	9200      	str	r2, [sp, #0]
 8001b22:	e7dd      	b.n	8001ae0 <__aeabi_ddiv+0x57c>
 8001b24:	2480      	movs	r4, #128	; 0x80
 8001b26:	4643      	mov	r3, r8
 8001b28:	0324      	lsls	r4, r4, #12
 8001b2a:	431c      	orrs	r4, r3
 8001b2c:	0324      	lsls	r4, r4, #12
 8001b2e:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <__aeabi_ddiv+0x5dc>)
 8001b30:	0b24      	lsrs	r4, r4, #12
 8001b32:	e56e      	b.n	8001612 <__aeabi_ddiv+0xae>
 8001b34:	9a00      	ldr	r2, [sp, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d3ea      	bcc.n	8001b10 <__aeabi_ddiv+0x5ac>
 8001b3a:	0005      	movs	r5, r0
 8001b3c:	e7d3      	b.n	8001ae6 <__aeabi_ddiv+0x582>
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	000007ff 	.word	0x000007ff
 8001b44:	0000043e 	.word	0x0000043e
 8001b48:	0000041e 	.word	0x0000041e
 8001b4c:	000003ff 	.word	0x000003ff

08001b50 <__aeabi_dmul>:
 8001b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b52:	4657      	mov	r7, sl
 8001b54:	464e      	mov	r6, r9
 8001b56:	4645      	mov	r5, r8
 8001b58:	46de      	mov	lr, fp
 8001b5a:	b5e0      	push	{r5, r6, r7, lr}
 8001b5c:	4698      	mov	r8, r3
 8001b5e:	030c      	lsls	r4, r1, #12
 8001b60:	004b      	lsls	r3, r1, #1
 8001b62:	0006      	movs	r6, r0
 8001b64:	4692      	mov	sl, r2
 8001b66:	b087      	sub	sp, #28
 8001b68:	0b24      	lsrs	r4, r4, #12
 8001b6a:	0d5b      	lsrs	r3, r3, #21
 8001b6c:	0fcf      	lsrs	r7, r1, #31
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d100      	bne.n	8001b74 <__aeabi_dmul+0x24>
 8001b72:	e15c      	b.n	8001e2e <__aeabi_dmul+0x2de>
 8001b74:	4ad9      	ldr	r2, [pc, #868]	; (8001edc <__aeabi_dmul+0x38c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d100      	bne.n	8001b7c <__aeabi_dmul+0x2c>
 8001b7a:	e175      	b.n	8001e68 <__aeabi_dmul+0x318>
 8001b7c:	0f42      	lsrs	r2, r0, #29
 8001b7e:	00e4      	lsls	r4, r4, #3
 8001b80:	4314      	orrs	r4, r2
 8001b82:	2280      	movs	r2, #128	; 0x80
 8001b84:	0412      	lsls	r2, r2, #16
 8001b86:	4314      	orrs	r4, r2
 8001b88:	4ad5      	ldr	r2, [pc, #852]	; (8001ee0 <__aeabi_dmul+0x390>)
 8001b8a:	00c5      	lsls	r5, r0, #3
 8001b8c:	4694      	mov	ip, r2
 8001b8e:	4463      	add	r3, ip
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	2300      	movs	r3, #0
 8001b94:	4699      	mov	r9, r3
 8001b96:	469b      	mov	fp, r3
 8001b98:	4643      	mov	r3, r8
 8001b9a:	4642      	mov	r2, r8
 8001b9c:	031e      	lsls	r6, r3, #12
 8001b9e:	0fd2      	lsrs	r2, r2, #31
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	4650      	mov	r0, sl
 8001ba4:	4690      	mov	r8, r2
 8001ba6:	0b36      	lsrs	r6, r6, #12
 8001ba8:	0d5b      	lsrs	r3, r3, #21
 8001baa:	d100      	bne.n	8001bae <__aeabi_dmul+0x5e>
 8001bac:	e120      	b.n	8001df0 <__aeabi_dmul+0x2a0>
 8001bae:	4acb      	ldr	r2, [pc, #812]	; (8001edc <__aeabi_dmul+0x38c>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d100      	bne.n	8001bb6 <__aeabi_dmul+0x66>
 8001bb4:	e162      	b.n	8001e7c <__aeabi_dmul+0x32c>
 8001bb6:	49ca      	ldr	r1, [pc, #808]	; (8001ee0 <__aeabi_dmul+0x390>)
 8001bb8:	0f42      	lsrs	r2, r0, #29
 8001bba:	468c      	mov	ip, r1
 8001bbc:	9900      	ldr	r1, [sp, #0]
 8001bbe:	4463      	add	r3, ip
 8001bc0:	00f6      	lsls	r6, r6, #3
 8001bc2:	468c      	mov	ip, r1
 8001bc4:	4316      	orrs	r6, r2
 8001bc6:	2280      	movs	r2, #128	; 0x80
 8001bc8:	449c      	add	ip, r3
 8001bca:	0412      	lsls	r2, r2, #16
 8001bcc:	4663      	mov	r3, ip
 8001bce:	4316      	orrs	r6, r2
 8001bd0:	00c2      	lsls	r2, r0, #3
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	9900      	ldr	r1, [sp, #0]
 8001bd8:	4643      	mov	r3, r8
 8001bda:	3101      	adds	r1, #1
 8001bdc:	468c      	mov	ip, r1
 8001bde:	4649      	mov	r1, r9
 8001be0:	407b      	eors	r3, r7
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	290f      	cmp	r1, #15
 8001be6:	d826      	bhi.n	8001c36 <__aeabi_dmul+0xe6>
 8001be8:	4bbe      	ldr	r3, [pc, #760]	; (8001ee4 <__aeabi_dmul+0x394>)
 8001bea:	0089      	lsls	r1, r1, #2
 8001bec:	5859      	ldr	r1, [r3, r1]
 8001bee:	468f      	mov	pc, r1
 8001bf0:	4643      	mov	r3, r8
 8001bf2:	9301      	str	r3, [sp, #4]
 8001bf4:	0034      	movs	r4, r6
 8001bf6:	0015      	movs	r5, r2
 8001bf8:	4683      	mov	fp, r0
 8001bfa:	465b      	mov	r3, fp
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d016      	beq.n	8001c2e <__aeabi_dmul+0xde>
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d100      	bne.n	8001c06 <__aeabi_dmul+0xb6>
 8001c04:	e203      	b.n	800200e <__aeabi_dmul+0x4be>
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d000      	beq.n	8001c0c <__aeabi_dmul+0xbc>
 8001c0a:	e0cd      	b.n	8001da8 <__aeabi_dmul+0x258>
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2400      	movs	r4, #0
 8001c10:	2500      	movs	r5, #0
 8001c12:	9b01      	ldr	r3, [sp, #4]
 8001c14:	0512      	lsls	r2, r2, #20
 8001c16:	4322      	orrs	r2, r4
 8001c18:	07db      	lsls	r3, r3, #31
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	0028      	movs	r0, r5
 8001c1e:	0011      	movs	r1, r2
 8001c20:	b007      	add	sp, #28
 8001c22:	bcf0      	pop	{r4, r5, r6, r7}
 8001c24:	46bb      	mov	fp, r7
 8001c26:	46b2      	mov	sl, r6
 8001c28:	46a9      	mov	r9, r5
 8001c2a:	46a0      	mov	r8, r4
 8001c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c2e:	2400      	movs	r4, #0
 8001c30:	2500      	movs	r5, #0
 8001c32:	4aaa      	ldr	r2, [pc, #680]	; (8001edc <__aeabi_dmul+0x38c>)
 8001c34:	e7ed      	b.n	8001c12 <__aeabi_dmul+0xc2>
 8001c36:	0c28      	lsrs	r0, r5, #16
 8001c38:	042d      	lsls	r5, r5, #16
 8001c3a:	0c2d      	lsrs	r5, r5, #16
 8001c3c:	002b      	movs	r3, r5
 8001c3e:	0c11      	lsrs	r1, r2, #16
 8001c40:	0412      	lsls	r2, r2, #16
 8001c42:	0c12      	lsrs	r2, r2, #16
 8001c44:	4353      	muls	r3, r2
 8001c46:	4698      	mov	r8, r3
 8001c48:	0013      	movs	r3, r2
 8001c4a:	002f      	movs	r7, r5
 8001c4c:	4343      	muls	r3, r0
 8001c4e:	4699      	mov	r9, r3
 8001c50:	434f      	muls	r7, r1
 8001c52:	444f      	add	r7, r9
 8001c54:	46bb      	mov	fp, r7
 8001c56:	4647      	mov	r7, r8
 8001c58:	000b      	movs	r3, r1
 8001c5a:	0c3f      	lsrs	r7, r7, #16
 8001c5c:	46ba      	mov	sl, r7
 8001c5e:	4343      	muls	r3, r0
 8001c60:	44da      	add	sl, fp
 8001c62:	9302      	str	r3, [sp, #8]
 8001c64:	45d1      	cmp	r9, sl
 8001c66:	d904      	bls.n	8001c72 <__aeabi_dmul+0x122>
 8001c68:	2780      	movs	r7, #128	; 0x80
 8001c6a:	027f      	lsls	r7, r7, #9
 8001c6c:	46b9      	mov	r9, r7
 8001c6e:	444b      	add	r3, r9
 8001c70:	9302      	str	r3, [sp, #8]
 8001c72:	4653      	mov	r3, sl
 8001c74:	0c1b      	lsrs	r3, r3, #16
 8001c76:	469b      	mov	fp, r3
 8001c78:	4653      	mov	r3, sl
 8001c7a:	041f      	lsls	r7, r3, #16
 8001c7c:	4643      	mov	r3, r8
 8001c7e:	041b      	lsls	r3, r3, #16
 8001c80:	0c1b      	lsrs	r3, r3, #16
 8001c82:	4698      	mov	r8, r3
 8001c84:	003b      	movs	r3, r7
 8001c86:	4443      	add	r3, r8
 8001c88:	9304      	str	r3, [sp, #16]
 8001c8a:	0c33      	lsrs	r3, r6, #16
 8001c8c:	0436      	lsls	r6, r6, #16
 8001c8e:	0c36      	lsrs	r6, r6, #16
 8001c90:	4698      	mov	r8, r3
 8001c92:	0033      	movs	r3, r6
 8001c94:	4343      	muls	r3, r0
 8001c96:	4699      	mov	r9, r3
 8001c98:	4643      	mov	r3, r8
 8001c9a:	4343      	muls	r3, r0
 8001c9c:	002f      	movs	r7, r5
 8001c9e:	469a      	mov	sl, r3
 8001ca0:	4643      	mov	r3, r8
 8001ca2:	4377      	muls	r7, r6
 8001ca4:	435d      	muls	r5, r3
 8001ca6:	0c38      	lsrs	r0, r7, #16
 8001ca8:	444d      	add	r5, r9
 8001caa:	1945      	adds	r5, r0, r5
 8001cac:	45a9      	cmp	r9, r5
 8001cae:	d903      	bls.n	8001cb8 <__aeabi_dmul+0x168>
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	025b      	lsls	r3, r3, #9
 8001cb4:	4699      	mov	r9, r3
 8001cb6:	44ca      	add	sl, r9
 8001cb8:	043f      	lsls	r7, r7, #16
 8001cba:	0c28      	lsrs	r0, r5, #16
 8001cbc:	0c3f      	lsrs	r7, r7, #16
 8001cbe:	042d      	lsls	r5, r5, #16
 8001cc0:	19ed      	adds	r5, r5, r7
 8001cc2:	0c27      	lsrs	r7, r4, #16
 8001cc4:	0424      	lsls	r4, r4, #16
 8001cc6:	0c24      	lsrs	r4, r4, #16
 8001cc8:	0003      	movs	r3, r0
 8001cca:	0020      	movs	r0, r4
 8001ccc:	4350      	muls	r0, r2
 8001cce:	437a      	muls	r2, r7
 8001cd0:	4691      	mov	r9, r2
 8001cd2:	003a      	movs	r2, r7
 8001cd4:	4453      	add	r3, sl
 8001cd6:	9305      	str	r3, [sp, #20]
 8001cd8:	0c03      	lsrs	r3, r0, #16
 8001cda:	469a      	mov	sl, r3
 8001cdc:	434a      	muls	r2, r1
 8001cde:	4361      	muls	r1, r4
 8001ce0:	4449      	add	r1, r9
 8001ce2:	4451      	add	r1, sl
 8001ce4:	44ab      	add	fp, r5
 8001ce6:	4589      	cmp	r9, r1
 8001ce8:	d903      	bls.n	8001cf2 <__aeabi_dmul+0x1a2>
 8001cea:	2380      	movs	r3, #128	; 0x80
 8001cec:	025b      	lsls	r3, r3, #9
 8001cee:	4699      	mov	r9, r3
 8001cf0:	444a      	add	r2, r9
 8001cf2:	0400      	lsls	r0, r0, #16
 8001cf4:	0c0b      	lsrs	r3, r1, #16
 8001cf6:	0c00      	lsrs	r0, r0, #16
 8001cf8:	0409      	lsls	r1, r1, #16
 8001cfa:	1809      	adds	r1, r1, r0
 8001cfc:	0020      	movs	r0, r4
 8001cfe:	4699      	mov	r9, r3
 8001d00:	4643      	mov	r3, r8
 8001d02:	4370      	muls	r0, r6
 8001d04:	435c      	muls	r4, r3
 8001d06:	437e      	muls	r6, r7
 8001d08:	435f      	muls	r7, r3
 8001d0a:	0c03      	lsrs	r3, r0, #16
 8001d0c:	4698      	mov	r8, r3
 8001d0e:	19a4      	adds	r4, r4, r6
 8001d10:	4444      	add	r4, r8
 8001d12:	444a      	add	r2, r9
 8001d14:	9703      	str	r7, [sp, #12]
 8001d16:	42a6      	cmp	r6, r4
 8001d18:	d904      	bls.n	8001d24 <__aeabi_dmul+0x1d4>
 8001d1a:	2380      	movs	r3, #128	; 0x80
 8001d1c:	025b      	lsls	r3, r3, #9
 8001d1e:	4698      	mov	r8, r3
 8001d20:	4447      	add	r7, r8
 8001d22:	9703      	str	r7, [sp, #12]
 8001d24:	0423      	lsls	r3, r4, #16
 8001d26:	9e02      	ldr	r6, [sp, #8]
 8001d28:	469a      	mov	sl, r3
 8001d2a:	9b05      	ldr	r3, [sp, #20]
 8001d2c:	445e      	add	r6, fp
 8001d2e:	4698      	mov	r8, r3
 8001d30:	42ae      	cmp	r6, r5
 8001d32:	41ad      	sbcs	r5, r5
 8001d34:	1876      	adds	r6, r6, r1
 8001d36:	428e      	cmp	r6, r1
 8001d38:	4189      	sbcs	r1, r1
 8001d3a:	0400      	lsls	r0, r0, #16
 8001d3c:	0c00      	lsrs	r0, r0, #16
 8001d3e:	4450      	add	r0, sl
 8001d40:	4440      	add	r0, r8
 8001d42:	426d      	negs	r5, r5
 8001d44:	1947      	adds	r7, r0, r5
 8001d46:	46b8      	mov	r8, r7
 8001d48:	4693      	mov	fp, r2
 8001d4a:	4249      	negs	r1, r1
 8001d4c:	4689      	mov	r9, r1
 8001d4e:	44c3      	add	fp, r8
 8001d50:	44d9      	add	r9, fp
 8001d52:	4298      	cmp	r0, r3
 8001d54:	4180      	sbcs	r0, r0
 8001d56:	45a8      	cmp	r8, r5
 8001d58:	41ad      	sbcs	r5, r5
 8001d5a:	4593      	cmp	fp, r2
 8001d5c:	4192      	sbcs	r2, r2
 8001d5e:	4589      	cmp	r9, r1
 8001d60:	4189      	sbcs	r1, r1
 8001d62:	426d      	negs	r5, r5
 8001d64:	4240      	negs	r0, r0
 8001d66:	4328      	orrs	r0, r5
 8001d68:	0c24      	lsrs	r4, r4, #16
 8001d6a:	4252      	negs	r2, r2
 8001d6c:	4249      	negs	r1, r1
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	9b03      	ldr	r3, [sp, #12]
 8001d72:	1900      	adds	r0, r0, r4
 8001d74:	1880      	adds	r0, r0, r2
 8001d76:	18c7      	adds	r7, r0, r3
 8001d78:	464b      	mov	r3, r9
 8001d7a:	0ddc      	lsrs	r4, r3, #23
 8001d7c:	9b04      	ldr	r3, [sp, #16]
 8001d7e:	0275      	lsls	r5, r6, #9
 8001d80:	431d      	orrs	r5, r3
 8001d82:	1e6a      	subs	r2, r5, #1
 8001d84:	4195      	sbcs	r5, r2
 8001d86:	464b      	mov	r3, r9
 8001d88:	0df6      	lsrs	r6, r6, #23
 8001d8a:	027f      	lsls	r7, r7, #9
 8001d8c:	4335      	orrs	r5, r6
 8001d8e:	025a      	lsls	r2, r3, #9
 8001d90:	433c      	orrs	r4, r7
 8001d92:	4315      	orrs	r5, r2
 8001d94:	01fb      	lsls	r3, r7, #7
 8001d96:	d400      	bmi.n	8001d9a <__aeabi_dmul+0x24a>
 8001d98:	e11c      	b.n	8001fd4 <__aeabi_dmul+0x484>
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	086a      	lsrs	r2, r5, #1
 8001d9e:	400d      	ands	r5, r1
 8001da0:	4315      	orrs	r5, r2
 8001da2:	07e2      	lsls	r2, r4, #31
 8001da4:	4315      	orrs	r5, r2
 8001da6:	0864      	lsrs	r4, r4, #1
 8001da8:	494f      	ldr	r1, [pc, #316]	; (8001ee8 <__aeabi_dmul+0x398>)
 8001daa:	4461      	add	r1, ip
 8001dac:	2900      	cmp	r1, #0
 8001dae:	dc00      	bgt.n	8001db2 <__aeabi_dmul+0x262>
 8001db0:	e0b0      	b.n	8001f14 <__aeabi_dmul+0x3c4>
 8001db2:	076b      	lsls	r3, r5, #29
 8001db4:	d009      	beq.n	8001dca <__aeabi_dmul+0x27a>
 8001db6:	220f      	movs	r2, #15
 8001db8:	402a      	ands	r2, r5
 8001dba:	2a04      	cmp	r2, #4
 8001dbc:	d005      	beq.n	8001dca <__aeabi_dmul+0x27a>
 8001dbe:	1d2a      	adds	r2, r5, #4
 8001dc0:	42aa      	cmp	r2, r5
 8001dc2:	41ad      	sbcs	r5, r5
 8001dc4:	426d      	negs	r5, r5
 8001dc6:	1964      	adds	r4, r4, r5
 8001dc8:	0015      	movs	r5, r2
 8001dca:	01e3      	lsls	r3, r4, #7
 8001dcc:	d504      	bpl.n	8001dd8 <__aeabi_dmul+0x288>
 8001dce:	2180      	movs	r1, #128	; 0x80
 8001dd0:	4a46      	ldr	r2, [pc, #280]	; (8001eec <__aeabi_dmul+0x39c>)
 8001dd2:	00c9      	lsls	r1, r1, #3
 8001dd4:	4014      	ands	r4, r2
 8001dd6:	4461      	add	r1, ip
 8001dd8:	4a45      	ldr	r2, [pc, #276]	; (8001ef0 <__aeabi_dmul+0x3a0>)
 8001dda:	4291      	cmp	r1, r2
 8001ddc:	dd00      	ble.n	8001de0 <__aeabi_dmul+0x290>
 8001dde:	e726      	b.n	8001c2e <__aeabi_dmul+0xde>
 8001de0:	0762      	lsls	r2, r4, #29
 8001de2:	08ed      	lsrs	r5, r5, #3
 8001de4:	0264      	lsls	r4, r4, #9
 8001de6:	0549      	lsls	r1, r1, #21
 8001de8:	4315      	orrs	r5, r2
 8001dea:	0b24      	lsrs	r4, r4, #12
 8001dec:	0d4a      	lsrs	r2, r1, #21
 8001dee:	e710      	b.n	8001c12 <__aeabi_dmul+0xc2>
 8001df0:	4652      	mov	r2, sl
 8001df2:	4332      	orrs	r2, r6
 8001df4:	d100      	bne.n	8001df8 <__aeabi_dmul+0x2a8>
 8001df6:	e07f      	b.n	8001ef8 <__aeabi_dmul+0x3a8>
 8001df8:	2e00      	cmp	r6, #0
 8001dfa:	d100      	bne.n	8001dfe <__aeabi_dmul+0x2ae>
 8001dfc:	e0dc      	b.n	8001fb8 <__aeabi_dmul+0x468>
 8001dfe:	0030      	movs	r0, r6
 8001e00:	f000 fdde 	bl	80029c0 <__clzsi2>
 8001e04:	0002      	movs	r2, r0
 8001e06:	3a0b      	subs	r2, #11
 8001e08:	231d      	movs	r3, #29
 8001e0a:	0001      	movs	r1, r0
 8001e0c:	1a9b      	subs	r3, r3, r2
 8001e0e:	4652      	mov	r2, sl
 8001e10:	3908      	subs	r1, #8
 8001e12:	40da      	lsrs	r2, r3
 8001e14:	408e      	lsls	r6, r1
 8001e16:	4316      	orrs	r6, r2
 8001e18:	4652      	mov	r2, sl
 8001e1a:	408a      	lsls	r2, r1
 8001e1c:	9b00      	ldr	r3, [sp, #0]
 8001e1e:	4935      	ldr	r1, [pc, #212]	; (8001ef4 <__aeabi_dmul+0x3a4>)
 8001e20:	1a18      	subs	r0, r3, r0
 8001e22:	0003      	movs	r3, r0
 8001e24:	468c      	mov	ip, r1
 8001e26:	4463      	add	r3, ip
 8001e28:	2000      	movs	r0, #0
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	e6d3      	b.n	8001bd6 <__aeabi_dmul+0x86>
 8001e2e:	0025      	movs	r5, r4
 8001e30:	4305      	orrs	r5, r0
 8001e32:	d04a      	beq.n	8001eca <__aeabi_dmul+0x37a>
 8001e34:	2c00      	cmp	r4, #0
 8001e36:	d100      	bne.n	8001e3a <__aeabi_dmul+0x2ea>
 8001e38:	e0b0      	b.n	8001f9c <__aeabi_dmul+0x44c>
 8001e3a:	0020      	movs	r0, r4
 8001e3c:	f000 fdc0 	bl	80029c0 <__clzsi2>
 8001e40:	0001      	movs	r1, r0
 8001e42:	0002      	movs	r2, r0
 8001e44:	390b      	subs	r1, #11
 8001e46:	231d      	movs	r3, #29
 8001e48:	0010      	movs	r0, r2
 8001e4a:	1a5b      	subs	r3, r3, r1
 8001e4c:	0031      	movs	r1, r6
 8001e4e:	0035      	movs	r5, r6
 8001e50:	3808      	subs	r0, #8
 8001e52:	4084      	lsls	r4, r0
 8001e54:	40d9      	lsrs	r1, r3
 8001e56:	4085      	lsls	r5, r0
 8001e58:	430c      	orrs	r4, r1
 8001e5a:	4826      	ldr	r0, [pc, #152]	; (8001ef4 <__aeabi_dmul+0x3a4>)
 8001e5c:	1a83      	subs	r3, r0, r2
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	2300      	movs	r3, #0
 8001e62:	4699      	mov	r9, r3
 8001e64:	469b      	mov	fp, r3
 8001e66:	e697      	b.n	8001b98 <__aeabi_dmul+0x48>
 8001e68:	0005      	movs	r5, r0
 8001e6a:	4325      	orrs	r5, r4
 8001e6c:	d126      	bne.n	8001ebc <__aeabi_dmul+0x36c>
 8001e6e:	2208      	movs	r2, #8
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	2302      	movs	r3, #2
 8001e74:	2400      	movs	r4, #0
 8001e76:	4691      	mov	r9, r2
 8001e78:	469b      	mov	fp, r3
 8001e7a:	e68d      	b.n	8001b98 <__aeabi_dmul+0x48>
 8001e7c:	4652      	mov	r2, sl
 8001e7e:	9b00      	ldr	r3, [sp, #0]
 8001e80:	4332      	orrs	r2, r6
 8001e82:	d110      	bne.n	8001ea6 <__aeabi_dmul+0x356>
 8001e84:	4915      	ldr	r1, [pc, #84]	; (8001edc <__aeabi_dmul+0x38c>)
 8001e86:	2600      	movs	r6, #0
 8001e88:	468c      	mov	ip, r1
 8001e8a:	4463      	add	r3, ip
 8001e8c:	4649      	mov	r1, r9
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	2302      	movs	r3, #2
 8001e92:	4319      	orrs	r1, r3
 8001e94:	4689      	mov	r9, r1
 8001e96:	2002      	movs	r0, #2
 8001e98:	e69d      	b.n	8001bd6 <__aeabi_dmul+0x86>
 8001e9a:	465b      	mov	r3, fp
 8001e9c:	9701      	str	r7, [sp, #4]
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d000      	beq.n	8001ea4 <__aeabi_dmul+0x354>
 8001ea2:	e6ad      	b.n	8001c00 <__aeabi_dmul+0xb0>
 8001ea4:	e6c3      	b.n	8001c2e <__aeabi_dmul+0xde>
 8001ea6:	4a0d      	ldr	r2, [pc, #52]	; (8001edc <__aeabi_dmul+0x38c>)
 8001ea8:	2003      	movs	r0, #3
 8001eaa:	4694      	mov	ip, r2
 8001eac:	4463      	add	r3, ip
 8001eae:	464a      	mov	r2, r9
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	4691      	mov	r9, r2
 8001eb8:	4652      	mov	r2, sl
 8001eba:	e68c      	b.n	8001bd6 <__aeabi_dmul+0x86>
 8001ebc:	220c      	movs	r2, #12
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	0005      	movs	r5, r0
 8001ec4:	4691      	mov	r9, r2
 8001ec6:	469b      	mov	fp, r3
 8001ec8:	e666      	b.n	8001b98 <__aeabi_dmul+0x48>
 8001eca:	2304      	movs	r3, #4
 8001ecc:	4699      	mov	r9, r3
 8001ece:	2300      	movs	r3, #0
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	2400      	movs	r4, #0
 8001ed6:	469b      	mov	fp, r3
 8001ed8:	e65e      	b.n	8001b98 <__aeabi_dmul+0x48>
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	000007ff 	.word	0x000007ff
 8001ee0:	fffffc01 	.word	0xfffffc01
 8001ee4:	080069d0 	.word	0x080069d0
 8001ee8:	000003ff 	.word	0x000003ff
 8001eec:	feffffff 	.word	0xfeffffff
 8001ef0:	000007fe 	.word	0x000007fe
 8001ef4:	fffffc0d 	.word	0xfffffc0d
 8001ef8:	4649      	mov	r1, r9
 8001efa:	2301      	movs	r3, #1
 8001efc:	4319      	orrs	r1, r3
 8001efe:	4689      	mov	r9, r1
 8001f00:	2600      	movs	r6, #0
 8001f02:	2001      	movs	r0, #1
 8001f04:	e667      	b.n	8001bd6 <__aeabi_dmul+0x86>
 8001f06:	2300      	movs	r3, #0
 8001f08:	2480      	movs	r4, #128	; 0x80
 8001f0a:	2500      	movs	r5, #0
 8001f0c:	4a43      	ldr	r2, [pc, #268]	; (800201c <__aeabi_dmul+0x4cc>)
 8001f0e:	9301      	str	r3, [sp, #4]
 8001f10:	0324      	lsls	r4, r4, #12
 8001f12:	e67e      	b.n	8001c12 <__aeabi_dmul+0xc2>
 8001f14:	2001      	movs	r0, #1
 8001f16:	1a40      	subs	r0, r0, r1
 8001f18:	2838      	cmp	r0, #56	; 0x38
 8001f1a:	dd00      	ble.n	8001f1e <__aeabi_dmul+0x3ce>
 8001f1c:	e676      	b.n	8001c0c <__aeabi_dmul+0xbc>
 8001f1e:	281f      	cmp	r0, #31
 8001f20:	dd5b      	ble.n	8001fda <__aeabi_dmul+0x48a>
 8001f22:	221f      	movs	r2, #31
 8001f24:	0023      	movs	r3, r4
 8001f26:	4252      	negs	r2, r2
 8001f28:	1a51      	subs	r1, r2, r1
 8001f2a:	40cb      	lsrs	r3, r1
 8001f2c:	0019      	movs	r1, r3
 8001f2e:	2820      	cmp	r0, #32
 8001f30:	d003      	beq.n	8001f3a <__aeabi_dmul+0x3ea>
 8001f32:	4a3b      	ldr	r2, [pc, #236]	; (8002020 <__aeabi_dmul+0x4d0>)
 8001f34:	4462      	add	r2, ip
 8001f36:	4094      	lsls	r4, r2
 8001f38:	4325      	orrs	r5, r4
 8001f3a:	1e6a      	subs	r2, r5, #1
 8001f3c:	4195      	sbcs	r5, r2
 8001f3e:	002a      	movs	r2, r5
 8001f40:	430a      	orrs	r2, r1
 8001f42:	2107      	movs	r1, #7
 8001f44:	000d      	movs	r5, r1
 8001f46:	2400      	movs	r4, #0
 8001f48:	4015      	ands	r5, r2
 8001f4a:	4211      	tst	r1, r2
 8001f4c:	d05b      	beq.n	8002006 <__aeabi_dmul+0x4b6>
 8001f4e:	210f      	movs	r1, #15
 8001f50:	2400      	movs	r4, #0
 8001f52:	4011      	ands	r1, r2
 8001f54:	2904      	cmp	r1, #4
 8001f56:	d053      	beq.n	8002000 <__aeabi_dmul+0x4b0>
 8001f58:	1d11      	adds	r1, r2, #4
 8001f5a:	4291      	cmp	r1, r2
 8001f5c:	4192      	sbcs	r2, r2
 8001f5e:	4252      	negs	r2, r2
 8001f60:	18a4      	adds	r4, r4, r2
 8001f62:	000a      	movs	r2, r1
 8001f64:	0223      	lsls	r3, r4, #8
 8001f66:	d54b      	bpl.n	8002000 <__aeabi_dmul+0x4b0>
 8001f68:	2201      	movs	r2, #1
 8001f6a:	2400      	movs	r4, #0
 8001f6c:	2500      	movs	r5, #0
 8001f6e:	e650      	b.n	8001c12 <__aeabi_dmul+0xc2>
 8001f70:	2380      	movs	r3, #128	; 0x80
 8001f72:	031b      	lsls	r3, r3, #12
 8001f74:	421c      	tst	r4, r3
 8001f76:	d009      	beq.n	8001f8c <__aeabi_dmul+0x43c>
 8001f78:	421e      	tst	r6, r3
 8001f7a:	d107      	bne.n	8001f8c <__aeabi_dmul+0x43c>
 8001f7c:	4333      	orrs	r3, r6
 8001f7e:	031c      	lsls	r4, r3, #12
 8001f80:	4643      	mov	r3, r8
 8001f82:	0015      	movs	r5, r2
 8001f84:	0b24      	lsrs	r4, r4, #12
 8001f86:	4a25      	ldr	r2, [pc, #148]	; (800201c <__aeabi_dmul+0x4cc>)
 8001f88:	9301      	str	r3, [sp, #4]
 8001f8a:	e642      	b.n	8001c12 <__aeabi_dmul+0xc2>
 8001f8c:	2280      	movs	r2, #128	; 0x80
 8001f8e:	0312      	lsls	r2, r2, #12
 8001f90:	4314      	orrs	r4, r2
 8001f92:	0324      	lsls	r4, r4, #12
 8001f94:	4a21      	ldr	r2, [pc, #132]	; (800201c <__aeabi_dmul+0x4cc>)
 8001f96:	0b24      	lsrs	r4, r4, #12
 8001f98:	9701      	str	r7, [sp, #4]
 8001f9a:	e63a      	b.n	8001c12 <__aeabi_dmul+0xc2>
 8001f9c:	f000 fd10 	bl	80029c0 <__clzsi2>
 8001fa0:	0001      	movs	r1, r0
 8001fa2:	0002      	movs	r2, r0
 8001fa4:	3115      	adds	r1, #21
 8001fa6:	3220      	adds	r2, #32
 8001fa8:	291c      	cmp	r1, #28
 8001faa:	dc00      	bgt.n	8001fae <__aeabi_dmul+0x45e>
 8001fac:	e74b      	b.n	8001e46 <__aeabi_dmul+0x2f6>
 8001fae:	0034      	movs	r4, r6
 8001fb0:	3808      	subs	r0, #8
 8001fb2:	2500      	movs	r5, #0
 8001fb4:	4084      	lsls	r4, r0
 8001fb6:	e750      	b.n	8001e5a <__aeabi_dmul+0x30a>
 8001fb8:	f000 fd02 	bl	80029c0 <__clzsi2>
 8001fbc:	0003      	movs	r3, r0
 8001fbe:	001a      	movs	r2, r3
 8001fc0:	3215      	adds	r2, #21
 8001fc2:	3020      	adds	r0, #32
 8001fc4:	2a1c      	cmp	r2, #28
 8001fc6:	dc00      	bgt.n	8001fca <__aeabi_dmul+0x47a>
 8001fc8:	e71e      	b.n	8001e08 <__aeabi_dmul+0x2b8>
 8001fca:	4656      	mov	r6, sl
 8001fcc:	3b08      	subs	r3, #8
 8001fce:	2200      	movs	r2, #0
 8001fd0:	409e      	lsls	r6, r3
 8001fd2:	e723      	b.n	8001e1c <__aeabi_dmul+0x2cc>
 8001fd4:	9b00      	ldr	r3, [sp, #0]
 8001fd6:	469c      	mov	ip, r3
 8001fd8:	e6e6      	b.n	8001da8 <__aeabi_dmul+0x258>
 8001fda:	4912      	ldr	r1, [pc, #72]	; (8002024 <__aeabi_dmul+0x4d4>)
 8001fdc:	0022      	movs	r2, r4
 8001fde:	4461      	add	r1, ip
 8001fe0:	002e      	movs	r6, r5
 8001fe2:	408d      	lsls	r5, r1
 8001fe4:	408a      	lsls	r2, r1
 8001fe6:	40c6      	lsrs	r6, r0
 8001fe8:	1e69      	subs	r1, r5, #1
 8001fea:	418d      	sbcs	r5, r1
 8001fec:	4332      	orrs	r2, r6
 8001fee:	432a      	orrs	r2, r5
 8001ff0:	40c4      	lsrs	r4, r0
 8001ff2:	0753      	lsls	r3, r2, #29
 8001ff4:	d0b6      	beq.n	8001f64 <__aeabi_dmul+0x414>
 8001ff6:	210f      	movs	r1, #15
 8001ff8:	4011      	ands	r1, r2
 8001ffa:	2904      	cmp	r1, #4
 8001ffc:	d1ac      	bne.n	8001f58 <__aeabi_dmul+0x408>
 8001ffe:	e7b1      	b.n	8001f64 <__aeabi_dmul+0x414>
 8002000:	0765      	lsls	r5, r4, #29
 8002002:	0264      	lsls	r4, r4, #9
 8002004:	0b24      	lsrs	r4, r4, #12
 8002006:	08d2      	lsrs	r2, r2, #3
 8002008:	4315      	orrs	r5, r2
 800200a:	2200      	movs	r2, #0
 800200c:	e601      	b.n	8001c12 <__aeabi_dmul+0xc2>
 800200e:	2280      	movs	r2, #128	; 0x80
 8002010:	0312      	lsls	r2, r2, #12
 8002012:	4314      	orrs	r4, r2
 8002014:	0324      	lsls	r4, r4, #12
 8002016:	4a01      	ldr	r2, [pc, #4]	; (800201c <__aeabi_dmul+0x4cc>)
 8002018:	0b24      	lsrs	r4, r4, #12
 800201a:	e5fa      	b.n	8001c12 <__aeabi_dmul+0xc2>
 800201c:	000007ff 	.word	0x000007ff
 8002020:	0000043e 	.word	0x0000043e
 8002024:	0000041e 	.word	0x0000041e

08002028 <__aeabi_dsub>:
 8002028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800202a:	4657      	mov	r7, sl
 800202c:	464e      	mov	r6, r9
 800202e:	4645      	mov	r5, r8
 8002030:	46de      	mov	lr, fp
 8002032:	b5e0      	push	{r5, r6, r7, lr}
 8002034:	001e      	movs	r6, r3
 8002036:	0017      	movs	r7, r2
 8002038:	004a      	lsls	r2, r1, #1
 800203a:	030b      	lsls	r3, r1, #12
 800203c:	0d52      	lsrs	r2, r2, #21
 800203e:	0a5b      	lsrs	r3, r3, #9
 8002040:	4690      	mov	r8, r2
 8002042:	0f42      	lsrs	r2, r0, #29
 8002044:	431a      	orrs	r2, r3
 8002046:	0fcd      	lsrs	r5, r1, #31
 8002048:	4ccd      	ldr	r4, [pc, #820]	; (8002380 <__aeabi_dsub+0x358>)
 800204a:	0331      	lsls	r1, r6, #12
 800204c:	00c3      	lsls	r3, r0, #3
 800204e:	4694      	mov	ip, r2
 8002050:	0070      	lsls	r0, r6, #1
 8002052:	0f7a      	lsrs	r2, r7, #29
 8002054:	0a49      	lsrs	r1, r1, #9
 8002056:	00ff      	lsls	r7, r7, #3
 8002058:	469a      	mov	sl, r3
 800205a:	46b9      	mov	r9, r7
 800205c:	0d40      	lsrs	r0, r0, #21
 800205e:	0ff6      	lsrs	r6, r6, #31
 8002060:	4311      	orrs	r1, r2
 8002062:	42a0      	cmp	r0, r4
 8002064:	d100      	bne.n	8002068 <__aeabi_dsub+0x40>
 8002066:	e0b1      	b.n	80021cc <__aeabi_dsub+0x1a4>
 8002068:	2201      	movs	r2, #1
 800206a:	4056      	eors	r6, r2
 800206c:	46b3      	mov	fp, r6
 800206e:	42b5      	cmp	r5, r6
 8002070:	d100      	bne.n	8002074 <__aeabi_dsub+0x4c>
 8002072:	e088      	b.n	8002186 <__aeabi_dsub+0x15e>
 8002074:	4642      	mov	r2, r8
 8002076:	1a12      	subs	r2, r2, r0
 8002078:	2a00      	cmp	r2, #0
 800207a:	dc00      	bgt.n	800207e <__aeabi_dsub+0x56>
 800207c:	e0ae      	b.n	80021dc <__aeabi_dsub+0x1b4>
 800207e:	2800      	cmp	r0, #0
 8002080:	d100      	bne.n	8002084 <__aeabi_dsub+0x5c>
 8002082:	e0c1      	b.n	8002208 <__aeabi_dsub+0x1e0>
 8002084:	48be      	ldr	r0, [pc, #760]	; (8002380 <__aeabi_dsub+0x358>)
 8002086:	4580      	cmp	r8, r0
 8002088:	d100      	bne.n	800208c <__aeabi_dsub+0x64>
 800208a:	e151      	b.n	8002330 <__aeabi_dsub+0x308>
 800208c:	2080      	movs	r0, #128	; 0x80
 800208e:	0400      	lsls	r0, r0, #16
 8002090:	4301      	orrs	r1, r0
 8002092:	2a38      	cmp	r2, #56	; 0x38
 8002094:	dd00      	ble.n	8002098 <__aeabi_dsub+0x70>
 8002096:	e17b      	b.n	8002390 <__aeabi_dsub+0x368>
 8002098:	2a1f      	cmp	r2, #31
 800209a:	dd00      	ble.n	800209e <__aeabi_dsub+0x76>
 800209c:	e1ee      	b.n	800247c <__aeabi_dsub+0x454>
 800209e:	2020      	movs	r0, #32
 80020a0:	003e      	movs	r6, r7
 80020a2:	1a80      	subs	r0, r0, r2
 80020a4:	000c      	movs	r4, r1
 80020a6:	40d6      	lsrs	r6, r2
 80020a8:	40d1      	lsrs	r1, r2
 80020aa:	4087      	lsls	r7, r0
 80020ac:	4662      	mov	r2, ip
 80020ae:	4084      	lsls	r4, r0
 80020b0:	1a52      	subs	r2, r2, r1
 80020b2:	1e78      	subs	r0, r7, #1
 80020b4:	4187      	sbcs	r7, r0
 80020b6:	4694      	mov	ip, r2
 80020b8:	4334      	orrs	r4, r6
 80020ba:	4327      	orrs	r7, r4
 80020bc:	1bdc      	subs	r4, r3, r7
 80020be:	42a3      	cmp	r3, r4
 80020c0:	419b      	sbcs	r3, r3
 80020c2:	4662      	mov	r2, ip
 80020c4:	425b      	negs	r3, r3
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	4699      	mov	r9, r3
 80020ca:	464b      	mov	r3, r9
 80020cc:	021b      	lsls	r3, r3, #8
 80020ce:	d400      	bmi.n	80020d2 <__aeabi_dsub+0xaa>
 80020d0:	e118      	b.n	8002304 <__aeabi_dsub+0x2dc>
 80020d2:	464b      	mov	r3, r9
 80020d4:	0258      	lsls	r0, r3, #9
 80020d6:	0a43      	lsrs	r3, r0, #9
 80020d8:	4699      	mov	r9, r3
 80020da:	464b      	mov	r3, r9
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d100      	bne.n	80020e2 <__aeabi_dsub+0xba>
 80020e0:	e137      	b.n	8002352 <__aeabi_dsub+0x32a>
 80020e2:	4648      	mov	r0, r9
 80020e4:	f000 fc6c 	bl	80029c0 <__clzsi2>
 80020e8:	0001      	movs	r1, r0
 80020ea:	3908      	subs	r1, #8
 80020ec:	2320      	movs	r3, #32
 80020ee:	0022      	movs	r2, r4
 80020f0:	4648      	mov	r0, r9
 80020f2:	1a5b      	subs	r3, r3, r1
 80020f4:	40da      	lsrs	r2, r3
 80020f6:	4088      	lsls	r0, r1
 80020f8:	408c      	lsls	r4, r1
 80020fa:	4643      	mov	r3, r8
 80020fc:	4310      	orrs	r0, r2
 80020fe:	4588      	cmp	r8, r1
 8002100:	dd00      	ble.n	8002104 <__aeabi_dsub+0xdc>
 8002102:	e136      	b.n	8002372 <__aeabi_dsub+0x34a>
 8002104:	1ac9      	subs	r1, r1, r3
 8002106:	1c4b      	adds	r3, r1, #1
 8002108:	2b1f      	cmp	r3, #31
 800210a:	dd00      	ble.n	800210e <__aeabi_dsub+0xe6>
 800210c:	e0ea      	b.n	80022e4 <__aeabi_dsub+0x2bc>
 800210e:	2220      	movs	r2, #32
 8002110:	0026      	movs	r6, r4
 8002112:	1ad2      	subs	r2, r2, r3
 8002114:	0001      	movs	r1, r0
 8002116:	4094      	lsls	r4, r2
 8002118:	40de      	lsrs	r6, r3
 800211a:	40d8      	lsrs	r0, r3
 800211c:	2300      	movs	r3, #0
 800211e:	4091      	lsls	r1, r2
 8002120:	1e62      	subs	r2, r4, #1
 8002122:	4194      	sbcs	r4, r2
 8002124:	4681      	mov	r9, r0
 8002126:	4698      	mov	r8, r3
 8002128:	4331      	orrs	r1, r6
 800212a:	430c      	orrs	r4, r1
 800212c:	0763      	lsls	r3, r4, #29
 800212e:	d009      	beq.n	8002144 <__aeabi_dsub+0x11c>
 8002130:	230f      	movs	r3, #15
 8002132:	4023      	ands	r3, r4
 8002134:	2b04      	cmp	r3, #4
 8002136:	d005      	beq.n	8002144 <__aeabi_dsub+0x11c>
 8002138:	1d23      	adds	r3, r4, #4
 800213a:	42a3      	cmp	r3, r4
 800213c:	41a4      	sbcs	r4, r4
 800213e:	4264      	negs	r4, r4
 8002140:	44a1      	add	r9, r4
 8002142:	001c      	movs	r4, r3
 8002144:	464b      	mov	r3, r9
 8002146:	021b      	lsls	r3, r3, #8
 8002148:	d400      	bmi.n	800214c <__aeabi_dsub+0x124>
 800214a:	e0de      	b.n	800230a <__aeabi_dsub+0x2e2>
 800214c:	4641      	mov	r1, r8
 800214e:	4b8c      	ldr	r3, [pc, #560]	; (8002380 <__aeabi_dsub+0x358>)
 8002150:	3101      	adds	r1, #1
 8002152:	4299      	cmp	r1, r3
 8002154:	d100      	bne.n	8002158 <__aeabi_dsub+0x130>
 8002156:	e0e7      	b.n	8002328 <__aeabi_dsub+0x300>
 8002158:	464b      	mov	r3, r9
 800215a:	488a      	ldr	r0, [pc, #552]	; (8002384 <__aeabi_dsub+0x35c>)
 800215c:	08e4      	lsrs	r4, r4, #3
 800215e:	4003      	ands	r3, r0
 8002160:	0018      	movs	r0, r3
 8002162:	0549      	lsls	r1, r1, #21
 8002164:	075b      	lsls	r3, r3, #29
 8002166:	0240      	lsls	r0, r0, #9
 8002168:	4323      	orrs	r3, r4
 800216a:	0d4a      	lsrs	r2, r1, #21
 800216c:	0b04      	lsrs	r4, r0, #12
 800216e:	0512      	lsls	r2, r2, #20
 8002170:	07ed      	lsls	r5, r5, #31
 8002172:	4322      	orrs	r2, r4
 8002174:	432a      	orrs	r2, r5
 8002176:	0018      	movs	r0, r3
 8002178:	0011      	movs	r1, r2
 800217a:	bcf0      	pop	{r4, r5, r6, r7}
 800217c:	46bb      	mov	fp, r7
 800217e:	46b2      	mov	sl, r6
 8002180:	46a9      	mov	r9, r5
 8002182:	46a0      	mov	r8, r4
 8002184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002186:	4642      	mov	r2, r8
 8002188:	1a12      	subs	r2, r2, r0
 800218a:	2a00      	cmp	r2, #0
 800218c:	dd52      	ble.n	8002234 <__aeabi_dsub+0x20c>
 800218e:	2800      	cmp	r0, #0
 8002190:	d100      	bne.n	8002194 <__aeabi_dsub+0x16c>
 8002192:	e09c      	b.n	80022ce <__aeabi_dsub+0x2a6>
 8002194:	45a0      	cmp	r8, r4
 8002196:	d100      	bne.n	800219a <__aeabi_dsub+0x172>
 8002198:	e0ca      	b.n	8002330 <__aeabi_dsub+0x308>
 800219a:	2080      	movs	r0, #128	; 0x80
 800219c:	0400      	lsls	r0, r0, #16
 800219e:	4301      	orrs	r1, r0
 80021a0:	2a38      	cmp	r2, #56	; 0x38
 80021a2:	dd00      	ble.n	80021a6 <__aeabi_dsub+0x17e>
 80021a4:	e149      	b.n	800243a <__aeabi_dsub+0x412>
 80021a6:	2a1f      	cmp	r2, #31
 80021a8:	dc00      	bgt.n	80021ac <__aeabi_dsub+0x184>
 80021aa:	e197      	b.n	80024dc <__aeabi_dsub+0x4b4>
 80021ac:	0010      	movs	r0, r2
 80021ae:	000e      	movs	r6, r1
 80021b0:	3820      	subs	r0, #32
 80021b2:	40c6      	lsrs	r6, r0
 80021b4:	2a20      	cmp	r2, #32
 80021b6:	d004      	beq.n	80021c2 <__aeabi_dsub+0x19a>
 80021b8:	2040      	movs	r0, #64	; 0x40
 80021ba:	1a82      	subs	r2, r0, r2
 80021bc:	4091      	lsls	r1, r2
 80021be:	430f      	orrs	r7, r1
 80021c0:	46b9      	mov	r9, r7
 80021c2:	464c      	mov	r4, r9
 80021c4:	1e62      	subs	r2, r4, #1
 80021c6:	4194      	sbcs	r4, r2
 80021c8:	4334      	orrs	r4, r6
 80021ca:	e13a      	b.n	8002442 <__aeabi_dsub+0x41a>
 80021cc:	000a      	movs	r2, r1
 80021ce:	433a      	orrs	r2, r7
 80021d0:	d028      	beq.n	8002224 <__aeabi_dsub+0x1fc>
 80021d2:	46b3      	mov	fp, r6
 80021d4:	42b5      	cmp	r5, r6
 80021d6:	d02b      	beq.n	8002230 <__aeabi_dsub+0x208>
 80021d8:	4a6b      	ldr	r2, [pc, #428]	; (8002388 <__aeabi_dsub+0x360>)
 80021da:	4442      	add	r2, r8
 80021dc:	2a00      	cmp	r2, #0
 80021de:	d05d      	beq.n	800229c <__aeabi_dsub+0x274>
 80021e0:	4642      	mov	r2, r8
 80021e2:	4644      	mov	r4, r8
 80021e4:	1a82      	subs	r2, r0, r2
 80021e6:	2c00      	cmp	r4, #0
 80021e8:	d000      	beq.n	80021ec <__aeabi_dsub+0x1c4>
 80021ea:	e0f5      	b.n	80023d8 <__aeabi_dsub+0x3b0>
 80021ec:	4665      	mov	r5, ip
 80021ee:	431d      	orrs	r5, r3
 80021f0:	d100      	bne.n	80021f4 <__aeabi_dsub+0x1cc>
 80021f2:	e19c      	b.n	800252e <__aeabi_dsub+0x506>
 80021f4:	1e55      	subs	r5, r2, #1
 80021f6:	2a01      	cmp	r2, #1
 80021f8:	d100      	bne.n	80021fc <__aeabi_dsub+0x1d4>
 80021fa:	e1fb      	b.n	80025f4 <__aeabi_dsub+0x5cc>
 80021fc:	4c60      	ldr	r4, [pc, #384]	; (8002380 <__aeabi_dsub+0x358>)
 80021fe:	42a2      	cmp	r2, r4
 8002200:	d100      	bne.n	8002204 <__aeabi_dsub+0x1dc>
 8002202:	e1bd      	b.n	8002580 <__aeabi_dsub+0x558>
 8002204:	002a      	movs	r2, r5
 8002206:	e0f0      	b.n	80023ea <__aeabi_dsub+0x3c2>
 8002208:	0008      	movs	r0, r1
 800220a:	4338      	orrs	r0, r7
 800220c:	d100      	bne.n	8002210 <__aeabi_dsub+0x1e8>
 800220e:	e0c3      	b.n	8002398 <__aeabi_dsub+0x370>
 8002210:	1e50      	subs	r0, r2, #1
 8002212:	2a01      	cmp	r2, #1
 8002214:	d100      	bne.n	8002218 <__aeabi_dsub+0x1f0>
 8002216:	e1a8      	b.n	800256a <__aeabi_dsub+0x542>
 8002218:	4c59      	ldr	r4, [pc, #356]	; (8002380 <__aeabi_dsub+0x358>)
 800221a:	42a2      	cmp	r2, r4
 800221c:	d100      	bne.n	8002220 <__aeabi_dsub+0x1f8>
 800221e:	e087      	b.n	8002330 <__aeabi_dsub+0x308>
 8002220:	0002      	movs	r2, r0
 8002222:	e736      	b.n	8002092 <__aeabi_dsub+0x6a>
 8002224:	2201      	movs	r2, #1
 8002226:	4056      	eors	r6, r2
 8002228:	46b3      	mov	fp, r6
 800222a:	42b5      	cmp	r5, r6
 800222c:	d000      	beq.n	8002230 <__aeabi_dsub+0x208>
 800222e:	e721      	b.n	8002074 <__aeabi_dsub+0x4c>
 8002230:	4a55      	ldr	r2, [pc, #340]	; (8002388 <__aeabi_dsub+0x360>)
 8002232:	4442      	add	r2, r8
 8002234:	2a00      	cmp	r2, #0
 8002236:	d100      	bne.n	800223a <__aeabi_dsub+0x212>
 8002238:	e0b5      	b.n	80023a6 <__aeabi_dsub+0x37e>
 800223a:	4642      	mov	r2, r8
 800223c:	4644      	mov	r4, r8
 800223e:	1a82      	subs	r2, r0, r2
 8002240:	2c00      	cmp	r4, #0
 8002242:	d100      	bne.n	8002246 <__aeabi_dsub+0x21e>
 8002244:	e138      	b.n	80024b8 <__aeabi_dsub+0x490>
 8002246:	4e4e      	ldr	r6, [pc, #312]	; (8002380 <__aeabi_dsub+0x358>)
 8002248:	42b0      	cmp	r0, r6
 800224a:	d100      	bne.n	800224e <__aeabi_dsub+0x226>
 800224c:	e1de      	b.n	800260c <__aeabi_dsub+0x5e4>
 800224e:	2680      	movs	r6, #128	; 0x80
 8002250:	4664      	mov	r4, ip
 8002252:	0436      	lsls	r6, r6, #16
 8002254:	4334      	orrs	r4, r6
 8002256:	46a4      	mov	ip, r4
 8002258:	2a38      	cmp	r2, #56	; 0x38
 800225a:	dd00      	ble.n	800225e <__aeabi_dsub+0x236>
 800225c:	e196      	b.n	800258c <__aeabi_dsub+0x564>
 800225e:	2a1f      	cmp	r2, #31
 8002260:	dd00      	ble.n	8002264 <__aeabi_dsub+0x23c>
 8002262:	e224      	b.n	80026ae <__aeabi_dsub+0x686>
 8002264:	2620      	movs	r6, #32
 8002266:	1ab4      	subs	r4, r6, r2
 8002268:	46a2      	mov	sl, r4
 800226a:	4664      	mov	r4, ip
 800226c:	4656      	mov	r6, sl
 800226e:	40b4      	lsls	r4, r6
 8002270:	46a1      	mov	r9, r4
 8002272:	001c      	movs	r4, r3
 8002274:	464e      	mov	r6, r9
 8002276:	40d4      	lsrs	r4, r2
 8002278:	4326      	orrs	r6, r4
 800227a:	0034      	movs	r4, r6
 800227c:	4656      	mov	r6, sl
 800227e:	40b3      	lsls	r3, r6
 8002280:	1e5e      	subs	r6, r3, #1
 8002282:	41b3      	sbcs	r3, r6
 8002284:	431c      	orrs	r4, r3
 8002286:	4663      	mov	r3, ip
 8002288:	40d3      	lsrs	r3, r2
 800228a:	18c9      	adds	r1, r1, r3
 800228c:	19e4      	adds	r4, r4, r7
 800228e:	42bc      	cmp	r4, r7
 8002290:	41bf      	sbcs	r7, r7
 8002292:	427f      	negs	r7, r7
 8002294:	46b9      	mov	r9, r7
 8002296:	4680      	mov	r8, r0
 8002298:	4489      	add	r9, r1
 800229a:	e0d8      	b.n	800244e <__aeabi_dsub+0x426>
 800229c:	4640      	mov	r0, r8
 800229e:	4c3b      	ldr	r4, [pc, #236]	; (800238c <__aeabi_dsub+0x364>)
 80022a0:	3001      	adds	r0, #1
 80022a2:	4220      	tst	r0, r4
 80022a4:	d000      	beq.n	80022a8 <__aeabi_dsub+0x280>
 80022a6:	e0b4      	b.n	8002412 <__aeabi_dsub+0x3ea>
 80022a8:	4640      	mov	r0, r8
 80022aa:	2800      	cmp	r0, #0
 80022ac:	d000      	beq.n	80022b0 <__aeabi_dsub+0x288>
 80022ae:	e144      	b.n	800253a <__aeabi_dsub+0x512>
 80022b0:	4660      	mov	r0, ip
 80022b2:	4318      	orrs	r0, r3
 80022b4:	d100      	bne.n	80022b8 <__aeabi_dsub+0x290>
 80022b6:	e190      	b.n	80025da <__aeabi_dsub+0x5b2>
 80022b8:	0008      	movs	r0, r1
 80022ba:	4338      	orrs	r0, r7
 80022bc:	d000      	beq.n	80022c0 <__aeabi_dsub+0x298>
 80022be:	e1aa      	b.n	8002616 <__aeabi_dsub+0x5ee>
 80022c0:	4661      	mov	r1, ip
 80022c2:	08db      	lsrs	r3, r3, #3
 80022c4:	0749      	lsls	r1, r1, #29
 80022c6:	430b      	orrs	r3, r1
 80022c8:	4661      	mov	r1, ip
 80022ca:	08cc      	lsrs	r4, r1, #3
 80022cc:	e027      	b.n	800231e <__aeabi_dsub+0x2f6>
 80022ce:	0008      	movs	r0, r1
 80022d0:	4338      	orrs	r0, r7
 80022d2:	d061      	beq.n	8002398 <__aeabi_dsub+0x370>
 80022d4:	1e50      	subs	r0, r2, #1
 80022d6:	2a01      	cmp	r2, #1
 80022d8:	d100      	bne.n	80022dc <__aeabi_dsub+0x2b4>
 80022da:	e139      	b.n	8002550 <__aeabi_dsub+0x528>
 80022dc:	42a2      	cmp	r2, r4
 80022de:	d027      	beq.n	8002330 <__aeabi_dsub+0x308>
 80022e0:	0002      	movs	r2, r0
 80022e2:	e75d      	b.n	80021a0 <__aeabi_dsub+0x178>
 80022e4:	0002      	movs	r2, r0
 80022e6:	391f      	subs	r1, #31
 80022e8:	40ca      	lsrs	r2, r1
 80022ea:	0011      	movs	r1, r2
 80022ec:	2b20      	cmp	r3, #32
 80022ee:	d003      	beq.n	80022f8 <__aeabi_dsub+0x2d0>
 80022f0:	2240      	movs	r2, #64	; 0x40
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	4098      	lsls	r0, r3
 80022f6:	4304      	orrs	r4, r0
 80022f8:	1e63      	subs	r3, r4, #1
 80022fa:	419c      	sbcs	r4, r3
 80022fc:	2300      	movs	r3, #0
 80022fe:	4699      	mov	r9, r3
 8002300:	4698      	mov	r8, r3
 8002302:	430c      	orrs	r4, r1
 8002304:	0763      	lsls	r3, r4, #29
 8002306:	d000      	beq.n	800230a <__aeabi_dsub+0x2e2>
 8002308:	e712      	b.n	8002130 <__aeabi_dsub+0x108>
 800230a:	464b      	mov	r3, r9
 800230c:	464a      	mov	r2, r9
 800230e:	08e4      	lsrs	r4, r4, #3
 8002310:	075b      	lsls	r3, r3, #29
 8002312:	4323      	orrs	r3, r4
 8002314:	08d4      	lsrs	r4, r2, #3
 8002316:	4642      	mov	r2, r8
 8002318:	4919      	ldr	r1, [pc, #100]	; (8002380 <__aeabi_dsub+0x358>)
 800231a:	428a      	cmp	r2, r1
 800231c:	d00e      	beq.n	800233c <__aeabi_dsub+0x314>
 800231e:	0324      	lsls	r4, r4, #12
 8002320:	0552      	lsls	r2, r2, #21
 8002322:	0b24      	lsrs	r4, r4, #12
 8002324:	0d52      	lsrs	r2, r2, #21
 8002326:	e722      	b.n	800216e <__aeabi_dsub+0x146>
 8002328:	000a      	movs	r2, r1
 800232a:	2400      	movs	r4, #0
 800232c:	2300      	movs	r3, #0
 800232e:	e71e      	b.n	800216e <__aeabi_dsub+0x146>
 8002330:	08db      	lsrs	r3, r3, #3
 8002332:	4662      	mov	r2, ip
 8002334:	0752      	lsls	r2, r2, #29
 8002336:	4313      	orrs	r3, r2
 8002338:	4662      	mov	r2, ip
 800233a:	08d4      	lsrs	r4, r2, #3
 800233c:	001a      	movs	r2, r3
 800233e:	4322      	orrs	r2, r4
 8002340:	d100      	bne.n	8002344 <__aeabi_dsub+0x31c>
 8002342:	e1fc      	b.n	800273e <__aeabi_dsub+0x716>
 8002344:	2280      	movs	r2, #128	; 0x80
 8002346:	0312      	lsls	r2, r2, #12
 8002348:	4314      	orrs	r4, r2
 800234a:	0324      	lsls	r4, r4, #12
 800234c:	4a0c      	ldr	r2, [pc, #48]	; (8002380 <__aeabi_dsub+0x358>)
 800234e:	0b24      	lsrs	r4, r4, #12
 8002350:	e70d      	b.n	800216e <__aeabi_dsub+0x146>
 8002352:	0020      	movs	r0, r4
 8002354:	f000 fb34 	bl	80029c0 <__clzsi2>
 8002358:	0001      	movs	r1, r0
 800235a:	3118      	adds	r1, #24
 800235c:	291f      	cmp	r1, #31
 800235e:	dc00      	bgt.n	8002362 <__aeabi_dsub+0x33a>
 8002360:	e6c4      	b.n	80020ec <__aeabi_dsub+0xc4>
 8002362:	3808      	subs	r0, #8
 8002364:	4084      	lsls	r4, r0
 8002366:	4643      	mov	r3, r8
 8002368:	0020      	movs	r0, r4
 800236a:	2400      	movs	r4, #0
 800236c:	4588      	cmp	r8, r1
 800236e:	dc00      	bgt.n	8002372 <__aeabi_dsub+0x34a>
 8002370:	e6c8      	b.n	8002104 <__aeabi_dsub+0xdc>
 8002372:	4a04      	ldr	r2, [pc, #16]	; (8002384 <__aeabi_dsub+0x35c>)
 8002374:	1a5b      	subs	r3, r3, r1
 8002376:	4010      	ands	r0, r2
 8002378:	4698      	mov	r8, r3
 800237a:	4681      	mov	r9, r0
 800237c:	e6d6      	b.n	800212c <__aeabi_dsub+0x104>
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	000007ff 	.word	0x000007ff
 8002384:	ff7fffff 	.word	0xff7fffff
 8002388:	fffff801 	.word	0xfffff801
 800238c:	000007fe 	.word	0x000007fe
 8002390:	430f      	orrs	r7, r1
 8002392:	1e7a      	subs	r2, r7, #1
 8002394:	4197      	sbcs	r7, r2
 8002396:	e691      	b.n	80020bc <__aeabi_dsub+0x94>
 8002398:	4661      	mov	r1, ip
 800239a:	08db      	lsrs	r3, r3, #3
 800239c:	0749      	lsls	r1, r1, #29
 800239e:	430b      	orrs	r3, r1
 80023a0:	4661      	mov	r1, ip
 80023a2:	08cc      	lsrs	r4, r1, #3
 80023a4:	e7b8      	b.n	8002318 <__aeabi_dsub+0x2f0>
 80023a6:	4640      	mov	r0, r8
 80023a8:	4cd3      	ldr	r4, [pc, #844]	; (80026f8 <__aeabi_dsub+0x6d0>)
 80023aa:	3001      	adds	r0, #1
 80023ac:	4220      	tst	r0, r4
 80023ae:	d000      	beq.n	80023b2 <__aeabi_dsub+0x38a>
 80023b0:	e0a2      	b.n	80024f8 <__aeabi_dsub+0x4d0>
 80023b2:	4640      	mov	r0, r8
 80023b4:	2800      	cmp	r0, #0
 80023b6:	d000      	beq.n	80023ba <__aeabi_dsub+0x392>
 80023b8:	e101      	b.n	80025be <__aeabi_dsub+0x596>
 80023ba:	4660      	mov	r0, ip
 80023bc:	4318      	orrs	r0, r3
 80023be:	d100      	bne.n	80023c2 <__aeabi_dsub+0x39a>
 80023c0:	e15e      	b.n	8002680 <__aeabi_dsub+0x658>
 80023c2:	0008      	movs	r0, r1
 80023c4:	4338      	orrs	r0, r7
 80023c6:	d000      	beq.n	80023ca <__aeabi_dsub+0x3a2>
 80023c8:	e15f      	b.n	800268a <__aeabi_dsub+0x662>
 80023ca:	4661      	mov	r1, ip
 80023cc:	08db      	lsrs	r3, r3, #3
 80023ce:	0749      	lsls	r1, r1, #29
 80023d0:	430b      	orrs	r3, r1
 80023d2:	4661      	mov	r1, ip
 80023d4:	08cc      	lsrs	r4, r1, #3
 80023d6:	e7a2      	b.n	800231e <__aeabi_dsub+0x2f6>
 80023d8:	4dc8      	ldr	r5, [pc, #800]	; (80026fc <__aeabi_dsub+0x6d4>)
 80023da:	42a8      	cmp	r0, r5
 80023dc:	d100      	bne.n	80023e0 <__aeabi_dsub+0x3b8>
 80023de:	e0cf      	b.n	8002580 <__aeabi_dsub+0x558>
 80023e0:	2580      	movs	r5, #128	; 0x80
 80023e2:	4664      	mov	r4, ip
 80023e4:	042d      	lsls	r5, r5, #16
 80023e6:	432c      	orrs	r4, r5
 80023e8:	46a4      	mov	ip, r4
 80023ea:	2a38      	cmp	r2, #56	; 0x38
 80023ec:	dc56      	bgt.n	800249c <__aeabi_dsub+0x474>
 80023ee:	2a1f      	cmp	r2, #31
 80023f0:	dd00      	ble.n	80023f4 <__aeabi_dsub+0x3cc>
 80023f2:	e0d1      	b.n	8002598 <__aeabi_dsub+0x570>
 80023f4:	2520      	movs	r5, #32
 80023f6:	001e      	movs	r6, r3
 80023f8:	1aad      	subs	r5, r5, r2
 80023fa:	4664      	mov	r4, ip
 80023fc:	40ab      	lsls	r3, r5
 80023fe:	40ac      	lsls	r4, r5
 8002400:	40d6      	lsrs	r6, r2
 8002402:	1e5d      	subs	r5, r3, #1
 8002404:	41ab      	sbcs	r3, r5
 8002406:	4334      	orrs	r4, r6
 8002408:	4323      	orrs	r3, r4
 800240a:	4664      	mov	r4, ip
 800240c:	40d4      	lsrs	r4, r2
 800240e:	1b09      	subs	r1, r1, r4
 8002410:	e049      	b.n	80024a6 <__aeabi_dsub+0x47e>
 8002412:	4660      	mov	r0, ip
 8002414:	1bdc      	subs	r4, r3, r7
 8002416:	1a46      	subs	r6, r0, r1
 8002418:	42a3      	cmp	r3, r4
 800241a:	4180      	sbcs	r0, r0
 800241c:	4240      	negs	r0, r0
 800241e:	4681      	mov	r9, r0
 8002420:	0030      	movs	r0, r6
 8002422:	464e      	mov	r6, r9
 8002424:	1b80      	subs	r0, r0, r6
 8002426:	4681      	mov	r9, r0
 8002428:	0200      	lsls	r0, r0, #8
 800242a:	d476      	bmi.n	800251a <__aeabi_dsub+0x4f2>
 800242c:	464b      	mov	r3, r9
 800242e:	4323      	orrs	r3, r4
 8002430:	d000      	beq.n	8002434 <__aeabi_dsub+0x40c>
 8002432:	e652      	b.n	80020da <__aeabi_dsub+0xb2>
 8002434:	2400      	movs	r4, #0
 8002436:	2500      	movs	r5, #0
 8002438:	e771      	b.n	800231e <__aeabi_dsub+0x2f6>
 800243a:	4339      	orrs	r1, r7
 800243c:	000c      	movs	r4, r1
 800243e:	1e62      	subs	r2, r4, #1
 8002440:	4194      	sbcs	r4, r2
 8002442:	18e4      	adds	r4, r4, r3
 8002444:	429c      	cmp	r4, r3
 8002446:	419b      	sbcs	r3, r3
 8002448:	425b      	negs	r3, r3
 800244a:	4463      	add	r3, ip
 800244c:	4699      	mov	r9, r3
 800244e:	464b      	mov	r3, r9
 8002450:	021b      	lsls	r3, r3, #8
 8002452:	d400      	bmi.n	8002456 <__aeabi_dsub+0x42e>
 8002454:	e756      	b.n	8002304 <__aeabi_dsub+0x2dc>
 8002456:	2301      	movs	r3, #1
 8002458:	469c      	mov	ip, r3
 800245a:	4ba8      	ldr	r3, [pc, #672]	; (80026fc <__aeabi_dsub+0x6d4>)
 800245c:	44e0      	add	r8, ip
 800245e:	4598      	cmp	r8, r3
 8002460:	d038      	beq.n	80024d4 <__aeabi_dsub+0x4ac>
 8002462:	464b      	mov	r3, r9
 8002464:	48a6      	ldr	r0, [pc, #664]	; (8002700 <__aeabi_dsub+0x6d8>)
 8002466:	2201      	movs	r2, #1
 8002468:	4003      	ands	r3, r0
 800246a:	0018      	movs	r0, r3
 800246c:	0863      	lsrs	r3, r4, #1
 800246e:	4014      	ands	r4, r2
 8002470:	431c      	orrs	r4, r3
 8002472:	07c3      	lsls	r3, r0, #31
 8002474:	431c      	orrs	r4, r3
 8002476:	0843      	lsrs	r3, r0, #1
 8002478:	4699      	mov	r9, r3
 800247a:	e657      	b.n	800212c <__aeabi_dsub+0x104>
 800247c:	0010      	movs	r0, r2
 800247e:	000e      	movs	r6, r1
 8002480:	3820      	subs	r0, #32
 8002482:	40c6      	lsrs	r6, r0
 8002484:	2a20      	cmp	r2, #32
 8002486:	d004      	beq.n	8002492 <__aeabi_dsub+0x46a>
 8002488:	2040      	movs	r0, #64	; 0x40
 800248a:	1a82      	subs	r2, r0, r2
 800248c:	4091      	lsls	r1, r2
 800248e:	430f      	orrs	r7, r1
 8002490:	46b9      	mov	r9, r7
 8002492:	464f      	mov	r7, r9
 8002494:	1e7a      	subs	r2, r7, #1
 8002496:	4197      	sbcs	r7, r2
 8002498:	4337      	orrs	r7, r6
 800249a:	e60f      	b.n	80020bc <__aeabi_dsub+0x94>
 800249c:	4662      	mov	r2, ip
 800249e:	431a      	orrs	r2, r3
 80024a0:	0013      	movs	r3, r2
 80024a2:	1e5a      	subs	r2, r3, #1
 80024a4:	4193      	sbcs	r3, r2
 80024a6:	1afc      	subs	r4, r7, r3
 80024a8:	42a7      	cmp	r7, r4
 80024aa:	41bf      	sbcs	r7, r7
 80024ac:	427f      	negs	r7, r7
 80024ae:	1bcb      	subs	r3, r1, r7
 80024b0:	4699      	mov	r9, r3
 80024b2:	465d      	mov	r5, fp
 80024b4:	4680      	mov	r8, r0
 80024b6:	e608      	b.n	80020ca <__aeabi_dsub+0xa2>
 80024b8:	4666      	mov	r6, ip
 80024ba:	431e      	orrs	r6, r3
 80024bc:	d100      	bne.n	80024c0 <__aeabi_dsub+0x498>
 80024be:	e0be      	b.n	800263e <__aeabi_dsub+0x616>
 80024c0:	1e56      	subs	r6, r2, #1
 80024c2:	2a01      	cmp	r2, #1
 80024c4:	d100      	bne.n	80024c8 <__aeabi_dsub+0x4a0>
 80024c6:	e109      	b.n	80026dc <__aeabi_dsub+0x6b4>
 80024c8:	4c8c      	ldr	r4, [pc, #560]	; (80026fc <__aeabi_dsub+0x6d4>)
 80024ca:	42a2      	cmp	r2, r4
 80024cc:	d100      	bne.n	80024d0 <__aeabi_dsub+0x4a8>
 80024ce:	e119      	b.n	8002704 <__aeabi_dsub+0x6dc>
 80024d0:	0032      	movs	r2, r6
 80024d2:	e6c1      	b.n	8002258 <__aeabi_dsub+0x230>
 80024d4:	4642      	mov	r2, r8
 80024d6:	2400      	movs	r4, #0
 80024d8:	2300      	movs	r3, #0
 80024da:	e648      	b.n	800216e <__aeabi_dsub+0x146>
 80024dc:	2020      	movs	r0, #32
 80024de:	000c      	movs	r4, r1
 80024e0:	1a80      	subs	r0, r0, r2
 80024e2:	003e      	movs	r6, r7
 80024e4:	4087      	lsls	r7, r0
 80024e6:	4084      	lsls	r4, r0
 80024e8:	40d6      	lsrs	r6, r2
 80024ea:	1e78      	subs	r0, r7, #1
 80024ec:	4187      	sbcs	r7, r0
 80024ee:	40d1      	lsrs	r1, r2
 80024f0:	4334      	orrs	r4, r6
 80024f2:	433c      	orrs	r4, r7
 80024f4:	448c      	add	ip, r1
 80024f6:	e7a4      	b.n	8002442 <__aeabi_dsub+0x41a>
 80024f8:	4a80      	ldr	r2, [pc, #512]	; (80026fc <__aeabi_dsub+0x6d4>)
 80024fa:	4290      	cmp	r0, r2
 80024fc:	d100      	bne.n	8002500 <__aeabi_dsub+0x4d8>
 80024fe:	e0e9      	b.n	80026d4 <__aeabi_dsub+0x6ac>
 8002500:	19df      	adds	r7, r3, r7
 8002502:	429f      	cmp	r7, r3
 8002504:	419b      	sbcs	r3, r3
 8002506:	4461      	add	r1, ip
 8002508:	425b      	negs	r3, r3
 800250a:	18c9      	adds	r1, r1, r3
 800250c:	07cc      	lsls	r4, r1, #31
 800250e:	087f      	lsrs	r7, r7, #1
 8002510:	084b      	lsrs	r3, r1, #1
 8002512:	4699      	mov	r9, r3
 8002514:	4680      	mov	r8, r0
 8002516:	433c      	orrs	r4, r7
 8002518:	e6f4      	b.n	8002304 <__aeabi_dsub+0x2dc>
 800251a:	1afc      	subs	r4, r7, r3
 800251c:	42a7      	cmp	r7, r4
 800251e:	41bf      	sbcs	r7, r7
 8002520:	4663      	mov	r3, ip
 8002522:	427f      	negs	r7, r7
 8002524:	1ac9      	subs	r1, r1, r3
 8002526:	1bcb      	subs	r3, r1, r7
 8002528:	4699      	mov	r9, r3
 800252a:	465d      	mov	r5, fp
 800252c:	e5d5      	b.n	80020da <__aeabi_dsub+0xb2>
 800252e:	08ff      	lsrs	r7, r7, #3
 8002530:	074b      	lsls	r3, r1, #29
 8002532:	465d      	mov	r5, fp
 8002534:	433b      	orrs	r3, r7
 8002536:	08cc      	lsrs	r4, r1, #3
 8002538:	e6ee      	b.n	8002318 <__aeabi_dsub+0x2f0>
 800253a:	4662      	mov	r2, ip
 800253c:	431a      	orrs	r2, r3
 800253e:	d000      	beq.n	8002542 <__aeabi_dsub+0x51a>
 8002540:	e082      	b.n	8002648 <__aeabi_dsub+0x620>
 8002542:	000b      	movs	r3, r1
 8002544:	433b      	orrs	r3, r7
 8002546:	d11b      	bne.n	8002580 <__aeabi_dsub+0x558>
 8002548:	2480      	movs	r4, #128	; 0x80
 800254a:	2500      	movs	r5, #0
 800254c:	0324      	lsls	r4, r4, #12
 800254e:	e6f9      	b.n	8002344 <__aeabi_dsub+0x31c>
 8002550:	19dc      	adds	r4, r3, r7
 8002552:	429c      	cmp	r4, r3
 8002554:	419b      	sbcs	r3, r3
 8002556:	4461      	add	r1, ip
 8002558:	4689      	mov	r9, r1
 800255a:	425b      	negs	r3, r3
 800255c:	4499      	add	r9, r3
 800255e:	464b      	mov	r3, r9
 8002560:	021b      	lsls	r3, r3, #8
 8002562:	d444      	bmi.n	80025ee <__aeabi_dsub+0x5c6>
 8002564:	2301      	movs	r3, #1
 8002566:	4698      	mov	r8, r3
 8002568:	e6cc      	b.n	8002304 <__aeabi_dsub+0x2dc>
 800256a:	1bdc      	subs	r4, r3, r7
 800256c:	4662      	mov	r2, ip
 800256e:	42a3      	cmp	r3, r4
 8002570:	419b      	sbcs	r3, r3
 8002572:	1a51      	subs	r1, r2, r1
 8002574:	425b      	negs	r3, r3
 8002576:	1acb      	subs	r3, r1, r3
 8002578:	4699      	mov	r9, r3
 800257a:	2301      	movs	r3, #1
 800257c:	4698      	mov	r8, r3
 800257e:	e5a4      	b.n	80020ca <__aeabi_dsub+0xa2>
 8002580:	08ff      	lsrs	r7, r7, #3
 8002582:	074b      	lsls	r3, r1, #29
 8002584:	465d      	mov	r5, fp
 8002586:	433b      	orrs	r3, r7
 8002588:	08cc      	lsrs	r4, r1, #3
 800258a:	e6d7      	b.n	800233c <__aeabi_dsub+0x314>
 800258c:	4662      	mov	r2, ip
 800258e:	431a      	orrs	r2, r3
 8002590:	0014      	movs	r4, r2
 8002592:	1e63      	subs	r3, r4, #1
 8002594:	419c      	sbcs	r4, r3
 8002596:	e679      	b.n	800228c <__aeabi_dsub+0x264>
 8002598:	0015      	movs	r5, r2
 800259a:	4664      	mov	r4, ip
 800259c:	3d20      	subs	r5, #32
 800259e:	40ec      	lsrs	r4, r5
 80025a0:	46a0      	mov	r8, r4
 80025a2:	2a20      	cmp	r2, #32
 80025a4:	d005      	beq.n	80025b2 <__aeabi_dsub+0x58a>
 80025a6:	2540      	movs	r5, #64	; 0x40
 80025a8:	4664      	mov	r4, ip
 80025aa:	1aaa      	subs	r2, r5, r2
 80025ac:	4094      	lsls	r4, r2
 80025ae:	4323      	orrs	r3, r4
 80025b0:	469a      	mov	sl, r3
 80025b2:	4654      	mov	r4, sl
 80025b4:	1e63      	subs	r3, r4, #1
 80025b6:	419c      	sbcs	r4, r3
 80025b8:	4643      	mov	r3, r8
 80025ba:	4323      	orrs	r3, r4
 80025bc:	e773      	b.n	80024a6 <__aeabi_dsub+0x47e>
 80025be:	4662      	mov	r2, ip
 80025c0:	431a      	orrs	r2, r3
 80025c2:	d023      	beq.n	800260c <__aeabi_dsub+0x5e4>
 80025c4:	000a      	movs	r2, r1
 80025c6:	433a      	orrs	r2, r7
 80025c8:	d000      	beq.n	80025cc <__aeabi_dsub+0x5a4>
 80025ca:	e0a0      	b.n	800270e <__aeabi_dsub+0x6e6>
 80025cc:	4662      	mov	r2, ip
 80025ce:	08db      	lsrs	r3, r3, #3
 80025d0:	0752      	lsls	r2, r2, #29
 80025d2:	4313      	orrs	r3, r2
 80025d4:	4662      	mov	r2, ip
 80025d6:	08d4      	lsrs	r4, r2, #3
 80025d8:	e6b0      	b.n	800233c <__aeabi_dsub+0x314>
 80025da:	000b      	movs	r3, r1
 80025dc:	433b      	orrs	r3, r7
 80025de:	d100      	bne.n	80025e2 <__aeabi_dsub+0x5ba>
 80025e0:	e728      	b.n	8002434 <__aeabi_dsub+0x40c>
 80025e2:	08ff      	lsrs	r7, r7, #3
 80025e4:	074b      	lsls	r3, r1, #29
 80025e6:	465d      	mov	r5, fp
 80025e8:	433b      	orrs	r3, r7
 80025ea:	08cc      	lsrs	r4, r1, #3
 80025ec:	e697      	b.n	800231e <__aeabi_dsub+0x2f6>
 80025ee:	2302      	movs	r3, #2
 80025f0:	4698      	mov	r8, r3
 80025f2:	e736      	b.n	8002462 <__aeabi_dsub+0x43a>
 80025f4:	1afc      	subs	r4, r7, r3
 80025f6:	42a7      	cmp	r7, r4
 80025f8:	41bf      	sbcs	r7, r7
 80025fa:	4663      	mov	r3, ip
 80025fc:	427f      	negs	r7, r7
 80025fe:	1ac9      	subs	r1, r1, r3
 8002600:	1bcb      	subs	r3, r1, r7
 8002602:	4699      	mov	r9, r3
 8002604:	2301      	movs	r3, #1
 8002606:	465d      	mov	r5, fp
 8002608:	4698      	mov	r8, r3
 800260a:	e55e      	b.n	80020ca <__aeabi_dsub+0xa2>
 800260c:	074b      	lsls	r3, r1, #29
 800260e:	08ff      	lsrs	r7, r7, #3
 8002610:	433b      	orrs	r3, r7
 8002612:	08cc      	lsrs	r4, r1, #3
 8002614:	e692      	b.n	800233c <__aeabi_dsub+0x314>
 8002616:	1bdc      	subs	r4, r3, r7
 8002618:	4660      	mov	r0, ip
 800261a:	42a3      	cmp	r3, r4
 800261c:	41b6      	sbcs	r6, r6
 800261e:	1a40      	subs	r0, r0, r1
 8002620:	4276      	negs	r6, r6
 8002622:	1b80      	subs	r0, r0, r6
 8002624:	4681      	mov	r9, r0
 8002626:	0200      	lsls	r0, r0, #8
 8002628:	d560      	bpl.n	80026ec <__aeabi_dsub+0x6c4>
 800262a:	1afc      	subs	r4, r7, r3
 800262c:	42a7      	cmp	r7, r4
 800262e:	41bf      	sbcs	r7, r7
 8002630:	4663      	mov	r3, ip
 8002632:	427f      	negs	r7, r7
 8002634:	1ac9      	subs	r1, r1, r3
 8002636:	1bcb      	subs	r3, r1, r7
 8002638:	4699      	mov	r9, r3
 800263a:	465d      	mov	r5, fp
 800263c:	e576      	b.n	800212c <__aeabi_dsub+0x104>
 800263e:	08ff      	lsrs	r7, r7, #3
 8002640:	074b      	lsls	r3, r1, #29
 8002642:	433b      	orrs	r3, r7
 8002644:	08cc      	lsrs	r4, r1, #3
 8002646:	e667      	b.n	8002318 <__aeabi_dsub+0x2f0>
 8002648:	000a      	movs	r2, r1
 800264a:	08db      	lsrs	r3, r3, #3
 800264c:	433a      	orrs	r2, r7
 800264e:	d100      	bne.n	8002652 <__aeabi_dsub+0x62a>
 8002650:	e66f      	b.n	8002332 <__aeabi_dsub+0x30a>
 8002652:	4662      	mov	r2, ip
 8002654:	0752      	lsls	r2, r2, #29
 8002656:	4313      	orrs	r3, r2
 8002658:	4662      	mov	r2, ip
 800265a:	08d4      	lsrs	r4, r2, #3
 800265c:	2280      	movs	r2, #128	; 0x80
 800265e:	0312      	lsls	r2, r2, #12
 8002660:	4214      	tst	r4, r2
 8002662:	d007      	beq.n	8002674 <__aeabi_dsub+0x64c>
 8002664:	08c8      	lsrs	r0, r1, #3
 8002666:	4210      	tst	r0, r2
 8002668:	d104      	bne.n	8002674 <__aeabi_dsub+0x64c>
 800266a:	465d      	mov	r5, fp
 800266c:	0004      	movs	r4, r0
 800266e:	08fb      	lsrs	r3, r7, #3
 8002670:	0749      	lsls	r1, r1, #29
 8002672:	430b      	orrs	r3, r1
 8002674:	0f5a      	lsrs	r2, r3, #29
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	08db      	lsrs	r3, r3, #3
 800267a:	0752      	lsls	r2, r2, #29
 800267c:	4313      	orrs	r3, r2
 800267e:	e65d      	b.n	800233c <__aeabi_dsub+0x314>
 8002680:	074b      	lsls	r3, r1, #29
 8002682:	08ff      	lsrs	r7, r7, #3
 8002684:	433b      	orrs	r3, r7
 8002686:	08cc      	lsrs	r4, r1, #3
 8002688:	e649      	b.n	800231e <__aeabi_dsub+0x2f6>
 800268a:	19dc      	adds	r4, r3, r7
 800268c:	429c      	cmp	r4, r3
 800268e:	419b      	sbcs	r3, r3
 8002690:	4461      	add	r1, ip
 8002692:	4689      	mov	r9, r1
 8002694:	425b      	negs	r3, r3
 8002696:	4499      	add	r9, r3
 8002698:	464b      	mov	r3, r9
 800269a:	021b      	lsls	r3, r3, #8
 800269c:	d400      	bmi.n	80026a0 <__aeabi_dsub+0x678>
 800269e:	e631      	b.n	8002304 <__aeabi_dsub+0x2dc>
 80026a0:	464a      	mov	r2, r9
 80026a2:	4b17      	ldr	r3, [pc, #92]	; (8002700 <__aeabi_dsub+0x6d8>)
 80026a4:	401a      	ands	r2, r3
 80026a6:	2301      	movs	r3, #1
 80026a8:	4691      	mov	r9, r2
 80026aa:	4698      	mov	r8, r3
 80026ac:	e62a      	b.n	8002304 <__aeabi_dsub+0x2dc>
 80026ae:	0016      	movs	r6, r2
 80026b0:	4664      	mov	r4, ip
 80026b2:	3e20      	subs	r6, #32
 80026b4:	40f4      	lsrs	r4, r6
 80026b6:	46a0      	mov	r8, r4
 80026b8:	2a20      	cmp	r2, #32
 80026ba:	d005      	beq.n	80026c8 <__aeabi_dsub+0x6a0>
 80026bc:	2640      	movs	r6, #64	; 0x40
 80026be:	4664      	mov	r4, ip
 80026c0:	1ab2      	subs	r2, r6, r2
 80026c2:	4094      	lsls	r4, r2
 80026c4:	4323      	orrs	r3, r4
 80026c6:	469a      	mov	sl, r3
 80026c8:	4654      	mov	r4, sl
 80026ca:	1e63      	subs	r3, r4, #1
 80026cc:	419c      	sbcs	r4, r3
 80026ce:	4643      	mov	r3, r8
 80026d0:	431c      	orrs	r4, r3
 80026d2:	e5db      	b.n	800228c <__aeabi_dsub+0x264>
 80026d4:	0002      	movs	r2, r0
 80026d6:	2400      	movs	r4, #0
 80026d8:	2300      	movs	r3, #0
 80026da:	e548      	b.n	800216e <__aeabi_dsub+0x146>
 80026dc:	19dc      	adds	r4, r3, r7
 80026de:	42bc      	cmp	r4, r7
 80026e0:	41bf      	sbcs	r7, r7
 80026e2:	4461      	add	r1, ip
 80026e4:	4689      	mov	r9, r1
 80026e6:	427f      	negs	r7, r7
 80026e8:	44b9      	add	r9, r7
 80026ea:	e738      	b.n	800255e <__aeabi_dsub+0x536>
 80026ec:	464b      	mov	r3, r9
 80026ee:	4323      	orrs	r3, r4
 80026f0:	d100      	bne.n	80026f4 <__aeabi_dsub+0x6cc>
 80026f2:	e69f      	b.n	8002434 <__aeabi_dsub+0x40c>
 80026f4:	e606      	b.n	8002304 <__aeabi_dsub+0x2dc>
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	000007fe 	.word	0x000007fe
 80026fc:	000007ff 	.word	0x000007ff
 8002700:	ff7fffff 	.word	0xff7fffff
 8002704:	08ff      	lsrs	r7, r7, #3
 8002706:	074b      	lsls	r3, r1, #29
 8002708:	433b      	orrs	r3, r7
 800270a:	08cc      	lsrs	r4, r1, #3
 800270c:	e616      	b.n	800233c <__aeabi_dsub+0x314>
 800270e:	4662      	mov	r2, ip
 8002710:	08db      	lsrs	r3, r3, #3
 8002712:	0752      	lsls	r2, r2, #29
 8002714:	4313      	orrs	r3, r2
 8002716:	4662      	mov	r2, ip
 8002718:	08d4      	lsrs	r4, r2, #3
 800271a:	2280      	movs	r2, #128	; 0x80
 800271c:	0312      	lsls	r2, r2, #12
 800271e:	4214      	tst	r4, r2
 8002720:	d007      	beq.n	8002732 <__aeabi_dsub+0x70a>
 8002722:	08c8      	lsrs	r0, r1, #3
 8002724:	4210      	tst	r0, r2
 8002726:	d104      	bne.n	8002732 <__aeabi_dsub+0x70a>
 8002728:	465d      	mov	r5, fp
 800272a:	0004      	movs	r4, r0
 800272c:	08fb      	lsrs	r3, r7, #3
 800272e:	0749      	lsls	r1, r1, #29
 8002730:	430b      	orrs	r3, r1
 8002732:	0f5a      	lsrs	r2, r3, #29
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	0752      	lsls	r2, r2, #29
 8002738:	08db      	lsrs	r3, r3, #3
 800273a:	4313      	orrs	r3, r2
 800273c:	e5fe      	b.n	800233c <__aeabi_dsub+0x314>
 800273e:	2300      	movs	r3, #0
 8002740:	4a01      	ldr	r2, [pc, #4]	; (8002748 <__aeabi_dsub+0x720>)
 8002742:	001c      	movs	r4, r3
 8002744:	e513      	b.n	800216e <__aeabi_dsub+0x146>
 8002746:	46c0      	nop			; (mov r8, r8)
 8002748:	000007ff 	.word	0x000007ff

0800274c <__aeabi_i2d>:
 800274c:	b570      	push	{r4, r5, r6, lr}
 800274e:	2800      	cmp	r0, #0
 8002750:	d016      	beq.n	8002780 <__aeabi_i2d+0x34>
 8002752:	17c3      	asrs	r3, r0, #31
 8002754:	18c5      	adds	r5, r0, r3
 8002756:	405d      	eors	r5, r3
 8002758:	0fc4      	lsrs	r4, r0, #31
 800275a:	0028      	movs	r0, r5
 800275c:	f000 f930 	bl	80029c0 <__clzsi2>
 8002760:	4a11      	ldr	r2, [pc, #68]	; (80027a8 <__aeabi_i2d+0x5c>)
 8002762:	1a12      	subs	r2, r2, r0
 8002764:	280a      	cmp	r0, #10
 8002766:	dc16      	bgt.n	8002796 <__aeabi_i2d+0x4a>
 8002768:	0003      	movs	r3, r0
 800276a:	002e      	movs	r6, r5
 800276c:	3315      	adds	r3, #21
 800276e:	409e      	lsls	r6, r3
 8002770:	230b      	movs	r3, #11
 8002772:	1a18      	subs	r0, r3, r0
 8002774:	40c5      	lsrs	r5, r0
 8002776:	0552      	lsls	r2, r2, #21
 8002778:	032d      	lsls	r5, r5, #12
 800277a:	0b2d      	lsrs	r5, r5, #12
 800277c:	0d53      	lsrs	r3, r2, #21
 800277e:	e003      	b.n	8002788 <__aeabi_i2d+0x3c>
 8002780:	2400      	movs	r4, #0
 8002782:	2300      	movs	r3, #0
 8002784:	2500      	movs	r5, #0
 8002786:	2600      	movs	r6, #0
 8002788:	051b      	lsls	r3, r3, #20
 800278a:	432b      	orrs	r3, r5
 800278c:	07e4      	lsls	r4, r4, #31
 800278e:	4323      	orrs	r3, r4
 8002790:	0030      	movs	r0, r6
 8002792:	0019      	movs	r1, r3
 8002794:	bd70      	pop	{r4, r5, r6, pc}
 8002796:	380b      	subs	r0, #11
 8002798:	4085      	lsls	r5, r0
 800279a:	0552      	lsls	r2, r2, #21
 800279c:	032d      	lsls	r5, r5, #12
 800279e:	2600      	movs	r6, #0
 80027a0:	0b2d      	lsrs	r5, r5, #12
 80027a2:	0d53      	lsrs	r3, r2, #21
 80027a4:	e7f0      	b.n	8002788 <__aeabi_i2d+0x3c>
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	0000041e 	.word	0x0000041e

080027ac <__aeabi_f2d>:
 80027ac:	b570      	push	{r4, r5, r6, lr}
 80027ae:	0043      	lsls	r3, r0, #1
 80027b0:	0246      	lsls	r6, r0, #9
 80027b2:	0fc4      	lsrs	r4, r0, #31
 80027b4:	20fe      	movs	r0, #254	; 0xfe
 80027b6:	0e1b      	lsrs	r3, r3, #24
 80027b8:	1c59      	adds	r1, r3, #1
 80027ba:	0a75      	lsrs	r5, r6, #9
 80027bc:	4208      	tst	r0, r1
 80027be:	d00c      	beq.n	80027da <__aeabi_f2d+0x2e>
 80027c0:	22e0      	movs	r2, #224	; 0xe0
 80027c2:	0092      	lsls	r2, r2, #2
 80027c4:	4694      	mov	ip, r2
 80027c6:	076d      	lsls	r5, r5, #29
 80027c8:	0b36      	lsrs	r6, r6, #12
 80027ca:	4463      	add	r3, ip
 80027cc:	051b      	lsls	r3, r3, #20
 80027ce:	4333      	orrs	r3, r6
 80027d0:	07e4      	lsls	r4, r4, #31
 80027d2:	4323      	orrs	r3, r4
 80027d4:	0028      	movs	r0, r5
 80027d6:	0019      	movs	r1, r3
 80027d8:	bd70      	pop	{r4, r5, r6, pc}
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d114      	bne.n	8002808 <__aeabi_f2d+0x5c>
 80027de:	2d00      	cmp	r5, #0
 80027e0:	d01b      	beq.n	800281a <__aeabi_f2d+0x6e>
 80027e2:	0028      	movs	r0, r5
 80027e4:	f000 f8ec 	bl	80029c0 <__clzsi2>
 80027e8:	280a      	cmp	r0, #10
 80027ea:	dc1c      	bgt.n	8002826 <__aeabi_f2d+0x7a>
 80027ec:	230b      	movs	r3, #11
 80027ee:	002e      	movs	r6, r5
 80027f0:	1a1b      	subs	r3, r3, r0
 80027f2:	40de      	lsrs	r6, r3
 80027f4:	0003      	movs	r3, r0
 80027f6:	3315      	adds	r3, #21
 80027f8:	409d      	lsls	r5, r3
 80027fa:	4a0e      	ldr	r2, [pc, #56]	; (8002834 <__aeabi_f2d+0x88>)
 80027fc:	0336      	lsls	r6, r6, #12
 80027fe:	1a12      	subs	r2, r2, r0
 8002800:	0552      	lsls	r2, r2, #21
 8002802:	0b36      	lsrs	r6, r6, #12
 8002804:	0d53      	lsrs	r3, r2, #21
 8002806:	e7e1      	b.n	80027cc <__aeabi_f2d+0x20>
 8002808:	2d00      	cmp	r5, #0
 800280a:	d009      	beq.n	8002820 <__aeabi_f2d+0x74>
 800280c:	2280      	movs	r2, #128	; 0x80
 800280e:	0b36      	lsrs	r6, r6, #12
 8002810:	0312      	lsls	r2, r2, #12
 8002812:	4b09      	ldr	r3, [pc, #36]	; (8002838 <__aeabi_f2d+0x8c>)
 8002814:	076d      	lsls	r5, r5, #29
 8002816:	4316      	orrs	r6, r2
 8002818:	e7d8      	b.n	80027cc <__aeabi_f2d+0x20>
 800281a:	2300      	movs	r3, #0
 800281c:	2600      	movs	r6, #0
 800281e:	e7d5      	b.n	80027cc <__aeabi_f2d+0x20>
 8002820:	2600      	movs	r6, #0
 8002822:	4b05      	ldr	r3, [pc, #20]	; (8002838 <__aeabi_f2d+0x8c>)
 8002824:	e7d2      	b.n	80027cc <__aeabi_f2d+0x20>
 8002826:	0003      	movs	r3, r0
 8002828:	3b0b      	subs	r3, #11
 800282a:	409d      	lsls	r5, r3
 800282c:	002e      	movs	r6, r5
 800282e:	2500      	movs	r5, #0
 8002830:	e7e3      	b.n	80027fa <__aeabi_f2d+0x4e>
 8002832:	46c0      	nop			; (mov r8, r8)
 8002834:	00000389 	.word	0x00000389
 8002838:	000007ff 	.word	0x000007ff

0800283c <__aeabi_d2f>:
 800283c:	0002      	movs	r2, r0
 800283e:	004b      	lsls	r3, r1, #1
 8002840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002842:	0d5b      	lsrs	r3, r3, #21
 8002844:	030c      	lsls	r4, r1, #12
 8002846:	4e3d      	ldr	r6, [pc, #244]	; (800293c <__aeabi_d2f+0x100>)
 8002848:	0a64      	lsrs	r4, r4, #9
 800284a:	0f40      	lsrs	r0, r0, #29
 800284c:	1c5f      	adds	r7, r3, #1
 800284e:	0fc9      	lsrs	r1, r1, #31
 8002850:	4304      	orrs	r4, r0
 8002852:	00d5      	lsls	r5, r2, #3
 8002854:	4237      	tst	r7, r6
 8002856:	d00a      	beq.n	800286e <__aeabi_d2f+0x32>
 8002858:	4839      	ldr	r0, [pc, #228]	; (8002940 <__aeabi_d2f+0x104>)
 800285a:	181e      	adds	r6, r3, r0
 800285c:	2efe      	cmp	r6, #254	; 0xfe
 800285e:	dd16      	ble.n	800288e <__aeabi_d2f+0x52>
 8002860:	20ff      	movs	r0, #255	; 0xff
 8002862:	2400      	movs	r4, #0
 8002864:	05c0      	lsls	r0, r0, #23
 8002866:	4320      	orrs	r0, r4
 8002868:	07c9      	lsls	r1, r1, #31
 800286a:	4308      	orrs	r0, r1
 800286c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800286e:	2b00      	cmp	r3, #0
 8002870:	d106      	bne.n	8002880 <__aeabi_d2f+0x44>
 8002872:	432c      	orrs	r4, r5
 8002874:	d026      	beq.n	80028c4 <__aeabi_d2f+0x88>
 8002876:	2205      	movs	r2, #5
 8002878:	0192      	lsls	r2, r2, #6
 800287a:	0a54      	lsrs	r4, r2, #9
 800287c:	b2d8      	uxtb	r0, r3
 800287e:	e7f1      	b.n	8002864 <__aeabi_d2f+0x28>
 8002880:	4325      	orrs	r5, r4
 8002882:	d0ed      	beq.n	8002860 <__aeabi_d2f+0x24>
 8002884:	2080      	movs	r0, #128	; 0x80
 8002886:	03c0      	lsls	r0, r0, #15
 8002888:	4304      	orrs	r4, r0
 800288a:	20ff      	movs	r0, #255	; 0xff
 800288c:	e7ea      	b.n	8002864 <__aeabi_d2f+0x28>
 800288e:	2e00      	cmp	r6, #0
 8002890:	dd1b      	ble.n	80028ca <__aeabi_d2f+0x8e>
 8002892:	0192      	lsls	r2, r2, #6
 8002894:	1e53      	subs	r3, r2, #1
 8002896:	419a      	sbcs	r2, r3
 8002898:	00e4      	lsls	r4, r4, #3
 800289a:	0f6d      	lsrs	r5, r5, #29
 800289c:	4322      	orrs	r2, r4
 800289e:	432a      	orrs	r2, r5
 80028a0:	0753      	lsls	r3, r2, #29
 80028a2:	d048      	beq.n	8002936 <__aeabi_d2f+0xfa>
 80028a4:	230f      	movs	r3, #15
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d000      	beq.n	80028ae <__aeabi_d2f+0x72>
 80028ac:	3204      	adds	r2, #4
 80028ae:	2380      	movs	r3, #128	; 0x80
 80028b0:	04db      	lsls	r3, r3, #19
 80028b2:	4013      	ands	r3, r2
 80028b4:	d03f      	beq.n	8002936 <__aeabi_d2f+0xfa>
 80028b6:	1c70      	adds	r0, r6, #1
 80028b8:	2efe      	cmp	r6, #254	; 0xfe
 80028ba:	d0d1      	beq.n	8002860 <__aeabi_d2f+0x24>
 80028bc:	0192      	lsls	r2, r2, #6
 80028be:	0a54      	lsrs	r4, r2, #9
 80028c0:	b2c0      	uxtb	r0, r0
 80028c2:	e7cf      	b.n	8002864 <__aeabi_d2f+0x28>
 80028c4:	2000      	movs	r0, #0
 80028c6:	2400      	movs	r4, #0
 80028c8:	e7cc      	b.n	8002864 <__aeabi_d2f+0x28>
 80028ca:	0032      	movs	r2, r6
 80028cc:	3217      	adds	r2, #23
 80028ce:	db22      	blt.n	8002916 <__aeabi_d2f+0xda>
 80028d0:	2080      	movs	r0, #128	; 0x80
 80028d2:	0400      	lsls	r0, r0, #16
 80028d4:	4320      	orrs	r0, r4
 80028d6:	241e      	movs	r4, #30
 80028d8:	1ba4      	subs	r4, r4, r6
 80028da:	2c1f      	cmp	r4, #31
 80028dc:	dd1d      	ble.n	800291a <__aeabi_d2f+0xde>
 80028de:	2202      	movs	r2, #2
 80028e0:	4252      	negs	r2, r2
 80028e2:	1b96      	subs	r6, r2, r6
 80028e4:	0002      	movs	r2, r0
 80028e6:	40f2      	lsrs	r2, r6
 80028e8:	0016      	movs	r6, r2
 80028ea:	2c20      	cmp	r4, #32
 80028ec:	d004      	beq.n	80028f8 <__aeabi_d2f+0xbc>
 80028ee:	4a15      	ldr	r2, [pc, #84]	; (8002944 <__aeabi_d2f+0x108>)
 80028f0:	4694      	mov	ip, r2
 80028f2:	4463      	add	r3, ip
 80028f4:	4098      	lsls	r0, r3
 80028f6:	4305      	orrs	r5, r0
 80028f8:	002a      	movs	r2, r5
 80028fa:	1e53      	subs	r3, r2, #1
 80028fc:	419a      	sbcs	r2, r3
 80028fe:	4332      	orrs	r2, r6
 8002900:	2600      	movs	r6, #0
 8002902:	0753      	lsls	r3, r2, #29
 8002904:	d1ce      	bne.n	80028a4 <__aeabi_d2f+0x68>
 8002906:	2480      	movs	r4, #128	; 0x80
 8002908:	0013      	movs	r3, r2
 800290a:	04e4      	lsls	r4, r4, #19
 800290c:	2001      	movs	r0, #1
 800290e:	4023      	ands	r3, r4
 8002910:	4222      	tst	r2, r4
 8002912:	d1d3      	bne.n	80028bc <__aeabi_d2f+0x80>
 8002914:	e7b0      	b.n	8002878 <__aeabi_d2f+0x3c>
 8002916:	2300      	movs	r3, #0
 8002918:	e7ad      	b.n	8002876 <__aeabi_d2f+0x3a>
 800291a:	4a0b      	ldr	r2, [pc, #44]	; (8002948 <__aeabi_d2f+0x10c>)
 800291c:	4694      	mov	ip, r2
 800291e:	002a      	movs	r2, r5
 8002920:	40e2      	lsrs	r2, r4
 8002922:	0014      	movs	r4, r2
 8002924:	002a      	movs	r2, r5
 8002926:	4463      	add	r3, ip
 8002928:	409a      	lsls	r2, r3
 800292a:	4098      	lsls	r0, r3
 800292c:	1e55      	subs	r5, r2, #1
 800292e:	41aa      	sbcs	r2, r5
 8002930:	4302      	orrs	r2, r0
 8002932:	4322      	orrs	r2, r4
 8002934:	e7e4      	b.n	8002900 <__aeabi_d2f+0xc4>
 8002936:	0033      	movs	r3, r6
 8002938:	e79e      	b.n	8002878 <__aeabi_d2f+0x3c>
 800293a:	46c0      	nop			; (mov r8, r8)
 800293c:	000007fe 	.word	0x000007fe
 8002940:	fffffc80 	.word	0xfffffc80
 8002944:	fffffca2 	.word	0xfffffca2
 8002948:	fffffc82 	.word	0xfffffc82

0800294c <__aeabi_cfrcmple>:
 800294c:	4684      	mov	ip, r0
 800294e:	0008      	movs	r0, r1
 8002950:	4661      	mov	r1, ip
 8002952:	e7ff      	b.n	8002954 <__aeabi_cfcmpeq>

08002954 <__aeabi_cfcmpeq>:
 8002954:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002956:	f000 f8c9 	bl	8002aec <__lesf2>
 800295a:	2800      	cmp	r0, #0
 800295c:	d401      	bmi.n	8002962 <__aeabi_cfcmpeq+0xe>
 800295e:	2100      	movs	r1, #0
 8002960:	42c8      	cmn	r0, r1
 8002962:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002964 <__aeabi_fcmpeq>:
 8002964:	b510      	push	{r4, lr}
 8002966:	f000 f855 	bl	8002a14 <__eqsf2>
 800296a:	4240      	negs	r0, r0
 800296c:	3001      	adds	r0, #1
 800296e:	bd10      	pop	{r4, pc}

08002970 <__aeabi_fcmplt>:
 8002970:	b510      	push	{r4, lr}
 8002972:	f000 f8bb 	bl	8002aec <__lesf2>
 8002976:	2800      	cmp	r0, #0
 8002978:	db01      	blt.n	800297e <__aeabi_fcmplt+0xe>
 800297a:	2000      	movs	r0, #0
 800297c:	bd10      	pop	{r4, pc}
 800297e:	2001      	movs	r0, #1
 8002980:	bd10      	pop	{r4, pc}
 8002982:	46c0      	nop			; (mov r8, r8)

08002984 <__aeabi_fcmple>:
 8002984:	b510      	push	{r4, lr}
 8002986:	f000 f8b1 	bl	8002aec <__lesf2>
 800298a:	2800      	cmp	r0, #0
 800298c:	dd01      	ble.n	8002992 <__aeabi_fcmple+0xe>
 800298e:	2000      	movs	r0, #0
 8002990:	bd10      	pop	{r4, pc}
 8002992:	2001      	movs	r0, #1
 8002994:	bd10      	pop	{r4, pc}
 8002996:	46c0      	nop			; (mov r8, r8)

08002998 <__aeabi_fcmpgt>:
 8002998:	b510      	push	{r4, lr}
 800299a:	f000 f861 	bl	8002a60 <__gesf2>
 800299e:	2800      	cmp	r0, #0
 80029a0:	dc01      	bgt.n	80029a6 <__aeabi_fcmpgt+0xe>
 80029a2:	2000      	movs	r0, #0
 80029a4:	bd10      	pop	{r4, pc}
 80029a6:	2001      	movs	r0, #1
 80029a8:	bd10      	pop	{r4, pc}
 80029aa:	46c0      	nop			; (mov r8, r8)

080029ac <__aeabi_fcmpge>:
 80029ac:	b510      	push	{r4, lr}
 80029ae:	f000 f857 	bl	8002a60 <__gesf2>
 80029b2:	2800      	cmp	r0, #0
 80029b4:	da01      	bge.n	80029ba <__aeabi_fcmpge+0xe>
 80029b6:	2000      	movs	r0, #0
 80029b8:	bd10      	pop	{r4, pc}
 80029ba:	2001      	movs	r0, #1
 80029bc:	bd10      	pop	{r4, pc}
 80029be:	46c0      	nop			; (mov r8, r8)

080029c0 <__clzsi2>:
 80029c0:	211c      	movs	r1, #28
 80029c2:	2301      	movs	r3, #1
 80029c4:	041b      	lsls	r3, r3, #16
 80029c6:	4298      	cmp	r0, r3
 80029c8:	d301      	bcc.n	80029ce <__clzsi2+0xe>
 80029ca:	0c00      	lsrs	r0, r0, #16
 80029cc:	3910      	subs	r1, #16
 80029ce:	0a1b      	lsrs	r3, r3, #8
 80029d0:	4298      	cmp	r0, r3
 80029d2:	d301      	bcc.n	80029d8 <__clzsi2+0x18>
 80029d4:	0a00      	lsrs	r0, r0, #8
 80029d6:	3908      	subs	r1, #8
 80029d8:	091b      	lsrs	r3, r3, #4
 80029da:	4298      	cmp	r0, r3
 80029dc:	d301      	bcc.n	80029e2 <__clzsi2+0x22>
 80029de:	0900      	lsrs	r0, r0, #4
 80029e0:	3904      	subs	r1, #4
 80029e2:	a202      	add	r2, pc, #8	; (adr r2, 80029ec <__clzsi2+0x2c>)
 80029e4:	5c10      	ldrb	r0, [r2, r0]
 80029e6:	1840      	adds	r0, r0, r1
 80029e8:	4770      	bx	lr
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	02020304 	.word	0x02020304
 80029f0:	01010101 	.word	0x01010101
	...

080029fc <__clzdi2>:
 80029fc:	b510      	push	{r4, lr}
 80029fe:	2900      	cmp	r1, #0
 8002a00:	d103      	bne.n	8002a0a <__clzdi2+0xe>
 8002a02:	f7ff ffdd 	bl	80029c0 <__clzsi2>
 8002a06:	3020      	adds	r0, #32
 8002a08:	e002      	b.n	8002a10 <__clzdi2+0x14>
 8002a0a:	0008      	movs	r0, r1
 8002a0c:	f7ff ffd8 	bl	80029c0 <__clzsi2>
 8002a10:	bd10      	pop	{r4, pc}
 8002a12:	46c0      	nop			; (mov r8, r8)

08002a14 <__eqsf2>:
 8002a14:	b570      	push	{r4, r5, r6, lr}
 8002a16:	0042      	lsls	r2, r0, #1
 8002a18:	0245      	lsls	r5, r0, #9
 8002a1a:	024e      	lsls	r6, r1, #9
 8002a1c:	004c      	lsls	r4, r1, #1
 8002a1e:	0fc3      	lsrs	r3, r0, #31
 8002a20:	0a6d      	lsrs	r5, r5, #9
 8002a22:	2001      	movs	r0, #1
 8002a24:	0e12      	lsrs	r2, r2, #24
 8002a26:	0a76      	lsrs	r6, r6, #9
 8002a28:	0e24      	lsrs	r4, r4, #24
 8002a2a:	0fc9      	lsrs	r1, r1, #31
 8002a2c:	2aff      	cmp	r2, #255	; 0xff
 8002a2e:	d006      	beq.n	8002a3e <__eqsf2+0x2a>
 8002a30:	2cff      	cmp	r4, #255	; 0xff
 8002a32:	d003      	beq.n	8002a3c <__eqsf2+0x28>
 8002a34:	42a2      	cmp	r2, r4
 8002a36:	d101      	bne.n	8002a3c <__eqsf2+0x28>
 8002a38:	42b5      	cmp	r5, r6
 8002a3a:	d006      	beq.n	8002a4a <__eqsf2+0x36>
 8002a3c:	bd70      	pop	{r4, r5, r6, pc}
 8002a3e:	2d00      	cmp	r5, #0
 8002a40:	d1fc      	bne.n	8002a3c <__eqsf2+0x28>
 8002a42:	2cff      	cmp	r4, #255	; 0xff
 8002a44:	d1fa      	bne.n	8002a3c <__eqsf2+0x28>
 8002a46:	2e00      	cmp	r6, #0
 8002a48:	d1f8      	bne.n	8002a3c <__eqsf2+0x28>
 8002a4a:	428b      	cmp	r3, r1
 8002a4c:	d006      	beq.n	8002a5c <__eqsf2+0x48>
 8002a4e:	2001      	movs	r0, #1
 8002a50:	2a00      	cmp	r2, #0
 8002a52:	d1f3      	bne.n	8002a3c <__eqsf2+0x28>
 8002a54:	0028      	movs	r0, r5
 8002a56:	1e43      	subs	r3, r0, #1
 8002a58:	4198      	sbcs	r0, r3
 8002a5a:	e7ef      	b.n	8002a3c <__eqsf2+0x28>
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	e7ed      	b.n	8002a3c <__eqsf2+0x28>

08002a60 <__gesf2>:
 8002a60:	b570      	push	{r4, r5, r6, lr}
 8002a62:	0042      	lsls	r2, r0, #1
 8002a64:	0245      	lsls	r5, r0, #9
 8002a66:	024e      	lsls	r6, r1, #9
 8002a68:	004c      	lsls	r4, r1, #1
 8002a6a:	0fc3      	lsrs	r3, r0, #31
 8002a6c:	0a6d      	lsrs	r5, r5, #9
 8002a6e:	0e12      	lsrs	r2, r2, #24
 8002a70:	0a76      	lsrs	r6, r6, #9
 8002a72:	0e24      	lsrs	r4, r4, #24
 8002a74:	0fc8      	lsrs	r0, r1, #31
 8002a76:	2aff      	cmp	r2, #255	; 0xff
 8002a78:	d01b      	beq.n	8002ab2 <__gesf2+0x52>
 8002a7a:	2cff      	cmp	r4, #255	; 0xff
 8002a7c:	d00e      	beq.n	8002a9c <__gesf2+0x3c>
 8002a7e:	2a00      	cmp	r2, #0
 8002a80:	d11b      	bne.n	8002aba <__gesf2+0x5a>
 8002a82:	2c00      	cmp	r4, #0
 8002a84:	d101      	bne.n	8002a8a <__gesf2+0x2a>
 8002a86:	2e00      	cmp	r6, #0
 8002a88:	d01c      	beq.n	8002ac4 <__gesf2+0x64>
 8002a8a:	2d00      	cmp	r5, #0
 8002a8c:	d00c      	beq.n	8002aa8 <__gesf2+0x48>
 8002a8e:	4283      	cmp	r3, r0
 8002a90:	d01c      	beq.n	8002acc <__gesf2+0x6c>
 8002a92:	2102      	movs	r1, #2
 8002a94:	1e58      	subs	r0, r3, #1
 8002a96:	4008      	ands	r0, r1
 8002a98:	3801      	subs	r0, #1
 8002a9a:	bd70      	pop	{r4, r5, r6, pc}
 8002a9c:	2e00      	cmp	r6, #0
 8002a9e:	d122      	bne.n	8002ae6 <__gesf2+0x86>
 8002aa0:	2a00      	cmp	r2, #0
 8002aa2:	d1f4      	bne.n	8002a8e <__gesf2+0x2e>
 8002aa4:	2d00      	cmp	r5, #0
 8002aa6:	d1f2      	bne.n	8002a8e <__gesf2+0x2e>
 8002aa8:	2800      	cmp	r0, #0
 8002aaa:	d1f6      	bne.n	8002a9a <__gesf2+0x3a>
 8002aac:	2001      	movs	r0, #1
 8002aae:	4240      	negs	r0, r0
 8002ab0:	e7f3      	b.n	8002a9a <__gesf2+0x3a>
 8002ab2:	2d00      	cmp	r5, #0
 8002ab4:	d117      	bne.n	8002ae6 <__gesf2+0x86>
 8002ab6:	2cff      	cmp	r4, #255	; 0xff
 8002ab8:	d0f0      	beq.n	8002a9c <__gesf2+0x3c>
 8002aba:	2c00      	cmp	r4, #0
 8002abc:	d1e7      	bne.n	8002a8e <__gesf2+0x2e>
 8002abe:	2e00      	cmp	r6, #0
 8002ac0:	d1e5      	bne.n	8002a8e <__gesf2+0x2e>
 8002ac2:	e7e6      	b.n	8002a92 <__gesf2+0x32>
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	2d00      	cmp	r5, #0
 8002ac8:	d0e7      	beq.n	8002a9a <__gesf2+0x3a>
 8002aca:	e7e2      	b.n	8002a92 <__gesf2+0x32>
 8002acc:	42a2      	cmp	r2, r4
 8002ace:	dc05      	bgt.n	8002adc <__gesf2+0x7c>
 8002ad0:	dbea      	blt.n	8002aa8 <__gesf2+0x48>
 8002ad2:	42b5      	cmp	r5, r6
 8002ad4:	d802      	bhi.n	8002adc <__gesf2+0x7c>
 8002ad6:	d3e7      	bcc.n	8002aa8 <__gesf2+0x48>
 8002ad8:	2000      	movs	r0, #0
 8002ada:	e7de      	b.n	8002a9a <__gesf2+0x3a>
 8002adc:	4243      	negs	r3, r0
 8002ade:	4158      	adcs	r0, r3
 8002ae0:	0040      	lsls	r0, r0, #1
 8002ae2:	3801      	subs	r0, #1
 8002ae4:	e7d9      	b.n	8002a9a <__gesf2+0x3a>
 8002ae6:	2002      	movs	r0, #2
 8002ae8:	4240      	negs	r0, r0
 8002aea:	e7d6      	b.n	8002a9a <__gesf2+0x3a>

08002aec <__lesf2>:
 8002aec:	b570      	push	{r4, r5, r6, lr}
 8002aee:	0042      	lsls	r2, r0, #1
 8002af0:	0245      	lsls	r5, r0, #9
 8002af2:	024e      	lsls	r6, r1, #9
 8002af4:	004c      	lsls	r4, r1, #1
 8002af6:	0fc3      	lsrs	r3, r0, #31
 8002af8:	0a6d      	lsrs	r5, r5, #9
 8002afa:	0e12      	lsrs	r2, r2, #24
 8002afc:	0a76      	lsrs	r6, r6, #9
 8002afe:	0e24      	lsrs	r4, r4, #24
 8002b00:	0fc8      	lsrs	r0, r1, #31
 8002b02:	2aff      	cmp	r2, #255	; 0xff
 8002b04:	d00b      	beq.n	8002b1e <__lesf2+0x32>
 8002b06:	2cff      	cmp	r4, #255	; 0xff
 8002b08:	d00d      	beq.n	8002b26 <__lesf2+0x3a>
 8002b0a:	2a00      	cmp	r2, #0
 8002b0c:	d11f      	bne.n	8002b4e <__lesf2+0x62>
 8002b0e:	2c00      	cmp	r4, #0
 8002b10:	d116      	bne.n	8002b40 <__lesf2+0x54>
 8002b12:	2e00      	cmp	r6, #0
 8002b14:	d114      	bne.n	8002b40 <__lesf2+0x54>
 8002b16:	2000      	movs	r0, #0
 8002b18:	2d00      	cmp	r5, #0
 8002b1a:	d010      	beq.n	8002b3e <__lesf2+0x52>
 8002b1c:	e009      	b.n	8002b32 <__lesf2+0x46>
 8002b1e:	2d00      	cmp	r5, #0
 8002b20:	d10c      	bne.n	8002b3c <__lesf2+0x50>
 8002b22:	2cff      	cmp	r4, #255	; 0xff
 8002b24:	d113      	bne.n	8002b4e <__lesf2+0x62>
 8002b26:	2e00      	cmp	r6, #0
 8002b28:	d108      	bne.n	8002b3c <__lesf2+0x50>
 8002b2a:	2a00      	cmp	r2, #0
 8002b2c:	d008      	beq.n	8002b40 <__lesf2+0x54>
 8002b2e:	4283      	cmp	r3, r0
 8002b30:	d012      	beq.n	8002b58 <__lesf2+0x6c>
 8002b32:	2102      	movs	r1, #2
 8002b34:	1e58      	subs	r0, r3, #1
 8002b36:	4008      	ands	r0, r1
 8002b38:	3801      	subs	r0, #1
 8002b3a:	e000      	b.n	8002b3e <__lesf2+0x52>
 8002b3c:	2002      	movs	r0, #2
 8002b3e:	bd70      	pop	{r4, r5, r6, pc}
 8002b40:	2d00      	cmp	r5, #0
 8002b42:	d1f4      	bne.n	8002b2e <__lesf2+0x42>
 8002b44:	2800      	cmp	r0, #0
 8002b46:	d1fa      	bne.n	8002b3e <__lesf2+0x52>
 8002b48:	2001      	movs	r0, #1
 8002b4a:	4240      	negs	r0, r0
 8002b4c:	e7f7      	b.n	8002b3e <__lesf2+0x52>
 8002b4e:	2c00      	cmp	r4, #0
 8002b50:	d1ed      	bne.n	8002b2e <__lesf2+0x42>
 8002b52:	2e00      	cmp	r6, #0
 8002b54:	d1eb      	bne.n	8002b2e <__lesf2+0x42>
 8002b56:	e7ec      	b.n	8002b32 <__lesf2+0x46>
 8002b58:	42a2      	cmp	r2, r4
 8002b5a:	dc05      	bgt.n	8002b68 <__lesf2+0x7c>
 8002b5c:	dbf2      	blt.n	8002b44 <__lesf2+0x58>
 8002b5e:	42b5      	cmp	r5, r6
 8002b60:	d802      	bhi.n	8002b68 <__lesf2+0x7c>
 8002b62:	d3ef      	bcc.n	8002b44 <__lesf2+0x58>
 8002b64:	2000      	movs	r0, #0
 8002b66:	e7ea      	b.n	8002b3e <__lesf2+0x52>
 8002b68:	4243      	negs	r3, r0
 8002b6a:	4158      	adcs	r0, r3
 8002b6c:	0040      	lsls	r0, r0, #1
 8002b6e:	3801      	subs	r0, #1
 8002b70:	e7e5      	b.n	8002b3e <__lesf2+0x52>
 8002b72:	46c0      	nop			; (mov r8, r8)

08002b74 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b76:	46de      	mov	lr, fp
 8002b78:	4657      	mov	r7, sl
 8002b7a:	464e      	mov	r6, r9
 8002b7c:	4645      	mov	r5, r8
 8002b7e:	b5e0      	push	{r5, r6, r7, lr}
 8002b80:	b0a5      	sub	sp, #148	; 0x94
 8002b82:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002b84:	f000 fc5a 	bl	800343c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002b88:	f000 f87c 	bl	8002c84 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002b8c:	f000 f960 	bl	8002e50 <MX_GPIO_Init>
	MX_I2C1_Init();
 8002b90:	f000 f8ee 	bl	8002d70 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8002b94:	f000 f92c 	bl	8002df0 <MX_USART1_UART_Init>
//	}
//	HAL_UART_Transmit(&huart1, EndMSG, sizeof(EndMSG), 10000);
//	/*--[ Scanning Done ]--*/

	/* Initializes SHT2x temperature/humidity sensor and sets the resolution. */
		SHT2x_Init(&hi2c1);
 8002b98:	4b37      	ldr	r3, [pc, #220]	; (8002c78 <main+0x104>)
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f000 fab2 	bl	8003104 <SHT2x_Init>
		SHT2x_SetResolution(RES_14_12);
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	f000 fb93 	bl	80032cc <SHT2x_SetResolution>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		unsigned char buffer[100] = { 0 };
 8002ba6:	1d3b      	adds	r3, r7, #4
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	3304      	adds	r3, #4
 8002bae:	2260      	movs	r2, #96	; 0x60
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f003 fa36 	bl	8006024 <memset>
				/* Gets current temperature & relative humidity. */
				float cel = SHT2x_GetTemperature(1);
 8002bb8:	2001      	movs	r0, #1
 8002bba:	f000 fb07 	bl	80031cc <SHT2x_GetTemperature>
 8002bbe:	1c03      	adds	r3, r0, #0
 8002bc0:	677b      	str	r3, [r7, #116]	; 0x74
				/* Converts temperature to degrees Fahrenheit and Kelvin */
				float fah = SHT2x_CelsiusToFahrenheit(cel);
 8002bc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bc4:	1c18      	adds	r0, r3, #0
 8002bc6:	f000 fbb3 	bl	8003330 <SHT2x_CelsiusToFahrenheit>
 8002bca:	1c03      	adds	r3, r0, #0
 8002bcc:	673b      	str	r3, [r7, #112]	; 0x70
				float kel = SHT2x_CelsiusToKelvin(cel);
 8002bce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bd0:	1c18      	adds	r0, r3, #0
 8002bd2:	f000 fbd1 	bl	8003378 <SHT2x_CelsiusToKelvin>
 8002bd6:	1c03      	adds	r3, r0, #0
 8002bd8:	66fb      	str	r3, [r7, #108]	; 0x6c
				float rh = SHT2x_GetRelativeHumidity(1);
 8002bda:	2001      	movs	r0, #1
 8002bdc:	f000 fb38 	bl	8003250 <SHT2x_GetRelativeHumidity>
 8002be0:	1c03      	adds	r3, r0, #0
 8002be2:	66bb      	str	r3, [r7, #104]	; 0x68
				/* May show warning below. Ignore and proceed. */
				sprintf(buffer,
 8002be4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002be6:	1c18      	adds	r0, r3, #0
 8002be8:	f000 fbd6 	bl	8003398 <SHT2x_GetInteger>
 8002bec:	4682      	mov	sl, r0
 8002bee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	1c18      	adds	r0, r3, #0
 8002bf4:	f000 fbdc 	bl	80033b0 <SHT2x_GetDecimal>
 8002bf8:	4683      	mov	fp, r0
 8002bfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bfc:	1c18      	adds	r0, r3, #0
 8002bfe:	f000 fbcb 	bl	8003398 <SHT2x_GetInteger>
 8002c02:	0004      	movs	r4, r0
 8002c04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c06:	2101      	movs	r1, #1
 8002c08:	1c18      	adds	r0, r3, #0
 8002c0a:	f000 fbd1 	bl	80033b0 <SHT2x_GetDecimal>
 8002c0e:	0005      	movs	r5, r0
 8002c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c12:	1c18      	adds	r0, r3, #0
 8002c14:	f000 fbc0 	bl	8003398 <SHT2x_GetInteger>
 8002c18:	0006      	movs	r6, r0
 8002c1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	1c18      	adds	r0, r3, #0
 8002c20:	f000 fbc6 	bl	80033b0 <SHT2x_GetDecimal>
 8002c24:	4680      	mov	r8, r0
 8002c26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c28:	1c18      	adds	r0, r3, #0
 8002c2a:	f000 fbb5 	bl	8003398 <SHT2x_GetInteger>
 8002c2e:	4681      	mov	r9, r0
 8002c30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c32:	2101      	movs	r1, #1
 8002c34:	1c18      	adds	r0, r3, #0
 8002c36:	f000 fbbb 	bl	80033b0 <SHT2x_GetDecimal>
 8002c3a:	0003      	movs	r3, r0
 8002c3c:	490f      	ldr	r1, [pc, #60]	; (8002c7c <main+0x108>)
 8002c3e:	1d38      	adds	r0, r7, #4
 8002c40:	9305      	str	r3, [sp, #20]
 8002c42:	464b      	mov	r3, r9
 8002c44:	9304      	str	r3, [sp, #16]
 8002c46:	4643      	mov	r3, r8
 8002c48:	9303      	str	r3, [sp, #12]
 8002c4a:	9602      	str	r6, [sp, #8]
 8002c4c:	9501      	str	r5, [sp, #4]
 8002c4e:	9400      	str	r4, [sp, #0]
 8002c50:	465b      	mov	r3, fp
 8002c52:	4652      	mov	r2, sl
 8002c54:	f003 f9ee 	bl	8006034 <siprintf>
						"%d.%dºC, %d.%dºF, %d.%d K, %d.%d%% RH\n",
						SHT2x_GetInteger(cel), SHT2x_GetDecimal(cel, 1),
						SHT2x_GetInteger(fah), SHT2x_GetDecimal(fah, 1),
						SHT2x_GetInteger(kel), SHT2x_GetDecimal(kel, 1),
						SHT2x_GetInteger(rh), SHT2x_GetDecimal(rh, 1));
				HAL_UART_Transmit(&huart1, buffer, strlen(buffer), 1000);
 8002c58:	1d3b      	adds	r3, r7, #4
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f7fd fa54 	bl	8000108 <strlen>
 8002c60:	0003      	movs	r3, r0
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	23fa      	movs	r3, #250	; 0xfa
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	1d39      	adds	r1, r7, #4
 8002c6a:	4805      	ldr	r0, [pc, #20]	; (8002c80 <main+0x10c>)
 8002c6c:	f002 fc62 	bl	8005534 <HAL_UART_Transmit>
				HAL_Delay(250);
 8002c70:	20fa      	movs	r0, #250	; 0xfa
 8002c72:	f000 fc53 	bl	800351c <HAL_Delay>
	while (1) {
 8002c76:	e796      	b.n	8002ba6 <main+0x32>
 8002c78:	2000008c 	.word	0x2000008c
 8002c7c:	08006920 	.word	0x08006920
 8002c80:	200000e0 	.word	0x200000e0

08002c84 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002c84:	b590      	push	{r4, r7, lr}
 8002c86:	b09d      	sub	sp, #116	; 0x74
 8002c88:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002c8a:	2438      	movs	r4, #56	; 0x38
 8002c8c:	193b      	adds	r3, r7, r4
 8002c8e:	0018      	movs	r0, r3
 8002c90:	2338      	movs	r3, #56	; 0x38
 8002c92:	001a      	movs	r2, r3
 8002c94:	2100      	movs	r1, #0
 8002c96:	f003 f9c5 	bl	8006024 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002c9a:	2324      	movs	r3, #36	; 0x24
 8002c9c:	18fb      	adds	r3, r7, r3
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	2314      	movs	r3, #20
 8002ca2:	001a      	movs	r2, r3
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	f003 f9bd 	bl	8006024 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8002caa:	003b      	movs	r3, r7
 8002cac:	0018      	movs	r0, r3
 8002cae:	2324      	movs	r3, #36	; 0x24
 8002cb0:	001a      	movs	r2, r3
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	f003 f9b6 	bl	8006024 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cb8:	4b2b      	ldr	r3, [pc, #172]	; (8002d68 <SystemClock_Config+0xe4>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a2b      	ldr	r2, [pc, #172]	; (8002d6c <SystemClock_Config+0xe8>)
 8002cbe:	401a      	ands	r2, r3
 8002cc0:	4b29      	ldr	r3, [pc, #164]	; (8002d68 <SystemClock_Config+0xe4>)
 8002cc2:	2180      	movs	r1, #128	; 0x80
 8002cc4:	0109      	lsls	r1, r1, #4
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002cca:	0021      	movs	r1, r4
 8002ccc:	187b      	adds	r3, r7, r1
 8002cce:	2202      	movs	r2, #2
 8002cd0:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cd2:	187b      	adds	r3, r7, r1
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cd8:	187b      	adds	r3, r7, r1
 8002cda:	2210      	movs	r2, #16
 8002cdc:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cde:	187b      	adds	r3, r7, r1
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ce4:	187b      	adds	r3, r7, r1
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8002cea:	187b      	adds	r3, r7, r1
 8002cec:	2280      	movs	r2, #128	; 0x80
 8002cee:	02d2      	lsls	r2, r2, #11
 8002cf0:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002cf2:	187b      	adds	r3, r7, r1
 8002cf4:	2280      	movs	r2, #128	; 0x80
 8002cf6:	03d2      	lsls	r2, r2, #15
 8002cf8:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002cfa:	187b      	adds	r3, r7, r1
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	f001 fc4f 	bl	80045a0 <HAL_RCC_OscConfig>
 8002d02:	1e03      	subs	r3, r0, #0
 8002d04:	d001      	beq.n	8002d0a <SystemClock_Config+0x86>
		Error_Handler();
 8002d06:	f000 f8dd 	bl	8002ec4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002d0a:	2124      	movs	r1, #36	; 0x24
 8002d0c:	187b      	adds	r3, r7, r1
 8002d0e:	220f      	movs	r2, #15
 8002d10:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d12:	187b      	adds	r3, r7, r1
 8002d14:	2203      	movs	r2, #3
 8002d16:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d18:	187b      	adds	r3, r7, r1
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d1e:	187b      	adds	r3, r7, r1
 8002d20:	2200      	movs	r2, #0
 8002d22:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d24:	187b      	adds	r3, r7, r1
 8002d26:	2200      	movs	r2, #0
 8002d28:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8002d2a:	187b      	adds	r3, r7, r1
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f001 fffa 	bl	8004d28 <HAL_RCC_ClockConfig>
 8002d34:	1e03      	subs	r3, r0, #0
 8002d36:	d001      	beq.n	8002d3c <SystemClock_Config+0xb8>
		Error_Handler();
 8002d38:	f000 f8c4 	bl	8002ec4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8002d3c:	003b      	movs	r3, r7
 8002d3e:	2209      	movs	r2, #9
 8002d40:	601a      	str	r2, [r3, #0]
			| RCC_PERIPHCLK_I2C1;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002d42:	003b      	movs	r3, r7
 8002d44:	2200      	movs	r2, #0
 8002d46:	60da      	str	r2, [r3, #12]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002d48:	003b      	movs	r3, r7
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	619a      	str	r2, [r3, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002d4e:	003b      	movs	r3, r7
 8002d50:	0018      	movs	r0, r3
 8002d52:	f002 fa0d 	bl	8005170 <HAL_RCCEx_PeriphCLKConfig>
 8002d56:	1e03      	subs	r3, r0, #0
 8002d58:	d001      	beq.n	8002d5e <SystemClock_Config+0xda>
		Error_Handler();
 8002d5a:	f000 f8b3 	bl	8002ec4 <Error_Handler>
	}
}
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	46bd      	mov	sp, r7
 8002d62:	b01d      	add	sp, #116	; 0x74
 8002d64:	bd90      	pop	{r4, r7, pc}
 8002d66:	46c0      	nop			; (mov r8, r8)
 8002d68:	40007000 	.word	0x40007000
 8002d6c:	ffffe7ff 	.word	0xffffe7ff

08002d70 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002d74:	4b1b      	ldr	r3, [pc, #108]	; (8002de4 <MX_I2C1_Init+0x74>)
 8002d76:	4a1c      	ldr	r2, [pc, #112]	; (8002de8 <MX_I2C1_Init+0x78>)
 8002d78:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00707CBB;
 8002d7a:	4b1a      	ldr	r3, [pc, #104]	; (8002de4 <MX_I2C1_Init+0x74>)
 8002d7c:	4a1b      	ldr	r2, [pc, #108]	; (8002dec <MX_I2C1_Init+0x7c>)
 8002d7e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8002d80:	4b18      	ldr	r3, [pc, #96]	; (8002de4 <MX_I2C1_Init+0x74>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d86:	4b17      	ldr	r3, [pc, #92]	; (8002de4 <MX_I2C1_Init+0x74>)
 8002d88:	2201      	movs	r2, #1
 8002d8a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d8c:	4b15      	ldr	r3, [pc, #84]	; (8002de4 <MX_I2C1_Init+0x74>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8002d92:	4b14      	ldr	r3, [pc, #80]	; (8002de4 <MX_I2C1_Init+0x74>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002d98:	4b12      	ldr	r3, [pc, #72]	; (8002de4 <MX_I2C1_Init+0x74>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d9e:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <MX_I2C1_Init+0x74>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002da4:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <MX_I2C1_Init+0x74>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002daa:	4b0e      	ldr	r3, [pc, #56]	; (8002de4 <MX_I2C1_Init+0x74>)
 8002dac:	0018      	movs	r0, r3
 8002dae:	f000 fe03 	bl	80039b8 <HAL_I2C_Init>
 8002db2:	1e03      	subs	r3, r0, #0
 8002db4:	d001      	beq.n	8002dba <MX_I2C1_Init+0x4a>
		Error_Handler();
 8002db6:	f000 f885 	bl	8002ec4 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8002dba:	4b0a      	ldr	r3, [pc, #40]	; (8002de4 <MX_I2C1_Init+0x74>)
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f001 fb56 	bl	8004470 <HAL_I2CEx_ConfigAnalogFilter>
 8002dc4:	1e03      	subs	r3, r0, #0
 8002dc6:	d001      	beq.n	8002dcc <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8002dc8:	f000 f87c 	bl	8002ec4 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8002dcc:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <MX_I2C1_Init+0x74>)
 8002dce:	2100      	movs	r1, #0
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f001 fb99 	bl	8004508 <HAL_I2CEx_ConfigDigitalFilter>
 8002dd6:	1e03      	subs	r3, r0, #0
 8002dd8:	d001      	beq.n	8002dde <MX_I2C1_Init+0x6e>
		Error_Handler();
 8002dda:	f000 f873 	bl	8002ec4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	2000008c 	.word	0x2000008c
 8002de8:	40005400 	.word	0x40005400
 8002dec:	00707cbb 	.word	0x00707cbb

08002df0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002df4:	4b14      	ldr	r3, [pc, #80]	; (8002e48 <MX_USART1_UART_Init+0x58>)
 8002df6:	4a15      	ldr	r2, [pc, #84]	; (8002e4c <MX_USART1_UART_Init+0x5c>)
 8002df8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8002dfa:	4b13      	ldr	r3, [pc, #76]	; (8002e48 <MX_USART1_UART_Init+0x58>)
 8002dfc:	22e1      	movs	r2, #225	; 0xe1
 8002dfe:	0252      	lsls	r2, r2, #9
 8002e00:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e02:	4b11      	ldr	r3, [pc, #68]	; (8002e48 <MX_USART1_UART_Init+0x58>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002e08:	4b0f      	ldr	r3, [pc, #60]	; (8002e48 <MX_USART1_UART_Init+0x58>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002e0e:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <MX_USART1_UART_Init+0x58>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002e14:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <MX_USART1_UART_Init+0x58>)
 8002e16:	220c      	movs	r2, #12
 8002e18:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e1a:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <MX_USART1_UART_Init+0x58>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e20:	4b09      	ldr	r3, [pc, #36]	; (8002e48 <MX_USART1_UART_Init+0x58>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e26:	4b08      	ldr	r3, [pc, #32]	; (8002e48 <MX_USART1_UART_Init+0x58>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e2c:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <MX_USART1_UART_Init+0x58>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002e32:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <MX_USART1_UART_Init+0x58>)
 8002e34:	0018      	movs	r0, r3
 8002e36:	f002 fb29 	bl	800548c <HAL_UART_Init>
 8002e3a:	1e03      	subs	r3, r0, #0
 8002e3c:	d001      	beq.n	8002e42 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8002e3e:	f000 f841 	bl	8002ec4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	200000e0 	.word	0x200000e0
 8002e4c:	40013800 	.word	0x40013800

08002e50 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002e56:	4b1a      	ldr	r3, [pc, #104]	; (8002ec0 <MX_GPIO_Init+0x70>)
 8002e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e5a:	4b19      	ldr	r3, [pc, #100]	; (8002ec0 <MX_GPIO_Init+0x70>)
 8002e5c:	2104      	movs	r1, #4
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e62:	4b17      	ldr	r3, [pc, #92]	; (8002ec0 <MX_GPIO_Init+0x70>)
 8002e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e66:	2204      	movs	r2, #4
 8002e68:	4013      	ands	r3, r2
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002e6e:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <MX_GPIO_Init+0x70>)
 8002e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e72:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <MX_GPIO_Init+0x70>)
 8002e74:	2180      	movs	r1, #128	; 0x80
 8002e76:	430a      	orrs	r2, r1
 8002e78:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e7a:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <MX_GPIO_Init+0x70>)
 8002e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7e:	2280      	movs	r2, #128	; 0x80
 8002e80:	4013      	ands	r3, r2
 8002e82:	60bb      	str	r3, [r7, #8]
 8002e84:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002e86:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <MX_GPIO_Init+0x70>)
 8002e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <MX_GPIO_Init+0x70>)
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e92:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <MX_GPIO_Init+0x70>)
 8002e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e96:	2201      	movs	r2, #1
 8002e98:	4013      	ands	r3, r2
 8002e9a:	607b      	str	r3, [r7, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002e9e:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <MX_GPIO_Init+0x70>)
 8002ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea2:	4b07      	ldr	r3, [pc, #28]	; (8002ec0 <MX_GPIO_Init+0x70>)
 8002ea4:	2102      	movs	r1, #2
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002eaa:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <MX_GPIO_Init+0x70>)
 8002eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eae:	2202      	movs	r2, #2
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	683b      	ldr	r3, [r7, #0]

}
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	b004      	add	sp, #16
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	40021000 	.word	0x40021000

08002ec4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ec8:	b672      	cpsid	i
}
 8002eca:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002ecc:	e7fe      	b.n	8002ecc <Error_Handler+0x8>
	...

08002ed0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ed4:	4b07      	ldr	r3, [pc, #28]	; (8002ef4 <HAL_MspInit+0x24>)
 8002ed6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ed8:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <HAL_MspInit+0x24>)
 8002eda:	2101      	movs	r1, #1
 8002edc:	430a      	orrs	r2, r1
 8002ede:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ee0:	4b04      	ldr	r3, [pc, #16]	; (8002ef4 <HAL_MspInit+0x24>)
 8002ee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ee4:	4b03      	ldr	r3, [pc, #12]	; (8002ef4 <HAL_MspInit+0x24>)
 8002ee6:	2180      	movs	r1, #128	; 0x80
 8002ee8:	0549      	lsls	r1, r1, #21
 8002eea:	430a      	orrs	r2, r1
 8002eec:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40021000 	.word	0x40021000

08002ef8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ef8:	b590      	push	{r4, r7, lr}
 8002efa:	b089      	sub	sp, #36	; 0x24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f00:	240c      	movs	r4, #12
 8002f02:	193b      	adds	r3, r7, r4
 8002f04:	0018      	movs	r0, r3
 8002f06:	2314      	movs	r3, #20
 8002f08:	001a      	movs	r2, r3
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	f003 f88a 	bl	8006024 <memset>
  if(hi2c->Instance==I2C1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a17      	ldr	r2, [pc, #92]	; (8002f74 <HAL_I2C_MspInit+0x7c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d128      	bne.n	8002f6c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f1a:	4b17      	ldr	r3, [pc, #92]	; (8002f78 <HAL_I2C_MspInit+0x80>)
 8002f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f1e:	4b16      	ldr	r3, [pc, #88]	; (8002f78 <HAL_I2C_MspInit+0x80>)
 8002f20:	2102      	movs	r1, #2
 8002f22:	430a      	orrs	r2, r1
 8002f24:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f26:	4b14      	ldr	r3, [pc, #80]	; (8002f78 <HAL_I2C_MspInit+0x80>)
 8002f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	60bb      	str	r3, [r7, #8]
 8002f30:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f32:	0021      	movs	r1, r4
 8002f34:	187b      	adds	r3, r7, r1
 8002f36:	22c0      	movs	r2, #192	; 0xc0
 8002f38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f3a:	187b      	adds	r3, r7, r1
 8002f3c:	2212      	movs	r2, #18
 8002f3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f40:	187b      	adds	r3, r7, r1
 8002f42:	2200      	movs	r2, #0
 8002f44:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f46:	187b      	adds	r3, r7, r1
 8002f48:	2203      	movs	r2, #3
 8002f4a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002f4c:	187b      	adds	r3, r7, r1
 8002f4e:	2201      	movs	r2, #1
 8002f50:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f52:	187b      	adds	r3, r7, r1
 8002f54:	4a09      	ldr	r2, [pc, #36]	; (8002f7c <HAL_I2C_MspInit+0x84>)
 8002f56:	0019      	movs	r1, r3
 8002f58:	0010      	movs	r0, r2
 8002f5a:	f000 fbb7 	bl	80036cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f5e:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <HAL_I2C_MspInit+0x80>)
 8002f60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f62:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <HAL_I2C_MspInit+0x80>)
 8002f64:	2180      	movs	r1, #128	; 0x80
 8002f66:	0389      	lsls	r1, r1, #14
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f6c:	46c0      	nop			; (mov r8, r8)
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	b009      	add	sp, #36	; 0x24
 8002f72:	bd90      	pop	{r4, r7, pc}
 8002f74:	40005400 	.word	0x40005400
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	50000400 	.word	0x50000400

08002f80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f80:	b590      	push	{r4, r7, lr}
 8002f82:	b089      	sub	sp, #36	; 0x24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f88:	240c      	movs	r4, #12
 8002f8a:	193b      	adds	r3, r7, r4
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	2314      	movs	r3, #20
 8002f90:	001a      	movs	r2, r3
 8002f92:	2100      	movs	r1, #0
 8002f94:	f003 f846 	bl	8006024 <memset>
  if(huart->Instance==USART1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a18      	ldr	r2, [pc, #96]	; (8003000 <HAL_UART_MspInit+0x80>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d12a      	bne.n	8002ff8 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fa2:	4b18      	ldr	r3, [pc, #96]	; (8003004 <HAL_UART_MspInit+0x84>)
 8002fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fa6:	4b17      	ldr	r3, [pc, #92]	; (8003004 <HAL_UART_MspInit+0x84>)
 8002fa8:	2180      	movs	r1, #128	; 0x80
 8002faa:	01c9      	lsls	r1, r1, #7
 8002fac:	430a      	orrs	r2, r1
 8002fae:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb0:	4b14      	ldr	r3, [pc, #80]	; (8003004 <HAL_UART_MspInit+0x84>)
 8002fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb4:	4b13      	ldr	r3, [pc, #76]	; (8003004 <HAL_UART_MspInit+0x84>)
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fbc:	4b11      	ldr	r3, [pc, #68]	; (8003004 <HAL_UART_MspInit+0x84>)
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	60bb      	str	r3, [r7, #8]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BSP_UART_TX_Pin|BSP_UART_RX_Pin;
 8002fc8:	193b      	adds	r3, r7, r4
 8002fca:	22c0      	movs	r2, #192	; 0xc0
 8002fcc:	00d2      	lsls	r2, r2, #3
 8002fce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd0:	0021      	movs	r1, r4
 8002fd2:	187b      	adds	r3, r7, r1
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd8:	187b      	adds	r3, r7, r1
 8002fda:	2200      	movs	r2, #0
 8002fdc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fde:	187b      	adds	r3, r7, r1
 8002fe0:	2203      	movs	r2, #3
 8002fe2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002fe4:	187b      	adds	r3, r7, r1
 8002fe6:	2204      	movs	r2, #4
 8002fe8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fea:	187a      	adds	r2, r7, r1
 8002fec:	23a0      	movs	r3, #160	; 0xa0
 8002fee:	05db      	lsls	r3, r3, #23
 8002ff0:	0011      	movs	r1, r2
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f000 fb6a 	bl	80036cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002ff8:	46c0      	nop			; (mov r8, r8)
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	b009      	add	sp, #36	; 0x24
 8002ffe:	bd90      	pop	{r4, r7, pc}
 8003000:	40013800 	.word	0x40013800
 8003004:	40021000 	.word	0x40021000

08003008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800300c:	e7fe      	b.n	800300c <NMI_Handler+0x4>

0800300e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003012:	e7fe      	b.n	8003012 <HardFault_Handler+0x4>

08003014 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003018:	46c0      	nop			; (mov r8, r8)
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800302c:	f000 fa5a 	bl	80034e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003030:	46c0      	nop			; (mov r8, r8)
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
	...

08003038 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003040:	4a14      	ldr	r2, [pc, #80]	; (8003094 <_sbrk+0x5c>)
 8003042:	4b15      	ldr	r3, [pc, #84]	; (8003098 <_sbrk+0x60>)
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800304c:	4b13      	ldr	r3, [pc, #76]	; (800309c <_sbrk+0x64>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d102      	bne.n	800305a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003054:	4b11      	ldr	r3, [pc, #68]	; (800309c <_sbrk+0x64>)
 8003056:	4a12      	ldr	r2, [pc, #72]	; (80030a0 <_sbrk+0x68>)
 8003058:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800305a:	4b10      	ldr	r3, [pc, #64]	; (800309c <_sbrk+0x64>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	18d3      	adds	r3, r2, r3
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	429a      	cmp	r2, r3
 8003066:	d207      	bcs.n	8003078 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003068:	f002 ffb2 	bl	8005fd0 <__errno>
 800306c:	0003      	movs	r3, r0
 800306e:	220c      	movs	r2, #12
 8003070:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003072:	2301      	movs	r3, #1
 8003074:	425b      	negs	r3, r3
 8003076:	e009      	b.n	800308c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003078:	4b08      	ldr	r3, [pc, #32]	; (800309c <_sbrk+0x64>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800307e:	4b07      	ldr	r3, [pc, #28]	; (800309c <_sbrk+0x64>)
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	18d2      	adds	r2, r2, r3
 8003086:	4b05      	ldr	r3, [pc, #20]	; (800309c <_sbrk+0x64>)
 8003088:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800308a:	68fb      	ldr	r3, [r7, #12]
}
 800308c:	0018      	movs	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	b006      	add	sp, #24
 8003092:	bd80      	pop	{r7, pc}
 8003094:	20002000 	.word	0x20002000
 8003098:	00000400 	.word	0x00000400
 800309c:	20000168 	.word	0x20000168
 80030a0:	20000188 	.word	0x20000188

080030a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030a8:	46c0      	nop			; (mov r8, r8)
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
	...

080030b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80030b0:	480d      	ldr	r0, [pc, #52]	; (80030e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80030b2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80030b4:	f7ff fff6 	bl	80030a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030b8:	480c      	ldr	r0, [pc, #48]	; (80030ec <LoopForever+0x6>)
  ldr r1, =_edata
 80030ba:	490d      	ldr	r1, [pc, #52]	; (80030f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80030bc:	4a0d      	ldr	r2, [pc, #52]	; (80030f4 <LoopForever+0xe>)
  movs r3, #0
 80030be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030c0:	e002      	b.n	80030c8 <LoopCopyDataInit>

080030c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030c6:	3304      	adds	r3, #4

080030c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030cc:	d3f9      	bcc.n	80030c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030ce:	4a0a      	ldr	r2, [pc, #40]	; (80030f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80030d0:	4c0a      	ldr	r4, [pc, #40]	; (80030fc <LoopForever+0x16>)
  movs r3, #0
 80030d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030d4:	e001      	b.n	80030da <LoopFillZerobss>

080030d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030d8:	3204      	adds	r2, #4

080030da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030dc:	d3fb      	bcc.n	80030d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030de:	f002 ff7d 	bl	8005fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030e2:	f7ff fd47 	bl	8002b74 <main>

080030e6 <LoopForever>:

LoopForever:
    b LoopForever
 80030e6:	e7fe      	b.n	80030e6 <LoopForever>
  ldr   r0, =_estack
 80030e8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80030ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030f0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80030f4:	08006ac0 	.word	0x08006ac0
  ldr r2, =_sbss
 80030f8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80030fc:	20000184 	.word	0x20000184

08003100 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003100:	e7fe      	b.n	8003100 <ADC1_COMP_IRQHandler>
	...

08003104 <SHT2x_Init>:

/**
 * @brief Initializes the SHT2x temperature/humidity sensor.
 * @param hi2c User I2C handle pointer.
 */
void SHT2x_Init(I2C_HandleTypeDef *hi2c) {
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
	_sht2x_ui2c = hi2c;
 800310c:	4b03      	ldr	r3, [pc, #12]	; (800311c <SHT2x_Init+0x18>)
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	601a      	str	r2, [r3, #0]
}
 8003112:	46c0      	nop			; (mov r8, r8)
 8003114:	46bd      	mov	sp, r7
 8003116:	b002      	add	sp, #8
 8003118:	bd80      	pop	{r7, pc}
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	2000016c 	.word	0x2000016c

08003120 <SHT2x_ReadUserReg>:

/**
 * @brief Gets the value stored in user register.
 * @return 8-bit value stored in user register, 0 to 255.
 */
uint8_t SHT2x_ReadUserReg(void) {
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af02      	add	r7, sp, #8
	uint8_t val;
	uint8_t cmd = SHT2x_READ_REG;
 8003126:	1dbb      	adds	r3, r7, #6
 8003128:	22e7      	movs	r2, #231	; 0xe7
 800312a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 800312c:	4b0c      	ldr	r3, [pc, #48]	; (8003160 <SHT2x_ReadUserReg+0x40>)
 800312e:	6818      	ldr	r0, [r3, #0]
 8003130:	1dba      	adds	r2, r7, #6
 8003132:	23fa      	movs	r3, #250	; 0xfa
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	2301      	movs	r3, #1
 800313a:	2180      	movs	r1, #128	; 0x80
 800313c:	f000 fcd2 	bl	8003ae4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &val, 1, SHT2x_TIMEOUT);
 8003140:	4b07      	ldr	r3, [pc, #28]	; (8003160 <SHT2x_ReadUserReg+0x40>)
 8003142:	6818      	ldr	r0, [r3, #0]
 8003144:	1dfa      	adds	r2, r7, #7
 8003146:	23fa      	movs	r3, #250	; 0xfa
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	2301      	movs	r3, #1
 800314e:	2180      	movs	r1, #128	; 0x80
 8003150:	f000 fdd0 	bl	8003cf4 <HAL_I2C_Master_Receive>
	return val;
 8003154:	1dfb      	adds	r3, r7, #7
 8003156:	781b      	ldrb	r3, [r3, #0]
}
 8003158:	0018      	movs	r0, r3
 800315a:	46bd      	mov	sp, r7
 800315c:	b002      	add	sp, #8
 800315e:	bd80      	pop	{r7, pc}
 8003160:	2000016c 	.word	0x2000016c

08003164 <SHT2x_GetRaw>:
/**
 * @brief Sends the designated command to sensor and read a 16-bit raw value.
 * @param cmd Command to send to sensor.
 * @return 16-bit raw value, 0 to 65535.
 */
uint16_t SHT2x_GetRaw(uint8_t cmd) {
 8003164:	b590      	push	{r4, r7, lr}
 8003166:	b087      	sub	sp, #28
 8003168:	af02      	add	r7, sp, #8
 800316a:	0002      	movs	r2, r0
 800316c:	1dfb      	adds	r3, r7, #7
 800316e:	701a      	strb	r2, [r3, #0]
	uint8_t val[3] = { 0 };
 8003170:	240c      	movs	r4, #12
 8003172:	193b      	adds	r3, r7, r4
 8003174:	4a13      	ldr	r2, [pc, #76]	; (80031c4 <SHT2x_GetRaw+0x60>)
 8003176:	8812      	ldrh	r2, [r2, #0]
 8003178:	801a      	strh	r2, [r3, #0]
 800317a:	2202      	movs	r2, #2
 800317c:	2100      	movs	r1, #0
 800317e:	5499      	strb	r1, [r3, r2]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 8003180:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <SHT2x_GetRaw+0x64>)
 8003182:	6818      	ldr	r0, [r3, #0]
 8003184:	1dfa      	adds	r2, r7, #7
 8003186:	23fa      	movs	r3, #250	; 0xfa
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	2301      	movs	r3, #1
 800318e:	2180      	movs	r1, #128	; 0x80
 8003190:	f000 fca8 	bl	8003ae4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, val, 3, SHT2x_TIMEOUT);
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <SHT2x_GetRaw+0x64>)
 8003196:	6818      	ldr	r0, [r3, #0]
 8003198:	193a      	adds	r2, r7, r4
 800319a:	23fa      	movs	r3, #250	; 0xfa
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	2303      	movs	r3, #3
 80031a2:	2180      	movs	r1, #128	; 0x80
 80031a4:	f000 fda6 	bl	8003cf4 <HAL_I2C_Master_Receive>
	return val[0] << 8 | val[1];
 80031a8:	193b      	adds	r3, r7, r4
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	021b      	lsls	r3, r3, #8
 80031ae:	b21a      	sxth	r2, r3
 80031b0:	193b      	adds	r3, r7, r4
 80031b2:	785b      	ldrb	r3, [r3, #1]
 80031b4:	b21b      	sxth	r3, r3
 80031b6:	4313      	orrs	r3, r2
 80031b8:	b21b      	sxth	r3, r3
 80031ba:	b29b      	uxth	r3, r3
}
 80031bc:	0018      	movs	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	b005      	add	sp, #20
 80031c2:	bd90      	pop	{r4, r7, pc}
 80031c4:	0800694c 	.word	0x0800694c
 80031c8:	2000016c 	.word	0x2000016c

080031cc <SHT2x_GetTemperature>:
/**
 * @brief Measures and gets the current temperature.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point temperature value.
 */
float SHT2x_GetTemperature(uint8_t hold) {
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	0002      	movs	r2, r0
 80031d4:	1dfb      	adds	r3, r7, #7
 80031d6:	701a      	strb	r2, [r3, #0]
	uint8_t cmd = (hold ? SHT2x_READ_TEMP_HOLD : SHT2x_READ_TEMP_NOHOLD);
 80031d8:	1dfb      	adds	r3, r7, #7
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <SHT2x_GetTemperature+0x18>
 80031e0:	22e3      	movs	r2, #227	; 0xe3
 80031e2:	e000      	b.n	80031e6 <SHT2x_GetTemperature+0x1a>
 80031e4:	22f3      	movs	r2, #243	; 0xf3
 80031e6:	210f      	movs	r1, #15
 80031e8:	187b      	adds	r3, r7, r1
 80031ea:	701a      	strb	r2, [r3, #0]
	return -46.85 + 175.72 * (SHT2x_GetRaw(cmd) / 65536.0);
 80031ec:	187b      	adds	r3, r7, r1
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	0018      	movs	r0, r3
 80031f2:	f7ff ffb7 	bl	8003164 <SHT2x_GetRaw>
 80031f6:	0003      	movs	r3, r0
 80031f8:	0018      	movs	r0, r3
 80031fa:	f7ff faa7 	bl	800274c <__aeabi_i2d>
 80031fe:	2200      	movs	r2, #0
 8003200:	4b0e      	ldr	r3, [pc, #56]	; (800323c <SHT2x_GetTemperature+0x70>)
 8003202:	f7fe f9af 	bl	8001564 <__aeabi_ddiv>
 8003206:	0002      	movs	r2, r0
 8003208:	000b      	movs	r3, r1
 800320a:	0010      	movs	r0, r2
 800320c:	0019      	movs	r1, r3
 800320e:	4a0c      	ldr	r2, [pc, #48]	; (8003240 <SHT2x_GetTemperature+0x74>)
 8003210:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <SHT2x_GetTemperature+0x78>)
 8003212:	f7fe fc9d 	bl	8001b50 <__aeabi_dmul>
 8003216:	0002      	movs	r2, r0
 8003218:	000b      	movs	r3, r1
 800321a:	0010      	movs	r0, r2
 800321c:	0019      	movs	r1, r3
 800321e:	4a0a      	ldr	r2, [pc, #40]	; (8003248 <SHT2x_GetTemperature+0x7c>)
 8003220:	4b0a      	ldr	r3, [pc, #40]	; (800324c <SHT2x_GetTemperature+0x80>)
 8003222:	f7fe ff01 	bl	8002028 <__aeabi_dsub>
 8003226:	0002      	movs	r2, r0
 8003228:	000b      	movs	r3, r1
 800322a:	0010      	movs	r0, r2
 800322c:	0019      	movs	r1, r3
 800322e:	f7ff fb05 	bl	800283c <__aeabi_d2f>
 8003232:	1c03      	adds	r3, r0, #0
}
 8003234:	1c18      	adds	r0, r3, #0
 8003236:	46bd      	mov	sp, r7
 8003238:	b004      	add	sp, #16
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40f00000 	.word	0x40f00000
 8003240:	3d70a3d7 	.word	0x3d70a3d7
 8003244:	4065f70a 	.word	0x4065f70a
 8003248:	cccccccd 	.word	0xcccccccd
 800324c:	40476ccc 	.word	0x40476ccc

08003250 <SHT2x_GetRelativeHumidity>:
/**
 * @brief Measures and gets the current relative humidity.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point relative humidity value.
 */
float SHT2x_GetRelativeHumidity(uint8_t hold) {
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	0002      	movs	r2, r0
 8003258:	1dfb      	adds	r3, r7, #7
 800325a:	701a      	strb	r2, [r3, #0]
	uint8_t cmd = (hold ? SHT2x_READ_RH_HOLD : SHT2x_READ_RH_NOHOLD);
 800325c:	1dfb      	adds	r3, r7, #7
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <SHT2x_GetRelativeHumidity+0x18>
 8003264:	22e5      	movs	r2, #229	; 0xe5
 8003266:	e000      	b.n	800326a <SHT2x_GetRelativeHumidity+0x1a>
 8003268:	22f5      	movs	r2, #245	; 0xf5
 800326a:	210f      	movs	r1, #15
 800326c:	187b      	adds	r3, r7, r1
 800326e:	701a      	strb	r2, [r3, #0]
	return -6 + 125.00 * (SHT2x_GetRaw(cmd) / 65536.0);
 8003270:	187b      	adds	r3, r7, r1
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	0018      	movs	r0, r3
 8003276:	f7ff ff75 	bl	8003164 <SHT2x_GetRaw>
 800327a:	0003      	movs	r3, r0
 800327c:	0018      	movs	r0, r3
 800327e:	f7ff fa65 	bl	800274c <__aeabi_i2d>
 8003282:	2200      	movs	r2, #0
 8003284:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <SHT2x_GetRelativeHumidity+0x70>)
 8003286:	f7fe f96d 	bl	8001564 <__aeabi_ddiv>
 800328a:	0002      	movs	r2, r0
 800328c:	000b      	movs	r3, r1
 800328e:	0010      	movs	r0, r2
 8003290:	0019      	movs	r1, r3
 8003292:	2200      	movs	r2, #0
 8003294:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <SHT2x_GetRelativeHumidity+0x74>)
 8003296:	f7fe fc5b 	bl	8001b50 <__aeabi_dmul>
 800329a:	0002      	movs	r2, r0
 800329c:	000b      	movs	r3, r1
 800329e:	0010      	movs	r0, r2
 80032a0:	0019      	movs	r1, r3
 80032a2:	2200      	movs	r2, #0
 80032a4:	4b08      	ldr	r3, [pc, #32]	; (80032c8 <SHT2x_GetRelativeHumidity+0x78>)
 80032a6:	f7fe febf 	bl	8002028 <__aeabi_dsub>
 80032aa:	0002      	movs	r2, r0
 80032ac:	000b      	movs	r3, r1
 80032ae:	0010      	movs	r0, r2
 80032b0:	0019      	movs	r1, r3
 80032b2:	f7ff fac3 	bl	800283c <__aeabi_d2f>
 80032b6:	1c03      	adds	r3, r0, #0
}
 80032b8:	1c18      	adds	r0, r3, #0
 80032ba:	46bd      	mov	sp, r7
 80032bc:	b004      	add	sp, #16
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40f00000 	.word	0x40f00000
 80032c4:	405f4000 	.word	0x405f4000
 80032c8:	40180000 	.word	0x40180000

080032cc <SHT2x_SetResolution>:
 * @brief Sets the measurement resolution.
 * @param res Enum resolution.
 * @note Available resolutions: RES_14_12, RES_12_8, RES_13_10, RES_11_11.
 * @note RES_14_12 = 14-bit temperature and 12-bit RH resolution, etc.
 */
void SHT2x_SetResolution(SHT2x_Resolution res) {
 80032cc:	b5b0      	push	{r4, r5, r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af02      	add	r7, sp, #8
 80032d2:	0002      	movs	r2, r0
 80032d4:	1dfb      	adds	r3, r7, #7
 80032d6:	701a      	strb	r2, [r3, #0]
	uint8_t val = SHT2x_ReadUserReg();
 80032d8:	250f      	movs	r5, #15
 80032da:	197c      	adds	r4, r7, r5
 80032dc:	f7ff ff20 	bl	8003120 <SHT2x_ReadUserReg>
 80032e0:	0003      	movs	r3, r0
 80032e2:	7023      	strb	r3, [r4, #0]
	val = (val & 0x7e) | res;
 80032e4:	0029      	movs	r1, r5
 80032e6:	187b      	adds	r3, r7, r1
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	b25b      	sxtb	r3, r3
 80032ec:	227e      	movs	r2, #126	; 0x7e
 80032ee:	4013      	ands	r3, r2
 80032f0:	b25a      	sxtb	r2, r3
 80032f2:	1dfb      	adds	r3, r7, #7
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	b25b      	sxtb	r3, r3
 80032f8:	4313      	orrs	r3, r2
 80032fa:	b25a      	sxtb	r2, r3
 80032fc:	187b      	adds	r3, r7, r1
 80032fe:	701a      	strb	r2, [r3, #0]
	uint8_t temp[2] = { SHT2x_WRITE_REG, val };
 8003300:	240c      	movs	r4, #12
 8003302:	193b      	adds	r3, r7, r4
 8003304:	22e6      	movs	r2, #230	; 0xe6
 8003306:	701a      	strb	r2, [r3, #0]
 8003308:	193b      	adds	r3, r7, r4
 800330a:	187a      	adds	r2, r7, r1
 800330c:	7812      	ldrb	r2, [r2, #0]
 800330e:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, temp, 2, SHT2x_TIMEOUT);
 8003310:	4b06      	ldr	r3, [pc, #24]	; (800332c <SHT2x_SetResolution+0x60>)
 8003312:	6818      	ldr	r0, [r3, #0]
 8003314:	193a      	adds	r2, r7, r4
 8003316:	23fa      	movs	r3, #250	; 0xfa
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	2302      	movs	r3, #2
 800331e:	2180      	movs	r1, #128	; 0x80
 8003320:	f000 fbe0 	bl	8003ae4 <HAL_I2C_Master_Transmit>
}
 8003324:	46c0      	nop			; (mov r8, r8)
 8003326:	46bd      	mov	sp, r7
 8003328:	b004      	add	sp, #16
 800332a:	bdb0      	pop	{r4, r5, r7, pc}
 800332c:	2000016c 	.word	0x2000016c

08003330 <SHT2x_CelsiusToFahrenheit>:
/**
 * @brief Converts degrees Celsius to degrees Fahrenheit.
 * @param celsius Floating point temperature in degrees Celsius.
 * @return Floating point temperature in degrees Fahrenheit.
 */
float SHT2x_CelsiusToFahrenheit(float celsius) {
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
	return (9.0 / 5.0) * celsius + 32;
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff fa37 	bl	80027ac <__aeabi_f2d>
 800333e:	4a0b      	ldr	r2, [pc, #44]	; (800336c <SHT2x_CelsiusToFahrenheit+0x3c>)
 8003340:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <SHT2x_CelsiusToFahrenheit+0x40>)
 8003342:	f7fe fc05 	bl	8001b50 <__aeabi_dmul>
 8003346:	0002      	movs	r2, r0
 8003348:	000b      	movs	r3, r1
 800334a:	0010      	movs	r0, r2
 800334c:	0019      	movs	r1, r3
 800334e:	2200      	movs	r2, #0
 8003350:	4b08      	ldr	r3, [pc, #32]	; (8003374 <SHT2x_CelsiusToFahrenheit+0x44>)
 8003352:	f7fd fdcb 	bl	8000eec <__aeabi_dadd>
 8003356:	0002      	movs	r2, r0
 8003358:	000b      	movs	r3, r1
 800335a:	0010      	movs	r0, r2
 800335c:	0019      	movs	r1, r3
 800335e:	f7ff fa6d 	bl	800283c <__aeabi_d2f>
 8003362:	1c03      	adds	r3, r0, #0
}
 8003364:	1c18      	adds	r0, r3, #0
 8003366:	46bd      	mov	sp, r7
 8003368:	b002      	add	sp, #8
 800336a:	bd80      	pop	{r7, pc}
 800336c:	cccccccd 	.word	0xcccccccd
 8003370:	3ffccccc 	.word	0x3ffccccc
 8003374:	40400000 	.word	0x40400000

08003378 <SHT2x_CelsiusToKelvin>:
/**
 * @brief Converts degrees Celsius to Kelvin.
 * @param celsius Floating point temperature in degrees Celsius.
 * @return Floating point temperature in Kelvin.
 */
float SHT2x_CelsiusToKelvin(float celsius) {
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
	return celsius + 273;
 8003380:	4904      	ldr	r1, [pc, #16]	; (8003394 <SHT2x_CelsiusToKelvin+0x1c>)
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7fd f890 	bl	80004a8 <__aeabi_fadd>
 8003388:	1c03      	adds	r3, r0, #0
}
 800338a:	1c18      	adds	r0, r3, #0
 800338c:	46bd      	mov	sp, r7
 800338e:	b002      	add	sp, #8
 8003390:	bd80      	pop	{r7, pc}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	43888000 	.word	0x43888000

08003398 <SHT2x_GetInteger>:
 * @brief Gets the integer part of a floating point number.
 * @note Avoids the use of sprinf floating point formatting.
 * @param num Floating point number.
 * @return Integer part of floating point number.
 */
int32_t SHT2x_GetInteger(float num) {
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
	return num / 1;
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f7fd fcf3 	bl	8000d8c <__aeabi_f2iz>
 80033a6:	0003      	movs	r3, r0
}
 80033a8:	0018      	movs	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	b002      	add	sp, #8
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <SHT2x_GetDecimal>:
 * @brief Gets the decimal part of a floating point number.
 * @note Avoids the use of sprinf floating point formatting.
 * @param num Floating point number.
 * @return Decimal part of floating point number.
 */
uint32_t SHT2x_GetDecimal(float num, int digits) {
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
	float postDec = num - SHT2x_GetInteger(num);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	1c18      	adds	r0, r3, #0
 80033be:	f7ff ffeb 	bl	8003398 <SHT2x_GetInteger>
 80033c2:	0003      	movs	r3, r0
 80033c4:	0018      	movs	r0, r3
 80033c6:	f7fd fd01 	bl	8000dcc <__aeabi_i2f>
 80033ca:	1c03      	adds	r3, r0, #0
 80033cc:	1c19      	adds	r1, r3, #0
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7fd fb2e 	bl	8000a30 <__aeabi_fsub>
 80033d4:	1c03      	adds	r3, r0, #0
 80033d6:	60fb      	str	r3, [r7, #12]
	return postDec * SHT2x_Ipow(10, digits);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	0019      	movs	r1, r3
 80033dc:	200a      	movs	r0, #10
 80033de:	f000 f812 	bl	8003406 <SHT2x_Ipow>
 80033e2:	0003      	movs	r3, r0
 80033e4:	0018      	movs	r0, r3
 80033e6:	f7fd fd3f 	bl	8000e68 <__aeabi_ui2f>
 80033ea:	1c03      	adds	r3, r0, #0
 80033ec:	68f9      	ldr	r1, [r7, #12]
 80033ee:	1c18      	adds	r0, r3, #0
 80033f0:	f7fd f9f8 	bl	80007e4 <__aeabi_fmul>
 80033f4:	1c03      	adds	r3, r0, #0
 80033f6:	1c18      	adds	r0, r3, #0
 80033f8:	f7fc ff72 	bl	80002e0 <__aeabi_f2uiz>
 80033fc:	0003      	movs	r3, r0
}
 80033fe:	0018      	movs	r0, r3
 8003400:	46bd      	mov	sp, r7
 8003402:	b004      	add	sp, #16
 8003404:	bd80      	pop	{r7, pc}

08003406 <SHT2x_Ipow>:
 * @brief Integer equivalent of pow() in math.h.
 * @param base Base.
 * @param power Power.
 * @return
 */
uint32_t SHT2x_Ipow(uint32_t base, uint32_t power) {
 8003406:	b580      	push	{r7, lr}
 8003408:	b084      	sub	sp, #16
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
 800340e:	6039      	str	r1, [r7, #0]
	uint32_t temp = base;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 1; i < power; i++)
 8003414:	2301      	movs	r3, #1
 8003416:	60bb      	str	r3, [r7, #8]
 8003418:	e006      	b.n	8003428 <SHT2x_Ipow+0x22>
		temp *= base;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	4353      	muls	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 1; i < power; i++)
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	3301      	adds	r3, #1
 8003426:	60bb      	str	r3, [r7, #8]
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	429a      	cmp	r2, r3
 800342e:	d3f4      	bcc.n	800341a <SHT2x_Ipow+0x14>
	return temp;
 8003430:	68fb      	ldr	r3, [r7, #12]
}
 8003432:	0018      	movs	r0, r3
 8003434:	46bd      	mov	sp, r7
 8003436:	b004      	add	sp, #16
 8003438:	bd80      	pop	{r7, pc}
	...

0800343c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003442:	1dfb      	adds	r3, r7, #7
 8003444:	2200      	movs	r2, #0
 8003446:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003448:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <HAL_Init+0x3c>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	4b0a      	ldr	r3, [pc, #40]	; (8003478 <HAL_Init+0x3c>)
 800344e:	2140      	movs	r1, #64	; 0x40
 8003450:	430a      	orrs	r2, r1
 8003452:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003454:	2000      	movs	r0, #0
 8003456:	f000 f811 	bl	800347c <HAL_InitTick>
 800345a:	1e03      	subs	r3, r0, #0
 800345c:	d003      	beq.n	8003466 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800345e:	1dfb      	adds	r3, r7, #7
 8003460:	2201      	movs	r2, #1
 8003462:	701a      	strb	r2, [r3, #0]
 8003464:	e001      	b.n	800346a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003466:	f7ff fd33 	bl	8002ed0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800346a:	1dfb      	adds	r3, r7, #7
 800346c:	781b      	ldrb	r3, [r3, #0]
}
 800346e:	0018      	movs	r0, r3
 8003470:	46bd      	mov	sp, r7
 8003472:	b002      	add	sp, #8
 8003474:	bd80      	pop	{r7, pc}
 8003476:	46c0      	nop			; (mov r8, r8)
 8003478:	40022000 	.word	0x40022000

0800347c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800347c:	b590      	push	{r4, r7, lr}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003484:	4b14      	ldr	r3, [pc, #80]	; (80034d8 <HAL_InitTick+0x5c>)
 8003486:	681c      	ldr	r4, [r3, #0]
 8003488:	4b14      	ldr	r3, [pc, #80]	; (80034dc <HAL_InitTick+0x60>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	0019      	movs	r1, r3
 800348e:	23fa      	movs	r3, #250	; 0xfa
 8003490:	0098      	lsls	r0, r3, #2
 8003492:	f7fc fe4b 	bl	800012c <__udivsi3>
 8003496:	0003      	movs	r3, r0
 8003498:	0019      	movs	r1, r3
 800349a:	0020      	movs	r0, r4
 800349c:	f7fc fe46 	bl	800012c <__udivsi3>
 80034a0:	0003      	movs	r3, r0
 80034a2:	0018      	movs	r0, r3
 80034a4:	f000 f905 	bl	80036b2 <HAL_SYSTICK_Config>
 80034a8:	1e03      	subs	r3, r0, #0
 80034aa:	d001      	beq.n	80034b0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e00f      	b.n	80034d0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b03      	cmp	r3, #3
 80034b4:	d80b      	bhi.n	80034ce <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	2301      	movs	r3, #1
 80034ba:	425b      	negs	r3, r3
 80034bc:	2200      	movs	r2, #0
 80034be:	0018      	movs	r0, r3
 80034c0:	f000 f8e2 	bl	8003688 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034c4:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <HAL_InitTick+0x64>)
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
 80034cc:	e000      	b.n	80034d0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
}
 80034d0:	0018      	movs	r0, r3
 80034d2:	46bd      	mov	sp, r7
 80034d4:	b003      	add	sp, #12
 80034d6:	bd90      	pop	{r4, r7, pc}
 80034d8:	20000000 	.word	0x20000000
 80034dc:	20000008 	.word	0x20000008
 80034e0:	20000004 	.word	0x20000004

080034e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034e8:	4b05      	ldr	r3, [pc, #20]	; (8003500 <HAL_IncTick+0x1c>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	001a      	movs	r2, r3
 80034ee:	4b05      	ldr	r3, [pc, #20]	; (8003504 <HAL_IncTick+0x20>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	18d2      	adds	r2, r2, r3
 80034f4:	4b03      	ldr	r3, [pc, #12]	; (8003504 <HAL_IncTick+0x20>)
 80034f6:	601a      	str	r2, [r3, #0]
}
 80034f8:	46c0      	nop			; (mov r8, r8)
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	20000008 	.word	0x20000008
 8003504:	20000170 	.word	0x20000170

08003508 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  return uwTick;
 800350c:	4b02      	ldr	r3, [pc, #8]	; (8003518 <HAL_GetTick+0x10>)
 800350e:	681b      	ldr	r3, [r3, #0]
}
 8003510:	0018      	movs	r0, r3
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	46c0      	nop			; (mov r8, r8)
 8003518:	20000170 	.word	0x20000170

0800351c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003524:	f7ff fff0 	bl	8003508 <HAL_GetTick>
 8003528:	0003      	movs	r3, r0
 800352a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	3301      	adds	r3, #1
 8003534:	d005      	beq.n	8003542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003536:	4b0a      	ldr	r3, [pc, #40]	; (8003560 <HAL_Delay+0x44>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	001a      	movs	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	189b      	adds	r3, r3, r2
 8003540:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003542:	46c0      	nop			; (mov r8, r8)
 8003544:	f7ff ffe0 	bl	8003508 <HAL_GetTick>
 8003548:	0002      	movs	r2, r0
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	429a      	cmp	r2, r3
 8003552:	d8f7      	bhi.n	8003544 <HAL_Delay+0x28>
  {
  }
}
 8003554:	46c0      	nop			; (mov r8, r8)
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	46bd      	mov	sp, r7
 800355a:	b004      	add	sp, #16
 800355c:	bd80      	pop	{r7, pc}
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	20000008 	.word	0x20000008

08003564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003564:	b590      	push	{r4, r7, lr}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	0002      	movs	r2, r0
 800356c:	6039      	str	r1, [r7, #0]
 800356e:	1dfb      	adds	r3, r7, #7
 8003570:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003572:	1dfb      	adds	r3, r7, #7
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	2b7f      	cmp	r3, #127	; 0x7f
 8003578:	d828      	bhi.n	80035cc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800357a:	4a2f      	ldr	r2, [pc, #188]	; (8003638 <__NVIC_SetPriority+0xd4>)
 800357c:	1dfb      	adds	r3, r7, #7
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	b25b      	sxtb	r3, r3
 8003582:	089b      	lsrs	r3, r3, #2
 8003584:	33c0      	adds	r3, #192	; 0xc0
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	589b      	ldr	r3, [r3, r2]
 800358a:	1dfa      	adds	r2, r7, #7
 800358c:	7812      	ldrb	r2, [r2, #0]
 800358e:	0011      	movs	r1, r2
 8003590:	2203      	movs	r2, #3
 8003592:	400a      	ands	r2, r1
 8003594:	00d2      	lsls	r2, r2, #3
 8003596:	21ff      	movs	r1, #255	; 0xff
 8003598:	4091      	lsls	r1, r2
 800359a:	000a      	movs	r2, r1
 800359c:	43d2      	mvns	r2, r2
 800359e:	401a      	ands	r2, r3
 80035a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	019b      	lsls	r3, r3, #6
 80035a6:	22ff      	movs	r2, #255	; 0xff
 80035a8:	401a      	ands	r2, r3
 80035aa:	1dfb      	adds	r3, r7, #7
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	0018      	movs	r0, r3
 80035b0:	2303      	movs	r3, #3
 80035b2:	4003      	ands	r3, r0
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035b8:	481f      	ldr	r0, [pc, #124]	; (8003638 <__NVIC_SetPriority+0xd4>)
 80035ba:	1dfb      	adds	r3, r7, #7
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	b25b      	sxtb	r3, r3
 80035c0:	089b      	lsrs	r3, r3, #2
 80035c2:	430a      	orrs	r2, r1
 80035c4:	33c0      	adds	r3, #192	; 0xc0
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80035ca:	e031      	b.n	8003630 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035cc:	4a1b      	ldr	r2, [pc, #108]	; (800363c <__NVIC_SetPriority+0xd8>)
 80035ce:	1dfb      	adds	r3, r7, #7
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	0019      	movs	r1, r3
 80035d4:	230f      	movs	r3, #15
 80035d6:	400b      	ands	r3, r1
 80035d8:	3b08      	subs	r3, #8
 80035da:	089b      	lsrs	r3, r3, #2
 80035dc:	3306      	adds	r3, #6
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	18d3      	adds	r3, r2, r3
 80035e2:	3304      	adds	r3, #4
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	1dfa      	adds	r2, r7, #7
 80035e8:	7812      	ldrb	r2, [r2, #0]
 80035ea:	0011      	movs	r1, r2
 80035ec:	2203      	movs	r2, #3
 80035ee:	400a      	ands	r2, r1
 80035f0:	00d2      	lsls	r2, r2, #3
 80035f2:	21ff      	movs	r1, #255	; 0xff
 80035f4:	4091      	lsls	r1, r2
 80035f6:	000a      	movs	r2, r1
 80035f8:	43d2      	mvns	r2, r2
 80035fa:	401a      	ands	r2, r3
 80035fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	019b      	lsls	r3, r3, #6
 8003602:	22ff      	movs	r2, #255	; 0xff
 8003604:	401a      	ands	r2, r3
 8003606:	1dfb      	adds	r3, r7, #7
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	0018      	movs	r0, r3
 800360c:	2303      	movs	r3, #3
 800360e:	4003      	ands	r3, r0
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003614:	4809      	ldr	r0, [pc, #36]	; (800363c <__NVIC_SetPriority+0xd8>)
 8003616:	1dfb      	adds	r3, r7, #7
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	001c      	movs	r4, r3
 800361c:	230f      	movs	r3, #15
 800361e:	4023      	ands	r3, r4
 8003620:	3b08      	subs	r3, #8
 8003622:	089b      	lsrs	r3, r3, #2
 8003624:	430a      	orrs	r2, r1
 8003626:	3306      	adds	r3, #6
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	18c3      	adds	r3, r0, r3
 800362c:	3304      	adds	r3, #4
 800362e:	601a      	str	r2, [r3, #0]
}
 8003630:	46c0      	nop			; (mov r8, r8)
 8003632:	46bd      	mov	sp, r7
 8003634:	b003      	add	sp, #12
 8003636:	bd90      	pop	{r4, r7, pc}
 8003638:	e000e100 	.word	0xe000e100
 800363c:	e000ed00 	.word	0xe000ed00

08003640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	1e5a      	subs	r2, r3, #1
 800364c:	2380      	movs	r3, #128	; 0x80
 800364e:	045b      	lsls	r3, r3, #17
 8003650:	429a      	cmp	r2, r3
 8003652:	d301      	bcc.n	8003658 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003654:	2301      	movs	r3, #1
 8003656:	e010      	b.n	800367a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003658:	4b0a      	ldr	r3, [pc, #40]	; (8003684 <SysTick_Config+0x44>)
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	3a01      	subs	r2, #1
 800365e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003660:	2301      	movs	r3, #1
 8003662:	425b      	negs	r3, r3
 8003664:	2103      	movs	r1, #3
 8003666:	0018      	movs	r0, r3
 8003668:	f7ff ff7c 	bl	8003564 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800366c:	4b05      	ldr	r3, [pc, #20]	; (8003684 <SysTick_Config+0x44>)
 800366e:	2200      	movs	r2, #0
 8003670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003672:	4b04      	ldr	r3, [pc, #16]	; (8003684 <SysTick_Config+0x44>)
 8003674:	2207      	movs	r2, #7
 8003676:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003678:	2300      	movs	r3, #0
}
 800367a:	0018      	movs	r0, r3
 800367c:	46bd      	mov	sp, r7
 800367e:	b002      	add	sp, #8
 8003680:	bd80      	pop	{r7, pc}
 8003682:	46c0      	nop			; (mov r8, r8)
 8003684:	e000e010 	.word	0xe000e010

08003688 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	607a      	str	r2, [r7, #4]
 8003692:	210f      	movs	r1, #15
 8003694:	187b      	adds	r3, r7, r1
 8003696:	1c02      	adds	r2, r0, #0
 8003698:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	187b      	adds	r3, r7, r1
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	b25b      	sxtb	r3, r3
 80036a2:	0011      	movs	r1, r2
 80036a4:	0018      	movs	r0, r3
 80036a6:	f7ff ff5d 	bl	8003564 <__NVIC_SetPriority>
}
 80036aa:	46c0      	nop			; (mov r8, r8)
 80036ac:	46bd      	mov	sp, r7
 80036ae:	b004      	add	sp, #16
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b082      	sub	sp, #8
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	0018      	movs	r0, r3
 80036be:	f7ff ffbf 	bl	8003640 <SysTick_Config>
 80036c2:	0003      	movs	r3, r0
}
 80036c4:	0018      	movs	r0, r3
 80036c6:	46bd      	mov	sp, r7
 80036c8:	b002      	add	sp, #8
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036da:	2300      	movs	r3, #0
 80036dc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80036de:	2300      	movs	r3, #0
 80036e0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80036e2:	e14f      	b.n	8003984 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2101      	movs	r1, #1
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	4091      	lsls	r1, r2
 80036ee:	000a      	movs	r2, r1
 80036f0:	4013      	ands	r3, r2
 80036f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d100      	bne.n	80036fc <HAL_GPIO_Init+0x30>
 80036fa:	e140      	b.n	800397e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	2203      	movs	r2, #3
 8003702:	4013      	ands	r3, r2
 8003704:	2b01      	cmp	r3, #1
 8003706:	d005      	beq.n	8003714 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	2203      	movs	r2, #3
 800370e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003710:	2b02      	cmp	r3, #2
 8003712:	d130      	bne.n	8003776 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	2203      	movs	r2, #3
 8003720:	409a      	lsls	r2, r3
 8003722:	0013      	movs	r3, r2
 8003724:	43da      	mvns	r2, r3
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	4013      	ands	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	68da      	ldr	r2, [r3, #12]
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	409a      	lsls	r2, r3
 8003736:	0013      	movs	r3, r2
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	4313      	orrs	r3, r2
 800373c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800374a:	2201      	movs	r2, #1
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	409a      	lsls	r2, r3
 8003750:	0013      	movs	r3, r2
 8003752:	43da      	mvns	r2, r3
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	4013      	ands	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	091b      	lsrs	r3, r3, #4
 8003760:	2201      	movs	r2, #1
 8003762:	401a      	ands	r2, r3
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	409a      	lsls	r2, r3
 8003768:	0013      	movs	r3, r2
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2203      	movs	r2, #3
 800377c:	4013      	ands	r3, r2
 800377e:	2b03      	cmp	r3, #3
 8003780:	d017      	beq.n	80037b2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	2203      	movs	r2, #3
 800378e:	409a      	lsls	r2, r3
 8003790:	0013      	movs	r3, r2
 8003792:	43da      	mvns	r2, r3
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	4013      	ands	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	409a      	lsls	r2, r3
 80037a4:	0013      	movs	r3, r2
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2203      	movs	r2, #3
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d123      	bne.n	8003806 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	08da      	lsrs	r2, r3, #3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	3208      	adds	r2, #8
 80037c6:	0092      	lsls	r2, r2, #2
 80037c8:	58d3      	ldr	r3, [r2, r3]
 80037ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	2207      	movs	r2, #7
 80037d0:	4013      	ands	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	220f      	movs	r2, #15
 80037d6:	409a      	lsls	r2, r3
 80037d8:	0013      	movs	r3, r2
 80037da:	43da      	mvns	r2, r3
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	4013      	ands	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	691a      	ldr	r2, [r3, #16]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2107      	movs	r1, #7
 80037ea:	400b      	ands	r3, r1
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	409a      	lsls	r2, r3
 80037f0:	0013      	movs	r3, r2
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	08da      	lsrs	r2, r3, #3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3208      	adds	r2, #8
 8003800:	0092      	lsls	r2, r2, #2
 8003802:	6939      	ldr	r1, [r7, #16]
 8003804:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	2203      	movs	r2, #3
 8003812:	409a      	lsls	r2, r3
 8003814:	0013      	movs	r3, r2
 8003816:	43da      	mvns	r2, r3
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	4013      	ands	r3, r2
 800381c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2203      	movs	r2, #3
 8003824:	401a      	ands	r2, r3
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	409a      	lsls	r2, r3
 800382c:	0013      	movs	r3, r2
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	4313      	orrs	r3, r2
 8003832:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	23c0      	movs	r3, #192	; 0xc0
 8003840:	029b      	lsls	r3, r3, #10
 8003842:	4013      	ands	r3, r2
 8003844:	d100      	bne.n	8003848 <HAL_GPIO_Init+0x17c>
 8003846:	e09a      	b.n	800397e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003848:	4b54      	ldr	r3, [pc, #336]	; (800399c <HAL_GPIO_Init+0x2d0>)
 800384a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800384c:	4b53      	ldr	r3, [pc, #332]	; (800399c <HAL_GPIO_Init+0x2d0>)
 800384e:	2101      	movs	r1, #1
 8003850:	430a      	orrs	r2, r1
 8003852:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003854:	4a52      	ldr	r2, [pc, #328]	; (80039a0 <HAL_GPIO_Init+0x2d4>)
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	089b      	lsrs	r3, r3, #2
 800385a:	3302      	adds	r3, #2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	589b      	ldr	r3, [r3, r2]
 8003860:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	2203      	movs	r2, #3
 8003866:	4013      	ands	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	220f      	movs	r2, #15
 800386c:	409a      	lsls	r2, r3
 800386e:	0013      	movs	r3, r2
 8003870:	43da      	mvns	r2, r3
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	4013      	ands	r3, r2
 8003876:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	23a0      	movs	r3, #160	; 0xa0
 800387c:	05db      	lsls	r3, r3, #23
 800387e:	429a      	cmp	r2, r3
 8003880:	d019      	beq.n	80038b6 <HAL_GPIO_Init+0x1ea>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a47      	ldr	r2, [pc, #284]	; (80039a4 <HAL_GPIO_Init+0x2d8>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d013      	beq.n	80038b2 <HAL_GPIO_Init+0x1e6>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a46      	ldr	r2, [pc, #280]	; (80039a8 <HAL_GPIO_Init+0x2dc>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d00d      	beq.n	80038ae <HAL_GPIO_Init+0x1e2>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a45      	ldr	r2, [pc, #276]	; (80039ac <HAL_GPIO_Init+0x2e0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d007      	beq.n	80038aa <HAL_GPIO_Init+0x1de>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a44      	ldr	r2, [pc, #272]	; (80039b0 <HAL_GPIO_Init+0x2e4>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d101      	bne.n	80038a6 <HAL_GPIO_Init+0x1da>
 80038a2:	2305      	movs	r3, #5
 80038a4:	e008      	b.n	80038b8 <HAL_GPIO_Init+0x1ec>
 80038a6:	2306      	movs	r3, #6
 80038a8:	e006      	b.n	80038b8 <HAL_GPIO_Init+0x1ec>
 80038aa:	2303      	movs	r3, #3
 80038ac:	e004      	b.n	80038b8 <HAL_GPIO_Init+0x1ec>
 80038ae:	2302      	movs	r3, #2
 80038b0:	e002      	b.n	80038b8 <HAL_GPIO_Init+0x1ec>
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <HAL_GPIO_Init+0x1ec>
 80038b6:	2300      	movs	r3, #0
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	2103      	movs	r1, #3
 80038bc:	400a      	ands	r2, r1
 80038be:	0092      	lsls	r2, r2, #2
 80038c0:	4093      	lsls	r3, r2
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038c8:	4935      	ldr	r1, [pc, #212]	; (80039a0 <HAL_GPIO_Init+0x2d4>)
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	089b      	lsrs	r3, r3, #2
 80038ce:	3302      	adds	r3, #2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038d6:	4b37      	ldr	r3, [pc, #220]	; (80039b4 <HAL_GPIO_Init+0x2e8>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	43da      	mvns	r2, r3
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	4013      	ands	r3, r2
 80038e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	2380      	movs	r3, #128	; 0x80
 80038ec:	035b      	lsls	r3, r3, #13
 80038ee:	4013      	ands	r3, r2
 80038f0:	d003      	beq.n	80038fa <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80038fa:	4b2e      	ldr	r3, [pc, #184]	; (80039b4 <HAL_GPIO_Init+0x2e8>)
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003900:	4b2c      	ldr	r3, [pc, #176]	; (80039b4 <HAL_GPIO_Init+0x2e8>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	43da      	mvns	r2, r3
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	4013      	ands	r3, r2
 800390e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	2380      	movs	r3, #128	; 0x80
 8003916:	039b      	lsls	r3, r3, #14
 8003918:	4013      	ands	r3, r2
 800391a:	d003      	beq.n	8003924 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	4313      	orrs	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003924:	4b23      	ldr	r3, [pc, #140]	; (80039b4 <HAL_GPIO_Init+0x2e8>)
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800392a:	4b22      	ldr	r3, [pc, #136]	; (80039b4 <HAL_GPIO_Init+0x2e8>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	43da      	mvns	r2, r3
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	4013      	ands	r3, r2
 8003938:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	2380      	movs	r3, #128	; 0x80
 8003940:	029b      	lsls	r3, r3, #10
 8003942:	4013      	ands	r3, r2
 8003944:	d003      	beq.n	800394e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4313      	orrs	r3, r2
 800394c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800394e:	4b19      	ldr	r3, [pc, #100]	; (80039b4 <HAL_GPIO_Init+0x2e8>)
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003954:	4b17      	ldr	r3, [pc, #92]	; (80039b4 <HAL_GPIO_Init+0x2e8>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	43da      	mvns	r2, r3
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	4013      	ands	r3, r2
 8003962:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	2380      	movs	r3, #128	; 0x80
 800396a:	025b      	lsls	r3, r3, #9
 800396c:	4013      	ands	r3, r2
 800396e:	d003      	beq.n	8003978 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	4313      	orrs	r3, r2
 8003976:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003978:	4b0e      	ldr	r3, [pc, #56]	; (80039b4 <HAL_GPIO_Init+0x2e8>)
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	3301      	adds	r3, #1
 8003982:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	40da      	lsrs	r2, r3
 800398c:	1e13      	subs	r3, r2, #0
 800398e:	d000      	beq.n	8003992 <HAL_GPIO_Init+0x2c6>
 8003990:	e6a8      	b.n	80036e4 <HAL_GPIO_Init+0x18>
  }
}
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	46c0      	nop			; (mov r8, r8)
 8003996:	46bd      	mov	sp, r7
 8003998:	b006      	add	sp, #24
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40021000 	.word	0x40021000
 80039a0:	40010000 	.word	0x40010000
 80039a4:	50000400 	.word	0x50000400
 80039a8:	50000800 	.word	0x50000800
 80039ac:	50000c00 	.word	0x50000c00
 80039b0:	50001c00 	.word	0x50001c00
 80039b4:	40010400 	.word	0x40010400

080039b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e082      	b.n	8003ad0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2241      	movs	r2, #65	; 0x41
 80039ce:	5c9b      	ldrb	r3, [r3, r2]
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d107      	bne.n	80039e6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2240      	movs	r2, #64	; 0x40
 80039da:	2100      	movs	r1, #0
 80039dc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	0018      	movs	r0, r3
 80039e2:	f7ff fa89 	bl	8002ef8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2241      	movs	r2, #65	; 0x41
 80039ea:	2124      	movs	r1, #36	; 0x24
 80039ec:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2101      	movs	r1, #1
 80039fa:	438a      	bics	r2, r1
 80039fc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4934      	ldr	r1, [pc, #208]	; (8003ad8 <HAL_I2C_Init+0x120>)
 8003a08:	400a      	ands	r2, r1
 8003a0a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689a      	ldr	r2, [r3, #8]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4931      	ldr	r1, [pc, #196]	; (8003adc <HAL_I2C_Init+0x124>)
 8003a18:	400a      	ands	r2, r1
 8003a1a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d108      	bne.n	8003a36 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2180      	movs	r1, #128	; 0x80
 8003a2e:	0209      	lsls	r1, r1, #8
 8003a30:	430a      	orrs	r2, r1
 8003a32:	609a      	str	r2, [r3, #8]
 8003a34:	e007      	b.n	8003a46 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689a      	ldr	r2, [r3, #8]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2184      	movs	r1, #132	; 0x84
 8003a40:	0209      	lsls	r1, r1, #8
 8003a42:	430a      	orrs	r2, r1
 8003a44:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d104      	bne.n	8003a58 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2280      	movs	r2, #128	; 0x80
 8003a54:	0112      	lsls	r2, r2, #4
 8003a56:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	491f      	ldr	r1, [pc, #124]	; (8003ae0 <HAL_I2C_Init+0x128>)
 8003a64:	430a      	orrs	r2, r1
 8003a66:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	491a      	ldr	r1, [pc, #104]	; (8003adc <HAL_I2C_Init+0x124>)
 8003a74:	400a      	ands	r2, r1
 8003a76:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	691a      	ldr	r2, [r3, #16]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	431a      	orrs	r2, r3
 8003a82:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	69d9      	ldr	r1, [r3, #28]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1a      	ldr	r2, [r3, #32]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2101      	movs	r1, #1
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2241      	movs	r2, #65	; 0x41
 8003abc:	2120      	movs	r1, #32
 8003abe:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2242      	movs	r2, #66	; 0x42
 8003aca:	2100      	movs	r1, #0
 8003acc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	b002      	add	sp, #8
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	f0ffffff 	.word	0xf0ffffff
 8003adc:	ffff7fff 	.word	0xffff7fff
 8003ae0:	02008000 	.word	0x02008000

08003ae4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003ae4:	b590      	push	{r4, r7, lr}
 8003ae6:	b089      	sub	sp, #36	; 0x24
 8003ae8:	af02      	add	r7, sp, #8
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	0008      	movs	r0, r1
 8003aee:	607a      	str	r2, [r7, #4]
 8003af0:	0019      	movs	r1, r3
 8003af2:	230a      	movs	r3, #10
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	1c02      	adds	r2, r0, #0
 8003af8:	801a      	strh	r2, [r3, #0]
 8003afa:	2308      	movs	r3, #8
 8003afc:	18fb      	adds	r3, r7, r3
 8003afe:	1c0a      	adds	r2, r1, #0
 8003b00:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2241      	movs	r2, #65	; 0x41
 8003b06:	5c9b      	ldrb	r3, [r3, r2]
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b20      	cmp	r3, #32
 8003b0c:	d000      	beq.n	8003b10 <HAL_I2C_Master_Transmit+0x2c>
 8003b0e:	e0e7      	b.n	8003ce0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2240      	movs	r2, #64	; 0x40
 8003b14:	5c9b      	ldrb	r3, [r3, r2]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d101      	bne.n	8003b1e <HAL_I2C_Master_Transmit+0x3a>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e0e1      	b.n	8003ce2 <HAL_I2C_Master_Transmit+0x1fe>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2240      	movs	r2, #64	; 0x40
 8003b22:	2101      	movs	r1, #1
 8003b24:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b26:	f7ff fcef 	bl	8003508 <HAL_GetTick>
 8003b2a:	0003      	movs	r3, r0
 8003b2c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b2e:	2380      	movs	r3, #128	; 0x80
 8003b30:	0219      	lsls	r1, r3, #8
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	2319      	movs	r3, #25
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f000 fa04 	bl	8003f48 <I2C_WaitOnFlagUntilTimeout>
 8003b40:	1e03      	subs	r3, r0, #0
 8003b42:	d001      	beq.n	8003b48 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0cc      	b.n	8003ce2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2241      	movs	r2, #65	; 0x41
 8003b4c:	2121      	movs	r1, #33	; 0x21
 8003b4e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2242      	movs	r2, #66	; 0x42
 8003b54:	2110      	movs	r1, #16
 8003b56:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2208      	movs	r2, #8
 8003b68:	18ba      	adds	r2, r7, r2
 8003b6a:	8812      	ldrh	r2, [r2, #0]
 8003b6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	2bff      	cmp	r3, #255	; 0xff
 8003b7c:	d911      	bls.n	8003ba2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	22ff      	movs	r2, #255	; 0xff
 8003b82:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	2380      	movs	r3, #128	; 0x80
 8003b8c:	045c      	lsls	r4, r3, #17
 8003b8e:	230a      	movs	r3, #10
 8003b90:	18fb      	adds	r3, r7, r3
 8003b92:	8819      	ldrh	r1, [r3, #0]
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	4b55      	ldr	r3, [pc, #340]	; (8003cec <HAL_I2C_Master_Transmit+0x208>)
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	0023      	movs	r3, r4
 8003b9c:	f000 fc2e 	bl	80043fc <I2C_TransferConfig>
 8003ba0:	e075      	b.n	8003c8e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	2380      	movs	r3, #128	; 0x80
 8003bb4:	049c      	lsls	r4, r3, #18
 8003bb6:	230a      	movs	r3, #10
 8003bb8:	18fb      	adds	r3, r7, r3
 8003bba:	8819      	ldrh	r1, [r3, #0]
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	4b4b      	ldr	r3, [pc, #300]	; (8003cec <HAL_I2C_Master_Transmit+0x208>)
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	0023      	movs	r3, r4
 8003bc4:	f000 fc1a 	bl	80043fc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003bc8:	e061      	b.n	8003c8e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f000 fa07 	bl	8003fe4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bd6:	1e03      	subs	r3, r0, #0
 8003bd8:	d001      	beq.n	8003bde <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e081      	b.n	8003ce2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	781a      	ldrb	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	1c5a      	adds	r2, r3, #1
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d03a      	beq.n	8003c8e <HAL_I2C_Master_Transmit+0x1aa>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d136      	bne.n	8003c8e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	0013      	movs	r3, r2
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	2180      	movs	r1, #128	; 0x80
 8003c2e:	f000 f98b 	bl	8003f48 <I2C_WaitOnFlagUntilTimeout>
 8003c32:	1e03      	subs	r3, r0, #0
 8003c34:	d001      	beq.n	8003c3a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e053      	b.n	8003ce2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	2bff      	cmp	r3, #255	; 0xff
 8003c42:	d911      	bls.n	8003c68 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	22ff      	movs	r2, #255	; 0xff
 8003c48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	2380      	movs	r3, #128	; 0x80
 8003c52:	045c      	lsls	r4, r3, #17
 8003c54:	230a      	movs	r3, #10
 8003c56:	18fb      	adds	r3, r7, r3
 8003c58:	8819      	ldrh	r1, [r3, #0]
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	0023      	movs	r3, r4
 8003c62:	f000 fbcb 	bl	80043fc <I2C_TransferConfig>
 8003c66:	e012      	b.n	8003c8e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	2380      	movs	r3, #128	; 0x80
 8003c7a:	049c      	lsls	r4, r3, #18
 8003c7c:	230a      	movs	r3, #10
 8003c7e:	18fb      	adds	r3, r7, r3
 8003c80:	8819      	ldrh	r1, [r3, #0]
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	2300      	movs	r3, #0
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	0023      	movs	r3, r4
 8003c8a:	f000 fbb7 	bl	80043fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d198      	bne.n	8003bca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f000 f9e6 	bl	8004070 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ca4:	1e03      	subs	r3, r0, #0
 8003ca6:	d001      	beq.n	8003cac <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e01a      	b.n	8003ce2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	490c      	ldr	r1, [pc, #48]	; (8003cf0 <HAL_I2C_Master_Transmit+0x20c>)
 8003cc0:	400a      	ands	r2, r1
 8003cc2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2241      	movs	r2, #65	; 0x41
 8003cc8:	2120      	movs	r1, #32
 8003cca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2242      	movs	r2, #66	; 0x42
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2240      	movs	r2, #64	; 0x40
 8003cd8:	2100      	movs	r1, #0
 8003cda:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	e000      	b.n	8003ce2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003ce0:	2302      	movs	r3, #2
  }
}
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	b007      	add	sp, #28
 8003ce8:	bd90      	pop	{r4, r7, pc}
 8003cea:	46c0      	nop			; (mov r8, r8)
 8003cec:	80002000 	.word	0x80002000
 8003cf0:	fe00e800 	.word	0xfe00e800

08003cf4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003cf4:	b590      	push	{r4, r7, lr}
 8003cf6:	b089      	sub	sp, #36	; 0x24
 8003cf8:	af02      	add	r7, sp, #8
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	0008      	movs	r0, r1
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	0019      	movs	r1, r3
 8003d02:	230a      	movs	r3, #10
 8003d04:	18fb      	adds	r3, r7, r3
 8003d06:	1c02      	adds	r2, r0, #0
 8003d08:	801a      	strh	r2, [r3, #0]
 8003d0a:	2308      	movs	r3, #8
 8003d0c:	18fb      	adds	r3, r7, r3
 8003d0e:	1c0a      	adds	r2, r1, #0
 8003d10:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2241      	movs	r2, #65	; 0x41
 8003d16:	5c9b      	ldrb	r3, [r3, r2]
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b20      	cmp	r3, #32
 8003d1c:	d000      	beq.n	8003d20 <HAL_I2C_Master_Receive+0x2c>
 8003d1e:	e0e8      	b.n	8003ef2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2240      	movs	r2, #64	; 0x40
 8003d24:	5c9b      	ldrb	r3, [r3, r2]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d101      	bne.n	8003d2e <HAL_I2C_Master_Receive+0x3a>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	e0e2      	b.n	8003ef4 <HAL_I2C_Master_Receive+0x200>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2240      	movs	r2, #64	; 0x40
 8003d32:	2101      	movs	r1, #1
 8003d34:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d36:	f7ff fbe7 	bl	8003508 <HAL_GetTick>
 8003d3a:	0003      	movs	r3, r0
 8003d3c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d3e:	2380      	movs	r3, #128	; 0x80
 8003d40:	0219      	lsls	r1, r3, #8
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	2319      	movs	r3, #25
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f000 f8fc 	bl	8003f48 <I2C_WaitOnFlagUntilTimeout>
 8003d50:	1e03      	subs	r3, r0, #0
 8003d52:	d001      	beq.n	8003d58 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0cd      	b.n	8003ef4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2241      	movs	r2, #65	; 0x41
 8003d5c:	2122      	movs	r1, #34	; 0x22
 8003d5e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2242      	movs	r2, #66	; 0x42
 8003d64:	2110      	movs	r1, #16
 8003d66:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2208      	movs	r2, #8
 8003d78:	18ba      	adds	r2, r7, r2
 8003d7a:	8812      	ldrh	r2, [r2, #0]
 8003d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	2bff      	cmp	r3, #255	; 0xff
 8003d8c:	d911      	bls.n	8003db2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	22ff      	movs	r2, #255	; 0xff
 8003d92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	2380      	movs	r3, #128	; 0x80
 8003d9c:	045c      	lsls	r4, r3, #17
 8003d9e:	230a      	movs	r3, #10
 8003da0:	18fb      	adds	r3, r7, r3
 8003da2:	8819      	ldrh	r1, [r3, #0]
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	4b55      	ldr	r3, [pc, #340]	; (8003efc <HAL_I2C_Master_Receive+0x208>)
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	0023      	movs	r3, r4
 8003dac:	f000 fb26 	bl	80043fc <I2C_TransferConfig>
 8003db0:	e076      	b.n	8003ea0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	2380      	movs	r3, #128	; 0x80
 8003dc4:	049c      	lsls	r4, r3, #18
 8003dc6:	230a      	movs	r3, #10
 8003dc8:	18fb      	adds	r3, r7, r3
 8003dca:	8819      	ldrh	r1, [r3, #0]
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	4b4b      	ldr	r3, [pc, #300]	; (8003efc <HAL_I2C_Master_Receive+0x208>)
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	0023      	movs	r3, r4
 8003dd4:	f000 fb12 	bl	80043fc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003dd8:	e062      	b.n	8003ea0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	0018      	movs	r0, r3
 8003de2:	f000 f989 	bl	80040f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003de6:	1e03      	subs	r3, r0, #0
 8003de8:	d001      	beq.n	8003dee <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e082      	b.n	8003ef4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df8:	b2d2      	uxtb	r2, r2
 8003dfa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	1c5a      	adds	r2, r3, #1
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d03a      	beq.n	8003ea0 <HAL_I2C_Master_Receive+0x1ac>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d136      	bne.n	8003ea0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	0013      	movs	r3, r2
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	2180      	movs	r1, #128	; 0x80
 8003e40:	f000 f882 	bl	8003f48 <I2C_WaitOnFlagUntilTimeout>
 8003e44:	1e03      	subs	r3, r0, #0
 8003e46:	d001      	beq.n	8003e4c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e053      	b.n	8003ef4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	2bff      	cmp	r3, #255	; 0xff
 8003e54:	d911      	bls.n	8003e7a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	22ff      	movs	r2, #255	; 0xff
 8003e5a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	2380      	movs	r3, #128	; 0x80
 8003e64:	045c      	lsls	r4, r3, #17
 8003e66:	230a      	movs	r3, #10
 8003e68:	18fb      	adds	r3, r7, r3
 8003e6a:	8819      	ldrh	r1, [r3, #0]
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	2300      	movs	r3, #0
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	0023      	movs	r3, r4
 8003e74:	f000 fac2 	bl	80043fc <I2C_TransferConfig>
 8003e78:	e012      	b.n	8003ea0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	2380      	movs	r3, #128	; 0x80
 8003e8c:	049c      	lsls	r4, r3, #18
 8003e8e:	230a      	movs	r3, #10
 8003e90:	18fb      	adds	r3, r7, r3
 8003e92:	8819      	ldrh	r1, [r3, #0]
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	2300      	movs	r3, #0
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	0023      	movs	r3, r4
 8003e9c:	f000 faae 	bl	80043fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d197      	bne.n	8003dda <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f000 f8dd 	bl	8004070 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003eb6:	1e03      	subs	r3, r0, #0
 8003eb8:	d001      	beq.n	8003ebe <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e01a      	b.n	8003ef4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	490b      	ldr	r1, [pc, #44]	; (8003f00 <HAL_I2C_Master_Receive+0x20c>)
 8003ed2:	400a      	ands	r2, r1
 8003ed4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2241      	movs	r2, #65	; 0x41
 8003eda:	2120      	movs	r1, #32
 8003edc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2242      	movs	r2, #66	; 0x42
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2240      	movs	r2, #64	; 0x40
 8003eea:	2100      	movs	r1, #0
 8003eec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	e000      	b.n	8003ef4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003ef2:	2302      	movs	r3, #2
  }
}
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	b007      	add	sp, #28
 8003efa:	bd90      	pop	{r4, r7, pc}
 8003efc:	80002400 	.word	0x80002400
 8003f00:	fe00e800 	.word	0xfe00e800

08003f04 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	2202      	movs	r2, #2
 8003f14:	4013      	ands	r3, r2
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d103      	bne.n	8003f22 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d007      	beq.n	8003f40 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	699a      	ldr	r2, [r3, #24]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	619a      	str	r2, [r3, #24]
  }
}
 8003f40:	46c0      	nop			; (mov r8, r8)
 8003f42:	46bd      	mov	sp, r7
 8003f44:	b002      	add	sp, #8
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	603b      	str	r3, [r7, #0]
 8003f54:	1dfb      	adds	r3, r7, #7
 8003f56:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f58:	e030      	b.n	8003fbc <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	d02d      	beq.n	8003fbc <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f60:	f7ff fad2 	bl	8003508 <HAL_GetTick>
 8003f64:	0002      	movs	r2, r0
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d302      	bcc.n	8003f76 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d122      	bne.n	8003fbc <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	425a      	negs	r2, r3
 8003f86:	4153      	adcs	r3, r2
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	001a      	movs	r2, r3
 8003f8c:	1dfb      	adds	r3, r7, #7
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d113      	bne.n	8003fbc <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f98:	2220      	movs	r2, #32
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2241      	movs	r2, #65	; 0x41
 8003fa4:	2120      	movs	r1, #32
 8003fa6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2242      	movs	r2, #66	; 0x42
 8003fac:	2100      	movs	r1, #0
 8003fae:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2240      	movs	r2, #64	; 0x40
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e00f      	b.n	8003fdc <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	425a      	negs	r2, r3
 8003fcc:	4153      	adcs	r3, r2
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	001a      	movs	r2, r3
 8003fd2:	1dfb      	adds	r3, r7, #7
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d0bf      	beq.n	8003f5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	0018      	movs	r0, r3
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	b004      	add	sp, #16
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ff0:	e032      	b.n	8004058 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	68b9      	ldr	r1, [r7, #8]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	f000 f8ff 	bl	80041fc <I2C_IsErrorOccurred>
 8003ffe:	1e03      	subs	r3, r0, #0
 8004000:	d001      	beq.n	8004006 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e030      	b.n	8004068 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	3301      	adds	r3, #1
 800400a:	d025      	beq.n	8004058 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800400c:	f7ff fa7c 	bl	8003508 <HAL_GetTick>
 8004010:	0002      	movs	r2, r0
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	429a      	cmp	r2, r3
 800401a:	d302      	bcc.n	8004022 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d11a      	bne.n	8004058 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	2202      	movs	r2, #2
 800402a:	4013      	ands	r3, r2
 800402c:	2b02      	cmp	r3, #2
 800402e:	d013      	beq.n	8004058 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004034:	2220      	movs	r2, #32
 8004036:	431a      	orrs	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2241      	movs	r2, #65	; 0x41
 8004040:	2120      	movs	r1, #32
 8004042:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2242      	movs	r2, #66	; 0x42
 8004048:	2100      	movs	r1, #0
 800404a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2240      	movs	r2, #64	; 0x40
 8004050:	2100      	movs	r1, #0
 8004052:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e007      	b.n	8004068 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	2202      	movs	r2, #2
 8004060:	4013      	ands	r3, r2
 8004062:	2b02      	cmp	r3, #2
 8004064:	d1c5      	bne.n	8003ff2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	0018      	movs	r0, r3
 800406a:	46bd      	mov	sp, r7
 800406c:	b004      	add	sp, #16
 800406e:	bd80      	pop	{r7, pc}

08004070 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800407c:	e02f      	b.n	80040de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	68b9      	ldr	r1, [r7, #8]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	0018      	movs	r0, r3
 8004086:	f000 f8b9 	bl	80041fc <I2C_IsErrorOccurred>
 800408a:	1e03      	subs	r3, r0, #0
 800408c:	d001      	beq.n	8004092 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e02d      	b.n	80040ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004092:	f7ff fa39 	bl	8003508 <HAL_GetTick>
 8004096:	0002      	movs	r2, r0
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d302      	bcc.n	80040a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d11a      	bne.n	80040de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	2220      	movs	r2, #32
 80040b0:	4013      	ands	r3, r2
 80040b2:	2b20      	cmp	r3, #32
 80040b4:	d013      	beq.n	80040de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ba:	2220      	movs	r2, #32
 80040bc:	431a      	orrs	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2241      	movs	r2, #65	; 0x41
 80040c6:	2120      	movs	r1, #32
 80040c8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2242      	movs	r2, #66	; 0x42
 80040ce:	2100      	movs	r1, #0
 80040d0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2240      	movs	r2, #64	; 0x40
 80040d6:	2100      	movs	r1, #0
 80040d8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e007      	b.n	80040ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	2220      	movs	r2, #32
 80040e6:	4013      	ands	r3, r2
 80040e8:	2b20      	cmp	r3, #32
 80040ea:	d1c8      	bne.n	800407e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	0018      	movs	r0, r3
 80040f0:	46bd      	mov	sp, r7
 80040f2:	b004      	add	sp, #16
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004104:	e06b      	b.n	80041de <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	68b9      	ldr	r1, [r7, #8]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	0018      	movs	r0, r3
 800410e:	f000 f875 	bl	80041fc <I2C_IsErrorOccurred>
 8004112:	1e03      	subs	r3, r0, #0
 8004114:	d001      	beq.n	800411a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e069      	b.n	80041ee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	2220      	movs	r2, #32
 8004122:	4013      	ands	r3, r2
 8004124:	2b20      	cmp	r3, #32
 8004126:	d138      	bne.n	800419a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	2204      	movs	r2, #4
 8004130:	4013      	ands	r3, r2
 8004132:	2b04      	cmp	r3, #4
 8004134:	d105      	bne.n	8004142 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800413e:	2300      	movs	r3, #0
 8004140:	e055      	b.n	80041ee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	2210      	movs	r2, #16
 800414a:	4013      	ands	r3, r2
 800414c:	2b10      	cmp	r3, #16
 800414e:	d107      	bne.n	8004160 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2210      	movs	r2, #16
 8004156:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2204      	movs	r2, #4
 800415c:	645a      	str	r2, [r3, #68]	; 0x44
 800415e:	e002      	b.n	8004166 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2220      	movs	r2, #32
 800416c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	491f      	ldr	r1, [pc, #124]	; (80041f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800417a:	400a      	ands	r2, r1
 800417c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2241      	movs	r2, #65	; 0x41
 8004182:	2120      	movs	r1, #32
 8004184:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2242      	movs	r2, #66	; 0x42
 800418a:	2100      	movs	r1, #0
 800418c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2240      	movs	r2, #64	; 0x40
 8004192:	2100      	movs	r1, #0
 8004194:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e029      	b.n	80041ee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800419a:	f7ff f9b5 	bl	8003508 <HAL_GetTick>
 800419e:	0002      	movs	r2, r0
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d302      	bcc.n	80041b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d116      	bne.n	80041de <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	2204      	movs	r2, #4
 80041b8:	4013      	ands	r3, r2
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	d00f      	beq.n	80041de <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c2:	2220      	movs	r2, #32
 80041c4:	431a      	orrs	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2241      	movs	r2, #65	; 0x41
 80041ce:	2120      	movs	r1, #32
 80041d0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2240      	movs	r2, #64	; 0x40
 80041d6:	2100      	movs	r1, #0
 80041d8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e007      	b.n	80041ee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	2204      	movs	r2, #4
 80041e6:	4013      	ands	r3, r2
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d18c      	bne.n	8004106 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	0018      	movs	r0, r3
 80041f0:	46bd      	mov	sp, r7
 80041f2:	b004      	add	sp, #16
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	46c0      	nop			; (mov r8, r8)
 80041f8:	fe00e800 	.word	0xfe00e800

080041fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041fc:	b590      	push	{r4, r7, lr}
 80041fe:	b08b      	sub	sp, #44	; 0x2c
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004208:	2327      	movs	r3, #39	; 0x27
 800420a:	18fb      	adds	r3, r7, r3
 800420c:	2200      	movs	r2, #0
 800420e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004218:	2300      	movs	r3, #0
 800421a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	2210      	movs	r2, #16
 8004224:	4013      	ands	r3, r2
 8004226:	d100      	bne.n	800422a <I2C_IsErrorOccurred+0x2e>
 8004228:	e082      	b.n	8004330 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2210      	movs	r2, #16
 8004230:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004232:	e060      	b.n	80042f6 <I2C_IsErrorOccurred+0xfa>
 8004234:	2427      	movs	r4, #39	; 0x27
 8004236:	193b      	adds	r3, r7, r4
 8004238:	193a      	adds	r2, r7, r4
 800423a:	7812      	ldrb	r2, [r2, #0]
 800423c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	3301      	adds	r3, #1
 8004242:	d058      	beq.n	80042f6 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004244:	f7ff f960 	bl	8003508 <HAL_GetTick>
 8004248:	0002      	movs	r2, r0
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	429a      	cmp	r2, r3
 8004252:	d306      	bcc.n	8004262 <I2C_IsErrorOccurred+0x66>
 8004254:	193b      	adds	r3, r7, r4
 8004256:	193a      	adds	r2, r7, r4
 8004258:	7812      	ldrb	r2, [r2, #0]
 800425a:	701a      	strb	r2, [r3, #0]
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d149      	bne.n	80042f6 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	2380      	movs	r3, #128	; 0x80
 800426a:	01db      	lsls	r3, r3, #7
 800426c:	4013      	ands	r3, r2
 800426e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004270:	2013      	movs	r0, #19
 8004272:	183b      	adds	r3, r7, r0
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	2142      	movs	r1, #66	; 0x42
 8004278:	5c52      	ldrb	r2, [r2, r1]
 800427a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699a      	ldr	r2, [r3, #24]
 8004282:	2380      	movs	r3, #128	; 0x80
 8004284:	021b      	lsls	r3, r3, #8
 8004286:	401a      	ands	r2, r3
 8004288:	2380      	movs	r3, #128	; 0x80
 800428a:	021b      	lsls	r3, r3, #8
 800428c:	429a      	cmp	r2, r3
 800428e:	d126      	bne.n	80042de <I2C_IsErrorOccurred+0xe2>
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	2380      	movs	r3, #128	; 0x80
 8004294:	01db      	lsls	r3, r3, #7
 8004296:	429a      	cmp	r2, r3
 8004298:	d021      	beq.n	80042de <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800429a:	183b      	adds	r3, r7, r0
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	2b20      	cmp	r3, #32
 80042a0:	d01d      	beq.n	80042de <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2180      	movs	r1, #128	; 0x80
 80042ae:	01c9      	lsls	r1, r1, #7
 80042b0:	430a      	orrs	r2, r1
 80042b2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80042b4:	f7ff f928 	bl	8003508 <HAL_GetTick>
 80042b8:	0003      	movs	r3, r0
 80042ba:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042bc:	e00f      	b.n	80042de <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80042be:	f7ff f923 	bl	8003508 <HAL_GetTick>
 80042c2:	0002      	movs	r2, r0
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b19      	cmp	r3, #25
 80042ca:	d908      	bls.n	80042de <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80042cc:	6a3b      	ldr	r3, [r7, #32]
 80042ce:	2220      	movs	r2, #32
 80042d0:	4313      	orrs	r3, r2
 80042d2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80042d4:	2327      	movs	r3, #39	; 0x27
 80042d6:	18fb      	adds	r3, r7, r3
 80042d8:	2201      	movs	r2, #1
 80042da:	701a      	strb	r2, [r3, #0]

              break;
 80042dc:	e00b      	b.n	80042f6 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	2220      	movs	r2, #32
 80042e6:	4013      	ands	r3, r2
 80042e8:	2127      	movs	r1, #39	; 0x27
 80042ea:	187a      	adds	r2, r7, r1
 80042ec:	1879      	adds	r1, r7, r1
 80042ee:	7809      	ldrb	r1, [r1, #0]
 80042f0:	7011      	strb	r1, [r2, #0]
 80042f2:	2b20      	cmp	r3, #32
 80042f4:	d1e3      	bne.n	80042be <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	2220      	movs	r2, #32
 80042fe:	4013      	ands	r3, r2
 8004300:	2b20      	cmp	r3, #32
 8004302:	d004      	beq.n	800430e <I2C_IsErrorOccurred+0x112>
 8004304:	2327      	movs	r3, #39	; 0x27
 8004306:	18fb      	adds	r3, r7, r3
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d092      	beq.n	8004234 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800430e:	2327      	movs	r3, #39	; 0x27
 8004310:	18fb      	adds	r3, r7, r3
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d103      	bne.n	8004320 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2220      	movs	r2, #32
 800431e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	2204      	movs	r2, #4
 8004324:	4313      	orrs	r3, r2
 8004326:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004328:	2327      	movs	r3, #39	; 0x27
 800432a:	18fb      	adds	r3, r7, r3
 800432c:	2201      	movs	r2, #1
 800432e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	2380      	movs	r3, #128	; 0x80
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	4013      	ands	r3, r2
 8004340:	d00c      	beq.n	800435c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	2201      	movs	r2, #1
 8004346:	4313      	orrs	r3, r2
 8004348:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2280      	movs	r2, #128	; 0x80
 8004350:	0052      	lsls	r2, r2, #1
 8004352:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004354:	2327      	movs	r3, #39	; 0x27
 8004356:	18fb      	adds	r3, r7, r3
 8004358:	2201      	movs	r2, #1
 800435a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	2380      	movs	r3, #128	; 0x80
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	4013      	ands	r3, r2
 8004364:	d00c      	beq.n	8004380 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004366:	6a3b      	ldr	r3, [r7, #32]
 8004368:	2208      	movs	r2, #8
 800436a:	4313      	orrs	r3, r2
 800436c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2280      	movs	r2, #128	; 0x80
 8004374:	00d2      	lsls	r2, r2, #3
 8004376:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004378:	2327      	movs	r3, #39	; 0x27
 800437a:	18fb      	adds	r3, r7, r3
 800437c:	2201      	movs	r2, #1
 800437e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	2380      	movs	r3, #128	; 0x80
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4013      	ands	r3, r2
 8004388:	d00c      	beq.n	80043a4 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	2202      	movs	r2, #2
 800438e:	4313      	orrs	r3, r2
 8004390:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2280      	movs	r2, #128	; 0x80
 8004398:	0092      	lsls	r2, r2, #2
 800439a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800439c:	2327      	movs	r3, #39	; 0x27
 800439e:	18fb      	adds	r3, r7, r3
 80043a0:	2201      	movs	r2, #1
 80043a2:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80043a4:	2327      	movs	r3, #39	; 0x27
 80043a6:	18fb      	adds	r3, r7, r3
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d01d      	beq.n	80043ea <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	0018      	movs	r0, r3
 80043b2:	f7ff fda7 	bl	8003f04 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	490d      	ldr	r1, [pc, #52]	; (80043f8 <I2C_IsErrorOccurred+0x1fc>)
 80043c2:	400a      	ands	r2, r1
 80043c4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	431a      	orrs	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2241      	movs	r2, #65	; 0x41
 80043d6:	2120      	movs	r1, #32
 80043d8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2242      	movs	r2, #66	; 0x42
 80043de:	2100      	movs	r1, #0
 80043e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2240      	movs	r2, #64	; 0x40
 80043e6:	2100      	movs	r1, #0
 80043e8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80043ea:	2327      	movs	r3, #39	; 0x27
 80043ec:	18fb      	adds	r3, r7, r3
 80043ee:	781b      	ldrb	r3, [r3, #0]
}
 80043f0:	0018      	movs	r0, r3
 80043f2:	46bd      	mov	sp, r7
 80043f4:	b00b      	add	sp, #44	; 0x2c
 80043f6:	bd90      	pop	{r4, r7, pc}
 80043f8:	fe00e800 	.word	0xfe00e800

080043fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80043fc:	b590      	push	{r4, r7, lr}
 80043fe:	b087      	sub	sp, #28
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	0008      	movs	r0, r1
 8004406:	0011      	movs	r1, r2
 8004408:	607b      	str	r3, [r7, #4]
 800440a:	240a      	movs	r4, #10
 800440c:	193b      	adds	r3, r7, r4
 800440e:	1c02      	adds	r2, r0, #0
 8004410:	801a      	strh	r2, [r3, #0]
 8004412:	2009      	movs	r0, #9
 8004414:	183b      	adds	r3, r7, r0
 8004416:	1c0a      	adds	r2, r1, #0
 8004418:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800441a:	193b      	adds	r3, r7, r4
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	059b      	lsls	r3, r3, #22
 8004420:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004422:	183b      	adds	r3, r7, r0
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	0419      	lsls	r1, r3, #16
 8004428:	23ff      	movs	r3, #255	; 0xff
 800442a:	041b      	lsls	r3, r3, #16
 800442c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800442e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004436:	4313      	orrs	r3, r2
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	085b      	lsrs	r3, r3, #1
 800443c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004446:	0d51      	lsrs	r1, r2, #21
 8004448:	2280      	movs	r2, #128	; 0x80
 800444a:	00d2      	lsls	r2, r2, #3
 800444c:	400a      	ands	r2, r1
 800444e:	4907      	ldr	r1, [pc, #28]	; (800446c <I2C_TransferConfig+0x70>)
 8004450:	430a      	orrs	r2, r1
 8004452:	43d2      	mvns	r2, r2
 8004454:	401a      	ands	r2, r3
 8004456:	0011      	movs	r1, r2
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	430a      	orrs	r2, r1
 8004460:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004462:	46c0      	nop			; (mov r8, r8)
 8004464:	46bd      	mov	sp, r7
 8004466:	b007      	add	sp, #28
 8004468:	bd90      	pop	{r4, r7, pc}
 800446a:	46c0      	nop			; (mov r8, r8)
 800446c:	03ff63ff 	.word	0x03ff63ff

08004470 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2241      	movs	r2, #65	; 0x41
 800447e:	5c9b      	ldrb	r3, [r3, r2]
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b20      	cmp	r3, #32
 8004484:	d138      	bne.n	80044f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2240      	movs	r2, #64	; 0x40
 800448a:	5c9b      	ldrb	r3, [r3, r2]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d101      	bne.n	8004494 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004490:	2302      	movs	r3, #2
 8004492:	e032      	b.n	80044fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2240      	movs	r2, #64	; 0x40
 8004498:	2101      	movs	r1, #1
 800449a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2241      	movs	r2, #65	; 0x41
 80044a0:	2124      	movs	r1, #36	; 0x24
 80044a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2101      	movs	r1, #1
 80044b0:	438a      	bics	r2, r1
 80044b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4911      	ldr	r1, [pc, #68]	; (8004504 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80044c0:	400a      	ands	r2, r1
 80044c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6819      	ldr	r1, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2101      	movs	r1, #1
 80044e0:	430a      	orrs	r2, r1
 80044e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2241      	movs	r2, #65	; 0x41
 80044e8:	2120      	movs	r1, #32
 80044ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2240      	movs	r2, #64	; 0x40
 80044f0:	2100      	movs	r1, #0
 80044f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80044f4:	2300      	movs	r3, #0
 80044f6:	e000      	b.n	80044fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80044f8:	2302      	movs	r3, #2
  }
}
 80044fa:	0018      	movs	r0, r3
 80044fc:	46bd      	mov	sp, r7
 80044fe:	b002      	add	sp, #8
 8004500:	bd80      	pop	{r7, pc}
 8004502:	46c0      	nop			; (mov r8, r8)
 8004504:	ffffefff 	.word	0xffffefff

08004508 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2241      	movs	r2, #65	; 0x41
 8004516:	5c9b      	ldrb	r3, [r3, r2]
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b20      	cmp	r3, #32
 800451c:	d139      	bne.n	8004592 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2240      	movs	r2, #64	; 0x40
 8004522:	5c9b      	ldrb	r3, [r3, r2]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d101      	bne.n	800452c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004528:	2302      	movs	r3, #2
 800452a:	e033      	b.n	8004594 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2240      	movs	r2, #64	; 0x40
 8004530:	2101      	movs	r1, #1
 8004532:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2241      	movs	r2, #65	; 0x41
 8004538:	2124      	movs	r1, #36	; 0x24
 800453a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2101      	movs	r1, #1
 8004548:	438a      	bics	r2, r1
 800454a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4a11      	ldr	r2, [pc, #68]	; (800459c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004558:	4013      	ands	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	021b      	lsls	r3, r3, #8
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2101      	movs	r1, #1
 800457a:	430a      	orrs	r2, r1
 800457c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2241      	movs	r2, #65	; 0x41
 8004582:	2120      	movs	r1, #32
 8004584:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2240      	movs	r2, #64	; 0x40
 800458a:	2100      	movs	r1, #0
 800458c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	e000      	b.n	8004594 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004592:	2302      	movs	r3, #2
  }
}
 8004594:	0018      	movs	r0, r3
 8004596:	46bd      	mov	sp, r7
 8004598:	b004      	add	sp, #16
 800459a:	bd80      	pop	{r7, pc}
 800459c:	fffff0ff 	.word	0xfffff0ff

080045a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045a0:	b5b0      	push	{r4, r5, r7, lr}
 80045a2:	b08a      	sub	sp, #40	; 0x28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d102      	bne.n	80045b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	f000 fbaf 	bl	8004d12 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045b4:	4bcf      	ldr	r3, [pc, #828]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	220c      	movs	r2, #12
 80045ba:	4013      	ands	r3, r2
 80045bc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045be:	4bcd      	ldr	r3, [pc, #820]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 80045c0:	68da      	ldr	r2, [r3, #12]
 80045c2:	2380      	movs	r3, #128	; 0x80
 80045c4:	025b      	lsls	r3, r3, #9
 80045c6:	4013      	ands	r3, r2
 80045c8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2201      	movs	r2, #1
 80045d0:	4013      	ands	r3, r2
 80045d2:	d100      	bne.n	80045d6 <HAL_RCC_OscConfig+0x36>
 80045d4:	e07e      	b.n	80046d4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	2b08      	cmp	r3, #8
 80045da:	d007      	beq.n	80045ec <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80045dc:	6a3b      	ldr	r3, [r7, #32]
 80045de:	2b0c      	cmp	r3, #12
 80045e0:	d112      	bne.n	8004608 <HAL_RCC_OscConfig+0x68>
 80045e2:	69fa      	ldr	r2, [r7, #28]
 80045e4:	2380      	movs	r3, #128	; 0x80
 80045e6:	025b      	lsls	r3, r3, #9
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d10d      	bne.n	8004608 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ec:	4bc1      	ldr	r3, [pc, #772]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	2380      	movs	r3, #128	; 0x80
 80045f2:	029b      	lsls	r3, r3, #10
 80045f4:	4013      	ands	r3, r2
 80045f6:	d100      	bne.n	80045fa <HAL_RCC_OscConfig+0x5a>
 80045f8:	e06b      	b.n	80046d2 <HAL_RCC_OscConfig+0x132>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d167      	bne.n	80046d2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	f000 fb85 	bl	8004d12 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	2380      	movs	r3, #128	; 0x80
 800460e:	025b      	lsls	r3, r3, #9
 8004610:	429a      	cmp	r2, r3
 8004612:	d107      	bne.n	8004624 <HAL_RCC_OscConfig+0x84>
 8004614:	4bb7      	ldr	r3, [pc, #732]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	4bb6      	ldr	r3, [pc, #728]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 800461a:	2180      	movs	r1, #128	; 0x80
 800461c:	0249      	lsls	r1, r1, #9
 800461e:	430a      	orrs	r2, r1
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	e027      	b.n	8004674 <HAL_RCC_OscConfig+0xd4>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	23a0      	movs	r3, #160	; 0xa0
 800462a:	02db      	lsls	r3, r3, #11
 800462c:	429a      	cmp	r2, r3
 800462e:	d10e      	bne.n	800464e <HAL_RCC_OscConfig+0xae>
 8004630:	4bb0      	ldr	r3, [pc, #704]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	4baf      	ldr	r3, [pc, #700]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 8004636:	2180      	movs	r1, #128	; 0x80
 8004638:	02c9      	lsls	r1, r1, #11
 800463a:	430a      	orrs	r2, r1
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	4bad      	ldr	r3, [pc, #692]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	4bac      	ldr	r3, [pc, #688]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 8004644:	2180      	movs	r1, #128	; 0x80
 8004646:	0249      	lsls	r1, r1, #9
 8004648:	430a      	orrs	r2, r1
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	e012      	b.n	8004674 <HAL_RCC_OscConfig+0xd4>
 800464e:	4ba9      	ldr	r3, [pc, #676]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	4ba8      	ldr	r3, [pc, #672]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 8004654:	49a8      	ldr	r1, [pc, #672]	; (80048f8 <HAL_RCC_OscConfig+0x358>)
 8004656:	400a      	ands	r2, r1
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	4ba6      	ldr	r3, [pc, #664]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	2380      	movs	r3, #128	; 0x80
 8004660:	025b      	lsls	r3, r3, #9
 8004662:	4013      	ands	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	4ba2      	ldr	r3, [pc, #648]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	4ba1      	ldr	r3, [pc, #644]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 800466e:	49a3      	ldr	r1, [pc, #652]	; (80048fc <HAL_RCC_OscConfig+0x35c>)
 8004670:	400a      	ands	r2, r1
 8004672:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d015      	beq.n	80046a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800467c:	f7fe ff44 	bl	8003508 <HAL_GetTick>
 8004680:	0003      	movs	r3, r0
 8004682:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004684:	e009      	b.n	800469a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004686:	f7fe ff3f 	bl	8003508 <HAL_GetTick>
 800468a:	0002      	movs	r2, r0
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b64      	cmp	r3, #100	; 0x64
 8004692:	d902      	bls.n	800469a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	f000 fb3c 	bl	8004d12 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800469a:	4b96      	ldr	r3, [pc, #600]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	2380      	movs	r3, #128	; 0x80
 80046a0:	029b      	lsls	r3, r3, #10
 80046a2:	4013      	ands	r3, r2
 80046a4:	d0ef      	beq.n	8004686 <HAL_RCC_OscConfig+0xe6>
 80046a6:	e015      	b.n	80046d4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a8:	f7fe ff2e 	bl	8003508 <HAL_GetTick>
 80046ac:	0003      	movs	r3, r0
 80046ae:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80046b0:	e008      	b.n	80046c4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046b2:	f7fe ff29 	bl	8003508 <HAL_GetTick>
 80046b6:	0002      	movs	r2, r0
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b64      	cmp	r3, #100	; 0x64
 80046be:	d901      	bls.n	80046c4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e326      	b.n	8004d12 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80046c4:	4b8b      	ldr	r3, [pc, #556]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	2380      	movs	r3, #128	; 0x80
 80046ca:	029b      	lsls	r3, r3, #10
 80046cc:	4013      	ands	r3, r2
 80046ce:	d1f0      	bne.n	80046b2 <HAL_RCC_OscConfig+0x112>
 80046d0:	e000      	b.n	80046d4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2202      	movs	r2, #2
 80046da:	4013      	ands	r3, r2
 80046dc:	d100      	bne.n	80046e0 <HAL_RCC_OscConfig+0x140>
 80046de:	e08b      	b.n	80047f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046e6:	6a3b      	ldr	r3, [r7, #32]
 80046e8:	2b04      	cmp	r3, #4
 80046ea:	d005      	beq.n	80046f8 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80046ec:	6a3b      	ldr	r3, [r7, #32]
 80046ee:	2b0c      	cmp	r3, #12
 80046f0:	d13e      	bne.n	8004770 <HAL_RCC_OscConfig+0x1d0>
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d13b      	bne.n	8004770 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80046f8:	4b7e      	ldr	r3, [pc, #504]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2204      	movs	r2, #4
 80046fe:	4013      	ands	r3, r2
 8004700:	d004      	beq.n	800470c <HAL_RCC_OscConfig+0x16c>
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e302      	b.n	8004d12 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800470c:	4b79      	ldr	r3, [pc, #484]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	4a7b      	ldr	r2, [pc, #492]	; (8004900 <HAL_RCC_OscConfig+0x360>)
 8004712:	4013      	ands	r3, r2
 8004714:	0019      	movs	r1, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	021a      	lsls	r2, r3, #8
 800471c:	4b75      	ldr	r3, [pc, #468]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 800471e:	430a      	orrs	r2, r1
 8004720:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004722:	4b74      	ldr	r3, [pc, #464]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2209      	movs	r2, #9
 8004728:	4393      	bics	r3, r2
 800472a:	0019      	movs	r1, r3
 800472c:	4b71      	ldr	r3, [pc, #452]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	430a      	orrs	r2, r1
 8004732:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004734:	f000 fc40 	bl	8004fb8 <HAL_RCC_GetSysClockFreq>
 8004738:	0001      	movs	r1, r0
 800473a:	4b6e      	ldr	r3, [pc, #440]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	091b      	lsrs	r3, r3, #4
 8004740:	220f      	movs	r2, #15
 8004742:	4013      	ands	r3, r2
 8004744:	4a6f      	ldr	r2, [pc, #444]	; (8004904 <HAL_RCC_OscConfig+0x364>)
 8004746:	5cd3      	ldrb	r3, [r2, r3]
 8004748:	000a      	movs	r2, r1
 800474a:	40da      	lsrs	r2, r3
 800474c:	4b6e      	ldr	r3, [pc, #440]	; (8004908 <HAL_RCC_OscConfig+0x368>)
 800474e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004750:	4b6e      	ldr	r3, [pc, #440]	; (800490c <HAL_RCC_OscConfig+0x36c>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2513      	movs	r5, #19
 8004756:	197c      	adds	r4, r7, r5
 8004758:	0018      	movs	r0, r3
 800475a:	f7fe fe8f 	bl	800347c <HAL_InitTick>
 800475e:	0003      	movs	r3, r0
 8004760:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004762:	197b      	adds	r3, r7, r5
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d046      	beq.n	80047f8 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800476a:	197b      	adds	r3, r7, r5
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	e2d0      	b.n	8004d12 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d027      	beq.n	80047c6 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004776:	4b5f      	ldr	r3, [pc, #380]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2209      	movs	r2, #9
 800477c:	4393      	bics	r3, r2
 800477e:	0019      	movs	r1, r3
 8004780:	4b5c      	ldr	r3, [pc, #368]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	430a      	orrs	r2, r1
 8004786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004788:	f7fe febe 	bl	8003508 <HAL_GetTick>
 800478c:	0003      	movs	r3, r0
 800478e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004792:	f7fe feb9 	bl	8003508 <HAL_GetTick>
 8004796:	0002      	movs	r2, r0
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e2b6      	b.n	8004d12 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047a4:	4b53      	ldr	r3, [pc, #332]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2204      	movs	r2, #4
 80047aa:	4013      	ands	r3, r2
 80047ac:	d0f1      	beq.n	8004792 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ae:	4b51      	ldr	r3, [pc, #324]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	4a53      	ldr	r2, [pc, #332]	; (8004900 <HAL_RCC_OscConfig+0x360>)
 80047b4:	4013      	ands	r3, r2
 80047b6:	0019      	movs	r1, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	021a      	lsls	r2, r3, #8
 80047be:	4b4d      	ldr	r3, [pc, #308]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 80047c0:	430a      	orrs	r2, r1
 80047c2:	605a      	str	r2, [r3, #4]
 80047c4:	e018      	b.n	80047f8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047c6:	4b4b      	ldr	r3, [pc, #300]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	4b4a      	ldr	r3, [pc, #296]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 80047cc:	2101      	movs	r1, #1
 80047ce:	438a      	bics	r2, r1
 80047d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d2:	f7fe fe99 	bl	8003508 <HAL_GetTick>
 80047d6:	0003      	movs	r3, r0
 80047d8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047dc:	f7fe fe94 	bl	8003508 <HAL_GetTick>
 80047e0:	0002      	movs	r2, r0
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e291      	b.n	8004d12 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80047ee:	4b41      	ldr	r3, [pc, #260]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2204      	movs	r2, #4
 80047f4:	4013      	ands	r3, r2
 80047f6:	d1f1      	bne.n	80047dc <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2210      	movs	r2, #16
 80047fe:	4013      	ands	r3, r2
 8004800:	d100      	bne.n	8004804 <HAL_RCC_OscConfig+0x264>
 8004802:	e0a1      	b.n	8004948 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d140      	bne.n	800488c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800480a:	4b3a      	ldr	r3, [pc, #232]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	2380      	movs	r3, #128	; 0x80
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4013      	ands	r3, r2
 8004814:	d005      	beq.n	8004822 <HAL_RCC_OscConfig+0x282>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e277      	b.n	8004d12 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004822:	4b34      	ldr	r3, [pc, #208]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	4a3a      	ldr	r2, [pc, #232]	; (8004910 <HAL_RCC_OscConfig+0x370>)
 8004828:	4013      	ands	r3, r2
 800482a:	0019      	movs	r1, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004830:	4b30      	ldr	r3, [pc, #192]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 8004832:	430a      	orrs	r2, r1
 8004834:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004836:	4b2f      	ldr	r3, [pc, #188]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	021b      	lsls	r3, r3, #8
 800483c:	0a19      	lsrs	r1, r3, #8
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	061a      	lsls	r2, r3, #24
 8004844:	4b2b      	ldr	r3, [pc, #172]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 8004846:	430a      	orrs	r2, r1
 8004848:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	0b5b      	lsrs	r3, r3, #13
 8004850:	3301      	adds	r3, #1
 8004852:	2280      	movs	r2, #128	; 0x80
 8004854:	0212      	lsls	r2, r2, #8
 8004856:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004858:	4b26      	ldr	r3, [pc, #152]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	091b      	lsrs	r3, r3, #4
 800485e:	210f      	movs	r1, #15
 8004860:	400b      	ands	r3, r1
 8004862:	4928      	ldr	r1, [pc, #160]	; (8004904 <HAL_RCC_OscConfig+0x364>)
 8004864:	5ccb      	ldrb	r3, [r1, r3]
 8004866:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004868:	4b27      	ldr	r3, [pc, #156]	; (8004908 <HAL_RCC_OscConfig+0x368>)
 800486a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800486c:	4b27      	ldr	r3, [pc, #156]	; (800490c <HAL_RCC_OscConfig+0x36c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2513      	movs	r5, #19
 8004872:	197c      	adds	r4, r7, r5
 8004874:	0018      	movs	r0, r3
 8004876:	f7fe fe01 	bl	800347c <HAL_InitTick>
 800487a:	0003      	movs	r3, r0
 800487c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800487e:	197b      	adds	r3, r7, r5
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d060      	beq.n	8004948 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8004886:	197b      	adds	r3, r7, r5
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	e242      	b.n	8004d12 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d03f      	beq.n	8004914 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004894:	4b17      	ldr	r3, [pc, #92]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	4b16      	ldr	r3, [pc, #88]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 800489a:	2180      	movs	r1, #128	; 0x80
 800489c:	0049      	lsls	r1, r1, #1
 800489e:	430a      	orrs	r2, r1
 80048a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a2:	f7fe fe31 	bl	8003508 <HAL_GetTick>
 80048a6:	0003      	movs	r3, r0
 80048a8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048ac:	f7fe fe2c 	bl	8003508 <HAL_GetTick>
 80048b0:	0002      	movs	r2, r0
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e229      	b.n	8004d12 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80048be:	4b0d      	ldr	r3, [pc, #52]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	2380      	movs	r3, #128	; 0x80
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4013      	ands	r3, r2
 80048c8:	d0f0      	beq.n	80048ac <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048ca:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	4a10      	ldr	r2, [pc, #64]	; (8004910 <HAL_RCC_OscConfig+0x370>)
 80048d0:	4013      	ands	r3, r2
 80048d2:	0019      	movs	r1, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048d8:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 80048da:	430a      	orrs	r2, r1
 80048dc:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048de:	4b05      	ldr	r3, [pc, #20]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	021b      	lsls	r3, r3, #8
 80048e4:	0a19      	lsrs	r1, r3, #8
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	061a      	lsls	r2, r3, #24
 80048ec:	4b01      	ldr	r3, [pc, #4]	; (80048f4 <HAL_RCC_OscConfig+0x354>)
 80048ee:	430a      	orrs	r2, r1
 80048f0:	605a      	str	r2, [r3, #4]
 80048f2:	e029      	b.n	8004948 <HAL_RCC_OscConfig+0x3a8>
 80048f4:	40021000 	.word	0x40021000
 80048f8:	fffeffff 	.word	0xfffeffff
 80048fc:	fffbffff 	.word	0xfffbffff
 8004900:	ffffe0ff 	.word	0xffffe0ff
 8004904:	08006a10 	.word	0x08006a10
 8004908:	20000000 	.word	0x20000000
 800490c:	20000004 	.word	0x20000004
 8004910:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004914:	4bbd      	ldr	r3, [pc, #756]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	4bbc      	ldr	r3, [pc, #752]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 800491a:	49bd      	ldr	r1, [pc, #756]	; (8004c10 <HAL_RCC_OscConfig+0x670>)
 800491c:	400a      	ands	r2, r1
 800491e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004920:	f7fe fdf2 	bl	8003508 <HAL_GetTick>
 8004924:	0003      	movs	r3, r0
 8004926:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004928:	e008      	b.n	800493c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800492a:	f7fe fded 	bl	8003508 <HAL_GetTick>
 800492e:	0002      	movs	r2, r0
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d901      	bls.n	800493c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e1ea      	b.n	8004d12 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800493c:	4bb3      	ldr	r3, [pc, #716]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	2380      	movs	r3, #128	; 0x80
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4013      	ands	r3, r2
 8004946:	d1f0      	bne.n	800492a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2208      	movs	r2, #8
 800494e:	4013      	ands	r3, r2
 8004950:	d036      	beq.n	80049c0 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d019      	beq.n	800498e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800495a:	4bac      	ldr	r3, [pc, #688]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 800495c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800495e:	4bab      	ldr	r3, [pc, #684]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 8004960:	2101      	movs	r1, #1
 8004962:	430a      	orrs	r2, r1
 8004964:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004966:	f7fe fdcf 	bl	8003508 <HAL_GetTick>
 800496a:	0003      	movs	r3, r0
 800496c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004970:	f7fe fdca 	bl	8003508 <HAL_GetTick>
 8004974:	0002      	movs	r2, r0
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e1c7      	b.n	8004d12 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004982:	4ba2      	ldr	r3, [pc, #648]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 8004984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004986:	2202      	movs	r2, #2
 8004988:	4013      	ands	r3, r2
 800498a:	d0f1      	beq.n	8004970 <HAL_RCC_OscConfig+0x3d0>
 800498c:	e018      	b.n	80049c0 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800498e:	4b9f      	ldr	r3, [pc, #636]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 8004990:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004992:	4b9e      	ldr	r3, [pc, #632]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 8004994:	2101      	movs	r1, #1
 8004996:	438a      	bics	r2, r1
 8004998:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800499a:	f7fe fdb5 	bl	8003508 <HAL_GetTick>
 800499e:	0003      	movs	r3, r0
 80049a0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049a4:	f7fe fdb0 	bl	8003508 <HAL_GetTick>
 80049a8:	0002      	movs	r2, r0
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e1ad      	b.n	8004d12 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049b6:	4b95      	ldr	r3, [pc, #596]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 80049b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ba:	2202      	movs	r2, #2
 80049bc:	4013      	ands	r3, r2
 80049be:	d1f1      	bne.n	80049a4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2204      	movs	r2, #4
 80049c6:	4013      	ands	r3, r2
 80049c8:	d100      	bne.n	80049cc <HAL_RCC_OscConfig+0x42c>
 80049ca:	e0ae      	b.n	8004b2a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049cc:	2027      	movs	r0, #39	; 0x27
 80049ce:	183b      	adds	r3, r7, r0
 80049d0:	2200      	movs	r2, #0
 80049d2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049d4:	4b8d      	ldr	r3, [pc, #564]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 80049d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049d8:	2380      	movs	r3, #128	; 0x80
 80049da:	055b      	lsls	r3, r3, #21
 80049dc:	4013      	ands	r3, r2
 80049de:	d109      	bne.n	80049f4 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049e0:	4b8a      	ldr	r3, [pc, #552]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 80049e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049e4:	4b89      	ldr	r3, [pc, #548]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 80049e6:	2180      	movs	r1, #128	; 0x80
 80049e8:	0549      	lsls	r1, r1, #21
 80049ea:	430a      	orrs	r2, r1
 80049ec:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80049ee:	183b      	adds	r3, r7, r0
 80049f0:	2201      	movs	r2, #1
 80049f2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f4:	4b87      	ldr	r3, [pc, #540]	; (8004c14 <HAL_RCC_OscConfig+0x674>)
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	2380      	movs	r3, #128	; 0x80
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	4013      	ands	r3, r2
 80049fe:	d11a      	bne.n	8004a36 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a00:	4b84      	ldr	r3, [pc, #528]	; (8004c14 <HAL_RCC_OscConfig+0x674>)
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	4b83      	ldr	r3, [pc, #524]	; (8004c14 <HAL_RCC_OscConfig+0x674>)
 8004a06:	2180      	movs	r1, #128	; 0x80
 8004a08:	0049      	lsls	r1, r1, #1
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a0e:	f7fe fd7b 	bl	8003508 <HAL_GetTick>
 8004a12:	0003      	movs	r3, r0
 8004a14:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a16:	e008      	b.n	8004a2a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a18:	f7fe fd76 	bl	8003508 <HAL_GetTick>
 8004a1c:	0002      	movs	r2, r0
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b64      	cmp	r3, #100	; 0x64
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e173      	b.n	8004d12 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a2a:	4b7a      	ldr	r3, [pc, #488]	; (8004c14 <HAL_RCC_OscConfig+0x674>)
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	2380      	movs	r3, #128	; 0x80
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	4013      	ands	r3, r2
 8004a34:	d0f0      	beq.n	8004a18 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	689a      	ldr	r2, [r3, #8]
 8004a3a:	2380      	movs	r3, #128	; 0x80
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d107      	bne.n	8004a52 <HAL_RCC_OscConfig+0x4b2>
 8004a42:	4b72      	ldr	r3, [pc, #456]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 8004a44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a46:	4b71      	ldr	r3, [pc, #452]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 8004a48:	2180      	movs	r1, #128	; 0x80
 8004a4a:	0049      	lsls	r1, r1, #1
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	651a      	str	r2, [r3, #80]	; 0x50
 8004a50:	e031      	b.n	8004ab6 <HAL_RCC_OscConfig+0x516>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10c      	bne.n	8004a74 <HAL_RCC_OscConfig+0x4d4>
 8004a5a:	4b6c      	ldr	r3, [pc, #432]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 8004a5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a5e:	4b6b      	ldr	r3, [pc, #428]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 8004a60:	496b      	ldr	r1, [pc, #428]	; (8004c10 <HAL_RCC_OscConfig+0x670>)
 8004a62:	400a      	ands	r2, r1
 8004a64:	651a      	str	r2, [r3, #80]	; 0x50
 8004a66:	4b69      	ldr	r3, [pc, #420]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 8004a68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a6a:	4b68      	ldr	r3, [pc, #416]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 8004a6c:	496a      	ldr	r1, [pc, #424]	; (8004c18 <HAL_RCC_OscConfig+0x678>)
 8004a6e:	400a      	ands	r2, r1
 8004a70:	651a      	str	r2, [r3, #80]	; 0x50
 8004a72:	e020      	b.n	8004ab6 <HAL_RCC_OscConfig+0x516>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	23a0      	movs	r3, #160	; 0xa0
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d10e      	bne.n	8004a9e <HAL_RCC_OscConfig+0x4fe>
 8004a80:	4b62      	ldr	r3, [pc, #392]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 8004a82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a84:	4b61      	ldr	r3, [pc, #388]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 8004a86:	2180      	movs	r1, #128	; 0x80
 8004a88:	00c9      	lsls	r1, r1, #3
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	651a      	str	r2, [r3, #80]	; 0x50
 8004a8e:	4b5f      	ldr	r3, [pc, #380]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 8004a90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a92:	4b5e      	ldr	r3, [pc, #376]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 8004a94:	2180      	movs	r1, #128	; 0x80
 8004a96:	0049      	lsls	r1, r1, #1
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	651a      	str	r2, [r3, #80]	; 0x50
 8004a9c:	e00b      	b.n	8004ab6 <HAL_RCC_OscConfig+0x516>
 8004a9e:	4b5b      	ldr	r3, [pc, #364]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 8004aa0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004aa2:	4b5a      	ldr	r3, [pc, #360]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 8004aa4:	495a      	ldr	r1, [pc, #360]	; (8004c10 <HAL_RCC_OscConfig+0x670>)
 8004aa6:	400a      	ands	r2, r1
 8004aa8:	651a      	str	r2, [r3, #80]	; 0x50
 8004aaa:	4b58      	ldr	r3, [pc, #352]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 8004aac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004aae:	4b57      	ldr	r3, [pc, #348]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 8004ab0:	4959      	ldr	r1, [pc, #356]	; (8004c18 <HAL_RCC_OscConfig+0x678>)
 8004ab2:	400a      	ands	r2, r1
 8004ab4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d015      	beq.n	8004aea <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004abe:	f7fe fd23 	bl	8003508 <HAL_GetTick>
 8004ac2:	0003      	movs	r3, r0
 8004ac4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ac6:	e009      	b.n	8004adc <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ac8:	f7fe fd1e 	bl	8003508 <HAL_GetTick>
 8004acc:	0002      	movs	r2, r0
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	4a52      	ldr	r2, [pc, #328]	; (8004c1c <HAL_RCC_OscConfig+0x67c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d901      	bls.n	8004adc <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e11a      	b.n	8004d12 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004adc:	4b4b      	ldr	r3, [pc, #300]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 8004ade:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ae0:	2380      	movs	r3, #128	; 0x80
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	d0ef      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x528>
 8004ae8:	e014      	b.n	8004b14 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aea:	f7fe fd0d 	bl	8003508 <HAL_GetTick>
 8004aee:	0003      	movs	r3, r0
 8004af0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004af2:	e009      	b.n	8004b08 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004af4:	f7fe fd08 	bl	8003508 <HAL_GetTick>
 8004af8:	0002      	movs	r2, r0
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	4a47      	ldr	r2, [pc, #284]	; (8004c1c <HAL_RCC_OscConfig+0x67c>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d901      	bls.n	8004b08 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e104      	b.n	8004d12 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b08:	4b40      	ldr	r3, [pc, #256]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 8004b0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b0c:	2380      	movs	r3, #128	; 0x80
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4013      	ands	r3, r2
 8004b12:	d1ef      	bne.n	8004af4 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b14:	2327      	movs	r3, #39	; 0x27
 8004b16:	18fb      	adds	r3, r7, r3
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d105      	bne.n	8004b2a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b1e:	4b3b      	ldr	r3, [pc, #236]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 8004b20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b22:	4b3a      	ldr	r3, [pc, #232]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 8004b24:	493e      	ldr	r1, [pc, #248]	; (8004c20 <HAL_RCC_OscConfig+0x680>)
 8004b26:	400a      	ands	r2, r1
 8004b28:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	4013      	ands	r3, r2
 8004b32:	d049      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d026      	beq.n	8004b8a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004b3c:	4b33      	ldr	r3, [pc, #204]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 8004b3e:	689a      	ldr	r2, [r3, #8]
 8004b40:	4b32      	ldr	r3, [pc, #200]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 8004b42:	2101      	movs	r1, #1
 8004b44:	430a      	orrs	r2, r1
 8004b46:	609a      	str	r2, [r3, #8]
 8004b48:	4b30      	ldr	r3, [pc, #192]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 8004b4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b4c:	4b2f      	ldr	r3, [pc, #188]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 8004b4e:	2101      	movs	r1, #1
 8004b50:	430a      	orrs	r2, r1
 8004b52:	635a      	str	r2, [r3, #52]	; 0x34
 8004b54:	4b33      	ldr	r3, [pc, #204]	; (8004c24 <HAL_RCC_OscConfig+0x684>)
 8004b56:	6a1a      	ldr	r2, [r3, #32]
 8004b58:	4b32      	ldr	r3, [pc, #200]	; (8004c24 <HAL_RCC_OscConfig+0x684>)
 8004b5a:	2180      	movs	r1, #128	; 0x80
 8004b5c:	0189      	lsls	r1, r1, #6
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b62:	f7fe fcd1 	bl	8003508 <HAL_GetTick>
 8004b66:	0003      	movs	r3, r0
 8004b68:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b6c:	f7fe fccc 	bl	8003508 <HAL_GetTick>
 8004b70:	0002      	movs	r2, r0
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e0c9      	b.n	8004d12 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b7e:	4b23      	ldr	r3, [pc, #140]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	2202      	movs	r2, #2
 8004b84:	4013      	ands	r3, r2
 8004b86:	d0f1      	beq.n	8004b6c <HAL_RCC_OscConfig+0x5cc>
 8004b88:	e01e      	b.n	8004bc8 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004b8a:	4b20      	ldr	r3, [pc, #128]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 8004b8c:	689a      	ldr	r2, [r3, #8]
 8004b8e:	4b1f      	ldr	r3, [pc, #124]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 8004b90:	2101      	movs	r1, #1
 8004b92:	438a      	bics	r2, r1
 8004b94:	609a      	str	r2, [r3, #8]
 8004b96:	4b23      	ldr	r3, [pc, #140]	; (8004c24 <HAL_RCC_OscConfig+0x684>)
 8004b98:	6a1a      	ldr	r2, [r3, #32]
 8004b9a:	4b22      	ldr	r3, [pc, #136]	; (8004c24 <HAL_RCC_OscConfig+0x684>)
 8004b9c:	4922      	ldr	r1, [pc, #136]	; (8004c28 <HAL_RCC_OscConfig+0x688>)
 8004b9e:	400a      	ands	r2, r1
 8004ba0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba2:	f7fe fcb1 	bl	8003508 <HAL_GetTick>
 8004ba6:	0003      	movs	r3, r0
 8004ba8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bac:	f7fe fcac 	bl	8003508 <HAL_GetTick>
 8004bb0:	0002      	movs	r2, r0
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e0a9      	b.n	8004d12 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004bbe:	4b13      	ldr	r3, [pc, #76]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	d1f1      	bne.n	8004bac <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d100      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x632>
 8004bd0:	e09e      	b.n	8004d10 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bd2:	6a3b      	ldr	r3, [r7, #32]
 8004bd4:	2b0c      	cmp	r3, #12
 8004bd6:	d100      	bne.n	8004bda <HAL_RCC_OscConfig+0x63a>
 8004bd8:	e077      	b.n	8004cca <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d158      	bne.n	8004c94 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004be2:	4b0a      	ldr	r3, [pc, #40]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	4b09      	ldr	r3, [pc, #36]	; (8004c0c <HAL_RCC_OscConfig+0x66c>)
 8004be8:	4910      	ldr	r1, [pc, #64]	; (8004c2c <HAL_RCC_OscConfig+0x68c>)
 8004bea:	400a      	ands	r2, r1
 8004bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bee:	f7fe fc8b 	bl	8003508 <HAL_GetTick>
 8004bf2:	0003      	movs	r3, r0
 8004bf4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004bf6:	e01b      	b.n	8004c30 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bf8:	f7fe fc86 	bl	8003508 <HAL_GetTick>
 8004bfc:	0002      	movs	r2, r0
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d914      	bls.n	8004c30 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e083      	b.n	8004d12 <HAL_RCC_OscConfig+0x772>
 8004c0a:	46c0      	nop			; (mov r8, r8)
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	fffffeff 	.word	0xfffffeff
 8004c14:	40007000 	.word	0x40007000
 8004c18:	fffffbff 	.word	0xfffffbff
 8004c1c:	00001388 	.word	0x00001388
 8004c20:	efffffff 	.word	0xefffffff
 8004c24:	40010000 	.word	0x40010000
 8004c28:	ffffdfff 	.word	0xffffdfff
 8004c2c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004c30:	4b3a      	ldr	r3, [pc, #232]	; (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	2380      	movs	r3, #128	; 0x80
 8004c36:	049b      	lsls	r3, r3, #18
 8004c38:	4013      	ands	r3, r2
 8004c3a:	d1dd      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c3c:	4b37      	ldr	r3, [pc, #220]	; (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	4a37      	ldr	r2, [pc, #220]	; (8004d20 <HAL_RCC_OscConfig+0x780>)
 8004c42:	4013      	ands	r3, r2
 8004c44:	0019      	movs	r1, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c54:	431a      	orrs	r2, r3
 8004c56:	4b31      	ldr	r3, [pc, #196]	; (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c5c:	4b2f      	ldr	r3, [pc, #188]	; (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	4b2e      	ldr	r3, [pc, #184]	; (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004c62:	2180      	movs	r1, #128	; 0x80
 8004c64:	0449      	lsls	r1, r1, #17
 8004c66:	430a      	orrs	r2, r1
 8004c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c6a:	f7fe fc4d 	bl	8003508 <HAL_GetTick>
 8004c6e:	0003      	movs	r3, r0
 8004c70:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004c72:	e008      	b.n	8004c86 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c74:	f7fe fc48 	bl	8003508 <HAL_GetTick>
 8004c78:	0002      	movs	r2, r0
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e045      	b.n	8004d12 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004c86:	4b25      	ldr	r3, [pc, #148]	; (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	2380      	movs	r3, #128	; 0x80
 8004c8c:	049b      	lsls	r3, r3, #18
 8004c8e:	4013      	ands	r3, r2
 8004c90:	d0f0      	beq.n	8004c74 <HAL_RCC_OscConfig+0x6d4>
 8004c92:	e03d      	b.n	8004d10 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c94:	4b21      	ldr	r3, [pc, #132]	; (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	4b20      	ldr	r3, [pc, #128]	; (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004c9a:	4922      	ldr	r1, [pc, #136]	; (8004d24 <HAL_RCC_OscConfig+0x784>)
 8004c9c:	400a      	ands	r2, r1
 8004c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca0:	f7fe fc32 	bl	8003508 <HAL_GetTick>
 8004ca4:	0003      	movs	r3, r0
 8004ca6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004ca8:	e008      	b.n	8004cbc <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004caa:	f7fe fc2d 	bl	8003508 <HAL_GetTick>
 8004cae:	0002      	movs	r2, r0
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e02a      	b.n	8004d12 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004cbc:	4b17      	ldr	r3, [pc, #92]	; (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	2380      	movs	r3, #128	; 0x80
 8004cc2:	049b      	lsls	r3, r3, #18
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	d1f0      	bne.n	8004caa <HAL_RCC_OscConfig+0x70a>
 8004cc8:	e022      	b.n	8004d10 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d101      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e01d      	b.n	8004d12 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004cd6:	4b11      	ldr	r3, [pc, #68]	; (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cdc:	69fa      	ldr	r2, [r7, #28]
 8004cde:	2380      	movs	r3, #128	; 0x80
 8004ce0:	025b      	lsls	r3, r3, #9
 8004ce2:	401a      	ands	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d10f      	bne.n	8004d0c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004cec:	69fa      	ldr	r2, [r7, #28]
 8004cee:	23f0      	movs	r3, #240	; 0xf0
 8004cf0:	039b      	lsls	r3, r3, #14
 8004cf2:	401a      	ands	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d107      	bne.n	8004d0c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004cfc:	69fa      	ldr	r2, [r7, #28]
 8004cfe:	23c0      	movs	r3, #192	; 0xc0
 8004d00:	041b      	lsls	r3, r3, #16
 8004d02:	401a      	ands	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d001      	beq.n	8004d10 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e000      	b.n	8004d12 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	0018      	movs	r0, r3
 8004d14:	46bd      	mov	sp, r7
 8004d16:	b00a      	add	sp, #40	; 0x28
 8004d18:	bdb0      	pop	{r4, r5, r7, pc}
 8004d1a:	46c0      	nop			; (mov r8, r8)
 8004d1c:	40021000 	.word	0x40021000
 8004d20:	ff02ffff 	.word	0xff02ffff
 8004d24:	feffffff 	.word	0xfeffffff

08004d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d28:	b5b0      	push	{r4, r5, r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e128      	b.n	8004f8e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d3c:	4b96      	ldr	r3, [pc, #600]	; (8004f98 <HAL_RCC_ClockConfig+0x270>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2201      	movs	r2, #1
 8004d42:	4013      	ands	r3, r2
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d91e      	bls.n	8004d88 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d4a:	4b93      	ldr	r3, [pc, #588]	; (8004f98 <HAL_RCC_ClockConfig+0x270>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	4393      	bics	r3, r2
 8004d52:	0019      	movs	r1, r3
 8004d54:	4b90      	ldr	r3, [pc, #576]	; (8004f98 <HAL_RCC_ClockConfig+0x270>)
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004d5c:	f7fe fbd4 	bl	8003508 <HAL_GetTick>
 8004d60:	0003      	movs	r3, r0
 8004d62:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d64:	e009      	b.n	8004d7a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d66:	f7fe fbcf 	bl	8003508 <HAL_GetTick>
 8004d6a:	0002      	movs	r2, r0
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	4a8a      	ldr	r2, [pc, #552]	; (8004f9c <HAL_RCC_ClockConfig+0x274>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e109      	b.n	8004f8e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d7a:	4b87      	ldr	r3, [pc, #540]	; (8004f98 <HAL_RCC_ClockConfig+0x270>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	4013      	ands	r3, r2
 8004d82:	683a      	ldr	r2, [r7, #0]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d1ee      	bne.n	8004d66 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d009      	beq.n	8004da6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d92:	4b83      	ldr	r3, [pc, #524]	; (8004fa0 <HAL_RCC_ClockConfig+0x278>)
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	22f0      	movs	r2, #240	; 0xf0
 8004d98:	4393      	bics	r3, r2
 8004d9a:	0019      	movs	r1, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	4b7f      	ldr	r3, [pc, #508]	; (8004fa0 <HAL_RCC_ClockConfig+0x278>)
 8004da2:	430a      	orrs	r2, r1
 8004da4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2201      	movs	r2, #1
 8004dac:	4013      	ands	r3, r2
 8004dae:	d100      	bne.n	8004db2 <HAL_RCC_ClockConfig+0x8a>
 8004db0:	e089      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d107      	bne.n	8004dca <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004dba:	4b79      	ldr	r3, [pc, #484]	; (8004fa0 <HAL_RCC_ClockConfig+0x278>)
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	2380      	movs	r3, #128	; 0x80
 8004dc0:	029b      	lsls	r3, r3, #10
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	d120      	bne.n	8004e08 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e0e1      	b.n	8004f8e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	2b03      	cmp	r3, #3
 8004dd0:	d107      	bne.n	8004de2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004dd2:	4b73      	ldr	r3, [pc, #460]	; (8004fa0 <HAL_RCC_ClockConfig+0x278>)
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	2380      	movs	r3, #128	; 0x80
 8004dd8:	049b      	lsls	r3, r3, #18
 8004dda:	4013      	ands	r3, r2
 8004ddc:	d114      	bne.n	8004e08 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e0d5      	b.n	8004f8e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d106      	bne.n	8004df8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dea:	4b6d      	ldr	r3, [pc, #436]	; (8004fa0 <HAL_RCC_ClockConfig+0x278>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2204      	movs	r2, #4
 8004df0:	4013      	ands	r3, r2
 8004df2:	d109      	bne.n	8004e08 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e0ca      	b.n	8004f8e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004df8:	4b69      	ldr	r3, [pc, #420]	; (8004fa0 <HAL_RCC_ClockConfig+0x278>)
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	2380      	movs	r3, #128	; 0x80
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4013      	ands	r3, r2
 8004e02:	d101      	bne.n	8004e08 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e0c2      	b.n	8004f8e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e08:	4b65      	ldr	r3, [pc, #404]	; (8004fa0 <HAL_RCC_ClockConfig+0x278>)
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	2203      	movs	r2, #3
 8004e0e:	4393      	bics	r3, r2
 8004e10:	0019      	movs	r1, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	4b62      	ldr	r3, [pc, #392]	; (8004fa0 <HAL_RCC_ClockConfig+0x278>)
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e1c:	f7fe fb74 	bl	8003508 <HAL_GetTick>
 8004e20:	0003      	movs	r3, r0
 8004e22:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d111      	bne.n	8004e50 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e2c:	e009      	b.n	8004e42 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e2e:	f7fe fb6b 	bl	8003508 <HAL_GetTick>
 8004e32:	0002      	movs	r2, r0
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	4a58      	ldr	r2, [pc, #352]	; (8004f9c <HAL_RCC_ClockConfig+0x274>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e0a5      	b.n	8004f8e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e42:	4b57      	ldr	r3, [pc, #348]	; (8004fa0 <HAL_RCC_ClockConfig+0x278>)
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	220c      	movs	r2, #12
 8004e48:	4013      	ands	r3, r2
 8004e4a:	2b08      	cmp	r3, #8
 8004e4c:	d1ef      	bne.n	8004e2e <HAL_RCC_ClockConfig+0x106>
 8004e4e:	e03a      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	2b03      	cmp	r3, #3
 8004e56:	d111      	bne.n	8004e7c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e58:	e009      	b.n	8004e6e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e5a:	f7fe fb55 	bl	8003508 <HAL_GetTick>
 8004e5e:	0002      	movs	r2, r0
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	4a4d      	ldr	r2, [pc, #308]	; (8004f9c <HAL_RCC_ClockConfig+0x274>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e08f      	b.n	8004f8e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e6e:	4b4c      	ldr	r3, [pc, #304]	; (8004fa0 <HAL_RCC_ClockConfig+0x278>)
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	220c      	movs	r2, #12
 8004e74:	4013      	ands	r3, r2
 8004e76:	2b0c      	cmp	r3, #12
 8004e78:	d1ef      	bne.n	8004e5a <HAL_RCC_ClockConfig+0x132>
 8004e7a:	e024      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d11b      	bne.n	8004ebc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e84:	e009      	b.n	8004e9a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e86:	f7fe fb3f 	bl	8003508 <HAL_GetTick>
 8004e8a:	0002      	movs	r2, r0
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	4a42      	ldr	r2, [pc, #264]	; (8004f9c <HAL_RCC_ClockConfig+0x274>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e079      	b.n	8004f8e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e9a:	4b41      	ldr	r3, [pc, #260]	; (8004fa0 <HAL_RCC_ClockConfig+0x278>)
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	220c      	movs	r2, #12
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	d1ef      	bne.n	8004e86 <HAL_RCC_ClockConfig+0x15e>
 8004ea6:	e00e      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ea8:	f7fe fb2e 	bl	8003508 <HAL_GetTick>
 8004eac:	0002      	movs	r2, r0
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	4a3a      	ldr	r2, [pc, #232]	; (8004f9c <HAL_RCC_ClockConfig+0x274>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d901      	bls.n	8004ebc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e068      	b.n	8004f8e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ebc:	4b38      	ldr	r3, [pc, #224]	; (8004fa0 <HAL_RCC_ClockConfig+0x278>)
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	220c      	movs	r2, #12
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	d1f0      	bne.n	8004ea8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ec6:	4b34      	ldr	r3, [pc, #208]	; (8004f98 <HAL_RCC_ClockConfig+0x270>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	4013      	ands	r3, r2
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d21e      	bcs.n	8004f12 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ed4:	4b30      	ldr	r3, [pc, #192]	; (8004f98 <HAL_RCC_ClockConfig+0x270>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	4393      	bics	r3, r2
 8004edc:	0019      	movs	r1, r3
 8004ede:	4b2e      	ldr	r3, [pc, #184]	; (8004f98 <HAL_RCC_ClockConfig+0x270>)
 8004ee0:	683a      	ldr	r2, [r7, #0]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004ee6:	f7fe fb0f 	bl	8003508 <HAL_GetTick>
 8004eea:	0003      	movs	r3, r0
 8004eec:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eee:	e009      	b.n	8004f04 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ef0:	f7fe fb0a 	bl	8003508 <HAL_GetTick>
 8004ef4:	0002      	movs	r2, r0
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	4a28      	ldr	r2, [pc, #160]	; (8004f9c <HAL_RCC_ClockConfig+0x274>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d901      	bls.n	8004f04 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e044      	b.n	8004f8e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f04:	4b24      	ldr	r3, [pc, #144]	; (8004f98 <HAL_RCC_ClockConfig+0x270>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d1ee      	bne.n	8004ef0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2204      	movs	r2, #4
 8004f18:	4013      	ands	r3, r2
 8004f1a:	d009      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f1c:	4b20      	ldr	r3, [pc, #128]	; (8004fa0 <HAL_RCC_ClockConfig+0x278>)
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	4a20      	ldr	r2, [pc, #128]	; (8004fa4 <HAL_RCC_ClockConfig+0x27c>)
 8004f22:	4013      	ands	r3, r2
 8004f24:	0019      	movs	r1, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68da      	ldr	r2, [r3, #12]
 8004f2a:	4b1d      	ldr	r3, [pc, #116]	; (8004fa0 <HAL_RCC_ClockConfig+0x278>)
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2208      	movs	r2, #8
 8004f36:	4013      	ands	r3, r2
 8004f38:	d00a      	beq.n	8004f50 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f3a:	4b19      	ldr	r3, [pc, #100]	; (8004fa0 <HAL_RCC_ClockConfig+0x278>)
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	4a1a      	ldr	r2, [pc, #104]	; (8004fa8 <HAL_RCC_ClockConfig+0x280>)
 8004f40:	4013      	ands	r3, r2
 8004f42:	0019      	movs	r1, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	00da      	lsls	r2, r3, #3
 8004f4a:	4b15      	ldr	r3, [pc, #84]	; (8004fa0 <HAL_RCC_ClockConfig+0x278>)
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f50:	f000 f832 	bl	8004fb8 <HAL_RCC_GetSysClockFreq>
 8004f54:	0001      	movs	r1, r0
 8004f56:	4b12      	ldr	r3, [pc, #72]	; (8004fa0 <HAL_RCC_ClockConfig+0x278>)
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	091b      	lsrs	r3, r3, #4
 8004f5c:	220f      	movs	r2, #15
 8004f5e:	4013      	ands	r3, r2
 8004f60:	4a12      	ldr	r2, [pc, #72]	; (8004fac <HAL_RCC_ClockConfig+0x284>)
 8004f62:	5cd3      	ldrb	r3, [r2, r3]
 8004f64:	000a      	movs	r2, r1
 8004f66:	40da      	lsrs	r2, r3
 8004f68:	4b11      	ldr	r3, [pc, #68]	; (8004fb0 <HAL_RCC_ClockConfig+0x288>)
 8004f6a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f6c:	4b11      	ldr	r3, [pc, #68]	; (8004fb4 <HAL_RCC_ClockConfig+0x28c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	250b      	movs	r5, #11
 8004f72:	197c      	adds	r4, r7, r5
 8004f74:	0018      	movs	r0, r3
 8004f76:	f7fe fa81 	bl	800347c <HAL_InitTick>
 8004f7a:	0003      	movs	r3, r0
 8004f7c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004f7e:	197b      	adds	r3, r7, r5
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d002      	beq.n	8004f8c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004f86:	197b      	adds	r3, r7, r5
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	e000      	b.n	8004f8e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	0018      	movs	r0, r3
 8004f90:	46bd      	mov	sp, r7
 8004f92:	b004      	add	sp, #16
 8004f94:	bdb0      	pop	{r4, r5, r7, pc}
 8004f96:	46c0      	nop			; (mov r8, r8)
 8004f98:	40022000 	.word	0x40022000
 8004f9c:	00001388 	.word	0x00001388
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	fffff8ff 	.word	0xfffff8ff
 8004fa8:	ffffc7ff 	.word	0xffffc7ff
 8004fac:	08006a10 	.word	0x08006a10
 8004fb0:	20000000 	.word	0x20000000
 8004fb4:	20000004 	.word	0x20000004

08004fb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fb8:	b5b0      	push	{r4, r5, r7, lr}
 8004fba:	b08e      	sub	sp, #56	; 0x38
 8004fbc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004fbe:	4b4c      	ldr	r3, [pc, #304]	; (80050f0 <HAL_RCC_GetSysClockFreq+0x138>)
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004fc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fc6:	230c      	movs	r3, #12
 8004fc8:	4013      	ands	r3, r2
 8004fca:	2b0c      	cmp	r3, #12
 8004fcc:	d014      	beq.n	8004ff8 <HAL_RCC_GetSysClockFreq+0x40>
 8004fce:	d900      	bls.n	8004fd2 <HAL_RCC_GetSysClockFreq+0x1a>
 8004fd0:	e07b      	b.n	80050ca <HAL_RCC_GetSysClockFreq+0x112>
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	d002      	beq.n	8004fdc <HAL_RCC_GetSysClockFreq+0x24>
 8004fd6:	2b08      	cmp	r3, #8
 8004fd8:	d00b      	beq.n	8004ff2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004fda:	e076      	b.n	80050ca <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004fdc:	4b44      	ldr	r3, [pc, #272]	; (80050f0 <HAL_RCC_GetSysClockFreq+0x138>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2210      	movs	r2, #16
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	d002      	beq.n	8004fec <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004fe6:	4b43      	ldr	r3, [pc, #268]	; (80050f4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004fe8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004fea:	e07c      	b.n	80050e6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004fec:	4b42      	ldr	r3, [pc, #264]	; (80050f8 <HAL_RCC_GetSysClockFreq+0x140>)
 8004fee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004ff0:	e079      	b.n	80050e6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ff2:	4b42      	ldr	r3, [pc, #264]	; (80050fc <HAL_RCC_GetSysClockFreq+0x144>)
 8004ff4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004ff6:	e076      	b.n	80050e6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffa:	0c9a      	lsrs	r2, r3, #18
 8004ffc:	230f      	movs	r3, #15
 8004ffe:	401a      	ands	r2, r3
 8005000:	4b3f      	ldr	r3, [pc, #252]	; (8005100 <HAL_RCC_GetSysClockFreq+0x148>)
 8005002:	5c9b      	ldrb	r3, [r3, r2]
 8005004:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005008:	0d9a      	lsrs	r2, r3, #22
 800500a:	2303      	movs	r3, #3
 800500c:	4013      	ands	r3, r2
 800500e:	3301      	adds	r3, #1
 8005010:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005012:	4b37      	ldr	r3, [pc, #220]	; (80050f0 <HAL_RCC_GetSysClockFreq+0x138>)
 8005014:	68da      	ldr	r2, [r3, #12]
 8005016:	2380      	movs	r3, #128	; 0x80
 8005018:	025b      	lsls	r3, r3, #9
 800501a:	4013      	ands	r3, r2
 800501c:	d01a      	beq.n	8005054 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800501e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005020:	61bb      	str	r3, [r7, #24]
 8005022:	2300      	movs	r3, #0
 8005024:	61fb      	str	r3, [r7, #28]
 8005026:	4a35      	ldr	r2, [pc, #212]	; (80050fc <HAL_RCC_GetSysClockFreq+0x144>)
 8005028:	2300      	movs	r3, #0
 800502a:	69b8      	ldr	r0, [r7, #24]
 800502c:	69f9      	ldr	r1, [r7, #28]
 800502e:	f7fb f929 	bl	8000284 <__aeabi_lmul>
 8005032:	0002      	movs	r2, r0
 8005034:	000b      	movs	r3, r1
 8005036:	0010      	movs	r0, r2
 8005038:	0019      	movs	r1, r3
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	613b      	str	r3, [r7, #16]
 800503e:	2300      	movs	r3, #0
 8005040:	617b      	str	r3, [r7, #20]
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f7fb f8fd 	bl	8000244 <__aeabi_uldivmod>
 800504a:	0002      	movs	r2, r0
 800504c:	000b      	movs	r3, r1
 800504e:	0013      	movs	r3, r2
 8005050:	637b      	str	r3, [r7, #52]	; 0x34
 8005052:	e037      	b.n	80050c4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005054:	4b26      	ldr	r3, [pc, #152]	; (80050f0 <HAL_RCC_GetSysClockFreq+0x138>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2210      	movs	r2, #16
 800505a:	4013      	ands	r3, r2
 800505c:	d01a      	beq.n	8005094 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800505e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005060:	60bb      	str	r3, [r7, #8]
 8005062:	2300      	movs	r3, #0
 8005064:	60fb      	str	r3, [r7, #12]
 8005066:	4a23      	ldr	r2, [pc, #140]	; (80050f4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005068:	2300      	movs	r3, #0
 800506a:	68b8      	ldr	r0, [r7, #8]
 800506c:	68f9      	ldr	r1, [r7, #12]
 800506e:	f7fb f909 	bl	8000284 <__aeabi_lmul>
 8005072:	0002      	movs	r2, r0
 8005074:	000b      	movs	r3, r1
 8005076:	0010      	movs	r0, r2
 8005078:	0019      	movs	r1, r3
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	603b      	str	r3, [r7, #0]
 800507e:	2300      	movs	r3, #0
 8005080:	607b      	str	r3, [r7, #4]
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f7fb f8dd 	bl	8000244 <__aeabi_uldivmod>
 800508a:	0002      	movs	r2, r0
 800508c:	000b      	movs	r3, r1
 800508e:	0013      	movs	r3, r2
 8005090:	637b      	str	r3, [r7, #52]	; 0x34
 8005092:	e017      	b.n	80050c4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005096:	0018      	movs	r0, r3
 8005098:	2300      	movs	r3, #0
 800509a:	0019      	movs	r1, r3
 800509c:	4a16      	ldr	r2, [pc, #88]	; (80050f8 <HAL_RCC_GetSysClockFreq+0x140>)
 800509e:	2300      	movs	r3, #0
 80050a0:	f7fb f8f0 	bl	8000284 <__aeabi_lmul>
 80050a4:	0002      	movs	r2, r0
 80050a6:	000b      	movs	r3, r1
 80050a8:	0010      	movs	r0, r2
 80050aa:	0019      	movs	r1, r3
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	001c      	movs	r4, r3
 80050b0:	2300      	movs	r3, #0
 80050b2:	001d      	movs	r5, r3
 80050b4:	0022      	movs	r2, r4
 80050b6:	002b      	movs	r3, r5
 80050b8:	f7fb f8c4 	bl	8000244 <__aeabi_uldivmod>
 80050bc:	0002      	movs	r2, r0
 80050be:	000b      	movs	r3, r1
 80050c0:	0013      	movs	r3, r2
 80050c2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80050c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80050c8:	e00d      	b.n	80050e6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80050ca:	4b09      	ldr	r3, [pc, #36]	; (80050f0 <HAL_RCC_GetSysClockFreq+0x138>)
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	0b5b      	lsrs	r3, r3, #13
 80050d0:	2207      	movs	r2, #7
 80050d2:	4013      	ands	r3, r2
 80050d4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	3301      	adds	r3, #1
 80050da:	2280      	movs	r2, #128	; 0x80
 80050dc:	0212      	lsls	r2, r2, #8
 80050de:	409a      	lsls	r2, r3
 80050e0:	0013      	movs	r3, r2
 80050e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80050e4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80050e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80050e8:	0018      	movs	r0, r3
 80050ea:	46bd      	mov	sp, r7
 80050ec:	b00e      	add	sp, #56	; 0x38
 80050ee:	bdb0      	pop	{r4, r5, r7, pc}
 80050f0:	40021000 	.word	0x40021000
 80050f4:	003d0900 	.word	0x003d0900
 80050f8:	00f42400 	.word	0x00f42400
 80050fc:	007a1200 	.word	0x007a1200
 8005100:	08006a28 	.word	0x08006a28

08005104 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005108:	4b02      	ldr	r3, [pc, #8]	; (8005114 <HAL_RCC_GetHCLKFreq+0x10>)
 800510a:	681b      	ldr	r3, [r3, #0]
}
 800510c:	0018      	movs	r0, r3
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	46c0      	nop			; (mov r8, r8)
 8005114:	20000000 	.word	0x20000000

08005118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800511c:	f7ff fff2 	bl	8005104 <HAL_RCC_GetHCLKFreq>
 8005120:	0001      	movs	r1, r0
 8005122:	4b06      	ldr	r3, [pc, #24]	; (800513c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	0a1b      	lsrs	r3, r3, #8
 8005128:	2207      	movs	r2, #7
 800512a:	4013      	ands	r3, r2
 800512c:	4a04      	ldr	r2, [pc, #16]	; (8005140 <HAL_RCC_GetPCLK1Freq+0x28>)
 800512e:	5cd3      	ldrb	r3, [r2, r3]
 8005130:	40d9      	lsrs	r1, r3
 8005132:	000b      	movs	r3, r1
}
 8005134:	0018      	movs	r0, r3
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	46c0      	nop			; (mov r8, r8)
 800513c:	40021000 	.word	0x40021000
 8005140:	08006a20 	.word	0x08006a20

08005144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005148:	f7ff ffdc 	bl	8005104 <HAL_RCC_GetHCLKFreq>
 800514c:	0001      	movs	r1, r0
 800514e:	4b06      	ldr	r3, [pc, #24]	; (8005168 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	0adb      	lsrs	r3, r3, #11
 8005154:	2207      	movs	r2, #7
 8005156:	4013      	ands	r3, r2
 8005158:	4a04      	ldr	r2, [pc, #16]	; (800516c <HAL_RCC_GetPCLK2Freq+0x28>)
 800515a:	5cd3      	ldrb	r3, [r2, r3]
 800515c:	40d9      	lsrs	r1, r3
 800515e:	000b      	movs	r3, r1
}
 8005160:	0018      	movs	r0, r3
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	46c0      	nop			; (mov r8, r8)
 8005168:	40021000 	.word	0x40021000
 800516c:	08006a20 	.word	0x08006a20

08005170 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005178:	2317      	movs	r3, #23
 800517a:	18fb      	adds	r3, r7, r3
 800517c:	2200      	movs	r2, #0
 800517e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2220      	movs	r2, #32
 8005186:	4013      	ands	r3, r2
 8005188:	d106      	bne.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	2380      	movs	r3, #128	; 0x80
 8005190:	011b      	lsls	r3, r3, #4
 8005192:	4013      	ands	r3, r2
 8005194:	d100      	bne.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8005196:	e104      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005198:	4bb1      	ldr	r3, [pc, #708]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800519a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800519c:	2380      	movs	r3, #128	; 0x80
 800519e:	055b      	lsls	r3, r3, #21
 80051a0:	4013      	ands	r3, r2
 80051a2:	d10a      	bne.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051a4:	4bae      	ldr	r3, [pc, #696]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80051a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051a8:	4bad      	ldr	r3, [pc, #692]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80051aa:	2180      	movs	r1, #128	; 0x80
 80051ac:	0549      	lsls	r1, r1, #21
 80051ae:	430a      	orrs	r2, r1
 80051b0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80051b2:	2317      	movs	r3, #23
 80051b4:	18fb      	adds	r3, r7, r3
 80051b6:	2201      	movs	r2, #1
 80051b8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ba:	4baa      	ldr	r3, [pc, #680]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	2380      	movs	r3, #128	; 0x80
 80051c0:	005b      	lsls	r3, r3, #1
 80051c2:	4013      	ands	r3, r2
 80051c4:	d11a      	bne.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051c6:	4ba7      	ldr	r3, [pc, #668]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	4ba6      	ldr	r3, [pc, #664]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80051cc:	2180      	movs	r1, #128	; 0x80
 80051ce:	0049      	lsls	r1, r1, #1
 80051d0:	430a      	orrs	r2, r1
 80051d2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051d4:	f7fe f998 	bl	8003508 <HAL_GetTick>
 80051d8:	0003      	movs	r3, r0
 80051da:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051dc:	e008      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051de:	f7fe f993 	bl	8003508 <HAL_GetTick>
 80051e2:	0002      	movs	r2, r0
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b64      	cmp	r3, #100	; 0x64
 80051ea:	d901      	bls.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e133      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f0:	4b9c      	ldr	r3, [pc, #624]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	2380      	movs	r3, #128	; 0x80
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	4013      	ands	r3, r2
 80051fa:	d0f0      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80051fc:	4b98      	ldr	r3, [pc, #608]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	23c0      	movs	r3, #192	; 0xc0
 8005202:	039b      	lsls	r3, r3, #14
 8005204:	4013      	ands	r3, r2
 8005206:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	23c0      	movs	r3, #192	; 0xc0
 800520e:	039b      	lsls	r3, r3, #14
 8005210:	4013      	ands	r3, r2
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	429a      	cmp	r2, r3
 8005216:	d107      	bne.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	23c0      	movs	r3, #192	; 0xc0
 800521e:	039b      	lsls	r3, r3, #14
 8005220:	4013      	ands	r3, r2
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	429a      	cmp	r2, r3
 8005226:	d013      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	23c0      	movs	r3, #192	; 0xc0
 800522e:	029b      	lsls	r3, r3, #10
 8005230:	401a      	ands	r2, r3
 8005232:	23c0      	movs	r3, #192	; 0xc0
 8005234:	029b      	lsls	r3, r3, #10
 8005236:	429a      	cmp	r2, r3
 8005238:	d10a      	bne.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800523a:	4b89      	ldr	r3, [pc, #548]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	2380      	movs	r3, #128	; 0x80
 8005240:	029b      	lsls	r3, r3, #10
 8005242:	401a      	ands	r2, r3
 8005244:	2380      	movs	r3, #128	; 0x80
 8005246:	029b      	lsls	r3, r3, #10
 8005248:	429a      	cmp	r2, r3
 800524a:	d101      	bne.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e103      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005250:	4b83      	ldr	r3, [pc, #524]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005252:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005254:	23c0      	movs	r3, #192	; 0xc0
 8005256:	029b      	lsls	r3, r3, #10
 8005258:	4013      	ands	r3, r2
 800525a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d049      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	23c0      	movs	r3, #192	; 0xc0
 8005268:	029b      	lsls	r3, r3, #10
 800526a:	4013      	ands	r3, r2
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	429a      	cmp	r2, r3
 8005270:	d004      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2220      	movs	r2, #32
 8005278:	4013      	ands	r3, r2
 800527a:	d10d      	bne.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689a      	ldr	r2, [r3, #8]
 8005280:	23c0      	movs	r3, #192	; 0xc0
 8005282:	029b      	lsls	r3, r3, #10
 8005284:	4013      	ands	r3, r2
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	429a      	cmp	r2, r3
 800528a:	d034      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	2380      	movs	r3, #128	; 0x80
 8005292:	011b      	lsls	r3, r3, #4
 8005294:	4013      	ands	r3, r2
 8005296:	d02e      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005298:	4b71      	ldr	r3, [pc, #452]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800529a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800529c:	4a72      	ldr	r2, [pc, #456]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800529e:	4013      	ands	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052a2:	4b6f      	ldr	r3, [pc, #444]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052a6:	4b6e      	ldr	r3, [pc, #440]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052a8:	2180      	movs	r1, #128	; 0x80
 80052aa:	0309      	lsls	r1, r1, #12
 80052ac:	430a      	orrs	r2, r1
 80052ae:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052b0:	4b6b      	ldr	r3, [pc, #428]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052b4:	4b6a      	ldr	r3, [pc, #424]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052b6:	496d      	ldr	r1, [pc, #436]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80052b8:	400a      	ands	r2, r1
 80052ba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80052bc:	4b68      	ldr	r3, [pc, #416]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	2380      	movs	r3, #128	; 0x80
 80052c6:	005b      	lsls	r3, r3, #1
 80052c8:	4013      	ands	r3, r2
 80052ca:	d014      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052cc:	f7fe f91c 	bl	8003508 <HAL_GetTick>
 80052d0:	0003      	movs	r3, r0
 80052d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052d4:	e009      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052d6:	f7fe f917 	bl	8003508 <HAL_GetTick>
 80052da:	0002      	movs	r2, r0
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	4a63      	ldr	r2, [pc, #396]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d901      	bls.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e0b6      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052ea:	4b5d      	ldr	r3, [pc, #372]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052ee:	2380      	movs	r3, #128	; 0x80
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4013      	ands	r3, r2
 80052f4:	d0ef      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	2380      	movs	r3, #128	; 0x80
 80052fc:	011b      	lsls	r3, r3, #4
 80052fe:	4013      	ands	r3, r2
 8005300:	d01f      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689a      	ldr	r2, [r3, #8]
 8005306:	23c0      	movs	r3, #192	; 0xc0
 8005308:	029b      	lsls	r3, r3, #10
 800530a:	401a      	ands	r2, r3
 800530c:	23c0      	movs	r3, #192	; 0xc0
 800530e:	029b      	lsls	r3, r3, #10
 8005310:	429a      	cmp	r2, r3
 8005312:	d10c      	bne.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8005314:	4b52      	ldr	r3, [pc, #328]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a56      	ldr	r2, [pc, #344]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800531a:	4013      	ands	r3, r2
 800531c:	0019      	movs	r1, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	689a      	ldr	r2, [r3, #8]
 8005322:	23c0      	movs	r3, #192	; 0xc0
 8005324:	039b      	lsls	r3, r3, #14
 8005326:	401a      	ands	r2, r3
 8005328:	4b4d      	ldr	r3, [pc, #308]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800532a:	430a      	orrs	r2, r1
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	4b4c      	ldr	r3, [pc, #304]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005330:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	689a      	ldr	r2, [r3, #8]
 8005336:	23c0      	movs	r3, #192	; 0xc0
 8005338:	029b      	lsls	r3, r3, #10
 800533a:	401a      	ands	r2, r3
 800533c:	4b48      	ldr	r3, [pc, #288]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800533e:	430a      	orrs	r2, r1
 8005340:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2220      	movs	r2, #32
 8005348:	4013      	ands	r3, r2
 800534a:	d01f      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	23c0      	movs	r3, #192	; 0xc0
 8005352:	029b      	lsls	r3, r3, #10
 8005354:	401a      	ands	r2, r3
 8005356:	23c0      	movs	r3, #192	; 0xc0
 8005358:	029b      	lsls	r3, r3, #10
 800535a:	429a      	cmp	r2, r3
 800535c:	d10c      	bne.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800535e:	4b40      	ldr	r3, [pc, #256]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a44      	ldr	r2, [pc, #272]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005364:	4013      	ands	r3, r2
 8005366:	0019      	movs	r1, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	23c0      	movs	r3, #192	; 0xc0
 800536e:	039b      	lsls	r3, r3, #14
 8005370:	401a      	ands	r2, r3
 8005372:	4b3b      	ldr	r3, [pc, #236]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005374:	430a      	orrs	r2, r1
 8005376:	601a      	str	r2, [r3, #0]
 8005378:	4b39      	ldr	r3, [pc, #228]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800537a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	23c0      	movs	r3, #192	; 0xc0
 8005382:	029b      	lsls	r3, r3, #10
 8005384:	401a      	ands	r2, r3
 8005386:	4b36      	ldr	r3, [pc, #216]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005388:	430a      	orrs	r2, r1
 800538a:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800538c:	2317      	movs	r3, #23
 800538e:	18fb      	adds	r3, r7, r3
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d105      	bne.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005396:	4b32      	ldr	r3, [pc, #200]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800539a:	4b31      	ldr	r3, [pc, #196]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800539c:	4936      	ldr	r1, [pc, #216]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800539e:	400a      	ands	r2, r1
 80053a0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2201      	movs	r2, #1
 80053a8:	4013      	ands	r3, r2
 80053aa:	d009      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053ac:	4b2c      	ldr	r3, [pc, #176]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80053ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053b0:	2203      	movs	r2, #3
 80053b2:	4393      	bics	r3, r2
 80053b4:	0019      	movs	r1, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68da      	ldr	r2, [r3, #12]
 80053ba:	4b29      	ldr	r3, [pc, #164]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80053bc:	430a      	orrs	r2, r1
 80053be:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2202      	movs	r2, #2
 80053c6:	4013      	ands	r3, r2
 80053c8:	d009      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053ca:	4b25      	ldr	r3, [pc, #148]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80053cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ce:	220c      	movs	r2, #12
 80053d0:	4393      	bics	r3, r2
 80053d2:	0019      	movs	r1, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	691a      	ldr	r2, [r3, #16]
 80053d8:	4b21      	ldr	r3, [pc, #132]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80053da:	430a      	orrs	r2, r1
 80053dc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2204      	movs	r2, #4
 80053e4:	4013      	ands	r3, r2
 80053e6:	d009      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053e8:	4b1d      	ldr	r3, [pc, #116]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80053ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ec:	4a23      	ldr	r2, [pc, #140]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80053ee:	4013      	ands	r3, r2
 80053f0:	0019      	movs	r1, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	695a      	ldr	r2, [r3, #20]
 80053f6:	4b1a      	ldr	r3, [pc, #104]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80053f8:	430a      	orrs	r2, r1
 80053fa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2208      	movs	r2, #8
 8005402:	4013      	ands	r3, r2
 8005404:	d009      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005406:	4b16      	ldr	r3, [pc, #88]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800540a:	4a1d      	ldr	r2, [pc, #116]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800540c:	4013      	ands	r3, r2
 800540e:	0019      	movs	r1, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	699a      	ldr	r2, [r3, #24]
 8005414:	4b12      	ldr	r3, [pc, #72]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005416:	430a      	orrs	r2, r1
 8005418:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2240      	movs	r2, #64	; 0x40
 8005420:	4013      	ands	r3, r2
 8005422:	d009      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005424:	4b0e      	ldr	r3, [pc, #56]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005428:	4a16      	ldr	r2, [pc, #88]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800542a:	4013      	ands	r3, r2
 800542c:	0019      	movs	r1, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a1a      	ldr	r2, [r3, #32]
 8005432:	4b0b      	ldr	r3, [pc, #44]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005434:	430a      	orrs	r2, r1
 8005436:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2280      	movs	r2, #128	; 0x80
 800543e:	4013      	ands	r3, r2
 8005440:	d009      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005442:	4b07      	ldr	r3, [pc, #28]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005446:	4a10      	ldr	r2, [pc, #64]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8005448:	4013      	ands	r3, r2
 800544a:	0019      	movs	r1, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	69da      	ldr	r2, [r3, #28]
 8005450:	4b03      	ldr	r3, [pc, #12]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005452:	430a      	orrs	r2, r1
 8005454:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	0018      	movs	r0, r3
 800545a:	46bd      	mov	sp, r7
 800545c:	b006      	add	sp, #24
 800545e:	bd80      	pop	{r7, pc}
 8005460:	40021000 	.word	0x40021000
 8005464:	40007000 	.word	0x40007000
 8005468:	fffcffff 	.word	0xfffcffff
 800546c:	fff7ffff 	.word	0xfff7ffff
 8005470:	00001388 	.word	0x00001388
 8005474:	ffcfffff 	.word	0xffcfffff
 8005478:	efffffff 	.word	0xefffffff
 800547c:	fffff3ff 	.word	0xfffff3ff
 8005480:	ffffcfff 	.word	0xffffcfff
 8005484:	fbffffff 	.word	0xfbffffff
 8005488:	fff3ffff 	.word	0xfff3ffff

0800548c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e044      	b.n	8005528 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d107      	bne.n	80054b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2278      	movs	r2, #120	; 0x78
 80054aa:	2100      	movs	r1, #0
 80054ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	0018      	movs	r0, r3
 80054b2:	f7fd fd65 	bl	8002f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2224      	movs	r2, #36	; 0x24
 80054ba:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2101      	movs	r1, #1
 80054c8:	438a      	bics	r2, r1
 80054ca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	0018      	movs	r0, r3
 80054d0:	f000 f8d0 	bl	8005674 <UART_SetConfig>
 80054d4:	0003      	movs	r3, r0
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d101      	bne.n	80054de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e024      	b.n	8005528 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d003      	beq.n	80054ee <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	0018      	movs	r0, r3
 80054ea:	f000 fb47 	bl	8005b7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	490d      	ldr	r1, [pc, #52]	; (8005530 <HAL_UART_Init+0xa4>)
 80054fa:	400a      	ands	r2, r1
 80054fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	212a      	movs	r1, #42	; 0x2a
 800550a:	438a      	bics	r2, r1
 800550c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2101      	movs	r1, #1
 800551a:	430a      	orrs	r2, r1
 800551c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	0018      	movs	r0, r3
 8005522:	f000 fbdf 	bl	8005ce4 <UART_CheckIdleState>
 8005526:	0003      	movs	r3, r0
}
 8005528:	0018      	movs	r0, r3
 800552a:	46bd      	mov	sp, r7
 800552c:	b002      	add	sp, #8
 800552e:	bd80      	pop	{r7, pc}
 8005530:	ffffb7ff 	.word	0xffffb7ff

08005534 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b08a      	sub	sp, #40	; 0x28
 8005538:	af02      	add	r7, sp, #8
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	603b      	str	r3, [r7, #0]
 8005540:	1dbb      	adds	r3, r7, #6
 8005542:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005548:	2b20      	cmp	r3, #32
 800554a:	d000      	beq.n	800554e <HAL_UART_Transmit+0x1a>
 800554c:	e08c      	b.n	8005668 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d003      	beq.n	800555c <HAL_UART_Transmit+0x28>
 8005554:	1dbb      	adds	r3, r7, #6
 8005556:	881b      	ldrh	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d101      	bne.n	8005560 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e084      	b.n	800566a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	689a      	ldr	r2, [r3, #8]
 8005564:	2380      	movs	r3, #128	; 0x80
 8005566:	015b      	lsls	r3, r3, #5
 8005568:	429a      	cmp	r2, r3
 800556a:	d109      	bne.n	8005580 <HAL_UART_Transmit+0x4c>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d105      	bne.n	8005580 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2201      	movs	r2, #1
 8005578:	4013      	ands	r3, r2
 800557a:	d001      	beq.n	8005580 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e074      	b.n	800566a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2284      	movs	r2, #132	; 0x84
 8005584:	2100      	movs	r1, #0
 8005586:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2221      	movs	r2, #33	; 0x21
 800558c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800558e:	f7fd ffbb 	bl	8003508 <HAL_GetTick>
 8005592:	0003      	movs	r3, r0
 8005594:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	1dba      	adds	r2, r7, #6
 800559a:	2150      	movs	r1, #80	; 0x50
 800559c:	8812      	ldrh	r2, [r2, #0]
 800559e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	1dba      	adds	r2, r7, #6
 80055a4:	2152      	movs	r1, #82	; 0x52
 80055a6:	8812      	ldrh	r2, [r2, #0]
 80055a8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	689a      	ldr	r2, [r3, #8]
 80055ae:	2380      	movs	r3, #128	; 0x80
 80055b0:	015b      	lsls	r3, r3, #5
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d108      	bne.n	80055c8 <HAL_UART_Transmit+0x94>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d104      	bne.n	80055c8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80055be:	2300      	movs	r3, #0
 80055c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	61bb      	str	r3, [r7, #24]
 80055c6:	e003      	b.n	80055d0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055cc:	2300      	movs	r3, #0
 80055ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055d0:	e02f      	b.n	8005632 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	0013      	movs	r3, r2
 80055dc:	2200      	movs	r2, #0
 80055de:	2180      	movs	r1, #128	; 0x80
 80055e0:	f000 fc28 	bl	8005e34 <UART_WaitOnFlagUntilTimeout>
 80055e4:	1e03      	subs	r3, r0, #0
 80055e6:	d004      	beq.n	80055f2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2220      	movs	r2, #32
 80055ec:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e03b      	b.n	800566a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10b      	bne.n	8005610 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	881b      	ldrh	r3, [r3, #0]
 80055fc:	001a      	movs	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	05d2      	lsls	r2, r2, #23
 8005604:	0dd2      	lsrs	r2, r2, #23
 8005606:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	3302      	adds	r3, #2
 800560c:	61bb      	str	r3, [r7, #24]
 800560e:	e007      	b.n	8005620 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	781a      	ldrb	r2, [r3, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	3301      	adds	r3, #1
 800561e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2252      	movs	r2, #82	; 0x52
 8005624:	5a9b      	ldrh	r3, [r3, r2]
 8005626:	b29b      	uxth	r3, r3
 8005628:	3b01      	subs	r3, #1
 800562a:	b299      	uxth	r1, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2252      	movs	r2, #82	; 0x52
 8005630:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2252      	movs	r2, #82	; 0x52
 8005636:	5a9b      	ldrh	r3, [r3, r2]
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1c9      	bne.n	80055d2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	9300      	str	r3, [sp, #0]
 8005646:	0013      	movs	r3, r2
 8005648:	2200      	movs	r2, #0
 800564a:	2140      	movs	r1, #64	; 0x40
 800564c:	f000 fbf2 	bl	8005e34 <UART_WaitOnFlagUntilTimeout>
 8005650:	1e03      	subs	r3, r0, #0
 8005652:	d004      	beq.n	800565e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2220      	movs	r2, #32
 8005658:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e005      	b.n	800566a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2220      	movs	r2, #32
 8005662:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005664:	2300      	movs	r3, #0
 8005666:	e000      	b.n	800566a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8005668:	2302      	movs	r3, #2
  }
}
 800566a:	0018      	movs	r0, r3
 800566c:	46bd      	mov	sp, r7
 800566e:	b008      	add	sp, #32
 8005670:	bd80      	pop	{r7, pc}
	...

08005674 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005674:	b5b0      	push	{r4, r5, r7, lr}
 8005676:	b08e      	sub	sp, #56	; 0x38
 8005678:	af00      	add	r7, sp, #0
 800567a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800567c:	231a      	movs	r3, #26
 800567e:	2218      	movs	r2, #24
 8005680:	189b      	adds	r3, r3, r2
 8005682:	19db      	adds	r3, r3, r7
 8005684:	2200      	movs	r2, #0
 8005686:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	689a      	ldr	r2, [r3, #8]
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	431a      	orrs	r2, r3
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	431a      	orrs	r2, r3
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	69db      	ldr	r3, [r3, #28]
 800569c:	4313      	orrs	r3, r2
 800569e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4ac6      	ldr	r2, [pc, #792]	; (80059c0 <UART_SetConfig+0x34c>)
 80056a8:	4013      	ands	r3, r2
 80056aa:	0019      	movs	r1, r3
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056b2:	430a      	orrs	r2, r1
 80056b4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	4ac1      	ldr	r2, [pc, #772]	; (80059c4 <UART_SetConfig+0x350>)
 80056be:	4013      	ands	r3, r2
 80056c0:	0019      	movs	r1, r3
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	68da      	ldr	r2, [r3, #12]
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4abb      	ldr	r2, [pc, #748]	; (80059c8 <UART_SetConfig+0x354>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d004      	beq.n	80056e8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056e4:	4313      	orrs	r3, r2
 80056e6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	4ab7      	ldr	r2, [pc, #732]	; (80059cc <UART_SetConfig+0x358>)
 80056f0:	4013      	ands	r3, r2
 80056f2:	0019      	movs	r1, r3
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056fa:	430a      	orrs	r2, r1
 80056fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4ab3      	ldr	r2, [pc, #716]	; (80059d0 <UART_SetConfig+0x35c>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d131      	bne.n	800576c <UART_SetConfig+0xf8>
 8005708:	4bb2      	ldr	r3, [pc, #712]	; (80059d4 <UART_SetConfig+0x360>)
 800570a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800570c:	2203      	movs	r2, #3
 800570e:	4013      	ands	r3, r2
 8005710:	2b03      	cmp	r3, #3
 8005712:	d01d      	beq.n	8005750 <UART_SetConfig+0xdc>
 8005714:	d823      	bhi.n	800575e <UART_SetConfig+0xea>
 8005716:	2b02      	cmp	r3, #2
 8005718:	d00c      	beq.n	8005734 <UART_SetConfig+0xc0>
 800571a:	d820      	bhi.n	800575e <UART_SetConfig+0xea>
 800571c:	2b00      	cmp	r3, #0
 800571e:	d002      	beq.n	8005726 <UART_SetConfig+0xb2>
 8005720:	2b01      	cmp	r3, #1
 8005722:	d00e      	beq.n	8005742 <UART_SetConfig+0xce>
 8005724:	e01b      	b.n	800575e <UART_SetConfig+0xea>
 8005726:	231b      	movs	r3, #27
 8005728:	2218      	movs	r2, #24
 800572a:	189b      	adds	r3, r3, r2
 800572c:	19db      	adds	r3, r3, r7
 800572e:	2201      	movs	r2, #1
 8005730:	701a      	strb	r2, [r3, #0]
 8005732:	e09c      	b.n	800586e <UART_SetConfig+0x1fa>
 8005734:	231b      	movs	r3, #27
 8005736:	2218      	movs	r2, #24
 8005738:	189b      	adds	r3, r3, r2
 800573a:	19db      	adds	r3, r3, r7
 800573c:	2202      	movs	r2, #2
 800573e:	701a      	strb	r2, [r3, #0]
 8005740:	e095      	b.n	800586e <UART_SetConfig+0x1fa>
 8005742:	231b      	movs	r3, #27
 8005744:	2218      	movs	r2, #24
 8005746:	189b      	adds	r3, r3, r2
 8005748:	19db      	adds	r3, r3, r7
 800574a:	2204      	movs	r2, #4
 800574c:	701a      	strb	r2, [r3, #0]
 800574e:	e08e      	b.n	800586e <UART_SetConfig+0x1fa>
 8005750:	231b      	movs	r3, #27
 8005752:	2218      	movs	r2, #24
 8005754:	189b      	adds	r3, r3, r2
 8005756:	19db      	adds	r3, r3, r7
 8005758:	2208      	movs	r2, #8
 800575a:	701a      	strb	r2, [r3, #0]
 800575c:	e087      	b.n	800586e <UART_SetConfig+0x1fa>
 800575e:	231b      	movs	r3, #27
 8005760:	2218      	movs	r2, #24
 8005762:	189b      	adds	r3, r3, r2
 8005764:	19db      	adds	r3, r3, r7
 8005766:	2210      	movs	r2, #16
 8005768:	701a      	strb	r2, [r3, #0]
 800576a:	e080      	b.n	800586e <UART_SetConfig+0x1fa>
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a99      	ldr	r2, [pc, #612]	; (80059d8 <UART_SetConfig+0x364>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d131      	bne.n	80057da <UART_SetConfig+0x166>
 8005776:	4b97      	ldr	r3, [pc, #604]	; (80059d4 <UART_SetConfig+0x360>)
 8005778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800577a:	220c      	movs	r2, #12
 800577c:	4013      	ands	r3, r2
 800577e:	2b0c      	cmp	r3, #12
 8005780:	d01d      	beq.n	80057be <UART_SetConfig+0x14a>
 8005782:	d823      	bhi.n	80057cc <UART_SetConfig+0x158>
 8005784:	2b08      	cmp	r3, #8
 8005786:	d00c      	beq.n	80057a2 <UART_SetConfig+0x12e>
 8005788:	d820      	bhi.n	80057cc <UART_SetConfig+0x158>
 800578a:	2b00      	cmp	r3, #0
 800578c:	d002      	beq.n	8005794 <UART_SetConfig+0x120>
 800578e:	2b04      	cmp	r3, #4
 8005790:	d00e      	beq.n	80057b0 <UART_SetConfig+0x13c>
 8005792:	e01b      	b.n	80057cc <UART_SetConfig+0x158>
 8005794:	231b      	movs	r3, #27
 8005796:	2218      	movs	r2, #24
 8005798:	189b      	adds	r3, r3, r2
 800579a:	19db      	adds	r3, r3, r7
 800579c:	2200      	movs	r2, #0
 800579e:	701a      	strb	r2, [r3, #0]
 80057a0:	e065      	b.n	800586e <UART_SetConfig+0x1fa>
 80057a2:	231b      	movs	r3, #27
 80057a4:	2218      	movs	r2, #24
 80057a6:	189b      	adds	r3, r3, r2
 80057a8:	19db      	adds	r3, r3, r7
 80057aa:	2202      	movs	r2, #2
 80057ac:	701a      	strb	r2, [r3, #0]
 80057ae:	e05e      	b.n	800586e <UART_SetConfig+0x1fa>
 80057b0:	231b      	movs	r3, #27
 80057b2:	2218      	movs	r2, #24
 80057b4:	189b      	adds	r3, r3, r2
 80057b6:	19db      	adds	r3, r3, r7
 80057b8:	2204      	movs	r2, #4
 80057ba:	701a      	strb	r2, [r3, #0]
 80057bc:	e057      	b.n	800586e <UART_SetConfig+0x1fa>
 80057be:	231b      	movs	r3, #27
 80057c0:	2218      	movs	r2, #24
 80057c2:	189b      	adds	r3, r3, r2
 80057c4:	19db      	adds	r3, r3, r7
 80057c6:	2208      	movs	r2, #8
 80057c8:	701a      	strb	r2, [r3, #0]
 80057ca:	e050      	b.n	800586e <UART_SetConfig+0x1fa>
 80057cc:	231b      	movs	r3, #27
 80057ce:	2218      	movs	r2, #24
 80057d0:	189b      	adds	r3, r3, r2
 80057d2:	19db      	adds	r3, r3, r7
 80057d4:	2210      	movs	r2, #16
 80057d6:	701a      	strb	r2, [r3, #0]
 80057d8:	e049      	b.n	800586e <UART_SetConfig+0x1fa>
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a7a      	ldr	r2, [pc, #488]	; (80059c8 <UART_SetConfig+0x354>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d13e      	bne.n	8005862 <UART_SetConfig+0x1ee>
 80057e4:	4b7b      	ldr	r3, [pc, #492]	; (80059d4 <UART_SetConfig+0x360>)
 80057e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057e8:	23c0      	movs	r3, #192	; 0xc0
 80057ea:	011b      	lsls	r3, r3, #4
 80057ec:	4013      	ands	r3, r2
 80057ee:	22c0      	movs	r2, #192	; 0xc0
 80057f0:	0112      	lsls	r2, r2, #4
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d027      	beq.n	8005846 <UART_SetConfig+0x1d2>
 80057f6:	22c0      	movs	r2, #192	; 0xc0
 80057f8:	0112      	lsls	r2, r2, #4
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d82a      	bhi.n	8005854 <UART_SetConfig+0x1e0>
 80057fe:	2280      	movs	r2, #128	; 0x80
 8005800:	0112      	lsls	r2, r2, #4
 8005802:	4293      	cmp	r3, r2
 8005804:	d011      	beq.n	800582a <UART_SetConfig+0x1b6>
 8005806:	2280      	movs	r2, #128	; 0x80
 8005808:	0112      	lsls	r2, r2, #4
 800580a:	4293      	cmp	r3, r2
 800580c:	d822      	bhi.n	8005854 <UART_SetConfig+0x1e0>
 800580e:	2b00      	cmp	r3, #0
 8005810:	d004      	beq.n	800581c <UART_SetConfig+0x1a8>
 8005812:	2280      	movs	r2, #128	; 0x80
 8005814:	00d2      	lsls	r2, r2, #3
 8005816:	4293      	cmp	r3, r2
 8005818:	d00e      	beq.n	8005838 <UART_SetConfig+0x1c4>
 800581a:	e01b      	b.n	8005854 <UART_SetConfig+0x1e0>
 800581c:	231b      	movs	r3, #27
 800581e:	2218      	movs	r2, #24
 8005820:	189b      	adds	r3, r3, r2
 8005822:	19db      	adds	r3, r3, r7
 8005824:	2200      	movs	r2, #0
 8005826:	701a      	strb	r2, [r3, #0]
 8005828:	e021      	b.n	800586e <UART_SetConfig+0x1fa>
 800582a:	231b      	movs	r3, #27
 800582c:	2218      	movs	r2, #24
 800582e:	189b      	adds	r3, r3, r2
 8005830:	19db      	adds	r3, r3, r7
 8005832:	2202      	movs	r2, #2
 8005834:	701a      	strb	r2, [r3, #0]
 8005836:	e01a      	b.n	800586e <UART_SetConfig+0x1fa>
 8005838:	231b      	movs	r3, #27
 800583a:	2218      	movs	r2, #24
 800583c:	189b      	adds	r3, r3, r2
 800583e:	19db      	adds	r3, r3, r7
 8005840:	2204      	movs	r2, #4
 8005842:	701a      	strb	r2, [r3, #0]
 8005844:	e013      	b.n	800586e <UART_SetConfig+0x1fa>
 8005846:	231b      	movs	r3, #27
 8005848:	2218      	movs	r2, #24
 800584a:	189b      	adds	r3, r3, r2
 800584c:	19db      	adds	r3, r3, r7
 800584e:	2208      	movs	r2, #8
 8005850:	701a      	strb	r2, [r3, #0]
 8005852:	e00c      	b.n	800586e <UART_SetConfig+0x1fa>
 8005854:	231b      	movs	r3, #27
 8005856:	2218      	movs	r2, #24
 8005858:	189b      	adds	r3, r3, r2
 800585a:	19db      	adds	r3, r3, r7
 800585c:	2210      	movs	r2, #16
 800585e:	701a      	strb	r2, [r3, #0]
 8005860:	e005      	b.n	800586e <UART_SetConfig+0x1fa>
 8005862:	231b      	movs	r3, #27
 8005864:	2218      	movs	r2, #24
 8005866:	189b      	adds	r3, r3, r2
 8005868:	19db      	adds	r3, r3, r7
 800586a:	2210      	movs	r2, #16
 800586c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a55      	ldr	r2, [pc, #340]	; (80059c8 <UART_SetConfig+0x354>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d000      	beq.n	800587a <UART_SetConfig+0x206>
 8005878:	e084      	b.n	8005984 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800587a:	231b      	movs	r3, #27
 800587c:	2218      	movs	r2, #24
 800587e:	189b      	adds	r3, r3, r2
 8005880:	19db      	adds	r3, r3, r7
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	2b08      	cmp	r3, #8
 8005886:	d01d      	beq.n	80058c4 <UART_SetConfig+0x250>
 8005888:	dc20      	bgt.n	80058cc <UART_SetConfig+0x258>
 800588a:	2b04      	cmp	r3, #4
 800588c:	d015      	beq.n	80058ba <UART_SetConfig+0x246>
 800588e:	dc1d      	bgt.n	80058cc <UART_SetConfig+0x258>
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <UART_SetConfig+0x226>
 8005894:	2b02      	cmp	r3, #2
 8005896:	d005      	beq.n	80058a4 <UART_SetConfig+0x230>
 8005898:	e018      	b.n	80058cc <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800589a:	f7ff fc3d 	bl	8005118 <HAL_RCC_GetPCLK1Freq>
 800589e:	0003      	movs	r3, r0
 80058a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058a2:	e01c      	b.n	80058de <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058a4:	4b4b      	ldr	r3, [pc, #300]	; (80059d4 <UART_SetConfig+0x360>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2210      	movs	r2, #16
 80058aa:	4013      	ands	r3, r2
 80058ac:	d002      	beq.n	80058b4 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80058ae:	4b4b      	ldr	r3, [pc, #300]	; (80059dc <UART_SetConfig+0x368>)
 80058b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80058b2:	e014      	b.n	80058de <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 80058b4:	4b4a      	ldr	r3, [pc, #296]	; (80059e0 <UART_SetConfig+0x36c>)
 80058b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058b8:	e011      	b.n	80058de <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058ba:	f7ff fb7d 	bl	8004fb8 <HAL_RCC_GetSysClockFreq>
 80058be:	0003      	movs	r3, r0
 80058c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058c2:	e00c      	b.n	80058de <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058c4:	2380      	movs	r3, #128	; 0x80
 80058c6:	021b      	lsls	r3, r3, #8
 80058c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058ca:	e008      	b.n	80058de <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80058d0:	231a      	movs	r3, #26
 80058d2:	2218      	movs	r2, #24
 80058d4:	189b      	adds	r3, r3, r2
 80058d6:	19db      	adds	r3, r3, r7
 80058d8:	2201      	movs	r2, #1
 80058da:	701a      	strb	r2, [r3, #0]
        break;
 80058dc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d100      	bne.n	80058e6 <UART_SetConfig+0x272>
 80058e4:	e132      	b.n	8005b4c <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	0013      	movs	r3, r2
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	189b      	adds	r3, r3, r2
 80058f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d305      	bcc.n	8005902 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80058fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058fe:	429a      	cmp	r2, r3
 8005900:	d906      	bls.n	8005910 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8005902:	231a      	movs	r3, #26
 8005904:	2218      	movs	r2, #24
 8005906:	189b      	adds	r3, r3, r2
 8005908:	19db      	adds	r3, r3, r7
 800590a:	2201      	movs	r2, #1
 800590c:	701a      	strb	r2, [r3, #0]
 800590e:	e11d      	b.n	8005b4c <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005912:	613b      	str	r3, [r7, #16]
 8005914:	2300      	movs	r3, #0
 8005916:	617b      	str	r3, [r7, #20]
 8005918:	6939      	ldr	r1, [r7, #16]
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	000b      	movs	r3, r1
 800591e:	0e1b      	lsrs	r3, r3, #24
 8005920:	0010      	movs	r0, r2
 8005922:	0205      	lsls	r5, r0, #8
 8005924:	431d      	orrs	r5, r3
 8005926:	000b      	movs	r3, r1
 8005928:	021c      	lsls	r4, r3, #8
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	085b      	lsrs	r3, r3, #1
 8005930:	60bb      	str	r3, [r7, #8]
 8005932:	2300      	movs	r3, #0
 8005934:	60fb      	str	r3, [r7, #12]
 8005936:	68b8      	ldr	r0, [r7, #8]
 8005938:	68f9      	ldr	r1, [r7, #12]
 800593a:	1900      	adds	r0, r0, r4
 800593c:	4169      	adcs	r1, r5
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	603b      	str	r3, [r7, #0]
 8005944:	2300      	movs	r3, #0
 8005946:	607b      	str	r3, [r7, #4]
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f7fa fc7a 	bl	8000244 <__aeabi_uldivmod>
 8005950:	0002      	movs	r2, r0
 8005952:	000b      	movs	r3, r1
 8005954:	0013      	movs	r3, r2
 8005956:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005958:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800595a:	23c0      	movs	r3, #192	; 0xc0
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	429a      	cmp	r2, r3
 8005960:	d309      	bcc.n	8005976 <UART_SetConfig+0x302>
 8005962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005964:	2380      	movs	r3, #128	; 0x80
 8005966:	035b      	lsls	r3, r3, #13
 8005968:	429a      	cmp	r2, r3
 800596a:	d204      	bcs.n	8005976 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005972:	60da      	str	r2, [r3, #12]
 8005974:	e0ea      	b.n	8005b4c <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8005976:	231a      	movs	r3, #26
 8005978:	2218      	movs	r2, #24
 800597a:	189b      	adds	r3, r3, r2
 800597c:	19db      	adds	r3, r3, r7
 800597e:	2201      	movs	r2, #1
 8005980:	701a      	strb	r2, [r3, #0]
 8005982:	e0e3      	b.n	8005b4c <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	69da      	ldr	r2, [r3, #28]
 8005988:	2380      	movs	r3, #128	; 0x80
 800598a:	021b      	lsls	r3, r3, #8
 800598c:	429a      	cmp	r2, r3
 800598e:	d000      	beq.n	8005992 <UART_SetConfig+0x31e>
 8005990:	e085      	b.n	8005a9e <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8005992:	231b      	movs	r3, #27
 8005994:	2218      	movs	r2, #24
 8005996:	189b      	adds	r3, r3, r2
 8005998:	19db      	adds	r3, r3, r7
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	2b08      	cmp	r3, #8
 800599e:	d837      	bhi.n	8005a10 <UART_SetConfig+0x39c>
 80059a0:	009a      	lsls	r2, r3, #2
 80059a2:	4b10      	ldr	r3, [pc, #64]	; (80059e4 <UART_SetConfig+0x370>)
 80059a4:	18d3      	adds	r3, r2, r3
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059aa:	f7ff fbb5 	bl	8005118 <HAL_RCC_GetPCLK1Freq>
 80059ae:	0003      	movs	r3, r0
 80059b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059b2:	e036      	b.n	8005a22 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059b4:	f7ff fbc6 	bl	8005144 <HAL_RCC_GetPCLK2Freq>
 80059b8:	0003      	movs	r3, r0
 80059ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059bc:	e031      	b.n	8005a22 <UART_SetConfig+0x3ae>
 80059be:	46c0      	nop			; (mov r8, r8)
 80059c0:	efff69f3 	.word	0xefff69f3
 80059c4:	ffffcfff 	.word	0xffffcfff
 80059c8:	40004800 	.word	0x40004800
 80059cc:	fffff4ff 	.word	0xfffff4ff
 80059d0:	40013800 	.word	0x40013800
 80059d4:	40021000 	.word	0x40021000
 80059d8:	40004400 	.word	0x40004400
 80059dc:	003d0900 	.word	0x003d0900
 80059e0:	00f42400 	.word	0x00f42400
 80059e4:	08006a34 	.word	0x08006a34
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059e8:	4b60      	ldr	r3, [pc, #384]	; (8005b6c <UART_SetConfig+0x4f8>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2210      	movs	r2, #16
 80059ee:	4013      	ands	r3, r2
 80059f0:	d002      	beq.n	80059f8 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80059f2:	4b5f      	ldr	r3, [pc, #380]	; (8005b70 <UART_SetConfig+0x4fc>)
 80059f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80059f6:	e014      	b.n	8005a22 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 80059f8:	4b5e      	ldr	r3, [pc, #376]	; (8005b74 <UART_SetConfig+0x500>)
 80059fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059fc:	e011      	b.n	8005a22 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059fe:	f7ff fadb 	bl	8004fb8 <HAL_RCC_GetSysClockFreq>
 8005a02:	0003      	movs	r3, r0
 8005a04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a06:	e00c      	b.n	8005a22 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a08:	2380      	movs	r3, #128	; 0x80
 8005a0a:	021b      	lsls	r3, r3, #8
 8005a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a0e:	e008      	b.n	8005a22 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8005a10:	2300      	movs	r3, #0
 8005a12:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005a14:	231a      	movs	r3, #26
 8005a16:	2218      	movs	r2, #24
 8005a18:	189b      	adds	r3, r3, r2
 8005a1a:	19db      	adds	r3, r3, r7
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	701a      	strb	r2, [r3, #0]
        break;
 8005a20:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d100      	bne.n	8005a2a <UART_SetConfig+0x3b6>
 8005a28:	e090      	b.n	8005b4c <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2c:	005a      	lsls	r2, r3, #1
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	085b      	lsrs	r3, r3, #1
 8005a34:	18d2      	adds	r2, r2, r3
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	0019      	movs	r1, r3
 8005a3c:	0010      	movs	r0, r2
 8005a3e:	f7fa fb75 	bl	800012c <__udivsi3>
 8005a42:	0003      	movs	r3, r0
 8005a44:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a48:	2b0f      	cmp	r3, #15
 8005a4a:	d921      	bls.n	8005a90 <UART_SetConfig+0x41c>
 8005a4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a4e:	2380      	movs	r3, #128	; 0x80
 8005a50:	025b      	lsls	r3, r3, #9
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d21c      	bcs.n	8005a90 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	200e      	movs	r0, #14
 8005a5c:	2418      	movs	r4, #24
 8005a5e:	1903      	adds	r3, r0, r4
 8005a60:	19db      	adds	r3, r3, r7
 8005a62:	210f      	movs	r1, #15
 8005a64:	438a      	bics	r2, r1
 8005a66:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6a:	085b      	lsrs	r3, r3, #1
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	2207      	movs	r2, #7
 8005a70:	4013      	ands	r3, r2
 8005a72:	b299      	uxth	r1, r3
 8005a74:	1903      	adds	r3, r0, r4
 8005a76:	19db      	adds	r3, r3, r7
 8005a78:	1902      	adds	r2, r0, r4
 8005a7a:	19d2      	adds	r2, r2, r7
 8005a7c:	8812      	ldrh	r2, [r2, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	1902      	adds	r2, r0, r4
 8005a88:	19d2      	adds	r2, r2, r7
 8005a8a:	8812      	ldrh	r2, [r2, #0]
 8005a8c:	60da      	str	r2, [r3, #12]
 8005a8e:	e05d      	b.n	8005b4c <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8005a90:	231a      	movs	r3, #26
 8005a92:	2218      	movs	r2, #24
 8005a94:	189b      	adds	r3, r3, r2
 8005a96:	19db      	adds	r3, r3, r7
 8005a98:	2201      	movs	r2, #1
 8005a9a:	701a      	strb	r2, [r3, #0]
 8005a9c:	e056      	b.n	8005b4c <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a9e:	231b      	movs	r3, #27
 8005aa0:	2218      	movs	r2, #24
 8005aa2:	189b      	adds	r3, r3, r2
 8005aa4:	19db      	adds	r3, r3, r7
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d822      	bhi.n	8005af2 <UART_SetConfig+0x47e>
 8005aac:	009a      	lsls	r2, r3, #2
 8005aae:	4b32      	ldr	r3, [pc, #200]	; (8005b78 <UART_SetConfig+0x504>)
 8005ab0:	18d3      	adds	r3, r2, r3
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ab6:	f7ff fb2f 	bl	8005118 <HAL_RCC_GetPCLK1Freq>
 8005aba:	0003      	movs	r3, r0
 8005abc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005abe:	e021      	b.n	8005b04 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ac0:	f7ff fb40 	bl	8005144 <HAL_RCC_GetPCLK2Freq>
 8005ac4:	0003      	movs	r3, r0
 8005ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ac8:	e01c      	b.n	8005b04 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005aca:	4b28      	ldr	r3, [pc, #160]	; (8005b6c <UART_SetConfig+0x4f8>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2210      	movs	r2, #16
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	d002      	beq.n	8005ada <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005ad4:	4b26      	ldr	r3, [pc, #152]	; (8005b70 <UART_SetConfig+0x4fc>)
 8005ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ad8:	e014      	b.n	8005b04 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8005ada:	4b26      	ldr	r3, [pc, #152]	; (8005b74 <UART_SetConfig+0x500>)
 8005adc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ade:	e011      	b.n	8005b04 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ae0:	f7ff fa6a 	bl	8004fb8 <HAL_RCC_GetSysClockFreq>
 8005ae4:	0003      	movs	r3, r0
 8005ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ae8:	e00c      	b.n	8005b04 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aea:	2380      	movs	r3, #128	; 0x80
 8005aec:	021b      	lsls	r3, r3, #8
 8005aee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005af0:	e008      	b.n	8005b04 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8005af2:	2300      	movs	r3, #0
 8005af4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005af6:	231a      	movs	r3, #26
 8005af8:	2218      	movs	r2, #24
 8005afa:	189b      	adds	r3, r3, r2
 8005afc:	19db      	adds	r3, r3, r7
 8005afe:	2201      	movs	r2, #1
 8005b00:	701a      	strb	r2, [r3, #0]
        break;
 8005b02:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d020      	beq.n	8005b4c <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	085a      	lsrs	r2, r3, #1
 8005b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b12:	18d2      	adds	r2, r2, r3
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	0019      	movs	r1, r3
 8005b1a:	0010      	movs	r0, r2
 8005b1c:	f7fa fb06 	bl	800012c <__udivsi3>
 8005b20:	0003      	movs	r3, r0
 8005b22:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b26:	2b0f      	cmp	r3, #15
 8005b28:	d90a      	bls.n	8005b40 <UART_SetConfig+0x4cc>
 8005b2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b2c:	2380      	movs	r3, #128	; 0x80
 8005b2e:	025b      	lsls	r3, r3, #9
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d205      	bcs.n	8005b40 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	60da      	str	r2, [r3, #12]
 8005b3e:	e005      	b.n	8005b4c <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8005b40:	231a      	movs	r3, #26
 8005b42:	2218      	movs	r2, #24
 8005b44:	189b      	adds	r3, r3, r2
 8005b46:	19db      	adds	r3, r3, r7
 8005b48:	2201      	movs	r2, #1
 8005b4a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	2200      	movs	r2, #0
 8005b56:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005b58:	231a      	movs	r3, #26
 8005b5a:	2218      	movs	r2, #24
 8005b5c:	189b      	adds	r3, r3, r2
 8005b5e:	19db      	adds	r3, r3, r7
 8005b60:	781b      	ldrb	r3, [r3, #0]
}
 8005b62:	0018      	movs	r0, r3
 8005b64:	46bd      	mov	sp, r7
 8005b66:	b00e      	add	sp, #56	; 0x38
 8005b68:	bdb0      	pop	{r4, r5, r7, pc}
 8005b6a:	46c0      	nop			; (mov r8, r8)
 8005b6c:	40021000 	.word	0x40021000
 8005b70:	003d0900 	.word	0x003d0900
 8005b74:	00f42400 	.word	0x00f42400
 8005b78:	08006a58 	.word	0x08006a58

08005b7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	2201      	movs	r2, #1
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	d00b      	beq.n	8005ba6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	4a4a      	ldr	r2, [pc, #296]	; (8005cc0 <UART_AdvFeatureConfig+0x144>)
 8005b96:	4013      	ands	r3, r2
 8005b98:	0019      	movs	r1, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005baa:	2202      	movs	r2, #2
 8005bac:	4013      	ands	r3, r2
 8005bae:	d00b      	beq.n	8005bc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	4a43      	ldr	r2, [pc, #268]	; (8005cc4 <UART_AdvFeatureConfig+0x148>)
 8005bb8:	4013      	ands	r3, r2
 8005bba:	0019      	movs	r1, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bcc:	2204      	movs	r2, #4
 8005bce:	4013      	ands	r3, r2
 8005bd0:	d00b      	beq.n	8005bea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	4a3b      	ldr	r2, [pc, #236]	; (8005cc8 <UART_AdvFeatureConfig+0x14c>)
 8005bda:	4013      	ands	r3, r2
 8005bdc:	0019      	movs	r1, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bee:	2208      	movs	r2, #8
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	d00b      	beq.n	8005c0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	4a34      	ldr	r2, [pc, #208]	; (8005ccc <UART_AdvFeatureConfig+0x150>)
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	0019      	movs	r1, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c10:	2210      	movs	r2, #16
 8005c12:	4013      	ands	r3, r2
 8005c14:	d00b      	beq.n	8005c2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	4a2c      	ldr	r2, [pc, #176]	; (8005cd0 <UART_AdvFeatureConfig+0x154>)
 8005c1e:	4013      	ands	r3, r2
 8005c20:	0019      	movs	r1, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c32:	2220      	movs	r2, #32
 8005c34:	4013      	ands	r3, r2
 8005c36:	d00b      	beq.n	8005c50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	4a25      	ldr	r2, [pc, #148]	; (8005cd4 <UART_AdvFeatureConfig+0x158>)
 8005c40:	4013      	ands	r3, r2
 8005c42:	0019      	movs	r1, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	2240      	movs	r2, #64	; 0x40
 8005c56:	4013      	ands	r3, r2
 8005c58:	d01d      	beq.n	8005c96 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	4a1d      	ldr	r2, [pc, #116]	; (8005cd8 <UART_AdvFeatureConfig+0x15c>)
 8005c62:	4013      	ands	r3, r2
 8005c64:	0019      	movs	r1, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c76:	2380      	movs	r3, #128	; 0x80
 8005c78:	035b      	lsls	r3, r3, #13
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d10b      	bne.n	8005c96 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	4a15      	ldr	r2, [pc, #84]	; (8005cdc <UART_AdvFeatureConfig+0x160>)
 8005c86:	4013      	ands	r3, r2
 8005c88:	0019      	movs	r1, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	2280      	movs	r2, #128	; 0x80
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	d00b      	beq.n	8005cb8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	4a0e      	ldr	r2, [pc, #56]	; (8005ce0 <UART_AdvFeatureConfig+0x164>)
 8005ca8:	4013      	ands	r3, r2
 8005caa:	0019      	movs	r1, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	605a      	str	r2, [r3, #4]
  }
}
 8005cb8:	46c0      	nop			; (mov r8, r8)
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	b002      	add	sp, #8
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	fffdffff 	.word	0xfffdffff
 8005cc4:	fffeffff 	.word	0xfffeffff
 8005cc8:	fffbffff 	.word	0xfffbffff
 8005ccc:	ffff7fff 	.word	0xffff7fff
 8005cd0:	ffffefff 	.word	0xffffefff
 8005cd4:	ffffdfff 	.word	0xffffdfff
 8005cd8:	ffefffff 	.word	0xffefffff
 8005cdc:	ff9fffff 	.word	0xff9fffff
 8005ce0:	fff7ffff 	.word	0xfff7ffff

08005ce4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b092      	sub	sp, #72	; 0x48
 8005ce8:	af02      	add	r7, sp, #8
 8005cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2284      	movs	r2, #132	; 0x84
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cf4:	f7fd fc08 	bl	8003508 <HAL_GetTick>
 8005cf8:	0003      	movs	r3, r0
 8005cfa:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2208      	movs	r2, #8
 8005d04:	4013      	ands	r3, r2
 8005d06:	2b08      	cmp	r3, #8
 8005d08:	d12c      	bne.n	8005d64 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d0c:	2280      	movs	r2, #128	; 0x80
 8005d0e:	0391      	lsls	r1, r2, #14
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	4a46      	ldr	r2, [pc, #280]	; (8005e2c <UART_CheckIdleState+0x148>)
 8005d14:	9200      	str	r2, [sp, #0]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f000 f88c 	bl	8005e34 <UART_WaitOnFlagUntilTimeout>
 8005d1c:	1e03      	subs	r3, r0, #0
 8005d1e:	d021      	beq.n	8005d64 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d20:	f3ef 8310 	mrs	r3, PRIMASK
 8005d24:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005d28:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d30:	f383 8810 	msr	PRIMASK, r3
}
 8005d34:	46c0      	nop			; (mov r8, r8)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2180      	movs	r1, #128	; 0x80
 8005d42:	438a      	bics	r2, r1
 8005d44:	601a      	str	r2, [r3, #0]
 8005d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4c:	f383 8810 	msr	PRIMASK, r3
}
 8005d50:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2220      	movs	r2, #32
 8005d56:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2278      	movs	r2, #120	; 0x78
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e05f      	b.n	8005e24 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2204      	movs	r2, #4
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	2b04      	cmp	r3, #4
 8005d70:	d146      	bne.n	8005e00 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d74:	2280      	movs	r2, #128	; 0x80
 8005d76:	03d1      	lsls	r1, r2, #15
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	4a2c      	ldr	r2, [pc, #176]	; (8005e2c <UART_CheckIdleState+0x148>)
 8005d7c:	9200      	str	r2, [sp, #0]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f000 f858 	bl	8005e34 <UART_WaitOnFlagUntilTimeout>
 8005d84:	1e03      	subs	r3, r0, #0
 8005d86:	d03b      	beq.n	8005e00 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d88:	f3ef 8310 	mrs	r3, PRIMASK
 8005d8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d90:	637b      	str	r3, [r7, #52]	; 0x34
 8005d92:	2301      	movs	r3, #1
 8005d94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	f383 8810 	msr	PRIMASK, r3
}
 8005d9c:	46c0      	nop			; (mov r8, r8)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4921      	ldr	r1, [pc, #132]	; (8005e30 <UART_CheckIdleState+0x14c>)
 8005daa:	400a      	ands	r2, r1
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f383 8810 	msr	PRIMASK, r3
}
 8005db8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dba:	f3ef 8310 	mrs	r3, PRIMASK
 8005dbe:	61bb      	str	r3, [r7, #24]
  return(result);
 8005dc0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dc2:	633b      	str	r3, [r7, #48]	; 0x30
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	f383 8810 	msr	PRIMASK, r3
}
 8005dce:	46c0      	nop			; (mov r8, r8)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689a      	ldr	r2, [r3, #8]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2101      	movs	r1, #1
 8005ddc:	438a      	bics	r2, r1
 8005dde:	609a      	str	r2, [r3, #8]
 8005de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005de4:	6a3b      	ldr	r3, [r7, #32]
 8005de6:	f383 8810 	msr	PRIMASK, r3
}
 8005dea:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2280      	movs	r2, #128	; 0x80
 8005df0:	2120      	movs	r1, #32
 8005df2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2278      	movs	r2, #120	; 0x78
 8005df8:	2100      	movs	r1, #0
 8005dfa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e011      	b.n	8005e24 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2220      	movs	r2, #32
 8005e04:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2280      	movs	r2, #128	; 0x80
 8005e0a:	2120      	movs	r1, #32
 8005e0c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2278      	movs	r2, #120	; 0x78
 8005e1e:	2100      	movs	r1, #0
 8005e20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	0018      	movs	r0, r3
 8005e26:	46bd      	mov	sp, r7
 8005e28:	b010      	add	sp, #64	; 0x40
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	01ffffff 	.word	0x01ffffff
 8005e30:	fffffedf 	.word	0xfffffedf

08005e34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	603b      	str	r3, [r7, #0]
 8005e40:	1dfb      	adds	r3, r7, #7
 8005e42:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e44:	e04b      	b.n	8005ede <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	d048      	beq.n	8005ede <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e4c:	f7fd fb5c 	bl	8003508 <HAL_GetTick>
 8005e50:	0002      	movs	r2, r0
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	69ba      	ldr	r2, [r7, #24]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d302      	bcc.n	8005e62 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e04b      	b.n	8005efe <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2204      	movs	r2, #4
 8005e6e:	4013      	ands	r3, r2
 8005e70:	d035      	beq.n	8005ede <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	69db      	ldr	r3, [r3, #28]
 8005e78:	2208      	movs	r2, #8
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	2b08      	cmp	r3, #8
 8005e7e:	d111      	bne.n	8005ea4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2208      	movs	r2, #8
 8005e86:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	0018      	movs	r0, r3
 8005e8c:	f000 f83c 	bl	8005f08 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2284      	movs	r2, #132	; 0x84
 8005e94:	2108      	movs	r1, #8
 8005e96:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2278      	movs	r2, #120	; 0x78
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e02c      	b.n	8005efe <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	69da      	ldr	r2, [r3, #28]
 8005eaa:	2380      	movs	r3, #128	; 0x80
 8005eac:	011b      	lsls	r3, r3, #4
 8005eae:	401a      	ands	r2, r3
 8005eb0:	2380      	movs	r3, #128	; 0x80
 8005eb2:	011b      	lsls	r3, r3, #4
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d112      	bne.n	8005ede <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2280      	movs	r2, #128	; 0x80
 8005ebe:	0112      	lsls	r2, r2, #4
 8005ec0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	0018      	movs	r0, r3
 8005ec6:	f000 f81f 	bl	8005f08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2284      	movs	r2, #132	; 0x84
 8005ece:	2120      	movs	r1, #32
 8005ed0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2278      	movs	r2, #120	; 0x78
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e00f      	b.n	8005efe <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	69db      	ldr	r3, [r3, #28]
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	425a      	negs	r2, r3
 8005eee:	4153      	adcs	r3, r2
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	001a      	movs	r2, r3
 8005ef4:	1dfb      	adds	r3, r7, #7
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d0a4      	beq.n	8005e46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	0018      	movs	r0, r3
 8005f00:	46bd      	mov	sp, r7
 8005f02:	b004      	add	sp, #16
 8005f04:	bd80      	pop	{r7, pc}
	...

08005f08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b08e      	sub	sp, #56	; 0x38
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f10:	f3ef 8310 	mrs	r3, PRIMASK
 8005f14:	617b      	str	r3, [r7, #20]
  return(result);
 8005f16:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f18:	637b      	str	r3, [r7, #52]	; 0x34
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	f383 8810 	msr	PRIMASK, r3
}
 8005f24:	46c0      	nop			; (mov r8, r8)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4926      	ldr	r1, [pc, #152]	; (8005fcc <UART_EndRxTransfer+0xc4>)
 8005f32:	400a      	ands	r2, r1
 8005f34:	601a      	str	r2, [r3, #0]
 8005f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	f383 8810 	msr	PRIMASK, r3
}
 8005f40:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f42:	f3ef 8310 	mrs	r3, PRIMASK
 8005f46:	623b      	str	r3, [r7, #32]
  return(result);
 8005f48:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f4a:	633b      	str	r3, [r7, #48]	; 0x30
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	f383 8810 	msr	PRIMASK, r3
}
 8005f56:	46c0      	nop			; (mov r8, r8)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689a      	ldr	r2, [r3, #8]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2101      	movs	r1, #1
 8005f64:	438a      	bics	r2, r1
 8005f66:	609a      	str	r2, [r3, #8]
 8005f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6e:	f383 8810 	msr	PRIMASK, r3
}
 8005f72:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d118      	bne.n	8005fae <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f7c:	f3ef 8310 	mrs	r3, PRIMASK
 8005f80:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f82:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f86:	2301      	movs	r3, #1
 8005f88:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f383 8810 	msr	PRIMASK, r3
}
 8005f90:	46c0      	nop			; (mov r8, r8)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2110      	movs	r1, #16
 8005f9e:	438a      	bics	r2, r1
 8005fa0:	601a      	str	r2, [r3, #0]
 8005fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	f383 8810 	msr	PRIMASK, r3
}
 8005fac:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2280      	movs	r2, #128	; 0x80
 8005fb2:	2120      	movs	r1, #32
 8005fb4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005fc2:	46c0      	nop			; (mov r8, r8)
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	b00e      	add	sp, #56	; 0x38
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	46c0      	nop			; (mov r8, r8)
 8005fcc:	fffffedf 	.word	0xfffffedf

08005fd0 <__errno>:
 8005fd0:	4b01      	ldr	r3, [pc, #4]	; (8005fd8 <__errno+0x8>)
 8005fd2:	6818      	ldr	r0, [r3, #0]
 8005fd4:	4770      	bx	lr
 8005fd6:	46c0      	nop			; (mov r8, r8)
 8005fd8:	2000000c 	.word	0x2000000c

08005fdc <__libc_init_array>:
 8005fdc:	b570      	push	{r4, r5, r6, lr}
 8005fde:	2600      	movs	r6, #0
 8005fe0:	4d0c      	ldr	r5, [pc, #48]	; (8006014 <__libc_init_array+0x38>)
 8005fe2:	4c0d      	ldr	r4, [pc, #52]	; (8006018 <__libc_init_array+0x3c>)
 8005fe4:	1b64      	subs	r4, r4, r5
 8005fe6:	10a4      	asrs	r4, r4, #2
 8005fe8:	42a6      	cmp	r6, r4
 8005fea:	d109      	bne.n	8006000 <__libc_init_array+0x24>
 8005fec:	2600      	movs	r6, #0
 8005fee:	f000 fc8b 	bl	8006908 <_init>
 8005ff2:	4d0a      	ldr	r5, [pc, #40]	; (800601c <__libc_init_array+0x40>)
 8005ff4:	4c0a      	ldr	r4, [pc, #40]	; (8006020 <__libc_init_array+0x44>)
 8005ff6:	1b64      	subs	r4, r4, r5
 8005ff8:	10a4      	asrs	r4, r4, #2
 8005ffa:	42a6      	cmp	r6, r4
 8005ffc:	d105      	bne.n	800600a <__libc_init_array+0x2e>
 8005ffe:	bd70      	pop	{r4, r5, r6, pc}
 8006000:	00b3      	lsls	r3, r6, #2
 8006002:	58eb      	ldr	r3, [r5, r3]
 8006004:	4798      	blx	r3
 8006006:	3601      	adds	r6, #1
 8006008:	e7ee      	b.n	8005fe8 <__libc_init_array+0xc>
 800600a:	00b3      	lsls	r3, r6, #2
 800600c:	58eb      	ldr	r3, [r5, r3]
 800600e:	4798      	blx	r3
 8006010:	3601      	adds	r6, #1
 8006012:	e7f2      	b.n	8005ffa <__libc_init_array+0x1e>
 8006014:	08006ab8 	.word	0x08006ab8
 8006018:	08006ab8 	.word	0x08006ab8
 800601c:	08006ab8 	.word	0x08006ab8
 8006020:	08006abc 	.word	0x08006abc

08006024 <memset>:
 8006024:	0003      	movs	r3, r0
 8006026:	1882      	adds	r2, r0, r2
 8006028:	4293      	cmp	r3, r2
 800602a:	d100      	bne.n	800602e <memset+0xa>
 800602c:	4770      	bx	lr
 800602e:	7019      	strb	r1, [r3, #0]
 8006030:	3301      	adds	r3, #1
 8006032:	e7f9      	b.n	8006028 <memset+0x4>

08006034 <siprintf>:
 8006034:	b40e      	push	{r1, r2, r3}
 8006036:	b500      	push	{lr}
 8006038:	490b      	ldr	r1, [pc, #44]	; (8006068 <siprintf+0x34>)
 800603a:	b09c      	sub	sp, #112	; 0x70
 800603c:	ab1d      	add	r3, sp, #116	; 0x74
 800603e:	9002      	str	r0, [sp, #8]
 8006040:	9006      	str	r0, [sp, #24]
 8006042:	9107      	str	r1, [sp, #28]
 8006044:	9104      	str	r1, [sp, #16]
 8006046:	4809      	ldr	r0, [pc, #36]	; (800606c <siprintf+0x38>)
 8006048:	4909      	ldr	r1, [pc, #36]	; (8006070 <siprintf+0x3c>)
 800604a:	cb04      	ldmia	r3!, {r2}
 800604c:	9105      	str	r1, [sp, #20]
 800604e:	6800      	ldr	r0, [r0, #0]
 8006050:	a902      	add	r1, sp, #8
 8006052:	9301      	str	r3, [sp, #4]
 8006054:	f000 f870 	bl	8006138 <_svfiprintf_r>
 8006058:	2300      	movs	r3, #0
 800605a:	9a02      	ldr	r2, [sp, #8]
 800605c:	7013      	strb	r3, [r2, #0]
 800605e:	b01c      	add	sp, #112	; 0x70
 8006060:	bc08      	pop	{r3}
 8006062:	b003      	add	sp, #12
 8006064:	4718      	bx	r3
 8006066:	46c0      	nop			; (mov r8, r8)
 8006068:	7fffffff 	.word	0x7fffffff
 800606c:	2000000c 	.word	0x2000000c
 8006070:	ffff0208 	.word	0xffff0208

08006074 <__ssputs_r>:
 8006074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006076:	688e      	ldr	r6, [r1, #8]
 8006078:	b085      	sub	sp, #20
 800607a:	0007      	movs	r7, r0
 800607c:	000c      	movs	r4, r1
 800607e:	9203      	str	r2, [sp, #12]
 8006080:	9301      	str	r3, [sp, #4]
 8006082:	429e      	cmp	r6, r3
 8006084:	d83c      	bhi.n	8006100 <__ssputs_r+0x8c>
 8006086:	2390      	movs	r3, #144	; 0x90
 8006088:	898a      	ldrh	r2, [r1, #12]
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	421a      	tst	r2, r3
 800608e:	d034      	beq.n	80060fa <__ssputs_r+0x86>
 8006090:	6909      	ldr	r1, [r1, #16]
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	6960      	ldr	r0, [r4, #20]
 8006096:	1a5b      	subs	r3, r3, r1
 8006098:	9302      	str	r3, [sp, #8]
 800609a:	2303      	movs	r3, #3
 800609c:	4343      	muls	r3, r0
 800609e:	0fdd      	lsrs	r5, r3, #31
 80060a0:	18ed      	adds	r5, r5, r3
 80060a2:	9b01      	ldr	r3, [sp, #4]
 80060a4:	9802      	ldr	r0, [sp, #8]
 80060a6:	3301      	adds	r3, #1
 80060a8:	181b      	adds	r3, r3, r0
 80060aa:	106d      	asrs	r5, r5, #1
 80060ac:	42ab      	cmp	r3, r5
 80060ae:	d900      	bls.n	80060b2 <__ssputs_r+0x3e>
 80060b0:	001d      	movs	r5, r3
 80060b2:	0553      	lsls	r3, r2, #21
 80060b4:	d532      	bpl.n	800611c <__ssputs_r+0xa8>
 80060b6:	0029      	movs	r1, r5
 80060b8:	0038      	movs	r0, r7
 80060ba:	f000 fb53 	bl	8006764 <_malloc_r>
 80060be:	1e06      	subs	r6, r0, #0
 80060c0:	d109      	bne.n	80060d6 <__ssputs_r+0x62>
 80060c2:	230c      	movs	r3, #12
 80060c4:	603b      	str	r3, [r7, #0]
 80060c6:	2340      	movs	r3, #64	; 0x40
 80060c8:	2001      	movs	r0, #1
 80060ca:	89a2      	ldrh	r2, [r4, #12]
 80060cc:	4240      	negs	r0, r0
 80060ce:	4313      	orrs	r3, r2
 80060d0:	81a3      	strh	r3, [r4, #12]
 80060d2:	b005      	add	sp, #20
 80060d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060d6:	9a02      	ldr	r2, [sp, #8]
 80060d8:	6921      	ldr	r1, [r4, #16]
 80060da:	f000 faba 	bl	8006652 <memcpy>
 80060de:	89a3      	ldrh	r3, [r4, #12]
 80060e0:	4a14      	ldr	r2, [pc, #80]	; (8006134 <__ssputs_r+0xc0>)
 80060e2:	401a      	ands	r2, r3
 80060e4:	2380      	movs	r3, #128	; 0x80
 80060e6:	4313      	orrs	r3, r2
 80060e8:	81a3      	strh	r3, [r4, #12]
 80060ea:	9b02      	ldr	r3, [sp, #8]
 80060ec:	6126      	str	r6, [r4, #16]
 80060ee:	18f6      	adds	r6, r6, r3
 80060f0:	6026      	str	r6, [r4, #0]
 80060f2:	6165      	str	r5, [r4, #20]
 80060f4:	9e01      	ldr	r6, [sp, #4]
 80060f6:	1aed      	subs	r5, r5, r3
 80060f8:	60a5      	str	r5, [r4, #8]
 80060fa:	9b01      	ldr	r3, [sp, #4]
 80060fc:	429e      	cmp	r6, r3
 80060fe:	d900      	bls.n	8006102 <__ssputs_r+0x8e>
 8006100:	9e01      	ldr	r6, [sp, #4]
 8006102:	0032      	movs	r2, r6
 8006104:	9903      	ldr	r1, [sp, #12]
 8006106:	6820      	ldr	r0, [r4, #0]
 8006108:	f000 faac 	bl	8006664 <memmove>
 800610c:	68a3      	ldr	r3, [r4, #8]
 800610e:	2000      	movs	r0, #0
 8006110:	1b9b      	subs	r3, r3, r6
 8006112:	60a3      	str	r3, [r4, #8]
 8006114:	6823      	ldr	r3, [r4, #0]
 8006116:	199e      	adds	r6, r3, r6
 8006118:	6026      	str	r6, [r4, #0]
 800611a:	e7da      	b.n	80060d2 <__ssputs_r+0x5e>
 800611c:	002a      	movs	r2, r5
 800611e:	0038      	movs	r0, r7
 8006120:	f000 fb96 	bl	8006850 <_realloc_r>
 8006124:	1e06      	subs	r6, r0, #0
 8006126:	d1e0      	bne.n	80060ea <__ssputs_r+0x76>
 8006128:	0038      	movs	r0, r7
 800612a:	6921      	ldr	r1, [r4, #16]
 800612c:	f000 faae 	bl	800668c <_free_r>
 8006130:	e7c7      	b.n	80060c2 <__ssputs_r+0x4e>
 8006132:	46c0      	nop			; (mov r8, r8)
 8006134:	fffffb7f 	.word	0xfffffb7f

08006138 <_svfiprintf_r>:
 8006138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800613a:	b0a1      	sub	sp, #132	; 0x84
 800613c:	9003      	str	r0, [sp, #12]
 800613e:	001d      	movs	r5, r3
 8006140:	898b      	ldrh	r3, [r1, #12]
 8006142:	000f      	movs	r7, r1
 8006144:	0016      	movs	r6, r2
 8006146:	061b      	lsls	r3, r3, #24
 8006148:	d511      	bpl.n	800616e <_svfiprintf_r+0x36>
 800614a:	690b      	ldr	r3, [r1, #16]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10e      	bne.n	800616e <_svfiprintf_r+0x36>
 8006150:	2140      	movs	r1, #64	; 0x40
 8006152:	f000 fb07 	bl	8006764 <_malloc_r>
 8006156:	6038      	str	r0, [r7, #0]
 8006158:	6138      	str	r0, [r7, #16]
 800615a:	2800      	cmp	r0, #0
 800615c:	d105      	bne.n	800616a <_svfiprintf_r+0x32>
 800615e:	230c      	movs	r3, #12
 8006160:	9a03      	ldr	r2, [sp, #12]
 8006162:	3801      	subs	r0, #1
 8006164:	6013      	str	r3, [r2, #0]
 8006166:	b021      	add	sp, #132	; 0x84
 8006168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800616a:	2340      	movs	r3, #64	; 0x40
 800616c:	617b      	str	r3, [r7, #20]
 800616e:	2300      	movs	r3, #0
 8006170:	ac08      	add	r4, sp, #32
 8006172:	6163      	str	r3, [r4, #20]
 8006174:	3320      	adds	r3, #32
 8006176:	7663      	strb	r3, [r4, #25]
 8006178:	3310      	adds	r3, #16
 800617a:	76a3      	strb	r3, [r4, #26]
 800617c:	9507      	str	r5, [sp, #28]
 800617e:	0035      	movs	r5, r6
 8006180:	782b      	ldrb	r3, [r5, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d001      	beq.n	800618a <_svfiprintf_r+0x52>
 8006186:	2b25      	cmp	r3, #37	; 0x25
 8006188:	d147      	bne.n	800621a <_svfiprintf_r+0xe2>
 800618a:	1bab      	subs	r3, r5, r6
 800618c:	9305      	str	r3, [sp, #20]
 800618e:	42b5      	cmp	r5, r6
 8006190:	d00c      	beq.n	80061ac <_svfiprintf_r+0x74>
 8006192:	0032      	movs	r2, r6
 8006194:	0039      	movs	r1, r7
 8006196:	9803      	ldr	r0, [sp, #12]
 8006198:	f7ff ff6c 	bl	8006074 <__ssputs_r>
 800619c:	1c43      	adds	r3, r0, #1
 800619e:	d100      	bne.n	80061a2 <_svfiprintf_r+0x6a>
 80061a0:	e0ae      	b.n	8006300 <_svfiprintf_r+0x1c8>
 80061a2:	6962      	ldr	r2, [r4, #20]
 80061a4:	9b05      	ldr	r3, [sp, #20]
 80061a6:	4694      	mov	ip, r2
 80061a8:	4463      	add	r3, ip
 80061aa:	6163      	str	r3, [r4, #20]
 80061ac:	782b      	ldrb	r3, [r5, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d100      	bne.n	80061b4 <_svfiprintf_r+0x7c>
 80061b2:	e0a5      	b.n	8006300 <_svfiprintf_r+0x1c8>
 80061b4:	2201      	movs	r2, #1
 80061b6:	2300      	movs	r3, #0
 80061b8:	4252      	negs	r2, r2
 80061ba:	6062      	str	r2, [r4, #4]
 80061bc:	a904      	add	r1, sp, #16
 80061be:	3254      	adds	r2, #84	; 0x54
 80061c0:	1852      	adds	r2, r2, r1
 80061c2:	1c6e      	adds	r6, r5, #1
 80061c4:	6023      	str	r3, [r4, #0]
 80061c6:	60e3      	str	r3, [r4, #12]
 80061c8:	60a3      	str	r3, [r4, #8]
 80061ca:	7013      	strb	r3, [r2, #0]
 80061cc:	65a3      	str	r3, [r4, #88]	; 0x58
 80061ce:	2205      	movs	r2, #5
 80061d0:	7831      	ldrb	r1, [r6, #0]
 80061d2:	4854      	ldr	r0, [pc, #336]	; (8006324 <_svfiprintf_r+0x1ec>)
 80061d4:	f000 fa32 	bl	800663c <memchr>
 80061d8:	1c75      	adds	r5, r6, #1
 80061da:	2800      	cmp	r0, #0
 80061dc:	d11f      	bne.n	800621e <_svfiprintf_r+0xe6>
 80061de:	6822      	ldr	r2, [r4, #0]
 80061e0:	06d3      	lsls	r3, r2, #27
 80061e2:	d504      	bpl.n	80061ee <_svfiprintf_r+0xb6>
 80061e4:	2353      	movs	r3, #83	; 0x53
 80061e6:	a904      	add	r1, sp, #16
 80061e8:	185b      	adds	r3, r3, r1
 80061ea:	2120      	movs	r1, #32
 80061ec:	7019      	strb	r1, [r3, #0]
 80061ee:	0713      	lsls	r3, r2, #28
 80061f0:	d504      	bpl.n	80061fc <_svfiprintf_r+0xc4>
 80061f2:	2353      	movs	r3, #83	; 0x53
 80061f4:	a904      	add	r1, sp, #16
 80061f6:	185b      	adds	r3, r3, r1
 80061f8:	212b      	movs	r1, #43	; 0x2b
 80061fa:	7019      	strb	r1, [r3, #0]
 80061fc:	7833      	ldrb	r3, [r6, #0]
 80061fe:	2b2a      	cmp	r3, #42	; 0x2a
 8006200:	d016      	beq.n	8006230 <_svfiprintf_r+0xf8>
 8006202:	0035      	movs	r5, r6
 8006204:	2100      	movs	r1, #0
 8006206:	200a      	movs	r0, #10
 8006208:	68e3      	ldr	r3, [r4, #12]
 800620a:	782a      	ldrb	r2, [r5, #0]
 800620c:	1c6e      	adds	r6, r5, #1
 800620e:	3a30      	subs	r2, #48	; 0x30
 8006210:	2a09      	cmp	r2, #9
 8006212:	d94e      	bls.n	80062b2 <_svfiprintf_r+0x17a>
 8006214:	2900      	cmp	r1, #0
 8006216:	d111      	bne.n	800623c <_svfiprintf_r+0x104>
 8006218:	e017      	b.n	800624a <_svfiprintf_r+0x112>
 800621a:	3501      	adds	r5, #1
 800621c:	e7b0      	b.n	8006180 <_svfiprintf_r+0x48>
 800621e:	4b41      	ldr	r3, [pc, #260]	; (8006324 <_svfiprintf_r+0x1ec>)
 8006220:	6822      	ldr	r2, [r4, #0]
 8006222:	1ac0      	subs	r0, r0, r3
 8006224:	2301      	movs	r3, #1
 8006226:	4083      	lsls	r3, r0
 8006228:	4313      	orrs	r3, r2
 800622a:	002e      	movs	r6, r5
 800622c:	6023      	str	r3, [r4, #0]
 800622e:	e7ce      	b.n	80061ce <_svfiprintf_r+0x96>
 8006230:	9b07      	ldr	r3, [sp, #28]
 8006232:	1d19      	adds	r1, r3, #4
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	9107      	str	r1, [sp, #28]
 8006238:	2b00      	cmp	r3, #0
 800623a:	db01      	blt.n	8006240 <_svfiprintf_r+0x108>
 800623c:	930b      	str	r3, [sp, #44]	; 0x2c
 800623e:	e004      	b.n	800624a <_svfiprintf_r+0x112>
 8006240:	425b      	negs	r3, r3
 8006242:	60e3      	str	r3, [r4, #12]
 8006244:	2302      	movs	r3, #2
 8006246:	4313      	orrs	r3, r2
 8006248:	6023      	str	r3, [r4, #0]
 800624a:	782b      	ldrb	r3, [r5, #0]
 800624c:	2b2e      	cmp	r3, #46	; 0x2e
 800624e:	d10a      	bne.n	8006266 <_svfiprintf_r+0x12e>
 8006250:	786b      	ldrb	r3, [r5, #1]
 8006252:	2b2a      	cmp	r3, #42	; 0x2a
 8006254:	d135      	bne.n	80062c2 <_svfiprintf_r+0x18a>
 8006256:	9b07      	ldr	r3, [sp, #28]
 8006258:	3502      	adds	r5, #2
 800625a:	1d1a      	adds	r2, r3, #4
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	9207      	str	r2, [sp, #28]
 8006260:	2b00      	cmp	r3, #0
 8006262:	db2b      	blt.n	80062bc <_svfiprintf_r+0x184>
 8006264:	9309      	str	r3, [sp, #36]	; 0x24
 8006266:	4e30      	ldr	r6, [pc, #192]	; (8006328 <_svfiprintf_r+0x1f0>)
 8006268:	2203      	movs	r2, #3
 800626a:	0030      	movs	r0, r6
 800626c:	7829      	ldrb	r1, [r5, #0]
 800626e:	f000 f9e5 	bl	800663c <memchr>
 8006272:	2800      	cmp	r0, #0
 8006274:	d006      	beq.n	8006284 <_svfiprintf_r+0x14c>
 8006276:	2340      	movs	r3, #64	; 0x40
 8006278:	1b80      	subs	r0, r0, r6
 800627a:	4083      	lsls	r3, r0
 800627c:	6822      	ldr	r2, [r4, #0]
 800627e:	3501      	adds	r5, #1
 8006280:	4313      	orrs	r3, r2
 8006282:	6023      	str	r3, [r4, #0]
 8006284:	7829      	ldrb	r1, [r5, #0]
 8006286:	2206      	movs	r2, #6
 8006288:	4828      	ldr	r0, [pc, #160]	; (800632c <_svfiprintf_r+0x1f4>)
 800628a:	1c6e      	adds	r6, r5, #1
 800628c:	7621      	strb	r1, [r4, #24]
 800628e:	f000 f9d5 	bl	800663c <memchr>
 8006292:	2800      	cmp	r0, #0
 8006294:	d03c      	beq.n	8006310 <_svfiprintf_r+0x1d8>
 8006296:	4b26      	ldr	r3, [pc, #152]	; (8006330 <_svfiprintf_r+0x1f8>)
 8006298:	2b00      	cmp	r3, #0
 800629a:	d125      	bne.n	80062e8 <_svfiprintf_r+0x1b0>
 800629c:	2207      	movs	r2, #7
 800629e:	9b07      	ldr	r3, [sp, #28]
 80062a0:	3307      	adds	r3, #7
 80062a2:	4393      	bics	r3, r2
 80062a4:	3308      	adds	r3, #8
 80062a6:	9307      	str	r3, [sp, #28]
 80062a8:	6963      	ldr	r3, [r4, #20]
 80062aa:	9a04      	ldr	r2, [sp, #16]
 80062ac:	189b      	adds	r3, r3, r2
 80062ae:	6163      	str	r3, [r4, #20]
 80062b0:	e765      	b.n	800617e <_svfiprintf_r+0x46>
 80062b2:	4343      	muls	r3, r0
 80062b4:	0035      	movs	r5, r6
 80062b6:	2101      	movs	r1, #1
 80062b8:	189b      	adds	r3, r3, r2
 80062ba:	e7a6      	b.n	800620a <_svfiprintf_r+0xd2>
 80062bc:	2301      	movs	r3, #1
 80062be:	425b      	negs	r3, r3
 80062c0:	e7d0      	b.n	8006264 <_svfiprintf_r+0x12c>
 80062c2:	2300      	movs	r3, #0
 80062c4:	200a      	movs	r0, #10
 80062c6:	001a      	movs	r2, r3
 80062c8:	3501      	adds	r5, #1
 80062ca:	6063      	str	r3, [r4, #4]
 80062cc:	7829      	ldrb	r1, [r5, #0]
 80062ce:	1c6e      	adds	r6, r5, #1
 80062d0:	3930      	subs	r1, #48	; 0x30
 80062d2:	2909      	cmp	r1, #9
 80062d4:	d903      	bls.n	80062de <_svfiprintf_r+0x1a6>
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d0c5      	beq.n	8006266 <_svfiprintf_r+0x12e>
 80062da:	9209      	str	r2, [sp, #36]	; 0x24
 80062dc:	e7c3      	b.n	8006266 <_svfiprintf_r+0x12e>
 80062de:	4342      	muls	r2, r0
 80062e0:	0035      	movs	r5, r6
 80062e2:	2301      	movs	r3, #1
 80062e4:	1852      	adds	r2, r2, r1
 80062e6:	e7f1      	b.n	80062cc <_svfiprintf_r+0x194>
 80062e8:	ab07      	add	r3, sp, #28
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	003a      	movs	r2, r7
 80062ee:	0021      	movs	r1, r4
 80062f0:	4b10      	ldr	r3, [pc, #64]	; (8006334 <_svfiprintf_r+0x1fc>)
 80062f2:	9803      	ldr	r0, [sp, #12]
 80062f4:	e000      	b.n	80062f8 <_svfiprintf_r+0x1c0>
 80062f6:	bf00      	nop
 80062f8:	9004      	str	r0, [sp, #16]
 80062fa:	9b04      	ldr	r3, [sp, #16]
 80062fc:	3301      	adds	r3, #1
 80062fe:	d1d3      	bne.n	80062a8 <_svfiprintf_r+0x170>
 8006300:	89bb      	ldrh	r3, [r7, #12]
 8006302:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006304:	065b      	lsls	r3, r3, #25
 8006306:	d400      	bmi.n	800630a <_svfiprintf_r+0x1d2>
 8006308:	e72d      	b.n	8006166 <_svfiprintf_r+0x2e>
 800630a:	2001      	movs	r0, #1
 800630c:	4240      	negs	r0, r0
 800630e:	e72a      	b.n	8006166 <_svfiprintf_r+0x2e>
 8006310:	ab07      	add	r3, sp, #28
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	003a      	movs	r2, r7
 8006316:	0021      	movs	r1, r4
 8006318:	4b06      	ldr	r3, [pc, #24]	; (8006334 <_svfiprintf_r+0x1fc>)
 800631a:	9803      	ldr	r0, [sp, #12]
 800631c:	f000 f87c 	bl	8006418 <_printf_i>
 8006320:	e7ea      	b.n	80062f8 <_svfiprintf_r+0x1c0>
 8006322:	46c0      	nop			; (mov r8, r8)
 8006324:	08006a7c 	.word	0x08006a7c
 8006328:	08006a82 	.word	0x08006a82
 800632c:	08006a86 	.word	0x08006a86
 8006330:	00000000 	.word	0x00000000
 8006334:	08006075 	.word	0x08006075

08006338 <_printf_common>:
 8006338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800633a:	0015      	movs	r5, r2
 800633c:	9301      	str	r3, [sp, #4]
 800633e:	688a      	ldr	r2, [r1, #8]
 8006340:	690b      	ldr	r3, [r1, #16]
 8006342:	000c      	movs	r4, r1
 8006344:	9000      	str	r0, [sp, #0]
 8006346:	4293      	cmp	r3, r2
 8006348:	da00      	bge.n	800634c <_printf_common+0x14>
 800634a:	0013      	movs	r3, r2
 800634c:	0022      	movs	r2, r4
 800634e:	602b      	str	r3, [r5, #0]
 8006350:	3243      	adds	r2, #67	; 0x43
 8006352:	7812      	ldrb	r2, [r2, #0]
 8006354:	2a00      	cmp	r2, #0
 8006356:	d001      	beq.n	800635c <_printf_common+0x24>
 8006358:	3301      	adds	r3, #1
 800635a:	602b      	str	r3, [r5, #0]
 800635c:	6823      	ldr	r3, [r4, #0]
 800635e:	069b      	lsls	r3, r3, #26
 8006360:	d502      	bpl.n	8006368 <_printf_common+0x30>
 8006362:	682b      	ldr	r3, [r5, #0]
 8006364:	3302      	adds	r3, #2
 8006366:	602b      	str	r3, [r5, #0]
 8006368:	6822      	ldr	r2, [r4, #0]
 800636a:	2306      	movs	r3, #6
 800636c:	0017      	movs	r7, r2
 800636e:	401f      	ands	r7, r3
 8006370:	421a      	tst	r2, r3
 8006372:	d027      	beq.n	80063c4 <_printf_common+0x8c>
 8006374:	0023      	movs	r3, r4
 8006376:	3343      	adds	r3, #67	; 0x43
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	1e5a      	subs	r2, r3, #1
 800637c:	4193      	sbcs	r3, r2
 800637e:	6822      	ldr	r2, [r4, #0]
 8006380:	0692      	lsls	r2, r2, #26
 8006382:	d430      	bmi.n	80063e6 <_printf_common+0xae>
 8006384:	0022      	movs	r2, r4
 8006386:	9901      	ldr	r1, [sp, #4]
 8006388:	9800      	ldr	r0, [sp, #0]
 800638a:	9e08      	ldr	r6, [sp, #32]
 800638c:	3243      	adds	r2, #67	; 0x43
 800638e:	47b0      	blx	r6
 8006390:	1c43      	adds	r3, r0, #1
 8006392:	d025      	beq.n	80063e0 <_printf_common+0xa8>
 8006394:	2306      	movs	r3, #6
 8006396:	6820      	ldr	r0, [r4, #0]
 8006398:	682a      	ldr	r2, [r5, #0]
 800639a:	68e1      	ldr	r1, [r4, #12]
 800639c:	2500      	movs	r5, #0
 800639e:	4003      	ands	r3, r0
 80063a0:	2b04      	cmp	r3, #4
 80063a2:	d103      	bne.n	80063ac <_printf_common+0x74>
 80063a4:	1a8d      	subs	r5, r1, r2
 80063a6:	43eb      	mvns	r3, r5
 80063a8:	17db      	asrs	r3, r3, #31
 80063aa:	401d      	ands	r5, r3
 80063ac:	68a3      	ldr	r3, [r4, #8]
 80063ae:	6922      	ldr	r2, [r4, #16]
 80063b0:	4293      	cmp	r3, r2
 80063b2:	dd01      	ble.n	80063b8 <_printf_common+0x80>
 80063b4:	1a9b      	subs	r3, r3, r2
 80063b6:	18ed      	adds	r5, r5, r3
 80063b8:	2700      	movs	r7, #0
 80063ba:	42bd      	cmp	r5, r7
 80063bc:	d120      	bne.n	8006400 <_printf_common+0xc8>
 80063be:	2000      	movs	r0, #0
 80063c0:	e010      	b.n	80063e4 <_printf_common+0xac>
 80063c2:	3701      	adds	r7, #1
 80063c4:	68e3      	ldr	r3, [r4, #12]
 80063c6:	682a      	ldr	r2, [r5, #0]
 80063c8:	1a9b      	subs	r3, r3, r2
 80063ca:	42bb      	cmp	r3, r7
 80063cc:	ddd2      	ble.n	8006374 <_printf_common+0x3c>
 80063ce:	0022      	movs	r2, r4
 80063d0:	2301      	movs	r3, #1
 80063d2:	9901      	ldr	r1, [sp, #4]
 80063d4:	9800      	ldr	r0, [sp, #0]
 80063d6:	9e08      	ldr	r6, [sp, #32]
 80063d8:	3219      	adds	r2, #25
 80063da:	47b0      	blx	r6
 80063dc:	1c43      	adds	r3, r0, #1
 80063de:	d1f0      	bne.n	80063c2 <_printf_common+0x8a>
 80063e0:	2001      	movs	r0, #1
 80063e2:	4240      	negs	r0, r0
 80063e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80063e6:	2030      	movs	r0, #48	; 0x30
 80063e8:	18e1      	adds	r1, r4, r3
 80063ea:	3143      	adds	r1, #67	; 0x43
 80063ec:	7008      	strb	r0, [r1, #0]
 80063ee:	0021      	movs	r1, r4
 80063f0:	1c5a      	adds	r2, r3, #1
 80063f2:	3145      	adds	r1, #69	; 0x45
 80063f4:	7809      	ldrb	r1, [r1, #0]
 80063f6:	18a2      	adds	r2, r4, r2
 80063f8:	3243      	adds	r2, #67	; 0x43
 80063fa:	3302      	adds	r3, #2
 80063fc:	7011      	strb	r1, [r2, #0]
 80063fe:	e7c1      	b.n	8006384 <_printf_common+0x4c>
 8006400:	0022      	movs	r2, r4
 8006402:	2301      	movs	r3, #1
 8006404:	9901      	ldr	r1, [sp, #4]
 8006406:	9800      	ldr	r0, [sp, #0]
 8006408:	9e08      	ldr	r6, [sp, #32]
 800640a:	321a      	adds	r2, #26
 800640c:	47b0      	blx	r6
 800640e:	1c43      	adds	r3, r0, #1
 8006410:	d0e6      	beq.n	80063e0 <_printf_common+0xa8>
 8006412:	3701      	adds	r7, #1
 8006414:	e7d1      	b.n	80063ba <_printf_common+0x82>
	...

08006418 <_printf_i>:
 8006418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800641a:	b08b      	sub	sp, #44	; 0x2c
 800641c:	9206      	str	r2, [sp, #24]
 800641e:	000a      	movs	r2, r1
 8006420:	3243      	adds	r2, #67	; 0x43
 8006422:	9307      	str	r3, [sp, #28]
 8006424:	9005      	str	r0, [sp, #20]
 8006426:	9204      	str	r2, [sp, #16]
 8006428:	7e0a      	ldrb	r2, [r1, #24]
 800642a:	000c      	movs	r4, r1
 800642c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800642e:	2a78      	cmp	r2, #120	; 0x78
 8006430:	d807      	bhi.n	8006442 <_printf_i+0x2a>
 8006432:	2a62      	cmp	r2, #98	; 0x62
 8006434:	d809      	bhi.n	800644a <_printf_i+0x32>
 8006436:	2a00      	cmp	r2, #0
 8006438:	d100      	bne.n	800643c <_printf_i+0x24>
 800643a:	e0c1      	b.n	80065c0 <_printf_i+0x1a8>
 800643c:	2a58      	cmp	r2, #88	; 0x58
 800643e:	d100      	bne.n	8006442 <_printf_i+0x2a>
 8006440:	e08c      	b.n	800655c <_printf_i+0x144>
 8006442:	0026      	movs	r6, r4
 8006444:	3642      	adds	r6, #66	; 0x42
 8006446:	7032      	strb	r2, [r6, #0]
 8006448:	e022      	b.n	8006490 <_printf_i+0x78>
 800644a:	0010      	movs	r0, r2
 800644c:	3863      	subs	r0, #99	; 0x63
 800644e:	2815      	cmp	r0, #21
 8006450:	d8f7      	bhi.n	8006442 <_printf_i+0x2a>
 8006452:	f7f9 fe61 	bl	8000118 <__gnu_thumb1_case_shi>
 8006456:	0016      	.short	0x0016
 8006458:	fff6001f 	.word	0xfff6001f
 800645c:	fff6fff6 	.word	0xfff6fff6
 8006460:	001ffff6 	.word	0x001ffff6
 8006464:	fff6fff6 	.word	0xfff6fff6
 8006468:	fff6fff6 	.word	0xfff6fff6
 800646c:	003600a8 	.word	0x003600a8
 8006470:	fff6009a 	.word	0xfff6009a
 8006474:	00b9fff6 	.word	0x00b9fff6
 8006478:	0036fff6 	.word	0x0036fff6
 800647c:	fff6fff6 	.word	0xfff6fff6
 8006480:	009e      	.short	0x009e
 8006482:	0026      	movs	r6, r4
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	3642      	adds	r6, #66	; 0x42
 8006488:	1d11      	adds	r1, r2, #4
 800648a:	6019      	str	r1, [r3, #0]
 800648c:	6813      	ldr	r3, [r2, #0]
 800648e:	7033      	strb	r3, [r6, #0]
 8006490:	2301      	movs	r3, #1
 8006492:	e0a7      	b.n	80065e4 <_printf_i+0x1cc>
 8006494:	6808      	ldr	r0, [r1, #0]
 8006496:	6819      	ldr	r1, [r3, #0]
 8006498:	1d0a      	adds	r2, r1, #4
 800649a:	0605      	lsls	r5, r0, #24
 800649c:	d50b      	bpl.n	80064b6 <_printf_i+0x9e>
 800649e:	680d      	ldr	r5, [r1, #0]
 80064a0:	601a      	str	r2, [r3, #0]
 80064a2:	2d00      	cmp	r5, #0
 80064a4:	da03      	bge.n	80064ae <_printf_i+0x96>
 80064a6:	232d      	movs	r3, #45	; 0x2d
 80064a8:	9a04      	ldr	r2, [sp, #16]
 80064aa:	426d      	negs	r5, r5
 80064ac:	7013      	strb	r3, [r2, #0]
 80064ae:	4b61      	ldr	r3, [pc, #388]	; (8006634 <_printf_i+0x21c>)
 80064b0:	270a      	movs	r7, #10
 80064b2:	9303      	str	r3, [sp, #12]
 80064b4:	e01b      	b.n	80064ee <_printf_i+0xd6>
 80064b6:	680d      	ldr	r5, [r1, #0]
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	0641      	lsls	r1, r0, #25
 80064bc:	d5f1      	bpl.n	80064a2 <_printf_i+0x8a>
 80064be:	b22d      	sxth	r5, r5
 80064c0:	e7ef      	b.n	80064a2 <_printf_i+0x8a>
 80064c2:	680d      	ldr	r5, [r1, #0]
 80064c4:	6819      	ldr	r1, [r3, #0]
 80064c6:	1d08      	adds	r0, r1, #4
 80064c8:	6018      	str	r0, [r3, #0]
 80064ca:	062e      	lsls	r6, r5, #24
 80064cc:	d501      	bpl.n	80064d2 <_printf_i+0xba>
 80064ce:	680d      	ldr	r5, [r1, #0]
 80064d0:	e003      	b.n	80064da <_printf_i+0xc2>
 80064d2:	066d      	lsls	r5, r5, #25
 80064d4:	d5fb      	bpl.n	80064ce <_printf_i+0xb6>
 80064d6:	680d      	ldr	r5, [r1, #0]
 80064d8:	b2ad      	uxth	r5, r5
 80064da:	4b56      	ldr	r3, [pc, #344]	; (8006634 <_printf_i+0x21c>)
 80064dc:	2708      	movs	r7, #8
 80064de:	9303      	str	r3, [sp, #12]
 80064e0:	2a6f      	cmp	r2, #111	; 0x6f
 80064e2:	d000      	beq.n	80064e6 <_printf_i+0xce>
 80064e4:	3702      	adds	r7, #2
 80064e6:	0023      	movs	r3, r4
 80064e8:	2200      	movs	r2, #0
 80064ea:	3343      	adds	r3, #67	; 0x43
 80064ec:	701a      	strb	r2, [r3, #0]
 80064ee:	6863      	ldr	r3, [r4, #4]
 80064f0:	60a3      	str	r3, [r4, #8]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	db03      	blt.n	80064fe <_printf_i+0xe6>
 80064f6:	2204      	movs	r2, #4
 80064f8:	6821      	ldr	r1, [r4, #0]
 80064fa:	4391      	bics	r1, r2
 80064fc:	6021      	str	r1, [r4, #0]
 80064fe:	2d00      	cmp	r5, #0
 8006500:	d102      	bne.n	8006508 <_printf_i+0xf0>
 8006502:	9e04      	ldr	r6, [sp, #16]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00c      	beq.n	8006522 <_printf_i+0x10a>
 8006508:	9e04      	ldr	r6, [sp, #16]
 800650a:	0028      	movs	r0, r5
 800650c:	0039      	movs	r1, r7
 800650e:	f7f9 fe93 	bl	8000238 <__aeabi_uidivmod>
 8006512:	9b03      	ldr	r3, [sp, #12]
 8006514:	3e01      	subs	r6, #1
 8006516:	5c5b      	ldrb	r3, [r3, r1]
 8006518:	7033      	strb	r3, [r6, #0]
 800651a:	002b      	movs	r3, r5
 800651c:	0005      	movs	r5, r0
 800651e:	429f      	cmp	r7, r3
 8006520:	d9f3      	bls.n	800650a <_printf_i+0xf2>
 8006522:	2f08      	cmp	r7, #8
 8006524:	d109      	bne.n	800653a <_printf_i+0x122>
 8006526:	6823      	ldr	r3, [r4, #0]
 8006528:	07db      	lsls	r3, r3, #31
 800652a:	d506      	bpl.n	800653a <_printf_i+0x122>
 800652c:	6863      	ldr	r3, [r4, #4]
 800652e:	6922      	ldr	r2, [r4, #16]
 8006530:	4293      	cmp	r3, r2
 8006532:	dc02      	bgt.n	800653a <_printf_i+0x122>
 8006534:	2330      	movs	r3, #48	; 0x30
 8006536:	3e01      	subs	r6, #1
 8006538:	7033      	strb	r3, [r6, #0]
 800653a:	9b04      	ldr	r3, [sp, #16]
 800653c:	1b9b      	subs	r3, r3, r6
 800653e:	6123      	str	r3, [r4, #16]
 8006540:	9b07      	ldr	r3, [sp, #28]
 8006542:	0021      	movs	r1, r4
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	9805      	ldr	r0, [sp, #20]
 8006548:	9b06      	ldr	r3, [sp, #24]
 800654a:	aa09      	add	r2, sp, #36	; 0x24
 800654c:	f7ff fef4 	bl	8006338 <_printf_common>
 8006550:	1c43      	adds	r3, r0, #1
 8006552:	d14c      	bne.n	80065ee <_printf_i+0x1d6>
 8006554:	2001      	movs	r0, #1
 8006556:	4240      	negs	r0, r0
 8006558:	b00b      	add	sp, #44	; 0x2c
 800655a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800655c:	3145      	adds	r1, #69	; 0x45
 800655e:	700a      	strb	r2, [r1, #0]
 8006560:	4a34      	ldr	r2, [pc, #208]	; (8006634 <_printf_i+0x21c>)
 8006562:	9203      	str	r2, [sp, #12]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	6821      	ldr	r1, [r4, #0]
 8006568:	ca20      	ldmia	r2!, {r5}
 800656a:	601a      	str	r2, [r3, #0]
 800656c:	0608      	lsls	r0, r1, #24
 800656e:	d516      	bpl.n	800659e <_printf_i+0x186>
 8006570:	07cb      	lsls	r3, r1, #31
 8006572:	d502      	bpl.n	800657a <_printf_i+0x162>
 8006574:	2320      	movs	r3, #32
 8006576:	4319      	orrs	r1, r3
 8006578:	6021      	str	r1, [r4, #0]
 800657a:	2710      	movs	r7, #16
 800657c:	2d00      	cmp	r5, #0
 800657e:	d1b2      	bne.n	80064e6 <_printf_i+0xce>
 8006580:	2320      	movs	r3, #32
 8006582:	6822      	ldr	r2, [r4, #0]
 8006584:	439a      	bics	r2, r3
 8006586:	6022      	str	r2, [r4, #0]
 8006588:	e7ad      	b.n	80064e6 <_printf_i+0xce>
 800658a:	2220      	movs	r2, #32
 800658c:	6809      	ldr	r1, [r1, #0]
 800658e:	430a      	orrs	r2, r1
 8006590:	6022      	str	r2, [r4, #0]
 8006592:	0022      	movs	r2, r4
 8006594:	2178      	movs	r1, #120	; 0x78
 8006596:	3245      	adds	r2, #69	; 0x45
 8006598:	7011      	strb	r1, [r2, #0]
 800659a:	4a27      	ldr	r2, [pc, #156]	; (8006638 <_printf_i+0x220>)
 800659c:	e7e1      	b.n	8006562 <_printf_i+0x14a>
 800659e:	0648      	lsls	r0, r1, #25
 80065a0:	d5e6      	bpl.n	8006570 <_printf_i+0x158>
 80065a2:	b2ad      	uxth	r5, r5
 80065a4:	e7e4      	b.n	8006570 <_printf_i+0x158>
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	680d      	ldr	r5, [r1, #0]
 80065aa:	1d10      	adds	r0, r2, #4
 80065ac:	6949      	ldr	r1, [r1, #20]
 80065ae:	6018      	str	r0, [r3, #0]
 80065b0:	6813      	ldr	r3, [r2, #0]
 80065b2:	062e      	lsls	r6, r5, #24
 80065b4:	d501      	bpl.n	80065ba <_printf_i+0x1a2>
 80065b6:	6019      	str	r1, [r3, #0]
 80065b8:	e002      	b.n	80065c0 <_printf_i+0x1a8>
 80065ba:	066d      	lsls	r5, r5, #25
 80065bc:	d5fb      	bpl.n	80065b6 <_printf_i+0x19e>
 80065be:	8019      	strh	r1, [r3, #0]
 80065c0:	2300      	movs	r3, #0
 80065c2:	9e04      	ldr	r6, [sp, #16]
 80065c4:	6123      	str	r3, [r4, #16]
 80065c6:	e7bb      	b.n	8006540 <_printf_i+0x128>
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	1d11      	adds	r1, r2, #4
 80065cc:	6019      	str	r1, [r3, #0]
 80065ce:	6816      	ldr	r6, [r2, #0]
 80065d0:	2100      	movs	r1, #0
 80065d2:	0030      	movs	r0, r6
 80065d4:	6862      	ldr	r2, [r4, #4]
 80065d6:	f000 f831 	bl	800663c <memchr>
 80065da:	2800      	cmp	r0, #0
 80065dc:	d001      	beq.n	80065e2 <_printf_i+0x1ca>
 80065de:	1b80      	subs	r0, r0, r6
 80065e0:	6060      	str	r0, [r4, #4]
 80065e2:	6863      	ldr	r3, [r4, #4]
 80065e4:	6123      	str	r3, [r4, #16]
 80065e6:	2300      	movs	r3, #0
 80065e8:	9a04      	ldr	r2, [sp, #16]
 80065ea:	7013      	strb	r3, [r2, #0]
 80065ec:	e7a8      	b.n	8006540 <_printf_i+0x128>
 80065ee:	6923      	ldr	r3, [r4, #16]
 80065f0:	0032      	movs	r2, r6
 80065f2:	9906      	ldr	r1, [sp, #24]
 80065f4:	9805      	ldr	r0, [sp, #20]
 80065f6:	9d07      	ldr	r5, [sp, #28]
 80065f8:	47a8      	blx	r5
 80065fa:	1c43      	adds	r3, r0, #1
 80065fc:	d0aa      	beq.n	8006554 <_printf_i+0x13c>
 80065fe:	6823      	ldr	r3, [r4, #0]
 8006600:	079b      	lsls	r3, r3, #30
 8006602:	d415      	bmi.n	8006630 <_printf_i+0x218>
 8006604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006606:	68e0      	ldr	r0, [r4, #12]
 8006608:	4298      	cmp	r0, r3
 800660a:	daa5      	bge.n	8006558 <_printf_i+0x140>
 800660c:	0018      	movs	r0, r3
 800660e:	e7a3      	b.n	8006558 <_printf_i+0x140>
 8006610:	0022      	movs	r2, r4
 8006612:	2301      	movs	r3, #1
 8006614:	9906      	ldr	r1, [sp, #24]
 8006616:	9805      	ldr	r0, [sp, #20]
 8006618:	9e07      	ldr	r6, [sp, #28]
 800661a:	3219      	adds	r2, #25
 800661c:	47b0      	blx	r6
 800661e:	1c43      	adds	r3, r0, #1
 8006620:	d098      	beq.n	8006554 <_printf_i+0x13c>
 8006622:	3501      	adds	r5, #1
 8006624:	68e3      	ldr	r3, [r4, #12]
 8006626:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006628:	1a9b      	subs	r3, r3, r2
 800662a:	42ab      	cmp	r3, r5
 800662c:	dcf0      	bgt.n	8006610 <_printf_i+0x1f8>
 800662e:	e7e9      	b.n	8006604 <_printf_i+0x1ec>
 8006630:	2500      	movs	r5, #0
 8006632:	e7f7      	b.n	8006624 <_printf_i+0x20c>
 8006634:	08006a8d 	.word	0x08006a8d
 8006638:	08006a9e 	.word	0x08006a9e

0800663c <memchr>:
 800663c:	b2c9      	uxtb	r1, r1
 800663e:	1882      	adds	r2, r0, r2
 8006640:	4290      	cmp	r0, r2
 8006642:	d101      	bne.n	8006648 <memchr+0xc>
 8006644:	2000      	movs	r0, #0
 8006646:	4770      	bx	lr
 8006648:	7803      	ldrb	r3, [r0, #0]
 800664a:	428b      	cmp	r3, r1
 800664c:	d0fb      	beq.n	8006646 <memchr+0xa>
 800664e:	3001      	adds	r0, #1
 8006650:	e7f6      	b.n	8006640 <memchr+0x4>

08006652 <memcpy>:
 8006652:	2300      	movs	r3, #0
 8006654:	b510      	push	{r4, lr}
 8006656:	429a      	cmp	r2, r3
 8006658:	d100      	bne.n	800665c <memcpy+0xa>
 800665a:	bd10      	pop	{r4, pc}
 800665c:	5ccc      	ldrb	r4, [r1, r3]
 800665e:	54c4      	strb	r4, [r0, r3]
 8006660:	3301      	adds	r3, #1
 8006662:	e7f8      	b.n	8006656 <memcpy+0x4>

08006664 <memmove>:
 8006664:	b510      	push	{r4, lr}
 8006666:	4288      	cmp	r0, r1
 8006668:	d902      	bls.n	8006670 <memmove+0xc>
 800666a:	188b      	adds	r3, r1, r2
 800666c:	4298      	cmp	r0, r3
 800666e:	d303      	bcc.n	8006678 <memmove+0x14>
 8006670:	2300      	movs	r3, #0
 8006672:	e007      	b.n	8006684 <memmove+0x20>
 8006674:	5c8b      	ldrb	r3, [r1, r2]
 8006676:	5483      	strb	r3, [r0, r2]
 8006678:	3a01      	subs	r2, #1
 800667a:	d2fb      	bcs.n	8006674 <memmove+0x10>
 800667c:	bd10      	pop	{r4, pc}
 800667e:	5ccc      	ldrb	r4, [r1, r3]
 8006680:	54c4      	strb	r4, [r0, r3]
 8006682:	3301      	adds	r3, #1
 8006684:	429a      	cmp	r2, r3
 8006686:	d1fa      	bne.n	800667e <memmove+0x1a>
 8006688:	e7f8      	b.n	800667c <memmove+0x18>
	...

0800668c <_free_r>:
 800668c:	b570      	push	{r4, r5, r6, lr}
 800668e:	0005      	movs	r5, r0
 8006690:	2900      	cmp	r1, #0
 8006692:	d010      	beq.n	80066b6 <_free_r+0x2a>
 8006694:	1f0c      	subs	r4, r1, #4
 8006696:	6823      	ldr	r3, [r4, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	da00      	bge.n	800669e <_free_r+0x12>
 800669c:	18e4      	adds	r4, r4, r3
 800669e:	0028      	movs	r0, r5
 80066a0:	f000 f918 	bl	80068d4 <__malloc_lock>
 80066a4:	4a1d      	ldr	r2, [pc, #116]	; (800671c <_free_r+0x90>)
 80066a6:	6813      	ldr	r3, [r2, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d105      	bne.n	80066b8 <_free_r+0x2c>
 80066ac:	6063      	str	r3, [r4, #4]
 80066ae:	6014      	str	r4, [r2, #0]
 80066b0:	0028      	movs	r0, r5
 80066b2:	f000 f917 	bl	80068e4 <__malloc_unlock>
 80066b6:	bd70      	pop	{r4, r5, r6, pc}
 80066b8:	42a3      	cmp	r3, r4
 80066ba:	d908      	bls.n	80066ce <_free_r+0x42>
 80066bc:	6821      	ldr	r1, [r4, #0]
 80066be:	1860      	adds	r0, r4, r1
 80066c0:	4283      	cmp	r3, r0
 80066c2:	d1f3      	bne.n	80066ac <_free_r+0x20>
 80066c4:	6818      	ldr	r0, [r3, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	1841      	adds	r1, r0, r1
 80066ca:	6021      	str	r1, [r4, #0]
 80066cc:	e7ee      	b.n	80066ac <_free_r+0x20>
 80066ce:	001a      	movs	r2, r3
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d001      	beq.n	80066da <_free_r+0x4e>
 80066d6:	42a3      	cmp	r3, r4
 80066d8:	d9f9      	bls.n	80066ce <_free_r+0x42>
 80066da:	6811      	ldr	r1, [r2, #0]
 80066dc:	1850      	adds	r0, r2, r1
 80066de:	42a0      	cmp	r0, r4
 80066e0:	d10b      	bne.n	80066fa <_free_r+0x6e>
 80066e2:	6820      	ldr	r0, [r4, #0]
 80066e4:	1809      	adds	r1, r1, r0
 80066e6:	1850      	adds	r0, r2, r1
 80066e8:	6011      	str	r1, [r2, #0]
 80066ea:	4283      	cmp	r3, r0
 80066ec:	d1e0      	bne.n	80066b0 <_free_r+0x24>
 80066ee:	6818      	ldr	r0, [r3, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	1841      	adds	r1, r0, r1
 80066f4:	6011      	str	r1, [r2, #0]
 80066f6:	6053      	str	r3, [r2, #4]
 80066f8:	e7da      	b.n	80066b0 <_free_r+0x24>
 80066fa:	42a0      	cmp	r0, r4
 80066fc:	d902      	bls.n	8006704 <_free_r+0x78>
 80066fe:	230c      	movs	r3, #12
 8006700:	602b      	str	r3, [r5, #0]
 8006702:	e7d5      	b.n	80066b0 <_free_r+0x24>
 8006704:	6821      	ldr	r1, [r4, #0]
 8006706:	1860      	adds	r0, r4, r1
 8006708:	4283      	cmp	r3, r0
 800670a:	d103      	bne.n	8006714 <_free_r+0x88>
 800670c:	6818      	ldr	r0, [r3, #0]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	1841      	adds	r1, r0, r1
 8006712:	6021      	str	r1, [r4, #0]
 8006714:	6063      	str	r3, [r4, #4]
 8006716:	6054      	str	r4, [r2, #4]
 8006718:	e7ca      	b.n	80066b0 <_free_r+0x24>
 800671a:	46c0      	nop			; (mov r8, r8)
 800671c:	20000174 	.word	0x20000174

08006720 <sbrk_aligned>:
 8006720:	b570      	push	{r4, r5, r6, lr}
 8006722:	4e0f      	ldr	r6, [pc, #60]	; (8006760 <sbrk_aligned+0x40>)
 8006724:	000d      	movs	r5, r1
 8006726:	6831      	ldr	r1, [r6, #0]
 8006728:	0004      	movs	r4, r0
 800672a:	2900      	cmp	r1, #0
 800672c:	d102      	bne.n	8006734 <sbrk_aligned+0x14>
 800672e:	f000 f8bf 	bl	80068b0 <_sbrk_r>
 8006732:	6030      	str	r0, [r6, #0]
 8006734:	0029      	movs	r1, r5
 8006736:	0020      	movs	r0, r4
 8006738:	f000 f8ba 	bl	80068b0 <_sbrk_r>
 800673c:	1c43      	adds	r3, r0, #1
 800673e:	d00a      	beq.n	8006756 <sbrk_aligned+0x36>
 8006740:	2303      	movs	r3, #3
 8006742:	1cc5      	adds	r5, r0, #3
 8006744:	439d      	bics	r5, r3
 8006746:	42a8      	cmp	r0, r5
 8006748:	d007      	beq.n	800675a <sbrk_aligned+0x3a>
 800674a:	1a29      	subs	r1, r5, r0
 800674c:	0020      	movs	r0, r4
 800674e:	f000 f8af 	bl	80068b0 <_sbrk_r>
 8006752:	1c43      	adds	r3, r0, #1
 8006754:	d101      	bne.n	800675a <sbrk_aligned+0x3a>
 8006756:	2501      	movs	r5, #1
 8006758:	426d      	negs	r5, r5
 800675a:	0028      	movs	r0, r5
 800675c:	bd70      	pop	{r4, r5, r6, pc}
 800675e:	46c0      	nop			; (mov r8, r8)
 8006760:	20000178 	.word	0x20000178

08006764 <_malloc_r>:
 8006764:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006766:	2203      	movs	r2, #3
 8006768:	1ccb      	adds	r3, r1, #3
 800676a:	4393      	bics	r3, r2
 800676c:	3308      	adds	r3, #8
 800676e:	0006      	movs	r6, r0
 8006770:	001f      	movs	r7, r3
 8006772:	2b0c      	cmp	r3, #12
 8006774:	d232      	bcs.n	80067dc <_malloc_r+0x78>
 8006776:	270c      	movs	r7, #12
 8006778:	42b9      	cmp	r1, r7
 800677a:	d831      	bhi.n	80067e0 <_malloc_r+0x7c>
 800677c:	0030      	movs	r0, r6
 800677e:	f000 f8a9 	bl	80068d4 <__malloc_lock>
 8006782:	4d32      	ldr	r5, [pc, #200]	; (800684c <_malloc_r+0xe8>)
 8006784:	682b      	ldr	r3, [r5, #0]
 8006786:	001c      	movs	r4, r3
 8006788:	2c00      	cmp	r4, #0
 800678a:	d12e      	bne.n	80067ea <_malloc_r+0x86>
 800678c:	0039      	movs	r1, r7
 800678e:	0030      	movs	r0, r6
 8006790:	f7ff ffc6 	bl	8006720 <sbrk_aligned>
 8006794:	0004      	movs	r4, r0
 8006796:	1c43      	adds	r3, r0, #1
 8006798:	d11e      	bne.n	80067d8 <_malloc_r+0x74>
 800679a:	682c      	ldr	r4, [r5, #0]
 800679c:	0025      	movs	r5, r4
 800679e:	2d00      	cmp	r5, #0
 80067a0:	d14a      	bne.n	8006838 <_malloc_r+0xd4>
 80067a2:	6823      	ldr	r3, [r4, #0]
 80067a4:	0029      	movs	r1, r5
 80067a6:	18e3      	adds	r3, r4, r3
 80067a8:	0030      	movs	r0, r6
 80067aa:	9301      	str	r3, [sp, #4]
 80067ac:	f000 f880 	bl	80068b0 <_sbrk_r>
 80067b0:	9b01      	ldr	r3, [sp, #4]
 80067b2:	4283      	cmp	r3, r0
 80067b4:	d143      	bne.n	800683e <_malloc_r+0xda>
 80067b6:	6823      	ldr	r3, [r4, #0]
 80067b8:	3703      	adds	r7, #3
 80067ba:	1aff      	subs	r7, r7, r3
 80067bc:	2303      	movs	r3, #3
 80067be:	439f      	bics	r7, r3
 80067c0:	3708      	adds	r7, #8
 80067c2:	2f0c      	cmp	r7, #12
 80067c4:	d200      	bcs.n	80067c8 <_malloc_r+0x64>
 80067c6:	270c      	movs	r7, #12
 80067c8:	0039      	movs	r1, r7
 80067ca:	0030      	movs	r0, r6
 80067cc:	f7ff ffa8 	bl	8006720 <sbrk_aligned>
 80067d0:	1c43      	adds	r3, r0, #1
 80067d2:	d034      	beq.n	800683e <_malloc_r+0xda>
 80067d4:	6823      	ldr	r3, [r4, #0]
 80067d6:	19df      	adds	r7, r3, r7
 80067d8:	6027      	str	r7, [r4, #0]
 80067da:	e013      	b.n	8006804 <_malloc_r+0xa0>
 80067dc:	2b00      	cmp	r3, #0
 80067de:	dacb      	bge.n	8006778 <_malloc_r+0x14>
 80067e0:	230c      	movs	r3, #12
 80067e2:	2500      	movs	r5, #0
 80067e4:	6033      	str	r3, [r6, #0]
 80067e6:	0028      	movs	r0, r5
 80067e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80067ea:	6822      	ldr	r2, [r4, #0]
 80067ec:	1bd1      	subs	r1, r2, r7
 80067ee:	d420      	bmi.n	8006832 <_malloc_r+0xce>
 80067f0:	290b      	cmp	r1, #11
 80067f2:	d917      	bls.n	8006824 <_malloc_r+0xc0>
 80067f4:	19e2      	adds	r2, r4, r7
 80067f6:	6027      	str	r7, [r4, #0]
 80067f8:	42a3      	cmp	r3, r4
 80067fa:	d111      	bne.n	8006820 <_malloc_r+0xbc>
 80067fc:	602a      	str	r2, [r5, #0]
 80067fe:	6863      	ldr	r3, [r4, #4]
 8006800:	6011      	str	r1, [r2, #0]
 8006802:	6053      	str	r3, [r2, #4]
 8006804:	0030      	movs	r0, r6
 8006806:	0025      	movs	r5, r4
 8006808:	f000 f86c 	bl	80068e4 <__malloc_unlock>
 800680c:	2207      	movs	r2, #7
 800680e:	350b      	adds	r5, #11
 8006810:	1d23      	adds	r3, r4, #4
 8006812:	4395      	bics	r5, r2
 8006814:	1aea      	subs	r2, r5, r3
 8006816:	429d      	cmp	r5, r3
 8006818:	d0e5      	beq.n	80067e6 <_malloc_r+0x82>
 800681a:	1b5b      	subs	r3, r3, r5
 800681c:	50a3      	str	r3, [r4, r2]
 800681e:	e7e2      	b.n	80067e6 <_malloc_r+0x82>
 8006820:	605a      	str	r2, [r3, #4]
 8006822:	e7ec      	b.n	80067fe <_malloc_r+0x9a>
 8006824:	6862      	ldr	r2, [r4, #4]
 8006826:	42a3      	cmp	r3, r4
 8006828:	d101      	bne.n	800682e <_malloc_r+0xca>
 800682a:	602a      	str	r2, [r5, #0]
 800682c:	e7ea      	b.n	8006804 <_malloc_r+0xa0>
 800682e:	605a      	str	r2, [r3, #4]
 8006830:	e7e8      	b.n	8006804 <_malloc_r+0xa0>
 8006832:	0023      	movs	r3, r4
 8006834:	6864      	ldr	r4, [r4, #4]
 8006836:	e7a7      	b.n	8006788 <_malloc_r+0x24>
 8006838:	002c      	movs	r4, r5
 800683a:	686d      	ldr	r5, [r5, #4]
 800683c:	e7af      	b.n	800679e <_malloc_r+0x3a>
 800683e:	230c      	movs	r3, #12
 8006840:	0030      	movs	r0, r6
 8006842:	6033      	str	r3, [r6, #0]
 8006844:	f000 f84e 	bl	80068e4 <__malloc_unlock>
 8006848:	e7cd      	b.n	80067e6 <_malloc_r+0x82>
 800684a:	46c0      	nop			; (mov r8, r8)
 800684c:	20000174 	.word	0x20000174

08006850 <_realloc_r>:
 8006850:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006852:	0007      	movs	r7, r0
 8006854:	000e      	movs	r6, r1
 8006856:	0014      	movs	r4, r2
 8006858:	2900      	cmp	r1, #0
 800685a:	d105      	bne.n	8006868 <_realloc_r+0x18>
 800685c:	0011      	movs	r1, r2
 800685e:	f7ff ff81 	bl	8006764 <_malloc_r>
 8006862:	0005      	movs	r5, r0
 8006864:	0028      	movs	r0, r5
 8006866:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006868:	2a00      	cmp	r2, #0
 800686a:	d103      	bne.n	8006874 <_realloc_r+0x24>
 800686c:	f7ff ff0e 	bl	800668c <_free_r>
 8006870:	0025      	movs	r5, r4
 8006872:	e7f7      	b.n	8006864 <_realloc_r+0x14>
 8006874:	f000 f83e 	bl	80068f4 <_malloc_usable_size_r>
 8006878:	9001      	str	r0, [sp, #4]
 800687a:	4284      	cmp	r4, r0
 800687c:	d803      	bhi.n	8006886 <_realloc_r+0x36>
 800687e:	0035      	movs	r5, r6
 8006880:	0843      	lsrs	r3, r0, #1
 8006882:	42a3      	cmp	r3, r4
 8006884:	d3ee      	bcc.n	8006864 <_realloc_r+0x14>
 8006886:	0021      	movs	r1, r4
 8006888:	0038      	movs	r0, r7
 800688a:	f7ff ff6b 	bl	8006764 <_malloc_r>
 800688e:	1e05      	subs	r5, r0, #0
 8006890:	d0e8      	beq.n	8006864 <_realloc_r+0x14>
 8006892:	9b01      	ldr	r3, [sp, #4]
 8006894:	0022      	movs	r2, r4
 8006896:	429c      	cmp	r4, r3
 8006898:	d900      	bls.n	800689c <_realloc_r+0x4c>
 800689a:	001a      	movs	r2, r3
 800689c:	0031      	movs	r1, r6
 800689e:	0028      	movs	r0, r5
 80068a0:	f7ff fed7 	bl	8006652 <memcpy>
 80068a4:	0031      	movs	r1, r6
 80068a6:	0038      	movs	r0, r7
 80068a8:	f7ff fef0 	bl	800668c <_free_r>
 80068ac:	e7da      	b.n	8006864 <_realloc_r+0x14>
	...

080068b0 <_sbrk_r>:
 80068b0:	2300      	movs	r3, #0
 80068b2:	b570      	push	{r4, r5, r6, lr}
 80068b4:	4d06      	ldr	r5, [pc, #24]	; (80068d0 <_sbrk_r+0x20>)
 80068b6:	0004      	movs	r4, r0
 80068b8:	0008      	movs	r0, r1
 80068ba:	602b      	str	r3, [r5, #0]
 80068bc:	f7fc fbbc 	bl	8003038 <_sbrk>
 80068c0:	1c43      	adds	r3, r0, #1
 80068c2:	d103      	bne.n	80068cc <_sbrk_r+0x1c>
 80068c4:	682b      	ldr	r3, [r5, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d000      	beq.n	80068cc <_sbrk_r+0x1c>
 80068ca:	6023      	str	r3, [r4, #0]
 80068cc:	bd70      	pop	{r4, r5, r6, pc}
 80068ce:	46c0      	nop			; (mov r8, r8)
 80068d0:	2000017c 	.word	0x2000017c

080068d4 <__malloc_lock>:
 80068d4:	b510      	push	{r4, lr}
 80068d6:	4802      	ldr	r0, [pc, #8]	; (80068e0 <__malloc_lock+0xc>)
 80068d8:	f000 f814 	bl	8006904 <__retarget_lock_acquire_recursive>
 80068dc:	bd10      	pop	{r4, pc}
 80068de:	46c0      	nop			; (mov r8, r8)
 80068e0:	20000180 	.word	0x20000180

080068e4 <__malloc_unlock>:
 80068e4:	b510      	push	{r4, lr}
 80068e6:	4802      	ldr	r0, [pc, #8]	; (80068f0 <__malloc_unlock+0xc>)
 80068e8:	f000 f80d 	bl	8006906 <__retarget_lock_release_recursive>
 80068ec:	bd10      	pop	{r4, pc}
 80068ee:	46c0      	nop			; (mov r8, r8)
 80068f0:	20000180 	.word	0x20000180

080068f4 <_malloc_usable_size_r>:
 80068f4:	1f0b      	subs	r3, r1, #4
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	1f18      	subs	r0, r3, #4
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	da01      	bge.n	8006902 <_malloc_usable_size_r+0xe>
 80068fe:	580b      	ldr	r3, [r1, r0]
 8006900:	18c0      	adds	r0, r0, r3
 8006902:	4770      	bx	lr

08006904 <__retarget_lock_acquire_recursive>:
 8006904:	4770      	bx	lr

08006906 <__retarget_lock_release_recursive>:
 8006906:	4770      	bx	lr

08006908 <_init>:
 8006908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800690a:	46c0      	nop			; (mov r8, r8)
 800690c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800690e:	bc08      	pop	{r3}
 8006910:	469e      	mov	lr, r3
 8006912:	4770      	bx	lr

08006914 <_fini>:
 8006914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006916:	46c0      	nop			; (mov r8, r8)
 8006918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800691a:	bc08      	pop	{r3}
 800691c:	469e      	mov	lr, r3
 800691e:	4770      	bx	lr


FreeRTOS_Binary_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f10  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08004fd0  08004fd0  00014fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051ac  080051ac  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080051ac  080051ac  000151ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051b4  080051b4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051b4  080051b4  000151b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051b8  080051b8  000151b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080051bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000108c  20000010  080051cc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000109c  080051cc  0002109c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010da6  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000294f  00000000  00000000  00030e21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001060  00000000  00000000  00033770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cac  00000000  00000000  000347d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015cc7  00000000  00000000  0003547c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001253c  00000000  00000000  0004b143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086f78  00000000  00000000  0005d67f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003aa8  00000000  00000000  000e45f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000e80a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004fb8 	.word	0x08004fb8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08004fb8 	.word	0x08004fb8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f834 	bl	80002cc <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46ce      	mov	lr, r9
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	469c      	mov	ip, r3
 800027a:	0413      	lsls	r3, r2, #16
 800027c:	4647      	mov	r7, r8
 800027e:	0c1b      	lsrs	r3, r3, #16
 8000280:	001d      	movs	r5, r3
 8000282:	000e      	movs	r6, r1
 8000284:	4661      	mov	r1, ip
 8000286:	0404      	lsls	r4, r0, #16
 8000288:	0c24      	lsrs	r4, r4, #16
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	0c10      	lsrs	r0, r2, #16
 8000290:	434b      	muls	r3, r1
 8000292:	4365      	muls	r5, r4
 8000294:	4341      	muls	r1, r0
 8000296:	4360      	muls	r0, r4
 8000298:	0c2c      	lsrs	r4, r5, #16
 800029a:	18c0      	adds	r0, r0, r3
 800029c:	1820      	adds	r0, r4, r0
 800029e:	468c      	mov	ip, r1
 80002a0:	4283      	cmp	r3, r0
 80002a2:	d903      	bls.n	80002ac <__aeabi_lmul+0x3c>
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	025b      	lsls	r3, r3, #9
 80002a8:	4698      	mov	r8, r3
 80002aa:	44c4      	add	ip, r8
 80002ac:	4649      	mov	r1, r9
 80002ae:	4379      	muls	r1, r7
 80002b0:	4356      	muls	r6, r2
 80002b2:	0c03      	lsrs	r3, r0, #16
 80002b4:	042d      	lsls	r5, r5, #16
 80002b6:	0c2d      	lsrs	r5, r5, #16
 80002b8:	1989      	adds	r1, r1, r6
 80002ba:	4463      	add	r3, ip
 80002bc:	0400      	lsls	r0, r0, #16
 80002be:	1940      	adds	r0, r0, r5
 80002c0:	18c9      	adds	r1, r1, r3
 80002c2:	bcc0      	pop	{r6, r7}
 80002c4:	46b9      	mov	r9, r7
 80002c6:	46b0      	mov	r8, r6
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)

080002cc <__udivmoddi4>:
 80002cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ce:	4657      	mov	r7, sl
 80002d0:	464e      	mov	r6, r9
 80002d2:	4645      	mov	r5, r8
 80002d4:	46de      	mov	lr, fp
 80002d6:	b5e0      	push	{r5, r6, r7, lr}
 80002d8:	0004      	movs	r4, r0
 80002da:	000d      	movs	r5, r1
 80002dc:	4692      	mov	sl, r2
 80002de:	4699      	mov	r9, r3
 80002e0:	b083      	sub	sp, #12
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d830      	bhi.n	8000348 <__udivmoddi4+0x7c>
 80002e6:	d02d      	beq.n	8000344 <__udivmoddi4+0x78>
 80002e8:	4649      	mov	r1, r9
 80002ea:	4650      	mov	r0, sl
 80002ec:	f000 f8ba 	bl	8000464 <__clzdi2>
 80002f0:	0029      	movs	r1, r5
 80002f2:	0006      	movs	r6, r0
 80002f4:	0020      	movs	r0, r4
 80002f6:	f000 f8b5 	bl	8000464 <__clzdi2>
 80002fa:	1a33      	subs	r3, r6, r0
 80002fc:	4698      	mov	r8, r3
 80002fe:	3b20      	subs	r3, #32
 8000300:	d434      	bmi.n	800036c <__udivmoddi4+0xa0>
 8000302:	469b      	mov	fp, r3
 8000304:	4653      	mov	r3, sl
 8000306:	465a      	mov	r2, fp
 8000308:	4093      	lsls	r3, r2
 800030a:	4642      	mov	r2, r8
 800030c:	001f      	movs	r7, r3
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	001e      	movs	r6, r3
 8000314:	42af      	cmp	r7, r5
 8000316:	d83b      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000318:	42af      	cmp	r7, r5
 800031a:	d100      	bne.n	800031e <__udivmoddi4+0x52>
 800031c:	e079      	b.n	8000412 <__udivmoddi4+0x146>
 800031e:	465b      	mov	r3, fp
 8000320:	1ba4      	subs	r4, r4, r6
 8000322:	41bd      	sbcs	r5, r7
 8000324:	2b00      	cmp	r3, #0
 8000326:	da00      	bge.n	800032a <__udivmoddi4+0x5e>
 8000328:	e076      	b.n	8000418 <__udivmoddi4+0x14c>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	465a      	mov	r2, fp
 8000336:	4093      	lsls	r3, r2
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	4642      	mov	r2, r8
 800033e:	4093      	lsls	r3, r2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	e029      	b.n	8000398 <__udivmoddi4+0xcc>
 8000344:	4282      	cmp	r2, r0
 8000346:	d9cf      	bls.n	80002e8 <__udivmoddi4+0x1c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <__udivmoddi4+0x8e>
 8000356:	601c      	str	r4, [r3, #0]
 8000358:	605d      	str	r5, [r3, #4]
 800035a:	9800      	ldr	r0, [sp, #0]
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	b003      	add	sp, #12
 8000360:	bcf0      	pop	{r4, r5, r6, r7}
 8000362:	46bb      	mov	fp, r7
 8000364:	46b2      	mov	sl, r6
 8000366:	46a9      	mov	r9, r5
 8000368:	46a0      	mov	r8, r4
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	4642      	mov	r2, r8
 800036e:	469b      	mov	fp, r3
 8000370:	2320      	movs	r3, #32
 8000372:	1a9b      	subs	r3, r3, r2
 8000374:	4652      	mov	r2, sl
 8000376:	40da      	lsrs	r2, r3
 8000378:	4641      	mov	r1, r8
 800037a:	0013      	movs	r3, r2
 800037c:	464a      	mov	r2, r9
 800037e:	408a      	lsls	r2, r1
 8000380:	0017      	movs	r7, r2
 8000382:	4642      	mov	r2, r8
 8000384:	431f      	orrs	r7, r3
 8000386:	4653      	mov	r3, sl
 8000388:	4093      	lsls	r3, r2
 800038a:	001e      	movs	r6, r3
 800038c:	42af      	cmp	r7, r5
 800038e:	d9c3      	bls.n	8000318 <__udivmoddi4+0x4c>
 8000390:	2200      	movs	r2, #0
 8000392:	2300      	movs	r3, #0
 8000394:	9200      	str	r2, [sp, #0]
 8000396:	9301      	str	r3, [sp, #4]
 8000398:	4643      	mov	r3, r8
 800039a:	2b00      	cmp	r3, #0
 800039c:	d0d8      	beq.n	8000350 <__udivmoddi4+0x84>
 800039e:	07fb      	lsls	r3, r7, #31
 80003a0:	0872      	lsrs	r2, r6, #1
 80003a2:	431a      	orrs	r2, r3
 80003a4:	4646      	mov	r6, r8
 80003a6:	087b      	lsrs	r3, r7, #1
 80003a8:	e00e      	b.n	80003c8 <__udivmoddi4+0xfc>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d101      	bne.n	80003b2 <__udivmoddi4+0xe6>
 80003ae:	42a2      	cmp	r2, r4
 80003b0:	d80c      	bhi.n	80003cc <__udivmoddi4+0x100>
 80003b2:	1aa4      	subs	r4, r4, r2
 80003b4:	419d      	sbcs	r5, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	1924      	adds	r4, r4, r4
 80003ba:	416d      	adcs	r5, r5
 80003bc:	2100      	movs	r1, #0
 80003be:	3e01      	subs	r6, #1
 80003c0:	1824      	adds	r4, r4, r0
 80003c2:	414d      	adcs	r5, r1
 80003c4:	2e00      	cmp	r6, #0
 80003c6:	d006      	beq.n	80003d6 <__udivmoddi4+0x10a>
 80003c8:	42ab      	cmp	r3, r5
 80003ca:	d9ee      	bls.n	80003aa <__udivmoddi4+0xde>
 80003cc:	3e01      	subs	r6, #1
 80003ce:	1924      	adds	r4, r4, r4
 80003d0:	416d      	adcs	r5, r5
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d1f8      	bne.n	80003c8 <__udivmoddi4+0xfc>
 80003d6:	9800      	ldr	r0, [sp, #0]
 80003d8:	9901      	ldr	r1, [sp, #4]
 80003da:	465b      	mov	r3, fp
 80003dc:	1900      	adds	r0, r0, r4
 80003de:	4169      	adcs	r1, r5
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	db24      	blt.n	800042e <__udivmoddi4+0x162>
 80003e4:	002b      	movs	r3, r5
 80003e6:	465a      	mov	r2, fp
 80003e8:	4644      	mov	r4, r8
 80003ea:	40d3      	lsrs	r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	40e2      	lsrs	r2, r4
 80003f0:	001c      	movs	r4, r3
 80003f2:	465b      	mov	r3, fp
 80003f4:	0015      	movs	r5, r2
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	db2a      	blt.n	8000450 <__udivmoddi4+0x184>
 80003fa:	0026      	movs	r6, r4
 80003fc:	409e      	lsls	r6, r3
 80003fe:	0033      	movs	r3, r6
 8000400:	0026      	movs	r6, r4
 8000402:	4647      	mov	r7, r8
 8000404:	40be      	lsls	r6, r7
 8000406:	0032      	movs	r2, r6
 8000408:	1a80      	subs	r0, r0, r2
 800040a:	4199      	sbcs	r1, r3
 800040c:	9000      	str	r0, [sp, #0]
 800040e:	9101      	str	r1, [sp, #4]
 8000410:	e79e      	b.n	8000350 <__udivmoddi4+0x84>
 8000412:	42a3      	cmp	r3, r4
 8000414:	d8bc      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000416:	e782      	b.n	800031e <__udivmoddi4+0x52>
 8000418:	4642      	mov	r2, r8
 800041a:	2320      	movs	r3, #32
 800041c:	2100      	movs	r1, #0
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	9100      	str	r1, [sp, #0]
 8000424:	9201      	str	r2, [sp, #4]
 8000426:	2201      	movs	r2, #1
 8000428:	40da      	lsrs	r2, r3
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	e785      	b.n	800033a <__udivmoddi4+0x6e>
 800042e:	4642      	mov	r2, r8
 8000430:	2320      	movs	r3, #32
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	002a      	movs	r2, r5
 8000436:	4646      	mov	r6, r8
 8000438:	409a      	lsls	r2, r3
 800043a:	0023      	movs	r3, r4
 800043c:	40f3      	lsrs	r3, r6
 800043e:	4644      	mov	r4, r8
 8000440:	4313      	orrs	r3, r2
 8000442:	002a      	movs	r2, r5
 8000444:	40e2      	lsrs	r2, r4
 8000446:	001c      	movs	r4, r3
 8000448:	465b      	mov	r3, fp
 800044a:	0015      	movs	r5, r2
 800044c:	2b00      	cmp	r3, #0
 800044e:	dad4      	bge.n	80003fa <__udivmoddi4+0x12e>
 8000450:	4642      	mov	r2, r8
 8000452:	002f      	movs	r7, r5
 8000454:	2320      	movs	r3, #32
 8000456:	0026      	movs	r6, r4
 8000458:	4097      	lsls	r7, r2
 800045a:	1a9b      	subs	r3, r3, r2
 800045c:	40de      	lsrs	r6, r3
 800045e:	003b      	movs	r3, r7
 8000460:	4333      	orrs	r3, r6
 8000462:	e7cd      	b.n	8000400 <__udivmoddi4+0x134>

08000464 <__clzdi2>:
 8000464:	b510      	push	{r4, lr}
 8000466:	2900      	cmp	r1, #0
 8000468:	d103      	bne.n	8000472 <__clzdi2+0xe>
 800046a:	f000 f807 	bl	800047c <__clzsi2>
 800046e:	3020      	adds	r0, #32
 8000470:	e002      	b.n	8000478 <__clzdi2+0x14>
 8000472:	0008      	movs	r0, r1
 8000474:	f000 f802 	bl	800047c <__clzsi2>
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__clzsi2>:
 800047c:	211c      	movs	r1, #28
 800047e:	2301      	movs	r3, #1
 8000480:	041b      	lsls	r3, r3, #16
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0xe>
 8000486:	0c00      	lsrs	r0, r0, #16
 8000488:	3910      	subs	r1, #16
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	4298      	cmp	r0, r3
 800048e:	d301      	bcc.n	8000494 <__clzsi2+0x18>
 8000490:	0a00      	lsrs	r0, r0, #8
 8000492:	3908      	subs	r1, #8
 8000494:	091b      	lsrs	r3, r3, #4
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0x22>
 800049a:	0900      	lsrs	r0, r0, #4
 800049c:	3904      	subs	r1, #4
 800049e:	a202      	add	r2, pc, #8	; (adr r2, 80004a8 <__clzsi2+0x2c>)
 80004a0:	5c10      	ldrb	r0, [r2, r0]
 80004a2:	1840      	adds	r0, r0, r1
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	02020304 	.word	0x02020304
 80004ac:	01010101 	.word	0x01010101
	...

080004b8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	60f8      	str	r0, [r7, #12]
 80004c0:	60b9      	str	r1, [r7, #8]
 80004c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	4a06      	ldr	r2, [pc, #24]	; (80004e0 <vApplicationGetIdleTaskMemory+0x28>)
 80004c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	4a05      	ldr	r2, [pc, #20]	; (80004e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80004ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2280      	movs	r2, #128	; 0x80
 80004d4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	46bd      	mov	sp, r7
 80004da:	b004      	add	sp, #16
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	2000002c 	.word	0x2000002c
 80004e4:	20000080 	.word	0x20000080

080004e8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004e8:	b5b0      	push	{r4, r5, r7, lr}
 80004ea:	b090      	sub	sp, #64	; 0x40
 80004ec:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004ee:	f000 fb0f 	bl	8000b10 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004f2:	f000 f841 	bl	8000578 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004f6:	f000 f8e1 	bl	80006bc <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80004fa:	f000 f8af 	bl	800065c <MX_USART1_UART_Init>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* definition and creation of BinSem */
	osSemaphoreDef(BinSem);
 80004fe:	2138      	movs	r1, #56	; 0x38
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2200      	movs	r2, #0
 800050a:	605a      	str	r2, [r3, #4]
	BinSemHandle = osSemaphoreCreate(osSemaphore(BinSem), 1);
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2101      	movs	r1, #1
 8000510:	0018      	movs	r0, r3
 8000512:	f002 fd69 	bl	8002fe8 <osSemaphoreCreate>
 8000516:	0002      	movs	r2, r0
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <main+0x7c>)
 800051a:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of NormalTask */
	osThreadDef(NormalTask, StartNormalTask, osPriorityNormal, 0, 128);
 800051c:	251c      	movs	r5, #28
 800051e:	197b      	adds	r3, r7, r5
 8000520:	4a11      	ldr	r2, [pc, #68]	; (8000568 <main+0x80>)
 8000522:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000524:	c313      	stmia	r3!, {r0, r1, r4}
 8000526:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000528:	c313      	stmia	r3!, {r0, r1, r4}
 800052a:	6812      	ldr	r2, [r2, #0]
 800052c:	601a      	str	r2, [r3, #0]
	NormalTaskHandle = osThreadCreate(osThread(NormalTask), NULL);
 800052e:	197b      	adds	r3, r7, r5
 8000530:	2100      	movs	r1, #0
 8000532:	0018      	movs	r0, r3
 8000534:	f002 fcf7 	bl	8002f26 <osThreadCreate>
 8000538:	0002      	movs	r2, r0
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <main+0x84>)
 800053c:	601a      	str	r2, [r3, #0]

	/* definition and creation of HighTask */
	osThreadDef(HighTask, StartHighTask, osPriorityAboveNormal, 0, 128);
 800053e:	003b      	movs	r3, r7
 8000540:	4a0b      	ldr	r2, [pc, #44]	; (8000570 <main+0x88>)
 8000542:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000544:	c313      	stmia	r3!, {r0, r1, r4}
 8000546:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000548:	c313      	stmia	r3!, {r0, r1, r4}
 800054a:	6812      	ldr	r2, [r2, #0]
 800054c:	601a      	str	r2, [r3, #0]
	HighTaskHandle = osThreadCreate(osThread(HighTask), NULL);
 800054e:	003b      	movs	r3, r7
 8000550:	2100      	movs	r1, #0
 8000552:	0018      	movs	r0, r3
 8000554:	f002 fce7 	bl	8002f26 <osThreadCreate>
 8000558:	0002      	movs	r2, r0
 800055a:	4b06      	ldr	r3, [pc, #24]	; (8000574 <main+0x8c>)
 800055c:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 800055e:	f002 fcda 	bl	8002f16 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000562:	e7fe      	b.n	8000562 <main+0x7a>
 8000564:	20000310 	.word	0x20000310
 8000568:	08004fdc 	.word	0x08004fdc
 800056c:	20000308 	.word	0x20000308
 8000570:	08005004 	.word	0x08005004
 8000574:	2000030c 	.word	0x2000030c

08000578 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	b09d      	sub	sp, #116	; 0x74
 800057c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800057e:	2438      	movs	r4, #56	; 0x38
 8000580:	193b      	adds	r3, r7, r4
 8000582:	0018      	movs	r0, r3
 8000584:	2338      	movs	r3, #56	; 0x38
 8000586:	001a      	movs	r2, r3
 8000588:	2100      	movs	r1, #0
 800058a:	f004 fcdf 	bl	8004f4c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800058e:	2324      	movs	r3, #36	; 0x24
 8000590:	18fb      	adds	r3, r7, r3
 8000592:	0018      	movs	r0, r3
 8000594:	2314      	movs	r3, #20
 8000596:	001a      	movs	r2, r3
 8000598:	2100      	movs	r1, #0
 800059a:	f004 fcd7 	bl	8004f4c <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800059e:	003b      	movs	r3, r7
 80005a0:	0018      	movs	r0, r3
 80005a2:	2324      	movs	r3, #36	; 0x24
 80005a4:	001a      	movs	r2, r3
 80005a6:	2100      	movs	r1, #0
 80005a8:	f004 fcd0 	bl	8004f4c <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ac:	4b29      	ldr	r3, [pc, #164]	; (8000654 <SystemClock_Config+0xdc>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a29      	ldr	r2, [pc, #164]	; (8000658 <SystemClock_Config+0xe0>)
 80005b2:	401a      	ands	r2, r3
 80005b4:	4b27      	ldr	r3, [pc, #156]	; (8000654 <SystemClock_Config+0xdc>)
 80005b6:	2180      	movs	r1, #128	; 0x80
 80005b8:	0109      	lsls	r1, r1, #4
 80005ba:	430a      	orrs	r2, r1
 80005bc:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005be:	0021      	movs	r1, r4
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	2202      	movs	r2, #2
 80005c4:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	2201      	movs	r2, #1
 80005ca:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2210      	movs	r2, #16
 80005d0:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	2202      	movs	r2, #2
 80005d6:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	2200      	movs	r2, #0
 80005dc:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2280      	movs	r2, #128	; 0x80
 80005e2:	02d2      	lsls	r2, r2, #11
 80005e4:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2280      	movs	r2, #128	; 0x80
 80005ea:	03d2      	lsls	r2, r2, #15
 80005ec:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	0018      	movs	r0, r3
 80005f2:	f000 fd2f 	bl	8001054 <HAL_RCC_OscConfig>
 80005f6:	1e03      	subs	r3, r0, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x86>
		Error_Handler();
 80005fa:	f000 f963 	bl	80008c4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005fe:	2124      	movs	r1, #36	; 0x24
 8000600:	187b      	adds	r3, r7, r1
 8000602:	220f      	movs	r2, #15
 8000604:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000606:	187b      	adds	r3, r7, r1
 8000608:	2203      	movs	r2, #3
 800060a:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2200      	movs	r2, #0
 8000616:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000618:	187b      	adds	r3, r7, r1
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800061e:	187b      	adds	r3, r7, r1
 8000620:	2101      	movs	r1, #1
 8000622:	0018      	movs	r0, r3
 8000624:	f001 f8da 	bl	80017dc <HAL_RCC_ClockConfig>
 8000628:	1e03      	subs	r3, r0, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0xb8>
		Error_Handler();
 800062c:	f000 f94a 	bl	80008c4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000630:	003b      	movs	r3, r7
 8000632:	2201      	movs	r2, #1
 8000634:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000636:	003b      	movs	r3, r7
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800063c:	003b      	movs	r3, r7
 800063e:	0018      	movs	r0, r3
 8000640:	f001 fb22 	bl	8001c88 <HAL_RCCEx_PeriphCLKConfig>
 8000644:	1e03      	subs	r3, r0, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0xd4>
		Error_Handler();
 8000648:	f000 f93c 	bl	80008c4 <Error_Handler>
	}
}
 800064c:	46c0      	nop			; (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	b01d      	add	sp, #116	; 0x74
 8000652:	bd90      	pop	{r4, r7, pc}
 8000654:	40007000 	.word	0x40007000
 8000658:	ffffe7ff 	.word	0xffffe7ff

0800065c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000660:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <MX_USART1_UART_Init+0x58>)
 8000662:	4a15      	ldr	r2, [pc, #84]	; (80006b8 <MX_USART1_UART_Init+0x5c>)
 8000664:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000666:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <MX_USART1_UART_Init+0x58>)
 8000668:	22e1      	movs	r2, #225	; 0xe1
 800066a:	0252      	lsls	r2, r2, #9
 800066c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_USART1_UART_Init+0x58>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_USART1_UART_Init+0x58>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_USART1_UART_Init+0x58>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_USART1_UART_Init+0x58>)
 8000682:	220c      	movs	r2, #12
 8000684:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <MX_USART1_UART_Init+0x58>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_USART1_UART_Init+0x58>)
 800068e:	2200      	movs	r2, #0
 8000690:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <MX_USART1_UART_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_USART1_UART_Init+0x58>)
 800069a:	2200      	movs	r2, #0
 800069c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800069e:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <MX_USART1_UART_Init+0x58>)
 80006a0:	0018      	movs	r0, r3
 80006a2:	f001 fe6f 	bl	8002384 <HAL_UART_Init>
 80006a6:	1e03      	subs	r3, r0, #0
 80006a8:	d001      	beq.n	80006ae <MX_USART1_UART_Init+0x52>
		Error_Handler();
 80006aa:	f000 f90b 	bl	80008c4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000280 	.word	0x20000280
 80006b8:	40013800 	.word	0x40013800

080006bc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b089      	sub	sp, #36	; 0x24
 80006c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006c2:	240c      	movs	r4, #12
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	0018      	movs	r0, r3
 80006c8:	2314      	movs	r3, #20
 80006ca:	001a      	movs	r2, r3
 80006cc:	2100      	movs	r1, #0
 80006ce:	f004 fc3d 	bl	8004f4c <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006d2:	4b1c      	ldr	r3, [pc, #112]	; (8000744 <MX_GPIO_Init+0x88>)
 80006d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006d6:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <MX_GPIO_Init+0x88>)
 80006d8:	2104      	movs	r1, #4
 80006da:	430a      	orrs	r2, r1
 80006dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80006de:	4b19      	ldr	r3, [pc, #100]	; (8000744 <MX_GPIO_Init+0x88>)
 80006e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006e2:	2204      	movs	r2, #4
 80006e4:	4013      	ands	r3, r2
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80006ea:	4b16      	ldr	r3, [pc, #88]	; (8000744 <MX_GPIO_Init+0x88>)
 80006ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006ee:	4b15      	ldr	r3, [pc, #84]	; (8000744 <MX_GPIO_Init+0x88>)
 80006f0:	2180      	movs	r1, #128	; 0x80
 80006f2:	430a      	orrs	r2, r1
 80006f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80006f6:	4b13      	ldr	r3, [pc, #76]	; (8000744 <MX_GPIO_Init+0x88>)
 80006f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006fa:	2280      	movs	r2, #128	; 0x80
 80006fc:	4013      	ands	r3, r2
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <MX_GPIO_Init+0x88>)
 8000704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_GPIO_Init+0x88>)
 8000708:	2101      	movs	r1, #1
 800070a:	430a      	orrs	r2, r1
 800070c:	62da      	str	r2, [r3, #44]	; 0x2c
 800070e:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <MX_GPIO_Init+0x88>)
 8000710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000712:	2201      	movs	r2, #1
 8000714:	4013      	ands	r3, r2
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin : BSP_INPUT_Pin */
	GPIO_InitStruct.Pin = BSP_INPUT_Pin;
 800071a:	193b      	adds	r3, r7, r4
 800071c:	2280      	movs	r2, #128	; 0x80
 800071e:	0192      	lsls	r2, r2, #6
 8000720:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000722:	193b      	adds	r3, r7, r4
 8000724:	2200      	movs	r2, #0
 8000726:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	193b      	adds	r3, r7, r4
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(BSP_INPUT_GPIO_Port, &GPIO_InitStruct);
 800072e:	193b      	adds	r3, r7, r4
 8000730:	4a05      	ldr	r2, [pc, #20]	; (8000748 <MX_GPIO_Init+0x8c>)
 8000732:	0019      	movs	r1, r3
 8000734:	0010      	movs	r0, r2
 8000736:	f000 faf9 	bl	8000d2c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	b009      	add	sp, #36	; 0x24
 8000740:	bd90      	pop	{r4, r7, pc}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	40021000 	.word	0x40021000
 8000748:	50000800 	.word	0x50000800

0800074c <StartNormalTask>:
 * @brief  Function implementing the NormalTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartNormalTask */
void StartNormalTask(void const *argument) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		char *str1 = "Entered NormalTask and waiting for semaphore --->\r\n";
 8000754:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <StartNormalTask+0x94>)
 8000756:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(&huart1, (uint8_t*) str1, strlen(str1), 1000);
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	0018      	movs	r0, r3
 800075c:	f7ff fcd4 	bl	8000108 <strlen>
 8000760:	0003      	movs	r3, r0
 8000762:	b29a      	uxth	r2, r3
 8000764:	23fa      	movs	r3, #250	; 0xfa
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	6979      	ldr	r1, [r7, #20]
 800076a:	481e      	ldr	r0, [pc, #120]	; (80007e4 <StartNormalTask+0x98>)
 800076c:	f001 fe5e 	bl	800242c <HAL_UART_Transmit>

		osSemaphoreWait(BinSemHandle, osWaitForever);
 8000770:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <StartNormalTask+0x9c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2201      	movs	r2, #1
 8000776:	4252      	negs	r2, r2
 8000778:	0011      	movs	r1, r2
 800077a:	0018      	movs	r0, r3
 800077c:	f002 fc68 	bl	8003050 <osSemaphoreWait>

		char *str3 = "Semaphore acquired by NormalTask --->\r\n";
 8000780:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <StartNormalTask+0xa0>)
 8000782:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart1, (uint8_t*) str3, strlen(str3), 1000);
 8000784:	693b      	ldr	r3, [r7, #16]
 8000786:	0018      	movs	r0, r3
 8000788:	f7ff fcbe 	bl	8000108 <strlen>
 800078c:	0003      	movs	r3, r0
 800078e:	b29a      	uxth	r2, r3
 8000790:	23fa      	movs	r3, #250	; 0xfa
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	6939      	ldr	r1, [r7, #16]
 8000796:	4813      	ldr	r0, [pc, #76]	; (80007e4 <StartNormalTask+0x98>)
 8000798:	f001 fe48 	bl	800242c <HAL_UART_Transmit>

		while (HAL_GPIO_ReadPin(BSP_INPUT_GPIO_Port, BSP_INPUT_Pin))
 800079c:	46c0      	nop			; (mov r8, r8)
 800079e:	2380      	movs	r3, #128	; 0x80
 80007a0:	019b      	lsls	r3, r3, #6
 80007a2:	4a13      	ldr	r2, [pc, #76]	; (80007f0 <StartNormalTask+0xa4>)
 80007a4:	0019      	movs	r1, r3
 80007a6:	0010      	movs	r0, r2
 80007a8:	f000 fc36 	bl	8001018 <HAL_GPIO_ReadPin>
 80007ac:	1e03      	subs	r3, r0, #0
 80007ae:	d1f6      	bne.n	800079e <StartNormalTask+0x52>
			; //wait till gpio pin goes low

		char *str2 = "Leaving NormalTask and releasing semaphore --->\r\n\n";
 80007b0:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <StartNormalTask+0xa8>)
 80007b2:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart1, (uint8_t*) str2, strlen(str2), 1000);
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	0018      	movs	r0, r3
 80007b8:	f7ff fca6 	bl	8000108 <strlen>
 80007bc:	0003      	movs	r3, r0
 80007be:	b29a      	uxth	r2, r3
 80007c0:	23fa      	movs	r3, #250	; 0xfa
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	68f9      	ldr	r1, [r7, #12]
 80007c6:	4807      	ldr	r0, [pc, #28]	; (80007e4 <StartNormalTask+0x98>)
 80007c8:	f001 fe30 	bl	800242c <HAL_UART_Transmit>

		osSemaphoreRelease(BinSemHandle);
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <StartNormalTask+0x9c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	0018      	movs	r0, r3
 80007d2:	f002 fc87 	bl	80030e4 <osSemaphoreRelease>
		osDelay(5000);
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <StartNormalTask+0xac>)
 80007d8:	0018      	movs	r0, r3
 80007da:	f002 fbf1 	bl	8002fc0 <osDelay>
	for (;;) {
 80007de:	e7b9      	b.n	8000754 <StartNormalTask+0x8>
 80007e0:	08005020 	.word	0x08005020
 80007e4:	20000280 	.word	0x20000280
 80007e8:	20000310 	.word	0x20000310
 80007ec:	08005054 	.word	0x08005054
 80007f0:	50000800 	.word	0x50000800
 80007f4:	0800507c 	.word	0x0800507c
 80007f8:	00001388 	.word	0x00001388

080007fc <StartHighTask>:
 * @brief Function implementing the HighTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartHighTask */
void StartHighTask(void const *argument) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartHighTask */
	/* Infinite loop */
	for (;;) {
		char *str1 = "\r\nEntered HighTask and waiting for semaphore...\r\n";
 8000804:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <StartHighTask+0x88>)
 8000806:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(&huart1, (uint8_t*) str1, strlen(str1), 1000);
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	0018      	movs	r0, r3
 800080c:	f7ff fc7c 	bl	8000108 <strlen>
 8000810:	0003      	movs	r3, r0
 8000812:	b29a      	uxth	r2, r3
 8000814:	23fa      	movs	r3, #250	; 0xfa
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	6979      	ldr	r1, [r7, #20]
 800081a:	481b      	ldr	r0, [pc, #108]	; (8000888 <StartHighTask+0x8c>)
 800081c:	f001 fe06 	bl	800242c <HAL_UART_Transmit>

		osSemaphoreWait(BinSemHandle, osWaitForever);
 8000820:	4b1a      	ldr	r3, [pc, #104]	; (800088c <StartHighTask+0x90>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2201      	movs	r2, #1
 8000826:	4252      	negs	r2, r2
 8000828:	0011      	movs	r1, r2
 800082a:	0018      	movs	r0, r3
 800082c:	f002 fc10 	bl	8003050 <osSemaphoreWait>

		char *str3 = "Semaphore acquired by HighTask...\r\n";
 8000830:	4b17      	ldr	r3, [pc, #92]	; (8000890 <StartHighTask+0x94>)
 8000832:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart1, (uint8_t*) str3, strlen(str3), 1000);
 8000834:	693b      	ldr	r3, [r7, #16]
 8000836:	0018      	movs	r0, r3
 8000838:	f7ff fc66 	bl	8000108 <strlen>
 800083c:	0003      	movs	r3, r0
 800083e:	b29a      	uxth	r2, r3
 8000840:	23fa      	movs	r3, #250	; 0xfa
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	6939      	ldr	r1, [r7, #16]
 8000846:	4810      	ldr	r0, [pc, #64]	; (8000888 <StartHighTask+0x8c>)
 8000848:	f001 fdf0 	bl	800242c <HAL_UART_Transmit>

		char *str2 = "Leaving HighTask and releasing semaphore...\r\n\n";
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <StartHighTask+0x98>)
 800084e:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart1, (uint8_t*) str2, strlen(str2), 1000);
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	0018      	movs	r0, r3
 8000854:	f7ff fc58 	bl	8000108 <strlen>
 8000858:	0003      	movs	r3, r0
 800085a:	b29a      	uxth	r2, r3
 800085c:	23fa      	movs	r3, #250	; 0xfa
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	68f9      	ldr	r1, [r7, #12]
 8000862:	4809      	ldr	r0, [pc, #36]	; (8000888 <StartHighTask+0x8c>)
 8000864:	f001 fde2 	bl	800242c <HAL_UART_Transmit>
		HAL_Delay(1500);
 8000868:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <StartHighTask+0x9c>)
 800086a:	0018      	movs	r0, r3
 800086c:	f000 f98c 	bl	8000b88 <HAL_Delay>
		osSemaphoreRelease(BinSemHandle);
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <StartHighTask+0x90>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	0018      	movs	r0, r3
 8000876:	f002 fc35 	bl	80030e4 <osSemaphoreRelease>
		osDelay(5000);
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <StartHighTask+0xa0>)
 800087c:	0018      	movs	r0, r3
 800087e:	f002 fb9f 	bl	8002fc0 <osDelay>
	for (;;) {
 8000882:	e7bf      	b.n	8000804 <StartHighTask+0x8>
 8000884:	080050b0 	.word	0x080050b0
 8000888:	20000280 	.word	0x20000280
 800088c:	20000310 	.word	0x20000310
 8000890:	080050e4 	.word	0x080050e4
 8000894:	08005108 	.word	0x08005108
 8000898:	000005dc 	.word	0x000005dc
 800089c:	00001388 	.word	0x00001388

080008a0 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a04      	ldr	r2, [pc, #16]	; (80008c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d101      	bne.n	80008b6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80008b2:	f000 f94d 	bl	8000b50 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b002      	add	sp, #8
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	40001000 	.word	0x40001000

080008c4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008cc:	e7fe      	b.n	80008cc <Error_Handler+0x8>
	...

080008d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d4:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <HAL_MspInit+0x34>)
 80008d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008d8:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <HAL_MspInit+0x34>)
 80008da:	2101      	movs	r1, #1
 80008dc:	430a      	orrs	r2, r1
 80008de:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <HAL_MspInit+0x34>)
 80008e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <HAL_MspInit+0x34>)
 80008e6:	2180      	movs	r1, #128	; 0x80
 80008e8:	0549      	lsls	r1, r1, #21
 80008ea:	430a      	orrs	r2, r1
 80008ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80008ee:	2302      	movs	r3, #2
 80008f0:	425b      	negs	r3, r3
 80008f2:	2200      	movs	r2, #0
 80008f4:	2103      	movs	r1, #3
 80008f6:	0018      	movs	r0, r3
 80008f8:	f000 f9f2 	bl	8000ce0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fc:	46c0      	nop			; (mov r8, r8)
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	40021000 	.word	0x40021000

08000908 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b089      	sub	sp, #36	; 0x24
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	240c      	movs	r4, #12
 8000912:	193b      	adds	r3, r7, r4
 8000914:	0018      	movs	r0, r3
 8000916:	2314      	movs	r3, #20
 8000918:	001a      	movs	r2, r3
 800091a:	2100      	movs	r1, #0
 800091c:	f004 fb16 	bl	8004f4c <memset>
  if(huart->Instance==USART1)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a18      	ldr	r2, [pc, #96]	; (8000988 <HAL_UART_MspInit+0x80>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d12a      	bne.n	8000980 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800092a:	4b18      	ldr	r3, [pc, #96]	; (800098c <HAL_UART_MspInit+0x84>)
 800092c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800092e:	4b17      	ldr	r3, [pc, #92]	; (800098c <HAL_UART_MspInit+0x84>)
 8000930:	2180      	movs	r1, #128	; 0x80
 8000932:	01c9      	lsls	r1, r1, #7
 8000934:	430a      	orrs	r2, r1
 8000936:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <HAL_UART_MspInit+0x84>)
 800093a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <HAL_UART_MspInit+0x84>)
 800093e:	2101      	movs	r1, #1
 8000940:	430a      	orrs	r2, r1
 8000942:	62da      	str	r2, [r3, #44]	; 0x2c
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <HAL_UART_MspInit+0x84>)
 8000946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000948:	2201      	movs	r2, #1
 800094a:	4013      	ands	r3, r2
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000950:	193b      	adds	r3, r7, r4
 8000952:	22c0      	movs	r2, #192	; 0xc0
 8000954:	00d2      	lsls	r2, r2, #3
 8000956:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	0021      	movs	r1, r4
 800095a:	187b      	adds	r3, r7, r1
 800095c:	2202      	movs	r2, #2
 800095e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2203      	movs	r2, #3
 800096a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800096c:	187b      	adds	r3, r7, r1
 800096e:	2204      	movs	r2, #4
 8000970:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000972:	187a      	adds	r2, r7, r1
 8000974:	23a0      	movs	r3, #160	; 0xa0
 8000976:	05db      	lsls	r3, r3, #23
 8000978:	0011      	movs	r1, r2
 800097a:	0018      	movs	r0, r3
 800097c:	f000 f9d6 	bl	8000d2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000980:	46c0      	nop			; (mov r8, r8)
 8000982:	46bd      	mov	sp, r7
 8000984:	b009      	add	sp, #36	; 0x24
 8000986:	bd90      	pop	{r4, r7, pc}
 8000988:	40013800 	.word	0x40013800
 800098c:	40021000 	.word	0x40021000

08000990 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000990:	b5b0      	push	{r4, r5, r7, lr}
 8000992:	b08c      	sub	sp, #48	; 0x30
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2200      	movs	r2, #0
 800099c:	0019      	movs	r1, r3
 800099e:	2011      	movs	r0, #17
 80009a0:	f000 f99e 	bl	8000ce0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009a4:	2011      	movs	r0, #17
 80009a6:	f000 f9b0 	bl	8000d0a <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009aa:	4b32      	ldr	r3, [pc, #200]	; (8000a74 <HAL_InitTick+0xe4>)
 80009ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009ae:	4b31      	ldr	r3, [pc, #196]	; (8000a74 <HAL_InitTick+0xe4>)
 80009b0:	2110      	movs	r1, #16
 80009b2:	430a      	orrs	r2, r1
 80009b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009b6:	2308      	movs	r3, #8
 80009b8:	18fa      	adds	r2, r7, r3
 80009ba:	240c      	movs	r4, #12
 80009bc:	193b      	adds	r3, r7, r4
 80009be:	0011      	movs	r1, r2
 80009c0:	0018      	movs	r0, r3
 80009c2:	f001 f92f 	bl	8001c24 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	68db      	ldr	r3, [r3, #12]
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d104      	bne.n	80009dc <HAL_InitTick+0x4c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009d2:	f001 f8fb 	bl	8001bcc <HAL_RCC_GetPCLK1Freq>
 80009d6:	0003      	movs	r3, r0
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009da:	e004      	b.n	80009e6 <HAL_InitTick+0x56>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009dc:	f001 f8f6 	bl	8001bcc <HAL_RCC_GetPCLK1Freq>
 80009e0:	0003      	movs	r3, r0
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009e8:	4923      	ldr	r1, [pc, #140]	; (8000a78 <HAL_InitTick+0xe8>)
 80009ea:	0018      	movs	r0, r3
 80009ec:	f7ff fb94 	bl	8000118 <__udivsi3>
 80009f0:	0003      	movs	r3, r0
 80009f2:	3b01      	subs	r3, #1
 80009f4:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009f6:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <HAL_InitTick+0xec>)
 80009f8:	4a21      	ldr	r2, [pc, #132]	; (8000a80 <HAL_InitTick+0xf0>)
 80009fa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009fc:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <HAL_InitTick+0xec>)
 80009fe:	4a21      	ldr	r2, [pc, #132]	; (8000a84 <HAL_InitTick+0xf4>)
 8000a00:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a02:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <HAL_InitTick+0xec>)
 8000a04:	6a3a      	ldr	r2, [r7, #32]
 8000a06:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8000a08:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <HAL_InitTick+0xec>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0e:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <HAL_InitTick+0xec>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000a14:	252b      	movs	r5, #43	; 0x2b
 8000a16:	197c      	adds	r4, r7, r5
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <HAL_InitTick+0xec>)
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f001 fac2 	bl	8001fa4 <HAL_TIM_Base_Init>
 8000a20:	0003      	movs	r3, r0
 8000a22:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000a24:	197b      	adds	r3, r7, r5
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d11b      	bne.n	8000a64 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a2c:	197c      	adds	r4, r7, r5
 8000a2e:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <HAL_InitTick+0xec>)
 8000a30:	0018      	movs	r0, r3
 8000a32:	f001 faff 	bl	8002034 <HAL_TIM_Base_Start_IT>
 8000a36:	0003      	movs	r3, r0
 8000a38:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8000a3a:	197b      	adds	r3, r7, r5
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d110      	bne.n	8000a64 <HAL_InitTick+0xd4>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b03      	cmp	r3, #3
 8000a46:	d809      	bhi.n	8000a5c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	0019      	movs	r1, r3
 8000a4e:	2011      	movs	r0, #17
 8000a50:	f000 f946 	bl	8000ce0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <HAL_InitTick+0xf8>)
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	e003      	b.n	8000a64 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000a5c:	232b      	movs	r3, #43	; 0x2b
 8000a5e:	18fb      	adds	r3, r7, r3
 8000a60:	2201      	movs	r2, #1
 8000a62:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000a64:	232b      	movs	r3, #43	; 0x2b
 8000a66:	18fb      	adds	r3, r7, r3
 8000a68:	781b      	ldrb	r3, [r3, #0]
}
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b00c      	add	sp, #48	; 0x30
 8000a70:	bdb0      	pop	{r4, r5, r7, pc}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	40021000 	.word	0x40021000
 8000a78:	000f4240 	.word	0x000f4240
 8000a7c:	20000314 	.word	0x20000314
 8000a80:	40001000 	.word	0x40001000
 8000a84:	000003e7 	.word	0x000003e7
 8000a88:	20000004 	.word	0x20000004

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <NMI_Handler+0x4>

08000a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <HardFault_Handler+0x4>

08000a98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a9c:	4b03      	ldr	r3, [pc, #12]	; (8000aac <TIM6_DAC_IRQHandler+0x14>)
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f001 fb14 	bl	80020cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000aa4:	46c0      	nop			; (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	20000314 	.word	0x20000314

08000ab0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000abc:	480d      	ldr	r0, [pc, #52]	; (8000af4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000abe:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ac0:	f7ff fff6 	bl	8000ab0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac4:	480c      	ldr	r0, [pc, #48]	; (8000af8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ac6:	490d      	ldr	r1, [pc, #52]	; (8000afc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ac8:	4a0d      	ldr	r2, [pc, #52]	; (8000b00 <LoopForever+0xe>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000acc:	e002      	b.n	8000ad4 <LoopCopyDataInit>

08000ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad2:	3304      	adds	r3, #4

08000ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad8:	d3f9      	bcc.n	8000ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ada:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000adc:	4c0a      	ldr	r4, [pc, #40]	; (8000b08 <LoopForever+0x16>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae0:	e001      	b.n	8000ae6 <LoopFillZerobss>

08000ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae4:	3204      	adds	r2, #4

08000ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae8:	d3fb      	bcc.n	8000ae2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aea:	f004 fa37 	bl	8004f5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aee:	f7ff fcfb 	bl	80004e8 <main>

08000af2 <LoopForever>:

LoopForever:
    b LoopForever
 8000af2:	e7fe      	b.n	8000af2 <LoopForever>
  ldr   r0, =_estack
 8000af4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000afc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b00:	080051bc 	.word	0x080051bc
  ldr r2, =_sbss
 8000b04:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b08:	2000109c 	.word	0x2000109c

08000b0c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b0c:	e7fe      	b.n	8000b0c <ADC1_COMP_IRQHandler>
	...

08000b10 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b16:	1dfb      	adds	r3, r7, #7
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <HAL_Init+0x3c>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <HAL_Init+0x3c>)
 8000b22:	2140      	movs	r1, #64	; 0x40
 8000b24:	430a      	orrs	r2, r1
 8000b26:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b28:	2003      	movs	r0, #3
 8000b2a:	f7ff ff31 	bl	8000990 <HAL_InitTick>
 8000b2e:	1e03      	subs	r3, r0, #0
 8000b30:	d003      	beq.n	8000b3a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000b32:	1dfb      	adds	r3, r7, #7
 8000b34:	2201      	movs	r2, #1
 8000b36:	701a      	strb	r2, [r3, #0]
 8000b38:	e001      	b.n	8000b3e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b3a:	f7ff fec9 	bl	80008d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b3e:	1dfb      	adds	r3, r7, #7
 8000b40:	781b      	ldrb	r3, [r3, #0]
}
 8000b42:	0018      	movs	r0, r3
 8000b44:	46bd      	mov	sp, r7
 8000b46:	b002      	add	sp, #8
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	40022000 	.word	0x40022000

08000b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <HAL_IncTick+0x1c>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	001a      	movs	r2, r3
 8000b5a:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <HAL_IncTick+0x20>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	18d2      	adds	r2, r2, r3
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <HAL_IncTick+0x20>)
 8000b62:	601a      	str	r2, [r3, #0]
}
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	20000354 	.word	0x20000354

08000b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  return uwTick;
 8000b78:	4b02      	ldr	r3, [pc, #8]	; (8000b84 <HAL_GetTick+0x10>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
}
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	20000354 	.word	0x20000354

08000b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b90:	f7ff fff0 	bl	8000b74 <HAL_GetTick>
 8000b94:	0003      	movs	r3, r0
 8000b96:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	d005      	beq.n	8000bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <HAL_Delay+0x44>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	001a      	movs	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	189b      	adds	r3, r3, r2
 8000bac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	f7ff ffe0 	bl	8000b74 <HAL_GetTick>
 8000bb4:	0002      	movs	r2, r0
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d8f7      	bhi.n	8000bb0 <HAL_Delay+0x28>
  {
  }
}
 8000bc0:	46c0      	nop			; (mov r8, r8)
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b004      	add	sp, #16
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	20000008 	.word	0x20000008

08000bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	0002      	movs	r2, r0
 8000bd8:	1dfb      	adds	r3, r7, #7
 8000bda:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bdc:	1dfb      	adds	r3, r7, #7
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b7f      	cmp	r3, #127	; 0x7f
 8000be2:	d809      	bhi.n	8000bf8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be4:	1dfb      	adds	r3, r7, #7
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	001a      	movs	r2, r3
 8000bea:	231f      	movs	r3, #31
 8000bec:	401a      	ands	r2, r3
 8000bee:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <__NVIC_EnableIRQ+0x30>)
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	4091      	lsls	r1, r2
 8000bf4:	000a      	movs	r2, r1
 8000bf6:	601a      	str	r2, [r3, #0]
  }
}
 8000bf8:	46c0      	nop			; (mov r8, r8)
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	b002      	add	sp, #8
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	e000e100 	.word	0xe000e100

08000c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	0002      	movs	r2, r0
 8000c0c:	6039      	str	r1, [r7, #0]
 8000c0e:	1dfb      	adds	r3, r7, #7
 8000c10:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c12:	1dfb      	adds	r3, r7, #7
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b7f      	cmp	r3, #127	; 0x7f
 8000c18:	d828      	bhi.n	8000c6c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c1a:	4a2f      	ldr	r2, [pc, #188]	; (8000cd8 <__NVIC_SetPriority+0xd4>)
 8000c1c:	1dfb      	adds	r3, r7, #7
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	b25b      	sxtb	r3, r3
 8000c22:	089b      	lsrs	r3, r3, #2
 8000c24:	33c0      	adds	r3, #192	; 0xc0
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	589b      	ldr	r3, [r3, r2]
 8000c2a:	1dfa      	adds	r2, r7, #7
 8000c2c:	7812      	ldrb	r2, [r2, #0]
 8000c2e:	0011      	movs	r1, r2
 8000c30:	2203      	movs	r2, #3
 8000c32:	400a      	ands	r2, r1
 8000c34:	00d2      	lsls	r2, r2, #3
 8000c36:	21ff      	movs	r1, #255	; 0xff
 8000c38:	4091      	lsls	r1, r2
 8000c3a:	000a      	movs	r2, r1
 8000c3c:	43d2      	mvns	r2, r2
 8000c3e:	401a      	ands	r2, r3
 8000c40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	019b      	lsls	r3, r3, #6
 8000c46:	22ff      	movs	r2, #255	; 0xff
 8000c48:	401a      	ands	r2, r3
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	0018      	movs	r0, r3
 8000c50:	2303      	movs	r3, #3
 8000c52:	4003      	ands	r3, r0
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c58:	481f      	ldr	r0, [pc, #124]	; (8000cd8 <__NVIC_SetPriority+0xd4>)
 8000c5a:	1dfb      	adds	r3, r7, #7
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	b25b      	sxtb	r3, r3
 8000c60:	089b      	lsrs	r3, r3, #2
 8000c62:	430a      	orrs	r2, r1
 8000c64:	33c0      	adds	r3, #192	; 0xc0
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c6a:	e031      	b.n	8000cd0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c6c:	4a1b      	ldr	r2, [pc, #108]	; (8000cdc <__NVIC_SetPriority+0xd8>)
 8000c6e:	1dfb      	adds	r3, r7, #7
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	0019      	movs	r1, r3
 8000c74:	230f      	movs	r3, #15
 8000c76:	400b      	ands	r3, r1
 8000c78:	3b08      	subs	r3, #8
 8000c7a:	089b      	lsrs	r3, r3, #2
 8000c7c:	3306      	adds	r3, #6
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	18d3      	adds	r3, r2, r3
 8000c82:	3304      	adds	r3, #4
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	1dfa      	adds	r2, r7, #7
 8000c88:	7812      	ldrb	r2, [r2, #0]
 8000c8a:	0011      	movs	r1, r2
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	400a      	ands	r2, r1
 8000c90:	00d2      	lsls	r2, r2, #3
 8000c92:	21ff      	movs	r1, #255	; 0xff
 8000c94:	4091      	lsls	r1, r2
 8000c96:	000a      	movs	r2, r1
 8000c98:	43d2      	mvns	r2, r2
 8000c9a:	401a      	ands	r2, r3
 8000c9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	019b      	lsls	r3, r3, #6
 8000ca2:	22ff      	movs	r2, #255	; 0xff
 8000ca4:	401a      	ands	r2, r3
 8000ca6:	1dfb      	adds	r3, r7, #7
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	0018      	movs	r0, r3
 8000cac:	2303      	movs	r3, #3
 8000cae:	4003      	ands	r3, r0
 8000cb0:	00db      	lsls	r3, r3, #3
 8000cb2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cb4:	4809      	ldr	r0, [pc, #36]	; (8000cdc <__NVIC_SetPriority+0xd8>)
 8000cb6:	1dfb      	adds	r3, r7, #7
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	001c      	movs	r4, r3
 8000cbc:	230f      	movs	r3, #15
 8000cbe:	4023      	ands	r3, r4
 8000cc0:	3b08      	subs	r3, #8
 8000cc2:	089b      	lsrs	r3, r3, #2
 8000cc4:	430a      	orrs	r2, r1
 8000cc6:	3306      	adds	r3, #6
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	18c3      	adds	r3, r0, r3
 8000ccc:	3304      	adds	r3, #4
 8000cce:	601a      	str	r2, [r3, #0]
}
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b003      	add	sp, #12
 8000cd6:	bd90      	pop	{r4, r7, pc}
 8000cd8:	e000e100 	.word	0xe000e100
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
 8000cea:	210f      	movs	r1, #15
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	1c02      	adds	r2, r0, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	187b      	adds	r3, r7, r1
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	b25b      	sxtb	r3, r3
 8000cfa:	0011      	movs	r1, r2
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f7ff ff81 	bl	8000c04 <__NVIC_SetPriority>
}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b004      	add	sp, #16
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	0002      	movs	r2, r0
 8000d12:	1dfb      	adds	r3, r7, #7
 8000d14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d16:	1dfb      	adds	r3, r7, #7
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	b25b      	sxtb	r3, r3
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f7ff ff57 	bl	8000bd0 <__NVIC_EnableIRQ>
}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b002      	add	sp, #8
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d42:	e14f      	b.n	8000fe4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2101      	movs	r1, #1
 8000d4a:	697a      	ldr	r2, [r7, #20]
 8000d4c:	4091      	lsls	r1, r2
 8000d4e:	000a      	movs	r2, r1
 8000d50:	4013      	ands	r3, r2
 8000d52:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d100      	bne.n	8000d5c <HAL_GPIO_Init+0x30>
 8000d5a:	e140      	b.n	8000fde <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	2203      	movs	r2, #3
 8000d62:	4013      	ands	r3, r2
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d005      	beq.n	8000d74 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d130      	bne.n	8000dd6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	2203      	movs	r2, #3
 8000d80:	409a      	lsls	r2, r3
 8000d82:	0013      	movs	r3, r2
 8000d84:	43da      	mvns	r2, r3
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	68da      	ldr	r2, [r3, #12]
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	409a      	lsls	r2, r3
 8000d96:	0013      	movs	r3, r2
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000daa:	2201      	movs	r2, #1
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	409a      	lsls	r2, r3
 8000db0:	0013      	movs	r3, r2
 8000db2:	43da      	mvns	r2, r3
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	4013      	ands	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	091b      	lsrs	r3, r3, #4
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	409a      	lsls	r2, r3
 8000dc8:	0013      	movs	r3, r2
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	2203      	movs	r2, #3
 8000ddc:	4013      	ands	r3, r2
 8000dde:	2b03      	cmp	r3, #3
 8000de0:	d017      	beq.n	8000e12 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	2203      	movs	r2, #3
 8000dee:	409a      	lsls	r2, r3
 8000df0:	0013      	movs	r3, r2
 8000df2:	43da      	mvns	r2, r3
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	689a      	ldr	r2, [r3, #8]
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	409a      	lsls	r2, r3
 8000e04:	0013      	movs	r3, r2
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	2203      	movs	r2, #3
 8000e18:	4013      	ands	r3, r2
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d123      	bne.n	8000e66 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	08da      	lsrs	r2, r3, #3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	3208      	adds	r2, #8
 8000e26:	0092      	lsls	r2, r2, #2
 8000e28:	58d3      	ldr	r3, [r2, r3]
 8000e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	2207      	movs	r2, #7
 8000e30:	4013      	ands	r3, r2
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	220f      	movs	r2, #15
 8000e36:	409a      	lsls	r2, r3
 8000e38:	0013      	movs	r3, r2
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	691a      	ldr	r2, [r3, #16]
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	2107      	movs	r1, #7
 8000e4a:	400b      	ands	r3, r1
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	409a      	lsls	r2, r3
 8000e50:	0013      	movs	r3, r2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	08da      	lsrs	r2, r3, #3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3208      	adds	r2, #8
 8000e60:	0092      	lsls	r2, r2, #2
 8000e62:	6939      	ldr	r1, [r7, #16]
 8000e64:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	2203      	movs	r2, #3
 8000e72:	409a      	lsls	r2, r3
 8000e74:	0013      	movs	r3, r2
 8000e76:	43da      	mvns	r2, r3
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	2203      	movs	r2, #3
 8000e84:	401a      	ands	r2, r3
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	409a      	lsls	r2, r3
 8000e8c:	0013      	movs	r3, r2
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685a      	ldr	r2, [r3, #4]
 8000e9e:	23c0      	movs	r3, #192	; 0xc0
 8000ea0:	029b      	lsls	r3, r3, #10
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	d100      	bne.n	8000ea8 <HAL_GPIO_Init+0x17c>
 8000ea6:	e09a      	b.n	8000fde <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea8:	4b54      	ldr	r3, [pc, #336]	; (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000eac:	4b53      	ldr	r3, [pc, #332]	; (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000eae:	2101      	movs	r1, #1
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eb4:	4a52      	ldr	r2, [pc, #328]	; (8001000 <HAL_GPIO_Init+0x2d4>)
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	089b      	lsrs	r3, r3, #2
 8000eba:	3302      	adds	r3, #2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	589b      	ldr	r3, [r3, r2]
 8000ec0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	220f      	movs	r2, #15
 8000ecc:	409a      	lsls	r2, r3
 8000ece:	0013      	movs	r3, r2
 8000ed0:	43da      	mvns	r2, r3
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	23a0      	movs	r3, #160	; 0xa0
 8000edc:	05db      	lsls	r3, r3, #23
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d019      	beq.n	8000f16 <HAL_GPIO_Init+0x1ea>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a47      	ldr	r2, [pc, #284]	; (8001004 <HAL_GPIO_Init+0x2d8>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d013      	beq.n	8000f12 <HAL_GPIO_Init+0x1e6>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a46      	ldr	r2, [pc, #280]	; (8001008 <HAL_GPIO_Init+0x2dc>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d00d      	beq.n	8000f0e <HAL_GPIO_Init+0x1e2>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a45      	ldr	r2, [pc, #276]	; (800100c <HAL_GPIO_Init+0x2e0>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d007      	beq.n	8000f0a <HAL_GPIO_Init+0x1de>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a44      	ldr	r2, [pc, #272]	; (8001010 <HAL_GPIO_Init+0x2e4>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d101      	bne.n	8000f06 <HAL_GPIO_Init+0x1da>
 8000f02:	2305      	movs	r3, #5
 8000f04:	e008      	b.n	8000f18 <HAL_GPIO_Init+0x1ec>
 8000f06:	2306      	movs	r3, #6
 8000f08:	e006      	b.n	8000f18 <HAL_GPIO_Init+0x1ec>
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e004      	b.n	8000f18 <HAL_GPIO_Init+0x1ec>
 8000f0e:	2302      	movs	r3, #2
 8000f10:	e002      	b.n	8000f18 <HAL_GPIO_Init+0x1ec>
 8000f12:	2301      	movs	r3, #1
 8000f14:	e000      	b.n	8000f18 <HAL_GPIO_Init+0x1ec>
 8000f16:	2300      	movs	r3, #0
 8000f18:	697a      	ldr	r2, [r7, #20]
 8000f1a:	2103      	movs	r1, #3
 8000f1c:	400a      	ands	r2, r1
 8000f1e:	0092      	lsls	r2, r2, #2
 8000f20:	4093      	lsls	r3, r2
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f28:	4935      	ldr	r1, [pc, #212]	; (8001000 <HAL_GPIO_Init+0x2d4>)
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	089b      	lsrs	r3, r3, #2
 8000f2e:	3302      	adds	r3, #2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f36:	4b37      	ldr	r3, [pc, #220]	; (8001014 <HAL_GPIO_Init+0x2e8>)
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685a      	ldr	r2, [r3, #4]
 8000f4a:	2380      	movs	r3, #128	; 0x80
 8000f4c:	035b      	lsls	r3, r3, #13
 8000f4e:	4013      	ands	r3, r2
 8000f50:	d003      	beq.n	8000f5a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f5a:	4b2e      	ldr	r3, [pc, #184]	; (8001014 <HAL_GPIO_Init+0x2e8>)
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f60:	4b2c      	ldr	r3, [pc, #176]	; (8001014 <HAL_GPIO_Init+0x2e8>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	43da      	mvns	r2, r3
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685a      	ldr	r2, [r3, #4]
 8000f74:	2380      	movs	r3, #128	; 0x80
 8000f76:	039b      	lsls	r3, r3, #14
 8000f78:	4013      	ands	r3, r2
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f84:	4b23      	ldr	r3, [pc, #140]	; (8001014 <HAL_GPIO_Init+0x2e8>)
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000f8a:	4b22      	ldr	r3, [pc, #136]	; (8001014 <HAL_GPIO_Init+0x2e8>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	43da      	mvns	r2, r3
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685a      	ldr	r2, [r3, #4]
 8000f9e:	2380      	movs	r3, #128	; 0x80
 8000fa0:	029b      	lsls	r3, r3, #10
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fae:	4b19      	ldr	r3, [pc, #100]	; (8001014 <HAL_GPIO_Init+0x2e8>)
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fb4:	4b17      	ldr	r3, [pc, #92]	; (8001014 <HAL_GPIO_Init+0x2e8>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	43da      	mvns	r2, r3
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685a      	ldr	r2, [r3, #4]
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	025b      	lsls	r3, r3, #9
 8000fcc:	4013      	ands	r3, r2
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <HAL_GPIO_Init+0x2e8>)
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	40da      	lsrs	r2, r3
 8000fec:	1e13      	subs	r3, r2, #0
 8000fee:	d000      	beq.n	8000ff2 <HAL_GPIO_Init+0x2c6>
 8000ff0:	e6a8      	b.n	8000d44 <HAL_GPIO_Init+0x18>
  }
}
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	46c0      	nop			; (mov r8, r8)
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	b006      	add	sp, #24
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40021000 	.word	0x40021000
 8001000:	40010000 	.word	0x40010000
 8001004:	50000400 	.word	0x50000400
 8001008:	50000800 	.word	0x50000800
 800100c:	50000c00 	.word	0x50000c00
 8001010:	50001c00 	.word	0x50001c00
 8001014:	40010400 	.word	0x40010400

08001018 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	000a      	movs	r2, r1
 8001022:	1cbb      	adds	r3, r7, #2
 8001024:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	1cba      	adds	r2, r7, #2
 800102c:	8812      	ldrh	r2, [r2, #0]
 800102e:	4013      	ands	r3, r2
 8001030:	d004      	beq.n	800103c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001032:	230f      	movs	r3, #15
 8001034:	18fb      	adds	r3, r7, r3
 8001036:	2201      	movs	r2, #1
 8001038:	701a      	strb	r2, [r3, #0]
 800103a:	e003      	b.n	8001044 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800103c:	230f      	movs	r3, #15
 800103e:	18fb      	adds	r3, r7, r3
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001044:	230f      	movs	r3, #15
 8001046:	18fb      	adds	r3, r7, r3
 8001048:	781b      	ldrb	r3, [r3, #0]
}
 800104a:	0018      	movs	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	b004      	add	sp, #16
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001054:	b5b0      	push	{r4, r5, r7, lr}
 8001056:	b08a      	sub	sp, #40	; 0x28
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d102      	bne.n	8001068 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	f000 fbaf 	bl	80017c6 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001068:	4bcf      	ldr	r3, [pc, #828]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	220c      	movs	r2, #12
 800106e:	4013      	ands	r3, r2
 8001070:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001072:	4bcd      	ldr	r3, [pc, #820]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 8001074:	68da      	ldr	r2, [r3, #12]
 8001076:	2380      	movs	r3, #128	; 0x80
 8001078:	025b      	lsls	r3, r3, #9
 800107a:	4013      	ands	r3, r2
 800107c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2201      	movs	r2, #1
 8001084:	4013      	ands	r3, r2
 8001086:	d100      	bne.n	800108a <HAL_RCC_OscConfig+0x36>
 8001088:	e07e      	b.n	8001188 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800108a:	6a3b      	ldr	r3, [r7, #32]
 800108c:	2b08      	cmp	r3, #8
 800108e:	d007      	beq.n	80010a0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001090:	6a3b      	ldr	r3, [r7, #32]
 8001092:	2b0c      	cmp	r3, #12
 8001094:	d112      	bne.n	80010bc <HAL_RCC_OscConfig+0x68>
 8001096:	69fa      	ldr	r2, [r7, #28]
 8001098:	2380      	movs	r3, #128	; 0x80
 800109a:	025b      	lsls	r3, r3, #9
 800109c:	429a      	cmp	r2, r3
 800109e:	d10d      	bne.n	80010bc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a0:	4bc1      	ldr	r3, [pc, #772]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	2380      	movs	r3, #128	; 0x80
 80010a6:	029b      	lsls	r3, r3, #10
 80010a8:	4013      	ands	r3, r2
 80010aa:	d100      	bne.n	80010ae <HAL_RCC_OscConfig+0x5a>
 80010ac:	e06b      	b.n	8001186 <HAL_RCC_OscConfig+0x132>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d167      	bne.n	8001186 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	f000 fb85 	bl	80017c6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685a      	ldr	r2, [r3, #4]
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	025b      	lsls	r3, r3, #9
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d107      	bne.n	80010d8 <HAL_RCC_OscConfig+0x84>
 80010c8:	4bb7      	ldr	r3, [pc, #732]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4bb6      	ldr	r3, [pc, #728]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 80010ce:	2180      	movs	r1, #128	; 0x80
 80010d0:	0249      	lsls	r1, r1, #9
 80010d2:	430a      	orrs	r2, r1
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	e027      	b.n	8001128 <HAL_RCC_OscConfig+0xd4>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	23a0      	movs	r3, #160	; 0xa0
 80010de:	02db      	lsls	r3, r3, #11
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d10e      	bne.n	8001102 <HAL_RCC_OscConfig+0xae>
 80010e4:	4bb0      	ldr	r3, [pc, #704]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4baf      	ldr	r3, [pc, #700]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 80010ea:	2180      	movs	r1, #128	; 0x80
 80010ec:	02c9      	lsls	r1, r1, #11
 80010ee:	430a      	orrs	r2, r1
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	4bad      	ldr	r3, [pc, #692]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	4bac      	ldr	r3, [pc, #688]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 80010f8:	2180      	movs	r1, #128	; 0x80
 80010fa:	0249      	lsls	r1, r1, #9
 80010fc:	430a      	orrs	r2, r1
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	e012      	b.n	8001128 <HAL_RCC_OscConfig+0xd4>
 8001102:	4ba9      	ldr	r3, [pc, #676]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	4ba8      	ldr	r3, [pc, #672]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 8001108:	49a8      	ldr	r1, [pc, #672]	; (80013ac <HAL_RCC_OscConfig+0x358>)
 800110a:	400a      	ands	r2, r1
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	4ba6      	ldr	r3, [pc, #664]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	2380      	movs	r3, #128	; 0x80
 8001114:	025b      	lsls	r3, r3, #9
 8001116:	4013      	ands	r3, r2
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	4ba2      	ldr	r3, [pc, #648]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4ba1      	ldr	r3, [pc, #644]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 8001122:	49a3      	ldr	r1, [pc, #652]	; (80013b0 <HAL_RCC_OscConfig+0x35c>)
 8001124:	400a      	ands	r2, r1
 8001126:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d015      	beq.n	800115c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001130:	f7ff fd20 	bl	8000b74 <HAL_GetTick>
 8001134:	0003      	movs	r3, r0
 8001136:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001138:	e009      	b.n	800114e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800113a:	f7ff fd1b 	bl	8000b74 <HAL_GetTick>
 800113e:	0002      	movs	r2, r0
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b64      	cmp	r3, #100	; 0x64
 8001146:	d902      	bls.n	800114e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	f000 fb3c 	bl	80017c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800114e:	4b96      	ldr	r3, [pc, #600]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	029b      	lsls	r3, r3, #10
 8001156:	4013      	ands	r3, r2
 8001158:	d0ef      	beq.n	800113a <HAL_RCC_OscConfig+0xe6>
 800115a:	e015      	b.n	8001188 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115c:	f7ff fd0a 	bl	8000b74 <HAL_GetTick>
 8001160:	0003      	movs	r3, r0
 8001162:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001164:	e008      	b.n	8001178 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001166:	f7ff fd05 	bl	8000b74 <HAL_GetTick>
 800116a:	0002      	movs	r2, r0
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	2b64      	cmp	r3, #100	; 0x64
 8001172:	d901      	bls.n	8001178 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001174:	2303      	movs	r3, #3
 8001176:	e326      	b.n	80017c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001178:	4b8b      	ldr	r3, [pc, #556]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	2380      	movs	r3, #128	; 0x80
 800117e:	029b      	lsls	r3, r3, #10
 8001180:	4013      	ands	r3, r2
 8001182:	d1f0      	bne.n	8001166 <HAL_RCC_OscConfig+0x112>
 8001184:	e000      	b.n	8001188 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001186:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2202      	movs	r2, #2
 800118e:	4013      	ands	r3, r2
 8001190:	d100      	bne.n	8001194 <HAL_RCC_OscConfig+0x140>
 8001192:	e08b      	b.n	80012ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800119a:	6a3b      	ldr	r3, [r7, #32]
 800119c:	2b04      	cmp	r3, #4
 800119e:	d005      	beq.n	80011ac <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80011a0:	6a3b      	ldr	r3, [r7, #32]
 80011a2:	2b0c      	cmp	r3, #12
 80011a4:	d13e      	bne.n	8001224 <HAL_RCC_OscConfig+0x1d0>
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d13b      	bne.n	8001224 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80011ac:	4b7e      	ldr	r3, [pc, #504]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2204      	movs	r2, #4
 80011b2:	4013      	ands	r3, r2
 80011b4:	d004      	beq.n	80011c0 <HAL_RCC_OscConfig+0x16c>
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d101      	bne.n	80011c0 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e302      	b.n	80017c6 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c0:	4b79      	ldr	r3, [pc, #484]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	4a7b      	ldr	r2, [pc, #492]	; (80013b4 <HAL_RCC_OscConfig+0x360>)
 80011c6:	4013      	ands	r3, r2
 80011c8:	0019      	movs	r1, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	021a      	lsls	r2, r3, #8
 80011d0:	4b75      	ldr	r3, [pc, #468]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 80011d2:	430a      	orrs	r2, r1
 80011d4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80011d6:	4b74      	ldr	r3, [pc, #464]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2209      	movs	r2, #9
 80011dc:	4393      	bics	r3, r2
 80011de:	0019      	movs	r1, r3
 80011e0:	4b71      	ldr	r3, [pc, #452]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	430a      	orrs	r2, r1
 80011e6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011e8:	f000 fc40 	bl	8001a6c <HAL_RCC_GetSysClockFreq>
 80011ec:	0001      	movs	r1, r0
 80011ee:	4b6e      	ldr	r3, [pc, #440]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	091b      	lsrs	r3, r3, #4
 80011f4:	220f      	movs	r2, #15
 80011f6:	4013      	ands	r3, r2
 80011f8:	4a6f      	ldr	r2, [pc, #444]	; (80013b8 <HAL_RCC_OscConfig+0x364>)
 80011fa:	5cd3      	ldrb	r3, [r2, r3]
 80011fc:	000a      	movs	r2, r1
 80011fe:	40da      	lsrs	r2, r3
 8001200:	4b6e      	ldr	r3, [pc, #440]	; (80013bc <HAL_RCC_OscConfig+0x368>)
 8001202:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001204:	4b6e      	ldr	r3, [pc, #440]	; (80013c0 <HAL_RCC_OscConfig+0x36c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2513      	movs	r5, #19
 800120a:	197c      	adds	r4, r7, r5
 800120c:	0018      	movs	r0, r3
 800120e:	f7ff fbbf 	bl	8000990 <HAL_InitTick>
 8001212:	0003      	movs	r3, r0
 8001214:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001216:	197b      	adds	r3, r7, r5
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d046      	beq.n	80012ac <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800121e:	197b      	adds	r3, r7, r5
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	e2d0      	b.n	80017c6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d027      	beq.n	800127a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800122a:	4b5f      	ldr	r3, [pc, #380]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2209      	movs	r2, #9
 8001230:	4393      	bics	r3, r2
 8001232:	0019      	movs	r1, r3
 8001234:	4b5c      	ldr	r3, [pc, #368]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	430a      	orrs	r2, r1
 800123a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123c:	f7ff fc9a 	bl	8000b74 <HAL_GetTick>
 8001240:	0003      	movs	r3, r0
 8001242:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001246:	f7ff fc95 	bl	8000b74 <HAL_GetTick>
 800124a:	0002      	movs	r2, r0
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e2b6      	b.n	80017c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001258:	4b53      	ldr	r3, [pc, #332]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2204      	movs	r2, #4
 800125e:	4013      	ands	r3, r2
 8001260:	d0f1      	beq.n	8001246 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001262:	4b51      	ldr	r3, [pc, #324]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	4a53      	ldr	r2, [pc, #332]	; (80013b4 <HAL_RCC_OscConfig+0x360>)
 8001268:	4013      	ands	r3, r2
 800126a:	0019      	movs	r1, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	021a      	lsls	r2, r3, #8
 8001272:	4b4d      	ldr	r3, [pc, #308]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 8001274:	430a      	orrs	r2, r1
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	e018      	b.n	80012ac <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800127a:	4b4b      	ldr	r3, [pc, #300]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	4b4a      	ldr	r3, [pc, #296]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 8001280:	2101      	movs	r1, #1
 8001282:	438a      	bics	r2, r1
 8001284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001286:	f7ff fc75 	bl	8000b74 <HAL_GetTick>
 800128a:	0003      	movs	r3, r0
 800128c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001290:	f7ff fc70 	bl	8000b74 <HAL_GetTick>
 8001294:	0002      	movs	r2, r0
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e291      	b.n	80017c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012a2:	4b41      	ldr	r3, [pc, #260]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2204      	movs	r2, #4
 80012a8:	4013      	ands	r3, r2
 80012aa:	d1f1      	bne.n	8001290 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2210      	movs	r2, #16
 80012b2:	4013      	ands	r3, r2
 80012b4:	d100      	bne.n	80012b8 <HAL_RCC_OscConfig+0x264>
 80012b6:	e0a1      	b.n	80013fc <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012b8:	6a3b      	ldr	r3, [r7, #32]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d140      	bne.n	8001340 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012be:	4b3a      	ldr	r3, [pc, #232]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	2380      	movs	r3, #128	; 0x80
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4013      	ands	r3, r2
 80012c8:	d005      	beq.n	80012d6 <HAL_RCC_OscConfig+0x282>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e277      	b.n	80017c6 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012d6:	4b34      	ldr	r3, [pc, #208]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	4a3a      	ldr	r2, [pc, #232]	; (80013c4 <HAL_RCC_OscConfig+0x370>)
 80012dc:	4013      	ands	r3, r2
 80012de:	0019      	movs	r1, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012e4:	4b30      	ldr	r3, [pc, #192]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 80012e6:	430a      	orrs	r2, r1
 80012e8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ea:	4b2f      	ldr	r3, [pc, #188]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	021b      	lsls	r3, r3, #8
 80012f0:	0a19      	lsrs	r1, r3, #8
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	061a      	lsls	r2, r3, #24
 80012f8:	4b2b      	ldr	r3, [pc, #172]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 80012fa:	430a      	orrs	r2, r1
 80012fc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001302:	0b5b      	lsrs	r3, r3, #13
 8001304:	3301      	adds	r3, #1
 8001306:	2280      	movs	r2, #128	; 0x80
 8001308:	0212      	lsls	r2, r2, #8
 800130a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800130c:	4b26      	ldr	r3, [pc, #152]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	091b      	lsrs	r3, r3, #4
 8001312:	210f      	movs	r1, #15
 8001314:	400b      	ands	r3, r1
 8001316:	4928      	ldr	r1, [pc, #160]	; (80013b8 <HAL_RCC_OscConfig+0x364>)
 8001318:	5ccb      	ldrb	r3, [r1, r3]
 800131a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800131c:	4b27      	ldr	r3, [pc, #156]	; (80013bc <HAL_RCC_OscConfig+0x368>)
 800131e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001320:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <HAL_RCC_OscConfig+0x36c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2513      	movs	r5, #19
 8001326:	197c      	adds	r4, r7, r5
 8001328:	0018      	movs	r0, r3
 800132a:	f7ff fb31 	bl	8000990 <HAL_InitTick>
 800132e:	0003      	movs	r3, r0
 8001330:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001332:	197b      	adds	r3, r7, r5
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d060      	beq.n	80013fc <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800133a:	197b      	adds	r3, r7, r5
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	e242      	b.n	80017c6 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69db      	ldr	r3, [r3, #28]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d03f      	beq.n	80013c8 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001348:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 800134e:	2180      	movs	r1, #128	; 0x80
 8001350:	0049      	lsls	r1, r1, #1
 8001352:	430a      	orrs	r2, r1
 8001354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001356:	f7ff fc0d 	bl	8000b74 <HAL_GetTick>
 800135a:	0003      	movs	r3, r0
 800135c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001360:	f7ff fc08 	bl	8000b74 <HAL_GetTick>
 8001364:	0002      	movs	r2, r0
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e229      	b.n	80017c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001372:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	2380      	movs	r3, #128	; 0x80
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4013      	ands	r3, r2
 800137c:	d0f0      	beq.n	8001360 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800137e:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	4a10      	ldr	r2, [pc, #64]	; (80013c4 <HAL_RCC_OscConfig+0x370>)
 8001384:	4013      	ands	r3, r2
 8001386:	0019      	movs	r1, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 800138e:	430a      	orrs	r2, r1
 8001390:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001392:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	0a19      	lsrs	r1, r3, #8
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a1b      	ldr	r3, [r3, #32]
 800139e:	061a      	lsls	r2, r3, #24
 80013a0:	4b01      	ldr	r3, [pc, #4]	; (80013a8 <HAL_RCC_OscConfig+0x354>)
 80013a2:	430a      	orrs	r2, r1
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	e029      	b.n	80013fc <HAL_RCC_OscConfig+0x3a8>
 80013a8:	40021000 	.word	0x40021000
 80013ac:	fffeffff 	.word	0xfffeffff
 80013b0:	fffbffff 	.word	0xfffbffff
 80013b4:	ffffe0ff 	.word	0xffffe0ff
 80013b8:	08005140 	.word	0x08005140
 80013bc:	20000000 	.word	0x20000000
 80013c0:	20000004 	.word	0x20000004
 80013c4:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013c8:	4bbd      	ldr	r3, [pc, #756]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4bbc      	ldr	r3, [pc, #752]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 80013ce:	49bd      	ldr	r1, [pc, #756]	; (80016c4 <HAL_RCC_OscConfig+0x670>)
 80013d0:	400a      	ands	r2, r1
 80013d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fbce 	bl	8000b74 <HAL_GetTick>
 80013d8:	0003      	movs	r3, r0
 80013da:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013de:	f7ff fbc9 	bl	8000b74 <HAL_GetTick>
 80013e2:	0002      	movs	r2, r0
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e1ea      	b.n	80017c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80013f0:	4bb3      	ldr	r3, [pc, #716]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4013      	ands	r3, r2
 80013fa:	d1f0      	bne.n	80013de <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2208      	movs	r2, #8
 8001402:	4013      	ands	r3, r2
 8001404:	d036      	beq.n	8001474 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d019      	beq.n	8001442 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800140e:	4bac      	ldr	r3, [pc, #688]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 8001410:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001412:	4bab      	ldr	r3, [pc, #684]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 8001414:	2101      	movs	r1, #1
 8001416:	430a      	orrs	r2, r1
 8001418:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141a:	f7ff fbab 	bl	8000b74 <HAL_GetTick>
 800141e:	0003      	movs	r3, r0
 8001420:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001424:	f7ff fba6 	bl	8000b74 <HAL_GetTick>
 8001428:	0002      	movs	r2, r0
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e1c7      	b.n	80017c6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001436:	4ba2      	ldr	r3, [pc, #648]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 8001438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800143a:	2202      	movs	r2, #2
 800143c:	4013      	ands	r3, r2
 800143e:	d0f1      	beq.n	8001424 <HAL_RCC_OscConfig+0x3d0>
 8001440:	e018      	b.n	8001474 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001442:	4b9f      	ldr	r3, [pc, #636]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 8001444:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001446:	4b9e      	ldr	r3, [pc, #632]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 8001448:	2101      	movs	r1, #1
 800144a:	438a      	bics	r2, r1
 800144c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144e:	f7ff fb91 	bl	8000b74 <HAL_GetTick>
 8001452:	0003      	movs	r3, r0
 8001454:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001458:	f7ff fb8c 	bl	8000b74 <HAL_GetTick>
 800145c:	0002      	movs	r2, r0
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e1ad      	b.n	80017c6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800146a:	4b95      	ldr	r3, [pc, #596]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 800146c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800146e:	2202      	movs	r2, #2
 8001470:	4013      	ands	r3, r2
 8001472:	d1f1      	bne.n	8001458 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2204      	movs	r2, #4
 800147a:	4013      	ands	r3, r2
 800147c:	d100      	bne.n	8001480 <HAL_RCC_OscConfig+0x42c>
 800147e:	e0ae      	b.n	80015de <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001480:	2027      	movs	r0, #39	; 0x27
 8001482:	183b      	adds	r3, r7, r0
 8001484:	2200      	movs	r2, #0
 8001486:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001488:	4b8d      	ldr	r3, [pc, #564]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 800148a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	055b      	lsls	r3, r3, #21
 8001490:	4013      	ands	r3, r2
 8001492:	d109      	bne.n	80014a8 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001494:	4b8a      	ldr	r3, [pc, #552]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 8001496:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001498:	4b89      	ldr	r3, [pc, #548]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 800149a:	2180      	movs	r1, #128	; 0x80
 800149c:	0549      	lsls	r1, r1, #21
 800149e:	430a      	orrs	r2, r1
 80014a0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80014a2:	183b      	adds	r3, r7, r0
 80014a4:	2201      	movs	r2, #1
 80014a6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a8:	4b87      	ldr	r3, [pc, #540]	; (80016c8 <HAL_RCC_OscConfig+0x674>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4013      	ands	r3, r2
 80014b2:	d11a      	bne.n	80014ea <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014b4:	4b84      	ldr	r3, [pc, #528]	; (80016c8 <HAL_RCC_OscConfig+0x674>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b83      	ldr	r3, [pc, #524]	; (80016c8 <HAL_RCC_OscConfig+0x674>)
 80014ba:	2180      	movs	r1, #128	; 0x80
 80014bc:	0049      	lsls	r1, r1, #1
 80014be:	430a      	orrs	r2, r1
 80014c0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014c2:	f7ff fb57 	bl	8000b74 <HAL_GetTick>
 80014c6:	0003      	movs	r3, r0
 80014c8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014cc:	f7ff fb52 	bl	8000b74 <HAL_GetTick>
 80014d0:	0002      	movs	r2, r0
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b64      	cmp	r3, #100	; 0x64
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e173      	b.n	80017c6 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014de:	4b7a      	ldr	r3, [pc, #488]	; (80016c8 <HAL_RCC_OscConfig+0x674>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	2380      	movs	r3, #128	; 0x80
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	4013      	ands	r3, r2
 80014e8:	d0f0      	beq.n	80014cc <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d107      	bne.n	8001506 <HAL_RCC_OscConfig+0x4b2>
 80014f6:	4b72      	ldr	r3, [pc, #456]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 80014f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014fa:	4b71      	ldr	r3, [pc, #452]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 80014fc:	2180      	movs	r1, #128	; 0x80
 80014fe:	0049      	lsls	r1, r1, #1
 8001500:	430a      	orrs	r2, r1
 8001502:	651a      	str	r2, [r3, #80]	; 0x50
 8001504:	e031      	b.n	800156a <HAL_RCC_OscConfig+0x516>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10c      	bne.n	8001528 <HAL_RCC_OscConfig+0x4d4>
 800150e:	4b6c      	ldr	r3, [pc, #432]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 8001510:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001512:	4b6b      	ldr	r3, [pc, #428]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 8001514:	496b      	ldr	r1, [pc, #428]	; (80016c4 <HAL_RCC_OscConfig+0x670>)
 8001516:	400a      	ands	r2, r1
 8001518:	651a      	str	r2, [r3, #80]	; 0x50
 800151a:	4b69      	ldr	r3, [pc, #420]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 800151c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800151e:	4b68      	ldr	r3, [pc, #416]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 8001520:	496a      	ldr	r1, [pc, #424]	; (80016cc <HAL_RCC_OscConfig+0x678>)
 8001522:	400a      	ands	r2, r1
 8001524:	651a      	str	r2, [r3, #80]	; 0x50
 8001526:	e020      	b.n	800156a <HAL_RCC_OscConfig+0x516>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	23a0      	movs	r3, #160	; 0xa0
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	429a      	cmp	r2, r3
 8001532:	d10e      	bne.n	8001552 <HAL_RCC_OscConfig+0x4fe>
 8001534:	4b62      	ldr	r3, [pc, #392]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 8001536:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001538:	4b61      	ldr	r3, [pc, #388]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 800153a:	2180      	movs	r1, #128	; 0x80
 800153c:	00c9      	lsls	r1, r1, #3
 800153e:	430a      	orrs	r2, r1
 8001540:	651a      	str	r2, [r3, #80]	; 0x50
 8001542:	4b5f      	ldr	r3, [pc, #380]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 8001544:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001546:	4b5e      	ldr	r3, [pc, #376]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 8001548:	2180      	movs	r1, #128	; 0x80
 800154a:	0049      	lsls	r1, r1, #1
 800154c:	430a      	orrs	r2, r1
 800154e:	651a      	str	r2, [r3, #80]	; 0x50
 8001550:	e00b      	b.n	800156a <HAL_RCC_OscConfig+0x516>
 8001552:	4b5b      	ldr	r3, [pc, #364]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 8001554:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001556:	4b5a      	ldr	r3, [pc, #360]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 8001558:	495a      	ldr	r1, [pc, #360]	; (80016c4 <HAL_RCC_OscConfig+0x670>)
 800155a:	400a      	ands	r2, r1
 800155c:	651a      	str	r2, [r3, #80]	; 0x50
 800155e:	4b58      	ldr	r3, [pc, #352]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 8001560:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001562:	4b57      	ldr	r3, [pc, #348]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 8001564:	4959      	ldr	r1, [pc, #356]	; (80016cc <HAL_RCC_OscConfig+0x678>)
 8001566:	400a      	ands	r2, r1
 8001568:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d015      	beq.n	800159e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001572:	f7ff faff 	bl	8000b74 <HAL_GetTick>
 8001576:	0003      	movs	r3, r0
 8001578:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800157a:	e009      	b.n	8001590 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800157c:	f7ff fafa 	bl	8000b74 <HAL_GetTick>
 8001580:	0002      	movs	r2, r0
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	4a52      	ldr	r2, [pc, #328]	; (80016d0 <HAL_RCC_OscConfig+0x67c>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e11a      	b.n	80017c6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001590:	4b4b      	ldr	r3, [pc, #300]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 8001592:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4013      	ands	r3, r2
 800159a:	d0ef      	beq.n	800157c <HAL_RCC_OscConfig+0x528>
 800159c:	e014      	b.n	80015c8 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159e:	f7ff fae9 	bl	8000b74 <HAL_GetTick>
 80015a2:	0003      	movs	r3, r0
 80015a4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80015a6:	e009      	b.n	80015bc <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015a8:	f7ff fae4 	bl	8000b74 <HAL_GetTick>
 80015ac:	0002      	movs	r2, r0
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	4a47      	ldr	r2, [pc, #284]	; (80016d0 <HAL_RCC_OscConfig+0x67c>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e104      	b.n	80017c6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80015bc:	4b40      	ldr	r3, [pc, #256]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 80015be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015c0:	2380      	movs	r3, #128	; 0x80
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4013      	ands	r3, r2
 80015c6:	d1ef      	bne.n	80015a8 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015c8:	2327      	movs	r3, #39	; 0x27
 80015ca:	18fb      	adds	r3, r7, r3
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d105      	bne.n	80015de <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d2:	4b3b      	ldr	r3, [pc, #236]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 80015d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015d6:	4b3a      	ldr	r3, [pc, #232]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 80015d8:	493e      	ldr	r1, [pc, #248]	; (80016d4 <HAL_RCC_OscConfig+0x680>)
 80015da:	400a      	ands	r2, r1
 80015dc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2220      	movs	r2, #32
 80015e4:	4013      	ands	r3, r2
 80015e6:	d049      	beq.n	800167c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d026      	beq.n	800163e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80015f0:	4b33      	ldr	r3, [pc, #204]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	4b32      	ldr	r3, [pc, #200]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 80015f6:	2101      	movs	r1, #1
 80015f8:	430a      	orrs	r2, r1
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	4b30      	ldr	r3, [pc, #192]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 80015fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001600:	4b2f      	ldr	r3, [pc, #188]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 8001602:	2101      	movs	r1, #1
 8001604:	430a      	orrs	r2, r1
 8001606:	635a      	str	r2, [r3, #52]	; 0x34
 8001608:	4b33      	ldr	r3, [pc, #204]	; (80016d8 <HAL_RCC_OscConfig+0x684>)
 800160a:	6a1a      	ldr	r2, [r3, #32]
 800160c:	4b32      	ldr	r3, [pc, #200]	; (80016d8 <HAL_RCC_OscConfig+0x684>)
 800160e:	2180      	movs	r1, #128	; 0x80
 8001610:	0189      	lsls	r1, r1, #6
 8001612:	430a      	orrs	r2, r1
 8001614:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001616:	f7ff faad 	bl	8000b74 <HAL_GetTick>
 800161a:	0003      	movs	r3, r0
 800161c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001620:	f7ff faa8 	bl	8000b74 <HAL_GetTick>
 8001624:	0002      	movs	r2, r0
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e0c9      	b.n	80017c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001632:	4b23      	ldr	r3, [pc, #140]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	2202      	movs	r2, #2
 8001638:	4013      	ands	r3, r2
 800163a:	d0f1      	beq.n	8001620 <HAL_RCC_OscConfig+0x5cc>
 800163c:	e01e      	b.n	800167c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800163e:	4b20      	ldr	r3, [pc, #128]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 8001640:	689a      	ldr	r2, [r3, #8]
 8001642:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 8001644:	2101      	movs	r1, #1
 8001646:	438a      	bics	r2, r1
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	4b23      	ldr	r3, [pc, #140]	; (80016d8 <HAL_RCC_OscConfig+0x684>)
 800164c:	6a1a      	ldr	r2, [r3, #32]
 800164e:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <HAL_RCC_OscConfig+0x684>)
 8001650:	4922      	ldr	r1, [pc, #136]	; (80016dc <HAL_RCC_OscConfig+0x688>)
 8001652:	400a      	ands	r2, r1
 8001654:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001656:	f7ff fa8d 	bl	8000b74 <HAL_GetTick>
 800165a:	0003      	movs	r3, r0
 800165c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001660:	f7ff fa88 	bl	8000b74 <HAL_GetTick>
 8001664:	0002      	movs	r2, r0
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e0a9      	b.n	80017c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001672:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	2202      	movs	r2, #2
 8001678:	4013      	ands	r3, r2
 800167a:	d1f1      	bne.n	8001660 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001680:	2b00      	cmp	r3, #0
 8001682:	d100      	bne.n	8001686 <HAL_RCC_OscConfig+0x632>
 8001684:	e09e      	b.n	80017c4 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001686:	6a3b      	ldr	r3, [r7, #32]
 8001688:	2b0c      	cmp	r3, #12
 800168a:	d100      	bne.n	800168e <HAL_RCC_OscConfig+0x63a>
 800168c:	e077      	b.n	800177e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001692:	2b02      	cmp	r3, #2
 8001694:	d158      	bne.n	8001748 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001696:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_RCC_OscConfig+0x66c>)
 800169c:	4910      	ldr	r1, [pc, #64]	; (80016e0 <HAL_RCC_OscConfig+0x68c>)
 800169e:	400a      	ands	r2, r1
 80016a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a2:	f7ff fa67 	bl	8000b74 <HAL_GetTick>
 80016a6:	0003      	movs	r3, r0
 80016a8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80016aa:	e01b      	b.n	80016e4 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ac:	f7ff fa62 	bl	8000b74 <HAL_GetTick>
 80016b0:	0002      	movs	r2, r0
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d914      	bls.n	80016e4 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e083      	b.n	80017c6 <HAL_RCC_OscConfig+0x772>
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	40021000 	.word	0x40021000
 80016c4:	fffffeff 	.word	0xfffffeff
 80016c8:	40007000 	.word	0x40007000
 80016cc:	fffffbff 	.word	0xfffffbff
 80016d0:	00001388 	.word	0x00001388
 80016d4:	efffffff 	.word	0xefffffff
 80016d8:	40010000 	.word	0x40010000
 80016dc:	ffffdfff 	.word	0xffffdfff
 80016e0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80016e4:	4b3a      	ldr	r3, [pc, #232]	; (80017d0 <HAL_RCC_OscConfig+0x77c>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	049b      	lsls	r3, r3, #18
 80016ec:	4013      	ands	r3, r2
 80016ee:	d1dd      	bne.n	80016ac <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016f0:	4b37      	ldr	r3, [pc, #220]	; (80017d0 <HAL_RCC_OscConfig+0x77c>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	4a37      	ldr	r2, [pc, #220]	; (80017d4 <HAL_RCC_OscConfig+0x780>)
 80016f6:	4013      	ands	r3, r2
 80016f8:	0019      	movs	r1, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	431a      	orrs	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001708:	431a      	orrs	r2, r3
 800170a:	4b31      	ldr	r3, [pc, #196]	; (80017d0 <HAL_RCC_OscConfig+0x77c>)
 800170c:	430a      	orrs	r2, r1
 800170e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001710:	4b2f      	ldr	r3, [pc, #188]	; (80017d0 <HAL_RCC_OscConfig+0x77c>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b2e      	ldr	r3, [pc, #184]	; (80017d0 <HAL_RCC_OscConfig+0x77c>)
 8001716:	2180      	movs	r1, #128	; 0x80
 8001718:	0449      	lsls	r1, r1, #17
 800171a:	430a      	orrs	r2, r1
 800171c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171e:	f7ff fa29 	bl	8000b74 <HAL_GetTick>
 8001722:	0003      	movs	r3, r0
 8001724:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001728:	f7ff fa24 	bl	8000b74 <HAL_GetTick>
 800172c:	0002      	movs	r2, r0
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e045      	b.n	80017c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800173a:	4b25      	ldr	r3, [pc, #148]	; (80017d0 <HAL_RCC_OscConfig+0x77c>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	049b      	lsls	r3, r3, #18
 8001742:	4013      	ands	r3, r2
 8001744:	d0f0      	beq.n	8001728 <HAL_RCC_OscConfig+0x6d4>
 8001746:	e03d      	b.n	80017c4 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001748:	4b21      	ldr	r3, [pc, #132]	; (80017d0 <HAL_RCC_OscConfig+0x77c>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <HAL_RCC_OscConfig+0x77c>)
 800174e:	4922      	ldr	r1, [pc, #136]	; (80017d8 <HAL_RCC_OscConfig+0x784>)
 8001750:	400a      	ands	r2, r1
 8001752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001754:	f7ff fa0e 	bl	8000b74 <HAL_GetTick>
 8001758:	0003      	movs	r3, r0
 800175a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800175e:	f7ff fa09 	bl	8000b74 <HAL_GetTick>
 8001762:	0002      	movs	r2, r0
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e02a      	b.n	80017c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001770:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <HAL_RCC_OscConfig+0x77c>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	2380      	movs	r3, #128	; 0x80
 8001776:	049b      	lsls	r3, r3, #18
 8001778:	4013      	ands	r3, r2
 800177a:	d1f0      	bne.n	800175e <HAL_RCC_OscConfig+0x70a>
 800177c:	e022      	b.n	80017c4 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001782:	2b01      	cmp	r3, #1
 8001784:	d101      	bne.n	800178a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e01d      	b.n	80017c6 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800178a:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <HAL_RCC_OscConfig+0x77c>)
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001790:	69fa      	ldr	r2, [r7, #28]
 8001792:	2380      	movs	r3, #128	; 0x80
 8001794:	025b      	lsls	r3, r3, #9
 8001796:	401a      	ands	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179c:	429a      	cmp	r2, r3
 800179e:	d10f      	bne.n	80017c0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80017a0:	69fa      	ldr	r2, [r7, #28]
 80017a2:	23f0      	movs	r3, #240	; 0xf0
 80017a4:	039b      	lsls	r3, r3, #14
 80017a6:	401a      	ands	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d107      	bne.n	80017c0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80017b0:	69fa      	ldr	r2, [r7, #28]
 80017b2:	23c0      	movs	r3, #192	; 0xc0
 80017b4:	041b      	lsls	r3, r3, #16
 80017b6:	401a      	ands	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80017bc:	429a      	cmp	r2, r3
 80017be:	d001      	beq.n	80017c4 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e000      	b.n	80017c6 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	0018      	movs	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b00a      	add	sp, #40	; 0x28
 80017cc:	bdb0      	pop	{r4, r5, r7, pc}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	40021000 	.word	0x40021000
 80017d4:	ff02ffff 	.word	0xff02ffff
 80017d8:	feffffff 	.word	0xfeffffff

080017dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017dc:	b5b0      	push	{r4, r5, r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d101      	bne.n	80017f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e128      	b.n	8001a42 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017f0:	4b96      	ldr	r3, [pc, #600]	; (8001a4c <HAL_RCC_ClockConfig+0x270>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2201      	movs	r2, #1
 80017f6:	4013      	ands	r3, r2
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d91e      	bls.n	800183c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fe:	4b93      	ldr	r3, [pc, #588]	; (8001a4c <HAL_RCC_ClockConfig+0x270>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2201      	movs	r2, #1
 8001804:	4393      	bics	r3, r2
 8001806:	0019      	movs	r1, r3
 8001808:	4b90      	ldr	r3, [pc, #576]	; (8001a4c <HAL_RCC_ClockConfig+0x270>)
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001810:	f7ff f9b0 	bl	8000b74 <HAL_GetTick>
 8001814:	0003      	movs	r3, r0
 8001816:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001818:	e009      	b.n	800182e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800181a:	f7ff f9ab 	bl	8000b74 <HAL_GetTick>
 800181e:	0002      	movs	r2, r0
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	4a8a      	ldr	r2, [pc, #552]	; (8001a50 <HAL_RCC_ClockConfig+0x274>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d901      	bls.n	800182e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e109      	b.n	8001a42 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800182e:	4b87      	ldr	r3, [pc, #540]	; (8001a4c <HAL_RCC_ClockConfig+0x270>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2201      	movs	r2, #1
 8001834:	4013      	ands	r3, r2
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	d1ee      	bne.n	800181a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2202      	movs	r2, #2
 8001842:	4013      	ands	r3, r2
 8001844:	d009      	beq.n	800185a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001846:	4b83      	ldr	r3, [pc, #524]	; (8001a54 <HAL_RCC_ClockConfig+0x278>)
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	22f0      	movs	r2, #240	; 0xf0
 800184c:	4393      	bics	r3, r2
 800184e:	0019      	movs	r1, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	4b7f      	ldr	r3, [pc, #508]	; (8001a54 <HAL_RCC_ClockConfig+0x278>)
 8001856:	430a      	orrs	r2, r1
 8001858:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2201      	movs	r2, #1
 8001860:	4013      	ands	r3, r2
 8001862:	d100      	bne.n	8001866 <HAL_RCC_ClockConfig+0x8a>
 8001864:	e089      	b.n	800197a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b02      	cmp	r3, #2
 800186c:	d107      	bne.n	800187e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800186e:	4b79      	ldr	r3, [pc, #484]	; (8001a54 <HAL_RCC_ClockConfig+0x278>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	029b      	lsls	r3, r3, #10
 8001876:	4013      	ands	r3, r2
 8001878:	d120      	bne.n	80018bc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e0e1      	b.n	8001a42 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b03      	cmp	r3, #3
 8001884:	d107      	bne.n	8001896 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001886:	4b73      	ldr	r3, [pc, #460]	; (8001a54 <HAL_RCC_ClockConfig+0x278>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	2380      	movs	r3, #128	; 0x80
 800188c:	049b      	lsls	r3, r3, #18
 800188e:	4013      	ands	r3, r2
 8001890:	d114      	bne.n	80018bc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e0d5      	b.n	8001a42 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d106      	bne.n	80018ac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800189e:	4b6d      	ldr	r3, [pc, #436]	; (8001a54 <HAL_RCC_ClockConfig+0x278>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2204      	movs	r2, #4
 80018a4:	4013      	ands	r3, r2
 80018a6:	d109      	bne.n	80018bc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0ca      	b.n	8001a42 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80018ac:	4b69      	ldr	r3, [pc, #420]	; (8001a54 <HAL_RCC_ClockConfig+0x278>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	2380      	movs	r3, #128	; 0x80
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4013      	ands	r3, r2
 80018b6:	d101      	bne.n	80018bc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e0c2      	b.n	8001a42 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018bc:	4b65      	ldr	r3, [pc, #404]	; (8001a54 <HAL_RCC_ClockConfig+0x278>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	2203      	movs	r2, #3
 80018c2:	4393      	bics	r3, r2
 80018c4:	0019      	movs	r1, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	4b62      	ldr	r3, [pc, #392]	; (8001a54 <HAL_RCC_ClockConfig+0x278>)
 80018cc:	430a      	orrs	r2, r1
 80018ce:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018d0:	f7ff f950 	bl	8000b74 <HAL_GetTick>
 80018d4:	0003      	movs	r3, r0
 80018d6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d111      	bne.n	8001904 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018e0:	e009      	b.n	80018f6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e2:	f7ff f947 	bl	8000b74 <HAL_GetTick>
 80018e6:	0002      	movs	r2, r0
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	4a58      	ldr	r2, [pc, #352]	; (8001a50 <HAL_RCC_ClockConfig+0x274>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e0a5      	b.n	8001a42 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018f6:	4b57      	ldr	r3, [pc, #348]	; (8001a54 <HAL_RCC_ClockConfig+0x278>)
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	220c      	movs	r2, #12
 80018fc:	4013      	ands	r3, r2
 80018fe:	2b08      	cmp	r3, #8
 8001900:	d1ef      	bne.n	80018e2 <HAL_RCC_ClockConfig+0x106>
 8001902:	e03a      	b.n	800197a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b03      	cmp	r3, #3
 800190a:	d111      	bne.n	8001930 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800190c:	e009      	b.n	8001922 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800190e:	f7ff f931 	bl	8000b74 <HAL_GetTick>
 8001912:	0002      	movs	r2, r0
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	4a4d      	ldr	r2, [pc, #308]	; (8001a50 <HAL_RCC_ClockConfig+0x274>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e08f      	b.n	8001a42 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001922:	4b4c      	ldr	r3, [pc, #304]	; (8001a54 <HAL_RCC_ClockConfig+0x278>)
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	220c      	movs	r2, #12
 8001928:	4013      	ands	r3, r2
 800192a:	2b0c      	cmp	r3, #12
 800192c:	d1ef      	bne.n	800190e <HAL_RCC_ClockConfig+0x132>
 800192e:	e024      	b.n	800197a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d11b      	bne.n	8001970 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001938:	e009      	b.n	800194e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800193a:	f7ff f91b 	bl	8000b74 <HAL_GetTick>
 800193e:	0002      	movs	r2, r0
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	4a42      	ldr	r2, [pc, #264]	; (8001a50 <HAL_RCC_ClockConfig+0x274>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d901      	bls.n	800194e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e079      	b.n	8001a42 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800194e:	4b41      	ldr	r3, [pc, #260]	; (8001a54 <HAL_RCC_ClockConfig+0x278>)
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	220c      	movs	r2, #12
 8001954:	4013      	ands	r3, r2
 8001956:	2b04      	cmp	r3, #4
 8001958:	d1ef      	bne.n	800193a <HAL_RCC_ClockConfig+0x15e>
 800195a:	e00e      	b.n	800197a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800195c:	f7ff f90a 	bl	8000b74 <HAL_GetTick>
 8001960:	0002      	movs	r2, r0
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	4a3a      	ldr	r2, [pc, #232]	; (8001a50 <HAL_RCC_ClockConfig+0x274>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e068      	b.n	8001a42 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001970:	4b38      	ldr	r3, [pc, #224]	; (8001a54 <HAL_RCC_ClockConfig+0x278>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	220c      	movs	r2, #12
 8001976:	4013      	ands	r3, r2
 8001978:	d1f0      	bne.n	800195c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800197a:	4b34      	ldr	r3, [pc, #208]	; (8001a4c <HAL_RCC_ClockConfig+0x270>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2201      	movs	r2, #1
 8001980:	4013      	ands	r3, r2
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d21e      	bcs.n	80019c6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001988:	4b30      	ldr	r3, [pc, #192]	; (8001a4c <HAL_RCC_ClockConfig+0x270>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2201      	movs	r2, #1
 800198e:	4393      	bics	r3, r2
 8001990:	0019      	movs	r1, r3
 8001992:	4b2e      	ldr	r3, [pc, #184]	; (8001a4c <HAL_RCC_ClockConfig+0x270>)
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800199a:	f7ff f8eb 	bl	8000b74 <HAL_GetTick>
 800199e:	0003      	movs	r3, r0
 80019a0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a2:	e009      	b.n	80019b8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a4:	f7ff f8e6 	bl	8000b74 <HAL_GetTick>
 80019a8:	0002      	movs	r2, r0
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	4a28      	ldr	r2, [pc, #160]	; (8001a50 <HAL_RCC_ClockConfig+0x274>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e044      	b.n	8001a42 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b8:	4b24      	ldr	r3, [pc, #144]	; (8001a4c <HAL_RCC_ClockConfig+0x270>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2201      	movs	r2, #1
 80019be:	4013      	ands	r3, r2
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d1ee      	bne.n	80019a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2204      	movs	r2, #4
 80019cc:	4013      	ands	r3, r2
 80019ce:	d009      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019d0:	4b20      	ldr	r3, [pc, #128]	; (8001a54 <HAL_RCC_ClockConfig+0x278>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	4a20      	ldr	r2, [pc, #128]	; (8001a58 <HAL_RCC_ClockConfig+0x27c>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	0019      	movs	r1, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	4b1d      	ldr	r3, [pc, #116]	; (8001a54 <HAL_RCC_ClockConfig+0x278>)
 80019e0:	430a      	orrs	r2, r1
 80019e2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2208      	movs	r2, #8
 80019ea:	4013      	ands	r3, r2
 80019ec:	d00a      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019ee:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <HAL_RCC_ClockConfig+0x278>)
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	4a1a      	ldr	r2, [pc, #104]	; (8001a5c <HAL_RCC_ClockConfig+0x280>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	0019      	movs	r1, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	00da      	lsls	r2, r3, #3
 80019fe:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <HAL_RCC_ClockConfig+0x278>)
 8001a00:	430a      	orrs	r2, r1
 8001a02:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a04:	f000 f832 	bl	8001a6c <HAL_RCC_GetSysClockFreq>
 8001a08:	0001      	movs	r1, r0
 8001a0a:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_RCC_ClockConfig+0x278>)
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	091b      	lsrs	r3, r3, #4
 8001a10:	220f      	movs	r2, #15
 8001a12:	4013      	ands	r3, r2
 8001a14:	4a12      	ldr	r2, [pc, #72]	; (8001a60 <HAL_RCC_ClockConfig+0x284>)
 8001a16:	5cd3      	ldrb	r3, [r2, r3]
 8001a18:	000a      	movs	r2, r1
 8001a1a:	40da      	lsrs	r2, r3
 8001a1c:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <HAL_RCC_ClockConfig+0x288>)
 8001a1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a20:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <HAL_RCC_ClockConfig+0x28c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	250b      	movs	r5, #11
 8001a26:	197c      	adds	r4, r7, r5
 8001a28:	0018      	movs	r0, r3
 8001a2a:	f7fe ffb1 	bl	8000990 <HAL_InitTick>
 8001a2e:	0003      	movs	r3, r0
 8001a30:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001a32:	197b      	adds	r3, r7, r5
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d002      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001a3a:	197b      	adds	r3, r7, r5
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	e000      	b.n	8001a42 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	0018      	movs	r0, r3
 8001a44:	46bd      	mov	sp, r7
 8001a46:	b004      	add	sp, #16
 8001a48:	bdb0      	pop	{r4, r5, r7, pc}
 8001a4a:	46c0      	nop			; (mov r8, r8)
 8001a4c:	40022000 	.word	0x40022000
 8001a50:	00001388 	.word	0x00001388
 8001a54:	40021000 	.word	0x40021000
 8001a58:	fffff8ff 	.word	0xfffff8ff
 8001a5c:	ffffc7ff 	.word	0xffffc7ff
 8001a60:	08005140 	.word	0x08005140
 8001a64:	20000000 	.word	0x20000000
 8001a68:	20000004 	.word	0x20000004

08001a6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a6c:	b5b0      	push	{r4, r5, r7, lr}
 8001a6e:	b08e      	sub	sp, #56	; 0x38
 8001a70:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001a72:	4b4c      	ldr	r3, [pc, #304]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a7a:	230c      	movs	r3, #12
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	2b0c      	cmp	r3, #12
 8001a80:	d014      	beq.n	8001aac <HAL_RCC_GetSysClockFreq+0x40>
 8001a82:	d900      	bls.n	8001a86 <HAL_RCC_GetSysClockFreq+0x1a>
 8001a84:	e07b      	b.n	8001b7e <HAL_RCC_GetSysClockFreq+0x112>
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d002      	beq.n	8001a90 <HAL_RCC_GetSysClockFreq+0x24>
 8001a8a:	2b08      	cmp	r3, #8
 8001a8c:	d00b      	beq.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a8e:	e076      	b.n	8001b7e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001a90:	4b44      	ldr	r3, [pc, #272]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2210      	movs	r2, #16
 8001a96:	4013      	ands	r3, r2
 8001a98:	d002      	beq.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001a9a:	4b43      	ldr	r3, [pc, #268]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001a9c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001a9e:	e07c      	b.n	8001b9a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001aa0:	4b42      	ldr	r3, [pc, #264]	; (8001bac <HAL_RCC_GetSysClockFreq+0x140>)
 8001aa2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001aa4:	e079      	b.n	8001b9a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001aa6:	4b42      	ldr	r3, [pc, #264]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x144>)
 8001aa8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001aaa:	e076      	b.n	8001b9a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aae:	0c9a      	lsrs	r2, r3, #18
 8001ab0:	230f      	movs	r3, #15
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	4b3f      	ldr	r3, [pc, #252]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x148>)
 8001ab6:	5c9b      	ldrb	r3, [r3, r2]
 8001ab8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001abc:	0d9a      	lsrs	r2, r3, #22
 8001abe:	2303      	movs	r3, #3
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ac6:	4b37      	ldr	r3, [pc, #220]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	2380      	movs	r3, #128	; 0x80
 8001acc:	025b      	lsls	r3, r3, #9
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d01a      	beq.n	8001b08 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad4:	61bb      	str	r3, [r7, #24]
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
 8001ada:	4a35      	ldr	r2, [pc, #212]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x144>)
 8001adc:	2300      	movs	r3, #0
 8001ade:	69b8      	ldr	r0, [r7, #24]
 8001ae0:	69f9      	ldr	r1, [r7, #28]
 8001ae2:	f7fe fbc5 	bl	8000270 <__aeabi_lmul>
 8001ae6:	0002      	movs	r2, r0
 8001ae8:	000b      	movs	r3, r1
 8001aea:	0010      	movs	r0, r2
 8001aec:	0019      	movs	r1, r3
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f7fe fb99 	bl	8000230 <__aeabi_uldivmod>
 8001afe:	0002      	movs	r2, r0
 8001b00:	000b      	movs	r3, r1
 8001b02:	0013      	movs	r3, r2
 8001b04:	637b      	str	r3, [r7, #52]	; 0x34
 8001b06:	e037      	b.n	8001b78 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001b08:	4b26      	ldr	r3, [pc, #152]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2210      	movs	r2, #16
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d01a      	beq.n	8001b48 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	4a23      	ldr	r2, [pc, #140]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	68b8      	ldr	r0, [r7, #8]
 8001b20:	68f9      	ldr	r1, [r7, #12]
 8001b22:	f7fe fba5 	bl	8000270 <__aeabi_lmul>
 8001b26:	0002      	movs	r2, r0
 8001b28:	000b      	movs	r3, r1
 8001b2a:	0010      	movs	r0, r2
 8001b2c:	0019      	movs	r1, r3
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	603b      	str	r3, [r7, #0]
 8001b32:	2300      	movs	r3, #0
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f7fe fb79 	bl	8000230 <__aeabi_uldivmod>
 8001b3e:	0002      	movs	r2, r0
 8001b40:	000b      	movs	r3, r1
 8001b42:	0013      	movs	r3, r2
 8001b44:	637b      	str	r3, [r7, #52]	; 0x34
 8001b46:	e017      	b.n	8001b78 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	0019      	movs	r1, r3
 8001b50:	4a16      	ldr	r2, [pc, #88]	; (8001bac <HAL_RCC_GetSysClockFreq+0x140>)
 8001b52:	2300      	movs	r3, #0
 8001b54:	f7fe fb8c 	bl	8000270 <__aeabi_lmul>
 8001b58:	0002      	movs	r2, r0
 8001b5a:	000b      	movs	r3, r1
 8001b5c:	0010      	movs	r0, r2
 8001b5e:	0019      	movs	r1, r3
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	001c      	movs	r4, r3
 8001b64:	2300      	movs	r3, #0
 8001b66:	001d      	movs	r5, r3
 8001b68:	0022      	movs	r2, r4
 8001b6a:	002b      	movs	r3, r5
 8001b6c:	f7fe fb60 	bl	8000230 <__aeabi_uldivmod>
 8001b70:	0002      	movs	r2, r0
 8001b72:	000b      	movs	r3, r1
 8001b74:	0013      	movs	r3, r2
 8001b76:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b7a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b7c:	e00d      	b.n	8001b9a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	0b5b      	lsrs	r3, r3, #13
 8001b84:	2207      	movs	r2, #7
 8001b86:	4013      	ands	r3, r2
 8001b88:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001b8a:	6a3b      	ldr	r3, [r7, #32]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	2280      	movs	r2, #128	; 0x80
 8001b90:	0212      	lsls	r2, r2, #8
 8001b92:	409a      	lsls	r2, r3
 8001b94:	0013      	movs	r3, r2
 8001b96:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b98:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b00e      	add	sp, #56	; 0x38
 8001ba2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	003d0900 	.word	0x003d0900
 8001bac:	00f42400 	.word	0x00f42400
 8001bb0:	007a1200 	.word	0x007a1200
 8001bb4:	08005158 	.word	0x08005158

08001bb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bbc:	4b02      	ldr	r3, [pc, #8]	; (8001bc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
}
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	20000000 	.word	0x20000000

08001bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bd0:	f7ff fff2 	bl	8001bb8 <HAL_RCC_GetHCLKFreq>
 8001bd4:	0001      	movs	r1, r0
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	0a1b      	lsrs	r3, r3, #8
 8001bdc:	2207      	movs	r2, #7
 8001bde:	4013      	ands	r3, r2
 8001be0:	4a04      	ldr	r2, [pc, #16]	; (8001bf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001be2:	5cd3      	ldrb	r3, [r2, r3]
 8001be4:	40d9      	lsrs	r1, r3
 8001be6:	000b      	movs	r3, r1
}
 8001be8:	0018      	movs	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	08005150 	.word	0x08005150

08001bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bfc:	f7ff ffdc 	bl	8001bb8 <HAL_RCC_GetHCLKFreq>
 8001c00:	0001      	movs	r1, r0
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	0adb      	lsrs	r3, r3, #11
 8001c08:	2207      	movs	r2, #7
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c0e:	5cd3      	ldrb	r3, [r2, r3]
 8001c10:	40d9      	lsrs	r1, r3
 8001c12:	000b      	movs	r3, r1
}
 8001c14:	0018      	movs	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	08005150 	.word	0x08005150

08001c24 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	220f      	movs	r2, #15
 8001c32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <HAL_RCC_GetClockConfig+0x5c>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	2203      	movs	r2, #3
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c40:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <HAL_RCC_GetClockConfig+0x5c>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	22f0      	movs	r2, #240	; 0xf0
 8001c46:	401a      	ands	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <HAL_RCC_GetClockConfig+0x5c>)
 8001c4e:	68da      	ldr	r2, [r3, #12]
 8001c50:	23e0      	movs	r3, #224	; 0xe0
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	401a      	ands	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001c5a:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <HAL_RCC_GetClockConfig+0x5c>)
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	08da      	lsrs	r2, r3, #3
 8001c60:	23e0      	movs	r3, #224	; 0xe0
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	401a      	ands	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_RCC_GetClockConfig+0x60>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	401a      	ands	r2, r3
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	601a      	str	r2, [r3, #0]
}
 8001c76:	46c0      	nop			; (mov r8, r8)
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	b002      	add	sp, #8
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	46c0      	nop			; (mov r8, r8)
 8001c80:	40021000 	.word	0x40021000
 8001c84:	40022000 	.word	0x40022000

08001c88 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001c90:	2317      	movs	r3, #23
 8001c92:	18fb      	adds	r3, r7, r3
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d106      	bne.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	2380      	movs	r3, #128	; 0x80
 8001ca8:	011b      	lsls	r3, r3, #4
 8001caa:	4013      	ands	r3, r2
 8001cac:	d100      	bne.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001cae:	e104      	b.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cb0:	4bb1      	ldr	r3, [pc, #708]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cb4:	2380      	movs	r3, #128	; 0x80
 8001cb6:	055b      	lsls	r3, r3, #21
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d10a      	bne.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cbc:	4bae      	ldr	r3, [pc, #696]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cc0:	4bad      	ldr	r3, [pc, #692]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cc2:	2180      	movs	r1, #128	; 0x80
 8001cc4:	0549      	lsls	r1, r1, #21
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001cca:	2317      	movs	r3, #23
 8001ccc:	18fb      	adds	r3, r7, r3
 8001cce:	2201      	movs	r2, #1
 8001cd0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd2:	4baa      	ldr	r3, [pc, #680]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	2380      	movs	r3, #128	; 0x80
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d11a      	bne.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cde:	4ba7      	ldr	r3, [pc, #668]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	4ba6      	ldr	r3, [pc, #664]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001ce4:	2180      	movs	r1, #128	; 0x80
 8001ce6:	0049      	lsls	r1, r1, #1
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cec:	f7fe ff42 	bl	8000b74 <HAL_GetTick>
 8001cf0:	0003      	movs	r3, r0
 8001cf2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf4:	e008      	b.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf6:	f7fe ff3d 	bl	8000b74 <HAL_GetTick>
 8001cfa:	0002      	movs	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b64      	cmp	r3, #100	; 0x64
 8001d02:	d901      	bls.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e133      	b.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d08:	4b9c      	ldr	r3, [pc, #624]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	2380      	movs	r3, #128	; 0x80
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4013      	ands	r3, r2
 8001d12:	d0f0      	beq.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001d14:	4b98      	ldr	r3, [pc, #608]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	23c0      	movs	r3, #192	; 0xc0
 8001d1a:	039b      	lsls	r3, r3, #14
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	23c0      	movs	r3, #192	; 0xc0
 8001d26:	039b      	lsls	r3, r3, #14
 8001d28:	4013      	ands	r3, r2
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d107      	bne.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	23c0      	movs	r3, #192	; 0xc0
 8001d36:	039b      	lsls	r3, r3, #14
 8001d38:	4013      	ands	r3, r2
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d013      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	23c0      	movs	r3, #192	; 0xc0
 8001d46:	029b      	lsls	r3, r3, #10
 8001d48:	401a      	ands	r2, r3
 8001d4a:	23c0      	movs	r3, #192	; 0xc0
 8001d4c:	029b      	lsls	r3, r3, #10
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d10a      	bne.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001d52:	4b89      	ldr	r3, [pc, #548]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	2380      	movs	r3, #128	; 0x80
 8001d58:	029b      	lsls	r3, r3, #10
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	2380      	movs	r3, #128	; 0x80
 8001d5e:	029b      	lsls	r3, r3, #10
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d101      	bne.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e103      	b.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001d68:	4b83      	ldr	r3, [pc, #524]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d6c:	23c0      	movs	r3, #192	; 0xc0
 8001d6e:	029b      	lsls	r3, r3, #10
 8001d70:	4013      	ands	r3, r2
 8001d72:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d049      	beq.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	23c0      	movs	r3, #192	; 0xc0
 8001d80:	029b      	lsls	r3, r3, #10
 8001d82:	4013      	ands	r3, r2
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d004      	beq.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2220      	movs	r2, #32
 8001d90:	4013      	ands	r3, r2
 8001d92:	d10d      	bne.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	23c0      	movs	r3, #192	; 0xc0
 8001d9a:	029b      	lsls	r3, r3, #10
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d034      	beq.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	2380      	movs	r3, #128	; 0x80
 8001daa:	011b      	lsls	r3, r3, #4
 8001dac:	4013      	ands	r3, r2
 8001dae:	d02e      	beq.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001db0:	4b71      	ldr	r3, [pc, #452]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001db4:	4a72      	ldr	r2, [pc, #456]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001db6:	4013      	ands	r3, r2
 8001db8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001dba:	4b6f      	ldr	r3, [pc, #444]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dbe:	4b6e      	ldr	r3, [pc, #440]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dc0:	2180      	movs	r1, #128	; 0x80
 8001dc2:	0309      	lsls	r1, r1, #12
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dc8:	4b6b      	ldr	r3, [pc, #428]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dcc:	4b6a      	ldr	r3, [pc, #424]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dce:	496d      	ldr	r1, [pc, #436]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001dd0:	400a      	ands	r2, r1
 8001dd2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001dd4:	4b68      	ldr	r3, [pc, #416]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	2380      	movs	r3, #128	; 0x80
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	4013      	ands	r3, r2
 8001de2:	d014      	beq.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de4:	f7fe fec6 	bl	8000b74 <HAL_GetTick>
 8001de8:	0003      	movs	r3, r0
 8001dea:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dec:	e009      	b.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dee:	f7fe fec1 	bl	8000b74 <HAL_GetTick>
 8001df2:	0002      	movs	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	4a63      	ldr	r2, [pc, #396]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e0b6      	b.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e02:	4b5d      	ldr	r3, [pc, #372]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e06:	2380      	movs	r3, #128	; 0x80
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d0ef      	beq.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	2380      	movs	r3, #128	; 0x80
 8001e14:	011b      	lsls	r3, r3, #4
 8001e16:	4013      	ands	r3, r2
 8001e18:	d01f      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	23c0      	movs	r3, #192	; 0xc0
 8001e20:	029b      	lsls	r3, r3, #10
 8001e22:	401a      	ands	r2, r3
 8001e24:	23c0      	movs	r3, #192	; 0xc0
 8001e26:	029b      	lsls	r3, r3, #10
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d10c      	bne.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8001e2c:	4b52      	ldr	r3, [pc, #328]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a56      	ldr	r2, [pc, #344]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001e32:	4013      	ands	r3, r2
 8001e34:	0019      	movs	r1, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689a      	ldr	r2, [r3, #8]
 8001e3a:	23c0      	movs	r3, #192	; 0xc0
 8001e3c:	039b      	lsls	r3, r3, #14
 8001e3e:	401a      	ands	r2, r3
 8001e40:	4b4d      	ldr	r3, [pc, #308]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e42:	430a      	orrs	r2, r1
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	4b4c      	ldr	r3, [pc, #304]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e48:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	23c0      	movs	r3, #192	; 0xc0
 8001e50:	029b      	lsls	r3, r3, #10
 8001e52:	401a      	ands	r2, r3
 8001e54:	4b48      	ldr	r3, [pc, #288]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e56:	430a      	orrs	r2, r1
 8001e58:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2220      	movs	r2, #32
 8001e60:	4013      	ands	r3, r2
 8001e62:	d01f      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	23c0      	movs	r3, #192	; 0xc0
 8001e6a:	029b      	lsls	r3, r3, #10
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	23c0      	movs	r3, #192	; 0xc0
 8001e70:	029b      	lsls	r3, r3, #10
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d10c      	bne.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001e76:	4b40      	ldr	r3, [pc, #256]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a44      	ldr	r2, [pc, #272]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	0019      	movs	r1, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	23c0      	movs	r3, #192	; 0xc0
 8001e86:	039b      	lsls	r3, r3, #14
 8001e88:	401a      	ands	r2, r3
 8001e8a:	4b3b      	ldr	r3, [pc, #236]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	4b39      	ldr	r3, [pc, #228]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e92:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	23c0      	movs	r3, #192	; 0xc0
 8001e9a:	029b      	lsls	r3, r3, #10
 8001e9c:	401a      	ands	r2, r3
 8001e9e:	4b36      	ldr	r3, [pc, #216]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ea4:	2317      	movs	r3, #23
 8001ea6:	18fb      	adds	r3, r7, r3
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d105      	bne.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eae:	4b32      	ldr	r3, [pc, #200]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eb2:	4b31      	ldr	r3, [pc, #196]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001eb4:	4936      	ldr	r1, [pc, #216]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001eb6:	400a      	ands	r2, r1
 8001eb8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d009      	beq.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ec4:	4b2c      	ldr	r3, [pc, #176]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec8:	2203      	movs	r2, #3
 8001eca:	4393      	bics	r3, r2
 8001ecc:	0019      	movs	r1, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	4b29      	ldr	r3, [pc, #164]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2202      	movs	r2, #2
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d009      	beq.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ee2:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee6:	220c      	movs	r2, #12
 8001ee8:	4393      	bics	r3, r2
 8001eea:	0019      	movs	r1, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691a      	ldr	r2, [r3, #16]
 8001ef0:	4b21      	ldr	r3, [pc, #132]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2204      	movs	r2, #4
 8001efc:	4013      	ands	r3, r2
 8001efe:	d009      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f00:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f04:	4a23      	ldr	r2, [pc, #140]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8001f06:	4013      	ands	r3, r2
 8001f08:	0019      	movs	r1, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695a      	ldr	r2, [r3, #20]
 8001f0e:	4b1a      	ldr	r3, [pc, #104]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f10:	430a      	orrs	r2, r1
 8001f12:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2208      	movs	r2, #8
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d009      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f1e:	4b16      	ldr	r3, [pc, #88]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f22:	4a1d      	ldr	r2, [pc, #116]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001f24:	4013      	ands	r3, r2
 8001f26:	0019      	movs	r1, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	699a      	ldr	r2, [r3, #24]
 8001f2c:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2240      	movs	r2, #64	; 0x40
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d009      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f3c:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f40:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	0019      	movs	r1, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a1a      	ldr	r2, [r3, #32]
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2280      	movs	r2, #128	; 0x80
 8001f56:	4013      	ands	r3, r2
 8001f58:	d009      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001f5a:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5e:	4a10      	ldr	r2, [pc, #64]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	0019      	movs	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	69da      	ldr	r2, [r3, #28]
 8001f68:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	0018      	movs	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b006      	add	sp, #24
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40007000 	.word	0x40007000
 8001f80:	fffcffff 	.word	0xfffcffff
 8001f84:	fff7ffff 	.word	0xfff7ffff
 8001f88:	00001388 	.word	0x00001388
 8001f8c:	ffcfffff 	.word	0xffcfffff
 8001f90:	efffffff 	.word	0xefffffff
 8001f94:	fffff3ff 	.word	0xfffff3ff
 8001f98:	ffffcfff 	.word	0xffffcfff
 8001f9c:	fbffffff 	.word	0xfbffffff
 8001fa0:	fff3ffff 	.word	0xfff3ffff

08001fa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e032      	b.n	800201c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2239      	movs	r2, #57	; 0x39
 8001fba:	5c9b      	ldrb	r3, [r3, r2]
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d107      	bne.n	8001fd2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2238      	movs	r2, #56	; 0x38
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f000 f829 	bl	8002024 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2239      	movs	r2, #57	; 0x39
 8001fd6:	2102      	movs	r1, #2
 8001fd8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	0019      	movs	r1, r3
 8001fe4:	0010      	movs	r0, r2
 8001fe6:	f000 f979 	bl	80022dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	223e      	movs	r2, #62	; 0x3e
 8001fee:	2101      	movs	r1, #1
 8001ff0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	223a      	movs	r2, #58	; 0x3a
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	5499      	strb	r1, [r3, r2]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	223b      	movs	r2, #59	; 0x3b
 8001ffe:	2101      	movs	r1, #1
 8002000:	5499      	strb	r1, [r3, r2]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	223c      	movs	r2, #60	; 0x3c
 8002006:	2101      	movs	r1, #1
 8002008:	5499      	strb	r1, [r3, r2]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	223d      	movs	r2, #61	; 0x3d
 800200e:	2101      	movs	r1, #1
 8002010:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2239      	movs	r2, #57	; 0x39
 8002016:	2101      	movs	r1, #1
 8002018:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	0018      	movs	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	b002      	add	sp, #8
 8002022:	bd80      	pop	{r7, pc}

08002024 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800202c:	46c0      	nop			; (mov r8, r8)
 800202e:	46bd      	mov	sp, r7
 8002030:	b002      	add	sp, #8
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2239      	movs	r2, #57	; 0x39
 8002040:	5c9b      	ldrb	r3, [r3, r2]
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b01      	cmp	r3, #1
 8002046:	d001      	beq.n	800204c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e036      	b.n	80020ba <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2239      	movs	r2, #57	; 0x39
 8002050:	2102      	movs	r1, #2
 8002052:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2101      	movs	r1, #1
 8002060:	430a      	orrs	r2, r1
 8002062:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	2380      	movs	r3, #128	; 0x80
 800206a:	05db      	lsls	r3, r3, #23
 800206c:	429a      	cmp	r2, r3
 800206e:	d009      	beq.n	8002084 <HAL_TIM_Base_Start_IT+0x50>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a13      	ldr	r2, [pc, #76]	; (80020c4 <HAL_TIM_Base_Start_IT+0x90>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d004      	beq.n	8002084 <HAL_TIM_Base_Start_IT+0x50>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a12      	ldr	r2, [pc, #72]	; (80020c8 <HAL_TIM_Base_Start_IT+0x94>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d111      	bne.n	80020a8 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2207      	movs	r2, #7
 800208c:	4013      	ands	r3, r2
 800208e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2b06      	cmp	r3, #6
 8002094:	d010      	beq.n	80020b8 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2101      	movs	r1, #1
 80020a2:	430a      	orrs	r2, r1
 80020a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020a6:	e007      	b.n	80020b8 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2101      	movs	r1, #1
 80020b4:	430a      	orrs	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	0018      	movs	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	b004      	add	sp, #16
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	40010800 	.word	0x40010800
 80020c8:	40011400 	.word	0x40011400

080020cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	2202      	movs	r2, #2
 80020dc:	4013      	ands	r3, r2
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d124      	bne.n	800212c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	2202      	movs	r2, #2
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d11d      	bne.n	800212c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2203      	movs	r2, #3
 80020f6:	4252      	negs	r2, r2
 80020f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	2203      	movs	r2, #3
 8002108:	4013      	ands	r3, r2
 800210a:	d004      	beq.n	8002116 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	0018      	movs	r0, r3
 8002110:	f000 f8cc 	bl	80022ac <HAL_TIM_IC_CaptureCallback>
 8002114:	e007      	b.n	8002126 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	0018      	movs	r0, r3
 800211a:	f000 f8bf 	bl	800229c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	0018      	movs	r0, r3
 8002122:	f000 f8cb 	bl	80022bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	2204      	movs	r2, #4
 8002134:	4013      	ands	r3, r2
 8002136:	2b04      	cmp	r3, #4
 8002138:	d125      	bne.n	8002186 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	2204      	movs	r2, #4
 8002142:	4013      	ands	r3, r2
 8002144:	2b04      	cmp	r3, #4
 8002146:	d11e      	bne.n	8002186 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2205      	movs	r2, #5
 800214e:	4252      	negs	r2, r2
 8002150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2202      	movs	r2, #2
 8002156:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699a      	ldr	r2, [r3, #24]
 800215e:	23c0      	movs	r3, #192	; 0xc0
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4013      	ands	r3, r2
 8002164:	d004      	beq.n	8002170 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	0018      	movs	r0, r3
 800216a:	f000 f89f 	bl	80022ac <HAL_TIM_IC_CaptureCallback>
 800216e:	e007      	b.n	8002180 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	0018      	movs	r0, r3
 8002174:	f000 f892 	bl	800229c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	0018      	movs	r0, r3
 800217c:	f000 f89e 	bl	80022bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	2208      	movs	r2, #8
 800218e:	4013      	ands	r3, r2
 8002190:	2b08      	cmp	r3, #8
 8002192:	d124      	bne.n	80021de <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	2208      	movs	r2, #8
 800219c:	4013      	ands	r3, r2
 800219e:	2b08      	cmp	r3, #8
 80021a0:	d11d      	bne.n	80021de <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2209      	movs	r2, #9
 80021a8:	4252      	negs	r2, r2
 80021aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2204      	movs	r2, #4
 80021b0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	69db      	ldr	r3, [r3, #28]
 80021b8:	2203      	movs	r2, #3
 80021ba:	4013      	ands	r3, r2
 80021bc:	d004      	beq.n	80021c8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	0018      	movs	r0, r3
 80021c2:	f000 f873 	bl	80022ac <HAL_TIM_IC_CaptureCallback>
 80021c6:	e007      	b.n	80021d8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	0018      	movs	r0, r3
 80021cc:	f000 f866 	bl	800229c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	0018      	movs	r0, r3
 80021d4:	f000 f872 	bl	80022bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	2210      	movs	r2, #16
 80021e6:	4013      	ands	r3, r2
 80021e8:	2b10      	cmp	r3, #16
 80021ea:	d125      	bne.n	8002238 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	2210      	movs	r2, #16
 80021f4:	4013      	ands	r3, r2
 80021f6:	2b10      	cmp	r3, #16
 80021f8:	d11e      	bne.n	8002238 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2211      	movs	r2, #17
 8002200:	4252      	negs	r2, r2
 8002202:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2208      	movs	r2, #8
 8002208:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	69da      	ldr	r2, [r3, #28]
 8002210:	23c0      	movs	r3, #192	; 0xc0
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4013      	ands	r3, r2
 8002216:	d004      	beq.n	8002222 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	0018      	movs	r0, r3
 800221c:	f000 f846 	bl	80022ac <HAL_TIM_IC_CaptureCallback>
 8002220:	e007      	b.n	8002232 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	0018      	movs	r0, r3
 8002226:	f000 f839 	bl	800229c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	0018      	movs	r0, r3
 800222e:	f000 f845 	bl	80022bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	2201      	movs	r2, #1
 8002240:	4013      	ands	r3, r2
 8002242:	2b01      	cmp	r3, #1
 8002244:	d10f      	bne.n	8002266 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	2201      	movs	r2, #1
 800224e:	4013      	ands	r3, r2
 8002250:	2b01      	cmp	r3, #1
 8002252:	d108      	bne.n	8002266 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2202      	movs	r2, #2
 800225a:	4252      	negs	r2, r2
 800225c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	0018      	movs	r0, r3
 8002262:	f7fe fb1d 	bl	80008a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	2240      	movs	r2, #64	; 0x40
 800226e:	4013      	ands	r3, r2
 8002270:	2b40      	cmp	r3, #64	; 0x40
 8002272:	d10f      	bne.n	8002294 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	2240      	movs	r2, #64	; 0x40
 800227c:	4013      	ands	r3, r2
 800227e:	2b40      	cmp	r3, #64	; 0x40
 8002280:	d108      	bne.n	8002294 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2241      	movs	r2, #65	; 0x41
 8002288:	4252      	negs	r2, r2
 800228a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	0018      	movs	r0, r3
 8002290:	f000 f81c 	bl	80022cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002294:	46c0      	nop			; (mov r8, r8)
 8002296:	46bd      	mov	sp, r7
 8002298:	b002      	add	sp, #8
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022a4:	46c0      	nop			; (mov r8, r8)
 80022a6:	46bd      	mov	sp, r7
 80022a8:	b002      	add	sp, #8
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022b4:	46c0      	nop			; (mov r8, r8)
 80022b6:	46bd      	mov	sp, r7
 80022b8:	b002      	add	sp, #8
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022c4:	46c0      	nop			; (mov r8, r8)
 80022c6:	46bd      	mov	sp, r7
 80022c8:	b002      	add	sp, #8
 80022ca:	bd80      	pop	{r7, pc}

080022cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022d4:	46c0      	nop			; (mov r8, r8)
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b002      	add	sp, #8
 80022da:	bd80      	pop	{r7, pc}

080022dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	2380      	movs	r3, #128	; 0x80
 80022f0:	05db      	lsls	r3, r3, #23
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d007      	beq.n	8002306 <TIM_Base_SetConfig+0x2a>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a1f      	ldr	r2, [pc, #124]	; (8002378 <TIM_Base_SetConfig+0x9c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d003      	beq.n	8002306 <TIM_Base_SetConfig+0x2a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a1e      	ldr	r2, [pc, #120]	; (800237c <TIM_Base_SetConfig+0xa0>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d108      	bne.n	8002318 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2270      	movs	r2, #112	; 0x70
 800230a:	4393      	bics	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	4313      	orrs	r3, r2
 8002316:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	2380      	movs	r3, #128	; 0x80
 800231c:	05db      	lsls	r3, r3, #23
 800231e:	429a      	cmp	r2, r3
 8002320:	d007      	beq.n	8002332 <TIM_Base_SetConfig+0x56>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a14      	ldr	r2, [pc, #80]	; (8002378 <TIM_Base_SetConfig+0x9c>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d003      	beq.n	8002332 <TIM_Base_SetConfig+0x56>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a13      	ldr	r2, [pc, #76]	; (800237c <TIM_Base_SetConfig+0xa0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d108      	bne.n	8002344 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4a12      	ldr	r2, [pc, #72]	; (8002380 <TIM_Base_SetConfig+0xa4>)
 8002336:	4013      	ands	r3, r2
 8002338:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	4313      	orrs	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2280      	movs	r2, #128	; 0x80
 8002348:	4393      	bics	r3, r2
 800234a:	001a      	movs	r2, r3
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	615a      	str	r2, [r3, #20]
}
 8002370:	46c0      	nop			; (mov r8, r8)
 8002372:	46bd      	mov	sp, r7
 8002374:	b004      	add	sp, #16
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40010800 	.word	0x40010800
 800237c:	40011400 	.word	0x40011400
 8002380:	fffffcff 	.word	0xfffffcff

08002384 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e044      	b.n	8002420 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800239a:	2b00      	cmp	r3, #0
 800239c:	d107      	bne.n	80023ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2278      	movs	r2, #120	; 0x78
 80023a2:	2100      	movs	r1, #0
 80023a4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	0018      	movs	r0, r3
 80023aa:	f7fe faad 	bl	8000908 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2224      	movs	r2, #36	; 0x24
 80023b2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2101      	movs	r1, #1
 80023c0:	438a      	bics	r2, r1
 80023c2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	0018      	movs	r0, r3
 80023c8:	f000 f8d0 	bl	800256c <UART_SetConfig>
 80023cc:	0003      	movs	r3, r0
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d101      	bne.n	80023d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e024      	b.n	8002420 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	0018      	movs	r0, r3
 80023e2:	f000 fb47 	bl	8002a74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	490d      	ldr	r1, [pc, #52]	; (8002428 <HAL_UART_Init+0xa4>)
 80023f2:	400a      	ands	r2, r1
 80023f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	212a      	movs	r1, #42	; 0x2a
 8002402:	438a      	bics	r2, r1
 8002404:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2101      	movs	r1, #1
 8002412:	430a      	orrs	r2, r1
 8002414:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	0018      	movs	r0, r3
 800241a:	f000 fbdf 	bl	8002bdc <UART_CheckIdleState>
 800241e:	0003      	movs	r3, r0
}
 8002420:	0018      	movs	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	b002      	add	sp, #8
 8002426:	bd80      	pop	{r7, pc}
 8002428:	ffffb7ff 	.word	0xffffb7ff

0800242c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08a      	sub	sp, #40	; 0x28
 8002430:	af02      	add	r7, sp, #8
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	603b      	str	r3, [r7, #0]
 8002438:	1dbb      	adds	r3, r7, #6
 800243a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002440:	2b20      	cmp	r3, #32
 8002442:	d000      	beq.n	8002446 <HAL_UART_Transmit+0x1a>
 8002444:	e08c      	b.n	8002560 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <HAL_UART_Transmit+0x28>
 800244c:	1dbb      	adds	r3, r7, #6
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e084      	b.n	8002562 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	2380      	movs	r3, #128	; 0x80
 800245e:	015b      	lsls	r3, r3, #5
 8002460:	429a      	cmp	r2, r3
 8002462:	d109      	bne.n	8002478 <HAL_UART_Transmit+0x4c>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d105      	bne.n	8002478 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	2201      	movs	r2, #1
 8002470:	4013      	ands	r3, r2
 8002472:	d001      	beq.n	8002478 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e074      	b.n	8002562 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2284      	movs	r2, #132	; 0x84
 800247c:	2100      	movs	r1, #0
 800247e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2221      	movs	r2, #33	; 0x21
 8002484:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002486:	f7fe fb75 	bl	8000b74 <HAL_GetTick>
 800248a:	0003      	movs	r3, r0
 800248c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	1dba      	adds	r2, r7, #6
 8002492:	2150      	movs	r1, #80	; 0x50
 8002494:	8812      	ldrh	r2, [r2, #0]
 8002496:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	1dba      	adds	r2, r7, #6
 800249c:	2152      	movs	r1, #82	; 0x52
 800249e:	8812      	ldrh	r2, [r2, #0]
 80024a0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	2380      	movs	r3, #128	; 0x80
 80024a8:	015b      	lsls	r3, r3, #5
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d108      	bne.n	80024c0 <HAL_UART_Transmit+0x94>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d104      	bne.n	80024c0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	61bb      	str	r3, [r7, #24]
 80024be:	e003      	b.n	80024c8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80024c8:	e02f      	b.n	800252a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	0013      	movs	r3, r2
 80024d4:	2200      	movs	r2, #0
 80024d6:	2180      	movs	r1, #128	; 0x80
 80024d8:	f000 fc28 	bl	8002d2c <UART_WaitOnFlagUntilTimeout>
 80024dc:	1e03      	subs	r3, r0, #0
 80024de:	d004      	beq.n	80024ea <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2220      	movs	r2, #32
 80024e4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e03b      	b.n	8002562 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10b      	bne.n	8002508 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	001a      	movs	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	05d2      	lsls	r2, r2, #23
 80024fc:	0dd2      	lsrs	r2, r2, #23
 80024fe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	3302      	adds	r3, #2
 8002504:	61bb      	str	r3, [r7, #24]
 8002506:	e007      	b.n	8002518 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	781a      	ldrb	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3301      	adds	r3, #1
 8002516:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2252      	movs	r2, #82	; 0x52
 800251c:	5a9b      	ldrh	r3, [r3, r2]
 800251e:	b29b      	uxth	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b299      	uxth	r1, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2252      	movs	r2, #82	; 0x52
 8002528:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2252      	movs	r2, #82	; 0x52
 800252e:	5a9b      	ldrh	r3, [r3, r2]
 8002530:	b29b      	uxth	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1c9      	bne.n	80024ca <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	0013      	movs	r3, r2
 8002540:	2200      	movs	r2, #0
 8002542:	2140      	movs	r1, #64	; 0x40
 8002544:	f000 fbf2 	bl	8002d2c <UART_WaitOnFlagUntilTimeout>
 8002548:	1e03      	subs	r3, r0, #0
 800254a:	d004      	beq.n	8002556 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2220      	movs	r2, #32
 8002550:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e005      	b.n	8002562 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2220      	movs	r2, #32
 800255a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800255c:	2300      	movs	r3, #0
 800255e:	e000      	b.n	8002562 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002560:	2302      	movs	r3, #2
  }
}
 8002562:	0018      	movs	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	b008      	add	sp, #32
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800256c:	b5b0      	push	{r4, r5, r7, lr}
 800256e:	b08e      	sub	sp, #56	; 0x38
 8002570:	af00      	add	r7, sp, #0
 8002572:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002574:	231a      	movs	r3, #26
 8002576:	2218      	movs	r2, #24
 8002578:	189b      	adds	r3, r3, r2
 800257a:	19db      	adds	r3, r3, r7
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	431a      	orrs	r2, r3
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	431a      	orrs	r2, r3
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	69db      	ldr	r3, [r3, #28]
 8002594:	4313      	orrs	r3, r2
 8002596:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4ac6      	ldr	r2, [pc, #792]	; (80028b8 <UART_SetConfig+0x34c>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	0019      	movs	r1, r3
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025aa:	430a      	orrs	r2, r1
 80025ac:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	4ac1      	ldr	r2, [pc, #772]	; (80028bc <UART_SetConfig+0x350>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	0019      	movs	r1, r3
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4abb      	ldr	r2, [pc, #748]	; (80028c0 <UART_SetConfig+0x354>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d004      	beq.n	80025e0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025dc:	4313      	orrs	r3, r2
 80025de:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	4ab7      	ldr	r2, [pc, #732]	; (80028c4 <UART_SetConfig+0x358>)
 80025e8:	4013      	ands	r3, r2
 80025ea:	0019      	movs	r1, r3
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025f2:	430a      	orrs	r2, r1
 80025f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4ab3      	ldr	r2, [pc, #716]	; (80028c8 <UART_SetConfig+0x35c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d131      	bne.n	8002664 <UART_SetConfig+0xf8>
 8002600:	4bb2      	ldr	r3, [pc, #712]	; (80028cc <UART_SetConfig+0x360>)
 8002602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002604:	2203      	movs	r2, #3
 8002606:	4013      	ands	r3, r2
 8002608:	2b03      	cmp	r3, #3
 800260a:	d01d      	beq.n	8002648 <UART_SetConfig+0xdc>
 800260c:	d823      	bhi.n	8002656 <UART_SetConfig+0xea>
 800260e:	2b02      	cmp	r3, #2
 8002610:	d00c      	beq.n	800262c <UART_SetConfig+0xc0>
 8002612:	d820      	bhi.n	8002656 <UART_SetConfig+0xea>
 8002614:	2b00      	cmp	r3, #0
 8002616:	d002      	beq.n	800261e <UART_SetConfig+0xb2>
 8002618:	2b01      	cmp	r3, #1
 800261a:	d00e      	beq.n	800263a <UART_SetConfig+0xce>
 800261c:	e01b      	b.n	8002656 <UART_SetConfig+0xea>
 800261e:	231b      	movs	r3, #27
 8002620:	2218      	movs	r2, #24
 8002622:	189b      	adds	r3, r3, r2
 8002624:	19db      	adds	r3, r3, r7
 8002626:	2201      	movs	r2, #1
 8002628:	701a      	strb	r2, [r3, #0]
 800262a:	e09c      	b.n	8002766 <UART_SetConfig+0x1fa>
 800262c:	231b      	movs	r3, #27
 800262e:	2218      	movs	r2, #24
 8002630:	189b      	adds	r3, r3, r2
 8002632:	19db      	adds	r3, r3, r7
 8002634:	2202      	movs	r2, #2
 8002636:	701a      	strb	r2, [r3, #0]
 8002638:	e095      	b.n	8002766 <UART_SetConfig+0x1fa>
 800263a:	231b      	movs	r3, #27
 800263c:	2218      	movs	r2, #24
 800263e:	189b      	adds	r3, r3, r2
 8002640:	19db      	adds	r3, r3, r7
 8002642:	2204      	movs	r2, #4
 8002644:	701a      	strb	r2, [r3, #0]
 8002646:	e08e      	b.n	8002766 <UART_SetConfig+0x1fa>
 8002648:	231b      	movs	r3, #27
 800264a:	2218      	movs	r2, #24
 800264c:	189b      	adds	r3, r3, r2
 800264e:	19db      	adds	r3, r3, r7
 8002650:	2208      	movs	r2, #8
 8002652:	701a      	strb	r2, [r3, #0]
 8002654:	e087      	b.n	8002766 <UART_SetConfig+0x1fa>
 8002656:	231b      	movs	r3, #27
 8002658:	2218      	movs	r2, #24
 800265a:	189b      	adds	r3, r3, r2
 800265c:	19db      	adds	r3, r3, r7
 800265e:	2210      	movs	r2, #16
 8002660:	701a      	strb	r2, [r3, #0]
 8002662:	e080      	b.n	8002766 <UART_SetConfig+0x1fa>
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a99      	ldr	r2, [pc, #612]	; (80028d0 <UART_SetConfig+0x364>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d131      	bne.n	80026d2 <UART_SetConfig+0x166>
 800266e:	4b97      	ldr	r3, [pc, #604]	; (80028cc <UART_SetConfig+0x360>)
 8002670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002672:	220c      	movs	r2, #12
 8002674:	4013      	ands	r3, r2
 8002676:	2b0c      	cmp	r3, #12
 8002678:	d01d      	beq.n	80026b6 <UART_SetConfig+0x14a>
 800267a:	d823      	bhi.n	80026c4 <UART_SetConfig+0x158>
 800267c:	2b08      	cmp	r3, #8
 800267e:	d00c      	beq.n	800269a <UART_SetConfig+0x12e>
 8002680:	d820      	bhi.n	80026c4 <UART_SetConfig+0x158>
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <UART_SetConfig+0x120>
 8002686:	2b04      	cmp	r3, #4
 8002688:	d00e      	beq.n	80026a8 <UART_SetConfig+0x13c>
 800268a:	e01b      	b.n	80026c4 <UART_SetConfig+0x158>
 800268c:	231b      	movs	r3, #27
 800268e:	2218      	movs	r2, #24
 8002690:	189b      	adds	r3, r3, r2
 8002692:	19db      	adds	r3, r3, r7
 8002694:	2200      	movs	r2, #0
 8002696:	701a      	strb	r2, [r3, #0]
 8002698:	e065      	b.n	8002766 <UART_SetConfig+0x1fa>
 800269a:	231b      	movs	r3, #27
 800269c:	2218      	movs	r2, #24
 800269e:	189b      	adds	r3, r3, r2
 80026a0:	19db      	adds	r3, r3, r7
 80026a2:	2202      	movs	r2, #2
 80026a4:	701a      	strb	r2, [r3, #0]
 80026a6:	e05e      	b.n	8002766 <UART_SetConfig+0x1fa>
 80026a8:	231b      	movs	r3, #27
 80026aa:	2218      	movs	r2, #24
 80026ac:	189b      	adds	r3, r3, r2
 80026ae:	19db      	adds	r3, r3, r7
 80026b0:	2204      	movs	r2, #4
 80026b2:	701a      	strb	r2, [r3, #0]
 80026b4:	e057      	b.n	8002766 <UART_SetConfig+0x1fa>
 80026b6:	231b      	movs	r3, #27
 80026b8:	2218      	movs	r2, #24
 80026ba:	189b      	adds	r3, r3, r2
 80026bc:	19db      	adds	r3, r3, r7
 80026be:	2208      	movs	r2, #8
 80026c0:	701a      	strb	r2, [r3, #0]
 80026c2:	e050      	b.n	8002766 <UART_SetConfig+0x1fa>
 80026c4:	231b      	movs	r3, #27
 80026c6:	2218      	movs	r2, #24
 80026c8:	189b      	adds	r3, r3, r2
 80026ca:	19db      	adds	r3, r3, r7
 80026cc:	2210      	movs	r2, #16
 80026ce:	701a      	strb	r2, [r3, #0]
 80026d0:	e049      	b.n	8002766 <UART_SetConfig+0x1fa>
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a7a      	ldr	r2, [pc, #488]	; (80028c0 <UART_SetConfig+0x354>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d13e      	bne.n	800275a <UART_SetConfig+0x1ee>
 80026dc:	4b7b      	ldr	r3, [pc, #492]	; (80028cc <UART_SetConfig+0x360>)
 80026de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026e0:	23c0      	movs	r3, #192	; 0xc0
 80026e2:	011b      	lsls	r3, r3, #4
 80026e4:	4013      	ands	r3, r2
 80026e6:	22c0      	movs	r2, #192	; 0xc0
 80026e8:	0112      	lsls	r2, r2, #4
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d027      	beq.n	800273e <UART_SetConfig+0x1d2>
 80026ee:	22c0      	movs	r2, #192	; 0xc0
 80026f0:	0112      	lsls	r2, r2, #4
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d82a      	bhi.n	800274c <UART_SetConfig+0x1e0>
 80026f6:	2280      	movs	r2, #128	; 0x80
 80026f8:	0112      	lsls	r2, r2, #4
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d011      	beq.n	8002722 <UART_SetConfig+0x1b6>
 80026fe:	2280      	movs	r2, #128	; 0x80
 8002700:	0112      	lsls	r2, r2, #4
 8002702:	4293      	cmp	r3, r2
 8002704:	d822      	bhi.n	800274c <UART_SetConfig+0x1e0>
 8002706:	2b00      	cmp	r3, #0
 8002708:	d004      	beq.n	8002714 <UART_SetConfig+0x1a8>
 800270a:	2280      	movs	r2, #128	; 0x80
 800270c:	00d2      	lsls	r2, r2, #3
 800270e:	4293      	cmp	r3, r2
 8002710:	d00e      	beq.n	8002730 <UART_SetConfig+0x1c4>
 8002712:	e01b      	b.n	800274c <UART_SetConfig+0x1e0>
 8002714:	231b      	movs	r3, #27
 8002716:	2218      	movs	r2, #24
 8002718:	189b      	adds	r3, r3, r2
 800271a:	19db      	adds	r3, r3, r7
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
 8002720:	e021      	b.n	8002766 <UART_SetConfig+0x1fa>
 8002722:	231b      	movs	r3, #27
 8002724:	2218      	movs	r2, #24
 8002726:	189b      	adds	r3, r3, r2
 8002728:	19db      	adds	r3, r3, r7
 800272a:	2202      	movs	r2, #2
 800272c:	701a      	strb	r2, [r3, #0]
 800272e:	e01a      	b.n	8002766 <UART_SetConfig+0x1fa>
 8002730:	231b      	movs	r3, #27
 8002732:	2218      	movs	r2, #24
 8002734:	189b      	adds	r3, r3, r2
 8002736:	19db      	adds	r3, r3, r7
 8002738:	2204      	movs	r2, #4
 800273a:	701a      	strb	r2, [r3, #0]
 800273c:	e013      	b.n	8002766 <UART_SetConfig+0x1fa>
 800273e:	231b      	movs	r3, #27
 8002740:	2218      	movs	r2, #24
 8002742:	189b      	adds	r3, r3, r2
 8002744:	19db      	adds	r3, r3, r7
 8002746:	2208      	movs	r2, #8
 8002748:	701a      	strb	r2, [r3, #0]
 800274a:	e00c      	b.n	8002766 <UART_SetConfig+0x1fa>
 800274c:	231b      	movs	r3, #27
 800274e:	2218      	movs	r2, #24
 8002750:	189b      	adds	r3, r3, r2
 8002752:	19db      	adds	r3, r3, r7
 8002754:	2210      	movs	r2, #16
 8002756:	701a      	strb	r2, [r3, #0]
 8002758:	e005      	b.n	8002766 <UART_SetConfig+0x1fa>
 800275a:	231b      	movs	r3, #27
 800275c:	2218      	movs	r2, #24
 800275e:	189b      	adds	r3, r3, r2
 8002760:	19db      	adds	r3, r3, r7
 8002762:	2210      	movs	r2, #16
 8002764:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a55      	ldr	r2, [pc, #340]	; (80028c0 <UART_SetConfig+0x354>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d000      	beq.n	8002772 <UART_SetConfig+0x206>
 8002770:	e084      	b.n	800287c <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002772:	231b      	movs	r3, #27
 8002774:	2218      	movs	r2, #24
 8002776:	189b      	adds	r3, r3, r2
 8002778:	19db      	adds	r3, r3, r7
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b08      	cmp	r3, #8
 800277e:	d01d      	beq.n	80027bc <UART_SetConfig+0x250>
 8002780:	dc20      	bgt.n	80027c4 <UART_SetConfig+0x258>
 8002782:	2b04      	cmp	r3, #4
 8002784:	d015      	beq.n	80027b2 <UART_SetConfig+0x246>
 8002786:	dc1d      	bgt.n	80027c4 <UART_SetConfig+0x258>
 8002788:	2b00      	cmp	r3, #0
 800278a:	d002      	beq.n	8002792 <UART_SetConfig+0x226>
 800278c:	2b02      	cmp	r3, #2
 800278e:	d005      	beq.n	800279c <UART_SetConfig+0x230>
 8002790:	e018      	b.n	80027c4 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002792:	f7ff fa1b 	bl	8001bcc <HAL_RCC_GetPCLK1Freq>
 8002796:	0003      	movs	r3, r0
 8002798:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800279a:	e01c      	b.n	80027d6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800279c:	4b4b      	ldr	r3, [pc, #300]	; (80028cc <UART_SetConfig+0x360>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2210      	movs	r2, #16
 80027a2:	4013      	ands	r3, r2
 80027a4:	d002      	beq.n	80027ac <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80027a6:	4b4b      	ldr	r3, [pc, #300]	; (80028d4 <UART_SetConfig+0x368>)
 80027a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80027aa:	e014      	b.n	80027d6 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 80027ac:	4b4a      	ldr	r3, [pc, #296]	; (80028d8 <UART_SetConfig+0x36c>)
 80027ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027b0:	e011      	b.n	80027d6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027b2:	f7ff f95b 	bl	8001a6c <HAL_RCC_GetSysClockFreq>
 80027b6:	0003      	movs	r3, r0
 80027b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027ba:	e00c      	b.n	80027d6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027bc:	2380      	movs	r3, #128	; 0x80
 80027be:	021b      	lsls	r3, r3, #8
 80027c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027c2:	e008      	b.n	80027d6 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80027c8:	231a      	movs	r3, #26
 80027ca:	2218      	movs	r2, #24
 80027cc:	189b      	adds	r3, r3, r2
 80027ce:	19db      	adds	r3, r3, r7
 80027d0:	2201      	movs	r2, #1
 80027d2:	701a      	strb	r2, [r3, #0]
        break;
 80027d4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80027d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d100      	bne.n	80027de <UART_SetConfig+0x272>
 80027dc:	e132      	b.n	8002a44 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	0013      	movs	r3, r2
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	189b      	adds	r3, r3, r2
 80027e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d305      	bcc.n	80027fa <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80027f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d906      	bls.n	8002808 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 80027fa:	231a      	movs	r3, #26
 80027fc:	2218      	movs	r2, #24
 80027fe:	189b      	adds	r3, r3, r2
 8002800:	19db      	adds	r3, r3, r7
 8002802:	2201      	movs	r2, #1
 8002804:	701a      	strb	r2, [r3, #0]
 8002806:	e11d      	b.n	8002a44 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	6939      	ldr	r1, [r7, #16]
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	000b      	movs	r3, r1
 8002816:	0e1b      	lsrs	r3, r3, #24
 8002818:	0010      	movs	r0, r2
 800281a:	0205      	lsls	r5, r0, #8
 800281c:	431d      	orrs	r5, r3
 800281e:	000b      	movs	r3, r1
 8002820:	021c      	lsls	r4, r3, #8
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	085b      	lsrs	r3, r3, #1
 8002828:	60bb      	str	r3, [r7, #8]
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	68b8      	ldr	r0, [r7, #8]
 8002830:	68f9      	ldr	r1, [r7, #12]
 8002832:	1900      	adds	r0, r0, r4
 8002834:	4169      	adcs	r1, r5
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	2300      	movs	r3, #0
 800283e:	607b      	str	r3, [r7, #4]
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f7fd fcf4 	bl	8000230 <__aeabi_uldivmod>
 8002848:	0002      	movs	r2, r0
 800284a:	000b      	movs	r3, r1
 800284c:	0013      	movs	r3, r2
 800284e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002850:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002852:	23c0      	movs	r3, #192	; 0xc0
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	429a      	cmp	r2, r3
 8002858:	d309      	bcc.n	800286e <UART_SetConfig+0x302>
 800285a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800285c:	2380      	movs	r3, #128	; 0x80
 800285e:	035b      	lsls	r3, r3, #13
 8002860:	429a      	cmp	r2, r3
 8002862:	d204      	bcs.n	800286e <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800286a:	60da      	str	r2, [r3, #12]
 800286c:	e0ea      	b.n	8002a44 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 800286e:	231a      	movs	r3, #26
 8002870:	2218      	movs	r2, #24
 8002872:	189b      	adds	r3, r3, r2
 8002874:	19db      	adds	r3, r3, r7
 8002876:	2201      	movs	r2, #1
 8002878:	701a      	strb	r2, [r3, #0]
 800287a:	e0e3      	b.n	8002a44 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	69da      	ldr	r2, [r3, #28]
 8002880:	2380      	movs	r3, #128	; 0x80
 8002882:	021b      	lsls	r3, r3, #8
 8002884:	429a      	cmp	r2, r3
 8002886:	d000      	beq.n	800288a <UART_SetConfig+0x31e>
 8002888:	e085      	b.n	8002996 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 800288a:	231b      	movs	r3, #27
 800288c:	2218      	movs	r2, #24
 800288e:	189b      	adds	r3, r3, r2
 8002890:	19db      	adds	r3, r3, r7
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b08      	cmp	r3, #8
 8002896:	d837      	bhi.n	8002908 <UART_SetConfig+0x39c>
 8002898:	009a      	lsls	r2, r3, #2
 800289a:	4b10      	ldr	r3, [pc, #64]	; (80028dc <UART_SetConfig+0x370>)
 800289c:	18d3      	adds	r3, r2, r3
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028a2:	f7ff f993 	bl	8001bcc <HAL_RCC_GetPCLK1Freq>
 80028a6:	0003      	movs	r3, r0
 80028a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028aa:	e036      	b.n	800291a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80028ac:	f7ff f9a4 	bl	8001bf8 <HAL_RCC_GetPCLK2Freq>
 80028b0:	0003      	movs	r3, r0
 80028b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028b4:	e031      	b.n	800291a <UART_SetConfig+0x3ae>
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	efff69f3 	.word	0xefff69f3
 80028bc:	ffffcfff 	.word	0xffffcfff
 80028c0:	40004800 	.word	0x40004800
 80028c4:	fffff4ff 	.word	0xfffff4ff
 80028c8:	40013800 	.word	0x40013800
 80028cc:	40021000 	.word	0x40021000
 80028d0:	40004400 	.word	0x40004400
 80028d4:	003d0900 	.word	0x003d0900
 80028d8:	00f42400 	.word	0x00f42400
 80028dc:	08005164 	.word	0x08005164
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028e0:	4b60      	ldr	r3, [pc, #384]	; (8002a64 <UART_SetConfig+0x4f8>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2210      	movs	r2, #16
 80028e6:	4013      	ands	r3, r2
 80028e8:	d002      	beq.n	80028f0 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80028ea:	4b5f      	ldr	r3, [pc, #380]	; (8002a68 <UART_SetConfig+0x4fc>)
 80028ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80028ee:	e014      	b.n	800291a <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 80028f0:	4b5e      	ldr	r3, [pc, #376]	; (8002a6c <UART_SetConfig+0x500>)
 80028f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028f4:	e011      	b.n	800291a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028f6:	f7ff f8b9 	bl	8001a6c <HAL_RCC_GetSysClockFreq>
 80028fa:	0003      	movs	r3, r0
 80028fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028fe:	e00c      	b.n	800291a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002900:	2380      	movs	r3, #128	; 0x80
 8002902:	021b      	lsls	r3, r3, #8
 8002904:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002906:	e008      	b.n	800291a <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8002908:	2300      	movs	r3, #0
 800290a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800290c:	231a      	movs	r3, #26
 800290e:	2218      	movs	r2, #24
 8002910:	189b      	adds	r3, r3, r2
 8002912:	19db      	adds	r3, r3, r7
 8002914:	2201      	movs	r2, #1
 8002916:	701a      	strb	r2, [r3, #0]
        break;
 8002918:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800291a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291c:	2b00      	cmp	r3, #0
 800291e:	d100      	bne.n	8002922 <UART_SetConfig+0x3b6>
 8002920:	e090      	b.n	8002a44 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002924:	005a      	lsls	r2, r3, #1
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	085b      	lsrs	r3, r3, #1
 800292c:	18d2      	adds	r2, r2, r3
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	0019      	movs	r1, r3
 8002934:	0010      	movs	r0, r2
 8002936:	f7fd fbef 	bl	8000118 <__udivsi3>
 800293a:	0003      	movs	r3, r0
 800293c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800293e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002940:	2b0f      	cmp	r3, #15
 8002942:	d921      	bls.n	8002988 <UART_SetConfig+0x41c>
 8002944:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002946:	2380      	movs	r3, #128	; 0x80
 8002948:	025b      	lsls	r3, r3, #9
 800294a:	429a      	cmp	r2, r3
 800294c:	d21c      	bcs.n	8002988 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800294e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002950:	b29a      	uxth	r2, r3
 8002952:	200e      	movs	r0, #14
 8002954:	2418      	movs	r4, #24
 8002956:	1903      	adds	r3, r0, r4
 8002958:	19db      	adds	r3, r3, r7
 800295a:	210f      	movs	r1, #15
 800295c:	438a      	bics	r2, r1
 800295e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002962:	085b      	lsrs	r3, r3, #1
 8002964:	b29b      	uxth	r3, r3
 8002966:	2207      	movs	r2, #7
 8002968:	4013      	ands	r3, r2
 800296a:	b299      	uxth	r1, r3
 800296c:	1903      	adds	r3, r0, r4
 800296e:	19db      	adds	r3, r3, r7
 8002970:	1902      	adds	r2, r0, r4
 8002972:	19d2      	adds	r2, r2, r7
 8002974:	8812      	ldrh	r2, [r2, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	1902      	adds	r2, r0, r4
 8002980:	19d2      	adds	r2, r2, r7
 8002982:	8812      	ldrh	r2, [r2, #0]
 8002984:	60da      	str	r2, [r3, #12]
 8002986:	e05d      	b.n	8002a44 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002988:	231a      	movs	r3, #26
 800298a:	2218      	movs	r2, #24
 800298c:	189b      	adds	r3, r3, r2
 800298e:	19db      	adds	r3, r3, r7
 8002990:	2201      	movs	r2, #1
 8002992:	701a      	strb	r2, [r3, #0]
 8002994:	e056      	b.n	8002a44 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002996:	231b      	movs	r3, #27
 8002998:	2218      	movs	r2, #24
 800299a:	189b      	adds	r3, r3, r2
 800299c:	19db      	adds	r3, r3, r7
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d822      	bhi.n	80029ea <UART_SetConfig+0x47e>
 80029a4:	009a      	lsls	r2, r3, #2
 80029a6:	4b32      	ldr	r3, [pc, #200]	; (8002a70 <UART_SetConfig+0x504>)
 80029a8:	18d3      	adds	r3, r2, r3
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029ae:	f7ff f90d 	bl	8001bcc <HAL_RCC_GetPCLK1Freq>
 80029b2:	0003      	movs	r3, r0
 80029b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029b6:	e021      	b.n	80029fc <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80029b8:	f7ff f91e 	bl	8001bf8 <HAL_RCC_GetPCLK2Freq>
 80029bc:	0003      	movs	r3, r0
 80029be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029c0:	e01c      	b.n	80029fc <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029c2:	4b28      	ldr	r3, [pc, #160]	; (8002a64 <UART_SetConfig+0x4f8>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2210      	movs	r2, #16
 80029c8:	4013      	ands	r3, r2
 80029ca:	d002      	beq.n	80029d2 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80029cc:	4b26      	ldr	r3, [pc, #152]	; (8002a68 <UART_SetConfig+0x4fc>)
 80029ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80029d0:	e014      	b.n	80029fc <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 80029d2:	4b26      	ldr	r3, [pc, #152]	; (8002a6c <UART_SetConfig+0x500>)
 80029d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029d6:	e011      	b.n	80029fc <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029d8:	f7ff f848 	bl	8001a6c <HAL_RCC_GetSysClockFreq>
 80029dc:	0003      	movs	r3, r0
 80029de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029e0:	e00c      	b.n	80029fc <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029e2:	2380      	movs	r3, #128	; 0x80
 80029e4:	021b      	lsls	r3, r3, #8
 80029e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029e8:	e008      	b.n	80029fc <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80029ee:	231a      	movs	r3, #26
 80029f0:	2218      	movs	r2, #24
 80029f2:	189b      	adds	r3, r3, r2
 80029f4:	19db      	adds	r3, r3, r7
 80029f6:	2201      	movs	r2, #1
 80029f8:	701a      	strb	r2, [r3, #0]
        break;
 80029fa:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80029fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d020      	beq.n	8002a44 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	085a      	lsrs	r2, r3, #1
 8002a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0a:	18d2      	adds	r2, r2, r3
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	0019      	movs	r1, r3
 8002a12:	0010      	movs	r0, r2
 8002a14:	f7fd fb80 	bl	8000118 <__udivsi3>
 8002a18:	0003      	movs	r3, r0
 8002a1a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1e:	2b0f      	cmp	r3, #15
 8002a20:	d90a      	bls.n	8002a38 <UART_SetConfig+0x4cc>
 8002a22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a24:	2380      	movs	r3, #128	; 0x80
 8002a26:	025b      	lsls	r3, r3, #9
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d205      	bcs.n	8002a38 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	60da      	str	r2, [r3, #12]
 8002a36:	e005      	b.n	8002a44 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002a38:	231a      	movs	r3, #26
 8002a3a:	2218      	movs	r2, #24
 8002a3c:	189b      	adds	r3, r3, r2
 8002a3e:	19db      	adds	r3, r3, r7
 8002a40:	2201      	movs	r2, #1
 8002a42:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	2200      	movs	r2, #0
 8002a48:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002a50:	231a      	movs	r3, #26
 8002a52:	2218      	movs	r2, #24
 8002a54:	189b      	adds	r3, r3, r2
 8002a56:	19db      	adds	r3, r3, r7
 8002a58:	781b      	ldrb	r3, [r3, #0]
}
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	b00e      	add	sp, #56	; 0x38
 8002a60:	bdb0      	pop	{r4, r5, r7, pc}
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	40021000 	.word	0x40021000
 8002a68:	003d0900 	.word	0x003d0900
 8002a6c:	00f42400 	.word	0x00f42400
 8002a70:	08005188 	.word	0x08005188

08002a74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	2201      	movs	r2, #1
 8002a82:	4013      	ands	r3, r2
 8002a84:	d00b      	beq.n	8002a9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	4a4a      	ldr	r2, [pc, #296]	; (8002bb8 <UART_AdvFeatureConfig+0x144>)
 8002a8e:	4013      	ands	r3, r2
 8002a90:	0019      	movs	r1, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d00b      	beq.n	8002ac0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	4a43      	ldr	r2, [pc, #268]	; (8002bbc <UART_AdvFeatureConfig+0x148>)
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	0019      	movs	r1, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	2204      	movs	r2, #4
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d00b      	beq.n	8002ae2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	4a3b      	ldr	r2, [pc, #236]	; (8002bc0 <UART_AdvFeatureConfig+0x14c>)
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	0019      	movs	r1, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	2208      	movs	r2, #8
 8002ae8:	4013      	ands	r3, r2
 8002aea:	d00b      	beq.n	8002b04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	4a34      	ldr	r2, [pc, #208]	; (8002bc4 <UART_AdvFeatureConfig+0x150>)
 8002af4:	4013      	ands	r3, r2
 8002af6:	0019      	movs	r1, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	2210      	movs	r2, #16
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d00b      	beq.n	8002b26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	4a2c      	ldr	r2, [pc, #176]	; (8002bc8 <UART_AdvFeatureConfig+0x154>)
 8002b16:	4013      	ands	r3, r2
 8002b18:	0019      	movs	r1, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	d00b      	beq.n	8002b48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	4a25      	ldr	r2, [pc, #148]	; (8002bcc <UART_AdvFeatureConfig+0x158>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	0019      	movs	r1, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	2240      	movs	r2, #64	; 0x40
 8002b4e:	4013      	ands	r3, r2
 8002b50:	d01d      	beq.n	8002b8e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	4a1d      	ldr	r2, [pc, #116]	; (8002bd0 <UART_AdvFeatureConfig+0x15c>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	0019      	movs	r1, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b6e:	2380      	movs	r3, #128	; 0x80
 8002b70:	035b      	lsls	r3, r3, #13
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d10b      	bne.n	8002b8e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	4a15      	ldr	r2, [pc, #84]	; (8002bd4 <UART_AdvFeatureConfig+0x160>)
 8002b7e:	4013      	ands	r3, r2
 8002b80:	0019      	movs	r1, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	2280      	movs	r2, #128	; 0x80
 8002b94:	4013      	ands	r3, r2
 8002b96:	d00b      	beq.n	8002bb0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	4a0e      	ldr	r2, [pc, #56]	; (8002bd8 <UART_AdvFeatureConfig+0x164>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	0019      	movs	r1, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	605a      	str	r2, [r3, #4]
  }
}
 8002bb0:	46c0      	nop			; (mov r8, r8)
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	b002      	add	sp, #8
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	fffdffff 	.word	0xfffdffff
 8002bbc:	fffeffff 	.word	0xfffeffff
 8002bc0:	fffbffff 	.word	0xfffbffff
 8002bc4:	ffff7fff 	.word	0xffff7fff
 8002bc8:	ffffefff 	.word	0xffffefff
 8002bcc:	ffffdfff 	.word	0xffffdfff
 8002bd0:	ffefffff 	.word	0xffefffff
 8002bd4:	ff9fffff 	.word	0xff9fffff
 8002bd8:	fff7ffff 	.word	0xfff7ffff

08002bdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b092      	sub	sp, #72	; 0x48
 8002be0:	af02      	add	r7, sp, #8
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2284      	movs	r2, #132	; 0x84
 8002be8:	2100      	movs	r1, #0
 8002bea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002bec:	f7fd ffc2 	bl	8000b74 <HAL_GetTick>
 8002bf0:	0003      	movs	r3, r0
 8002bf2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2208      	movs	r2, #8
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d12c      	bne.n	8002c5c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c04:	2280      	movs	r2, #128	; 0x80
 8002c06:	0391      	lsls	r1, r2, #14
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	4a46      	ldr	r2, [pc, #280]	; (8002d24 <UART_CheckIdleState+0x148>)
 8002c0c:	9200      	str	r2, [sp, #0]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f000 f88c 	bl	8002d2c <UART_WaitOnFlagUntilTimeout>
 8002c14:	1e03      	subs	r3, r0, #0
 8002c16:	d021      	beq.n	8002c5c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c18:	f3ef 8310 	mrs	r3, PRIMASK
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002c20:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c22:	2301      	movs	r3, #1
 8002c24:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c28:	f383 8810 	msr	PRIMASK, r3
}
 8002c2c:	46c0      	nop			; (mov r8, r8)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2180      	movs	r1, #128	; 0x80
 8002c3a:	438a      	bics	r2, r1
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c44:	f383 8810 	msr	PRIMASK, r3
}
 8002c48:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2278      	movs	r2, #120	; 0x78
 8002c54:	2100      	movs	r1, #0
 8002c56:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e05f      	b.n	8002d1c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2204      	movs	r2, #4
 8002c64:	4013      	ands	r3, r2
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	d146      	bne.n	8002cf8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c6c:	2280      	movs	r2, #128	; 0x80
 8002c6e:	03d1      	lsls	r1, r2, #15
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	4a2c      	ldr	r2, [pc, #176]	; (8002d24 <UART_CheckIdleState+0x148>)
 8002c74:	9200      	str	r2, [sp, #0]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f000 f858 	bl	8002d2c <UART_WaitOnFlagUntilTimeout>
 8002c7c:	1e03      	subs	r3, r0, #0
 8002c7e:	d03b      	beq.n	8002cf8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c80:	f3ef 8310 	mrs	r3, PRIMASK
 8002c84:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c86:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c88:	637b      	str	r3, [r7, #52]	; 0x34
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f383 8810 	msr	PRIMASK, r3
}
 8002c94:	46c0      	nop			; (mov r8, r8)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4921      	ldr	r1, [pc, #132]	; (8002d28 <UART_CheckIdleState+0x14c>)
 8002ca2:	400a      	ands	r2, r1
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f383 8810 	msr	PRIMASK, r3
}
 8002cb0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cb2:	f3ef 8310 	mrs	r3, PRIMASK
 8002cb6:	61bb      	str	r3, [r7, #24]
  return(result);
 8002cb8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cba:	633b      	str	r3, [r7, #48]	; 0x30
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f383 8810 	msr	PRIMASK, r3
}
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	438a      	bics	r2, r1
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cda:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	f383 8810 	msr	PRIMASK, r3
}
 8002ce2:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2280      	movs	r2, #128	; 0x80
 8002ce8:	2120      	movs	r1, #32
 8002cea:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2278      	movs	r2, #120	; 0x78
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e011      	b.n	8002d1c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2280      	movs	r2, #128	; 0x80
 8002d02:	2120      	movs	r1, #32
 8002d04:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2278      	movs	r2, #120	; 0x78
 8002d16:	2100      	movs	r1, #0
 8002d18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b010      	add	sp, #64	; 0x40
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	01ffffff 	.word	0x01ffffff
 8002d28:	fffffedf 	.word	0xfffffedf

08002d2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	603b      	str	r3, [r7, #0]
 8002d38:	1dfb      	adds	r3, r7, #7
 8002d3a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d3c:	e04b      	b.n	8002dd6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	3301      	adds	r3, #1
 8002d42:	d048      	beq.n	8002dd6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d44:	f7fd ff16 	bl	8000b74 <HAL_GetTick>
 8002d48:	0002      	movs	r2, r0
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d302      	bcc.n	8002d5a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e04b      	b.n	8002df6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2204      	movs	r2, #4
 8002d66:	4013      	ands	r3, r2
 8002d68:	d035      	beq.n	8002dd6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	2208      	movs	r2, #8
 8002d72:	4013      	ands	r3, r2
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d111      	bne.n	8002d9c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2208      	movs	r2, #8
 8002d7e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	0018      	movs	r0, r3
 8002d84:	f000 f83c 	bl	8002e00 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2284      	movs	r2, #132	; 0x84
 8002d8c:	2108      	movs	r1, #8
 8002d8e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2278      	movs	r2, #120	; 0x78
 8002d94:	2100      	movs	r1, #0
 8002d96:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e02c      	b.n	8002df6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	69da      	ldr	r2, [r3, #28]
 8002da2:	2380      	movs	r3, #128	; 0x80
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	401a      	ands	r2, r3
 8002da8:	2380      	movs	r3, #128	; 0x80
 8002daa:	011b      	lsls	r3, r3, #4
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d112      	bne.n	8002dd6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2280      	movs	r2, #128	; 0x80
 8002db6:	0112      	lsls	r2, r2, #4
 8002db8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	f000 f81f 	bl	8002e00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2284      	movs	r2, #132	; 0x84
 8002dc6:	2120      	movs	r1, #32
 8002dc8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2278      	movs	r2, #120	; 0x78
 8002dce:	2100      	movs	r1, #0
 8002dd0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e00f      	b.n	8002df6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	69db      	ldr	r3, [r3, #28]
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	4013      	ands	r3, r2
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	425a      	negs	r2, r3
 8002de6:	4153      	adcs	r3, r2
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	001a      	movs	r2, r3
 8002dec:	1dfb      	adds	r3, r7, #7
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d0a4      	beq.n	8002d3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	0018      	movs	r0, r3
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	b004      	add	sp, #16
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b08e      	sub	sp, #56	; 0x38
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e08:	f3ef 8310 	mrs	r3, PRIMASK
 8002e0c:	617b      	str	r3, [r7, #20]
  return(result);
 8002e0e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e10:	637b      	str	r3, [r7, #52]	; 0x34
 8002e12:	2301      	movs	r3, #1
 8002e14:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	f383 8810 	msr	PRIMASK, r3
}
 8002e1c:	46c0      	nop			; (mov r8, r8)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4926      	ldr	r1, [pc, #152]	; (8002ec4 <UART_EndRxTransfer+0xc4>)
 8002e2a:	400a      	ands	r2, r1
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	f383 8810 	msr	PRIMASK, r3
}
 8002e38:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e3a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e3e:	623b      	str	r3, [r7, #32]
  return(result);
 8002e40:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e42:	633b      	str	r3, [r7, #48]	; 0x30
 8002e44:	2301      	movs	r3, #1
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4a:	f383 8810 	msr	PRIMASK, r3
}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	438a      	bics	r2, r1
 8002e5e:	609a      	str	r2, [r3, #8]
 8002e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e62:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e66:	f383 8810 	msr	PRIMASK, r3
}
 8002e6a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d118      	bne.n	8002ea6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e74:	f3ef 8310 	mrs	r3, PRIMASK
 8002e78:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e7a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e7e:	2301      	movs	r3, #1
 8002e80:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f383 8810 	msr	PRIMASK, r3
}
 8002e88:	46c0      	nop			; (mov r8, r8)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2110      	movs	r1, #16
 8002e96:	438a      	bics	r2, r1
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	f383 8810 	msr	PRIMASK, r3
}
 8002ea4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2280      	movs	r2, #128	; 0x80
 8002eaa:	2120      	movs	r1, #32
 8002eac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	b00e      	add	sp, #56	; 0x38
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	fffffedf 	.word	0xfffffedf

08002ec8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	0002      	movs	r2, r0
 8002ed0:	1dbb      	adds	r3, r7, #6
 8002ed2:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002ed8:	1dbb      	adds	r3, r7, #6
 8002eda:	2200      	movs	r2, #0
 8002edc:	5e9b      	ldrsh	r3, [r3, r2]
 8002ede:	2b84      	cmp	r3, #132	; 0x84
 8002ee0:	d006      	beq.n	8002ef0 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8002ee2:	1dbb      	adds	r3, r7, #6
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	5e9a      	ldrsh	r2, [r3, r2]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	18d3      	adds	r3, r2, r3
 8002eec:	3303      	adds	r3, #3
 8002eee:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
}
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	b004      	add	sp, #16
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f00:	f3ef 8305 	mrs	r3, IPSR
 8002f04:	607b      	str	r3, [r7, #4]
  return(result);
 8002f06:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002f08:	1e5a      	subs	r2, r3, #1
 8002f0a:	4193      	sbcs	r3, r2
 8002f0c:	b2db      	uxtb	r3, r3
}
 8002f0e:	0018      	movs	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	b002      	add	sp, #8
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002f1a:	f000 ffed 	bl	8003ef8 <vTaskStartScheduler>
  
  return osOK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	0018      	movs	r0, r3
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002f26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f28:	b089      	sub	sp, #36	; 0x24
 8002f2a:	af04      	add	r7, sp, #16
 8002f2c:	6078      	str	r0, [r7, #4]
 8002f2e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d020      	beq.n	8002f7a <osThreadCreate+0x54>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d01c      	beq.n	8002f7a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685c      	ldr	r4, [r3, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691e      	ldr	r6, [r3, #16]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2208      	movs	r2, #8
 8002f50:	5e9b      	ldrsh	r3, [r3, r2]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f52:	0018      	movs	r0, r3
 8002f54:	f7ff ffb8 	bl	8002ec8 <makeFreeRtosPriority>
              thread_def->buffer, thread_def->controlblock);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	695a      	ldr	r2, [r3, #20]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f60:	6839      	ldr	r1, [r7, #0]
 8002f62:	9302      	str	r3, [sp, #8]
 8002f64:	9201      	str	r2, [sp, #4]
 8002f66:	9000      	str	r0, [sp, #0]
 8002f68:	000b      	movs	r3, r1
 8002f6a:	0032      	movs	r2, r6
 8002f6c:	0029      	movs	r1, r5
 8002f6e:	0020      	movs	r0, r4
 8002f70:	f000 fe26 	bl	8003bc0 <xTaskCreateStatic>
 8002f74:	0003      	movs	r3, r0
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	e01d      	b.n	8002fb6 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685c      	ldr	r4, [r3, #4]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f86:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2208      	movs	r2, #8
 8002f8c:	5e9b      	ldrsh	r3, [r3, r2]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f7ff ff9a 	bl	8002ec8 <makeFreeRtosPriority>
 8002f94:	0001      	movs	r1, r0
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	230c      	movs	r3, #12
 8002f9a:	18fb      	adds	r3, r7, r3
 8002f9c:	9301      	str	r3, [sp, #4]
 8002f9e:	9100      	str	r1, [sp, #0]
 8002fa0:	0013      	movs	r3, r2
 8002fa2:	0032      	movs	r2, r6
 8002fa4:	0029      	movs	r1, r5
 8002fa6:	0020      	movs	r0, r4
 8002fa8:	f000 fe4e 	bl	8003c48 <xTaskCreate>
 8002fac:	0003      	movs	r3, r0
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d001      	beq.n	8002fb6 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	e000      	b.n	8002fb8 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
}
 8002fb8:	0018      	movs	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b005      	add	sp, #20
 8002fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fc0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <osDelay+0x16>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	e000      	b.n	8002fd8 <osDelay+0x18>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f000 ff67 	bl	8003eac <vTaskDelay>
  
  return osOK;
 8002fde:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	b004      	add	sp, #16
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af02      	add	r7, sp, #8
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00f      	beq.n	800301a <osSemaphoreCreate+0x32>
    if (count == 1) {
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d10a      	bne.n	8003016 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2203      	movs	r2, #3
 8003006:	9200      	str	r2, [sp, #0]
 8003008:	2200      	movs	r2, #0
 800300a:	2100      	movs	r1, #0
 800300c:	2001      	movs	r0, #1
 800300e:	f000 f998 	bl	8003342 <xQueueGenericCreateStatic>
 8003012:	0003      	movs	r3, r0
 8003014:	e017      	b.n	8003046 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8003016:	2300      	movs	r3, #0
 8003018:	e015      	b.n	8003046 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d111      	bne.n	8003044 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8003020:	2203      	movs	r2, #3
 8003022:	2100      	movs	r1, #0
 8003024:	2001      	movs	r0, #1
 8003026:	f000 f9d8 	bl	80033da <xQueueGenericCreate>
 800302a:	0003      	movs	r3, r0
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d005      	beq.n	8003040 <osSemaphoreCreate+0x58>
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	2300      	movs	r3, #0
 8003038:	2200      	movs	r2, #0
 800303a:	2100      	movs	r1, #0
 800303c:	f000 fa27 	bl	800348e <xQueueGenericSend>
      return sema;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	e000      	b.n	8003046 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8003044:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8003046:	0018      	movs	r0, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	b004      	add	sp, #16
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800305a:	2300      	movs	r3, #0
 800305c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8003064:	2380      	movs	r3, #128	; 0x80
 8003066:	e036      	b.n	80030d6 <osSemaphoreWait+0x86>
  }
  
  ticks = 0;
 8003068:	2300      	movs	r3, #0
 800306a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	3301      	adds	r3, #1
 8003070:	d103      	bne.n	800307a <osSemaphoreWait+0x2a>
    ticks = portMAX_DELAY;
 8003072:	2301      	movs	r3, #1
 8003074:	425b      	negs	r3, r3
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	e009      	b.n	800308e <osSemaphoreWait+0x3e>
  }
  else if (millisec != 0) {
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d006      	beq.n	800308e <osSemaphoreWait+0x3e>
    ticks = millisec / portTICK_PERIOD_MS;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <osSemaphoreWait+0x3e>
      ticks = 1;
 800308a:	2301      	movs	r3, #1
 800308c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800308e:	f7ff ff34 	bl	8002efa <inHandlerMode>
 8003092:	1e03      	subs	r3, r0, #0
 8003094:	d013      	beq.n	80030be <osSemaphoreWait+0x6e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003096:	2308      	movs	r3, #8
 8003098:	18fa      	adds	r2, r7, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2100      	movs	r1, #0
 800309e:	0018      	movs	r0, r3
 80030a0:	f000 fbf8 	bl	8003894 <xQueueReceiveFromISR>
 80030a4:	0003      	movs	r3, r0
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d001      	beq.n	80030ae <osSemaphoreWait+0x5e>
      return osErrorOS;
 80030aa:	23ff      	movs	r3, #255	; 0xff
 80030ac:	e013      	b.n	80030d6 <osSemaphoreWait+0x86>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00f      	beq.n	80030d4 <osSemaphoreWait+0x84>
 80030b4:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <osSemaphoreWait+0x90>)
 80030b6:	2280      	movs	r2, #128	; 0x80
 80030b8:	0552      	lsls	r2, r2, #21
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	e00a      	b.n	80030d4 <osSemaphoreWait+0x84>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	0011      	movs	r1, r2
 80030c4:	0018      	movs	r0, r3
 80030c6:	f000 fb0b 	bl	80036e0 <xQueueSemaphoreTake>
 80030ca:	0003      	movs	r3, r0
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d001      	beq.n	80030d4 <osSemaphoreWait+0x84>
    return osErrorOS;
 80030d0:	23ff      	movs	r3, #255	; 0xff
 80030d2:	e000      	b.n	80030d6 <osSemaphoreWait+0x86>
  }
  
  return osOK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	0018      	movs	r0, r3
 80030d8:	46bd      	mov	sp, r7
 80030da:	b004      	add	sp, #16
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	e000ed04 	.word	0xe000ed04

080030e4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80030ec:	2300      	movs	r3, #0
 80030ee:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80030f0:	2300      	movs	r3, #0
 80030f2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80030f4:	f7ff ff01 	bl	8002efa <inHandlerMode>
 80030f8:	1e03      	subs	r3, r0, #0
 80030fa:	d013      	beq.n	8003124 <osSemaphoreRelease+0x40>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80030fc:	2308      	movs	r3, #8
 80030fe:	18fa      	adds	r2, r7, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	0011      	movs	r1, r2
 8003104:	0018      	movs	r0, r3
 8003106:	f000 fa86 	bl	8003616 <xQueueGiveFromISR>
 800310a:	0003      	movs	r3, r0
 800310c:	2b01      	cmp	r3, #1
 800310e:	d001      	beq.n	8003114 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8003110:	23ff      	movs	r3, #255	; 0xff
 8003112:	e013      	b.n	800313c <osSemaphoreRelease+0x58>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00f      	beq.n	800313a <osSemaphoreRelease+0x56>
 800311a:	4b0a      	ldr	r3, [pc, #40]	; (8003144 <osSemaphoreRelease+0x60>)
 800311c:	2280      	movs	r2, #128	; 0x80
 800311e:	0552      	lsls	r2, r2, #21
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	e00a      	b.n	800313a <osSemaphoreRelease+0x56>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	2300      	movs	r3, #0
 8003128:	2200      	movs	r2, #0
 800312a:	2100      	movs	r1, #0
 800312c:	f000 f9af 	bl	800348e <xQueueGenericSend>
 8003130:	0003      	movs	r3, r0
 8003132:	2b01      	cmp	r3, #1
 8003134:	d001      	beq.n	800313a <osSemaphoreRelease+0x56>
      result = osErrorOS;
 8003136:	23ff      	movs	r3, #255	; 0xff
 8003138:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800313a:	68fb      	ldr	r3, [r7, #12]
}
 800313c:	0018      	movs	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	b004      	add	sp, #16
 8003142:	bd80      	pop	{r7, pc}
 8003144:	e000ed04 	.word	0xe000ed04

08003148 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3308      	adds	r3, #8
 8003154:	001a      	movs	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	4252      	negs	r2, r2
 8003160:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	3308      	adds	r3, #8
 8003166:	001a      	movs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3308      	adds	r3, #8
 8003170:	001a      	movs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800317c:	46c0      	nop			; (mov r8, r8)
 800317e:	46bd      	mov	sp, r7
 8003180:	b002      	add	sp, #8
 8003182:	bd80      	pop	{r7, pc}

08003184 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	46bd      	mov	sp, r7
 8003196:	b002      	add	sp, #8
 8003198:	bd80      	pop	{r7, pc}

0800319a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b084      	sub	sp, #16
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
 80031a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	1c5a      	adds	r2, r3, #1
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	601a      	str	r2, [r3, #0]
}
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	46bd      	mov	sp, r7
 80031da:	b004      	add	sp, #16
 80031dc:	bd80      	pop	{r7, pc}

080031de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b084      	sub	sp, #16
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
 80031e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	3301      	adds	r3, #1
 80031f2:	d103      	bne.n	80031fc <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	e00c      	b.n	8003216 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3308      	adds	r3, #8
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	e002      	b.n	800320a <vListInsert+0x2c>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	60fb      	str	r3, [r7, #12]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	429a      	cmp	r2, r3
 8003214:	d2f6      	bcs.n	8003204 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	1c5a      	adds	r2, r3, #1
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	601a      	str	r2, [r3, #0]
}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	46bd      	mov	sp, r7
 8003246:	b004      	add	sp, #16
 8003248:	bd80      	pop	{r7, pc}

0800324a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b084      	sub	sp, #16
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6892      	ldr	r2, [r2, #8]
 8003260:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6852      	ldr	r2, [r2, #4]
 800326a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	429a      	cmp	r2, r3
 8003274:	d103      	bne.n	800327e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	1e5a      	subs	r2, r3, #1
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
}
 8003292:	0018      	movs	r0, r3
 8003294:	46bd      	mov	sp, r7
 8003296:	b004      	add	sp, #16
 8003298:	bd80      	pop	{r7, pc}

0800329a <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b084      	sub	sp, #16
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <xQueueGenericReset+0x18>
 80032ae:	b672      	cpsid	i
 80032b0:	e7fe      	b.n	80032b0 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80032b2:	f001 fc0d 	bl	8004ad0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	434b      	muls	r3, r1
 80032c4:	18d2      	adds	r2, r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e0:	1e59      	subs	r1, r3, #1
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	434b      	muls	r3, r1
 80032e8:	18d2      	adds	r2, r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2244      	movs	r2, #68	; 0x44
 80032f2:	21ff      	movs	r1, #255	; 0xff
 80032f4:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2245      	movs	r2, #69	; 0x45
 80032fa:	21ff      	movs	r1, #255	; 0xff
 80032fc:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10d      	bne.n	8003320 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d013      	beq.n	8003334 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	3310      	adds	r3, #16
 8003310:	0018      	movs	r0, r3
 8003312:	f000 fff7 	bl	8004304 <xTaskRemoveFromEventList>
 8003316:	1e03      	subs	r3, r0, #0
 8003318:	d00c      	beq.n	8003334 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800331a:	f001 fbc9 	bl	8004ab0 <vPortYield>
 800331e:	e009      	b.n	8003334 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	3310      	adds	r3, #16
 8003324:	0018      	movs	r0, r3
 8003326:	f7ff ff0f 	bl	8003148 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	3324      	adds	r3, #36	; 0x24
 800332e:	0018      	movs	r0, r3
 8003330:	f7ff ff0a 	bl	8003148 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003334:	f001 fbde 	bl	8004af4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003338:	2301      	movs	r3, #1
}
 800333a:	0018      	movs	r0, r3
 800333c:	46bd      	mov	sp, r7
 800333e:	b004      	add	sp, #16
 8003340:	bd80      	pop	{r7, pc}

08003342 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003342:	b590      	push	{r4, r7, lr}
 8003344:	b089      	sub	sp, #36	; 0x24
 8003346:	af02      	add	r7, sp, #8
 8003348:	60f8      	str	r0, [r7, #12]
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	607a      	str	r2, [r7, #4]
 800334e:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <xQueueGenericCreateStatic+0x18>
 8003356:	b672      	cpsid	i
 8003358:	e7fe      	b.n	8003358 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <xQueueGenericCreateStatic+0x22>
 8003360:	b672      	cpsid	i
 8003362:	e7fe      	b.n	8003362 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <xQueueGenericCreateStatic+0x2e>
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <xQueueGenericCreateStatic+0x32>
 8003370:	2301      	movs	r3, #1
 8003372:	e000      	b.n	8003376 <xQueueGenericCreateStatic+0x34>
 8003374:	2300      	movs	r3, #0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <xQueueGenericCreateStatic+0x3c>
 800337a:	b672      	cpsid	i
 800337c:	e7fe      	b.n	800337c <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d102      	bne.n	800338a <xQueueGenericCreateStatic+0x48>
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <xQueueGenericCreateStatic+0x4c>
 800338a:	2301      	movs	r3, #1
 800338c:	e000      	b.n	8003390 <xQueueGenericCreateStatic+0x4e>
 800338e:	2300      	movs	r3, #0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <xQueueGenericCreateStatic+0x56>
 8003394:	b672      	cpsid	i
 8003396:	e7fe      	b.n	8003396 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003398:	2348      	movs	r3, #72	; 0x48
 800339a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	2b48      	cmp	r3, #72	; 0x48
 80033a0:	d001      	beq.n	80033a6 <xQueueGenericCreateStatic+0x64>
 80033a2:	b672      	cpsid	i
 80033a4:	e7fe      	b.n	80033a4 <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80033a6:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00e      	beq.n	80033d0 <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2246      	movs	r2, #70	; 0x46
 80033b6:	2101      	movs	r1, #1
 80033b8:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80033ba:	2328      	movs	r3, #40	; 0x28
 80033bc:	18fb      	adds	r3, r7, r3
 80033be:	781c      	ldrb	r4, [r3, #0]
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	68b9      	ldr	r1, [r7, #8]
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	0023      	movs	r3, r4
 80033cc:	f000 f83d 	bl	800344a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80033d0:	697b      	ldr	r3, [r7, #20]
	}
 80033d2:	0018      	movs	r0, r3
 80033d4:	46bd      	mov	sp, r7
 80033d6:	b007      	add	sp, #28
 80033d8:	bd90      	pop	{r4, r7, pc}

080033da <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80033da:	b590      	push	{r4, r7, lr}
 80033dc:	b08b      	sub	sp, #44	; 0x2c
 80033de:	af02      	add	r7, sp, #8
 80033e0:	60f8      	str	r0, [r7, #12]
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	1dfb      	adds	r3, r7, #7
 80033e6:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <xQueueGenericCreate+0x18>
 80033ee:	b672      	cpsid	i
 80033f0:	e7fe      	b.n	80033f0 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d102      	bne.n	80033fe <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80033f8:	2300      	movs	r3, #0
 80033fa:	61fb      	str	r3, [r7, #28]
 80033fc:	e003      	b.n	8003406 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	4353      	muls	r3, r2
 8003404:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	3348      	adds	r3, #72	; 0x48
 800340a:	0018      	movs	r0, r3
 800340c:	f001 fbf8 	bl	8004c00 <pvPortMalloc>
 8003410:	0003      	movs	r3, r0
 8003412:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d012      	beq.n	8003440 <xQueueGenericCreate+0x66>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	3348      	adds	r3, #72	; 0x48
 8003422:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	2246      	movs	r2, #70	; 0x46
 8003428:	2100      	movs	r1, #0
 800342a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800342c:	1dfb      	adds	r3, r7, #7
 800342e:	781c      	ldrb	r4, [r3, #0]
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	68b9      	ldr	r1, [r7, #8]
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	0023      	movs	r3, r4
 800343c:	f000 f805 	bl	800344a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003440:	69bb      	ldr	r3, [r7, #24]
	}
 8003442:	0018      	movs	r0, r3
 8003444:	46bd      	mov	sp, r7
 8003446:	b009      	add	sp, #36	; 0x24
 8003448:	bd90      	pop	{r4, r7, pc}

0800344a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b084      	sub	sp, #16
 800344e:	af00      	add	r7, sp, #0
 8003450:	60f8      	str	r0, [r7, #12]
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	607a      	str	r2, [r7, #4]
 8003456:	001a      	movs	r2, r3
 8003458:	1cfb      	adds	r3, r7, #3
 800345a:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d103      	bne.n	800346a <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	e002      	b.n	8003470 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	2101      	movs	r1, #1
 8003480:	0018      	movs	r0, r3
 8003482:	f7ff ff0a 	bl	800329a <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003486:	46c0      	nop			; (mov r8, r8)
 8003488:	46bd      	mov	sp, r7
 800348a:	b004      	add	sp, #16
 800348c:	bd80      	pop	{r7, pc}

0800348e <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b08a      	sub	sp, #40	; 0x28
 8003492:	af00      	add	r7, sp, #0
 8003494:	60f8      	str	r0, [r7, #12]
 8003496:	60b9      	str	r1, [r7, #8]
 8003498:	607a      	str	r2, [r7, #4]
 800349a:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800349c:	2300      	movs	r3, #0
 800349e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <xQueueGenericSend+0x20>
 80034aa:	b672      	cpsid	i
 80034ac:	e7fe      	b.n	80034ac <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d103      	bne.n	80034bc <xQueueGenericSend+0x2e>
 80034b4:	6a3b      	ldr	r3, [r7, #32]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <xQueueGenericSend+0x32>
 80034bc:	2301      	movs	r3, #1
 80034be:	e000      	b.n	80034c2 <xQueueGenericSend+0x34>
 80034c0:	2300      	movs	r3, #0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <xQueueGenericSend+0x3c>
 80034c6:	b672      	cpsid	i
 80034c8:	e7fe      	b.n	80034c8 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d103      	bne.n	80034d8 <xQueueGenericSend+0x4a>
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <xQueueGenericSend+0x4e>
 80034d8:	2301      	movs	r3, #1
 80034da:	e000      	b.n	80034de <xQueueGenericSend+0x50>
 80034dc:	2300      	movs	r3, #0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <xQueueGenericSend+0x58>
 80034e2:	b672      	cpsid	i
 80034e4:	e7fe      	b.n	80034e4 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034e6:	f001 f89f 	bl	8004628 <xTaskGetSchedulerState>
 80034ea:	1e03      	subs	r3, r0, #0
 80034ec:	d102      	bne.n	80034f4 <xQueueGenericSend+0x66>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <xQueueGenericSend+0x6a>
 80034f4:	2301      	movs	r3, #1
 80034f6:	e000      	b.n	80034fa <xQueueGenericSend+0x6c>
 80034f8:	2300      	movs	r3, #0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <xQueueGenericSend+0x74>
 80034fe:	b672      	cpsid	i
 8003500:	e7fe      	b.n	8003500 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003502:	f001 fae5 	bl	8004ad0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350e:	429a      	cmp	r2, r3
 8003510:	d302      	bcc.n	8003518 <xQueueGenericSend+0x8a>
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	2b02      	cmp	r3, #2
 8003516:	d11e      	bne.n	8003556 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	68b9      	ldr	r1, [r7, #8]
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	0018      	movs	r0, r3
 8003520:	f000 fa31 	bl	8003986 <prvCopyDataToQueue>
 8003524:	0003      	movs	r3, r0
 8003526:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	2b00      	cmp	r3, #0
 800352e:	d009      	beq.n	8003544 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	3324      	adds	r3, #36	; 0x24
 8003534:	0018      	movs	r0, r3
 8003536:	f000 fee5 	bl	8004304 <xTaskRemoveFromEventList>
 800353a:	1e03      	subs	r3, r0, #0
 800353c:	d007      	beq.n	800354e <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800353e:	f001 fab7 	bl	8004ab0 <vPortYield>
 8003542:	e004      	b.n	800354e <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800354a:	f001 fab1 	bl	8004ab0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800354e:	f001 fad1 	bl	8004af4 <vPortExitCritical>
				return pdPASS;
 8003552:	2301      	movs	r3, #1
 8003554:	e05b      	b.n	800360e <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d103      	bne.n	8003564 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800355c:	f001 faca 	bl	8004af4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003560:	2300      	movs	r3, #0
 8003562:	e054      	b.n	800360e <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	2b00      	cmp	r3, #0
 8003568:	d106      	bne.n	8003578 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800356a:	2314      	movs	r3, #20
 800356c:	18fb      	adds	r3, r7, r3
 800356e:	0018      	movs	r0, r3
 8003570:	f000 ff24 	bl	80043bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003574:	2301      	movs	r3, #1
 8003576:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003578:	f001 fabc 	bl	8004af4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800357c:	f000 fd0a 	bl	8003f94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003580:	f001 faa6 	bl	8004ad0 <vPortEnterCritical>
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	2244      	movs	r2, #68	; 0x44
 8003588:	5c9b      	ldrb	r3, [r3, r2]
 800358a:	b25b      	sxtb	r3, r3
 800358c:	3301      	adds	r3, #1
 800358e:	d103      	bne.n	8003598 <xQueueGenericSend+0x10a>
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	2244      	movs	r2, #68	; 0x44
 8003594:	2100      	movs	r1, #0
 8003596:	5499      	strb	r1, [r3, r2]
 8003598:	6a3b      	ldr	r3, [r7, #32]
 800359a:	2245      	movs	r2, #69	; 0x45
 800359c:	5c9b      	ldrb	r3, [r3, r2]
 800359e:	b25b      	sxtb	r3, r3
 80035a0:	3301      	adds	r3, #1
 80035a2:	d103      	bne.n	80035ac <xQueueGenericSend+0x11e>
 80035a4:	6a3b      	ldr	r3, [r7, #32]
 80035a6:	2245      	movs	r2, #69	; 0x45
 80035a8:	2100      	movs	r1, #0
 80035aa:	5499      	strb	r1, [r3, r2]
 80035ac:	f001 faa2 	bl	8004af4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035b0:	1d3a      	adds	r2, r7, #4
 80035b2:	2314      	movs	r3, #20
 80035b4:	18fb      	adds	r3, r7, r3
 80035b6:	0011      	movs	r1, r2
 80035b8:	0018      	movs	r0, r3
 80035ba:	f000 ff13 	bl	80043e4 <xTaskCheckForTimeOut>
 80035be:	1e03      	subs	r3, r0, #0
 80035c0:	d11e      	bne.n	8003600 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	0018      	movs	r0, r3
 80035c6:	f000 fae3 	bl	8003b90 <prvIsQueueFull>
 80035ca:	1e03      	subs	r3, r0, #0
 80035cc:	d011      	beq.n	80035f2 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	3310      	adds	r3, #16
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	0011      	movs	r1, r2
 80035d6:	0018      	movs	r0, r3
 80035d8:	f000 fe76 	bl	80042c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	0018      	movs	r0, r3
 80035e0:	f000 fa62 	bl	8003aa8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80035e4:	f000 fce2 	bl	8003fac <xTaskResumeAll>
 80035e8:	1e03      	subs	r3, r0, #0
 80035ea:	d18a      	bne.n	8003502 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 80035ec:	f001 fa60 	bl	8004ab0 <vPortYield>
 80035f0:	e787      	b.n	8003502 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	0018      	movs	r0, r3
 80035f6:	f000 fa57 	bl	8003aa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035fa:	f000 fcd7 	bl	8003fac <xTaskResumeAll>
 80035fe:	e780      	b.n	8003502 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	0018      	movs	r0, r3
 8003604:	f000 fa50 	bl	8003aa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003608:	f000 fcd0 	bl	8003fac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800360c:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800360e:	0018      	movs	r0, r3
 8003610:	46bd      	mov	sp, r7
 8003612:	b00a      	add	sp, #40	; 0x28
 8003614:	bd80      	pop	{r7, pc}

08003616 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b088      	sub	sp, #32
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
 800361e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <xQueueGiveFromISR+0x18>
 800362a:	b672      	cpsid	i
 800362c:	e7fe      	b.n	800362c <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <xQueueGiveFromISR+0x24>
 8003636:	b672      	cpsid	i
 8003638:	e7fe      	b.n	8003638 <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d103      	bne.n	800364a <xQueueGiveFromISR+0x34>
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <xQueueGiveFromISR+0x38>
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <xQueueGiveFromISR+0x3a>
 800364e:	2300      	movs	r3, #0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <xQueueGiveFromISR+0x42>
 8003654:	b672      	cpsid	i
 8003656:	e7fe      	b.n	8003656 <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003658:	f001 fa64 	bl	8004b24 <ulSetInterruptMaskFromISR>
 800365c:	0003      	movs	r3, r0
 800365e:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003664:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	429a      	cmp	r2, r3
 800366e:	d22c      	bcs.n	80036ca <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003670:	200f      	movs	r0, #15
 8003672:	183b      	adds	r3, r7, r0
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	2145      	movs	r1, #69	; 0x45
 8003678:	5c52      	ldrb	r2, [r2, r1]
 800367a:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1c5a      	adds	r2, r3, #1
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003684:	183b      	adds	r3, r7, r0
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	b25b      	sxtb	r3, r3
 800368a:	3301      	adds	r3, #1
 800368c:	d111      	bne.n	80036b2 <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	2b00      	cmp	r3, #0
 8003694:	d016      	beq.n	80036c4 <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	3324      	adds	r3, #36	; 0x24
 800369a:	0018      	movs	r0, r3
 800369c:	f000 fe32 	bl	8004304 <xTaskRemoveFromEventList>
 80036a0:	1e03      	subs	r3, r0, #0
 80036a2:	d00f      	beq.n	80036c4 <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00c      	beq.n	80036c4 <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	2201      	movs	r2, #1
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	e008      	b.n	80036c4 <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80036b2:	230f      	movs	r3, #15
 80036b4:	18fb      	adds	r3, r7, r3
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	3301      	adds	r3, #1
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	b259      	sxtb	r1, r3
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	2245      	movs	r2, #69	; 0x45
 80036c2:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80036c4:	2301      	movs	r3, #1
 80036c6:	61fb      	str	r3, [r7, #28]
 80036c8:	e001      	b.n	80036ce <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	0018      	movs	r0, r3
 80036d2:	f001 fa2d 	bl	8004b30 <vClearInterruptMaskFromISR>

	return xReturn;
 80036d6:	69fb      	ldr	r3, [r7, #28]
}
 80036d8:	0018      	movs	r0, r3
 80036da:	46bd      	mov	sp, r7
 80036dc:	b008      	add	sp, #32
 80036de:	bd80      	pop	{r7, pc}

080036e0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08a      	sub	sp, #40	; 0x28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80036ea:	2300      	movs	r3, #0
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80036f2:	2300      	movs	r3, #0
 80036f4:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <xQueueSemaphoreTake+0x20>
 80036fc:	b672      	cpsid	i
 80036fe:	e7fe      	b.n	80036fe <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <xQueueSemaphoreTake+0x2c>
 8003708:	b672      	cpsid	i
 800370a:	e7fe      	b.n	800370a <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800370c:	f000 ff8c 	bl	8004628 <xTaskGetSchedulerState>
 8003710:	1e03      	subs	r3, r0, #0
 8003712:	d102      	bne.n	800371a <xQueueSemaphoreTake+0x3a>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <xQueueSemaphoreTake+0x3e>
 800371a:	2301      	movs	r3, #1
 800371c:	e000      	b.n	8003720 <xQueueSemaphoreTake+0x40>
 800371e:	2300      	movs	r3, #0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <xQueueSemaphoreTake+0x48>
 8003724:	b672      	cpsid	i
 8003726:	e7fe      	b.n	8003726 <xQueueSemaphoreTake+0x46>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003728:	f001 f9d2 	bl	8004ad0 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003730:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d01d      	beq.n	8003774 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	1e5a      	subs	r2, r3, #1
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d104      	bne.n	8003752 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003748:	f001 f8be 	bl	80048c8 <pvTaskIncrementMutexHeldCount>
 800374c:	0002      	movs	r2, r0
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d008      	beq.n	800376c <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	3310      	adds	r3, #16
 800375e:	0018      	movs	r0, r3
 8003760:	f000 fdd0 	bl	8004304 <xTaskRemoveFromEventList>
 8003764:	1e03      	subs	r3, r0, #0
 8003766:	d001      	beq.n	800376c <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003768:	f001 f9a2 	bl	8004ab0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800376c:	f001 f9c2 	bl	8004af4 <vPortExitCritical>
				return pdPASS;
 8003770:	2301      	movs	r3, #1
 8003772:	e08b      	b.n	800388c <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d108      	bne.n	800378c <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <xQueueSemaphoreTake+0xa4>
 8003780:	b672      	cpsid	i
 8003782:	e7fe      	b.n	8003782 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003784:	f001 f9b6 	bl	8004af4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003788:	2300      	movs	r3, #0
 800378a:	e07f      	b.n	800388c <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	2b00      	cmp	r3, #0
 8003790:	d106      	bne.n	80037a0 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003792:	230c      	movs	r3, #12
 8003794:	18fb      	adds	r3, r7, r3
 8003796:	0018      	movs	r0, r3
 8003798:	f000 fe10 	bl	80043bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800379c:	2301      	movs	r3, #1
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80037a0:	f001 f9a8 	bl	8004af4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80037a4:	f000 fbf6 	bl	8003f94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037a8:	f001 f992 	bl	8004ad0 <vPortEnterCritical>
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	2244      	movs	r2, #68	; 0x44
 80037b0:	5c9b      	ldrb	r3, [r3, r2]
 80037b2:	b25b      	sxtb	r3, r3
 80037b4:	3301      	adds	r3, #1
 80037b6:	d103      	bne.n	80037c0 <xQueueSemaphoreTake+0xe0>
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	2244      	movs	r2, #68	; 0x44
 80037bc:	2100      	movs	r1, #0
 80037be:	5499      	strb	r1, [r3, r2]
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	2245      	movs	r2, #69	; 0x45
 80037c4:	5c9b      	ldrb	r3, [r3, r2]
 80037c6:	b25b      	sxtb	r3, r3
 80037c8:	3301      	adds	r3, #1
 80037ca:	d103      	bne.n	80037d4 <xQueueSemaphoreTake+0xf4>
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	2245      	movs	r2, #69	; 0x45
 80037d0:	2100      	movs	r1, #0
 80037d2:	5499      	strb	r1, [r3, r2]
 80037d4:	f001 f98e 	bl	8004af4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037d8:	003a      	movs	r2, r7
 80037da:	230c      	movs	r3, #12
 80037dc:	18fb      	adds	r3, r7, r3
 80037de:	0011      	movs	r1, r2
 80037e0:	0018      	movs	r0, r3
 80037e2:	f000 fdff 	bl	80043e4 <xTaskCheckForTimeOut>
 80037e6:	1e03      	subs	r3, r0, #0
 80037e8:	d12e      	bne.n	8003848 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	0018      	movs	r0, r3
 80037ee:	f000 f9b9 	bl	8003b64 <prvIsQueueEmpty>
 80037f2:	1e03      	subs	r3, r0, #0
 80037f4:	d021      	beq.n	800383a <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10a      	bne.n	8003814 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 80037fe:	f001 f967 	bl	8004ad0 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	0018      	movs	r0, r3
 8003808:	f000 ff2a 	bl	8004660 <xTaskPriorityInherit>
 800380c:	0003      	movs	r3, r0
 800380e:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8003810:	f001 f970 	bl	8004af4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	3324      	adds	r3, #36	; 0x24
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	0011      	movs	r1, r2
 800381c:	0018      	movs	r0, r3
 800381e:	f000 fd53 	bl	80042c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	0018      	movs	r0, r3
 8003826:	f000 f93f 	bl	8003aa8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800382a:	f000 fbbf 	bl	8003fac <xTaskResumeAll>
 800382e:	1e03      	subs	r3, r0, #0
 8003830:	d000      	beq.n	8003834 <xQueueSemaphoreTake+0x154>
 8003832:	e779      	b.n	8003728 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 8003834:	f001 f93c 	bl	8004ab0 <vPortYield>
 8003838:	e776      	b.n	8003728 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	0018      	movs	r0, r3
 800383e:	f000 f933 	bl	8003aa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003842:	f000 fbb3 	bl	8003fac <xTaskResumeAll>
 8003846:	e76f      	b.n	8003728 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	0018      	movs	r0, r3
 800384c:	f000 f92c 	bl	8003aa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003850:	f000 fbac 	bl	8003fac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	0018      	movs	r0, r3
 8003858:	f000 f984 	bl	8003b64 <prvIsQueueEmpty>
 800385c:	1e03      	subs	r3, r0, #0
 800385e:	d100      	bne.n	8003862 <xQueueSemaphoreTake+0x182>
 8003860:	e762      	b.n	8003728 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d010      	beq.n	800388a <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 8003868:	f001 f932 	bl	8004ad0 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	0018      	movs	r0, r3
 8003870:	f000 f873 	bl	800395a <prvGetDisinheritPriorityAfterTimeout>
 8003874:	0003      	movs	r3, r0
 8003876:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	0011      	movs	r1, r2
 8003880:	0018      	movs	r0, r3
 8003882:	f000 ffb1 	bl	80047e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003886:	f001 f935 	bl	8004af4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800388a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800388c:	0018      	movs	r0, r3
 800388e:	46bd      	mov	sp, r7
 8003890:	b00a      	add	sp, #40	; 0x28
 8003892:	bd80      	pop	{r7, pc}

08003894 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003894:	b590      	push	{r4, r7, lr}
 8003896:	b08b      	sub	sp, #44	; 0x2c
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <xQueueReceiveFromISR+0x1a>
 80038aa:	b672      	cpsid	i
 80038ac:	e7fe      	b.n	80038ac <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d103      	bne.n	80038bc <xQueueReceiveFromISR+0x28>
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <xQueueReceiveFromISR+0x2c>
 80038bc:	2301      	movs	r3, #1
 80038be:	e000      	b.n	80038c2 <xQueueReceiveFromISR+0x2e>
 80038c0:	2300      	movs	r3, #0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <xQueueReceiveFromISR+0x36>
 80038c6:	b672      	cpsid	i
 80038c8:	e7fe      	b.n	80038c8 <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80038ca:	f001 f92b 	bl	8004b24 <ulSetInterruptMaskFromISR>
 80038ce:	0003      	movs	r3, r0
 80038d0:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d6:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d032      	beq.n	8003944 <xQueueReceiveFromISR+0xb0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80038de:	2417      	movs	r4, #23
 80038e0:	193b      	adds	r3, r7, r4
 80038e2:	6a3a      	ldr	r2, [r7, #32]
 80038e4:	2144      	movs	r1, #68	; 0x44
 80038e6:	5c52      	ldrb	r2, [r2, r1]
 80038e8:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	0011      	movs	r1, r2
 80038f0:	0018      	movs	r0, r3
 80038f2:	f000 f8b3 	bl	8003a5c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	1e5a      	subs	r2, r3, #1
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80038fe:	193b      	adds	r3, r7, r4
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	b25b      	sxtb	r3, r3
 8003904:	3301      	adds	r3, #1
 8003906:	d111      	bne.n	800392c <xQueueReceiveFromISR+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d016      	beq.n	800393e <xQueueReceiveFromISR+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	3310      	adds	r3, #16
 8003914:	0018      	movs	r0, r3
 8003916:	f000 fcf5 	bl	8004304 <xTaskRemoveFromEventList>
 800391a:	1e03      	subs	r3, r0, #0
 800391c:	d00f      	beq.n	800393e <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00c      	beq.n	800393e <xQueueReceiveFromISR+0xaa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	e008      	b.n	800393e <xQueueReceiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800392c:	2317      	movs	r3, #23
 800392e:	18fb      	adds	r3, r7, r3
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	3301      	adds	r3, #1
 8003934:	b2db      	uxtb	r3, r3
 8003936:	b259      	sxtb	r1, r3
 8003938:	6a3b      	ldr	r3, [r7, #32]
 800393a:	2244      	movs	r2, #68	; 0x44
 800393c:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800393e:	2301      	movs	r3, #1
 8003940:	627b      	str	r3, [r7, #36]	; 0x24
 8003942:	e001      	b.n	8003948 <xQueueReceiveFromISR+0xb4>
		}
		else
		{
			xReturn = pdFAIL;
 8003944:	2300      	movs	r3, #0
 8003946:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	0018      	movs	r0, r3
 800394c:	f001 f8f0 	bl	8004b30 <vClearInterruptMaskFromISR>

	return xReturn;
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003952:	0018      	movs	r0, r3
 8003954:	46bd      	mov	sp, r7
 8003956:	b00b      	add	sp, #44	; 0x2c
 8003958:	bd90      	pop	{r4, r7, pc}

0800395a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800395a:	b580      	push	{r7, lr}
 800395c:	b084      	sub	sp, #16
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	2b00      	cmp	r3, #0
 8003968:	d006      	beq.n	8003978 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2207      	movs	r2, #7
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	e001      	b.n	800397c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003978:	2300      	movs	r3, #0
 800397a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800397c:	68fb      	ldr	r3, [r7, #12]
	}
 800397e:	0018      	movs	r0, r3
 8003980:	46bd      	mov	sp, r7
 8003982:	b004      	add	sp, #16
 8003984:	bd80      	pop	{r7, pc}

08003986 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b086      	sub	sp, #24
 800398a:	af00      	add	r7, sp, #0
 800398c:	60f8      	str	r0, [r7, #12]
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003992:	2300      	movs	r3, #0
 8003994:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10e      	bne.n	80039c2 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d14e      	bne.n	8003a4a <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	0018      	movs	r0, r3
 80039b2:	f000 febd 	bl	8004730 <xTaskPriorityDisinherit>
 80039b6:	0003      	movs	r3, r0
 80039b8:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	609a      	str	r2, [r3, #8]
 80039c0:	e043      	b.n	8003a4a <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d119      	bne.n	80039fc <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6858      	ldr	r0, [r3, #4]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	0019      	movs	r1, r3
 80039d4:	f001 fae6 	bl	8004fa4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	18d2      	adds	r2, r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d32b      	bcc.n	8003a4a <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	605a      	str	r2, [r3, #4]
 80039fa:	e026      	b.n	8003a4a <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	68d8      	ldr	r0, [r3, #12]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	0019      	movs	r1, r3
 8003a08:	f001 facc 	bl	8004fa4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a14:	425b      	negs	r3, r3
 8003a16:	18d2      	adds	r2, r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	68da      	ldr	r2, [r3, #12]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d207      	bcs.n	8003a38 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a30:	425b      	negs	r3, r3
 8003a32:	18d2      	adds	r2, r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d105      	bne.n	8003a4a <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d002      	beq.n	8003a4a <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003a52:	697b      	ldr	r3, [r7, #20]
}
 8003a54:	0018      	movs	r0, r3
 8003a56:	46bd      	mov	sp, r7
 8003a58:	b006      	add	sp, #24
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d018      	beq.n	8003aa0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	18d2      	adds	r2, r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d303      	bcc.n	8003a90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68d9      	ldr	r1, [r3, #12]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	f001 fa82 	bl	8004fa4 <memcpy>
	}
}
 8003aa0:	46c0      	nop			; (mov r8, r8)
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	b002      	add	sp, #8
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003ab0:	f001 f80e 	bl	8004ad0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003ab4:	230f      	movs	r3, #15
 8003ab6:	18fb      	adds	r3, r7, r3
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	2145      	movs	r1, #69	; 0x45
 8003abc:	5c52      	ldrb	r2, [r2, r1]
 8003abe:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ac0:	e013      	b.n	8003aea <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d016      	beq.n	8003af8 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	3324      	adds	r3, #36	; 0x24
 8003ace:	0018      	movs	r0, r3
 8003ad0:	f000 fc18 	bl	8004304 <xTaskRemoveFromEventList>
 8003ad4:	1e03      	subs	r3, r0, #0
 8003ad6:	d001      	beq.n	8003adc <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003ad8:	f000 fcd4 	bl	8004484 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003adc:	210f      	movs	r1, #15
 8003ade:	187b      	adds	r3, r7, r1
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	187b      	adds	r3, r7, r1
 8003ae8:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003aea:	230f      	movs	r3, #15
 8003aec:	18fb      	adds	r3, r7, r3
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	b25b      	sxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	dce5      	bgt.n	8003ac2 <prvUnlockQueue+0x1a>
 8003af6:	e000      	b.n	8003afa <prvUnlockQueue+0x52>
					break;
 8003af8:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2245      	movs	r2, #69	; 0x45
 8003afe:	21ff      	movs	r1, #255	; 0xff
 8003b00:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8003b02:	f000 fff7 	bl	8004af4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003b06:	f000 ffe3 	bl	8004ad0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003b0a:	230e      	movs	r3, #14
 8003b0c:	18fb      	adds	r3, r7, r3
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	2144      	movs	r1, #68	; 0x44
 8003b12:	5c52      	ldrb	r2, [r2, r1]
 8003b14:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b16:	e013      	b.n	8003b40 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d016      	beq.n	8003b4e <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3310      	adds	r3, #16
 8003b24:	0018      	movs	r0, r3
 8003b26:	f000 fbed 	bl	8004304 <xTaskRemoveFromEventList>
 8003b2a:	1e03      	subs	r3, r0, #0
 8003b2c:	d001      	beq.n	8003b32 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8003b2e:	f000 fca9 	bl	8004484 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003b32:	210e      	movs	r1, #14
 8003b34:	187b      	adds	r3, r7, r1
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b2da      	uxtb	r2, r3
 8003b3c:	187b      	adds	r3, r7, r1
 8003b3e:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b40:	230e      	movs	r3, #14
 8003b42:	18fb      	adds	r3, r7, r3
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	b25b      	sxtb	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	dce5      	bgt.n	8003b18 <prvUnlockQueue+0x70>
 8003b4c:	e000      	b.n	8003b50 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8003b4e:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2244      	movs	r2, #68	; 0x44
 8003b54:	21ff      	movs	r1, #255	; 0xff
 8003b56:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8003b58:	f000 ffcc 	bl	8004af4 <vPortExitCritical>
}
 8003b5c:	46c0      	nop			; (mov r8, r8)
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	b004      	add	sp, #16
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b6c:	f000 ffb0 	bl	8004ad0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d102      	bne.n	8003b7e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	e001      	b.n	8003b82 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b82:	f000 ffb7 	bl	8004af4 <vPortExitCritical>

	return xReturn;
 8003b86:	68fb      	ldr	r3, [r7, #12]
}
 8003b88:	0018      	movs	r0, r3
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	b004      	add	sp, #16
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b98:	f000 ff9a 	bl	8004ad0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d102      	bne.n	8003bae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	e001      	b.n	8003bb2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003bb2:	f000 ff9f 	bl	8004af4 <vPortExitCritical>

	return xReturn;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
}
 8003bb8:	0018      	movs	r0, r3
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	b004      	add	sp, #16
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003bc0:	b590      	push	{r4, r7, lr}
 8003bc2:	b08d      	sub	sp, #52	; 0x34
 8003bc4:	af04      	add	r7, sp, #16
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
 8003bcc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <xTaskCreateStatic+0x18>
 8003bd4:	b672      	cpsid	i
 8003bd6:	e7fe      	b.n	8003bd6 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8003bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <xTaskCreateStatic+0x22>
 8003bde:	b672      	cpsid	i
 8003be0:	e7fe      	b.n	8003be0 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003be2:	2354      	movs	r3, #84	; 0x54
 8003be4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	2b54      	cmp	r3, #84	; 0x54
 8003bea:	d001      	beq.n	8003bf0 <xTaskCreateStatic+0x30>
 8003bec:	b672      	cpsid	i
 8003bee:	e7fe      	b.n	8003bee <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003bf0:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d020      	beq.n	8003c3a <xTaskCreateStatic+0x7a>
 8003bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d01d      	beq.n	8003c3a <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c00:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c06:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	2251      	movs	r2, #81	; 0x51
 8003c0c:	2102      	movs	r1, #2
 8003c0e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003c10:	683c      	ldr	r4, [r7, #0]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	68b9      	ldr	r1, [r7, #8]
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	2300      	movs	r3, #0
 8003c1a:	9303      	str	r3, [sp, #12]
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	9302      	str	r3, [sp, #8]
 8003c20:	2318      	movs	r3, #24
 8003c22:	18fb      	adds	r3, r7, r3
 8003c24:	9301      	str	r3, [sp, #4]
 8003c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	0023      	movs	r3, r4
 8003c2c:	f000 f858 	bl	8003ce0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	0018      	movs	r0, r3
 8003c34:	f000 f8d6 	bl	8003de4 <prvAddNewTaskToReadyList>
 8003c38:	e001      	b.n	8003c3e <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c3e:	69bb      	ldr	r3, [r7, #24]
	}
 8003c40:	0018      	movs	r0, r3
 8003c42:	46bd      	mov	sp, r7
 8003c44:	b009      	add	sp, #36	; 0x24
 8003c46:	bd90      	pop	{r4, r7, pc}

08003c48 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003c48:	b590      	push	{r4, r7, lr}
 8003c4a:	b08d      	sub	sp, #52	; 0x34
 8003c4c:	af04      	add	r7, sp, #16
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	603b      	str	r3, [r7, #0]
 8003c54:	1dbb      	adds	r3, r7, #6
 8003c56:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c58:	1dbb      	adds	r3, r7, #6
 8003c5a:	881b      	ldrh	r3, [r3, #0]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	0018      	movs	r0, r3
 8003c60:	f000 ffce 	bl	8004c00 <pvPortMalloc>
 8003c64:	0003      	movs	r3, r0
 8003c66:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d010      	beq.n	8003c90 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003c6e:	2054      	movs	r0, #84	; 0x54
 8003c70:	f000 ffc6 	bl	8004c00 <pvPortMalloc>
 8003c74:	0003      	movs	r3, r0
 8003c76:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	631a      	str	r2, [r3, #48]	; 0x30
 8003c84:	e006      	b.n	8003c94 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	0018      	movs	r0, r3
 8003c8a:	f001 f85f 	bl	8004d4c <vPortFree>
 8003c8e:	e001      	b.n	8003c94 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003c90:	2300      	movs	r3, #0
 8003c92:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d01a      	beq.n	8003cd0 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	2251      	movs	r2, #81	; 0x51
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003ca2:	1dbb      	adds	r3, r7, #6
 8003ca4:	881a      	ldrh	r2, [r3, #0]
 8003ca6:	683c      	ldr	r4, [r7, #0]
 8003ca8:	68b9      	ldr	r1, [r7, #8]
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	2300      	movs	r3, #0
 8003cae:	9303      	str	r3, [sp, #12]
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	9302      	str	r3, [sp, #8]
 8003cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cb6:	9301      	str	r3, [sp, #4]
 8003cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	0023      	movs	r3, r4
 8003cbe:	f000 f80f 	bl	8003ce0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	f000 f88d 	bl	8003de4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	61bb      	str	r3, [r7, #24]
 8003cce:	e002      	b.n	8003cd6 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	425b      	negs	r3, r3
 8003cd4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003cd6:	69bb      	ldr	r3, [r7, #24]
	}
 8003cd8:	0018      	movs	r0, r3
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	b009      	add	sp, #36	; 0x24
 8003cde:	bd90      	pop	{r4, r7, pc}

08003ce0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
 8003cec:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	493a      	ldr	r1, [pc, #232]	; (8003de0 <prvInitialiseNewTask+0x100>)
 8003cf6:	468c      	mov	ip, r1
 8003cf8:	4463      	add	r3, ip
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	18d3      	adds	r3, r2, r3
 8003cfe:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	2207      	movs	r2, #7
 8003d04:	4393      	bics	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	2207      	movs	r2, #7
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	d001      	beq.n	8003d14 <prvInitialiseNewTask+0x34>
 8003d10:	b672      	cpsid	i
 8003d12:	e7fe      	b.n	8003d12 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d020      	beq.n	8003d5c <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	617b      	str	r3, [r7, #20]
 8003d1e:	e013      	b.n	8003d48 <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	18d3      	adds	r3, r2, r3
 8003d26:	7818      	ldrb	r0, [r3, #0]
 8003d28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d2a:	2134      	movs	r1, #52	; 0x34
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	18d3      	adds	r3, r2, r3
 8003d30:	185b      	adds	r3, r3, r1
 8003d32:	1c02      	adds	r2, r0, #0
 8003d34:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	18d3      	adds	r3, r2, r3
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d006      	beq.n	8003d50 <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	3301      	adds	r3, #1
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	2b0f      	cmp	r3, #15
 8003d4c:	d9e8      	bls.n	8003d20 <prvInitialiseNewTask+0x40>
 8003d4e:	e000      	b.n	8003d52 <prvInitialiseNewTask+0x72>
			{
				break;
 8003d50:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d54:	2243      	movs	r2, #67	; 0x43
 8003d56:	2100      	movs	r1, #0
 8003d58:	5499      	strb	r1, [r3, r2]
 8003d5a:	e003      	b.n	8003d64 <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5e:	2234      	movs	r2, #52	; 0x34
 8003d60:	2100      	movs	r1, #0
 8003d62:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d64:	6a3b      	ldr	r3, [r7, #32]
 8003d66:	2b06      	cmp	r3, #6
 8003d68:	d901      	bls.n	8003d6e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d6a:	2306      	movs	r3, #6
 8003d6c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d70:	6a3a      	ldr	r2, [r7, #32]
 8003d72:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d76:	6a3a      	ldr	r2, [r7, #32]
 8003d78:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d82:	3304      	adds	r3, #4
 8003d84:	0018      	movs	r0, r3
 8003d86:	f7ff f9fd 	bl	8003184 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8c:	3318      	adds	r3, #24
 8003d8e:	0018      	movs	r0, r3
 8003d90:	f7ff f9f8 	bl	8003184 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d98:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
 8003d9c:	2207      	movs	r2, #7
 8003d9e:	1ad2      	subs	r2, r2, r3
 8003da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003da8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dac:	2200      	movs	r2, #0
 8003dae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db2:	2250      	movs	r2, #80	; 0x50
 8003db4:	2100      	movs	r1, #0
 8003db6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	68f9      	ldr	r1, [r7, #12]
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	f000 fde8 	bl	8004994 <pxPortInitialiseStack>
 8003dc4:	0002      	movs	r2, r0
 8003dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d002      	beq.n	8003dd6 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b006      	add	sp, #24
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	3fffffff 	.word	0x3fffffff

08003de4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003dec:	f000 fe70 	bl	8004ad0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003df0:	4b28      	ldr	r3, [pc, #160]	; (8003e94 <prvAddNewTaskToReadyList+0xb0>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	4b27      	ldr	r3, [pc, #156]	; (8003e94 <prvAddNewTaskToReadyList+0xb0>)
 8003df8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003dfa:	4b27      	ldr	r3, [pc, #156]	; (8003e98 <prvAddNewTaskToReadyList+0xb4>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d109      	bne.n	8003e16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e02:	4b25      	ldr	r3, [pc, #148]	; (8003e98 <prvAddNewTaskToReadyList+0xb4>)
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e08:	4b22      	ldr	r3, [pc, #136]	; (8003e94 <prvAddNewTaskToReadyList+0xb0>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d110      	bne.n	8003e32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e10:	f000 fb52 	bl	80044b8 <prvInitialiseTaskLists>
 8003e14:	e00d      	b.n	8003e32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e16:	4b21      	ldr	r3, [pc, #132]	; (8003e9c <prvAddNewTaskToReadyList+0xb8>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d109      	bne.n	8003e32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e1e:	4b1e      	ldr	r3, [pc, #120]	; (8003e98 <prvAddNewTaskToReadyList+0xb4>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d802      	bhi.n	8003e32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003e2c:	4b1a      	ldr	r3, [pc, #104]	; (8003e98 <prvAddNewTaskToReadyList+0xb4>)
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e32:	4b1b      	ldr	r3, [pc, #108]	; (8003ea0 <prvAddNewTaskToReadyList+0xbc>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	1c5a      	adds	r2, r3, #1
 8003e38:	4b19      	ldr	r3, [pc, #100]	; (8003ea0 <prvAddNewTaskToReadyList+0xbc>)
 8003e3a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e40:	4b18      	ldr	r3, [pc, #96]	; (8003ea4 <prvAddNewTaskToReadyList+0xc0>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d903      	bls.n	8003e50 <prvAddNewTaskToReadyList+0x6c>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e4c:	4b15      	ldr	r3, [pc, #84]	; (8003ea4 <prvAddNewTaskToReadyList+0xc0>)
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e54:	0013      	movs	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	189b      	adds	r3, r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	4a12      	ldr	r2, [pc, #72]	; (8003ea8 <prvAddNewTaskToReadyList+0xc4>)
 8003e5e:	189a      	adds	r2, r3, r2
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3304      	adds	r3, #4
 8003e64:	0019      	movs	r1, r3
 8003e66:	0010      	movs	r0, r2
 8003e68:	f7ff f997 	bl	800319a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003e6c:	f000 fe42 	bl	8004af4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003e70:	4b0a      	ldr	r3, [pc, #40]	; (8003e9c <prvAddNewTaskToReadyList+0xb8>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d008      	beq.n	8003e8a <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e78:	4b07      	ldr	r3, [pc, #28]	; (8003e98 <prvAddNewTaskToReadyList+0xb4>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d201      	bcs.n	8003e8a <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003e86:	f000 fe13 	bl	8004ab0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e8a:	46c0      	nop			; (mov r8, r8)
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	b002      	add	sp, #8
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	46c0      	nop			; (mov r8, r8)
 8003e94:	20000458 	.word	0x20000458
 8003e98:	20000358 	.word	0x20000358
 8003e9c:	20000464 	.word	0x20000464
 8003ea0:	20000474 	.word	0x20000474
 8003ea4:	20000460 	.word	0x20000460
 8003ea8:	2000035c 	.word	0x2000035c

08003eac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d010      	beq.n	8003ee0 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003ebe:	4b0d      	ldr	r3, [pc, #52]	; (8003ef4 <vTaskDelay+0x48>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <vTaskDelay+0x1e>
 8003ec6:	b672      	cpsid	i
 8003ec8:	e7fe      	b.n	8003ec8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8003eca:	f000 f863 	bl	8003f94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	f000 fd0a 	bl	80048ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ed8:	f000 f868 	bl	8003fac <xTaskResumeAll>
 8003edc:	0003      	movs	r3, r0
 8003ede:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8003ee6:	f000 fde3 	bl	8004ab0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003eea:	46c0      	nop			; (mov r8, r8)
 8003eec:	46bd      	mov	sp, r7
 8003eee:	b004      	add	sp, #16
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	20000480 	.word	0x20000480

08003ef8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ef8:	b590      	push	{r4, r7, lr}
 8003efa:	b089      	sub	sp, #36	; 0x24
 8003efc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003f02:	2300      	movs	r3, #0
 8003f04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f06:	003a      	movs	r2, r7
 8003f08:	1d39      	adds	r1, r7, #4
 8003f0a:	2308      	movs	r3, #8
 8003f0c:	18fb      	adds	r3, r7, r3
 8003f0e:	0018      	movs	r0, r3
 8003f10:	f7fc fad2 	bl	80004b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f14:	683c      	ldr	r4, [r7, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	4918      	ldr	r1, [pc, #96]	; (8003f7c <vTaskStartScheduler+0x84>)
 8003f1c:	4818      	ldr	r0, [pc, #96]	; (8003f80 <vTaskStartScheduler+0x88>)
 8003f1e:	9202      	str	r2, [sp, #8]
 8003f20:	9301      	str	r3, [sp, #4]
 8003f22:	2300      	movs	r3, #0
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	2300      	movs	r3, #0
 8003f28:	0022      	movs	r2, r4
 8003f2a:	f7ff fe49 	bl	8003bc0 <xTaskCreateStatic>
 8003f2e:	0002      	movs	r2, r0
 8003f30:	4b14      	ldr	r3, [pc, #80]	; (8003f84 <vTaskStartScheduler+0x8c>)
 8003f32:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f34:	4b13      	ldr	r3, [pc, #76]	; (8003f84 <vTaskStartScheduler+0x8c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d002      	beq.n	8003f42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	60fb      	str	r3, [r7, #12]
 8003f40:	e001      	b.n	8003f46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003f42:	2300      	movs	r3, #0
 8003f44:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d10d      	bne.n	8003f68 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8003f4c:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f4e:	4b0e      	ldr	r3, [pc, #56]	; (8003f88 <vTaskStartScheduler+0x90>)
 8003f50:	2201      	movs	r2, #1
 8003f52:	4252      	negs	r2, r2
 8003f54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f56:	4b0d      	ldr	r3, [pc, #52]	; (8003f8c <vTaskStartScheduler+0x94>)
 8003f58:	2201      	movs	r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f5c:	4b0c      	ldr	r3, [pc, #48]	; (8003f90 <vTaskStartScheduler+0x98>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f62:	f000 fd81 	bl	8004a68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f66:	e004      	b.n	8003f72 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	d101      	bne.n	8003f72 <vTaskStartScheduler+0x7a>
 8003f6e:	b672      	cpsid	i
 8003f70:	e7fe      	b.n	8003f70 <vTaskStartScheduler+0x78>
}
 8003f72:	46c0      	nop			; (mov r8, r8)
 8003f74:	46bd      	mov	sp, r7
 8003f76:	b005      	add	sp, #20
 8003f78:	bd90      	pop	{r4, r7, pc}
 8003f7a:	46c0      	nop			; (mov r8, r8)
 8003f7c:	08005138 	.word	0x08005138
 8003f80:	08004499 	.word	0x08004499
 8003f84:	2000047c 	.word	0x2000047c
 8003f88:	20000478 	.word	0x20000478
 8003f8c:	20000464 	.word	0x20000464
 8003f90:	2000045c 	.word	0x2000045c

08003f94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003f98:	4b03      	ldr	r3, [pc, #12]	; (8003fa8 <vTaskSuspendAll+0x14>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	4b02      	ldr	r3, [pc, #8]	; (8003fa8 <vTaskSuspendAll+0x14>)
 8003fa0:	601a      	str	r2, [r3, #0]
	portMEMORY_BARRIER();
}
 8003fa2:	46c0      	nop			; (mov r8, r8)
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	20000480 	.word	0x20000480

08003fac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003fba:	4b3a      	ldr	r3, [pc, #232]	; (80040a4 <xTaskResumeAll+0xf8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <xTaskResumeAll+0x1a>
 8003fc2:	b672      	cpsid	i
 8003fc4:	e7fe      	b.n	8003fc4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003fc6:	f000 fd83 	bl	8004ad0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003fca:	4b36      	ldr	r3, [pc, #216]	; (80040a4 <xTaskResumeAll+0xf8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	1e5a      	subs	r2, r3, #1
 8003fd0:	4b34      	ldr	r3, [pc, #208]	; (80040a4 <xTaskResumeAll+0xf8>)
 8003fd2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fd4:	4b33      	ldr	r3, [pc, #204]	; (80040a4 <xTaskResumeAll+0xf8>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d15b      	bne.n	8004094 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003fdc:	4b32      	ldr	r3, [pc, #200]	; (80040a8 <xTaskResumeAll+0xfc>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d057      	beq.n	8004094 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003fe4:	e02f      	b.n	8004046 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fe6:	4b31      	ldr	r3, [pc, #196]	; (80040ac <xTaskResumeAll+0x100>)
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	3318      	adds	r3, #24
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	f7ff f929 	bl	800324a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	f7ff f924 	bl	800324a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004006:	4b2a      	ldr	r3, [pc, #168]	; (80040b0 <xTaskResumeAll+0x104>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	429a      	cmp	r2, r3
 800400c:	d903      	bls.n	8004016 <xTaskResumeAll+0x6a>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004012:	4b27      	ldr	r3, [pc, #156]	; (80040b0 <xTaskResumeAll+0x104>)
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800401a:	0013      	movs	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	189b      	adds	r3, r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4a24      	ldr	r2, [pc, #144]	; (80040b4 <xTaskResumeAll+0x108>)
 8004024:	189a      	adds	r2, r3, r2
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	3304      	adds	r3, #4
 800402a:	0019      	movs	r1, r3
 800402c:	0010      	movs	r0, r2
 800402e:	f7ff f8b4 	bl	800319a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004036:	4b20      	ldr	r3, [pc, #128]	; (80040b8 <xTaskResumeAll+0x10c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403c:	429a      	cmp	r2, r3
 800403e:	d302      	bcc.n	8004046 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8004040:	4b1e      	ldr	r3, [pc, #120]	; (80040bc <xTaskResumeAll+0x110>)
 8004042:	2201      	movs	r2, #1
 8004044:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004046:	4b19      	ldr	r3, [pc, #100]	; (80040ac <xTaskResumeAll+0x100>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1cb      	bne.n	8003fe6 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004054:	f000 faca 	bl	80045ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004058:	4b19      	ldr	r3, [pc, #100]	; (80040c0 <xTaskResumeAll+0x114>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00f      	beq.n	8004084 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004064:	f000 f82e 	bl	80040c4 <xTaskIncrementTick>
 8004068:	1e03      	subs	r3, r0, #0
 800406a:	d002      	beq.n	8004072 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800406c:	4b13      	ldr	r3, [pc, #76]	; (80040bc <xTaskResumeAll+0x110>)
 800406e:	2201      	movs	r2, #1
 8004070:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	3b01      	subs	r3, #1
 8004076:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1f2      	bne.n	8004064 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800407e:	4b10      	ldr	r3, [pc, #64]	; (80040c0 <xTaskResumeAll+0x114>)
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004084:	4b0d      	ldr	r3, [pc, #52]	; (80040bc <xTaskResumeAll+0x110>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d003      	beq.n	8004094 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800408c:	2301      	movs	r3, #1
 800408e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004090:	f000 fd0e 	bl	8004ab0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004094:	f000 fd2e 	bl	8004af4 <vPortExitCritical>

	return xAlreadyYielded;
 8004098:	68bb      	ldr	r3, [r7, #8]
}
 800409a:	0018      	movs	r0, r3
 800409c:	46bd      	mov	sp, r7
 800409e:	b004      	add	sp, #16
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	20000480 	.word	0x20000480
 80040a8:	20000458 	.word	0x20000458
 80040ac:	20000418 	.word	0x20000418
 80040b0:	20000460 	.word	0x20000460
 80040b4:	2000035c 	.word	0x2000035c
 80040b8:	20000358 	.word	0x20000358
 80040bc:	2000046c 	.word	0x2000046c
 80040c0:	20000468 	.word	0x20000468

080040c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80040ca:	2300      	movs	r3, #0
 80040cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040ce:	4b4a      	ldr	r3, [pc, #296]	; (80041f8 <xTaskIncrementTick+0x134>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d000      	beq.n	80040d8 <xTaskIncrementTick+0x14>
 80040d6:	e07e      	b.n	80041d6 <xTaskIncrementTick+0x112>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80040d8:	4b48      	ldr	r3, [pc, #288]	; (80041fc <xTaskIncrementTick+0x138>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3301      	adds	r3, #1
 80040de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80040e0:	4b46      	ldr	r3, [pc, #280]	; (80041fc <xTaskIncrementTick+0x138>)
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d117      	bne.n	800411c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80040ec:	4b44      	ldr	r3, [pc, #272]	; (8004200 <xTaskIncrementTick+0x13c>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <xTaskIncrementTick+0x36>
 80040f6:	b672      	cpsid	i
 80040f8:	e7fe      	b.n	80040f8 <xTaskIncrementTick+0x34>
 80040fa:	4b41      	ldr	r3, [pc, #260]	; (8004200 <xTaskIncrementTick+0x13c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	4b40      	ldr	r3, [pc, #256]	; (8004204 <xTaskIncrementTick+0x140>)
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	4b3e      	ldr	r3, [pc, #248]	; (8004200 <xTaskIncrementTick+0x13c>)
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	4b3e      	ldr	r3, [pc, #248]	; (8004204 <xTaskIncrementTick+0x140>)
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	4b3e      	ldr	r3, [pc, #248]	; (8004208 <xTaskIncrementTick+0x144>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	1c5a      	adds	r2, r3, #1
 8004114:	4b3c      	ldr	r3, [pc, #240]	; (8004208 <xTaskIncrementTick+0x144>)
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	f000 fa68 	bl	80045ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800411c:	4b3b      	ldr	r3, [pc, #236]	; (800420c <xTaskIncrementTick+0x148>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	429a      	cmp	r2, r3
 8004124:	d349      	bcc.n	80041ba <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004126:	4b36      	ldr	r3, [pc, #216]	; (8004200 <xTaskIncrementTick+0x13c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d104      	bne.n	800413a <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004130:	4b36      	ldr	r3, [pc, #216]	; (800420c <xTaskIncrementTick+0x148>)
 8004132:	2201      	movs	r2, #1
 8004134:	4252      	negs	r2, r2
 8004136:	601a      	str	r2, [r3, #0]
					break;
 8004138:	e03f      	b.n	80041ba <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800413a:	4b31      	ldr	r3, [pc, #196]	; (8004200 <xTaskIncrementTick+0x13c>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	429a      	cmp	r2, r3
 8004150:	d203      	bcs.n	800415a <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004152:	4b2e      	ldr	r3, [pc, #184]	; (800420c <xTaskIncrementTick+0x148>)
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004158:	e02f      	b.n	80041ba <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	3304      	adds	r3, #4
 800415e:	0018      	movs	r0, r3
 8004160:	f7ff f873 	bl	800324a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004168:	2b00      	cmp	r3, #0
 800416a:	d004      	beq.n	8004176 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	3318      	adds	r3, #24
 8004170:	0018      	movs	r0, r3
 8004172:	f7ff f86a 	bl	800324a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800417a:	4b25      	ldr	r3, [pc, #148]	; (8004210 <xTaskIncrementTick+0x14c>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	429a      	cmp	r2, r3
 8004180:	d903      	bls.n	800418a <xTaskIncrementTick+0xc6>
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004186:	4b22      	ldr	r3, [pc, #136]	; (8004210 <xTaskIncrementTick+0x14c>)
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800418e:	0013      	movs	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	189b      	adds	r3, r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4a1f      	ldr	r2, [pc, #124]	; (8004214 <xTaskIncrementTick+0x150>)
 8004198:	189a      	adds	r2, r3, r2
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	3304      	adds	r3, #4
 800419e:	0019      	movs	r1, r3
 80041a0:	0010      	movs	r0, r2
 80041a2:	f7fe fffa 	bl	800319a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041aa:	4b1b      	ldr	r3, [pc, #108]	; (8004218 <xTaskIncrementTick+0x154>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d3b8      	bcc.n	8004126 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80041b4:	2301      	movs	r3, #1
 80041b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041b8:	e7b5      	b.n	8004126 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80041ba:	4b17      	ldr	r3, [pc, #92]	; (8004218 <xTaskIncrementTick+0x154>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c0:	4914      	ldr	r1, [pc, #80]	; (8004214 <xTaskIncrementTick+0x150>)
 80041c2:	0013      	movs	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	189b      	adds	r3, r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	585b      	ldr	r3, [r3, r1]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d907      	bls.n	80041e0 <xTaskIncrementTick+0x11c>
			{
				xSwitchRequired = pdTRUE;
 80041d0:	2301      	movs	r3, #1
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	e004      	b.n	80041e0 <xTaskIncrementTick+0x11c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80041d6:	4b11      	ldr	r3, [pc, #68]	; (800421c <xTaskIncrementTick+0x158>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	1c5a      	adds	r2, r3, #1
 80041dc:	4b0f      	ldr	r3, [pc, #60]	; (800421c <xTaskIncrementTick+0x158>)
 80041de:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80041e0:	4b0f      	ldr	r3, [pc, #60]	; (8004220 <xTaskIncrementTick+0x15c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <xTaskIncrementTick+0x128>
		{
			xSwitchRequired = pdTRUE;
 80041e8:	2301      	movs	r3, #1
 80041ea:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80041ec:	697b      	ldr	r3, [r7, #20]
}
 80041ee:	0018      	movs	r0, r3
 80041f0:	46bd      	mov	sp, r7
 80041f2:	b006      	add	sp, #24
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	46c0      	nop			; (mov r8, r8)
 80041f8:	20000480 	.word	0x20000480
 80041fc:	2000045c 	.word	0x2000045c
 8004200:	20000410 	.word	0x20000410
 8004204:	20000414 	.word	0x20000414
 8004208:	20000470 	.word	0x20000470
 800420c:	20000478 	.word	0x20000478
 8004210:	20000460 	.word	0x20000460
 8004214:	2000035c 	.word	0x2000035c
 8004218:	20000358 	.word	0x20000358
 800421c:	20000468 	.word	0x20000468
 8004220:	2000046c 	.word	0x2000046c

08004224 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800422a:	4b22      	ldr	r3, [pc, #136]	; (80042b4 <vTaskSwitchContext+0x90>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004232:	4b21      	ldr	r3, [pc, #132]	; (80042b8 <vTaskSwitchContext+0x94>)
 8004234:	2201      	movs	r2, #1
 8004236:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004238:	e037      	b.n	80042aa <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 800423a:	4b1f      	ldr	r3, [pc, #124]	; (80042b8 <vTaskSwitchContext+0x94>)
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004240:	4b1e      	ldr	r3, [pc, #120]	; (80042bc <vTaskSwitchContext+0x98>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	607b      	str	r3, [r7, #4]
 8004246:	e007      	b.n	8004258 <vTaskSwitchContext+0x34>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <vTaskSwitchContext+0x2e>
 800424e:	b672      	cpsid	i
 8004250:	e7fe      	b.n	8004250 <vTaskSwitchContext+0x2c>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	3b01      	subs	r3, #1
 8004256:	607b      	str	r3, [r7, #4]
 8004258:	4919      	ldr	r1, [pc, #100]	; (80042c0 <vTaskSwitchContext+0x9c>)
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	0013      	movs	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	189b      	adds	r3, r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	585b      	ldr	r3, [r3, r1]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d0ee      	beq.n	8004248 <vTaskSwitchContext+0x24>
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	0013      	movs	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	189b      	adds	r3, r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4a12      	ldr	r2, [pc, #72]	; (80042c0 <vTaskSwitchContext+0x9c>)
 8004276:	189b      	adds	r3, r3, r2
 8004278:	603b      	str	r3, [r7, #0]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	605a      	str	r2, [r3, #4]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	3308      	adds	r3, #8
 800428c:	429a      	cmp	r2, r3
 800428e:	d104      	bne.n	800429a <vTaskSwitchContext+0x76>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	605a      	str	r2, [r3, #4]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	68da      	ldr	r2, [r3, #12]
 80042a0:	4b08      	ldr	r3, [pc, #32]	; (80042c4 <vTaskSwitchContext+0xa0>)
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	4b05      	ldr	r3, [pc, #20]	; (80042bc <vTaskSwitchContext+0x98>)
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	601a      	str	r2, [r3, #0]
}
 80042aa:	46c0      	nop			; (mov r8, r8)
 80042ac:	46bd      	mov	sp, r7
 80042ae:	b002      	add	sp, #8
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	46c0      	nop			; (mov r8, r8)
 80042b4:	20000480 	.word	0x20000480
 80042b8:	2000046c 	.word	0x2000046c
 80042bc:	20000460 	.word	0x20000460
 80042c0:	2000035c 	.word	0x2000035c
 80042c4:	20000358 	.word	0x20000358

080042c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d101      	bne.n	80042dc <vTaskPlaceOnEventList+0x14>
 80042d8:	b672      	cpsid	i
 80042da:	e7fe      	b.n	80042da <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042dc:	4b08      	ldr	r3, [pc, #32]	; (8004300 <vTaskPlaceOnEventList+0x38>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3318      	adds	r3, #24
 80042e2:	001a      	movs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	0011      	movs	r1, r2
 80042e8:	0018      	movs	r0, r3
 80042ea:	f7fe ff78 	bl	80031de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2101      	movs	r1, #1
 80042f2:	0018      	movs	r0, r3
 80042f4:	f000 fafa 	bl	80048ec <prvAddCurrentTaskToDelayedList>
}
 80042f8:	46c0      	nop			; (mov r8, r8)
 80042fa:	46bd      	mov	sp, r7
 80042fc:	b002      	add	sp, #8
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	20000358 	.word	0x20000358

08004304 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <xTaskRemoveFromEventList+0x1a>
 800431a:	b672      	cpsid	i
 800431c:	e7fe      	b.n	800431c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	3318      	adds	r3, #24
 8004322:	0018      	movs	r0, r3
 8004324:	f7fe ff91 	bl	800324a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004328:	4b1e      	ldr	r3, [pc, #120]	; (80043a4 <xTaskRemoveFromEventList+0xa0>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d11d      	bne.n	800436c <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	3304      	adds	r3, #4
 8004334:	0018      	movs	r0, r3
 8004336:	f7fe ff88 	bl	800324a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800433e:	4b1a      	ldr	r3, [pc, #104]	; (80043a8 <xTaskRemoveFromEventList+0xa4>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	429a      	cmp	r2, r3
 8004344:	d903      	bls.n	800434e <xTaskRemoveFromEventList+0x4a>
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434a:	4b17      	ldr	r3, [pc, #92]	; (80043a8 <xTaskRemoveFromEventList+0xa4>)
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004352:	0013      	movs	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	189b      	adds	r3, r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4a14      	ldr	r2, [pc, #80]	; (80043ac <xTaskRemoveFromEventList+0xa8>)
 800435c:	189a      	adds	r2, r3, r2
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	3304      	adds	r3, #4
 8004362:	0019      	movs	r1, r3
 8004364:	0010      	movs	r0, r2
 8004366:	f7fe ff18 	bl	800319a <vListInsertEnd>
 800436a:	e007      	b.n	800437c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	3318      	adds	r3, #24
 8004370:	001a      	movs	r2, r3
 8004372:	4b0f      	ldr	r3, [pc, #60]	; (80043b0 <xTaskRemoveFromEventList+0xac>)
 8004374:	0011      	movs	r1, r2
 8004376:	0018      	movs	r0, r3
 8004378:	f7fe ff0f 	bl	800319a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004380:	4b0c      	ldr	r3, [pc, #48]	; (80043b4 <xTaskRemoveFromEventList+0xb0>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004386:	429a      	cmp	r2, r3
 8004388:	d905      	bls.n	8004396 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800438a:	2301      	movs	r3, #1
 800438c:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800438e:	4b0a      	ldr	r3, [pc, #40]	; (80043b8 <xTaskRemoveFromEventList+0xb4>)
 8004390:	2201      	movs	r2, #1
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	e001      	b.n	800439a <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8004396:	2300      	movs	r3, #0
 8004398:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800439a:	68fb      	ldr	r3, [r7, #12]
}
 800439c:	0018      	movs	r0, r3
 800439e:	46bd      	mov	sp, r7
 80043a0:	b004      	add	sp, #16
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	20000480 	.word	0x20000480
 80043a8:	20000460 	.word	0x20000460
 80043ac:	2000035c 	.word	0x2000035c
 80043b0:	20000418 	.word	0x20000418
 80043b4:	20000358 	.word	0x20000358
 80043b8:	2000046c 	.word	0x2000046c

080043bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80043c4:	4b05      	ldr	r3, [pc, #20]	; (80043dc <vTaskInternalSetTimeOutState+0x20>)
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80043cc:	4b04      	ldr	r3, [pc, #16]	; (80043e0 <vTaskInternalSetTimeOutState+0x24>)
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	605a      	str	r2, [r3, #4]
}
 80043d4:	46c0      	nop			; (mov r8, r8)
 80043d6:	46bd      	mov	sp, r7
 80043d8:	b002      	add	sp, #8
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	20000470 	.word	0x20000470
 80043e0:	2000045c 	.word	0x2000045c

080043e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <xTaskCheckForTimeOut+0x14>
 80043f4:	b672      	cpsid	i
 80043f6:	e7fe      	b.n	80043f6 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <xTaskCheckForTimeOut+0x1e>
 80043fe:	b672      	cpsid	i
 8004400:	e7fe      	b.n	8004400 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8004402:	f000 fb65 	bl	8004ad0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004406:	4b1d      	ldr	r3, [pc, #116]	; (800447c <xTaskCheckForTimeOut+0x98>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3301      	adds	r3, #1
 800441c:	d102      	bne.n	8004424 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800441e:	2300      	movs	r3, #0
 8004420:	617b      	str	r3, [r7, #20]
 8004422:	e024      	b.n	800446e <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	4b15      	ldr	r3, [pc, #84]	; (8004480 <xTaskCheckForTimeOut+0x9c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	429a      	cmp	r2, r3
 800442e:	d007      	beq.n	8004440 <xTaskCheckForTimeOut+0x5c>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	429a      	cmp	r2, r3
 8004438:	d302      	bcc.n	8004440 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800443a:	2301      	movs	r3, #1
 800443c:	617b      	str	r3, [r7, #20]
 800443e:	e016      	b.n	800446e <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	429a      	cmp	r2, r3
 8004448:	d20c      	bcs.n	8004464 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	1ad2      	subs	r2, r2, r3
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	0018      	movs	r0, r3
 800445a:	f7ff ffaf 	bl	80043bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800445e:	2300      	movs	r3, #0
 8004460:	617b      	str	r3, [r7, #20]
 8004462:	e004      	b.n	800446e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	2200      	movs	r2, #0
 8004468:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800446a:	2301      	movs	r3, #1
 800446c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800446e:	f000 fb41 	bl	8004af4 <vPortExitCritical>

	return xReturn;
 8004472:	697b      	ldr	r3, [r7, #20]
}
 8004474:	0018      	movs	r0, r3
 8004476:	46bd      	mov	sp, r7
 8004478:	b006      	add	sp, #24
 800447a:	bd80      	pop	{r7, pc}
 800447c:	2000045c 	.word	0x2000045c
 8004480:	20000470 	.word	0x20000470

08004484 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004488:	4b02      	ldr	r3, [pc, #8]	; (8004494 <vTaskMissedYield+0x10>)
 800448a:	2201      	movs	r2, #1
 800448c:	601a      	str	r2, [r3, #0]
}
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	2000046c 	.word	0x2000046c

08004498 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80044a0:	f000 f84e 	bl	8004540 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80044a4:	4b03      	ldr	r3, [pc, #12]	; (80044b4 <prvIdleTask+0x1c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d9f9      	bls.n	80044a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80044ac:	f000 fb00 	bl	8004ab0 <vPortYield>
		prvCheckTasksWaitingTermination();
 80044b0:	e7f6      	b.n	80044a0 <prvIdleTask+0x8>
 80044b2:	46c0      	nop			; (mov r8, r8)
 80044b4:	2000035c 	.word	0x2000035c

080044b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044be:	2300      	movs	r3, #0
 80044c0:	607b      	str	r3, [r7, #4]
 80044c2:	e00c      	b.n	80044de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	0013      	movs	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	189b      	adds	r3, r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	4a14      	ldr	r2, [pc, #80]	; (8004520 <prvInitialiseTaskLists+0x68>)
 80044d0:	189b      	adds	r3, r3, r2
 80044d2:	0018      	movs	r0, r3
 80044d4:	f7fe fe38 	bl	8003148 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3301      	adds	r3, #1
 80044dc:	607b      	str	r3, [r7, #4]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b06      	cmp	r3, #6
 80044e2:	d9ef      	bls.n	80044c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80044e4:	4b0f      	ldr	r3, [pc, #60]	; (8004524 <prvInitialiseTaskLists+0x6c>)
 80044e6:	0018      	movs	r0, r3
 80044e8:	f7fe fe2e 	bl	8003148 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80044ec:	4b0e      	ldr	r3, [pc, #56]	; (8004528 <prvInitialiseTaskLists+0x70>)
 80044ee:	0018      	movs	r0, r3
 80044f0:	f7fe fe2a 	bl	8003148 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80044f4:	4b0d      	ldr	r3, [pc, #52]	; (800452c <prvInitialiseTaskLists+0x74>)
 80044f6:	0018      	movs	r0, r3
 80044f8:	f7fe fe26 	bl	8003148 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80044fc:	4b0c      	ldr	r3, [pc, #48]	; (8004530 <prvInitialiseTaskLists+0x78>)
 80044fe:	0018      	movs	r0, r3
 8004500:	f7fe fe22 	bl	8003148 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004504:	4b0b      	ldr	r3, [pc, #44]	; (8004534 <prvInitialiseTaskLists+0x7c>)
 8004506:	0018      	movs	r0, r3
 8004508:	f7fe fe1e 	bl	8003148 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800450c:	4b0a      	ldr	r3, [pc, #40]	; (8004538 <prvInitialiseTaskLists+0x80>)
 800450e:	4a05      	ldr	r2, [pc, #20]	; (8004524 <prvInitialiseTaskLists+0x6c>)
 8004510:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004512:	4b0a      	ldr	r3, [pc, #40]	; (800453c <prvInitialiseTaskLists+0x84>)
 8004514:	4a04      	ldr	r2, [pc, #16]	; (8004528 <prvInitialiseTaskLists+0x70>)
 8004516:	601a      	str	r2, [r3, #0]
}
 8004518:	46c0      	nop			; (mov r8, r8)
 800451a:	46bd      	mov	sp, r7
 800451c:	b002      	add	sp, #8
 800451e:	bd80      	pop	{r7, pc}
 8004520:	2000035c 	.word	0x2000035c
 8004524:	200003e8 	.word	0x200003e8
 8004528:	200003fc 	.word	0x200003fc
 800452c:	20000418 	.word	0x20000418
 8004530:	2000042c 	.word	0x2000042c
 8004534:	20000444 	.word	0x20000444
 8004538:	20000410 	.word	0x20000410
 800453c:	20000414 	.word	0x20000414

08004540 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004546:	e01a      	b.n	800457e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8004548:	f000 fac2 	bl	8004ad0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800454c:	4b10      	ldr	r3, [pc, #64]	; (8004590 <prvCheckTasksWaitingTermination+0x50>)
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3304      	adds	r3, #4
 8004558:	0018      	movs	r0, r3
 800455a:	f7fe fe76 	bl	800324a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800455e:	4b0d      	ldr	r3, [pc, #52]	; (8004594 <prvCheckTasksWaitingTermination+0x54>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	1e5a      	subs	r2, r3, #1
 8004564:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <prvCheckTasksWaitingTermination+0x54>)
 8004566:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004568:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <prvCheckTasksWaitingTermination+0x58>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	1e5a      	subs	r2, r3, #1
 800456e:	4b0a      	ldr	r3, [pc, #40]	; (8004598 <prvCheckTasksWaitingTermination+0x58>)
 8004570:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8004572:	f000 fabf 	bl	8004af4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	0018      	movs	r0, r3
 800457a:	f000 f80f 	bl	800459c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800457e:	4b06      	ldr	r3, [pc, #24]	; (8004598 <prvCheckTasksWaitingTermination+0x58>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1e0      	bne.n	8004548 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004586:	46c0      	nop			; (mov r8, r8)
 8004588:	46c0      	nop			; (mov r8, r8)
 800458a:	46bd      	mov	sp, r7
 800458c:	b002      	add	sp, #8
 800458e:	bd80      	pop	{r7, pc}
 8004590:	2000042c 	.word	0x2000042c
 8004594:	20000458 	.word	0x20000458
 8004598:	20000440 	.word	0x20000440

0800459c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2251      	movs	r2, #81	; 0x51
 80045a8:	5c9b      	ldrb	r3, [r3, r2]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d109      	bne.n	80045c2 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b2:	0018      	movs	r0, r3
 80045b4:	f000 fbca 	bl	8004d4c <vPortFree>
				vPortFree( pxTCB );
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	0018      	movs	r0, r3
 80045bc:	f000 fbc6 	bl	8004d4c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80045c0:	e010      	b.n	80045e4 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2251      	movs	r2, #81	; 0x51
 80045c6:	5c9b      	ldrb	r3, [r3, r2]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d104      	bne.n	80045d6 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	0018      	movs	r0, r3
 80045d0:	f000 fbbc 	bl	8004d4c <vPortFree>
	}
 80045d4:	e006      	b.n	80045e4 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2251      	movs	r2, #81	; 0x51
 80045da:	5c9b      	ldrb	r3, [r3, r2]
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d001      	beq.n	80045e4 <prvDeleteTCB+0x48>
 80045e0:	b672      	cpsid	i
 80045e2:	e7fe      	b.n	80045e2 <prvDeleteTCB+0x46>
	}
 80045e4:	46c0      	nop			; (mov r8, r8)
 80045e6:	46bd      	mov	sp, r7
 80045e8:	b002      	add	sp, #8
 80045ea:	bd80      	pop	{r7, pc}

080045ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045f2:	4b0b      	ldr	r3, [pc, #44]	; (8004620 <prvResetNextTaskUnblockTime+0x34>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d104      	bne.n	8004606 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80045fc:	4b09      	ldr	r3, [pc, #36]	; (8004624 <prvResetNextTaskUnblockTime+0x38>)
 80045fe:	2201      	movs	r2, #1
 8004600:	4252      	negs	r2, r2
 8004602:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004604:	e008      	b.n	8004618 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004606:	4b06      	ldr	r3, [pc, #24]	; (8004620 <prvResetNextTaskUnblockTime+0x34>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	4b03      	ldr	r3, [pc, #12]	; (8004624 <prvResetNextTaskUnblockTime+0x38>)
 8004616:	601a      	str	r2, [r3, #0]
}
 8004618:	46c0      	nop			; (mov r8, r8)
 800461a:	46bd      	mov	sp, r7
 800461c:	b002      	add	sp, #8
 800461e:	bd80      	pop	{r7, pc}
 8004620:	20000410 	.word	0x20000410
 8004624:	20000478 	.word	0x20000478

08004628 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800462e:	4b0a      	ldr	r3, [pc, #40]	; (8004658 <xTaskGetSchedulerState+0x30>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d102      	bne.n	800463c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004636:	2301      	movs	r3, #1
 8004638:	607b      	str	r3, [r7, #4]
 800463a:	e008      	b.n	800464e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800463c:	4b07      	ldr	r3, [pc, #28]	; (800465c <xTaskGetSchedulerState+0x34>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d102      	bne.n	800464a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004644:	2302      	movs	r3, #2
 8004646:	607b      	str	r3, [r7, #4]
 8004648:	e001      	b.n	800464e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800464a:	2300      	movs	r3, #0
 800464c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800464e:	687b      	ldr	r3, [r7, #4]
	}
 8004650:	0018      	movs	r0, r3
 8004652:	46bd      	mov	sp, r7
 8004654:	b002      	add	sp, #8
 8004656:	bd80      	pop	{r7, pc}
 8004658:	20000464 	.word	0x20000464
 800465c:	20000480 	.word	0x20000480

08004660 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800466c:	2300      	movs	r3, #0
 800466e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d051      	beq.n	800471a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467a:	4b2a      	ldr	r3, [pc, #168]	; (8004724 <xTaskPriorityInherit+0xc4>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004680:	429a      	cmp	r2, r3
 8004682:	d241      	bcs.n	8004708 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	2b00      	cmp	r3, #0
 800468a:	db06      	blt.n	800469a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800468c:	4b25      	ldr	r3, [pc, #148]	; (8004724 <xTaskPriorityInherit+0xc4>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004692:	2207      	movs	r2, #7
 8004694:	1ad2      	subs	r2, r2, r3
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	6959      	ldr	r1, [r3, #20]
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a2:	0013      	movs	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	189b      	adds	r3, r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4a1f      	ldr	r2, [pc, #124]	; (8004728 <xTaskPriorityInherit+0xc8>)
 80046ac:	189b      	adds	r3, r3, r2
 80046ae:	4299      	cmp	r1, r3
 80046b0:	d122      	bne.n	80046f8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	3304      	adds	r3, #4
 80046b6:	0018      	movs	r0, r3
 80046b8:	f7fe fdc7 	bl	800324a <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80046bc:	4b19      	ldr	r3, [pc, #100]	; (8004724 <xTaskPriorityInherit+0xc4>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ca:	4b18      	ldr	r3, [pc, #96]	; (800472c <xTaskPriorityInherit+0xcc>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d903      	bls.n	80046da <xTaskPriorityInherit+0x7a>
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d6:	4b15      	ldr	r3, [pc, #84]	; (800472c <xTaskPriorityInherit+0xcc>)
 80046d8:	601a      	str	r2, [r3, #0]
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046de:	0013      	movs	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	189b      	adds	r3, r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4a10      	ldr	r2, [pc, #64]	; (8004728 <xTaskPriorityInherit+0xc8>)
 80046e8:	189a      	adds	r2, r3, r2
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	3304      	adds	r3, #4
 80046ee:	0019      	movs	r1, r3
 80046f0:	0010      	movs	r0, r2
 80046f2:	f7fe fd52 	bl	800319a <vListInsertEnd>
 80046f6:	e004      	b.n	8004702 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80046f8:	4b0a      	ldr	r3, [pc, #40]	; (8004724 <xTaskPriorityInherit+0xc4>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004702:	2301      	movs	r3, #1
 8004704:	60fb      	str	r3, [r7, #12]
 8004706:	e008      	b.n	800471a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800470c:	4b05      	ldr	r3, [pc, #20]	; (8004724 <xTaskPriorityInherit+0xc4>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004712:	429a      	cmp	r2, r3
 8004714:	d201      	bcs.n	800471a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004716:	2301      	movs	r3, #1
 8004718:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800471a:	68fb      	ldr	r3, [r7, #12]
	}
 800471c:	0018      	movs	r0, r3
 800471e:	46bd      	mov	sp, r7
 8004720:	b004      	add	sp, #16
 8004722:	bd80      	pop	{r7, pc}
 8004724:	20000358 	.word	0x20000358
 8004728:	2000035c 	.word	0x2000035c
 800472c:	20000460 	.word	0x20000460

08004730 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800473c:	2300      	movs	r3, #0
 800473e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d044      	beq.n	80047d0 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004746:	4b25      	ldr	r3, [pc, #148]	; (80047dc <xTaskPriorityDisinherit+0xac>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	429a      	cmp	r2, r3
 800474e:	d001      	beq.n	8004754 <xTaskPriorityDisinherit+0x24>
 8004750:	b672      	cpsid	i
 8004752:	e7fe      	b.n	8004752 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <xTaskPriorityDisinherit+0x30>
 800475c:	b672      	cpsid	i
 800475e:	e7fe      	b.n	800475e <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004764:	1e5a      	subs	r2, r3, #1
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004772:	429a      	cmp	r2, r3
 8004774:	d02c      	beq.n	80047d0 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800477a:	2b00      	cmp	r3, #0
 800477c:	d128      	bne.n	80047d0 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	3304      	adds	r3, #4
 8004782:	0018      	movs	r0, r3
 8004784:	f7fe fd61 	bl	800324a <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004794:	2207      	movs	r2, #7
 8004796:	1ad2      	subs	r2, r2, r3
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a0:	4b0f      	ldr	r3, [pc, #60]	; (80047e0 <xTaskPriorityDisinherit+0xb0>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d903      	bls.n	80047b0 <xTaskPriorityDisinherit+0x80>
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ac:	4b0c      	ldr	r3, [pc, #48]	; (80047e0 <xTaskPriorityDisinherit+0xb0>)
 80047ae:	601a      	str	r2, [r3, #0]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b4:	0013      	movs	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	189b      	adds	r3, r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4a09      	ldr	r2, [pc, #36]	; (80047e4 <xTaskPriorityDisinherit+0xb4>)
 80047be:	189a      	adds	r2, r3, r2
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	3304      	adds	r3, #4
 80047c4:	0019      	movs	r1, r3
 80047c6:	0010      	movs	r0, r2
 80047c8:	f7fe fce7 	bl	800319a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80047cc:	2301      	movs	r3, #1
 80047ce:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80047d0:	68fb      	ldr	r3, [r7, #12]
	}
 80047d2:	0018      	movs	r0, r3
 80047d4:	46bd      	mov	sp, r7
 80047d6:	b004      	add	sp, #16
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	46c0      	nop			; (mov r8, r8)
 80047dc:	20000358 	.word	0x20000358
 80047e0:	20000460 	.word	0x20000460
 80047e4:	2000035c 	.word	0x2000035c

080047e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80047f6:	2301      	movs	r3, #1
 80047f8:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d058      	beq.n	80048b2 <vTaskPriorityDisinheritAfterTimeout+0xca>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <vTaskPriorityDisinheritAfterTimeout+0x24>
 8004808:	b672      	cpsid	i
 800480a:	e7fe      	b.n	800480a <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	429a      	cmp	r2, r3
 8004814:	d902      	bls.n	800481c <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	617b      	str	r3, [r7, #20]
 800481a:	e002      	b.n	8004822 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004820:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	429a      	cmp	r2, r3
 800482a:	d042      	beq.n	80048b2 <vTaskPriorityDisinheritAfterTimeout+0xca>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	429a      	cmp	r2, r3
 8004834:	d13d      	bne.n	80048b2 <vTaskPriorityDisinheritAfterTimeout+0xca>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004836:	4b21      	ldr	r3, [pc, #132]	; (80048bc <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	429a      	cmp	r2, r3
 800483e:	d101      	bne.n	8004844 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 8004840:	b672      	cpsid	i
 8004842:	e7fe      	b.n	8004842 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004848:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	2b00      	cmp	r3, #0
 8004856:	db04      	blt.n	8004862 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	2207      	movs	r2, #7
 800485c:	1ad2      	subs	r2, r2, r3
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	6959      	ldr	r1, [r3, #20]
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	0013      	movs	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	189b      	adds	r3, r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4a13      	ldr	r2, [pc, #76]	; (80048c0 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8004872:	189b      	adds	r3, r3, r2
 8004874:	4299      	cmp	r1, r3
 8004876:	d11c      	bne.n	80048b2 <vTaskPriorityDisinheritAfterTimeout+0xca>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	3304      	adds	r3, #4
 800487c:	0018      	movs	r0, r3
 800487e:	f7fe fce4 	bl	800324a <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004886:	4b0f      	ldr	r3, [pc, #60]	; (80048c4 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	429a      	cmp	r2, r3
 800488c:	d903      	bls.n	8004896 <vTaskPriorityDisinheritAfterTimeout+0xae>
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004892:	4b0c      	ldr	r3, [pc, #48]	; (80048c4 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800489a:	0013      	movs	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	189b      	adds	r3, r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4a07      	ldr	r2, [pc, #28]	; (80048c0 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 80048a4:	189a      	adds	r2, r3, r2
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	3304      	adds	r3, #4
 80048aa:	0019      	movs	r1, r3
 80048ac:	0010      	movs	r0, r2
 80048ae:	f7fe fc74 	bl	800319a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80048b2:	46c0      	nop			; (mov r8, r8)
 80048b4:	46bd      	mov	sp, r7
 80048b6:	b006      	add	sp, #24
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	46c0      	nop			; (mov r8, r8)
 80048bc:	20000358 	.word	0x20000358
 80048c0:	2000035c 	.word	0x2000035c
 80048c4:	20000460 	.word	0x20000460

080048c8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80048cc:	4b06      	ldr	r3, [pc, #24]	; (80048e8 <pvTaskIncrementMutexHeldCount+0x20>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d004      	beq.n	80048de <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80048d4:	4b04      	ldr	r3, [pc, #16]	; (80048e8 <pvTaskIncrementMutexHeldCount+0x20>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048da:	3201      	adds	r2, #1
 80048dc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80048de:	4b02      	ldr	r3, [pc, #8]	; (80048e8 <pvTaskIncrementMutexHeldCount+0x20>)
 80048e0:	681b      	ldr	r3, [r3, #0]
	}
 80048e2:	0018      	movs	r0, r3
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	20000358 	.word	0x20000358

080048ec <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80048f6:	4b21      	ldr	r3, [pc, #132]	; (800497c <prvAddCurrentTaskToDelayedList+0x90>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048fc:	4b20      	ldr	r3, [pc, #128]	; (8004980 <prvAddCurrentTaskToDelayedList+0x94>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3304      	adds	r3, #4
 8004902:	0018      	movs	r0, r3
 8004904:	f7fe fca1 	bl	800324a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3301      	adds	r3, #1
 800490c:	d10b      	bne.n	8004926 <prvAddCurrentTaskToDelayedList+0x3a>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d008      	beq.n	8004926 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004914:	4b1a      	ldr	r3, [pc, #104]	; (8004980 <prvAddCurrentTaskToDelayedList+0x94>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	1d1a      	adds	r2, r3, #4
 800491a:	4b1a      	ldr	r3, [pc, #104]	; (8004984 <prvAddCurrentTaskToDelayedList+0x98>)
 800491c:	0011      	movs	r1, r2
 800491e:	0018      	movs	r0, r3
 8004920:	f7fe fc3b 	bl	800319a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004924:	e026      	b.n	8004974 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	18d3      	adds	r3, r2, r3
 800492c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800492e:	4b14      	ldr	r3, [pc, #80]	; (8004980 <prvAddCurrentTaskToDelayedList+0x94>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	429a      	cmp	r2, r3
 800493c:	d209      	bcs.n	8004952 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800493e:	4b12      	ldr	r3, [pc, #72]	; (8004988 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	4b0f      	ldr	r3, [pc, #60]	; (8004980 <prvAddCurrentTaskToDelayedList+0x94>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	3304      	adds	r3, #4
 8004948:	0019      	movs	r1, r3
 800494a:	0010      	movs	r0, r2
 800494c:	f7fe fc47 	bl	80031de <vListInsert>
}
 8004950:	e010      	b.n	8004974 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004952:	4b0e      	ldr	r3, [pc, #56]	; (800498c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <prvAddCurrentTaskToDelayedList+0x94>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	3304      	adds	r3, #4
 800495c:	0019      	movs	r1, r3
 800495e:	0010      	movs	r0, r2
 8004960:	f7fe fc3d 	bl	80031de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004964:	4b0a      	ldr	r3, [pc, #40]	; (8004990 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	429a      	cmp	r2, r3
 800496c:	d202      	bcs.n	8004974 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800496e:	4b08      	ldr	r3, [pc, #32]	; (8004990 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	601a      	str	r2, [r3, #0]
}
 8004974:	46c0      	nop			; (mov r8, r8)
 8004976:	46bd      	mov	sp, r7
 8004978:	b004      	add	sp, #16
 800497a:	bd80      	pop	{r7, pc}
 800497c:	2000045c 	.word	0x2000045c
 8004980:	20000358 	.word	0x20000358
 8004984:	20000444 	.word	0x20000444
 8004988:	20000414 	.word	0x20000414
 800498c:	20000410 	.word	0x20000410
 8004990:	20000478 	.word	0x20000478

08004994 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	3b04      	subs	r3, #4
 80049a4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2280      	movs	r2, #128	; 0x80
 80049aa:	0452      	lsls	r2, r2, #17
 80049ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	3b04      	subs	r3, #4
 80049b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	3b04      	subs	r3, #4
 80049be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80049c0:	4a08      	ldr	r2, [pc, #32]	; (80049e4 <pxPortInitialiseStack+0x50>)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	3b14      	subs	r3, #20
 80049ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	3b20      	subs	r3, #32
 80049d6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80049d8:	68fb      	ldr	r3, [r7, #12]
}
 80049da:	0018      	movs	r0, r3
 80049dc:	46bd      	mov	sp, r7
 80049de:	b004      	add	sp, #16
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	46c0      	nop			; (mov r8, r8)
 80049e4:	080049e9 	.word	0x080049e9

080049e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80049ee:	2300      	movs	r3, #0
 80049f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80049f2:	4b08      	ldr	r3, [pc, #32]	; (8004a14 <prvTaskExitError+0x2c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	3301      	adds	r3, #1
 80049f8:	d001      	beq.n	80049fe <prvTaskExitError+0x16>
 80049fa:	b672      	cpsid	i
 80049fc:	e7fe      	b.n	80049fc <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80049fe:	b672      	cpsid	i
	while( ulDummy == 0 )
 8004a00:	46c0      	nop			; (mov r8, r8)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d0fc      	beq.n	8004a02 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a08:	46c0      	nop			; (mov r8, r8)
 8004a0a:	46c0      	nop			; (mov r8, r8)
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	b002      	add	sp, #8
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	46c0      	nop			; (mov r8, r8)
 8004a14:	2000000c 	.word	0x2000000c

08004a18 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8004a1c:	46c0      	nop			; (mov r8, r8)
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
	...

08004a30 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8004a30:	4a0b      	ldr	r2, [pc, #44]	; (8004a60 <pxCurrentTCBConst2>)
 8004a32:	6813      	ldr	r3, [r2, #0]
 8004a34:	6818      	ldr	r0, [r3, #0]
 8004a36:	3020      	adds	r0, #32
 8004a38:	f380 8809 	msr	PSP, r0
 8004a3c:	2002      	movs	r0, #2
 8004a3e:	f380 8814 	msr	CONTROL, r0
 8004a42:	f3bf 8f6f 	isb	sy
 8004a46:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8004a48:	46ae      	mov	lr, r5
 8004a4a:	bc08      	pop	{r3}
 8004a4c:	bc04      	pop	{r2}
 8004a4e:	b662      	cpsie	i
 8004a50:	4718      	bx	r3
 8004a52:	46c0      	nop			; (mov r8, r8)
 8004a54:	46c0      	nop			; (mov r8, r8)
 8004a56:	46c0      	nop			; (mov r8, r8)
 8004a58:	46c0      	nop			; (mov r8, r8)
 8004a5a:	46c0      	nop			; (mov r8, r8)
 8004a5c:	46c0      	nop			; (mov r8, r8)
 8004a5e:	46c0      	nop			; (mov r8, r8)

08004a60 <pxCurrentTCBConst2>:
 8004a60:	20000358 	.word	0x20000358
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8004a64:	46c0      	nop			; (mov r8, r8)
 8004a66:	46c0      	nop			; (mov r8, r8)

08004a68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8004a6c:	4b0e      	ldr	r3, [pc, #56]	; (8004aa8 <xPortStartScheduler+0x40>)
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	4b0d      	ldr	r3, [pc, #52]	; (8004aa8 <xPortStartScheduler+0x40>)
 8004a72:	21ff      	movs	r1, #255	; 0xff
 8004a74:	0409      	lsls	r1, r1, #16
 8004a76:	430a      	orrs	r2, r1
 8004a78:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8004a7a:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <xPortStartScheduler+0x40>)
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	4b0a      	ldr	r3, [pc, #40]	; (8004aa8 <xPortStartScheduler+0x40>)
 8004a80:	21ff      	movs	r1, #255	; 0xff
 8004a82:	0609      	lsls	r1, r1, #24
 8004a84:	430a      	orrs	r2, r1
 8004a86:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8004a88:	f000 f898 	bl	8004bbc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a8c:	4b07      	ldr	r3, [pc, #28]	; (8004aac <xPortStartScheduler+0x44>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8004a92:	f7ff ffcd 	bl	8004a30 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004a96:	f7ff fbc5 	bl	8004224 <vTaskSwitchContext>
	prvTaskExitError();
 8004a9a:	f7ff ffa5 	bl	80049e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	46c0      	nop			; (mov r8, r8)
 8004aa8:	e000ed20 	.word	0xe000ed20
 8004aac:	2000000c 	.word	0x2000000c

08004ab0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8004ab4:	4b05      	ldr	r3, [pc, #20]	; (8004acc <vPortYield+0x1c>)
 8004ab6:	2280      	movs	r2, #128	; 0x80
 8004ab8:	0552      	lsls	r2, r2, #21
 8004aba:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8004abc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004ac0:	f3bf 8f6f 	isb	sy
}
 8004ac4:	46c0      	nop			; (mov r8, r8)
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	46c0      	nop			; (mov r8, r8)
 8004acc:	e000ed04 	.word	0xe000ed04

08004ad0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8004ad4:	b672      	cpsid	i
    uxCriticalNesting++;
 8004ad6:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <vPortEnterCritical+0x20>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	1c5a      	adds	r2, r3, #1
 8004adc:	4b04      	ldr	r3, [pc, #16]	; (8004af0 <vPortEnterCritical+0x20>)
 8004ade:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8004ae0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004ae4:	f3bf 8f6f 	isb	sy
}
 8004ae8:	46c0      	nop			; (mov r8, r8)
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	46c0      	nop			; (mov r8, r8)
 8004af0:	2000000c 	.word	0x2000000c

08004af4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004af8:	4b09      	ldr	r3, [pc, #36]	; (8004b20 <vPortExitCritical+0x2c>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <vPortExitCritical+0x10>
 8004b00:	b672      	cpsid	i
 8004b02:	e7fe      	b.n	8004b02 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8004b04:	4b06      	ldr	r3, [pc, #24]	; (8004b20 <vPortExitCritical+0x2c>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	1e5a      	subs	r2, r3, #1
 8004b0a:	4b05      	ldr	r3, [pc, #20]	; (8004b20 <vPortExitCritical+0x2c>)
 8004b0c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8004b0e:	4b04      	ldr	r3, [pc, #16]	; (8004b20 <vPortExitCritical+0x2c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d100      	bne.n	8004b18 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8004b16:	b662      	cpsie	i
    }
}
 8004b18:	46c0      	nop			; (mov r8, r8)
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	46c0      	nop			; (mov r8, r8)
 8004b20:	2000000c 	.word	0x2000000c

08004b24 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8004b24:	f3ef 8010 	mrs	r0, PRIMASK
 8004b28:	b672      	cpsid	i
 8004b2a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8004b2c:	46c0      	nop			; (mov r8, r8)
 8004b2e:	0018      	movs	r0, r3

08004b30 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8004b30:	f380 8810 	msr	PRIMASK, r0
 8004b34:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8004b36:	46c0      	nop			; (mov r8, r8)
	...

08004b40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b40:	f3ef 8009 	mrs	r0, PSP
 8004b44:	4b0e      	ldr	r3, [pc, #56]	; (8004b80 <pxCurrentTCBConst>)
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	3820      	subs	r0, #32
 8004b4a:	6010      	str	r0, [r2, #0]
 8004b4c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004b4e:	4644      	mov	r4, r8
 8004b50:	464d      	mov	r5, r9
 8004b52:	4656      	mov	r6, sl
 8004b54:	465f      	mov	r7, fp
 8004b56:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004b58:	b508      	push	{r3, lr}
 8004b5a:	b672      	cpsid	i
 8004b5c:	f7ff fb62 	bl	8004224 <vTaskSwitchContext>
 8004b60:	b662      	cpsie	i
 8004b62:	bc0c      	pop	{r2, r3}
 8004b64:	6811      	ldr	r1, [r2, #0]
 8004b66:	6808      	ldr	r0, [r1, #0]
 8004b68:	3010      	adds	r0, #16
 8004b6a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004b6c:	46a0      	mov	r8, r4
 8004b6e:	46a9      	mov	r9, r5
 8004b70:	46b2      	mov	sl, r6
 8004b72:	46bb      	mov	fp, r7
 8004b74:	f380 8809 	msr	PSP, r0
 8004b78:	3820      	subs	r0, #32
 8004b7a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004b7c:	4718      	bx	r3
 8004b7e:	46c0      	nop			; (mov r8, r8)

08004b80 <pxCurrentTCBConst>:
 8004b80:	20000358 	.word	0x20000358
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8004b84:	46c0      	nop			; (mov r8, r8)
 8004b86:	46c0      	nop			; (mov r8, r8)

08004b88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b8e:	f7ff ffc9 	bl	8004b24 <ulSetInterruptMaskFromISR>
 8004b92:	0003      	movs	r3, r0
 8004b94:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b96:	f7ff fa95 	bl	80040c4 <xTaskIncrementTick>
 8004b9a:	1e03      	subs	r3, r0, #0
 8004b9c:	d003      	beq.n	8004ba6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8004b9e:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <SysTick_Handler+0x30>)
 8004ba0:	2280      	movs	r2, #128	; 0x80
 8004ba2:	0552      	lsls	r2, r2, #21
 8004ba4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f7ff ffc1 	bl	8004b30 <vClearInterruptMaskFromISR>
}
 8004bae:	46c0      	nop			; (mov r8, r8)
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	b002      	add	sp, #8
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	46c0      	nop			; (mov r8, r8)
 8004bb8:	e000ed04 	.word	0xe000ed04

08004bbc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8004bc0:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <prvSetupTimerInterrupt+0x34>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8004bc6:	4b0b      	ldr	r3, [pc, #44]	; (8004bf4 <prvSetupTimerInterrupt+0x38>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004bcc:	4b0a      	ldr	r3, [pc, #40]	; (8004bf8 <prvSetupTimerInterrupt+0x3c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	22fa      	movs	r2, #250	; 0xfa
 8004bd2:	0091      	lsls	r1, r2, #2
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	f7fb fa9f 	bl	8000118 <__udivsi3>
 8004bda:	0003      	movs	r3, r0
 8004bdc:	001a      	movs	r2, r3
 8004bde:	4b07      	ldr	r3, [pc, #28]	; (8004bfc <prvSetupTimerInterrupt+0x40>)
 8004be0:	3a01      	subs	r2, #1
 8004be2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8004be4:	4b02      	ldr	r3, [pc, #8]	; (8004bf0 <prvSetupTimerInterrupt+0x34>)
 8004be6:	2207      	movs	r2, #7
 8004be8:	601a      	str	r2, [r3, #0]
}
 8004bea:	46c0      	nop			; (mov r8, r8)
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	e000e010 	.word	0xe000e010
 8004bf4:	e000e018 	.word	0xe000e018
 8004bf8:	20000000 	.word	0x20000000
 8004bfc:	e000e014 	.word	0xe000e014

08004c00 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8004c0c:	f7ff f9c2 	bl	8003f94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c10:	4b49      	ldr	r3, [pc, #292]	; (8004d38 <pvPortMalloc+0x138>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004c18:	f000 f8e0 	bl	8004ddc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c1c:	4b47      	ldr	r3, [pc, #284]	; (8004d3c <pvPortMalloc+0x13c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	4013      	ands	r3, r2
 8004c24:	d000      	beq.n	8004c28 <pvPortMalloc+0x28>
 8004c26:	e079      	b.n	8004d1c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d012      	beq.n	8004c54 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8004c2e:	2208      	movs	r2, #8
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	189b      	adds	r3, r3, r2
 8004c34:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2207      	movs	r2, #7
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	d00a      	beq.n	8004c54 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2207      	movs	r2, #7
 8004c42:	4393      	bics	r3, r2
 8004c44:	3308      	adds	r3, #8
 8004c46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2207      	movs	r2, #7
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	d001      	beq.n	8004c54 <pvPortMalloc+0x54>
 8004c50:	b672      	cpsid	i
 8004c52:	e7fe      	b.n	8004c52 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d060      	beq.n	8004d1c <pvPortMalloc+0x11c>
 8004c5a:	4b39      	ldr	r3, [pc, #228]	; (8004d40 <pvPortMalloc+0x140>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d85b      	bhi.n	8004d1c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c64:	4b37      	ldr	r3, [pc, #220]	; (8004d44 <pvPortMalloc+0x144>)
 8004c66:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8004c68:	4b36      	ldr	r3, [pc, #216]	; (8004d44 <pvPortMalloc+0x144>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c6e:	e004      	b.n	8004c7a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d903      	bls.n	8004c8c <pvPortMalloc+0x8c>
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1f1      	bne.n	8004c70 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004c8c:	4b2a      	ldr	r3, [pc, #168]	; (8004d38 <pvPortMalloc+0x138>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d042      	beq.n	8004d1c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2208      	movs	r2, #8
 8004c9c:	189b      	adds	r3, r3, r2
 8004c9e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	1ad2      	subs	r2, r2, r3
 8004cb0:	2308      	movs	r3, #8
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d916      	bls.n	8004ce6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	18d3      	adds	r3, r2, r3
 8004cbe:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	2207      	movs	r2, #7
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	d001      	beq.n	8004ccc <pvPortMalloc+0xcc>
 8004cc8:	b672      	cpsid	i
 8004cca:	e7fe      	b.n	8004cca <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	1ad2      	subs	r2, r2, r3
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	f000 f8db 	bl	8004e9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ce6:	4b16      	ldr	r3, [pc, #88]	; (8004d40 <pvPortMalloc+0x140>)
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	1ad2      	subs	r2, r2, r3
 8004cf0:	4b13      	ldr	r3, [pc, #76]	; (8004d40 <pvPortMalloc+0x140>)
 8004cf2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004cf4:	4b12      	ldr	r3, [pc, #72]	; (8004d40 <pvPortMalloc+0x140>)
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	4b13      	ldr	r3, [pc, #76]	; (8004d48 <pvPortMalloc+0x148>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d203      	bcs.n	8004d08 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d00:	4b0f      	ldr	r3, [pc, #60]	; (8004d40 <pvPortMalloc+0x140>)
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	4b10      	ldr	r3, [pc, #64]	; (8004d48 <pvPortMalloc+0x148>)
 8004d06:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	4b0b      	ldr	r3, [pc, #44]	; (8004d3c <pvPortMalloc+0x13c>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	431a      	orrs	r2, r3
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d1c:	f7ff f946 	bl	8003fac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2207      	movs	r2, #7
 8004d24:	4013      	ands	r3, r2
 8004d26:	d001      	beq.n	8004d2c <pvPortMalloc+0x12c>
 8004d28:	b672      	cpsid	i
 8004d2a:	e7fe      	b.n	8004d2a <pvPortMalloc+0x12a>
	return pvReturn;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
}
 8004d2e:	0018      	movs	r0, r3
 8004d30:	46bd      	mov	sp, r7
 8004d32:	b006      	add	sp, #24
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	46c0      	nop			; (mov r8, r8)
 8004d38:	2000108c 	.word	0x2000108c
 8004d3c:	20001098 	.word	0x20001098
 8004d40:	20001090 	.word	0x20001090
 8004d44:	20001084 	.word	0x20001084
 8004d48:	20001094 	.word	0x20001094

08004d4c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d035      	beq.n	8004dca <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004d5e:	2308      	movs	r3, #8
 8004d60:	425b      	negs	r3, r3
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	18d3      	adds	r3, r2, r3
 8004d66:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	4b18      	ldr	r3, [pc, #96]	; (8004dd4 <vPortFree+0x88>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4013      	ands	r3, r2
 8004d76:	d101      	bne.n	8004d7c <vPortFree+0x30>
 8004d78:	b672      	cpsid	i
 8004d7a:	e7fe      	b.n	8004d7a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <vPortFree+0x3c>
 8004d84:	b672      	cpsid	i
 8004d86:	e7fe      	b.n	8004d86 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	4b11      	ldr	r3, [pc, #68]	; (8004dd4 <vPortFree+0x88>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4013      	ands	r3, r2
 8004d92:	d01a      	beq.n	8004dca <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d116      	bne.n	8004dca <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	4b0c      	ldr	r3, [pc, #48]	; (8004dd4 <vPortFree+0x88>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	43db      	mvns	r3, r3
 8004da6:	401a      	ands	r2, r3
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004dac:	f7ff f8f2 	bl	8003f94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	4b08      	ldr	r3, [pc, #32]	; (8004dd8 <vPortFree+0x8c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	18d2      	adds	r2, r2, r3
 8004dba:	4b07      	ldr	r3, [pc, #28]	; (8004dd8 <vPortFree+0x8c>)
 8004dbc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	0018      	movs	r0, r3
 8004dc2:	f000 f86b 	bl	8004e9c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004dc6:	f7ff f8f1 	bl	8003fac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004dca:	46c0      	nop			; (mov r8, r8)
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	b004      	add	sp, #16
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	46c0      	nop			; (mov r8, r8)
 8004dd4:	20001098 	.word	0x20001098
 8004dd8:	20001090 	.word	0x20001090

08004ddc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004de2:	23c0      	movs	r3, #192	; 0xc0
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004de8:	4b26      	ldr	r3, [pc, #152]	; (8004e84 <prvHeapInit+0xa8>)
 8004dea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2207      	movs	r2, #7
 8004df0:	4013      	ands	r3, r2
 8004df2:	d00c      	beq.n	8004e0e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	3307      	adds	r3, #7
 8004df8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2207      	movs	r2, #7
 8004dfe:	4393      	bics	r3, r2
 8004e00:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	1ad2      	subs	r2, r2, r3
 8004e08:	4b1e      	ldr	r3, [pc, #120]	; (8004e84 <prvHeapInit+0xa8>)
 8004e0a:	18d3      	adds	r3, r2, r3
 8004e0c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e12:	4b1d      	ldr	r3, [pc, #116]	; (8004e88 <prvHeapInit+0xac>)
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e18:	4b1b      	ldr	r3, [pc, #108]	; (8004e88 <prvHeapInit+0xac>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	18d3      	adds	r3, r2, r3
 8004e24:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004e26:	2208      	movs	r2, #8
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	1a9b      	subs	r3, r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2207      	movs	r2, #7
 8004e32:	4393      	bics	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	4b14      	ldr	r3, [pc, #80]	; (8004e8c <prvHeapInit+0xb0>)
 8004e3a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8004e3c:	4b13      	ldr	r3, [pc, #76]	; (8004e8c <prvHeapInit+0xb0>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2200      	movs	r2, #0
 8004e42:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004e44:	4b11      	ldr	r3, [pc, #68]	; (8004e8c <prvHeapInit+0xb0>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	1ad2      	subs	r2, r2, r3
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004e5a:	4b0c      	ldr	r3, [pc, #48]	; (8004e8c <prvHeapInit+0xb0>)
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	4b0a      	ldr	r3, [pc, #40]	; (8004e90 <prvHeapInit+0xb4>)
 8004e68:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	4b09      	ldr	r3, [pc, #36]	; (8004e94 <prvHeapInit+0xb8>)
 8004e70:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004e72:	4b09      	ldr	r3, [pc, #36]	; (8004e98 <prvHeapInit+0xbc>)
 8004e74:	2280      	movs	r2, #128	; 0x80
 8004e76:	0612      	lsls	r2, r2, #24
 8004e78:	601a      	str	r2, [r3, #0]
}
 8004e7a:	46c0      	nop			; (mov r8, r8)
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	b004      	add	sp, #16
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	46c0      	nop			; (mov r8, r8)
 8004e84:	20000484 	.word	0x20000484
 8004e88:	20001084 	.word	0x20001084
 8004e8c:	2000108c 	.word	0x2000108c
 8004e90:	20001094 	.word	0x20001094
 8004e94:	20001090 	.word	0x20001090
 8004e98:	20001098 	.word	0x20001098

08004e9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ea4:	4b27      	ldr	r3, [pc, #156]	; (8004f44 <prvInsertBlockIntoFreeList+0xa8>)
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	e002      	b.n	8004eb0 <prvInsertBlockIntoFreeList+0x14>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d8f7      	bhi.n	8004eaa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	18d3      	adds	r3, r2, r3
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d108      	bne.n	8004ede <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	18d2      	adds	r2, r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	18d2      	adds	r2, r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d118      	bne.n	8004f24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	4b14      	ldr	r3, [pc, #80]	; (8004f48 <prvInsertBlockIntoFreeList+0xac>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d00d      	beq.n	8004f1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	18d2      	adds	r2, r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	e008      	b.n	8004f2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f1a:	4b0b      	ldr	r3, [pc, #44]	; (8004f48 <prvInsertBlockIntoFreeList+0xac>)
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	e003      	b.n	8004f2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d002      	beq.n	8004f3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f3a:	46c0      	nop			; (mov r8, r8)
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	b004      	add	sp, #16
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	46c0      	nop			; (mov r8, r8)
 8004f44:	20001084 	.word	0x20001084
 8004f48:	2000108c 	.word	0x2000108c

08004f4c <memset>:
 8004f4c:	0003      	movs	r3, r0
 8004f4e:	1882      	adds	r2, r0, r2
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d100      	bne.n	8004f56 <memset+0xa>
 8004f54:	4770      	bx	lr
 8004f56:	7019      	strb	r1, [r3, #0]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	e7f9      	b.n	8004f50 <memset+0x4>

08004f5c <__libc_init_array>:
 8004f5c:	b570      	push	{r4, r5, r6, lr}
 8004f5e:	2600      	movs	r6, #0
 8004f60:	4c0c      	ldr	r4, [pc, #48]	; (8004f94 <__libc_init_array+0x38>)
 8004f62:	4d0d      	ldr	r5, [pc, #52]	; (8004f98 <__libc_init_array+0x3c>)
 8004f64:	1b64      	subs	r4, r4, r5
 8004f66:	10a4      	asrs	r4, r4, #2
 8004f68:	42a6      	cmp	r6, r4
 8004f6a:	d109      	bne.n	8004f80 <__libc_init_array+0x24>
 8004f6c:	2600      	movs	r6, #0
 8004f6e:	f000 f823 	bl	8004fb8 <_init>
 8004f72:	4c0a      	ldr	r4, [pc, #40]	; (8004f9c <__libc_init_array+0x40>)
 8004f74:	4d0a      	ldr	r5, [pc, #40]	; (8004fa0 <__libc_init_array+0x44>)
 8004f76:	1b64      	subs	r4, r4, r5
 8004f78:	10a4      	asrs	r4, r4, #2
 8004f7a:	42a6      	cmp	r6, r4
 8004f7c:	d105      	bne.n	8004f8a <__libc_init_array+0x2e>
 8004f7e:	bd70      	pop	{r4, r5, r6, pc}
 8004f80:	00b3      	lsls	r3, r6, #2
 8004f82:	58eb      	ldr	r3, [r5, r3]
 8004f84:	4798      	blx	r3
 8004f86:	3601      	adds	r6, #1
 8004f88:	e7ee      	b.n	8004f68 <__libc_init_array+0xc>
 8004f8a:	00b3      	lsls	r3, r6, #2
 8004f8c:	58eb      	ldr	r3, [r5, r3]
 8004f8e:	4798      	blx	r3
 8004f90:	3601      	adds	r6, #1
 8004f92:	e7f2      	b.n	8004f7a <__libc_init_array+0x1e>
 8004f94:	080051b4 	.word	0x080051b4
 8004f98:	080051b4 	.word	0x080051b4
 8004f9c:	080051b8 	.word	0x080051b8
 8004fa0:	080051b4 	.word	0x080051b4

08004fa4 <memcpy>:
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	b510      	push	{r4, lr}
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d100      	bne.n	8004fae <memcpy+0xa>
 8004fac:	bd10      	pop	{r4, pc}
 8004fae:	5ccc      	ldrb	r4, [r1, r3]
 8004fb0:	54c4      	strb	r4, [r0, r3]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	e7f8      	b.n	8004fa8 <memcpy+0x4>
	...

08004fb8 <_init>:
 8004fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fba:	46c0      	nop			; (mov r8, r8)
 8004fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fbe:	bc08      	pop	{r3}
 8004fc0:	469e      	mov	lr, r3
 8004fc2:	4770      	bx	lr

08004fc4 <_fini>:
 8004fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fc6:	46c0      	nop			; (mov r8, r8)
 8004fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fca:	bc08      	pop	{r3}
 8004fcc:	469e      	mov	lr, r3
 8004fce:	4770      	bx	lr

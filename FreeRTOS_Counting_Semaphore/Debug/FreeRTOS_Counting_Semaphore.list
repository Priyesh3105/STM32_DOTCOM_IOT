
FreeRTOS_Counting_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aec  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08005bac  08005bac  00015bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dc0  08005dc0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005dc0  08005dc0  00015dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005dc8  08005dc8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dc8  08005dc8  00015dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dcc  08005dcc  00015dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001094  2000001c  08005dec  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010b0  08005dec  000210b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   000106d4  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a85  00000000  00000000  0003075b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa8  00000000  00000000  000331e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c20  00000000  00000000  00034188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015b48  00000000  00000000  00034da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012d07  00000000  00000000  0004a8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00085c56  00000000  00000000  0005d5f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000384c  00000000  00000000  000e3250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000e6a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000001c 	.word	0x2000001c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005b94 	.word	0x08005b94

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000020 	.word	0x20000020
 8000104:	08005b94 	.word	0x08005b94

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f834 	bl	80002cc <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46ce      	mov	lr, r9
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	469c      	mov	ip, r3
 800027a:	0413      	lsls	r3, r2, #16
 800027c:	4647      	mov	r7, r8
 800027e:	0c1b      	lsrs	r3, r3, #16
 8000280:	001d      	movs	r5, r3
 8000282:	000e      	movs	r6, r1
 8000284:	4661      	mov	r1, ip
 8000286:	0404      	lsls	r4, r0, #16
 8000288:	0c24      	lsrs	r4, r4, #16
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	0c10      	lsrs	r0, r2, #16
 8000290:	434b      	muls	r3, r1
 8000292:	4365      	muls	r5, r4
 8000294:	4341      	muls	r1, r0
 8000296:	4360      	muls	r0, r4
 8000298:	0c2c      	lsrs	r4, r5, #16
 800029a:	18c0      	adds	r0, r0, r3
 800029c:	1820      	adds	r0, r4, r0
 800029e:	468c      	mov	ip, r1
 80002a0:	4283      	cmp	r3, r0
 80002a2:	d903      	bls.n	80002ac <__aeabi_lmul+0x3c>
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	025b      	lsls	r3, r3, #9
 80002a8:	4698      	mov	r8, r3
 80002aa:	44c4      	add	ip, r8
 80002ac:	4649      	mov	r1, r9
 80002ae:	4379      	muls	r1, r7
 80002b0:	4356      	muls	r6, r2
 80002b2:	0c03      	lsrs	r3, r0, #16
 80002b4:	042d      	lsls	r5, r5, #16
 80002b6:	0c2d      	lsrs	r5, r5, #16
 80002b8:	1989      	adds	r1, r1, r6
 80002ba:	4463      	add	r3, ip
 80002bc:	0400      	lsls	r0, r0, #16
 80002be:	1940      	adds	r0, r0, r5
 80002c0:	18c9      	adds	r1, r1, r3
 80002c2:	bcc0      	pop	{r6, r7}
 80002c4:	46b9      	mov	r9, r7
 80002c6:	46b0      	mov	r8, r6
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)

080002cc <__udivmoddi4>:
 80002cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ce:	4657      	mov	r7, sl
 80002d0:	464e      	mov	r6, r9
 80002d2:	4645      	mov	r5, r8
 80002d4:	46de      	mov	lr, fp
 80002d6:	b5e0      	push	{r5, r6, r7, lr}
 80002d8:	0004      	movs	r4, r0
 80002da:	000d      	movs	r5, r1
 80002dc:	4692      	mov	sl, r2
 80002de:	4699      	mov	r9, r3
 80002e0:	b083      	sub	sp, #12
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d830      	bhi.n	8000348 <__udivmoddi4+0x7c>
 80002e6:	d02d      	beq.n	8000344 <__udivmoddi4+0x78>
 80002e8:	4649      	mov	r1, r9
 80002ea:	4650      	mov	r0, sl
 80002ec:	f000 f8ba 	bl	8000464 <__clzdi2>
 80002f0:	0029      	movs	r1, r5
 80002f2:	0006      	movs	r6, r0
 80002f4:	0020      	movs	r0, r4
 80002f6:	f000 f8b5 	bl	8000464 <__clzdi2>
 80002fa:	1a33      	subs	r3, r6, r0
 80002fc:	4698      	mov	r8, r3
 80002fe:	3b20      	subs	r3, #32
 8000300:	d434      	bmi.n	800036c <__udivmoddi4+0xa0>
 8000302:	469b      	mov	fp, r3
 8000304:	4653      	mov	r3, sl
 8000306:	465a      	mov	r2, fp
 8000308:	4093      	lsls	r3, r2
 800030a:	4642      	mov	r2, r8
 800030c:	001f      	movs	r7, r3
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	001e      	movs	r6, r3
 8000314:	42af      	cmp	r7, r5
 8000316:	d83b      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000318:	42af      	cmp	r7, r5
 800031a:	d100      	bne.n	800031e <__udivmoddi4+0x52>
 800031c:	e079      	b.n	8000412 <__udivmoddi4+0x146>
 800031e:	465b      	mov	r3, fp
 8000320:	1ba4      	subs	r4, r4, r6
 8000322:	41bd      	sbcs	r5, r7
 8000324:	2b00      	cmp	r3, #0
 8000326:	da00      	bge.n	800032a <__udivmoddi4+0x5e>
 8000328:	e076      	b.n	8000418 <__udivmoddi4+0x14c>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	465a      	mov	r2, fp
 8000336:	4093      	lsls	r3, r2
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	4642      	mov	r2, r8
 800033e:	4093      	lsls	r3, r2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	e029      	b.n	8000398 <__udivmoddi4+0xcc>
 8000344:	4282      	cmp	r2, r0
 8000346:	d9cf      	bls.n	80002e8 <__udivmoddi4+0x1c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <__udivmoddi4+0x8e>
 8000356:	601c      	str	r4, [r3, #0]
 8000358:	605d      	str	r5, [r3, #4]
 800035a:	9800      	ldr	r0, [sp, #0]
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	b003      	add	sp, #12
 8000360:	bcf0      	pop	{r4, r5, r6, r7}
 8000362:	46bb      	mov	fp, r7
 8000364:	46b2      	mov	sl, r6
 8000366:	46a9      	mov	r9, r5
 8000368:	46a0      	mov	r8, r4
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	4642      	mov	r2, r8
 800036e:	469b      	mov	fp, r3
 8000370:	2320      	movs	r3, #32
 8000372:	1a9b      	subs	r3, r3, r2
 8000374:	4652      	mov	r2, sl
 8000376:	40da      	lsrs	r2, r3
 8000378:	4641      	mov	r1, r8
 800037a:	0013      	movs	r3, r2
 800037c:	464a      	mov	r2, r9
 800037e:	408a      	lsls	r2, r1
 8000380:	0017      	movs	r7, r2
 8000382:	4642      	mov	r2, r8
 8000384:	431f      	orrs	r7, r3
 8000386:	4653      	mov	r3, sl
 8000388:	4093      	lsls	r3, r2
 800038a:	001e      	movs	r6, r3
 800038c:	42af      	cmp	r7, r5
 800038e:	d9c3      	bls.n	8000318 <__udivmoddi4+0x4c>
 8000390:	2200      	movs	r2, #0
 8000392:	2300      	movs	r3, #0
 8000394:	9200      	str	r2, [sp, #0]
 8000396:	9301      	str	r3, [sp, #4]
 8000398:	4643      	mov	r3, r8
 800039a:	2b00      	cmp	r3, #0
 800039c:	d0d8      	beq.n	8000350 <__udivmoddi4+0x84>
 800039e:	07fb      	lsls	r3, r7, #31
 80003a0:	0872      	lsrs	r2, r6, #1
 80003a2:	431a      	orrs	r2, r3
 80003a4:	4646      	mov	r6, r8
 80003a6:	087b      	lsrs	r3, r7, #1
 80003a8:	e00e      	b.n	80003c8 <__udivmoddi4+0xfc>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d101      	bne.n	80003b2 <__udivmoddi4+0xe6>
 80003ae:	42a2      	cmp	r2, r4
 80003b0:	d80c      	bhi.n	80003cc <__udivmoddi4+0x100>
 80003b2:	1aa4      	subs	r4, r4, r2
 80003b4:	419d      	sbcs	r5, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	1924      	adds	r4, r4, r4
 80003ba:	416d      	adcs	r5, r5
 80003bc:	2100      	movs	r1, #0
 80003be:	3e01      	subs	r6, #1
 80003c0:	1824      	adds	r4, r4, r0
 80003c2:	414d      	adcs	r5, r1
 80003c4:	2e00      	cmp	r6, #0
 80003c6:	d006      	beq.n	80003d6 <__udivmoddi4+0x10a>
 80003c8:	42ab      	cmp	r3, r5
 80003ca:	d9ee      	bls.n	80003aa <__udivmoddi4+0xde>
 80003cc:	3e01      	subs	r6, #1
 80003ce:	1924      	adds	r4, r4, r4
 80003d0:	416d      	adcs	r5, r5
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d1f8      	bne.n	80003c8 <__udivmoddi4+0xfc>
 80003d6:	9800      	ldr	r0, [sp, #0]
 80003d8:	9901      	ldr	r1, [sp, #4]
 80003da:	465b      	mov	r3, fp
 80003dc:	1900      	adds	r0, r0, r4
 80003de:	4169      	adcs	r1, r5
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	db24      	blt.n	800042e <__udivmoddi4+0x162>
 80003e4:	002b      	movs	r3, r5
 80003e6:	465a      	mov	r2, fp
 80003e8:	4644      	mov	r4, r8
 80003ea:	40d3      	lsrs	r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	40e2      	lsrs	r2, r4
 80003f0:	001c      	movs	r4, r3
 80003f2:	465b      	mov	r3, fp
 80003f4:	0015      	movs	r5, r2
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	db2a      	blt.n	8000450 <__udivmoddi4+0x184>
 80003fa:	0026      	movs	r6, r4
 80003fc:	409e      	lsls	r6, r3
 80003fe:	0033      	movs	r3, r6
 8000400:	0026      	movs	r6, r4
 8000402:	4647      	mov	r7, r8
 8000404:	40be      	lsls	r6, r7
 8000406:	0032      	movs	r2, r6
 8000408:	1a80      	subs	r0, r0, r2
 800040a:	4199      	sbcs	r1, r3
 800040c:	9000      	str	r0, [sp, #0]
 800040e:	9101      	str	r1, [sp, #4]
 8000410:	e79e      	b.n	8000350 <__udivmoddi4+0x84>
 8000412:	42a3      	cmp	r3, r4
 8000414:	d8bc      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000416:	e782      	b.n	800031e <__udivmoddi4+0x52>
 8000418:	4642      	mov	r2, r8
 800041a:	2320      	movs	r3, #32
 800041c:	2100      	movs	r1, #0
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	9100      	str	r1, [sp, #0]
 8000424:	9201      	str	r2, [sp, #4]
 8000426:	2201      	movs	r2, #1
 8000428:	40da      	lsrs	r2, r3
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	e785      	b.n	800033a <__udivmoddi4+0x6e>
 800042e:	4642      	mov	r2, r8
 8000430:	2320      	movs	r3, #32
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	002a      	movs	r2, r5
 8000436:	4646      	mov	r6, r8
 8000438:	409a      	lsls	r2, r3
 800043a:	0023      	movs	r3, r4
 800043c:	40f3      	lsrs	r3, r6
 800043e:	4644      	mov	r4, r8
 8000440:	4313      	orrs	r3, r2
 8000442:	002a      	movs	r2, r5
 8000444:	40e2      	lsrs	r2, r4
 8000446:	001c      	movs	r4, r3
 8000448:	465b      	mov	r3, fp
 800044a:	0015      	movs	r5, r2
 800044c:	2b00      	cmp	r3, #0
 800044e:	dad4      	bge.n	80003fa <__udivmoddi4+0x12e>
 8000450:	4642      	mov	r2, r8
 8000452:	002f      	movs	r7, r5
 8000454:	2320      	movs	r3, #32
 8000456:	0026      	movs	r6, r4
 8000458:	4097      	lsls	r7, r2
 800045a:	1a9b      	subs	r3, r3, r2
 800045c:	40de      	lsrs	r6, r3
 800045e:	003b      	movs	r3, r7
 8000460:	4333      	orrs	r3, r6
 8000462:	e7cd      	b.n	8000400 <__udivmoddi4+0x134>

08000464 <__clzdi2>:
 8000464:	b510      	push	{r4, lr}
 8000466:	2900      	cmp	r1, #0
 8000468:	d103      	bne.n	8000472 <__clzdi2+0xe>
 800046a:	f000 f807 	bl	800047c <__clzsi2>
 800046e:	3020      	adds	r0, #32
 8000470:	e002      	b.n	8000478 <__clzdi2+0x14>
 8000472:	0008      	movs	r0, r1
 8000474:	f000 f802 	bl	800047c <__clzsi2>
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__clzsi2>:
 800047c:	211c      	movs	r1, #28
 800047e:	2301      	movs	r3, #1
 8000480:	041b      	lsls	r3, r3, #16
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0xe>
 8000486:	0c00      	lsrs	r0, r0, #16
 8000488:	3910      	subs	r1, #16
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	4298      	cmp	r0, r3
 800048e:	d301      	bcc.n	8000494 <__clzsi2+0x18>
 8000490:	0a00      	lsrs	r0, r0, #8
 8000492:	3908      	subs	r1, #8
 8000494:	091b      	lsrs	r3, r3, #4
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0x22>
 800049a:	0900      	lsrs	r0, r0, #4
 800049c:	3904      	subs	r1, #4
 800049e:	a202      	add	r2, pc, #8	; (adr r2, 80004a8 <__clzsi2+0x2c>)
 80004a0:	5c10      	ldrb	r0, [r2, r0]
 80004a2:	1840      	adds	r0, r0, r1
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	02020304 	.word	0x02020304
 80004ac:	01010101 	.word	0x01010101
	...

080004b8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	60f8      	str	r0, [r7, #12]
 80004c0:	60b9      	str	r1, [r7, #8]
 80004c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	4a06      	ldr	r2, [pc, #24]	; (80004e0 <vApplicationGetIdleTaskMemory+0x28>)
 80004c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	4a05      	ldr	r2, [pc, #20]	; (80004e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80004ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2280      	movs	r2, #128	; 0x80
 80004d4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	46bd      	mov	sp, r7
 80004da:	b004      	add	sp, #16
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	20000038 	.word	0x20000038
 80004e4:	2000008c 	.word	0x2000008c

080004e8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004ee:	f000 fbe3 	bl	8000cb8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004f2:	f000 f857 	bl	80005a4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004f6:	f000 f8f7 	bl	80006e8 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80004fa:	f000 f8c5 	bl	8000688 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 80004fe:	491e      	ldr	r1, [pc, #120]	; (8000578 <main+0x90>)
 8000500:	4b1e      	ldr	r3, [pc, #120]	; (800057c <main+0x94>)
 8000502:	2201      	movs	r2, #1
 8000504:	0018      	movs	r0, r3
 8000506:	f002 f96d 	bl	80027e4 <HAL_UART_Receive_IT>
	HAL_Delay(1000);
 800050a:	23fa      	movs	r3, #250	; 0xfa
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	0018      	movs	r0, r3
 8000510:	f000 fc0e 	bl	8000d30 <HAL_Delay>


	CountingSem = xSemaphoreCreateCounting(3, 0);
 8000514:	2100      	movs	r1, #0
 8000516:	2003      	movs	r0, #3
 8000518:	f003 fd9d 	bl	8004056 <xQueueCreateCountingSemaphore>
 800051c:	0002      	movs	r2, r0
 800051e:	4b18      	ldr	r3, [pc, #96]	; (8000580 <main+0x98>)
 8000520:	601a      	str	r2, [r3, #0]
	if (CountingSem == NULL)
 8000522:	4b17      	ldr	r3, [pc, #92]	; (8000580 <main+0x98>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d107      	bne.n	800053a <main+0x52>
		HAL_UART_Transmit(&huart1,
 800052a:	23fa      	movs	r3, #250	; 0xfa
 800052c:	009b      	lsls	r3, r3, #2
 800052e:	4915      	ldr	r1, [pc, #84]	; (8000584 <main+0x9c>)
 8000530:	4812      	ldr	r0, [pc, #72]	; (800057c <main+0x94>)
 8000532:	2223      	movs	r2, #35	; 0x23
 8000534:	f002 f8b6 	bl	80026a4 <HAL_UART_Transmit>
 8000538:	e006      	b.n	8000548 <main+0x60>
				(uint8_t*) "Unable to Create Semaphore...\r\n", 35, 1000);
	else
		HAL_UART_Transmit(&huart1,
 800053a:	23fa      	movs	r3, #250	; 0xfa
 800053c:	009b      	lsls	r3, r3, #2
 800053e:	4912      	ldr	r1, [pc, #72]	; (8000588 <main+0xa0>)
 8000540:	480e      	ldr	r0, [pc, #56]	; (800057c <main+0x94>)
 8000542:	2232      	movs	r2, #50	; 0x32
 8000544:	f002 f8ae 	bl	80026a4 <HAL_UART_Transmit>
				(uint8_t*) "Counting Semaphore created successfully...\r\n", 50,
				1000);

	//create task
	xTaskCreate(HPT_TASK, "HPT", 128, NULL, 2, &HPThandler);
 8000548:	4910      	ldr	r1, [pc, #64]	; (800058c <main+0xa4>)
 800054a:	4811      	ldr	r0, [pc, #68]	; (8000590 <main+0xa8>)
 800054c:	4b11      	ldr	r3, [pc, #68]	; (8000594 <main+0xac>)
 800054e:	9301      	str	r3, [sp, #4]
 8000550:	2302      	movs	r3, #2
 8000552:	9300      	str	r3, [sp, #0]
 8000554:	2300      	movs	r3, #0
 8000556:	2280      	movs	r2, #128	; 0x80
 8000558:	f004 f909 	bl	800476e <xTaskCreate>
	xTaskCreate(LPT_TASK, "LPT", 128, NULL, 1, &LPThandler);
 800055c:	490e      	ldr	r1, [pc, #56]	; (8000598 <main+0xb0>)
 800055e:	480f      	ldr	r0, [pc, #60]	; (800059c <main+0xb4>)
 8000560:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <main+0xb8>)
 8000562:	9301      	str	r3, [sp, #4]
 8000564:	2301      	movs	r3, #1
 8000566:	9300      	str	r3, [sp, #0]
 8000568:	2300      	movs	r3, #0
 800056a:	2280      	movs	r2, #128	; 0x80
 800056c:	f004 f8ff 	bl	800476e <xTaskCreate>

	vTaskStartScheduler();
 8000570:	f004 fa56 	bl	8004a20 <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000574:	e7fe      	b.n	8000574 <main+0x8c>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	20000324 	.word	0x20000324
 800057c:	2000028c 	.word	0x2000028c
 8000580:	2000031c 	.word	0x2000031c
 8000584:	08005bac 	.word	0x08005bac
 8000588:	08005bcc 	.word	0x08005bcc
 800058c:	08005bfc 	.word	0x08005bfc
 8000590:	08000715 	.word	0x08000715
 8000594:	20000314 	.word	0x20000314
 8000598:	08005c00 	.word	0x08005c00
 800059c:	080008ad 	.word	0x080008ad
 80005a0:	20000318 	.word	0x20000318

080005a4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005a4:	b590      	push	{r4, r7, lr}
 80005a6:	b09d      	sub	sp, #116	; 0x74
 80005a8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005aa:	2438      	movs	r4, #56	; 0x38
 80005ac:	193b      	adds	r3, r7, r4
 80005ae:	0018      	movs	r0, r3
 80005b0:	2338      	movs	r3, #56	; 0x38
 80005b2:	001a      	movs	r2, r3
 80005b4:	2100      	movs	r1, #0
 80005b6:	f005 faa9 	bl	8005b0c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005ba:	2324      	movs	r3, #36	; 0x24
 80005bc:	18fb      	adds	r3, r7, r3
 80005be:	0018      	movs	r0, r3
 80005c0:	2314      	movs	r3, #20
 80005c2:	001a      	movs	r2, r3
 80005c4:	2100      	movs	r1, #0
 80005c6:	f005 faa1 	bl	8005b0c <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80005ca:	003b      	movs	r3, r7
 80005cc:	0018      	movs	r0, r3
 80005ce:	2324      	movs	r3, #36	; 0x24
 80005d0:	001a      	movs	r2, r3
 80005d2:	2100      	movs	r1, #0
 80005d4:	f005 fa9a 	bl	8005b0c <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d8:	4b29      	ldr	r3, [pc, #164]	; (8000680 <SystemClock_Config+0xdc>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a29      	ldr	r2, [pc, #164]	; (8000684 <SystemClock_Config+0xe0>)
 80005de:	401a      	ands	r2, r3
 80005e0:	4b27      	ldr	r3, [pc, #156]	; (8000680 <SystemClock_Config+0xdc>)
 80005e2:	2180      	movs	r1, #128	; 0x80
 80005e4:	0109      	lsls	r1, r1, #4
 80005e6:	430a      	orrs	r2, r1
 80005e8:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ea:	0021      	movs	r1, r4
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2202      	movs	r2, #2
 80005f0:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2201      	movs	r2, #1
 80005f6:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2210      	movs	r2, #16
 80005fc:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2202      	movs	r2, #2
 8000602:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2200      	movs	r2, #0
 8000608:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2280      	movs	r2, #128	; 0x80
 800060e:	02d2      	lsls	r2, r2, #11
 8000610:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2280      	movs	r2, #128	; 0x80
 8000616:	03d2      	lsls	r2, r2, #15
 8000618:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800061a:	187b      	adds	r3, r7, r1
 800061c:	0018      	movs	r0, r3
 800061e:	f000 fe55 	bl	80012cc <HAL_RCC_OscConfig>
 8000622:	1e03      	subs	r3, r0, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x86>
		Error_Handler();
 8000626:	f000 fa0d 	bl	8000a44 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800062a:	2124      	movs	r1, #36	; 0x24
 800062c:	187b      	adds	r3, r7, r1
 800062e:	220f      	movs	r2, #15
 8000630:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2203      	movs	r2, #3
 8000636:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2200      	movs	r2, #0
 8000642:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2200      	movs	r2, #0
 8000648:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2101      	movs	r1, #1
 800064e:	0018      	movs	r0, r3
 8000650:	f001 fa00 	bl	8001a54 <HAL_RCC_ClockConfig>
 8000654:	1e03      	subs	r3, r0, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0xb8>
		Error_Handler();
 8000658:	f000 f9f4 	bl	8000a44 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800065c:	003b      	movs	r3, r7
 800065e:	2201      	movs	r2, #1
 8000660:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000662:	003b      	movs	r3, r7
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000668:	003b      	movs	r3, r7
 800066a:	0018      	movs	r0, r3
 800066c:	f001 fc48 	bl	8001f00 <HAL_RCCEx_PeriphCLKConfig>
 8000670:	1e03      	subs	r3, r0, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0xd4>
		Error_Handler();
 8000674:	f000 f9e6 	bl	8000a44 <Error_Handler>
	}
}
 8000678:	46c0      	nop			; (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	b01d      	add	sp, #116	; 0x74
 800067e:	bd90      	pop	{r4, r7, pc}
 8000680:	40007000 	.word	0x40007000
 8000684:	ffffe7ff 	.word	0xffffe7ff

08000688 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800068c:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <MX_USART1_UART_Init+0x58>)
 800068e:	4a15      	ldr	r2, [pc, #84]	; (80006e4 <MX_USART1_UART_Init+0x5c>)
 8000690:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000692:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <MX_USART1_UART_Init+0x58>)
 8000694:	22e1      	movs	r2, #225	; 0xe1
 8000696:	0252      	lsls	r2, r2, #9
 8000698:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_USART1_UART_Init+0x58>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <MX_USART1_UART_Init+0x58>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_USART1_UART_Init+0x58>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_USART1_UART_Init+0x58>)
 80006ae:	220c      	movs	r2, #12
 80006b0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b2:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <MX_USART1_UART_Init+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_USART1_UART_Init+0x58>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006be:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <MX_USART1_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_USART1_UART_Init+0x58>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80006ca:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <MX_USART1_UART_Init+0x58>)
 80006cc:	0018      	movs	r0, r3
 80006ce:	f001 ff95 	bl	80025fc <HAL_UART_Init>
 80006d2:	1e03      	subs	r3, r0, #0
 80006d4:	d001      	beq.n	80006da <MX_USART1_UART_Init+0x52>
		Error_Handler();
 80006d6:	f000 f9b5 	bl	8000a44 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	2000028c 	.word	0x2000028c
 80006e4:	40013800 	.word	0x40013800

080006e8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MX_GPIO_Init+0x28>)
 80006f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006f2:	4b07      	ldr	r3, [pc, #28]	; (8000710 <MX_GPIO_Init+0x28>)
 80006f4:	2101      	movs	r1, #1
 80006f6:	430a      	orrs	r2, r1
 80006f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80006fa:	4b05      	ldr	r3, [pc, #20]	; (8000710 <MX_GPIO_Init+0x28>)
 80006fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006fe:	2201      	movs	r2, #1
 8000700:	4013      	ands	r3, r2
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	46bd      	mov	sp, r7
 800070a:	b002      	add	sp, #8
 800070c:	bd80      	pop	{r7, pc}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	40021000 	.word	0x40021000

08000714 <HPT_TASK>:

/* USER CODE BEGIN 4 */

void HPT_TASK (void *pvParameters)
{
 8000714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000716:	b0ad      	sub	sp, #180	; 0xb4
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	char sresource[3];
	int semcount = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	22ac      	movs	r2, #172	; 0xac
 8000720:	18ba      	adds	r2, r7, r2
 8000722:	6013      	str	r3, [r2, #0]
	char ssemcount[2];

	// Give 3 semaphores at the beginning..
	xSemaphoreGive(CountingSem);
 8000724:	4b57      	ldr	r3, [pc, #348]	; (8000884 <HPT_TASK+0x170>)
 8000726:	6818      	ldr	r0, [r3, #0]
 8000728:	2300      	movs	r3, #0
 800072a:	2200      	movs	r2, #0
 800072c:	2100      	movs	r1, #0
 800072e:	f003 fcb5 	bl	800409c <xQueueGenericSend>
	xSemaphoreGive(CountingSem);
 8000732:	4b54      	ldr	r3, [pc, #336]	; (8000884 <HPT_TASK+0x170>)
 8000734:	6818      	ldr	r0, [r3, #0]
 8000736:	2300      	movs	r3, #0
 8000738:	2200      	movs	r2, #0
 800073a:	2100      	movs	r1, #0
 800073c:	f003 fcae 	bl	800409c <xQueueGenericSend>
	xSemaphoreGive(CountingSem);
 8000740:	4b50      	ldr	r3, [pc, #320]	; (8000884 <HPT_TASK+0x170>)
 8000742:	6818      	ldr	r0, [r3, #0]
 8000744:	2300      	movs	r3, #0
 8000746:	2200      	movs	r2, #0
 8000748:	2100      	movs	r1, #0
 800074a:	f003 fca7 	bl	800409c <xQueueGenericSend>

	while (1)
	{
		char str[150];
		strcpy(str, "Entered HPT Task\r\nAbout to ACQUIRE the Semaphore\r\n");
 800074e:	240c      	movs	r4, #12
 8000750:	193a      	adds	r2, r7, r4
 8000752:	4b4d      	ldr	r3, [pc, #308]	; (8000888 <HPT_TASK+0x174>)
 8000754:	0010      	movs	r0, r2
 8000756:	0019      	movs	r1, r3
 8000758:	2333      	movs	r3, #51	; 0x33
 800075a:	001a      	movs	r2, r3
 800075c:	f005 fa10 	bl	8005b80 <memcpy>
		semcount = uxSemaphoreGetCount(CountingSem);
 8000760:	4b48      	ldr	r3, [pc, #288]	; (8000884 <HPT_TASK+0x170>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	0018      	movs	r0, r3
 8000766:	f003 fe9c 	bl	80044a2 <uxQueueMessagesWaiting>
 800076a:	0003      	movs	r3, r0
 800076c:	22ac      	movs	r2, #172	; 0xac
 800076e:	18b9      	adds	r1, r7, r2
 8000770:	600b      	str	r3, [r1, #0]
		itoa (semcount, ssemcount, 10);
 8000772:	25a4      	movs	r5, #164	; 0xa4
 8000774:	1979      	adds	r1, r7, r5
 8000776:	18bb      	adds	r3, r7, r2
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	220a      	movs	r2, #10
 800077c:	0018      	movs	r0, r3
 800077e:	f005 f98d 	bl	8005a9c <itoa>
		strcat (str, "Tokens available are: ");
 8000782:	193b      	adds	r3, r7, r4
 8000784:	0018      	movs	r0, r3
 8000786:	f7ff fcbf 	bl	8000108 <strlen>
 800078a:	0003      	movs	r3, r0
 800078c:	001a      	movs	r2, r3
 800078e:	193b      	adds	r3, r7, r4
 8000790:	189a      	adds	r2, r3, r2
 8000792:	4b3e      	ldr	r3, [pc, #248]	; (800088c <HPT_TASK+0x178>)
 8000794:	0010      	movs	r0, r2
 8000796:	0019      	movs	r1, r3
 8000798:	2317      	movs	r3, #23
 800079a:	001a      	movs	r2, r3
 800079c:	f005 f9f0 	bl	8005b80 <memcpy>
		strcat (str, ssemcount);
 80007a0:	197a      	adds	r2, r7, r5
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	0011      	movs	r1, r2
 80007a6:	0018      	movs	r0, r3
 80007a8:	f005 f9b8 	bl	8005b1c <strcat>
		strcat (str, "\r\n\r\n");
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	0018      	movs	r0, r3
 80007b0:	f7ff fcaa 	bl	8000108 <strlen>
 80007b4:	0003      	movs	r3, r0
 80007b6:	001a      	movs	r2, r3
 80007b8:	193b      	adds	r3, r7, r4
 80007ba:	189a      	adds	r2, r3, r2
 80007bc:	4b34      	ldr	r3, [pc, #208]	; (8000890 <HPT_TASK+0x17c>)
 80007be:	0010      	movs	r0, r2
 80007c0:	0019      	movs	r1, r3
 80007c2:	2305      	movs	r3, #5
 80007c4:	001a      	movs	r2, r3
 80007c6:	f005 f9db 	bl	8005b80 <memcpy>
		HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80007ca:	193b      	adds	r3, r7, r4
 80007cc:	0018      	movs	r0, r3
 80007ce:	f7ff fc9b 	bl	8000108 <strlen>
 80007d2:	0003      	movs	r3, r0
 80007d4:	b29a      	uxth	r2, r3
 80007d6:	2301      	movs	r3, #1
 80007d8:	425b      	negs	r3, r3
 80007da:	1939      	adds	r1, r7, r4
 80007dc:	482d      	ldr	r0, [pc, #180]	; (8000894 <HPT_TASK+0x180>)
 80007de:	f001 ff61 	bl	80026a4 <HAL_UART_Transmit>

		xSemaphoreTake(CountingSem, portMAX_DELAY);
 80007e2:	4b28      	ldr	r3, [pc, #160]	; (8000884 <HPT_TASK+0x170>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2201      	movs	r2, #1
 80007e8:	4252      	negs	r2, r2
 80007ea:	0011      	movs	r1, r2
 80007ec:	0018      	movs	r0, r3
 80007ee:	f003 fd7e 	bl	80042ee <xQueueSemaphoreTake>

		itoa (resourse[indx], sresource, 10);
 80007f2:	4b29      	ldr	r3, [pc, #164]	; (8000898 <HPT_TASK+0x184>)
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	4b29      	ldr	r3, [pc, #164]	; (800089c <HPT_TASK+0x188>)
 80007f8:	0092      	lsls	r2, r2, #2
 80007fa:	58d3      	ldr	r3, [r2, r3]
 80007fc:	26a8      	movs	r6, #168	; 0xa8
 80007fe:	19b9      	adds	r1, r7, r6
 8000800:	220a      	movs	r2, #10
 8000802:	0018      	movs	r0, r3
 8000804:	f005 f94a 	bl	8005a9c <itoa>
		strcpy (str, "Leaving HPT Task\r\nData ACCESSED is:: ");
 8000808:	0025      	movs	r5, r4
 800080a:	193b      	adds	r3, r7, r4
 800080c:	4a24      	ldr	r2, [pc, #144]	; (80008a0 <HPT_TASK+0x18c>)
 800080e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000810:	c313      	stmia	r3!, {r0, r1, r4}
 8000812:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000814:	c313      	stmia	r3!, {r0, r1, r4}
 8000816:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000818:	c313      	stmia	r3!, {r0, r1, r4}
 800081a:	8812      	ldrh	r2, [r2, #0]
 800081c:	801a      	strh	r2, [r3, #0]
		strcat (str, sresource);
 800081e:	19ba      	adds	r2, r7, r6
 8000820:	002c      	movs	r4, r5
 8000822:	193b      	adds	r3, r7, r4
 8000824:	0011      	movs	r1, r2
 8000826:	0018      	movs	r0, r3
 8000828:	f005 f978 	bl	8005b1c <strcat>
		strcat (str, "\r\nNot releasing the Semaphore\r\n\r\n\r\n");
 800082c:	193b      	adds	r3, r7, r4
 800082e:	0018      	movs	r0, r3
 8000830:	f7ff fc6a 	bl	8000108 <strlen>
 8000834:	0003      	movs	r3, r0
 8000836:	001a      	movs	r2, r3
 8000838:	193b      	adds	r3, r7, r4
 800083a:	189a      	adds	r2, r3, r2
 800083c:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <HPT_TASK+0x190>)
 800083e:	0010      	movs	r0, r2
 8000840:	0019      	movs	r1, r3
 8000842:	2324      	movs	r3, #36	; 0x24
 8000844:	001a      	movs	r2, r3
 8000846:	f005 f99b 	bl	8005b80 <memcpy>
		HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 800084a:	193b      	adds	r3, r7, r4
 800084c:	0018      	movs	r0, r3
 800084e:	f7ff fc5b 	bl	8000108 <strlen>
 8000852:	0003      	movs	r3, r0
 8000854:	b29a      	uxth	r2, r3
 8000856:	2301      	movs	r3, #1
 8000858:	425b      	negs	r3, r3
 800085a:	1939      	adds	r1, r7, r4
 800085c:	480d      	ldr	r0, [pc, #52]	; (8000894 <HPT_TASK+0x180>)
 800085e:	f001 ff21 	bl	80026a4 <HAL_UART_Transmit>

		indx++;
 8000862:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <HPT_TASK+0x184>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <HPT_TASK+0x184>)
 800086a:	601a      	str	r2, [r3, #0]
		if (indx>2) indx=0;
 800086c:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <HPT_TASK+0x184>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b02      	cmp	r3, #2
 8000872:	dd02      	ble.n	800087a <HPT_TASK+0x166>
 8000874:	4b08      	ldr	r3, [pc, #32]	; (8000898 <HPT_TASK+0x184>)
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]

		vTaskDelay(3000);
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <HPT_TASK+0x194>)
 800087c:	0018      	movs	r0, r3
 800087e:	f004 f8a9 	bl	80049d4 <vTaskDelay>
	{
 8000882:	e764      	b.n	800074e <HPT_TASK+0x3a>
 8000884:	2000031c 	.word	0x2000031c
 8000888:	08005c04 	.word	0x08005c04
 800088c:	08005c38 	.word	0x08005c38
 8000890:	08005c50 	.word	0x08005c50
 8000894:	2000028c 	.word	0x2000028c
 8000898:	20000320 	.word	0x20000320
 800089c:	20000000 	.word	0x20000000
 80008a0:	08005c58 	.word	0x08005c58
 80008a4:	08005c80 	.word	0x08005c80
 80008a8:	00000bb8 	.word	0x00000bb8

080008ac <LPT_TASK>:
//		vTaskDelete(NULL);
	}
}
void LPT_TASK(void *pvParameters) {
 80008ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ae:	b0ab      	sub	sp, #172	; 0xac
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]

	char sresource[3];

	while (1) {
		char str[150];
		strcpy(str, "Entered LPT Task\r\nAbout to acquire semaphore\r\n");
 80008b4:	250c      	movs	r5, #12
 80008b6:	197b      	adds	r3, r7, r5
 80008b8:	4a35      	ldr	r2, [pc, #212]	; (8000990 <LPT_TASK+0xe4>)
 80008ba:	ca13      	ldmia	r2!, {r0, r1, r4}
 80008bc:	c313      	stmia	r3!, {r0, r1, r4}
 80008be:	ca13      	ldmia	r2!, {r0, r1, r4}
 80008c0:	c313      	stmia	r3!, {r0, r1, r4}
 80008c2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80008c4:	c313      	stmia	r3!, {r0, r1, r4}
 80008c6:	ca03      	ldmia	r2!, {r0, r1}
 80008c8:	c303      	stmia	r3!, {r0, r1}
 80008ca:	8811      	ldrh	r1, [r2, #0]
 80008cc:	8019      	strh	r1, [r3, #0]
 80008ce:	7892      	ldrb	r2, [r2, #2]
 80008d0:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 80008d2:	002c      	movs	r4, r5
 80008d4:	193b      	adds	r3, r7, r4
 80008d6:	0018      	movs	r0, r3
 80008d8:	f7ff fc16 	bl	8000108 <strlen>
 80008dc:	0003      	movs	r3, r0
 80008de:	b29a      	uxth	r2, r3
 80008e0:	2301      	movs	r3, #1
 80008e2:	425b      	negs	r3, r3
 80008e4:	1939      	adds	r1, r7, r4
 80008e6:	482b      	ldr	r0, [pc, #172]	; (8000994 <LPT_TASK+0xe8>)
 80008e8:	f001 fedc 	bl	80026a4 <HAL_UART_Transmit>

		xSemaphoreTake(CountingSem, portMAX_DELAY);
 80008ec:	4b2a      	ldr	r3, [pc, #168]	; (8000998 <LPT_TASK+0xec>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2201      	movs	r2, #1
 80008f2:	4252      	negs	r2, r2
 80008f4:	0011      	movs	r1, r2
 80008f6:	0018      	movs	r0, r3
 80008f8:	f003 fcf9 	bl	80042ee <xQueueSemaphoreTake>

		itoa(resourse[indx], sresource, 10);
 80008fc:	4b27      	ldr	r3, [pc, #156]	; (800099c <LPT_TASK+0xf0>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	4b27      	ldr	r3, [pc, #156]	; (80009a0 <LPT_TASK+0xf4>)
 8000902:	0092      	lsls	r2, r2, #2
 8000904:	58d3      	ldr	r3, [r2, r3]
 8000906:	26a4      	movs	r6, #164	; 0xa4
 8000908:	19b9      	adds	r1, r7, r6
 800090a:	220a      	movs	r2, #10
 800090c:	0018      	movs	r0, r3
 800090e:	f005 f8c5 	bl	8005a9c <itoa>
		strcpy(str, "Leaving LPT Task\r\nData accessed is ::");
 8000912:	0025      	movs	r5, r4
 8000914:	193b      	adds	r3, r7, r4
 8000916:	4a23      	ldr	r2, [pc, #140]	; (80009a4 <LPT_TASK+0xf8>)
 8000918:	ca13      	ldmia	r2!, {r0, r1, r4}
 800091a:	c313      	stmia	r3!, {r0, r1, r4}
 800091c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800091e:	c313      	stmia	r3!, {r0, r1, r4}
 8000920:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000922:	c313      	stmia	r3!, {r0, r1, r4}
 8000924:	8812      	ldrh	r2, [r2, #0]
 8000926:	801a      	strh	r2, [r3, #0]
		strcat(str, sresource);
 8000928:	19ba      	adds	r2, r7, r6
 800092a:	002c      	movs	r4, r5
 800092c:	193b      	adds	r3, r7, r4
 800092e:	0011      	movs	r1, r2
 8000930:	0018      	movs	r0, r3
 8000932:	f005 f8f3 	bl	8005b1c <strcat>
		strcat(str, "\r\nNot releasing the semaphore\r\n\r\n\r\n\r\n");
 8000936:	193b      	adds	r3, r7, r4
 8000938:	0018      	movs	r0, r3
 800093a:	f7ff fbe5 	bl	8000108 <strlen>
 800093e:	0003      	movs	r3, r0
 8000940:	001a      	movs	r2, r3
 8000942:	193b      	adds	r3, r7, r4
 8000944:	189a      	adds	r2, r3, r2
 8000946:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <LPT_TASK+0xfc>)
 8000948:	0010      	movs	r0, r2
 800094a:	0019      	movs	r1, r3
 800094c:	2326      	movs	r3, #38	; 0x26
 800094e:	001a      	movs	r2, r3
 8000950:	f005 f916 	bl	8005b80 <memcpy>
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8000954:	193b      	adds	r3, r7, r4
 8000956:	0018      	movs	r0, r3
 8000958:	f7ff fbd6 	bl	8000108 <strlen>
 800095c:	0003      	movs	r3, r0
 800095e:	b29a      	uxth	r2, r3
 8000960:	2301      	movs	r3, #1
 8000962:	425b      	negs	r3, r3
 8000964:	1939      	adds	r1, r7, r4
 8000966:	480b      	ldr	r0, [pc, #44]	; (8000994 <LPT_TASK+0xe8>)
 8000968:	f001 fe9c 	bl	80026a4 <HAL_UART_Transmit>

		indx++;
 800096c:	4b0b      	ldr	r3, [pc, #44]	; (800099c <LPT_TASK+0xf0>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	1c5a      	adds	r2, r3, #1
 8000972:	4b0a      	ldr	r3, [pc, #40]	; (800099c <LPT_TASK+0xf0>)
 8000974:	601a      	str	r2, [r3, #0]
		if (indx > 2)
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <LPT_TASK+0xf0>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b02      	cmp	r3, #2
 800097c:	dd02      	ble.n	8000984 <LPT_TASK+0xd8>
			indx = 0;
 800097e:	4b07      	ldr	r3, [pc, #28]	; (800099c <LPT_TASK+0xf0>)
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]

		vTaskDelay(3000);
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <LPT_TASK+0x100>)
 8000986:	0018      	movs	r0, r3
 8000988:	f004 f824 	bl	80049d4 <vTaskDelay>
	while (1) {
 800098c:	e792      	b.n	80008b4 <LPT_TASK+0x8>
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	08005ca4 	.word	0x08005ca4
 8000994:	2000028c 	.word	0x2000028c
 8000998:	2000031c 	.word	0x2000031c
 800099c:	20000320 	.word	0x20000320
 80009a0:	20000000 	.word	0x20000000
 80009a4:	08005cd4 	.word	0x08005cd4
 80009a8:	08005cfc 	.word	0x08005cfc
 80009ac:	00000bb8 	.word	0x00000bb8

080009b0 <HAL_UART_RxCpltCallback>:
		}
}

//UART callBack function
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009b0:	b590      	push	{r4, r7, lr}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, &rx_data, 1);
 80009b8:	4916      	ldr	r1, [pc, #88]	; (8000a14 <HAL_UART_RxCpltCallback+0x64>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2201      	movs	r2, #1
 80009be:	0018      	movs	r0, r3
 80009c0:	f001 ff10 	bl	80027e4 <HAL_UART_Receive_IT>
	if (rx_data == 'r')
 80009c4:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <HAL_UART_RxCpltCallback+0x64>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b72      	cmp	r3, #114	; 0x72
 80009ca:	d11e      	bne.n	8000a0a <HAL_UART_RxCpltCallback+0x5a>
	{
		// release the semaphore here
		 /* The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE as
		 it will get set to pdTRUE inside the interrupt safe API function if a
		 context switch is required. */
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]

		xSemaphoreGiveFromISR(CountingSem, &xHigherPriorityTaskWoken);  // ISR SAFE VERSION
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <HAL_UART_RxCpltCallback+0x68>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	240c      	movs	r4, #12
 80009d6:	193a      	adds	r2, r7, r4
 80009d8:	0011      	movs	r1, r2
 80009da:	0018      	movs	r0, r3
 80009dc:	f003 fc22 	bl	8004224 <xQueueGiveFromISR>
		xSemaphoreGiveFromISR(CountingSem, &xHigherPriorityTaskWoken);  // ISR SAFE VERSION
 80009e0:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <HAL_UART_RxCpltCallback+0x68>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	193a      	adds	r2, r7, r4
 80009e6:	0011      	movs	r1, r2
 80009e8:	0018      	movs	r0, r3
 80009ea:	f003 fc1b 	bl	8004224 <xQueueGiveFromISR>
		xSemaphoreGiveFromISR(CountingSem, &xHigherPriorityTaskWoken);  // ISR SAFE VERSION
 80009ee:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <HAL_UART_RxCpltCallback+0x68>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	193a      	adds	r2, r7, r4
 80009f4:	0011      	movs	r1, r2
 80009f6:	0018      	movs	r0, r3
 80009f8:	f003 fc14 	bl	8004224 <xQueueGiveFromISR>
		 xHigherPriorityTaskWoken was set to pdTRUE inside xSemaphoreGiveFromISR()
		 then calling portEND_SWITCHING_ISR() will request a context switch. If
		 xHigherPriorityTaskWoken is still pdFALSE then calling
		 portEND_SWITCHING_ISR() will have no effect */

		portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d003      	beq.n	8000a0a <HAL_UART_RxCpltCallback+0x5a>
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_UART_RxCpltCallback+0x6c>)
 8000a04:	2280      	movs	r2, #128	; 0x80
 8000a06:	0552      	lsls	r2, r2, #21
 8000a08:	601a      	str	r2, [r3, #0]
	}
}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	b005      	add	sp, #20
 8000a10:	bd90      	pop	{r4, r7, pc}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	20000324 	.word	0x20000324
 8000a18:	2000031c 	.word	0x2000031c
 8000a1c:	e000ed04 	.word	0xe000ed04

08000a20 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a04      	ldr	r2, [pc, #16]	; (8000a40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d101      	bne.n	8000a36 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000a32:	f000 f961 	bl	8000cf8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	b002      	add	sp, #8
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	40001000 	.word	0x40001000

08000a44 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a48:	b672      	cpsid	i
}
 8000a4a:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a4c:	e7fe      	b.n	8000a4c <Error_Handler+0x8>
	...

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a54:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <HAL_MspInit+0x34>)
 8000a56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a58:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <HAL_MspInit+0x34>)
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <HAL_MspInit+0x34>)
 8000a62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a64:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <HAL_MspInit+0x34>)
 8000a66:	2180      	movs	r1, #128	; 0x80
 8000a68:	0549      	lsls	r1, r1, #21
 8000a6a:	430a      	orrs	r2, r1
 8000a6c:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000a6e:	2302      	movs	r3, #2
 8000a70:	425b      	negs	r3, r3
 8000a72:	2200      	movs	r2, #0
 8000a74:	2103      	movs	r1, #3
 8000a76:	0018      	movs	r0, r3
 8000a78:	f000 fa06 	bl	8000e88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	40021000 	.word	0x40021000

08000a88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b089      	sub	sp, #36	; 0x24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	240c      	movs	r4, #12
 8000a92:	193b      	adds	r3, r7, r4
 8000a94:	0018      	movs	r0, r3
 8000a96:	2314      	movs	r3, #20
 8000a98:	001a      	movs	r2, r3
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	f005 f836 	bl	8005b0c <memset>
  if(huart->Instance==USART1)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a1c      	ldr	r2, [pc, #112]	; (8000b18 <HAL_UART_MspInit+0x90>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d132      	bne.n	8000b10 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <HAL_UART_MspInit+0x94>)
 8000aac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000aae:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <HAL_UART_MspInit+0x94>)
 8000ab0:	2180      	movs	r1, #128	; 0x80
 8000ab2:	01c9      	lsls	r1, r1, #7
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab8:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <HAL_UART_MspInit+0x94>)
 8000aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <HAL_UART_MspInit+0x94>)
 8000abe:	2101      	movs	r1, #1
 8000ac0:	430a      	orrs	r2, r1
 8000ac2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ac4:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <HAL_UART_MspInit+0x94>)
 8000ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac8:	2201      	movs	r2, #1
 8000aca:	4013      	ands	r3, r2
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ad0:	193b      	adds	r3, r7, r4
 8000ad2:	22c0      	movs	r2, #192	; 0xc0
 8000ad4:	00d2      	lsls	r2, r2, #3
 8000ad6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad8:	0021      	movs	r1, r4
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	2202      	movs	r2, #2
 8000ade:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	2203      	movs	r2, #3
 8000aea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000aec:	187b      	adds	r3, r7, r1
 8000aee:	2204      	movs	r2, #4
 8000af0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af2:	187a      	adds	r2, r7, r1
 8000af4:	23a0      	movs	r3, #160	; 0xa0
 8000af6:	05db      	lsls	r3, r3, #23
 8000af8:	0011      	movs	r1, r2
 8000afa:	0018      	movs	r0, r3
 8000afc:	f000 fa70 	bl	8000fe0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2103      	movs	r1, #3
 8000b04:	201b      	movs	r0, #27
 8000b06:	f000 f9bf 	bl	8000e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b0a:	201b      	movs	r0, #27
 8000b0c:	f000 f9d1 	bl	8000eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b10:	46c0      	nop			; (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	b009      	add	sp, #36	; 0x24
 8000b16:	bd90      	pop	{r4, r7, pc}
 8000b18:	40013800 	.word	0x40013800
 8000b1c:	40021000 	.word	0x40021000

08000b20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b20:	b5b0      	push	{r4, r5, r7, lr}
 8000b22:	b08c      	sub	sp, #48	; 0x30
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	0019      	movs	r1, r3
 8000b2e:	2011      	movs	r0, #17
 8000b30:	f000 f9aa 	bl	8000e88 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b34:	2011      	movs	r0, #17
 8000b36:	f000 f9bc 	bl	8000eb2 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b3a:	4b32      	ldr	r3, [pc, #200]	; (8000c04 <HAL_InitTick+0xe4>)
 8000b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b3e:	4b31      	ldr	r3, [pc, #196]	; (8000c04 <HAL_InitTick+0xe4>)
 8000b40:	2110      	movs	r1, #16
 8000b42:	430a      	orrs	r2, r1
 8000b44:	639a      	str	r2, [r3, #56]	; 0x38

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b46:	2308      	movs	r3, #8
 8000b48:	18fa      	adds	r2, r7, r3
 8000b4a:	240c      	movs	r4, #12
 8000b4c:	193b      	adds	r3, r7, r4
 8000b4e:	0011      	movs	r1, r2
 8000b50:	0018      	movs	r0, r3
 8000b52:	f001 f9a3 	bl	8001e9c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b56:	193b      	adds	r3, r7, r4
 8000b58:	68db      	ldr	r3, [r3, #12]
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d104      	bne.n	8000b6c <HAL_InitTick+0x4c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b62:	f001 f96f 	bl	8001e44 <HAL_RCC_GetPCLK1Freq>
 8000b66:	0003      	movs	r3, r0
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b6a:	e004      	b.n	8000b76 <HAL_InitTick+0x56>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b6c:	f001 f96a 	bl	8001e44 <HAL_RCC_GetPCLK1Freq>
 8000b70:	0003      	movs	r3, r0
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b78:	4923      	ldr	r1, [pc, #140]	; (8000c08 <HAL_InitTick+0xe8>)
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f7ff facc 	bl	8000118 <__udivsi3>
 8000b80:	0003      	movs	r3, r0
 8000b82:	3b01      	subs	r3, #1
 8000b84:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b86:	4b21      	ldr	r3, [pc, #132]	; (8000c0c <HAL_InitTick+0xec>)
 8000b88:	4a21      	ldr	r2, [pc, #132]	; (8000c10 <HAL_InitTick+0xf0>)
 8000b8a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b8c:	4b1f      	ldr	r3, [pc, #124]	; (8000c0c <HAL_InitTick+0xec>)
 8000b8e:	4a21      	ldr	r2, [pc, #132]	; (8000c14 <HAL_InitTick+0xf4>)
 8000b90:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b92:	4b1e      	ldr	r3, [pc, #120]	; (8000c0c <HAL_InitTick+0xec>)
 8000b94:	6a3a      	ldr	r2, [r7, #32]
 8000b96:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8000b98:	4b1c      	ldr	r3, [pc, #112]	; (8000c0c <HAL_InitTick+0xec>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9e:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <HAL_InitTick+0xec>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000ba4:	252b      	movs	r5, #43	; 0x2b
 8000ba6:	197c      	adds	r4, r7, r5
 8000ba8:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <HAL_InitTick+0xec>)
 8000baa:	0018      	movs	r0, r3
 8000bac:	f001 fb36 	bl	800221c <HAL_TIM_Base_Init>
 8000bb0:	0003      	movs	r3, r0
 8000bb2:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000bb4:	197b      	adds	r3, r7, r5
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d11b      	bne.n	8000bf4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bbc:	197c      	adds	r4, r7, r5
 8000bbe:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <HAL_InitTick+0xec>)
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f001 fb73 	bl	80022ac <HAL_TIM_Base_Start_IT>
 8000bc6:	0003      	movs	r3, r0
 8000bc8:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8000bca:	197b      	adds	r3, r7, r5
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d110      	bne.n	8000bf4 <HAL_InitTick+0xd4>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2b03      	cmp	r3, #3
 8000bd6:	d809      	bhi.n	8000bec <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	0019      	movs	r1, r3
 8000bde:	2011      	movs	r0, #17
 8000be0:	f000 f952 	bl	8000e88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <HAL_InitTick+0xf8>)
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	e003      	b.n	8000bf4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000bec:	232b      	movs	r3, #43	; 0x2b
 8000bee:	18fb      	adds	r3, r7, r3
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000bf4:	232b      	movs	r3, #43	; 0x2b
 8000bf6:	18fb      	adds	r3, r7, r3
 8000bf8:	781b      	ldrb	r3, [r3, #0]
}
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b00c      	add	sp, #48	; 0x30
 8000c00:	bdb0      	pop	{r4, r5, r7, pc}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	40021000 	.word	0x40021000
 8000c08:	000f4240 	.word	0x000f4240
 8000c0c:	20000328 	.word	0x20000328
 8000c10:	40001000 	.word	0x40001000
 8000c14:	000003e7 	.word	0x000003e7
 8000c18:	20000010 	.word	0x20000010

08000c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <NMI_Handler+0x4>

08000c22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <HardFault_Handler+0x4>

08000c28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <TIM6_DAC_IRQHandler+0x14>)
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f001 fb88 	bl	8002344 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c34:	46c0      	nop			; (mov r8, r8)
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	20000328 	.word	0x20000328

08000c40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c44:	4b03      	ldr	r3, [pc, #12]	; (8000c54 <USART1_IRQHandler+0x14>)
 8000c46:	0018      	movs	r0, r3
 8000c48:	f001 fe2a 	bl	80028a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	2000028c 	.word	0x2000028c

08000c58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c5c:	46c0      	nop			; (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000c64:	480d      	ldr	r0, [pc, #52]	; (8000c9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c66:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c68:	f7ff fff6 	bl	8000c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c6c:	480c      	ldr	r0, [pc, #48]	; (8000ca0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c6e:	490d      	ldr	r1, [pc, #52]	; (8000ca4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c70:	4a0d      	ldr	r2, [pc, #52]	; (8000ca8 <LoopForever+0xe>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c74:	e002      	b.n	8000c7c <LoopCopyDataInit>

08000c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7a:	3304      	adds	r3, #4

08000c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c80:	d3f9      	bcc.n	8000c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c82:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c84:	4c0a      	ldr	r4, [pc, #40]	; (8000cb0 <LoopForever+0x16>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c88:	e001      	b.n	8000c8e <LoopFillZerobss>

08000c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c8c:	3204      	adds	r2, #4

08000c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c90:	d3fb      	bcc.n	8000c8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c92:	f004 ff51 	bl	8005b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c96:	f7ff fc27 	bl	80004e8 <main>

08000c9a <LoopForever>:

LoopForever:
    b LoopForever
 8000c9a:	e7fe      	b.n	8000c9a <LoopForever>
  ldr   r0, =_estack
 8000c9c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000ca8:	08005dd0 	.word	0x08005dd0
  ldr r2, =_sbss
 8000cac:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000cb0:	200010b0 	.word	0x200010b0

08000cb4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb4:	e7fe      	b.n	8000cb4 <ADC1_COMP_IRQHandler>
	...

08000cb8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cbe:	1dfb      	adds	r3, r7, #7
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000cc4:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <HAL_Init+0x3c>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <HAL_Init+0x3c>)
 8000cca:	2140      	movs	r1, #64	; 0x40
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cd0:	2003      	movs	r0, #3
 8000cd2:	f7ff ff25 	bl	8000b20 <HAL_InitTick>
 8000cd6:	1e03      	subs	r3, r0, #0
 8000cd8:	d003      	beq.n	8000ce2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000cda:	1dfb      	adds	r3, r7, #7
 8000cdc:	2201      	movs	r2, #1
 8000cde:	701a      	strb	r2, [r3, #0]
 8000ce0:	e001      	b.n	8000ce6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ce2:	f7ff feb5 	bl	8000a50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ce6:	1dfb      	adds	r3, r7, #7
 8000ce8:	781b      	ldrb	r3, [r3, #0]
}
 8000cea:	0018      	movs	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b002      	add	sp, #8
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	40022000 	.word	0x40022000

08000cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <HAL_IncTick+0x1c>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	001a      	movs	r2, r3
 8000d02:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <HAL_IncTick+0x20>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	18d2      	adds	r2, r2, r3
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <HAL_IncTick+0x20>)
 8000d0a:	601a      	str	r2, [r3, #0]
}
 8000d0c:	46c0      	nop			; (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	20000014 	.word	0x20000014
 8000d18:	20000368 	.word	0x20000368

08000d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d20:	4b02      	ldr	r3, [pc, #8]	; (8000d2c <HAL_GetTick+0x10>)
 8000d22:	681b      	ldr	r3, [r3, #0]
}
 8000d24:	0018      	movs	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	20000368 	.word	0x20000368

08000d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d38:	f7ff fff0 	bl	8000d1c <HAL_GetTick>
 8000d3c:	0003      	movs	r3, r0
 8000d3e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	3301      	adds	r3, #1
 8000d48:	d005      	beq.n	8000d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <HAL_Delay+0x44>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	001a      	movs	r2, r3
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	189b      	adds	r3, r3, r2
 8000d54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	f7ff ffe0 	bl	8000d1c <HAL_GetTick>
 8000d5c:	0002      	movs	r2, r0
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d8f7      	bhi.n	8000d58 <HAL_Delay+0x28>
  {
  }
}
 8000d68:	46c0      	nop			; (mov r8, r8)
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b004      	add	sp, #16
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	20000014 	.word	0x20000014

08000d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	0002      	movs	r2, r0
 8000d80:	1dfb      	adds	r3, r7, #7
 8000d82:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d84:	1dfb      	adds	r3, r7, #7
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b7f      	cmp	r3, #127	; 0x7f
 8000d8a:	d809      	bhi.n	8000da0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8c:	1dfb      	adds	r3, r7, #7
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	001a      	movs	r2, r3
 8000d92:	231f      	movs	r3, #31
 8000d94:	401a      	ands	r2, r3
 8000d96:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <__NVIC_EnableIRQ+0x30>)
 8000d98:	2101      	movs	r1, #1
 8000d9a:	4091      	lsls	r1, r2
 8000d9c:	000a      	movs	r2, r1
 8000d9e:	601a      	str	r2, [r3, #0]
  }
}
 8000da0:	46c0      	nop			; (mov r8, r8)
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b002      	add	sp, #8
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	e000e100 	.word	0xe000e100

08000dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dac:	b590      	push	{r4, r7, lr}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	0002      	movs	r2, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	1dfb      	adds	r3, r7, #7
 8000db8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dba:	1dfb      	adds	r3, r7, #7
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b7f      	cmp	r3, #127	; 0x7f
 8000dc0:	d828      	bhi.n	8000e14 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc2:	4a2f      	ldr	r2, [pc, #188]	; (8000e80 <__NVIC_SetPriority+0xd4>)
 8000dc4:	1dfb      	adds	r3, r7, #7
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	b25b      	sxtb	r3, r3
 8000dca:	089b      	lsrs	r3, r3, #2
 8000dcc:	33c0      	adds	r3, #192	; 0xc0
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	589b      	ldr	r3, [r3, r2]
 8000dd2:	1dfa      	adds	r2, r7, #7
 8000dd4:	7812      	ldrb	r2, [r2, #0]
 8000dd6:	0011      	movs	r1, r2
 8000dd8:	2203      	movs	r2, #3
 8000dda:	400a      	ands	r2, r1
 8000ddc:	00d2      	lsls	r2, r2, #3
 8000dde:	21ff      	movs	r1, #255	; 0xff
 8000de0:	4091      	lsls	r1, r2
 8000de2:	000a      	movs	r2, r1
 8000de4:	43d2      	mvns	r2, r2
 8000de6:	401a      	ands	r2, r3
 8000de8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	019b      	lsls	r3, r3, #6
 8000dee:	22ff      	movs	r2, #255	; 0xff
 8000df0:	401a      	ands	r2, r3
 8000df2:	1dfb      	adds	r3, r7, #7
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	0018      	movs	r0, r3
 8000df8:	2303      	movs	r3, #3
 8000dfa:	4003      	ands	r3, r0
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e00:	481f      	ldr	r0, [pc, #124]	; (8000e80 <__NVIC_SetPriority+0xd4>)
 8000e02:	1dfb      	adds	r3, r7, #7
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	b25b      	sxtb	r3, r3
 8000e08:	089b      	lsrs	r3, r3, #2
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	33c0      	adds	r3, #192	; 0xc0
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e12:	e031      	b.n	8000e78 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e14:	4a1b      	ldr	r2, [pc, #108]	; (8000e84 <__NVIC_SetPriority+0xd8>)
 8000e16:	1dfb      	adds	r3, r7, #7
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	0019      	movs	r1, r3
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	400b      	ands	r3, r1
 8000e20:	3b08      	subs	r3, #8
 8000e22:	089b      	lsrs	r3, r3, #2
 8000e24:	3306      	adds	r3, #6
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	18d3      	adds	r3, r2, r3
 8000e2a:	3304      	adds	r3, #4
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	1dfa      	adds	r2, r7, #7
 8000e30:	7812      	ldrb	r2, [r2, #0]
 8000e32:	0011      	movs	r1, r2
 8000e34:	2203      	movs	r2, #3
 8000e36:	400a      	ands	r2, r1
 8000e38:	00d2      	lsls	r2, r2, #3
 8000e3a:	21ff      	movs	r1, #255	; 0xff
 8000e3c:	4091      	lsls	r1, r2
 8000e3e:	000a      	movs	r2, r1
 8000e40:	43d2      	mvns	r2, r2
 8000e42:	401a      	ands	r2, r3
 8000e44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	019b      	lsls	r3, r3, #6
 8000e4a:	22ff      	movs	r2, #255	; 0xff
 8000e4c:	401a      	ands	r2, r3
 8000e4e:	1dfb      	adds	r3, r7, #7
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	0018      	movs	r0, r3
 8000e54:	2303      	movs	r3, #3
 8000e56:	4003      	ands	r3, r0
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e5c:	4809      	ldr	r0, [pc, #36]	; (8000e84 <__NVIC_SetPriority+0xd8>)
 8000e5e:	1dfb      	adds	r3, r7, #7
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	001c      	movs	r4, r3
 8000e64:	230f      	movs	r3, #15
 8000e66:	4023      	ands	r3, r4
 8000e68:	3b08      	subs	r3, #8
 8000e6a:	089b      	lsrs	r3, r3, #2
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	3306      	adds	r3, #6
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	18c3      	adds	r3, r0, r3
 8000e74:	3304      	adds	r3, #4
 8000e76:	601a      	str	r2, [r3, #0]
}
 8000e78:	46c0      	nop			; (mov r8, r8)
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b003      	add	sp, #12
 8000e7e:	bd90      	pop	{r4, r7, pc}
 8000e80:	e000e100 	.word	0xe000e100
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
 8000e92:	210f      	movs	r1, #15
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	1c02      	adds	r2, r0, #0
 8000e98:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	b25b      	sxtb	r3, r3
 8000ea2:	0011      	movs	r1, r2
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f7ff ff81 	bl	8000dac <__NVIC_SetPriority>
}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	46bd      	mov	sp, r7
 8000eae:	b004      	add	sp, #16
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	0002      	movs	r2, r0
 8000eba:	1dfb      	adds	r3, r7, #7
 8000ebc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ebe:	1dfb      	adds	r3, r7, #7
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	b25b      	sxtb	r3, r3
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f7ff ff57 	bl	8000d78 <__NVIC_EnableIRQ>
}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	b002      	add	sp, #8
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b084      	sub	sp, #16
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eda:	230f      	movs	r3, #15
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2225      	movs	r2, #37	; 0x25
 8000ee6:	5c9b      	ldrb	r3, [r3, r2]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d008      	beq.n	8000f00 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2204      	movs	r2, #4
 8000ef2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2224      	movs	r2, #36	; 0x24
 8000ef8:	2100      	movs	r1, #0
 8000efa:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e024      	b.n	8000f4a <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	210e      	movs	r1, #14
 8000f0c:	438a      	bics	r2, r1
 8000f0e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	438a      	bics	r2, r1
 8000f1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f24:	221c      	movs	r2, #28
 8000f26:	401a      	ands	r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	4091      	lsls	r1, r2
 8000f30:	000a      	movs	r2, r1
 8000f32:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2225      	movs	r2, #37	; 0x25
 8000f38:	2101      	movs	r1, #1
 8000f3a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2224      	movs	r2, #36	; 0x24
 8000f40:	2100      	movs	r1, #0
 8000f42:	5499      	strb	r1, [r3, r2]

    return status;
 8000f44:	230f      	movs	r3, #15
 8000f46:	18fb      	adds	r3, r7, r3
 8000f48:	781b      	ldrb	r3, [r3, #0]
  }
}
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b004      	add	sp, #16
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b084      	sub	sp, #16
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f5a:	210f      	movs	r1, #15
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2225      	movs	r2, #37	; 0x25
 8000f66:	5c9b      	ldrb	r3, [r3, r2]
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d006      	beq.n	8000f7c <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2204      	movs	r2, #4
 8000f72:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000f74:	187b      	adds	r3, r7, r1
 8000f76:	2201      	movs	r2, #1
 8000f78:	701a      	strb	r2, [r3, #0]
 8000f7a:	e02a      	b.n	8000fd2 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	210e      	movs	r1, #14
 8000f88:	438a      	bics	r2, r1
 8000f8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2101      	movs	r1, #1
 8000f98:	438a      	bics	r2, r1
 8000f9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa0:	221c      	movs	r2, #28
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa8:	2101      	movs	r1, #1
 8000faa:	4091      	lsls	r1, r2
 8000fac:	000a      	movs	r2, r1
 8000fae:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2225      	movs	r2, #37	; 0x25
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2224      	movs	r2, #36	; 0x24
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d004      	beq.n	8000fd2 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	0010      	movs	r0, r2
 8000fd0:	4798      	blx	r3
    }
  }
  return status;
 8000fd2:	230f      	movs	r3, #15
 8000fd4:	18fb      	adds	r3, r7, r3
 8000fd6:	781b      	ldrb	r3, [r3, #0]
}
 8000fd8:	0018      	movs	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b004      	add	sp, #16
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ff6:	e14f      	b.n	8001298 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	4091      	lsls	r1, r2
 8001002:	000a      	movs	r2, r1
 8001004:	4013      	ands	r3, r2
 8001006:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d100      	bne.n	8001010 <HAL_GPIO_Init+0x30>
 800100e:	e140      	b.n	8001292 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	2203      	movs	r2, #3
 8001016:	4013      	ands	r3, r2
 8001018:	2b01      	cmp	r3, #1
 800101a:	d005      	beq.n	8001028 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2203      	movs	r2, #3
 8001022:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001024:	2b02      	cmp	r3, #2
 8001026:	d130      	bne.n	800108a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	2203      	movs	r2, #3
 8001034:	409a      	lsls	r2, r3
 8001036:	0013      	movs	r3, r2
 8001038:	43da      	mvns	r2, r3
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	68da      	ldr	r2, [r3, #12]
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	409a      	lsls	r2, r3
 800104a:	0013      	movs	r3, r2
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800105e:	2201      	movs	r2, #1
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	409a      	lsls	r2, r3
 8001064:	0013      	movs	r3, r2
 8001066:	43da      	mvns	r2, r3
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	4013      	ands	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	091b      	lsrs	r3, r3, #4
 8001074:	2201      	movs	r2, #1
 8001076:	401a      	ands	r2, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	409a      	lsls	r2, r3
 800107c:	0013      	movs	r3, r2
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2203      	movs	r2, #3
 8001090:	4013      	ands	r3, r2
 8001092:	2b03      	cmp	r3, #3
 8001094:	d017      	beq.n	80010c6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	2203      	movs	r2, #3
 80010a2:	409a      	lsls	r2, r3
 80010a4:	0013      	movs	r3, r2
 80010a6:	43da      	mvns	r2, r3
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	689a      	ldr	r2, [r3, #8]
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	409a      	lsls	r2, r3
 80010b8:	0013      	movs	r3, r2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2203      	movs	r2, #3
 80010cc:	4013      	ands	r3, r2
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d123      	bne.n	800111a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	08da      	lsrs	r2, r3, #3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3208      	adds	r2, #8
 80010da:	0092      	lsls	r2, r2, #2
 80010dc:	58d3      	ldr	r3, [r2, r3]
 80010de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	2207      	movs	r2, #7
 80010e4:	4013      	ands	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	220f      	movs	r2, #15
 80010ea:	409a      	lsls	r2, r3
 80010ec:	0013      	movs	r3, r2
 80010ee:	43da      	mvns	r2, r3
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	691a      	ldr	r2, [r3, #16]
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	2107      	movs	r1, #7
 80010fe:	400b      	ands	r3, r1
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	409a      	lsls	r2, r3
 8001104:	0013      	movs	r3, r2
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	08da      	lsrs	r2, r3, #3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3208      	adds	r2, #8
 8001114:	0092      	lsls	r2, r2, #2
 8001116:	6939      	ldr	r1, [r7, #16]
 8001118:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	2203      	movs	r2, #3
 8001126:	409a      	lsls	r2, r3
 8001128:	0013      	movs	r3, r2
 800112a:	43da      	mvns	r2, r3
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2203      	movs	r2, #3
 8001138:	401a      	ands	r2, r3
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	409a      	lsls	r2, r3
 8001140:	0013      	movs	r3, r2
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685a      	ldr	r2, [r3, #4]
 8001152:	23c0      	movs	r3, #192	; 0xc0
 8001154:	029b      	lsls	r3, r3, #10
 8001156:	4013      	ands	r3, r2
 8001158:	d100      	bne.n	800115c <HAL_GPIO_Init+0x17c>
 800115a:	e09a      	b.n	8001292 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115c:	4b54      	ldr	r3, [pc, #336]	; (80012b0 <HAL_GPIO_Init+0x2d0>)
 800115e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001160:	4b53      	ldr	r3, [pc, #332]	; (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001162:	2101      	movs	r1, #1
 8001164:	430a      	orrs	r2, r1
 8001166:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001168:	4a52      	ldr	r2, [pc, #328]	; (80012b4 <HAL_GPIO_Init+0x2d4>)
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3302      	adds	r3, #2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	589b      	ldr	r3, [r3, r2]
 8001174:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	2203      	movs	r2, #3
 800117a:	4013      	ands	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	220f      	movs	r2, #15
 8001180:	409a      	lsls	r2, r3
 8001182:	0013      	movs	r3, r2
 8001184:	43da      	mvns	r2, r3
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	23a0      	movs	r3, #160	; 0xa0
 8001190:	05db      	lsls	r3, r3, #23
 8001192:	429a      	cmp	r2, r3
 8001194:	d019      	beq.n	80011ca <HAL_GPIO_Init+0x1ea>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a47      	ldr	r2, [pc, #284]	; (80012b8 <HAL_GPIO_Init+0x2d8>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d013      	beq.n	80011c6 <HAL_GPIO_Init+0x1e6>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a46      	ldr	r2, [pc, #280]	; (80012bc <HAL_GPIO_Init+0x2dc>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d00d      	beq.n	80011c2 <HAL_GPIO_Init+0x1e2>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a45      	ldr	r2, [pc, #276]	; (80012c0 <HAL_GPIO_Init+0x2e0>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d007      	beq.n	80011be <HAL_GPIO_Init+0x1de>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a44      	ldr	r2, [pc, #272]	; (80012c4 <HAL_GPIO_Init+0x2e4>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d101      	bne.n	80011ba <HAL_GPIO_Init+0x1da>
 80011b6:	2305      	movs	r3, #5
 80011b8:	e008      	b.n	80011cc <HAL_GPIO_Init+0x1ec>
 80011ba:	2306      	movs	r3, #6
 80011bc:	e006      	b.n	80011cc <HAL_GPIO_Init+0x1ec>
 80011be:	2303      	movs	r3, #3
 80011c0:	e004      	b.n	80011cc <HAL_GPIO_Init+0x1ec>
 80011c2:	2302      	movs	r3, #2
 80011c4:	e002      	b.n	80011cc <HAL_GPIO_Init+0x1ec>
 80011c6:	2301      	movs	r3, #1
 80011c8:	e000      	b.n	80011cc <HAL_GPIO_Init+0x1ec>
 80011ca:	2300      	movs	r3, #0
 80011cc:	697a      	ldr	r2, [r7, #20]
 80011ce:	2103      	movs	r1, #3
 80011d0:	400a      	ands	r2, r1
 80011d2:	0092      	lsls	r2, r2, #2
 80011d4:	4093      	lsls	r3, r2
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011dc:	4935      	ldr	r1, [pc, #212]	; (80012b4 <HAL_GPIO_Init+0x2d4>)
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	089b      	lsrs	r3, r3, #2
 80011e2:	3302      	adds	r3, #2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ea:	4b37      	ldr	r3, [pc, #220]	; (80012c8 <HAL_GPIO_Init+0x2e8>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	43da      	mvns	r2, r3
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	4013      	ands	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	2380      	movs	r3, #128	; 0x80
 8001200:	035b      	lsls	r3, r3, #13
 8001202:	4013      	ands	r3, r2
 8001204:	d003      	beq.n	800120e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4313      	orrs	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800120e:	4b2e      	ldr	r3, [pc, #184]	; (80012c8 <HAL_GPIO_Init+0x2e8>)
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001214:	4b2c      	ldr	r3, [pc, #176]	; (80012c8 <HAL_GPIO_Init+0x2e8>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	43da      	mvns	r2, r3
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	2380      	movs	r3, #128	; 0x80
 800122a:	039b      	lsls	r3, r3, #14
 800122c:	4013      	ands	r3, r2
 800122e:	d003      	beq.n	8001238 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001238:	4b23      	ldr	r3, [pc, #140]	; (80012c8 <HAL_GPIO_Init+0x2e8>)
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800123e:	4b22      	ldr	r3, [pc, #136]	; (80012c8 <HAL_GPIO_Init+0x2e8>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	43da      	mvns	r2, r3
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	2380      	movs	r3, #128	; 0x80
 8001254:	029b      	lsls	r3, r3, #10
 8001256:	4013      	ands	r3, r2
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4313      	orrs	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001262:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <HAL_GPIO_Init+0x2e8>)
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001268:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <HAL_GPIO_Init+0x2e8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	43da      	mvns	r2, r3
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	2380      	movs	r3, #128	; 0x80
 800127e:	025b      	lsls	r3, r3, #9
 8001280:	4013      	ands	r3, r2
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800128c:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <HAL_GPIO_Init+0x2e8>)
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	3301      	adds	r3, #1
 8001296:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	40da      	lsrs	r2, r3
 80012a0:	1e13      	subs	r3, r2, #0
 80012a2:	d000      	beq.n	80012a6 <HAL_GPIO_Init+0x2c6>
 80012a4:	e6a8      	b.n	8000ff8 <HAL_GPIO_Init+0x18>
  }
}
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	46c0      	nop			; (mov r8, r8)
 80012aa:	46bd      	mov	sp, r7
 80012ac:	b006      	add	sp, #24
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40010000 	.word	0x40010000
 80012b8:	50000400 	.word	0x50000400
 80012bc:	50000800 	.word	0x50000800
 80012c0:	50000c00 	.word	0x50000c00
 80012c4:	50001c00 	.word	0x50001c00
 80012c8:	40010400 	.word	0x40010400

080012cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012cc:	b5b0      	push	{r4, r5, r7, lr}
 80012ce:	b08a      	sub	sp, #40	; 0x28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d102      	bne.n	80012e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	f000 fbaf 	bl	8001a3e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012e0:	4bcf      	ldr	r3, [pc, #828]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	220c      	movs	r2, #12
 80012e6:	4013      	ands	r3, r2
 80012e8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012ea:	4bcd      	ldr	r3, [pc, #820]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 80012ec:	68da      	ldr	r2, [r3, #12]
 80012ee:	2380      	movs	r3, #128	; 0x80
 80012f0:	025b      	lsls	r3, r3, #9
 80012f2:	4013      	ands	r3, r2
 80012f4:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2201      	movs	r2, #1
 80012fc:	4013      	ands	r3, r2
 80012fe:	d100      	bne.n	8001302 <HAL_RCC_OscConfig+0x36>
 8001300:	e07e      	b.n	8001400 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001302:	6a3b      	ldr	r3, [r7, #32]
 8001304:	2b08      	cmp	r3, #8
 8001306:	d007      	beq.n	8001318 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001308:	6a3b      	ldr	r3, [r7, #32]
 800130a:	2b0c      	cmp	r3, #12
 800130c:	d112      	bne.n	8001334 <HAL_RCC_OscConfig+0x68>
 800130e:	69fa      	ldr	r2, [r7, #28]
 8001310:	2380      	movs	r3, #128	; 0x80
 8001312:	025b      	lsls	r3, r3, #9
 8001314:	429a      	cmp	r2, r3
 8001316:	d10d      	bne.n	8001334 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001318:	4bc1      	ldr	r3, [pc, #772]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	029b      	lsls	r3, r3, #10
 8001320:	4013      	ands	r3, r2
 8001322:	d100      	bne.n	8001326 <HAL_RCC_OscConfig+0x5a>
 8001324:	e06b      	b.n	80013fe <HAL_RCC_OscConfig+0x132>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d167      	bne.n	80013fe <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	f000 fb85 	bl	8001a3e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	2380      	movs	r3, #128	; 0x80
 800133a:	025b      	lsls	r3, r3, #9
 800133c:	429a      	cmp	r2, r3
 800133e:	d107      	bne.n	8001350 <HAL_RCC_OscConfig+0x84>
 8001340:	4bb7      	ldr	r3, [pc, #732]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4bb6      	ldr	r3, [pc, #728]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 8001346:	2180      	movs	r1, #128	; 0x80
 8001348:	0249      	lsls	r1, r1, #9
 800134a:	430a      	orrs	r2, r1
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	e027      	b.n	80013a0 <HAL_RCC_OscConfig+0xd4>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	23a0      	movs	r3, #160	; 0xa0
 8001356:	02db      	lsls	r3, r3, #11
 8001358:	429a      	cmp	r2, r3
 800135a:	d10e      	bne.n	800137a <HAL_RCC_OscConfig+0xae>
 800135c:	4bb0      	ldr	r3, [pc, #704]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4baf      	ldr	r3, [pc, #700]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 8001362:	2180      	movs	r1, #128	; 0x80
 8001364:	02c9      	lsls	r1, r1, #11
 8001366:	430a      	orrs	r2, r1
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	4bad      	ldr	r3, [pc, #692]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	4bac      	ldr	r3, [pc, #688]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 8001370:	2180      	movs	r1, #128	; 0x80
 8001372:	0249      	lsls	r1, r1, #9
 8001374:	430a      	orrs	r2, r1
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	e012      	b.n	80013a0 <HAL_RCC_OscConfig+0xd4>
 800137a:	4ba9      	ldr	r3, [pc, #676]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	4ba8      	ldr	r3, [pc, #672]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 8001380:	49a8      	ldr	r1, [pc, #672]	; (8001624 <HAL_RCC_OscConfig+0x358>)
 8001382:	400a      	ands	r2, r1
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	4ba6      	ldr	r3, [pc, #664]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	2380      	movs	r3, #128	; 0x80
 800138c:	025b      	lsls	r3, r3, #9
 800138e:	4013      	ands	r3, r2
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4ba2      	ldr	r3, [pc, #648]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4ba1      	ldr	r3, [pc, #644]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 800139a:	49a3      	ldr	r1, [pc, #652]	; (8001628 <HAL_RCC_OscConfig+0x35c>)
 800139c:	400a      	ands	r2, r1
 800139e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d015      	beq.n	80013d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a8:	f7ff fcb8 	bl	8000d1c <HAL_GetTick>
 80013ac:	0003      	movs	r3, r0
 80013ae:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013b0:	e009      	b.n	80013c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b2:	f7ff fcb3 	bl	8000d1c <HAL_GetTick>
 80013b6:	0002      	movs	r2, r0
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b64      	cmp	r3, #100	; 0x64
 80013be:	d902      	bls.n	80013c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	f000 fb3c 	bl	8001a3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013c6:	4b96      	ldr	r3, [pc, #600]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	2380      	movs	r3, #128	; 0x80
 80013cc:	029b      	lsls	r3, r3, #10
 80013ce:	4013      	ands	r3, r2
 80013d0:	d0ef      	beq.n	80013b2 <HAL_RCC_OscConfig+0xe6>
 80013d2:	e015      	b.n	8001400 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fca2 	bl	8000d1c <HAL_GetTick>
 80013d8:	0003      	movs	r3, r0
 80013da:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013de:	f7ff fc9d 	bl	8000d1c <HAL_GetTick>
 80013e2:	0002      	movs	r2, r0
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b64      	cmp	r3, #100	; 0x64
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e326      	b.n	8001a3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013f0:	4b8b      	ldr	r3, [pc, #556]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	029b      	lsls	r3, r3, #10
 80013f8:	4013      	ands	r3, r2
 80013fa:	d1f0      	bne.n	80013de <HAL_RCC_OscConfig+0x112>
 80013fc:	e000      	b.n	8001400 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2202      	movs	r2, #2
 8001406:	4013      	ands	r3, r2
 8001408:	d100      	bne.n	800140c <HAL_RCC_OscConfig+0x140>
 800140a:	e08b      	b.n	8001524 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001412:	6a3b      	ldr	r3, [r7, #32]
 8001414:	2b04      	cmp	r3, #4
 8001416:	d005      	beq.n	8001424 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001418:	6a3b      	ldr	r3, [r7, #32]
 800141a:	2b0c      	cmp	r3, #12
 800141c:	d13e      	bne.n	800149c <HAL_RCC_OscConfig+0x1d0>
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d13b      	bne.n	800149c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001424:	4b7e      	ldr	r3, [pc, #504]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2204      	movs	r2, #4
 800142a:	4013      	ands	r3, r2
 800142c:	d004      	beq.n	8001438 <HAL_RCC_OscConfig+0x16c>
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e302      	b.n	8001a3e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001438:	4b79      	ldr	r3, [pc, #484]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	4a7b      	ldr	r2, [pc, #492]	; (800162c <HAL_RCC_OscConfig+0x360>)
 800143e:	4013      	ands	r3, r2
 8001440:	0019      	movs	r1, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	021a      	lsls	r2, r3, #8
 8001448:	4b75      	ldr	r3, [pc, #468]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 800144a:	430a      	orrs	r2, r1
 800144c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800144e:	4b74      	ldr	r3, [pc, #464]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2209      	movs	r2, #9
 8001454:	4393      	bics	r3, r2
 8001456:	0019      	movs	r1, r3
 8001458:	4b71      	ldr	r3, [pc, #452]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	430a      	orrs	r2, r1
 800145e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001460:	f000 fc40 	bl	8001ce4 <HAL_RCC_GetSysClockFreq>
 8001464:	0001      	movs	r1, r0
 8001466:	4b6e      	ldr	r3, [pc, #440]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	091b      	lsrs	r3, r3, #4
 800146c:	220f      	movs	r2, #15
 800146e:	4013      	ands	r3, r2
 8001470:	4a6f      	ldr	r2, [pc, #444]	; (8001630 <HAL_RCC_OscConfig+0x364>)
 8001472:	5cd3      	ldrb	r3, [r2, r3]
 8001474:	000a      	movs	r2, r1
 8001476:	40da      	lsrs	r2, r3
 8001478:	4b6e      	ldr	r3, [pc, #440]	; (8001634 <HAL_RCC_OscConfig+0x368>)
 800147a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800147c:	4b6e      	ldr	r3, [pc, #440]	; (8001638 <HAL_RCC_OscConfig+0x36c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2513      	movs	r5, #19
 8001482:	197c      	adds	r4, r7, r5
 8001484:	0018      	movs	r0, r3
 8001486:	f7ff fb4b 	bl	8000b20 <HAL_InitTick>
 800148a:	0003      	movs	r3, r0
 800148c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800148e:	197b      	adds	r3, r7, r5
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d046      	beq.n	8001524 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001496:	197b      	adds	r3, r7, r5
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	e2d0      	b.n	8001a3e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d027      	beq.n	80014f2 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80014a2:	4b5f      	ldr	r3, [pc, #380]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2209      	movs	r2, #9
 80014a8:	4393      	bics	r3, r2
 80014aa:	0019      	movs	r1, r3
 80014ac:	4b5c      	ldr	r3, [pc, #368]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	430a      	orrs	r2, r1
 80014b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b4:	f7ff fc32 	bl	8000d1c <HAL_GetTick>
 80014b8:	0003      	movs	r3, r0
 80014ba:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014be:	f7ff fc2d 	bl	8000d1c <HAL_GetTick>
 80014c2:	0002      	movs	r2, r0
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e2b6      	b.n	8001a3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014d0:	4b53      	ldr	r3, [pc, #332]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2204      	movs	r2, #4
 80014d6:	4013      	ands	r3, r2
 80014d8:	d0f1      	beq.n	80014be <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014da:	4b51      	ldr	r3, [pc, #324]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	4a53      	ldr	r2, [pc, #332]	; (800162c <HAL_RCC_OscConfig+0x360>)
 80014e0:	4013      	ands	r3, r2
 80014e2:	0019      	movs	r1, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	021a      	lsls	r2, r3, #8
 80014ea:	4b4d      	ldr	r3, [pc, #308]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 80014ec:	430a      	orrs	r2, r1
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	e018      	b.n	8001524 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014f2:	4b4b      	ldr	r3, [pc, #300]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	4b4a      	ldr	r3, [pc, #296]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 80014f8:	2101      	movs	r1, #1
 80014fa:	438a      	bics	r2, r1
 80014fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fe:	f7ff fc0d 	bl	8000d1c <HAL_GetTick>
 8001502:	0003      	movs	r3, r0
 8001504:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001508:	f7ff fc08 	bl	8000d1c <HAL_GetTick>
 800150c:	0002      	movs	r2, r0
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e291      	b.n	8001a3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800151a:	4b41      	ldr	r3, [pc, #260]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2204      	movs	r2, #4
 8001520:	4013      	ands	r3, r2
 8001522:	d1f1      	bne.n	8001508 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2210      	movs	r2, #16
 800152a:	4013      	ands	r3, r2
 800152c:	d100      	bne.n	8001530 <HAL_RCC_OscConfig+0x264>
 800152e:	e0a1      	b.n	8001674 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001530:	6a3b      	ldr	r3, [r7, #32]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d140      	bne.n	80015b8 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001536:	4b3a      	ldr	r3, [pc, #232]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	2380      	movs	r3, #128	; 0x80
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4013      	ands	r3, r2
 8001540:	d005      	beq.n	800154e <HAL_RCC_OscConfig+0x282>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e277      	b.n	8001a3e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800154e:	4b34      	ldr	r3, [pc, #208]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	4a3a      	ldr	r2, [pc, #232]	; (800163c <HAL_RCC_OscConfig+0x370>)
 8001554:	4013      	ands	r3, r2
 8001556:	0019      	movs	r1, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800155c:	4b30      	ldr	r3, [pc, #192]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 800155e:	430a      	orrs	r2, r1
 8001560:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001562:	4b2f      	ldr	r3, [pc, #188]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	0a19      	lsrs	r1, r3, #8
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	061a      	lsls	r2, r3, #24
 8001570:	4b2b      	ldr	r3, [pc, #172]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 8001572:	430a      	orrs	r2, r1
 8001574:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157a:	0b5b      	lsrs	r3, r3, #13
 800157c:	3301      	adds	r3, #1
 800157e:	2280      	movs	r2, #128	; 0x80
 8001580:	0212      	lsls	r2, r2, #8
 8001582:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001584:	4b26      	ldr	r3, [pc, #152]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	091b      	lsrs	r3, r3, #4
 800158a:	210f      	movs	r1, #15
 800158c:	400b      	ands	r3, r1
 800158e:	4928      	ldr	r1, [pc, #160]	; (8001630 <HAL_RCC_OscConfig+0x364>)
 8001590:	5ccb      	ldrb	r3, [r1, r3]
 8001592:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001594:	4b27      	ldr	r3, [pc, #156]	; (8001634 <HAL_RCC_OscConfig+0x368>)
 8001596:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001598:	4b27      	ldr	r3, [pc, #156]	; (8001638 <HAL_RCC_OscConfig+0x36c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2513      	movs	r5, #19
 800159e:	197c      	adds	r4, r7, r5
 80015a0:	0018      	movs	r0, r3
 80015a2:	f7ff fabd 	bl	8000b20 <HAL_InitTick>
 80015a6:	0003      	movs	r3, r0
 80015a8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80015aa:	197b      	adds	r3, r7, r5
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d060      	beq.n	8001674 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80015b2:	197b      	adds	r3, r7, r5
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	e242      	b.n	8001a3e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69db      	ldr	r3, [r3, #28]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d03f      	beq.n	8001640 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015c0:	4b17      	ldr	r3, [pc, #92]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b16      	ldr	r3, [pc, #88]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 80015c6:	2180      	movs	r1, #128	; 0x80
 80015c8:	0049      	lsls	r1, r1, #1
 80015ca:	430a      	orrs	r2, r1
 80015cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ce:	f7ff fba5 	bl	8000d1c <HAL_GetTick>
 80015d2:	0003      	movs	r3, r0
 80015d4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015d8:	f7ff fba0 	bl	8000d1c <HAL_GetTick>
 80015dc:	0002      	movs	r2, r0
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e229      	b.n	8001a3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015ea:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	2380      	movs	r3, #128	; 0x80
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4013      	ands	r3, r2
 80015f4:	d0f0      	beq.n	80015d8 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015f6:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	4a10      	ldr	r2, [pc, #64]	; (800163c <HAL_RCC_OscConfig+0x370>)
 80015fc:	4013      	ands	r3, r2
 80015fe:	0019      	movs	r1, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 8001606:	430a      	orrs	r2, r1
 8001608:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800160a:	4b05      	ldr	r3, [pc, #20]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	021b      	lsls	r3, r3, #8
 8001610:	0a19      	lsrs	r1, r3, #8
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	061a      	lsls	r2, r3, #24
 8001618:	4b01      	ldr	r3, [pc, #4]	; (8001620 <HAL_RCC_OscConfig+0x354>)
 800161a:	430a      	orrs	r2, r1
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	e029      	b.n	8001674 <HAL_RCC_OscConfig+0x3a8>
 8001620:	40021000 	.word	0x40021000
 8001624:	fffeffff 	.word	0xfffeffff
 8001628:	fffbffff 	.word	0xfffbffff
 800162c:	ffffe0ff 	.word	0xffffe0ff
 8001630:	08005d2c 	.word	0x08005d2c
 8001634:	2000000c 	.word	0x2000000c
 8001638:	20000010 	.word	0x20000010
 800163c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001640:	4bbd      	ldr	r3, [pc, #756]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4bbc      	ldr	r3, [pc, #752]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 8001646:	49bd      	ldr	r1, [pc, #756]	; (800193c <HAL_RCC_OscConfig+0x670>)
 8001648:	400a      	ands	r2, r1
 800164a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164c:	f7ff fb66 	bl	8000d1c <HAL_GetTick>
 8001650:	0003      	movs	r3, r0
 8001652:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001656:	f7ff fb61 	bl	8000d1c <HAL_GetTick>
 800165a:	0002      	movs	r2, r0
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e1ea      	b.n	8001a3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001668:	4bb3      	ldr	r3, [pc, #716]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	2380      	movs	r3, #128	; 0x80
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4013      	ands	r3, r2
 8001672:	d1f0      	bne.n	8001656 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2208      	movs	r2, #8
 800167a:	4013      	ands	r3, r2
 800167c:	d036      	beq.n	80016ec <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d019      	beq.n	80016ba <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001686:	4bac      	ldr	r3, [pc, #688]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 8001688:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800168a:	4bab      	ldr	r3, [pc, #684]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 800168c:	2101      	movs	r1, #1
 800168e:	430a      	orrs	r2, r1
 8001690:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001692:	f7ff fb43 	bl	8000d1c <HAL_GetTick>
 8001696:	0003      	movs	r3, r0
 8001698:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800169c:	f7ff fb3e 	bl	8000d1c <HAL_GetTick>
 80016a0:	0002      	movs	r2, r0
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e1c7      	b.n	8001a3e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016ae:	4ba2      	ldr	r3, [pc, #648]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 80016b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016b2:	2202      	movs	r2, #2
 80016b4:	4013      	ands	r3, r2
 80016b6:	d0f1      	beq.n	800169c <HAL_RCC_OscConfig+0x3d0>
 80016b8:	e018      	b.n	80016ec <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ba:	4b9f      	ldr	r3, [pc, #636]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 80016bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016be:	4b9e      	ldr	r3, [pc, #632]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 80016c0:	2101      	movs	r1, #1
 80016c2:	438a      	bics	r2, r1
 80016c4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c6:	f7ff fb29 	bl	8000d1c <HAL_GetTick>
 80016ca:	0003      	movs	r3, r0
 80016cc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016d0:	f7ff fb24 	bl	8000d1c <HAL_GetTick>
 80016d4:	0002      	movs	r2, r0
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e1ad      	b.n	8001a3e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016e2:	4b95      	ldr	r3, [pc, #596]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 80016e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016e6:	2202      	movs	r2, #2
 80016e8:	4013      	ands	r3, r2
 80016ea:	d1f1      	bne.n	80016d0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2204      	movs	r2, #4
 80016f2:	4013      	ands	r3, r2
 80016f4:	d100      	bne.n	80016f8 <HAL_RCC_OscConfig+0x42c>
 80016f6:	e0ae      	b.n	8001856 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016f8:	2027      	movs	r0, #39	; 0x27
 80016fa:	183b      	adds	r3, r7, r0
 80016fc:	2200      	movs	r2, #0
 80016fe:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001700:	4b8d      	ldr	r3, [pc, #564]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 8001702:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	055b      	lsls	r3, r3, #21
 8001708:	4013      	ands	r3, r2
 800170a:	d109      	bne.n	8001720 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800170c:	4b8a      	ldr	r3, [pc, #552]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 800170e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001710:	4b89      	ldr	r3, [pc, #548]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 8001712:	2180      	movs	r1, #128	; 0x80
 8001714:	0549      	lsls	r1, r1, #21
 8001716:	430a      	orrs	r2, r1
 8001718:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800171a:	183b      	adds	r3, r7, r0
 800171c:	2201      	movs	r2, #1
 800171e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001720:	4b87      	ldr	r3, [pc, #540]	; (8001940 <HAL_RCC_OscConfig+0x674>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	2380      	movs	r3, #128	; 0x80
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	4013      	ands	r3, r2
 800172a:	d11a      	bne.n	8001762 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800172c:	4b84      	ldr	r3, [pc, #528]	; (8001940 <HAL_RCC_OscConfig+0x674>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b83      	ldr	r3, [pc, #524]	; (8001940 <HAL_RCC_OscConfig+0x674>)
 8001732:	2180      	movs	r1, #128	; 0x80
 8001734:	0049      	lsls	r1, r1, #1
 8001736:	430a      	orrs	r2, r1
 8001738:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800173a:	f7ff faef 	bl	8000d1c <HAL_GetTick>
 800173e:	0003      	movs	r3, r0
 8001740:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001744:	f7ff faea 	bl	8000d1c <HAL_GetTick>
 8001748:	0002      	movs	r2, r0
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b64      	cmp	r3, #100	; 0x64
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e173      	b.n	8001a3e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001756:	4b7a      	ldr	r3, [pc, #488]	; (8001940 <HAL_RCC_OscConfig+0x674>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	2380      	movs	r3, #128	; 0x80
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	4013      	ands	r3, r2
 8001760:	d0f0      	beq.n	8001744 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689a      	ldr	r2, [r3, #8]
 8001766:	2380      	movs	r3, #128	; 0x80
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	429a      	cmp	r2, r3
 800176c:	d107      	bne.n	800177e <HAL_RCC_OscConfig+0x4b2>
 800176e:	4b72      	ldr	r3, [pc, #456]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 8001770:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001772:	4b71      	ldr	r3, [pc, #452]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 8001774:	2180      	movs	r1, #128	; 0x80
 8001776:	0049      	lsls	r1, r1, #1
 8001778:	430a      	orrs	r2, r1
 800177a:	651a      	str	r2, [r3, #80]	; 0x50
 800177c:	e031      	b.n	80017e2 <HAL_RCC_OscConfig+0x516>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10c      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4d4>
 8001786:	4b6c      	ldr	r3, [pc, #432]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 8001788:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800178a:	4b6b      	ldr	r3, [pc, #428]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 800178c:	496b      	ldr	r1, [pc, #428]	; (800193c <HAL_RCC_OscConfig+0x670>)
 800178e:	400a      	ands	r2, r1
 8001790:	651a      	str	r2, [r3, #80]	; 0x50
 8001792:	4b69      	ldr	r3, [pc, #420]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 8001794:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001796:	4b68      	ldr	r3, [pc, #416]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 8001798:	496a      	ldr	r1, [pc, #424]	; (8001944 <HAL_RCC_OscConfig+0x678>)
 800179a:	400a      	ands	r2, r1
 800179c:	651a      	str	r2, [r3, #80]	; 0x50
 800179e:	e020      	b.n	80017e2 <HAL_RCC_OscConfig+0x516>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	23a0      	movs	r3, #160	; 0xa0
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d10e      	bne.n	80017ca <HAL_RCC_OscConfig+0x4fe>
 80017ac:	4b62      	ldr	r3, [pc, #392]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 80017ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017b0:	4b61      	ldr	r3, [pc, #388]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 80017b2:	2180      	movs	r1, #128	; 0x80
 80017b4:	00c9      	lsls	r1, r1, #3
 80017b6:	430a      	orrs	r2, r1
 80017b8:	651a      	str	r2, [r3, #80]	; 0x50
 80017ba:	4b5f      	ldr	r3, [pc, #380]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 80017bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017be:	4b5e      	ldr	r3, [pc, #376]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 80017c0:	2180      	movs	r1, #128	; 0x80
 80017c2:	0049      	lsls	r1, r1, #1
 80017c4:	430a      	orrs	r2, r1
 80017c6:	651a      	str	r2, [r3, #80]	; 0x50
 80017c8:	e00b      	b.n	80017e2 <HAL_RCC_OscConfig+0x516>
 80017ca:	4b5b      	ldr	r3, [pc, #364]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 80017cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017ce:	4b5a      	ldr	r3, [pc, #360]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 80017d0:	495a      	ldr	r1, [pc, #360]	; (800193c <HAL_RCC_OscConfig+0x670>)
 80017d2:	400a      	ands	r2, r1
 80017d4:	651a      	str	r2, [r3, #80]	; 0x50
 80017d6:	4b58      	ldr	r3, [pc, #352]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 80017d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017da:	4b57      	ldr	r3, [pc, #348]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 80017dc:	4959      	ldr	r1, [pc, #356]	; (8001944 <HAL_RCC_OscConfig+0x678>)
 80017de:	400a      	ands	r2, r1
 80017e0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d015      	beq.n	8001816 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ea:	f7ff fa97 	bl	8000d1c <HAL_GetTick>
 80017ee:	0003      	movs	r3, r0
 80017f0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017f2:	e009      	b.n	8001808 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017f4:	f7ff fa92 	bl	8000d1c <HAL_GetTick>
 80017f8:	0002      	movs	r2, r0
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	4a52      	ldr	r2, [pc, #328]	; (8001948 <HAL_RCC_OscConfig+0x67c>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e11a      	b.n	8001a3e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001808:	4b4b      	ldr	r3, [pc, #300]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 800180a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4013      	ands	r3, r2
 8001812:	d0ef      	beq.n	80017f4 <HAL_RCC_OscConfig+0x528>
 8001814:	e014      	b.n	8001840 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001816:	f7ff fa81 	bl	8000d1c <HAL_GetTick>
 800181a:	0003      	movs	r3, r0
 800181c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800181e:	e009      	b.n	8001834 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001820:	f7ff fa7c 	bl	8000d1c <HAL_GetTick>
 8001824:	0002      	movs	r2, r0
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	4a47      	ldr	r2, [pc, #284]	; (8001948 <HAL_RCC_OscConfig+0x67c>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e104      	b.n	8001a3e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001834:	4b40      	ldr	r3, [pc, #256]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 8001836:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4013      	ands	r3, r2
 800183e:	d1ef      	bne.n	8001820 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001840:	2327      	movs	r3, #39	; 0x27
 8001842:	18fb      	adds	r3, r7, r3
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d105      	bne.n	8001856 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800184a:	4b3b      	ldr	r3, [pc, #236]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 800184c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800184e:	4b3a      	ldr	r3, [pc, #232]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 8001850:	493e      	ldr	r1, [pc, #248]	; (800194c <HAL_RCC_OscConfig+0x680>)
 8001852:	400a      	ands	r2, r1
 8001854:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2220      	movs	r2, #32
 800185c:	4013      	ands	r3, r2
 800185e:	d049      	beq.n	80018f4 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d026      	beq.n	80018b6 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001868:	4b33      	ldr	r3, [pc, #204]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	4b32      	ldr	r3, [pc, #200]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 800186e:	2101      	movs	r1, #1
 8001870:	430a      	orrs	r2, r1
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	4b30      	ldr	r3, [pc, #192]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 8001876:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001878:	4b2f      	ldr	r3, [pc, #188]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 800187a:	2101      	movs	r1, #1
 800187c:	430a      	orrs	r2, r1
 800187e:	635a      	str	r2, [r3, #52]	; 0x34
 8001880:	4b33      	ldr	r3, [pc, #204]	; (8001950 <HAL_RCC_OscConfig+0x684>)
 8001882:	6a1a      	ldr	r2, [r3, #32]
 8001884:	4b32      	ldr	r3, [pc, #200]	; (8001950 <HAL_RCC_OscConfig+0x684>)
 8001886:	2180      	movs	r1, #128	; 0x80
 8001888:	0189      	lsls	r1, r1, #6
 800188a:	430a      	orrs	r2, r1
 800188c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188e:	f7ff fa45 	bl	8000d1c <HAL_GetTick>
 8001892:	0003      	movs	r3, r0
 8001894:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001898:	f7ff fa40 	bl	8000d1c <HAL_GetTick>
 800189c:	0002      	movs	r2, r0
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e0c9      	b.n	8001a3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80018aa:	4b23      	ldr	r3, [pc, #140]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2202      	movs	r2, #2
 80018b0:	4013      	ands	r3, r2
 80018b2:	d0f1      	beq.n	8001898 <HAL_RCC_OscConfig+0x5cc>
 80018b4:	e01e      	b.n	80018f4 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80018b6:	4b20      	ldr	r3, [pc, #128]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 80018bc:	2101      	movs	r1, #1
 80018be:	438a      	bics	r2, r1
 80018c0:	609a      	str	r2, [r3, #8]
 80018c2:	4b23      	ldr	r3, [pc, #140]	; (8001950 <HAL_RCC_OscConfig+0x684>)
 80018c4:	6a1a      	ldr	r2, [r3, #32]
 80018c6:	4b22      	ldr	r3, [pc, #136]	; (8001950 <HAL_RCC_OscConfig+0x684>)
 80018c8:	4922      	ldr	r1, [pc, #136]	; (8001954 <HAL_RCC_OscConfig+0x688>)
 80018ca:	400a      	ands	r2, r1
 80018cc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ce:	f7ff fa25 	bl	8000d1c <HAL_GetTick>
 80018d2:	0003      	movs	r3, r0
 80018d4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018d8:	f7ff fa20 	bl	8000d1c <HAL_GetTick>
 80018dc:	0002      	movs	r2, r0
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e0a9      	b.n	8001a3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018ea:	4b13      	ldr	r3, [pc, #76]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2202      	movs	r2, #2
 80018f0:	4013      	ands	r3, r2
 80018f2:	d1f1      	bne.n	80018d8 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d100      	bne.n	80018fe <HAL_RCC_OscConfig+0x632>
 80018fc:	e09e      	b.n	8001a3c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018fe:	6a3b      	ldr	r3, [r7, #32]
 8001900:	2b0c      	cmp	r3, #12
 8001902:	d100      	bne.n	8001906 <HAL_RCC_OscConfig+0x63a>
 8001904:	e077      	b.n	80019f6 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190a:	2b02      	cmp	r3, #2
 800190c:	d158      	bne.n	80019c0 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800190e:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_RCC_OscConfig+0x66c>)
 8001914:	4910      	ldr	r1, [pc, #64]	; (8001958 <HAL_RCC_OscConfig+0x68c>)
 8001916:	400a      	ands	r2, r1
 8001918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191a:	f7ff f9ff 	bl	8000d1c <HAL_GetTick>
 800191e:	0003      	movs	r3, r0
 8001920:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001922:	e01b      	b.n	800195c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001924:	f7ff f9fa 	bl	8000d1c <HAL_GetTick>
 8001928:	0002      	movs	r2, r0
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d914      	bls.n	800195c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e083      	b.n	8001a3e <HAL_RCC_OscConfig+0x772>
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	40021000 	.word	0x40021000
 800193c:	fffffeff 	.word	0xfffffeff
 8001940:	40007000 	.word	0x40007000
 8001944:	fffffbff 	.word	0xfffffbff
 8001948:	00001388 	.word	0x00001388
 800194c:	efffffff 	.word	0xefffffff
 8001950:	40010000 	.word	0x40010000
 8001954:	ffffdfff 	.word	0xffffdfff
 8001958:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800195c:	4b3a      	ldr	r3, [pc, #232]	; (8001a48 <HAL_RCC_OscConfig+0x77c>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	2380      	movs	r3, #128	; 0x80
 8001962:	049b      	lsls	r3, r3, #18
 8001964:	4013      	ands	r3, r2
 8001966:	d1dd      	bne.n	8001924 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001968:	4b37      	ldr	r3, [pc, #220]	; (8001a48 <HAL_RCC_OscConfig+0x77c>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	4a37      	ldr	r2, [pc, #220]	; (8001a4c <HAL_RCC_OscConfig+0x780>)
 800196e:	4013      	ands	r3, r2
 8001970:	0019      	movs	r1, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001980:	431a      	orrs	r2, r3
 8001982:	4b31      	ldr	r3, [pc, #196]	; (8001a48 <HAL_RCC_OscConfig+0x77c>)
 8001984:	430a      	orrs	r2, r1
 8001986:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001988:	4b2f      	ldr	r3, [pc, #188]	; (8001a48 <HAL_RCC_OscConfig+0x77c>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b2e      	ldr	r3, [pc, #184]	; (8001a48 <HAL_RCC_OscConfig+0x77c>)
 800198e:	2180      	movs	r1, #128	; 0x80
 8001990:	0449      	lsls	r1, r1, #17
 8001992:	430a      	orrs	r2, r1
 8001994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001996:	f7ff f9c1 	bl	8000d1c <HAL_GetTick>
 800199a:	0003      	movs	r3, r0
 800199c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a0:	f7ff f9bc 	bl	8000d1c <HAL_GetTick>
 80019a4:	0002      	movs	r2, r0
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e045      	b.n	8001a3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80019b2:	4b25      	ldr	r3, [pc, #148]	; (8001a48 <HAL_RCC_OscConfig+0x77c>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	2380      	movs	r3, #128	; 0x80
 80019b8:	049b      	lsls	r3, r3, #18
 80019ba:	4013      	ands	r3, r2
 80019bc:	d0f0      	beq.n	80019a0 <HAL_RCC_OscConfig+0x6d4>
 80019be:	e03d      	b.n	8001a3c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c0:	4b21      	ldr	r3, [pc, #132]	; (8001a48 <HAL_RCC_OscConfig+0x77c>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <HAL_RCC_OscConfig+0x77c>)
 80019c6:	4922      	ldr	r1, [pc, #136]	; (8001a50 <HAL_RCC_OscConfig+0x784>)
 80019c8:	400a      	ands	r2, r1
 80019ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7ff f9a6 	bl	8000d1c <HAL_GetTick>
 80019d0:	0003      	movs	r3, r0
 80019d2:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d6:	f7ff f9a1 	bl	8000d1c <HAL_GetTick>
 80019da:	0002      	movs	r2, r0
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e02a      	b.n	8001a3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019e8:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <HAL_RCC_OscConfig+0x77c>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	2380      	movs	r3, #128	; 0x80
 80019ee:	049b      	lsls	r3, r3, #18
 80019f0:	4013      	ands	r3, r2
 80019f2:	d1f0      	bne.n	80019d6 <HAL_RCC_OscConfig+0x70a>
 80019f4:	e022      	b.n	8001a3c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d101      	bne.n	8001a02 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e01d      	b.n	8001a3e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a02:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <HAL_RCC_OscConfig+0x77c>)
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a08:	69fa      	ldr	r2, [r7, #28]
 8001a0a:	2380      	movs	r3, #128	; 0x80
 8001a0c:	025b      	lsls	r3, r3, #9
 8001a0e:	401a      	ands	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d10f      	bne.n	8001a38 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a18:	69fa      	ldr	r2, [r7, #28]
 8001a1a:	23f0      	movs	r3, #240	; 0xf0
 8001a1c:	039b      	lsls	r3, r3, #14
 8001a1e:	401a      	ands	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d107      	bne.n	8001a38 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001a28:	69fa      	ldr	r2, [r7, #28]
 8001a2a:	23c0      	movs	r3, #192	; 0xc0
 8001a2c:	041b      	lsls	r3, r3, #16
 8001a2e:	401a      	ands	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d001      	beq.n	8001a3c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e000      	b.n	8001a3e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	0018      	movs	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	b00a      	add	sp, #40	; 0x28
 8001a44:	bdb0      	pop	{r4, r5, r7, pc}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	ff02ffff 	.word	0xff02ffff
 8001a50:	feffffff 	.word	0xfeffffff

08001a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a54:	b5b0      	push	{r4, r5, r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e128      	b.n	8001cba <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a68:	4b96      	ldr	r3, [pc, #600]	; (8001cc4 <HAL_RCC_ClockConfig+0x270>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	4013      	ands	r3, r2
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d91e      	bls.n	8001ab4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a76:	4b93      	ldr	r3, [pc, #588]	; (8001cc4 <HAL_RCC_ClockConfig+0x270>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	4393      	bics	r3, r2
 8001a7e:	0019      	movs	r1, r3
 8001a80:	4b90      	ldr	r3, [pc, #576]	; (8001cc4 <HAL_RCC_ClockConfig+0x270>)
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	430a      	orrs	r2, r1
 8001a86:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a88:	f7ff f948 	bl	8000d1c <HAL_GetTick>
 8001a8c:	0003      	movs	r3, r0
 8001a8e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a90:	e009      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a92:	f7ff f943 	bl	8000d1c <HAL_GetTick>
 8001a96:	0002      	movs	r2, r0
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	4a8a      	ldr	r2, [pc, #552]	; (8001cc8 <HAL_RCC_ClockConfig+0x274>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e109      	b.n	8001cba <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa6:	4b87      	ldr	r3, [pc, #540]	; (8001cc4 <HAL_RCC_ClockConfig+0x270>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	4013      	ands	r3, r2
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d1ee      	bne.n	8001a92 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2202      	movs	r2, #2
 8001aba:	4013      	ands	r3, r2
 8001abc:	d009      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001abe:	4b83      	ldr	r3, [pc, #524]	; (8001ccc <HAL_RCC_ClockConfig+0x278>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	22f0      	movs	r2, #240	; 0xf0
 8001ac4:	4393      	bics	r3, r2
 8001ac6:	0019      	movs	r1, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	4b7f      	ldr	r3, [pc, #508]	; (8001ccc <HAL_RCC_ClockConfig+0x278>)
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d100      	bne.n	8001ade <HAL_RCC_ClockConfig+0x8a>
 8001adc:	e089      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d107      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ae6:	4b79      	ldr	r3, [pc, #484]	; (8001ccc <HAL_RCC_ClockConfig+0x278>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	2380      	movs	r3, #128	; 0x80
 8001aec:	029b      	lsls	r3, r3, #10
 8001aee:	4013      	ands	r3, r2
 8001af0:	d120      	bne.n	8001b34 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e0e1      	b.n	8001cba <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b03      	cmp	r3, #3
 8001afc:	d107      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001afe:	4b73      	ldr	r3, [pc, #460]	; (8001ccc <HAL_RCC_ClockConfig+0x278>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	2380      	movs	r3, #128	; 0x80
 8001b04:	049b      	lsls	r3, r3, #18
 8001b06:	4013      	ands	r3, r2
 8001b08:	d114      	bne.n	8001b34 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e0d5      	b.n	8001cba <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d106      	bne.n	8001b24 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b16:	4b6d      	ldr	r3, [pc, #436]	; (8001ccc <HAL_RCC_ClockConfig+0x278>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2204      	movs	r2, #4
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d109      	bne.n	8001b34 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e0ca      	b.n	8001cba <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b24:	4b69      	ldr	r3, [pc, #420]	; (8001ccc <HAL_RCC_ClockConfig+0x278>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	2380      	movs	r3, #128	; 0x80
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d101      	bne.n	8001b34 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e0c2      	b.n	8001cba <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b34:	4b65      	ldr	r3, [pc, #404]	; (8001ccc <HAL_RCC_ClockConfig+0x278>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	2203      	movs	r2, #3
 8001b3a:	4393      	bics	r3, r2
 8001b3c:	0019      	movs	r1, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	4b62      	ldr	r3, [pc, #392]	; (8001ccc <HAL_RCC_ClockConfig+0x278>)
 8001b44:	430a      	orrs	r2, r1
 8001b46:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b48:	f7ff f8e8 	bl	8000d1c <HAL_GetTick>
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d111      	bne.n	8001b7c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b58:	e009      	b.n	8001b6e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b5a:	f7ff f8df 	bl	8000d1c <HAL_GetTick>
 8001b5e:	0002      	movs	r2, r0
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	4a58      	ldr	r2, [pc, #352]	; (8001cc8 <HAL_RCC_ClockConfig+0x274>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e0a5      	b.n	8001cba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b6e:	4b57      	ldr	r3, [pc, #348]	; (8001ccc <HAL_RCC_ClockConfig+0x278>)
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	220c      	movs	r2, #12
 8001b74:	4013      	ands	r3, r2
 8001b76:	2b08      	cmp	r3, #8
 8001b78:	d1ef      	bne.n	8001b5a <HAL_RCC_ClockConfig+0x106>
 8001b7a:	e03a      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b03      	cmp	r3, #3
 8001b82:	d111      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b84:	e009      	b.n	8001b9a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b86:	f7ff f8c9 	bl	8000d1c <HAL_GetTick>
 8001b8a:	0002      	movs	r2, r0
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	4a4d      	ldr	r2, [pc, #308]	; (8001cc8 <HAL_RCC_ClockConfig+0x274>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e08f      	b.n	8001cba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b9a:	4b4c      	ldr	r3, [pc, #304]	; (8001ccc <HAL_RCC_ClockConfig+0x278>)
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	220c      	movs	r2, #12
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	2b0c      	cmp	r3, #12
 8001ba4:	d1ef      	bne.n	8001b86 <HAL_RCC_ClockConfig+0x132>
 8001ba6:	e024      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d11b      	bne.n	8001be8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bb0:	e009      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb2:	f7ff f8b3 	bl	8000d1c <HAL_GetTick>
 8001bb6:	0002      	movs	r2, r0
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	4a42      	ldr	r2, [pc, #264]	; (8001cc8 <HAL_RCC_ClockConfig+0x274>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e079      	b.n	8001cba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bc6:	4b41      	ldr	r3, [pc, #260]	; (8001ccc <HAL_RCC_ClockConfig+0x278>)
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	220c      	movs	r2, #12
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d1ef      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0x15e>
 8001bd2:	e00e      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd4:	f7ff f8a2 	bl	8000d1c <HAL_GetTick>
 8001bd8:	0002      	movs	r2, r0
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	4a3a      	ldr	r2, [pc, #232]	; (8001cc8 <HAL_RCC_ClockConfig+0x274>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e068      	b.n	8001cba <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001be8:	4b38      	ldr	r3, [pc, #224]	; (8001ccc <HAL_RCC_ClockConfig+0x278>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	220c      	movs	r2, #12
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d1f0      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bf2:	4b34      	ldr	r3, [pc, #208]	; (8001cc4 <HAL_RCC_ClockConfig+0x270>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d21e      	bcs.n	8001c3e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c00:	4b30      	ldr	r3, [pc, #192]	; (8001cc4 <HAL_RCC_ClockConfig+0x270>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2201      	movs	r2, #1
 8001c06:	4393      	bics	r3, r2
 8001c08:	0019      	movs	r1, r3
 8001c0a:	4b2e      	ldr	r3, [pc, #184]	; (8001cc4 <HAL_RCC_ClockConfig+0x270>)
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c12:	f7ff f883 	bl	8000d1c <HAL_GetTick>
 8001c16:	0003      	movs	r3, r0
 8001c18:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1a:	e009      	b.n	8001c30 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c1c:	f7ff f87e 	bl	8000d1c <HAL_GetTick>
 8001c20:	0002      	movs	r2, r0
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	4a28      	ldr	r2, [pc, #160]	; (8001cc8 <HAL_RCC_ClockConfig+0x274>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e044      	b.n	8001cba <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c30:	4b24      	ldr	r3, [pc, #144]	; (8001cc4 <HAL_RCC_ClockConfig+0x270>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2201      	movs	r2, #1
 8001c36:	4013      	ands	r3, r2
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d1ee      	bne.n	8001c1c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2204      	movs	r2, #4
 8001c44:	4013      	ands	r3, r2
 8001c46:	d009      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c48:	4b20      	ldr	r3, [pc, #128]	; (8001ccc <HAL_RCC_ClockConfig+0x278>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	4a20      	ldr	r2, [pc, #128]	; (8001cd0 <HAL_RCC_ClockConfig+0x27c>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	0019      	movs	r1, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68da      	ldr	r2, [r3, #12]
 8001c56:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <HAL_RCC_ClockConfig+0x278>)
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2208      	movs	r2, #8
 8001c62:	4013      	ands	r3, r2
 8001c64:	d00a      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c66:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <HAL_RCC_ClockConfig+0x278>)
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	4a1a      	ldr	r2, [pc, #104]	; (8001cd4 <HAL_RCC_ClockConfig+0x280>)
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	0019      	movs	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	00da      	lsls	r2, r3, #3
 8001c76:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <HAL_RCC_ClockConfig+0x278>)
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c7c:	f000 f832 	bl	8001ce4 <HAL_RCC_GetSysClockFreq>
 8001c80:	0001      	movs	r1, r0
 8001c82:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <HAL_RCC_ClockConfig+0x278>)
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	091b      	lsrs	r3, r3, #4
 8001c88:	220f      	movs	r2, #15
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	4a12      	ldr	r2, [pc, #72]	; (8001cd8 <HAL_RCC_ClockConfig+0x284>)
 8001c8e:	5cd3      	ldrb	r3, [r2, r3]
 8001c90:	000a      	movs	r2, r1
 8001c92:	40da      	lsrs	r2, r3
 8001c94:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <HAL_RCC_ClockConfig+0x288>)
 8001c96:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c98:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <HAL_RCC_ClockConfig+0x28c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	250b      	movs	r5, #11
 8001c9e:	197c      	adds	r4, r7, r5
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f7fe ff3d 	bl	8000b20 <HAL_InitTick>
 8001ca6:	0003      	movs	r3, r0
 8001ca8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001caa:	197b      	adds	r3, r7, r5
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d002      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001cb2:	197b      	adds	r3, r7, r5
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	e000      	b.n	8001cba <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	0018      	movs	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	b004      	add	sp, #16
 8001cc0:	bdb0      	pop	{r4, r5, r7, pc}
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	40022000 	.word	0x40022000
 8001cc8:	00001388 	.word	0x00001388
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	fffff8ff 	.word	0xfffff8ff
 8001cd4:	ffffc7ff 	.word	0xffffc7ff
 8001cd8:	08005d2c 	.word	0x08005d2c
 8001cdc:	2000000c 	.word	0x2000000c
 8001ce0:	20000010 	.word	0x20000010

08001ce4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce4:	b5b0      	push	{r4, r5, r7, lr}
 8001ce6:	b08e      	sub	sp, #56	; 0x38
 8001ce8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001cea:	4b4c      	ldr	r3, [pc, #304]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x138>)
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cf2:	230c      	movs	r3, #12
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	2b0c      	cmp	r3, #12
 8001cf8:	d014      	beq.n	8001d24 <HAL_RCC_GetSysClockFreq+0x40>
 8001cfa:	d900      	bls.n	8001cfe <HAL_RCC_GetSysClockFreq+0x1a>
 8001cfc:	e07b      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0x112>
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d002      	beq.n	8001d08 <HAL_RCC_GetSysClockFreq+0x24>
 8001d02:	2b08      	cmp	r3, #8
 8001d04:	d00b      	beq.n	8001d1e <HAL_RCC_GetSysClockFreq+0x3a>
 8001d06:	e076      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d08:	4b44      	ldr	r3, [pc, #272]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x138>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2210      	movs	r2, #16
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d002      	beq.n	8001d18 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001d12:	4b43      	ldr	r3, [pc, #268]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d14:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001d16:	e07c      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001d18:	4b42      	ldr	r3, [pc, #264]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x140>)
 8001d1a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d1c:	e079      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d1e:	4b42      	ldr	r3, [pc, #264]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x144>)
 8001d20:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d22:	e076      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d26:	0c9a      	lsrs	r2, r3, #18
 8001d28:	230f      	movs	r3, #15
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	4b3f      	ldr	r3, [pc, #252]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x148>)
 8001d2e:	5c9b      	ldrb	r3, [r3, r2]
 8001d30:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d34:	0d9a      	lsrs	r2, r3, #22
 8001d36:	2303      	movs	r3, #3
 8001d38:	4013      	ands	r3, r2
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d3e:	4b37      	ldr	r3, [pc, #220]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x138>)
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	2380      	movs	r3, #128	; 0x80
 8001d44:	025b      	lsls	r3, r3, #9
 8001d46:	4013      	ands	r3, r2
 8001d48:	d01a      	beq.n	8001d80 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d4c:	61bb      	str	r3, [r7, #24]
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]
 8001d52:	4a35      	ldr	r2, [pc, #212]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x144>)
 8001d54:	2300      	movs	r3, #0
 8001d56:	69b8      	ldr	r0, [r7, #24]
 8001d58:	69f9      	ldr	r1, [r7, #28]
 8001d5a:	f7fe fa89 	bl	8000270 <__aeabi_lmul>
 8001d5e:	0002      	movs	r2, r0
 8001d60:	000b      	movs	r3, r1
 8001d62:	0010      	movs	r0, r2
 8001d64:	0019      	movs	r1, r3
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	f7fe fa5d 	bl	8000230 <__aeabi_uldivmod>
 8001d76:	0002      	movs	r2, r0
 8001d78:	000b      	movs	r3, r1
 8001d7a:	0013      	movs	r3, r2
 8001d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d7e:	e037      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d80:	4b26      	ldr	r3, [pc, #152]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x138>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2210      	movs	r2, #16
 8001d86:	4013      	ands	r3, r2
 8001d88:	d01a      	beq.n	8001dc0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	4a23      	ldr	r2, [pc, #140]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d94:	2300      	movs	r3, #0
 8001d96:	68b8      	ldr	r0, [r7, #8]
 8001d98:	68f9      	ldr	r1, [r7, #12]
 8001d9a:	f7fe fa69 	bl	8000270 <__aeabi_lmul>
 8001d9e:	0002      	movs	r2, r0
 8001da0:	000b      	movs	r3, r1
 8001da2:	0010      	movs	r0, r2
 8001da4:	0019      	movs	r1, r3
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	603b      	str	r3, [r7, #0]
 8001daa:	2300      	movs	r3, #0
 8001dac:	607b      	str	r3, [r7, #4]
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f7fe fa3d 	bl	8000230 <__aeabi_uldivmod>
 8001db6:	0002      	movs	r2, r0
 8001db8:	000b      	movs	r3, r1
 8001dba:	0013      	movs	r3, r2
 8001dbc:	637b      	str	r3, [r7, #52]	; 0x34
 8001dbe:	e017      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	0019      	movs	r1, r3
 8001dc8:	4a16      	ldr	r2, [pc, #88]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x140>)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f7fe fa50 	bl	8000270 <__aeabi_lmul>
 8001dd0:	0002      	movs	r2, r0
 8001dd2:	000b      	movs	r3, r1
 8001dd4:	0010      	movs	r0, r2
 8001dd6:	0019      	movs	r1, r3
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	001c      	movs	r4, r3
 8001ddc:	2300      	movs	r3, #0
 8001dde:	001d      	movs	r5, r3
 8001de0:	0022      	movs	r2, r4
 8001de2:	002b      	movs	r3, r5
 8001de4:	f7fe fa24 	bl	8000230 <__aeabi_uldivmod>
 8001de8:	0002      	movs	r2, r0
 8001dea:	000b      	movs	r3, r1
 8001dec:	0013      	movs	r3, r2
 8001dee:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001df4:	e00d      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x138>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	0b5b      	lsrs	r3, r3, #13
 8001dfc:	2207      	movs	r2, #7
 8001dfe:	4013      	ands	r3, r2
 8001e00:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001e02:	6a3b      	ldr	r3, [r7, #32]
 8001e04:	3301      	adds	r3, #1
 8001e06:	2280      	movs	r2, #128	; 0x80
 8001e08:	0212      	lsls	r2, r2, #8
 8001e0a:	409a      	lsls	r2, r3
 8001e0c:	0013      	movs	r3, r2
 8001e0e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e10:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001e14:	0018      	movs	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	b00e      	add	sp, #56	; 0x38
 8001e1a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	003d0900 	.word	0x003d0900
 8001e24:	00f42400 	.word	0x00f42400
 8001e28:	007a1200 	.word	0x007a1200
 8001e2c:	08005d44 	.word	0x08005d44

08001e30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e34:	4b02      	ldr	r3, [pc, #8]	; (8001e40 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e36:	681b      	ldr	r3, [r3, #0]
}
 8001e38:	0018      	movs	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	46c0      	nop			; (mov r8, r8)
 8001e40:	2000000c 	.word	0x2000000c

08001e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e48:	f7ff fff2 	bl	8001e30 <HAL_RCC_GetHCLKFreq>
 8001e4c:	0001      	movs	r1, r0
 8001e4e:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	0a1b      	lsrs	r3, r3, #8
 8001e54:	2207      	movs	r2, #7
 8001e56:	4013      	ands	r3, r2
 8001e58:	4a04      	ldr	r2, [pc, #16]	; (8001e6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e5a:	5cd3      	ldrb	r3, [r2, r3]
 8001e5c:	40d9      	lsrs	r1, r3
 8001e5e:	000b      	movs	r3, r1
}
 8001e60:	0018      	movs	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	46c0      	nop			; (mov r8, r8)
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	08005d3c 	.word	0x08005d3c

08001e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e74:	f7ff ffdc 	bl	8001e30 <HAL_RCC_GetHCLKFreq>
 8001e78:	0001      	movs	r1, r0
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	0adb      	lsrs	r3, r3, #11
 8001e80:	2207      	movs	r2, #7
 8001e82:	4013      	ands	r3, r2
 8001e84:	4a04      	ldr	r2, [pc, #16]	; (8001e98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e86:	5cd3      	ldrb	r3, [r2, r3]
 8001e88:	40d9      	lsrs	r1, r3
 8001e8a:	000b      	movs	r3, r1
}
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	46c0      	nop			; (mov r8, r8)
 8001e94:	40021000 	.word	0x40021000
 8001e98:	08005d3c 	.word	0x08005d3c

08001e9c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	220f      	movs	r2, #15
 8001eaa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001eac:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	2203      	movs	r2, #3
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001eb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	22f0      	movs	r2, #240	; 0xf0
 8001ebe:	401a      	ands	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ec6:	68da      	ldr	r2, [r3, #12]
 8001ec8:	23e0      	movs	r3, #224	; 0xe0
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	401a      	ands	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	08da      	lsrs	r2, r3, #3
 8001ed8:	23e0      	movs	r3, #224	; 0xe0
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	401a      	ands	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_RCC_GetClockConfig+0x60>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	401a      	ands	r2, r3
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	601a      	str	r2, [r3, #0]
}
 8001eee:	46c0      	nop			; (mov r8, r8)
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	b002      	add	sp, #8
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40022000 	.word	0x40022000

08001f00 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001f08:	2317      	movs	r3, #23
 8001f0a:	18fb      	adds	r3, r7, r3
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2220      	movs	r2, #32
 8001f16:	4013      	ands	r3, r2
 8001f18:	d106      	bne.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	2380      	movs	r3, #128	; 0x80
 8001f20:	011b      	lsls	r3, r3, #4
 8001f22:	4013      	ands	r3, r2
 8001f24:	d100      	bne.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001f26:	e104      	b.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f28:	4bb1      	ldr	r3, [pc, #708]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f2c:	2380      	movs	r3, #128	; 0x80
 8001f2e:	055b      	lsls	r3, r3, #21
 8001f30:	4013      	ands	r3, r2
 8001f32:	d10a      	bne.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f34:	4bae      	ldr	r3, [pc, #696]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f38:	4bad      	ldr	r3, [pc, #692]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f3a:	2180      	movs	r1, #128	; 0x80
 8001f3c:	0549      	lsls	r1, r1, #21
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001f42:	2317      	movs	r3, #23
 8001f44:	18fb      	adds	r3, r7, r3
 8001f46:	2201      	movs	r2, #1
 8001f48:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4a:	4baa      	ldr	r3, [pc, #680]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	2380      	movs	r3, #128	; 0x80
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	4013      	ands	r3, r2
 8001f54:	d11a      	bne.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f56:	4ba7      	ldr	r3, [pc, #668]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	4ba6      	ldr	r3, [pc, #664]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f5c:	2180      	movs	r1, #128	; 0x80
 8001f5e:	0049      	lsls	r1, r1, #1
 8001f60:	430a      	orrs	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f64:	f7fe feda 	bl	8000d1c <HAL_GetTick>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6c:	e008      	b.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f6e:	f7fe fed5 	bl	8000d1c <HAL_GetTick>
 8001f72:	0002      	movs	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b64      	cmp	r3, #100	; 0x64
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e133      	b.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f80:	4b9c      	ldr	r3, [pc, #624]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	2380      	movs	r3, #128	; 0x80
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001f8c:	4b98      	ldr	r3, [pc, #608]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	23c0      	movs	r3, #192	; 0xc0
 8001f92:	039b      	lsls	r3, r3, #14
 8001f94:	4013      	ands	r3, r2
 8001f96:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	23c0      	movs	r3, #192	; 0xc0
 8001f9e:	039b      	lsls	r3, r3, #14
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d107      	bne.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	23c0      	movs	r3, #192	; 0xc0
 8001fae:	039b      	lsls	r3, r3, #14
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d013      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	23c0      	movs	r3, #192	; 0xc0
 8001fbe:	029b      	lsls	r3, r3, #10
 8001fc0:	401a      	ands	r2, r3
 8001fc2:	23c0      	movs	r3, #192	; 0xc0
 8001fc4:	029b      	lsls	r3, r3, #10
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d10a      	bne.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001fca:	4b89      	ldr	r3, [pc, #548]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	2380      	movs	r3, #128	; 0x80
 8001fd0:	029b      	lsls	r3, r3, #10
 8001fd2:	401a      	ands	r2, r3
 8001fd4:	2380      	movs	r3, #128	; 0x80
 8001fd6:	029b      	lsls	r3, r3, #10
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e103      	b.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001fe0:	4b83      	ldr	r3, [pc, #524]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fe2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fe4:	23c0      	movs	r3, #192	; 0xc0
 8001fe6:	029b      	lsls	r3, r3, #10
 8001fe8:	4013      	ands	r3, r2
 8001fea:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d049      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	23c0      	movs	r3, #192	; 0xc0
 8001ff8:	029b      	lsls	r3, r3, #10
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d004      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2220      	movs	r2, #32
 8002008:	4013      	ands	r3, r2
 800200a:	d10d      	bne.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	23c0      	movs	r3, #192	; 0xc0
 8002012:	029b      	lsls	r3, r3, #10
 8002014:	4013      	ands	r3, r2
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	429a      	cmp	r2, r3
 800201a:	d034      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	2380      	movs	r3, #128	; 0x80
 8002022:	011b      	lsls	r3, r3, #4
 8002024:	4013      	ands	r3, r2
 8002026:	d02e      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002028:	4b71      	ldr	r3, [pc, #452]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800202a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800202c:	4a72      	ldr	r2, [pc, #456]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800202e:	4013      	ands	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002032:	4b6f      	ldr	r3, [pc, #444]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002034:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002036:	4b6e      	ldr	r3, [pc, #440]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002038:	2180      	movs	r1, #128	; 0x80
 800203a:	0309      	lsls	r1, r1, #12
 800203c:	430a      	orrs	r2, r1
 800203e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002040:	4b6b      	ldr	r3, [pc, #428]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002042:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002044:	4b6a      	ldr	r3, [pc, #424]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002046:	496d      	ldr	r1, [pc, #436]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002048:	400a      	ands	r2, r1
 800204a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800204c:	4b68      	ldr	r3, [pc, #416]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	2380      	movs	r3, #128	; 0x80
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	4013      	ands	r3, r2
 800205a:	d014      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205c:	f7fe fe5e 	bl	8000d1c <HAL_GetTick>
 8002060:	0003      	movs	r3, r0
 8002062:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002064:	e009      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002066:	f7fe fe59 	bl	8000d1c <HAL_GetTick>
 800206a:	0002      	movs	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	4a63      	ldr	r2, [pc, #396]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d901      	bls.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e0b6      	b.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800207a:	4b5d      	ldr	r3, [pc, #372]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800207c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800207e:	2380      	movs	r3, #128	; 0x80
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4013      	ands	r3, r2
 8002084:	d0ef      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	2380      	movs	r3, #128	; 0x80
 800208c:	011b      	lsls	r3, r3, #4
 800208e:	4013      	ands	r3, r2
 8002090:	d01f      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	23c0      	movs	r3, #192	; 0xc0
 8002098:	029b      	lsls	r3, r3, #10
 800209a:	401a      	ands	r2, r3
 800209c:	23c0      	movs	r3, #192	; 0xc0
 800209e:	029b      	lsls	r3, r3, #10
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d10c      	bne.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80020a4:	4b52      	ldr	r3, [pc, #328]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a56      	ldr	r2, [pc, #344]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	0019      	movs	r1, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689a      	ldr	r2, [r3, #8]
 80020b2:	23c0      	movs	r3, #192	; 0xc0
 80020b4:	039b      	lsls	r3, r3, #14
 80020b6:	401a      	ands	r2, r3
 80020b8:	4b4d      	ldr	r3, [pc, #308]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020ba:	430a      	orrs	r2, r1
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	4b4c      	ldr	r3, [pc, #304]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020c0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	23c0      	movs	r3, #192	; 0xc0
 80020c8:	029b      	lsls	r3, r3, #10
 80020ca:	401a      	ands	r2, r3
 80020cc:	4b48      	ldr	r3, [pc, #288]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020ce:	430a      	orrs	r2, r1
 80020d0:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2220      	movs	r2, #32
 80020d8:	4013      	ands	r3, r2
 80020da:	d01f      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	23c0      	movs	r3, #192	; 0xc0
 80020e2:	029b      	lsls	r3, r3, #10
 80020e4:	401a      	ands	r2, r3
 80020e6:	23c0      	movs	r3, #192	; 0xc0
 80020e8:	029b      	lsls	r3, r3, #10
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d10c      	bne.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80020ee:	4b40      	ldr	r3, [pc, #256]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a44      	ldr	r2, [pc, #272]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80020f4:	4013      	ands	r3, r2
 80020f6:	0019      	movs	r1, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	23c0      	movs	r3, #192	; 0xc0
 80020fe:	039b      	lsls	r3, r3, #14
 8002100:	401a      	ands	r2, r3
 8002102:	4b3b      	ldr	r3, [pc, #236]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002104:	430a      	orrs	r2, r1
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	4b39      	ldr	r3, [pc, #228]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800210a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	23c0      	movs	r3, #192	; 0xc0
 8002112:	029b      	lsls	r3, r3, #10
 8002114:	401a      	ands	r2, r3
 8002116:	4b36      	ldr	r3, [pc, #216]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002118:	430a      	orrs	r2, r1
 800211a:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800211c:	2317      	movs	r3, #23
 800211e:	18fb      	adds	r3, r7, r3
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d105      	bne.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002126:	4b32      	ldr	r3, [pc, #200]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800212a:	4b31      	ldr	r3, [pc, #196]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800212c:	4936      	ldr	r1, [pc, #216]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800212e:	400a      	ands	r2, r1
 8002130:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2201      	movs	r2, #1
 8002138:	4013      	ands	r3, r2
 800213a:	d009      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800213c:	4b2c      	ldr	r3, [pc, #176]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800213e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002140:	2203      	movs	r2, #3
 8002142:	4393      	bics	r3, r2
 8002144:	0019      	movs	r1, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	4b29      	ldr	r3, [pc, #164]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800214c:	430a      	orrs	r2, r1
 800214e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2202      	movs	r2, #2
 8002156:	4013      	ands	r3, r2
 8002158:	d009      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800215a:	4b25      	ldr	r3, [pc, #148]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800215c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215e:	220c      	movs	r2, #12
 8002160:	4393      	bics	r3, r2
 8002162:	0019      	movs	r1, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691a      	ldr	r2, [r3, #16]
 8002168:	4b21      	ldr	r3, [pc, #132]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800216a:	430a      	orrs	r2, r1
 800216c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2204      	movs	r2, #4
 8002174:	4013      	ands	r3, r2
 8002176:	d009      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002178:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800217a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217c:	4a23      	ldr	r2, [pc, #140]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800217e:	4013      	ands	r3, r2
 8002180:	0019      	movs	r1, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	695a      	ldr	r2, [r3, #20]
 8002186:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002188:	430a      	orrs	r2, r1
 800218a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2208      	movs	r2, #8
 8002192:	4013      	ands	r3, r2
 8002194:	d009      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002196:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219a:	4a1d      	ldr	r2, [pc, #116]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800219c:	4013      	ands	r3, r2
 800219e:	0019      	movs	r1, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	699a      	ldr	r2, [r3, #24]
 80021a4:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021a6:	430a      	orrs	r2, r1
 80021a8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2240      	movs	r2, #64	; 0x40
 80021b0:	4013      	ands	r3, r2
 80021b2:	d009      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021b4:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b8:	4a16      	ldr	r2, [pc, #88]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80021ba:	4013      	ands	r3, r2
 80021bc:	0019      	movs	r1, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1a      	ldr	r2, [r3, #32]
 80021c2:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021c4:	430a      	orrs	r2, r1
 80021c6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2280      	movs	r2, #128	; 0x80
 80021ce:	4013      	ands	r3, r2
 80021d0:	d009      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80021d2:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d6:	4a10      	ldr	r2, [pc, #64]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80021d8:	4013      	ands	r3, r2
 80021da:	0019      	movs	r1, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69da      	ldr	r2, [r3, #28]
 80021e0:	4b03      	ldr	r3, [pc, #12]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021e2:	430a      	orrs	r2, r1
 80021e4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	0018      	movs	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b006      	add	sp, #24
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40021000 	.word	0x40021000
 80021f4:	40007000 	.word	0x40007000
 80021f8:	fffcffff 	.word	0xfffcffff
 80021fc:	fff7ffff 	.word	0xfff7ffff
 8002200:	00001388 	.word	0x00001388
 8002204:	ffcfffff 	.word	0xffcfffff
 8002208:	efffffff 	.word	0xefffffff
 800220c:	fffff3ff 	.word	0xfffff3ff
 8002210:	ffffcfff 	.word	0xffffcfff
 8002214:	fbffffff 	.word	0xfbffffff
 8002218:	fff3ffff 	.word	0xfff3ffff

0800221c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e032      	b.n	8002294 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2239      	movs	r2, #57	; 0x39
 8002232:	5c9b      	ldrb	r3, [r3, r2]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d107      	bne.n	800224a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2238      	movs	r2, #56	; 0x38
 800223e:	2100      	movs	r1, #0
 8002240:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	0018      	movs	r0, r3
 8002246:	f000 f829 	bl	800229c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2239      	movs	r2, #57	; 0x39
 800224e:	2102      	movs	r1, #2
 8002250:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3304      	adds	r3, #4
 800225a:	0019      	movs	r1, r3
 800225c:	0010      	movs	r0, r2
 800225e:	f000 f979 	bl	8002554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	223e      	movs	r2, #62	; 0x3e
 8002266:	2101      	movs	r1, #1
 8002268:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	223a      	movs	r2, #58	; 0x3a
 800226e:	2101      	movs	r1, #1
 8002270:	5499      	strb	r1, [r3, r2]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	223b      	movs	r2, #59	; 0x3b
 8002276:	2101      	movs	r1, #1
 8002278:	5499      	strb	r1, [r3, r2]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	223c      	movs	r2, #60	; 0x3c
 800227e:	2101      	movs	r1, #1
 8002280:	5499      	strb	r1, [r3, r2]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	223d      	movs	r2, #61	; 0x3d
 8002286:	2101      	movs	r1, #1
 8002288:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2239      	movs	r2, #57	; 0x39
 800228e:	2101      	movs	r1, #1
 8002290:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	0018      	movs	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	b002      	add	sp, #8
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80022a4:	46c0      	nop			; (mov r8, r8)
 80022a6:	46bd      	mov	sp, r7
 80022a8:	b002      	add	sp, #8
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2239      	movs	r2, #57	; 0x39
 80022b8:	5c9b      	ldrb	r3, [r3, r2]
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d001      	beq.n	80022c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e036      	b.n	8002332 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2239      	movs	r2, #57	; 0x39
 80022c8:	2102      	movs	r1, #2
 80022ca:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2101      	movs	r1, #1
 80022d8:	430a      	orrs	r2, r1
 80022da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	2380      	movs	r3, #128	; 0x80
 80022e2:	05db      	lsls	r3, r3, #23
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d009      	beq.n	80022fc <HAL_TIM_Base_Start_IT+0x50>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a13      	ldr	r2, [pc, #76]	; (800233c <HAL_TIM_Base_Start_IT+0x90>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d004      	beq.n	80022fc <HAL_TIM_Base_Start_IT+0x50>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a12      	ldr	r2, [pc, #72]	; (8002340 <HAL_TIM_Base_Start_IT+0x94>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d111      	bne.n	8002320 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2207      	movs	r2, #7
 8002304:	4013      	ands	r3, r2
 8002306:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2b06      	cmp	r3, #6
 800230c:	d010      	beq.n	8002330 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2101      	movs	r1, #1
 800231a:	430a      	orrs	r2, r1
 800231c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800231e:	e007      	b.n	8002330 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2101      	movs	r1, #1
 800232c:	430a      	orrs	r2, r1
 800232e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	0018      	movs	r0, r3
 8002334:	46bd      	mov	sp, r7
 8002336:	b004      	add	sp, #16
 8002338:	bd80      	pop	{r7, pc}
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	40010800 	.word	0x40010800
 8002340:	40011400 	.word	0x40011400

08002344 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	2202      	movs	r2, #2
 8002354:	4013      	ands	r3, r2
 8002356:	2b02      	cmp	r3, #2
 8002358:	d124      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	2202      	movs	r2, #2
 8002362:	4013      	ands	r3, r2
 8002364:	2b02      	cmp	r3, #2
 8002366:	d11d      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2203      	movs	r2, #3
 800236e:	4252      	negs	r2, r2
 8002370:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	2203      	movs	r2, #3
 8002380:	4013      	ands	r3, r2
 8002382:	d004      	beq.n	800238e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	0018      	movs	r0, r3
 8002388:	f000 f8cc 	bl	8002524 <HAL_TIM_IC_CaptureCallback>
 800238c:	e007      	b.n	800239e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	0018      	movs	r0, r3
 8002392:	f000 f8bf 	bl	8002514 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	0018      	movs	r0, r3
 800239a:	f000 f8cb 	bl	8002534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	2204      	movs	r2, #4
 80023ac:	4013      	ands	r3, r2
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d125      	bne.n	80023fe <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	2204      	movs	r2, #4
 80023ba:	4013      	ands	r3, r2
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d11e      	bne.n	80023fe <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2205      	movs	r2, #5
 80023c6:	4252      	negs	r2, r2
 80023c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2202      	movs	r2, #2
 80023ce:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	699a      	ldr	r2, [r3, #24]
 80023d6:	23c0      	movs	r3, #192	; 0xc0
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4013      	ands	r3, r2
 80023dc:	d004      	beq.n	80023e8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	0018      	movs	r0, r3
 80023e2:	f000 f89f 	bl	8002524 <HAL_TIM_IC_CaptureCallback>
 80023e6:	e007      	b.n	80023f8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	0018      	movs	r0, r3
 80023ec:	f000 f892 	bl	8002514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	0018      	movs	r0, r3
 80023f4:	f000 f89e 	bl	8002534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	2208      	movs	r2, #8
 8002406:	4013      	ands	r3, r2
 8002408:	2b08      	cmp	r3, #8
 800240a:	d124      	bne.n	8002456 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	2208      	movs	r2, #8
 8002414:	4013      	ands	r3, r2
 8002416:	2b08      	cmp	r3, #8
 8002418:	d11d      	bne.n	8002456 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2209      	movs	r2, #9
 8002420:	4252      	negs	r2, r2
 8002422:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2204      	movs	r2, #4
 8002428:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	2203      	movs	r2, #3
 8002432:	4013      	ands	r3, r2
 8002434:	d004      	beq.n	8002440 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	0018      	movs	r0, r3
 800243a:	f000 f873 	bl	8002524 <HAL_TIM_IC_CaptureCallback>
 800243e:	e007      	b.n	8002450 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	0018      	movs	r0, r3
 8002444:	f000 f866 	bl	8002514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	0018      	movs	r0, r3
 800244c:	f000 f872 	bl	8002534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	2210      	movs	r2, #16
 800245e:	4013      	ands	r3, r2
 8002460:	2b10      	cmp	r3, #16
 8002462:	d125      	bne.n	80024b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	2210      	movs	r2, #16
 800246c:	4013      	ands	r3, r2
 800246e:	2b10      	cmp	r3, #16
 8002470:	d11e      	bne.n	80024b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2211      	movs	r2, #17
 8002478:	4252      	negs	r2, r2
 800247a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2208      	movs	r2, #8
 8002480:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	69da      	ldr	r2, [r3, #28]
 8002488:	23c0      	movs	r3, #192	; 0xc0
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4013      	ands	r3, r2
 800248e:	d004      	beq.n	800249a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	0018      	movs	r0, r3
 8002494:	f000 f846 	bl	8002524 <HAL_TIM_IC_CaptureCallback>
 8002498:	e007      	b.n	80024aa <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	0018      	movs	r0, r3
 800249e:	f000 f839 	bl	8002514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	0018      	movs	r0, r3
 80024a6:	f000 f845 	bl	8002534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	2201      	movs	r2, #1
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d10f      	bne.n	80024de <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	2201      	movs	r2, #1
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d108      	bne.n	80024de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2202      	movs	r2, #2
 80024d2:	4252      	negs	r2, r2
 80024d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	0018      	movs	r0, r3
 80024da:	f7fe faa1 	bl	8000a20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	2240      	movs	r2, #64	; 0x40
 80024e6:	4013      	ands	r3, r2
 80024e8:	2b40      	cmp	r3, #64	; 0x40
 80024ea:	d10f      	bne.n	800250c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	2240      	movs	r2, #64	; 0x40
 80024f4:	4013      	ands	r3, r2
 80024f6:	2b40      	cmp	r3, #64	; 0x40
 80024f8:	d108      	bne.n	800250c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2241      	movs	r2, #65	; 0x41
 8002500:	4252      	negs	r2, r2
 8002502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	0018      	movs	r0, r3
 8002508:	f000 f81c 	bl	8002544 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800250c:	46c0      	nop			; (mov r8, r8)
 800250e:	46bd      	mov	sp, r7
 8002510:	b002      	add	sp, #8
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800251c:	46c0      	nop			; (mov r8, r8)
 800251e:	46bd      	mov	sp, r7
 8002520:	b002      	add	sp, #8
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800252c:	46c0      	nop			; (mov r8, r8)
 800252e:	46bd      	mov	sp, r7
 8002530:	b002      	add	sp, #8
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800253c:	46c0      	nop			; (mov r8, r8)
 800253e:	46bd      	mov	sp, r7
 8002540:	b002      	add	sp, #8
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800254c:	46c0      	nop			; (mov r8, r8)
 800254e:	46bd      	mov	sp, r7
 8002550:	b002      	add	sp, #8
 8002552:	bd80      	pop	{r7, pc}

08002554 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	2380      	movs	r3, #128	; 0x80
 8002568:	05db      	lsls	r3, r3, #23
 800256a:	429a      	cmp	r2, r3
 800256c:	d007      	beq.n	800257e <TIM_Base_SetConfig+0x2a>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a1f      	ldr	r2, [pc, #124]	; (80025f0 <TIM_Base_SetConfig+0x9c>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d003      	beq.n	800257e <TIM_Base_SetConfig+0x2a>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a1e      	ldr	r2, [pc, #120]	; (80025f4 <TIM_Base_SetConfig+0xa0>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d108      	bne.n	8002590 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2270      	movs	r2, #112	; 0x70
 8002582:	4393      	bics	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	4313      	orrs	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	2380      	movs	r3, #128	; 0x80
 8002594:	05db      	lsls	r3, r3, #23
 8002596:	429a      	cmp	r2, r3
 8002598:	d007      	beq.n	80025aa <TIM_Base_SetConfig+0x56>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a14      	ldr	r2, [pc, #80]	; (80025f0 <TIM_Base_SetConfig+0x9c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d003      	beq.n	80025aa <TIM_Base_SetConfig+0x56>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a13      	ldr	r2, [pc, #76]	; (80025f4 <TIM_Base_SetConfig+0xa0>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d108      	bne.n	80025bc <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	4a12      	ldr	r2, [pc, #72]	; (80025f8 <TIM_Base_SetConfig+0xa4>)
 80025ae:	4013      	ands	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2280      	movs	r2, #128	; 0x80
 80025c0:	4393      	bics	r3, r2
 80025c2:	001a      	movs	r2, r3
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	615a      	str	r2, [r3, #20]
}
 80025e8:	46c0      	nop			; (mov r8, r8)
 80025ea:	46bd      	mov	sp, r7
 80025ec:	b004      	add	sp, #16
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40010800 	.word	0x40010800
 80025f4:	40011400 	.word	0x40011400
 80025f8:	fffffcff 	.word	0xfffffcff

080025fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e044      	b.n	8002698 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002612:	2b00      	cmp	r3, #0
 8002614:	d107      	bne.n	8002626 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2278      	movs	r2, #120	; 0x78
 800261a:	2100      	movs	r1, #0
 800261c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	0018      	movs	r0, r3
 8002622:	f7fe fa31 	bl	8000a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2224      	movs	r2, #36	; 0x24
 800262a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2101      	movs	r1, #1
 8002638:	438a      	bics	r2, r1
 800263a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	0018      	movs	r0, r3
 8002640:	f000 fc2c 	bl	8002e9c <UART_SetConfig>
 8002644:	0003      	movs	r3, r0
 8002646:	2b01      	cmp	r3, #1
 8002648:	d101      	bne.n	800264e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e024      	b.n	8002698 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	0018      	movs	r0, r3
 800265a:	f000 fea3 	bl	80033a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	490d      	ldr	r1, [pc, #52]	; (80026a0 <HAL_UART_Init+0xa4>)
 800266a:	400a      	ands	r2, r1
 800266c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	212a      	movs	r1, #42	; 0x2a
 800267a:	438a      	bics	r2, r1
 800267c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2101      	movs	r1, #1
 800268a:	430a      	orrs	r2, r1
 800268c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	0018      	movs	r0, r3
 8002692:	f000 ff3b 	bl	800350c <UART_CheckIdleState>
 8002696:	0003      	movs	r3, r0
}
 8002698:	0018      	movs	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	b002      	add	sp, #8
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	ffffb7ff 	.word	0xffffb7ff

080026a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08a      	sub	sp, #40	; 0x28
 80026a8:	af02      	add	r7, sp, #8
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	603b      	str	r3, [r7, #0]
 80026b0:	1dbb      	adds	r3, r7, #6
 80026b2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026b8:	2b20      	cmp	r3, #32
 80026ba:	d000      	beq.n	80026be <HAL_UART_Transmit+0x1a>
 80026bc:	e08c      	b.n	80027d8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_UART_Transmit+0x28>
 80026c4:	1dbb      	adds	r3, r7, #6
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e084      	b.n	80027da <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	2380      	movs	r3, #128	; 0x80
 80026d6:	015b      	lsls	r3, r3, #5
 80026d8:	429a      	cmp	r2, r3
 80026da:	d109      	bne.n	80026f0 <HAL_UART_Transmit+0x4c>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d105      	bne.n	80026f0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	2201      	movs	r2, #1
 80026e8:	4013      	ands	r3, r2
 80026ea:	d001      	beq.n	80026f0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e074      	b.n	80027da <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2284      	movs	r2, #132	; 0x84
 80026f4:	2100      	movs	r1, #0
 80026f6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2221      	movs	r2, #33	; 0x21
 80026fc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026fe:	f7fe fb0d 	bl	8000d1c <HAL_GetTick>
 8002702:	0003      	movs	r3, r0
 8002704:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	1dba      	adds	r2, r7, #6
 800270a:	2150      	movs	r1, #80	; 0x50
 800270c:	8812      	ldrh	r2, [r2, #0]
 800270e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	1dba      	adds	r2, r7, #6
 8002714:	2152      	movs	r1, #82	; 0x52
 8002716:	8812      	ldrh	r2, [r2, #0]
 8002718:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	2380      	movs	r3, #128	; 0x80
 8002720:	015b      	lsls	r3, r3, #5
 8002722:	429a      	cmp	r2, r3
 8002724:	d108      	bne.n	8002738 <HAL_UART_Transmit+0x94>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d104      	bne.n	8002738 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800272e:	2300      	movs	r3, #0
 8002730:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	61bb      	str	r3, [r7, #24]
 8002736:	e003      	b.n	8002740 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800273c:	2300      	movs	r3, #0
 800273e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002740:	e02f      	b.n	80027a2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	0013      	movs	r3, r2
 800274c:	2200      	movs	r2, #0
 800274e:	2180      	movs	r1, #128	; 0x80
 8002750:	f000 ff84 	bl	800365c <UART_WaitOnFlagUntilTimeout>
 8002754:	1e03      	subs	r3, r0, #0
 8002756:	d004      	beq.n	8002762 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2220      	movs	r2, #32
 800275c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e03b      	b.n	80027da <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10b      	bne.n	8002780 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	001a      	movs	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	05d2      	lsls	r2, r2, #23
 8002774:	0dd2      	lsrs	r2, r2, #23
 8002776:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	3302      	adds	r3, #2
 800277c:	61bb      	str	r3, [r7, #24]
 800277e:	e007      	b.n	8002790 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	781a      	ldrb	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3301      	adds	r3, #1
 800278e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2252      	movs	r2, #82	; 0x52
 8002794:	5a9b      	ldrh	r3, [r3, r2]
 8002796:	b29b      	uxth	r3, r3
 8002798:	3b01      	subs	r3, #1
 800279a:	b299      	uxth	r1, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2252      	movs	r2, #82	; 0x52
 80027a0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2252      	movs	r2, #82	; 0x52
 80027a6:	5a9b      	ldrh	r3, [r3, r2]
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1c9      	bne.n	8002742 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	0013      	movs	r3, r2
 80027b8:	2200      	movs	r2, #0
 80027ba:	2140      	movs	r1, #64	; 0x40
 80027bc:	f000 ff4e 	bl	800365c <UART_WaitOnFlagUntilTimeout>
 80027c0:	1e03      	subs	r3, r0, #0
 80027c2:	d004      	beq.n	80027ce <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2220      	movs	r2, #32
 80027c8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e005      	b.n	80027da <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2220      	movs	r2, #32
 80027d2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80027d4:	2300      	movs	r3, #0
 80027d6:	e000      	b.n	80027da <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80027d8:	2302      	movs	r3, #2
  }
}
 80027da:	0018      	movs	r0, r3
 80027dc:	46bd      	mov	sp, r7
 80027de:	b008      	add	sp, #32
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b088      	sub	sp, #32
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	1dbb      	adds	r3, r7, #6
 80027f0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2280      	movs	r2, #128	; 0x80
 80027f6:	589b      	ldr	r3, [r3, r2]
 80027f8:	2b20      	cmp	r3, #32
 80027fa:	d14a      	bne.n	8002892 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_UART_Receive_IT+0x26>
 8002802:	1dbb      	adds	r3, r7, #6
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e042      	b.n	8002894 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	2380      	movs	r3, #128	; 0x80
 8002814:	015b      	lsls	r3, r3, #5
 8002816:	429a      	cmp	r2, r3
 8002818:	d109      	bne.n	800282e <HAL_UART_Receive_IT+0x4a>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d105      	bne.n	800282e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	2201      	movs	r2, #1
 8002826:	4013      	ands	r3, r2
 8002828:	d001      	beq.n	800282e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e032      	b.n	8002894 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a18      	ldr	r2, [pc, #96]	; (800289c <HAL_UART_Receive_IT+0xb8>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d020      	beq.n	8002880 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	2380      	movs	r3, #128	; 0x80
 8002846:	041b      	lsls	r3, r3, #16
 8002848:	4013      	ands	r3, r2
 800284a:	d019      	beq.n	8002880 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800284c:	f3ef 8310 	mrs	r3, PRIMASK
 8002850:	613b      	str	r3, [r7, #16]
  return(result);
 8002852:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002854:	61fb      	str	r3, [r7, #28]
 8002856:	2301      	movs	r3, #1
 8002858:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f383 8810 	msr	PRIMASK, r3
}
 8002860:	46c0      	nop			; (mov r8, r8)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2180      	movs	r1, #128	; 0x80
 800286e:	04c9      	lsls	r1, r1, #19
 8002870:	430a      	orrs	r2, r1
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	f383 8810 	msr	PRIMASK, r3
}
 800287e:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002880:	1dbb      	adds	r3, r7, #6
 8002882:	881a      	ldrh	r2, [r3, #0]
 8002884:	68b9      	ldr	r1, [r7, #8]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	0018      	movs	r0, r3
 800288a:	f000 ff51 	bl	8003730 <UART_Start_Receive_IT>
 800288e:	0003      	movs	r3, r0
 8002890:	e000      	b.n	8002894 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8002892:	2302      	movs	r3, #2
  }
}
 8002894:	0018      	movs	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	b008      	add	sp, #32
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40004800 	.word	0x40004800

080028a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028a0:	b590      	push	{r4, r7, lr}
 80028a2:	b0ab      	sub	sp, #172	; 0xac
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	22a4      	movs	r2, #164	; 0xa4
 80028b0:	18b9      	adds	r1, r7, r2
 80028b2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	20a0      	movs	r0, #160	; 0xa0
 80028bc:	1839      	adds	r1, r7, r0
 80028be:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	219c      	movs	r1, #156	; 0x9c
 80028c8:	1879      	adds	r1, r7, r1
 80028ca:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80028cc:	0011      	movs	r1, r2
 80028ce:	18bb      	adds	r3, r7, r2
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a99      	ldr	r2, [pc, #612]	; (8002b38 <HAL_UART_IRQHandler+0x298>)
 80028d4:	4013      	ands	r3, r2
 80028d6:	2298      	movs	r2, #152	; 0x98
 80028d8:	18bc      	adds	r4, r7, r2
 80028da:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80028dc:	18bb      	adds	r3, r7, r2
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d114      	bne.n	800290e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80028e4:	187b      	adds	r3, r7, r1
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2220      	movs	r2, #32
 80028ea:	4013      	ands	r3, r2
 80028ec:	d00f      	beq.n	800290e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80028ee:	183b      	adds	r3, r7, r0
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2220      	movs	r2, #32
 80028f4:	4013      	ands	r3, r2
 80028f6:	d00a      	beq.n	800290e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d100      	bne.n	8002902 <HAL_UART_IRQHandler+0x62>
 8002900:	e2a0      	b.n	8002e44 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	0010      	movs	r0, r2
 800290a:	4798      	blx	r3
      }
      return;
 800290c:	e29a      	b.n	8002e44 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800290e:	2398      	movs	r3, #152	; 0x98
 8002910:	18fb      	adds	r3, r7, r3
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d100      	bne.n	800291a <HAL_UART_IRQHandler+0x7a>
 8002918:	e114      	b.n	8002b44 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800291a:	239c      	movs	r3, #156	; 0x9c
 800291c:	18fb      	adds	r3, r7, r3
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2201      	movs	r2, #1
 8002922:	4013      	ands	r3, r2
 8002924:	d106      	bne.n	8002934 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002926:	23a0      	movs	r3, #160	; 0xa0
 8002928:	18fb      	adds	r3, r7, r3
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a83      	ldr	r2, [pc, #524]	; (8002b3c <HAL_UART_IRQHandler+0x29c>)
 800292e:	4013      	ands	r3, r2
 8002930:	d100      	bne.n	8002934 <HAL_UART_IRQHandler+0x94>
 8002932:	e107      	b.n	8002b44 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002934:	23a4      	movs	r3, #164	; 0xa4
 8002936:	18fb      	adds	r3, r7, r3
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2201      	movs	r2, #1
 800293c:	4013      	ands	r3, r2
 800293e:	d012      	beq.n	8002966 <HAL_UART_IRQHandler+0xc6>
 8002940:	23a0      	movs	r3, #160	; 0xa0
 8002942:	18fb      	adds	r3, r7, r3
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	2380      	movs	r3, #128	; 0x80
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	4013      	ands	r3, r2
 800294c:	d00b      	beq.n	8002966 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2201      	movs	r2, #1
 8002954:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2284      	movs	r2, #132	; 0x84
 800295a:	589b      	ldr	r3, [r3, r2]
 800295c:	2201      	movs	r2, #1
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2184      	movs	r1, #132	; 0x84
 8002964:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002966:	23a4      	movs	r3, #164	; 0xa4
 8002968:	18fb      	adds	r3, r7, r3
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2202      	movs	r2, #2
 800296e:	4013      	ands	r3, r2
 8002970:	d011      	beq.n	8002996 <HAL_UART_IRQHandler+0xf6>
 8002972:	239c      	movs	r3, #156	; 0x9c
 8002974:	18fb      	adds	r3, r7, r3
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2201      	movs	r2, #1
 800297a:	4013      	ands	r3, r2
 800297c:	d00b      	beq.n	8002996 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2202      	movs	r2, #2
 8002984:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2284      	movs	r2, #132	; 0x84
 800298a:	589b      	ldr	r3, [r3, r2]
 800298c:	2204      	movs	r2, #4
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2184      	movs	r1, #132	; 0x84
 8002994:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002996:	23a4      	movs	r3, #164	; 0xa4
 8002998:	18fb      	adds	r3, r7, r3
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2204      	movs	r2, #4
 800299e:	4013      	ands	r3, r2
 80029a0:	d011      	beq.n	80029c6 <HAL_UART_IRQHandler+0x126>
 80029a2:	239c      	movs	r3, #156	; 0x9c
 80029a4:	18fb      	adds	r3, r7, r3
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2201      	movs	r2, #1
 80029aa:	4013      	ands	r3, r2
 80029ac:	d00b      	beq.n	80029c6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2204      	movs	r2, #4
 80029b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2284      	movs	r2, #132	; 0x84
 80029ba:	589b      	ldr	r3, [r3, r2]
 80029bc:	2202      	movs	r2, #2
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2184      	movs	r1, #132	; 0x84
 80029c4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029c6:	23a4      	movs	r3, #164	; 0xa4
 80029c8:	18fb      	adds	r3, r7, r3
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2208      	movs	r2, #8
 80029ce:	4013      	ands	r3, r2
 80029d0:	d017      	beq.n	8002a02 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80029d2:	23a0      	movs	r3, #160	; 0xa0
 80029d4:	18fb      	adds	r3, r7, r3
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2220      	movs	r2, #32
 80029da:	4013      	ands	r3, r2
 80029dc:	d105      	bne.n	80029ea <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80029de:	239c      	movs	r3, #156	; 0x9c
 80029e0:	18fb      	adds	r3, r7, r3
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2201      	movs	r2, #1
 80029e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80029e8:	d00b      	beq.n	8002a02 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2208      	movs	r2, #8
 80029f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2284      	movs	r2, #132	; 0x84
 80029f6:	589b      	ldr	r3, [r3, r2]
 80029f8:	2208      	movs	r2, #8
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2184      	movs	r1, #132	; 0x84
 8002a00:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a02:	23a4      	movs	r3, #164	; 0xa4
 8002a04:	18fb      	adds	r3, r7, r3
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	2380      	movs	r3, #128	; 0x80
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d013      	beq.n	8002a38 <HAL_UART_IRQHandler+0x198>
 8002a10:	23a0      	movs	r3, #160	; 0xa0
 8002a12:	18fb      	adds	r3, r7, r3
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	2380      	movs	r3, #128	; 0x80
 8002a18:	04db      	lsls	r3, r3, #19
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d00c      	beq.n	8002a38 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2280      	movs	r2, #128	; 0x80
 8002a24:	0112      	lsls	r2, r2, #4
 8002a26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2284      	movs	r2, #132	; 0x84
 8002a2c:	589b      	ldr	r3, [r3, r2]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	431a      	orrs	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2184      	movs	r1, #132	; 0x84
 8002a36:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2284      	movs	r2, #132	; 0x84
 8002a3c:	589b      	ldr	r3, [r3, r2]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d100      	bne.n	8002a44 <HAL_UART_IRQHandler+0x1a4>
 8002a42:	e201      	b.n	8002e48 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a44:	23a4      	movs	r3, #164	; 0xa4
 8002a46:	18fb      	adds	r3, r7, r3
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	d00e      	beq.n	8002a6e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a50:	23a0      	movs	r3, #160	; 0xa0
 8002a52:	18fb      	adds	r3, r7, r3
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2220      	movs	r2, #32
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d008      	beq.n	8002a6e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d004      	beq.n	8002a6e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	0010      	movs	r0, r2
 8002a6c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2284      	movs	r2, #132	; 0x84
 8002a72:	589b      	ldr	r3, [r3, r2]
 8002a74:	2194      	movs	r1, #148	; 0x94
 8002a76:	187a      	adds	r2, r7, r1
 8002a78:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2240      	movs	r2, #64	; 0x40
 8002a82:	4013      	ands	r3, r2
 8002a84:	2b40      	cmp	r3, #64	; 0x40
 8002a86:	d004      	beq.n	8002a92 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002a88:	187b      	adds	r3, r7, r1
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2228      	movs	r2, #40	; 0x28
 8002a8e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a90:	d047      	beq.n	8002b22 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	0018      	movs	r0, r3
 8002a96:	f000 ff15 	bl	80038c4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	2240      	movs	r2, #64	; 0x40
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	2b40      	cmp	r3, #64	; 0x40
 8002aa6:	d137      	bne.n	8002b18 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aa8:	f3ef 8310 	mrs	r3, PRIMASK
 8002aac:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002aae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ab0:	2090      	movs	r0, #144	; 0x90
 8002ab2:	183a      	adds	r2, r7, r0
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002abc:	f383 8810 	msr	PRIMASK, r3
}
 8002ac0:	46c0      	nop			; (mov r8, r8)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2140      	movs	r1, #64	; 0x40
 8002ace:	438a      	bics	r2, r1
 8002ad0:	609a      	str	r2, [r3, #8]
 8002ad2:	183b      	adds	r3, r7, r0
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ad8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ada:	f383 8810 	msr	PRIMASK, r3
}
 8002ade:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d012      	beq.n	8002b0e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aec:	4a14      	ldr	r2, [pc, #80]	; (8002b40 <HAL_UART_IRQHandler+0x2a0>)
 8002aee:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af4:	0018      	movs	r0, r3
 8002af6:	f7fe fa2c 	bl	8000f52 <HAL_DMA_Abort_IT>
 8002afa:	1e03      	subs	r3, r0, #0
 8002afc:	d01a      	beq.n	8002b34 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b08:	0018      	movs	r0, r3
 8002b0a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b0c:	e012      	b.n	8002b34 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	0018      	movs	r0, r3
 8002b12:	f000 f9af 	bl	8002e74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b16:	e00d      	b.n	8002b34 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f000 f9aa 	bl	8002e74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b20:	e008      	b.n	8002b34 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	0018      	movs	r0, r3
 8002b26:	f000 f9a5 	bl	8002e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2284      	movs	r2, #132	; 0x84
 8002b2e:	2100      	movs	r1, #0
 8002b30:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002b32:	e189      	b.n	8002e48 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b34:	46c0      	nop			; (mov r8, r8)
    return;
 8002b36:	e187      	b.n	8002e48 <HAL_UART_IRQHandler+0x5a8>
 8002b38:	0000080f 	.word	0x0000080f
 8002b3c:	04000120 	.word	0x04000120
 8002b40:	0800398d 	.word	0x0800398d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d000      	beq.n	8002b4e <HAL_UART_IRQHandler+0x2ae>
 8002b4c:	e13b      	b.n	8002dc6 <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b4e:	23a4      	movs	r3, #164	; 0xa4
 8002b50:	18fb      	adds	r3, r7, r3
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2210      	movs	r2, #16
 8002b56:	4013      	ands	r3, r2
 8002b58:	d100      	bne.n	8002b5c <HAL_UART_IRQHandler+0x2bc>
 8002b5a:	e134      	b.n	8002dc6 <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b5c:	23a0      	movs	r3, #160	; 0xa0
 8002b5e:	18fb      	adds	r3, r7, r3
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2210      	movs	r2, #16
 8002b64:	4013      	ands	r3, r2
 8002b66:	d100      	bne.n	8002b6a <HAL_UART_IRQHandler+0x2ca>
 8002b68:	e12d      	b.n	8002dc6 <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2210      	movs	r2, #16
 8002b70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	2240      	movs	r2, #64	; 0x40
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	2b40      	cmp	r3, #64	; 0x40
 8002b7e:	d000      	beq.n	8002b82 <HAL_UART_IRQHandler+0x2e2>
 8002b80:	e0a1      	b.n	8002cc6 <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	217e      	movs	r1, #126	; 0x7e
 8002b8c:	187b      	adds	r3, r7, r1
 8002b8e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002b90:	187b      	adds	r3, r7, r1
 8002b92:	881b      	ldrh	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d100      	bne.n	8002b9a <HAL_UART_IRQHandler+0x2fa>
 8002b98:	e158      	b.n	8002e4c <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2258      	movs	r2, #88	; 0x58
 8002b9e:	5a9b      	ldrh	r3, [r3, r2]
 8002ba0:	187a      	adds	r2, r7, r1
 8002ba2:	8812      	ldrh	r2, [r2, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d300      	bcc.n	8002baa <HAL_UART_IRQHandler+0x30a>
 8002ba8:	e150      	b.n	8002e4c <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	187a      	adds	r2, r7, r1
 8002bae:	215a      	movs	r1, #90	; 0x5a
 8002bb0:	8812      	ldrh	r2, [r2, #0]
 8002bb2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	d16f      	bne.n	8002ca2 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bc2:	f3ef 8310 	mrs	r3, PRIMASK
 8002bc6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bca:	67bb      	str	r3, [r7, #120]	; 0x78
 8002bcc:	2301      	movs	r3, #1
 8002bce:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd2:	f383 8810 	msr	PRIMASK, r3
}
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	499e      	ldr	r1, [pc, #632]	; (8002e5c <HAL_UART_IRQHandler+0x5bc>)
 8002be4:	400a      	ands	r2, r1
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bee:	f383 8810 	msr	PRIMASK, r3
}
 8002bf2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bf4:	f3ef 8310 	mrs	r3, PRIMASK
 8002bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bfc:	677b      	str	r3, [r7, #116]	; 0x74
 8002bfe:	2301      	movs	r3, #1
 8002c00:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c04:	f383 8810 	msr	PRIMASK, r3
}
 8002c08:	46c0      	nop			; (mov r8, r8)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2101      	movs	r1, #1
 8002c16:	438a      	bics	r2, r1
 8002c18:	609a      	str	r2, [r3, #8]
 8002c1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c1c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c20:	f383 8810 	msr	PRIMASK, r3
}
 8002c24:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c26:	f3ef 8310 	mrs	r3, PRIMASK
 8002c2a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002c2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c2e:	673b      	str	r3, [r7, #112]	; 0x70
 8002c30:	2301      	movs	r3, #1
 8002c32:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c36:	f383 8810 	msr	PRIMASK, r3
}
 8002c3a:	46c0      	nop			; (mov r8, r8)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2140      	movs	r1, #64	; 0x40
 8002c48:	438a      	bics	r2, r1
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c4e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c52:	f383 8810 	msr	PRIMASK, r3
}
 8002c56:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2280      	movs	r2, #128	; 0x80
 8002c5c:	2120      	movs	r1, #32
 8002c5e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c66:	f3ef 8310 	mrs	r3, PRIMASK
 8002c6a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c70:	2301      	movs	r3, #1
 8002c72:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c76:	f383 8810 	msr	PRIMASK, r3
}
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2110      	movs	r1, #16
 8002c88:	438a      	bics	r2, r1
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c8e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c92:	f383 8810 	msr	PRIMASK, r3
}
 8002c96:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f7fe f918 	bl	8000ed2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2258      	movs	r2, #88	; 0x58
 8002cac:	5a9a      	ldrh	r2, [r3, r2]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	215a      	movs	r1, #90	; 0x5a
 8002cb2:	5a5b      	ldrh	r3, [r3, r1]
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	0011      	movs	r1, r2
 8002cbe:	0018      	movs	r0, r3
 8002cc0:	f000 f8e0 	bl	8002e84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002cc4:	e0c2      	b.n	8002e4c <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2258      	movs	r2, #88	; 0x58
 8002cca:	5a99      	ldrh	r1, [r3, r2]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	225a      	movs	r2, #90	; 0x5a
 8002cd0:	5a9b      	ldrh	r3, [r3, r2]
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	208e      	movs	r0, #142	; 0x8e
 8002cd6:	183b      	adds	r3, r7, r0
 8002cd8:	1a8a      	subs	r2, r1, r2
 8002cda:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	225a      	movs	r2, #90	; 0x5a
 8002ce0:	5a9b      	ldrh	r3, [r3, r2]
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d100      	bne.n	8002cea <HAL_UART_IRQHandler+0x44a>
 8002ce8:	e0b2      	b.n	8002e50 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8002cea:	183b      	adds	r3, r7, r0
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d100      	bne.n	8002cf4 <HAL_UART_IRQHandler+0x454>
 8002cf2:	e0ad      	b.n	8002e50 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cf4:	f3ef 8310 	mrs	r3, PRIMASK
 8002cf8:	60fb      	str	r3, [r7, #12]
  return(result);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cfc:	2488      	movs	r4, #136	; 0x88
 8002cfe:	193a      	adds	r2, r7, r4
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	2301      	movs	r3, #1
 8002d04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	f383 8810 	msr	PRIMASK, r3
}
 8002d0c:	46c0      	nop			; (mov r8, r8)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4951      	ldr	r1, [pc, #324]	; (8002e60 <HAL_UART_IRQHandler+0x5c0>)
 8002d1a:	400a      	ands	r2, r1
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	193b      	adds	r3, r7, r4
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	f383 8810 	msr	PRIMASK, r3
}
 8002d2a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d30:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d32:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d34:	2484      	movs	r4, #132	; 0x84
 8002d36:	193a      	adds	r2, r7, r4
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	f383 8810 	msr	PRIMASK, r3
}
 8002d44:	46c0      	nop			; (mov r8, r8)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2101      	movs	r1, #1
 8002d52:	438a      	bics	r2, r1
 8002d54:	609a      	str	r2, [r3, #8]
 8002d56:	193b      	adds	r3, r7, r4
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	f383 8810 	msr	PRIMASK, r3
}
 8002d62:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2280      	movs	r2, #128	; 0x80
 8002d68:	2120      	movs	r1, #32
 8002d6a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d78:	f3ef 8310 	mrs	r3, PRIMASK
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d80:	2480      	movs	r4, #128	; 0x80
 8002d82:	193a      	adds	r2, r7, r4
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	2301      	movs	r3, #1
 8002d88:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8c:	f383 8810 	msr	PRIMASK, r3
}
 8002d90:	46c0      	nop			; (mov r8, r8)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2110      	movs	r1, #16
 8002d9e:	438a      	bics	r2, r1
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	193b      	adds	r3, r7, r4
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002daa:	f383 8810 	msr	PRIMASK, r3
}
 8002dae:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2202      	movs	r2, #2
 8002db4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002db6:	183b      	adds	r3, r7, r0
 8002db8:	881a      	ldrh	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	0011      	movs	r1, r2
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f000 f860 	bl	8002e84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002dc4:	e044      	b.n	8002e50 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002dc6:	23a4      	movs	r3, #164	; 0xa4
 8002dc8:	18fb      	adds	r3, r7, r3
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	2380      	movs	r3, #128	; 0x80
 8002dce:	035b      	lsls	r3, r3, #13
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d010      	beq.n	8002df6 <HAL_UART_IRQHandler+0x556>
 8002dd4:	239c      	movs	r3, #156	; 0x9c
 8002dd6:	18fb      	adds	r3, r7, r3
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	2380      	movs	r3, #128	; 0x80
 8002ddc:	03db      	lsls	r3, r3, #15
 8002dde:	4013      	ands	r3, r2
 8002de0:	d009      	beq.n	8002df6 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2280      	movs	r2, #128	; 0x80
 8002de8:	0352      	lsls	r2, r2, #13
 8002dea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	0018      	movs	r0, r3
 8002df0:	f000 ffd2 	bl	8003d98 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002df4:	e02f      	b.n	8002e56 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002df6:	23a4      	movs	r3, #164	; 0xa4
 8002df8:	18fb      	adds	r3, r7, r3
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2280      	movs	r2, #128	; 0x80
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d00f      	beq.n	8002e22 <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002e02:	23a0      	movs	r3, #160	; 0xa0
 8002e04:	18fb      	adds	r3, r7, r3
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2280      	movs	r2, #128	; 0x80
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	d009      	beq.n	8002e22 <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d01e      	beq.n	8002e54 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	0010      	movs	r0, r2
 8002e1e:	4798      	blx	r3
    }
    return;
 8002e20:	e018      	b.n	8002e54 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002e22:	23a4      	movs	r3, #164	; 0xa4
 8002e24:	18fb      	adds	r3, r7, r3
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2240      	movs	r2, #64	; 0x40
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	d013      	beq.n	8002e56 <HAL_UART_IRQHandler+0x5b6>
 8002e2e:	23a0      	movs	r3, #160	; 0xa0
 8002e30:	18fb      	adds	r3, r7, r3
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2240      	movs	r2, #64	; 0x40
 8002e36:	4013      	ands	r3, r2
 8002e38:	d00d      	beq.n	8002e56 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	f000 fdbc 	bl	80039ba <UART_EndTransmit_IT>
    return;
 8002e42:	e008      	b.n	8002e56 <HAL_UART_IRQHandler+0x5b6>
      return;
 8002e44:	46c0      	nop			; (mov r8, r8)
 8002e46:	e006      	b.n	8002e56 <HAL_UART_IRQHandler+0x5b6>
    return;
 8002e48:	46c0      	nop			; (mov r8, r8)
 8002e4a:	e004      	b.n	8002e56 <HAL_UART_IRQHandler+0x5b6>
      return;
 8002e4c:	46c0      	nop			; (mov r8, r8)
 8002e4e:	e002      	b.n	8002e56 <HAL_UART_IRQHandler+0x5b6>
      return;
 8002e50:	46c0      	nop			; (mov r8, r8)
 8002e52:	e000      	b.n	8002e56 <HAL_UART_IRQHandler+0x5b6>
    return;
 8002e54:	46c0      	nop			; (mov r8, r8)
  }

}
 8002e56:	46bd      	mov	sp, r7
 8002e58:	b02b      	add	sp, #172	; 0xac
 8002e5a:	bd90      	pop	{r4, r7, pc}
 8002e5c:	fffffeff 	.word	0xfffffeff
 8002e60:	fffffedf 	.word	0xfffffedf

08002e64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002e6c:	46c0      	nop			; (mov r8, r8)
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	b002      	add	sp, #8
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002e7c:	46c0      	nop			; (mov r8, r8)
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b002      	add	sp, #8
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	000a      	movs	r2, r1
 8002e8e:	1cbb      	adds	r3, r7, #2
 8002e90:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	46bd      	mov	sp, r7
 8002e96:	b002      	add	sp, #8
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e9c:	b5b0      	push	{r4, r5, r7, lr}
 8002e9e:	b08e      	sub	sp, #56	; 0x38
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ea4:	231a      	movs	r3, #26
 8002ea6:	2218      	movs	r2, #24
 8002ea8:	189b      	adds	r3, r3, r2
 8002eaa:	19db      	adds	r3, r3, r7
 8002eac:	2200      	movs	r2, #0
 8002eae:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4ac6      	ldr	r2, [pc, #792]	; (80031e8 <UART_SetConfig+0x34c>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	0019      	movs	r1, r3
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002eda:	430a      	orrs	r2, r1
 8002edc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	4ac1      	ldr	r2, [pc, #772]	; (80031ec <UART_SetConfig+0x350>)
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	0019      	movs	r1, r3
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	68da      	ldr	r2, [r3, #12]
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4abb      	ldr	r2, [pc, #748]	; (80031f0 <UART_SetConfig+0x354>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d004      	beq.n	8002f10 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	4ab7      	ldr	r2, [pc, #732]	; (80031f4 <UART_SetConfig+0x358>)
 8002f18:	4013      	ands	r3, r2
 8002f1a:	0019      	movs	r1, r3
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f22:	430a      	orrs	r2, r1
 8002f24:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4ab3      	ldr	r2, [pc, #716]	; (80031f8 <UART_SetConfig+0x35c>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d131      	bne.n	8002f94 <UART_SetConfig+0xf8>
 8002f30:	4bb2      	ldr	r3, [pc, #712]	; (80031fc <UART_SetConfig+0x360>)
 8002f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f34:	2203      	movs	r2, #3
 8002f36:	4013      	ands	r3, r2
 8002f38:	2b03      	cmp	r3, #3
 8002f3a:	d01d      	beq.n	8002f78 <UART_SetConfig+0xdc>
 8002f3c:	d823      	bhi.n	8002f86 <UART_SetConfig+0xea>
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d00c      	beq.n	8002f5c <UART_SetConfig+0xc0>
 8002f42:	d820      	bhi.n	8002f86 <UART_SetConfig+0xea>
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d002      	beq.n	8002f4e <UART_SetConfig+0xb2>
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d00e      	beq.n	8002f6a <UART_SetConfig+0xce>
 8002f4c:	e01b      	b.n	8002f86 <UART_SetConfig+0xea>
 8002f4e:	231b      	movs	r3, #27
 8002f50:	2218      	movs	r2, #24
 8002f52:	189b      	adds	r3, r3, r2
 8002f54:	19db      	adds	r3, r3, r7
 8002f56:	2201      	movs	r2, #1
 8002f58:	701a      	strb	r2, [r3, #0]
 8002f5a:	e09c      	b.n	8003096 <UART_SetConfig+0x1fa>
 8002f5c:	231b      	movs	r3, #27
 8002f5e:	2218      	movs	r2, #24
 8002f60:	189b      	adds	r3, r3, r2
 8002f62:	19db      	adds	r3, r3, r7
 8002f64:	2202      	movs	r2, #2
 8002f66:	701a      	strb	r2, [r3, #0]
 8002f68:	e095      	b.n	8003096 <UART_SetConfig+0x1fa>
 8002f6a:	231b      	movs	r3, #27
 8002f6c:	2218      	movs	r2, #24
 8002f6e:	189b      	adds	r3, r3, r2
 8002f70:	19db      	adds	r3, r3, r7
 8002f72:	2204      	movs	r2, #4
 8002f74:	701a      	strb	r2, [r3, #0]
 8002f76:	e08e      	b.n	8003096 <UART_SetConfig+0x1fa>
 8002f78:	231b      	movs	r3, #27
 8002f7a:	2218      	movs	r2, #24
 8002f7c:	189b      	adds	r3, r3, r2
 8002f7e:	19db      	adds	r3, r3, r7
 8002f80:	2208      	movs	r2, #8
 8002f82:	701a      	strb	r2, [r3, #0]
 8002f84:	e087      	b.n	8003096 <UART_SetConfig+0x1fa>
 8002f86:	231b      	movs	r3, #27
 8002f88:	2218      	movs	r2, #24
 8002f8a:	189b      	adds	r3, r3, r2
 8002f8c:	19db      	adds	r3, r3, r7
 8002f8e:	2210      	movs	r2, #16
 8002f90:	701a      	strb	r2, [r3, #0]
 8002f92:	e080      	b.n	8003096 <UART_SetConfig+0x1fa>
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a99      	ldr	r2, [pc, #612]	; (8003200 <UART_SetConfig+0x364>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d131      	bne.n	8003002 <UART_SetConfig+0x166>
 8002f9e:	4b97      	ldr	r3, [pc, #604]	; (80031fc <UART_SetConfig+0x360>)
 8002fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fa2:	220c      	movs	r2, #12
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	2b0c      	cmp	r3, #12
 8002fa8:	d01d      	beq.n	8002fe6 <UART_SetConfig+0x14a>
 8002faa:	d823      	bhi.n	8002ff4 <UART_SetConfig+0x158>
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d00c      	beq.n	8002fca <UART_SetConfig+0x12e>
 8002fb0:	d820      	bhi.n	8002ff4 <UART_SetConfig+0x158>
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d002      	beq.n	8002fbc <UART_SetConfig+0x120>
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	d00e      	beq.n	8002fd8 <UART_SetConfig+0x13c>
 8002fba:	e01b      	b.n	8002ff4 <UART_SetConfig+0x158>
 8002fbc:	231b      	movs	r3, #27
 8002fbe:	2218      	movs	r2, #24
 8002fc0:	189b      	adds	r3, r3, r2
 8002fc2:	19db      	adds	r3, r3, r7
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	701a      	strb	r2, [r3, #0]
 8002fc8:	e065      	b.n	8003096 <UART_SetConfig+0x1fa>
 8002fca:	231b      	movs	r3, #27
 8002fcc:	2218      	movs	r2, #24
 8002fce:	189b      	adds	r3, r3, r2
 8002fd0:	19db      	adds	r3, r3, r7
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	701a      	strb	r2, [r3, #0]
 8002fd6:	e05e      	b.n	8003096 <UART_SetConfig+0x1fa>
 8002fd8:	231b      	movs	r3, #27
 8002fda:	2218      	movs	r2, #24
 8002fdc:	189b      	adds	r3, r3, r2
 8002fde:	19db      	adds	r3, r3, r7
 8002fe0:	2204      	movs	r2, #4
 8002fe2:	701a      	strb	r2, [r3, #0]
 8002fe4:	e057      	b.n	8003096 <UART_SetConfig+0x1fa>
 8002fe6:	231b      	movs	r3, #27
 8002fe8:	2218      	movs	r2, #24
 8002fea:	189b      	adds	r3, r3, r2
 8002fec:	19db      	adds	r3, r3, r7
 8002fee:	2208      	movs	r2, #8
 8002ff0:	701a      	strb	r2, [r3, #0]
 8002ff2:	e050      	b.n	8003096 <UART_SetConfig+0x1fa>
 8002ff4:	231b      	movs	r3, #27
 8002ff6:	2218      	movs	r2, #24
 8002ff8:	189b      	adds	r3, r3, r2
 8002ffa:	19db      	adds	r3, r3, r7
 8002ffc:	2210      	movs	r2, #16
 8002ffe:	701a      	strb	r2, [r3, #0]
 8003000:	e049      	b.n	8003096 <UART_SetConfig+0x1fa>
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a7a      	ldr	r2, [pc, #488]	; (80031f0 <UART_SetConfig+0x354>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d13e      	bne.n	800308a <UART_SetConfig+0x1ee>
 800300c:	4b7b      	ldr	r3, [pc, #492]	; (80031fc <UART_SetConfig+0x360>)
 800300e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003010:	23c0      	movs	r3, #192	; 0xc0
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	4013      	ands	r3, r2
 8003016:	22c0      	movs	r2, #192	; 0xc0
 8003018:	0112      	lsls	r2, r2, #4
 800301a:	4293      	cmp	r3, r2
 800301c:	d027      	beq.n	800306e <UART_SetConfig+0x1d2>
 800301e:	22c0      	movs	r2, #192	; 0xc0
 8003020:	0112      	lsls	r2, r2, #4
 8003022:	4293      	cmp	r3, r2
 8003024:	d82a      	bhi.n	800307c <UART_SetConfig+0x1e0>
 8003026:	2280      	movs	r2, #128	; 0x80
 8003028:	0112      	lsls	r2, r2, #4
 800302a:	4293      	cmp	r3, r2
 800302c:	d011      	beq.n	8003052 <UART_SetConfig+0x1b6>
 800302e:	2280      	movs	r2, #128	; 0x80
 8003030:	0112      	lsls	r2, r2, #4
 8003032:	4293      	cmp	r3, r2
 8003034:	d822      	bhi.n	800307c <UART_SetConfig+0x1e0>
 8003036:	2b00      	cmp	r3, #0
 8003038:	d004      	beq.n	8003044 <UART_SetConfig+0x1a8>
 800303a:	2280      	movs	r2, #128	; 0x80
 800303c:	00d2      	lsls	r2, r2, #3
 800303e:	4293      	cmp	r3, r2
 8003040:	d00e      	beq.n	8003060 <UART_SetConfig+0x1c4>
 8003042:	e01b      	b.n	800307c <UART_SetConfig+0x1e0>
 8003044:	231b      	movs	r3, #27
 8003046:	2218      	movs	r2, #24
 8003048:	189b      	adds	r3, r3, r2
 800304a:	19db      	adds	r3, r3, r7
 800304c:	2200      	movs	r2, #0
 800304e:	701a      	strb	r2, [r3, #0]
 8003050:	e021      	b.n	8003096 <UART_SetConfig+0x1fa>
 8003052:	231b      	movs	r3, #27
 8003054:	2218      	movs	r2, #24
 8003056:	189b      	adds	r3, r3, r2
 8003058:	19db      	adds	r3, r3, r7
 800305a:	2202      	movs	r2, #2
 800305c:	701a      	strb	r2, [r3, #0]
 800305e:	e01a      	b.n	8003096 <UART_SetConfig+0x1fa>
 8003060:	231b      	movs	r3, #27
 8003062:	2218      	movs	r2, #24
 8003064:	189b      	adds	r3, r3, r2
 8003066:	19db      	adds	r3, r3, r7
 8003068:	2204      	movs	r2, #4
 800306a:	701a      	strb	r2, [r3, #0]
 800306c:	e013      	b.n	8003096 <UART_SetConfig+0x1fa>
 800306e:	231b      	movs	r3, #27
 8003070:	2218      	movs	r2, #24
 8003072:	189b      	adds	r3, r3, r2
 8003074:	19db      	adds	r3, r3, r7
 8003076:	2208      	movs	r2, #8
 8003078:	701a      	strb	r2, [r3, #0]
 800307a:	e00c      	b.n	8003096 <UART_SetConfig+0x1fa>
 800307c:	231b      	movs	r3, #27
 800307e:	2218      	movs	r2, #24
 8003080:	189b      	adds	r3, r3, r2
 8003082:	19db      	adds	r3, r3, r7
 8003084:	2210      	movs	r2, #16
 8003086:	701a      	strb	r2, [r3, #0]
 8003088:	e005      	b.n	8003096 <UART_SetConfig+0x1fa>
 800308a:	231b      	movs	r3, #27
 800308c:	2218      	movs	r2, #24
 800308e:	189b      	adds	r3, r3, r2
 8003090:	19db      	adds	r3, r3, r7
 8003092:	2210      	movs	r2, #16
 8003094:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a55      	ldr	r2, [pc, #340]	; (80031f0 <UART_SetConfig+0x354>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d000      	beq.n	80030a2 <UART_SetConfig+0x206>
 80030a0:	e084      	b.n	80031ac <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80030a2:	231b      	movs	r3, #27
 80030a4:	2218      	movs	r2, #24
 80030a6:	189b      	adds	r3, r3, r2
 80030a8:	19db      	adds	r3, r3, r7
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d01d      	beq.n	80030ec <UART_SetConfig+0x250>
 80030b0:	dc20      	bgt.n	80030f4 <UART_SetConfig+0x258>
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d015      	beq.n	80030e2 <UART_SetConfig+0x246>
 80030b6:	dc1d      	bgt.n	80030f4 <UART_SetConfig+0x258>
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d002      	beq.n	80030c2 <UART_SetConfig+0x226>
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d005      	beq.n	80030cc <UART_SetConfig+0x230>
 80030c0:	e018      	b.n	80030f4 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030c2:	f7fe febf 	bl	8001e44 <HAL_RCC_GetPCLK1Freq>
 80030c6:	0003      	movs	r3, r0
 80030c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030ca:	e01c      	b.n	8003106 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030cc:	4b4b      	ldr	r3, [pc, #300]	; (80031fc <UART_SetConfig+0x360>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2210      	movs	r2, #16
 80030d2:	4013      	ands	r3, r2
 80030d4:	d002      	beq.n	80030dc <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80030d6:	4b4b      	ldr	r3, [pc, #300]	; (8003204 <UART_SetConfig+0x368>)
 80030d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80030da:	e014      	b.n	8003106 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 80030dc:	4b4a      	ldr	r3, [pc, #296]	; (8003208 <UART_SetConfig+0x36c>)
 80030de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030e0:	e011      	b.n	8003106 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030e2:	f7fe fdff 	bl	8001ce4 <HAL_RCC_GetSysClockFreq>
 80030e6:	0003      	movs	r3, r0
 80030e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030ea:	e00c      	b.n	8003106 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030ec:	2380      	movs	r3, #128	; 0x80
 80030ee:	021b      	lsls	r3, r3, #8
 80030f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030f2:	e008      	b.n	8003106 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80030f8:	231a      	movs	r3, #26
 80030fa:	2218      	movs	r2, #24
 80030fc:	189b      	adds	r3, r3, r2
 80030fe:	19db      	adds	r3, r3, r7
 8003100:	2201      	movs	r2, #1
 8003102:	701a      	strb	r2, [r3, #0]
        break;
 8003104:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003108:	2b00      	cmp	r3, #0
 800310a:	d100      	bne.n	800310e <UART_SetConfig+0x272>
 800310c:	e132      	b.n	8003374 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	0013      	movs	r3, r2
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	189b      	adds	r3, r3, r2
 8003118:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800311a:	429a      	cmp	r2, r3
 800311c:	d305      	bcc.n	800312a <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003126:	429a      	cmp	r2, r3
 8003128:	d906      	bls.n	8003138 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 800312a:	231a      	movs	r3, #26
 800312c:	2218      	movs	r2, #24
 800312e:	189b      	adds	r3, r3, r2
 8003130:	19db      	adds	r3, r3, r7
 8003132:	2201      	movs	r2, #1
 8003134:	701a      	strb	r2, [r3, #0]
 8003136:	e11d      	b.n	8003374 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313a:	613b      	str	r3, [r7, #16]
 800313c:	2300      	movs	r3, #0
 800313e:	617b      	str	r3, [r7, #20]
 8003140:	6939      	ldr	r1, [r7, #16]
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	000b      	movs	r3, r1
 8003146:	0e1b      	lsrs	r3, r3, #24
 8003148:	0010      	movs	r0, r2
 800314a:	0205      	lsls	r5, r0, #8
 800314c:	431d      	orrs	r5, r3
 800314e:	000b      	movs	r3, r1
 8003150:	021c      	lsls	r4, r3, #8
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	085b      	lsrs	r3, r3, #1
 8003158:	60bb      	str	r3, [r7, #8]
 800315a:	2300      	movs	r3, #0
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	68b8      	ldr	r0, [r7, #8]
 8003160:	68f9      	ldr	r1, [r7, #12]
 8003162:	1900      	adds	r0, r0, r4
 8003164:	4169      	adcs	r1, r5
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	603b      	str	r3, [r7, #0]
 800316c:	2300      	movs	r3, #0
 800316e:	607b      	str	r3, [r7, #4]
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f7fd f85c 	bl	8000230 <__aeabi_uldivmod>
 8003178:	0002      	movs	r2, r0
 800317a:	000b      	movs	r3, r1
 800317c:	0013      	movs	r3, r2
 800317e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003180:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003182:	23c0      	movs	r3, #192	; 0xc0
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	429a      	cmp	r2, r3
 8003188:	d309      	bcc.n	800319e <UART_SetConfig+0x302>
 800318a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800318c:	2380      	movs	r3, #128	; 0x80
 800318e:	035b      	lsls	r3, r3, #13
 8003190:	429a      	cmp	r2, r3
 8003192:	d204      	bcs.n	800319e <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800319a:	60da      	str	r2, [r3, #12]
 800319c:	e0ea      	b.n	8003374 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 800319e:	231a      	movs	r3, #26
 80031a0:	2218      	movs	r2, #24
 80031a2:	189b      	adds	r3, r3, r2
 80031a4:	19db      	adds	r3, r3, r7
 80031a6:	2201      	movs	r2, #1
 80031a8:	701a      	strb	r2, [r3, #0]
 80031aa:	e0e3      	b.n	8003374 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	69da      	ldr	r2, [r3, #28]
 80031b0:	2380      	movs	r3, #128	; 0x80
 80031b2:	021b      	lsls	r3, r3, #8
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d000      	beq.n	80031ba <UART_SetConfig+0x31e>
 80031b8:	e085      	b.n	80032c6 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 80031ba:	231b      	movs	r3, #27
 80031bc:	2218      	movs	r2, #24
 80031be:	189b      	adds	r3, r3, r2
 80031c0:	19db      	adds	r3, r3, r7
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d837      	bhi.n	8003238 <UART_SetConfig+0x39c>
 80031c8:	009a      	lsls	r2, r3, #2
 80031ca:	4b10      	ldr	r3, [pc, #64]	; (800320c <UART_SetConfig+0x370>)
 80031cc:	18d3      	adds	r3, r2, r3
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031d2:	f7fe fe37 	bl	8001e44 <HAL_RCC_GetPCLK1Freq>
 80031d6:	0003      	movs	r3, r0
 80031d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80031da:	e036      	b.n	800324a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031dc:	f7fe fe48 	bl	8001e70 <HAL_RCC_GetPCLK2Freq>
 80031e0:	0003      	movs	r3, r0
 80031e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80031e4:	e031      	b.n	800324a <UART_SetConfig+0x3ae>
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	efff69f3 	.word	0xefff69f3
 80031ec:	ffffcfff 	.word	0xffffcfff
 80031f0:	40004800 	.word	0x40004800
 80031f4:	fffff4ff 	.word	0xfffff4ff
 80031f8:	40013800 	.word	0x40013800
 80031fc:	40021000 	.word	0x40021000
 8003200:	40004400 	.word	0x40004400
 8003204:	003d0900 	.word	0x003d0900
 8003208:	00f42400 	.word	0x00f42400
 800320c:	08005d50 	.word	0x08005d50
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003210:	4b60      	ldr	r3, [pc, #384]	; (8003394 <UART_SetConfig+0x4f8>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2210      	movs	r2, #16
 8003216:	4013      	ands	r3, r2
 8003218:	d002      	beq.n	8003220 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800321a:	4b5f      	ldr	r3, [pc, #380]	; (8003398 <UART_SetConfig+0x4fc>)
 800321c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800321e:	e014      	b.n	800324a <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8003220:	4b5e      	ldr	r3, [pc, #376]	; (800339c <UART_SetConfig+0x500>)
 8003222:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003224:	e011      	b.n	800324a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003226:	f7fe fd5d 	bl	8001ce4 <HAL_RCC_GetSysClockFreq>
 800322a:	0003      	movs	r3, r0
 800322c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800322e:	e00c      	b.n	800324a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003230:	2380      	movs	r3, #128	; 0x80
 8003232:	021b      	lsls	r3, r3, #8
 8003234:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003236:	e008      	b.n	800324a <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800323c:	231a      	movs	r3, #26
 800323e:	2218      	movs	r2, #24
 8003240:	189b      	adds	r3, r3, r2
 8003242:	19db      	adds	r3, r3, r7
 8003244:	2201      	movs	r2, #1
 8003246:	701a      	strb	r2, [r3, #0]
        break;
 8003248:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800324a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324c:	2b00      	cmp	r3, #0
 800324e:	d100      	bne.n	8003252 <UART_SetConfig+0x3b6>
 8003250:	e090      	b.n	8003374 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003254:	005a      	lsls	r2, r3, #1
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	085b      	lsrs	r3, r3, #1
 800325c:	18d2      	adds	r2, r2, r3
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	0019      	movs	r1, r3
 8003264:	0010      	movs	r0, r2
 8003266:	f7fc ff57 	bl	8000118 <__udivsi3>
 800326a:	0003      	movs	r3, r0
 800326c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800326e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003270:	2b0f      	cmp	r3, #15
 8003272:	d921      	bls.n	80032b8 <UART_SetConfig+0x41c>
 8003274:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003276:	2380      	movs	r3, #128	; 0x80
 8003278:	025b      	lsls	r3, r3, #9
 800327a:	429a      	cmp	r2, r3
 800327c:	d21c      	bcs.n	80032b8 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800327e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003280:	b29a      	uxth	r2, r3
 8003282:	200e      	movs	r0, #14
 8003284:	2418      	movs	r4, #24
 8003286:	1903      	adds	r3, r0, r4
 8003288:	19db      	adds	r3, r3, r7
 800328a:	210f      	movs	r1, #15
 800328c:	438a      	bics	r2, r1
 800328e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003292:	085b      	lsrs	r3, r3, #1
 8003294:	b29b      	uxth	r3, r3
 8003296:	2207      	movs	r2, #7
 8003298:	4013      	ands	r3, r2
 800329a:	b299      	uxth	r1, r3
 800329c:	1903      	adds	r3, r0, r4
 800329e:	19db      	adds	r3, r3, r7
 80032a0:	1902      	adds	r2, r0, r4
 80032a2:	19d2      	adds	r2, r2, r7
 80032a4:	8812      	ldrh	r2, [r2, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	1902      	adds	r2, r0, r4
 80032b0:	19d2      	adds	r2, r2, r7
 80032b2:	8812      	ldrh	r2, [r2, #0]
 80032b4:	60da      	str	r2, [r3, #12]
 80032b6:	e05d      	b.n	8003374 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80032b8:	231a      	movs	r3, #26
 80032ba:	2218      	movs	r2, #24
 80032bc:	189b      	adds	r3, r3, r2
 80032be:	19db      	adds	r3, r3, r7
 80032c0:	2201      	movs	r2, #1
 80032c2:	701a      	strb	r2, [r3, #0]
 80032c4:	e056      	b.n	8003374 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032c6:	231b      	movs	r3, #27
 80032c8:	2218      	movs	r2, #24
 80032ca:	189b      	adds	r3, r3, r2
 80032cc:	19db      	adds	r3, r3, r7
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d822      	bhi.n	800331a <UART_SetConfig+0x47e>
 80032d4:	009a      	lsls	r2, r3, #2
 80032d6:	4b32      	ldr	r3, [pc, #200]	; (80033a0 <UART_SetConfig+0x504>)
 80032d8:	18d3      	adds	r3, r2, r3
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032de:	f7fe fdb1 	bl	8001e44 <HAL_RCC_GetPCLK1Freq>
 80032e2:	0003      	movs	r3, r0
 80032e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032e6:	e021      	b.n	800332c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032e8:	f7fe fdc2 	bl	8001e70 <HAL_RCC_GetPCLK2Freq>
 80032ec:	0003      	movs	r3, r0
 80032ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032f0:	e01c      	b.n	800332c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032f2:	4b28      	ldr	r3, [pc, #160]	; (8003394 <UART_SetConfig+0x4f8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2210      	movs	r2, #16
 80032f8:	4013      	ands	r3, r2
 80032fa:	d002      	beq.n	8003302 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80032fc:	4b26      	ldr	r3, [pc, #152]	; (8003398 <UART_SetConfig+0x4fc>)
 80032fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003300:	e014      	b.n	800332c <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8003302:	4b26      	ldr	r3, [pc, #152]	; (800339c <UART_SetConfig+0x500>)
 8003304:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003306:	e011      	b.n	800332c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003308:	f7fe fcec 	bl	8001ce4 <HAL_RCC_GetSysClockFreq>
 800330c:	0003      	movs	r3, r0
 800330e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003310:	e00c      	b.n	800332c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003312:	2380      	movs	r3, #128	; 0x80
 8003314:	021b      	lsls	r3, r3, #8
 8003316:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003318:	e008      	b.n	800332c <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800331e:	231a      	movs	r3, #26
 8003320:	2218      	movs	r2, #24
 8003322:	189b      	adds	r3, r3, r2
 8003324:	19db      	adds	r3, r3, r7
 8003326:	2201      	movs	r2, #1
 8003328:	701a      	strb	r2, [r3, #0]
        break;
 800332a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800332c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332e:	2b00      	cmp	r3, #0
 8003330:	d020      	beq.n	8003374 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	085a      	lsrs	r2, r3, #1
 8003338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333a:	18d2      	adds	r2, r2, r3
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	0019      	movs	r1, r3
 8003342:	0010      	movs	r0, r2
 8003344:	f7fc fee8 	bl	8000118 <__udivsi3>
 8003348:	0003      	movs	r3, r0
 800334a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800334c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334e:	2b0f      	cmp	r3, #15
 8003350:	d90a      	bls.n	8003368 <UART_SetConfig+0x4cc>
 8003352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003354:	2380      	movs	r3, #128	; 0x80
 8003356:	025b      	lsls	r3, r3, #9
 8003358:	429a      	cmp	r2, r3
 800335a:	d205      	bcs.n	8003368 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800335c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335e:	b29a      	uxth	r2, r3
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	60da      	str	r2, [r3, #12]
 8003366:	e005      	b.n	8003374 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8003368:	231a      	movs	r3, #26
 800336a:	2218      	movs	r2, #24
 800336c:	189b      	adds	r3, r3, r2
 800336e:	19db      	adds	r3, r3, r7
 8003370:	2201      	movs	r2, #1
 8003372:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	2200      	movs	r2, #0
 8003378:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	2200      	movs	r2, #0
 800337e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003380:	231a      	movs	r3, #26
 8003382:	2218      	movs	r2, #24
 8003384:	189b      	adds	r3, r3, r2
 8003386:	19db      	adds	r3, r3, r7
 8003388:	781b      	ldrb	r3, [r3, #0]
}
 800338a:	0018      	movs	r0, r3
 800338c:	46bd      	mov	sp, r7
 800338e:	b00e      	add	sp, #56	; 0x38
 8003390:	bdb0      	pop	{r4, r5, r7, pc}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	40021000 	.word	0x40021000
 8003398:	003d0900 	.word	0x003d0900
 800339c:	00f42400 	.word	0x00f42400
 80033a0:	08005d74 	.word	0x08005d74

080033a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	2201      	movs	r2, #1
 80033b2:	4013      	ands	r3, r2
 80033b4:	d00b      	beq.n	80033ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	4a4a      	ldr	r2, [pc, #296]	; (80034e8 <UART_AdvFeatureConfig+0x144>)
 80033be:	4013      	ands	r3, r2
 80033c0:	0019      	movs	r1, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	2202      	movs	r2, #2
 80033d4:	4013      	ands	r3, r2
 80033d6:	d00b      	beq.n	80033f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	4a43      	ldr	r2, [pc, #268]	; (80034ec <UART_AdvFeatureConfig+0x148>)
 80033e0:	4013      	ands	r3, r2
 80033e2:	0019      	movs	r1, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	2204      	movs	r2, #4
 80033f6:	4013      	ands	r3, r2
 80033f8:	d00b      	beq.n	8003412 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	4a3b      	ldr	r2, [pc, #236]	; (80034f0 <UART_AdvFeatureConfig+0x14c>)
 8003402:	4013      	ands	r3, r2
 8003404:	0019      	movs	r1, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	2208      	movs	r2, #8
 8003418:	4013      	ands	r3, r2
 800341a:	d00b      	beq.n	8003434 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	4a34      	ldr	r2, [pc, #208]	; (80034f4 <UART_AdvFeatureConfig+0x150>)
 8003424:	4013      	ands	r3, r2
 8003426:	0019      	movs	r1, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	2210      	movs	r2, #16
 800343a:	4013      	ands	r3, r2
 800343c:	d00b      	beq.n	8003456 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	4a2c      	ldr	r2, [pc, #176]	; (80034f8 <UART_AdvFeatureConfig+0x154>)
 8003446:	4013      	ands	r3, r2
 8003448:	0019      	movs	r1, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	2220      	movs	r2, #32
 800345c:	4013      	ands	r3, r2
 800345e:	d00b      	beq.n	8003478 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	4a25      	ldr	r2, [pc, #148]	; (80034fc <UART_AdvFeatureConfig+0x158>)
 8003468:	4013      	ands	r3, r2
 800346a:	0019      	movs	r1, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	2240      	movs	r2, #64	; 0x40
 800347e:	4013      	ands	r3, r2
 8003480:	d01d      	beq.n	80034be <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	4a1d      	ldr	r2, [pc, #116]	; (8003500 <UART_AdvFeatureConfig+0x15c>)
 800348a:	4013      	ands	r3, r2
 800348c:	0019      	movs	r1, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800349e:	2380      	movs	r3, #128	; 0x80
 80034a0:	035b      	lsls	r3, r3, #13
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d10b      	bne.n	80034be <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	4a15      	ldr	r2, [pc, #84]	; (8003504 <UART_AdvFeatureConfig+0x160>)
 80034ae:	4013      	ands	r3, r2
 80034b0:	0019      	movs	r1, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	2280      	movs	r2, #128	; 0x80
 80034c4:	4013      	ands	r3, r2
 80034c6:	d00b      	beq.n	80034e0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	4a0e      	ldr	r2, [pc, #56]	; (8003508 <UART_AdvFeatureConfig+0x164>)
 80034d0:	4013      	ands	r3, r2
 80034d2:	0019      	movs	r1, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	605a      	str	r2, [r3, #4]
  }
}
 80034e0:	46c0      	nop			; (mov r8, r8)
 80034e2:	46bd      	mov	sp, r7
 80034e4:	b002      	add	sp, #8
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	fffdffff 	.word	0xfffdffff
 80034ec:	fffeffff 	.word	0xfffeffff
 80034f0:	fffbffff 	.word	0xfffbffff
 80034f4:	ffff7fff 	.word	0xffff7fff
 80034f8:	ffffefff 	.word	0xffffefff
 80034fc:	ffffdfff 	.word	0xffffdfff
 8003500:	ffefffff 	.word	0xffefffff
 8003504:	ff9fffff 	.word	0xff9fffff
 8003508:	fff7ffff 	.word	0xfff7ffff

0800350c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b092      	sub	sp, #72	; 0x48
 8003510:	af02      	add	r7, sp, #8
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2284      	movs	r2, #132	; 0x84
 8003518:	2100      	movs	r1, #0
 800351a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800351c:	f7fd fbfe 	bl	8000d1c <HAL_GetTick>
 8003520:	0003      	movs	r3, r0
 8003522:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2208      	movs	r2, #8
 800352c:	4013      	ands	r3, r2
 800352e:	2b08      	cmp	r3, #8
 8003530:	d12c      	bne.n	800358c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003534:	2280      	movs	r2, #128	; 0x80
 8003536:	0391      	lsls	r1, r2, #14
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	4a46      	ldr	r2, [pc, #280]	; (8003654 <UART_CheckIdleState+0x148>)
 800353c:	9200      	str	r2, [sp, #0]
 800353e:	2200      	movs	r2, #0
 8003540:	f000 f88c 	bl	800365c <UART_WaitOnFlagUntilTimeout>
 8003544:	1e03      	subs	r3, r0, #0
 8003546:	d021      	beq.n	800358c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003548:	f3ef 8310 	mrs	r3, PRIMASK
 800354c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003550:	63bb      	str	r3, [r7, #56]	; 0x38
 8003552:	2301      	movs	r3, #1
 8003554:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003558:	f383 8810 	msr	PRIMASK, r3
}
 800355c:	46c0      	nop			; (mov r8, r8)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2180      	movs	r1, #128	; 0x80
 800356a:	438a      	bics	r2, r1
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003570:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003574:	f383 8810 	msr	PRIMASK, r3
}
 8003578:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2220      	movs	r2, #32
 800357e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2278      	movs	r2, #120	; 0x78
 8003584:	2100      	movs	r1, #0
 8003586:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e05f      	b.n	800364c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2204      	movs	r2, #4
 8003594:	4013      	ands	r3, r2
 8003596:	2b04      	cmp	r3, #4
 8003598:	d146      	bne.n	8003628 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800359a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800359c:	2280      	movs	r2, #128	; 0x80
 800359e:	03d1      	lsls	r1, r2, #15
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	4a2c      	ldr	r2, [pc, #176]	; (8003654 <UART_CheckIdleState+0x148>)
 80035a4:	9200      	str	r2, [sp, #0]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f000 f858 	bl	800365c <UART_WaitOnFlagUntilTimeout>
 80035ac:	1e03      	subs	r3, r0, #0
 80035ae:	d03b      	beq.n	8003628 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035b0:	f3ef 8310 	mrs	r3, PRIMASK
 80035b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80035b6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035b8:	637b      	str	r3, [r7, #52]	; 0x34
 80035ba:	2301      	movs	r3, #1
 80035bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	f383 8810 	msr	PRIMASK, r3
}
 80035c4:	46c0      	nop			; (mov r8, r8)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4921      	ldr	r1, [pc, #132]	; (8003658 <UART_CheckIdleState+0x14c>)
 80035d2:	400a      	ands	r2, r1
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f383 8810 	msr	PRIMASK, r3
}
 80035e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035e2:	f3ef 8310 	mrs	r3, PRIMASK
 80035e6:	61bb      	str	r3, [r7, #24]
  return(result);
 80035e8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ea:	633b      	str	r3, [r7, #48]	; 0x30
 80035ec:	2301      	movs	r3, #1
 80035ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	f383 8810 	msr	PRIMASK, r3
}
 80035f6:	46c0      	nop			; (mov r8, r8)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2101      	movs	r1, #1
 8003604:	438a      	bics	r2, r1
 8003606:	609a      	str	r2, [r3, #8]
 8003608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	f383 8810 	msr	PRIMASK, r3
}
 8003612:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2280      	movs	r2, #128	; 0x80
 8003618:	2120      	movs	r1, #32
 800361a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2278      	movs	r2, #120	; 0x78
 8003620:	2100      	movs	r1, #0
 8003622:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e011      	b.n	800364c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2220      	movs	r2, #32
 800362c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2280      	movs	r2, #128	; 0x80
 8003632:	2120      	movs	r1, #32
 8003634:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2278      	movs	r2, #120	; 0x78
 8003646:	2100      	movs	r1, #0
 8003648:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	0018      	movs	r0, r3
 800364e:	46bd      	mov	sp, r7
 8003650:	b010      	add	sp, #64	; 0x40
 8003652:	bd80      	pop	{r7, pc}
 8003654:	01ffffff 	.word	0x01ffffff
 8003658:	fffffedf 	.word	0xfffffedf

0800365c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	603b      	str	r3, [r7, #0]
 8003668:	1dfb      	adds	r3, r7, #7
 800366a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800366c:	e04b      	b.n	8003706 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	3301      	adds	r3, #1
 8003672:	d048      	beq.n	8003706 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003674:	f7fd fb52 	bl	8000d1c <HAL_GetTick>
 8003678:	0002      	movs	r2, r0
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	429a      	cmp	r2, r3
 8003682:	d302      	bcc.n	800368a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e04b      	b.n	8003726 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2204      	movs	r2, #4
 8003696:	4013      	ands	r3, r2
 8003698:	d035      	beq.n	8003706 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	69db      	ldr	r3, [r3, #28]
 80036a0:	2208      	movs	r2, #8
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d111      	bne.n	80036cc <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2208      	movs	r2, #8
 80036ae:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	0018      	movs	r0, r3
 80036b4:	f000 f906 	bl	80038c4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2284      	movs	r2, #132	; 0x84
 80036bc:	2108      	movs	r1, #8
 80036be:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2278      	movs	r2, #120	; 0x78
 80036c4:	2100      	movs	r1, #0
 80036c6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e02c      	b.n	8003726 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	69da      	ldr	r2, [r3, #28]
 80036d2:	2380      	movs	r3, #128	; 0x80
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	401a      	ands	r2, r3
 80036d8:	2380      	movs	r3, #128	; 0x80
 80036da:	011b      	lsls	r3, r3, #4
 80036dc:	429a      	cmp	r2, r3
 80036de:	d112      	bne.n	8003706 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2280      	movs	r2, #128	; 0x80
 80036e6:	0112      	lsls	r2, r2, #4
 80036e8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	0018      	movs	r0, r3
 80036ee:	f000 f8e9 	bl	80038c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2284      	movs	r2, #132	; 0x84
 80036f6:	2120      	movs	r1, #32
 80036f8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2278      	movs	r2, #120	; 0x78
 80036fe:	2100      	movs	r1, #0
 8003700:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e00f      	b.n	8003726 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	69db      	ldr	r3, [r3, #28]
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	4013      	ands	r3, r2
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	425a      	negs	r2, r3
 8003716:	4153      	adcs	r3, r2
 8003718:	b2db      	uxtb	r3, r3
 800371a:	001a      	movs	r2, r3
 800371c:	1dfb      	adds	r3, r7, #7
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	429a      	cmp	r2, r3
 8003722:	d0a4      	beq.n	800366e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	0018      	movs	r0, r3
 8003728:	46bd      	mov	sp, r7
 800372a:	b004      	add	sp, #16
 800372c:	bd80      	pop	{r7, pc}
	...

08003730 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b090      	sub	sp, #64	; 0x40
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	1dbb      	adds	r3, r7, #6
 800373c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	1dba      	adds	r2, r7, #6
 8003748:	2158      	movs	r1, #88	; 0x58
 800374a:	8812      	ldrh	r2, [r2, #0]
 800374c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	1dba      	adds	r2, r7, #6
 8003752:	215a      	movs	r1, #90	; 0x5a
 8003754:	8812      	ldrh	r2, [r2, #0]
 8003756:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	2380      	movs	r3, #128	; 0x80
 8003764:	015b      	lsls	r3, r3, #5
 8003766:	429a      	cmp	r2, r3
 8003768:	d10d      	bne.n	8003786 <UART_Start_Receive_IT+0x56>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d104      	bne.n	800377c <UART_Start_Receive_IT+0x4c>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	225c      	movs	r2, #92	; 0x5c
 8003776:	4950      	ldr	r1, [pc, #320]	; (80038b8 <UART_Start_Receive_IT+0x188>)
 8003778:	5299      	strh	r1, [r3, r2]
 800377a:	e02e      	b.n	80037da <UART_Start_Receive_IT+0xaa>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	225c      	movs	r2, #92	; 0x5c
 8003780:	21ff      	movs	r1, #255	; 0xff
 8003782:	5299      	strh	r1, [r3, r2]
 8003784:	e029      	b.n	80037da <UART_Start_Receive_IT+0xaa>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10d      	bne.n	80037aa <UART_Start_Receive_IT+0x7a>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d104      	bne.n	80037a0 <UART_Start_Receive_IT+0x70>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	225c      	movs	r2, #92	; 0x5c
 800379a:	21ff      	movs	r1, #255	; 0xff
 800379c:	5299      	strh	r1, [r3, r2]
 800379e:	e01c      	b.n	80037da <UART_Start_Receive_IT+0xaa>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	225c      	movs	r2, #92	; 0x5c
 80037a4:	217f      	movs	r1, #127	; 0x7f
 80037a6:	5299      	strh	r1, [r3, r2]
 80037a8:	e017      	b.n	80037da <UART_Start_Receive_IT+0xaa>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	2380      	movs	r3, #128	; 0x80
 80037b0:	055b      	lsls	r3, r3, #21
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d10d      	bne.n	80037d2 <UART_Start_Receive_IT+0xa2>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d104      	bne.n	80037c8 <UART_Start_Receive_IT+0x98>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	225c      	movs	r2, #92	; 0x5c
 80037c2:	217f      	movs	r1, #127	; 0x7f
 80037c4:	5299      	strh	r1, [r3, r2]
 80037c6:	e008      	b.n	80037da <UART_Start_Receive_IT+0xaa>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	225c      	movs	r2, #92	; 0x5c
 80037cc:	213f      	movs	r1, #63	; 0x3f
 80037ce:	5299      	strh	r1, [r3, r2]
 80037d0:	e003      	b.n	80037da <UART_Start_Receive_IT+0xaa>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	225c      	movs	r2, #92	; 0x5c
 80037d6:	2100      	movs	r1, #0
 80037d8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2284      	movs	r2, #132	; 0x84
 80037de:	2100      	movs	r1, #0
 80037e0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2280      	movs	r2, #128	; 0x80
 80037e6:	2122      	movs	r1, #34	; 0x22
 80037e8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037ea:	f3ef 8310 	mrs	r3, PRIMASK
 80037ee:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80037f0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037f4:	2301      	movs	r3, #1
 80037f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fa:	f383 8810 	msr	PRIMASK, r3
}
 80037fe:	46c0      	nop			; (mov r8, r8)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2101      	movs	r1, #1
 800380c:	430a      	orrs	r2, r1
 800380e:	609a      	str	r2, [r3, #8]
 8003810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003812:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003816:	f383 8810 	msr	PRIMASK, r3
}
 800381a:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	2380      	movs	r3, #128	; 0x80
 8003822:	015b      	lsls	r3, r3, #5
 8003824:	429a      	cmp	r2, r3
 8003826:	d107      	bne.n	8003838 <UART_Start_Receive_IT+0x108>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d103      	bne.n	8003838 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4a22      	ldr	r2, [pc, #136]	; (80038bc <UART_Start_Receive_IT+0x18c>)
 8003834:	669a      	str	r2, [r3, #104]	; 0x68
 8003836:	e002      	b.n	800383e <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	4a21      	ldr	r2, [pc, #132]	; (80038c0 <UART_Start_Receive_IT+0x190>)
 800383c:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d019      	beq.n	800387a <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003846:	f3ef 8310 	mrs	r3, PRIMASK
 800384a:	61fb      	str	r3, [r7, #28]
  return(result);
 800384c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800384e:	637b      	str	r3, [r7, #52]	; 0x34
 8003850:	2301      	movs	r3, #1
 8003852:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	f383 8810 	msr	PRIMASK, r3
}
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2190      	movs	r1, #144	; 0x90
 8003868:	0049      	lsls	r1, r1, #1
 800386a:	430a      	orrs	r2, r1
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003870:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	f383 8810 	msr	PRIMASK, r3
}
 8003878:	e018      	b.n	80038ac <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800387a:	f3ef 8310 	mrs	r3, PRIMASK
 800387e:	613b      	str	r3, [r7, #16]
  return(result);
 8003880:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003882:	63bb      	str	r3, [r7, #56]	; 0x38
 8003884:	2301      	movs	r3, #1
 8003886:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f383 8810 	msr	PRIMASK, r3
}
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2120      	movs	r1, #32
 800389c:	430a      	orrs	r2, r1
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	f383 8810 	msr	PRIMASK, r3
}
 80038aa:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	0018      	movs	r0, r3
 80038b0:	46bd      	mov	sp, r7
 80038b2:	b010      	add	sp, #64	; 0x40
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	000001ff 	.word	0x000001ff
 80038bc:	08003bd5 	.word	0x08003bd5
 80038c0:	08003a11 	.word	0x08003a11

080038c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b08e      	sub	sp, #56	; 0x38
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038cc:	f3ef 8310 	mrs	r3, PRIMASK
 80038d0:	617b      	str	r3, [r7, #20]
  return(result);
 80038d2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038d4:	637b      	str	r3, [r7, #52]	; 0x34
 80038d6:	2301      	movs	r3, #1
 80038d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	f383 8810 	msr	PRIMASK, r3
}
 80038e0:	46c0      	nop			; (mov r8, r8)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4926      	ldr	r1, [pc, #152]	; (8003988 <UART_EndRxTransfer+0xc4>)
 80038ee:	400a      	ands	r2, r1
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	f383 8810 	msr	PRIMASK, r3
}
 80038fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003902:	623b      	str	r3, [r7, #32]
  return(result);
 8003904:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003906:	633b      	str	r3, [r7, #48]	; 0x30
 8003908:	2301      	movs	r3, #1
 800390a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390e:	f383 8810 	msr	PRIMASK, r3
}
 8003912:	46c0      	nop			; (mov r8, r8)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2101      	movs	r1, #1
 8003920:	438a      	bics	r2, r1
 8003922:	609a      	str	r2, [r3, #8]
 8003924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003926:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392a:	f383 8810 	msr	PRIMASK, r3
}
 800392e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003934:	2b01      	cmp	r3, #1
 8003936:	d118      	bne.n	800396a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003938:	f3ef 8310 	mrs	r3, PRIMASK
 800393c:	60bb      	str	r3, [r7, #8]
  return(result);
 800393e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003942:	2301      	movs	r3, #1
 8003944:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f383 8810 	msr	PRIMASK, r3
}
 800394c:	46c0      	nop			; (mov r8, r8)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2110      	movs	r1, #16
 800395a:	438a      	bics	r2, r1
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003960:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f383 8810 	msr	PRIMASK, r3
}
 8003968:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2280      	movs	r2, #128	; 0x80
 800396e:	2120      	movs	r1, #32
 8003970:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	46bd      	mov	sp, r7
 8003982:	b00e      	add	sp, #56	; 0x38
 8003984:	bd80      	pop	{r7, pc}
 8003986:	46c0      	nop			; (mov r8, r8)
 8003988:	fffffedf 	.word	0xfffffedf

0800398c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003998:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	225a      	movs	r2, #90	; 0x5a
 800399e:	2100      	movs	r1, #0
 80039a0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2252      	movs	r2, #82	; 0x52
 80039a6:	2100      	movs	r1, #0
 80039a8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	0018      	movs	r0, r3
 80039ae:	f7ff fa61 	bl	8002e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039b2:	46c0      	nop			; (mov r8, r8)
 80039b4:	46bd      	mov	sp, r7
 80039b6:	b004      	add	sp, #16
 80039b8:	bd80      	pop	{r7, pc}

080039ba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b086      	sub	sp, #24
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039c2:	f3ef 8310 	mrs	r3, PRIMASK
 80039c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80039c8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	2301      	movs	r3, #1
 80039ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f383 8810 	msr	PRIMASK, r3
}
 80039d6:	46c0      	nop			; (mov r8, r8)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2140      	movs	r1, #64	; 0x40
 80039e4:	438a      	bics	r2, r1
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	f383 8810 	msr	PRIMASK, r3
}
 80039f2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2220      	movs	r2, #32
 80039f8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	0018      	movs	r0, r3
 8003a04:	f7ff fa2e 	bl	8002e64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a08:	46c0      	nop			; (mov r8, r8)
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	b006      	add	sp, #24
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b094      	sub	sp, #80	; 0x50
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003a18:	204e      	movs	r0, #78	; 0x4e
 8003a1a:	183b      	adds	r3, r7, r0
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	215c      	movs	r1, #92	; 0x5c
 8003a20:	5a52      	ldrh	r2, [r2, r1]
 8003a22:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2280      	movs	r2, #128	; 0x80
 8003a28:	589b      	ldr	r3, [r3, r2]
 8003a2a:	2b22      	cmp	r3, #34	; 0x22
 8003a2c:	d000      	beq.n	8003a30 <UART_RxISR_8BIT+0x20>
 8003a2e:	e0bf      	b.n	8003bb0 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a36:	214c      	movs	r1, #76	; 0x4c
 8003a38:	187b      	adds	r3, r7, r1
 8003a3a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003a3c:	187b      	adds	r3, r7, r1
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	183b      	adds	r3, r7, r0
 8003a44:	881b      	ldrh	r3, [r3, #0]
 8003a46:	b2d9      	uxtb	r1, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4c:	400a      	ands	r2, r1
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	225a      	movs	r2, #90	; 0x5a
 8003a60:	5a9b      	ldrh	r3, [r3, r2]
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	3b01      	subs	r3, #1
 8003a66:	b299      	uxth	r1, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	225a      	movs	r2, #90	; 0x5a
 8003a6c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	225a      	movs	r2, #90	; 0x5a
 8003a72:	5a9b      	ldrh	r3, [r3, r2]
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d000      	beq.n	8003a7c <UART_RxISR_8BIT+0x6c>
 8003a7a:	e0a1      	b.n	8003bc0 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a7c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a84:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a86:	2301      	movs	r3, #1
 8003a88:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8c:	f383 8810 	msr	PRIMASK, r3
}
 8003a90:	46c0      	nop			; (mov r8, r8)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	494a      	ldr	r1, [pc, #296]	; (8003bc8 <UART_RxISR_8BIT+0x1b8>)
 8003a9e:	400a      	ands	r2, r1
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa8:	f383 8810 	msr	PRIMASK, r3
}
 8003aac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aae:	f3ef 8310 	mrs	r3, PRIMASK
 8003ab2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ab8:	2301      	movs	r3, #1
 8003aba:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003abe:	f383 8810 	msr	PRIMASK, r3
}
 8003ac2:	46c0      	nop			; (mov r8, r8)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689a      	ldr	r2, [r3, #8]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2101      	movs	r1, #1
 8003ad0:	438a      	bics	r2, r1
 8003ad2:	609a      	str	r2, [r3, #8]
 8003ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ad6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ada:	f383 8810 	msr	PRIMASK, r3
}
 8003ade:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2280      	movs	r2, #128	; 0x80
 8003ae4:	2120      	movs	r1, #32
 8003ae6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a34      	ldr	r2, [pc, #208]	; (8003bcc <UART_RxISR_8BIT+0x1bc>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d01f      	beq.n	8003b3e <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	2380      	movs	r3, #128	; 0x80
 8003b06:	041b      	lsls	r3, r3, #16
 8003b08:	4013      	ands	r3, r2
 8003b0a:	d018      	beq.n	8003b3e <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b0c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b10:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b12:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b14:	643b      	str	r3, [r7, #64]	; 0x40
 8003b16:	2301      	movs	r3, #1
 8003b18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	f383 8810 	msr	PRIMASK, r3
}
 8003b20:	46c0      	nop			; (mov r8, r8)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4928      	ldr	r1, [pc, #160]	; (8003bd0 <UART_RxISR_8BIT+0x1c0>)
 8003b2e:	400a      	ands	r2, r1
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b34:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	f383 8810 	msr	PRIMASK, r3
}
 8003b3c:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d12f      	bne.n	8003ba6 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b4c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b50:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b52:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b56:	2301      	movs	r3, #1
 8003b58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f383 8810 	msr	PRIMASK, r3
}
 8003b60:	46c0      	nop			; (mov r8, r8)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2110      	movs	r1, #16
 8003b6e:	438a      	bics	r2, r1
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f383 8810 	msr	PRIMASK, r3
}
 8003b7c:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	2210      	movs	r2, #16
 8003b86:	4013      	ands	r3, r2
 8003b88:	2b10      	cmp	r3, #16
 8003b8a:	d103      	bne.n	8003b94 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2210      	movs	r2, #16
 8003b92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2258      	movs	r2, #88	; 0x58
 8003b98:	5a9a      	ldrh	r2, [r3, r2]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	0011      	movs	r1, r2
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f7ff f970 	bl	8002e84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ba4:	e00c      	b.n	8003bc0 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	0018      	movs	r0, r3
 8003baa:	f7fc ff01 	bl	80009b0 <HAL_UART_RxCpltCallback>
}
 8003bae:	e007      	b.n	8003bc0 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	699a      	ldr	r2, [r3, #24]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2108      	movs	r1, #8
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	619a      	str	r2, [r3, #24]
}
 8003bc0:	46c0      	nop			; (mov r8, r8)
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	b014      	add	sp, #80	; 0x50
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	fffffedf 	.word	0xfffffedf
 8003bcc:	40004800 	.word	0x40004800
 8003bd0:	fbffffff 	.word	0xfbffffff

08003bd4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b094      	sub	sp, #80	; 0x50
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003bdc:	204e      	movs	r0, #78	; 0x4e
 8003bde:	183b      	adds	r3, r7, r0
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	215c      	movs	r1, #92	; 0x5c
 8003be4:	5a52      	ldrh	r2, [r2, r1]
 8003be6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2280      	movs	r2, #128	; 0x80
 8003bec:	589b      	ldr	r3, [r3, r2]
 8003bee:	2b22      	cmp	r3, #34	; 0x22
 8003bf0:	d000      	beq.n	8003bf4 <UART_RxISR_16BIT+0x20>
 8003bf2:	e0bf      	b.n	8003d74 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bfa:	214c      	movs	r1, #76	; 0x4c
 8003bfc:	187b      	adds	r3, r7, r1
 8003bfe:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c04:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8003c06:	187b      	adds	r3, r7, r1
 8003c08:	183a      	adds	r2, r7, r0
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	8812      	ldrh	r2, [r2, #0]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c14:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1a:	1c9a      	adds	r2, r3, #2
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	225a      	movs	r2, #90	; 0x5a
 8003c24:	5a9b      	ldrh	r3, [r3, r2]
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	b299      	uxth	r1, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	225a      	movs	r2, #90	; 0x5a
 8003c30:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	225a      	movs	r2, #90	; 0x5a
 8003c36:	5a9b      	ldrh	r3, [r3, r2]
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d000      	beq.n	8003c40 <UART_RxISR_16BIT+0x6c>
 8003c3e:	e0a1      	b.n	8003d84 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c40:	f3ef 8310 	mrs	r3, PRIMASK
 8003c44:	623b      	str	r3, [r7, #32]
  return(result);
 8003c46:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c48:	647b      	str	r3, [r7, #68]	; 0x44
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	f383 8810 	msr	PRIMASK, r3
}
 8003c54:	46c0      	nop			; (mov r8, r8)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	494a      	ldr	r1, [pc, #296]	; (8003d8c <UART_RxISR_16BIT+0x1b8>)
 8003c62:	400a      	ands	r2, r1
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c68:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6c:	f383 8810 	msr	PRIMASK, r3
}
 8003c70:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c72:	f3ef 8310 	mrs	r3, PRIMASK
 8003c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c7a:	643b      	str	r3, [r7, #64]	; 0x40
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c82:	f383 8810 	msr	PRIMASK, r3
}
 8003c86:	46c0      	nop			; (mov r8, r8)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2101      	movs	r1, #1
 8003c94:	438a      	bics	r2, r1
 8003c96:	609a      	str	r2, [r3, #8]
 8003c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c9a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c9e:	f383 8810 	msr	PRIMASK, r3
}
 8003ca2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2280      	movs	r2, #128	; 0x80
 8003ca8:	2120      	movs	r1, #32
 8003caa:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a34      	ldr	r2, [pc, #208]	; (8003d90 <UART_RxISR_16BIT+0x1bc>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d01f      	beq.n	8003d02 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	2380      	movs	r3, #128	; 0x80
 8003cca:	041b      	lsls	r3, r3, #16
 8003ccc:	4013      	ands	r3, r2
 8003cce:	d018      	beq.n	8003d02 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cd0:	f3ef 8310 	mrs	r3, PRIMASK
 8003cd4:	617b      	str	r3, [r7, #20]
  return(result);
 8003cd6:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cda:	2301      	movs	r3, #1
 8003cdc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	f383 8810 	msr	PRIMASK, r3
}
 8003ce4:	46c0      	nop			; (mov r8, r8)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4928      	ldr	r1, [pc, #160]	; (8003d94 <UART_RxISR_16BIT+0x1c0>)
 8003cf2:	400a      	ands	r2, r1
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	f383 8810 	msr	PRIMASK, r3
}
 8003d00:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d12f      	bne.n	8003d6a <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d10:	f3ef 8310 	mrs	r3, PRIMASK
 8003d14:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d16:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d18:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f383 8810 	msr	PRIMASK, r3
}
 8003d24:	46c0      	nop			; (mov r8, r8)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2110      	movs	r1, #16
 8003d32:	438a      	bics	r2, r1
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	f383 8810 	msr	PRIMASK, r3
}
 8003d40:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	2210      	movs	r2, #16
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	2b10      	cmp	r3, #16
 8003d4e:	d103      	bne.n	8003d58 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2210      	movs	r2, #16
 8003d56:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2258      	movs	r2, #88	; 0x58
 8003d5c:	5a9a      	ldrh	r2, [r3, r2]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	0011      	movs	r1, r2
 8003d62:	0018      	movs	r0, r3
 8003d64:	f7ff f88e 	bl	8002e84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d68:	e00c      	b.n	8003d84 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	f7fc fe1f 	bl	80009b0 <HAL_UART_RxCpltCallback>
}
 8003d72:	e007      	b.n	8003d84 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699a      	ldr	r2, [r3, #24]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2108      	movs	r1, #8
 8003d80:	430a      	orrs	r2, r1
 8003d82:	619a      	str	r2, [r3, #24]
}
 8003d84:	46c0      	nop			; (mov r8, r8)
 8003d86:	46bd      	mov	sp, r7
 8003d88:	b014      	add	sp, #80	; 0x50
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	fffffedf 	.word	0xfffffedf
 8003d90:	40004800 	.word	0x40004800
 8003d94:	fbffffff 	.word	0xfbffffff

08003d98 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003da0:	46c0      	nop			; (mov r8, r8)
 8003da2:	46bd      	mov	sp, r7
 8003da4:	b002      	add	sp, #8
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3308      	adds	r3, #8
 8003db4:	001a      	movs	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	4252      	negs	r2, r2
 8003dc0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	3308      	adds	r3, #8
 8003dc6:	001a      	movs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3308      	adds	r3, #8
 8003dd0:	001a      	movs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ddc:	46c0      	nop			; (mov r8, r8)
 8003dde:	46bd      	mov	sp, r7
 8003de0:	b002      	add	sp, #8
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003df2:	46c0      	nop			; (mov r8, r8)
 8003df4:	46bd      	mov	sp, r7
 8003df6:	b002      	add	sp, #8
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b084      	sub	sp, #16
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
 8003e02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	601a      	str	r2, [r3, #0]
}
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	b004      	add	sp, #16
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b084      	sub	sp, #16
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
 8003e46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	3301      	adds	r3, #1
 8003e52:	d103      	bne.n	8003e5c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	e00c      	b.n	8003e76 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3308      	adds	r3, #8
 8003e60:	60fb      	str	r3, [r7, #12]
 8003e62:	e002      	b.n	8003e6a <vListInsert+0x2c>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d2f6      	bcs.n	8003e64 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	1c5a      	adds	r2, r3, #1
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	601a      	str	r2, [r3, #0]
}
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	b004      	add	sp, #16
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b084      	sub	sp, #16
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6892      	ldr	r2, [r2, #8]
 8003ec0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6852      	ldr	r2, [r2, #4]
 8003eca:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d103      	bne.n	8003ede <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	1e5a      	subs	r2, r3, #1
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
}
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	b004      	add	sp, #16
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b084      	sub	sp, #16
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <xQueueGenericReset+0x18>
 8003f0e:	b672      	cpsid	i
 8003f10:	e7fe      	b.n	8003f10 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8003f12:	f001 fb6d 	bl	80055f0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	434b      	muls	r3, r1
 8003f24:	18d2      	adds	r2, r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f40:	1e59      	subs	r1, r3, #1
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	434b      	muls	r3, r1
 8003f48:	18d2      	adds	r2, r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2244      	movs	r2, #68	; 0x44
 8003f52:	21ff      	movs	r1, #255	; 0xff
 8003f54:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2245      	movs	r2, #69	; 0x45
 8003f5a:	21ff      	movs	r1, #255	; 0xff
 8003f5c:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10d      	bne.n	8003f80 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d013      	beq.n	8003f94 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	3310      	adds	r3, #16
 8003f70:	0018      	movs	r0, r3
 8003f72:	f000 ff5b 	bl	8004e2c <xTaskRemoveFromEventList>
 8003f76:	1e03      	subs	r3, r0, #0
 8003f78:	d00c      	beq.n	8003f94 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003f7a:	f001 fb29 	bl	80055d0 <vPortYield>
 8003f7e:	e009      	b.n	8003f94 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	3310      	adds	r3, #16
 8003f84:	0018      	movs	r0, r3
 8003f86:	f7ff ff0f 	bl	8003da8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	3324      	adds	r3, #36	; 0x24
 8003f8e:	0018      	movs	r0, r3
 8003f90:	f7ff ff0a 	bl	8003da8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f94:	f001 fb3e 	bl	8005614 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f98:	2301      	movs	r3, #1
}
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	b004      	add	sp, #16
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003fa2:	b590      	push	{r4, r7, lr}
 8003fa4:	b08b      	sub	sp, #44	; 0x2c
 8003fa6:	af02      	add	r7, sp, #8
 8003fa8:	60f8      	str	r0, [r7, #12]
 8003faa:	60b9      	str	r1, [r7, #8]
 8003fac:	1dfb      	adds	r3, r7, #7
 8003fae:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <xQueueGenericCreate+0x18>
 8003fb6:	b672      	cpsid	i
 8003fb8:	e7fe      	b.n	8003fb8 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d102      	bne.n	8003fc6 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	61fb      	str	r3, [r7, #28]
 8003fc4:	e003      	b.n	8003fce <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	4353      	muls	r3, r2
 8003fcc:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	3348      	adds	r3, #72	; 0x48
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	f001 fba4 	bl	8005720 <pvPortMalloc>
 8003fd8:	0003      	movs	r3, r0
 8003fda:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d012      	beq.n	8004008 <xQueueGenericCreate+0x66>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	3348      	adds	r3, #72	; 0x48
 8003fea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	2246      	movs	r2, #70	; 0x46
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ff4:	1dfb      	adds	r3, r7, #7
 8003ff6:	781c      	ldrb	r4, [r3, #0]
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	68b9      	ldr	r1, [r7, #8]
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	0023      	movs	r3, r4
 8004004:	f000 f805 	bl	8004012 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004008:	69bb      	ldr	r3, [r7, #24]
	}
 800400a:	0018      	movs	r0, r3
 800400c:	46bd      	mov	sp, r7
 800400e:	b009      	add	sp, #36	; 0x24
 8004010:	bd90      	pop	{r4, r7, pc}

08004012 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b084      	sub	sp, #16
 8004016:	af00      	add	r7, sp, #0
 8004018:	60f8      	str	r0, [r7, #12]
 800401a:	60b9      	str	r1, [r7, #8]
 800401c:	607a      	str	r2, [r7, #4]
 800401e:	001a      	movs	r2, r3
 8004020:	1cfb      	adds	r3, r7, #3
 8004022:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d103      	bne.n	8004032 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	e002      	b.n	8004038 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	2101      	movs	r1, #1
 8004048:	0018      	movs	r0, r3
 800404a:	f7ff ff56 	bl	8003efa <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800404e:	46c0      	nop			; (mov r8, r8)
 8004050:	46bd      	mov	sp, r7
 8004052:	b004      	add	sp, #16
 8004054:	bd80      	pop	{r7, pc}

08004056 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004056:	b580      	push	{r7, lr}
 8004058:	b084      	sub	sp, #16
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
 800405e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <xQueueCreateCountingSemaphore+0x14>
 8004066:	b672      	cpsid	i
 8004068:	e7fe      	b.n	8004068 <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	429a      	cmp	r2, r3
 8004070:	d901      	bls.n	8004076 <xQueueCreateCountingSemaphore+0x20>
 8004072:	b672      	cpsid	i
 8004074:	e7fe      	b.n	8004074 <xQueueCreateCountingSemaphore+0x1e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2202      	movs	r2, #2
 800407a:	2100      	movs	r1, #0
 800407c:	0018      	movs	r0, r3
 800407e:	f7ff ff90 	bl	8003fa2 <xQueueGenericCreate>
 8004082:	0003      	movs	r3, r0
 8004084:	60fb      	str	r3, [r7, #12]

		if( xHandle != NULL )
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d002      	beq.n	8004092 <xQueueCreateCountingSemaphore+0x3c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004092:	68fb      	ldr	r3, [r7, #12]
	}
 8004094:	0018      	movs	r0, r3
 8004096:	46bd      	mov	sp, r7
 8004098:	b004      	add	sp, #16
 800409a:	bd80      	pop	{r7, pc}

0800409c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b08a      	sub	sp, #40	; 0x28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
 80040a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80040aa:	2300      	movs	r3, #0
 80040ac:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <xQueueGenericSend+0x20>
 80040b8:	b672      	cpsid	i
 80040ba:	e7fe      	b.n	80040ba <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d103      	bne.n	80040ca <xQueueGenericSend+0x2e>
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <xQueueGenericSend+0x32>
 80040ca:	2301      	movs	r3, #1
 80040cc:	e000      	b.n	80040d0 <xQueueGenericSend+0x34>
 80040ce:	2300      	movs	r3, #0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <xQueueGenericSend+0x3c>
 80040d4:	b672      	cpsid	i
 80040d6:	e7fe      	b.n	80040d6 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d103      	bne.n	80040e6 <xQueueGenericSend+0x4a>
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d101      	bne.n	80040ea <xQueueGenericSend+0x4e>
 80040e6:	2301      	movs	r3, #1
 80040e8:	e000      	b.n	80040ec <xQueueGenericSend+0x50>
 80040ea:	2300      	movs	r3, #0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <xQueueGenericSend+0x58>
 80040f0:	b672      	cpsid	i
 80040f2:	e7fe      	b.n	80040f2 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040f4:	f001 f82c 	bl	8005150 <xTaskGetSchedulerState>
 80040f8:	1e03      	subs	r3, r0, #0
 80040fa:	d102      	bne.n	8004102 <xQueueGenericSend+0x66>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <xQueueGenericSend+0x6a>
 8004102:	2301      	movs	r3, #1
 8004104:	e000      	b.n	8004108 <xQueueGenericSend+0x6c>
 8004106:	2300      	movs	r3, #0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <xQueueGenericSend+0x74>
 800410c:	b672      	cpsid	i
 800410e:	e7fe      	b.n	800410e <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004110:	f001 fa6e 	bl	80055f0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004118:	6a3b      	ldr	r3, [r7, #32]
 800411a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411c:	429a      	cmp	r2, r3
 800411e:	d302      	bcc.n	8004126 <xQueueGenericSend+0x8a>
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	2b02      	cmp	r3, #2
 8004124:	d11e      	bne.n	8004164 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	68b9      	ldr	r1, [r7, #8]
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	0018      	movs	r0, r3
 800412e:	f000 f9e3 	bl	80044f8 <prvCopyDataToQueue>
 8004132:	0003      	movs	r3, r0
 8004134:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004136:	6a3b      	ldr	r3, [r7, #32]
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	2b00      	cmp	r3, #0
 800413c:	d009      	beq.n	8004152 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	3324      	adds	r3, #36	; 0x24
 8004142:	0018      	movs	r0, r3
 8004144:	f000 fe72 	bl	8004e2c <xTaskRemoveFromEventList>
 8004148:	1e03      	subs	r3, r0, #0
 800414a:	d007      	beq.n	800415c <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800414c:	f001 fa40 	bl	80055d0 <vPortYield>
 8004150:	e004      	b.n	800415c <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004158:	f001 fa3a 	bl	80055d0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800415c:	f001 fa5a 	bl	8005614 <vPortExitCritical>
				return pdPASS;
 8004160:	2301      	movs	r3, #1
 8004162:	e05b      	b.n	800421c <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d103      	bne.n	8004172 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800416a:	f001 fa53 	bl	8005614 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800416e:	2300      	movs	r3, #0
 8004170:	e054      	b.n	800421c <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	2b00      	cmp	r3, #0
 8004176:	d106      	bne.n	8004186 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004178:	2314      	movs	r3, #20
 800417a:	18fb      	adds	r3, r7, r3
 800417c:	0018      	movs	r0, r3
 800417e:	f000 feb1 	bl	8004ee4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004182:	2301      	movs	r3, #1
 8004184:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004186:	f001 fa45 	bl	8005614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800418a:	f000 fc97 	bl	8004abc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800418e:	f001 fa2f 	bl	80055f0 <vPortEnterCritical>
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	2244      	movs	r2, #68	; 0x44
 8004196:	5c9b      	ldrb	r3, [r3, r2]
 8004198:	b25b      	sxtb	r3, r3
 800419a:	3301      	adds	r3, #1
 800419c:	d103      	bne.n	80041a6 <xQueueGenericSend+0x10a>
 800419e:	6a3b      	ldr	r3, [r7, #32]
 80041a0:	2244      	movs	r2, #68	; 0x44
 80041a2:	2100      	movs	r1, #0
 80041a4:	5499      	strb	r1, [r3, r2]
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	2245      	movs	r2, #69	; 0x45
 80041aa:	5c9b      	ldrb	r3, [r3, r2]
 80041ac:	b25b      	sxtb	r3, r3
 80041ae:	3301      	adds	r3, #1
 80041b0:	d103      	bne.n	80041ba <xQueueGenericSend+0x11e>
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	2245      	movs	r2, #69	; 0x45
 80041b6:	2100      	movs	r1, #0
 80041b8:	5499      	strb	r1, [r3, r2]
 80041ba:	f001 fa2b 	bl	8005614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041be:	1d3a      	adds	r2, r7, #4
 80041c0:	2314      	movs	r3, #20
 80041c2:	18fb      	adds	r3, r7, r3
 80041c4:	0011      	movs	r1, r2
 80041c6:	0018      	movs	r0, r3
 80041c8:	f000 fea0 	bl	8004f0c <xTaskCheckForTimeOut>
 80041cc:	1e03      	subs	r3, r0, #0
 80041ce:	d11e      	bne.n	800420e <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80041d0:	6a3b      	ldr	r3, [r7, #32]
 80041d2:	0018      	movs	r0, r3
 80041d4:	f000 fa6f 	bl	80046b6 <prvIsQueueFull>
 80041d8:	1e03      	subs	r3, r0, #0
 80041da:	d011      	beq.n	8004200 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80041dc:	6a3b      	ldr	r3, [r7, #32]
 80041de:	3310      	adds	r3, #16
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	0011      	movs	r1, r2
 80041e4:	0018      	movs	r0, r3
 80041e6:	f000 fe03 	bl	8004df0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	0018      	movs	r0, r3
 80041ee:	f000 f9ee 	bl	80045ce <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80041f2:	f000 fc6f 	bl	8004ad4 <xTaskResumeAll>
 80041f6:	1e03      	subs	r3, r0, #0
 80041f8:	d18a      	bne.n	8004110 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 80041fa:	f001 f9e9 	bl	80055d0 <vPortYield>
 80041fe:	e787      	b.n	8004110 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	0018      	movs	r0, r3
 8004204:	f000 f9e3 	bl	80045ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004208:	f000 fc64 	bl	8004ad4 <xTaskResumeAll>
 800420c:	e780      	b.n	8004110 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800420e:	6a3b      	ldr	r3, [r7, #32]
 8004210:	0018      	movs	r0, r3
 8004212:	f000 f9dc 	bl	80045ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004216:	f000 fc5d 	bl	8004ad4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800421a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800421c:	0018      	movs	r0, r3
 800421e:	46bd      	mov	sp, r7
 8004220:	b00a      	add	sp, #40	; 0x28
 8004222:	bd80      	pop	{r7, pc}

08004224 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b088      	sub	sp, #32
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <xQueueGiveFromISR+0x18>
 8004238:	b672      	cpsid	i
 800423a:	e7fe      	b.n	800423a <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <xQueueGiveFromISR+0x24>
 8004244:	b672      	cpsid	i
 8004246:	e7fe      	b.n	8004246 <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d103      	bne.n	8004258 <xQueueGiveFromISR+0x34>
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d101      	bne.n	800425c <xQueueGiveFromISR+0x38>
 8004258:	2301      	movs	r3, #1
 800425a:	e000      	b.n	800425e <xQueueGiveFromISR+0x3a>
 800425c:	2300      	movs	r3, #0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <xQueueGiveFromISR+0x42>
 8004262:	b672      	cpsid	i
 8004264:	e7fe      	b.n	8004264 <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004266:	f001 f9ed 	bl	8005644 <ulSetInterruptMaskFromISR>
 800426a:	0003      	movs	r3, r0
 800426c:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004272:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	429a      	cmp	r2, r3
 800427c:	d22c      	bcs.n	80042d8 <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800427e:	200f      	movs	r0, #15
 8004280:	183b      	adds	r3, r7, r0
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	2145      	movs	r1, #69	; 0x45
 8004286:	5c52      	ldrb	r2, [r2, r1]
 8004288:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1c5a      	adds	r2, r3, #1
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004292:	183b      	adds	r3, r7, r0
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	b25b      	sxtb	r3, r3
 8004298:	3301      	adds	r3, #1
 800429a:	d111      	bne.n	80042c0 <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d016      	beq.n	80042d2 <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	3324      	adds	r3, #36	; 0x24
 80042a8:	0018      	movs	r0, r3
 80042aa:	f000 fdbf 	bl	8004e2c <xTaskRemoveFromEventList>
 80042ae:	1e03      	subs	r3, r0, #0
 80042b0:	d00f      	beq.n	80042d2 <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00c      	beq.n	80042d2 <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	2201      	movs	r2, #1
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	e008      	b.n	80042d2 <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80042c0:	230f      	movs	r3, #15
 80042c2:	18fb      	adds	r3, r7, r3
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	3301      	adds	r3, #1
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	b259      	sxtb	r1, r3
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	2245      	movs	r2, #69	; 0x45
 80042d0:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80042d2:	2301      	movs	r3, #1
 80042d4:	61fb      	str	r3, [r7, #28]
 80042d6:	e001      	b.n	80042dc <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80042d8:	2300      	movs	r3, #0
 80042da:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	0018      	movs	r0, r3
 80042e0:	f001 f9b6 	bl	8005650 <vClearInterruptMaskFromISR>

	return xReturn;
 80042e4:	69fb      	ldr	r3, [r7, #28]
}
 80042e6:	0018      	movs	r0, r3
 80042e8:	46bd      	mov	sp, r7
 80042ea:	b008      	add	sp, #32
 80042ec:	bd80      	pop	{r7, pc}

080042ee <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b08a      	sub	sp, #40	; 0x28
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80042f8:	2300      	movs	r3, #0
 80042fa:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004300:	2300      	movs	r3, #0
 8004302:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <xQueueSemaphoreTake+0x20>
 800430a:	b672      	cpsid	i
 800430c:	e7fe      	b.n	800430c <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <xQueueSemaphoreTake+0x2c>
 8004316:	b672      	cpsid	i
 8004318:	e7fe      	b.n	8004318 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800431a:	f000 ff19 	bl	8005150 <xTaskGetSchedulerState>
 800431e:	1e03      	subs	r3, r0, #0
 8004320:	d102      	bne.n	8004328 <xQueueSemaphoreTake+0x3a>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <xQueueSemaphoreTake+0x3e>
 8004328:	2301      	movs	r3, #1
 800432a:	e000      	b.n	800432e <xQueueSemaphoreTake+0x40>
 800432c:	2300      	movs	r3, #0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <xQueueSemaphoreTake+0x48>
 8004332:	b672      	cpsid	i
 8004334:	e7fe      	b.n	8004334 <xQueueSemaphoreTake+0x46>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004336:	f001 f95b 	bl	80055f0 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433e:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d01d      	beq.n	8004382 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	1e5a      	subs	r2, r3, #1
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d104      	bne.n	8004360 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004356:	f001 f84b 	bl	80053f0 <pvTaskIncrementMutexHeldCount>
 800435a:	0002      	movs	r2, r0
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d008      	beq.n	800437a <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	3310      	adds	r3, #16
 800436c:	0018      	movs	r0, r3
 800436e:	f000 fd5d 	bl	8004e2c <xTaskRemoveFromEventList>
 8004372:	1e03      	subs	r3, r0, #0
 8004374:	d001      	beq.n	800437a <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004376:	f001 f92b 	bl	80055d0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800437a:	f001 f94b 	bl	8005614 <vPortExitCritical>
				return pdPASS;
 800437e:	2301      	movs	r3, #1
 8004380:	e08b      	b.n	800449a <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d108      	bne.n	800439a <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <xQueueSemaphoreTake+0xa4>
 800438e:	b672      	cpsid	i
 8004390:	e7fe      	b.n	8004390 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004392:	f001 f93f 	bl	8005614 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004396:	2300      	movs	r3, #0
 8004398:	e07f      	b.n	800449a <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	2b00      	cmp	r3, #0
 800439e:	d106      	bne.n	80043ae <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043a0:	230c      	movs	r3, #12
 80043a2:	18fb      	adds	r3, r7, r3
 80043a4:	0018      	movs	r0, r3
 80043a6:	f000 fd9d 	bl	8004ee4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043aa:	2301      	movs	r3, #1
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043ae:	f001 f931 	bl	8005614 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043b2:	f000 fb83 	bl	8004abc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043b6:	f001 f91b 	bl	80055f0 <vPortEnterCritical>
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	2244      	movs	r2, #68	; 0x44
 80043be:	5c9b      	ldrb	r3, [r3, r2]
 80043c0:	b25b      	sxtb	r3, r3
 80043c2:	3301      	adds	r3, #1
 80043c4:	d103      	bne.n	80043ce <xQueueSemaphoreTake+0xe0>
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	2244      	movs	r2, #68	; 0x44
 80043ca:	2100      	movs	r1, #0
 80043cc:	5499      	strb	r1, [r3, r2]
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	2245      	movs	r2, #69	; 0x45
 80043d2:	5c9b      	ldrb	r3, [r3, r2]
 80043d4:	b25b      	sxtb	r3, r3
 80043d6:	3301      	adds	r3, #1
 80043d8:	d103      	bne.n	80043e2 <xQueueSemaphoreTake+0xf4>
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	2245      	movs	r2, #69	; 0x45
 80043de:	2100      	movs	r1, #0
 80043e0:	5499      	strb	r1, [r3, r2]
 80043e2:	f001 f917 	bl	8005614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043e6:	003a      	movs	r2, r7
 80043e8:	230c      	movs	r3, #12
 80043ea:	18fb      	adds	r3, r7, r3
 80043ec:	0011      	movs	r1, r2
 80043ee:	0018      	movs	r0, r3
 80043f0:	f000 fd8c 	bl	8004f0c <xTaskCheckForTimeOut>
 80043f4:	1e03      	subs	r3, r0, #0
 80043f6:	d12e      	bne.n	8004456 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	0018      	movs	r0, r3
 80043fc:	f000 f945 	bl	800468a <prvIsQueueEmpty>
 8004400:	1e03      	subs	r3, r0, #0
 8004402:	d021      	beq.n	8004448 <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10a      	bne.n	8004422 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 800440c:	f001 f8f0 	bl	80055f0 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	0018      	movs	r0, r3
 8004416:	f000 feb7 	bl	8005188 <xTaskPriorityInherit>
 800441a:	0003      	movs	r3, r0
 800441c:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 800441e:	f001 f8f9 	bl	8005614 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	3324      	adds	r3, #36	; 0x24
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	0011      	movs	r1, r2
 800442a:	0018      	movs	r0, r3
 800442c:	f000 fce0 	bl	8004df0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	0018      	movs	r0, r3
 8004434:	f000 f8cb 	bl	80045ce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004438:	f000 fb4c 	bl	8004ad4 <xTaskResumeAll>
 800443c:	1e03      	subs	r3, r0, #0
 800443e:	d000      	beq.n	8004442 <xQueueSemaphoreTake+0x154>
 8004440:	e779      	b.n	8004336 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 8004442:	f001 f8c5 	bl	80055d0 <vPortYield>
 8004446:	e776      	b.n	8004336 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	0018      	movs	r0, r3
 800444c:	f000 f8bf 	bl	80045ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004450:	f000 fb40 	bl	8004ad4 <xTaskResumeAll>
 8004454:	e76f      	b.n	8004336 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	0018      	movs	r0, r3
 800445a:	f000 f8b8 	bl	80045ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800445e:	f000 fb39 	bl	8004ad4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	0018      	movs	r0, r3
 8004466:	f000 f910 	bl	800468a <prvIsQueueEmpty>
 800446a:	1e03      	subs	r3, r0, #0
 800446c:	d100      	bne.n	8004470 <xQueueSemaphoreTake+0x182>
 800446e:	e762      	b.n	8004336 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d010      	beq.n	8004498 <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 8004476:	f001 f8bb 	bl	80055f0 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	0018      	movs	r0, r3
 800447e:	f000 f825 	bl	80044cc <prvGetDisinheritPriorityAfterTimeout>
 8004482:	0003      	movs	r3, r0
 8004484:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	0011      	movs	r1, r2
 800448e:	0018      	movs	r0, r3
 8004490:	f000 ff3e 	bl	8005310 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004494:	f001 f8be 	bl	8005614 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004498:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800449a:	0018      	movs	r0, r3
 800449c:	46bd      	mov	sp, r7
 800449e:	b00a      	add	sp, #40	; 0x28
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b084      	sub	sp, #16
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d101      	bne.n	80044b4 <uxQueueMessagesWaiting+0x12>
 80044b0:	b672      	cpsid	i
 80044b2:	e7fe      	b.n	80044b2 <uxQueueMessagesWaiting+0x10>

	taskENTER_CRITICAL();
 80044b4:	f001 f89c 	bl	80055f0 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044bc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80044be:	f001 f8a9 	bl	8005614 <vPortExitCritical>

	return uxReturn;
 80044c2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80044c4:	0018      	movs	r0, r3
 80044c6:	46bd      	mov	sp, r7
 80044c8:	b004      	add	sp, #16
 80044ca:	bd80      	pop	{r7, pc}

080044cc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d006      	beq.n	80044ea <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2207      	movs	r2, #7
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	e001      	b.n	80044ee <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80044ea:	2300      	movs	r3, #0
 80044ec:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80044ee:	68fb      	ldr	r3, [r7, #12]
	}
 80044f0:	0018      	movs	r0, r3
 80044f2:	46bd      	mov	sp, r7
 80044f4:	b004      	add	sp, #16
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004504:	2300      	movs	r3, #0
 8004506:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10e      	bne.n	8004534 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d14e      	bne.n	80045bc <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	0018      	movs	r0, r3
 8004524:	f000 fe98 	bl	8005258 <xTaskPriorityDisinherit>
 8004528:	0003      	movs	r3, r0
 800452a:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	609a      	str	r2, [r3, #8]
 8004532:	e043      	b.n	80045bc <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d119      	bne.n	800456e <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6858      	ldr	r0, [r3, #4]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	0019      	movs	r1, r3
 8004546:	f001 fb1b 	bl	8005b80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	18d2      	adds	r2, r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	429a      	cmp	r2, r3
 8004562:	d32b      	bcc.n	80045bc <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	605a      	str	r2, [r3, #4]
 800456c:	e026      	b.n	80045bc <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	68d8      	ldr	r0, [r3, #12]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	0019      	movs	r1, r3
 800457a:	f001 fb01 	bl	8005b80 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	68da      	ldr	r2, [r3, #12]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004586:	425b      	negs	r3, r3
 8004588:	18d2      	adds	r2, r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	429a      	cmp	r2, r3
 8004598:	d207      	bcs.n	80045aa <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	689a      	ldr	r2, [r3, #8]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	425b      	negs	r3, r3
 80045a4:	18d2      	adds	r2, r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d105      	bne.n	80045bc <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d002      	beq.n	80045bc <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	3b01      	subs	r3, #1
 80045ba:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1c5a      	adds	r2, r3, #1
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80045c4:	697b      	ldr	r3, [r7, #20]
}
 80045c6:	0018      	movs	r0, r3
 80045c8:	46bd      	mov	sp, r7
 80045ca:	b006      	add	sp, #24
 80045cc:	bd80      	pop	{r7, pc}

080045ce <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b084      	sub	sp, #16
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80045d6:	f001 f80b 	bl	80055f0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80045da:	230f      	movs	r3, #15
 80045dc:	18fb      	adds	r3, r7, r3
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	2145      	movs	r1, #69	; 0x45
 80045e2:	5c52      	ldrb	r2, [r2, r1]
 80045e4:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80045e6:	e013      	b.n	8004610 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d016      	beq.n	800461e <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3324      	adds	r3, #36	; 0x24
 80045f4:	0018      	movs	r0, r3
 80045f6:	f000 fc19 	bl	8004e2c <xTaskRemoveFromEventList>
 80045fa:	1e03      	subs	r3, r0, #0
 80045fc:	d001      	beq.n	8004602 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80045fe:	f000 fcd5 	bl	8004fac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004602:	210f      	movs	r1, #15
 8004604:	187b      	adds	r3, r7, r1
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	3b01      	subs	r3, #1
 800460a:	b2da      	uxtb	r2, r3
 800460c:	187b      	adds	r3, r7, r1
 800460e:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004610:	230f      	movs	r3, #15
 8004612:	18fb      	adds	r3, r7, r3
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	b25b      	sxtb	r3, r3
 8004618:	2b00      	cmp	r3, #0
 800461a:	dce5      	bgt.n	80045e8 <prvUnlockQueue+0x1a>
 800461c:	e000      	b.n	8004620 <prvUnlockQueue+0x52>
					break;
 800461e:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2245      	movs	r2, #69	; 0x45
 8004624:	21ff      	movs	r1, #255	; 0xff
 8004626:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8004628:	f000 fff4 	bl	8005614 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800462c:	f000 ffe0 	bl	80055f0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004630:	230e      	movs	r3, #14
 8004632:	18fb      	adds	r3, r7, r3
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	2144      	movs	r1, #68	; 0x44
 8004638:	5c52      	ldrb	r2, [r2, r1]
 800463a:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800463c:	e013      	b.n	8004666 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d016      	beq.n	8004674 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	3310      	adds	r3, #16
 800464a:	0018      	movs	r0, r3
 800464c:	f000 fbee 	bl	8004e2c <xTaskRemoveFromEventList>
 8004650:	1e03      	subs	r3, r0, #0
 8004652:	d001      	beq.n	8004658 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8004654:	f000 fcaa 	bl	8004fac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004658:	210e      	movs	r1, #14
 800465a:	187b      	adds	r3, r7, r1
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	3b01      	subs	r3, #1
 8004660:	b2da      	uxtb	r2, r3
 8004662:	187b      	adds	r3, r7, r1
 8004664:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004666:	230e      	movs	r3, #14
 8004668:	18fb      	adds	r3, r7, r3
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	b25b      	sxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	dce5      	bgt.n	800463e <prvUnlockQueue+0x70>
 8004672:	e000      	b.n	8004676 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8004674:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2244      	movs	r2, #68	; 0x44
 800467a:	21ff      	movs	r1, #255	; 0xff
 800467c:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800467e:	f000 ffc9 	bl	8005614 <vPortExitCritical>
}
 8004682:	46c0      	nop			; (mov r8, r8)
 8004684:	46bd      	mov	sp, r7
 8004686:	b004      	add	sp, #16
 8004688:	bd80      	pop	{r7, pc}

0800468a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b084      	sub	sp, #16
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004692:	f000 ffad 	bl	80055f0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469a:	2b00      	cmp	r3, #0
 800469c:	d102      	bne.n	80046a4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800469e:	2301      	movs	r3, #1
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	e001      	b.n	80046a8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80046a4:	2300      	movs	r3, #0
 80046a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046a8:	f000 ffb4 	bl	8005614 <vPortExitCritical>

	return xReturn;
 80046ac:	68fb      	ldr	r3, [r7, #12]
}
 80046ae:	0018      	movs	r0, r3
 80046b0:	46bd      	mov	sp, r7
 80046b2:	b004      	add	sp, #16
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b084      	sub	sp, #16
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80046be:	f000 ff97 	bl	80055f0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d102      	bne.n	80046d4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80046ce:	2301      	movs	r3, #1
 80046d0:	60fb      	str	r3, [r7, #12]
 80046d2:	e001      	b.n	80046d8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80046d4:	2300      	movs	r3, #0
 80046d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046d8:	f000 ff9c 	bl	8005614 <vPortExitCritical>

	return xReturn;
 80046dc:	68fb      	ldr	r3, [r7, #12]
}
 80046de:	0018      	movs	r0, r3
 80046e0:	46bd      	mov	sp, r7
 80046e2:	b004      	add	sp, #16
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80046e6:	b590      	push	{r4, r7, lr}
 80046e8:	b08d      	sub	sp, #52	; 0x34
 80046ea:	af04      	add	r7, sp, #16
 80046ec:	60f8      	str	r0, [r7, #12]
 80046ee:	60b9      	str	r1, [r7, #8]
 80046f0:	607a      	str	r2, [r7, #4]
 80046f2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80046f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <xTaskCreateStatic+0x18>
 80046fa:	b672      	cpsid	i
 80046fc:	e7fe      	b.n	80046fc <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80046fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <xTaskCreateStatic+0x22>
 8004704:	b672      	cpsid	i
 8004706:	e7fe      	b.n	8004706 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004708:	2354      	movs	r3, #84	; 0x54
 800470a:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	2b54      	cmp	r3, #84	; 0x54
 8004710:	d001      	beq.n	8004716 <xTaskCreateStatic+0x30>
 8004712:	b672      	cpsid	i
 8004714:	e7fe      	b.n	8004714 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004716:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471a:	2b00      	cmp	r3, #0
 800471c:	d020      	beq.n	8004760 <xTaskCreateStatic+0x7a>
 800471e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004720:	2b00      	cmp	r3, #0
 8004722:	d01d      	beq.n	8004760 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004726:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800472c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	2251      	movs	r2, #81	; 0x51
 8004732:	2102      	movs	r1, #2
 8004734:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004736:	683c      	ldr	r4, [r7, #0]
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	68b9      	ldr	r1, [r7, #8]
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	2300      	movs	r3, #0
 8004740:	9303      	str	r3, [sp, #12]
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	9302      	str	r3, [sp, #8]
 8004746:	2318      	movs	r3, #24
 8004748:	18fb      	adds	r3, r7, r3
 800474a:	9301      	str	r3, [sp, #4]
 800474c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	0023      	movs	r3, r4
 8004752:	f000 f859 	bl	8004808 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	0018      	movs	r0, r3
 800475a:	f000 f8d7 	bl	800490c <prvAddNewTaskToReadyList>
 800475e:	e001      	b.n	8004764 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 8004760:	2300      	movs	r3, #0
 8004762:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004764:	69bb      	ldr	r3, [r7, #24]
	}
 8004766:	0018      	movs	r0, r3
 8004768:	46bd      	mov	sp, r7
 800476a:	b009      	add	sp, #36	; 0x24
 800476c:	bd90      	pop	{r4, r7, pc}

0800476e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800476e:	b590      	push	{r4, r7, lr}
 8004770:	b08d      	sub	sp, #52	; 0x34
 8004772:	af04      	add	r7, sp, #16
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	603b      	str	r3, [r7, #0]
 800477a:	1dbb      	adds	r3, r7, #6
 800477c:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800477e:	1dbb      	adds	r3, r7, #6
 8004780:	881b      	ldrh	r3, [r3, #0]
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	0018      	movs	r0, r3
 8004786:	f000 ffcb 	bl	8005720 <pvPortMalloc>
 800478a:	0003      	movs	r3, r0
 800478c:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d010      	beq.n	80047b6 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004794:	2054      	movs	r0, #84	; 0x54
 8004796:	f000 ffc3 	bl	8005720 <pvPortMalloc>
 800479a:	0003      	movs	r3, r0
 800479c:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d003      	beq.n	80047ac <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	631a      	str	r2, [r3, #48]	; 0x30
 80047aa:	e006      	b.n	80047ba <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	0018      	movs	r0, r3
 80047b0:	f001 f85c 	bl	800586c <vPortFree>
 80047b4:	e001      	b.n	80047ba <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80047b6:	2300      	movs	r3, #0
 80047b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d01a      	beq.n	80047f6 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	2251      	movs	r2, #81	; 0x51
 80047c4:	2100      	movs	r1, #0
 80047c6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80047c8:	1dbb      	adds	r3, r7, #6
 80047ca:	881a      	ldrh	r2, [r3, #0]
 80047cc:	683c      	ldr	r4, [r7, #0]
 80047ce:	68b9      	ldr	r1, [r7, #8]
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	2300      	movs	r3, #0
 80047d4:	9303      	str	r3, [sp, #12]
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	9302      	str	r3, [sp, #8]
 80047da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047dc:	9301      	str	r3, [sp, #4]
 80047de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	0023      	movs	r3, r4
 80047e4:	f000 f810 	bl	8004808 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	0018      	movs	r0, r3
 80047ec:	f000 f88e 	bl	800490c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80047f0:	2301      	movs	r3, #1
 80047f2:	61bb      	str	r3, [r7, #24]
 80047f4:	e002      	b.n	80047fc <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80047f6:	2301      	movs	r3, #1
 80047f8:	425b      	negs	r3, r3
 80047fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80047fc:	69bb      	ldr	r3, [r7, #24]
	}
 80047fe:	0018      	movs	r0, r3
 8004800:	46bd      	mov	sp, r7
 8004802:	b009      	add	sp, #36	; 0x24
 8004804:	bd90      	pop	{r4, r7, pc}
	...

08004808 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
 8004814:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	493a      	ldr	r1, [pc, #232]	; (8004908 <prvInitialiseNewTask+0x100>)
 800481e:	468c      	mov	ip, r1
 8004820:	4463      	add	r3, ip
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	18d3      	adds	r3, r2, r3
 8004826:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	2207      	movs	r2, #7
 800482c:	4393      	bics	r3, r2
 800482e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	2207      	movs	r2, #7
 8004834:	4013      	ands	r3, r2
 8004836:	d001      	beq.n	800483c <prvInitialiseNewTask+0x34>
 8004838:	b672      	cpsid	i
 800483a:	e7fe      	b.n	800483a <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d020      	beq.n	8004884 <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004842:	2300      	movs	r3, #0
 8004844:	617b      	str	r3, [r7, #20]
 8004846:	e013      	b.n	8004870 <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	18d3      	adds	r3, r2, r3
 800484e:	7818      	ldrb	r0, [r3, #0]
 8004850:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004852:	2134      	movs	r1, #52	; 0x34
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	18d3      	adds	r3, r2, r3
 8004858:	185b      	adds	r3, r3, r1
 800485a:	1c02      	adds	r2, r0, #0
 800485c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	18d3      	adds	r3, r2, r3
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d006      	beq.n	8004878 <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	3301      	adds	r3, #1
 800486e:	617b      	str	r3, [r7, #20]
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	2b0f      	cmp	r3, #15
 8004874:	d9e8      	bls.n	8004848 <prvInitialiseNewTask+0x40>
 8004876:	e000      	b.n	800487a <prvInitialiseNewTask+0x72>
			{
				break;
 8004878:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800487a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487c:	2243      	movs	r2, #67	; 0x43
 800487e:	2100      	movs	r1, #0
 8004880:	5499      	strb	r1, [r3, r2]
 8004882:	e003      	b.n	800488c <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004886:	2234      	movs	r2, #52	; 0x34
 8004888:	2100      	movs	r1, #0
 800488a:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	2b06      	cmp	r3, #6
 8004890:	d901      	bls.n	8004896 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004892:	2306      	movs	r3, #6
 8004894:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004898:	6a3a      	ldr	r2, [r7, #32]
 800489a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800489c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489e:	6a3a      	ldr	r2, [r7, #32]
 80048a0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80048a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a4:	2200      	movs	r2, #0
 80048a6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80048a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048aa:	3304      	adds	r3, #4
 80048ac:	0018      	movs	r0, r3
 80048ae:	f7ff fa99 	bl	8003de4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80048b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b4:	3318      	adds	r3, #24
 80048b6:	0018      	movs	r0, r3
 80048b8:	f7ff fa94 	bl	8003de4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80048bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048c2:	6a3b      	ldr	r3, [r7, #32]
 80048c4:	2207      	movs	r2, #7
 80048c6:	1ad2      	subs	r2, r2, r3
 80048c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80048cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048d0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80048d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d4:	2200      	movs	r2, #0
 80048d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80048d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048da:	2250      	movs	r2, #80	; 0x50
 80048dc:	2100      	movs	r1, #0
 80048de:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	68f9      	ldr	r1, [r7, #12]
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	0018      	movs	r0, r3
 80048e8:	f000 fde8 	bl	80054bc <pxPortInitialiseStack>
 80048ec:	0002      	movs	r2, r0
 80048ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d002      	beq.n	80048fe <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048fe:	46c0      	nop			; (mov r8, r8)
 8004900:	46bd      	mov	sp, r7
 8004902:	b006      	add	sp, #24
 8004904:	bd80      	pop	{r7, pc}
 8004906:	46c0      	nop			; (mov r8, r8)
 8004908:	3fffffff 	.word	0x3fffffff

0800490c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004914:	f000 fe6c 	bl	80055f0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004918:	4b28      	ldr	r3, [pc, #160]	; (80049bc <prvAddNewTaskToReadyList+0xb0>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	4b27      	ldr	r3, [pc, #156]	; (80049bc <prvAddNewTaskToReadyList+0xb0>)
 8004920:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004922:	4b27      	ldr	r3, [pc, #156]	; (80049c0 <prvAddNewTaskToReadyList+0xb4>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d109      	bne.n	800493e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800492a:	4b25      	ldr	r3, [pc, #148]	; (80049c0 <prvAddNewTaskToReadyList+0xb4>)
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004930:	4b22      	ldr	r3, [pc, #136]	; (80049bc <prvAddNewTaskToReadyList+0xb0>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d110      	bne.n	800495a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004938:	f000 fb52 	bl	8004fe0 <prvInitialiseTaskLists>
 800493c:	e00d      	b.n	800495a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800493e:	4b21      	ldr	r3, [pc, #132]	; (80049c4 <prvAddNewTaskToReadyList+0xb8>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d109      	bne.n	800495a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004946:	4b1e      	ldr	r3, [pc, #120]	; (80049c0 <prvAddNewTaskToReadyList+0xb4>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004950:	429a      	cmp	r2, r3
 8004952:	d802      	bhi.n	800495a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004954:	4b1a      	ldr	r3, [pc, #104]	; (80049c0 <prvAddNewTaskToReadyList+0xb4>)
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800495a:	4b1b      	ldr	r3, [pc, #108]	; (80049c8 <prvAddNewTaskToReadyList+0xbc>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	1c5a      	adds	r2, r3, #1
 8004960:	4b19      	ldr	r3, [pc, #100]	; (80049c8 <prvAddNewTaskToReadyList+0xbc>)
 8004962:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004968:	4b18      	ldr	r3, [pc, #96]	; (80049cc <prvAddNewTaskToReadyList+0xc0>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d903      	bls.n	8004978 <prvAddNewTaskToReadyList+0x6c>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004974:	4b15      	ldr	r3, [pc, #84]	; (80049cc <prvAddNewTaskToReadyList+0xc0>)
 8004976:	601a      	str	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800497c:	0013      	movs	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	189b      	adds	r3, r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4a12      	ldr	r2, [pc, #72]	; (80049d0 <prvAddNewTaskToReadyList+0xc4>)
 8004986:	189a      	adds	r2, r3, r2
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3304      	adds	r3, #4
 800498c:	0019      	movs	r1, r3
 800498e:	0010      	movs	r0, r2
 8004990:	f7ff fa33 	bl	8003dfa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004994:	f000 fe3e 	bl	8005614 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004998:	4b0a      	ldr	r3, [pc, #40]	; (80049c4 <prvAddNewTaskToReadyList+0xb8>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d008      	beq.n	80049b2 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80049a0:	4b07      	ldr	r3, [pc, #28]	; (80049c0 <prvAddNewTaskToReadyList+0xb4>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d201      	bcs.n	80049b2 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80049ae:	f000 fe0f 	bl	80055d0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049b2:	46c0      	nop			; (mov r8, r8)
 80049b4:	46bd      	mov	sp, r7
 80049b6:	b002      	add	sp, #8
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	46c0      	nop			; (mov r8, r8)
 80049bc:	2000046c 	.word	0x2000046c
 80049c0:	2000036c 	.word	0x2000036c
 80049c4:	20000478 	.word	0x20000478
 80049c8:	20000488 	.word	0x20000488
 80049cc:	20000474 	.word	0x20000474
 80049d0:	20000370 	.word	0x20000370

080049d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80049dc:	2300      	movs	r3, #0
 80049de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d010      	beq.n	8004a08 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80049e6:	4b0d      	ldr	r3, [pc, #52]	; (8004a1c <vTaskDelay+0x48>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <vTaskDelay+0x1e>
 80049ee:	b672      	cpsid	i
 80049f0:	e7fe      	b.n	80049f0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80049f2:	f000 f863 	bl	8004abc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2100      	movs	r1, #0
 80049fa:	0018      	movs	r0, r3
 80049fc:	f000 fd0a 	bl	8005414 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004a00:	f000 f868 	bl	8004ad4 <xTaskResumeAll>
 8004a04:	0003      	movs	r3, r0
 8004a06:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8004a0e:	f000 fddf 	bl	80055d0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a12:	46c0      	nop			; (mov r8, r8)
 8004a14:	46bd      	mov	sp, r7
 8004a16:	b004      	add	sp, #16
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	46c0      	nop			; (mov r8, r8)
 8004a1c:	20000494 	.word	0x20000494

08004a20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a20:	b590      	push	{r4, r7, lr}
 8004a22:	b089      	sub	sp, #36	; 0x24
 8004a24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004a26:	2300      	movs	r3, #0
 8004a28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004a2e:	003a      	movs	r2, r7
 8004a30:	1d39      	adds	r1, r7, #4
 8004a32:	2308      	movs	r3, #8
 8004a34:	18fb      	adds	r3, r7, r3
 8004a36:	0018      	movs	r0, r3
 8004a38:	f7fb fd3e 	bl	80004b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004a3c:	683c      	ldr	r4, [r7, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	4918      	ldr	r1, [pc, #96]	; (8004aa4 <vTaskStartScheduler+0x84>)
 8004a44:	4818      	ldr	r0, [pc, #96]	; (8004aa8 <vTaskStartScheduler+0x88>)
 8004a46:	9202      	str	r2, [sp, #8]
 8004a48:	9301      	str	r3, [sp, #4]
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	2300      	movs	r3, #0
 8004a50:	0022      	movs	r2, r4
 8004a52:	f7ff fe48 	bl	80046e6 <xTaskCreateStatic>
 8004a56:	0002      	movs	r2, r0
 8004a58:	4b14      	ldr	r3, [pc, #80]	; (8004aac <vTaskStartScheduler+0x8c>)
 8004a5a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004a5c:	4b13      	ldr	r3, [pc, #76]	; (8004aac <vTaskStartScheduler+0x8c>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d002      	beq.n	8004a6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004a64:	2301      	movs	r3, #1
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	e001      	b.n	8004a6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d10d      	bne.n	8004a90 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8004a74:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004a76:	4b0e      	ldr	r3, [pc, #56]	; (8004ab0 <vTaskStartScheduler+0x90>)
 8004a78:	2201      	movs	r2, #1
 8004a7a:	4252      	negs	r2, r2
 8004a7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004a7e:	4b0d      	ldr	r3, [pc, #52]	; (8004ab4 <vTaskStartScheduler+0x94>)
 8004a80:	2201      	movs	r2, #1
 8004a82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004a84:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <vTaskStartScheduler+0x98>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004a8a:	f000 fd7d 	bl	8005588 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004a8e:	e004      	b.n	8004a9a <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	3301      	adds	r3, #1
 8004a94:	d101      	bne.n	8004a9a <vTaskStartScheduler+0x7a>
 8004a96:	b672      	cpsid	i
 8004a98:	e7fe      	b.n	8004a98 <vTaskStartScheduler+0x78>
}
 8004a9a:	46c0      	nop			; (mov r8, r8)
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	b005      	add	sp, #20
 8004aa0:	bd90      	pop	{r4, r7, pc}
 8004aa2:	46c0      	nop			; (mov r8, r8)
 8004aa4:	08005d24 	.word	0x08005d24
 8004aa8:	08004fc1 	.word	0x08004fc1
 8004aac:	20000490 	.word	0x20000490
 8004ab0:	2000048c 	.word	0x2000048c
 8004ab4:	20000478 	.word	0x20000478
 8004ab8:	20000470 	.word	0x20000470

08004abc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004ac0:	4b03      	ldr	r3, [pc, #12]	; (8004ad0 <vTaskSuspendAll+0x14>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	1c5a      	adds	r2, r3, #1
 8004ac6:	4b02      	ldr	r3, [pc, #8]	; (8004ad0 <vTaskSuspendAll+0x14>)
 8004ac8:	601a      	str	r2, [r3, #0]
	portMEMORY_BARRIER();
}
 8004aca:	46c0      	nop			; (mov r8, r8)
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	20000494 	.word	0x20000494

08004ad4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004ada:	2300      	movs	r3, #0
 8004adc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004ae2:	4b3a      	ldr	r3, [pc, #232]	; (8004bcc <xTaskResumeAll+0xf8>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <xTaskResumeAll+0x1a>
 8004aea:	b672      	cpsid	i
 8004aec:	e7fe      	b.n	8004aec <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004aee:	f000 fd7f 	bl	80055f0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004af2:	4b36      	ldr	r3, [pc, #216]	; (8004bcc <xTaskResumeAll+0xf8>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	1e5a      	subs	r2, r3, #1
 8004af8:	4b34      	ldr	r3, [pc, #208]	; (8004bcc <xTaskResumeAll+0xf8>)
 8004afa:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004afc:	4b33      	ldr	r3, [pc, #204]	; (8004bcc <xTaskResumeAll+0xf8>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d15b      	bne.n	8004bbc <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b04:	4b32      	ldr	r3, [pc, #200]	; (8004bd0 <xTaskResumeAll+0xfc>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d057      	beq.n	8004bbc <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b0c:	e02f      	b.n	8004b6e <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b0e:	4b31      	ldr	r3, [pc, #196]	; (8004bd4 <xTaskResumeAll+0x100>)
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	3318      	adds	r3, #24
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	f7ff f9c5 	bl	8003eaa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	3304      	adds	r3, #4
 8004b24:	0018      	movs	r0, r3
 8004b26:	f7ff f9c0 	bl	8003eaa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b2e:	4b2a      	ldr	r3, [pc, #168]	; (8004bd8 <xTaskResumeAll+0x104>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d903      	bls.n	8004b3e <xTaskResumeAll+0x6a>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b3a:	4b27      	ldr	r3, [pc, #156]	; (8004bd8 <xTaskResumeAll+0x104>)
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b42:	0013      	movs	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	189b      	adds	r3, r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4a24      	ldr	r2, [pc, #144]	; (8004bdc <xTaskResumeAll+0x108>)
 8004b4c:	189a      	adds	r2, r3, r2
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	3304      	adds	r3, #4
 8004b52:	0019      	movs	r1, r3
 8004b54:	0010      	movs	r0, r2
 8004b56:	f7ff f950 	bl	8003dfa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b5e:	4b20      	ldr	r3, [pc, #128]	; (8004be0 <xTaskResumeAll+0x10c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d302      	bcc.n	8004b6e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8004b68:	4b1e      	ldr	r3, [pc, #120]	; (8004be4 <xTaskResumeAll+0x110>)
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b6e:	4b19      	ldr	r3, [pc, #100]	; (8004bd4 <xTaskResumeAll+0x100>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1cb      	bne.n	8004b0e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b7c:	f000 faca 	bl	8005114 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004b80:	4b19      	ldr	r3, [pc, #100]	; (8004be8 <xTaskResumeAll+0x114>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00f      	beq.n	8004bac <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b8c:	f000 f82e 	bl	8004bec <xTaskIncrementTick>
 8004b90:	1e03      	subs	r3, r0, #0
 8004b92:	d002      	beq.n	8004b9a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8004b94:	4b13      	ldr	r3, [pc, #76]	; (8004be4 <xTaskResumeAll+0x110>)
 8004b96:	2201      	movs	r2, #1
 8004b98:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1f2      	bne.n	8004b8c <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8004ba6:	4b10      	ldr	r3, [pc, #64]	; (8004be8 <xTaskResumeAll+0x114>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004bac:	4b0d      	ldr	r3, [pc, #52]	; (8004be4 <xTaskResumeAll+0x110>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d003      	beq.n	8004bbc <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004bb8:	f000 fd0a 	bl	80055d0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004bbc:	f000 fd2a 	bl	8005614 <vPortExitCritical>

	return xAlreadyYielded;
 8004bc0:	68bb      	ldr	r3, [r7, #8]
}
 8004bc2:	0018      	movs	r0, r3
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	b004      	add	sp, #16
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	46c0      	nop			; (mov r8, r8)
 8004bcc:	20000494 	.word	0x20000494
 8004bd0:	2000046c 	.word	0x2000046c
 8004bd4:	2000042c 	.word	0x2000042c
 8004bd8:	20000474 	.word	0x20000474
 8004bdc:	20000370 	.word	0x20000370
 8004be0:	2000036c 	.word	0x2000036c
 8004be4:	20000480 	.word	0x20000480
 8004be8:	2000047c 	.word	0x2000047c

08004bec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bf6:	4b4a      	ldr	r3, [pc, #296]	; (8004d20 <xTaskIncrementTick+0x134>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d000      	beq.n	8004c00 <xTaskIncrementTick+0x14>
 8004bfe:	e07e      	b.n	8004cfe <xTaskIncrementTick+0x112>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004c00:	4b48      	ldr	r3, [pc, #288]	; (8004d24 <xTaskIncrementTick+0x138>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3301      	adds	r3, #1
 8004c06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004c08:	4b46      	ldr	r3, [pc, #280]	; (8004d24 <xTaskIncrementTick+0x138>)
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d117      	bne.n	8004c44 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8004c14:	4b44      	ldr	r3, [pc, #272]	; (8004d28 <xTaskIncrementTick+0x13c>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <xTaskIncrementTick+0x36>
 8004c1e:	b672      	cpsid	i
 8004c20:	e7fe      	b.n	8004c20 <xTaskIncrementTick+0x34>
 8004c22:	4b41      	ldr	r3, [pc, #260]	; (8004d28 <xTaskIncrementTick+0x13c>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	60fb      	str	r3, [r7, #12]
 8004c28:	4b40      	ldr	r3, [pc, #256]	; (8004d2c <xTaskIncrementTick+0x140>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	4b3e      	ldr	r3, [pc, #248]	; (8004d28 <xTaskIncrementTick+0x13c>)
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	4b3e      	ldr	r3, [pc, #248]	; (8004d2c <xTaskIncrementTick+0x140>)
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	4b3e      	ldr	r3, [pc, #248]	; (8004d30 <xTaskIncrementTick+0x144>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	1c5a      	adds	r2, r3, #1
 8004c3c:	4b3c      	ldr	r3, [pc, #240]	; (8004d30 <xTaskIncrementTick+0x144>)
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	f000 fa68 	bl	8005114 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004c44:	4b3b      	ldr	r3, [pc, #236]	; (8004d34 <xTaskIncrementTick+0x148>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d349      	bcc.n	8004ce2 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c4e:	4b36      	ldr	r3, [pc, #216]	; (8004d28 <xTaskIncrementTick+0x13c>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d104      	bne.n	8004c62 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c58:	4b36      	ldr	r3, [pc, #216]	; (8004d34 <xTaskIncrementTick+0x148>)
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	4252      	negs	r2, r2
 8004c5e:	601a      	str	r2, [r3, #0]
					break;
 8004c60:	e03f      	b.n	8004ce2 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c62:	4b31      	ldr	r3, [pc, #196]	; (8004d28 <xTaskIncrementTick+0x13c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d203      	bcs.n	8004c82 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c7a:	4b2e      	ldr	r3, [pc, #184]	; (8004d34 <xTaskIncrementTick+0x148>)
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c80:	e02f      	b.n	8004ce2 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	3304      	adds	r3, #4
 8004c86:	0018      	movs	r0, r3
 8004c88:	f7ff f90f 	bl	8003eaa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d004      	beq.n	8004c9e <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	3318      	adds	r3, #24
 8004c98:	0018      	movs	r0, r3
 8004c9a:	f7ff f906 	bl	8003eaa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca2:	4b25      	ldr	r3, [pc, #148]	; (8004d38 <xTaskIncrementTick+0x14c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d903      	bls.n	8004cb2 <xTaskIncrementTick+0xc6>
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cae:	4b22      	ldr	r3, [pc, #136]	; (8004d38 <xTaskIncrementTick+0x14c>)
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb6:	0013      	movs	r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	189b      	adds	r3, r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4a1f      	ldr	r2, [pc, #124]	; (8004d3c <xTaskIncrementTick+0x150>)
 8004cc0:	189a      	adds	r2, r3, r2
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	3304      	adds	r3, #4
 8004cc6:	0019      	movs	r1, r3
 8004cc8:	0010      	movs	r0, r2
 8004cca:	f7ff f896 	bl	8003dfa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd2:	4b1b      	ldr	r3, [pc, #108]	; (8004d40 <xTaskIncrementTick+0x154>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d3b8      	bcc.n	8004c4e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ce0:	e7b5      	b.n	8004c4e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ce2:	4b17      	ldr	r3, [pc, #92]	; (8004d40 <xTaskIncrementTick+0x154>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce8:	4914      	ldr	r1, [pc, #80]	; (8004d3c <xTaskIncrementTick+0x150>)
 8004cea:	0013      	movs	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	189b      	adds	r3, r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	585b      	ldr	r3, [r3, r1]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d907      	bls.n	8004d08 <xTaskIncrementTick+0x11c>
			{
				xSwitchRequired = pdTRUE;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	617b      	str	r3, [r7, #20]
 8004cfc:	e004      	b.n	8004d08 <xTaskIncrementTick+0x11c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004cfe:	4b11      	ldr	r3, [pc, #68]	; (8004d44 <xTaskIncrementTick+0x158>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	1c5a      	adds	r2, r3, #1
 8004d04:	4b0f      	ldr	r3, [pc, #60]	; (8004d44 <xTaskIncrementTick+0x158>)
 8004d06:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004d08:	4b0f      	ldr	r3, [pc, #60]	; (8004d48 <xTaskIncrementTick+0x15c>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d001      	beq.n	8004d14 <xTaskIncrementTick+0x128>
		{
			xSwitchRequired = pdTRUE;
 8004d10:	2301      	movs	r3, #1
 8004d12:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004d14:	697b      	ldr	r3, [r7, #20]
}
 8004d16:	0018      	movs	r0, r3
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	b006      	add	sp, #24
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	46c0      	nop			; (mov r8, r8)
 8004d20:	20000494 	.word	0x20000494
 8004d24:	20000470 	.word	0x20000470
 8004d28:	20000424 	.word	0x20000424
 8004d2c:	20000428 	.word	0x20000428
 8004d30:	20000484 	.word	0x20000484
 8004d34:	2000048c 	.word	0x2000048c
 8004d38:	20000474 	.word	0x20000474
 8004d3c:	20000370 	.word	0x20000370
 8004d40:	2000036c 	.word	0x2000036c
 8004d44:	2000047c 	.word	0x2000047c
 8004d48:	20000480 	.word	0x20000480

08004d4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d52:	4b22      	ldr	r3, [pc, #136]	; (8004ddc <vTaskSwitchContext+0x90>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d5a:	4b21      	ldr	r3, [pc, #132]	; (8004de0 <vTaskSwitchContext+0x94>)
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d60:	e037      	b.n	8004dd2 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8004d62:	4b1f      	ldr	r3, [pc, #124]	; (8004de0 <vTaskSwitchContext+0x94>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d68:	4b1e      	ldr	r3, [pc, #120]	; (8004de4 <vTaskSwitchContext+0x98>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	607b      	str	r3, [r7, #4]
 8004d6e:	e007      	b.n	8004d80 <vTaskSwitchContext+0x34>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <vTaskSwitchContext+0x2e>
 8004d76:	b672      	cpsid	i
 8004d78:	e7fe      	b.n	8004d78 <vTaskSwitchContext+0x2c>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	607b      	str	r3, [r7, #4]
 8004d80:	4919      	ldr	r1, [pc, #100]	; (8004de8 <vTaskSwitchContext+0x9c>)
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	0013      	movs	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	189b      	adds	r3, r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	585b      	ldr	r3, [r3, r1]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d0ee      	beq.n	8004d70 <vTaskSwitchContext+0x24>
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	0013      	movs	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	189b      	adds	r3, r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4a12      	ldr	r2, [pc, #72]	; (8004de8 <vTaskSwitchContext+0x9c>)
 8004d9e:	189b      	adds	r3, r3, r2
 8004da0:	603b      	str	r3, [r7, #0]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	605a      	str	r2, [r3, #4]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	3308      	adds	r3, #8
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d104      	bne.n	8004dc2 <vTaskSwitchContext+0x76>
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	605a      	str	r2, [r3, #4]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	68da      	ldr	r2, [r3, #12]
 8004dc8:	4b08      	ldr	r3, [pc, #32]	; (8004dec <vTaskSwitchContext+0xa0>)
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <vTaskSwitchContext+0x98>)
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	601a      	str	r2, [r3, #0]
}
 8004dd2:	46c0      	nop			; (mov r8, r8)
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	b002      	add	sp, #8
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	46c0      	nop			; (mov r8, r8)
 8004ddc:	20000494 	.word	0x20000494
 8004de0:	20000480 	.word	0x20000480
 8004de4:	20000474 	.word	0x20000474
 8004de8:	20000370 	.word	0x20000370
 8004dec:	2000036c 	.word	0x2000036c

08004df0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <vTaskPlaceOnEventList+0x14>
 8004e00:	b672      	cpsid	i
 8004e02:	e7fe      	b.n	8004e02 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e04:	4b08      	ldr	r3, [pc, #32]	; (8004e28 <vTaskPlaceOnEventList+0x38>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3318      	adds	r3, #24
 8004e0a:	001a      	movs	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	0011      	movs	r1, r2
 8004e10:	0018      	movs	r0, r3
 8004e12:	f7ff f814 	bl	8003e3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2101      	movs	r1, #1
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	f000 fafa 	bl	8005414 <prvAddCurrentTaskToDelayedList>
}
 8004e20:	46c0      	nop			; (mov r8, r8)
 8004e22:	46bd      	mov	sp, r7
 8004e24:	b002      	add	sp, #8
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	2000036c 	.word	0x2000036c

08004e2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d101      	bne.n	8004e46 <xTaskRemoveFromEventList+0x1a>
 8004e42:	b672      	cpsid	i
 8004e44:	e7fe      	b.n	8004e44 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	3318      	adds	r3, #24
 8004e4a:	0018      	movs	r0, r3
 8004e4c:	f7ff f82d 	bl	8003eaa <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e50:	4b1e      	ldr	r3, [pc, #120]	; (8004ecc <xTaskRemoveFromEventList+0xa0>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d11d      	bne.n	8004e94 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	f7ff f824 	bl	8003eaa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e66:	4b1a      	ldr	r3, [pc, #104]	; (8004ed0 <xTaskRemoveFromEventList+0xa4>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d903      	bls.n	8004e76 <xTaskRemoveFromEventList+0x4a>
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e72:	4b17      	ldr	r3, [pc, #92]	; (8004ed0 <xTaskRemoveFromEventList+0xa4>)
 8004e74:	601a      	str	r2, [r3, #0]
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e7a:	0013      	movs	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	189b      	adds	r3, r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4a14      	ldr	r2, [pc, #80]	; (8004ed4 <xTaskRemoveFromEventList+0xa8>)
 8004e84:	189a      	adds	r2, r3, r2
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	3304      	adds	r3, #4
 8004e8a:	0019      	movs	r1, r3
 8004e8c:	0010      	movs	r0, r2
 8004e8e:	f7fe ffb4 	bl	8003dfa <vListInsertEnd>
 8004e92:	e007      	b.n	8004ea4 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	3318      	adds	r3, #24
 8004e98:	001a      	movs	r2, r3
 8004e9a:	4b0f      	ldr	r3, [pc, #60]	; (8004ed8 <xTaskRemoveFromEventList+0xac>)
 8004e9c:	0011      	movs	r1, r2
 8004e9e:	0018      	movs	r0, r3
 8004ea0:	f7fe ffab 	bl	8003dfa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea8:	4b0c      	ldr	r3, [pc, #48]	; (8004edc <xTaskRemoveFromEventList+0xb0>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d905      	bls.n	8004ebe <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004eb6:	4b0a      	ldr	r3, [pc, #40]	; (8004ee0 <xTaskRemoveFromEventList+0xb4>)
 8004eb8:	2201      	movs	r2, #1
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	e001      	b.n	8004ec2 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
}
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	b004      	add	sp, #16
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	20000494 	.word	0x20000494
 8004ed0:	20000474 	.word	0x20000474
 8004ed4:	20000370 	.word	0x20000370
 8004ed8:	2000042c 	.word	0x2000042c
 8004edc:	2000036c 	.word	0x2000036c
 8004ee0:	20000480 	.word	0x20000480

08004ee4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004eec:	4b05      	ldr	r3, [pc, #20]	; (8004f04 <vTaskInternalSetTimeOutState+0x20>)
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004ef4:	4b04      	ldr	r3, [pc, #16]	; (8004f08 <vTaskInternalSetTimeOutState+0x24>)
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	605a      	str	r2, [r3, #4]
}
 8004efc:	46c0      	nop			; (mov r8, r8)
 8004efe:	46bd      	mov	sp, r7
 8004f00:	b002      	add	sp, #8
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	20000484 	.word	0x20000484
 8004f08:	20000470 	.word	0x20000470

08004f0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d101      	bne.n	8004f20 <xTaskCheckForTimeOut+0x14>
 8004f1c:	b672      	cpsid	i
 8004f1e:	e7fe      	b.n	8004f1e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <xTaskCheckForTimeOut+0x1e>
 8004f26:	b672      	cpsid	i
 8004f28:	e7fe      	b.n	8004f28 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8004f2a:	f000 fb61 	bl	80055f0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004f2e:	4b1d      	ldr	r3, [pc, #116]	; (8004fa4 <xTaskCheckForTimeOut+0x98>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	3301      	adds	r3, #1
 8004f44:	d102      	bne.n	8004f4c <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004f46:	2300      	movs	r3, #0
 8004f48:	617b      	str	r3, [r7, #20]
 8004f4a:	e024      	b.n	8004f96 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	4b15      	ldr	r3, [pc, #84]	; (8004fa8 <xTaskCheckForTimeOut+0x9c>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d007      	beq.n	8004f68 <xTaskCheckForTimeOut+0x5c>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d302      	bcc.n	8004f68 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004f62:	2301      	movs	r3, #1
 8004f64:	617b      	str	r3, [r7, #20]
 8004f66:	e016      	b.n	8004f96 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d20c      	bcs.n	8004f8c <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	1ad2      	subs	r2, r2, r3
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	0018      	movs	r0, r3
 8004f82:	f7ff ffaf 	bl	8004ee4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004f86:	2300      	movs	r3, #0
 8004f88:	617b      	str	r3, [r7, #20]
 8004f8a:	e004      	b.n	8004f96 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004f92:	2301      	movs	r3, #1
 8004f94:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8004f96:	f000 fb3d 	bl	8005614 <vPortExitCritical>

	return xReturn;
 8004f9a:	697b      	ldr	r3, [r7, #20]
}
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	b006      	add	sp, #24
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	20000470 	.word	0x20000470
 8004fa8:	20000484 	.word	0x20000484

08004fac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004fb0:	4b02      	ldr	r3, [pc, #8]	; (8004fbc <vTaskMissedYield+0x10>)
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	601a      	str	r2, [r3, #0]
}
 8004fb6:	46c0      	nop			; (mov r8, r8)
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	20000480 	.word	0x20000480

08004fc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004fc8:	f000 f84e 	bl	8005068 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004fcc:	4b03      	ldr	r3, [pc, #12]	; (8004fdc <prvIdleTask+0x1c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d9f9      	bls.n	8004fc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004fd4:	f000 fafc 	bl	80055d0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004fd8:	e7f6      	b.n	8004fc8 <prvIdleTask+0x8>
 8004fda:	46c0      	nop			; (mov r8, r8)
 8004fdc:	20000370 	.word	0x20000370

08004fe0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	607b      	str	r3, [r7, #4]
 8004fea:	e00c      	b.n	8005006 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	0013      	movs	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	189b      	adds	r3, r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4a14      	ldr	r2, [pc, #80]	; (8005048 <prvInitialiseTaskLists+0x68>)
 8004ff8:	189b      	adds	r3, r3, r2
 8004ffa:	0018      	movs	r0, r3
 8004ffc:	f7fe fed4 	bl	8003da8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	3301      	adds	r3, #1
 8005004:	607b      	str	r3, [r7, #4]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b06      	cmp	r3, #6
 800500a:	d9ef      	bls.n	8004fec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800500c:	4b0f      	ldr	r3, [pc, #60]	; (800504c <prvInitialiseTaskLists+0x6c>)
 800500e:	0018      	movs	r0, r3
 8005010:	f7fe feca 	bl	8003da8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005014:	4b0e      	ldr	r3, [pc, #56]	; (8005050 <prvInitialiseTaskLists+0x70>)
 8005016:	0018      	movs	r0, r3
 8005018:	f7fe fec6 	bl	8003da8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800501c:	4b0d      	ldr	r3, [pc, #52]	; (8005054 <prvInitialiseTaskLists+0x74>)
 800501e:	0018      	movs	r0, r3
 8005020:	f7fe fec2 	bl	8003da8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005024:	4b0c      	ldr	r3, [pc, #48]	; (8005058 <prvInitialiseTaskLists+0x78>)
 8005026:	0018      	movs	r0, r3
 8005028:	f7fe febe 	bl	8003da8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800502c:	4b0b      	ldr	r3, [pc, #44]	; (800505c <prvInitialiseTaskLists+0x7c>)
 800502e:	0018      	movs	r0, r3
 8005030:	f7fe feba 	bl	8003da8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005034:	4b0a      	ldr	r3, [pc, #40]	; (8005060 <prvInitialiseTaskLists+0x80>)
 8005036:	4a05      	ldr	r2, [pc, #20]	; (800504c <prvInitialiseTaskLists+0x6c>)
 8005038:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800503a:	4b0a      	ldr	r3, [pc, #40]	; (8005064 <prvInitialiseTaskLists+0x84>)
 800503c:	4a04      	ldr	r2, [pc, #16]	; (8005050 <prvInitialiseTaskLists+0x70>)
 800503e:	601a      	str	r2, [r3, #0]
}
 8005040:	46c0      	nop			; (mov r8, r8)
 8005042:	46bd      	mov	sp, r7
 8005044:	b002      	add	sp, #8
 8005046:	bd80      	pop	{r7, pc}
 8005048:	20000370 	.word	0x20000370
 800504c:	200003fc 	.word	0x200003fc
 8005050:	20000410 	.word	0x20000410
 8005054:	2000042c 	.word	0x2000042c
 8005058:	20000440 	.word	0x20000440
 800505c:	20000458 	.word	0x20000458
 8005060:	20000424 	.word	0x20000424
 8005064:	20000428 	.word	0x20000428

08005068 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800506e:	e01a      	b.n	80050a6 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8005070:	f000 fabe 	bl	80055f0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005074:	4b10      	ldr	r3, [pc, #64]	; (80050b8 <prvCheckTasksWaitingTermination+0x50>)
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	3304      	adds	r3, #4
 8005080:	0018      	movs	r0, r3
 8005082:	f7fe ff12 	bl	8003eaa <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005086:	4b0d      	ldr	r3, [pc, #52]	; (80050bc <prvCheckTasksWaitingTermination+0x54>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	1e5a      	subs	r2, r3, #1
 800508c:	4b0b      	ldr	r3, [pc, #44]	; (80050bc <prvCheckTasksWaitingTermination+0x54>)
 800508e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005090:	4b0b      	ldr	r3, [pc, #44]	; (80050c0 <prvCheckTasksWaitingTermination+0x58>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	1e5a      	subs	r2, r3, #1
 8005096:	4b0a      	ldr	r3, [pc, #40]	; (80050c0 <prvCheckTasksWaitingTermination+0x58>)
 8005098:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800509a:	f000 fabb 	bl	8005614 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	0018      	movs	r0, r3
 80050a2:	f000 f80f 	bl	80050c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050a6:	4b06      	ldr	r3, [pc, #24]	; (80050c0 <prvCheckTasksWaitingTermination+0x58>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1e0      	bne.n	8005070 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80050ae:	46c0      	nop			; (mov r8, r8)
 80050b0:	46c0      	nop			; (mov r8, r8)
 80050b2:	46bd      	mov	sp, r7
 80050b4:	b002      	add	sp, #8
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	20000440 	.word	0x20000440
 80050bc:	2000046c 	.word	0x2000046c
 80050c0:	20000454 	.word	0x20000454

080050c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2251      	movs	r2, #81	; 0x51
 80050d0:	5c9b      	ldrb	r3, [r3, r2]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d109      	bne.n	80050ea <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050da:	0018      	movs	r0, r3
 80050dc:	f000 fbc6 	bl	800586c <vPortFree>
				vPortFree( pxTCB );
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	0018      	movs	r0, r3
 80050e4:	f000 fbc2 	bl	800586c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80050e8:	e010      	b.n	800510c <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2251      	movs	r2, #81	; 0x51
 80050ee:	5c9b      	ldrb	r3, [r3, r2]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d104      	bne.n	80050fe <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	0018      	movs	r0, r3
 80050f8:	f000 fbb8 	bl	800586c <vPortFree>
	}
 80050fc:	e006      	b.n	800510c <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2251      	movs	r2, #81	; 0x51
 8005102:	5c9b      	ldrb	r3, [r3, r2]
 8005104:	2b02      	cmp	r3, #2
 8005106:	d001      	beq.n	800510c <prvDeleteTCB+0x48>
 8005108:	b672      	cpsid	i
 800510a:	e7fe      	b.n	800510a <prvDeleteTCB+0x46>
	}
 800510c:	46c0      	nop			; (mov r8, r8)
 800510e:	46bd      	mov	sp, r7
 8005110:	b002      	add	sp, #8
 8005112:	bd80      	pop	{r7, pc}

08005114 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800511a:	4b0b      	ldr	r3, [pc, #44]	; (8005148 <prvResetNextTaskUnblockTime+0x34>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d104      	bne.n	800512e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005124:	4b09      	ldr	r3, [pc, #36]	; (800514c <prvResetNextTaskUnblockTime+0x38>)
 8005126:	2201      	movs	r2, #1
 8005128:	4252      	negs	r2, r2
 800512a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800512c:	e008      	b.n	8005140 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800512e:	4b06      	ldr	r3, [pc, #24]	; (8005148 <prvResetNextTaskUnblockTime+0x34>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	4b03      	ldr	r3, [pc, #12]	; (800514c <prvResetNextTaskUnblockTime+0x38>)
 800513e:	601a      	str	r2, [r3, #0]
}
 8005140:	46c0      	nop			; (mov r8, r8)
 8005142:	46bd      	mov	sp, r7
 8005144:	b002      	add	sp, #8
 8005146:	bd80      	pop	{r7, pc}
 8005148:	20000424 	.word	0x20000424
 800514c:	2000048c 	.word	0x2000048c

08005150 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005156:	4b0a      	ldr	r3, [pc, #40]	; (8005180 <xTaskGetSchedulerState+0x30>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d102      	bne.n	8005164 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800515e:	2301      	movs	r3, #1
 8005160:	607b      	str	r3, [r7, #4]
 8005162:	e008      	b.n	8005176 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005164:	4b07      	ldr	r3, [pc, #28]	; (8005184 <xTaskGetSchedulerState+0x34>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d102      	bne.n	8005172 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800516c:	2302      	movs	r3, #2
 800516e:	607b      	str	r3, [r7, #4]
 8005170:	e001      	b.n	8005176 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005172:	2300      	movs	r3, #0
 8005174:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005176:	687b      	ldr	r3, [r7, #4]
	}
 8005178:	0018      	movs	r0, r3
 800517a:	46bd      	mov	sp, r7
 800517c:	b002      	add	sp, #8
 800517e:	bd80      	pop	{r7, pc}
 8005180:	20000478 	.word	0x20000478
 8005184:	20000494 	.word	0x20000494

08005188 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005194:	2300      	movs	r3, #0
 8005196:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d051      	beq.n	8005242 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a2:	4b2a      	ldr	r3, [pc, #168]	; (800524c <xTaskPriorityInherit+0xc4>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d241      	bcs.n	8005230 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	db06      	blt.n	80051c2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051b4:	4b25      	ldr	r3, [pc, #148]	; (800524c <xTaskPriorityInherit+0xc4>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ba:	2207      	movs	r2, #7
 80051bc:	1ad2      	subs	r2, r2, r3
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	6959      	ldr	r1, [r3, #20]
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ca:	0013      	movs	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	189b      	adds	r3, r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4a1f      	ldr	r2, [pc, #124]	; (8005250 <xTaskPriorityInherit+0xc8>)
 80051d4:	189b      	adds	r3, r3, r2
 80051d6:	4299      	cmp	r1, r3
 80051d8:	d122      	bne.n	8005220 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	3304      	adds	r3, #4
 80051de:	0018      	movs	r0, r3
 80051e0:	f7fe fe63 	bl	8003eaa <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80051e4:	4b19      	ldr	r3, [pc, #100]	; (800524c <xTaskPriorityInherit+0xc4>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f2:	4b18      	ldr	r3, [pc, #96]	; (8005254 <xTaskPriorityInherit+0xcc>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d903      	bls.n	8005202 <xTaskPriorityInherit+0x7a>
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051fe:	4b15      	ldr	r3, [pc, #84]	; (8005254 <xTaskPriorityInherit+0xcc>)
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005206:	0013      	movs	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	189b      	adds	r3, r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4a10      	ldr	r2, [pc, #64]	; (8005250 <xTaskPriorityInherit+0xc8>)
 8005210:	189a      	adds	r2, r3, r2
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	3304      	adds	r3, #4
 8005216:	0019      	movs	r1, r3
 8005218:	0010      	movs	r0, r2
 800521a:	f7fe fdee 	bl	8003dfa <vListInsertEnd>
 800521e:	e004      	b.n	800522a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005220:	4b0a      	ldr	r3, [pc, #40]	; (800524c <xTaskPriorityInherit+0xc4>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800522a:	2301      	movs	r3, #1
 800522c:	60fb      	str	r3, [r7, #12]
 800522e:	e008      	b.n	8005242 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005234:	4b05      	ldr	r3, [pc, #20]	; (800524c <xTaskPriorityInherit+0xc4>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523a:	429a      	cmp	r2, r3
 800523c:	d201      	bcs.n	8005242 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800523e:	2301      	movs	r3, #1
 8005240:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005242:	68fb      	ldr	r3, [r7, #12]
	}
 8005244:	0018      	movs	r0, r3
 8005246:	46bd      	mov	sp, r7
 8005248:	b004      	add	sp, #16
 800524a:	bd80      	pop	{r7, pc}
 800524c:	2000036c 	.word	0x2000036c
 8005250:	20000370 	.word	0x20000370
 8005254:	20000474 	.word	0x20000474

08005258 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005264:	2300      	movs	r3, #0
 8005266:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d044      	beq.n	80052f8 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800526e:	4b25      	ldr	r3, [pc, #148]	; (8005304 <xTaskPriorityDisinherit+0xac>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	429a      	cmp	r2, r3
 8005276:	d001      	beq.n	800527c <xTaskPriorityDisinherit+0x24>
 8005278:	b672      	cpsid	i
 800527a:	e7fe      	b.n	800527a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <xTaskPriorityDisinherit+0x30>
 8005284:	b672      	cpsid	i
 8005286:	e7fe      	b.n	8005286 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800528c:	1e5a      	subs	r2, r3, #1
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529a:	429a      	cmp	r2, r3
 800529c:	d02c      	beq.n	80052f8 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d128      	bne.n	80052f8 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	3304      	adds	r3, #4
 80052aa:	0018      	movs	r0, r3
 80052ac:	f7fe fdfd 	bl	8003eaa <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052bc:	2207      	movs	r2, #7
 80052be:	1ad2      	subs	r2, r2, r3
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c8:	4b0f      	ldr	r3, [pc, #60]	; (8005308 <xTaskPriorityDisinherit+0xb0>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d903      	bls.n	80052d8 <xTaskPriorityDisinherit+0x80>
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d4:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <xTaskPriorityDisinherit+0xb0>)
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052dc:	0013      	movs	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	189b      	adds	r3, r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4a09      	ldr	r2, [pc, #36]	; (800530c <xTaskPriorityDisinherit+0xb4>)
 80052e6:	189a      	adds	r2, r3, r2
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	3304      	adds	r3, #4
 80052ec:	0019      	movs	r1, r3
 80052ee:	0010      	movs	r0, r2
 80052f0:	f7fe fd83 	bl	8003dfa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80052f4:	2301      	movs	r3, #1
 80052f6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80052f8:	68fb      	ldr	r3, [r7, #12]
	}
 80052fa:	0018      	movs	r0, r3
 80052fc:	46bd      	mov	sp, r7
 80052fe:	b004      	add	sp, #16
 8005300:	bd80      	pop	{r7, pc}
 8005302:	46c0      	nop			; (mov r8, r8)
 8005304:	2000036c 	.word	0x2000036c
 8005308:	20000474 	.word	0x20000474
 800530c:	20000370 	.word	0x20000370

08005310 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800531e:	2301      	movs	r3, #1
 8005320:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d058      	beq.n	80053da <vTaskPriorityDisinheritAfterTimeout+0xca>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <vTaskPriorityDisinheritAfterTimeout+0x24>
 8005330:	b672      	cpsid	i
 8005332:	e7fe      	b.n	8005332 <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	429a      	cmp	r2, r3
 800533c:	d902      	bls.n	8005344 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	617b      	str	r3, [r7, #20]
 8005342:	e002      	b.n	800534a <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005348:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	429a      	cmp	r2, r3
 8005352:	d042      	beq.n	80053da <vTaskPriorityDisinheritAfterTimeout+0xca>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	429a      	cmp	r2, r3
 800535c:	d13d      	bne.n	80053da <vTaskPriorityDisinheritAfterTimeout+0xca>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800535e:	4b21      	ldr	r3, [pc, #132]	; (80053e4 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	429a      	cmp	r2, r3
 8005366:	d101      	bne.n	800536c <vTaskPriorityDisinheritAfterTimeout+0x5c>
 8005368:	b672      	cpsid	i
 800536a:	e7fe      	b.n	800536a <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005370:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	2b00      	cmp	r3, #0
 800537e:	db04      	blt.n	800538a <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	2207      	movs	r2, #7
 8005384:	1ad2      	subs	r2, r2, r3
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	6959      	ldr	r1, [r3, #20]
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	0013      	movs	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	189b      	adds	r3, r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4a13      	ldr	r2, [pc, #76]	; (80053e8 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 800539a:	189b      	adds	r3, r3, r2
 800539c:	4299      	cmp	r1, r3
 800539e:	d11c      	bne.n	80053da <vTaskPriorityDisinheritAfterTimeout+0xca>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	3304      	adds	r3, #4
 80053a4:	0018      	movs	r0, r3
 80053a6:	f7fe fd80 	bl	8003eaa <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ae:	4b0f      	ldr	r3, [pc, #60]	; (80053ec <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d903      	bls.n	80053be <vTaskPriorityDisinheritAfterTimeout+0xae>
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ba:	4b0c      	ldr	r3, [pc, #48]	; (80053ec <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 80053bc:	601a      	str	r2, [r3, #0]
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c2:	0013      	movs	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	189b      	adds	r3, r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4a07      	ldr	r2, [pc, #28]	; (80053e8 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 80053cc:	189a      	adds	r2, r3, r2
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	3304      	adds	r3, #4
 80053d2:	0019      	movs	r1, r3
 80053d4:	0010      	movs	r0, r2
 80053d6:	f7fe fd10 	bl	8003dfa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053da:	46c0      	nop			; (mov r8, r8)
 80053dc:	46bd      	mov	sp, r7
 80053de:	b006      	add	sp, #24
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	46c0      	nop			; (mov r8, r8)
 80053e4:	2000036c 	.word	0x2000036c
 80053e8:	20000370 	.word	0x20000370
 80053ec:	20000474 	.word	0x20000474

080053f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80053f4:	4b06      	ldr	r3, [pc, #24]	; (8005410 <pvTaskIncrementMutexHeldCount+0x20>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d004      	beq.n	8005406 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80053fc:	4b04      	ldr	r3, [pc, #16]	; (8005410 <pvTaskIncrementMutexHeldCount+0x20>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005402:	3201      	adds	r2, #1
 8005404:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005406:	4b02      	ldr	r3, [pc, #8]	; (8005410 <pvTaskIncrementMutexHeldCount+0x20>)
 8005408:	681b      	ldr	r3, [r3, #0]
	}
 800540a:	0018      	movs	r0, r3
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	2000036c 	.word	0x2000036c

08005414 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800541e:	4b21      	ldr	r3, [pc, #132]	; (80054a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005424:	4b20      	ldr	r3, [pc, #128]	; (80054a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	3304      	adds	r3, #4
 800542a:	0018      	movs	r0, r3
 800542c:	f7fe fd3d 	bl	8003eaa <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	3301      	adds	r3, #1
 8005434:	d10b      	bne.n	800544e <prvAddCurrentTaskToDelayedList+0x3a>
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d008      	beq.n	800544e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800543c:	4b1a      	ldr	r3, [pc, #104]	; (80054a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	1d1a      	adds	r2, r3, #4
 8005442:	4b1a      	ldr	r3, [pc, #104]	; (80054ac <prvAddCurrentTaskToDelayedList+0x98>)
 8005444:	0011      	movs	r1, r2
 8005446:	0018      	movs	r0, r3
 8005448:	f7fe fcd7 	bl	8003dfa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800544c:	e026      	b.n	800549c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	18d3      	adds	r3, r2, r3
 8005454:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005456:	4b14      	ldr	r3, [pc, #80]	; (80054a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	429a      	cmp	r2, r3
 8005464:	d209      	bcs.n	800547a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005466:	4b12      	ldr	r3, [pc, #72]	; (80054b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	4b0f      	ldr	r3, [pc, #60]	; (80054a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	3304      	adds	r3, #4
 8005470:	0019      	movs	r1, r3
 8005472:	0010      	movs	r0, r2
 8005474:	f7fe fce3 	bl	8003e3e <vListInsert>
}
 8005478:	e010      	b.n	800549c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800547a:	4b0e      	ldr	r3, [pc, #56]	; (80054b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	4b0a      	ldr	r3, [pc, #40]	; (80054a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	3304      	adds	r3, #4
 8005484:	0019      	movs	r1, r3
 8005486:	0010      	movs	r0, r2
 8005488:	f7fe fcd9 	bl	8003e3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800548c:	4b0a      	ldr	r3, [pc, #40]	; (80054b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	429a      	cmp	r2, r3
 8005494:	d202      	bcs.n	800549c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005496:	4b08      	ldr	r3, [pc, #32]	; (80054b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	601a      	str	r2, [r3, #0]
}
 800549c:	46c0      	nop			; (mov r8, r8)
 800549e:	46bd      	mov	sp, r7
 80054a0:	b004      	add	sp, #16
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	20000470 	.word	0x20000470
 80054a8:	2000036c 	.word	0x2000036c
 80054ac:	20000458 	.word	0x20000458
 80054b0:	20000428 	.word	0x20000428
 80054b4:	20000424 	.word	0x20000424
 80054b8:	2000048c 	.word	0x2000048c

080054bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	3b04      	subs	r3, #4
 80054cc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2280      	movs	r2, #128	; 0x80
 80054d2:	0452      	lsls	r2, r2, #17
 80054d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	3b04      	subs	r3, #4
 80054da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	3b04      	subs	r3, #4
 80054e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80054e8:	4a08      	ldr	r2, [pc, #32]	; (800550c <pxPortInitialiseStack+0x50>)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	3b14      	subs	r3, #20
 80054f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	3b20      	subs	r3, #32
 80054fe:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005500:	68fb      	ldr	r3, [r7, #12]
}
 8005502:	0018      	movs	r0, r3
 8005504:	46bd      	mov	sp, r7
 8005506:	b004      	add	sp, #16
 8005508:	bd80      	pop	{r7, pc}
 800550a:	46c0      	nop			; (mov r8, r8)
 800550c:	08005511 	.word	0x08005511

08005510 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005516:	2300      	movs	r3, #0
 8005518:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800551a:	4b08      	ldr	r3, [pc, #32]	; (800553c <prvTaskExitError+0x2c>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	3301      	adds	r3, #1
 8005520:	d001      	beq.n	8005526 <prvTaskExitError+0x16>
 8005522:	b672      	cpsid	i
 8005524:	e7fe      	b.n	8005524 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8005526:	b672      	cpsid	i
	while( ulDummy == 0 )
 8005528:	46c0      	nop			; (mov r8, r8)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0fc      	beq.n	800552a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005530:	46c0      	nop			; (mov r8, r8)
 8005532:	46c0      	nop			; (mov r8, r8)
 8005534:	46bd      	mov	sp, r7
 8005536:	b002      	add	sp, #8
 8005538:	bd80      	pop	{r7, pc}
 800553a:	46c0      	nop			; (mov r8, r8)
 800553c:	20000018 	.word	0x20000018

08005540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8005540:	b580      	push	{r7, lr}
 8005542:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8005544:	46c0      	nop			; (mov r8, r8)
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	0000      	movs	r0, r0
 800554c:	0000      	movs	r0, r0
	...

08005550 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005550:	4a0b      	ldr	r2, [pc, #44]	; (8005580 <pxCurrentTCBConst2>)
 8005552:	6813      	ldr	r3, [r2, #0]
 8005554:	6818      	ldr	r0, [r3, #0]
 8005556:	3020      	adds	r0, #32
 8005558:	f380 8809 	msr	PSP, r0
 800555c:	2002      	movs	r0, #2
 800555e:	f380 8814 	msr	CONTROL, r0
 8005562:	f3bf 8f6f 	isb	sy
 8005566:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005568:	46ae      	mov	lr, r5
 800556a:	bc08      	pop	{r3}
 800556c:	bc04      	pop	{r2}
 800556e:	b662      	cpsie	i
 8005570:	4718      	bx	r3
 8005572:	46c0      	nop			; (mov r8, r8)
 8005574:	46c0      	nop			; (mov r8, r8)
 8005576:	46c0      	nop			; (mov r8, r8)
 8005578:	46c0      	nop			; (mov r8, r8)
 800557a:	46c0      	nop			; (mov r8, r8)
 800557c:	46c0      	nop			; (mov r8, r8)
 800557e:	46c0      	nop			; (mov r8, r8)

08005580 <pxCurrentTCBConst2>:
 8005580:	2000036c 	.word	0x2000036c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8005584:	46c0      	nop			; (mov r8, r8)
 8005586:	46c0      	nop			; (mov r8, r8)

08005588 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800558c:	4b0e      	ldr	r3, [pc, #56]	; (80055c8 <xPortStartScheduler+0x40>)
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	4b0d      	ldr	r3, [pc, #52]	; (80055c8 <xPortStartScheduler+0x40>)
 8005592:	21ff      	movs	r1, #255	; 0xff
 8005594:	0409      	lsls	r1, r1, #16
 8005596:	430a      	orrs	r2, r1
 8005598:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800559a:	4b0b      	ldr	r3, [pc, #44]	; (80055c8 <xPortStartScheduler+0x40>)
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	4b0a      	ldr	r3, [pc, #40]	; (80055c8 <xPortStartScheduler+0x40>)
 80055a0:	21ff      	movs	r1, #255	; 0xff
 80055a2:	0609      	lsls	r1, r1, #24
 80055a4:	430a      	orrs	r2, r1
 80055a6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80055a8:	f000 f898 	bl	80056dc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80055ac:	4b07      	ldr	r3, [pc, #28]	; (80055cc <xPortStartScheduler+0x44>)
 80055ae:	2200      	movs	r2, #0
 80055b0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80055b2:	f7ff ffcd 	bl	8005550 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80055b6:	f7ff fbc9 	bl	8004d4c <vTaskSwitchContext>
	prvTaskExitError();
 80055ba:	f7ff ffa9 	bl	8005510 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	0018      	movs	r0, r3
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	46c0      	nop			; (mov r8, r8)
 80055c8:	e000ed20 	.word	0xe000ed20
 80055cc:	20000018 	.word	0x20000018

080055d0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80055d4:	4b05      	ldr	r3, [pc, #20]	; (80055ec <vPortYield+0x1c>)
 80055d6:	2280      	movs	r2, #128	; 0x80
 80055d8:	0552      	lsls	r2, r2, #21
 80055da:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80055dc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80055e0:	f3bf 8f6f 	isb	sy
}
 80055e4:	46c0      	nop			; (mov r8, r8)
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	46c0      	nop			; (mov r8, r8)
 80055ec:	e000ed04 	.word	0xe000ed04

080055f0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80055f4:	b672      	cpsid	i
    uxCriticalNesting++;
 80055f6:	4b06      	ldr	r3, [pc, #24]	; (8005610 <vPortEnterCritical+0x20>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	1c5a      	adds	r2, r3, #1
 80055fc:	4b04      	ldr	r3, [pc, #16]	; (8005610 <vPortEnterCritical+0x20>)
 80055fe:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005600:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005604:	f3bf 8f6f 	isb	sy
}
 8005608:	46c0      	nop			; (mov r8, r8)
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	46c0      	nop			; (mov r8, r8)
 8005610:	20000018 	.word	0x20000018

08005614 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005614:	b580      	push	{r7, lr}
 8005616:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005618:	4b09      	ldr	r3, [pc, #36]	; (8005640 <vPortExitCritical+0x2c>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <vPortExitCritical+0x10>
 8005620:	b672      	cpsid	i
 8005622:	e7fe      	b.n	8005622 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8005624:	4b06      	ldr	r3, [pc, #24]	; (8005640 <vPortExitCritical+0x2c>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	1e5a      	subs	r2, r3, #1
 800562a:	4b05      	ldr	r3, [pc, #20]	; (8005640 <vPortExitCritical+0x2c>)
 800562c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800562e:	4b04      	ldr	r3, [pc, #16]	; (8005640 <vPortExitCritical+0x2c>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d100      	bne.n	8005638 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8005636:	b662      	cpsie	i
    }
}
 8005638:	46c0      	nop			; (mov r8, r8)
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	46c0      	nop			; (mov r8, r8)
 8005640:	20000018 	.word	0x20000018

08005644 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005644:	f3ef 8010 	mrs	r0, PRIMASK
 8005648:	b672      	cpsid	i
 800564a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800564c:	46c0      	nop			; (mov r8, r8)
 800564e:	0018      	movs	r0, r3

08005650 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005650:	f380 8810 	msr	PRIMASK, r0
 8005654:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8005656:	46c0      	nop			; (mov r8, r8)
	...

08005660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005660:	f3ef 8009 	mrs	r0, PSP
 8005664:	4b0e      	ldr	r3, [pc, #56]	; (80056a0 <pxCurrentTCBConst>)
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	3820      	subs	r0, #32
 800566a:	6010      	str	r0, [r2, #0]
 800566c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800566e:	4644      	mov	r4, r8
 8005670:	464d      	mov	r5, r9
 8005672:	4656      	mov	r6, sl
 8005674:	465f      	mov	r7, fp
 8005676:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005678:	b508      	push	{r3, lr}
 800567a:	b672      	cpsid	i
 800567c:	f7ff fb66 	bl	8004d4c <vTaskSwitchContext>
 8005680:	b662      	cpsie	i
 8005682:	bc0c      	pop	{r2, r3}
 8005684:	6811      	ldr	r1, [r2, #0]
 8005686:	6808      	ldr	r0, [r1, #0]
 8005688:	3010      	adds	r0, #16
 800568a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800568c:	46a0      	mov	r8, r4
 800568e:	46a9      	mov	r9, r5
 8005690:	46b2      	mov	sl, r6
 8005692:	46bb      	mov	fp, r7
 8005694:	f380 8809 	msr	PSP, r0
 8005698:	3820      	subs	r0, #32
 800569a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800569c:	4718      	bx	r3
 800569e:	46c0      	nop			; (mov r8, r8)

080056a0 <pxCurrentTCBConst>:
 80056a0:	2000036c 	.word	0x2000036c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80056a4:	46c0      	nop			; (mov r8, r8)
 80056a6:	46c0      	nop			; (mov r8, r8)

080056a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80056ae:	f7ff ffc9 	bl	8005644 <ulSetInterruptMaskFromISR>
 80056b2:	0003      	movs	r3, r0
 80056b4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80056b6:	f7ff fa99 	bl	8004bec <xTaskIncrementTick>
 80056ba:	1e03      	subs	r3, r0, #0
 80056bc:	d003      	beq.n	80056c6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80056be:	4b06      	ldr	r3, [pc, #24]	; (80056d8 <SysTick_Handler+0x30>)
 80056c0:	2280      	movs	r2, #128	; 0x80
 80056c2:	0552      	lsls	r2, r2, #21
 80056c4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	0018      	movs	r0, r3
 80056ca:	f7ff ffc1 	bl	8005650 <vClearInterruptMaskFromISR>
}
 80056ce:	46c0      	nop			; (mov r8, r8)
 80056d0:	46bd      	mov	sp, r7
 80056d2:	b002      	add	sp, #8
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	46c0      	nop			; (mov r8, r8)
 80056d8:	e000ed04 	.word	0xe000ed04

080056dc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 80056e0:	4b0b      	ldr	r3, [pc, #44]	; (8005710 <prvSetupTimerInterrupt+0x34>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 80056e6:	4b0b      	ldr	r3, [pc, #44]	; (8005714 <prvSetupTimerInterrupt+0x38>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056ec:	4b0a      	ldr	r3, [pc, #40]	; (8005718 <prvSetupTimerInterrupt+0x3c>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	22fa      	movs	r2, #250	; 0xfa
 80056f2:	0091      	lsls	r1, r2, #2
 80056f4:	0018      	movs	r0, r3
 80056f6:	f7fa fd0f 	bl	8000118 <__udivsi3>
 80056fa:	0003      	movs	r3, r0
 80056fc:	001a      	movs	r2, r3
 80056fe:	4b07      	ldr	r3, [pc, #28]	; (800571c <prvSetupTimerInterrupt+0x40>)
 8005700:	3a01      	subs	r2, #1
 8005702:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8005704:	4b02      	ldr	r3, [pc, #8]	; (8005710 <prvSetupTimerInterrupt+0x34>)
 8005706:	2207      	movs	r2, #7
 8005708:	601a      	str	r2, [r3, #0]
}
 800570a:	46c0      	nop			; (mov r8, r8)
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	e000e010 	.word	0xe000e010
 8005714:	e000e018 	.word	0xe000e018
 8005718:	2000000c 	.word	0x2000000c
 800571c:	e000e014 	.word	0xe000e014

08005720 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005728:	2300      	movs	r3, #0
 800572a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800572c:	f7ff f9c6 	bl	8004abc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005730:	4b49      	ldr	r3, [pc, #292]	; (8005858 <pvPortMalloc+0x138>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d101      	bne.n	800573c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005738:	f000 f8e0 	bl	80058fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800573c:	4b47      	ldr	r3, [pc, #284]	; (800585c <pvPortMalloc+0x13c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	4013      	ands	r3, r2
 8005744:	d000      	beq.n	8005748 <pvPortMalloc+0x28>
 8005746:	e079      	b.n	800583c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d012      	beq.n	8005774 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800574e:	2208      	movs	r2, #8
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	189b      	adds	r3, r3, r2
 8005754:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2207      	movs	r2, #7
 800575a:	4013      	ands	r3, r2
 800575c:	d00a      	beq.n	8005774 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2207      	movs	r2, #7
 8005762:	4393      	bics	r3, r2
 8005764:	3308      	adds	r3, #8
 8005766:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2207      	movs	r2, #7
 800576c:	4013      	ands	r3, r2
 800576e:	d001      	beq.n	8005774 <pvPortMalloc+0x54>
 8005770:	b672      	cpsid	i
 8005772:	e7fe      	b.n	8005772 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d060      	beq.n	800583c <pvPortMalloc+0x11c>
 800577a:	4b39      	ldr	r3, [pc, #228]	; (8005860 <pvPortMalloc+0x140>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	429a      	cmp	r2, r3
 8005782:	d85b      	bhi.n	800583c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005784:	4b37      	ldr	r3, [pc, #220]	; (8005864 <pvPortMalloc+0x144>)
 8005786:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8005788:	4b36      	ldr	r3, [pc, #216]	; (8005864 <pvPortMalloc+0x144>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800578e:	e004      	b.n	800579a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d903      	bls.n	80057ac <pvPortMalloc+0x8c>
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1f1      	bne.n	8005790 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80057ac:	4b2a      	ldr	r3, [pc, #168]	; (8005858 <pvPortMalloc+0x138>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d042      	beq.n	800583c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2208      	movs	r2, #8
 80057bc:	189b      	adds	r3, r3, r2
 80057be:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	1ad2      	subs	r2, r2, r3
 80057d0:	2308      	movs	r3, #8
 80057d2:	005b      	lsls	r3, r3, #1
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d916      	bls.n	8005806 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	18d3      	adds	r3, r2, r3
 80057de:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	2207      	movs	r2, #7
 80057e4:	4013      	ands	r3, r2
 80057e6:	d001      	beq.n	80057ec <pvPortMalloc+0xcc>
 80057e8:	b672      	cpsid	i
 80057ea:	e7fe      	b.n	80057ea <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	685a      	ldr	r2, [r3, #4]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	1ad2      	subs	r2, r2, r3
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	0018      	movs	r0, r3
 8005802:	f000 f8db 	bl	80059bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005806:	4b16      	ldr	r3, [pc, #88]	; (8005860 <pvPortMalloc+0x140>)
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	1ad2      	subs	r2, r2, r3
 8005810:	4b13      	ldr	r3, [pc, #76]	; (8005860 <pvPortMalloc+0x140>)
 8005812:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005814:	4b12      	ldr	r3, [pc, #72]	; (8005860 <pvPortMalloc+0x140>)
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	4b13      	ldr	r3, [pc, #76]	; (8005868 <pvPortMalloc+0x148>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	429a      	cmp	r2, r3
 800581e:	d203      	bcs.n	8005828 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005820:	4b0f      	ldr	r3, [pc, #60]	; (8005860 <pvPortMalloc+0x140>)
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	4b10      	ldr	r3, [pc, #64]	; (8005868 <pvPortMalloc+0x148>)
 8005826:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	4b0b      	ldr	r3, [pc, #44]	; (800585c <pvPortMalloc+0x13c>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	431a      	orrs	r2, r3
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2200      	movs	r2, #0
 800583a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800583c:	f7ff f94a 	bl	8004ad4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2207      	movs	r2, #7
 8005844:	4013      	ands	r3, r2
 8005846:	d001      	beq.n	800584c <pvPortMalloc+0x12c>
 8005848:	b672      	cpsid	i
 800584a:	e7fe      	b.n	800584a <pvPortMalloc+0x12a>
	return pvReturn;
 800584c:	68fb      	ldr	r3, [r7, #12]
}
 800584e:	0018      	movs	r0, r3
 8005850:	46bd      	mov	sp, r7
 8005852:	b006      	add	sp, #24
 8005854:	bd80      	pop	{r7, pc}
 8005856:	46c0      	nop			; (mov r8, r8)
 8005858:	200010a0 	.word	0x200010a0
 800585c:	200010ac 	.word	0x200010ac
 8005860:	200010a4 	.word	0x200010a4
 8005864:	20001098 	.word	0x20001098
 8005868:	200010a8 	.word	0x200010a8

0800586c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d035      	beq.n	80058ea <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800587e:	2308      	movs	r3, #8
 8005880:	425b      	negs	r3, r3
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	18d3      	adds	r3, r2, r3
 8005886:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	4b18      	ldr	r3, [pc, #96]	; (80058f4 <vPortFree+0x88>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4013      	ands	r3, r2
 8005896:	d101      	bne.n	800589c <vPortFree+0x30>
 8005898:	b672      	cpsid	i
 800589a:	e7fe      	b.n	800589a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d001      	beq.n	80058a8 <vPortFree+0x3c>
 80058a4:	b672      	cpsid	i
 80058a6:	e7fe      	b.n	80058a6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	685a      	ldr	r2, [r3, #4]
 80058ac:	4b11      	ldr	r3, [pc, #68]	; (80058f4 <vPortFree+0x88>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4013      	ands	r3, r2
 80058b2:	d01a      	beq.n	80058ea <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d116      	bne.n	80058ea <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	4b0c      	ldr	r3, [pc, #48]	; (80058f4 <vPortFree+0x88>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	43db      	mvns	r3, r3
 80058c6:	401a      	ands	r2, r3
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80058cc:	f7ff f8f6 	bl	8004abc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	4b08      	ldr	r3, [pc, #32]	; (80058f8 <vPortFree+0x8c>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	18d2      	adds	r2, r2, r3
 80058da:	4b07      	ldr	r3, [pc, #28]	; (80058f8 <vPortFree+0x8c>)
 80058dc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	0018      	movs	r0, r3
 80058e2:	f000 f86b 	bl	80059bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80058e6:	f7ff f8f5 	bl	8004ad4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80058ea:	46c0      	nop			; (mov r8, r8)
 80058ec:	46bd      	mov	sp, r7
 80058ee:	b004      	add	sp, #16
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	46c0      	nop			; (mov r8, r8)
 80058f4:	200010ac 	.word	0x200010ac
 80058f8:	200010a4 	.word	0x200010a4

080058fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005902:	23c0      	movs	r3, #192	; 0xc0
 8005904:	011b      	lsls	r3, r3, #4
 8005906:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005908:	4b26      	ldr	r3, [pc, #152]	; (80059a4 <prvHeapInit+0xa8>)
 800590a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2207      	movs	r2, #7
 8005910:	4013      	ands	r3, r2
 8005912:	d00c      	beq.n	800592e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	3307      	adds	r3, #7
 8005918:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2207      	movs	r2, #7
 800591e:	4393      	bics	r3, r2
 8005920:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	1ad2      	subs	r2, r2, r3
 8005928:	4b1e      	ldr	r3, [pc, #120]	; (80059a4 <prvHeapInit+0xa8>)
 800592a:	18d3      	adds	r3, r2, r3
 800592c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005932:	4b1d      	ldr	r3, [pc, #116]	; (80059a8 <prvHeapInit+0xac>)
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005938:	4b1b      	ldr	r3, [pc, #108]	; (80059a8 <prvHeapInit+0xac>)
 800593a:	2200      	movs	r2, #0
 800593c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	18d3      	adds	r3, r2, r3
 8005944:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005946:	2208      	movs	r2, #8
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	1a9b      	subs	r3, r3, r2
 800594c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2207      	movs	r2, #7
 8005952:	4393      	bics	r3, r2
 8005954:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	4b14      	ldr	r3, [pc, #80]	; (80059ac <prvHeapInit+0xb0>)
 800595a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800595c:	4b13      	ldr	r3, [pc, #76]	; (80059ac <prvHeapInit+0xb0>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2200      	movs	r2, #0
 8005962:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005964:	4b11      	ldr	r3, [pc, #68]	; (80059ac <prvHeapInit+0xb0>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2200      	movs	r2, #0
 800596a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	1ad2      	subs	r2, r2, r3
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800597a:	4b0c      	ldr	r3, [pc, #48]	; (80059ac <prvHeapInit+0xb0>)
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	4b0a      	ldr	r3, [pc, #40]	; (80059b0 <prvHeapInit+0xb4>)
 8005988:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	685a      	ldr	r2, [r3, #4]
 800598e:	4b09      	ldr	r3, [pc, #36]	; (80059b4 <prvHeapInit+0xb8>)
 8005990:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005992:	4b09      	ldr	r3, [pc, #36]	; (80059b8 <prvHeapInit+0xbc>)
 8005994:	2280      	movs	r2, #128	; 0x80
 8005996:	0612      	lsls	r2, r2, #24
 8005998:	601a      	str	r2, [r3, #0]
}
 800599a:	46c0      	nop			; (mov r8, r8)
 800599c:	46bd      	mov	sp, r7
 800599e:	b004      	add	sp, #16
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	46c0      	nop			; (mov r8, r8)
 80059a4:	20000498 	.word	0x20000498
 80059a8:	20001098 	.word	0x20001098
 80059ac:	200010a0 	.word	0x200010a0
 80059b0:	200010a8 	.word	0x200010a8
 80059b4:	200010a4 	.word	0x200010a4
 80059b8:	200010ac 	.word	0x200010ac

080059bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80059c4:	4b27      	ldr	r3, [pc, #156]	; (8005a64 <prvInsertBlockIntoFreeList+0xa8>)
 80059c6:	60fb      	str	r3, [r7, #12]
 80059c8:	e002      	b.n	80059d0 <prvInsertBlockIntoFreeList+0x14>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d8f7      	bhi.n	80059ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	18d3      	adds	r3, r2, r3
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d108      	bne.n	80059fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	18d2      	adds	r2, r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	18d2      	adds	r2, r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d118      	bne.n	8005a44 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	4b14      	ldr	r3, [pc, #80]	; (8005a68 <prvInsertBlockIntoFreeList+0xac>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d00d      	beq.n	8005a3a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	18d2      	adds	r2, r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	e008      	b.n	8005a4c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a3a:	4b0b      	ldr	r3, [pc, #44]	; (8005a68 <prvInsertBlockIntoFreeList+0xac>)
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	e003      	b.n	8005a4c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d002      	beq.n	8005a5a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a5a:	46c0      	nop			; (mov r8, r8)
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	b004      	add	sp, #16
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	46c0      	nop			; (mov r8, r8)
 8005a64:	20001098 	.word	0x20001098
 8005a68:	200010a0 	.word	0x200010a0

08005a6c <__itoa>:
 8005a6c:	1e93      	subs	r3, r2, #2
 8005a6e:	b510      	push	{r4, lr}
 8005a70:	000c      	movs	r4, r1
 8005a72:	2b22      	cmp	r3, #34	; 0x22
 8005a74:	d904      	bls.n	8005a80 <__itoa+0x14>
 8005a76:	2300      	movs	r3, #0
 8005a78:	001c      	movs	r4, r3
 8005a7a:	700b      	strb	r3, [r1, #0]
 8005a7c:	0020      	movs	r0, r4
 8005a7e:	bd10      	pop	{r4, pc}
 8005a80:	2a0a      	cmp	r2, #10
 8005a82:	d109      	bne.n	8005a98 <__itoa+0x2c>
 8005a84:	2800      	cmp	r0, #0
 8005a86:	da07      	bge.n	8005a98 <__itoa+0x2c>
 8005a88:	232d      	movs	r3, #45	; 0x2d
 8005a8a:	700b      	strb	r3, [r1, #0]
 8005a8c:	2101      	movs	r1, #1
 8005a8e:	4240      	negs	r0, r0
 8005a90:	1861      	adds	r1, r4, r1
 8005a92:	f000 f807 	bl	8005aa4 <__utoa>
 8005a96:	e7f1      	b.n	8005a7c <__itoa+0x10>
 8005a98:	2100      	movs	r1, #0
 8005a9a:	e7f9      	b.n	8005a90 <__itoa+0x24>

08005a9c <itoa>:
 8005a9c:	b510      	push	{r4, lr}
 8005a9e:	f7ff ffe5 	bl	8005a6c <__itoa>
 8005aa2:	bd10      	pop	{r4, pc}

08005aa4 <__utoa>:
 8005aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aa6:	000c      	movs	r4, r1
 8005aa8:	0016      	movs	r6, r2
 8005aaa:	b08d      	sub	sp, #52	; 0x34
 8005aac:	2225      	movs	r2, #37	; 0x25
 8005aae:	0007      	movs	r7, r0
 8005ab0:	4915      	ldr	r1, [pc, #84]	; (8005b08 <__utoa+0x64>)
 8005ab2:	a802      	add	r0, sp, #8
 8005ab4:	f000 f864 	bl	8005b80 <memcpy>
 8005ab8:	1e62      	subs	r2, r4, #1
 8005aba:	1eb3      	subs	r3, r6, #2
 8005abc:	2500      	movs	r5, #0
 8005abe:	9201      	str	r2, [sp, #4]
 8005ac0:	2b22      	cmp	r3, #34	; 0x22
 8005ac2:	d904      	bls.n	8005ace <__utoa+0x2a>
 8005ac4:	7025      	strb	r5, [r4, #0]
 8005ac6:	002c      	movs	r4, r5
 8005ac8:	0020      	movs	r0, r4
 8005aca:	b00d      	add	sp, #52	; 0x34
 8005acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ace:	0038      	movs	r0, r7
 8005ad0:	0031      	movs	r1, r6
 8005ad2:	f7fa fba7 	bl	8000224 <__aeabi_uidivmod>
 8005ad6:	000b      	movs	r3, r1
 8005ad8:	aa02      	add	r2, sp, #8
 8005ada:	5cd3      	ldrb	r3, [r2, r3]
 8005adc:	9a01      	ldr	r2, [sp, #4]
 8005ade:	0029      	movs	r1, r5
 8005ae0:	3501      	adds	r5, #1
 8005ae2:	5553      	strb	r3, [r2, r5]
 8005ae4:	003b      	movs	r3, r7
 8005ae6:	0007      	movs	r7, r0
 8005ae8:	429e      	cmp	r6, r3
 8005aea:	d9f0      	bls.n	8005ace <__utoa+0x2a>
 8005aec:	2300      	movs	r3, #0
 8005aee:	0022      	movs	r2, r4
 8005af0:	5563      	strb	r3, [r4, r5]
 8005af2:	000b      	movs	r3, r1
 8005af4:	1ac8      	subs	r0, r1, r3
 8005af6:	4283      	cmp	r3, r0
 8005af8:	dde6      	ble.n	8005ac8 <__utoa+0x24>
 8005afa:	7810      	ldrb	r0, [r2, #0]
 8005afc:	5ce5      	ldrb	r5, [r4, r3]
 8005afe:	7015      	strb	r5, [r2, #0]
 8005b00:	54e0      	strb	r0, [r4, r3]
 8005b02:	3201      	adds	r2, #1
 8005b04:	3b01      	subs	r3, #1
 8005b06:	e7f5      	b.n	8005af4 <__utoa+0x50>
 8005b08:	08005d98 	.word	0x08005d98

08005b0c <memset>:
 8005b0c:	0003      	movs	r3, r0
 8005b0e:	1882      	adds	r2, r0, r2
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d100      	bne.n	8005b16 <memset+0xa>
 8005b14:	4770      	bx	lr
 8005b16:	7019      	strb	r1, [r3, #0]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	e7f9      	b.n	8005b10 <memset+0x4>

08005b1c <strcat>:
 8005b1c:	0002      	movs	r2, r0
 8005b1e:	b510      	push	{r4, lr}
 8005b20:	7813      	ldrb	r3, [r2, #0]
 8005b22:	0014      	movs	r4, r2
 8005b24:	3201      	adds	r2, #1
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1fa      	bne.n	8005b20 <strcat+0x4>
 8005b2a:	5cca      	ldrb	r2, [r1, r3]
 8005b2c:	54e2      	strb	r2, [r4, r3]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	2a00      	cmp	r2, #0
 8005b32:	d1fa      	bne.n	8005b2a <strcat+0xe>
 8005b34:	bd10      	pop	{r4, pc}
	...

08005b38 <__libc_init_array>:
 8005b38:	b570      	push	{r4, r5, r6, lr}
 8005b3a:	2600      	movs	r6, #0
 8005b3c:	4c0c      	ldr	r4, [pc, #48]	; (8005b70 <__libc_init_array+0x38>)
 8005b3e:	4d0d      	ldr	r5, [pc, #52]	; (8005b74 <__libc_init_array+0x3c>)
 8005b40:	1b64      	subs	r4, r4, r5
 8005b42:	10a4      	asrs	r4, r4, #2
 8005b44:	42a6      	cmp	r6, r4
 8005b46:	d109      	bne.n	8005b5c <__libc_init_array+0x24>
 8005b48:	2600      	movs	r6, #0
 8005b4a:	f000 f823 	bl	8005b94 <_init>
 8005b4e:	4c0a      	ldr	r4, [pc, #40]	; (8005b78 <__libc_init_array+0x40>)
 8005b50:	4d0a      	ldr	r5, [pc, #40]	; (8005b7c <__libc_init_array+0x44>)
 8005b52:	1b64      	subs	r4, r4, r5
 8005b54:	10a4      	asrs	r4, r4, #2
 8005b56:	42a6      	cmp	r6, r4
 8005b58:	d105      	bne.n	8005b66 <__libc_init_array+0x2e>
 8005b5a:	bd70      	pop	{r4, r5, r6, pc}
 8005b5c:	00b3      	lsls	r3, r6, #2
 8005b5e:	58eb      	ldr	r3, [r5, r3]
 8005b60:	4798      	blx	r3
 8005b62:	3601      	adds	r6, #1
 8005b64:	e7ee      	b.n	8005b44 <__libc_init_array+0xc>
 8005b66:	00b3      	lsls	r3, r6, #2
 8005b68:	58eb      	ldr	r3, [r5, r3]
 8005b6a:	4798      	blx	r3
 8005b6c:	3601      	adds	r6, #1
 8005b6e:	e7f2      	b.n	8005b56 <__libc_init_array+0x1e>
 8005b70:	08005dc8 	.word	0x08005dc8
 8005b74:	08005dc8 	.word	0x08005dc8
 8005b78:	08005dcc 	.word	0x08005dcc
 8005b7c:	08005dc8 	.word	0x08005dc8

08005b80 <memcpy>:
 8005b80:	2300      	movs	r3, #0
 8005b82:	b510      	push	{r4, lr}
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d100      	bne.n	8005b8a <memcpy+0xa>
 8005b88:	bd10      	pop	{r4, pc}
 8005b8a:	5ccc      	ldrb	r4, [r1, r3]
 8005b8c:	54c4      	strb	r4, [r0, r3]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	e7f8      	b.n	8005b84 <memcpy+0x4>
	...

08005b94 <_init>:
 8005b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b96:	46c0      	nop			; (mov r8, r8)
 8005b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b9a:	bc08      	pop	{r3}
 8005b9c:	469e      	mov	lr, r3
 8005b9e:	4770      	bx	lr

08005ba0 <_fini>:
 8005ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ba2:	46c0      	nop			; (mov r8, r8)
 8005ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ba6:	bc08      	pop	{r3}
 8005ba8:	469e      	mov	lr, r3
 8005baa:	4770      	bx	lr

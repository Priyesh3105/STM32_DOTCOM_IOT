
interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a18  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08002ad8  08002ad8  00012ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b90  08002b90  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002b90  08002b90  00012b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b98  08002b98  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b98  08002b98  00012b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b9c  08002b9c  00012b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002ba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000070  08002c10  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  08002c10  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000392a  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001099  00000000  00000000  000239c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000480  00000000  00000000  00024a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003d8  00000000  00000000  00024ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013945  00000000  00000000  000252b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000058cd  00000000  00000000  00038bfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00073bef  00000000  00000000  0003e4ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b20b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001660  00000000  00000000  000b210c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002ac0 	.word	0x08002ac0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08002ac0 	.word	0x08002ac0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4647      	mov	r7, r8
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	4699      	mov	r9, r3
 8000280:	0c3b      	lsrs	r3, r7, #16
 8000282:	469c      	mov	ip, r3
 8000284:	0413      	lsls	r3, r2, #16
 8000286:	0c1b      	lsrs	r3, r3, #16
 8000288:	001d      	movs	r5, r3
 800028a:	000e      	movs	r6, r1
 800028c:	4661      	mov	r1, ip
 800028e:	0400      	lsls	r0, r0, #16
 8000290:	0c14      	lsrs	r4, r2, #16
 8000292:	0c00      	lsrs	r0, r0, #16
 8000294:	4345      	muls	r5, r0
 8000296:	434b      	muls	r3, r1
 8000298:	4360      	muls	r0, r4
 800029a:	4361      	muls	r1, r4
 800029c:	18c0      	adds	r0, r0, r3
 800029e:	0c2c      	lsrs	r4, r5, #16
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4372      	muls	r2, r6
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	4463      	add	r3, ip
 80002ba:	042d      	lsls	r5, r5, #16
 80002bc:	0c2d      	lsrs	r5, r5, #16
 80002be:	18c9      	adds	r1, r1, r3
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	1889      	adds	r1, r1, r2
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	469b      	mov	fp, r3
 8000306:	d433      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000308:	465a      	mov	r2, fp
 800030a:	4653      	mov	r3, sl
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83a      	bhi.n	8000392 <__udivmoddi4+0xc2>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e078      	b.n	8000414 <__udivmoddi4+0x144>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e075      	b.n	800041a <__udivmoddi4+0x14a>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e028      	b.n	800039a <__udivmoddi4+0xca>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	2320      	movs	r3, #32
 8000374:	1a9b      	subs	r3, r3, r2
 8000376:	4652      	mov	r2, sl
 8000378:	40da      	lsrs	r2, r3
 800037a:	4641      	mov	r1, r8
 800037c:	0013      	movs	r3, r2
 800037e:	464a      	mov	r2, r9
 8000380:	408a      	lsls	r2, r1
 8000382:	0017      	movs	r7, r2
 8000384:	4642      	mov	r2, r8
 8000386:	431f      	orrs	r7, r3
 8000388:	4653      	mov	r3, sl
 800038a:	4093      	lsls	r3, r2
 800038c:	001e      	movs	r6, r3
 800038e:	42af      	cmp	r7, r5
 8000390:	d9c4      	bls.n	800031c <__udivmoddi4+0x4c>
 8000392:	2200      	movs	r2, #0
 8000394:	2300      	movs	r3, #0
 8000396:	9200      	str	r2, [sp, #0]
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	4643      	mov	r3, r8
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0d9      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a0:	07fb      	lsls	r3, r7, #31
 80003a2:	0872      	lsrs	r2, r6, #1
 80003a4:	431a      	orrs	r2, r3
 80003a6:	4646      	mov	r6, r8
 80003a8:	087b      	lsrs	r3, r7, #1
 80003aa:	e00e      	b.n	80003ca <__udivmoddi4+0xfa>
 80003ac:	42ab      	cmp	r3, r5
 80003ae:	d101      	bne.n	80003b4 <__udivmoddi4+0xe4>
 80003b0:	42a2      	cmp	r2, r4
 80003b2:	d80c      	bhi.n	80003ce <__udivmoddi4+0xfe>
 80003b4:	1aa4      	subs	r4, r4, r2
 80003b6:	419d      	sbcs	r5, r3
 80003b8:	2001      	movs	r0, #1
 80003ba:	1924      	adds	r4, r4, r4
 80003bc:	416d      	adcs	r5, r5
 80003be:	2100      	movs	r1, #0
 80003c0:	3e01      	subs	r6, #1
 80003c2:	1824      	adds	r4, r4, r0
 80003c4:	414d      	adcs	r5, r1
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d006      	beq.n	80003d8 <__udivmoddi4+0x108>
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d9ee      	bls.n	80003ac <__udivmoddi4+0xdc>
 80003ce:	3e01      	subs	r6, #1
 80003d0:	1924      	adds	r4, r4, r4
 80003d2:	416d      	adcs	r5, r5
 80003d4:	2e00      	cmp	r6, #0
 80003d6:	d1f8      	bne.n	80003ca <__udivmoddi4+0xfa>
 80003d8:	9800      	ldr	r0, [sp, #0]
 80003da:	9901      	ldr	r1, [sp, #4]
 80003dc:	465b      	mov	r3, fp
 80003de:	1900      	adds	r0, r0, r4
 80003e0:	4169      	adcs	r1, r5
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	db24      	blt.n	8000430 <__udivmoddi4+0x160>
 80003e6:	002b      	movs	r3, r5
 80003e8:	465a      	mov	r2, fp
 80003ea:	4644      	mov	r4, r8
 80003ec:	40d3      	lsrs	r3, r2
 80003ee:	002a      	movs	r2, r5
 80003f0:	40e2      	lsrs	r2, r4
 80003f2:	001c      	movs	r4, r3
 80003f4:	465b      	mov	r3, fp
 80003f6:	0015      	movs	r5, r2
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db2a      	blt.n	8000452 <__udivmoddi4+0x182>
 80003fc:	0026      	movs	r6, r4
 80003fe:	409e      	lsls	r6, r3
 8000400:	0033      	movs	r3, r6
 8000402:	0026      	movs	r6, r4
 8000404:	4647      	mov	r7, r8
 8000406:	40be      	lsls	r6, r7
 8000408:	0032      	movs	r2, r6
 800040a:	1a80      	subs	r0, r0, r2
 800040c:	4199      	sbcs	r1, r3
 800040e:	9000      	str	r0, [sp, #0]
 8000410:	9101      	str	r1, [sp, #4]
 8000412:	e79f      	b.n	8000354 <__udivmoddi4+0x84>
 8000414:	42a3      	cmp	r3, r4
 8000416:	d8bc      	bhi.n	8000392 <__udivmoddi4+0xc2>
 8000418:	e783      	b.n	8000322 <__udivmoddi4+0x52>
 800041a:	4642      	mov	r2, r8
 800041c:	2320      	movs	r3, #32
 800041e:	2100      	movs	r1, #0
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	2200      	movs	r2, #0
 8000424:	9100      	str	r1, [sp, #0]
 8000426:	9201      	str	r2, [sp, #4]
 8000428:	2201      	movs	r2, #1
 800042a:	40da      	lsrs	r2, r3
 800042c:	9201      	str	r2, [sp, #4]
 800042e:	e786      	b.n	800033e <__udivmoddi4+0x6e>
 8000430:	4642      	mov	r2, r8
 8000432:	2320      	movs	r3, #32
 8000434:	1a9b      	subs	r3, r3, r2
 8000436:	002a      	movs	r2, r5
 8000438:	4646      	mov	r6, r8
 800043a:	409a      	lsls	r2, r3
 800043c:	0023      	movs	r3, r4
 800043e:	40f3      	lsrs	r3, r6
 8000440:	4644      	mov	r4, r8
 8000442:	4313      	orrs	r3, r2
 8000444:	002a      	movs	r2, r5
 8000446:	40e2      	lsrs	r2, r4
 8000448:	001c      	movs	r4, r3
 800044a:	465b      	mov	r3, fp
 800044c:	0015      	movs	r5, r2
 800044e:	2b00      	cmp	r3, #0
 8000450:	dad4      	bge.n	80003fc <__udivmoddi4+0x12c>
 8000452:	4642      	mov	r2, r8
 8000454:	002f      	movs	r7, r5
 8000456:	2320      	movs	r3, #32
 8000458:	0026      	movs	r6, r4
 800045a:	4097      	lsls	r7, r2
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	40de      	lsrs	r6, r3
 8000460:	003b      	movs	r3, r7
 8000462:	4333      	orrs	r3, r6
 8000464:	e7cd      	b.n	8000402 <__udivmoddi4+0x132>
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	; (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c0:	f000 fa28 	bl	8000914 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c4:	f000 f842 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c8:	f000 f89a 	bl	8000600 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (flag ==1){
 80004cc:	4b1b      	ldr	r3, [pc, #108]	; (800053c <main+0x80>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d11a      	bne.n	800050a <main+0x4e>
		  HAL_GPIO_WritePin(BSP_GREEN_LED_GPIO_Port, BSP_GREEN_LED_Pin, SET);
 80004d4:	4b1a      	ldr	r3, [pc, #104]	; (8000540 <main+0x84>)
 80004d6:	2201      	movs	r2, #1
 80004d8:	2110      	movs	r1, #16
 80004da:	0018      	movs	r0, r3
 80004dc:	f000 fcfb 	bl	8000ed6 <HAL_GPIO_WritePin>
		  pin_val = HAL_GPIO_ReadPin(BSP_GREEN_LED_GPIO_Port, BSP_GREEN_LED_Pin);
 80004e0:	4b17      	ldr	r3, [pc, #92]	; (8000540 <main+0x84>)
 80004e2:	2110      	movs	r1, #16
 80004e4:	0018      	movs	r0, r3
 80004e6:	f000 fcd9 	bl	8000e9c <HAL_GPIO_ReadPin>
 80004ea:	0003      	movs	r3, r0
 80004ec:	001a      	movs	r2, r3
 80004ee:	4b15      	ldr	r3, [pc, #84]	; (8000544 <main+0x88>)
 80004f0:	701a      	strb	r2, [r3, #0]
		  printf("%d\n", pin_val);
 80004f2:	4b14      	ldr	r3, [pc, #80]	; (8000544 <main+0x88>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	001a      	movs	r2, r3
 80004f8:	4b13      	ldr	r3, [pc, #76]	; (8000548 <main+0x8c>)
 80004fa:	0011      	movs	r1, r2
 80004fc:	0018      	movs	r0, r3
 80004fe:	f001 fb07 	bl	8001b10 <iprintf>
		  flag = 0;
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <main+0x80>)
 8000504:	2200      	movs	r2, #0
 8000506:	701a      	strb	r2, [r3, #0]
 8000508:	e7e0      	b.n	80004cc <main+0x10>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(BSP_GREEN_LED_GPIO_Port, BSP_GREEN_LED_Pin, RESET);
 800050a:	4b0d      	ldr	r3, [pc, #52]	; (8000540 <main+0x84>)
 800050c:	2200      	movs	r2, #0
 800050e:	2110      	movs	r1, #16
 8000510:	0018      	movs	r0, r3
 8000512:	f000 fce0 	bl	8000ed6 <HAL_GPIO_WritePin>
		  pin_val = HAL_GPIO_ReadPin(BSP_GREEN_LED_GPIO_Port, BSP_GREEN_LED_Pin);
 8000516:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <main+0x84>)
 8000518:	2110      	movs	r1, #16
 800051a:	0018      	movs	r0, r3
 800051c:	f000 fcbe 	bl	8000e9c <HAL_GPIO_ReadPin>
 8000520:	0003      	movs	r3, r0
 8000522:	001a      	movs	r2, r3
 8000524:	4b07      	ldr	r3, [pc, #28]	; (8000544 <main+0x88>)
 8000526:	701a      	strb	r2, [r3, #0]
		  printf("%d\n", pin_val);
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <main+0x88>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	001a      	movs	r2, r3
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <main+0x8c>)
 8000530:	0011      	movs	r1, r2
 8000532:	0018      	movs	r0, r3
 8000534:	f001 faec 	bl	8001b10 <iprintf>
	  if (flag ==1){
 8000538:	e7c8      	b.n	80004cc <main+0x10>
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	2000008c 	.word	0x2000008c
 8000540:	50000400 	.word	0x50000400
 8000544:	2000008d 	.word	0x2000008d
 8000548:	08002ad8 	.word	0x08002ad8

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b590      	push	{r4, r7, lr}
 800054e:	b095      	sub	sp, #84	; 0x54
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	2418      	movs	r4, #24
 8000554:	193b      	adds	r3, r7, r4
 8000556:	0018      	movs	r0, r3
 8000558:	2338      	movs	r3, #56	; 0x38
 800055a:	001a      	movs	r2, r3
 800055c:	2100      	movs	r1, #0
 800055e:	f001 facf 	bl	8001b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	0018      	movs	r0, r3
 8000566:	2314      	movs	r3, #20
 8000568:	001a      	movs	r2, r3
 800056a:	2100      	movs	r1, #0
 800056c:	f001 fac8 	bl	8001b00 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000570:	4b21      	ldr	r3, [pc, #132]	; (80005f8 <SystemClock_Config+0xac>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a21      	ldr	r2, [pc, #132]	; (80005fc <SystemClock_Config+0xb0>)
 8000576:	401a      	ands	r2, r3
 8000578:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <SystemClock_Config+0xac>)
 800057a:	2180      	movs	r1, #128	; 0x80
 800057c:	0109      	lsls	r1, r1, #4
 800057e:	430a      	orrs	r2, r1
 8000580:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000582:	0021      	movs	r1, r4
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2201      	movs	r2, #1
 8000588:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2280      	movs	r2, #128	; 0x80
 800058e:	0252      	lsls	r2, r2, #9
 8000590:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2202      	movs	r2, #2
 8000596:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2280      	movs	r2, #128	; 0x80
 800059c:	0252      	lsls	r2, r2, #9
 800059e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_12;
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	2280      	movs	r2, #128	; 0x80
 80005a4:	0352      	lsls	r2, r2, #13
 80005a6:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	2280      	movs	r2, #128	; 0x80
 80005ac:	0412      	lsls	r2, r2, #16
 80005ae:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	0018      	movs	r0, r3
 80005b4:	f000 fcc8 	bl	8000f48 <HAL_RCC_OscConfig>
 80005b8:	1e03      	subs	r3, r0, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005bc:	f000 f8a6 	bl	800070c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	220f      	movs	r2, #15
 80005c4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2203      	movs	r2, #3
 80005ca:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	2200      	movs	r2, #0
 80005d6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	2200      	movs	r2, #0
 80005dc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2101      	movs	r1, #1
 80005e2:	0018      	movs	r0, r3
 80005e4:	f001 f874 	bl	80016d0 <HAL_RCC_ClockConfig>
 80005e8:	1e03      	subs	r3, r0, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005ec:	f000 f88e 	bl	800070c <Error_Handler>
  }
}
 80005f0:	46c0      	nop			; (mov r8, r8)
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b015      	add	sp, #84	; 0x54
 80005f6:	bd90      	pop	{r4, r7, pc}
 80005f8:	40007000 	.word	0x40007000
 80005fc:	ffffe7ff 	.word	0xffffe7ff

08000600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000600:	b590      	push	{r4, r7, lr}
 8000602:	b08b      	sub	sp, #44	; 0x2c
 8000604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000606:	2414      	movs	r4, #20
 8000608:	193b      	adds	r3, r7, r4
 800060a:	0018      	movs	r0, r3
 800060c:	2314      	movs	r3, #20
 800060e:	001a      	movs	r2, r3
 8000610:	2100      	movs	r1, #0
 8000612:	f001 fa75 	bl	8001b00 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000616:	4b33      	ldr	r3, [pc, #204]	; (80006e4 <MX_GPIO_Init+0xe4>)
 8000618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800061a:	4b32      	ldr	r3, [pc, #200]	; (80006e4 <MX_GPIO_Init+0xe4>)
 800061c:	2104      	movs	r1, #4
 800061e:	430a      	orrs	r2, r1
 8000620:	62da      	str	r2, [r3, #44]	; 0x2c
 8000622:	4b30      	ldr	r3, [pc, #192]	; (80006e4 <MX_GPIO_Init+0xe4>)
 8000624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000626:	2204      	movs	r2, #4
 8000628:	4013      	ands	r3, r2
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800062e:	4b2d      	ldr	r3, [pc, #180]	; (80006e4 <MX_GPIO_Init+0xe4>)
 8000630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000632:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <MX_GPIO_Init+0xe4>)
 8000634:	2180      	movs	r1, #128	; 0x80
 8000636:	430a      	orrs	r2, r1
 8000638:	62da      	str	r2, [r3, #44]	; 0x2c
 800063a:	4b2a      	ldr	r3, [pc, #168]	; (80006e4 <MX_GPIO_Init+0xe4>)
 800063c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800063e:	2280      	movs	r2, #128	; 0x80
 8000640:	4013      	ands	r3, r2
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	4b27      	ldr	r3, [pc, #156]	; (80006e4 <MX_GPIO_Init+0xe4>)
 8000648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800064a:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <MX_GPIO_Init+0xe4>)
 800064c:	2101      	movs	r1, #1
 800064e:	430a      	orrs	r2, r1
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
 8000652:	4b24      	ldr	r3, [pc, #144]	; (80006e4 <MX_GPIO_Init+0xe4>)
 8000654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000656:	2201      	movs	r2, #1
 8000658:	4013      	ands	r3, r2
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065e:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <MX_GPIO_Init+0xe4>)
 8000660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000662:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <MX_GPIO_Init+0xe4>)
 8000664:	2102      	movs	r1, #2
 8000666:	430a      	orrs	r2, r1
 8000668:	62da      	str	r2, [r3, #44]	; 0x2c
 800066a:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <MX_GPIO_Init+0xe4>)
 800066c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800066e:	2202      	movs	r2, #2
 8000670:	4013      	ands	r3, r2
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_GREEN_LED_GPIO_Port, BSP_GREEN_LED_Pin, GPIO_PIN_RESET);
 8000676:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <MX_GPIO_Init+0xe8>)
 8000678:	2200      	movs	r2, #0
 800067a:	2110      	movs	r1, #16
 800067c:	0018      	movs	r0, r3
 800067e:	f000 fc2a 	bl	8000ed6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000682:	193b      	adds	r3, r7, r4
 8000684:	2201      	movs	r2, #1
 8000686:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000688:	193b      	adds	r3, r7, r4
 800068a:	2288      	movs	r2, #136	; 0x88
 800068c:	0352      	lsls	r2, r2, #13
 800068e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	193b      	adds	r3, r7, r4
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000696:	193a      	adds	r2, r7, r4
 8000698:	23a0      	movs	r3, #160	; 0xa0
 800069a:	05db      	lsls	r3, r3, #23
 800069c:	0011      	movs	r1, r2
 800069e:	0018      	movs	r0, r3
 80006a0:	f000 fa86 	bl	8000bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BSP_GREEN_LED_Pin */
  GPIO_InitStruct.Pin = BSP_GREEN_LED_Pin;
 80006a4:	0021      	movs	r1, r4
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2210      	movs	r2, #16
 80006aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2201      	movs	r2, #1
 80006b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BSP_GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	4a09      	ldr	r2, [pc, #36]	; (80006e8 <MX_GPIO_Init+0xe8>)
 80006c2:	0019      	movs	r1, r3
 80006c4:	0010      	movs	r0, r2
 80006c6:	f000 fa73 	bl	8000bb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2100      	movs	r1, #0
 80006ce:	2005      	movs	r0, #5
 80006d0:	f000 fa3c 	bl	8000b4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80006d4:	2005      	movs	r0, #5
 80006d6:	f000 fa4e 	bl	8000b76 <HAL_NVIC_EnableIRQ>

}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	46bd      	mov	sp, r7
 80006de:	b00b      	add	sp, #44	; 0x2c
 80006e0:	bd90      	pop	{r4, r7, pc}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	40021000 	.word	0x40021000
 80006e8:	50000400 	.word	0x50000400

080006ec <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	0002      	movs	r2, r0
 80006f4:	1dbb      	adds	r3, r7, #6
 80006f6:	801a      	strh	r2, [r3, #0]
	flag =1;
 80006f8:	4b03      	ldr	r3, [pc, #12]	; (8000708 <HAL_GPIO_EXTI_Callback+0x1c>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	701a      	strb	r2, [r3, #0]
}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	b002      	add	sp, #8
 8000704:	bd80      	pop	{r7, pc}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	2000008c 	.word	0x2000008c

0800070c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000710:	b672      	cpsid	i
}
 8000712:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000714:	e7fe      	b.n	8000714 <Error_Handler+0x8>
	...

08000718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <HAL_MspInit+0x24>)
 800071e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <HAL_MspInit+0x24>)
 8000722:	2101      	movs	r1, #1
 8000724:	430a      	orrs	r2, r1
 8000726:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000728:	4b04      	ldr	r3, [pc, #16]	; (800073c <HAL_MspInit+0x24>)
 800072a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800072c:	4b03      	ldr	r3, [pc, #12]	; (800073c <HAL_MspInit+0x24>)
 800072e:	2180      	movs	r1, #128	; 0x80
 8000730:	0549      	lsls	r1, r1, #21
 8000732:	430a      	orrs	r2, r1
 8000734:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40021000 	.word	0x40021000

08000740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000744:	e7fe      	b.n	8000744 <NMI_Handler+0x4>

08000746 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000746:	b580      	push	{r7, lr}
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074a:	e7fe      	b.n	800074a <HardFault_Handler+0x4>

0800074c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000764:	f000 f92a 	bl	80009bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000772:	2001      	movs	r0, #1
 8000774:	f000 fbcc 	bl	8000f10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	b086      	sub	sp, #24
 8000782:	af00      	add	r7, sp, #0
 8000784:	60f8      	str	r0, [r7, #12]
 8000786:	60b9      	str	r1, [r7, #8]
 8000788:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
 800078e:	e00a      	b.n	80007a6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000790:	e000      	b.n	8000794 <_read+0x16>
 8000792:	bf00      	nop
 8000794:	0001      	movs	r1, r0
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	1c5a      	adds	r2, r3, #1
 800079a:	60ba      	str	r2, [r7, #8]
 800079c:	b2ca      	uxtb	r2, r1
 800079e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	3301      	adds	r3, #1
 80007a4:	617b      	str	r3, [r7, #20]
 80007a6:	697a      	ldr	r2, [r7, #20]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	429a      	cmp	r2, r3
 80007ac:	dbf0      	blt.n	8000790 <_read+0x12>
	}

return len;
 80007ae:	687b      	ldr	r3, [r7, #4]
}
 80007b0:	0018      	movs	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	b006      	add	sp, #24
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	e009      	b.n	80007de <_write+0x26>
	{
		__io_putchar(*ptr++);
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	60ba      	str	r2, [r7, #8]
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	0018      	movs	r0, r3
 80007d4:	e000      	b.n	80007d8 <_write+0x20>
 80007d6:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	3301      	adds	r3, #1
 80007dc:	617b      	str	r3, [r7, #20]
 80007de:	697a      	ldr	r2, [r7, #20]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	dbf1      	blt.n	80007ca <_write+0x12>
	}
	return len;
 80007e6:	687b      	ldr	r3, [r7, #4]
}
 80007e8:	0018      	movs	r0, r3
 80007ea:	46bd      	mov	sp, r7
 80007ec:	b006      	add	sp, #24
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <_close>:

int _close(int file)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	return -1;
 80007f8:	2301      	movs	r3, #1
 80007fa:	425b      	negs	r3, r3
}
 80007fc:	0018      	movs	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	b002      	add	sp, #8
 8000802:	bd80      	pop	{r7, pc}

08000804 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	2280      	movs	r2, #128	; 0x80
 8000812:	0192      	lsls	r2, r2, #6
 8000814:	605a      	str	r2, [r3, #4]
	return 0;
 8000816:	2300      	movs	r3, #0
}
 8000818:	0018      	movs	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	b002      	add	sp, #8
 800081e:	bd80      	pop	{r7, pc}

08000820 <_isatty>:

int _isatty(int file)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	return 1;
 8000828:	2301      	movs	r3, #1
}
 800082a:	0018      	movs	r0, r3
 800082c:	46bd      	mov	sp, r7
 800082e:	b002      	add	sp, #8
 8000830:	bd80      	pop	{r7, pc}

08000832 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b084      	sub	sp, #16
 8000836:	af00      	add	r7, sp, #0
 8000838:	60f8      	str	r0, [r7, #12]
 800083a:	60b9      	str	r1, [r7, #8]
 800083c:	607a      	str	r2, [r7, #4]
	return 0;
 800083e:	2300      	movs	r3, #0
}
 8000840:	0018      	movs	r0, r3
 8000842:	46bd      	mov	sp, r7
 8000844:	b004      	add	sp, #16
 8000846:	bd80      	pop	{r7, pc}

08000848 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000850:	4a14      	ldr	r2, [pc, #80]	; (80008a4 <_sbrk+0x5c>)
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <_sbrk+0x60>)
 8000854:	1ad3      	subs	r3, r2, r3
 8000856:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800085c:	4b13      	ldr	r3, [pc, #76]	; (80008ac <_sbrk+0x64>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d102      	bne.n	800086a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000864:	4b11      	ldr	r3, [pc, #68]	; (80008ac <_sbrk+0x64>)
 8000866:	4a12      	ldr	r2, [pc, #72]	; (80008b0 <_sbrk+0x68>)
 8000868:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800086a:	4b10      	ldr	r3, [pc, #64]	; (80008ac <_sbrk+0x64>)
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	18d3      	adds	r3, r2, r3
 8000872:	693a      	ldr	r2, [r7, #16]
 8000874:	429a      	cmp	r2, r3
 8000876:	d207      	bcs.n	8000888 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000878:	f001 f918 	bl	8001aac <__errno>
 800087c:	0003      	movs	r3, r0
 800087e:	220c      	movs	r2, #12
 8000880:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000882:	2301      	movs	r3, #1
 8000884:	425b      	negs	r3, r3
 8000886:	e009      	b.n	800089c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000888:	4b08      	ldr	r3, [pc, #32]	; (80008ac <_sbrk+0x64>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800088e:	4b07      	ldr	r3, [pc, #28]	; (80008ac <_sbrk+0x64>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	18d2      	adds	r2, r2, r3
 8000896:	4b05      	ldr	r3, [pc, #20]	; (80008ac <_sbrk+0x64>)
 8000898:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800089a:	68fb      	ldr	r3, [r7, #12]
}
 800089c:	0018      	movs	r0, r3
 800089e:	46bd      	mov	sp, r7
 80008a0:	b006      	add	sp, #24
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20002000 	.word	0x20002000
 80008a8:	00000400 	.word	0x00000400
 80008ac:	20000090 	.word	0x20000090
 80008b0:	200000a8 	.word	0x200000a8

080008b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b8:	46c0      	nop			; (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80008c0:	480d      	ldr	r0, [pc, #52]	; (80008f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008c2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008c4:	f7ff fff6 	bl	80008b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008c8:	480c      	ldr	r0, [pc, #48]	; (80008fc <LoopForever+0x6>)
  ldr r1, =_edata
 80008ca:	490d      	ldr	r1, [pc, #52]	; (8000900 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008cc:	4a0d      	ldr	r2, [pc, #52]	; (8000904 <LoopForever+0xe>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d0:	e002      	b.n	80008d8 <LoopCopyDataInit>

080008d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d6:	3304      	adds	r3, #4

080008d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008dc:	d3f9      	bcc.n	80008d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008de:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008e0:	4c0a      	ldr	r4, [pc, #40]	; (800090c <LoopForever+0x16>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e4:	e001      	b.n	80008ea <LoopFillZerobss>

080008e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e8:	3204      	adds	r2, #4

080008ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ec:	d3fb      	bcc.n	80008e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ee:	f001 f8e3 	bl	8001ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008f2:	f7ff fde3 	bl	80004bc <main>

080008f6 <LoopForever>:

LoopForever:
    b LoopForever
 80008f6:	e7fe      	b.n	80008f6 <LoopForever>
  ldr   r0, =_estack
 80008f8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80008fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000900:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000904:	08002ba0 	.word	0x08002ba0
  ldr r2, =_sbss
 8000908:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800090c:	200000a8 	.word	0x200000a8

08000910 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000910:	e7fe      	b.n	8000910 <ADC1_COMP_IRQHandler>
	...

08000914 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000920:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <HAL_Init+0x3c>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <HAL_Init+0x3c>)
 8000926:	2140      	movs	r1, #64	; 0x40
 8000928:	430a      	orrs	r2, r1
 800092a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800092c:	2000      	movs	r0, #0
 800092e:	f000 f811 	bl	8000954 <HAL_InitTick>
 8000932:	1e03      	subs	r3, r0, #0
 8000934:	d003      	beq.n	800093e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000936:	1dfb      	adds	r3, r7, #7
 8000938:	2201      	movs	r2, #1
 800093a:	701a      	strb	r2, [r3, #0]
 800093c:	e001      	b.n	8000942 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800093e:	f7ff feeb 	bl	8000718 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000942:	1dfb      	adds	r3, r7, #7
 8000944:	781b      	ldrb	r3, [r3, #0]
}
 8000946:	0018      	movs	r0, r3
 8000948:	46bd      	mov	sp, r7
 800094a:	b002      	add	sp, #8
 800094c:	bd80      	pop	{r7, pc}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	40022000 	.word	0x40022000

08000954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <HAL_InitTick+0x5c>)
 800095e:	681c      	ldr	r4, [r3, #0]
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <HAL_InitTick+0x60>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	0019      	movs	r1, r3
 8000966:	23fa      	movs	r3, #250	; 0xfa
 8000968:	0098      	lsls	r0, r3, #2
 800096a:	f7ff fbd7 	bl	800011c <__udivsi3>
 800096e:	0003      	movs	r3, r0
 8000970:	0019      	movs	r1, r3
 8000972:	0020      	movs	r0, r4
 8000974:	f7ff fbd2 	bl	800011c <__udivsi3>
 8000978:	0003      	movs	r3, r0
 800097a:	0018      	movs	r0, r3
 800097c:	f000 f90b 	bl	8000b96 <HAL_SYSTICK_Config>
 8000980:	1e03      	subs	r3, r0, #0
 8000982:	d001      	beq.n	8000988 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000984:	2301      	movs	r3, #1
 8000986:	e00f      	b.n	80009a8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2b03      	cmp	r3, #3
 800098c:	d80b      	bhi.n	80009a6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	2301      	movs	r3, #1
 8000992:	425b      	negs	r3, r3
 8000994:	2200      	movs	r2, #0
 8000996:	0018      	movs	r0, r3
 8000998:	f000 f8d8 	bl	8000b4c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_InitTick+0x64>)
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009a2:	2300      	movs	r3, #0
 80009a4:	e000      	b.n	80009a8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
}
 80009a8:	0018      	movs	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b003      	add	sp, #12
 80009ae:	bd90      	pop	{r4, r7, pc}
 80009b0:	20000000 	.word	0x20000000
 80009b4:	20000008 	.word	0x20000008
 80009b8:	20000004 	.word	0x20000004

080009bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <HAL_IncTick+0x1c>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	001a      	movs	r2, r3
 80009c6:	4b05      	ldr	r3, [pc, #20]	; (80009dc <HAL_IncTick+0x20>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	18d2      	adds	r2, r2, r3
 80009cc:	4b03      	ldr	r3, [pc, #12]	; (80009dc <HAL_IncTick+0x20>)
 80009ce:	601a      	str	r2, [r3, #0]
}
 80009d0:	46c0      	nop			; (mov r8, r8)
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	20000008 	.word	0x20000008
 80009dc:	20000094 	.word	0x20000094

080009e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  return uwTick;
 80009e4:	4b02      	ldr	r3, [pc, #8]	; (80009f0 <HAL_GetTick+0x10>)
 80009e6:	681b      	ldr	r3, [r3, #0]
}
 80009e8:	0018      	movs	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	20000094 	.word	0x20000094

080009f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	0002      	movs	r2, r0
 80009fc:	1dfb      	adds	r3, r7, #7
 80009fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a00:	1dfb      	adds	r3, r7, #7
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b7f      	cmp	r3, #127	; 0x7f
 8000a06:	d809      	bhi.n	8000a1c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a08:	1dfb      	adds	r3, r7, #7
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	001a      	movs	r2, r3
 8000a0e:	231f      	movs	r3, #31
 8000a10:	401a      	ands	r2, r3
 8000a12:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <__NVIC_EnableIRQ+0x30>)
 8000a14:	2101      	movs	r1, #1
 8000a16:	4091      	lsls	r1, r2
 8000a18:	000a      	movs	r2, r1
 8000a1a:	601a      	str	r2, [r3, #0]
  }
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b002      	add	sp, #8
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	e000e100 	.word	0xe000e100

08000a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a28:	b590      	push	{r4, r7, lr}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	0002      	movs	r2, r0
 8000a30:	6039      	str	r1, [r7, #0]
 8000a32:	1dfb      	adds	r3, r7, #7
 8000a34:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a36:	1dfb      	adds	r3, r7, #7
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b7f      	cmp	r3, #127	; 0x7f
 8000a3c:	d828      	bhi.n	8000a90 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a3e:	4a2f      	ldr	r2, [pc, #188]	; (8000afc <__NVIC_SetPriority+0xd4>)
 8000a40:	1dfb      	adds	r3, r7, #7
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	b25b      	sxtb	r3, r3
 8000a46:	089b      	lsrs	r3, r3, #2
 8000a48:	33c0      	adds	r3, #192	; 0xc0
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	589b      	ldr	r3, [r3, r2]
 8000a4e:	1dfa      	adds	r2, r7, #7
 8000a50:	7812      	ldrb	r2, [r2, #0]
 8000a52:	0011      	movs	r1, r2
 8000a54:	2203      	movs	r2, #3
 8000a56:	400a      	ands	r2, r1
 8000a58:	00d2      	lsls	r2, r2, #3
 8000a5a:	21ff      	movs	r1, #255	; 0xff
 8000a5c:	4091      	lsls	r1, r2
 8000a5e:	000a      	movs	r2, r1
 8000a60:	43d2      	mvns	r2, r2
 8000a62:	401a      	ands	r2, r3
 8000a64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	019b      	lsls	r3, r3, #6
 8000a6a:	22ff      	movs	r2, #255	; 0xff
 8000a6c:	401a      	ands	r2, r3
 8000a6e:	1dfb      	adds	r3, r7, #7
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	0018      	movs	r0, r3
 8000a74:	2303      	movs	r3, #3
 8000a76:	4003      	ands	r3, r0
 8000a78:	00db      	lsls	r3, r3, #3
 8000a7a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a7c:	481f      	ldr	r0, [pc, #124]	; (8000afc <__NVIC_SetPriority+0xd4>)
 8000a7e:	1dfb      	adds	r3, r7, #7
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	b25b      	sxtb	r3, r3
 8000a84:	089b      	lsrs	r3, r3, #2
 8000a86:	430a      	orrs	r2, r1
 8000a88:	33c0      	adds	r3, #192	; 0xc0
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a8e:	e031      	b.n	8000af4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a90:	4a1b      	ldr	r2, [pc, #108]	; (8000b00 <__NVIC_SetPriority+0xd8>)
 8000a92:	1dfb      	adds	r3, r7, #7
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	0019      	movs	r1, r3
 8000a98:	230f      	movs	r3, #15
 8000a9a:	400b      	ands	r3, r1
 8000a9c:	3b08      	subs	r3, #8
 8000a9e:	089b      	lsrs	r3, r3, #2
 8000aa0:	3306      	adds	r3, #6
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	18d3      	adds	r3, r2, r3
 8000aa6:	3304      	adds	r3, #4
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	1dfa      	adds	r2, r7, #7
 8000aac:	7812      	ldrb	r2, [r2, #0]
 8000aae:	0011      	movs	r1, r2
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	400a      	ands	r2, r1
 8000ab4:	00d2      	lsls	r2, r2, #3
 8000ab6:	21ff      	movs	r1, #255	; 0xff
 8000ab8:	4091      	lsls	r1, r2
 8000aba:	000a      	movs	r2, r1
 8000abc:	43d2      	mvns	r2, r2
 8000abe:	401a      	ands	r2, r3
 8000ac0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	019b      	lsls	r3, r3, #6
 8000ac6:	22ff      	movs	r2, #255	; 0xff
 8000ac8:	401a      	ands	r2, r3
 8000aca:	1dfb      	adds	r3, r7, #7
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	0018      	movs	r0, r3
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	4003      	ands	r3, r0
 8000ad4:	00db      	lsls	r3, r3, #3
 8000ad6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad8:	4809      	ldr	r0, [pc, #36]	; (8000b00 <__NVIC_SetPriority+0xd8>)
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	001c      	movs	r4, r3
 8000ae0:	230f      	movs	r3, #15
 8000ae2:	4023      	ands	r3, r4
 8000ae4:	3b08      	subs	r3, #8
 8000ae6:	089b      	lsrs	r3, r3, #2
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	3306      	adds	r3, #6
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	18c3      	adds	r3, r0, r3
 8000af0:	3304      	adds	r3, #4
 8000af2:	601a      	str	r2, [r3, #0]
}
 8000af4:	46c0      	nop			; (mov r8, r8)
 8000af6:	46bd      	mov	sp, r7
 8000af8:	b003      	add	sp, #12
 8000afa:	bd90      	pop	{r4, r7, pc}
 8000afc:	e000e100 	.word	0xe000e100
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	1e5a      	subs	r2, r3, #1
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	045b      	lsls	r3, r3, #17
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d301      	bcc.n	8000b1c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b18:	2301      	movs	r3, #1
 8000b1a:	e010      	b.n	8000b3e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <SysTick_Config+0x44>)
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	3a01      	subs	r2, #1
 8000b22:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b24:	2301      	movs	r3, #1
 8000b26:	425b      	negs	r3, r3
 8000b28:	2103      	movs	r1, #3
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f7ff ff7c 	bl	8000a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b30:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <SysTick_Config+0x44>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b36:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <SysTick_Config+0x44>)
 8000b38:	2207      	movs	r2, #7
 8000b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	0018      	movs	r0, r3
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b002      	add	sp, #8
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	e000e010 	.word	0xe000e010

08000b4c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	210f      	movs	r1, #15
 8000b58:	187b      	adds	r3, r7, r1
 8000b5a:	1c02      	adds	r2, r0, #0
 8000b5c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b5e:	68ba      	ldr	r2, [r7, #8]
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	b25b      	sxtb	r3, r3
 8000b66:	0011      	movs	r1, r2
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f7ff ff5d 	bl	8000a28 <__NVIC_SetPriority>
}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b004      	add	sp, #16
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	0002      	movs	r2, r0
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b82:	1dfb      	adds	r3, r7, #7
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	b25b      	sxtb	r3, r3
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f7ff ff33 	bl	80009f4 <__NVIC_EnableIRQ>
}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	46bd      	mov	sp, r7
 8000b92:	b002      	add	sp, #8
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f7ff ffaf 	bl	8000b04 <SysTick_Config>
 8000ba6:	0003      	movs	r3, r0
}
 8000ba8:	0018      	movs	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	b002      	add	sp, #8
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000bc6:	e14f      	b.n	8000e68 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2101      	movs	r1, #1
 8000bce:	697a      	ldr	r2, [r7, #20]
 8000bd0:	4091      	lsls	r1, r2
 8000bd2:	000a      	movs	r2, r1
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d100      	bne.n	8000be0 <HAL_GPIO_Init+0x30>
 8000bde:	e140      	b.n	8000e62 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	2203      	movs	r2, #3
 8000be6:	4013      	ands	r3, r2
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d005      	beq.n	8000bf8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d130      	bne.n	8000c5a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	2203      	movs	r2, #3
 8000c04:	409a      	lsls	r2, r3
 8000c06:	0013      	movs	r3, r2
 8000c08:	43da      	mvns	r2, r3
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	68da      	ldr	r2, [r3, #12]
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	409a      	lsls	r2, r3
 8000c1a:	0013      	movs	r3, r2
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c2e:	2201      	movs	r2, #1
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	409a      	lsls	r2, r3
 8000c34:	0013      	movs	r3, r2
 8000c36:	43da      	mvns	r2, r3
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	091b      	lsrs	r3, r3, #4
 8000c44:	2201      	movs	r2, #1
 8000c46:	401a      	ands	r2, r3
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	409a      	lsls	r2, r3
 8000c4c:	0013      	movs	r3, r2
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	2203      	movs	r2, #3
 8000c60:	4013      	ands	r3, r2
 8000c62:	2b03      	cmp	r3, #3
 8000c64:	d017      	beq.n	8000c96 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	2203      	movs	r2, #3
 8000c72:	409a      	lsls	r2, r3
 8000c74:	0013      	movs	r3, r2
 8000c76:	43da      	mvns	r2, r3
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	689a      	ldr	r2, [r3, #8]
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	409a      	lsls	r2, r3
 8000c88:	0013      	movs	r3, r2
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	2203      	movs	r2, #3
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	2b02      	cmp	r3, #2
 8000ca0:	d123      	bne.n	8000cea <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	08da      	lsrs	r2, r3, #3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	3208      	adds	r2, #8
 8000caa:	0092      	lsls	r2, r2, #2
 8000cac:	58d3      	ldr	r3, [r2, r3]
 8000cae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	2207      	movs	r2, #7
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	220f      	movs	r2, #15
 8000cba:	409a      	lsls	r2, r3
 8000cbc:	0013      	movs	r3, r2
 8000cbe:	43da      	mvns	r2, r3
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	691a      	ldr	r2, [r3, #16]
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	2107      	movs	r1, #7
 8000cce:	400b      	ands	r3, r1
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	409a      	lsls	r2, r3
 8000cd4:	0013      	movs	r3, r2
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	08da      	lsrs	r2, r3, #3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3208      	adds	r2, #8
 8000ce4:	0092      	lsls	r2, r2, #2
 8000ce6:	6939      	ldr	r1, [r7, #16]
 8000ce8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	409a      	lsls	r2, r3
 8000cf8:	0013      	movs	r3, r2
 8000cfa:	43da      	mvns	r2, r3
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	2203      	movs	r2, #3
 8000d08:	401a      	ands	r2, r3
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	409a      	lsls	r2, r3
 8000d10:	0013      	movs	r3, r2
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685a      	ldr	r2, [r3, #4]
 8000d22:	23c0      	movs	r3, #192	; 0xc0
 8000d24:	029b      	lsls	r3, r3, #10
 8000d26:	4013      	ands	r3, r2
 8000d28:	d100      	bne.n	8000d2c <HAL_GPIO_Init+0x17c>
 8000d2a:	e09a      	b.n	8000e62 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2c:	4b54      	ldr	r3, [pc, #336]	; (8000e80 <HAL_GPIO_Init+0x2d0>)
 8000d2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d30:	4b53      	ldr	r3, [pc, #332]	; (8000e80 <HAL_GPIO_Init+0x2d0>)
 8000d32:	2101      	movs	r1, #1
 8000d34:	430a      	orrs	r2, r1
 8000d36:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d38:	4a52      	ldr	r2, [pc, #328]	; (8000e84 <HAL_GPIO_Init+0x2d4>)
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	089b      	lsrs	r3, r3, #2
 8000d3e:	3302      	adds	r3, #2
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	589b      	ldr	r3, [r3, r2]
 8000d44:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	2203      	movs	r2, #3
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	220f      	movs	r2, #15
 8000d50:	409a      	lsls	r2, r3
 8000d52:	0013      	movs	r3, r2
 8000d54:	43da      	mvns	r2, r3
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	23a0      	movs	r3, #160	; 0xa0
 8000d60:	05db      	lsls	r3, r3, #23
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d019      	beq.n	8000d9a <HAL_GPIO_Init+0x1ea>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a47      	ldr	r2, [pc, #284]	; (8000e88 <HAL_GPIO_Init+0x2d8>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d013      	beq.n	8000d96 <HAL_GPIO_Init+0x1e6>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a46      	ldr	r2, [pc, #280]	; (8000e8c <HAL_GPIO_Init+0x2dc>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d00d      	beq.n	8000d92 <HAL_GPIO_Init+0x1e2>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a45      	ldr	r2, [pc, #276]	; (8000e90 <HAL_GPIO_Init+0x2e0>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d007      	beq.n	8000d8e <HAL_GPIO_Init+0x1de>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a44      	ldr	r2, [pc, #272]	; (8000e94 <HAL_GPIO_Init+0x2e4>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d101      	bne.n	8000d8a <HAL_GPIO_Init+0x1da>
 8000d86:	2305      	movs	r3, #5
 8000d88:	e008      	b.n	8000d9c <HAL_GPIO_Init+0x1ec>
 8000d8a:	2306      	movs	r3, #6
 8000d8c:	e006      	b.n	8000d9c <HAL_GPIO_Init+0x1ec>
 8000d8e:	2303      	movs	r3, #3
 8000d90:	e004      	b.n	8000d9c <HAL_GPIO_Init+0x1ec>
 8000d92:	2302      	movs	r3, #2
 8000d94:	e002      	b.n	8000d9c <HAL_GPIO_Init+0x1ec>
 8000d96:	2301      	movs	r3, #1
 8000d98:	e000      	b.n	8000d9c <HAL_GPIO_Init+0x1ec>
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	697a      	ldr	r2, [r7, #20]
 8000d9e:	2103      	movs	r1, #3
 8000da0:	400a      	ands	r2, r1
 8000da2:	0092      	lsls	r2, r2, #2
 8000da4:	4093      	lsls	r3, r2
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dac:	4935      	ldr	r1, [pc, #212]	; (8000e84 <HAL_GPIO_Init+0x2d4>)
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	089b      	lsrs	r3, r3, #2
 8000db2:	3302      	adds	r3, #2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dba:	4b37      	ldr	r3, [pc, #220]	; (8000e98 <HAL_GPIO_Init+0x2e8>)
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	43da      	mvns	r2, r3
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685a      	ldr	r2, [r3, #4]
 8000dce:	2380      	movs	r3, #128	; 0x80
 8000dd0:	035b      	lsls	r3, r3, #13
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	d003      	beq.n	8000dde <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000dde:	4b2e      	ldr	r3, [pc, #184]	; (8000e98 <HAL_GPIO_Init+0x2e8>)
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000de4:	4b2c      	ldr	r3, [pc, #176]	; (8000e98 <HAL_GPIO_Init+0x2e8>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	43da      	mvns	r2, r3
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685a      	ldr	r2, [r3, #4]
 8000df8:	2380      	movs	r3, #128	; 0x80
 8000dfa:	039b      	lsls	r3, r3, #14
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	d003      	beq.n	8000e08 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e08:	4b23      	ldr	r3, [pc, #140]	; (8000e98 <HAL_GPIO_Init+0x2e8>)
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000e0e:	4b22      	ldr	r3, [pc, #136]	; (8000e98 <HAL_GPIO_Init+0x2e8>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	43da      	mvns	r2, r3
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685a      	ldr	r2, [r3, #4]
 8000e22:	2380      	movs	r3, #128	; 0x80
 8000e24:	029b      	lsls	r3, r3, #10
 8000e26:	4013      	ands	r3, r2
 8000e28:	d003      	beq.n	8000e32 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e32:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <HAL_GPIO_Init+0x2e8>)
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e38:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <HAL_GPIO_Init+0x2e8>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	43da      	mvns	r2, r3
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685a      	ldr	r2, [r3, #4]
 8000e4c:	2380      	movs	r3, #128	; 0x80
 8000e4e:	025b      	lsls	r3, r3, #9
 8000e50:	4013      	ands	r3, r2
 8000e52:	d003      	beq.n	8000e5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <HAL_GPIO_Init+0x2e8>)
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	3301      	adds	r3, #1
 8000e66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	40da      	lsrs	r2, r3
 8000e70:	1e13      	subs	r3, r2, #0
 8000e72:	d000      	beq.n	8000e76 <HAL_GPIO_Init+0x2c6>
 8000e74:	e6a8      	b.n	8000bc8 <HAL_GPIO_Init+0x18>
  }
}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	46c0      	nop			; (mov r8, r8)
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b006      	add	sp, #24
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40021000 	.word	0x40021000
 8000e84:	40010000 	.word	0x40010000
 8000e88:	50000400 	.word	0x50000400
 8000e8c:	50000800 	.word	0x50000800
 8000e90:	50000c00 	.word	0x50000c00
 8000e94:	50001c00 	.word	0x50001c00
 8000e98:	40010400 	.word	0x40010400

08000e9c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	000a      	movs	r2, r1
 8000ea6:	1cbb      	adds	r3, r7, #2
 8000ea8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	691b      	ldr	r3, [r3, #16]
 8000eae:	1cba      	adds	r2, r7, #2
 8000eb0:	8812      	ldrh	r2, [r2, #0]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	d004      	beq.n	8000ec0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000eb6:	230f      	movs	r3, #15
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]
 8000ebe:	e003      	b.n	8000ec8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ec0:	230f      	movs	r3, #15
 8000ec2:	18fb      	adds	r3, r7, r3
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000ec8:	230f      	movs	r3, #15
 8000eca:	18fb      	adds	r3, r7, r3
 8000ecc:	781b      	ldrb	r3, [r3, #0]
}
 8000ece:	0018      	movs	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	b004      	add	sp, #16
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	0008      	movs	r0, r1
 8000ee0:	0011      	movs	r1, r2
 8000ee2:	1cbb      	adds	r3, r7, #2
 8000ee4:	1c02      	adds	r2, r0, #0
 8000ee6:	801a      	strh	r2, [r3, #0]
 8000ee8:	1c7b      	adds	r3, r7, #1
 8000eea:	1c0a      	adds	r2, r1, #0
 8000eec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000eee:	1c7b      	adds	r3, r7, #1
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d004      	beq.n	8000f00 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ef6:	1cbb      	adds	r3, r7, #2
 8000ef8:	881a      	ldrh	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000efe:	e003      	b.n	8000f08 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000f00:	1cbb      	adds	r3, r7, #2
 8000f02:	881a      	ldrh	r2, [r3, #0]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f08:	46c0      	nop			; (mov r8, r8)
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	b002      	add	sp, #8
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	0002      	movs	r2, r0
 8000f18:	1dbb      	adds	r3, r7, #6
 8000f1a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000f1c:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000f1e:	695b      	ldr	r3, [r3, #20]
 8000f20:	1dba      	adds	r2, r7, #6
 8000f22:	8812      	ldrh	r2, [r2, #0]
 8000f24:	4013      	ands	r3, r2
 8000f26:	d008      	beq.n	8000f3a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000f2a:	1dba      	adds	r2, r7, #6
 8000f2c:	8812      	ldrh	r2, [r2, #0]
 8000f2e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f30:	1dbb      	adds	r3, r7, #6
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	0018      	movs	r0, r3
 8000f36:	f7ff fbd9 	bl	80006ec <HAL_GPIO_EXTI_Callback>
  }
}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b002      	add	sp, #8
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	40010400 	.word	0x40010400

08000f48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f48:	b5b0      	push	{r4, r5, r7, lr}
 8000f4a:	b08a      	sub	sp, #40	; 0x28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d102      	bne.n	8000f5c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	f000 fbaf 	bl	80016ba <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f5c:	4bcf      	ldr	r3, [pc, #828]	; (800129c <HAL_RCC_OscConfig+0x354>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	220c      	movs	r2, #12
 8000f62:	4013      	ands	r3, r2
 8000f64:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f66:	4bcd      	ldr	r3, [pc, #820]	; (800129c <HAL_RCC_OscConfig+0x354>)
 8000f68:	68da      	ldr	r2, [r3, #12]
 8000f6a:	2380      	movs	r3, #128	; 0x80
 8000f6c:	025b      	lsls	r3, r3, #9
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2201      	movs	r2, #1
 8000f78:	4013      	ands	r3, r2
 8000f7a:	d100      	bne.n	8000f7e <HAL_RCC_OscConfig+0x36>
 8000f7c:	e07e      	b.n	800107c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f7e:	6a3b      	ldr	r3, [r7, #32]
 8000f80:	2b08      	cmp	r3, #8
 8000f82:	d007      	beq.n	8000f94 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f84:	6a3b      	ldr	r3, [r7, #32]
 8000f86:	2b0c      	cmp	r3, #12
 8000f88:	d112      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x68>
 8000f8a:	69fa      	ldr	r2, [r7, #28]
 8000f8c:	2380      	movs	r3, #128	; 0x80
 8000f8e:	025b      	lsls	r3, r3, #9
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d10d      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f94:	4bc1      	ldr	r3, [pc, #772]	; (800129c <HAL_RCC_OscConfig+0x354>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	2380      	movs	r3, #128	; 0x80
 8000f9a:	029b      	lsls	r3, r3, #10
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	d100      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x5a>
 8000fa0:	e06b      	b.n	800107a <HAL_RCC_OscConfig+0x132>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d167      	bne.n	800107a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	f000 fb85 	bl	80016ba <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685a      	ldr	r2, [r3, #4]
 8000fb4:	2380      	movs	r3, #128	; 0x80
 8000fb6:	025b      	lsls	r3, r3, #9
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d107      	bne.n	8000fcc <HAL_RCC_OscConfig+0x84>
 8000fbc:	4bb7      	ldr	r3, [pc, #732]	; (800129c <HAL_RCC_OscConfig+0x354>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	4bb6      	ldr	r3, [pc, #728]	; (800129c <HAL_RCC_OscConfig+0x354>)
 8000fc2:	2180      	movs	r1, #128	; 0x80
 8000fc4:	0249      	lsls	r1, r1, #9
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	e027      	b.n	800101c <HAL_RCC_OscConfig+0xd4>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	23a0      	movs	r3, #160	; 0xa0
 8000fd2:	02db      	lsls	r3, r3, #11
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d10e      	bne.n	8000ff6 <HAL_RCC_OscConfig+0xae>
 8000fd8:	4bb0      	ldr	r3, [pc, #704]	; (800129c <HAL_RCC_OscConfig+0x354>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4baf      	ldr	r3, [pc, #700]	; (800129c <HAL_RCC_OscConfig+0x354>)
 8000fde:	2180      	movs	r1, #128	; 0x80
 8000fe0:	02c9      	lsls	r1, r1, #11
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	4bad      	ldr	r3, [pc, #692]	; (800129c <HAL_RCC_OscConfig+0x354>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	4bac      	ldr	r3, [pc, #688]	; (800129c <HAL_RCC_OscConfig+0x354>)
 8000fec:	2180      	movs	r1, #128	; 0x80
 8000fee:	0249      	lsls	r1, r1, #9
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	e012      	b.n	800101c <HAL_RCC_OscConfig+0xd4>
 8000ff6:	4ba9      	ldr	r3, [pc, #676]	; (800129c <HAL_RCC_OscConfig+0x354>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	4ba8      	ldr	r3, [pc, #672]	; (800129c <HAL_RCC_OscConfig+0x354>)
 8000ffc:	49a8      	ldr	r1, [pc, #672]	; (80012a0 <HAL_RCC_OscConfig+0x358>)
 8000ffe:	400a      	ands	r2, r1
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	4ba6      	ldr	r3, [pc, #664]	; (800129c <HAL_RCC_OscConfig+0x354>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	2380      	movs	r3, #128	; 0x80
 8001008:	025b      	lsls	r3, r3, #9
 800100a:	4013      	ands	r3, r2
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4ba2      	ldr	r3, [pc, #648]	; (800129c <HAL_RCC_OscConfig+0x354>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4ba1      	ldr	r3, [pc, #644]	; (800129c <HAL_RCC_OscConfig+0x354>)
 8001016:	49a3      	ldr	r1, [pc, #652]	; (80012a4 <HAL_RCC_OscConfig+0x35c>)
 8001018:	400a      	ands	r2, r1
 800101a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d015      	beq.n	8001050 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001024:	f7ff fcdc 	bl	80009e0 <HAL_GetTick>
 8001028:	0003      	movs	r3, r0
 800102a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800102c:	e009      	b.n	8001042 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800102e:	f7ff fcd7 	bl	80009e0 <HAL_GetTick>
 8001032:	0002      	movs	r2, r0
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b64      	cmp	r3, #100	; 0x64
 800103a:	d902      	bls.n	8001042 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	f000 fb3c 	bl	80016ba <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001042:	4b96      	ldr	r3, [pc, #600]	; (800129c <HAL_RCC_OscConfig+0x354>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	2380      	movs	r3, #128	; 0x80
 8001048:	029b      	lsls	r3, r3, #10
 800104a:	4013      	ands	r3, r2
 800104c:	d0ef      	beq.n	800102e <HAL_RCC_OscConfig+0xe6>
 800104e:	e015      	b.n	800107c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001050:	f7ff fcc6 	bl	80009e0 <HAL_GetTick>
 8001054:	0003      	movs	r3, r0
 8001056:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001058:	e008      	b.n	800106c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800105a:	f7ff fcc1 	bl	80009e0 <HAL_GetTick>
 800105e:	0002      	movs	r2, r0
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b64      	cmp	r3, #100	; 0x64
 8001066:	d901      	bls.n	800106c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	e326      	b.n	80016ba <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800106c:	4b8b      	ldr	r3, [pc, #556]	; (800129c <HAL_RCC_OscConfig+0x354>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	2380      	movs	r3, #128	; 0x80
 8001072:	029b      	lsls	r3, r3, #10
 8001074:	4013      	ands	r3, r2
 8001076:	d1f0      	bne.n	800105a <HAL_RCC_OscConfig+0x112>
 8001078:	e000      	b.n	800107c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800107a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2202      	movs	r2, #2
 8001082:	4013      	ands	r3, r2
 8001084:	d100      	bne.n	8001088 <HAL_RCC_OscConfig+0x140>
 8001086:	e08b      	b.n	80011a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800108e:	6a3b      	ldr	r3, [r7, #32]
 8001090:	2b04      	cmp	r3, #4
 8001092:	d005      	beq.n	80010a0 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001094:	6a3b      	ldr	r3, [r7, #32]
 8001096:	2b0c      	cmp	r3, #12
 8001098:	d13e      	bne.n	8001118 <HAL_RCC_OscConfig+0x1d0>
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d13b      	bne.n	8001118 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80010a0:	4b7e      	ldr	r3, [pc, #504]	; (800129c <HAL_RCC_OscConfig+0x354>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2204      	movs	r2, #4
 80010a6:	4013      	ands	r3, r2
 80010a8:	d004      	beq.n	80010b4 <HAL_RCC_OscConfig+0x16c>
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d101      	bne.n	80010b4 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e302      	b.n	80016ba <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b4:	4b79      	ldr	r3, [pc, #484]	; (800129c <HAL_RCC_OscConfig+0x354>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	4a7b      	ldr	r2, [pc, #492]	; (80012a8 <HAL_RCC_OscConfig+0x360>)
 80010ba:	4013      	ands	r3, r2
 80010bc:	0019      	movs	r1, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	691b      	ldr	r3, [r3, #16]
 80010c2:	021a      	lsls	r2, r3, #8
 80010c4:	4b75      	ldr	r3, [pc, #468]	; (800129c <HAL_RCC_OscConfig+0x354>)
 80010c6:	430a      	orrs	r2, r1
 80010c8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80010ca:	4b74      	ldr	r3, [pc, #464]	; (800129c <HAL_RCC_OscConfig+0x354>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2209      	movs	r2, #9
 80010d0:	4393      	bics	r3, r2
 80010d2:	0019      	movs	r1, r3
 80010d4:	4b71      	ldr	r3, [pc, #452]	; (800129c <HAL_RCC_OscConfig+0x354>)
 80010d6:	697a      	ldr	r2, [r7, #20]
 80010d8:	430a      	orrs	r2, r1
 80010da:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010dc:	f000 fc40 	bl	8001960 <HAL_RCC_GetSysClockFreq>
 80010e0:	0001      	movs	r1, r0
 80010e2:	4b6e      	ldr	r3, [pc, #440]	; (800129c <HAL_RCC_OscConfig+0x354>)
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	091b      	lsrs	r3, r3, #4
 80010e8:	220f      	movs	r2, #15
 80010ea:	4013      	ands	r3, r2
 80010ec:	4a6f      	ldr	r2, [pc, #444]	; (80012ac <HAL_RCC_OscConfig+0x364>)
 80010ee:	5cd3      	ldrb	r3, [r2, r3]
 80010f0:	000a      	movs	r2, r1
 80010f2:	40da      	lsrs	r2, r3
 80010f4:	4b6e      	ldr	r3, [pc, #440]	; (80012b0 <HAL_RCC_OscConfig+0x368>)
 80010f6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80010f8:	4b6e      	ldr	r3, [pc, #440]	; (80012b4 <HAL_RCC_OscConfig+0x36c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2513      	movs	r5, #19
 80010fe:	197c      	adds	r4, r7, r5
 8001100:	0018      	movs	r0, r3
 8001102:	f7ff fc27 	bl	8000954 <HAL_InitTick>
 8001106:	0003      	movs	r3, r0
 8001108:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800110a:	197b      	adds	r3, r7, r5
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d046      	beq.n	80011a0 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001112:	197b      	adds	r3, r7, r5
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	e2d0      	b.n	80016ba <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d027      	beq.n	800116e <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800111e:	4b5f      	ldr	r3, [pc, #380]	; (800129c <HAL_RCC_OscConfig+0x354>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2209      	movs	r2, #9
 8001124:	4393      	bics	r3, r2
 8001126:	0019      	movs	r1, r3
 8001128:	4b5c      	ldr	r3, [pc, #368]	; (800129c <HAL_RCC_OscConfig+0x354>)
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	430a      	orrs	r2, r1
 800112e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001130:	f7ff fc56 	bl	80009e0 <HAL_GetTick>
 8001134:	0003      	movs	r3, r0
 8001136:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001138:	e008      	b.n	800114c <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800113a:	f7ff fc51 	bl	80009e0 <HAL_GetTick>
 800113e:	0002      	movs	r2, r0
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d901      	bls.n	800114c <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e2b6      	b.n	80016ba <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800114c:	4b53      	ldr	r3, [pc, #332]	; (800129c <HAL_RCC_OscConfig+0x354>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2204      	movs	r2, #4
 8001152:	4013      	ands	r3, r2
 8001154:	d0f1      	beq.n	800113a <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001156:	4b51      	ldr	r3, [pc, #324]	; (800129c <HAL_RCC_OscConfig+0x354>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	4a53      	ldr	r2, [pc, #332]	; (80012a8 <HAL_RCC_OscConfig+0x360>)
 800115c:	4013      	ands	r3, r2
 800115e:	0019      	movs	r1, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	691b      	ldr	r3, [r3, #16]
 8001164:	021a      	lsls	r2, r3, #8
 8001166:	4b4d      	ldr	r3, [pc, #308]	; (800129c <HAL_RCC_OscConfig+0x354>)
 8001168:	430a      	orrs	r2, r1
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	e018      	b.n	80011a0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800116e:	4b4b      	ldr	r3, [pc, #300]	; (800129c <HAL_RCC_OscConfig+0x354>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	4b4a      	ldr	r3, [pc, #296]	; (800129c <HAL_RCC_OscConfig+0x354>)
 8001174:	2101      	movs	r1, #1
 8001176:	438a      	bics	r2, r1
 8001178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117a:	f7ff fc31 	bl	80009e0 <HAL_GetTick>
 800117e:	0003      	movs	r3, r0
 8001180:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001184:	f7ff fc2c 	bl	80009e0 <HAL_GetTick>
 8001188:	0002      	movs	r2, r0
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b02      	cmp	r3, #2
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e291      	b.n	80016ba <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001196:	4b41      	ldr	r3, [pc, #260]	; (800129c <HAL_RCC_OscConfig+0x354>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2204      	movs	r2, #4
 800119c:	4013      	ands	r3, r2
 800119e:	d1f1      	bne.n	8001184 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2210      	movs	r2, #16
 80011a6:	4013      	ands	r3, r2
 80011a8:	d100      	bne.n	80011ac <HAL_RCC_OscConfig+0x264>
 80011aa:	e0a1      	b.n	80012f0 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011ac:	6a3b      	ldr	r3, [r7, #32]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d140      	bne.n	8001234 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011b2:	4b3a      	ldr	r3, [pc, #232]	; (800129c <HAL_RCC_OscConfig+0x354>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	2380      	movs	r3, #128	; 0x80
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4013      	ands	r3, r2
 80011bc:	d005      	beq.n	80011ca <HAL_RCC_OscConfig+0x282>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e277      	b.n	80016ba <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011ca:	4b34      	ldr	r3, [pc, #208]	; (800129c <HAL_RCC_OscConfig+0x354>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	4a3a      	ldr	r2, [pc, #232]	; (80012b8 <HAL_RCC_OscConfig+0x370>)
 80011d0:	4013      	ands	r3, r2
 80011d2:	0019      	movs	r1, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011d8:	4b30      	ldr	r3, [pc, #192]	; (800129c <HAL_RCC_OscConfig+0x354>)
 80011da:	430a      	orrs	r2, r1
 80011dc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011de:	4b2f      	ldr	r3, [pc, #188]	; (800129c <HAL_RCC_OscConfig+0x354>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	021b      	lsls	r3, r3, #8
 80011e4:	0a19      	lsrs	r1, r3, #8
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a1b      	ldr	r3, [r3, #32]
 80011ea:	061a      	lsls	r2, r3, #24
 80011ec:	4b2b      	ldr	r3, [pc, #172]	; (800129c <HAL_RCC_OscConfig+0x354>)
 80011ee:	430a      	orrs	r2, r1
 80011f0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f6:	0b5b      	lsrs	r3, r3, #13
 80011f8:	3301      	adds	r3, #1
 80011fa:	2280      	movs	r2, #128	; 0x80
 80011fc:	0212      	lsls	r2, r2, #8
 80011fe:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001200:	4b26      	ldr	r3, [pc, #152]	; (800129c <HAL_RCC_OscConfig+0x354>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	091b      	lsrs	r3, r3, #4
 8001206:	210f      	movs	r1, #15
 8001208:	400b      	ands	r3, r1
 800120a:	4928      	ldr	r1, [pc, #160]	; (80012ac <HAL_RCC_OscConfig+0x364>)
 800120c:	5ccb      	ldrb	r3, [r1, r3]
 800120e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001210:	4b27      	ldr	r3, [pc, #156]	; (80012b0 <HAL_RCC_OscConfig+0x368>)
 8001212:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001214:	4b27      	ldr	r3, [pc, #156]	; (80012b4 <HAL_RCC_OscConfig+0x36c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2513      	movs	r5, #19
 800121a:	197c      	adds	r4, r7, r5
 800121c:	0018      	movs	r0, r3
 800121e:	f7ff fb99 	bl	8000954 <HAL_InitTick>
 8001222:	0003      	movs	r3, r0
 8001224:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001226:	197b      	adds	r3, r7, r5
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d060      	beq.n	80012f0 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800122e:	197b      	adds	r3, r7, r5
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	e242      	b.n	80016ba <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	69db      	ldr	r3, [r3, #28]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d03f      	beq.n	80012bc <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800123c:	4b17      	ldr	r3, [pc, #92]	; (800129c <HAL_RCC_OscConfig+0x354>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b16      	ldr	r3, [pc, #88]	; (800129c <HAL_RCC_OscConfig+0x354>)
 8001242:	2180      	movs	r1, #128	; 0x80
 8001244:	0049      	lsls	r1, r1, #1
 8001246:	430a      	orrs	r2, r1
 8001248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124a:	f7ff fbc9 	bl	80009e0 <HAL_GetTick>
 800124e:	0003      	movs	r3, r0
 8001250:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001254:	f7ff fbc4 	bl	80009e0 <HAL_GetTick>
 8001258:	0002      	movs	r2, r0
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e229      	b.n	80016ba <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001266:	4b0d      	ldr	r3, [pc, #52]	; (800129c <HAL_RCC_OscConfig+0x354>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	2380      	movs	r3, #128	; 0x80
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4013      	ands	r3, r2
 8001270:	d0f0      	beq.n	8001254 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <HAL_RCC_OscConfig+0x354>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	4a10      	ldr	r2, [pc, #64]	; (80012b8 <HAL_RCC_OscConfig+0x370>)
 8001278:	4013      	ands	r3, r2
 800127a:	0019      	movs	r1, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_RCC_OscConfig+0x354>)
 8001282:	430a      	orrs	r2, r1
 8001284:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001286:	4b05      	ldr	r3, [pc, #20]	; (800129c <HAL_RCC_OscConfig+0x354>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	021b      	lsls	r3, r3, #8
 800128c:	0a19      	lsrs	r1, r3, #8
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a1b      	ldr	r3, [r3, #32]
 8001292:	061a      	lsls	r2, r3, #24
 8001294:	4b01      	ldr	r3, [pc, #4]	; (800129c <HAL_RCC_OscConfig+0x354>)
 8001296:	430a      	orrs	r2, r1
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	e029      	b.n	80012f0 <HAL_RCC_OscConfig+0x3a8>
 800129c:	40021000 	.word	0x40021000
 80012a0:	fffeffff 	.word	0xfffeffff
 80012a4:	fffbffff 	.word	0xfffbffff
 80012a8:	ffffe0ff 	.word	0xffffe0ff
 80012ac:	08002adc 	.word	0x08002adc
 80012b0:	20000000 	.word	0x20000000
 80012b4:	20000004 	.word	0x20000004
 80012b8:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012bc:	4bbd      	ldr	r3, [pc, #756]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4bbc      	ldr	r3, [pc, #752]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 80012c2:	49bd      	ldr	r1, [pc, #756]	; (80015b8 <HAL_RCC_OscConfig+0x670>)
 80012c4:	400a      	ands	r2, r1
 80012c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c8:	f7ff fb8a 	bl	80009e0 <HAL_GetTick>
 80012cc:	0003      	movs	r3, r0
 80012ce:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012d0:	e008      	b.n	80012e4 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012d2:	f7ff fb85 	bl	80009e0 <HAL_GetTick>
 80012d6:	0002      	movs	r2, r0
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e1ea      	b.n	80016ba <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012e4:	4bb3      	ldr	r3, [pc, #716]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	2380      	movs	r3, #128	; 0x80
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	4013      	ands	r3, r2
 80012ee:	d1f0      	bne.n	80012d2 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2208      	movs	r2, #8
 80012f6:	4013      	ands	r3, r2
 80012f8:	d036      	beq.n	8001368 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d019      	beq.n	8001336 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001302:	4bac      	ldr	r3, [pc, #688]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 8001304:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001306:	4bab      	ldr	r3, [pc, #684]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 8001308:	2101      	movs	r1, #1
 800130a:	430a      	orrs	r2, r1
 800130c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130e:	f7ff fb67 	bl	80009e0 <HAL_GetTick>
 8001312:	0003      	movs	r3, r0
 8001314:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001318:	f7ff fb62 	bl	80009e0 <HAL_GetTick>
 800131c:	0002      	movs	r2, r0
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e1c7      	b.n	80016ba <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800132a:	4ba2      	ldr	r3, [pc, #648]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 800132c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800132e:	2202      	movs	r2, #2
 8001330:	4013      	ands	r3, r2
 8001332:	d0f1      	beq.n	8001318 <HAL_RCC_OscConfig+0x3d0>
 8001334:	e018      	b.n	8001368 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001336:	4b9f      	ldr	r3, [pc, #636]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 8001338:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800133a:	4b9e      	ldr	r3, [pc, #632]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 800133c:	2101      	movs	r1, #1
 800133e:	438a      	bics	r2, r1
 8001340:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001342:	f7ff fb4d 	bl	80009e0 <HAL_GetTick>
 8001346:	0003      	movs	r3, r0
 8001348:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800134c:	f7ff fb48 	bl	80009e0 <HAL_GetTick>
 8001350:	0002      	movs	r2, r0
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e1ad      	b.n	80016ba <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800135e:	4b95      	ldr	r3, [pc, #596]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 8001360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001362:	2202      	movs	r2, #2
 8001364:	4013      	ands	r3, r2
 8001366:	d1f1      	bne.n	800134c <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2204      	movs	r2, #4
 800136e:	4013      	ands	r3, r2
 8001370:	d100      	bne.n	8001374 <HAL_RCC_OscConfig+0x42c>
 8001372:	e0ae      	b.n	80014d2 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001374:	2027      	movs	r0, #39	; 0x27
 8001376:	183b      	adds	r3, r7, r0
 8001378:	2200      	movs	r2, #0
 800137a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800137c:	4b8d      	ldr	r3, [pc, #564]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 800137e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001380:	2380      	movs	r3, #128	; 0x80
 8001382:	055b      	lsls	r3, r3, #21
 8001384:	4013      	ands	r3, r2
 8001386:	d109      	bne.n	800139c <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001388:	4b8a      	ldr	r3, [pc, #552]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 800138a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800138c:	4b89      	ldr	r3, [pc, #548]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 800138e:	2180      	movs	r1, #128	; 0x80
 8001390:	0549      	lsls	r1, r1, #21
 8001392:	430a      	orrs	r2, r1
 8001394:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001396:	183b      	adds	r3, r7, r0
 8001398:	2201      	movs	r2, #1
 800139a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800139c:	4b87      	ldr	r3, [pc, #540]	; (80015bc <HAL_RCC_OscConfig+0x674>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	2380      	movs	r3, #128	; 0x80
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	4013      	ands	r3, r2
 80013a6:	d11a      	bne.n	80013de <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013a8:	4b84      	ldr	r3, [pc, #528]	; (80015bc <HAL_RCC_OscConfig+0x674>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4b83      	ldr	r3, [pc, #524]	; (80015bc <HAL_RCC_OscConfig+0x674>)
 80013ae:	2180      	movs	r1, #128	; 0x80
 80013b0:	0049      	lsls	r1, r1, #1
 80013b2:	430a      	orrs	r2, r1
 80013b4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013b6:	f7ff fb13 	bl	80009e0 <HAL_GetTick>
 80013ba:	0003      	movs	r3, r0
 80013bc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013c0:	f7ff fb0e 	bl	80009e0 <HAL_GetTick>
 80013c4:	0002      	movs	r2, r0
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b64      	cmp	r3, #100	; 0x64
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e173      	b.n	80016ba <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d2:	4b7a      	ldr	r3, [pc, #488]	; (80015bc <HAL_RCC_OscConfig+0x674>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	2380      	movs	r3, #128	; 0x80
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4013      	ands	r3, r2
 80013dc:	d0f0      	beq.n	80013c0 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	2380      	movs	r3, #128	; 0x80
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d107      	bne.n	80013fa <HAL_RCC_OscConfig+0x4b2>
 80013ea:	4b72      	ldr	r3, [pc, #456]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 80013ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013ee:	4b71      	ldr	r3, [pc, #452]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 80013f0:	2180      	movs	r1, #128	; 0x80
 80013f2:	0049      	lsls	r1, r1, #1
 80013f4:	430a      	orrs	r2, r1
 80013f6:	651a      	str	r2, [r3, #80]	; 0x50
 80013f8:	e031      	b.n	800145e <HAL_RCC_OscConfig+0x516>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10c      	bne.n	800141c <HAL_RCC_OscConfig+0x4d4>
 8001402:	4b6c      	ldr	r3, [pc, #432]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 8001404:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001406:	4b6b      	ldr	r3, [pc, #428]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 8001408:	496b      	ldr	r1, [pc, #428]	; (80015b8 <HAL_RCC_OscConfig+0x670>)
 800140a:	400a      	ands	r2, r1
 800140c:	651a      	str	r2, [r3, #80]	; 0x50
 800140e:	4b69      	ldr	r3, [pc, #420]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 8001410:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001412:	4b68      	ldr	r3, [pc, #416]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 8001414:	496a      	ldr	r1, [pc, #424]	; (80015c0 <HAL_RCC_OscConfig+0x678>)
 8001416:	400a      	ands	r2, r1
 8001418:	651a      	str	r2, [r3, #80]	; 0x50
 800141a:	e020      	b.n	800145e <HAL_RCC_OscConfig+0x516>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	23a0      	movs	r3, #160	; 0xa0
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	429a      	cmp	r2, r3
 8001426:	d10e      	bne.n	8001446 <HAL_RCC_OscConfig+0x4fe>
 8001428:	4b62      	ldr	r3, [pc, #392]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 800142a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800142c:	4b61      	ldr	r3, [pc, #388]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 800142e:	2180      	movs	r1, #128	; 0x80
 8001430:	00c9      	lsls	r1, r1, #3
 8001432:	430a      	orrs	r2, r1
 8001434:	651a      	str	r2, [r3, #80]	; 0x50
 8001436:	4b5f      	ldr	r3, [pc, #380]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 8001438:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800143a:	4b5e      	ldr	r3, [pc, #376]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 800143c:	2180      	movs	r1, #128	; 0x80
 800143e:	0049      	lsls	r1, r1, #1
 8001440:	430a      	orrs	r2, r1
 8001442:	651a      	str	r2, [r3, #80]	; 0x50
 8001444:	e00b      	b.n	800145e <HAL_RCC_OscConfig+0x516>
 8001446:	4b5b      	ldr	r3, [pc, #364]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 8001448:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800144a:	4b5a      	ldr	r3, [pc, #360]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 800144c:	495a      	ldr	r1, [pc, #360]	; (80015b8 <HAL_RCC_OscConfig+0x670>)
 800144e:	400a      	ands	r2, r1
 8001450:	651a      	str	r2, [r3, #80]	; 0x50
 8001452:	4b58      	ldr	r3, [pc, #352]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 8001454:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001456:	4b57      	ldr	r3, [pc, #348]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 8001458:	4959      	ldr	r1, [pc, #356]	; (80015c0 <HAL_RCC_OscConfig+0x678>)
 800145a:	400a      	ands	r2, r1
 800145c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d015      	beq.n	8001492 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001466:	f7ff fabb 	bl	80009e0 <HAL_GetTick>
 800146a:	0003      	movs	r3, r0
 800146c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800146e:	e009      	b.n	8001484 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001470:	f7ff fab6 	bl	80009e0 <HAL_GetTick>
 8001474:	0002      	movs	r2, r0
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	4a52      	ldr	r2, [pc, #328]	; (80015c4 <HAL_RCC_OscConfig+0x67c>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e11a      	b.n	80016ba <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001484:	4b4b      	ldr	r3, [pc, #300]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 8001486:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4013      	ands	r3, r2
 800148e:	d0ef      	beq.n	8001470 <HAL_RCC_OscConfig+0x528>
 8001490:	e014      	b.n	80014bc <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001492:	f7ff faa5 	bl	80009e0 <HAL_GetTick>
 8001496:	0003      	movs	r3, r0
 8001498:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800149a:	e009      	b.n	80014b0 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800149c:	f7ff faa0 	bl	80009e0 <HAL_GetTick>
 80014a0:	0002      	movs	r2, r0
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	4a47      	ldr	r2, [pc, #284]	; (80015c4 <HAL_RCC_OscConfig+0x67c>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e104      	b.n	80016ba <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014b0:	4b40      	ldr	r3, [pc, #256]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 80014b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014b4:	2380      	movs	r3, #128	; 0x80
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4013      	ands	r3, r2
 80014ba:	d1ef      	bne.n	800149c <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014bc:	2327      	movs	r3, #39	; 0x27
 80014be:	18fb      	adds	r3, r7, r3
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d105      	bne.n	80014d2 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014c6:	4b3b      	ldr	r3, [pc, #236]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 80014c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014ca:	4b3a      	ldr	r3, [pc, #232]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 80014cc:	493e      	ldr	r1, [pc, #248]	; (80015c8 <HAL_RCC_OscConfig+0x680>)
 80014ce:	400a      	ands	r2, r1
 80014d0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2220      	movs	r2, #32
 80014d8:	4013      	ands	r3, r2
 80014da:	d049      	beq.n	8001570 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d026      	beq.n	8001532 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80014e4:	4b33      	ldr	r3, [pc, #204]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	4b32      	ldr	r3, [pc, #200]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 80014ea:	2101      	movs	r1, #1
 80014ec:	430a      	orrs	r2, r1
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	4b30      	ldr	r3, [pc, #192]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 80014f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014f4:	4b2f      	ldr	r3, [pc, #188]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 80014f6:	2101      	movs	r1, #1
 80014f8:	430a      	orrs	r2, r1
 80014fa:	635a      	str	r2, [r3, #52]	; 0x34
 80014fc:	4b33      	ldr	r3, [pc, #204]	; (80015cc <HAL_RCC_OscConfig+0x684>)
 80014fe:	6a1a      	ldr	r2, [r3, #32]
 8001500:	4b32      	ldr	r3, [pc, #200]	; (80015cc <HAL_RCC_OscConfig+0x684>)
 8001502:	2180      	movs	r1, #128	; 0x80
 8001504:	0189      	lsls	r1, r1, #6
 8001506:	430a      	orrs	r2, r1
 8001508:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150a:	f7ff fa69 	bl	80009e0 <HAL_GetTick>
 800150e:	0003      	movs	r3, r0
 8001510:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001514:	f7ff fa64 	bl	80009e0 <HAL_GetTick>
 8001518:	0002      	movs	r2, r0
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e0c9      	b.n	80016ba <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001526:	4b23      	ldr	r3, [pc, #140]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2202      	movs	r2, #2
 800152c:	4013      	ands	r3, r2
 800152e:	d0f1      	beq.n	8001514 <HAL_RCC_OscConfig+0x5cc>
 8001530:	e01e      	b.n	8001570 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001532:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 8001538:	2101      	movs	r1, #1
 800153a:	438a      	bics	r2, r1
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	4b23      	ldr	r3, [pc, #140]	; (80015cc <HAL_RCC_OscConfig+0x684>)
 8001540:	6a1a      	ldr	r2, [r3, #32]
 8001542:	4b22      	ldr	r3, [pc, #136]	; (80015cc <HAL_RCC_OscConfig+0x684>)
 8001544:	4922      	ldr	r1, [pc, #136]	; (80015d0 <HAL_RCC_OscConfig+0x688>)
 8001546:	400a      	ands	r2, r1
 8001548:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154a:	f7ff fa49 	bl	80009e0 <HAL_GetTick>
 800154e:	0003      	movs	r3, r0
 8001550:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001554:	f7ff fa44 	bl	80009e0 <HAL_GetTick>
 8001558:	0002      	movs	r2, r0
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e0a9      	b.n	80016ba <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001566:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2202      	movs	r2, #2
 800156c:	4013      	ands	r3, r2
 800156e:	d1f1      	bne.n	8001554 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001574:	2b00      	cmp	r3, #0
 8001576:	d100      	bne.n	800157a <HAL_RCC_OscConfig+0x632>
 8001578:	e09e      	b.n	80016b8 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800157a:	6a3b      	ldr	r3, [r7, #32]
 800157c:	2b0c      	cmp	r3, #12
 800157e:	d100      	bne.n	8001582 <HAL_RCC_OscConfig+0x63a>
 8001580:	e077      	b.n	8001672 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001586:	2b02      	cmp	r3, #2
 8001588:	d158      	bne.n	800163c <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800158a:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <HAL_RCC_OscConfig+0x66c>)
 8001590:	4910      	ldr	r1, [pc, #64]	; (80015d4 <HAL_RCC_OscConfig+0x68c>)
 8001592:	400a      	ands	r2, r1
 8001594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001596:	f7ff fa23 	bl	80009e0 <HAL_GetTick>
 800159a:	0003      	movs	r3, r0
 800159c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800159e:	e01b      	b.n	80015d8 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a0:	f7ff fa1e 	bl	80009e0 <HAL_GetTick>
 80015a4:	0002      	movs	r2, r0
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d914      	bls.n	80015d8 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e083      	b.n	80016ba <HAL_RCC_OscConfig+0x772>
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	40021000 	.word	0x40021000
 80015b8:	fffffeff 	.word	0xfffffeff
 80015bc:	40007000 	.word	0x40007000
 80015c0:	fffffbff 	.word	0xfffffbff
 80015c4:	00001388 	.word	0x00001388
 80015c8:	efffffff 	.word	0xefffffff
 80015cc:	40010000 	.word	0x40010000
 80015d0:	ffffdfff 	.word	0xffffdfff
 80015d4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015d8:	4b3a      	ldr	r3, [pc, #232]	; (80016c4 <HAL_RCC_OscConfig+0x77c>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	049b      	lsls	r3, r3, #18
 80015e0:	4013      	ands	r3, r2
 80015e2:	d1dd      	bne.n	80015a0 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015e4:	4b37      	ldr	r3, [pc, #220]	; (80016c4 <HAL_RCC_OscConfig+0x77c>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	4a37      	ldr	r2, [pc, #220]	; (80016c8 <HAL_RCC_OscConfig+0x780>)
 80015ea:	4013      	ands	r3, r2
 80015ec:	0019      	movs	r1, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015fc:	431a      	orrs	r2, r3
 80015fe:	4b31      	ldr	r3, [pc, #196]	; (80016c4 <HAL_RCC_OscConfig+0x77c>)
 8001600:	430a      	orrs	r2, r1
 8001602:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001604:	4b2f      	ldr	r3, [pc, #188]	; (80016c4 <HAL_RCC_OscConfig+0x77c>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b2e      	ldr	r3, [pc, #184]	; (80016c4 <HAL_RCC_OscConfig+0x77c>)
 800160a:	2180      	movs	r1, #128	; 0x80
 800160c:	0449      	lsls	r1, r1, #17
 800160e:	430a      	orrs	r2, r1
 8001610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001612:	f7ff f9e5 	bl	80009e0 <HAL_GetTick>
 8001616:	0003      	movs	r3, r0
 8001618:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800161c:	f7ff f9e0 	bl	80009e0 <HAL_GetTick>
 8001620:	0002      	movs	r2, r0
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e045      	b.n	80016ba <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800162e:	4b25      	ldr	r3, [pc, #148]	; (80016c4 <HAL_RCC_OscConfig+0x77c>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	2380      	movs	r3, #128	; 0x80
 8001634:	049b      	lsls	r3, r3, #18
 8001636:	4013      	ands	r3, r2
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0x6d4>
 800163a:	e03d      	b.n	80016b8 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163c:	4b21      	ldr	r3, [pc, #132]	; (80016c4 <HAL_RCC_OscConfig+0x77c>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4b20      	ldr	r3, [pc, #128]	; (80016c4 <HAL_RCC_OscConfig+0x77c>)
 8001642:	4922      	ldr	r1, [pc, #136]	; (80016cc <HAL_RCC_OscConfig+0x784>)
 8001644:	400a      	ands	r2, r1
 8001646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001648:	f7ff f9ca 	bl	80009e0 <HAL_GetTick>
 800164c:	0003      	movs	r3, r0
 800164e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001652:	f7ff f9c5 	bl	80009e0 <HAL_GetTick>
 8001656:	0002      	movs	r2, r0
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e02a      	b.n	80016ba <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001664:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <HAL_RCC_OscConfig+0x77c>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	049b      	lsls	r3, r3, #18
 800166c:	4013      	ands	r3, r2
 800166e:	d1f0      	bne.n	8001652 <HAL_RCC_OscConfig+0x70a>
 8001670:	e022      	b.n	80016b8 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001676:	2b01      	cmp	r3, #1
 8001678:	d101      	bne.n	800167e <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e01d      	b.n	80016ba <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <HAL_RCC_OscConfig+0x77c>)
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001684:	69fa      	ldr	r2, [r7, #28]
 8001686:	2380      	movs	r3, #128	; 0x80
 8001688:	025b      	lsls	r3, r3, #9
 800168a:	401a      	ands	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001690:	429a      	cmp	r2, r3
 8001692:	d10f      	bne.n	80016b4 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001694:	69fa      	ldr	r2, [r7, #28]
 8001696:	23f0      	movs	r3, #240	; 0xf0
 8001698:	039b      	lsls	r3, r3, #14
 800169a:	401a      	ands	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d107      	bne.n	80016b4 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80016a4:	69fa      	ldr	r2, [r7, #28]
 80016a6:	23c0      	movs	r3, #192	; 0xc0
 80016a8:	041b      	lsls	r3, r3, #16
 80016aa:	401a      	ands	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d001      	beq.n	80016b8 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e000      	b.n	80016ba <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	0018      	movs	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	b00a      	add	sp, #40	; 0x28
 80016c0:	bdb0      	pop	{r4, r5, r7, pc}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	40021000 	.word	0x40021000
 80016c8:	ff02ffff 	.word	0xff02ffff
 80016cc:	feffffff 	.word	0xfeffffff

080016d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016d0:	b5b0      	push	{r4, r5, r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e128      	b.n	8001936 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016e4:	4b96      	ldr	r3, [pc, #600]	; (8001940 <HAL_RCC_ClockConfig+0x270>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2201      	movs	r2, #1
 80016ea:	4013      	ands	r3, r2
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d91e      	bls.n	8001730 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f2:	4b93      	ldr	r3, [pc, #588]	; (8001940 <HAL_RCC_ClockConfig+0x270>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2201      	movs	r2, #1
 80016f8:	4393      	bics	r3, r2
 80016fa:	0019      	movs	r1, r3
 80016fc:	4b90      	ldr	r3, [pc, #576]	; (8001940 <HAL_RCC_ClockConfig+0x270>)
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001704:	f7ff f96c 	bl	80009e0 <HAL_GetTick>
 8001708:	0003      	movs	r3, r0
 800170a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800170c:	e009      	b.n	8001722 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800170e:	f7ff f967 	bl	80009e0 <HAL_GetTick>
 8001712:	0002      	movs	r2, r0
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	4a8a      	ldr	r2, [pc, #552]	; (8001944 <HAL_RCC_ClockConfig+0x274>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e109      	b.n	8001936 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001722:	4b87      	ldr	r3, [pc, #540]	; (8001940 <HAL_RCC_ClockConfig+0x270>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2201      	movs	r2, #1
 8001728:	4013      	ands	r3, r2
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d1ee      	bne.n	800170e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2202      	movs	r2, #2
 8001736:	4013      	ands	r3, r2
 8001738:	d009      	beq.n	800174e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800173a:	4b83      	ldr	r3, [pc, #524]	; (8001948 <HAL_RCC_ClockConfig+0x278>)
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	22f0      	movs	r2, #240	; 0xf0
 8001740:	4393      	bics	r3, r2
 8001742:	0019      	movs	r1, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	4b7f      	ldr	r3, [pc, #508]	; (8001948 <HAL_RCC_ClockConfig+0x278>)
 800174a:	430a      	orrs	r2, r1
 800174c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2201      	movs	r2, #1
 8001754:	4013      	ands	r3, r2
 8001756:	d100      	bne.n	800175a <HAL_RCC_ClockConfig+0x8a>
 8001758:	e089      	b.n	800186e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d107      	bne.n	8001772 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001762:	4b79      	ldr	r3, [pc, #484]	; (8001948 <HAL_RCC_ClockConfig+0x278>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	2380      	movs	r3, #128	; 0x80
 8001768:	029b      	lsls	r3, r3, #10
 800176a:	4013      	ands	r3, r2
 800176c:	d120      	bne.n	80017b0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e0e1      	b.n	8001936 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b03      	cmp	r3, #3
 8001778:	d107      	bne.n	800178a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800177a:	4b73      	ldr	r3, [pc, #460]	; (8001948 <HAL_RCC_ClockConfig+0x278>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	2380      	movs	r3, #128	; 0x80
 8001780:	049b      	lsls	r3, r3, #18
 8001782:	4013      	ands	r3, r2
 8001784:	d114      	bne.n	80017b0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e0d5      	b.n	8001936 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d106      	bne.n	80017a0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001792:	4b6d      	ldr	r3, [pc, #436]	; (8001948 <HAL_RCC_ClockConfig+0x278>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2204      	movs	r2, #4
 8001798:	4013      	ands	r3, r2
 800179a:	d109      	bne.n	80017b0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e0ca      	b.n	8001936 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80017a0:	4b69      	ldr	r3, [pc, #420]	; (8001948 <HAL_RCC_ClockConfig+0x278>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	2380      	movs	r3, #128	; 0x80
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4013      	ands	r3, r2
 80017aa:	d101      	bne.n	80017b0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e0c2      	b.n	8001936 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017b0:	4b65      	ldr	r3, [pc, #404]	; (8001948 <HAL_RCC_ClockConfig+0x278>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	2203      	movs	r2, #3
 80017b6:	4393      	bics	r3, r2
 80017b8:	0019      	movs	r1, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	4b62      	ldr	r3, [pc, #392]	; (8001948 <HAL_RCC_ClockConfig+0x278>)
 80017c0:	430a      	orrs	r2, r1
 80017c2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017c4:	f7ff f90c 	bl	80009e0 <HAL_GetTick>
 80017c8:	0003      	movs	r3, r0
 80017ca:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d111      	bne.n	80017f8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017d4:	e009      	b.n	80017ea <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d6:	f7ff f903 	bl	80009e0 <HAL_GetTick>
 80017da:	0002      	movs	r2, r0
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	4a58      	ldr	r2, [pc, #352]	; (8001944 <HAL_RCC_ClockConfig+0x274>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e0a5      	b.n	8001936 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017ea:	4b57      	ldr	r3, [pc, #348]	; (8001948 <HAL_RCC_ClockConfig+0x278>)
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	220c      	movs	r2, #12
 80017f0:	4013      	ands	r3, r2
 80017f2:	2b08      	cmp	r3, #8
 80017f4:	d1ef      	bne.n	80017d6 <HAL_RCC_ClockConfig+0x106>
 80017f6:	e03a      	b.n	800186e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b03      	cmp	r3, #3
 80017fe:	d111      	bne.n	8001824 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001800:	e009      	b.n	8001816 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001802:	f7ff f8ed 	bl	80009e0 <HAL_GetTick>
 8001806:	0002      	movs	r2, r0
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	4a4d      	ldr	r2, [pc, #308]	; (8001944 <HAL_RCC_ClockConfig+0x274>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e08f      	b.n	8001936 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001816:	4b4c      	ldr	r3, [pc, #304]	; (8001948 <HAL_RCC_ClockConfig+0x278>)
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	220c      	movs	r2, #12
 800181c:	4013      	ands	r3, r2
 800181e:	2b0c      	cmp	r3, #12
 8001820:	d1ef      	bne.n	8001802 <HAL_RCC_ClockConfig+0x132>
 8001822:	e024      	b.n	800186e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d11b      	bne.n	8001864 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800182c:	e009      	b.n	8001842 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800182e:	f7ff f8d7 	bl	80009e0 <HAL_GetTick>
 8001832:	0002      	movs	r2, r0
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	4a42      	ldr	r2, [pc, #264]	; (8001944 <HAL_RCC_ClockConfig+0x274>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e079      	b.n	8001936 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001842:	4b41      	ldr	r3, [pc, #260]	; (8001948 <HAL_RCC_ClockConfig+0x278>)
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	220c      	movs	r2, #12
 8001848:	4013      	ands	r3, r2
 800184a:	2b04      	cmp	r3, #4
 800184c:	d1ef      	bne.n	800182e <HAL_RCC_ClockConfig+0x15e>
 800184e:	e00e      	b.n	800186e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001850:	f7ff f8c6 	bl	80009e0 <HAL_GetTick>
 8001854:	0002      	movs	r2, r0
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	4a3a      	ldr	r2, [pc, #232]	; (8001944 <HAL_RCC_ClockConfig+0x274>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e068      	b.n	8001936 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001864:	4b38      	ldr	r3, [pc, #224]	; (8001948 <HAL_RCC_ClockConfig+0x278>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	220c      	movs	r2, #12
 800186a:	4013      	ands	r3, r2
 800186c:	d1f0      	bne.n	8001850 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800186e:	4b34      	ldr	r3, [pc, #208]	; (8001940 <HAL_RCC_ClockConfig+0x270>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2201      	movs	r2, #1
 8001874:	4013      	ands	r3, r2
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	429a      	cmp	r2, r3
 800187a:	d21e      	bcs.n	80018ba <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187c:	4b30      	ldr	r3, [pc, #192]	; (8001940 <HAL_RCC_ClockConfig+0x270>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2201      	movs	r2, #1
 8001882:	4393      	bics	r3, r2
 8001884:	0019      	movs	r1, r3
 8001886:	4b2e      	ldr	r3, [pc, #184]	; (8001940 <HAL_RCC_ClockConfig+0x270>)
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	430a      	orrs	r2, r1
 800188c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800188e:	f7ff f8a7 	bl	80009e0 <HAL_GetTick>
 8001892:	0003      	movs	r3, r0
 8001894:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001896:	e009      	b.n	80018ac <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001898:	f7ff f8a2 	bl	80009e0 <HAL_GetTick>
 800189c:	0002      	movs	r2, r0
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	4a28      	ldr	r2, [pc, #160]	; (8001944 <HAL_RCC_ClockConfig+0x274>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e044      	b.n	8001936 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ac:	4b24      	ldr	r3, [pc, #144]	; (8001940 <HAL_RCC_ClockConfig+0x270>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2201      	movs	r2, #1
 80018b2:	4013      	ands	r3, r2
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d1ee      	bne.n	8001898 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2204      	movs	r2, #4
 80018c0:	4013      	ands	r3, r2
 80018c2:	d009      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018c4:	4b20      	ldr	r3, [pc, #128]	; (8001948 <HAL_RCC_ClockConfig+0x278>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	4a20      	ldr	r2, [pc, #128]	; (800194c <HAL_RCC_ClockConfig+0x27c>)
 80018ca:	4013      	ands	r3, r2
 80018cc:	0019      	movs	r1, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68da      	ldr	r2, [r3, #12]
 80018d2:	4b1d      	ldr	r3, [pc, #116]	; (8001948 <HAL_RCC_ClockConfig+0x278>)
 80018d4:	430a      	orrs	r2, r1
 80018d6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2208      	movs	r2, #8
 80018de:	4013      	ands	r3, r2
 80018e0:	d00a      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018e2:	4b19      	ldr	r3, [pc, #100]	; (8001948 <HAL_RCC_ClockConfig+0x278>)
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	4a1a      	ldr	r2, [pc, #104]	; (8001950 <HAL_RCC_ClockConfig+0x280>)
 80018e8:	4013      	ands	r3, r2
 80018ea:	0019      	movs	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	00da      	lsls	r2, r3, #3
 80018f2:	4b15      	ldr	r3, [pc, #84]	; (8001948 <HAL_RCC_ClockConfig+0x278>)
 80018f4:	430a      	orrs	r2, r1
 80018f6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018f8:	f000 f832 	bl	8001960 <HAL_RCC_GetSysClockFreq>
 80018fc:	0001      	movs	r1, r0
 80018fe:	4b12      	ldr	r3, [pc, #72]	; (8001948 <HAL_RCC_ClockConfig+0x278>)
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	091b      	lsrs	r3, r3, #4
 8001904:	220f      	movs	r2, #15
 8001906:	4013      	ands	r3, r2
 8001908:	4a12      	ldr	r2, [pc, #72]	; (8001954 <HAL_RCC_ClockConfig+0x284>)
 800190a:	5cd3      	ldrb	r3, [r2, r3]
 800190c:	000a      	movs	r2, r1
 800190e:	40da      	lsrs	r2, r3
 8001910:	4b11      	ldr	r3, [pc, #68]	; (8001958 <HAL_RCC_ClockConfig+0x288>)
 8001912:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <HAL_RCC_ClockConfig+0x28c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	250b      	movs	r5, #11
 800191a:	197c      	adds	r4, r7, r5
 800191c:	0018      	movs	r0, r3
 800191e:	f7ff f819 	bl	8000954 <HAL_InitTick>
 8001922:	0003      	movs	r3, r0
 8001924:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001926:	197b      	adds	r3, r7, r5
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d002      	beq.n	8001934 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800192e:	197b      	adds	r3, r7, r5
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	e000      	b.n	8001936 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	0018      	movs	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	b004      	add	sp, #16
 800193c:	bdb0      	pop	{r4, r5, r7, pc}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	40022000 	.word	0x40022000
 8001944:	00001388 	.word	0x00001388
 8001948:	40021000 	.word	0x40021000
 800194c:	fffff8ff 	.word	0xfffff8ff
 8001950:	ffffc7ff 	.word	0xffffc7ff
 8001954:	08002adc 	.word	0x08002adc
 8001958:	20000000 	.word	0x20000000
 800195c:	20000004 	.word	0x20000004

08001960 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001960:	b5b0      	push	{r4, r5, r7, lr}
 8001962:	b08e      	sub	sp, #56	; 0x38
 8001964:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001966:	4b4c      	ldr	r3, [pc, #304]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x138>)
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800196c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800196e:	230c      	movs	r3, #12
 8001970:	4013      	ands	r3, r2
 8001972:	2b0c      	cmp	r3, #12
 8001974:	d014      	beq.n	80019a0 <HAL_RCC_GetSysClockFreq+0x40>
 8001976:	d900      	bls.n	800197a <HAL_RCC_GetSysClockFreq+0x1a>
 8001978:	e07b      	b.n	8001a72 <HAL_RCC_GetSysClockFreq+0x112>
 800197a:	2b04      	cmp	r3, #4
 800197c:	d002      	beq.n	8001984 <HAL_RCC_GetSysClockFreq+0x24>
 800197e:	2b08      	cmp	r3, #8
 8001980:	d00b      	beq.n	800199a <HAL_RCC_GetSysClockFreq+0x3a>
 8001982:	e076      	b.n	8001a72 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001984:	4b44      	ldr	r3, [pc, #272]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x138>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2210      	movs	r2, #16
 800198a:	4013      	ands	r3, r2
 800198c:	d002      	beq.n	8001994 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800198e:	4b43      	ldr	r3, [pc, #268]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001990:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001992:	e07c      	b.n	8001a8e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001994:	4b42      	ldr	r3, [pc, #264]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x140>)
 8001996:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001998:	e079      	b.n	8001a8e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800199a:	4b42      	ldr	r3, [pc, #264]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x144>)
 800199c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800199e:	e076      	b.n	8001a8e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80019a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a2:	0c9a      	lsrs	r2, r3, #18
 80019a4:	230f      	movs	r3, #15
 80019a6:	401a      	ands	r2, r3
 80019a8:	4b3f      	ldr	r3, [pc, #252]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x148>)
 80019aa:	5c9b      	ldrb	r3, [r3, r2]
 80019ac:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80019ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b0:	0d9a      	lsrs	r2, r3, #22
 80019b2:	2303      	movs	r3, #3
 80019b4:	4013      	ands	r3, r2
 80019b6:	3301      	adds	r3, #1
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ba:	4b37      	ldr	r3, [pc, #220]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x138>)
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	2380      	movs	r3, #128	; 0x80
 80019c0:	025b      	lsls	r3, r3, #9
 80019c2:	4013      	ands	r3, r2
 80019c4:	d01a      	beq.n	80019fc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80019c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c8:	61bb      	str	r3, [r7, #24]
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
 80019ce:	4a35      	ldr	r2, [pc, #212]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x144>)
 80019d0:	2300      	movs	r3, #0
 80019d2:	69b8      	ldr	r0, [r7, #24]
 80019d4:	69f9      	ldr	r1, [r7, #28]
 80019d6:	f7fe fc4d 	bl	8000274 <__aeabi_lmul>
 80019da:	0002      	movs	r2, r0
 80019dc:	000b      	movs	r3, r1
 80019de:	0010      	movs	r0, r2
 80019e0:	0019      	movs	r1, r3
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f7fe fc21 	bl	8000234 <__aeabi_uldivmod>
 80019f2:	0002      	movs	r2, r0
 80019f4:	000b      	movs	r3, r1
 80019f6:	0013      	movs	r3, r2
 80019f8:	637b      	str	r3, [r7, #52]	; 0x34
 80019fa:	e037      	b.n	8001a6c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80019fc:	4b26      	ldr	r3, [pc, #152]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x138>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2210      	movs	r2, #16
 8001a02:	4013      	ands	r3, r2
 8001a04:	d01a      	beq.n	8001a3c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	4a23      	ldr	r2, [pc, #140]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001a10:	2300      	movs	r3, #0
 8001a12:	68b8      	ldr	r0, [r7, #8]
 8001a14:	68f9      	ldr	r1, [r7, #12]
 8001a16:	f7fe fc2d 	bl	8000274 <__aeabi_lmul>
 8001a1a:	0002      	movs	r2, r0
 8001a1c:	000b      	movs	r3, r1
 8001a1e:	0010      	movs	r0, r2
 8001a20:	0019      	movs	r1, r3
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	603b      	str	r3, [r7, #0]
 8001a26:	2300      	movs	r3, #0
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f7fe fc01 	bl	8000234 <__aeabi_uldivmod>
 8001a32:	0002      	movs	r2, r0
 8001a34:	000b      	movs	r3, r1
 8001a36:	0013      	movs	r3, r2
 8001a38:	637b      	str	r3, [r7, #52]	; 0x34
 8001a3a:	e017      	b.n	8001a6c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a3e:	0018      	movs	r0, r3
 8001a40:	2300      	movs	r3, #0
 8001a42:	0019      	movs	r1, r3
 8001a44:	4a16      	ldr	r2, [pc, #88]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x140>)
 8001a46:	2300      	movs	r3, #0
 8001a48:	f7fe fc14 	bl	8000274 <__aeabi_lmul>
 8001a4c:	0002      	movs	r2, r0
 8001a4e:	000b      	movs	r3, r1
 8001a50:	0010      	movs	r0, r2
 8001a52:	0019      	movs	r1, r3
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	001c      	movs	r4, r3
 8001a58:	2300      	movs	r3, #0
 8001a5a:	001d      	movs	r5, r3
 8001a5c:	0022      	movs	r2, r4
 8001a5e:	002b      	movs	r3, r5
 8001a60:	f7fe fbe8 	bl	8000234 <__aeabi_uldivmod>
 8001a64:	0002      	movs	r2, r0
 8001a66:	000b      	movs	r3, r1
 8001a68:	0013      	movs	r3, r2
 8001a6a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a6e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a70:	e00d      	b.n	8001a8e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	0b5b      	lsrs	r3, r3, #13
 8001a78:	2207      	movs	r2, #7
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	3301      	adds	r3, #1
 8001a82:	2280      	movs	r2, #128	; 0x80
 8001a84:	0212      	lsls	r2, r2, #8
 8001a86:	409a      	lsls	r2, r3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a8c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001a90:	0018      	movs	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	b00e      	add	sp, #56	; 0x38
 8001a96:	bdb0      	pop	{r4, r5, r7, pc}
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	003d0900 	.word	0x003d0900
 8001aa0:	00f42400 	.word	0x00f42400
 8001aa4:	007a1200 	.word	0x007a1200
 8001aa8:	08002aec 	.word	0x08002aec

08001aac <__errno>:
 8001aac:	4b01      	ldr	r3, [pc, #4]	; (8001ab4 <__errno+0x8>)
 8001aae:	6818      	ldr	r0, [r3, #0]
 8001ab0:	4770      	bx	lr
 8001ab2:	46c0      	nop			; (mov r8, r8)
 8001ab4:	2000000c 	.word	0x2000000c

08001ab8 <__libc_init_array>:
 8001ab8:	b570      	push	{r4, r5, r6, lr}
 8001aba:	2600      	movs	r6, #0
 8001abc:	4d0c      	ldr	r5, [pc, #48]	; (8001af0 <__libc_init_array+0x38>)
 8001abe:	4c0d      	ldr	r4, [pc, #52]	; (8001af4 <__libc_init_array+0x3c>)
 8001ac0:	1b64      	subs	r4, r4, r5
 8001ac2:	10a4      	asrs	r4, r4, #2
 8001ac4:	42a6      	cmp	r6, r4
 8001ac6:	d109      	bne.n	8001adc <__libc_init_array+0x24>
 8001ac8:	2600      	movs	r6, #0
 8001aca:	f000 fff9 	bl	8002ac0 <_init>
 8001ace:	4d0a      	ldr	r5, [pc, #40]	; (8001af8 <__libc_init_array+0x40>)
 8001ad0:	4c0a      	ldr	r4, [pc, #40]	; (8001afc <__libc_init_array+0x44>)
 8001ad2:	1b64      	subs	r4, r4, r5
 8001ad4:	10a4      	asrs	r4, r4, #2
 8001ad6:	42a6      	cmp	r6, r4
 8001ad8:	d105      	bne.n	8001ae6 <__libc_init_array+0x2e>
 8001ada:	bd70      	pop	{r4, r5, r6, pc}
 8001adc:	00b3      	lsls	r3, r6, #2
 8001ade:	58eb      	ldr	r3, [r5, r3]
 8001ae0:	4798      	blx	r3
 8001ae2:	3601      	adds	r6, #1
 8001ae4:	e7ee      	b.n	8001ac4 <__libc_init_array+0xc>
 8001ae6:	00b3      	lsls	r3, r6, #2
 8001ae8:	58eb      	ldr	r3, [r5, r3]
 8001aea:	4798      	blx	r3
 8001aec:	3601      	adds	r6, #1
 8001aee:	e7f2      	b.n	8001ad6 <__libc_init_array+0x1e>
 8001af0:	08002b98 	.word	0x08002b98
 8001af4:	08002b98 	.word	0x08002b98
 8001af8:	08002b98 	.word	0x08002b98
 8001afc:	08002b9c 	.word	0x08002b9c

08001b00 <memset>:
 8001b00:	0003      	movs	r3, r0
 8001b02:	1882      	adds	r2, r0, r2
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d100      	bne.n	8001b0a <memset+0xa>
 8001b08:	4770      	bx	lr
 8001b0a:	7019      	strb	r1, [r3, #0]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	e7f9      	b.n	8001b04 <memset+0x4>

08001b10 <iprintf>:
 8001b10:	b40f      	push	{r0, r1, r2, r3}
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <iprintf+0x30>)
 8001b14:	b513      	push	{r0, r1, r4, lr}
 8001b16:	681c      	ldr	r4, [r3, #0]
 8001b18:	2c00      	cmp	r4, #0
 8001b1a:	d005      	beq.n	8001b28 <iprintf+0x18>
 8001b1c:	69a3      	ldr	r3, [r4, #24]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d102      	bne.n	8001b28 <iprintf+0x18>
 8001b22:	0020      	movs	r0, r4
 8001b24:	f000 f870 	bl	8001c08 <__sinit>
 8001b28:	ab05      	add	r3, sp, #20
 8001b2a:	0020      	movs	r0, r4
 8001b2c:	9a04      	ldr	r2, [sp, #16]
 8001b2e:	68a1      	ldr	r1, [r4, #8]
 8001b30:	9301      	str	r3, [sp, #4]
 8001b32:	f000 f9cd 	bl	8001ed0 <_vfiprintf_r>
 8001b36:	bc16      	pop	{r1, r2, r4}
 8001b38:	bc08      	pop	{r3}
 8001b3a:	b004      	add	sp, #16
 8001b3c:	4718      	bx	r3
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	2000000c 	.word	0x2000000c

08001b44 <std>:
 8001b44:	2300      	movs	r3, #0
 8001b46:	b510      	push	{r4, lr}
 8001b48:	0004      	movs	r4, r0
 8001b4a:	6003      	str	r3, [r0, #0]
 8001b4c:	6043      	str	r3, [r0, #4]
 8001b4e:	6083      	str	r3, [r0, #8]
 8001b50:	8181      	strh	r1, [r0, #12]
 8001b52:	6643      	str	r3, [r0, #100]	; 0x64
 8001b54:	0019      	movs	r1, r3
 8001b56:	81c2      	strh	r2, [r0, #14]
 8001b58:	6103      	str	r3, [r0, #16]
 8001b5a:	6143      	str	r3, [r0, #20]
 8001b5c:	6183      	str	r3, [r0, #24]
 8001b5e:	2208      	movs	r2, #8
 8001b60:	305c      	adds	r0, #92	; 0x5c
 8001b62:	f7ff ffcd 	bl	8001b00 <memset>
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <std+0x38>)
 8001b68:	6224      	str	r4, [r4, #32]
 8001b6a:	6263      	str	r3, [r4, #36]	; 0x24
 8001b6c:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <std+0x3c>)
 8001b6e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001b70:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <std+0x40>)
 8001b72:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001b74:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <std+0x44>)
 8001b76:	6323      	str	r3, [r4, #48]	; 0x30
 8001b78:	bd10      	pop	{r4, pc}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	0800246d 	.word	0x0800246d
 8001b80:	08002495 	.word	0x08002495
 8001b84:	080024cd 	.word	0x080024cd
 8001b88:	080024f9 	.word	0x080024f9

08001b8c <_cleanup_r>:
 8001b8c:	b510      	push	{r4, lr}
 8001b8e:	4902      	ldr	r1, [pc, #8]	; (8001b98 <_cleanup_r+0xc>)
 8001b90:	f000 f8ba 	bl	8001d08 <_fwalk_reent>
 8001b94:	bd10      	pop	{r4, pc}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	08002805 	.word	0x08002805

08001b9c <__sfmoreglue>:
 8001b9c:	b570      	push	{r4, r5, r6, lr}
 8001b9e:	2568      	movs	r5, #104	; 0x68
 8001ba0:	1e4a      	subs	r2, r1, #1
 8001ba2:	4355      	muls	r5, r2
 8001ba4:	000e      	movs	r6, r1
 8001ba6:	0029      	movs	r1, r5
 8001ba8:	3174      	adds	r1, #116	; 0x74
 8001baa:	f000 f8f3 	bl	8001d94 <_malloc_r>
 8001bae:	1e04      	subs	r4, r0, #0
 8001bb0:	d008      	beq.n	8001bc4 <__sfmoreglue+0x28>
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	002a      	movs	r2, r5
 8001bb6:	6001      	str	r1, [r0, #0]
 8001bb8:	6046      	str	r6, [r0, #4]
 8001bba:	300c      	adds	r0, #12
 8001bbc:	60a0      	str	r0, [r4, #8]
 8001bbe:	3268      	adds	r2, #104	; 0x68
 8001bc0:	f7ff ff9e 	bl	8001b00 <memset>
 8001bc4:	0020      	movs	r0, r4
 8001bc6:	bd70      	pop	{r4, r5, r6, pc}

08001bc8 <__sfp_lock_acquire>:
 8001bc8:	b510      	push	{r4, lr}
 8001bca:	4802      	ldr	r0, [pc, #8]	; (8001bd4 <__sfp_lock_acquire+0xc>)
 8001bcc:	f000 f8bd 	bl	8001d4a <__retarget_lock_acquire_recursive>
 8001bd0:	bd10      	pop	{r4, pc}
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	20000099 	.word	0x20000099

08001bd8 <__sfp_lock_release>:
 8001bd8:	b510      	push	{r4, lr}
 8001bda:	4802      	ldr	r0, [pc, #8]	; (8001be4 <__sfp_lock_release+0xc>)
 8001bdc:	f000 f8b6 	bl	8001d4c <__retarget_lock_release_recursive>
 8001be0:	bd10      	pop	{r4, pc}
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	20000099 	.word	0x20000099

08001be8 <__sinit_lock_acquire>:
 8001be8:	b510      	push	{r4, lr}
 8001bea:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <__sinit_lock_acquire+0xc>)
 8001bec:	f000 f8ad 	bl	8001d4a <__retarget_lock_acquire_recursive>
 8001bf0:	bd10      	pop	{r4, pc}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	2000009a 	.word	0x2000009a

08001bf8 <__sinit_lock_release>:
 8001bf8:	b510      	push	{r4, lr}
 8001bfa:	4802      	ldr	r0, [pc, #8]	; (8001c04 <__sinit_lock_release+0xc>)
 8001bfc:	f000 f8a6 	bl	8001d4c <__retarget_lock_release_recursive>
 8001c00:	bd10      	pop	{r4, pc}
 8001c02:	46c0      	nop			; (mov r8, r8)
 8001c04:	2000009a 	.word	0x2000009a

08001c08 <__sinit>:
 8001c08:	b513      	push	{r0, r1, r4, lr}
 8001c0a:	0004      	movs	r4, r0
 8001c0c:	f7ff ffec 	bl	8001be8 <__sinit_lock_acquire>
 8001c10:	69a3      	ldr	r3, [r4, #24]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d002      	beq.n	8001c1c <__sinit+0x14>
 8001c16:	f7ff ffef 	bl	8001bf8 <__sinit_lock_release>
 8001c1a:	bd13      	pop	{r0, r1, r4, pc}
 8001c1c:	64a3      	str	r3, [r4, #72]	; 0x48
 8001c1e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001c20:	6523      	str	r3, [r4, #80]	; 0x50
 8001c22:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <__sinit+0x68>)
 8001c24:	4a13      	ldr	r2, [pc, #76]	; (8001c74 <__sinit+0x6c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	62a2      	str	r2, [r4, #40]	; 0x28
 8001c2a:	9301      	str	r3, [sp, #4]
 8001c2c:	42a3      	cmp	r3, r4
 8001c2e:	d101      	bne.n	8001c34 <__sinit+0x2c>
 8001c30:	2301      	movs	r3, #1
 8001c32:	61a3      	str	r3, [r4, #24]
 8001c34:	0020      	movs	r0, r4
 8001c36:	f000 f81f 	bl	8001c78 <__sfp>
 8001c3a:	6060      	str	r0, [r4, #4]
 8001c3c:	0020      	movs	r0, r4
 8001c3e:	f000 f81b 	bl	8001c78 <__sfp>
 8001c42:	60a0      	str	r0, [r4, #8]
 8001c44:	0020      	movs	r0, r4
 8001c46:	f000 f817 	bl	8001c78 <__sfp>
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2104      	movs	r1, #4
 8001c4e:	60e0      	str	r0, [r4, #12]
 8001c50:	6860      	ldr	r0, [r4, #4]
 8001c52:	f7ff ff77 	bl	8001b44 <std>
 8001c56:	2201      	movs	r2, #1
 8001c58:	2109      	movs	r1, #9
 8001c5a:	68a0      	ldr	r0, [r4, #8]
 8001c5c:	f7ff ff72 	bl	8001b44 <std>
 8001c60:	2202      	movs	r2, #2
 8001c62:	2112      	movs	r1, #18
 8001c64:	68e0      	ldr	r0, [r4, #12]
 8001c66:	f7ff ff6d 	bl	8001b44 <std>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	61a3      	str	r3, [r4, #24]
 8001c6e:	e7d2      	b.n	8001c16 <__sinit+0xe>
 8001c70:	08002af8 	.word	0x08002af8
 8001c74:	08001b8d 	.word	0x08001b8d

08001c78 <__sfp>:
 8001c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c7a:	0007      	movs	r7, r0
 8001c7c:	f7ff ffa4 	bl	8001bc8 <__sfp_lock_acquire>
 8001c80:	4b1f      	ldr	r3, [pc, #124]	; (8001d00 <__sfp+0x88>)
 8001c82:	681e      	ldr	r6, [r3, #0]
 8001c84:	69b3      	ldr	r3, [r6, #24]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d102      	bne.n	8001c90 <__sfp+0x18>
 8001c8a:	0030      	movs	r0, r6
 8001c8c:	f7ff ffbc 	bl	8001c08 <__sinit>
 8001c90:	3648      	adds	r6, #72	; 0x48
 8001c92:	68b4      	ldr	r4, [r6, #8]
 8001c94:	6873      	ldr	r3, [r6, #4]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	d504      	bpl.n	8001ca4 <__sfp+0x2c>
 8001c9a:	6833      	ldr	r3, [r6, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d022      	beq.n	8001ce6 <__sfp+0x6e>
 8001ca0:	6836      	ldr	r6, [r6, #0]
 8001ca2:	e7f6      	b.n	8001c92 <__sfp+0x1a>
 8001ca4:	220c      	movs	r2, #12
 8001ca6:	5ea5      	ldrsh	r5, [r4, r2]
 8001ca8:	2d00      	cmp	r5, #0
 8001caa:	d11a      	bne.n	8001ce2 <__sfp+0x6a>
 8001cac:	0020      	movs	r0, r4
 8001cae:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <__sfp+0x8c>)
 8001cb0:	3058      	adds	r0, #88	; 0x58
 8001cb2:	60e3      	str	r3, [r4, #12]
 8001cb4:	6665      	str	r5, [r4, #100]	; 0x64
 8001cb6:	f000 f847 	bl	8001d48 <__retarget_lock_init_recursive>
 8001cba:	f7ff ff8d 	bl	8001bd8 <__sfp_lock_release>
 8001cbe:	0020      	movs	r0, r4
 8001cc0:	2208      	movs	r2, #8
 8001cc2:	0029      	movs	r1, r5
 8001cc4:	6025      	str	r5, [r4, #0]
 8001cc6:	60a5      	str	r5, [r4, #8]
 8001cc8:	6065      	str	r5, [r4, #4]
 8001cca:	6125      	str	r5, [r4, #16]
 8001ccc:	6165      	str	r5, [r4, #20]
 8001cce:	61a5      	str	r5, [r4, #24]
 8001cd0:	305c      	adds	r0, #92	; 0x5c
 8001cd2:	f7ff ff15 	bl	8001b00 <memset>
 8001cd6:	6365      	str	r5, [r4, #52]	; 0x34
 8001cd8:	63a5      	str	r5, [r4, #56]	; 0x38
 8001cda:	64a5      	str	r5, [r4, #72]	; 0x48
 8001cdc:	64e5      	str	r5, [r4, #76]	; 0x4c
 8001cde:	0020      	movs	r0, r4
 8001ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ce2:	3468      	adds	r4, #104	; 0x68
 8001ce4:	e7d7      	b.n	8001c96 <__sfp+0x1e>
 8001ce6:	2104      	movs	r1, #4
 8001ce8:	0038      	movs	r0, r7
 8001cea:	f7ff ff57 	bl	8001b9c <__sfmoreglue>
 8001cee:	1e04      	subs	r4, r0, #0
 8001cf0:	6030      	str	r0, [r6, #0]
 8001cf2:	d1d5      	bne.n	8001ca0 <__sfp+0x28>
 8001cf4:	f7ff ff70 	bl	8001bd8 <__sfp_lock_release>
 8001cf8:	230c      	movs	r3, #12
 8001cfa:	603b      	str	r3, [r7, #0]
 8001cfc:	e7ef      	b.n	8001cde <__sfp+0x66>
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	08002af8 	.word	0x08002af8
 8001d04:	ffff0001 	.word	0xffff0001

08001d08 <_fwalk_reent>:
 8001d08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d0a:	0004      	movs	r4, r0
 8001d0c:	0006      	movs	r6, r0
 8001d0e:	2700      	movs	r7, #0
 8001d10:	9101      	str	r1, [sp, #4]
 8001d12:	3448      	adds	r4, #72	; 0x48
 8001d14:	6863      	ldr	r3, [r4, #4]
 8001d16:	68a5      	ldr	r5, [r4, #8]
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	9b00      	ldr	r3, [sp, #0]
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	d504      	bpl.n	8001d2c <_fwalk_reent+0x24>
 8001d22:	6824      	ldr	r4, [r4, #0]
 8001d24:	2c00      	cmp	r4, #0
 8001d26:	d1f5      	bne.n	8001d14 <_fwalk_reent+0xc>
 8001d28:	0038      	movs	r0, r7
 8001d2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001d2c:	89ab      	ldrh	r3, [r5, #12]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d908      	bls.n	8001d44 <_fwalk_reent+0x3c>
 8001d32:	220e      	movs	r2, #14
 8001d34:	5eab      	ldrsh	r3, [r5, r2]
 8001d36:	3301      	adds	r3, #1
 8001d38:	d004      	beq.n	8001d44 <_fwalk_reent+0x3c>
 8001d3a:	0029      	movs	r1, r5
 8001d3c:	0030      	movs	r0, r6
 8001d3e:	9b01      	ldr	r3, [sp, #4]
 8001d40:	4798      	blx	r3
 8001d42:	4307      	orrs	r7, r0
 8001d44:	3568      	adds	r5, #104	; 0x68
 8001d46:	e7e8      	b.n	8001d1a <_fwalk_reent+0x12>

08001d48 <__retarget_lock_init_recursive>:
 8001d48:	4770      	bx	lr

08001d4a <__retarget_lock_acquire_recursive>:
 8001d4a:	4770      	bx	lr

08001d4c <__retarget_lock_release_recursive>:
 8001d4c:	4770      	bx	lr
	...

08001d50 <sbrk_aligned>:
 8001d50:	b570      	push	{r4, r5, r6, lr}
 8001d52:	4e0f      	ldr	r6, [pc, #60]	; (8001d90 <sbrk_aligned+0x40>)
 8001d54:	000d      	movs	r5, r1
 8001d56:	6831      	ldr	r1, [r6, #0]
 8001d58:	0004      	movs	r4, r0
 8001d5a:	2900      	cmp	r1, #0
 8001d5c:	d102      	bne.n	8001d64 <sbrk_aligned+0x14>
 8001d5e:	f000 fb73 	bl	8002448 <_sbrk_r>
 8001d62:	6030      	str	r0, [r6, #0]
 8001d64:	0029      	movs	r1, r5
 8001d66:	0020      	movs	r0, r4
 8001d68:	f000 fb6e 	bl	8002448 <_sbrk_r>
 8001d6c:	1c43      	adds	r3, r0, #1
 8001d6e:	d00a      	beq.n	8001d86 <sbrk_aligned+0x36>
 8001d70:	2303      	movs	r3, #3
 8001d72:	1cc5      	adds	r5, r0, #3
 8001d74:	439d      	bics	r5, r3
 8001d76:	42a8      	cmp	r0, r5
 8001d78:	d007      	beq.n	8001d8a <sbrk_aligned+0x3a>
 8001d7a:	1a29      	subs	r1, r5, r0
 8001d7c:	0020      	movs	r0, r4
 8001d7e:	f000 fb63 	bl	8002448 <_sbrk_r>
 8001d82:	1c43      	adds	r3, r0, #1
 8001d84:	d101      	bne.n	8001d8a <sbrk_aligned+0x3a>
 8001d86:	2501      	movs	r5, #1
 8001d88:	426d      	negs	r5, r5
 8001d8a:	0028      	movs	r0, r5
 8001d8c:	bd70      	pop	{r4, r5, r6, pc}
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	200000a0 	.word	0x200000a0

08001d94 <_malloc_r>:
 8001d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d96:	2203      	movs	r2, #3
 8001d98:	1ccb      	adds	r3, r1, #3
 8001d9a:	4393      	bics	r3, r2
 8001d9c:	3308      	adds	r3, #8
 8001d9e:	0006      	movs	r6, r0
 8001da0:	001f      	movs	r7, r3
 8001da2:	2b0c      	cmp	r3, #12
 8001da4:	d232      	bcs.n	8001e0c <_malloc_r+0x78>
 8001da6:	270c      	movs	r7, #12
 8001da8:	42b9      	cmp	r1, r7
 8001daa:	d831      	bhi.n	8001e10 <_malloc_r+0x7c>
 8001dac:	0030      	movs	r0, r6
 8001dae:	f000 fdf5 	bl	800299c <__malloc_lock>
 8001db2:	4d32      	ldr	r5, [pc, #200]	; (8001e7c <_malloc_r+0xe8>)
 8001db4:	682b      	ldr	r3, [r5, #0]
 8001db6:	001c      	movs	r4, r3
 8001db8:	2c00      	cmp	r4, #0
 8001dba:	d12e      	bne.n	8001e1a <_malloc_r+0x86>
 8001dbc:	0039      	movs	r1, r7
 8001dbe:	0030      	movs	r0, r6
 8001dc0:	f7ff ffc6 	bl	8001d50 <sbrk_aligned>
 8001dc4:	0004      	movs	r4, r0
 8001dc6:	1c43      	adds	r3, r0, #1
 8001dc8:	d11e      	bne.n	8001e08 <_malloc_r+0x74>
 8001dca:	682c      	ldr	r4, [r5, #0]
 8001dcc:	0025      	movs	r5, r4
 8001dce:	2d00      	cmp	r5, #0
 8001dd0:	d14a      	bne.n	8001e68 <_malloc_r+0xd4>
 8001dd2:	6823      	ldr	r3, [r4, #0]
 8001dd4:	0029      	movs	r1, r5
 8001dd6:	18e3      	adds	r3, r4, r3
 8001dd8:	0030      	movs	r0, r6
 8001dda:	9301      	str	r3, [sp, #4]
 8001ddc:	f000 fb34 	bl	8002448 <_sbrk_r>
 8001de0:	9b01      	ldr	r3, [sp, #4]
 8001de2:	4283      	cmp	r3, r0
 8001de4:	d143      	bne.n	8001e6e <_malloc_r+0xda>
 8001de6:	6823      	ldr	r3, [r4, #0]
 8001de8:	3703      	adds	r7, #3
 8001dea:	1aff      	subs	r7, r7, r3
 8001dec:	2303      	movs	r3, #3
 8001dee:	439f      	bics	r7, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	2f0c      	cmp	r7, #12
 8001df4:	d200      	bcs.n	8001df8 <_malloc_r+0x64>
 8001df6:	270c      	movs	r7, #12
 8001df8:	0039      	movs	r1, r7
 8001dfa:	0030      	movs	r0, r6
 8001dfc:	f7ff ffa8 	bl	8001d50 <sbrk_aligned>
 8001e00:	1c43      	adds	r3, r0, #1
 8001e02:	d034      	beq.n	8001e6e <_malloc_r+0xda>
 8001e04:	6823      	ldr	r3, [r4, #0]
 8001e06:	19df      	adds	r7, r3, r7
 8001e08:	6027      	str	r7, [r4, #0]
 8001e0a:	e013      	b.n	8001e34 <_malloc_r+0xa0>
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	dacb      	bge.n	8001da8 <_malloc_r+0x14>
 8001e10:	230c      	movs	r3, #12
 8001e12:	2500      	movs	r5, #0
 8001e14:	6033      	str	r3, [r6, #0]
 8001e16:	0028      	movs	r0, r5
 8001e18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001e1a:	6822      	ldr	r2, [r4, #0]
 8001e1c:	1bd1      	subs	r1, r2, r7
 8001e1e:	d420      	bmi.n	8001e62 <_malloc_r+0xce>
 8001e20:	290b      	cmp	r1, #11
 8001e22:	d917      	bls.n	8001e54 <_malloc_r+0xc0>
 8001e24:	19e2      	adds	r2, r4, r7
 8001e26:	6027      	str	r7, [r4, #0]
 8001e28:	42a3      	cmp	r3, r4
 8001e2a:	d111      	bne.n	8001e50 <_malloc_r+0xbc>
 8001e2c:	602a      	str	r2, [r5, #0]
 8001e2e:	6863      	ldr	r3, [r4, #4]
 8001e30:	6011      	str	r1, [r2, #0]
 8001e32:	6053      	str	r3, [r2, #4]
 8001e34:	0030      	movs	r0, r6
 8001e36:	0025      	movs	r5, r4
 8001e38:	f000 fdb8 	bl	80029ac <__malloc_unlock>
 8001e3c:	2207      	movs	r2, #7
 8001e3e:	350b      	adds	r5, #11
 8001e40:	1d23      	adds	r3, r4, #4
 8001e42:	4395      	bics	r5, r2
 8001e44:	1aea      	subs	r2, r5, r3
 8001e46:	429d      	cmp	r5, r3
 8001e48:	d0e5      	beq.n	8001e16 <_malloc_r+0x82>
 8001e4a:	1b5b      	subs	r3, r3, r5
 8001e4c:	50a3      	str	r3, [r4, r2]
 8001e4e:	e7e2      	b.n	8001e16 <_malloc_r+0x82>
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	e7ec      	b.n	8001e2e <_malloc_r+0x9a>
 8001e54:	6862      	ldr	r2, [r4, #4]
 8001e56:	42a3      	cmp	r3, r4
 8001e58:	d101      	bne.n	8001e5e <_malloc_r+0xca>
 8001e5a:	602a      	str	r2, [r5, #0]
 8001e5c:	e7ea      	b.n	8001e34 <_malloc_r+0xa0>
 8001e5e:	605a      	str	r2, [r3, #4]
 8001e60:	e7e8      	b.n	8001e34 <_malloc_r+0xa0>
 8001e62:	0023      	movs	r3, r4
 8001e64:	6864      	ldr	r4, [r4, #4]
 8001e66:	e7a7      	b.n	8001db8 <_malloc_r+0x24>
 8001e68:	002c      	movs	r4, r5
 8001e6a:	686d      	ldr	r5, [r5, #4]
 8001e6c:	e7af      	b.n	8001dce <_malloc_r+0x3a>
 8001e6e:	230c      	movs	r3, #12
 8001e70:	0030      	movs	r0, r6
 8001e72:	6033      	str	r3, [r6, #0]
 8001e74:	f000 fd9a 	bl	80029ac <__malloc_unlock>
 8001e78:	e7cd      	b.n	8001e16 <_malloc_r+0x82>
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	2000009c 	.word	0x2000009c

08001e80 <__sfputc_r>:
 8001e80:	6893      	ldr	r3, [r2, #8]
 8001e82:	b510      	push	{r4, lr}
 8001e84:	3b01      	subs	r3, #1
 8001e86:	6093      	str	r3, [r2, #8]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	da04      	bge.n	8001e96 <__sfputc_r+0x16>
 8001e8c:	6994      	ldr	r4, [r2, #24]
 8001e8e:	42a3      	cmp	r3, r4
 8001e90:	db07      	blt.n	8001ea2 <__sfputc_r+0x22>
 8001e92:	290a      	cmp	r1, #10
 8001e94:	d005      	beq.n	8001ea2 <__sfputc_r+0x22>
 8001e96:	6813      	ldr	r3, [r2, #0]
 8001e98:	1c58      	adds	r0, r3, #1
 8001e9a:	6010      	str	r0, [r2, #0]
 8001e9c:	7019      	strb	r1, [r3, #0]
 8001e9e:	0008      	movs	r0, r1
 8001ea0:	bd10      	pop	{r4, pc}
 8001ea2:	f000 fb2f 	bl	8002504 <__swbuf_r>
 8001ea6:	0001      	movs	r1, r0
 8001ea8:	e7f9      	b.n	8001e9e <__sfputc_r+0x1e>

08001eaa <__sfputs_r>:
 8001eaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eac:	0006      	movs	r6, r0
 8001eae:	000f      	movs	r7, r1
 8001eb0:	0014      	movs	r4, r2
 8001eb2:	18d5      	adds	r5, r2, r3
 8001eb4:	42ac      	cmp	r4, r5
 8001eb6:	d101      	bne.n	8001ebc <__sfputs_r+0x12>
 8001eb8:	2000      	movs	r0, #0
 8001eba:	e007      	b.n	8001ecc <__sfputs_r+0x22>
 8001ebc:	7821      	ldrb	r1, [r4, #0]
 8001ebe:	003a      	movs	r2, r7
 8001ec0:	0030      	movs	r0, r6
 8001ec2:	f7ff ffdd 	bl	8001e80 <__sfputc_r>
 8001ec6:	3401      	adds	r4, #1
 8001ec8:	1c43      	adds	r3, r0, #1
 8001eca:	d1f3      	bne.n	8001eb4 <__sfputs_r+0xa>
 8001ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001ed0 <_vfiprintf_r>:
 8001ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ed2:	b0a1      	sub	sp, #132	; 0x84
 8001ed4:	0006      	movs	r6, r0
 8001ed6:	000c      	movs	r4, r1
 8001ed8:	001f      	movs	r7, r3
 8001eda:	9203      	str	r2, [sp, #12]
 8001edc:	2800      	cmp	r0, #0
 8001ede:	d004      	beq.n	8001eea <_vfiprintf_r+0x1a>
 8001ee0:	6983      	ldr	r3, [r0, #24]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <_vfiprintf_r+0x1a>
 8001ee6:	f7ff fe8f 	bl	8001c08 <__sinit>
 8001eea:	4b8e      	ldr	r3, [pc, #568]	; (8002124 <_vfiprintf_r+0x254>)
 8001eec:	429c      	cmp	r4, r3
 8001eee:	d11c      	bne.n	8001f2a <_vfiprintf_r+0x5a>
 8001ef0:	6874      	ldr	r4, [r6, #4]
 8001ef2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001ef4:	07db      	lsls	r3, r3, #31
 8001ef6:	d405      	bmi.n	8001f04 <_vfiprintf_r+0x34>
 8001ef8:	89a3      	ldrh	r3, [r4, #12]
 8001efa:	059b      	lsls	r3, r3, #22
 8001efc:	d402      	bmi.n	8001f04 <_vfiprintf_r+0x34>
 8001efe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f00:	f7ff ff23 	bl	8001d4a <__retarget_lock_acquire_recursive>
 8001f04:	89a3      	ldrh	r3, [r4, #12]
 8001f06:	071b      	lsls	r3, r3, #28
 8001f08:	d502      	bpl.n	8001f10 <_vfiprintf_r+0x40>
 8001f0a:	6923      	ldr	r3, [r4, #16]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d11d      	bne.n	8001f4c <_vfiprintf_r+0x7c>
 8001f10:	0021      	movs	r1, r4
 8001f12:	0030      	movs	r0, r6
 8001f14:	f000 fb60 	bl	80025d8 <__swsetup_r>
 8001f18:	2800      	cmp	r0, #0
 8001f1a:	d017      	beq.n	8001f4c <_vfiprintf_r+0x7c>
 8001f1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f1e:	07db      	lsls	r3, r3, #31
 8001f20:	d50d      	bpl.n	8001f3e <_vfiprintf_r+0x6e>
 8001f22:	2001      	movs	r0, #1
 8001f24:	4240      	negs	r0, r0
 8001f26:	b021      	add	sp, #132	; 0x84
 8001f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f2a:	4b7f      	ldr	r3, [pc, #508]	; (8002128 <_vfiprintf_r+0x258>)
 8001f2c:	429c      	cmp	r4, r3
 8001f2e:	d101      	bne.n	8001f34 <_vfiprintf_r+0x64>
 8001f30:	68b4      	ldr	r4, [r6, #8]
 8001f32:	e7de      	b.n	8001ef2 <_vfiprintf_r+0x22>
 8001f34:	4b7d      	ldr	r3, [pc, #500]	; (800212c <_vfiprintf_r+0x25c>)
 8001f36:	429c      	cmp	r4, r3
 8001f38:	d1db      	bne.n	8001ef2 <_vfiprintf_r+0x22>
 8001f3a:	68f4      	ldr	r4, [r6, #12]
 8001f3c:	e7d9      	b.n	8001ef2 <_vfiprintf_r+0x22>
 8001f3e:	89a3      	ldrh	r3, [r4, #12]
 8001f40:	059b      	lsls	r3, r3, #22
 8001f42:	d4ee      	bmi.n	8001f22 <_vfiprintf_r+0x52>
 8001f44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f46:	f7ff ff01 	bl	8001d4c <__retarget_lock_release_recursive>
 8001f4a:	e7ea      	b.n	8001f22 <_vfiprintf_r+0x52>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	ad08      	add	r5, sp, #32
 8001f50:	616b      	str	r3, [r5, #20]
 8001f52:	3320      	adds	r3, #32
 8001f54:	766b      	strb	r3, [r5, #25]
 8001f56:	3310      	adds	r3, #16
 8001f58:	76ab      	strb	r3, [r5, #26]
 8001f5a:	9707      	str	r7, [sp, #28]
 8001f5c:	9f03      	ldr	r7, [sp, #12]
 8001f5e:	783b      	ldrb	r3, [r7, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <_vfiprintf_r+0x98>
 8001f64:	2b25      	cmp	r3, #37	; 0x25
 8001f66:	d14e      	bne.n	8002006 <_vfiprintf_r+0x136>
 8001f68:	9b03      	ldr	r3, [sp, #12]
 8001f6a:	1afb      	subs	r3, r7, r3
 8001f6c:	9305      	str	r3, [sp, #20]
 8001f6e:	9b03      	ldr	r3, [sp, #12]
 8001f70:	429f      	cmp	r7, r3
 8001f72:	d00d      	beq.n	8001f90 <_vfiprintf_r+0xc0>
 8001f74:	9b05      	ldr	r3, [sp, #20]
 8001f76:	0021      	movs	r1, r4
 8001f78:	0030      	movs	r0, r6
 8001f7a:	9a03      	ldr	r2, [sp, #12]
 8001f7c:	f7ff ff95 	bl	8001eaa <__sfputs_r>
 8001f80:	1c43      	adds	r3, r0, #1
 8001f82:	d100      	bne.n	8001f86 <_vfiprintf_r+0xb6>
 8001f84:	e0b5      	b.n	80020f2 <_vfiprintf_r+0x222>
 8001f86:	696a      	ldr	r2, [r5, #20]
 8001f88:	9b05      	ldr	r3, [sp, #20]
 8001f8a:	4694      	mov	ip, r2
 8001f8c:	4463      	add	r3, ip
 8001f8e:	616b      	str	r3, [r5, #20]
 8001f90:	783b      	ldrb	r3, [r7, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d100      	bne.n	8001f98 <_vfiprintf_r+0xc8>
 8001f96:	e0ac      	b.n	80020f2 <_vfiprintf_r+0x222>
 8001f98:	2201      	movs	r2, #1
 8001f9a:	1c7b      	adds	r3, r7, #1
 8001f9c:	9303      	str	r3, [sp, #12]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	4252      	negs	r2, r2
 8001fa2:	606a      	str	r2, [r5, #4]
 8001fa4:	a904      	add	r1, sp, #16
 8001fa6:	3254      	adds	r2, #84	; 0x54
 8001fa8:	1852      	adds	r2, r2, r1
 8001faa:	602b      	str	r3, [r5, #0]
 8001fac:	60eb      	str	r3, [r5, #12]
 8001fae:	60ab      	str	r3, [r5, #8]
 8001fb0:	7013      	strb	r3, [r2, #0]
 8001fb2:	65ab      	str	r3, [r5, #88]	; 0x58
 8001fb4:	9b03      	ldr	r3, [sp, #12]
 8001fb6:	2205      	movs	r2, #5
 8001fb8:	7819      	ldrb	r1, [r3, #0]
 8001fba:	485d      	ldr	r0, [pc, #372]	; (8002130 <_vfiprintf_r+0x260>)
 8001fbc:	f000 fce2 	bl	8002984 <memchr>
 8001fc0:	9b03      	ldr	r3, [sp, #12]
 8001fc2:	1c5f      	adds	r7, r3, #1
 8001fc4:	2800      	cmp	r0, #0
 8001fc6:	d120      	bne.n	800200a <_vfiprintf_r+0x13a>
 8001fc8:	682a      	ldr	r2, [r5, #0]
 8001fca:	06d3      	lsls	r3, r2, #27
 8001fcc:	d504      	bpl.n	8001fd8 <_vfiprintf_r+0x108>
 8001fce:	2353      	movs	r3, #83	; 0x53
 8001fd0:	a904      	add	r1, sp, #16
 8001fd2:	185b      	adds	r3, r3, r1
 8001fd4:	2120      	movs	r1, #32
 8001fd6:	7019      	strb	r1, [r3, #0]
 8001fd8:	0713      	lsls	r3, r2, #28
 8001fda:	d504      	bpl.n	8001fe6 <_vfiprintf_r+0x116>
 8001fdc:	2353      	movs	r3, #83	; 0x53
 8001fde:	a904      	add	r1, sp, #16
 8001fe0:	185b      	adds	r3, r3, r1
 8001fe2:	212b      	movs	r1, #43	; 0x2b
 8001fe4:	7019      	strb	r1, [r3, #0]
 8001fe6:	9b03      	ldr	r3, [sp, #12]
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b2a      	cmp	r3, #42	; 0x2a
 8001fec:	d016      	beq.n	800201c <_vfiprintf_r+0x14c>
 8001fee:	2100      	movs	r1, #0
 8001ff0:	68eb      	ldr	r3, [r5, #12]
 8001ff2:	9f03      	ldr	r7, [sp, #12]
 8001ff4:	783a      	ldrb	r2, [r7, #0]
 8001ff6:	1c78      	adds	r0, r7, #1
 8001ff8:	3a30      	subs	r2, #48	; 0x30
 8001ffa:	4684      	mov	ip, r0
 8001ffc:	2a09      	cmp	r2, #9
 8001ffe:	d94f      	bls.n	80020a0 <_vfiprintf_r+0x1d0>
 8002000:	2900      	cmp	r1, #0
 8002002:	d111      	bne.n	8002028 <_vfiprintf_r+0x158>
 8002004:	e017      	b.n	8002036 <_vfiprintf_r+0x166>
 8002006:	3701      	adds	r7, #1
 8002008:	e7a9      	b.n	8001f5e <_vfiprintf_r+0x8e>
 800200a:	4b49      	ldr	r3, [pc, #292]	; (8002130 <_vfiprintf_r+0x260>)
 800200c:	682a      	ldr	r2, [r5, #0]
 800200e:	1ac0      	subs	r0, r0, r3
 8002010:	2301      	movs	r3, #1
 8002012:	4083      	lsls	r3, r0
 8002014:	4313      	orrs	r3, r2
 8002016:	602b      	str	r3, [r5, #0]
 8002018:	9703      	str	r7, [sp, #12]
 800201a:	e7cb      	b.n	8001fb4 <_vfiprintf_r+0xe4>
 800201c:	9b07      	ldr	r3, [sp, #28]
 800201e:	1d19      	adds	r1, r3, #4
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	9107      	str	r1, [sp, #28]
 8002024:	2b00      	cmp	r3, #0
 8002026:	db01      	blt.n	800202c <_vfiprintf_r+0x15c>
 8002028:	930b      	str	r3, [sp, #44]	; 0x2c
 800202a:	e004      	b.n	8002036 <_vfiprintf_r+0x166>
 800202c:	425b      	negs	r3, r3
 800202e:	60eb      	str	r3, [r5, #12]
 8002030:	2302      	movs	r3, #2
 8002032:	4313      	orrs	r3, r2
 8002034:	602b      	str	r3, [r5, #0]
 8002036:	783b      	ldrb	r3, [r7, #0]
 8002038:	2b2e      	cmp	r3, #46	; 0x2e
 800203a:	d10a      	bne.n	8002052 <_vfiprintf_r+0x182>
 800203c:	787b      	ldrb	r3, [r7, #1]
 800203e:	2b2a      	cmp	r3, #42	; 0x2a
 8002040:	d137      	bne.n	80020b2 <_vfiprintf_r+0x1e2>
 8002042:	9b07      	ldr	r3, [sp, #28]
 8002044:	3702      	adds	r7, #2
 8002046:	1d1a      	adds	r2, r3, #4
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	9207      	str	r2, [sp, #28]
 800204c:	2b00      	cmp	r3, #0
 800204e:	db2d      	blt.n	80020ac <_vfiprintf_r+0x1dc>
 8002050:	9309      	str	r3, [sp, #36]	; 0x24
 8002052:	2203      	movs	r2, #3
 8002054:	7839      	ldrb	r1, [r7, #0]
 8002056:	4837      	ldr	r0, [pc, #220]	; (8002134 <_vfiprintf_r+0x264>)
 8002058:	f000 fc94 	bl	8002984 <memchr>
 800205c:	2800      	cmp	r0, #0
 800205e:	d007      	beq.n	8002070 <_vfiprintf_r+0x1a0>
 8002060:	4b34      	ldr	r3, [pc, #208]	; (8002134 <_vfiprintf_r+0x264>)
 8002062:	682a      	ldr	r2, [r5, #0]
 8002064:	1ac0      	subs	r0, r0, r3
 8002066:	2340      	movs	r3, #64	; 0x40
 8002068:	4083      	lsls	r3, r0
 800206a:	4313      	orrs	r3, r2
 800206c:	3701      	adds	r7, #1
 800206e:	602b      	str	r3, [r5, #0]
 8002070:	7839      	ldrb	r1, [r7, #0]
 8002072:	1c7b      	adds	r3, r7, #1
 8002074:	2206      	movs	r2, #6
 8002076:	4830      	ldr	r0, [pc, #192]	; (8002138 <_vfiprintf_r+0x268>)
 8002078:	9303      	str	r3, [sp, #12]
 800207a:	7629      	strb	r1, [r5, #24]
 800207c:	f000 fc82 	bl	8002984 <memchr>
 8002080:	2800      	cmp	r0, #0
 8002082:	d045      	beq.n	8002110 <_vfiprintf_r+0x240>
 8002084:	4b2d      	ldr	r3, [pc, #180]	; (800213c <_vfiprintf_r+0x26c>)
 8002086:	2b00      	cmp	r3, #0
 8002088:	d127      	bne.n	80020da <_vfiprintf_r+0x20a>
 800208a:	2207      	movs	r2, #7
 800208c:	9b07      	ldr	r3, [sp, #28]
 800208e:	3307      	adds	r3, #7
 8002090:	4393      	bics	r3, r2
 8002092:	3308      	adds	r3, #8
 8002094:	9307      	str	r3, [sp, #28]
 8002096:	696b      	ldr	r3, [r5, #20]
 8002098:	9a04      	ldr	r2, [sp, #16]
 800209a:	189b      	adds	r3, r3, r2
 800209c:	616b      	str	r3, [r5, #20]
 800209e:	e75d      	b.n	8001f5c <_vfiprintf_r+0x8c>
 80020a0:	210a      	movs	r1, #10
 80020a2:	434b      	muls	r3, r1
 80020a4:	4667      	mov	r7, ip
 80020a6:	189b      	adds	r3, r3, r2
 80020a8:	3909      	subs	r1, #9
 80020aa:	e7a3      	b.n	8001ff4 <_vfiprintf_r+0x124>
 80020ac:	2301      	movs	r3, #1
 80020ae:	425b      	negs	r3, r3
 80020b0:	e7ce      	b.n	8002050 <_vfiprintf_r+0x180>
 80020b2:	2300      	movs	r3, #0
 80020b4:	001a      	movs	r2, r3
 80020b6:	3701      	adds	r7, #1
 80020b8:	606b      	str	r3, [r5, #4]
 80020ba:	7839      	ldrb	r1, [r7, #0]
 80020bc:	1c78      	adds	r0, r7, #1
 80020be:	3930      	subs	r1, #48	; 0x30
 80020c0:	4684      	mov	ip, r0
 80020c2:	2909      	cmp	r1, #9
 80020c4:	d903      	bls.n	80020ce <_vfiprintf_r+0x1fe>
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0c3      	beq.n	8002052 <_vfiprintf_r+0x182>
 80020ca:	9209      	str	r2, [sp, #36]	; 0x24
 80020cc:	e7c1      	b.n	8002052 <_vfiprintf_r+0x182>
 80020ce:	230a      	movs	r3, #10
 80020d0:	435a      	muls	r2, r3
 80020d2:	4667      	mov	r7, ip
 80020d4:	1852      	adds	r2, r2, r1
 80020d6:	3b09      	subs	r3, #9
 80020d8:	e7ef      	b.n	80020ba <_vfiprintf_r+0x1ea>
 80020da:	ab07      	add	r3, sp, #28
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	0022      	movs	r2, r4
 80020e0:	0029      	movs	r1, r5
 80020e2:	0030      	movs	r0, r6
 80020e4:	4b16      	ldr	r3, [pc, #88]	; (8002140 <_vfiprintf_r+0x270>)
 80020e6:	e000      	b.n	80020ea <_vfiprintf_r+0x21a>
 80020e8:	bf00      	nop
 80020ea:	9004      	str	r0, [sp, #16]
 80020ec:	9b04      	ldr	r3, [sp, #16]
 80020ee:	3301      	adds	r3, #1
 80020f0:	d1d1      	bne.n	8002096 <_vfiprintf_r+0x1c6>
 80020f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80020f4:	07db      	lsls	r3, r3, #31
 80020f6:	d405      	bmi.n	8002104 <_vfiprintf_r+0x234>
 80020f8:	89a3      	ldrh	r3, [r4, #12]
 80020fa:	059b      	lsls	r3, r3, #22
 80020fc:	d402      	bmi.n	8002104 <_vfiprintf_r+0x234>
 80020fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002100:	f7ff fe24 	bl	8001d4c <__retarget_lock_release_recursive>
 8002104:	89a3      	ldrh	r3, [r4, #12]
 8002106:	065b      	lsls	r3, r3, #25
 8002108:	d500      	bpl.n	800210c <_vfiprintf_r+0x23c>
 800210a:	e70a      	b.n	8001f22 <_vfiprintf_r+0x52>
 800210c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800210e:	e70a      	b.n	8001f26 <_vfiprintf_r+0x56>
 8002110:	ab07      	add	r3, sp, #28
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	0022      	movs	r2, r4
 8002116:	0029      	movs	r1, r5
 8002118:	0030      	movs	r0, r6
 800211a:	4b09      	ldr	r3, [pc, #36]	; (8002140 <_vfiprintf_r+0x270>)
 800211c:	f000 f882 	bl	8002224 <_printf_i>
 8002120:	e7e3      	b.n	80020ea <_vfiprintf_r+0x21a>
 8002122:	46c0      	nop			; (mov r8, r8)
 8002124:	08002b1c 	.word	0x08002b1c
 8002128:	08002b3c 	.word	0x08002b3c
 800212c:	08002afc 	.word	0x08002afc
 8002130:	08002b5c 	.word	0x08002b5c
 8002134:	08002b62 	.word	0x08002b62
 8002138:	08002b66 	.word	0x08002b66
 800213c:	00000000 	.word	0x00000000
 8002140:	08001eab 	.word	0x08001eab

08002144 <_printf_common>:
 8002144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002146:	0015      	movs	r5, r2
 8002148:	9301      	str	r3, [sp, #4]
 800214a:	688a      	ldr	r2, [r1, #8]
 800214c:	690b      	ldr	r3, [r1, #16]
 800214e:	000c      	movs	r4, r1
 8002150:	9000      	str	r0, [sp, #0]
 8002152:	4293      	cmp	r3, r2
 8002154:	da00      	bge.n	8002158 <_printf_common+0x14>
 8002156:	0013      	movs	r3, r2
 8002158:	0022      	movs	r2, r4
 800215a:	602b      	str	r3, [r5, #0]
 800215c:	3243      	adds	r2, #67	; 0x43
 800215e:	7812      	ldrb	r2, [r2, #0]
 8002160:	2a00      	cmp	r2, #0
 8002162:	d001      	beq.n	8002168 <_printf_common+0x24>
 8002164:	3301      	adds	r3, #1
 8002166:	602b      	str	r3, [r5, #0]
 8002168:	6823      	ldr	r3, [r4, #0]
 800216a:	069b      	lsls	r3, r3, #26
 800216c:	d502      	bpl.n	8002174 <_printf_common+0x30>
 800216e:	682b      	ldr	r3, [r5, #0]
 8002170:	3302      	adds	r3, #2
 8002172:	602b      	str	r3, [r5, #0]
 8002174:	6822      	ldr	r2, [r4, #0]
 8002176:	2306      	movs	r3, #6
 8002178:	0017      	movs	r7, r2
 800217a:	401f      	ands	r7, r3
 800217c:	421a      	tst	r2, r3
 800217e:	d027      	beq.n	80021d0 <_printf_common+0x8c>
 8002180:	0023      	movs	r3, r4
 8002182:	3343      	adds	r3, #67	; 0x43
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	1e5a      	subs	r2, r3, #1
 8002188:	4193      	sbcs	r3, r2
 800218a:	6822      	ldr	r2, [r4, #0]
 800218c:	0692      	lsls	r2, r2, #26
 800218e:	d430      	bmi.n	80021f2 <_printf_common+0xae>
 8002190:	0022      	movs	r2, r4
 8002192:	9901      	ldr	r1, [sp, #4]
 8002194:	9800      	ldr	r0, [sp, #0]
 8002196:	9e08      	ldr	r6, [sp, #32]
 8002198:	3243      	adds	r2, #67	; 0x43
 800219a:	47b0      	blx	r6
 800219c:	1c43      	adds	r3, r0, #1
 800219e:	d025      	beq.n	80021ec <_printf_common+0xa8>
 80021a0:	2306      	movs	r3, #6
 80021a2:	6820      	ldr	r0, [r4, #0]
 80021a4:	682a      	ldr	r2, [r5, #0]
 80021a6:	68e1      	ldr	r1, [r4, #12]
 80021a8:	2500      	movs	r5, #0
 80021aa:	4003      	ands	r3, r0
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d103      	bne.n	80021b8 <_printf_common+0x74>
 80021b0:	1a8d      	subs	r5, r1, r2
 80021b2:	43eb      	mvns	r3, r5
 80021b4:	17db      	asrs	r3, r3, #31
 80021b6:	401d      	ands	r5, r3
 80021b8:	68a3      	ldr	r3, [r4, #8]
 80021ba:	6922      	ldr	r2, [r4, #16]
 80021bc:	4293      	cmp	r3, r2
 80021be:	dd01      	ble.n	80021c4 <_printf_common+0x80>
 80021c0:	1a9b      	subs	r3, r3, r2
 80021c2:	18ed      	adds	r5, r5, r3
 80021c4:	2700      	movs	r7, #0
 80021c6:	42bd      	cmp	r5, r7
 80021c8:	d120      	bne.n	800220c <_printf_common+0xc8>
 80021ca:	2000      	movs	r0, #0
 80021cc:	e010      	b.n	80021f0 <_printf_common+0xac>
 80021ce:	3701      	adds	r7, #1
 80021d0:	68e3      	ldr	r3, [r4, #12]
 80021d2:	682a      	ldr	r2, [r5, #0]
 80021d4:	1a9b      	subs	r3, r3, r2
 80021d6:	42bb      	cmp	r3, r7
 80021d8:	ddd2      	ble.n	8002180 <_printf_common+0x3c>
 80021da:	0022      	movs	r2, r4
 80021dc:	2301      	movs	r3, #1
 80021de:	9901      	ldr	r1, [sp, #4]
 80021e0:	9800      	ldr	r0, [sp, #0]
 80021e2:	9e08      	ldr	r6, [sp, #32]
 80021e4:	3219      	adds	r2, #25
 80021e6:	47b0      	blx	r6
 80021e8:	1c43      	adds	r3, r0, #1
 80021ea:	d1f0      	bne.n	80021ce <_printf_common+0x8a>
 80021ec:	2001      	movs	r0, #1
 80021ee:	4240      	negs	r0, r0
 80021f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80021f2:	2030      	movs	r0, #48	; 0x30
 80021f4:	18e1      	adds	r1, r4, r3
 80021f6:	3143      	adds	r1, #67	; 0x43
 80021f8:	7008      	strb	r0, [r1, #0]
 80021fa:	0021      	movs	r1, r4
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	3145      	adds	r1, #69	; 0x45
 8002200:	7809      	ldrb	r1, [r1, #0]
 8002202:	18a2      	adds	r2, r4, r2
 8002204:	3243      	adds	r2, #67	; 0x43
 8002206:	3302      	adds	r3, #2
 8002208:	7011      	strb	r1, [r2, #0]
 800220a:	e7c1      	b.n	8002190 <_printf_common+0x4c>
 800220c:	0022      	movs	r2, r4
 800220e:	2301      	movs	r3, #1
 8002210:	9901      	ldr	r1, [sp, #4]
 8002212:	9800      	ldr	r0, [sp, #0]
 8002214:	9e08      	ldr	r6, [sp, #32]
 8002216:	321a      	adds	r2, #26
 8002218:	47b0      	blx	r6
 800221a:	1c43      	adds	r3, r0, #1
 800221c:	d0e6      	beq.n	80021ec <_printf_common+0xa8>
 800221e:	3701      	adds	r7, #1
 8002220:	e7d1      	b.n	80021c6 <_printf_common+0x82>
	...

08002224 <_printf_i>:
 8002224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002226:	b08b      	sub	sp, #44	; 0x2c
 8002228:	9206      	str	r2, [sp, #24]
 800222a:	000a      	movs	r2, r1
 800222c:	3243      	adds	r2, #67	; 0x43
 800222e:	9307      	str	r3, [sp, #28]
 8002230:	9005      	str	r0, [sp, #20]
 8002232:	9204      	str	r2, [sp, #16]
 8002234:	7e0a      	ldrb	r2, [r1, #24]
 8002236:	000c      	movs	r4, r1
 8002238:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800223a:	2a78      	cmp	r2, #120	; 0x78
 800223c:	d807      	bhi.n	800224e <_printf_i+0x2a>
 800223e:	2a62      	cmp	r2, #98	; 0x62
 8002240:	d809      	bhi.n	8002256 <_printf_i+0x32>
 8002242:	2a00      	cmp	r2, #0
 8002244:	d100      	bne.n	8002248 <_printf_i+0x24>
 8002246:	e0c1      	b.n	80023cc <_printf_i+0x1a8>
 8002248:	2a58      	cmp	r2, #88	; 0x58
 800224a:	d100      	bne.n	800224e <_printf_i+0x2a>
 800224c:	e08c      	b.n	8002368 <_printf_i+0x144>
 800224e:	0026      	movs	r6, r4
 8002250:	3642      	adds	r6, #66	; 0x42
 8002252:	7032      	strb	r2, [r6, #0]
 8002254:	e022      	b.n	800229c <_printf_i+0x78>
 8002256:	0010      	movs	r0, r2
 8002258:	3863      	subs	r0, #99	; 0x63
 800225a:	2815      	cmp	r0, #21
 800225c:	d8f7      	bhi.n	800224e <_printf_i+0x2a>
 800225e:	f7fd ff53 	bl	8000108 <__gnu_thumb1_case_shi>
 8002262:	0016      	.short	0x0016
 8002264:	fff6001f 	.word	0xfff6001f
 8002268:	fff6fff6 	.word	0xfff6fff6
 800226c:	001ffff6 	.word	0x001ffff6
 8002270:	fff6fff6 	.word	0xfff6fff6
 8002274:	fff6fff6 	.word	0xfff6fff6
 8002278:	003600a8 	.word	0x003600a8
 800227c:	fff6009a 	.word	0xfff6009a
 8002280:	00b9fff6 	.word	0x00b9fff6
 8002284:	0036fff6 	.word	0x0036fff6
 8002288:	fff6fff6 	.word	0xfff6fff6
 800228c:	009e      	.short	0x009e
 800228e:	0026      	movs	r6, r4
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	3642      	adds	r6, #66	; 0x42
 8002294:	1d11      	adds	r1, r2, #4
 8002296:	6019      	str	r1, [r3, #0]
 8002298:	6813      	ldr	r3, [r2, #0]
 800229a:	7033      	strb	r3, [r6, #0]
 800229c:	2301      	movs	r3, #1
 800229e:	e0a7      	b.n	80023f0 <_printf_i+0x1cc>
 80022a0:	6808      	ldr	r0, [r1, #0]
 80022a2:	6819      	ldr	r1, [r3, #0]
 80022a4:	1d0a      	adds	r2, r1, #4
 80022a6:	0605      	lsls	r5, r0, #24
 80022a8:	d50b      	bpl.n	80022c2 <_printf_i+0x9e>
 80022aa:	680d      	ldr	r5, [r1, #0]
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	2d00      	cmp	r5, #0
 80022b0:	da03      	bge.n	80022ba <_printf_i+0x96>
 80022b2:	232d      	movs	r3, #45	; 0x2d
 80022b4:	9a04      	ldr	r2, [sp, #16]
 80022b6:	426d      	negs	r5, r5
 80022b8:	7013      	strb	r3, [r2, #0]
 80022ba:	4b61      	ldr	r3, [pc, #388]	; (8002440 <_printf_i+0x21c>)
 80022bc:	270a      	movs	r7, #10
 80022be:	9303      	str	r3, [sp, #12]
 80022c0:	e01b      	b.n	80022fa <_printf_i+0xd6>
 80022c2:	680d      	ldr	r5, [r1, #0]
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	0641      	lsls	r1, r0, #25
 80022c8:	d5f1      	bpl.n	80022ae <_printf_i+0x8a>
 80022ca:	b22d      	sxth	r5, r5
 80022cc:	e7ef      	b.n	80022ae <_printf_i+0x8a>
 80022ce:	680d      	ldr	r5, [r1, #0]
 80022d0:	6819      	ldr	r1, [r3, #0]
 80022d2:	1d08      	adds	r0, r1, #4
 80022d4:	6018      	str	r0, [r3, #0]
 80022d6:	062e      	lsls	r6, r5, #24
 80022d8:	d501      	bpl.n	80022de <_printf_i+0xba>
 80022da:	680d      	ldr	r5, [r1, #0]
 80022dc:	e003      	b.n	80022e6 <_printf_i+0xc2>
 80022de:	066d      	lsls	r5, r5, #25
 80022e0:	d5fb      	bpl.n	80022da <_printf_i+0xb6>
 80022e2:	680d      	ldr	r5, [r1, #0]
 80022e4:	b2ad      	uxth	r5, r5
 80022e6:	4b56      	ldr	r3, [pc, #344]	; (8002440 <_printf_i+0x21c>)
 80022e8:	2708      	movs	r7, #8
 80022ea:	9303      	str	r3, [sp, #12]
 80022ec:	2a6f      	cmp	r2, #111	; 0x6f
 80022ee:	d000      	beq.n	80022f2 <_printf_i+0xce>
 80022f0:	3702      	adds	r7, #2
 80022f2:	0023      	movs	r3, r4
 80022f4:	2200      	movs	r2, #0
 80022f6:	3343      	adds	r3, #67	; 0x43
 80022f8:	701a      	strb	r2, [r3, #0]
 80022fa:	6863      	ldr	r3, [r4, #4]
 80022fc:	60a3      	str	r3, [r4, #8]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	db03      	blt.n	800230a <_printf_i+0xe6>
 8002302:	2204      	movs	r2, #4
 8002304:	6821      	ldr	r1, [r4, #0]
 8002306:	4391      	bics	r1, r2
 8002308:	6021      	str	r1, [r4, #0]
 800230a:	2d00      	cmp	r5, #0
 800230c:	d102      	bne.n	8002314 <_printf_i+0xf0>
 800230e:	9e04      	ldr	r6, [sp, #16]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00c      	beq.n	800232e <_printf_i+0x10a>
 8002314:	9e04      	ldr	r6, [sp, #16]
 8002316:	0028      	movs	r0, r5
 8002318:	0039      	movs	r1, r7
 800231a:	f7fd ff85 	bl	8000228 <__aeabi_uidivmod>
 800231e:	9b03      	ldr	r3, [sp, #12]
 8002320:	3e01      	subs	r6, #1
 8002322:	5c5b      	ldrb	r3, [r3, r1]
 8002324:	7033      	strb	r3, [r6, #0]
 8002326:	002b      	movs	r3, r5
 8002328:	0005      	movs	r5, r0
 800232a:	429f      	cmp	r7, r3
 800232c:	d9f3      	bls.n	8002316 <_printf_i+0xf2>
 800232e:	2f08      	cmp	r7, #8
 8002330:	d109      	bne.n	8002346 <_printf_i+0x122>
 8002332:	6823      	ldr	r3, [r4, #0]
 8002334:	07db      	lsls	r3, r3, #31
 8002336:	d506      	bpl.n	8002346 <_printf_i+0x122>
 8002338:	6863      	ldr	r3, [r4, #4]
 800233a:	6922      	ldr	r2, [r4, #16]
 800233c:	4293      	cmp	r3, r2
 800233e:	dc02      	bgt.n	8002346 <_printf_i+0x122>
 8002340:	2330      	movs	r3, #48	; 0x30
 8002342:	3e01      	subs	r6, #1
 8002344:	7033      	strb	r3, [r6, #0]
 8002346:	9b04      	ldr	r3, [sp, #16]
 8002348:	1b9b      	subs	r3, r3, r6
 800234a:	6123      	str	r3, [r4, #16]
 800234c:	9b07      	ldr	r3, [sp, #28]
 800234e:	0021      	movs	r1, r4
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	9805      	ldr	r0, [sp, #20]
 8002354:	9b06      	ldr	r3, [sp, #24]
 8002356:	aa09      	add	r2, sp, #36	; 0x24
 8002358:	f7ff fef4 	bl	8002144 <_printf_common>
 800235c:	1c43      	adds	r3, r0, #1
 800235e:	d14c      	bne.n	80023fa <_printf_i+0x1d6>
 8002360:	2001      	movs	r0, #1
 8002362:	4240      	negs	r0, r0
 8002364:	b00b      	add	sp, #44	; 0x2c
 8002366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002368:	3145      	adds	r1, #69	; 0x45
 800236a:	700a      	strb	r2, [r1, #0]
 800236c:	4a34      	ldr	r2, [pc, #208]	; (8002440 <_printf_i+0x21c>)
 800236e:	9203      	str	r2, [sp, #12]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	6821      	ldr	r1, [r4, #0]
 8002374:	ca20      	ldmia	r2!, {r5}
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	0608      	lsls	r0, r1, #24
 800237a:	d516      	bpl.n	80023aa <_printf_i+0x186>
 800237c:	07cb      	lsls	r3, r1, #31
 800237e:	d502      	bpl.n	8002386 <_printf_i+0x162>
 8002380:	2320      	movs	r3, #32
 8002382:	4319      	orrs	r1, r3
 8002384:	6021      	str	r1, [r4, #0]
 8002386:	2710      	movs	r7, #16
 8002388:	2d00      	cmp	r5, #0
 800238a:	d1b2      	bne.n	80022f2 <_printf_i+0xce>
 800238c:	2320      	movs	r3, #32
 800238e:	6822      	ldr	r2, [r4, #0]
 8002390:	439a      	bics	r2, r3
 8002392:	6022      	str	r2, [r4, #0]
 8002394:	e7ad      	b.n	80022f2 <_printf_i+0xce>
 8002396:	2220      	movs	r2, #32
 8002398:	6809      	ldr	r1, [r1, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	6022      	str	r2, [r4, #0]
 800239e:	0022      	movs	r2, r4
 80023a0:	2178      	movs	r1, #120	; 0x78
 80023a2:	3245      	adds	r2, #69	; 0x45
 80023a4:	7011      	strb	r1, [r2, #0]
 80023a6:	4a27      	ldr	r2, [pc, #156]	; (8002444 <_printf_i+0x220>)
 80023a8:	e7e1      	b.n	800236e <_printf_i+0x14a>
 80023aa:	0648      	lsls	r0, r1, #25
 80023ac:	d5e6      	bpl.n	800237c <_printf_i+0x158>
 80023ae:	b2ad      	uxth	r5, r5
 80023b0:	e7e4      	b.n	800237c <_printf_i+0x158>
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	680d      	ldr	r5, [r1, #0]
 80023b6:	1d10      	adds	r0, r2, #4
 80023b8:	6949      	ldr	r1, [r1, #20]
 80023ba:	6018      	str	r0, [r3, #0]
 80023bc:	6813      	ldr	r3, [r2, #0]
 80023be:	062e      	lsls	r6, r5, #24
 80023c0:	d501      	bpl.n	80023c6 <_printf_i+0x1a2>
 80023c2:	6019      	str	r1, [r3, #0]
 80023c4:	e002      	b.n	80023cc <_printf_i+0x1a8>
 80023c6:	066d      	lsls	r5, r5, #25
 80023c8:	d5fb      	bpl.n	80023c2 <_printf_i+0x19e>
 80023ca:	8019      	strh	r1, [r3, #0]
 80023cc:	2300      	movs	r3, #0
 80023ce:	9e04      	ldr	r6, [sp, #16]
 80023d0:	6123      	str	r3, [r4, #16]
 80023d2:	e7bb      	b.n	800234c <_printf_i+0x128>
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	1d11      	adds	r1, r2, #4
 80023d8:	6019      	str	r1, [r3, #0]
 80023da:	6816      	ldr	r6, [r2, #0]
 80023dc:	2100      	movs	r1, #0
 80023de:	0030      	movs	r0, r6
 80023e0:	6862      	ldr	r2, [r4, #4]
 80023e2:	f000 facf 	bl	8002984 <memchr>
 80023e6:	2800      	cmp	r0, #0
 80023e8:	d001      	beq.n	80023ee <_printf_i+0x1ca>
 80023ea:	1b80      	subs	r0, r0, r6
 80023ec:	6060      	str	r0, [r4, #4]
 80023ee:	6863      	ldr	r3, [r4, #4]
 80023f0:	6123      	str	r3, [r4, #16]
 80023f2:	2300      	movs	r3, #0
 80023f4:	9a04      	ldr	r2, [sp, #16]
 80023f6:	7013      	strb	r3, [r2, #0]
 80023f8:	e7a8      	b.n	800234c <_printf_i+0x128>
 80023fa:	6923      	ldr	r3, [r4, #16]
 80023fc:	0032      	movs	r2, r6
 80023fe:	9906      	ldr	r1, [sp, #24]
 8002400:	9805      	ldr	r0, [sp, #20]
 8002402:	9d07      	ldr	r5, [sp, #28]
 8002404:	47a8      	blx	r5
 8002406:	1c43      	adds	r3, r0, #1
 8002408:	d0aa      	beq.n	8002360 <_printf_i+0x13c>
 800240a:	6823      	ldr	r3, [r4, #0]
 800240c:	079b      	lsls	r3, r3, #30
 800240e:	d415      	bmi.n	800243c <_printf_i+0x218>
 8002410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002412:	68e0      	ldr	r0, [r4, #12]
 8002414:	4298      	cmp	r0, r3
 8002416:	daa5      	bge.n	8002364 <_printf_i+0x140>
 8002418:	0018      	movs	r0, r3
 800241a:	e7a3      	b.n	8002364 <_printf_i+0x140>
 800241c:	0022      	movs	r2, r4
 800241e:	2301      	movs	r3, #1
 8002420:	9906      	ldr	r1, [sp, #24]
 8002422:	9805      	ldr	r0, [sp, #20]
 8002424:	9e07      	ldr	r6, [sp, #28]
 8002426:	3219      	adds	r2, #25
 8002428:	47b0      	blx	r6
 800242a:	1c43      	adds	r3, r0, #1
 800242c:	d098      	beq.n	8002360 <_printf_i+0x13c>
 800242e:	3501      	adds	r5, #1
 8002430:	68e3      	ldr	r3, [r4, #12]
 8002432:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002434:	1a9b      	subs	r3, r3, r2
 8002436:	42ab      	cmp	r3, r5
 8002438:	dcf0      	bgt.n	800241c <_printf_i+0x1f8>
 800243a:	e7e9      	b.n	8002410 <_printf_i+0x1ec>
 800243c:	2500      	movs	r5, #0
 800243e:	e7f7      	b.n	8002430 <_printf_i+0x20c>
 8002440:	08002b6d 	.word	0x08002b6d
 8002444:	08002b7e 	.word	0x08002b7e

08002448 <_sbrk_r>:
 8002448:	2300      	movs	r3, #0
 800244a:	b570      	push	{r4, r5, r6, lr}
 800244c:	4d06      	ldr	r5, [pc, #24]	; (8002468 <_sbrk_r+0x20>)
 800244e:	0004      	movs	r4, r0
 8002450:	0008      	movs	r0, r1
 8002452:	602b      	str	r3, [r5, #0]
 8002454:	f7fe f9f8 	bl	8000848 <_sbrk>
 8002458:	1c43      	adds	r3, r0, #1
 800245a:	d103      	bne.n	8002464 <_sbrk_r+0x1c>
 800245c:	682b      	ldr	r3, [r5, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d000      	beq.n	8002464 <_sbrk_r+0x1c>
 8002462:	6023      	str	r3, [r4, #0]
 8002464:	bd70      	pop	{r4, r5, r6, pc}
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	200000a4 	.word	0x200000a4

0800246c <__sread>:
 800246c:	b570      	push	{r4, r5, r6, lr}
 800246e:	000c      	movs	r4, r1
 8002470:	250e      	movs	r5, #14
 8002472:	5f49      	ldrsh	r1, [r1, r5]
 8002474:	f000 faec 	bl	8002a50 <_read_r>
 8002478:	2800      	cmp	r0, #0
 800247a:	db03      	blt.n	8002484 <__sread+0x18>
 800247c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800247e:	181b      	adds	r3, r3, r0
 8002480:	6563      	str	r3, [r4, #84]	; 0x54
 8002482:	bd70      	pop	{r4, r5, r6, pc}
 8002484:	89a3      	ldrh	r3, [r4, #12]
 8002486:	4a02      	ldr	r2, [pc, #8]	; (8002490 <__sread+0x24>)
 8002488:	4013      	ands	r3, r2
 800248a:	81a3      	strh	r3, [r4, #12]
 800248c:	e7f9      	b.n	8002482 <__sread+0x16>
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	ffffefff 	.word	0xffffefff

08002494 <__swrite>:
 8002494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002496:	001f      	movs	r7, r3
 8002498:	898b      	ldrh	r3, [r1, #12]
 800249a:	0005      	movs	r5, r0
 800249c:	000c      	movs	r4, r1
 800249e:	0016      	movs	r6, r2
 80024a0:	05db      	lsls	r3, r3, #23
 80024a2:	d505      	bpl.n	80024b0 <__swrite+0x1c>
 80024a4:	230e      	movs	r3, #14
 80024a6:	5ec9      	ldrsh	r1, [r1, r3]
 80024a8:	2200      	movs	r2, #0
 80024aa:	2302      	movs	r3, #2
 80024ac:	f000 f9ea 	bl	8002884 <_lseek_r>
 80024b0:	89a3      	ldrh	r3, [r4, #12]
 80024b2:	4a05      	ldr	r2, [pc, #20]	; (80024c8 <__swrite+0x34>)
 80024b4:	0028      	movs	r0, r5
 80024b6:	4013      	ands	r3, r2
 80024b8:	81a3      	strh	r3, [r4, #12]
 80024ba:	0032      	movs	r2, r6
 80024bc:	230e      	movs	r3, #14
 80024be:	5ee1      	ldrsh	r1, [r4, r3]
 80024c0:	003b      	movs	r3, r7
 80024c2:	f000 f875 	bl	80025b0 <_write_r>
 80024c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024c8:	ffffefff 	.word	0xffffefff

080024cc <__sseek>:
 80024cc:	b570      	push	{r4, r5, r6, lr}
 80024ce:	000c      	movs	r4, r1
 80024d0:	250e      	movs	r5, #14
 80024d2:	5f49      	ldrsh	r1, [r1, r5]
 80024d4:	f000 f9d6 	bl	8002884 <_lseek_r>
 80024d8:	89a3      	ldrh	r3, [r4, #12]
 80024da:	1c42      	adds	r2, r0, #1
 80024dc:	d103      	bne.n	80024e6 <__sseek+0x1a>
 80024de:	4a05      	ldr	r2, [pc, #20]	; (80024f4 <__sseek+0x28>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	81a3      	strh	r3, [r4, #12]
 80024e4:	bd70      	pop	{r4, r5, r6, pc}
 80024e6:	2280      	movs	r2, #128	; 0x80
 80024e8:	0152      	lsls	r2, r2, #5
 80024ea:	4313      	orrs	r3, r2
 80024ec:	81a3      	strh	r3, [r4, #12]
 80024ee:	6560      	str	r0, [r4, #84]	; 0x54
 80024f0:	e7f8      	b.n	80024e4 <__sseek+0x18>
 80024f2:	46c0      	nop			; (mov r8, r8)
 80024f4:	ffffefff 	.word	0xffffefff

080024f8 <__sclose>:
 80024f8:	b510      	push	{r4, lr}
 80024fa:	230e      	movs	r3, #14
 80024fc:	5ec9      	ldrsh	r1, [r1, r3]
 80024fe:	f000 f8e3 	bl	80026c8 <_close_r>
 8002502:	bd10      	pop	{r4, pc}

08002504 <__swbuf_r>:
 8002504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002506:	0005      	movs	r5, r0
 8002508:	000e      	movs	r6, r1
 800250a:	0014      	movs	r4, r2
 800250c:	2800      	cmp	r0, #0
 800250e:	d004      	beq.n	800251a <__swbuf_r+0x16>
 8002510:	6983      	ldr	r3, [r0, #24]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <__swbuf_r+0x16>
 8002516:	f7ff fb77 	bl	8001c08 <__sinit>
 800251a:	4b22      	ldr	r3, [pc, #136]	; (80025a4 <__swbuf_r+0xa0>)
 800251c:	429c      	cmp	r4, r3
 800251e:	d12e      	bne.n	800257e <__swbuf_r+0x7a>
 8002520:	686c      	ldr	r4, [r5, #4]
 8002522:	69a3      	ldr	r3, [r4, #24]
 8002524:	60a3      	str	r3, [r4, #8]
 8002526:	89a3      	ldrh	r3, [r4, #12]
 8002528:	071b      	lsls	r3, r3, #28
 800252a:	d532      	bpl.n	8002592 <__swbuf_r+0x8e>
 800252c:	6923      	ldr	r3, [r4, #16]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d02f      	beq.n	8002592 <__swbuf_r+0x8e>
 8002532:	6823      	ldr	r3, [r4, #0]
 8002534:	6922      	ldr	r2, [r4, #16]
 8002536:	b2f7      	uxtb	r7, r6
 8002538:	1a98      	subs	r0, r3, r2
 800253a:	6963      	ldr	r3, [r4, #20]
 800253c:	b2f6      	uxtb	r6, r6
 800253e:	4283      	cmp	r3, r0
 8002540:	dc05      	bgt.n	800254e <__swbuf_r+0x4a>
 8002542:	0021      	movs	r1, r4
 8002544:	0028      	movs	r0, r5
 8002546:	f000 f95d 	bl	8002804 <_fflush_r>
 800254a:	2800      	cmp	r0, #0
 800254c:	d127      	bne.n	800259e <__swbuf_r+0x9a>
 800254e:	68a3      	ldr	r3, [r4, #8]
 8002550:	3001      	adds	r0, #1
 8002552:	3b01      	subs	r3, #1
 8002554:	60a3      	str	r3, [r4, #8]
 8002556:	6823      	ldr	r3, [r4, #0]
 8002558:	1c5a      	adds	r2, r3, #1
 800255a:	6022      	str	r2, [r4, #0]
 800255c:	701f      	strb	r7, [r3, #0]
 800255e:	6963      	ldr	r3, [r4, #20]
 8002560:	4283      	cmp	r3, r0
 8002562:	d004      	beq.n	800256e <__swbuf_r+0x6a>
 8002564:	89a3      	ldrh	r3, [r4, #12]
 8002566:	07db      	lsls	r3, r3, #31
 8002568:	d507      	bpl.n	800257a <__swbuf_r+0x76>
 800256a:	2e0a      	cmp	r6, #10
 800256c:	d105      	bne.n	800257a <__swbuf_r+0x76>
 800256e:	0021      	movs	r1, r4
 8002570:	0028      	movs	r0, r5
 8002572:	f000 f947 	bl	8002804 <_fflush_r>
 8002576:	2800      	cmp	r0, #0
 8002578:	d111      	bne.n	800259e <__swbuf_r+0x9a>
 800257a:	0030      	movs	r0, r6
 800257c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800257e:	4b0a      	ldr	r3, [pc, #40]	; (80025a8 <__swbuf_r+0xa4>)
 8002580:	429c      	cmp	r4, r3
 8002582:	d101      	bne.n	8002588 <__swbuf_r+0x84>
 8002584:	68ac      	ldr	r4, [r5, #8]
 8002586:	e7cc      	b.n	8002522 <__swbuf_r+0x1e>
 8002588:	4b08      	ldr	r3, [pc, #32]	; (80025ac <__swbuf_r+0xa8>)
 800258a:	429c      	cmp	r4, r3
 800258c:	d1c9      	bne.n	8002522 <__swbuf_r+0x1e>
 800258e:	68ec      	ldr	r4, [r5, #12]
 8002590:	e7c7      	b.n	8002522 <__swbuf_r+0x1e>
 8002592:	0021      	movs	r1, r4
 8002594:	0028      	movs	r0, r5
 8002596:	f000 f81f 	bl	80025d8 <__swsetup_r>
 800259a:	2800      	cmp	r0, #0
 800259c:	d0c9      	beq.n	8002532 <__swbuf_r+0x2e>
 800259e:	2601      	movs	r6, #1
 80025a0:	4276      	negs	r6, r6
 80025a2:	e7ea      	b.n	800257a <__swbuf_r+0x76>
 80025a4:	08002b1c 	.word	0x08002b1c
 80025a8:	08002b3c 	.word	0x08002b3c
 80025ac:	08002afc 	.word	0x08002afc

080025b0 <_write_r>:
 80025b0:	b570      	push	{r4, r5, r6, lr}
 80025b2:	0004      	movs	r4, r0
 80025b4:	0008      	movs	r0, r1
 80025b6:	0011      	movs	r1, r2
 80025b8:	001a      	movs	r2, r3
 80025ba:	2300      	movs	r3, #0
 80025bc:	4d05      	ldr	r5, [pc, #20]	; (80025d4 <_write_r+0x24>)
 80025be:	602b      	str	r3, [r5, #0]
 80025c0:	f7fe f8fa 	bl	80007b8 <_write>
 80025c4:	1c43      	adds	r3, r0, #1
 80025c6:	d103      	bne.n	80025d0 <_write_r+0x20>
 80025c8:	682b      	ldr	r3, [r5, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d000      	beq.n	80025d0 <_write_r+0x20>
 80025ce:	6023      	str	r3, [r4, #0]
 80025d0:	bd70      	pop	{r4, r5, r6, pc}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	200000a4 	.word	0x200000a4

080025d8 <__swsetup_r>:
 80025d8:	4b37      	ldr	r3, [pc, #220]	; (80026b8 <__swsetup_r+0xe0>)
 80025da:	b570      	push	{r4, r5, r6, lr}
 80025dc:	681d      	ldr	r5, [r3, #0]
 80025de:	0006      	movs	r6, r0
 80025e0:	000c      	movs	r4, r1
 80025e2:	2d00      	cmp	r5, #0
 80025e4:	d005      	beq.n	80025f2 <__swsetup_r+0x1a>
 80025e6:	69ab      	ldr	r3, [r5, #24]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d102      	bne.n	80025f2 <__swsetup_r+0x1a>
 80025ec:	0028      	movs	r0, r5
 80025ee:	f7ff fb0b 	bl	8001c08 <__sinit>
 80025f2:	4b32      	ldr	r3, [pc, #200]	; (80026bc <__swsetup_r+0xe4>)
 80025f4:	429c      	cmp	r4, r3
 80025f6:	d10f      	bne.n	8002618 <__swsetup_r+0x40>
 80025f8:	686c      	ldr	r4, [r5, #4]
 80025fa:	230c      	movs	r3, #12
 80025fc:	5ee2      	ldrsh	r2, [r4, r3]
 80025fe:	b293      	uxth	r3, r2
 8002600:	0711      	lsls	r1, r2, #28
 8002602:	d42d      	bmi.n	8002660 <__swsetup_r+0x88>
 8002604:	06d9      	lsls	r1, r3, #27
 8002606:	d411      	bmi.n	800262c <__swsetup_r+0x54>
 8002608:	2309      	movs	r3, #9
 800260a:	2001      	movs	r0, #1
 800260c:	6033      	str	r3, [r6, #0]
 800260e:	3337      	adds	r3, #55	; 0x37
 8002610:	4313      	orrs	r3, r2
 8002612:	81a3      	strh	r3, [r4, #12]
 8002614:	4240      	negs	r0, r0
 8002616:	bd70      	pop	{r4, r5, r6, pc}
 8002618:	4b29      	ldr	r3, [pc, #164]	; (80026c0 <__swsetup_r+0xe8>)
 800261a:	429c      	cmp	r4, r3
 800261c:	d101      	bne.n	8002622 <__swsetup_r+0x4a>
 800261e:	68ac      	ldr	r4, [r5, #8]
 8002620:	e7eb      	b.n	80025fa <__swsetup_r+0x22>
 8002622:	4b28      	ldr	r3, [pc, #160]	; (80026c4 <__swsetup_r+0xec>)
 8002624:	429c      	cmp	r4, r3
 8002626:	d1e8      	bne.n	80025fa <__swsetup_r+0x22>
 8002628:	68ec      	ldr	r4, [r5, #12]
 800262a:	e7e6      	b.n	80025fa <__swsetup_r+0x22>
 800262c:	075b      	lsls	r3, r3, #29
 800262e:	d513      	bpl.n	8002658 <__swsetup_r+0x80>
 8002630:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002632:	2900      	cmp	r1, #0
 8002634:	d008      	beq.n	8002648 <__swsetup_r+0x70>
 8002636:	0023      	movs	r3, r4
 8002638:	3344      	adds	r3, #68	; 0x44
 800263a:	4299      	cmp	r1, r3
 800263c:	d002      	beq.n	8002644 <__swsetup_r+0x6c>
 800263e:	0030      	movs	r0, r6
 8002640:	f000 f9bc 	bl	80029bc <_free_r>
 8002644:	2300      	movs	r3, #0
 8002646:	6363      	str	r3, [r4, #52]	; 0x34
 8002648:	2224      	movs	r2, #36	; 0x24
 800264a:	89a3      	ldrh	r3, [r4, #12]
 800264c:	4393      	bics	r3, r2
 800264e:	81a3      	strh	r3, [r4, #12]
 8002650:	2300      	movs	r3, #0
 8002652:	6063      	str	r3, [r4, #4]
 8002654:	6923      	ldr	r3, [r4, #16]
 8002656:	6023      	str	r3, [r4, #0]
 8002658:	2308      	movs	r3, #8
 800265a:	89a2      	ldrh	r2, [r4, #12]
 800265c:	4313      	orrs	r3, r2
 800265e:	81a3      	strh	r3, [r4, #12]
 8002660:	6923      	ldr	r3, [r4, #16]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10b      	bne.n	800267e <__swsetup_r+0xa6>
 8002666:	21a0      	movs	r1, #160	; 0xa0
 8002668:	2280      	movs	r2, #128	; 0x80
 800266a:	89a3      	ldrh	r3, [r4, #12]
 800266c:	0089      	lsls	r1, r1, #2
 800266e:	0092      	lsls	r2, r2, #2
 8002670:	400b      	ands	r3, r1
 8002672:	4293      	cmp	r3, r2
 8002674:	d003      	beq.n	800267e <__swsetup_r+0xa6>
 8002676:	0021      	movs	r1, r4
 8002678:	0030      	movs	r0, r6
 800267a:	f000 f93f 	bl	80028fc <__smakebuf_r>
 800267e:	220c      	movs	r2, #12
 8002680:	5ea3      	ldrsh	r3, [r4, r2]
 8002682:	2001      	movs	r0, #1
 8002684:	001a      	movs	r2, r3
 8002686:	b299      	uxth	r1, r3
 8002688:	4002      	ands	r2, r0
 800268a:	4203      	tst	r3, r0
 800268c:	d00f      	beq.n	80026ae <__swsetup_r+0xd6>
 800268e:	2200      	movs	r2, #0
 8002690:	60a2      	str	r2, [r4, #8]
 8002692:	6962      	ldr	r2, [r4, #20]
 8002694:	4252      	negs	r2, r2
 8002696:	61a2      	str	r2, [r4, #24]
 8002698:	2000      	movs	r0, #0
 800269a:	6922      	ldr	r2, [r4, #16]
 800269c:	4282      	cmp	r2, r0
 800269e:	d1ba      	bne.n	8002616 <__swsetup_r+0x3e>
 80026a0:	060a      	lsls	r2, r1, #24
 80026a2:	d5b8      	bpl.n	8002616 <__swsetup_r+0x3e>
 80026a4:	2240      	movs	r2, #64	; 0x40
 80026a6:	4313      	orrs	r3, r2
 80026a8:	81a3      	strh	r3, [r4, #12]
 80026aa:	3801      	subs	r0, #1
 80026ac:	e7b3      	b.n	8002616 <__swsetup_r+0x3e>
 80026ae:	0788      	lsls	r0, r1, #30
 80026b0:	d400      	bmi.n	80026b4 <__swsetup_r+0xdc>
 80026b2:	6962      	ldr	r2, [r4, #20]
 80026b4:	60a2      	str	r2, [r4, #8]
 80026b6:	e7ef      	b.n	8002698 <__swsetup_r+0xc0>
 80026b8:	2000000c 	.word	0x2000000c
 80026bc:	08002b1c 	.word	0x08002b1c
 80026c0:	08002b3c 	.word	0x08002b3c
 80026c4:	08002afc 	.word	0x08002afc

080026c8 <_close_r>:
 80026c8:	2300      	movs	r3, #0
 80026ca:	b570      	push	{r4, r5, r6, lr}
 80026cc:	4d06      	ldr	r5, [pc, #24]	; (80026e8 <_close_r+0x20>)
 80026ce:	0004      	movs	r4, r0
 80026d0:	0008      	movs	r0, r1
 80026d2:	602b      	str	r3, [r5, #0]
 80026d4:	f7fe f88c 	bl	80007f0 <_close>
 80026d8:	1c43      	adds	r3, r0, #1
 80026da:	d103      	bne.n	80026e4 <_close_r+0x1c>
 80026dc:	682b      	ldr	r3, [r5, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d000      	beq.n	80026e4 <_close_r+0x1c>
 80026e2:	6023      	str	r3, [r4, #0]
 80026e4:	bd70      	pop	{r4, r5, r6, pc}
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	200000a4 	.word	0x200000a4

080026ec <__sflush_r>:
 80026ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80026ee:	898b      	ldrh	r3, [r1, #12]
 80026f0:	0005      	movs	r5, r0
 80026f2:	000c      	movs	r4, r1
 80026f4:	071a      	lsls	r2, r3, #28
 80026f6:	d45f      	bmi.n	80027b8 <__sflush_r+0xcc>
 80026f8:	684a      	ldr	r2, [r1, #4]
 80026fa:	2a00      	cmp	r2, #0
 80026fc:	dc04      	bgt.n	8002708 <__sflush_r+0x1c>
 80026fe:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8002700:	2a00      	cmp	r2, #0
 8002702:	dc01      	bgt.n	8002708 <__sflush_r+0x1c>
 8002704:	2000      	movs	r0, #0
 8002706:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002708:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800270a:	2f00      	cmp	r7, #0
 800270c:	d0fa      	beq.n	8002704 <__sflush_r+0x18>
 800270e:	2200      	movs	r2, #0
 8002710:	2180      	movs	r1, #128	; 0x80
 8002712:	682e      	ldr	r6, [r5, #0]
 8002714:	602a      	str	r2, [r5, #0]
 8002716:	001a      	movs	r2, r3
 8002718:	0149      	lsls	r1, r1, #5
 800271a:	400a      	ands	r2, r1
 800271c:	420b      	tst	r3, r1
 800271e:	d034      	beq.n	800278a <__sflush_r+0x9e>
 8002720:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002722:	89a3      	ldrh	r3, [r4, #12]
 8002724:	075b      	lsls	r3, r3, #29
 8002726:	d506      	bpl.n	8002736 <__sflush_r+0x4a>
 8002728:	6863      	ldr	r3, [r4, #4]
 800272a:	1ac0      	subs	r0, r0, r3
 800272c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <__sflush_r+0x4a>
 8002732:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002734:	1ac0      	subs	r0, r0, r3
 8002736:	0002      	movs	r2, r0
 8002738:	6a21      	ldr	r1, [r4, #32]
 800273a:	2300      	movs	r3, #0
 800273c:	0028      	movs	r0, r5
 800273e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002740:	47b8      	blx	r7
 8002742:	89a1      	ldrh	r1, [r4, #12]
 8002744:	1c43      	adds	r3, r0, #1
 8002746:	d106      	bne.n	8002756 <__sflush_r+0x6a>
 8002748:	682b      	ldr	r3, [r5, #0]
 800274a:	2b1d      	cmp	r3, #29
 800274c:	d831      	bhi.n	80027b2 <__sflush_r+0xc6>
 800274e:	4a2c      	ldr	r2, [pc, #176]	; (8002800 <__sflush_r+0x114>)
 8002750:	40da      	lsrs	r2, r3
 8002752:	07d3      	lsls	r3, r2, #31
 8002754:	d52d      	bpl.n	80027b2 <__sflush_r+0xc6>
 8002756:	2300      	movs	r3, #0
 8002758:	6063      	str	r3, [r4, #4]
 800275a:	6923      	ldr	r3, [r4, #16]
 800275c:	6023      	str	r3, [r4, #0]
 800275e:	04cb      	lsls	r3, r1, #19
 8002760:	d505      	bpl.n	800276e <__sflush_r+0x82>
 8002762:	1c43      	adds	r3, r0, #1
 8002764:	d102      	bne.n	800276c <__sflush_r+0x80>
 8002766:	682b      	ldr	r3, [r5, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d100      	bne.n	800276e <__sflush_r+0x82>
 800276c:	6560      	str	r0, [r4, #84]	; 0x54
 800276e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002770:	602e      	str	r6, [r5, #0]
 8002772:	2900      	cmp	r1, #0
 8002774:	d0c6      	beq.n	8002704 <__sflush_r+0x18>
 8002776:	0023      	movs	r3, r4
 8002778:	3344      	adds	r3, #68	; 0x44
 800277a:	4299      	cmp	r1, r3
 800277c:	d002      	beq.n	8002784 <__sflush_r+0x98>
 800277e:	0028      	movs	r0, r5
 8002780:	f000 f91c 	bl	80029bc <_free_r>
 8002784:	2000      	movs	r0, #0
 8002786:	6360      	str	r0, [r4, #52]	; 0x34
 8002788:	e7bd      	b.n	8002706 <__sflush_r+0x1a>
 800278a:	2301      	movs	r3, #1
 800278c:	0028      	movs	r0, r5
 800278e:	6a21      	ldr	r1, [r4, #32]
 8002790:	47b8      	blx	r7
 8002792:	1c43      	adds	r3, r0, #1
 8002794:	d1c5      	bne.n	8002722 <__sflush_r+0x36>
 8002796:	682b      	ldr	r3, [r5, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0c2      	beq.n	8002722 <__sflush_r+0x36>
 800279c:	2b1d      	cmp	r3, #29
 800279e:	d001      	beq.n	80027a4 <__sflush_r+0xb8>
 80027a0:	2b16      	cmp	r3, #22
 80027a2:	d101      	bne.n	80027a8 <__sflush_r+0xbc>
 80027a4:	602e      	str	r6, [r5, #0]
 80027a6:	e7ad      	b.n	8002704 <__sflush_r+0x18>
 80027a8:	2340      	movs	r3, #64	; 0x40
 80027aa:	89a2      	ldrh	r2, [r4, #12]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	81a3      	strh	r3, [r4, #12]
 80027b0:	e7a9      	b.n	8002706 <__sflush_r+0x1a>
 80027b2:	2340      	movs	r3, #64	; 0x40
 80027b4:	430b      	orrs	r3, r1
 80027b6:	e7fa      	b.n	80027ae <__sflush_r+0xc2>
 80027b8:	690f      	ldr	r7, [r1, #16]
 80027ba:	2f00      	cmp	r7, #0
 80027bc:	d0a2      	beq.n	8002704 <__sflush_r+0x18>
 80027be:	680a      	ldr	r2, [r1, #0]
 80027c0:	600f      	str	r7, [r1, #0]
 80027c2:	1bd2      	subs	r2, r2, r7
 80027c4:	9201      	str	r2, [sp, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	079b      	lsls	r3, r3, #30
 80027ca:	d100      	bne.n	80027ce <__sflush_r+0xe2>
 80027cc:	694a      	ldr	r2, [r1, #20]
 80027ce:	60a2      	str	r2, [r4, #8]
 80027d0:	9b01      	ldr	r3, [sp, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	dc00      	bgt.n	80027d8 <__sflush_r+0xec>
 80027d6:	e795      	b.n	8002704 <__sflush_r+0x18>
 80027d8:	003a      	movs	r2, r7
 80027da:	0028      	movs	r0, r5
 80027dc:	9b01      	ldr	r3, [sp, #4]
 80027de:	6a21      	ldr	r1, [r4, #32]
 80027e0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80027e2:	47b0      	blx	r6
 80027e4:	2800      	cmp	r0, #0
 80027e6:	dc06      	bgt.n	80027f6 <__sflush_r+0x10a>
 80027e8:	2340      	movs	r3, #64	; 0x40
 80027ea:	2001      	movs	r0, #1
 80027ec:	89a2      	ldrh	r2, [r4, #12]
 80027ee:	4240      	negs	r0, r0
 80027f0:	4313      	orrs	r3, r2
 80027f2:	81a3      	strh	r3, [r4, #12]
 80027f4:	e787      	b.n	8002706 <__sflush_r+0x1a>
 80027f6:	9b01      	ldr	r3, [sp, #4]
 80027f8:	183f      	adds	r7, r7, r0
 80027fa:	1a1b      	subs	r3, r3, r0
 80027fc:	9301      	str	r3, [sp, #4]
 80027fe:	e7e7      	b.n	80027d0 <__sflush_r+0xe4>
 8002800:	20400001 	.word	0x20400001

08002804 <_fflush_r>:
 8002804:	690b      	ldr	r3, [r1, #16]
 8002806:	b570      	push	{r4, r5, r6, lr}
 8002808:	0005      	movs	r5, r0
 800280a:	000c      	movs	r4, r1
 800280c:	2b00      	cmp	r3, #0
 800280e:	d102      	bne.n	8002816 <_fflush_r+0x12>
 8002810:	2500      	movs	r5, #0
 8002812:	0028      	movs	r0, r5
 8002814:	bd70      	pop	{r4, r5, r6, pc}
 8002816:	2800      	cmp	r0, #0
 8002818:	d004      	beq.n	8002824 <_fflush_r+0x20>
 800281a:	6983      	ldr	r3, [r0, #24]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <_fflush_r+0x20>
 8002820:	f7ff f9f2 	bl	8001c08 <__sinit>
 8002824:	4b14      	ldr	r3, [pc, #80]	; (8002878 <_fflush_r+0x74>)
 8002826:	429c      	cmp	r4, r3
 8002828:	d11b      	bne.n	8002862 <_fflush_r+0x5e>
 800282a:	686c      	ldr	r4, [r5, #4]
 800282c:	220c      	movs	r2, #12
 800282e:	5ea3      	ldrsh	r3, [r4, r2]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0ed      	beq.n	8002810 <_fflush_r+0xc>
 8002834:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002836:	07d2      	lsls	r2, r2, #31
 8002838:	d404      	bmi.n	8002844 <_fflush_r+0x40>
 800283a:	059b      	lsls	r3, r3, #22
 800283c:	d402      	bmi.n	8002844 <_fflush_r+0x40>
 800283e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002840:	f7ff fa83 	bl	8001d4a <__retarget_lock_acquire_recursive>
 8002844:	0028      	movs	r0, r5
 8002846:	0021      	movs	r1, r4
 8002848:	f7ff ff50 	bl	80026ec <__sflush_r>
 800284c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800284e:	0005      	movs	r5, r0
 8002850:	07db      	lsls	r3, r3, #31
 8002852:	d4de      	bmi.n	8002812 <_fflush_r+0xe>
 8002854:	89a3      	ldrh	r3, [r4, #12]
 8002856:	059b      	lsls	r3, r3, #22
 8002858:	d4db      	bmi.n	8002812 <_fflush_r+0xe>
 800285a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800285c:	f7ff fa76 	bl	8001d4c <__retarget_lock_release_recursive>
 8002860:	e7d7      	b.n	8002812 <_fflush_r+0xe>
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <_fflush_r+0x78>)
 8002864:	429c      	cmp	r4, r3
 8002866:	d101      	bne.n	800286c <_fflush_r+0x68>
 8002868:	68ac      	ldr	r4, [r5, #8]
 800286a:	e7df      	b.n	800282c <_fflush_r+0x28>
 800286c:	4b04      	ldr	r3, [pc, #16]	; (8002880 <_fflush_r+0x7c>)
 800286e:	429c      	cmp	r4, r3
 8002870:	d1dc      	bne.n	800282c <_fflush_r+0x28>
 8002872:	68ec      	ldr	r4, [r5, #12]
 8002874:	e7da      	b.n	800282c <_fflush_r+0x28>
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	08002b1c 	.word	0x08002b1c
 800287c:	08002b3c 	.word	0x08002b3c
 8002880:	08002afc 	.word	0x08002afc

08002884 <_lseek_r>:
 8002884:	b570      	push	{r4, r5, r6, lr}
 8002886:	0004      	movs	r4, r0
 8002888:	0008      	movs	r0, r1
 800288a:	0011      	movs	r1, r2
 800288c:	001a      	movs	r2, r3
 800288e:	2300      	movs	r3, #0
 8002890:	4d05      	ldr	r5, [pc, #20]	; (80028a8 <_lseek_r+0x24>)
 8002892:	602b      	str	r3, [r5, #0]
 8002894:	f7fd ffcd 	bl	8000832 <_lseek>
 8002898:	1c43      	adds	r3, r0, #1
 800289a:	d103      	bne.n	80028a4 <_lseek_r+0x20>
 800289c:	682b      	ldr	r3, [r5, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d000      	beq.n	80028a4 <_lseek_r+0x20>
 80028a2:	6023      	str	r3, [r4, #0]
 80028a4:	bd70      	pop	{r4, r5, r6, pc}
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	200000a4 	.word	0x200000a4

080028ac <__swhatbuf_r>:
 80028ac:	b570      	push	{r4, r5, r6, lr}
 80028ae:	000e      	movs	r6, r1
 80028b0:	001d      	movs	r5, r3
 80028b2:	230e      	movs	r3, #14
 80028b4:	5ec9      	ldrsh	r1, [r1, r3]
 80028b6:	0014      	movs	r4, r2
 80028b8:	b096      	sub	sp, #88	; 0x58
 80028ba:	2900      	cmp	r1, #0
 80028bc:	da08      	bge.n	80028d0 <__swhatbuf_r+0x24>
 80028be:	220c      	movs	r2, #12
 80028c0:	5eb3      	ldrsh	r3, [r6, r2]
 80028c2:	2200      	movs	r2, #0
 80028c4:	602a      	str	r2, [r5, #0]
 80028c6:	061b      	lsls	r3, r3, #24
 80028c8:	d411      	bmi.n	80028ee <__swhatbuf_r+0x42>
 80028ca:	2380      	movs	r3, #128	; 0x80
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	e00f      	b.n	80028f0 <__swhatbuf_r+0x44>
 80028d0:	466a      	mov	r2, sp
 80028d2:	f000 f8d1 	bl	8002a78 <_fstat_r>
 80028d6:	2800      	cmp	r0, #0
 80028d8:	dbf1      	blt.n	80028be <__swhatbuf_r+0x12>
 80028da:	23f0      	movs	r3, #240	; 0xf0
 80028dc:	9901      	ldr	r1, [sp, #4]
 80028de:	021b      	lsls	r3, r3, #8
 80028e0:	4019      	ands	r1, r3
 80028e2:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <__swhatbuf_r+0x4c>)
 80028e4:	18c9      	adds	r1, r1, r3
 80028e6:	424b      	negs	r3, r1
 80028e8:	4159      	adcs	r1, r3
 80028ea:	6029      	str	r1, [r5, #0]
 80028ec:	e7ed      	b.n	80028ca <__swhatbuf_r+0x1e>
 80028ee:	2340      	movs	r3, #64	; 0x40
 80028f0:	2000      	movs	r0, #0
 80028f2:	6023      	str	r3, [r4, #0]
 80028f4:	b016      	add	sp, #88	; 0x58
 80028f6:	bd70      	pop	{r4, r5, r6, pc}
 80028f8:	ffffe000 	.word	0xffffe000

080028fc <__smakebuf_r>:
 80028fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028fe:	2602      	movs	r6, #2
 8002900:	898b      	ldrh	r3, [r1, #12]
 8002902:	0005      	movs	r5, r0
 8002904:	000c      	movs	r4, r1
 8002906:	4233      	tst	r3, r6
 8002908:	d006      	beq.n	8002918 <__smakebuf_r+0x1c>
 800290a:	0023      	movs	r3, r4
 800290c:	3347      	adds	r3, #71	; 0x47
 800290e:	6023      	str	r3, [r4, #0]
 8002910:	6123      	str	r3, [r4, #16]
 8002912:	2301      	movs	r3, #1
 8002914:	6163      	str	r3, [r4, #20]
 8002916:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002918:	466a      	mov	r2, sp
 800291a:	ab01      	add	r3, sp, #4
 800291c:	f7ff ffc6 	bl	80028ac <__swhatbuf_r>
 8002920:	9900      	ldr	r1, [sp, #0]
 8002922:	0007      	movs	r7, r0
 8002924:	0028      	movs	r0, r5
 8002926:	f7ff fa35 	bl	8001d94 <_malloc_r>
 800292a:	2800      	cmp	r0, #0
 800292c:	d108      	bne.n	8002940 <__smakebuf_r+0x44>
 800292e:	220c      	movs	r2, #12
 8002930:	5ea3      	ldrsh	r3, [r4, r2]
 8002932:	059a      	lsls	r2, r3, #22
 8002934:	d4ef      	bmi.n	8002916 <__smakebuf_r+0x1a>
 8002936:	2203      	movs	r2, #3
 8002938:	4393      	bics	r3, r2
 800293a:	431e      	orrs	r6, r3
 800293c:	81a6      	strh	r6, [r4, #12]
 800293e:	e7e4      	b.n	800290a <__smakebuf_r+0xe>
 8002940:	4b0f      	ldr	r3, [pc, #60]	; (8002980 <__smakebuf_r+0x84>)
 8002942:	62ab      	str	r3, [r5, #40]	; 0x28
 8002944:	2380      	movs	r3, #128	; 0x80
 8002946:	89a2      	ldrh	r2, [r4, #12]
 8002948:	6020      	str	r0, [r4, #0]
 800294a:	4313      	orrs	r3, r2
 800294c:	81a3      	strh	r3, [r4, #12]
 800294e:	9b00      	ldr	r3, [sp, #0]
 8002950:	6120      	str	r0, [r4, #16]
 8002952:	6163      	str	r3, [r4, #20]
 8002954:	9b01      	ldr	r3, [sp, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00d      	beq.n	8002976 <__smakebuf_r+0x7a>
 800295a:	0028      	movs	r0, r5
 800295c:	230e      	movs	r3, #14
 800295e:	5ee1      	ldrsh	r1, [r4, r3]
 8002960:	f000 f89c 	bl	8002a9c <_isatty_r>
 8002964:	2800      	cmp	r0, #0
 8002966:	d006      	beq.n	8002976 <__smakebuf_r+0x7a>
 8002968:	2203      	movs	r2, #3
 800296a:	89a3      	ldrh	r3, [r4, #12]
 800296c:	4393      	bics	r3, r2
 800296e:	001a      	movs	r2, r3
 8002970:	2301      	movs	r3, #1
 8002972:	4313      	orrs	r3, r2
 8002974:	81a3      	strh	r3, [r4, #12]
 8002976:	89a0      	ldrh	r0, [r4, #12]
 8002978:	4307      	orrs	r7, r0
 800297a:	81a7      	strh	r7, [r4, #12]
 800297c:	e7cb      	b.n	8002916 <__smakebuf_r+0x1a>
 800297e:	46c0      	nop			; (mov r8, r8)
 8002980:	08001b8d 	.word	0x08001b8d

08002984 <memchr>:
 8002984:	b2c9      	uxtb	r1, r1
 8002986:	1882      	adds	r2, r0, r2
 8002988:	4290      	cmp	r0, r2
 800298a:	d101      	bne.n	8002990 <memchr+0xc>
 800298c:	2000      	movs	r0, #0
 800298e:	4770      	bx	lr
 8002990:	7803      	ldrb	r3, [r0, #0]
 8002992:	428b      	cmp	r3, r1
 8002994:	d0fb      	beq.n	800298e <memchr+0xa>
 8002996:	3001      	adds	r0, #1
 8002998:	e7f6      	b.n	8002988 <memchr+0x4>
	...

0800299c <__malloc_lock>:
 800299c:	b510      	push	{r4, lr}
 800299e:	4802      	ldr	r0, [pc, #8]	; (80029a8 <__malloc_lock+0xc>)
 80029a0:	f7ff f9d3 	bl	8001d4a <__retarget_lock_acquire_recursive>
 80029a4:	bd10      	pop	{r4, pc}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	20000098 	.word	0x20000098

080029ac <__malloc_unlock>:
 80029ac:	b510      	push	{r4, lr}
 80029ae:	4802      	ldr	r0, [pc, #8]	; (80029b8 <__malloc_unlock+0xc>)
 80029b0:	f7ff f9cc 	bl	8001d4c <__retarget_lock_release_recursive>
 80029b4:	bd10      	pop	{r4, pc}
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	20000098 	.word	0x20000098

080029bc <_free_r>:
 80029bc:	b570      	push	{r4, r5, r6, lr}
 80029be:	0005      	movs	r5, r0
 80029c0:	2900      	cmp	r1, #0
 80029c2:	d010      	beq.n	80029e6 <_free_r+0x2a>
 80029c4:	1f0c      	subs	r4, r1, #4
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	da00      	bge.n	80029ce <_free_r+0x12>
 80029cc:	18e4      	adds	r4, r4, r3
 80029ce:	0028      	movs	r0, r5
 80029d0:	f7ff ffe4 	bl	800299c <__malloc_lock>
 80029d4:	4a1d      	ldr	r2, [pc, #116]	; (8002a4c <_free_r+0x90>)
 80029d6:	6813      	ldr	r3, [r2, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d105      	bne.n	80029e8 <_free_r+0x2c>
 80029dc:	6063      	str	r3, [r4, #4]
 80029de:	6014      	str	r4, [r2, #0]
 80029e0:	0028      	movs	r0, r5
 80029e2:	f7ff ffe3 	bl	80029ac <__malloc_unlock>
 80029e6:	bd70      	pop	{r4, r5, r6, pc}
 80029e8:	42a3      	cmp	r3, r4
 80029ea:	d908      	bls.n	80029fe <_free_r+0x42>
 80029ec:	6821      	ldr	r1, [r4, #0]
 80029ee:	1860      	adds	r0, r4, r1
 80029f0:	4283      	cmp	r3, r0
 80029f2:	d1f3      	bne.n	80029dc <_free_r+0x20>
 80029f4:	6818      	ldr	r0, [r3, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	1841      	adds	r1, r0, r1
 80029fa:	6021      	str	r1, [r4, #0]
 80029fc:	e7ee      	b.n	80029dc <_free_r+0x20>
 80029fe:	001a      	movs	r2, r3
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <_free_r+0x4e>
 8002a06:	42a3      	cmp	r3, r4
 8002a08:	d9f9      	bls.n	80029fe <_free_r+0x42>
 8002a0a:	6811      	ldr	r1, [r2, #0]
 8002a0c:	1850      	adds	r0, r2, r1
 8002a0e:	42a0      	cmp	r0, r4
 8002a10:	d10b      	bne.n	8002a2a <_free_r+0x6e>
 8002a12:	6820      	ldr	r0, [r4, #0]
 8002a14:	1809      	adds	r1, r1, r0
 8002a16:	1850      	adds	r0, r2, r1
 8002a18:	6011      	str	r1, [r2, #0]
 8002a1a:	4283      	cmp	r3, r0
 8002a1c:	d1e0      	bne.n	80029e0 <_free_r+0x24>
 8002a1e:	6818      	ldr	r0, [r3, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	1841      	adds	r1, r0, r1
 8002a24:	6011      	str	r1, [r2, #0]
 8002a26:	6053      	str	r3, [r2, #4]
 8002a28:	e7da      	b.n	80029e0 <_free_r+0x24>
 8002a2a:	42a0      	cmp	r0, r4
 8002a2c:	d902      	bls.n	8002a34 <_free_r+0x78>
 8002a2e:	230c      	movs	r3, #12
 8002a30:	602b      	str	r3, [r5, #0]
 8002a32:	e7d5      	b.n	80029e0 <_free_r+0x24>
 8002a34:	6821      	ldr	r1, [r4, #0]
 8002a36:	1860      	adds	r0, r4, r1
 8002a38:	4283      	cmp	r3, r0
 8002a3a:	d103      	bne.n	8002a44 <_free_r+0x88>
 8002a3c:	6818      	ldr	r0, [r3, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	1841      	adds	r1, r0, r1
 8002a42:	6021      	str	r1, [r4, #0]
 8002a44:	6063      	str	r3, [r4, #4]
 8002a46:	6054      	str	r4, [r2, #4]
 8002a48:	e7ca      	b.n	80029e0 <_free_r+0x24>
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	2000009c 	.word	0x2000009c

08002a50 <_read_r>:
 8002a50:	b570      	push	{r4, r5, r6, lr}
 8002a52:	0004      	movs	r4, r0
 8002a54:	0008      	movs	r0, r1
 8002a56:	0011      	movs	r1, r2
 8002a58:	001a      	movs	r2, r3
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	4d05      	ldr	r5, [pc, #20]	; (8002a74 <_read_r+0x24>)
 8002a5e:	602b      	str	r3, [r5, #0]
 8002a60:	f7fd fe8d 	bl	800077e <_read>
 8002a64:	1c43      	adds	r3, r0, #1
 8002a66:	d103      	bne.n	8002a70 <_read_r+0x20>
 8002a68:	682b      	ldr	r3, [r5, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d000      	beq.n	8002a70 <_read_r+0x20>
 8002a6e:	6023      	str	r3, [r4, #0]
 8002a70:	bd70      	pop	{r4, r5, r6, pc}
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	200000a4 	.word	0x200000a4

08002a78 <_fstat_r>:
 8002a78:	2300      	movs	r3, #0
 8002a7a:	b570      	push	{r4, r5, r6, lr}
 8002a7c:	4d06      	ldr	r5, [pc, #24]	; (8002a98 <_fstat_r+0x20>)
 8002a7e:	0004      	movs	r4, r0
 8002a80:	0008      	movs	r0, r1
 8002a82:	0011      	movs	r1, r2
 8002a84:	602b      	str	r3, [r5, #0]
 8002a86:	f7fd febd 	bl	8000804 <_fstat>
 8002a8a:	1c43      	adds	r3, r0, #1
 8002a8c:	d103      	bne.n	8002a96 <_fstat_r+0x1e>
 8002a8e:	682b      	ldr	r3, [r5, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d000      	beq.n	8002a96 <_fstat_r+0x1e>
 8002a94:	6023      	str	r3, [r4, #0]
 8002a96:	bd70      	pop	{r4, r5, r6, pc}
 8002a98:	200000a4 	.word	0x200000a4

08002a9c <_isatty_r>:
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	b570      	push	{r4, r5, r6, lr}
 8002aa0:	4d06      	ldr	r5, [pc, #24]	; (8002abc <_isatty_r+0x20>)
 8002aa2:	0004      	movs	r4, r0
 8002aa4:	0008      	movs	r0, r1
 8002aa6:	602b      	str	r3, [r5, #0]
 8002aa8:	f7fd feba 	bl	8000820 <_isatty>
 8002aac:	1c43      	adds	r3, r0, #1
 8002aae:	d103      	bne.n	8002ab8 <_isatty_r+0x1c>
 8002ab0:	682b      	ldr	r3, [r5, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d000      	beq.n	8002ab8 <_isatty_r+0x1c>
 8002ab6:	6023      	str	r3, [r4, #0]
 8002ab8:	bd70      	pop	{r4, r5, r6, pc}
 8002aba:	46c0      	nop			; (mov r8, r8)
 8002abc:	200000a4 	.word	0x200000a4

08002ac0 <_init>:
 8002ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac2:	46c0      	nop			; (mov r8, r8)
 8002ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ac6:	bc08      	pop	{r3}
 8002ac8:	469e      	mov	lr, r3
 8002aca:	4770      	bx	lr

08002acc <_fini>:
 8002acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ad2:	bc08      	pop	{r3}
 8002ad4:	469e      	mov	lr, r3
 8002ad6:	4770      	bx	lr


FreeRTOS_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000397c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08003a3c  08003a3c  00013a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003af8  08003af8  00020048  2**0
                  CONTENTS
  4 .ARM          00000008  08003af8  08003af8  00013af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b00  08003b00  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b00  08003b00  00013b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b04  08003b04  00013b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08003b08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001048  20000048  08003b50  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001090  08003b50  00021090  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bd1c  00000000  00000000  000200b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002043  00000000  00000000  0002bdcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b50  00000000  00000000  0002de18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008a5  00000000  00000000  0002e968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001432e  00000000  00000000  0002f20d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d787  00000000  00000000  0004353b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007ed57  00000000  00000000  00050cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000272c  00000000  00000000  000cfa1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000d2148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000048 	.word	0x20000048
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003a24 	.word	0x08003a24

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000004c 	.word	0x2000004c
 8000104:	08003a24 	.word	0x08003a24

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	60f8      	str	r0, [r7, #12]
 80004b0:	60b9      	str	r1, [r7, #8]
 80004b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	4a06      	ldr	r2, [pc, #24]	; (80004d0 <vApplicationGetIdleTaskMemory+0x28>)
 80004b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ba:	68bb      	ldr	r3, [r7, #8]
 80004bc:	4a05      	ldr	r2, [pc, #20]	; (80004d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80004be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	2280      	movs	r2, #128	; 0x80
 80004c4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b004      	add	sp, #16
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	20000064 	.word	0x20000064
 80004d4:	200000b8 	.word	0x200000b8

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b5b0      	push	{r4, r5, r7, lr}
 80004da:	b08e      	sub	sp, #56	; 0x38
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 f9dd 	bl	800089c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f831 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f8d1 	bl	800068c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004ea:	f000 f89f 	bl	800062c <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskOne */
  osThreadDef(TaskOne, StartTaskOne, osPriorityNormal, 0, 128);
 80004ee:	251c      	movs	r5, #28
 80004f0:	197b      	adds	r3, r7, r5
 80004f2:	4a11      	ldr	r2, [pc, #68]	; (8000538 <main+0x60>)
 80004f4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80004f6:	c313      	stmia	r3!, {r0, r1, r4}
 80004f8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80004fa:	c313      	stmia	r3!, {r0, r1, r4}
 80004fc:	6812      	ldr	r2, [r2, #0]
 80004fe:	601a      	str	r2, [r3, #0]
  TaskOneHandle = osThreadCreate(osThread(TaskOne), NULL);
 8000500:	197b      	adds	r3, r7, r5
 8000502:	2100      	movs	r1, #0
 8000504:	0018      	movs	r0, r3
 8000506:	f002 f9c0 	bl	800288a <osThreadCreate>
 800050a:	0002      	movs	r2, r0
 800050c:	4b0b      	ldr	r3, [pc, #44]	; (800053c <main+0x64>)
 800050e:	601a      	str	r2, [r3, #0]

  /* definition and creation of TaskTwo */
  osThreadDef(TaskTwo, StartTaskTwo, osPriorityAboveNormal, 0, 128);
 8000510:	003b      	movs	r3, r7
 8000512:	4a0b      	ldr	r2, [pc, #44]	; (8000540 <main+0x68>)
 8000514:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000516:	c313      	stmia	r3!, {r0, r1, r4}
 8000518:	ca13      	ldmia	r2!, {r0, r1, r4}
 800051a:	c313      	stmia	r3!, {r0, r1, r4}
 800051c:	6812      	ldr	r2, [r2, #0]
 800051e:	601a      	str	r2, [r3, #0]
  TaskTwoHandle = osThreadCreate(osThread(TaskTwo), NULL);
 8000520:	003b      	movs	r3, r7
 8000522:	2100      	movs	r1, #0
 8000524:	0018      	movs	r0, r3
 8000526:	f002 f9b0 	bl	800288a <osThreadCreate>
 800052a:	0002      	movs	r2, r0
 800052c:	4b05      	ldr	r3, [pc, #20]	; (8000544 <main+0x6c>)
 800052e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000530:	f002 f9a3 	bl	800287a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000534:	e7fe      	b.n	8000534 <main+0x5c>
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	08003a44 	.word	0x08003a44
 800053c:	20000340 	.word	0x20000340
 8000540:	08003a68 	.word	0x08003a68
 8000544:	20000344 	.word	0x20000344

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b590      	push	{r4, r7, lr}
 800054a:	b09d      	sub	sp, #116	; 0x74
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	2438      	movs	r4, #56	; 0x38
 8000550:	193b      	adds	r3, r7, r4
 8000552:	0018      	movs	r0, r3
 8000554:	2338      	movs	r3, #56	; 0x38
 8000556:	001a      	movs	r2, r3
 8000558:	2100      	movs	r1, #0
 800055a:	f003 fa37 	bl	80039cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055e:	2324      	movs	r3, #36	; 0x24
 8000560:	18fb      	adds	r3, r7, r3
 8000562:	0018      	movs	r0, r3
 8000564:	2314      	movs	r3, #20
 8000566:	001a      	movs	r2, r3
 8000568:	2100      	movs	r1, #0
 800056a:	f003 fa2f 	bl	80039cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800056e:	003b      	movs	r3, r7
 8000570:	0018      	movs	r0, r3
 8000572:	2324      	movs	r3, #36	; 0x24
 8000574:	001a      	movs	r2, r3
 8000576:	2100      	movs	r1, #0
 8000578:	f003 fa28 	bl	80039cc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057c:	4b29      	ldr	r3, [pc, #164]	; (8000624 <SystemClock_Config+0xdc>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a29      	ldr	r2, [pc, #164]	; (8000628 <SystemClock_Config+0xe0>)
 8000582:	401a      	ands	r2, r3
 8000584:	4b27      	ldr	r3, [pc, #156]	; (8000624 <SystemClock_Config+0xdc>)
 8000586:	2180      	movs	r1, #128	; 0x80
 8000588:	0109      	lsls	r1, r1, #4
 800058a:	430a      	orrs	r2, r1
 800058c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058e:	0021      	movs	r1, r4
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2202      	movs	r2, #2
 8000594:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2201      	movs	r2, #1
 800059a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2210      	movs	r2, #16
 80005a0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	2202      	movs	r2, #2
 80005a6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	2200      	movs	r2, #0
 80005ac:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	2280      	movs	r2, #128	; 0x80
 80005b2:	02d2      	lsls	r2, r2, #11
 80005b4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2280      	movs	r2, #128	; 0x80
 80005ba:	03d2      	lsls	r2, r2, #15
 80005bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	0018      	movs	r0, r3
 80005c2:	f000 fc29 	bl	8000e18 <HAL_RCC_OscConfig>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x86>
  {
    Error_Handler();
 80005ca:	f000 f8bd 	bl	8000748 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ce:	2124      	movs	r1, #36	; 0x24
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	220f      	movs	r2, #15
 80005d4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2203      	movs	r2, #3
 80005da:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2200      	movs	r2, #0
 80005ec:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2101      	movs	r1, #1
 80005f2:	0018      	movs	r0, r3
 80005f4:	f000 ffd4 	bl	80015a0 <HAL_RCC_ClockConfig>
 80005f8:	1e03      	subs	r3, r0, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80005fc:	f000 f8a4 	bl	8000748 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000600:	003b      	movs	r3, r7
 8000602:	2201      	movs	r2, #1
 8000604:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000606:	003b      	movs	r3, r7
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800060c:	003b      	movs	r3, r7
 800060e:	0018      	movs	r0, r3
 8000610:	f001 f9ea 	bl	80019e8 <HAL_RCCEx_PeriphCLKConfig>
 8000614:	1e03      	subs	r3, r0, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000618:	f000 f896 	bl	8000748 <Error_Handler>
  }
}
 800061c:	46c0      	nop			; (mov r8, r8)
 800061e:	46bd      	mov	sp, r7
 8000620:	b01d      	add	sp, #116	; 0x74
 8000622:	bd90      	pop	{r4, r7, pc}
 8000624:	40007000 	.word	0x40007000
 8000628:	ffffe7ff 	.word	0xffffe7ff

0800062c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000630:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_USART1_UART_Init+0x58>)
 8000632:	4a15      	ldr	r2, [pc, #84]	; (8000688 <MX_USART1_UART_Init+0x5c>)
 8000634:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <MX_USART1_UART_Init+0x58>)
 8000638:	22e1      	movs	r2, #225	; 0xe1
 800063a:	0252      	lsls	r2, r2, #9
 800063c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_USART1_UART_Init+0x58>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_USART1_UART_Init+0x58>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_USART1_UART_Init+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_USART1_UART_Init+0x58>)
 8000652:	220c      	movs	r2, #12
 8000654:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <MX_USART1_UART_Init+0x58>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_USART1_UART_Init+0x58>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <MX_USART1_UART_Init+0x58>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_USART1_UART_Init+0x58>)
 800066a:	2200      	movs	r2, #0
 800066c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800066e:	4b05      	ldr	r3, [pc, #20]	; (8000684 <MX_USART1_UART_Init+0x58>)
 8000670:	0018      	movs	r0, r3
 8000672:	f001 fb47 	bl	8001d04 <HAL_UART_Init>
 8000676:	1e03      	subs	r3, r0, #0
 8000678:	d001      	beq.n	800067e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800067a:	f000 f865 	bl	8000748 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	200002b8 	.word	0x200002b8
 8000688:	40013800 	.word	0x40013800

0800068c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <MX_GPIO_Init+0x58>)
 8000694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000696:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <MX_GPIO_Init+0x58>)
 8000698:	2104      	movs	r1, #4
 800069a:	430a      	orrs	r2, r1
 800069c:	62da      	str	r2, [r3, #44]	; 0x2c
 800069e:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_GPIO_Init+0x58>)
 80006a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006a2:	2204      	movs	r2, #4
 80006a4:	4013      	ands	r3, r2
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_GPIO_Init+0x58>)
 80006ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006ae:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <MX_GPIO_Init+0x58>)
 80006b0:	2180      	movs	r1, #128	; 0x80
 80006b2:	430a      	orrs	r2, r1
 80006b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <MX_GPIO_Init+0x58>)
 80006b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ba:	2280      	movs	r2, #128	; 0x80
 80006bc:	4013      	ands	r3, r2
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <MX_GPIO_Init+0x58>)
 80006c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006c6:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <MX_GPIO_Init+0x58>)
 80006c8:	2101      	movs	r1, #1
 80006ca:	430a      	orrs	r2, r1
 80006cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80006ce:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <MX_GPIO_Init+0x58>)
 80006d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006d2:	2201      	movs	r2, #1
 80006d4:	4013      	ands	r3, r2
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	46bd      	mov	sp, r7
 80006de:	b004      	add	sp, #16
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	40021000 	.word	0x40021000

080006e8 <StartTaskOne>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskOne */
void StartTaskOne(void const * argument)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit(&huart1, (uint8_t *)data1, sizeof(data1), 1000);
 80006f0:	23fa      	movs	r3, #250	; 0xfa
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	4905      	ldr	r1, [pc, #20]	; (800070c <StartTaskOne+0x24>)
 80006f6:	4806      	ldr	r0, [pc, #24]	; (8000710 <StartTaskOne+0x28>)
 80006f8:	2219      	movs	r2, #25
 80006fa:	f001 fb57 	bl	8001dac <HAL_UART_Transmit>
    osDelay(1000);
 80006fe:	23fa      	movs	r3, #250	; 0xfa
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	0018      	movs	r0, r3
 8000704:	f002 f90e 	bl	8002924 <osDelay>
	  HAL_UART_Transmit(&huart1, (uint8_t *)data1, sizeof(data1), 1000);
 8000708:	e7f2      	b.n	80006f0 <StartTaskOne+0x8>
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	20000000 	.word	0x20000000
 8000710:	200002b8 	.word	0x200002b8

08000714 <StartTaskTwo>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskTwo */
void StartTaskTwo(void const * argument)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskTwo */
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit(&huart1, (uint8_t *)data2, sizeof(data2), 1000);
 800071c:	23fa      	movs	r3, #250	; 0xfa
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	4907      	ldr	r1, [pc, #28]	; (8000740 <StartTaskTwo+0x2c>)
 8000722:	4808      	ldr	r0, [pc, #32]	; (8000744 <StartTaskTwo+0x30>)
 8000724:	2219      	movs	r2, #25
 8000726:	f001 fb41 	bl	8001dac <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800072a:	23fa      	movs	r3, #250	; 0xfa
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	0018      	movs	r0, r3
 8000730:	f000 f924 	bl	800097c <HAL_Delay>
    osDelay(1000);
 8000734:	23fa      	movs	r3, #250	; 0xfa
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	0018      	movs	r0, r3
 800073a:	f002 f8f3 	bl	8002924 <osDelay>
	  HAL_UART_Transmit(&huart1, (uint8_t *)data2, sizeof(data2), 1000);
 800073e:	e7ed      	b.n	800071c <StartTaskTwo+0x8>
 8000740:	2000001c 	.word	0x2000001c
 8000744:	200002b8 	.word	0x200002b8

08000748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800074c:	b672      	cpsid	i
}
 800074e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000750:	e7fe      	b.n	8000750 <Error_Handler+0x8>
	...

08000754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000758:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <HAL_MspInit+0x34>)
 800075a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <HAL_MspInit+0x34>)
 800075e:	2101      	movs	r1, #1
 8000760:	430a      	orrs	r2, r1
 8000762:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <HAL_MspInit+0x34>)
 8000766:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <HAL_MspInit+0x34>)
 800076a:	2180      	movs	r1, #128	; 0x80
 800076c:	0549      	lsls	r1, r1, #21
 800076e:	430a      	orrs	r2, r1
 8000770:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000772:	2302      	movs	r3, #2
 8000774:	425b      	negs	r3, r3
 8000776:	2200      	movs	r2, #0
 8000778:	2103      	movs	r1, #3
 800077a:	0018      	movs	r0, r3
 800077c:	f000 f9b4 	bl	8000ae8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	40021000 	.word	0x40021000

0800078c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800078c:	b590      	push	{r4, r7, lr}
 800078e:	b089      	sub	sp, #36	; 0x24
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	240c      	movs	r4, #12
 8000796:	193b      	adds	r3, r7, r4
 8000798:	0018      	movs	r0, r3
 800079a:	2314      	movs	r3, #20
 800079c:	001a      	movs	r2, r3
 800079e:	2100      	movs	r1, #0
 80007a0:	f003 f914 	bl	80039cc <memset>
  if(huart->Instance==USART1)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a18      	ldr	r2, [pc, #96]	; (800080c <HAL_UART_MspInit+0x80>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d12a      	bne.n	8000804 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007ae:	4b18      	ldr	r3, [pc, #96]	; (8000810 <HAL_UART_MspInit+0x84>)
 80007b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <HAL_UART_MspInit+0x84>)
 80007b4:	2180      	movs	r1, #128	; 0x80
 80007b6:	01c9      	lsls	r1, r1, #7
 80007b8:	430a      	orrs	r2, r1
 80007ba:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <HAL_UART_MspInit+0x84>)
 80007be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007c0:	4b13      	ldr	r3, [pc, #76]	; (8000810 <HAL_UART_MspInit+0x84>)
 80007c2:	2101      	movs	r1, #1
 80007c4:	430a      	orrs	r2, r1
 80007c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <HAL_UART_MspInit+0x84>)
 80007ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007cc:	2201      	movs	r2, #1
 80007ce:	4013      	ands	r3, r2
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007d4:	193b      	adds	r3, r7, r4
 80007d6:	22c0      	movs	r2, #192	; 0xc0
 80007d8:	00d2      	lsls	r2, r2, #3
 80007da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007dc:	0021      	movs	r1, r4
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	2202      	movs	r2, #2
 80007e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	2203      	movs	r2, #3
 80007ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	2204      	movs	r2, #4
 80007f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f6:	187a      	adds	r2, r7, r1
 80007f8:	23a0      	movs	r3, #160	; 0xa0
 80007fa:	05db      	lsls	r3, r3, #23
 80007fc:	0011      	movs	r1, r2
 80007fe:	0018      	movs	r0, r3
 8000800:	f000 f994 	bl	8000b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	b009      	add	sp, #36	; 0x24
 800080a:	bd90      	pop	{r4, r7, pc}
 800080c:	40013800 	.word	0x40013800
 8000810:	40021000 	.word	0x40021000

08000814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <NMI_Handler+0x4>

0800081a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <HardFault_Handler+0x4>

08000820 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000824:	f000 f88e 	bl	8000944 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000828:	f002 fd86 	bl	8003338 <xTaskGetSchedulerState>
 800082c:	0003      	movs	r3, r0
 800082e:	2b01      	cmp	r3, #1
 8000830:	d001      	beq.n	8000836 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000832:	f002 fee9 	bl	8003608 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000840:	46c0      	nop			; (mov r8, r8)
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
	...

08000848 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000848:	480d      	ldr	r0, [pc, #52]	; (8000880 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800084a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800084c:	f7ff fff6 	bl	800083c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000850:	480c      	ldr	r0, [pc, #48]	; (8000884 <LoopForever+0x6>)
  ldr r1, =_edata
 8000852:	490d      	ldr	r1, [pc, #52]	; (8000888 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000854:	4a0d      	ldr	r2, [pc, #52]	; (800088c <LoopForever+0xe>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000858:	e002      	b.n	8000860 <LoopCopyDataInit>

0800085a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800085c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085e:	3304      	adds	r3, #4

08000860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000864:	d3f9      	bcc.n	800085a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000866:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000868:	4c0a      	ldr	r4, [pc, #40]	; (8000894 <LoopForever+0x16>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800086c:	e001      	b.n	8000872 <LoopFillZerobss>

0800086e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000870:	3204      	adds	r2, #4

08000872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000874:	d3fb      	bcc.n	800086e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000876:	f003 f8b1 	bl	80039dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800087a:	f7ff fe2d 	bl	80004d8 <main>

0800087e <LoopForever>:

LoopForever:
    b LoopForever
 800087e:	e7fe      	b.n	800087e <LoopForever>
  ldr   r0, =_estack
 8000880:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000888:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 800088c:	08003b08 	.word	0x08003b08
  ldr r2, =_sbss
 8000890:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8000894:	20001090 	.word	0x20001090

08000898 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000898:	e7fe      	b.n	8000898 <ADC1_COMP_IRQHandler>
	...

0800089c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008a2:	1dfb      	adds	r3, r7, #7
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80008a8:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <HAL_Init+0x3c>)
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <HAL_Init+0x3c>)
 80008ae:	2140      	movs	r1, #64	; 0x40
 80008b0:	430a      	orrs	r2, r1
 80008b2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008b4:	2003      	movs	r0, #3
 80008b6:	f000 f811 	bl	80008dc <HAL_InitTick>
 80008ba:	1e03      	subs	r3, r0, #0
 80008bc:	d003      	beq.n	80008c6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80008be:	1dfb      	adds	r3, r7, #7
 80008c0:	2201      	movs	r2, #1
 80008c2:	701a      	strb	r2, [r3, #0]
 80008c4:	e001      	b.n	80008ca <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008c6:	f7ff ff45 	bl	8000754 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008ca:	1dfb      	adds	r3, r7, #7
 80008cc:	781b      	ldrb	r3, [r3, #0]
}
 80008ce:	0018      	movs	r0, r3
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b002      	add	sp, #8
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	40022000 	.word	0x40022000

080008dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e4:	4b14      	ldr	r3, [pc, #80]	; (8000938 <HAL_InitTick+0x5c>)
 80008e6:	681c      	ldr	r4, [r3, #0]
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <HAL_InitTick+0x60>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	0019      	movs	r1, r3
 80008ee:	23fa      	movs	r3, #250	; 0xfa
 80008f0:	0098      	lsls	r0, r3, #2
 80008f2:	f7ff fc09 	bl	8000108 <__udivsi3>
 80008f6:	0003      	movs	r3, r0
 80008f8:	0019      	movs	r1, r3
 80008fa:	0020      	movs	r0, r4
 80008fc:	f7ff fc04 	bl	8000108 <__udivsi3>
 8000900:	0003      	movs	r3, r0
 8000902:	0018      	movs	r0, r3
 8000904:	f000 f905 	bl	8000b12 <HAL_SYSTICK_Config>
 8000908:	1e03      	subs	r3, r0, #0
 800090a:	d001      	beq.n	8000910 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800090c:	2301      	movs	r3, #1
 800090e:	e00f      	b.n	8000930 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b03      	cmp	r3, #3
 8000914:	d80b      	bhi.n	800092e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000916:	6879      	ldr	r1, [r7, #4]
 8000918:	2301      	movs	r3, #1
 800091a:	425b      	negs	r3, r3
 800091c:	2200      	movs	r2, #0
 800091e:	0018      	movs	r0, r3
 8000920:	f000 f8e2 	bl	8000ae8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_InitTick+0x64>)
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800092a:	2300      	movs	r3, #0
 800092c:	e000      	b.n	8000930 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800092e:	2301      	movs	r3, #1
}
 8000930:	0018      	movs	r0, r3
 8000932:	46bd      	mov	sp, r7
 8000934:	b003      	add	sp, #12
 8000936:	bd90      	pop	{r4, r7, pc}
 8000938:	20000038 	.word	0x20000038
 800093c:	20000040 	.word	0x20000040
 8000940:	2000003c 	.word	0x2000003c

08000944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <HAL_IncTick+0x1c>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	001a      	movs	r2, r3
 800094e:	4b05      	ldr	r3, [pc, #20]	; (8000964 <HAL_IncTick+0x20>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	18d2      	adds	r2, r2, r3
 8000954:	4b03      	ldr	r3, [pc, #12]	; (8000964 <HAL_IncTick+0x20>)
 8000956:	601a      	str	r2, [r3, #0]
}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	20000040 	.word	0x20000040
 8000964:	20000348 	.word	0x20000348

08000968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  return uwTick;
 800096c:	4b02      	ldr	r3, [pc, #8]	; (8000978 <HAL_GetTick+0x10>)
 800096e:	681b      	ldr	r3, [r3, #0]
}
 8000970:	0018      	movs	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	20000348 	.word	0x20000348

0800097c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000984:	f7ff fff0 	bl	8000968 <HAL_GetTick>
 8000988:	0003      	movs	r3, r0
 800098a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	3301      	adds	r3, #1
 8000994:	d005      	beq.n	80009a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000996:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <HAL_Delay+0x44>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	001a      	movs	r2, r3
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	189b      	adds	r3, r3, r2
 80009a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	f7ff ffe0 	bl	8000968 <HAL_GetTick>
 80009a8:	0002      	movs	r2, r0
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	68fa      	ldr	r2, [r7, #12]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d8f7      	bhi.n	80009a4 <HAL_Delay+0x28>
  {
  }
}
 80009b4:	46c0      	nop			; (mov r8, r8)
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b004      	add	sp, #16
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	20000040 	.word	0x20000040

080009c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c4:	b590      	push	{r4, r7, lr}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	0002      	movs	r2, r0
 80009cc:	6039      	str	r1, [r7, #0]
 80009ce:	1dfb      	adds	r3, r7, #7
 80009d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009d2:	1dfb      	adds	r3, r7, #7
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b7f      	cmp	r3, #127	; 0x7f
 80009d8:	d828      	bhi.n	8000a2c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009da:	4a2f      	ldr	r2, [pc, #188]	; (8000a98 <__NVIC_SetPriority+0xd4>)
 80009dc:	1dfb      	adds	r3, r7, #7
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	b25b      	sxtb	r3, r3
 80009e2:	089b      	lsrs	r3, r3, #2
 80009e4:	33c0      	adds	r3, #192	; 0xc0
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	589b      	ldr	r3, [r3, r2]
 80009ea:	1dfa      	adds	r2, r7, #7
 80009ec:	7812      	ldrb	r2, [r2, #0]
 80009ee:	0011      	movs	r1, r2
 80009f0:	2203      	movs	r2, #3
 80009f2:	400a      	ands	r2, r1
 80009f4:	00d2      	lsls	r2, r2, #3
 80009f6:	21ff      	movs	r1, #255	; 0xff
 80009f8:	4091      	lsls	r1, r2
 80009fa:	000a      	movs	r2, r1
 80009fc:	43d2      	mvns	r2, r2
 80009fe:	401a      	ands	r2, r3
 8000a00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	019b      	lsls	r3, r3, #6
 8000a06:	22ff      	movs	r2, #255	; 0xff
 8000a08:	401a      	ands	r2, r3
 8000a0a:	1dfb      	adds	r3, r7, #7
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	0018      	movs	r0, r3
 8000a10:	2303      	movs	r3, #3
 8000a12:	4003      	ands	r3, r0
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a18:	481f      	ldr	r0, [pc, #124]	; (8000a98 <__NVIC_SetPriority+0xd4>)
 8000a1a:	1dfb      	adds	r3, r7, #7
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	b25b      	sxtb	r3, r3
 8000a20:	089b      	lsrs	r3, r3, #2
 8000a22:	430a      	orrs	r2, r1
 8000a24:	33c0      	adds	r3, #192	; 0xc0
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a2a:	e031      	b.n	8000a90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a2c:	4a1b      	ldr	r2, [pc, #108]	; (8000a9c <__NVIC_SetPriority+0xd8>)
 8000a2e:	1dfb      	adds	r3, r7, #7
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	0019      	movs	r1, r3
 8000a34:	230f      	movs	r3, #15
 8000a36:	400b      	ands	r3, r1
 8000a38:	3b08      	subs	r3, #8
 8000a3a:	089b      	lsrs	r3, r3, #2
 8000a3c:	3306      	adds	r3, #6
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	18d3      	adds	r3, r2, r3
 8000a42:	3304      	adds	r3, #4
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	1dfa      	adds	r2, r7, #7
 8000a48:	7812      	ldrb	r2, [r2, #0]
 8000a4a:	0011      	movs	r1, r2
 8000a4c:	2203      	movs	r2, #3
 8000a4e:	400a      	ands	r2, r1
 8000a50:	00d2      	lsls	r2, r2, #3
 8000a52:	21ff      	movs	r1, #255	; 0xff
 8000a54:	4091      	lsls	r1, r2
 8000a56:	000a      	movs	r2, r1
 8000a58:	43d2      	mvns	r2, r2
 8000a5a:	401a      	ands	r2, r3
 8000a5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	019b      	lsls	r3, r3, #6
 8000a62:	22ff      	movs	r2, #255	; 0xff
 8000a64:	401a      	ands	r2, r3
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	4003      	ands	r3, r0
 8000a70:	00db      	lsls	r3, r3, #3
 8000a72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a74:	4809      	ldr	r0, [pc, #36]	; (8000a9c <__NVIC_SetPriority+0xd8>)
 8000a76:	1dfb      	adds	r3, r7, #7
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	001c      	movs	r4, r3
 8000a7c:	230f      	movs	r3, #15
 8000a7e:	4023      	ands	r3, r4
 8000a80:	3b08      	subs	r3, #8
 8000a82:	089b      	lsrs	r3, r3, #2
 8000a84:	430a      	orrs	r2, r1
 8000a86:	3306      	adds	r3, #6
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	18c3      	adds	r3, r0, r3
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	601a      	str	r2, [r3, #0]
}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b003      	add	sp, #12
 8000a96:	bd90      	pop	{r4, r7, pc}
 8000a98:	e000e100 	.word	0xe000e100
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	1e5a      	subs	r2, r3, #1
 8000aac:	2380      	movs	r3, #128	; 0x80
 8000aae:	045b      	lsls	r3, r3, #17
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d301      	bcc.n	8000ab8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	e010      	b.n	8000ada <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <SysTick_Config+0x44>)
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	3a01      	subs	r2, #1
 8000abe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	425b      	negs	r3, r3
 8000ac4:	2103      	movs	r1, #3
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f7ff ff7c 	bl	80009c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <SysTick_Config+0x44>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad2:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <SysTick_Config+0x44>)
 8000ad4:	2207      	movs	r2, #7
 8000ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	0018      	movs	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b002      	add	sp, #8
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	e000e010 	.word	0xe000e010

08000ae8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	607a      	str	r2, [r7, #4]
 8000af2:	210f      	movs	r1, #15
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	1c02      	adds	r2, r0, #0
 8000af8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000afa:	68ba      	ldr	r2, [r7, #8]
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	b25b      	sxtb	r3, r3
 8000b02:	0011      	movs	r1, r2
 8000b04:	0018      	movs	r0, r3
 8000b06:	f7ff ff5d 	bl	80009c4 <__NVIC_SetPriority>
}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b004      	add	sp, #16
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f7ff ffbf 	bl	8000aa0 <SysTick_Config>
 8000b22:	0003      	movs	r3, r0
}
 8000b24:	0018      	movs	r0, r3
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b002      	add	sp, #8
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000b42:	e14f      	b.n	8000de4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2101      	movs	r1, #1
 8000b4a:	697a      	ldr	r2, [r7, #20]
 8000b4c:	4091      	lsls	r1, r2
 8000b4e:	000a      	movs	r2, r1
 8000b50:	4013      	ands	r3, r2
 8000b52:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d100      	bne.n	8000b5c <HAL_GPIO_Init+0x30>
 8000b5a:	e140      	b.n	8000dde <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	2203      	movs	r2, #3
 8000b62:	4013      	ands	r3, r2
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d005      	beq.n	8000b74 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	2203      	movs	r2, #3
 8000b6e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b70:	2b02      	cmp	r3, #2
 8000b72:	d130      	bne.n	8000bd6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	2203      	movs	r2, #3
 8000b80:	409a      	lsls	r2, r3
 8000b82:	0013      	movs	r3, r2
 8000b84:	43da      	mvns	r2, r3
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	68da      	ldr	r2, [r3, #12]
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	409a      	lsls	r2, r3
 8000b96:	0013      	movs	r3, r2
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000baa:	2201      	movs	r2, #1
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	409a      	lsls	r2, r3
 8000bb0:	0013      	movs	r3, r2
 8000bb2:	43da      	mvns	r2, r3
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	091b      	lsrs	r3, r3, #4
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	409a      	lsls	r2, r3
 8000bc8:	0013      	movs	r3, r2
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	2203      	movs	r2, #3
 8000bdc:	4013      	ands	r3, r2
 8000bde:	2b03      	cmp	r3, #3
 8000be0:	d017      	beq.n	8000c12 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	68db      	ldr	r3, [r3, #12]
 8000be6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	2203      	movs	r2, #3
 8000bee:	409a      	lsls	r2, r3
 8000bf0:	0013      	movs	r3, r2
 8000bf2:	43da      	mvns	r2, r3
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	689a      	ldr	r2, [r3, #8]
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	409a      	lsls	r2, r3
 8000c04:	0013      	movs	r3, r2
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	2203      	movs	r2, #3
 8000c18:	4013      	ands	r3, r2
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	d123      	bne.n	8000c66 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	08da      	lsrs	r2, r3, #3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	3208      	adds	r2, #8
 8000c26:	0092      	lsls	r2, r2, #2
 8000c28:	58d3      	ldr	r3, [r2, r3]
 8000c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	2207      	movs	r2, #7
 8000c30:	4013      	ands	r3, r2
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	220f      	movs	r2, #15
 8000c36:	409a      	lsls	r2, r3
 8000c38:	0013      	movs	r3, r2
 8000c3a:	43da      	mvns	r2, r3
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	691a      	ldr	r2, [r3, #16]
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	2107      	movs	r1, #7
 8000c4a:	400b      	ands	r3, r1
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	409a      	lsls	r2, r3
 8000c50:	0013      	movs	r3, r2
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	08da      	lsrs	r2, r3, #3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3208      	adds	r2, #8
 8000c60:	0092      	lsls	r2, r2, #2
 8000c62:	6939      	ldr	r1, [r7, #16]
 8000c64:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	2203      	movs	r2, #3
 8000c72:	409a      	lsls	r2, r3
 8000c74:	0013      	movs	r3, r2
 8000c76:	43da      	mvns	r2, r3
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	2203      	movs	r2, #3
 8000c84:	401a      	ands	r2, r3
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	409a      	lsls	r2, r3
 8000c8c:	0013      	movs	r3, r2
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685a      	ldr	r2, [r3, #4]
 8000c9e:	23c0      	movs	r3, #192	; 0xc0
 8000ca0:	029b      	lsls	r3, r3, #10
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	d100      	bne.n	8000ca8 <HAL_GPIO_Init+0x17c>
 8000ca6:	e09a      	b.n	8000dde <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca8:	4b54      	ldr	r3, [pc, #336]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cac:	4b53      	ldr	r3, [pc, #332]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000cae:	2101      	movs	r1, #1
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cb4:	4a52      	ldr	r2, [pc, #328]	; (8000e00 <HAL_GPIO_Init+0x2d4>)
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	089b      	lsrs	r3, r3, #2
 8000cba:	3302      	adds	r3, #2
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	589b      	ldr	r3, [r3, r2]
 8000cc0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	220f      	movs	r2, #15
 8000ccc:	409a      	lsls	r2, r3
 8000cce:	0013      	movs	r3, r2
 8000cd0:	43da      	mvns	r2, r3
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	23a0      	movs	r3, #160	; 0xa0
 8000cdc:	05db      	lsls	r3, r3, #23
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d019      	beq.n	8000d16 <HAL_GPIO_Init+0x1ea>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a47      	ldr	r2, [pc, #284]	; (8000e04 <HAL_GPIO_Init+0x2d8>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d013      	beq.n	8000d12 <HAL_GPIO_Init+0x1e6>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a46      	ldr	r2, [pc, #280]	; (8000e08 <HAL_GPIO_Init+0x2dc>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d00d      	beq.n	8000d0e <HAL_GPIO_Init+0x1e2>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a45      	ldr	r2, [pc, #276]	; (8000e0c <HAL_GPIO_Init+0x2e0>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d007      	beq.n	8000d0a <HAL_GPIO_Init+0x1de>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a44      	ldr	r2, [pc, #272]	; (8000e10 <HAL_GPIO_Init+0x2e4>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d101      	bne.n	8000d06 <HAL_GPIO_Init+0x1da>
 8000d02:	2305      	movs	r3, #5
 8000d04:	e008      	b.n	8000d18 <HAL_GPIO_Init+0x1ec>
 8000d06:	2306      	movs	r3, #6
 8000d08:	e006      	b.n	8000d18 <HAL_GPIO_Init+0x1ec>
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	e004      	b.n	8000d18 <HAL_GPIO_Init+0x1ec>
 8000d0e:	2302      	movs	r3, #2
 8000d10:	e002      	b.n	8000d18 <HAL_GPIO_Init+0x1ec>
 8000d12:	2301      	movs	r3, #1
 8000d14:	e000      	b.n	8000d18 <HAL_GPIO_Init+0x1ec>
 8000d16:	2300      	movs	r3, #0
 8000d18:	697a      	ldr	r2, [r7, #20]
 8000d1a:	2103      	movs	r1, #3
 8000d1c:	400a      	ands	r2, r1
 8000d1e:	0092      	lsls	r2, r2, #2
 8000d20:	4093      	lsls	r3, r2
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d28:	4935      	ldr	r1, [pc, #212]	; (8000e00 <HAL_GPIO_Init+0x2d4>)
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	089b      	lsrs	r3, r3, #2
 8000d2e:	3302      	adds	r3, #2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d36:	4b37      	ldr	r3, [pc, #220]	; (8000e14 <HAL_GPIO_Init+0x2e8>)
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	43da      	mvns	r2, r3
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	4013      	ands	r3, r2
 8000d44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685a      	ldr	r2, [r3, #4]
 8000d4a:	2380      	movs	r3, #128	; 0x80
 8000d4c:	035b      	lsls	r3, r3, #13
 8000d4e:	4013      	ands	r3, r2
 8000d50:	d003      	beq.n	8000d5a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d5a:	4b2e      	ldr	r3, [pc, #184]	; (8000e14 <HAL_GPIO_Init+0x2e8>)
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d60:	4b2c      	ldr	r3, [pc, #176]	; (8000e14 <HAL_GPIO_Init+0x2e8>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	43da      	mvns	r2, r3
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685a      	ldr	r2, [r3, #4]
 8000d74:	2380      	movs	r3, #128	; 0x80
 8000d76:	039b      	lsls	r3, r3, #14
 8000d78:	4013      	ands	r3, r2
 8000d7a:	d003      	beq.n	8000d84 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d84:	4b23      	ldr	r3, [pc, #140]	; (8000e14 <HAL_GPIO_Init+0x2e8>)
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000d8a:	4b22      	ldr	r3, [pc, #136]	; (8000e14 <HAL_GPIO_Init+0x2e8>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	43da      	mvns	r2, r3
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	4013      	ands	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685a      	ldr	r2, [r3, #4]
 8000d9e:	2380      	movs	r3, #128	; 0x80
 8000da0:	029b      	lsls	r3, r3, #10
 8000da2:	4013      	ands	r3, r2
 8000da4:	d003      	beq.n	8000dae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000dae:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <HAL_GPIO_Init+0x2e8>)
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000db4:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <HAL_GPIO_Init+0x2e8>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	43da      	mvns	r2, r3
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685a      	ldr	r2, [r3, #4]
 8000dc8:	2380      	movs	r3, #128	; 0x80
 8000dca:	025b      	lsls	r3, r3, #9
 8000dcc:	4013      	ands	r3, r2
 8000dce:	d003      	beq.n	8000dd8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <HAL_GPIO_Init+0x2e8>)
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	3301      	adds	r3, #1
 8000de2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	40da      	lsrs	r2, r3
 8000dec:	1e13      	subs	r3, r2, #0
 8000dee:	d000      	beq.n	8000df2 <HAL_GPIO_Init+0x2c6>
 8000df0:	e6a8      	b.n	8000b44 <HAL_GPIO_Init+0x18>
  }
}
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	46c0      	nop			; (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	b006      	add	sp, #24
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	40010000 	.word	0x40010000
 8000e04:	50000400 	.word	0x50000400
 8000e08:	50000800 	.word	0x50000800
 8000e0c:	50000c00 	.word	0x50000c00
 8000e10:	50001c00 	.word	0x50001c00
 8000e14:	40010400 	.word	0x40010400

08000e18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e18:	b5b0      	push	{r4, r5, r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d102      	bne.n	8000e2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	f000 fbaf 	bl	800158a <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e2c:	4bcf      	ldr	r3, [pc, #828]	; (800116c <HAL_RCC_OscConfig+0x354>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	220c      	movs	r2, #12
 8000e32:	4013      	ands	r3, r2
 8000e34:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e36:	4bcd      	ldr	r3, [pc, #820]	; (800116c <HAL_RCC_OscConfig+0x354>)
 8000e38:	68da      	ldr	r2, [r3, #12]
 8000e3a:	2380      	movs	r3, #128	; 0x80
 8000e3c:	025b      	lsls	r3, r3, #9
 8000e3e:	4013      	ands	r3, r2
 8000e40:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2201      	movs	r2, #1
 8000e48:	4013      	ands	r3, r2
 8000e4a:	d100      	bne.n	8000e4e <HAL_RCC_OscConfig+0x36>
 8000e4c:	e07e      	b.n	8000f4c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e4e:	6a3b      	ldr	r3, [r7, #32]
 8000e50:	2b08      	cmp	r3, #8
 8000e52:	d007      	beq.n	8000e64 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e54:	6a3b      	ldr	r3, [r7, #32]
 8000e56:	2b0c      	cmp	r3, #12
 8000e58:	d112      	bne.n	8000e80 <HAL_RCC_OscConfig+0x68>
 8000e5a:	69fa      	ldr	r2, [r7, #28]
 8000e5c:	2380      	movs	r3, #128	; 0x80
 8000e5e:	025b      	lsls	r3, r3, #9
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d10d      	bne.n	8000e80 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e64:	4bc1      	ldr	r3, [pc, #772]	; (800116c <HAL_RCC_OscConfig+0x354>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	2380      	movs	r3, #128	; 0x80
 8000e6a:	029b      	lsls	r3, r3, #10
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	d100      	bne.n	8000e72 <HAL_RCC_OscConfig+0x5a>
 8000e70:	e06b      	b.n	8000f4a <HAL_RCC_OscConfig+0x132>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d167      	bne.n	8000f4a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	f000 fb85 	bl	800158a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685a      	ldr	r2, [r3, #4]
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	025b      	lsls	r3, r3, #9
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d107      	bne.n	8000e9c <HAL_RCC_OscConfig+0x84>
 8000e8c:	4bb7      	ldr	r3, [pc, #732]	; (800116c <HAL_RCC_OscConfig+0x354>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4bb6      	ldr	r3, [pc, #728]	; (800116c <HAL_RCC_OscConfig+0x354>)
 8000e92:	2180      	movs	r1, #128	; 0x80
 8000e94:	0249      	lsls	r1, r1, #9
 8000e96:	430a      	orrs	r2, r1
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	e027      	b.n	8000eec <HAL_RCC_OscConfig+0xd4>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685a      	ldr	r2, [r3, #4]
 8000ea0:	23a0      	movs	r3, #160	; 0xa0
 8000ea2:	02db      	lsls	r3, r3, #11
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d10e      	bne.n	8000ec6 <HAL_RCC_OscConfig+0xae>
 8000ea8:	4bb0      	ldr	r3, [pc, #704]	; (800116c <HAL_RCC_OscConfig+0x354>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4baf      	ldr	r3, [pc, #700]	; (800116c <HAL_RCC_OscConfig+0x354>)
 8000eae:	2180      	movs	r1, #128	; 0x80
 8000eb0:	02c9      	lsls	r1, r1, #11
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	4bad      	ldr	r3, [pc, #692]	; (800116c <HAL_RCC_OscConfig+0x354>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	4bac      	ldr	r3, [pc, #688]	; (800116c <HAL_RCC_OscConfig+0x354>)
 8000ebc:	2180      	movs	r1, #128	; 0x80
 8000ebe:	0249      	lsls	r1, r1, #9
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	e012      	b.n	8000eec <HAL_RCC_OscConfig+0xd4>
 8000ec6:	4ba9      	ldr	r3, [pc, #676]	; (800116c <HAL_RCC_OscConfig+0x354>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	4ba8      	ldr	r3, [pc, #672]	; (800116c <HAL_RCC_OscConfig+0x354>)
 8000ecc:	49a8      	ldr	r1, [pc, #672]	; (8001170 <HAL_RCC_OscConfig+0x358>)
 8000ece:	400a      	ands	r2, r1
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	4ba6      	ldr	r3, [pc, #664]	; (800116c <HAL_RCC_OscConfig+0x354>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	2380      	movs	r3, #128	; 0x80
 8000ed8:	025b      	lsls	r3, r3, #9
 8000eda:	4013      	ands	r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	4ba2      	ldr	r3, [pc, #648]	; (800116c <HAL_RCC_OscConfig+0x354>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	4ba1      	ldr	r3, [pc, #644]	; (800116c <HAL_RCC_OscConfig+0x354>)
 8000ee6:	49a3      	ldr	r1, [pc, #652]	; (8001174 <HAL_RCC_OscConfig+0x35c>)
 8000ee8:	400a      	ands	r2, r1
 8000eea:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d015      	beq.n	8000f20 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef4:	f7ff fd38 	bl	8000968 <HAL_GetTick>
 8000ef8:	0003      	movs	r3, r0
 8000efa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000efc:	e009      	b.n	8000f12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000efe:	f7ff fd33 	bl	8000968 <HAL_GetTick>
 8000f02:	0002      	movs	r2, r0
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	2b64      	cmp	r3, #100	; 0x64
 8000f0a:	d902      	bls.n	8000f12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	f000 fb3c 	bl	800158a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f12:	4b96      	ldr	r3, [pc, #600]	; (800116c <HAL_RCC_OscConfig+0x354>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	2380      	movs	r3, #128	; 0x80
 8000f18:	029b      	lsls	r3, r3, #10
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	d0ef      	beq.n	8000efe <HAL_RCC_OscConfig+0xe6>
 8000f1e:	e015      	b.n	8000f4c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f20:	f7ff fd22 	bl	8000968 <HAL_GetTick>
 8000f24:	0003      	movs	r3, r0
 8000f26:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f28:	e008      	b.n	8000f3c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f2a:	f7ff fd1d 	bl	8000968 <HAL_GetTick>
 8000f2e:	0002      	movs	r2, r0
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	2b64      	cmp	r3, #100	; 0x64
 8000f36:	d901      	bls.n	8000f3c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	e326      	b.n	800158a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f3c:	4b8b      	ldr	r3, [pc, #556]	; (800116c <HAL_RCC_OscConfig+0x354>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	029b      	lsls	r3, r3, #10
 8000f44:	4013      	ands	r3, r2
 8000f46:	d1f0      	bne.n	8000f2a <HAL_RCC_OscConfig+0x112>
 8000f48:	e000      	b.n	8000f4c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f4a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2202      	movs	r2, #2
 8000f52:	4013      	ands	r3, r2
 8000f54:	d100      	bne.n	8000f58 <HAL_RCC_OscConfig+0x140>
 8000f56:	e08b      	b.n	8001070 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f5e:	6a3b      	ldr	r3, [r7, #32]
 8000f60:	2b04      	cmp	r3, #4
 8000f62:	d005      	beq.n	8000f70 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f64:	6a3b      	ldr	r3, [r7, #32]
 8000f66:	2b0c      	cmp	r3, #12
 8000f68:	d13e      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x1d0>
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d13b      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000f70:	4b7e      	ldr	r3, [pc, #504]	; (800116c <HAL_RCC_OscConfig+0x354>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2204      	movs	r2, #4
 8000f76:	4013      	ands	r3, r2
 8000f78:	d004      	beq.n	8000f84 <HAL_RCC_OscConfig+0x16c>
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d101      	bne.n	8000f84 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e302      	b.n	800158a <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f84:	4b79      	ldr	r3, [pc, #484]	; (800116c <HAL_RCC_OscConfig+0x354>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	4a7b      	ldr	r2, [pc, #492]	; (8001178 <HAL_RCC_OscConfig+0x360>)
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	0019      	movs	r1, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	691b      	ldr	r3, [r3, #16]
 8000f92:	021a      	lsls	r2, r3, #8
 8000f94:	4b75      	ldr	r3, [pc, #468]	; (800116c <HAL_RCC_OscConfig+0x354>)
 8000f96:	430a      	orrs	r2, r1
 8000f98:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000f9a:	4b74      	ldr	r3, [pc, #464]	; (800116c <HAL_RCC_OscConfig+0x354>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2209      	movs	r2, #9
 8000fa0:	4393      	bics	r3, r2
 8000fa2:	0019      	movs	r1, r3
 8000fa4:	4b71      	ldr	r3, [pc, #452]	; (800116c <HAL_RCC_OscConfig+0x354>)
 8000fa6:	697a      	ldr	r2, [r7, #20]
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000fac:	f000 fc40 	bl	8001830 <HAL_RCC_GetSysClockFreq>
 8000fb0:	0001      	movs	r1, r0
 8000fb2:	4b6e      	ldr	r3, [pc, #440]	; (800116c <HAL_RCC_OscConfig+0x354>)
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	091b      	lsrs	r3, r3, #4
 8000fb8:	220f      	movs	r2, #15
 8000fba:	4013      	ands	r3, r2
 8000fbc:	4a6f      	ldr	r2, [pc, #444]	; (800117c <HAL_RCC_OscConfig+0x364>)
 8000fbe:	5cd3      	ldrb	r3, [r2, r3]
 8000fc0:	000a      	movs	r2, r1
 8000fc2:	40da      	lsrs	r2, r3
 8000fc4:	4b6e      	ldr	r3, [pc, #440]	; (8001180 <HAL_RCC_OscConfig+0x368>)
 8000fc6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8000fc8:	4b6e      	ldr	r3, [pc, #440]	; (8001184 <HAL_RCC_OscConfig+0x36c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2513      	movs	r5, #19
 8000fce:	197c      	adds	r4, r7, r5
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f7ff fc83 	bl	80008dc <HAL_InitTick>
 8000fd6:	0003      	movs	r3, r0
 8000fd8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000fda:	197b      	adds	r3, r7, r5
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d046      	beq.n	8001070 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8000fe2:	197b      	adds	r3, r7, r5
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	e2d0      	b.n	800158a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d027      	beq.n	800103e <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000fee:	4b5f      	ldr	r3, [pc, #380]	; (800116c <HAL_RCC_OscConfig+0x354>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2209      	movs	r2, #9
 8000ff4:	4393      	bics	r3, r2
 8000ff6:	0019      	movs	r1, r3
 8000ff8:	4b5c      	ldr	r3, [pc, #368]	; (800116c <HAL_RCC_OscConfig+0x354>)
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001000:	f7ff fcb2 	bl	8000968 <HAL_GetTick>
 8001004:	0003      	movs	r3, r0
 8001006:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001008:	e008      	b.n	800101c <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800100a:	f7ff fcad 	bl	8000968 <HAL_GetTick>
 800100e:	0002      	movs	r2, r0
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	2b02      	cmp	r3, #2
 8001016:	d901      	bls.n	800101c <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001018:	2303      	movs	r3, #3
 800101a:	e2b6      	b.n	800158a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800101c:	4b53      	ldr	r3, [pc, #332]	; (800116c <HAL_RCC_OscConfig+0x354>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2204      	movs	r2, #4
 8001022:	4013      	ands	r3, r2
 8001024:	d0f1      	beq.n	800100a <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001026:	4b51      	ldr	r3, [pc, #324]	; (800116c <HAL_RCC_OscConfig+0x354>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	4a53      	ldr	r2, [pc, #332]	; (8001178 <HAL_RCC_OscConfig+0x360>)
 800102c:	4013      	ands	r3, r2
 800102e:	0019      	movs	r1, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	021a      	lsls	r2, r3, #8
 8001036:	4b4d      	ldr	r3, [pc, #308]	; (800116c <HAL_RCC_OscConfig+0x354>)
 8001038:	430a      	orrs	r2, r1
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	e018      	b.n	8001070 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800103e:	4b4b      	ldr	r3, [pc, #300]	; (800116c <HAL_RCC_OscConfig+0x354>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	4b4a      	ldr	r3, [pc, #296]	; (800116c <HAL_RCC_OscConfig+0x354>)
 8001044:	2101      	movs	r1, #1
 8001046:	438a      	bics	r2, r1
 8001048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104a:	f7ff fc8d 	bl	8000968 <HAL_GetTick>
 800104e:	0003      	movs	r3, r0
 8001050:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001054:	f7ff fc88 	bl	8000968 <HAL_GetTick>
 8001058:	0002      	movs	r2, r0
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e291      	b.n	800158a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001066:	4b41      	ldr	r3, [pc, #260]	; (800116c <HAL_RCC_OscConfig+0x354>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2204      	movs	r2, #4
 800106c:	4013      	ands	r3, r2
 800106e:	d1f1      	bne.n	8001054 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2210      	movs	r2, #16
 8001076:	4013      	ands	r3, r2
 8001078:	d100      	bne.n	800107c <HAL_RCC_OscConfig+0x264>
 800107a:	e0a1      	b.n	80011c0 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800107c:	6a3b      	ldr	r3, [r7, #32]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d140      	bne.n	8001104 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001082:	4b3a      	ldr	r3, [pc, #232]	; (800116c <HAL_RCC_OscConfig+0x354>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	2380      	movs	r3, #128	; 0x80
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4013      	ands	r3, r2
 800108c:	d005      	beq.n	800109a <HAL_RCC_OscConfig+0x282>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e277      	b.n	800158a <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800109a:	4b34      	ldr	r3, [pc, #208]	; (800116c <HAL_RCC_OscConfig+0x354>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	4a3a      	ldr	r2, [pc, #232]	; (8001188 <HAL_RCC_OscConfig+0x370>)
 80010a0:	4013      	ands	r3, r2
 80010a2:	0019      	movs	r1, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010a8:	4b30      	ldr	r3, [pc, #192]	; (800116c <HAL_RCC_OscConfig+0x354>)
 80010aa:	430a      	orrs	r2, r1
 80010ac:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010ae:	4b2f      	ldr	r3, [pc, #188]	; (800116c <HAL_RCC_OscConfig+0x354>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	021b      	lsls	r3, r3, #8
 80010b4:	0a19      	lsrs	r1, r3, #8
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a1b      	ldr	r3, [r3, #32]
 80010ba:	061a      	lsls	r2, r3, #24
 80010bc:	4b2b      	ldr	r3, [pc, #172]	; (800116c <HAL_RCC_OscConfig+0x354>)
 80010be:	430a      	orrs	r2, r1
 80010c0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c6:	0b5b      	lsrs	r3, r3, #13
 80010c8:	3301      	adds	r3, #1
 80010ca:	2280      	movs	r2, #128	; 0x80
 80010cc:	0212      	lsls	r2, r2, #8
 80010ce:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80010d0:	4b26      	ldr	r3, [pc, #152]	; (800116c <HAL_RCC_OscConfig+0x354>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	091b      	lsrs	r3, r3, #4
 80010d6:	210f      	movs	r1, #15
 80010d8:	400b      	ands	r3, r1
 80010da:	4928      	ldr	r1, [pc, #160]	; (800117c <HAL_RCC_OscConfig+0x364>)
 80010dc:	5ccb      	ldrb	r3, [r1, r3]
 80010de:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80010e0:	4b27      	ldr	r3, [pc, #156]	; (8001180 <HAL_RCC_OscConfig+0x368>)
 80010e2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80010e4:	4b27      	ldr	r3, [pc, #156]	; (8001184 <HAL_RCC_OscConfig+0x36c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2513      	movs	r5, #19
 80010ea:	197c      	adds	r4, r7, r5
 80010ec:	0018      	movs	r0, r3
 80010ee:	f7ff fbf5 	bl	80008dc <HAL_InitTick>
 80010f2:	0003      	movs	r3, r0
 80010f4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80010f6:	197b      	adds	r3, r7, r5
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d060      	beq.n	80011c0 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80010fe:	197b      	adds	r3, r7, r5
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	e242      	b.n	800158a <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	69db      	ldr	r3, [r3, #28]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d03f      	beq.n	800118c <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800110c:	4b17      	ldr	r3, [pc, #92]	; (800116c <HAL_RCC_OscConfig+0x354>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b16      	ldr	r3, [pc, #88]	; (800116c <HAL_RCC_OscConfig+0x354>)
 8001112:	2180      	movs	r1, #128	; 0x80
 8001114:	0049      	lsls	r1, r1, #1
 8001116:	430a      	orrs	r2, r1
 8001118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111a:	f7ff fc25 	bl	8000968 <HAL_GetTick>
 800111e:	0003      	movs	r3, r0
 8001120:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001122:	e008      	b.n	8001136 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001124:	f7ff fc20 	bl	8000968 <HAL_GetTick>
 8001128:	0002      	movs	r2, r0
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b02      	cmp	r3, #2
 8001130:	d901      	bls.n	8001136 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e229      	b.n	800158a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001136:	4b0d      	ldr	r3, [pc, #52]	; (800116c <HAL_RCC_OscConfig+0x354>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	2380      	movs	r3, #128	; 0x80
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4013      	ands	r3, r2
 8001140:	d0f0      	beq.n	8001124 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_RCC_OscConfig+0x354>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	4a10      	ldr	r2, [pc, #64]	; (8001188 <HAL_RCC_OscConfig+0x370>)
 8001148:	4013      	ands	r3, r2
 800114a:	0019      	movs	r1, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_RCC_OscConfig+0x354>)
 8001152:	430a      	orrs	r2, r1
 8001154:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001156:	4b05      	ldr	r3, [pc, #20]	; (800116c <HAL_RCC_OscConfig+0x354>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	0a19      	lsrs	r1, r3, #8
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a1b      	ldr	r3, [r3, #32]
 8001162:	061a      	lsls	r2, r3, #24
 8001164:	4b01      	ldr	r3, [pc, #4]	; (800116c <HAL_RCC_OscConfig+0x354>)
 8001166:	430a      	orrs	r2, r1
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	e029      	b.n	80011c0 <HAL_RCC_OscConfig+0x3a8>
 800116c:	40021000 	.word	0x40021000
 8001170:	fffeffff 	.word	0xfffeffff
 8001174:	fffbffff 	.word	0xfffbffff
 8001178:	ffffe0ff 	.word	0xffffe0ff
 800117c:	08003a8c 	.word	0x08003a8c
 8001180:	20000038 	.word	0x20000038
 8001184:	2000003c 	.word	0x2000003c
 8001188:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800118c:	4bbd      	ldr	r3, [pc, #756]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4bbc      	ldr	r3, [pc, #752]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 8001192:	49bd      	ldr	r1, [pc, #756]	; (8001488 <HAL_RCC_OscConfig+0x670>)
 8001194:	400a      	ands	r2, r1
 8001196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001198:	f7ff fbe6 	bl	8000968 <HAL_GetTick>
 800119c:	0003      	movs	r3, r0
 800119e:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80011a0:	e008      	b.n	80011b4 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011a2:	f7ff fbe1 	bl	8000968 <HAL_GetTick>
 80011a6:	0002      	movs	r2, r0
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d901      	bls.n	80011b4 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80011b0:	2303      	movs	r3, #3
 80011b2:	e1ea      	b.n	800158a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80011b4:	4bb3      	ldr	r3, [pc, #716]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	2380      	movs	r3, #128	; 0x80
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4013      	ands	r3, r2
 80011be:	d1f0      	bne.n	80011a2 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2208      	movs	r2, #8
 80011c6:	4013      	ands	r3, r2
 80011c8:	d036      	beq.n	8001238 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d019      	beq.n	8001206 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011d2:	4bac      	ldr	r3, [pc, #688]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 80011d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011d6:	4bab      	ldr	r3, [pc, #684]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 80011d8:	2101      	movs	r1, #1
 80011da:	430a      	orrs	r2, r1
 80011dc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011de:	f7ff fbc3 	bl	8000968 <HAL_GetTick>
 80011e2:	0003      	movs	r3, r0
 80011e4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011e8:	f7ff fbbe 	bl	8000968 <HAL_GetTick>
 80011ec:	0002      	movs	r2, r0
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e1c7      	b.n	800158a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011fa:	4ba2      	ldr	r3, [pc, #648]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 80011fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011fe:	2202      	movs	r2, #2
 8001200:	4013      	ands	r3, r2
 8001202:	d0f1      	beq.n	80011e8 <HAL_RCC_OscConfig+0x3d0>
 8001204:	e018      	b.n	8001238 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001206:	4b9f      	ldr	r3, [pc, #636]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 8001208:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800120a:	4b9e      	ldr	r3, [pc, #632]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 800120c:	2101      	movs	r1, #1
 800120e:	438a      	bics	r2, r1
 8001210:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001212:	f7ff fba9 	bl	8000968 <HAL_GetTick>
 8001216:	0003      	movs	r3, r0
 8001218:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800121c:	f7ff fba4 	bl	8000968 <HAL_GetTick>
 8001220:	0002      	movs	r2, r0
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e1ad      	b.n	800158a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800122e:	4b95      	ldr	r3, [pc, #596]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 8001230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001232:	2202      	movs	r2, #2
 8001234:	4013      	ands	r3, r2
 8001236:	d1f1      	bne.n	800121c <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2204      	movs	r2, #4
 800123e:	4013      	ands	r3, r2
 8001240:	d100      	bne.n	8001244 <HAL_RCC_OscConfig+0x42c>
 8001242:	e0ae      	b.n	80013a2 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001244:	2027      	movs	r0, #39	; 0x27
 8001246:	183b      	adds	r3, r7, r0
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800124c:	4b8d      	ldr	r3, [pc, #564]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 800124e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	055b      	lsls	r3, r3, #21
 8001254:	4013      	ands	r3, r2
 8001256:	d109      	bne.n	800126c <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001258:	4b8a      	ldr	r3, [pc, #552]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 800125a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800125c:	4b89      	ldr	r3, [pc, #548]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 800125e:	2180      	movs	r1, #128	; 0x80
 8001260:	0549      	lsls	r1, r1, #21
 8001262:	430a      	orrs	r2, r1
 8001264:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001266:	183b      	adds	r3, r7, r0
 8001268:	2201      	movs	r2, #1
 800126a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800126c:	4b87      	ldr	r3, [pc, #540]	; (800148c <HAL_RCC_OscConfig+0x674>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	4013      	ands	r3, r2
 8001276:	d11a      	bne.n	80012ae <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001278:	4b84      	ldr	r3, [pc, #528]	; (800148c <HAL_RCC_OscConfig+0x674>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4b83      	ldr	r3, [pc, #524]	; (800148c <HAL_RCC_OscConfig+0x674>)
 800127e:	2180      	movs	r1, #128	; 0x80
 8001280:	0049      	lsls	r1, r1, #1
 8001282:	430a      	orrs	r2, r1
 8001284:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001286:	f7ff fb6f 	bl	8000968 <HAL_GetTick>
 800128a:	0003      	movs	r3, r0
 800128c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001290:	f7ff fb6a 	bl	8000968 <HAL_GetTick>
 8001294:	0002      	movs	r2, r0
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b64      	cmp	r3, #100	; 0x64
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e173      	b.n	800158a <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a2:	4b7a      	ldr	r3, [pc, #488]	; (800148c <HAL_RCC_OscConfig+0x674>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	2380      	movs	r3, #128	; 0x80
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	4013      	ands	r3, r2
 80012ac:	d0f0      	beq.n	8001290 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	2380      	movs	r3, #128	; 0x80
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d107      	bne.n	80012ca <HAL_RCC_OscConfig+0x4b2>
 80012ba:	4b72      	ldr	r3, [pc, #456]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 80012bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012be:	4b71      	ldr	r3, [pc, #452]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 80012c0:	2180      	movs	r1, #128	; 0x80
 80012c2:	0049      	lsls	r1, r1, #1
 80012c4:	430a      	orrs	r2, r1
 80012c6:	651a      	str	r2, [r3, #80]	; 0x50
 80012c8:	e031      	b.n	800132e <HAL_RCC_OscConfig+0x516>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10c      	bne.n	80012ec <HAL_RCC_OscConfig+0x4d4>
 80012d2:	4b6c      	ldr	r3, [pc, #432]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 80012d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012d6:	4b6b      	ldr	r3, [pc, #428]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 80012d8:	496b      	ldr	r1, [pc, #428]	; (8001488 <HAL_RCC_OscConfig+0x670>)
 80012da:	400a      	ands	r2, r1
 80012dc:	651a      	str	r2, [r3, #80]	; 0x50
 80012de:	4b69      	ldr	r3, [pc, #420]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 80012e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012e2:	4b68      	ldr	r3, [pc, #416]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 80012e4:	496a      	ldr	r1, [pc, #424]	; (8001490 <HAL_RCC_OscConfig+0x678>)
 80012e6:	400a      	ands	r2, r1
 80012e8:	651a      	str	r2, [r3, #80]	; 0x50
 80012ea:	e020      	b.n	800132e <HAL_RCC_OscConfig+0x516>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	23a0      	movs	r3, #160	; 0xa0
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d10e      	bne.n	8001316 <HAL_RCC_OscConfig+0x4fe>
 80012f8:	4b62      	ldr	r3, [pc, #392]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 80012fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012fc:	4b61      	ldr	r3, [pc, #388]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 80012fe:	2180      	movs	r1, #128	; 0x80
 8001300:	00c9      	lsls	r1, r1, #3
 8001302:	430a      	orrs	r2, r1
 8001304:	651a      	str	r2, [r3, #80]	; 0x50
 8001306:	4b5f      	ldr	r3, [pc, #380]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 8001308:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800130a:	4b5e      	ldr	r3, [pc, #376]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 800130c:	2180      	movs	r1, #128	; 0x80
 800130e:	0049      	lsls	r1, r1, #1
 8001310:	430a      	orrs	r2, r1
 8001312:	651a      	str	r2, [r3, #80]	; 0x50
 8001314:	e00b      	b.n	800132e <HAL_RCC_OscConfig+0x516>
 8001316:	4b5b      	ldr	r3, [pc, #364]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 8001318:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800131a:	4b5a      	ldr	r3, [pc, #360]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 800131c:	495a      	ldr	r1, [pc, #360]	; (8001488 <HAL_RCC_OscConfig+0x670>)
 800131e:	400a      	ands	r2, r1
 8001320:	651a      	str	r2, [r3, #80]	; 0x50
 8001322:	4b58      	ldr	r3, [pc, #352]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 8001324:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001326:	4b57      	ldr	r3, [pc, #348]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 8001328:	4959      	ldr	r1, [pc, #356]	; (8001490 <HAL_RCC_OscConfig+0x678>)
 800132a:	400a      	ands	r2, r1
 800132c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d015      	beq.n	8001362 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001336:	f7ff fb17 	bl	8000968 <HAL_GetTick>
 800133a:	0003      	movs	r3, r0
 800133c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800133e:	e009      	b.n	8001354 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001340:	f7ff fb12 	bl	8000968 <HAL_GetTick>
 8001344:	0002      	movs	r2, r0
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	4a52      	ldr	r2, [pc, #328]	; (8001494 <HAL_RCC_OscConfig+0x67c>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e11a      	b.n	800158a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001354:	4b4b      	ldr	r3, [pc, #300]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 8001356:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4013      	ands	r3, r2
 800135e:	d0ef      	beq.n	8001340 <HAL_RCC_OscConfig+0x528>
 8001360:	e014      	b.n	800138c <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001362:	f7ff fb01 	bl	8000968 <HAL_GetTick>
 8001366:	0003      	movs	r3, r0
 8001368:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800136a:	e009      	b.n	8001380 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800136c:	f7ff fafc 	bl	8000968 <HAL_GetTick>
 8001370:	0002      	movs	r2, r0
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	4a47      	ldr	r2, [pc, #284]	; (8001494 <HAL_RCC_OscConfig+0x67c>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e104      	b.n	800158a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001380:	4b40      	ldr	r3, [pc, #256]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 8001382:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4013      	ands	r3, r2
 800138a:	d1ef      	bne.n	800136c <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800138c:	2327      	movs	r3, #39	; 0x27
 800138e:	18fb      	adds	r3, r7, r3
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d105      	bne.n	80013a2 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001396:	4b3b      	ldr	r3, [pc, #236]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 8001398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800139a:	4b3a      	ldr	r3, [pc, #232]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 800139c:	493e      	ldr	r1, [pc, #248]	; (8001498 <HAL_RCC_OscConfig+0x680>)
 800139e:	400a      	ands	r2, r1
 80013a0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2220      	movs	r2, #32
 80013a8:	4013      	ands	r3, r2
 80013aa:	d049      	beq.n	8001440 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d026      	beq.n	8001402 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80013b4:	4b33      	ldr	r3, [pc, #204]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	4b32      	ldr	r3, [pc, #200]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 80013ba:	2101      	movs	r1, #1
 80013bc:	430a      	orrs	r2, r1
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	4b30      	ldr	r3, [pc, #192]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 80013c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013c4:	4b2f      	ldr	r3, [pc, #188]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 80013c6:	2101      	movs	r1, #1
 80013c8:	430a      	orrs	r2, r1
 80013ca:	635a      	str	r2, [r3, #52]	; 0x34
 80013cc:	4b33      	ldr	r3, [pc, #204]	; (800149c <HAL_RCC_OscConfig+0x684>)
 80013ce:	6a1a      	ldr	r2, [r3, #32]
 80013d0:	4b32      	ldr	r3, [pc, #200]	; (800149c <HAL_RCC_OscConfig+0x684>)
 80013d2:	2180      	movs	r1, #128	; 0x80
 80013d4:	0189      	lsls	r1, r1, #6
 80013d6:	430a      	orrs	r2, r1
 80013d8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013da:	f7ff fac5 	bl	8000968 <HAL_GetTick>
 80013de:	0003      	movs	r3, r0
 80013e0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013e4:	f7ff fac0 	bl	8000968 <HAL_GetTick>
 80013e8:	0002      	movs	r2, r0
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e0c9      	b.n	800158a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80013f6:	4b23      	ldr	r3, [pc, #140]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	2202      	movs	r2, #2
 80013fc:	4013      	ands	r3, r2
 80013fe:	d0f1      	beq.n	80013e4 <HAL_RCC_OscConfig+0x5cc>
 8001400:	e01e      	b.n	8001440 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001402:	4b20      	ldr	r3, [pc, #128]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 8001408:	2101      	movs	r1, #1
 800140a:	438a      	bics	r2, r1
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	4b23      	ldr	r3, [pc, #140]	; (800149c <HAL_RCC_OscConfig+0x684>)
 8001410:	6a1a      	ldr	r2, [r3, #32]
 8001412:	4b22      	ldr	r3, [pc, #136]	; (800149c <HAL_RCC_OscConfig+0x684>)
 8001414:	4922      	ldr	r1, [pc, #136]	; (80014a0 <HAL_RCC_OscConfig+0x688>)
 8001416:	400a      	ands	r2, r1
 8001418:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141a:	f7ff faa5 	bl	8000968 <HAL_GetTick>
 800141e:	0003      	movs	r3, r0
 8001420:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001424:	f7ff faa0 	bl	8000968 <HAL_GetTick>
 8001428:	0002      	movs	r2, r0
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e0a9      	b.n	800158a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001436:	4b13      	ldr	r3, [pc, #76]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	2202      	movs	r2, #2
 800143c:	4013      	ands	r3, r2
 800143e:	d1f1      	bne.n	8001424 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001444:	2b00      	cmp	r3, #0
 8001446:	d100      	bne.n	800144a <HAL_RCC_OscConfig+0x632>
 8001448:	e09e      	b.n	8001588 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800144a:	6a3b      	ldr	r3, [r7, #32]
 800144c:	2b0c      	cmp	r3, #12
 800144e:	d100      	bne.n	8001452 <HAL_RCC_OscConfig+0x63a>
 8001450:	e077      	b.n	8001542 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001456:	2b02      	cmp	r3, #2
 8001458:	d158      	bne.n	800150c <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800145a:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <HAL_RCC_OscConfig+0x66c>)
 8001460:	4910      	ldr	r1, [pc, #64]	; (80014a4 <HAL_RCC_OscConfig+0x68c>)
 8001462:	400a      	ands	r2, r1
 8001464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001466:	f7ff fa7f 	bl	8000968 <HAL_GetTick>
 800146a:	0003      	movs	r3, r0
 800146c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800146e:	e01b      	b.n	80014a8 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001470:	f7ff fa7a 	bl	8000968 <HAL_GetTick>
 8001474:	0002      	movs	r2, r0
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d914      	bls.n	80014a8 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e083      	b.n	800158a <HAL_RCC_OscConfig+0x772>
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	40021000 	.word	0x40021000
 8001488:	fffffeff 	.word	0xfffffeff
 800148c:	40007000 	.word	0x40007000
 8001490:	fffffbff 	.word	0xfffffbff
 8001494:	00001388 	.word	0x00001388
 8001498:	efffffff 	.word	0xefffffff
 800149c:	40010000 	.word	0x40010000
 80014a0:	ffffdfff 	.word	0xffffdfff
 80014a4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80014a8:	4b3a      	ldr	r3, [pc, #232]	; (8001594 <HAL_RCC_OscConfig+0x77c>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	049b      	lsls	r3, r3, #18
 80014b0:	4013      	ands	r3, r2
 80014b2:	d1dd      	bne.n	8001470 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014b4:	4b37      	ldr	r3, [pc, #220]	; (8001594 <HAL_RCC_OscConfig+0x77c>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	4a37      	ldr	r2, [pc, #220]	; (8001598 <HAL_RCC_OscConfig+0x780>)
 80014ba:	4013      	ands	r3, r2
 80014bc:	0019      	movs	r1, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	431a      	orrs	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014cc:	431a      	orrs	r2, r3
 80014ce:	4b31      	ldr	r3, [pc, #196]	; (8001594 <HAL_RCC_OscConfig+0x77c>)
 80014d0:	430a      	orrs	r2, r1
 80014d2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014d4:	4b2f      	ldr	r3, [pc, #188]	; (8001594 <HAL_RCC_OscConfig+0x77c>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b2e      	ldr	r3, [pc, #184]	; (8001594 <HAL_RCC_OscConfig+0x77c>)
 80014da:	2180      	movs	r1, #128	; 0x80
 80014dc:	0449      	lsls	r1, r1, #17
 80014de:	430a      	orrs	r2, r1
 80014e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e2:	f7ff fa41 	bl	8000968 <HAL_GetTick>
 80014e6:	0003      	movs	r3, r0
 80014e8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ec:	f7ff fa3c 	bl	8000968 <HAL_GetTick>
 80014f0:	0002      	movs	r2, r0
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e045      	b.n	800158a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80014fe:	4b25      	ldr	r3, [pc, #148]	; (8001594 <HAL_RCC_OscConfig+0x77c>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	2380      	movs	r3, #128	; 0x80
 8001504:	049b      	lsls	r3, r3, #18
 8001506:	4013      	ands	r3, r2
 8001508:	d0f0      	beq.n	80014ec <HAL_RCC_OscConfig+0x6d4>
 800150a:	e03d      	b.n	8001588 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800150c:	4b21      	ldr	r3, [pc, #132]	; (8001594 <HAL_RCC_OscConfig+0x77c>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b20      	ldr	r3, [pc, #128]	; (8001594 <HAL_RCC_OscConfig+0x77c>)
 8001512:	4922      	ldr	r1, [pc, #136]	; (800159c <HAL_RCC_OscConfig+0x784>)
 8001514:	400a      	ands	r2, r1
 8001516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001518:	f7ff fa26 	bl	8000968 <HAL_GetTick>
 800151c:	0003      	movs	r3, r0
 800151e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001522:	f7ff fa21 	bl	8000968 <HAL_GetTick>
 8001526:	0002      	movs	r2, r0
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e02a      	b.n	800158a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001534:	4b17      	ldr	r3, [pc, #92]	; (8001594 <HAL_RCC_OscConfig+0x77c>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	049b      	lsls	r3, r3, #18
 800153c:	4013      	ands	r3, r2
 800153e:	d1f0      	bne.n	8001522 <HAL_RCC_OscConfig+0x70a>
 8001540:	e022      	b.n	8001588 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001546:	2b01      	cmp	r3, #1
 8001548:	d101      	bne.n	800154e <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e01d      	b.n	800158a <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800154e:	4b11      	ldr	r3, [pc, #68]	; (8001594 <HAL_RCC_OscConfig+0x77c>)
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001554:	69fa      	ldr	r2, [r7, #28]
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	025b      	lsls	r3, r3, #9
 800155a:	401a      	ands	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001560:	429a      	cmp	r2, r3
 8001562:	d10f      	bne.n	8001584 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001564:	69fa      	ldr	r2, [r7, #28]
 8001566:	23f0      	movs	r3, #240	; 0xf0
 8001568:	039b      	lsls	r3, r3, #14
 800156a:	401a      	ands	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001570:	429a      	cmp	r2, r3
 8001572:	d107      	bne.n	8001584 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001574:	69fa      	ldr	r2, [r7, #28]
 8001576:	23c0      	movs	r3, #192	; 0xc0
 8001578:	041b      	lsls	r3, r3, #16
 800157a:	401a      	ands	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001580:	429a      	cmp	r2, r3
 8001582:	d001      	beq.n	8001588 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e000      	b.n	800158a <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	0018      	movs	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	b00a      	add	sp, #40	; 0x28
 8001590:	bdb0      	pop	{r4, r5, r7, pc}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	40021000 	.word	0x40021000
 8001598:	ff02ffff 	.word	0xff02ffff
 800159c:	feffffff 	.word	0xfeffffff

080015a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015a0:	b5b0      	push	{r4, r5, r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e128      	b.n	8001806 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015b4:	4b96      	ldr	r3, [pc, #600]	; (8001810 <HAL_RCC_ClockConfig+0x270>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2201      	movs	r2, #1
 80015ba:	4013      	ands	r3, r2
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d91e      	bls.n	8001600 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c2:	4b93      	ldr	r3, [pc, #588]	; (8001810 <HAL_RCC_ClockConfig+0x270>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2201      	movs	r2, #1
 80015c8:	4393      	bics	r3, r2
 80015ca:	0019      	movs	r1, r3
 80015cc:	4b90      	ldr	r3, [pc, #576]	; (8001810 <HAL_RCC_ClockConfig+0x270>)
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	430a      	orrs	r2, r1
 80015d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80015d4:	f7ff f9c8 	bl	8000968 <HAL_GetTick>
 80015d8:	0003      	movs	r3, r0
 80015da:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015dc:	e009      	b.n	80015f2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015de:	f7ff f9c3 	bl	8000968 <HAL_GetTick>
 80015e2:	0002      	movs	r2, r0
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	4a8a      	ldr	r2, [pc, #552]	; (8001814 <HAL_RCC_ClockConfig+0x274>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e109      	b.n	8001806 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015f2:	4b87      	ldr	r3, [pc, #540]	; (8001810 <HAL_RCC_ClockConfig+0x270>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2201      	movs	r2, #1
 80015f8:	4013      	ands	r3, r2
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d1ee      	bne.n	80015de <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2202      	movs	r2, #2
 8001606:	4013      	ands	r3, r2
 8001608:	d009      	beq.n	800161e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800160a:	4b83      	ldr	r3, [pc, #524]	; (8001818 <HAL_RCC_ClockConfig+0x278>)
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	22f0      	movs	r2, #240	; 0xf0
 8001610:	4393      	bics	r3, r2
 8001612:	0019      	movs	r1, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	4b7f      	ldr	r3, [pc, #508]	; (8001818 <HAL_RCC_ClockConfig+0x278>)
 800161a:	430a      	orrs	r2, r1
 800161c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2201      	movs	r2, #1
 8001624:	4013      	ands	r3, r2
 8001626:	d100      	bne.n	800162a <HAL_RCC_ClockConfig+0x8a>
 8001628:	e089      	b.n	800173e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b02      	cmp	r3, #2
 8001630:	d107      	bne.n	8001642 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001632:	4b79      	ldr	r3, [pc, #484]	; (8001818 <HAL_RCC_ClockConfig+0x278>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	2380      	movs	r3, #128	; 0x80
 8001638:	029b      	lsls	r3, r3, #10
 800163a:	4013      	ands	r3, r2
 800163c:	d120      	bne.n	8001680 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e0e1      	b.n	8001806 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b03      	cmp	r3, #3
 8001648:	d107      	bne.n	800165a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800164a:	4b73      	ldr	r3, [pc, #460]	; (8001818 <HAL_RCC_ClockConfig+0x278>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	2380      	movs	r3, #128	; 0x80
 8001650:	049b      	lsls	r3, r3, #18
 8001652:	4013      	ands	r3, r2
 8001654:	d114      	bne.n	8001680 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e0d5      	b.n	8001806 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d106      	bne.n	8001670 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001662:	4b6d      	ldr	r3, [pc, #436]	; (8001818 <HAL_RCC_ClockConfig+0x278>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2204      	movs	r2, #4
 8001668:	4013      	ands	r3, r2
 800166a:	d109      	bne.n	8001680 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e0ca      	b.n	8001806 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001670:	4b69      	ldr	r3, [pc, #420]	; (8001818 <HAL_RCC_ClockConfig+0x278>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4013      	ands	r3, r2
 800167a:	d101      	bne.n	8001680 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e0c2      	b.n	8001806 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001680:	4b65      	ldr	r3, [pc, #404]	; (8001818 <HAL_RCC_ClockConfig+0x278>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	2203      	movs	r2, #3
 8001686:	4393      	bics	r3, r2
 8001688:	0019      	movs	r1, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	4b62      	ldr	r3, [pc, #392]	; (8001818 <HAL_RCC_ClockConfig+0x278>)
 8001690:	430a      	orrs	r2, r1
 8001692:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001694:	f7ff f968 	bl	8000968 <HAL_GetTick>
 8001698:	0003      	movs	r3, r0
 800169a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d111      	bne.n	80016c8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016a4:	e009      	b.n	80016ba <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a6:	f7ff f95f 	bl	8000968 <HAL_GetTick>
 80016aa:	0002      	movs	r2, r0
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	4a58      	ldr	r2, [pc, #352]	; (8001814 <HAL_RCC_ClockConfig+0x274>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e0a5      	b.n	8001806 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016ba:	4b57      	ldr	r3, [pc, #348]	; (8001818 <HAL_RCC_ClockConfig+0x278>)
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	220c      	movs	r2, #12
 80016c0:	4013      	ands	r3, r2
 80016c2:	2b08      	cmp	r3, #8
 80016c4:	d1ef      	bne.n	80016a6 <HAL_RCC_ClockConfig+0x106>
 80016c6:	e03a      	b.n	800173e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	d111      	bne.n	80016f4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016d0:	e009      	b.n	80016e6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d2:	f7ff f949 	bl	8000968 <HAL_GetTick>
 80016d6:	0002      	movs	r2, r0
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	4a4d      	ldr	r2, [pc, #308]	; (8001814 <HAL_RCC_ClockConfig+0x274>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e08f      	b.n	8001806 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016e6:	4b4c      	ldr	r3, [pc, #304]	; (8001818 <HAL_RCC_ClockConfig+0x278>)
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	220c      	movs	r2, #12
 80016ec:	4013      	ands	r3, r2
 80016ee:	2b0c      	cmp	r3, #12
 80016f0:	d1ef      	bne.n	80016d2 <HAL_RCC_ClockConfig+0x132>
 80016f2:	e024      	b.n	800173e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d11b      	bne.n	8001734 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016fc:	e009      	b.n	8001712 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016fe:	f7ff f933 	bl	8000968 <HAL_GetTick>
 8001702:	0002      	movs	r2, r0
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	4a42      	ldr	r2, [pc, #264]	; (8001814 <HAL_RCC_ClockConfig+0x274>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e079      	b.n	8001806 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001712:	4b41      	ldr	r3, [pc, #260]	; (8001818 <HAL_RCC_ClockConfig+0x278>)
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	220c      	movs	r2, #12
 8001718:	4013      	ands	r3, r2
 800171a:	2b04      	cmp	r3, #4
 800171c:	d1ef      	bne.n	80016fe <HAL_RCC_ClockConfig+0x15e>
 800171e:	e00e      	b.n	800173e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001720:	f7ff f922 	bl	8000968 <HAL_GetTick>
 8001724:	0002      	movs	r2, r0
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	4a3a      	ldr	r2, [pc, #232]	; (8001814 <HAL_RCC_ClockConfig+0x274>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e068      	b.n	8001806 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001734:	4b38      	ldr	r3, [pc, #224]	; (8001818 <HAL_RCC_ClockConfig+0x278>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	220c      	movs	r2, #12
 800173a:	4013      	ands	r3, r2
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800173e:	4b34      	ldr	r3, [pc, #208]	; (8001810 <HAL_RCC_ClockConfig+0x270>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2201      	movs	r2, #1
 8001744:	4013      	ands	r3, r2
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d21e      	bcs.n	800178a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174c:	4b30      	ldr	r3, [pc, #192]	; (8001810 <HAL_RCC_ClockConfig+0x270>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2201      	movs	r2, #1
 8001752:	4393      	bics	r3, r2
 8001754:	0019      	movs	r1, r3
 8001756:	4b2e      	ldr	r3, [pc, #184]	; (8001810 <HAL_RCC_ClockConfig+0x270>)
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800175e:	f7ff f903 	bl	8000968 <HAL_GetTick>
 8001762:	0003      	movs	r3, r0
 8001764:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001766:	e009      	b.n	800177c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001768:	f7ff f8fe 	bl	8000968 <HAL_GetTick>
 800176c:	0002      	movs	r2, r0
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	4a28      	ldr	r2, [pc, #160]	; (8001814 <HAL_RCC_ClockConfig+0x274>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d901      	bls.n	800177c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e044      	b.n	8001806 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800177c:	4b24      	ldr	r3, [pc, #144]	; (8001810 <HAL_RCC_ClockConfig+0x270>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2201      	movs	r2, #1
 8001782:	4013      	ands	r3, r2
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d1ee      	bne.n	8001768 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2204      	movs	r2, #4
 8001790:	4013      	ands	r3, r2
 8001792:	d009      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001794:	4b20      	ldr	r3, [pc, #128]	; (8001818 <HAL_RCC_ClockConfig+0x278>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	4a20      	ldr	r2, [pc, #128]	; (800181c <HAL_RCC_ClockConfig+0x27c>)
 800179a:	4013      	ands	r3, r2
 800179c:	0019      	movs	r1, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68da      	ldr	r2, [r3, #12]
 80017a2:	4b1d      	ldr	r3, [pc, #116]	; (8001818 <HAL_RCC_ClockConfig+0x278>)
 80017a4:	430a      	orrs	r2, r1
 80017a6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2208      	movs	r2, #8
 80017ae:	4013      	ands	r3, r2
 80017b0:	d00a      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017b2:	4b19      	ldr	r3, [pc, #100]	; (8001818 <HAL_RCC_ClockConfig+0x278>)
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	4a1a      	ldr	r2, [pc, #104]	; (8001820 <HAL_RCC_ClockConfig+0x280>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	0019      	movs	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	00da      	lsls	r2, r3, #3
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <HAL_RCC_ClockConfig+0x278>)
 80017c4:	430a      	orrs	r2, r1
 80017c6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017c8:	f000 f832 	bl	8001830 <HAL_RCC_GetSysClockFreq>
 80017cc:	0001      	movs	r1, r0
 80017ce:	4b12      	ldr	r3, [pc, #72]	; (8001818 <HAL_RCC_ClockConfig+0x278>)
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	091b      	lsrs	r3, r3, #4
 80017d4:	220f      	movs	r2, #15
 80017d6:	4013      	ands	r3, r2
 80017d8:	4a12      	ldr	r2, [pc, #72]	; (8001824 <HAL_RCC_ClockConfig+0x284>)
 80017da:	5cd3      	ldrb	r3, [r2, r3]
 80017dc:	000a      	movs	r2, r1
 80017de:	40da      	lsrs	r2, r3
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <HAL_RCC_ClockConfig+0x288>)
 80017e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <HAL_RCC_ClockConfig+0x28c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	250b      	movs	r5, #11
 80017ea:	197c      	adds	r4, r7, r5
 80017ec:	0018      	movs	r0, r3
 80017ee:	f7ff f875 	bl	80008dc <HAL_InitTick>
 80017f2:	0003      	movs	r3, r0
 80017f4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80017f6:	197b      	adds	r3, r7, r5
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d002      	beq.n	8001804 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80017fe:	197b      	adds	r3, r7, r5
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	e000      	b.n	8001806 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	0018      	movs	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	b004      	add	sp, #16
 800180c:	bdb0      	pop	{r4, r5, r7, pc}
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	40022000 	.word	0x40022000
 8001814:	00001388 	.word	0x00001388
 8001818:	40021000 	.word	0x40021000
 800181c:	fffff8ff 	.word	0xfffff8ff
 8001820:	ffffc7ff 	.word	0xffffc7ff
 8001824:	08003a8c 	.word	0x08003a8c
 8001828:	20000038 	.word	0x20000038
 800182c:	2000003c 	.word	0x2000003c

08001830 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001830:	b5b0      	push	{r4, r5, r7, lr}
 8001832:	b08e      	sub	sp, #56	; 0x38
 8001834:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001836:	4b4c      	ldr	r3, [pc, #304]	; (8001968 <HAL_RCC_GetSysClockFreq+0x138>)
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800183c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800183e:	230c      	movs	r3, #12
 8001840:	4013      	ands	r3, r2
 8001842:	2b0c      	cmp	r3, #12
 8001844:	d014      	beq.n	8001870 <HAL_RCC_GetSysClockFreq+0x40>
 8001846:	d900      	bls.n	800184a <HAL_RCC_GetSysClockFreq+0x1a>
 8001848:	e07b      	b.n	8001942 <HAL_RCC_GetSysClockFreq+0x112>
 800184a:	2b04      	cmp	r3, #4
 800184c:	d002      	beq.n	8001854 <HAL_RCC_GetSysClockFreq+0x24>
 800184e:	2b08      	cmp	r3, #8
 8001850:	d00b      	beq.n	800186a <HAL_RCC_GetSysClockFreq+0x3a>
 8001852:	e076      	b.n	8001942 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001854:	4b44      	ldr	r3, [pc, #272]	; (8001968 <HAL_RCC_GetSysClockFreq+0x138>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2210      	movs	r2, #16
 800185a:	4013      	ands	r3, r2
 800185c:	d002      	beq.n	8001864 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800185e:	4b43      	ldr	r3, [pc, #268]	; (800196c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001860:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001862:	e07c      	b.n	800195e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001864:	4b42      	ldr	r3, [pc, #264]	; (8001970 <HAL_RCC_GetSysClockFreq+0x140>)
 8001866:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001868:	e079      	b.n	800195e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800186a:	4b42      	ldr	r3, [pc, #264]	; (8001974 <HAL_RCC_GetSysClockFreq+0x144>)
 800186c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800186e:	e076      	b.n	800195e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001872:	0c9a      	lsrs	r2, r3, #18
 8001874:	230f      	movs	r3, #15
 8001876:	401a      	ands	r2, r3
 8001878:	4b3f      	ldr	r3, [pc, #252]	; (8001978 <HAL_RCC_GetSysClockFreq+0x148>)
 800187a:	5c9b      	ldrb	r3, [r3, r2]
 800187c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800187e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001880:	0d9a      	lsrs	r2, r3, #22
 8001882:	2303      	movs	r3, #3
 8001884:	4013      	ands	r3, r2
 8001886:	3301      	adds	r3, #1
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800188a:	4b37      	ldr	r3, [pc, #220]	; (8001968 <HAL_RCC_GetSysClockFreq+0x138>)
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	2380      	movs	r3, #128	; 0x80
 8001890:	025b      	lsls	r3, r3, #9
 8001892:	4013      	ands	r3, r2
 8001894:	d01a      	beq.n	80018cc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001898:	61bb      	str	r3, [r7, #24]
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
 800189e:	4a35      	ldr	r2, [pc, #212]	; (8001974 <HAL_RCC_GetSysClockFreq+0x144>)
 80018a0:	2300      	movs	r3, #0
 80018a2:	69b8      	ldr	r0, [r7, #24]
 80018a4:	69f9      	ldr	r1, [r7, #28]
 80018a6:	f7fe fcdb 	bl	8000260 <__aeabi_lmul>
 80018aa:	0002      	movs	r2, r0
 80018ac:	000b      	movs	r3, r1
 80018ae:	0010      	movs	r0, r2
 80018b0:	0019      	movs	r1, r3
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f7fe fcaf 	bl	8000220 <__aeabi_uldivmod>
 80018c2:	0002      	movs	r2, r0
 80018c4:	000b      	movs	r3, r1
 80018c6:	0013      	movs	r3, r2
 80018c8:	637b      	str	r3, [r7, #52]	; 0x34
 80018ca:	e037      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80018cc:	4b26      	ldr	r3, [pc, #152]	; (8001968 <HAL_RCC_GetSysClockFreq+0x138>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2210      	movs	r2, #16
 80018d2:	4013      	ands	r3, r2
 80018d4:	d01a      	beq.n	800190c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80018d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	4a23      	ldr	r2, [pc, #140]	; (800196c <HAL_RCC_GetSysClockFreq+0x13c>)
 80018e0:	2300      	movs	r3, #0
 80018e2:	68b8      	ldr	r0, [r7, #8]
 80018e4:	68f9      	ldr	r1, [r7, #12]
 80018e6:	f7fe fcbb 	bl	8000260 <__aeabi_lmul>
 80018ea:	0002      	movs	r2, r0
 80018ec:	000b      	movs	r3, r1
 80018ee:	0010      	movs	r0, r2
 80018f0:	0019      	movs	r1, r3
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	603b      	str	r3, [r7, #0]
 80018f6:	2300      	movs	r3, #0
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f7fe fc8f 	bl	8000220 <__aeabi_uldivmod>
 8001902:	0002      	movs	r2, r0
 8001904:	000b      	movs	r3, r1
 8001906:	0013      	movs	r3, r2
 8001908:	637b      	str	r3, [r7, #52]	; 0x34
 800190a:	e017      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800190c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800190e:	0018      	movs	r0, r3
 8001910:	2300      	movs	r3, #0
 8001912:	0019      	movs	r1, r3
 8001914:	4a16      	ldr	r2, [pc, #88]	; (8001970 <HAL_RCC_GetSysClockFreq+0x140>)
 8001916:	2300      	movs	r3, #0
 8001918:	f7fe fca2 	bl	8000260 <__aeabi_lmul>
 800191c:	0002      	movs	r2, r0
 800191e:	000b      	movs	r3, r1
 8001920:	0010      	movs	r0, r2
 8001922:	0019      	movs	r1, r3
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	001c      	movs	r4, r3
 8001928:	2300      	movs	r3, #0
 800192a:	001d      	movs	r5, r3
 800192c:	0022      	movs	r2, r4
 800192e:	002b      	movs	r3, r5
 8001930:	f7fe fc76 	bl	8000220 <__aeabi_uldivmod>
 8001934:	0002      	movs	r2, r0
 8001936:	000b      	movs	r3, r1
 8001938:	0013      	movs	r3, r2
 800193a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800193c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800193e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001940:	e00d      	b.n	800195e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <HAL_RCC_GetSysClockFreq+0x138>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	0b5b      	lsrs	r3, r3, #13
 8001948:	2207      	movs	r2, #7
 800194a:	4013      	ands	r3, r2
 800194c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800194e:	6a3b      	ldr	r3, [r7, #32]
 8001950:	3301      	adds	r3, #1
 8001952:	2280      	movs	r2, #128	; 0x80
 8001954:	0212      	lsls	r2, r2, #8
 8001956:	409a      	lsls	r2, r3
 8001958:	0013      	movs	r3, r2
 800195a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800195c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800195e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001960:	0018      	movs	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	b00e      	add	sp, #56	; 0x38
 8001966:	bdb0      	pop	{r4, r5, r7, pc}
 8001968:	40021000 	.word	0x40021000
 800196c:	003d0900 	.word	0x003d0900
 8001970:	00f42400 	.word	0x00f42400
 8001974:	007a1200 	.word	0x007a1200
 8001978:	08003aa4 	.word	0x08003aa4

0800197c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001980:	4b02      	ldr	r3, [pc, #8]	; (800198c <HAL_RCC_GetHCLKFreq+0x10>)
 8001982:	681b      	ldr	r3, [r3, #0]
}
 8001984:	0018      	movs	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	20000038 	.word	0x20000038

08001990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001994:	f7ff fff2 	bl	800197c <HAL_RCC_GetHCLKFreq>
 8001998:	0001      	movs	r1, r0
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	0a1b      	lsrs	r3, r3, #8
 80019a0:	2207      	movs	r2, #7
 80019a2:	4013      	ands	r3, r2
 80019a4:	4a04      	ldr	r2, [pc, #16]	; (80019b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80019a6:	5cd3      	ldrb	r3, [r2, r3]
 80019a8:	40d9      	lsrs	r1, r3
 80019aa:	000b      	movs	r3, r1
}
 80019ac:	0018      	movs	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	40021000 	.word	0x40021000
 80019b8:	08003a9c 	.word	0x08003a9c

080019bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019c0:	f7ff ffdc 	bl	800197c <HAL_RCC_GetHCLKFreq>
 80019c4:	0001      	movs	r1, r0
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	0adb      	lsrs	r3, r3, #11
 80019cc:	2207      	movs	r2, #7
 80019ce:	4013      	ands	r3, r2
 80019d0:	4a04      	ldr	r2, [pc, #16]	; (80019e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80019d2:	5cd3      	ldrb	r3, [r2, r3]
 80019d4:	40d9      	lsrs	r1, r3
 80019d6:	000b      	movs	r3, r1
}
 80019d8:	0018      	movs	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	40021000 	.word	0x40021000
 80019e4:	08003a9c 	.word	0x08003a9c

080019e8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80019f0:	2317      	movs	r3, #23
 80019f2:	18fb      	adds	r3, r7, r3
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2220      	movs	r2, #32
 80019fe:	4013      	ands	r3, r2
 8001a00:	d106      	bne.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	2380      	movs	r3, #128	; 0x80
 8001a08:	011b      	lsls	r3, r3, #4
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d100      	bne.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001a0e:	e104      	b.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a10:	4bb1      	ldr	r3, [pc, #708]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001a12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a14:	2380      	movs	r3, #128	; 0x80
 8001a16:	055b      	lsls	r3, r3, #21
 8001a18:	4013      	ands	r3, r2
 8001a1a:	d10a      	bne.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a1c:	4bae      	ldr	r3, [pc, #696]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001a1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a20:	4bad      	ldr	r3, [pc, #692]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001a22:	2180      	movs	r1, #128	; 0x80
 8001a24:	0549      	lsls	r1, r1, #21
 8001a26:	430a      	orrs	r2, r1
 8001a28:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001a2a:	2317      	movs	r3, #23
 8001a2c:	18fb      	adds	r3, r7, r3
 8001a2e:	2201      	movs	r2, #1
 8001a30:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a32:	4baa      	ldr	r3, [pc, #680]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	2380      	movs	r3, #128	; 0x80
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d11a      	bne.n	8001a74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a3e:	4ba7      	ldr	r3, [pc, #668]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	4ba6      	ldr	r3, [pc, #664]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001a44:	2180      	movs	r1, #128	; 0x80
 8001a46:	0049      	lsls	r1, r1, #1
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a4c:	f7fe ff8c 	bl	8000968 <HAL_GetTick>
 8001a50:	0003      	movs	r3, r0
 8001a52:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a54:	e008      	b.n	8001a68 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a56:	f7fe ff87 	bl	8000968 <HAL_GetTick>
 8001a5a:	0002      	movs	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b64      	cmp	r3, #100	; 0x64
 8001a62:	d901      	bls.n	8001a68 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e133      	b.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a68:	4b9c      	ldr	r3, [pc, #624]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	2380      	movs	r3, #128	; 0x80
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	4013      	ands	r3, r2
 8001a72:	d0f0      	beq.n	8001a56 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001a74:	4b98      	ldr	r3, [pc, #608]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	23c0      	movs	r3, #192	; 0xc0
 8001a7a:	039b      	lsls	r3, r3, #14
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	23c0      	movs	r3, #192	; 0xc0
 8001a86:	039b      	lsls	r3, r3, #14
 8001a88:	4013      	ands	r3, r2
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d107      	bne.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	23c0      	movs	r3, #192	; 0xc0
 8001a96:	039b      	lsls	r3, r3, #14
 8001a98:	4013      	ands	r3, r2
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d013      	beq.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	23c0      	movs	r3, #192	; 0xc0
 8001aa6:	029b      	lsls	r3, r3, #10
 8001aa8:	401a      	ands	r2, r3
 8001aaa:	23c0      	movs	r3, #192	; 0xc0
 8001aac:	029b      	lsls	r3, r3, #10
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d10a      	bne.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001ab2:	4b89      	ldr	r3, [pc, #548]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	2380      	movs	r3, #128	; 0x80
 8001ab8:	029b      	lsls	r3, r3, #10
 8001aba:	401a      	ands	r2, r3
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	029b      	lsls	r3, r3, #10
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d101      	bne.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e103      	b.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001ac8:	4b83      	ldr	r3, [pc, #524]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001aca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001acc:	23c0      	movs	r3, #192	; 0xc0
 8001ace:	029b      	lsls	r3, r3, #10
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d049      	beq.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	23c0      	movs	r3, #192	; 0xc0
 8001ae0:	029b      	lsls	r3, r3, #10
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d004      	beq.n	8001af4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2220      	movs	r2, #32
 8001af0:	4013      	ands	r3, r2
 8001af2:	d10d      	bne.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	23c0      	movs	r3, #192	; 0xc0
 8001afa:	029b      	lsls	r3, r3, #10
 8001afc:	4013      	ands	r3, r2
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d034      	beq.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	2380      	movs	r3, #128	; 0x80
 8001b0a:	011b      	lsls	r3, r3, #4
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d02e      	beq.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001b10:	4b71      	ldr	r3, [pc, #452]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b14:	4a72      	ldr	r2, [pc, #456]	; (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001b16:	4013      	ands	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b1a:	4b6f      	ldr	r3, [pc, #444]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b1e:	4b6e      	ldr	r3, [pc, #440]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b20:	2180      	movs	r1, #128	; 0x80
 8001b22:	0309      	lsls	r1, r1, #12
 8001b24:	430a      	orrs	r2, r1
 8001b26:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b28:	4b6b      	ldr	r3, [pc, #428]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b2c:	4b6a      	ldr	r3, [pc, #424]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b2e:	496d      	ldr	r1, [pc, #436]	; (8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001b30:	400a      	ands	r2, r1
 8001b32:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001b34:	4b68      	ldr	r3, [pc, #416]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	2380      	movs	r3, #128	; 0x80
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	4013      	ands	r3, r2
 8001b42:	d014      	beq.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b44:	f7fe ff10 	bl	8000968 <HAL_GetTick>
 8001b48:	0003      	movs	r3, r0
 8001b4a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b4c:	e009      	b.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b4e:	f7fe ff0b 	bl	8000968 <HAL_GetTick>
 8001b52:	0002      	movs	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	4a63      	ldr	r2, [pc, #396]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e0b6      	b.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b62:	4b5d      	ldr	r3, [pc, #372]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b66:	2380      	movs	r3, #128	; 0x80
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d0ef      	beq.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	2380      	movs	r3, #128	; 0x80
 8001b74:	011b      	lsls	r3, r3, #4
 8001b76:	4013      	ands	r3, r2
 8001b78:	d01f      	beq.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	23c0      	movs	r3, #192	; 0xc0
 8001b80:	029b      	lsls	r3, r3, #10
 8001b82:	401a      	ands	r2, r3
 8001b84:	23c0      	movs	r3, #192	; 0xc0
 8001b86:	029b      	lsls	r3, r3, #10
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d10c      	bne.n	8001ba6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8001b8c:	4b52      	ldr	r3, [pc, #328]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a56      	ldr	r2, [pc, #344]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	0019      	movs	r1, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	23c0      	movs	r3, #192	; 0xc0
 8001b9c:	039b      	lsls	r3, r3, #14
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	4b4d      	ldr	r3, [pc, #308]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	4b4c      	ldr	r3, [pc, #304]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ba8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	23c0      	movs	r3, #192	; 0xc0
 8001bb0:	029b      	lsls	r3, r3, #10
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	4b48      	ldr	r3, [pc, #288]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d01f      	beq.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	23c0      	movs	r3, #192	; 0xc0
 8001bca:	029b      	lsls	r3, r3, #10
 8001bcc:	401a      	ands	r2, r3
 8001bce:	23c0      	movs	r3, #192	; 0xc0
 8001bd0:	029b      	lsls	r3, r3, #10
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d10c      	bne.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001bd6:	4b40      	ldr	r3, [pc, #256]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a44      	ldr	r2, [pc, #272]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001bdc:	4013      	ands	r3, r2
 8001bde:	0019      	movs	r1, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	23c0      	movs	r3, #192	; 0xc0
 8001be6:	039b      	lsls	r3, r3, #14
 8001be8:	401a      	ands	r2, r3
 8001bea:	4b3b      	ldr	r3, [pc, #236]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bec:	430a      	orrs	r2, r1
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	4b39      	ldr	r3, [pc, #228]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bf2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	23c0      	movs	r3, #192	; 0xc0
 8001bfa:	029b      	lsls	r3, r3, #10
 8001bfc:	401a      	ands	r2, r3
 8001bfe:	4b36      	ldr	r3, [pc, #216]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c00:	430a      	orrs	r2, r1
 8001c02:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c04:	2317      	movs	r3, #23
 8001c06:	18fb      	adds	r3, r7, r3
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d105      	bne.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c0e:	4b32      	ldr	r3, [pc, #200]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c12:	4b31      	ldr	r3, [pc, #196]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c14:	4936      	ldr	r1, [pc, #216]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001c16:	400a      	ands	r2, r1
 8001c18:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	4013      	ands	r3, r2
 8001c22:	d009      	beq.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c24:	4b2c      	ldr	r3, [pc, #176]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c28:	2203      	movs	r2, #3
 8001c2a:	4393      	bics	r3, r2
 8001c2c:	0019      	movs	r1, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68da      	ldr	r2, [r3, #12]
 8001c32:	4b29      	ldr	r3, [pc, #164]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c34:	430a      	orrs	r2, r1
 8001c36:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d009      	beq.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c42:	4b25      	ldr	r3, [pc, #148]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c46:	220c      	movs	r2, #12
 8001c48:	4393      	bics	r3, r2
 8001c4a:	0019      	movs	r1, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691a      	ldr	r2, [r3, #16]
 8001c50:	4b21      	ldr	r3, [pc, #132]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c52:	430a      	orrs	r2, r1
 8001c54:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d009      	beq.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001c60:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c64:	4a23      	ldr	r2, [pc, #140]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8001c66:	4013      	ands	r3, r2
 8001c68:	0019      	movs	r1, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695a      	ldr	r2, [r3, #20]
 8001c6e:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c70:	430a      	orrs	r2, r1
 8001c72:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2208      	movs	r2, #8
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d009      	beq.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c7e:	4b16      	ldr	r3, [pc, #88]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c82:	4a1d      	ldr	r2, [pc, #116]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001c84:	4013      	ands	r3, r2
 8001c86:	0019      	movs	r1, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	699a      	ldr	r2, [r3, #24]
 8001c8c:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2240      	movs	r2, #64	; 0x40
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d009      	beq.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca0:	4a16      	ldr	r2, [pc, #88]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	0019      	movs	r1, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a1a      	ldr	r2, [r3, #32]
 8001caa:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cac:	430a      	orrs	r2, r1
 8001cae:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2280      	movs	r2, #128	; 0x80
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d009      	beq.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001cba:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbe:	4a10      	ldr	r2, [pc, #64]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	0019      	movs	r1, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69da      	ldr	r2, [r3, #28]
 8001cc8:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	b006      	add	sp, #24
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40007000 	.word	0x40007000
 8001ce0:	fffcffff 	.word	0xfffcffff
 8001ce4:	fff7ffff 	.word	0xfff7ffff
 8001ce8:	00001388 	.word	0x00001388
 8001cec:	ffcfffff 	.word	0xffcfffff
 8001cf0:	efffffff 	.word	0xefffffff
 8001cf4:	fffff3ff 	.word	0xfffff3ff
 8001cf8:	ffffcfff 	.word	0xffffcfff
 8001cfc:	fbffffff 	.word	0xfbffffff
 8001d00:	fff3ffff 	.word	0xfff3ffff

08001d04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e044      	b.n	8001da0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d107      	bne.n	8001d2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2278      	movs	r2, #120	; 0x78
 8001d22:	2100      	movs	r1, #0
 8001d24:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	0018      	movs	r0, r3
 8001d2a:	f7fe fd2f 	bl	800078c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2224      	movs	r2, #36	; 0x24
 8001d32:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2101      	movs	r1, #1
 8001d40:	438a      	bics	r2, r1
 8001d42:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	0018      	movs	r0, r3
 8001d48:	f000 f8d0 	bl	8001eec <UART_SetConfig>
 8001d4c:	0003      	movs	r3, r0
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d101      	bne.n	8001d56 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e024      	b.n	8001da0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	0018      	movs	r0, r3
 8001d62:	f000 fb47 	bl	80023f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	490d      	ldr	r1, [pc, #52]	; (8001da8 <HAL_UART_Init+0xa4>)
 8001d72:	400a      	ands	r2, r1
 8001d74:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	212a      	movs	r1, #42	; 0x2a
 8001d82:	438a      	bics	r2, r1
 8001d84:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2101      	movs	r1, #1
 8001d92:	430a      	orrs	r2, r1
 8001d94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f000 fbdf 	bl	800255c <UART_CheckIdleState>
 8001d9e:	0003      	movs	r3, r0
}
 8001da0:	0018      	movs	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	b002      	add	sp, #8
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	ffffb7ff 	.word	0xffffb7ff

08001dac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08a      	sub	sp, #40	; 0x28
 8001db0:	af02      	add	r7, sp, #8
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	603b      	str	r3, [r7, #0]
 8001db8:	1dbb      	adds	r3, r7, #6
 8001dba:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001dc0:	2b20      	cmp	r3, #32
 8001dc2:	d000      	beq.n	8001dc6 <HAL_UART_Transmit+0x1a>
 8001dc4:	e08c      	b.n	8001ee0 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <HAL_UART_Transmit+0x28>
 8001dcc:	1dbb      	adds	r3, r7, #6
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e084      	b.n	8001ee2 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	2380      	movs	r3, #128	; 0x80
 8001dde:	015b      	lsls	r3, r3, #5
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d109      	bne.n	8001df8 <HAL_UART_Transmit+0x4c>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d105      	bne.n	8001df8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	2201      	movs	r2, #1
 8001df0:	4013      	ands	r3, r2
 8001df2:	d001      	beq.n	8001df8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e074      	b.n	8001ee2 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2284      	movs	r2, #132	; 0x84
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2221      	movs	r2, #33	; 0x21
 8001e04:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e06:	f7fe fdaf 	bl	8000968 <HAL_GetTick>
 8001e0a:	0003      	movs	r3, r0
 8001e0c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1dba      	adds	r2, r7, #6
 8001e12:	2150      	movs	r1, #80	; 0x50
 8001e14:	8812      	ldrh	r2, [r2, #0]
 8001e16:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	1dba      	adds	r2, r7, #6
 8001e1c:	2152      	movs	r1, #82	; 0x52
 8001e1e:	8812      	ldrh	r2, [r2, #0]
 8001e20:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	2380      	movs	r3, #128	; 0x80
 8001e28:	015b      	lsls	r3, r3, #5
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d108      	bne.n	8001e40 <HAL_UART_Transmit+0x94>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d104      	bne.n	8001e40 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	61bb      	str	r3, [r7, #24]
 8001e3e:	e003      	b.n	8001e48 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001e48:	e02f      	b.n	8001eaa <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	68f8      	ldr	r0, [r7, #12]
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	0013      	movs	r3, r2
 8001e54:	2200      	movs	r2, #0
 8001e56:	2180      	movs	r1, #128	; 0x80
 8001e58:	f000 fc28 	bl	80026ac <UART_WaitOnFlagUntilTimeout>
 8001e5c:	1e03      	subs	r3, r0, #0
 8001e5e:	d004      	beq.n	8001e6a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2220      	movs	r2, #32
 8001e64:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e03b      	b.n	8001ee2 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d10b      	bne.n	8001e88 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	001a      	movs	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	05d2      	lsls	r2, r2, #23
 8001e7c:	0dd2      	lsrs	r2, r2, #23
 8001e7e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	3302      	adds	r3, #2
 8001e84:	61bb      	str	r3, [r7, #24]
 8001e86:	e007      	b.n	8001e98 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	781a      	ldrb	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3301      	adds	r3, #1
 8001e96:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2252      	movs	r2, #82	; 0x52
 8001e9c:	5a9b      	ldrh	r3, [r3, r2]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	b299      	uxth	r1, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2252      	movs	r2, #82	; 0x52
 8001ea8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2252      	movs	r2, #82	; 0x52
 8001eae:	5a9b      	ldrh	r3, [r3, r2]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1c9      	bne.n	8001e4a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	68f8      	ldr	r0, [r7, #12]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	0013      	movs	r3, r2
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2140      	movs	r1, #64	; 0x40
 8001ec4:	f000 fbf2 	bl	80026ac <UART_WaitOnFlagUntilTimeout>
 8001ec8:	1e03      	subs	r3, r0, #0
 8001eca:	d004      	beq.n	8001ed6 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2220      	movs	r2, #32
 8001ed0:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e005      	b.n	8001ee2 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2220      	movs	r2, #32
 8001eda:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001edc:	2300      	movs	r3, #0
 8001ede:	e000      	b.n	8001ee2 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8001ee0:	2302      	movs	r3, #2
  }
}
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	b008      	add	sp, #32
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001eec:	b5b0      	push	{r4, r5, r7, lr}
 8001eee:	b08e      	sub	sp, #56	; 0x38
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ef4:	231a      	movs	r3, #26
 8001ef6:	2218      	movs	r2, #24
 8001ef8:	189b      	adds	r3, r3, r2
 8001efa:	19db      	adds	r3, r3, r7
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4ac6      	ldr	r2, [pc, #792]	; (8002238 <UART_SetConfig+0x34c>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	0019      	movs	r1, r3
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	4ac1      	ldr	r2, [pc, #772]	; (800223c <UART_SetConfig+0x350>)
 8001f36:	4013      	ands	r3, r2
 8001f38:	0019      	movs	r1, r3
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4abb      	ldr	r2, [pc, #748]	; (8002240 <UART_SetConfig+0x354>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d004      	beq.n	8001f60 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	4ab7      	ldr	r2, [pc, #732]	; (8002244 <UART_SetConfig+0x358>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	0019      	movs	r1, r3
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f72:	430a      	orrs	r2, r1
 8001f74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4ab3      	ldr	r2, [pc, #716]	; (8002248 <UART_SetConfig+0x35c>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d131      	bne.n	8001fe4 <UART_SetConfig+0xf8>
 8001f80:	4bb2      	ldr	r3, [pc, #712]	; (800224c <UART_SetConfig+0x360>)
 8001f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f84:	2203      	movs	r2, #3
 8001f86:	4013      	ands	r3, r2
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d01d      	beq.n	8001fc8 <UART_SetConfig+0xdc>
 8001f8c:	d823      	bhi.n	8001fd6 <UART_SetConfig+0xea>
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d00c      	beq.n	8001fac <UART_SetConfig+0xc0>
 8001f92:	d820      	bhi.n	8001fd6 <UART_SetConfig+0xea>
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d002      	beq.n	8001f9e <UART_SetConfig+0xb2>
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d00e      	beq.n	8001fba <UART_SetConfig+0xce>
 8001f9c:	e01b      	b.n	8001fd6 <UART_SetConfig+0xea>
 8001f9e:	231b      	movs	r3, #27
 8001fa0:	2218      	movs	r2, #24
 8001fa2:	189b      	adds	r3, r3, r2
 8001fa4:	19db      	adds	r3, r3, r7
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	701a      	strb	r2, [r3, #0]
 8001faa:	e09c      	b.n	80020e6 <UART_SetConfig+0x1fa>
 8001fac:	231b      	movs	r3, #27
 8001fae:	2218      	movs	r2, #24
 8001fb0:	189b      	adds	r3, r3, r2
 8001fb2:	19db      	adds	r3, r3, r7
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	701a      	strb	r2, [r3, #0]
 8001fb8:	e095      	b.n	80020e6 <UART_SetConfig+0x1fa>
 8001fba:	231b      	movs	r3, #27
 8001fbc:	2218      	movs	r2, #24
 8001fbe:	189b      	adds	r3, r3, r2
 8001fc0:	19db      	adds	r3, r3, r7
 8001fc2:	2204      	movs	r2, #4
 8001fc4:	701a      	strb	r2, [r3, #0]
 8001fc6:	e08e      	b.n	80020e6 <UART_SetConfig+0x1fa>
 8001fc8:	231b      	movs	r3, #27
 8001fca:	2218      	movs	r2, #24
 8001fcc:	189b      	adds	r3, r3, r2
 8001fce:	19db      	adds	r3, r3, r7
 8001fd0:	2208      	movs	r2, #8
 8001fd2:	701a      	strb	r2, [r3, #0]
 8001fd4:	e087      	b.n	80020e6 <UART_SetConfig+0x1fa>
 8001fd6:	231b      	movs	r3, #27
 8001fd8:	2218      	movs	r2, #24
 8001fda:	189b      	adds	r3, r3, r2
 8001fdc:	19db      	adds	r3, r3, r7
 8001fde:	2210      	movs	r2, #16
 8001fe0:	701a      	strb	r2, [r3, #0]
 8001fe2:	e080      	b.n	80020e6 <UART_SetConfig+0x1fa>
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a99      	ldr	r2, [pc, #612]	; (8002250 <UART_SetConfig+0x364>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d131      	bne.n	8002052 <UART_SetConfig+0x166>
 8001fee:	4b97      	ldr	r3, [pc, #604]	; (800224c <UART_SetConfig+0x360>)
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff2:	220c      	movs	r2, #12
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2b0c      	cmp	r3, #12
 8001ff8:	d01d      	beq.n	8002036 <UART_SetConfig+0x14a>
 8001ffa:	d823      	bhi.n	8002044 <UART_SetConfig+0x158>
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	d00c      	beq.n	800201a <UART_SetConfig+0x12e>
 8002000:	d820      	bhi.n	8002044 <UART_SetConfig+0x158>
 8002002:	2b00      	cmp	r3, #0
 8002004:	d002      	beq.n	800200c <UART_SetConfig+0x120>
 8002006:	2b04      	cmp	r3, #4
 8002008:	d00e      	beq.n	8002028 <UART_SetConfig+0x13c>
 800200a:	e01b      	b.n	8002044 <UART_SetConfig+0x158>
 800200c:	231b      	movs	r3, #27
 800200e:	2218      	movs	r2, #24
 8002010:	189b      	adds	r3, r3, r2
 8002012:	19db      	adds	r3, r3, r7
 8002014:	2200      	movs	r2, #0
 8002016:	701a      	strb	r2, [r3, #0]
 8002018:	e065      	b.n	80020e6 <UART_SetConfig+0x1fa>
 800201a:	231b      	movs	r3, #27
 800201c:	2218      	movs	r2, #24
 800201e:	189b      	adds	r3, r3, r2
 8002020:	19db      	adds	r3, r3, r7
 8002022:	2202      	movs	r2, #2
 8002024:	701a      	strb	r2, [r3, #0]
 8002026:	e05e      	b.n	80020e6 <UART_SetConfig+0x1fa>
 8002028:	231b      	movs	r3, #27
 800202a:	2218      	movs	r2, #24
 800202c:	189b      	adds	r3, r3, r2
 800202e:	19db      	adds	r3, r3, r7
 8002030:	2204      	movs	r2, #4
 8002032:	701a      	strb	r2, [r3, #0]
 8002034:	e057      	b.n	80020e6 <UART_SetConfig+0x1fa>
 8002036:	231b      	movs	r3, #27
 8002038:	2218      	movs	r2, #24
 800203a:	189b      	adds	r3, r3, r2
 800203c:	19db      	adds	r3, r3, r7
 800203e:	2208      	movs	r2, #8
 8002040:	701a      	strb	r2, [r3, #0]
 8002042:	e050      	b.n	80020e6 <UART_SetConfig+0x1fa>
 8002044:	231b      	movs	r3, #27
 8002046:	2218      	movs	r2, #24
 8002048:	189b      	adds	r3, r3, r2
 800204a:	19db      	adds	r3, r3, r7
 800204c:	2210      	movs	r2, #16
 800204e:	701a      	strb	r2, [r3, #0]
 8002050:	e049      	b.n	80020e6 <UART_SetConfig+0x1fa>
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a7a      	ldr	r2, [pc, #488]	; (8002240 <UART_SetConfig+0x354>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d13e      	bne.n	80020da <UART_SetConfig+0x1ee>
 800205c:	4b7b      	ldr	r3, [pc, #492]	; (800224c <UART_SetConfig+0x360>)
 800205e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002060:	23c0      	movs	r3, #192	; 0xc0
 8002062:	011b      	lsls	r3, r3, #4
 8002064:	4013      	ands	r3, r2
 8002066:	22c0      	movs	r2, #192	; 0xc0
 8002068:	0112      	lsls	r2, r2, #4
 800206a:	4293      	cmp	r3, r2
 800206c:	d027      	beq.n	80020be <UART_SetConfig+0x1d2>
 800206e:	22c0      	movs	r2, #192	; 0xc0
 8002070:	0112      	lsls	r2, r2, #4
 8002072:	4293      	cmp	r3, r2
 8002074:	d82a      	bhi.n	80020cc <UART_SetConfig+0x1e0>
 8002076:	2280      	movs	r2, #128	; 0x80
 8002078:	0112      	lsls	r2, r2, #4
 800207a:	4293      	cmp	r3, r2
 800207c:	d011      	beq.n	80020a2 <UART_SetConfig+0x1b6>
 800207e:	2280      	movs	r2, #128	; 0x80
 8002080:	0112      	lsls	r2, r2, #4
 8002082:	4293      	cmp	r3, r2
 8002084:	d822      	bhi.n	80020cc <UART_SetConfig+0x1e0>
 8002086:	2b00      	cmp	r3, #0
 8002088:	d004      	beq.n	8002094 <UART_SetConfig+0x1a8>
 800208a:	2280      	movs	r2, #128	; 0x80
 800208c:	00d2      	lsls	r2, r2, #3
 800208e:	4293      	cmp	r3, r2
 8002090:	d00e      	beq.n	80020b0 <UART_SetConfig+0x1c4>
 8002092:	e01b      	b.n	80020cc <UART_SetConfig+0x1e0>
 8002094:	231b      	movs	r3, #27
 8002096:	2218      	movs	r2, #24
 8002098:	189b      	adds	r3, r3, r2
 800209a:	19db      	adds	r3, r3, r7
 800209c:	2200      	movs	r2, #0
 800209e:	701a      	strb	r2, [r3, #0]
 80020a0:	e021      	b.n	80020e6 <UART_SetConfig+0x1fa>
 80020a2:	231b      	movs	r3, #27
 80020a4:	2218      	movs	r2, #24
 80020a6:	189b      	adds	r3, r3, r2
 80020a8:	19db      	adds	r3, r3, r7
 80020aa:	2202      	movs	r2, #2
 80020ac:	701a      	strb	r2, [r3, #0]
 80020ae:	e01a      	b.n	80020e6 <UART_SetConfig+0x1fa>
 80020b0:	231b      	movs	r3, #27
 80020b2:	2218      	movs	r2, #24
 80020b4:	189b      	adds	r3, r3, r2
 80020b6:	19db      	adds	r3, r3, r7
 80020b8:	2204      	movs	r2, #4
 80020ba:	701a      	strb	r2, [r3, #0]
 80020bc:	e013      	b.n	80020e6 <UART_SetConfig+0x1fa>
 80020be:	231b      	movs	r3, #27
 80020c0:	2218      	movs	r2, #24
 80020c2:	189b      	adds	r3, r3, r2
 80020c4:	19db      	adds	r3, r3, r7
 80020c6:	2208      	movs	r2, #8
 80020c8:	701a      	strb	r2, [r3, #0]
 80020ca:	e00c      	b.n	80020e6 <UART_SetConfig+0x1fa>
 80020cc:	231b      	movs	r3, #27
 80020ce:	2218      	movs	r2, #24
 80020d0:	189b      	adds	r3, r3, r2
 80020d2:	19db      	adds	r3, r3, r7
 80020d4:	2210      	movs	r2, #16
 80020d6:	701a      	strb	r2, [r3, #0]
 80020d8:	e005      	b.n	80020e6 <UART_SetConfig+0x1fa>
 80020da:	231b      	movs	r3, #27
 80020dc:	2218      	movs	r2, #24
 80020de:	189b      	adds	r3, r3, r2
 80020e0:	19db      	adds	r3, r3, r7
 80020e2:	2210      	movs	r2, #16
 80020e4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a55      	ldr	r2, [pc, #340]	; (8002240 <UART_SetConfig+0x354>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d000      	beq.n	80020f2 <UART_SetConfig+0x206>
 80020f0:	e084      	b.n	80021fc <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80020f2:	231b      	movs	r3, #27
 80020f4:	2218      	movs	r2, #24
 80020f6:	189b      	adds	r3, r3, r2
 80020f8:	19db      	adds	r3, r3, r7
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b08      	cmp	r3, #8
 80020fe:	d01d      	beq.n	800213c <UART_SetConfig+0x250>
 8002100:	dc20      	bgt.n	8002144 <UART_SetConfig+0x258>
 8002102:	2b04      	cmp	r3, #4
 8002104:	d015      	beq.n	8002132 <UART_SetConfig+0x246>
 8002106:	dc1d      	bgt.n	8002144 <UART_SetConfig+0x258>
 8002108:	2b00      	cmp	r3, #0
 800210a:	d002      	beq.n	8002112 <UART_SetConfig+0x226>
 800210c:	2b02      	cmp	r3, #2
 800210e:	d005      	beq.n	800211c <UART_SetConfig+0x230>
 8002110:	e018      	b.n	8002144 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002112:	f7ff fc3d 	bl	8001990 <HAL_RCC_GetPCLK1Freq>
 8002116:	0003      	movs	r3, r0
 8002118:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800211a:	e01c      	b.n	8002156 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800211c:	4b4b      	ldr	r3, [pc, #300]	; (800224c <UART_SetConfig+0x360>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2210      	movs	r2, #16
 8002122:	4013      	ands	r3, r2
 8002124:	d002      	beq.n	800212c <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002126:	4b4b      	ldr	r3, [pc, #300]	; (8002254 <UART_SetConfig+0x368>)
 8002128:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800212a:	e014      	b.n	8002156 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 800212c:	4b4a      	ldr	r3, [pc, #296]	; (8002258 <UART_SetConfig+0x36c>)
 800212e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002130:	e011      	b.n	8002156 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002132:	f7ff fb7d 	bl	8001830 <HAL_RCC_GetSysClockFreq>
 8002136:	0003      	movs	r3, r0
 8002138:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800213a:	e00c      	b.n	8002156 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800213c:	2380      	movs	r3, #128	; 0x80
 800213e:	021b      	lsls	r3, r3, #8
 8002140:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002142:	e008      	b.n	8002156 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002148:	231a      	movs	r3, #26
 800214a:	2218      	movs	r2, #24
 800214c:	189b      	adds	r3, r3, r2
 800214e:	19db      	adds	r3, r3, r7
 8002150:	2201      	movs	r2, #1
 8002152:	701a      	strb	r2, [r3, #0]
        break;
 8002154:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002158:	2b00      	cmp	r3, #0
 800215a:	d100      	bne.n	800215e <UART_SetConfig+0x272>
 800215c:	e132      	b.n	80023c4 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	0013      	movs	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	189b      	adds	r3, r3, r2
 8002168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800216a:	429a      	cmp	r2, r3
 800216c:	d305      	bcc.n	800217a <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002176:	429a      	cmp	r2, r3
 8002178:	d906      	bls.n	8002188 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 800217a:	231a      	movs	r3, #26
 800217c:	2218      	movs	r2, #24
 800217e:	189b      	adds	r3, r3, r2
 8002180:	19db      	adds	r3, r3, r7
 8002182:	2201      	movs	r2, #1
 8002184:	701a      	strb	r2, [r3, #0]
 8002186:	e11d      	b.n	80023c4 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	6939      	ldr	r1, [r7, #16]
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	000b      	movs	r3, r1
 8002196:	0e1b      	lsrs	r3, r3, #24
 8002198:	0010      	movs	r0, r2
 800219a:	0205      	lsls	r5, r0, #8
 800219c:	431d      	orrs	r5, r3
 800219e:	000b      	movs	r3, r1
 80021a0:	021c      	lsls	r4, r3, #8
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	085b      	lsrs	r3, r3, #1
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	68b8      	ldr	r0, [r7, #8]
 80021b0:	68f9      	ldr	r1, [r7, #12]
 80021b2:	1900      	adds	r0, r0, r4
 80021b4:	4169      	adcs	r1, r5
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	2300      	movs	r3, #0
 80021be:	607b      	str	r3, [r7, #4]
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f7fe f82c 	bl	8000220 <__aeabi_uldivmod>
 80021c8:	0002      	movs	r2, r0
 80021ca:	000b      	movs	r3, r1
 80021cc:	0013      	movs	r3, r2
 80021ce:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80021d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021d2:	23c0      	movs	r3, #192	; 0xc0
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d309      	bcc.n	80021ee <UART_SetConfig+0x302>
 80021da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021dc:	2380      	movs	r3, #128	; 0x80
 80021de:	035b      	lsls	r3, r3, #13
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d204      	bcs.n	80021ee <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021ea:	60da      	str	r2, [r3, #12]
 80021ec:	e0ea      	b.n	80023c4 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 80021ee:	231a      	movs	r3, #26
 80021f0:	2218      	movs	r2, #24
 80021f2:	189b      	adds	r3, r3, r2
 80021f4:	19db      	adds	r3, r3, r7
 80021f6:	2201      	movs	r2, #1
 80021f8:	701a      	strb	r2, [r3, #0]
 80021fa:	e0e3      	b.n	80023c4 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	69da      	ldr	r2, [r3, #28]
 8002200:	2380      	movs	r3, #128	; 0x80
 8002202:	021b      	lsls	r3, r3, #8
 8002204:	429a      	cmp	r2, r3
 8002206:	d000      	beq.n	800220a <UART_SetConfig+0x31e>
 8002208:	e085      	b.n	8002316 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 800220a:	231b      	movs	r3, #27
 800220c:	2218      	movs	r2, #24
 800220e:	189b      	adds	r3, r3, r2
 8002210:	19db      	adds	r3, r3, r7
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b08      	cmp	r3, #8
 8002216:	d837      	bhi.n	8002288 <UART_SetConfig+0x39c>
 8002218:	009a      	lsls	r2, r3, #2
 800221a:	4b10      	ldr	r3, [pc, #64]	; (800225c <UART_SetConfig+0x370>)
 800221c:	18d3      	adds	r3, r2, r3
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002222:	f7ff fbb5 	bl	8001990 <HAL_RCC_GetPCLK1Freq>
 8002226:	0003      	movs	r3, r0
 8002228:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800222a:	e036      	b.n	800229a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800222c:	f7ff fbc6 	bl	80019bc <HAL_RCC_GetPCLK2Freq>
 8002230:	0003      	movs	r3, r0
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002234:	e031      	b.n	800229a <UART_SetConfig+0x3ae>
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	efff69f3 	.word	0xefff69f3
 800223c:	ffffcfff 	.word	0xffffcfff
 8002240:	40004800 	.word	0x40004800
 8002244:	fffff4ff 	.word	0xfffff4ff
 8002248:	40013800 	.word	0x40013800
 800224c:	40021000 	.word	0x40021000
 8002250:	40004400 	.word	0x40004400
 8002254:	003d0900 	.word	0x003d0900
 8002258:	00f42400 	.word	0x00f42400
 800225c:	08003ab0 	.word	0x08003ab0
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002260:	4b60      	ldr	r3, [pc, #384]	; (80023e4 <UART_SetConfig+0x4f8>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2210      	movs	r2, #16
 8002266:	4013      	ands	r3, r2
 8002268:	d002      	beq.n	8002270 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800226a:	4b5f      	ldr	r3, [pc, #380]	; (80023e8 <UART_SetConfig+0x4fc>)
 800226c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800226e:	e014      	b.n	800229a <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8002270:	4b5e      	ldr	r3, [pc, #376]	; (80023ec <UART_SetConfig+0x500>)
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002274:	e011      	b.n	800229a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002276:	f7ff fadb 	bl	8001830 <HAL_RCC_GetSysClockFreq>
 800227a:	0003      	movs	r3, r0
 800227c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800227e:	e00c      	b.n	800229a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002280:	2380      	movs	r3, #128	; 0x80
 8002282:	021b      	lsls	r3, r3, #8
 8002284:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002286:	e008      	b.n	800229a <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800228c:	231a      	movs	r3, #26
 800228e:	2218      	movs	r2, #24
 8002290:	189b      	adds	r3, r3, r2
 8002292:	19db      	adds	r3, r3, r7
 8002294:	2201      	movs	r2, #1
 8002296:	701a      	strb	r2, [r3, #0]
        break;
 8002298:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800229a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229c:	2b00      	cmp	r3, #0
 800229e:	d100      	bne.n	80022a2 <UART_SetConfig+0x3b6>
 80022a0:	e090      	b.n	80023c4 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80022a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a4:	005a      	lsls	r2, r3, #1
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	085b      	lsrs	r3, r3, #1
 80022ac:	18d2      	adds	r2, r2, r3
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	0019      	movs	r1, r3
 80022b4:	0010      	movs	r0, r2
 80022b6:	f7fd ff27 	bl	8000108 <__udivsi3>
 80022ba:	0003      	movs	r3, r0
 80022bc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c0:	2b0f      	cmp	r3, #15
 80022c2:	d921      	bls.n	8002308 <UART_SetConfig+0x41c>
 80022c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022c6:	2380      	movs	r3, #128	; 0x80
 80022c8:	025b      	lsls	r3, r3, #9
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d21c      	bcs.n	8002308 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80022ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	200e      	movs	r0, #14
 80022d4:	2418      	movs	r4, #24
 80022d6:	1903      	adds	r3, r0, r4
 80022d8:	19db      	adds	r3, r3, r7
 80022da:	210f      	movs	r1, #15
 80022dc:	438a      	bics	r2, r1
 80022de:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80022e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e2:	085b      	lsrs	r3, r3, #1
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	2207      	movs	r2, #7
 80022e8:	4013      	ands	r3, r2
 80022ea:	b299      	uxth	r1, r3
 80022ec:	1903      	adds	r3, r0, r4
 80022ee:	19db      	adds	r3, r3, r7
 80022f0:	1902      	adds	r2, r0, r4
 80022f2:	19d2      	adds	r2, r2, r7
 80022f4:	8812      	ldrh	r2, [r2, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	1902      	adds	r2, r0, r4
 8002300:	19d2      	adds	r2, r2, r7
 8002302:	8812      	ldrh	r2, [r2, #0]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	e05d      	b.n	80023c4 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002308:	231a      	movs	r3, #26
 800230a:	2218      	movs	r2, #24
 800230c:	189b      	adds	r3, r3, r2
 800230e:	19db      	adds	r3, r3, r7
 8002310:	2201      	movs	r2, #1
 8002312:	701a      	strb	r2, [r3, #0]
 8002314:	e056      	b.n	80023c4 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002316:	231b      	movs	r3, #27
 8002318:	2218      	movs	r2, #24
 800231a:	189b      	adds	r3, r3, r2
 800231c:	19db      	adds	r3, r3, r7
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b08      	cmp	r3, #8
 8002322:	d822      	bhi.n	800236a <UART_SetConfig+0x47e>
 8002324:	009a      	lsls	r2, r3, #2
 8002326:	4b32      	ldr	r3, [pc, #200]	; (80023f0 <UART_SetConfig+0x504>)
 8002328:	18d3      	adds	r3, r2, r3
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800232e:	f7ff fb2f 	bl	8001990 <HAL_RCC_GetPCLK1Freq>
 8002332:	0003      	movs	r3, r0
 8002334:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002336:	e021      	b.n	800237c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002338:	f7ff fb40 	bl	80019bc <HAL_RCC_GetPCLK2Freq>
 800233c:	0003      	movs	r3, r0
 800233e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002340:	e01c      	b.n	800237c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002342:	4b28      	ldr	r3, [pc, #160]	; (80023e4 <UART_SetConfig+0x4f8>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2210      	movs	r2, #16
 8002348:	4013      	ands	r3, r2
 800234a:	d002      	beq.n	8002352 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800234c:	4b26      	ldr	r3, [pc, #152]	; (80023e8 <UART_SetConfig+0x4fc>)
 800234e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002350:	e014      	b.n	800237c <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8002352:	4b26      	ldr	r3, [pc, #152]	; (80023ec <UART_SetConfig+0x500>)
 8002354:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002356:	e011      	b.n	800237c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002358:	f7ff fa6a 	bl	8001830 <HAL_RCC_GetSysClockFreq>
 800235c:	0003      	movs	r3, r0
 800235e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002360:	e00c      	b.n	800237c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002362:	2380      	movs	r3, #128	; 0x80
 8002364:	021b      	lsls	r3, r3, #8
 8002366:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002368:	e008      	b.n	800237c <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 800236a:	2300      	movs	r3, #0
 800236c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800236e:	231a      	movs	r3, #26
 8002370:	2218      	movs	r2, #24
 8002372:	189b      	adds	r3, r3, r2
 8002374:	19db      	adds	r3, r3, r7
 8002376:	2201      	movs	r2, #1
 8002378:	701a      	strb	r2, [r3, #0]
        break;
 800237a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800237c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800237e:	2b00      	cmp	r3, #0
 8002380:	d020      	beq.n	80023c4 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	085a      	lsrs	r2, r3, #1
 8002388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800238a:	18d2      	adds	r2, r2, r3
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	0019      	movs	r1, r3
 8002392:	0010      	movs	r0, r2
 8002394:	f7fd feb8 	bl	8000108 <__udivsi3>
 8002398:	0003      	movs	r3, r0
 800239a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800239c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239e:	2b0f      	cmp	r3, #15
 80023a0:	d90a      	bls.n	80023b8 <UART_SetConfig+0x4cc>
 80023a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023a4:	2380      	movs	r3, #128	; 0x80
 80023a6:	025b      	lsls	r3, r3, #9
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d205      	bcs.n	80023b8 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80023ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	e005      	b.n	80023c4 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80023b8:	231a      	movs	r3, #26
 80023ba:	2218      	movs	r2, #24
 80023bc:	189b      	adds	r3, r3, r2
 80023be:	19db      	adds	r3, r3, r7
 80023c0:	2201      	movs	r2, #1
 80023c2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	2200      	movs	r2, #0
 80023c8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	2200      	movs	r2, #0
 80023ce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80023d0:	231a      	movs	r3, #26
 80023d2:	2218      	movs	r2, #24
 80023d4:	189b      	adds	r3, r3, r2
 80023d6:	19db      	adds	r3, r3, r7
 80023d8:	781b      	ldrb	r3, [r3, #0]
}
 80023da:	0018      	movs	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	b00e      	add	sp, #56	; 0x38
 80023e0:	bdb0      	pop	{r4, r5, r7, pc}
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	40021000 	.word	0x40021000
 80023e8:	003d0900 	.word	0x003d0900
 80023ec:	00f42400 	.word	0x00f42400
 80023f0:	08003ad4 	.word	0x08003ad4

080023f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	2201      	movs	r2, #1
 8002402:	4013      	ands	r3, r2
 8002404:	d00b      	beq.n	800241e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	4a4a      	ldr	r2, [pc, #296]	; (8002538 <UART_AdvFeatureConfig+0x144>)
 800240e:	4013      	ands	r3, r2
 8002410:	0019      	movs	r1, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002422:	2202      	movs	r2, #2
 8002424:	4013      	ands	r3, r2
 8002426:	d00b      	beq.n	8002440 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	4a43      	ldr	r2, [pc, #268]	; (800253c <UART_AdvFeatureConfig+0x148>)
 8002430:	4013      	ands	r3, r2
 8002432:	0019      	movs	r1, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	2204      	movs	r2, #4
 8002446:	4013      	ands	r3, r2
 8002448:	d00b      	beq.n	8002462 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	4a3b      	ldr	r2, [pc, #236]	; (8002540 <UART_AdvFeatureConfig+0x14c>)
 8002452:	4013      	ands	r3, r2
 8002454:	0019      	movs	r1, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	430a      	orrs	r2, r1
 8002460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	2208      	movs	r2, #8
 8002468:	4013      	ands	r3, r2
 800246a:	d00b      	beq.n	8002484 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	4a34      	ldr	r2, [pc, #208]	; (8002544 <UART_AdvFeatureConfig+0x150>)
 8002474:	4013      	ands	r3, r2
 8002476:	0019      	movs	r1, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	430a      	orrs	r2, r1
 8002482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	2210      	movs	r2, #16
 800248a:	4013      	ands	r3, r2
 800248c:	d00b      	beq.n	80024a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	4a2c      	ldr	r2, [pc, #176]	; (8002548 <UART_AdvFeatureConfig+0x154>)
 8002496:	4013      	ands	r3, r2
 8002498:	0019      	movs	r1, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	2220      	movs	r2, #32
 80024ac:	4013      	ands	r3, r2
 80024ae:	d00b      	beq.n	80024c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	4a25      	ldr	r2, [pc, #148]	; (800254c <UART_AdvFeatureConfig+0x158>)
 80024b8:	4013      	ands	r3, r2
 80024ba:	0019      	movs	r1, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	2240      	movs	r2, #64	; 0x40
 80024ce:	4013      	ands	r3, r2
 80024d0:	d01d      	beq.n	800250e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	4a1d      	ldr	r2, [pc, #116]	; (8002550 <UART_AdvFeatureConfig+0x15c>)
 80024da:	4013      	ands	r3, r2
 80024dc:	0019      	movs	r1, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024ee:	2380      	movs	r3, #128	; 0x80
 80024f0:	035b      	lsls	r3, r3, #13
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d10b      	bne.n	800250e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	4a15      	ldr	r2, [pc, #84]	; (8002554 <UART_AdvFeatureConfig+0x160>)
 80024fe:	4013      	ands	r3, r2
 8002500:	0019      	movs	r1, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	2280      	movs	r2, #128	; 0x80
 8002514:	4013      	ands	r3, r2
 8002516:	d00b      	beq.n	8002530 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	4a0e      	ldr	r2, [pc, #56]	; (8002558 <UART_AdvFeatureConfig+0x164>)
 8002520:	4013      	ands	r3, r2
 8002522:	0019      	movs	r1, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	605a      	str	r2, [r3, #4]
  }
}
 8002530:	46c0      	nop			; (mov r8, r8)
 8002532:	46bd      	mov	sp, r7
 8002534:	b002      	add	sp, #8
 8002536:	bd80      	pop	{r7, pc}
 8002538:	fffdffff 	.word	0xfffdffff
 800253c:	fffeffff 	.word	0xfffeffff
 8002540:	fffbffff 	.word	0xfffbffff
 8002544:	ffff7fff 	.word	0xffff7fff
 8002548:	ffffefff 	.word	0xffffefff
 800254c:	ffffdfff 	.word	0xffffdfff
 8002550:	ffefffff 	.word	0xffefffff
 8002554:	ff9fffff 	.word	0xff9fffff
 8002558:	fff7ffff 	.word	0xfff7ffff

0800255c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b092      	sub	sp, #72	; 0x48
 8002560:	af02      	add	r7, sp, #8
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2284      	movs	r2, #132	; 0x84
 8002568:	2100      	movs	r1, #0
 800256a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800256c:	f7fe f9fc 	bl	8000968 <HAL_GetTick>
 8002570:	0003      	movs	r3, r0
 8002572:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2208      	movs	r2, #8
 800257c:	4013      	ands	r3, r2
 800257e:	2b08      	cmp	r3, #8
 8002580:	d12c      	bne.n	80025dc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002584:	2280      	movs	r2, #128	; 0x80
 8002586:	0391      	lsls	r1, r2, #14
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	4a46      	ldr	r2, [pc, #280]	; (80026a4 <UART_CheckIdleState+0x148>)
 800258c:	9200      	str	r2, [sp, #0]
 800258e:	2200      	movs	r2, #0
 8002590:	f000 f88c 	bl	80026ac <UART_WaitOnFlagUntilTimeout>
 8002594:	1e03      	subs	r3, r0, #0
 8002596:	d021      	beq.n	80025dc <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002598:	f3ef 8310 	mrs	r3, PRIMASK
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80025a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80025a2:	2301      	movs	r3, #1
 80025a4:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a8:	f383 8810 	msr	PRIMASK, r3
}
 80025ac:	46c0      	nop			; (mov r8, r8)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2180      	movs	r1, #128	; 0x80
 80025ba:	438a      	bics	r2, r1
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c4:	f383 8810 	msr	PRIMASK, r3
}
 80025c8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2220      	movs	r2, #32
 80025ce:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2278      	movs	r2, #120	; 0x78
 80025d4:	2100      	movs	r1, #0
 80025d6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e05f      	b.n	800269c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2204      	movs	r2, #4
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d146      	bne.n	8002678 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ec:	2280      	movs	r2, #128	; 0x80
 80025ee:	03d1      	lsls	r1, r2, #15
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	4a2c      	ldr	r2, [pc, #176]	; (80026a4 <UART_CheckIdleState+0x148>)
 80025f4:	9200      	str	r2, [sp, #0]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f000 f858 	bl	80026ac <UART_WaitOnFlagUntilTimeout>
 80025fc:	1e03      	subs	r3, r0, #0
 80025fe:	d03b      	beq.n	8002678 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002600:	f3ef 8310 	mrs	r3, PRIMASK
 8002604:	60fb      	str	r3, [r7, #12]
  return(result);
 8002606:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002608:	637b      	str	r3, [r7, #52]	; 0x34
 800260a:	2301      	movs	r3, #1
 800260c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	f383 8810 	msr	PRIMASK, r3
}
 8002614:	46c0      	nop			; (mov r8, r8)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4921      	ldr	r1, [pc, #132]	; (80026a8 <UART_CheckIdleState+0x14c>)
 8002622:	400a      	ands	r2, r1
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002628:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f383 8810 	msr	PRIMASK, r3
}
 8002630:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002632:	f3ef 8310 	mrs	r3, PRIMASK
 8002636:	61bb      	str	r3, [r7, #24]
  return(result);
 8002638:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800263a:	633b      	str	r3, [r7, #48]	; 0x30
 800263c:	2301      	movs	r3, #1
 800263e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f383 8810 	msr	PRIMASK, r3
}
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689a      	ldr	r2, [r3, #8]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2101      	movs	r1, #1
 8002654:	438a      	bics	r2, r1
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	f383 8810 	msr	PRIMASK, r3
}
 8002662:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2280      	movs	r2, #128	; 0x80
 8002668:	2120      	movs	r1, #32
 800266a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2278      	movs	r2, #120	; 0x78
 8002670:	2100      	movs	r1, #0
 8002672:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e011      	b.n	800269c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2220      	movs	r2, #32
 800267c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2280      	movs	r2, #128	; 0x80
 8002682:	2120      	movs	r1, #32
 8002684:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2278      	movs	r2, #120	; 0x78
 8002696:	2100      	movs	r1, #0
 8002698:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	0018      	movs	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	b010      	add	sp, #64	; 0x40
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	01ffffff 	.word	0x01ffffff
 80026a8:	fffffedf 	.word	0xfffffedf

080026ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	603b      	str	r3, [r7, #0]
 80026b8:	1dfb      	adds	r3, r7, #7
 80026ba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026bc:	e04b      	b.n	8002756 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	3301      	adds	r3, #1
 80026c2:	d048      	beq.n	8002756 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026c4:	f7fe f950 	bl	8000968 <HAL_GetTick>
 80026c8:	0002      	movs	r2, r0
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d302      	bcc.n	80026da <UART_WaitOnFlagUntilTimeout+0x2e>
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e04b      	b.n	8002776 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2204      	movs	r2, #4
 80026e6:	4013      	ands	r3, r2
 80026e8:	d035      	beq.n	8002756 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	2208      	movs	r2, #8
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d111      	bne.n	800271c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2208      	movs	r2, #8
 80026fe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	0018      	movs	r0, r3
 8002704:	f000 f83c 	bl	8002780 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2284      	movs	r2, #132	; 0x84
 800270c:	2108      	movs	r1, #8
 800270e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2278      	movs	r2, #120	; 0x78
 8002714:	2100      	movs	r1, #0
 8002716:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e02c      	b.n	8002776 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	69da      	ldr	r2, [r3, #28]
 8002722:	2380      	movs	r3, #128	; 0x80
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	401a      	ands	r2, r3
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	429a      	cmp	r2, r3
 800272e:	d112      	bne.n	8002756 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2280      	movs	r2, #128	; 0x80
 8002736:	0112      	lsls	r2, r2, #4
 8002738:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	0018      	movs	r0, r3
 800273e:	f000 f81f 	bl	8002780 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2284      	movs	r2, #132	; 0x84
 8002746:	2120      	movs	r1, #32
 8002748:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2278      	movs	r2, #120	; 0x78
 800274e:	2100      	movs	r1, #0
 8002750:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e00f      	b.n	8002776 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	4013      	ands	r3, r2
 8002760:	68ba      	ldr	r2, [r7, #8]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	425a      	negs	r2, r3
 8002766:	4153      	adcs	r3, r2
 8002768:	b2db      	uxtb	r3, r3
 800276a:	001a      	movs	r2, r3
 800276c:	1dfb      	adds	r3, r7, #7
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	429a      	cmp	r2, r3
 8002772:	d0a4      	beq.n	80026be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	0018      	movs	r0, r3
 8002778:	46bd      	mov	sp, r7
 800277a:	b004      	add	sp, #16
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08e      	sub	sp, #56	; 0x38
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002788:	f3ef 8310 	mrs	r3, PRIMASK
 800278c:	617b      	str	r3, [r7, #20]
  return(result);
 800278e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002790:	637b      	str	r3, [r7, #52]	; 0x34
 8002792:	2301      	movs	r3, #1
 8002794:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	f383 8810 	msr	PRIMASK, r3
}
 800279c:	46c0      	nop			; (mov r8, r8)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4926      	ldr	r1, [pc, #152]	; (8002844 <UART_EndRxTransfer+0xc4>)
 80027aa:	400a      	ands	r2, r1
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	f383 8810 	msr	PRIMASK, r3
}
 80027b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027ba:	f3ef 8310 	mrs	r3, PRIMASK
 80027be:	623b      	str	r3, [r7, #32]
  return(result);
 80027c0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027c2:	633b      	str	r3, [r7, #48]	; 0x30
 80027c4:	2301      	movs	r3, #1
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	f383 8810 	msr	PRIMASK, r3
}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2101      	movs	r1, #1
 80027dc:	438a      	bics	r2, r1
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e6:	f383 8810 	msr	PRIMASK, r3
}
 80027ea:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d118      	bne.n	8002826 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027f4:	f3ef 8310 	mrs	r3, PRIMASK
 80027f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80027fa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027fe:	2301      	movs	r3, #1
 8002800:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f383 8810 	msr	PRIMASK, r3
}
 8002808:	46c0      	nop			; (mov r8, r8)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2110      	movs	r1, #16
 8002816:	438a      	bics	r2, r1
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	f383 8810 	msr	PRIMASK, r3
}
 8002824:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2280      	movs	r2, #128	; 0x80
 800282a:	2120      	movs	r1, #32
 800282c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	669a      	str	r2, [r3, #104]	; 0x68
}
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	46bd      	mov	sp, r7
 800283e:	b00e      	add	sp, #56	; 0x38
 8002840:	bd80      	pop	{r7, pc}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	fffffedf 	.word	0xfffffedf

08002848 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	0002      	movs	r2, r0
 8002850:	1dbb      	adds	r3, r7, #6
 8002852:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002854:	2300      	movs	r3, #0
 8002856:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002858:	1dbb      	adds	r3, r7, #6
 800285a:	2200      	movs	r2, #0
 800285c:	5e9b      	ldrsh	r3, [r3, r2]
 800285e:	2b84      	cmp	r3, #132	; 0x84
 8002860:	d006      	beq.n	8002870 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8002862:	1dbb      	adds	r3, r7, #6
 8002864:	2200      	movs	r2, #0
 8002866:	5e9a      	ldrsh	r2, [r3, r2]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	18d3      	adds	r3, r2, r3
 800286c:	3303      	adds	r3, #3
 800286e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002870:	68fb      	ldr	r3, [r7, #12]
}
 8002872:	0018      	movs	r0, r3
 8002874:	46bd      	mov	sp, r7
 8002876:	b004      	add	sp, #16
 8002878:	bd80      	pop	{r7, pc}

0800287a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800287e:	f000 faab 	bl	8002dd8 <vTaskStartScheduler>
  
  return osOK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	0018      	movs	r0, r3
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800288a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800288c:	b089      	sub	sp, #36	; 0x24
 800288e:	af04      	add	r7, sp, #16
 8002890:	6078      	str	r0, [r7, #4]
 8002892:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d020      	beq.n	80028de <osThreadCreate+0x54>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d01c      	beq.n	80028de <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685c      	ldr	r4, [r3, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691e      	ldr	r6, [r3, #16]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2208      	movs	r2, #8
 80028b4:	5e9b      	ldrsh	r3, [r3, r2]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028b6:	0018      	movs	r0, r3
 80028b8:	f7ff ffc6 	bl	8002848 <makeFreeRtosPriority>
              thread_def->buffer, thread_def->controlblock);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	695a      	ldr	r2, [r3, #20]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028c4:	6839      	ldr	r1, [r7, #0]
 80028c6:	9302      	str	r3, [sp, #8]
 80028c8:	9201      	str	r2, [sp, #4]
 80028ca:	9000      	str	r0, [sp, #0]
 80028cc:	000b      	movs	r3, r1
 80028ce:	0032      	movs	r2, r6
 80028d0:	0029      	movs	r1, r5
 80028d2:	0020      	movs	r0, r4
 80028d4:	f000 f8e3 	bl	8002a9e <xTaskCreateStatic>
 80028d8:	0003      	movs	r3, r0
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	e01d      	b.n	800291a <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685c      	ldr	r4, [r3, #4]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028ea:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2208      	movs	r2, #8
 80028f0:	5e9b      	ldrsh	r3, [r3, r2]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028f2:	0018      	movs	r0, r3
 80028f4:	f7ff ffa8 	bl	8002848 <makeFreeRtosPriority>
 80028f8:	0001      	movs	r1, r0
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	230c      	movs	r3, #12
 80028fe:	18fb      	adds	r3, r7, r3
 8002900:	9301      	str	r3, [sp, #4]
 8002902:	9100      	str	r1, [sp, #0]
 8002904:	0013      	movs	r3, r2
 8002906:	0032      	movs	r2, r6
 8002908:	0029      	movs	r1, r5
 800290a:	0020      	movs	r0, r4
 800290c:	f000 f90b 	bl	8002b26 <xTaskCreate>
 8002910:	0003      	movs	r3, r0
 8002912:	2b01      	cmp	r3, #1
 8002914:	d001      	beq.n	800291a <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8002916:	2300      	movs	r3, #0
 8002918:	e000      	b.n	800291c <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800291a:	68fb      	ldr	r3, [r7, #12]
}
 800291c:	0018      	movs	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	b005      	add	sp, #20
 8002922:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002924 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <osDelay+0x16>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	e000      	b.n	800293c <osDelay+0x18>
 800293a:	2301      	movs	r3, #1
 800293c:	0018      	movs	r0, r3
 800293e:	f000 fa25 	bl	8002d8c <vTaskDelay>
  
  return osOK;
 8002942:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002944:	0018      	movs	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	b004      	add	sp, #16
 800294a:	bd80      	pop	{r7, pc}

0800294c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3308      	adds	r3, #8
 8002958:	001a      	movs	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	4252      	negs	r2, r2
 8002964:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3308      	adds	r3, #8
 800296a:	001a      	movs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3308      	adds	r3, #8
 8002974:	001a      	movs	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002980:	46c0      	nop			; (mov r8, r8)
 8002982:	46bd      	mov	sp, r7
 8002984:	b002      	add	sp, #8
 8002986:	bd80      	pop	{r7, pc}

08002988 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	46bd      	mov	sp, r7
 800299a:	b002      	add	sp, #8
 800299c:	bd80      	pop	{r7, pc}

0800299e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b084      	sub	sp, #16
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
 80029a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	1c5a      	adds	r2, r3, #1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	601a      	str	r2, [r3, #0]
}
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	46bd      	mov	sp, r7
 80029de:	b004      	add	sp, #16
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b084      	sub	sp, #16
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
 80029ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	3301      	adds	r3, #1
 80029f6:	d103      	bne.n	8002a00 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	e00c      	b.n	8002a1a <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3308      	adds	r3, #8
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	e002      	b.n	8002a0e <vListInsert+0x2c>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d2f6      	bcs.n	8002a08 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	601a      	str	r2, [r3, #0]
}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b004      	add	sp, #16
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b084      	sub	sp, #16
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6892      	ldr	r2, [r2, #8]
 8002a64:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6852      	ldr	r2, [r2, #4]
 8002a6e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d103      	bne.n	8002a82 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	1e5a      	subs	r2, r3, #1
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
}
 8002a96:	0018      	movs	r0, r3
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	b004      	add	sp, #16
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002a9e:	b590      	push	{r4, r7, lr}
 8002aa0:	b08d      	sub	sp, #52	; 0x34
 8002aa2:	af04      	add	r7, sp, #16
 8002aa4:	60f8      	str	r0, [r7, #12]
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	607a      	str	r2, [r7, #4]
 8002aaa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <xTaskCreateStatic+0x18>
 8002ab2:	b672      	cpsid	i
 8002ab4:	e7fe      	b.n	8002ab4 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8002ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <xTaskCreateStatic+0x22>
 8002abc:	b672      	cpsid	i
 8002abe:	e7fe      	b.n	8002abe <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002ac0:	2354      	movs	r3, #84	; 0x54
 8002ac2:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	2b54      	cmp	r3, #84	; 0x54
 8002ac8:	d001      	beq.n	8002ace <xTaskCreateStatic+0x30>
 8002aca:	b672      	cpsid	i
 8002acc:	e7fe      	b.n	8002acc <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002ace:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d020      	beq.n	8002b18 <xTaskCreateStatic+0x7a>
 8002ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d01d      	beq.n	8002b18 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ade:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ae4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	2251      	movs	r2, #81	; 0x51
 8002aea:	2102      	movs	r1, #2
 8002aec:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002aee:	683c      	ldr	r4, [r7, #0]
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	68b9      	ldr	r1, [r7, #8]
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	2300      	movs	r3, #0
 8002af8:	9303      	str	r3, [sp, #12]
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	9302      	str	r3, [sp, #8]
 8002afe:	2318      	movs	r3, #24
 8002b00:	18fb      	adds	r3, r7, r3
 8002b02:	9301      	str	r3, [sp, #4]
 8002b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	0023      	movs	r3, r4
 8002b0a:	f000 f859 	bl	8002bc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	0018      	movs	r0, r3
 8002b12:	f000 f8d7 	bl	8002cc4 <prvAddNewTaskToReadyList>
 8002b16:	e001      	b.n	8002b1c <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002b1c:	69bb      	ldr	r3, [r7, #24]
	}
 8002b1e:	0018      	movs	r0, r3
 8002b20:	46bd      	mov	sp, r7
 8002b22:	b009      	add	sp, #36	; 0x24
 8002b24:	bd90      	pop	{r4, r7, pc}

08002b26 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002b26:	b590      	push	{r4, r7, lr}
 8002b28:	b08d      	sub	sp, #52	; 0x34
 8002b2a:	af04      	add	r7, sp, #16
 8002b2c:	60f8      	str	r0, [r7, #12]
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	603b      	str	r3, [r7, #0]
 8002b32:	1dbb      	adds	r3, r7, #6
 8002b34:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002b36:	1dbb      	adds	r3, r7, #6
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	f000 fd9f 	bl	8003680 <pvPortMalloc>
 8002b42:	0003      	movs	r3, r0
 8002b44:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d010      	beq.n	8002b6e <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002b4c:	2054      	movs	r0, #84	; 0x54
 8002b4e:	f000 fd97 	bl	8003680 <pvPortMalloc>
 8002b52:	0003      	movs	r3, r0
 8002b54:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	631a      	str	r2, [r3, #48]	; 0x30
 8002b62:	e006      	b.n	8002b72 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	0018      	movs	r0, r3
 8002b68:	f000 fe30 	bl	80037cc <vPortFree>
 8002b6c:	e001      	b.n	8002b72 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d01a      	beq.n	8002bae <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	2251      	movs	r2, #81	; 0x51
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b80:	1dbb      	adds	r3, r7, #6
 8002b82:	881a      	ldrh	r2, [r3, #0]
 8002b84:	683c      	ldr	r4, [r7, #0]
 8002b86:	68b9      	ldr	r1, [r7, #8]
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	9303      	str	r3, [sp, #12]
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	9302      	str	r3, [sp, #8]
 8002b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b94:	9301      	str	r3, [sp, #4]
 8002b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	0023      	movs	r3, r4
 8002b9c:	f000 f810 	bl	8002bc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	f000 f88e 	bl	8002cc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	61bb      	str	r3, [r7, #24]
 8002bac:	e002      	b.n	8002bb4 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	425b      	negs	r3, r3
 8002bb2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002bb4:	69bb      	ldr	r3, [r7, #24]
	}
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	b009      	add	sp, #36	; 0x24
 8002bbc:	bd90      	pop	{r4, r7, pc}
	...

08002bc0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
 8002bcc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	493a      	ldr	r1, [pc, #232]	; (8002cc0 <prvInitialiseNewTask+0x100>)
 8002bd6:	468c      	mov	ip, r1
 8002bd8:	4463      	add	r3, ip
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	18d3      	adds	r3, r2, r3
 8002bde:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	2207      	movs	r2, #7
 8002be4:	4393      	bics	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	2207      	movs	r2, #7
 8002bec:	4013      	ands	r3, r2
 8002bee:	d001      	beq.n	8002bf4 <prvInitialiseNewTask+0x34>
 8002bf0:	b672      	cpsid	i
 8002bf2:	e7fe      	b.n	8002bf2 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d020      	beq.n	8002c3c <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	e013      	b.n	8002c28 <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	18d3      	adds	r3, r2, r3
 8002c06:	7818      	ldrb	r0, [r3, #0]
 8002c08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c0a:	2134      	movs	r1, #52	; 0x34
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	18d3      	adds	r3, r2, r3
 8002c10:	185b      	adds	r3, r3, r1
 8002c12:	1c02      	adds	r2, r0, #0
 8002c14:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	18d3      	adds	r3, r2, r3
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d006      	beq.n	8002c30 <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	3301      	adds	r3, #1
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	2b0f      	cmp	r3, #15
 8002c2c:	d9e8      	bls.n	8002c00 <prvInitialiseNewTask+0x40>
 8002c2e:	e000      	b.n	8002c32 <prvInitialiseNewTask+0x72>
			{
				break;
 8002c30:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c34:	2243      	movs	r2, #67	; 0x43
 8002c36:	2100      	movs	r1, #0
 8002c38:	5499      	strb	r1, [r3, r2]
 8002c3a:	e003      	b.n	8002c44 <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3e:	2234      	movs	r2, #52	; 0x34
 8002c40:	2100      	movs	r1, #0
 8002c42:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	2b06      	cmp	r3, #6
 8002c48:	d901      	bls.n	8002c4e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c4a:	2306      	movs	r3, #6
 8002c4c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c50:	6a3a      	ldr	r2, [r7, #32]
 8002c52:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c56:	6a3a      	ldr	r2, [r7, #32]
 8002c58:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c62:	3304      	adds	r3, #4
 8002c64:	0018      	movs	r0, r3
 8002c66:	f7ff fe8f 	bl	8002988 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6c:	3318      	adds	r3, #24
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f7ff fe8a 	bl	8002988 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c78:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	2207      	movs	r2, #7
 8002c7e:	1ad2      	subs	r2, r2, r3
 8002c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c82:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c88:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c92:	2250      	movs	r2, #80	; 0x50
 8002c94:	2100      	movs	r1, #0
 8002c96:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	68f9      	ldr	r1, [r7, #12]
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	f000 fbba 	bl	8003418 <pxPortInitialiseStack>
 8002ca4:	0002      	movs	r2, r0
 8002ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d002      	beq.n	8002cb6 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	b006      	add	sp, #24
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	3fffffff 	.word	0x3fffffff

08002cc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002ccc:	f000 fc40 	bl	8003550 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002cd0:	4b28      	ldr	r3, [pc, #160]	; (8002d74 <prvAddNewTaskToReadyList+0xb0>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	4b27      	ldr	r3, [pc, #156]	; (8002d74 <prvAddNewTaskToReadyList+0xb0>)
 8002cd8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002cda:	4b27      	ldr	r3, [pc, #156]	; (8002d78 <prvAddNewTaskToReadyList+0xb4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d109      	bne.n	8002cf6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002ce2:	4b25      	ldr	r3, [pc, #148]	; (8002d78 <prvAddNewTaskToReadyList+0xb4>)
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ce8:	4b22      	ldr	r3, [pc, #136]	; (8002d74 <prvAddNewTaskToReadyList+0xb0>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d110      	bne.n	8002d12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002cf0:	f000 fa6a 	bl	80031c8 <prvInitialiseTaskLists>
 8002cf4:	e00d      	b.n	8002d12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002cf6:	4b21      	ldr	r3, [pc, #132]	; (8002d7c <prvAddNewTaskToReadyList+0xb8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d109      	bne.n	8002d12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002cfe:	4b1e      	ldr	r3, [pc, #120]	; (8002d78 <prvAddNewTaskToReadyList+0xb4>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d802      	bhi.n	8002d12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002d0c:	4b1a      	ldr	r3, [pc, #104]	; (8002d78 <prvAddNewTaskToReadyList+0xb4>)
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002d12:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <prvAddNewTaskToReadyList+0xbc>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	1c5a      	adds	r2, r3, #1
 8002d18:	4b19      	ldr	r3, [pc, #100]	; (8002d80 <prvAddNewTaskToReadyList+0xbc>)
 8002d1a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d20:	4b18      	ldr	r3, [pc, #96]	; (8002d84 <prvAddNewTaskToReadyList+0xc0>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d903      	bls.n	8002d30 <prvAddNewTaskToReadyList+0x6c>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d2c:	4b15      	ldr	r3, [pc, #84]	; (8002d84 <prvAddNewTaskToReadyList+0xc0>)
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d34:	0013      	movs	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	189b      	adds	r3, r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4a12      	ldr	r2, [pc, #72]	; (8002d88 <prvAddNewTaskToReadyList+0xc4>)
 8002d3e:	189a      	adds	r2, r3, r2
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3304      	adds	r3, #4
 8002d44:	0019      	movs	r1, r3
 8002d46:	0010      	movs	r0, r2
 8002d48:	f7ff fe29 	bl	800299e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002d4c:	f000 fc12 	bl	8003574 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002d50:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <prvAddNewTaskToReadyList+0xb8>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d008      	beq.n	8002d6a <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d58:	4b07      	ldr	r3, [pc, #28]	; (8002d78 <prvAddNewTaskToReadyList+0xb4>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d201      	bcs.n	8002d6a <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002d66:	f000 fbe3 	bl	8003530 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	b002      	add	sp, #8
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	2000044c 	.word	0x2000044c
 8002d78:	2000034c 	.word	0x2000034c
 8002d7c:	20000458 	.word	0x20000458
 8002d80:	20000468 	.word	0x20000468
 8002d84:	20000454 	.word	0x20000454
 8002d88:	20000350 	.word	0x20000350

08002d8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002d94:	2300      	movs	r3, #0
 8002d96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d010      	beq.n	8002dc0 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002d9e:	4b0d      	ldr	r3, [pc, #52]	; (8002dd4 <vTaskDelay+0x48>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <vTaskDelay+0x1e>
 8002da6:	b672      	cpsid	i
 8002da8:	e7fe      	b.n	8002da8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8002daa:	f000 f863 	bl	8002e74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2100      	movs	r1, #0
 8002db2:	0018      	movs	r0, r3
 8002db4:	f000 fadc 	bl	8003370 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002db8:	f000 f868 	bl	8002e8c <xTaskResumeAll>
 8002dbc:	0003      	movs	r3, r0
 8002dbe:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8002dc6:	f000 fbb3 	bl	8003530 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	b004      	add	sp, #16
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	20000474 	.word	0x20000474

08002dd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002dd8:	b590      	push	{r4, r7, lr}
 8002dda:	b089      	sub	sp, #36	; 0x24
 8002ddc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002de6:	003a      	movs	r2, r7
 8002de8:	1d39      	adds	r1, r7, #4
 8002dea:	2308      	movs	r3, #8
 8002dec:	18fb      	adds	r3, r7, r3
 8002dee:	0018      	movs	r0, r3
 8002df0:	f7fd fb5a 	bl	80004a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002df4:	683c      	ldr	r4, [r7, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	4918      	ldr	r1, [pc, #96]	; (8002e5c <vTaskStartScheduler+0x84>)
 8002dfc:	4818      	ldr	r0, [pc, #96]	; (8002e60 <vTaskStartScheduler+0x88>)
 8002dfe:	9202      	str	r2, [sp, #8]
 8002e00:	9301      	str	r3, [sp, #4]
 8002e02:	2300      	movs	r3, #0
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	2300      	movs	r3, #0
 8002e08:	0022      	movs	r2, r4
 8002e0a:	f7ff fe48 	bl	8002a9e <xTaskCreateStatic>
 8002e0e:	0002      	movs	r2, r0
 8002e10:	4b14      	ldr	r3, [pc, #80]	; (8002e64 <vTaskStartScheduler+0x8c>)
 8002e12:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002e14:	4b13      	ldr	r3, [pc, #76]	; (8002e64 <vTaskStartScheduler+0x8c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d002      	beq.n	8002e22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	e001      	b.n	8002e26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d10d      	bne.n	8002e48 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8002e2c:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002e2e:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <vTaskStartScheduler+0x90>)
 8002e30:	2201      	movs	r2, #1
 8002e32:	4252      	negs	r2, r2
 8002e34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002e36:	4b0d      	ldr	r3, [pc, #52]	; (8002e6c <vTaskStartScheduler+0x94>)
 8002e38:	2201      	movs	r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002e3c:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <vTaskStartScheduler+0x98>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002e42:	f000 fb51 	bl	80034e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002e46:	e004      	b.n	8002e52 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	d101      	bne.n	8002e52 <vTaskStartScheduler+0x7a>
 8002e4e:	b672      	cpsid	i
 8002e50:	e7fe      	b.n	8002e50 <vTaskStartScheduler+0x78>
}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	46bd      	mov	sp, r7
 8002e56:	b005      	add	sp, #20
 8002e58:	bd90      	pop	{r4, r7, pc}
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	08003a84 	.word	0x08003a84
 8002e60:	080031a9 	.word	0x080031a9
 8002e64:	20000470 	.word	0x20000470
 8002e68:	2000046c 	.word	0x2000046c
 8002e6c:	20000458 	.word	0x20000458
 8002e70:	20000450 	.word	0x20000450

08002e74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002e78:	4b03      	ldr	r3, [pc, #12]	; (8002e88 <vTaskSuspendAll+0x14>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	1c5a      	adds	r2, r3, #1
 8002e7e:	4b02      	ldr	r3, [pc, #8]	; (8002e88 <vTaskSuspendAll+0x14>)
 8002e80:	601a      	str	r2, [r3, #0]
	portMEMORY_BARRIER();
}
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	20000474 	.word	0x20000474

08002e8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002e92:	2300      	movs	r3, #0
 8002e94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002e96:	2300      	movs	r3, #0
 8002e98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002e9a:	4b3a      	ldr	r3, [pc, #232]	; (8002f84 <xTaskResumeAll+0xf8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <xTaskResumeAll+0x1a>
 8002ea2:	b672      	cpsid	i
 8002ea4:	e7fe      	b.n	8002ea4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002ea6:	f000 fb53 	bl	8003550 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002eaa:	4b36      	ldr	r3, [pc, #216]	; (8002f84 <xTaskResumeAll+0xf8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	1e5a      	subs	r2, r3, #1
 8002eb0:	4b34      	ldr	r3, [pc, #208]	; (8002f84 <xTaskResumeAll+0xf8>)
 8002eb2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002eb4:	4b33      	ldr	r3, [pc, #204]	; (8002f84 <xTaskResumeAll+0xf8>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d15b      	bne.n	8002f74 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ebc:	4b32      	ldr	r3, [pc, #200]	; (8002f88 <xTaskResumeAll+0xfc>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d057      	beq.n	8002f74 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ec4:	e02f      	b.n	8002f26 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ec6:	4b31      	ldr	r3, [pc, #196]	; (8002f8c <xTaskResumeAll+0x100>)
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	3318      	adds	r3, #24
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f7ff fdbb 	bl	8002a4e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	3304      	adds	r3, #4
 8002edc:	0018      	movs	r0, r3
 8002ede:	f7ff fdb6 	bl	8002a4e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee6:	4b2a      	ldr	r3, [pc, #168]	; (8002f90 <xTaskResumeAll+0x104>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d903      	bls.n	8002ef6 <xTaskResumeAll+0x6a>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef2:	4b27      	ldr	r3, [pc, #156]	; (8002f90 <xTaskResumeAll+0x104>)
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002efa:	0013      	movs	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	189b      	adds	r3, r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4a24      	ldr	r2, [pc, #144]	; (8002f94 <xTaskResumeAll+0x108>)
 8002f04:	189a      	adds	r2, r3, r2
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	3304      	adds	r3, #4
 8002f0a:	0019      	movs	r1, r3
 8002f0c:	0010      	movs	r0, r2
 8002f0e:	f7ff fd46 	bl	800299e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f16:	4b20      	ldr	r3, [pc, #128]	; (8002f98 <xTaskResumeAll+0x10c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d302      	bcc.n	8002f26 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8002f20:	4b1e      	ldr	r3, [pc, #120]	; (8002f9c <xTaskResumeAll+0x110>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f26:	4b19      	ldr	r3, [pc, #100]	; (8002f8c <xTaskResumeAll+0x100>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1cb      	bne.n	8002ec6 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002f34:	f000 f9e2 	bl	80032fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002f38:	4b19      	ldr	r3, [pc, #100]	; (8002fa0 <xTaskResumeAll+0x114>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00f      	beq.n	8002f64 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002f44:	f000 f82e 	bl	8002fa4 <xTaskIncrementTick>
 8002f48:	1e03      	subs	r3, r0, #0
 8002f4a:	d002      	beq.n	8002f52 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8002f4c:	4b13      	ldr	r3, [pc, #76]	; (8002f9c <xTaskResumeAll+0x110>)
 8002f4e:	2201      	movs	r2, #1
 8002f50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3b01      	subs	r3, #1
 8002f56:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f2      	bne.n	8002f44 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8002f5e:	4b10      	ldr	r3, [pc, #64]	; (8002fa0 <xTaskResumeAll+0x114>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002f64:	4b0d      	ldr	r3, [pc, #52]	; (8002f9c <xTaskResumeAll+0x110>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002f70:	f000 fade 	bl	8003530 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002f74:	f000 fafe 	bl	8003574 <vPortExitCritical>

	return xAlreadyYielded;
 8002f78:	68bb      	ldr	r3, [r7, #8]
}
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	b004      	add	sp, #16
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	20000474 	.word	0x20000474
 8002f88:	2000044c 	.word	0x2000044c
 8002f8c:	2000040c 	.word	0x2000040c
 8002f90:	20000454 	.word	0x20000454
 8002f94:	20000350 	.word	0x20000350
 8002f98:	2000034c 	.word	0x2000034c
 8002f9c:	20000460 	.word	0x20000460
 8002fa0:	2000045c 	.word	0x2000045c

08002fa4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002faa:	2300      	movs	r3, #0
 8002fac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fae:	4b4a      	ldr	r3, [pc, #296]	; (80030d8 <xTaskIncrementTick+0x134>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d000      	beq.n	8002fb8 <xTaskIncrementTick+0x14>
 8002fb6:	e07e      	b.n	80030b6 <xTaskIncrementTick+0x112>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002fb8:	4b48      	ldr	r3, [pc, #288]	; (80030dc <xTaskIncrementTick+0x138>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002fc0:	4b46      	ldr	r3, [pc, #280]	; (80030dc <xTaskIncrementTick+0x138>)
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d117      	bne.n	8002ffc <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8002fcc:	4b44      	ldr	r3, [pc, #272]	; (80030e0 <xTaskIncrementTick+0x13c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <xTaskIncrementTick+0x36>
 8002fd6:	b672      	cpsid	i
 8002fd8:	e7fe      	b.n	8002fd8 <xTaskIncrementTick+0x34>
 8002fda:	4b41      	ldr	r3, [pc, #260]	; (80030e0 <xTaskIncrementTick+0x13c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	4b40      	ldr	r3, [pc, #256]	; (80030e4 <xTaskIncrementTick+0x140>)
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	4b3e      	ldr	r3, [pc, #248]	; (80030e0 <xTaskIncrementTick+0x13c>)
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	4b3e      	ldr	r3, [pc, #248]	; (80030e4 <xTaskIncrementTick+0x140>)
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	4b3e      	ldr	r3, [pc, #248]	; (80030e8 <xTaskIncrementTick+0x144>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	1c5a      	adds	r2, r3, #1
 8002ff4:	4b3c      	ldr	r3, [pc, #240]	; (80030e8 <xTaskIncrementTick+0x144>)
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	f000 f980 	bl	80032fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002ffc:	4b3b      	ldr	r3, [pc, #236]	; (80030ec <xTaskIncrementTick+0x148>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	429a      	cmp	r2, r3
 8003004:	d349      	bcc.n	800309a <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003006:	4b36      	ldr	r3, [pc, #216]	; (80030e0 <xTaskIncrementTick+0x13c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d104      	bne.n	800301a <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003010:	4b36      	ldr	r3, [pc, #216]	; (80030ec <xTaskIncrementTick+0x148>)
 8003012:	2201      	movs	r2, #1
 8003014:	4252      	negs	r2, r2
 8003016:	601a      	str	r2, [r3, #0]
					break;
 8003018:	e03f      	b.n	800309a <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800301a:	4b31      	ldr	r3, [pc, #196]	; (80030e0 <xTaskIncrementTick+0x13c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	429a      	cmp	r2, r3
 8003030:	d203      	bcs.n	800303a <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003032:	4b2e      	ldr	r3, [pc, #184]	; (80030ec <xTaskIncrementTick+0x148>)
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003038:	e02f      	b.n	800309a <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	3304      	adds	r3, #4
 800303e:	0018      	movs	r0, r3
 8003040:	f7ff fd05 	bl	8002a4e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003048:	2b00      	cmp	r3, #0
 800304a:	d004      	beq.n	8003056 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	3318      	adds	r3, #24
 8003050:	0018      	movs	r0, r3
 8003052:	f7ff fcfc 	bl	8002a4e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800305a:	4b25      	ldr	r3, [pc, #148]	; (80030f0 <xTaskIncrementTick+0x14c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	429a      	cmp	r2, r3
 8003060:	d903      	bls.n	800306a <xTaskIncrementTick+0xc6>
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003066:	4b22      	ldr	r3, [pc, #136]	; (80030f0 <xTaskIncrementTick+0x14c>)
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800306e:	0013      	movs	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	189b      	adds	r3, r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4a1f      	ldr	r2, [pc, #124]	; (80030f4 <xTaskIncrementTick+0x150>)
 8003078:	189a      	adds	r2, r3, r2
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	3304      	adds	r3, #4
 800307e:	0019      	movs	r1, r3
 8003080:	0010      	movs	r0, r2
 8003082:	f7ff fc8c 	bl	800299e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308a:	4b1b      	ldr	r3, [pc, #108]	; (80030f8 <xTaskIncrementTick+0x154>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	429a      	cmp	r2, r3
 8003092:	d3b8      	bcc.n	8003006 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8003094:	2301      	movs	r3, #1
 8003096:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003098:	e7b5      	b.n	8003006 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800309a:	4b17      	ldr	r3, [pc, #92]	; (80030f8 <xTaskIncrementTick+0x154>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a0:	4914      	ldr	r1, [pc, #80]	; (80030f4 <xTaskIncrementTick+0x150>)
 80030a2:	0013      	movs	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	189b      	adds	r3, r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	585b      	ldr	r3, [r3, r1]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d907      	bls.n	80030c0 <xTaskIncrementTick+0x11c>
			{
				xSwitchRequired = pdTRUE;
 80030b0:	2301      	movs	r3, #1
 80030b2:	617b      	str	r3, [r7, #20]
 80030b4:	e004      	b.n	80030c0 <xTaskIncrementTick+0x11c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80030b6:	4b11      	ldr	r3, [pc, #68]	; (80030fc <xTaskIncrementTick+0x158>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	4b0f      	ldr	r3, [pc, #60]	; (80030fc <xTaskIncrementTick+0x158>)
 80030be:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80030c0:	4b0f      	ldr	r3, [pc, #60]	; (8003100 <xTaskIncrementTick+0x15c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <xTaskIncrementTick+0x128>
		{
			xSwitchRequired = pdTRUE;
 80030c8:	2301      	movs	r3, #1
 80030ca:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80030cc:	697b      	ldr	r3, [r7, #20]
}
 80030ce:	0018      	movs	r0, r3
 80030d0:	46bd      	mov	sp, r7
 80030d2:	b006      	add	sp, #24
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	46c0      	nop			; (mov r8, r8)
 80030d8:	20000474 	.word	0x20000474
 80030dc:	20000450 	.word	0x20000450
 80030e0:	20000404 	.word	0x20000404
 80030e4:	20000408 	.word	0x20000408
 80030e8:	20000464 	.word	0x20000464
 80030ec:	2000046c 	.word	0x2000046c
 80030f0:	20000454 	.word	0x20000454
 80030f4:	20000350 	.word	0x20000350
 80030f8:	2000034c 	.word	0x2000034c
 80030fc:	2000045c 	.word	0x2000045c
 8003100:	20000460 	.word	0x20000460

08003104 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800310a:	4b22      	ldr	r3, [pc, #136]	; (8003194 <vTaskSwitchContext+0x90>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003112:	4b21      	ldr	r3, [pc, #132]	; (8003198 <vTaskSwitchContext+0x94>)
 8003114:	2201      	movs	r2, #1
 8003116:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003118:	e037      	b.n	800318a <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 800311a:	4b1f      	ldr	r3, [pc, #124]	; (8003198 <vTaskSwitchContext+0x94>)
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003120:	4b1e      	ldr	r3, [pc, #120]	; (800319c <vTaskSwitchContext+0x98>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	607b      	str	r3, [r7, #4]
 8003126:	e007      	b.n	8003138 <vTaskSwitchContext+0x34>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <vTaskSwitchContext+0x2e>
 800312e:	b672      	cpsid	i
 8003130:	e7fe      	b.n	8003130 <vTaskSwitchContext+0x2c>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	3b01      	subs	r3, #1
 8003136:	607b      	str	r3, [r7, #4]
 8003138:	4919      	ldr	r1, [pc, #100]	; (80031a0 <vTaskSwitchContext+0x9c>)
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	0013      	movs	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	189b      	adds	r3, r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	585b      	ldr	r3, [r3, r1]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0ee      	beq.n	8003128 <vTaskSwitchContext+0x24>
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	0013      	movs	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	189b      	adds	r3, r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4a12      	ldr	r2, [pc, #72]	; (80031a0 <vTaskSwitchContext+0x9c>)
 8003156:	189b      	adds	r3, r3, r2
 8003158:	603b      	str	r3, [r7, #0]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	605a      	str	r2, [r3, #4]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	3308      	adds	r3, #8
 800316c:	429a      	cmp	r2, r3
 800316e:	d104      	bne.n	800317a <vTaskSwitchContext+0x76>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	605a      	str	r2, [r3, #4]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	68da      	ldr	r2, [r3, #12]
 8003180:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <vTaskSwitchContext+0xa0>)
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	4b05      	ldr	r3, [pc, #20]	; (800319c <vTaskSwitchContext+0x98>)
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	601a      	str	r2, [r3, #0]
}
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	46bd      	mov	sp, r7
 800318e:	b002      	add	sp, #8
 8003190:	bd80      	pop	{r7, pc}
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	20000474 	.word	0x20000474
 8003198:	20000460 	.word	0x20000460
 800319c:	20000454 	.word	0x20000454
 80031a0:	20000350 	.word	0x20000350
 80031a4:	2000034c 	.word	0x2000034c

080031a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80031b0:	f000 f84e 	bl	8003250 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80031b4:	4b03      	ldr	r3, [pc, #12]	; (80031c4 <prvIdleTask+0x1c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d9f9      	bls.n	80031b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80031bc:	f000 f9b8 	bl	8003530 <vPortYield>
		prvCheckTasksWaitingTermination();
 80031c0:	e7f6      	b.n	80031b0 <prvIdleTask+0x8>
 80031c2:	46c0      	nop			; (mov r8, r8)
 80031c4:	20000350 	.word	0x20000350

080031c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031ce:	2300      	movs	r3, #0
 80031d0:	607b      	str	r3, [r7, #4]
 80031d2:	e00c      	b.n	80031ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	0013      	movs	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	189b      	adds	r3, r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4a14      	ldr	r2, [pc, #80]	; (8003230 <prvInitialiseTaskLists+0x68>)
 80031e0:	189b      	adds	r3, r3, r2
 80031e2:	0018      	movs	r0, r3
 80031e4:	f7ff fbb2 	bl	800294c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3301      	adds	r3, #1
 80031ec:	607b      	str	r3, [r7, #4]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b06      	cmp	r3, #6
 80031f2:	d9ef      	bls.n	80031d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80031f4:	4b0f      	ldr	r3, [pc, #60]	; (8003234 <prvInitialiseTaskLists+0x6c>)
 80031f6:	0018      	movs	r0, r3
 80031f8:	f7ff fba8 	bl	800294c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80031fc:	4b0e      	ldr	r3, [pc, #56]	; (8003238 <prvInitialiseTaskLists+0x70>)
 80031fe:	0018      	movs	r0, r3
 8003200:	f7ff fba4 	bl	800294c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003204:	4b0d      	ldr	r3, [pc, #52]	; (800323c <prvInitialiseTaskLists+0x74>)
 8003206:	0018      	movs	r0, r3
 8003208:	f7ff fba0 	bl	800294c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800320c:	4b0c      	ldr	r3, [pc, #48]	; (8003240 <prvInitialiseTaskLists+0x78>)
 800320e:	0018      	movs	r0, r3
 8003210:	f7ff fb9c 	bl	800294c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003214:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <prvInitialiseTaskLists+0x7c>)
 8003216:	0018      	movs	r0, r3
 8003218:	f7ff fb98 	bl	800294c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800321c:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <prvInitialiseTaskLists+0x80>)
 800321e:	4a05      	ldr	r2, [pc, #20]	; (8003234 <prvInitialiseTaskLists+0x6c>)
 8003220:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003222:	4b0a      	ldr	r3, [pc, #40]	; (800324c <prvInitialiseTaskLists+0x84>)
 8003224:	4a04      	ldr	r2, [pc, #16]	; (8003238 <prvInitialiseTaskLists+0x70>)
 8003226:	601a      	str	r2, [r3, #0]
}
 8003228:	46c0      	nop			; (mov r8, r8)
 800322a:	46bd      	mov	sp, r7
 800322c:	b002      	add	sp, #8
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20000350 	.word	0x20000350
 8003234:	200003dc 	.word	0x200003dc
 8003238:	200003f0 	.word	0x200003f0
 800323c:	2000040c 	.word	0x2000040c
 8003240:	20000420 	.word	0x20000420
 8003244:	20000438 	.word	0x20000438
 8003248:	20000404 	.word	0x20000404
 800324c:	20000408 	.word	0x20000408

08003250 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003256:	e01a      	b.n	800328e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8003258:	f000 f97a 	bl	8003550 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800325c:	4b10      	ldr	r3, [pc, #64]	; (80032a0 <prvCheckTasksWaitingTermination+0x50>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3304      	adds	r3, #4
 8003268:	0018      	movs	r0, r3
 800326a:	f7ff fbf0 	bl	8002a4e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800326e:	4b0d      	ldr	r3, [pc, #52]	; (80032a4 <prvCheckTasksWaitingTermination+0x54>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	1e5a      	subs	r2, r3, #1
 8003274:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <prvCheckTasksWaitingTermination+0x54>)
 8003276:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003278:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <prvCheckTasksWaitingTermination+0x58>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	1e5a      	subs	r2, r3, #1
 800327e:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <prvCheckTasksWaitingTermination+0x58>)
 8003280:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8003282:	f000 f977 	bl	8003574 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	0018      	movs	r0, r3
 800328a:	f000 f80f 	bl	80032ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800328e:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <prvCheckTasksWaitingTermination+0x58>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1e0      	bne.n	8003258 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	46c0      	nop			; (mov r8, r8)
 800329a:	46bd      	mov	sp, r7
 800329c:	b002      	add	sp, #8
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	20000420 	.word	0x20000420
 80032a4:	2000044c 	.word	0x2000044c
 80032a8:	20000434 	.word	0x20000434

080032ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2251      	movs	r2, #81	; 0x51
 80032b8:	5c9b      	ldrb	r3, [r3, r2]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d109      	bne.n	80032d2 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	0018      	movs	r0, r3
 80032c4:	f000 fa82 	bl	80037cc <vPortFree>
				vPortFree( pxTCB );
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	0018      	movs	r0, r3
 80032cc:	f000 fa7e 	bl	80037cc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80032d0:	e010      	b.n	80032f4 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2251      	movs	r2, #81	; 0x51
 80032d6:	5c9b      	ldrb	r3, [r3, r2]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d104      	bne.n	80032e6 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	0018      	movs	r0, r3
 80032e0:	f000 fa74 	bl	80037cc <vPortFree>
	}
 80032e4:	e006      	b.n	80032f4 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2251      	movs	r2, #81	; 0x51
 80032ea:	5c9b      	ldrb	r3, [r3, r2]
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d001      	beq.n	80032f4 <prvDeleteTCB+0x48>
 80032f0:	b672      	cpsid	i
 80032f2:	e7fe      	b.n	80032f2 <prvDeleteTCB+0x46>
	}
 80032f4:	46c0      	nop			; (mov r8, r8)
 80032f6:	46bd      	mov	sp, r7
 80032f8:	b002      	add	sp, #8
 80032fa:	bd80      	pop	{r7, pc}

080032fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003302:	4b0b      	ldr	r3, [pc, #44]	; (8003330 <prvResetNextTaskUnblockTime+0x34>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d104      	bne.n	8003316 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800330c:	4b09      	ldr	r3, [pc, #36]	; (8003334 <prvResetNextTaskUnblockTime+0x38>)
 800330e:	2201      	movs	r2, #1
 8003310:	4252      	negs	r2, r2
 8003312:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003314:	e008      	b.n	8003328 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003316:	4b06      	ldr	r3, [pc, #24]	; (8003330 <prvResetNextTaskUnblockTime+0x34>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	4b03      	ldr	r3, [pc, #12]	; (8003334 <prvResetNextTaskUnblockTime+0x38>)
 8003326:	601a      	str	r2, [r3, #0]
}
 8003328:	46c0      	nop			; (mov r8, r8)
 800332a:	46bd      	mov	sp, r7
 800332c:	b002      	add	sp, #8
 800332e:	bd80      	pop	{r7, pc}
 8003330:	20000404 	.word	0x20000404
 8003334:	2000046c 	.word	0x2000046c

08003338 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800333e:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <xTaskGetSchedulerState+0x30>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d102      	bne.n	800334c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003346:	2301      	movs	r3, #1
 8003348:	607b      	str	r3, [r7, #4]
 800334a:	e008      	b.n	800335e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800334c:	4b07      	ldr	r3, [pc, #28]	; (800336c <xTaskGetSchedulerState+0x34>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d102      	bne.n	800335a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003354:	2302      	movs	r3, #2
 8003356:	607b      	str	r3, [r7, #4]
 8003358:	e001      	b.n	800335e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800335a:	2300      	movs	r3, #0
 800335c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800335e:	687b      	ldr	r3, [r7, #4]
	}
 8003360:	0018      	movs	r0, r3
 8003362:	46bd      	mov	sp, r7
 8003364:	b002      	add	sp, #8
 8003366:	bd80      	pop	{r7, pc}
 8003368:	20000458 	.word	0x20000458
 800336c:	20000474 	.word	0x20000474

08003370 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800337a:	4b21      	ldr	r3, [pc, #132]	; (8003400 <prvAddCurrentTaskToDelayedList+0x90>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003380:	4b20      	ldr	r3, [pc, #128]	; (8003404 <prvAddCurrentTaskToDelayedList+0x94>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	3304      	adds	r3, #4
 8003386:	0018      	movs	r0, r3
 8003388:	f7ff fb61 	bl	8002a4e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3301      	adds	r3, #1
 8003390:	d10b      	bne.n	80033aa <prvAddCurrentTaskToDelayedList+0x3a>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d008      	beq.n	80033aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003398:	4b1a      	ldr	r3, [pc, #104]	; (8003404 <prvAddCurrentTaskToDelayedList+0x94>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	1d1a      	adds	r2, r3, #4
 800339e:	4b1a      	ldr	r3, [pc, #104]	; (8003408 <prvAddCurrentTaskToDelayedList+0x98>)
 80033a0:	0011      	movs	r1, r2
 80033a2:	0018      	movs	r0, r3
 80033a4:	f7ff fafb 	bl	800299e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80033a8:	e026      	b.n	80033f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	18d3      	adds	r3, r2, r3
 80033b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033b2:	4b14      	ldr	r3, [pc, #80]	; (8003404 <prvAddCurrentTaskToDelayedList+0x94>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d209      	bcs.n	80033d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033c2:	4b12      	ldr	r3, [pc, #72]	; (800340c <prvAddCurrentTaskToDelayedList+0x9c>)
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	4b0f      	ldr	r3, [pc, #60]	; (8003404 <prvAddCurrentTaskToDelayedList+0x94>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	3304      	adds	r3, #4
 80033cc:	0019      	movs	r1, r3
 80033ce:	0010      	movs	r0, r2
 80033d0:	f7ff fb07 	bl	80029e2 <vListInsert>
}
 80033d4:	e010      	b.n	80033f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033d6:	4b0e      	ldr	r3, [pc, #56]	; (8003410 <prvAddCurrentTaskToDelayedList+0xa0>)
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	4b0a      	ldr	r3, [pc, #40]	; (8003404 <prvAddCurrentTaskToDelayedList+0x94>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	3304      	adds	r3, #4
 80033e0:	0019      	movs	r1, r3
 80033e2:	0010      	movs	r0, r2
 80033e4:	f7ff fafd 	bl	80029e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80033e8:	4b0a      	ldr	r3, [pc, #40]	; (8003414 <prvAddCurrentTaskToDelayedList+0xa4>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d202      	bcs.n	80033f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80033f2:	4b08      	ldr	r3, [pc, #32]	; (8003414 <prvAddCurrentTaskToDelayedList+0xa4>)
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	601a      	str	r2, [r3, #0]
}
 80033f8:	46c0      	nop			; (mov r8, r8)
 80033fa:	46bd      	mov	sp, r7
 80033fc:	b004      	add	sp, #16
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	20000450 	.word	0x20000450
 8003404:	2000034c 	.word	0x2000034c
 8003408:	20000438 	.word	0x20000438
 800340c:	20000408 	.word	0x20000408
 8003410:	20000404 	.word	0x20000404
 8003414:	2000046c 	.word	0x2000046c

08003418 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	3b04      	subs	r3, #4
 8003428:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2280      	movs	r2, #128	; 0x80
 800342e:	0452      	lsls	r2, r2, #17
 8003430:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	3b04      	subs	r3, #4
 8003436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	3b04      	subs	r3, #4
 8003442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003444:	4a08      	ldr	r2, [pc, #32]	; (8003468 <pxPortInitialiseStack+0x50>)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	3b14      	subs	r3, #20
 800344e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	3b20      	subs	r3, #32
 800345a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800345c:	68fb      	ldr	r3, [r7, #12]
}
 800345e:	0018      	movs	r0, r3
 8003460:	46bd      	mov	sp, r7
 8003462:	b004      	add	sp, #16
 8003464:	bd80      	pop	{r7, pc}
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	0800346d 	.word	0x0800346d

0800346c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003472:	2300      	movs	r3, #0
 8003474:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003476:	4b08      	ldr	r3, [pc, #32]	; (8003498 <prvTaskExitError+0x2c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	3301      	adds	r3, #1
 800347c:	d001      	beq.n	8003482 <prvTaskExitError+0x16>
 800347e:	b672      	cpsid	i
 8003480:	e7fe      	b.n	8003480 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8003482:	b672      	cpsid	i
	while( ulDummy == 0 )
 8003484:	46c0      	nop			; (mov r8, r8)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0fc      	beq.n	8003486 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800348c:	46c0      	nop			; (mov r8, r8)
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	46bd      	mov	sp, r7
 8003492:	b002      	add	sp, #8
 8003494:	bd80      	pop	{r7, pc}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	20000044 	.word	0x20000044

0800349c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80034a0:	46c0      	nop			; (mov r8, r8)
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
	...

080034b0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80034b0:	4a0b      	ldr	r2, [pc, #44]	; (80034e0 <pxCurrentTCBConst2>)
 80034b2:	6813      	ldr	r3, [r2, #0]
 80034b4:	6818      	ldr	r0, [r3, #0]
 80034b6:	3020      	adds	r0, #32
 80034b8:	f380 8809 	msr	PSP, r0
 80034bc:	2002      	movs	r0, #2
 80034be:	f380 8814 	msr	CONTROL, r0
 80034c2:	f3bf 8f6f 	isb	sy
 80034c6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80034c8:	46ae      	mov	lr, r5
 80034ca:	bc08      	pop	{r3}
 80034cc:	bc04      	pop	{r2}
 80034ce:	b662      	cpsie	i
 80034d0:	4718      	bx	r3
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	46c0      	nop			; (mov r8, r8)
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	46c0      	nop			; (mov r8, r8)
 80034da:	46c0      	nop			; (mov r8, r8)
 80034dc:	46c0      	nop			; (mov r8, r8)
 80034de:	46c0      	nop			; (mov r8, r8)

080034e0 <pxCurrentTCBConst2>:
 80034e0:	2000034c 	.word	0x2000034c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80034e4:	46c0      	nop			; (mov r8, r8)
 80034e6:	46c0      	nop			; (mov r8, r8)

080034e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80034ec:	4b0e      	ldr	r3, [pc, #56]	; (8003528 <xPortStartScheduler+0x40>)
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	4b0d      	ldr	r3, [pc, #52]	; (8003528 <xPortStartScheduler+0x40>)
 80034f2:	21ff      	movs	r1, #255	; 0xff
 80034f4:	0409      	lsls	r1, r1, #16
 80034f6:	430a      	orrs	r2, r1
 80034f8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80034fa:	4b0b      	ldr	r3, [pc, #44]	; (8003528 <xPortStartScheduler+0x40>)
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	4b0a      	ldr	r3, [pc, #40]	; (8003528 <xPortStartScheduler+0x40>)
 8003500:	21ff      	movs	r1, #255	; 0xff
 8003502:	0609      	lsls	r1, r1, #24
 8003504:	430a      	orrs	r2, r1
 8003506:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8003508:	f000 f898 	bl	800363c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800350c:	4b07      	ldr	r3, [pc, #28]	; (800352c <xPortStartScheduler+0x44>)
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8003512:	f7ff ffcd 	bl	80034b0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003516:	f7ff fdf5 	bl	8003104 <vTaskSwitchContext>
	prvTaskExitError();
 800351a:	f7ff ffa7 	bl	800346c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800351e:	2300      	movs	r3, #0
}
 8003520:	0018      	movs	r0, r3
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	e000ed20 	.word	0xe000ed20
 800352c:	20000044 	.word	0x20000044

08003530 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8003534:	4b05      	ldr	r3, [pc, #20]	; (800354c <vPortYield+0x1c>)
 8003536:	2280      	movs	r2, #128	; 0x80
 8003538:	0552      	lsls	r2, r2, #21
 800353a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800353c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003540:	f3bf 8f6f 	isb	sy
}
 8003544:	46c0      	nop			; (mov r8, r8)
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	e000ed04 	.word	0xe000ed04

08003550 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8003554:	b672      	cpsid	i
    uxCriticalNesting++;
 8003556:	4b06      	ldr	r3, [pc, #24]	; (8003570 <vPortEnterCritical+0x20>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	1c5a      	adds	r2, r3, #1
 800355c:	4b04      	ldr	r3, [pc, #16]	; (8003570 <vPortEnterCritical+0x20>)
 800355e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8003560:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003564:	f3bf 8f6f 	isb	sy
}
 8003568:	46c0      	nop			; (mov r8, r8)
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	46c0      	nop			; (mov r8, r8)
 8003570:	20000044 	.word	0x20000044

08003574 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003578:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <vPortExitCritical+0x2c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <vPortExitCritical+0x10>
 8003580:	b672      	cpsid	i
 8003582:	e7fe      	b.n	8003582 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8003584:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <vPortExitCritical+0x2c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	1e5a      	subs	r2, r3, #1
 800358a:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <vPortExitCritical+0x2c>)
 800358c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800358e:	4b04      	ldr	r3, [pc, #16]	; (80035a0 <vPortExitCritical+0x2c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d100      	bne.n	8003598 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8003596:	b662      	cpsie	i
    }
}
 8003598:	46c0      	nop			; (mov r8, r8)
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	46c0      	nop			; (mov r8, r8)
 80035a0:	20000044 	.word	0x20000044

080035a4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80035a4:	f3ef 8010 	mrs	r0, PRIMASK
 80035a8:	b672      	cpsid	i
 80035aa:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 80035ac:	46c0      	nop			; (mov r8, r8)
 80035ae:	0018      	movs	r0, r3

080035b0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80035b0:	f380 8810 	msr	PRIMASK, r0
 80035b4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80035b6:	46c0      	nop			; (mov r8, r8)
	...

080035c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80035c0:	f3ef 8009 	mrs	r0, PSP
 80035c4:	4b0e      	ldr	r3, [pc, #56]	; (8003600 <pxCurrentTCBConst>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	3820      	subs	r0, #32
 80035ca:	6010      	str	r0, [r2, #0]
 80035cc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80035ce:	4644      	mov	r4, r8
 80035d0:	464d      	mov	r5, r9
 80035d2:	4656      	mov	r6, sl
 80035d4:	465f      	mov	r7, fp
 80035d6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80035d8:	b508      	push	{r3, lr}
 80035da:	b672      	cpsid	i
 80035dc:	f7ff fd92 	bl	8003104 <vTaskSwitchContext>
 80035e0:	b662      	cpsie	i
 80035e2:	bc0c      	pop	{r2, r3}
 80035e4:	6811      	ldr	r1, [r2, #0]
 80035e6:	6808      	ldr	r0, [r1, #0]
 80035e8:	3010      	adds	r0, #16
 80035ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80035ec:	46a0      	mov	r8, r4
 80035ee:	46a9      	mov	r9, r5
 80035f0:	46b2      	mov	sl, r6
 80035f2:	46bb      	mov	fp, r7
 80035f4:	f380 8809 	msr	PSP, r0
 80035f8:	3820      	subs	r0, #32
 80035fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80035fc:	4718      	bx	r3
 80035fe:	46c0      	nop			; (mov r8, r8)

08003600 <pxCurrentTCBConst>:
 8003600:	2000034c 	.word	0x2000034c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8003604:	46c0      	nop			; (mov r8, r8)
 8003606:	46c0      	nop			; (mov r8, r8)

08003608 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800360e:	f7ff ffc9 	bl	80035a4 <ulSetInterruptMaskFromISR>
 8003612:	0003      	movs	r3, r0
 8003614:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003616:	f7ff fcc5 	bl	8002fa4 <xTaskIncrementTick>
 800361a:	1e03      	subs	r3, r0, #0
 800361c:	d003      	beq.n	8003626 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800361e:	4b06      	ldr	r3, [pc, #24]	; (8003638 <xPortSysTickHandler+0x30>)
 8003620:	2280      	movs	r2, #128	; 0x80
 8003622:	0552      	lsls	r2, r2, #21
 8003624:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	0018      	movs	r0, r3
 800362a:	f7ff ffc1 	bl	80035b0 <vClearInterruptMaskFromISR>
}
 800362e:	46c0      	nop			; (mov r8, r8)
 8003630:	46bd      	mov	sp, r7
 8003632:	b002      	add	sp, #8
 8003634:	bd80      	pop	{r7, pc}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	e000ed04 	.word	0xe000ed04

0800363c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8003640:	4b0b      	ldr	r3, [pc, #44]	; (8003670 <prvSetupTimerInterrupt+0x34>)
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8003646:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <prvSetupTimerInterrupt+0x38>)
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800364c:	4b0a      	ldr	r3, [pc, #40]	; (8003678 <prvSetupTimerInterrupt+0x3c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	22fa      	movs	r2, #250	; 0xfa
 8003652:	0091      	lsls	r1, r2, #2
 8003654:	0018      	movs	r0, r3
 8003656:	f7fc fd57 	bl	8000108 <__udivsi3>
 800365a:	0003      	movs	r3, r0
 800365c:	001a      	movs	r2, r3
 800365e:	4b07      	ldr	r3, [pc, #28]	; (800367c <prvSetupTimerInterrupt+0x40>)
 8003660:	3a01      	subs	r2, #1
 8003662:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8003664:	4b02      	ldr	r3, [pc, #8]	; (8003670 <prvSetupTimerInterrupt+0x34>)
 8003666:	2207      	movs	r2, #7
 8003668:	601a      	str	r2, [r3, #0]
}
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	e000e010 	.word	0xe000e010
 8003674:	e000e018 	.word	0xe000e018
 8003678:	20000038 	.word	0x20000038
 800367c:	e000e014 	.word	0xe000e014

08003680 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003688:	2300      	movs	r3, #0
 800368a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800368c:	f7ff fbf2 	bl	8002e74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003690:	4b49      	ldr	r3, [pc, #292]	; (80037b8 <pvPortMalloc+0x138>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003698:	f000 f8e0 	bl	800385c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800369c:	4b47      	ldr	r3, [pc, #284]	; (80037bc <pvPortMalloc+0x13c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	4013      	ands	r3, r2
 80036a4:	d000      	beq.n	80036a8 <pvPortMalloc+0x28>
 80036a6:	e079      	b.n	800379c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d012      	beq.n	80036d4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 80036ae:	2208      	movs	r2, #8
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	189b      	adds	r3, r3, r2
 80036b4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2207      	movs	r2, #7
 80036ba:	4013      	ands	r3, r2
 80036bc:	d00a      	beq.n	80036d4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2207      	movs	r2, #7
 80036c2:	4393      	bics	r3, r2
 80036c4:	3308      	adds	r3, #8
 80036c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2207      	movs	r2, #7
 80036cc:	4013      	ands	r3, r2
 80036ce:	d001      	beq.n	80036d4 <pvPortMalloc+0x54>
 80036d0:	b672      	cpsid	i
 80036d2:	e7fe      	b.n	80036d2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d060      	beq.n	800379c <pvPortMalloc+0x11c>
 80036da:	4b39      	ldr	r3, [pc, #228]	; (80037c0 <pvPortMalloc+0x140>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d85b      	bhi.n	800379c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80036e4:	4b37      	ldr	r3, [pc, #220]	; (80037c4 <pvPortMalloc+0x144>)
 80036e6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80036e8:	4b36      	ldr	r3, [pc, #216]	; (80037c4 <pvPortMalloc+0x144>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80036ee:	e004      	b.n	80036fa <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	429a      	cmp	r2, r3
 8003702:	d903      	bls.n	800370c <pvPortMalloc+0x8c>
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1f1      	bne.n	80036f0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800370c:	4b2a      	ldr	r3, [pc, #168]	; (80037b8 <pvPortMalloc+0x138>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	429a      	cmp	r2, r3
 8003714:	d042      	beq.n	800379c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2208      	movs	r2, #8
 800371c:	189b      	adds	r3, r3, r2
 800371e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	1ad2      	subs	r2, r2, r3
 8003730:	2308      	movs	r3, #8
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	429a      	cmp	r2, r3
 8003736:	d916      	bls.n	8003766 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	18d3      	adds	r3, r2, r3
 800373e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2207      	movs	r2, #7
 8003744:	4013      	ands	r3, r2
 8003746:	d001      	beq.n	800374c <pvPortMalloc+0xcc>
 8003748:	b672      	cpsid	i
 800374a:	e7fe      	b.n	800374a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	1ad2      	subs	r2, r2, r3
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	0018      	movs	r0, r3
 8003762:	f000 f8db 	bl	800391c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003766:	4b16      	ldr	r3, [pc, #88]	; (80037c0 <pvPortMalloc+0x140>)
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	1ad2      	subs	r2, r2, r3
 8003770:	4b13      	ldr	r3, [pc, #76]	; (80037c0 <pvPortMalloc+0x140>)
 8003772:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003774:	4b12      	ldr	r3, [pc, #72]	; (80037c0 <pvPortMalloc+0x140>)
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <pvPortMalloc+0x148>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	429a      	cmp	r2, r3
 800377e:	d203      	bcs.n	8003788 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003780:	4b0f      	ldr	r3, [pc, #60]	; (80037c0 <pvPortMalloc+0x140>)
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <pvPortMalloc+0x148>)
 8003786:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <pvPortMalloc+0x13c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	431a      	orrs	r2, r3
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800379c:	f7ff fb76 	bl	8002e8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2207      	movs	r2, #7
 80037a4:	4013      	ands	r3, r2
 80037a6:	d001      	beq.n	80037ac <pvPortMalloc+0x12c>
 80037a8:	b672      	cpsid	i
 80037aa:	e7fe      	b.n	80037aa <pvPortMalloc+0x12a>
	return pvReturn;
 80037ac:	68fb      	ldr	r3, [r7, #12]
}
 80037ae:	0018      	movs	r0, r3
 80037b0:	46bd      	mov	sp, r7
 80037b2:	b006      	add	sp, #24
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	20001080 	.word	0x20001080
 80037bc:	2000108c 	.word	0x2000108c
 80037c0:	20001084 	.word	0x20001084
 80037c4:	20001078 	.word	0x20001078
 80037c8:	20001088 	.word	0x20001088

080037cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d035      	beq.n	800384a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80037de:	2308      	movs	r3, #8
 80037e0:	425b      	negs	r3, r3
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	18d3      	adds	r3, r2, r3
 80037e6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	4b18      	ldr	r3, [pc, #96]	; (8003854 <vPortFree+0x88>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4013      	ands	r3, r2
 80037f6:	d101      	bne.n	80037fc <vPortFree+0x30>
 80037f8:	b672      	cpsid	i
 80037fa:	e7fe      	b.n	80037fa <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <vPortFree+0x3c>
 8003804:	b672      	cpsid	i
 8003806:	e7fe      	b.n	8003806 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	4b11      	ldr	r3, [pc, #68]	; (8003854 <vPortFree+0x88>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4013      	ands	r3, r2
 8003812:	d01a      	beq.n	800384a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d116      	bne.n	800384a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	4b0c      	ldr	r3, [pc, #48]	; (8003854 <vPortFree+0x88>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	43db      	mvns	r3, r3
 8003826:	401a      	ands	r2, r3
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800382c:	f7ff fb22 	bl	8002e74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	4b08      	ldr	r3, [pc, #32]	; (8003858 <vPortFree+0x8c>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	18d2      	adds	r2, r2, r3
 800383a:	4b07      	ldr	r3, [pc, #28]	; (8003858 <vPortFree+0x8c>)
 800383c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	0018      	movs	r0, r3
 8003842:	f000 f86b 	bl	800391c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003846:	f7ff fb21 	bl	8002e8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800384a:	46c0      	nop			; (mov r8, r8)
 800384c:	46bd      	mov	sp, r7
 800384e:	b004      	add	sp, #16
 8003850:	bd80      	pop	{r7, pc}
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	2000108c 	.word	0x2000108c
 8003858:	20001084 	.word	0x20001084

0800385c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003862:	23c0      	movs	r3, #192	; 0xc0
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003868:	4b26      	ldr	r3, [pc, #152]	; (8003904 <prvHeapInit+0xa8>)
 800386a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2207      	movs	r2, #7
 8003870:	4013      	ands	r3, r2
 8003872:	d00c      	beq.n	800388e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	3307      	adds	r3, #7
 8003878:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2207      	movs	r2, #7
 800387e:	4393      	bics	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	1ad2      	subs	r2, r2, r3
 8003888:	4b1e      	ldr	r3, [pc, #120]	; (8003904 <prvHeapInit+0xa8>)
 800388a:	18d3      	adds	r3, r2, r3
 800388c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003892:	4b1d      	ldr	r3, [pc, #116]	; (8003908 <prvHeapInit+0xac>)
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003898:	4b1b      	ldr	r3, [pc, #108]	; (8003908 <prvHeapInit+0xac>)
 800389a:	2200      	movs	r2, #0
 800389c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	18d3      	adds	r3, r2, r3
 80038a4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80038a6:	2208      	movs	r2, #8
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	1a9b      	subs	r3, r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2207      	movs	r2, #7
 80038b2:	4393      	bics	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	4b14      	ldr	r3, [pc, #80]	; (800390c <prvHeapInit+0xb0>)
 80038ba:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80038bc:	4b13      	ldr	r3, [pc, #76]	; (800390c <prvHeapInit+0xb0>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2200      	movs	r2, #0
 80038c2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80038c4:	4b11      	ldr	r3, [pc, #68]	; (800390c <prvHeapInit+0xb0>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	1ad2      	subs	r2, r2, r3
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80038da:	4b0c      	ldr	r3, [pc, #48]	; (800390c <prvHeapInit+0xb0>)
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	4b0a      	ldr	r3, [pc, #40]	; (8003910 <prvHeapInit+0xb4>)
 80038e8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	4b09      	ldr	r3, [pc, #36]	; (8003914 <prvHeapInit+0xb8>)
 80038f0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80038f2:	4b09      	ldr	r3, [pc, #36]	; (8003918 <prvHeapInit+0xbc>)
 80038f4:	2280      	movs	r2, #128	; 0x80
 80038f6:	0612      	lsls	r2, r2, #24
 80038f8:	601a      	str	r2, [r3, #0]
}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	46bd      	mov	sp, r7
 80038fe:	b004      	add	sp, #16
 8003900:	bd80      	pop	{r7, pc}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	20000478 	.word	0x20000478
 8003908:	20001078 	.word	0x20001078
 800390c:	20001080 	.word	0x20001080
 8003910:	20001088 	.word	0x20001088
 8003914:	20001084 	.word	0x20001084
 8003918:	2000108c 	.word	0x2000108c

0800391c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003924:	4b27      	ldr	r3, [pc, #156]	; (80039c4 <prvInsertBlockIntoFreeList+0xa8>)
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	e002      	b.n	8003930 <prvInsertBlockIntoFreeList+0x14>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	429a      	cmp	r2, r3
 8003938:	d8f7      	bhi.n	800392a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	18d3      	adds	r3, r2, r3
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	429a      	cmp	r2, r3
 800394a:	d108      	bne.n	800395e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	18d2      	adds	r2, r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	18d2      	adds	r2, r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d118      	bne.n	80039a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	4b14      	ldr	r3, [pc, #80]	; (80039c8 <prvInsertBlockIntoFreeList+0xac>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	d00d      	beq.n	800399a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	18d2      	adds	r2, r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	e008      	b.n	80039ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800399a:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <prvInsertBlockIntoFreeList+0xac>)
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	e003      	b.n	80039ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d002      	beq.n	80039ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	46bd      	mov	sp, r7
 80039be:	b004      	add	sp, #16
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	20001078 	.word	0x20001078
 80039c8:	20001080 	.word	0x20001080

080039cc <memset>:
 80039cc:	0003      	movs	r3, r0
 80039ce:	1882      	adds	r2, r0, r2
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d100      	bne.n	80039d6 <memset+0xa>
 80039d4:	4770      	bx	lr
 80039d6:	7019      	strb	r1, [r3, #0]
 80039d8:	3301      	adds	r3, #1
 80039da:	e7f9      	b.n	80039d0 <memset+0x4>

080039dc <__libc_init_array>:
 80039dc:	b570      	push	{r4, r5, r6, lr}
 80039de:	2600      	movs	r6, #0
 80039e0:	4c0c      	ldr	r4, [pc, #48]	; (8003a14 <__libc_init_array+0x38>)
 80039e2:	4d0d      	ldr	r5, [pc, #52]	; (8003a18 <__libc_init_array+0x3c>)
 80039e4:	1b64      	subs	r4, r4, r5
 80039e6:	10a4      	asrs	r4, r4, #2
 80039e8:	42a6      	cmp	r6, r4
 80039ea:	d109      	bne.n	8003a00 <__libc_init_array+0x24>
 80039ec:	2600      	movs	r6, #0
 80039ee:	f000 f819 	bl	8003a24 <_init>
 80039f2:	4c0a      	ldr	r4, [pc, #40]	; (8003a1c <__libc_init_array+0x40>)
 80039f4:	4d0a      	ldr	r5, [pc, #40]	; (8003a20 <__libc_init_array+0x44>)
 80039f6:	1b64      	subs	r4, r4, r5
 80039f8:	10a4      	asrs	r4, r4, #2
 80039fa:	42a6      	cmp	r6, r4
 80039fc:	d105      	bne.n	8003a0a <__libc_init_array+0x2e>
 80039fe:	bd70      	pop	{r4, r5, r6, pc}
 8003a00:	00b3      	lsls	r3, r6, #2
 8003a02:	58eb      	ldr	r3, [r5, r3]
 8003a04:	4798      	blx	r3
 8003a06:	3601      	adds	r6, #1
 8003a08:	e7ee      	b.n	80039e8 <__libc_init_array+0xc>
 8003a0a:	00b3      	lsls	r3, r6, #2
 8003a0c:	58eb      	ldr	r3, [r5, r3]
 8003a0e:	4798      	blx	r3
 8003a10:	3601      	adds	r6, #1
 8003a12:	e7f2      	b.n	80039fa <__libc_init_array+0x1e>
 8003a14:	08003b00 	.word	0x08003b00
 8003a18:	08003b00 	.word	0x08003b00
 8003a1c:	08003b04 	.word	0x08003b04
 8003a20:	08003b00 	.word	0x08003b00

08003a24 <_init>:
 8003a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a26:	46c0      	nop			; (mov r8, r8)
 8003a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a2a:	bc08      	pop	{r3}
 8003a2c:	469e      	mov	lr, r3
 8003a2e:	4770      	bx	lr

08003a30 <_fini>:
 8003a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a36:	bc08      	pop	{r3}
 8003a38:	469e      	mov	lr, r3
 8003a3a:	4770      	bx	lr


ADC_interrrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b40  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08003c00  08003c00  00013c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ca8  08003ca8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003ca8  08003ca8  00013ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cb0  08003cb0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cb0  08003cb0  00013cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cb4  08003cb4  00013cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003cb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000070  08003d28  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08003d28  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a675  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a26  00000000  00000000  0002a70d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000830  00000000  00000000  0002c138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000788  00000000  00000000  0002c968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000143a7  00000000  00000000  0002d0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa29  00000000  00000000  00041497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007bd8a  00000000  00000000  0004bec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c7c4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ffc  00000000  00000000  000c7c9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003be8 	.word	0x08003be8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003be8 	.word	0x08003be8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f834 	bl	80002e0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4647      	mov	r7, r8
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	4699      	mov	r9, r3
 8000290:	0c3b      	lsrs	r3, r7, #16
 8000292:	469c      	mov	ip, r3
 8000294:	0413      	lsls	r3, r2, #16
 8000296:	0c1b      	lsrs	r3, r3, #16
 8000298:	001d      	movs	r5, r3
 800029a:	000e      	movs	r6, r1
 800029c:	4661      	mov	r1, ip
 800029e:	0400      	lsls	r0, r0, #16
 80002a0:	0c14      	lsrs	r4, r2, #16
 80002a2:	0c00      	lsrs	r0, r0, #16
 80002a4:	4345      	muls	r5, r0
 80002a6:	434b      	muls	r3, r1
 80002a8:	4360      	muls	r0, r4
 80002aa:	4361      	muls	r1, r4
 80002ac:	18c0      	adds	r0, r0, r3
 80002ae:	0c2c      	lsrs	r4, r5, #16
 80002b0:	1820      	adds	r0, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	4283      	cmp	r3, r0
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4372      	muls	r2, r6
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	4463      	add	r3, ip
 80002ca:	042d      	lsls	r5, r5, #16
 80002cc:	0c2d      	lsrs	r5, r5, #16
 80002ce:	18c9      	adds	r1, r1, r3
 80002d0:	0400      	lsls	r0, r0, #16
 80002d2:	1940      	adds	r0, r0, r5
 80002d4:	1889      	adds	r1, r1, r2
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__udivmoddi4>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	4657      	mov	r7, sl
 80002e4:	464e      	mov	r6, r9
 80002e6:	4645      	mov	r5, r8
 80002e8:	46de      	mov	lr, fp
 80002ea:	b5e0      	push	{r5, r6, r7, lr}
 80002ec:	0004      	movs	r4, r0
 80002ee:	000d      	movs	r5, r1
 80002f0:	4692      	mov	sl, r2
 80002f2:	4699      	mov	r9, r3
 80002f4:	b083      	sub	sp, #12
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d830      	bhi.n	800035c <__udivmoddi4+0x7c>
 80002fa:	d02d      	beq.n	8000358 <__udivmoddi4+0x78>
 80002fc:	4649      	mov	r1, r9
 80002fe:	4650      	mov	r0, sl
 8000300:	f000 f8ba 	bl	8000478 <__clzdi2>
 8000304:	0029      	movs	r1, r5
 8000306:	0006      	movs	r6, r0
 8000308:	0020      	movs	r0, r4
 800030a:	f000 f8b5 	bl	8000478 <__clzdi2>
 800030e:	1a33      	subs	r3, r6, r0
 8000310:	4698      	mov	r8, r3
 8000312:	3b20      	subs	r3, #32
 8000314:	469b      	mov	fp, r3
 8000316:	d433      	bmi.n	8000380 <__udivmoddi4+0xa0>
 8000318:	465a      	mov	r2, fp
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	4642      	mov	r2, r8
 8000320:	001f      	movs	r7, r3
 8000322:	4653      	mov	r3, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001e      	movs	r6, r3
 8000328:	42af      	cmp	r7, r5
 800032a:	d83a      	bhi.n	80003a2 <__udivmoddi4+0xc2>
 800032c:	42af      	cmp	r7, r5
 800032e:	d100      	bne.n	8000332 <__udivmoddi4+0x52>
 8000330:	e078      	b.n	8000424 <__udivmoddi4+0x144>
 8000332:	465b      	mov	r3, fp
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	41bd      	sbcs	r5, r7
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <__udivmoddi4+0x5e>
 800033c:	e075      	b.n	800042a <__udivmoddi4+0x14a>
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	465a      	mov	r2, fp
 800034a:	4093      	lsls	r3, r2
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	4093      	lsls	r3, r2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	e028      	b.n	80003aa <__udivmoddi4+0xca>
 8000358:	4282      	cmp	r2, r0
 800035a:	d9cf      	bls.n	80002fc <__udivmoddi4+0x1c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <__udivmoddi4+0x8e>
 800036a:	601c      	str	r4, [r3, #0]
 800036c:	605d      	str	r5, [r3, #4]
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	b003      	add	sp, #12
 8000374:	bcf0      	pop	{r4, r5, r6, r7}
 8000376:	46bb      	mov	fp, r7
 8000378:	46b2      	mov	sl, r6
 800037a:	46a9      	mov	r9, r5
 800037c:	46a0      	mov	r8, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4642      	mov	r2, r8
 8000382:	2320      	movs	r3, #32
 8000384:	1a9b      	subs	r3, r3, r2
 8000386:	4652      	mov	r2, sl
 8000388:	40da      	lsrs	r2, r3
 800038a:	4641      	mov	r1, r8
 800038c:	0013      	movs	r3, r2
 800038e:	464a      	mov	r2, r9
 8000390:	408a      	lsls	r2, r1
 8000392:	0017      	movs	r7, r2
 8000394:	4642      	mov	r2, r8
 8000396:	431f      	orrs	r7, r3
 8000398:	4653      	mov	r3, sl
 800039a:	4093      	lsls	r3, r2
 800039c:	001e      	movs	r6, r3
 800039e:	42af      	cmp	r7, r5
 80003a0:	d9c4      	bls.n	800032c <__udivmoddi4+0x4c>
 80003a2:	2200      	movs	r2, #0
 80003a4:	2300      	movs	r3, #0
 80003a6:	9200      	str	r2, [sp, #0]
 80003a8:	9301      	str	r3, [sp, #4]
 80003aa:	4643      	mov	r3, r8
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d0d9      	beq.n	8000364 <__udivmoddi4+0x84>
 80003b0:	07fb      	lsls	r3, r7, #31
 80003b2:	0872      	lsrs	r2, r6, #1
 80003b4:	431a      	orrs	r2, r3
 80003b6:	4646      	mov	r6, r8
 80003b8:	087b      	lsrs	r3, r7, #1
 80003ba:	e00e      	b.n	80003da <__udivmoddi4+0xfa>
 80003bc:	42ab      	cmp	r3, r5
 80003be:	d101      	bne.n	80003c4 <__udivmoddi4+0xe4>
 80003c0:	42a2      	cmp	r2, r4
 80003c2:	d80c      	bhi.n	80003de <__udivmoddi4+0xfe>
 80003c4:	1aa4      	subs	r4, r4, r2
 80003c6:	419d      	sbcs	r5, r3
 80003c8:	2001      	movs	r0, #1
 80003ca:	1924      	adds	r4, r4, r4
 80003cc:	416d      	adcs	r5, r5
 80003ce:	2100      	movs	r1, #0
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1824      	adds	r4, r4, r0
 80003d4:	414d      	adcs	r5, r1
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d006      	beq.n	80003e8 <__udivmoddi4+0x108>
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d9ee      	bls.n	80003bc <__udivmoddi4+0xdc>
 80003de:	3e01      	subs	r6, #1
 80003e0:	1924      	adds	r4, r4, r4
 80003e2:	416d      	adcs	r5, r5
 80003e4:	2e00      	cmp	r6, #0
 80003e6:	d1f8      	bne.n	80003da <__udivmoddi4+0xfa>
 80003e8:	9800      	ldr	r0, [sp, #0]
 80003ea:	9901      	ldr	r1, [sp, #4]
 80003ec:	465b      	mov	r3, fp
 80003ee:	1900      	adds	r0, r0, r4
 80003f0:	4169      	adcs	r1, r5
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	db24      	blt.n	8000440 <__udivmoddi4+0x160>
 80003f6:	002b      	movs	r3, r5
 80003f8:	465a      	mov	r2, fp
 80003fa:	4644      	mov	r4, r8
 80003fc:	40d3      	lsrs	r3, r2
 80003fe:	002a      	movs	r2, r5
 8000400:	40e2      	lsrs	r2, r4
 8000402:	001c      	movs	r4, r3
 8000404:	465b      	mov	r3, fp
 8000406:	0015      	movs	r5, r2
 8000408:	2b00      	cmp	r3, #0
 800040a:	db2a      	blt.n	8000462 <__udivmoddi4+0x182>
 800040c:	0026      	movs	r6, r4
 800040e:	409e      	lsls	r6, r3
 8000410:	0033      	movs	r3, r6
 8000412:	0026      	movs	r6, r4
 8000414:	4647      	mov	r7, r8
 8000416:	40be      	lsls	r6, r7
 8000418:	0032      	movs	r2, r6
 800041a:	1a80      	subs	r0, r0, r2
 800041c:	4199      	sbcs	r1, r3
 800041e:	9000      	str	r0, [sp, #0]
 8000420:	9101      	str	r1, [sp, #4]
 8000422:	e79f      	b.n	8000364 <__udivmoddi4+0x84>
 8000424:	42a3      	cmp	r3, r4
 8000426:	d8bc      	bhi.n	80003a2 <__udivmoddi4+0xc2>
 8000428:	e783      	b.n	8000332 <__udivmoddi4+0x52>
 800042a:	4642      	mov	r2, r8
 800042c:	2320      	movs	r3, #32
 800042e:	2100      	movs	r1, #0
 8000430:	1a9b      	subs	r3, r3, r2
 8000432:	2200      	movs	r2, #0
 8000434:	9100      	str	r1, [sp, #0]
 8000436:	9201      	str	r2, [sp, #4]
 8000438:	2201      	movs	r2, #1
 800043a:	40da      	lsrs	r2, r3
 800043c:	9201      	str	r2, [sp, #4]
 800043e:	e786      	b.n	800034e <__udivmoddi4+0x6e>
 8000440:	4642      	mov	r2, r8
 8000442:	2320      	movs	r3, #32
 8000444:	1a9b      	subs	r3, r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	4646      	mov	r6, r8
 800044a:	409a      	lsls	r2, r3
 800044c:	0023      	movs	r3, r4
 800044e:	40f3      	lsrs	r3, r6
 8000450:	4644      	mov	r4, r8
 8000452:	4313      	orrs	r3, r2
 8000454:	002a      	movs	r2, r5
 8000456:	40e2      	lsrs	r2, r4
 8000458:	001c      	movs	r4, r3
 800045a:	465b      	mov	r3, fp
 800045c:	0015      	movs	r5, r2
 800045e:	2b00      	cmp	r3, #0
 8000460:	dad4      	bge.n	800040c <__udivmoddi4+0x12c>
 8000462:	4642      	mov	r2, r8
 8000464:	002f      	movs	r7, r5
 8000466:	2320      	movs	r3, #32
 8000468:	0026      	movs	r6, r4
 800046a:	4097      	lsls	r7, r2
 800046c:	1a9b      	subs	r3, r3, r2
 800046e:	40de      	lsrs	r6, r3
 8000470:	003b      	movs	r3, r7
 8000472:	4333      	orrs	r3, r6
 8000474:	e7cd      	b.n	8000412 <__udivmoddi4+0x132>
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__clzdi2>:
 8000478:	b510      	push	{r4, lr}
 800047a:	2900      	cmp	r1, #0
 800047c:	d103      	bne.n	8000486 <__clzdi2+0xe>
 800047e:	f000 f807 	bl	8000490 <__clzsi2>
 8000482:	3020      	adds	r0, #32
 8000484:	e002      	b.n	800048c <__clzdi2+0x14>
 8000486:	0008      	movs	r0, r1
 8000488:	f000 f802 	bl	8000490 <__clzsi2>
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__clzsi2>:
 8000490:	211c      	movs	r1, #28
 8000492:	2301      	movs	r3, #1
 8000494:	041b      	lsls	r3, r3, #16
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0xe>
 800049a:	0c00      	lsrs	r0, r0, #16
 800049c:	3910      	subs	r1, #16
 800049e:	0a1b      	lsrs	r3, r3, #8
 80004a0:	4298      	cmp	r0, r3
 80004a2:	d301      	bcc.n	80004a8 <__clzsi2+0x18>
 80004a4:	0a00      	lsrs	r0, r0, #8
 80004a6:	3908      	subs	r1, #8
 80004a8:	091b      	lsrs	r3, r3, #4
 80004aa:	4298      	cmp	r0, r3
 80004ac:	d301      	bcc.n	80004b2 <__clzsi2+0x22>
 80004ae:	0900      	lsrs	r0, r0, #4
 80004b0:	3904      	subs	r1, #4
 80004b2:	a202      	add	r2, pc, #8	; (adr r2, 80004bc <__clzsi2+0x2c>)
 80004b4:	5c10      	ldrb	r0, [r2, r0]
 80004b6:	1840      	adds	r0, r0, r1
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	02020304 	.word	0x02020304
 80004c0:	01010101 	.word	0x01010101
	...

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 faa0 	bl	8000a14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f812 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f916 	bl	8000708 <MX_GPIO_Init>
  MX_ADC_Init();
 80004dc:	f000 f880 	bl	80005e0 <MX_ADC_Init>
  MX_USART1_UART_Init();
 80004e0:	f000 f8e2 	bl	80006a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 80004e4:	4b04      	ldr	r3, [pc, #16]	; (80004f8 <main+0x2c>)
 80004e6:	2100      	movs	r1, #0
 80004e8:	0018      	movs	r0, r3
 80004ea:	f000 fed7 	bl	800129c <HAL_ADCEx_Calibration_Start>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_ADC_Start_IT(&hadc);
 80004ee:	4b02      	ldr	r3, [pc, #8]	; (80004f8 <main+0x2c>)
 80004f0:	0018      	movs	r0, r3
 80004f2:	f000 fc73 	bl	8000ddc <HAL_ADC_Start_IT>
 80004f6:	e7fa      	b.n	80004ee <main+0x22>
 80004f8:	2000008c 	.word	0x2000008c

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b590      	push	{r4, r7, lr}
 80004fe:	b09d      	sub	sp, #116	; 0x74
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	2438      	movs	r4, #56	; 0x38
 8000504:	193b      	adds	r3, r7, r4
 8000506:	0018      	movs	r0, r3
 8000508:	2338      	movs	r3, #56	; 0x38
 800050a:	001a      	movs	r2, r3
 800050c:	2100      	movs	r1, #0
 800050e:	f002 fef9 	bl	8003304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000512:	2324      	movs	r3, #36	; 0x24
 8000514:	18fb      	adds	r3, r7, r3
 8000516:	0018      	movs	r0, r3
 8000518:	2314      	movs	r3, #20
 800051a:	001a      	movs	r2, r3
 800051c:	2100      	movs	r1, #0
 800051e:	f002 fef1 	bl	8003304 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000522:	003b      	movs	r3, r7
 8000524:	0018      	movs	r0, r3
 8000526:	2324      	movs	r3, #36	; 0x24
 8000528:	001a      	movs	r2, r3
 800052a:	2100      	movs	r1, #0
 800052c:	f002 feea 	bl	8003304 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000530:	4b29      	ldr	r3, [pc, #164]	; (80005d8 <SystemClock_Config+0xdc>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a29      	ldr	r2, [pc, #164]	; (80005dc <SystemClock_Config+0xe0>)
 8000536:	401a      	ands	r2, r3
 8000538:	4b27      	ldr	r3, [pc, #156]	; (80005d8 <SystemClock_Config+0xdc>)
 800053a:	2180      	movs	r1, #128	; 0x80
 800053c:	0109      	lsls	r1, r1, #4
 800053e:	430a      	orrs	r2, r1
 8000540:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000542:	0021      	movs	r1, r4
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2202      	movs	r2, #2
 8000548:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2201      	movs	r2, #1
 800054e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2210      	movs	r2, #16
 8000554:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2202      	movs	r2, #2
 800055a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2200      	movs	r2, #0
 8000560:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2200      	movs	r2, #0
 8000566:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2280      	movs	r2, #128	; 0x80
 800056c:	0412      	lsls	r2, r2, #16
 800056e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000570:	187b      	adds	r3, r7, r1
 8000572:	0018      	movs	r0, r3
 8000574:	f001 f984 	bl	8001880 <HAL_RCC_OscConfig>
 8000578:	1e03      	subs	r3, r0, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800057c:	f000 f91e 	bl	80007bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000580:	2124      	movs	r1, #36	; 0x24
 8000582:	187b      	adds	r3, r7, r1
 8000584:	220f      	movs	r2, #15
 8000586:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2203      	movs	r2, #3
 800058c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2200      	movs	r2, #0
 8000598:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059a:	187b      	adds	r3, r7, r1
 800059c:	2200      	movs	r2, #0
 800059e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	2100      	movs	r1, #0
 80005a4:	0018      	movs	r0, r3
 80005a6:	f001 fd2f 	bl	8002008 <HAL_RCC_ClockConfig>
 80005aa:	1e03      	subs	r3, r0, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005ae:	f000 f905 	bl	80007bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80005b2:	003b      	movs	r3, r7
 80005b4:	2201      	movs	r2, #1
 80005b6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005b8:	003b      	movs	r3, r7
 80005ba:	2200      	movs	r2, #0
 80005bc:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005be:	003b      	movs	r3, r7
 80005c0:	0018      	movs	r0, r3
 80005c2:	f001 ff45 	bl	8002450 <HAL_RCCEx_PeriphCLKConfig>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005ca:	f000 f8f7 	bl	80007bc <Error_Handler>
  }
}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	46bd      	mov	sp, r7
 80005d2:	b01d      	add	sp, #116	; 0x74
 80005d4:	bd90      	pop	{r4, r7, pc}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	40007000 	.word	0x40007000
 80005dc:	ffffe7ff 	.word	0xffffe7ff

080005e0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e6:	003b      	movs	r3, r7
 80005e8:	0018      	movs	r0, r3
 80005ea:	2308      	movs	r3, #8
 80005ec:	001a      	movs	r2, r3
 80005ee:	2100      	movs	r1, #0
 80005f0:	f002 fe88 	bl	8003304 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80005f4:	4b2a      	ldr	r3, [pc, #168]	; (80006a0 <MX_ADC_Init+0xc0>)
 80005f6:	4a2b      	ldr	r2, [pc, #172]	; (80006a4 <MX_ADC_Init+0xc4>)
 80005f8:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80005fa:	4b29      	ldr	r3, [pc, #164]	; (80006a0 <MX_ADC_Init+0xc0>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000600:	4b27      	ldr	r3, [pc, #156]	; (80006a0 <MX_ADC_Init+0xc0>)
 8000602:	22c0      	movs	r2, #192	; 0xc0
 8000604:	0612      	lsls	r2, r2, #24
 8000606:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_8B;
 8000608:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <MX_ADC_Init+0xc0>)
 800060a:	2210      	movs	r2, #16
 800060c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800060e:	4b24      	ldr	r3, [pc, #144]	; (80006a0 <MX_ADC_Init+0xc0>)
 8000610:	2200      	movs	r2, #0
 8000612:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000614:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <MX_ADC_Init+0xc0>)
 8000616:	2201      	movs	r2, #1
 8000618:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800061a:	4b21      	ldr	r3, [pc, #132]	; (80006a0 <MX_ADC_Init+0xc0>)
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <MX_ADC_Init+0xc0>)
 8000622:	2220      	movs	r2, #32
 8000624:	2101      	movs	r1, #1
 8000626:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000628:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <MX_ADC_Init+0xc0>)
 800062a:	2221      	movs	r2, #33	; 0x21
 800062c:	2100      	movs	r1, #0
 800062e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000630:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <MX_ADC_Init+0xc0>)
 8000632:	2200      	movs	r2, #0
 8000634:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000636:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <MX_ADC_Init+0xc0>)
 8000638:	22c2      	movs	r2, #194	; 0xc2
 800063a:	32ff      	adds	r2, #255	; 0xff
 800063c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800063e:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <MX_ADC_Init+0xc0>)
 8000640:	222c      	movs	r2, #44	; 0x2c
 8000642:	2100      	movs	r1, #0
 8000644:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000646:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <MX_ADC_Init+0xc0>)
 8000648:	2204      	movs	r2, #4
 800064a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800064c:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <MX_ADC_Init+0xc0>)
 800064e:	2200      	movs	r2, #0
 8000650:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000652:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <MX_ADC_Init+0xc0>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <MX_ADC_Init+0xc0>)
 800065a:	2200      	movs	r2, #0
 800065c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <MX_ADC_Init+0xc0>)
 8000660:	2200      	movs	r2, #0
 8000662:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000664:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <MX_ADC_Init+0xc0>)
 8000666:	0018      	movs	r0, r3
 8000668:	f000 fa44 	bl	8000af4 <HAL_ADC_Init>
 800066c:	1e03      	subs	r3, r0, #0
 800066e:	d001      	beq.n	8000674 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000670:	f000 f8a4 	bl	80007bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000674:	003b      	movs	r3, r7
 8000676:	2201      	movs	r2, #1
 8000678:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800067a:	003b      	movs	r3, r7
 800067c:	2280      	movs	r2, #128	; 0x80
 800067e:	0152      	lsls	r2, r2, #5
 8000680:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000682:	003a      	movs	r2, r7
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MX_ADC_Init+0xc0>)
 8000686:	0011      	movs	r1, r2
 8000688:	0018      	movs	r0, r3
 800068a:	f000 fcdf 	bl	800104c <HAL_ADC_ConfigChannel>
 800068e:	1e03      	subs	r3, r0, #0
 8000690:	d001      	beq.n	8000696 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000692:	f000 f893 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	b002      	add	sp, #8
 800069c:	bd80      	pop	{r7, pc}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	2000008c 	.word	0x2000008c
 80006a4:	40012400 	.word	0x40012400

080006a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006ac:	4b14      	ldr	r3, [pc, #80]	; (8000700 <MX_USART1_UART_Init+0x58>)
 80006ae:	4a15      	ldr	r2, [pc, #84]	; (8000704 <MX_USART1_UART_Init+0x5c>)
 80006b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <MX_USART1_UART_Init+0x58>)
 80006b4:	22e1      	movs	r2, #225	; 0xe1
 80006b6:	0252      	lsls	r2, r2, #9
 80006b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_USART1_UART_Init+0x58>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_USART1_UART_Init+0x58>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_USART1_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_USART1_UART_Init+0x58>)
 80006ce:	220c      	movs	r2, #12
 80006d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <MX_USART1_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_USART1_UART_Init+0x58>)
 80006da:	2200      	movs	r2, #0
 80006dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <MX_USART1_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_USART1_UART_Init+0x58>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006ea:	4b05      	ldr	r3, [pc, #20]	; (8000700 <MX_USART1_UART_Init+0x58>)
 80006ec:	0018      	movs	r0, r3
 80006ee:	f002 f83d 	bl	800276c <HAL_UART_Init>
 80006f2:	1e03      	subs	r3, r0, #0
 80006f4:	d001      	beq.n	80006fa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006f6:	f000 f861 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	200000e8 	.word	0x200000e8
 8000704:	40013800 	.word	0x40013800

08000708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_GPIO_Init+0x58>)
 8000710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000712:	4b13      	ldr	r3, [pc, #76]	; (8000760 <MX_GPIO_Init+0x58>)
 8000714:	2104      	movs	r1, #4
 8000716:	430a      	orrs	r2, r1
 8000718:	62da      	str	r2, [r3, #44]	; 0x2c
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_GPIO_Init+0x58>)
 800071c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800071e:	2204      	movs	r2, #4
 8000720:	4013      	ands	r3, r2
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_GPIO_Init+0x58>)
 8000728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800072a:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <MX_GPIO_Init+0x58>)
 800072c:	2180      	movs	r1, #128	; 0x80
 800072e:	430a      	orrs	r2, r1
 8000730:	62da      	str	r2, [r3, #44]	; 0x2c
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_GPIO_Init+0x58>)
 8000734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000736:	2280      	movs	r2, #128	; 0x80
 8000738:	4013      	ands	r3, r2
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_GPIO_Init+0x58>)
 8000740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000742:	4b07      	ldr	r3, [pc, #28]	; (8000760 <MX_GPIO_Init+0x58>)
 8000744:	2101      	movs	r1, #1
 8000746:	430a      	orrs	r2, r1
 8000748:	62da      	str	r2, [r3, #44]	; 0x2c
 800074a:	4b05      	ldr	r3, [pc, #20]	; (8000760 <MX_GPIO_Init+0x58>)
 800074c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800074e:	2201      	movs	r2, #1
 8000750:	4013      	ands	r3, r2
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	46bd      	mov	sp, r7
 800075a:	b004      	add	sp, #16
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	40021000 	.word	0x40021000

08000764 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	adc_val = HAL_ADC_GetValue(hadc);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	0018      	movs	r0, r3
 8000770:	f000 fba6 	bl	8000ec0 <HAL_ADC_GetValue>
 8000774:	0003      	movs	r3, r0
 8000776:	b29a      	uxth	r2, r3
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <HAL_ADC_ConvCpltCallback+0x48>)
 800077a:	801a      	strh	r2, [r3, #0]
	// Convert to string and print
	sprintf(msg, "%hu\r\n", adc_val);
 800077c:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <HAL_ADC_ConvCpltCallback+0x48>)
 800077e:	881b      	ldrh	r3, [r3, #0]
 8000780:	001a      	movs	r2, r3
 8000782:	490b      	ldr	r1, [pc, #44]	; (80007b0 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000784:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <HAL_ADC_ConvCpltCallback+0x50>)
 8000786:	0018      	movs	r0, r3
 8000788:	f002 fdc4 	bl	8003314 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen(msg), 1000);
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <HAL_ADC_ConvCpltCallback+0x50>)
 800078e:	0018      	movs	r0, r3
 8000790:	f7ff fcba 	bl	8000108 <strlen>
 8000794:	0003      	movs	r3, r0
 8000796:	b29a      	uxth	r2, r3
 8000798:	23fa      	movs	r3, #250	; 0xfa
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	4905      	ldr	r1, [pc, #20]	; (80007b4 <HAL_ADC_ConvCpltCallback+0x50>)
 800079e:	4806      	ldr	r0, [pc, #24]	; (80007b8 <HAL_ADC_ConvCpltCallback+0x54>)
 80007a0:	f002 f838 	bl	8002814 <HAL_UART_Transmit>
}
 80007a4:	46c0      	nop			; (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	b002      	add	sp, #8
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000170 	.word	0x20000170
 80007b0:	08003c00 	.word	0x08003c00
 80007b4:	20000174 	.word	0x20000174
 80007b8:	200000e8 	.word	0x200000e8

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80007c4:	e7fe      	b.n	80007c4 <Error_Handler+0x8>
	...

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007cc:	4b07      	ldr	r3, [pc, #28]	; (80007ec <HAL_MspInit+0x24>)
 80007ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <HAL_MspInit+0x24>)
 80007d2:	2101      	movs	r1, #1
 80007d4:	430a      	orrs	r2, r1
 80007d6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <HAL_MspInit+0x24>)
 80007da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007dc:	4b03      	ldr	r3, [pc, #12]	; (80007ec <HAL_MspInit+0x24>)
 80007de:	2180      	movs	r1, #128	; 0x80
 80007e0:	0549      	lsls	r1, r1, #21
 80007e2:	430a      	orrs	r2, r1
 80007e4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40021000 	.word	0x40021000

080007f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b089      	sub	sp, #36	; 0x24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	240c      	movs	r4, #12
 80007fa:	193b      	adds	r3, r7, r4
 80007fc:	0018      	movs	r0, r3
 80007fe:	2314      	movs	r3, #20
 8000800:	001a      	movs	r2, r3
 8000802:	2100      	movs	r1, #0
 8000804:	f002 fd7e 	bl	8003304 <memset>
  if(hadc->Instance==ADC1)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a18      	ldr	r2, [pc, #96]	; (8000870 <HAL_ADC_MspInit+0x80>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d12a      	bne.n	8000868 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000812:	4b18      	ldr	r3, [pc, #96]	; (8000874 <HAL_ADC_MspInit+0x84>)
 8000814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <HAL_ADC_MspInit+0x84>)
 8000818:	2180      	movs	r1, #128	; 0x80
 800081a:	0089      	lsls	r1, r1, #2
 800081c:	430a      	orrs	r2, r1
 800081e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000820:	4b14      	ldr	r3, [pc, #80]	; (8000874 <HAL_ADC_MspInit+0x84>)
 8000822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <HAL_ADC_MspInit+0x84>)
 8000826:	2101      	movs	r1, #1
 8000828:	430a      	orrs	r2, r1
 800082a:	62da      	str	r2, [r3, #44]	; 0x2c
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <HAL_ADC_MspInit+0x84>)
 800082e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000830:	2201      	movs	r2, #1
 8000832:	4013      	ands	r3, r2
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = BSP_ADC_Pin;
 8000838:	193b      	adds	r3, r7, r4
 800083a:	2201      	movs	r2, #1
 800083c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800083e:	193b      	adds	r3, r7, r4
 8000840:	2203      	movs	r2, #3
 8000842:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	193b      	adds	r3, r7, r4
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(BSP_ADC_GPIO_Port, &GPIO_InitStruct);
 800084a:	193a      	adds	r2, r7, r4
 800084c:	23a0      	movs	r3, #160	; 0xa0
 800084e:	05db      	lsls	r3, r3, #23
 8000850:	0011      	movs	r1, r2
 8000852:	0018      	movs	r0, r3
 8000854:	f000 fe9e 	bl	8001594 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8000858:	2200      	movs	r2, #0
 800085a:	2100      	movs	r1, #0
 800085c:	200c      	movs	r0, #12
 800085e:	f000 fe67 	bl	8001530 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8000862:	200c      	movs	r0, #12
 8000864:	f000 fe79 	bl	800155a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000868:	46c0      	nop			; (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	b009      	add	sp, #36	; 0x24
 800086e:	bd90      	pop	{r4, r7, pc}
 8000870:	40012400 	.word	0x40012400
 8000874:	40021000 	.word	0x40021000

08000878 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b089      	sub	sp, #36	; 0x24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000880:	240c      	movs	r4, #12
 8000882:	193b      	adds	r3, r7, r4
 8000884:	0018      	movs	r0, r3
 8000886:	2314      	movs	r3, #20
 8000888:	001a      	movs	r2, r3
 800088a:	2100      	movs	r1, #0
 800088c:	f002 fd3a 	bl	8003304 <memset>
  if(huart->Instance==USART1)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a18      	ldr	r2, [pc, #96]	; (80008f8 <HAL_UART_MspInit+0x80>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d12a      	bne.n	80008f0 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800089a:	4b18      	ldr	r3, [pc, #96]	; (80008fc <HAL_UART_MspInit+0x84>)
 800089c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <HAL_UART_MspInit+0x84>)
 80008a0:	2180      	movs	r1, #128	; 0x80
 80008a2:	01c9      	lsls	r1, r1, #7
 80008a4:	430a      	orrs	r2, r1
 80008a6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a8:	4b14      	ldr	r3, [pc, #80]	; (80008fc <HAL_UART_MspInit+0x84>)
 80008aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008ac:	4b13      	ldr	r3, [pc, #76]	; (80008fc <HAL_UART_MspInit+0x84>)
 80008ae:	2101      	movs	r1, #1
 80008b0:	430a      	orrs	r2, r1
 80008b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <HAL_UART_MspInit+0x84>)
 80008b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b8:	2201      	movs	r2, #1
 80008ba:	4013      	ands	r3, r2
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BSP_UART_TX_Pin|BSP_UART_RX_Pin;
 80008c0:	193b      	adds	r3, r7, r4
 80008c2:	22c0      	movs	r2, #192	; 0xc0
 80008c4:	00d2      	lsls	r2, r2, #3
 80008c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c8:	0021      	movs	r1, r4
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2202      	movs	r2, #2
 80008ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2203      	movs	r2, #3
 80008da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2204      	movs	r2, #4
 80008e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e2:	187a      	adds	r2, r7, r1
 80008e4:	23a0      	movs	r3, #160	; 0xa0
 80008e6:	05db      	lsls	r3, r3, #23
 80008e8:	0011      	movs	r1, r2
 80008ea:	0018      	movs	r0, r3
 80008ec:	f000 fe52 	bl	8001594 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	b009      	add	sp, #36	; 0x24
 80008f6:	bd90      	pop	{r4, r7, pc}
 80008f8:	40013800 	.word	0x40013800
 80008fc:	40021000 	.word	0x40021000

08000900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <NMI_Handler+0x4>

08000906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090a:	e7fe      	b.n	800090a <HardFault_Handler+0x4>

0800090c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000910:	46c0      	nop			; (mov r8, r8)
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000924:	f000 f8ca 	bl	8000abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000928:	46c0      	nop			; (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8000934:	4b03      	ldr	r3, [pc, #12]	; (8000944 <ADC1_COMP_IRQHandler+0x14>)
 8000936:	0018      	movs	r0, r3
 8000938:	f000 face 	bl	8000ed8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	2000008c 	.word	0x2000008c

08000948 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000950:	4a14      	ldr	r2, [pc, #80]	; (80009a4 <_sbrk+0x5c>)
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <_sbrk+0x60>)
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800095c:	4b13      	ldr	r3, [pc, #76]	; (80009ac <_sbrk+0x64>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d102      	bne.n	800096a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000964:	4b11      	ldr	r3, [pc, #68]	; (80009ac <_sbrk+0x64>)
 8000966:	4a12      	ldr	r2, [pc, #72]	; (80009b0 <_sbrk+0x68>)
 8000968:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <_sbrk+0x64>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	18d3      	adds	r3, r2, r3
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	429a      	cmp	r2, r3
 8000976:	d207      	bcs.n	8000988 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000978:	f002 fc9a 	bl	80032b0 <__errno>
 800097c:	0003      	movs	r3, r0
 800097e:	220c      	movs	r2, #12
 8000980:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000982:	2301      	movs	r3, #1
 8000984:	425b      	negs	r3, r3
 8000986:	e009      	b.n	800099c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <_sbrk+0x64>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800098e:	4b07      	ldr	r3, [pc, #28]	; (80009ac <_sbrk+0x64>)
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	18d2      	adds	r2, r2, r3
 8000996:	4b05      	ldr	r3, [pc, #20]	; (80009ac <_sbrk+0x64>)
 8000998:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800099a:	68fb      	ldr	r3, [r7, #12]
}
 800099c:	0018      	movs	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	b006      	add	sp, #24
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20002000 	.word	0x20002000
 80009a8:	00000400 	.word	0x00000400
 80009ac:	20000180 	.word	0x20000180
 80009b0:	20000198 	.word	0x20000198

080009b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80009c0:	480d      	ldr	r0, [pc, #52]	; (80009f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009c2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009c4:	f7ff fff6 	bl	80009b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c8:	480c      	ldr	r0, [pc, #48]	; (80009fc <LoopForever+0x6>)
  ldr r1, =_edata
 80009ca:	490d      	ldr	r1, [pc, #52]	; (8000a00 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009cc:	4a0d      	ldr	r2, [pc, #52]	; (8000a04 <LoopForever+0xe>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d0:	e002      	b.n	80009d8 <LoopCopyDataInit>

080009d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d6:	3304      	adds	r3, #4

080009d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009dc:	d3f9      	bcc.n	80009d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009de:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009e0:	4c0a      	ldr	r4, [pc, #40]	; (8000a0c <LoopForever+0x16>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e4:	e001      	b.n	80009ea <LoopFillZerobss>

080009e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e8:	3204      	adds	r2, #4

080009ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ec:	d3fb      	bcc.n	80009e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ee:	f002 fc65 	bl	80032bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009f2:	f7ff fd6b 	bl	80004cc <main>

080009f6 <LoopForever>:

LoopForever:
    b LoopForever
 80009f6:	e7fe      	b.n	80009f6 <LoopForever>
  ldr   r0, =_estack
 80009f8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80009fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a00:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a04:	08003cb8 	.word	0x08003cb8
  ldr r2, =_sbss
 8000a08:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a0c:	20000198 	.word	0x20000198

08000a10 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a10:	e7fe      	b.n	8000a10 <DMA1_Channel1_IRQHandler>
	...

08000a14 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a1a:	1dfb      	adds	r3, r7, #7
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000a20:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <HAL_Init+0x3c>)
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <HAL_Init+0x3c>)
 8000a26:	2140      	movs	r1, #64	; 0x40
 8000a28:	430a      	orrs	r2, r1
 8000a2a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f000 f811 	bl	8000a54 <HAL_InitTick>
 8000a32:	1e03      	subs	r3, r0, #0
 8000a34:	d003      	beq.n	8000a3e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000a36:	1dfb      	adds	r3, r7, #7
 8000a38:	2201      	movs	r2, #1
 8000a3a:	701a      	strb	r2, [r3, #0]
 8000a3c:	e001      	b.n	8000a42 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a3e:	f7ff fec3 	bl	80007c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a42:	1dfb      	adds	r3, r7, #7
 8000a44:	781b      	ldrb	r3, [r3, #0]
}
 8000a46:	0018      	movs	r0, r3
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	b002      	add	sp, #8
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	40022000 	.word	0x40022000

08000a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a54:	b590      	push	{r4, r7, lr}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <HAL_InitTick+0x5c>)
 8000a5e:	681c      	ldr	r4, [r3, #0]
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <HAL_InitTick+0x60>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	0019      	movs	r1, r3
 8000a66:	23fa      	movs	r3, #250	; 0xfa
 8000a68:	0098      	lsls	r0, r3, #2
 8000a6a:	f7ff fb5f 	bl	800012c <__udivsi3>
 8000a6e:	0003      	movs	r3, r0
 8000a70:	0019      	movs	r1, r3
 8000a72:	0020      	movs	r0, r4
 8000a74:	f7ff fb5a 	bl	800012c <__udivsi3>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f000 fd7d 	bl	800157a <HAL_SYSTICK_Config>
 8000a80:	1e03      	subs	r3, r0, #0
 8000a82:	d001      	beq.n	8000a88 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a84:	2301      	movs	r3, #1
 8000a86:	e00f      	b.n	8000aa8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2b03      	cmp	r3, #3
 8000a8c:	d80b      	bhi.n	8000aa6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a8e:	6879      	ldr	r1, [r7, #4]
 8000a90:	2301      	movs	r3, #1
 8000a92:	425b      	negs	r3, r3
 8000a94:	2200      	movs	r2, #0
 8000a96:	0018      	movs	r0, r3
 8000a98:	f000 fd4a 	bl	8001530 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_InitTick+0x64>)
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	e000      	b.n	8000aa8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
}
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b003      	add	sp, #12
 8000aae:	bd90      	pop	{r4, r7, pc}
 8000ab0:	20000000 	.word	0x20000000
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	20000004 	.word	0x20000004

08000abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <HAL_IncTick+0x1c>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	001a      	movs	r2, r3
 8000ac6:	4b05      	ldr	r3, [pc, #20]	; (8000adc <HAL_IncTick+0x20>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	18d2      	adds	r2, r2, r3
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <HAL_IncTick+0x20>)
 8000ace:	601a      	str	r2, [r3, #0]
}
 8000ad0:	46c0      	nop			; (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	20000008 	.word	0x20000008
 8000adc:	20000184 	.word	0x20000184

08000ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae4:	4b02      	ldr	r3, [pc, #8]	; (8000af0 <HAL_GetTick+0x10>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
}
 8000ae8:	0018      	movs	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	20000184 	.word	0x20000184

08000af4 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d101      	bne.n	8000b06 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e159      	b.n	8000dba <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d10a      	bne.n	8000b24 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2200      	movs	r2, #0
 8000b12:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2250      	movs	r2, #80	; 0x50
 8000b18:	2100      	movs	r1, #0
 8000b1a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f7ff fe66 	bl	80007f0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b28:	2210      	movs	r2, #16
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	2b10      	cmp	r3, #16
 8000b2e:	d005      	beq.n	8000b3c <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	2204      	movs	r2, #4
 8000b38:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000b3a:	d00b      	beq.n	8000b54 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b40:	2210      	movs	r2, #16
 8000b42:	431a      	orrs	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2250      	movs	r2, #80	; 0x50
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000b50:	2301      	movs	r3, #1
 8000b52:	e132      	b.n	8000dba <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b58:	4a9a      	ldr	r2, [pc, #616]	; (8000dc4 <HAL_ADC_Init+0x2d0>)
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	2202      	movs	r2, #2
 8000b5e:	431a      	orrs	r2, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	2203      	movs	r2, #3
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d108      	bne.n	8000b84 <HAL_ADC_Init+0x90>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2201      	movs	r2, #1
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d101      	bne.n	8000b84 <HAL_ADC_Init+0x90>
 8000b80:	2301      	movs	r3, #1
 8000b82:	e000      	b.n	8000b86 <HAL_ADC_Init+0x92>
 8000b84:	2300      	movs	r3, #0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d149      	bne.n	8000c1e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	23c0      	movs	r3, #192	; 0xc0
 8000b90:	061b      	lsls	r3, r3, #24
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d00b      	beq.n	8000bae <HAL_ADC_Init+0xba>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	685a      	ldr	r2, [r3, #4]
 8000b9a:	2380      	movs	r3, #128	; 0x80
 8000b9c:	05db      	lsls	r3, r3, #23
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d005      	beq.n	8000bae <HAL_ADC_Init+0xba>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	685a      	ldr	r2, [r3, #4]
 8000ba6:	2380      	movs	r3, #128	; 0x80
 8000ba8:	061b      	lsls	r3, r3, #24
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d111      	bne.n	8000bd2 <HAL_ADC_Init+0xde>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	691a      	ldr	r2, [r3, #16]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	0092      	lsls	r2, r2, #2
 8000bba:	0892      	lsrs	r2, r2, #2
 8000bbc:	611a      	str	r2, [r3, #16]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	6919      	ldr	r1, [r3, #16]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685a      	ldr	r2, [r3, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	611a      	str	r2, [r3, #16]
 8000bd0:	e014      	b.n	8000bfc <HAL_ADC_Init+0x108>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	691a      	ldr	r2, [r3, #16]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	0092      	lsls	r2, r2, #2
 8000bde:	0892      	lsrs	r2, r2, #2
 8000be0:	611a      	str	r2, [r3, #16]
 8000be2:	4b79      	ldr	r3, [pc, #484]	; (8000dc8 <HAL_ADC_Init+0x2d4>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	4b78      	ldr	r3, [pc, #480]	; (8000dc8 <HAL_ADC_Init+0x2d4>)
 8000be8:	4978      	ldr	r1, [pc, #480]	; (8000dcc <HAL_ADC_Init+0x2d8>)
 8000bea:	400a      	ands	r2, r1
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	4b76      	ldr	r3, [pc, #472]	; (8000dc8 <HAL_ADC_Init+0x2d4>)
 8000bf0:	6819      	ldr	r1, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	685a      	ldr	r2, [r3, #4]
 8000bf6:	4b74      	ldr	r3, [pc, #464]	; (8000dc8 <HAL_ADC_Init+0x2d4>)
 8000bf8:	430a      	orrs	r2, r1
 8000bfa:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	68da      	ldr	r2, [r3, #12]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2118      	movs	r1, #24
 8000c08:	438a      	bics	r2, r1
 8000c0a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	68d9      	ldr	r1, [r3, #12]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	689a      	ldr	r2, [r3, #8]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000c1e:	4b6a      	ldr	r3, [pc, #424]	; (8000dc8 <HAL_ADC_Init+0x2d4>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	4b69      	ldr	r3, [pc, #420]	; (8000dc8 <HAL_ADC_Init+0x2d4>)
 8000c24:	496a      	ldr	r1, [pc, #424]	; (8000dd0 <HAL_ADC_Init+0x2dc>)
 8000c26:	400a      	ands	r2, r1
 8000c28:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8000c2a:	4b67      	ldr	r3, [pc, #412]	; (8000dc8 <HAL_ADC_Init+0x2d4>)
 8000c2c:	6819      	ldr	r1, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c32:	065a      	lsls	r2, r3, #25
 8000c34:	4b64      	ldr	r3, [pc, #400]	; (8000dc8 <HAL_ADC_Init+0x2d4>)
 8000c36:	430a      	orrs	r2, r1
 8000c38:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	689a      	ldr	r2, [r3, #8]
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	055b      	lsls	r3, r3, #21
 8000c44:	4013      	ands	r3, r2
 8000c46:	d108      	bne.n	8000c5a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	689a      	ldr	r2, [r3, #8]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2180      	movs	r1, #128	; 0x80
 8000c54:	0549      	lsls	r1, r1, #21
 8000c56:	430a      	orrs	r2, r1
 8000c58:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	68da      	ldr	r2, [r3, #12]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	495b      	ldr	r1, [pc, #364]	; (8000dd4 <HAL_ADC_Init+0x2e0>)
 8000c66:	400a      	ands	r2, r1
 8000c68:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	68d9      	ldr	r1, [r3, #12]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	691b      	ldr	r3, [r3, #16]
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d101      	bne.n	8000c80 <HAL_ADC_Init+0x18c>
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	e000      	b.n	8000c82 <HAL_ADC_Init+0x18e>
 8000c80:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000c82:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2020      	movs	r0, #32
 8000c88:	5c1b      	ldrb	r3, [r3, r0]
 8000c8a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000c8c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	202c      	movs	r0, #44	; 0x2c
 8000c92:	5c1b      	ldrb	r3, [r3, r0]
 8000c94:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000c96:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000c9c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000ca4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000cac:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cba:	23c2      	movs	r3, #194	; 0xc2
 8000cbc:	33ff      	adds	r3, #255	; 0xff
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d00b      	beq.n	8000cda <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	68d9      	ldr	r1, [r3, #12]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000cd0:	431a      	orrs	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2221      	movs	r2, #33	; 0x21
 8000cde:	5c9b      	ldrb	r3, [r3, r2]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d11a      	bne.n	8000d1a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2220      	movs	r2, #32
 8000ce8:	5c9b      	ldrb	r3, [r3, r2]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d109      	bne.n	8000d02 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	68da      	ldr	r2, [r3, #12]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2180      	movs	r1, #128	; 0x80
 8000cfa:	0249      	lsls	r1, r1, #9
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	60da      	str	r2, [r3, #12]
 8000d00:	e00b      	b.n	8000d1a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d06:	2220      	movs	r2, #32
 8000d08:	431a      	orrs	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d12:	2201      	movs	r2, #1
 8000d14:	431a      	orrs	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d11f      	bne.n	8000d62 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	691a      	ldr	r2, [r3, #16]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	492a      	ldr	r1, [pc, #168]	; (8000dd8 <HAL_ADC_Init+0x2e4>)
 8000d2e:	400a      	ands	r2, r1
 8000d30:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	6919      	ldr	r1, [r3, #16]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000d40:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8000d46:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	691a      	ldr	r2, [r3, #16]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	611a      	str	r2, [r3, #16]
 8000d60:	e00e      	b.n	8000d80 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	691b      	ldr	r3, [r3, #16]
 8000d68:	2201      	movs	r2, #1
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d107      	bne.n	8000d80 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	691a      	ldr	r2, [r3, #16]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	438a      	bics	r2, r1
 8000d7e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	695a      	ldr	r2, [r3, #20]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2107      	movs	r1, #7
 8000d8c:	438a      	bics	r2, r1
 8000d8e:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	6959      	ldr	r1, [r3, #20]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dac:	2203      	movs	r2, #3
 8000dae:	4393      	bics	r3, r2
 8000db0:	2201      	movs	r2, #1
 8000db2:	431a      	orrs	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	0018      	movs	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b002      	add	sp, #8
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	fffffefd 	.word	0xfffffefd
 8000dc8:	40012708 	.word	0x40012708
 8000dcc:	ffc3ffff 	.word	0xffc3ffff
 8000dd0:	fdffffff 	.word	0xfdffffff
 8000dd4:	fffe0219 	.word	0xfffe0219
 8000dd8:	fffffc03 	.word	0xfffffc03

08000ddc <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000de4:	230f      	movs	r3, #15
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	2204      	movs	r2, #4
 8000df4:	4013      	ands	r3, r2
 8000df6:	d156      	bne.n	8000ea6 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2250      	movs	r2, #80	; 0x50
 8000dfc:	5c9b      	ldrb	r3, [r3, r2]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d101      	bne.n	8000e06 <HAL_ADC_Start_IT+0x2a>
 8000e02:	2302      	movs	r3, #2
 8000e04:	e056      	b.n	8000eb4 <HAL_ADC_Start_IT+0xd8>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2250      	movs	r2, #80	; 0x50
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d007      	beq.n	8000e26 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000e16:	230f      	movs	r3, #15
 8000e18:	18fc      	adds	r4, r7, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f000 f9b5 	bl	800118c <ADC_Enable>
 8000e22:	0003      	movs	r3, r0
 8000e24:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e26:	230f      	movs	r3, #15
 8000e28:	18fb      	adds	r3, r7, r3
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d13e      	bne.n	8000eae <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e34:	4a21      	ldr	r2, [pc, #132]	; (8000ebc <HAL_ADC_Start_IT+0xe0>)
 8000e36:	4013      	ands	r3, r2
 8000e38:	2280      	movs	r2, #128	; 0x80
 8000e3a:	0052      	lsls	r2, r2, #1
 8000e3c:	431a      	orrs	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2200      	movs	r2, #0
 8000e46:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2250      	movs	r2, #80	; 0x50
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	221c      	movs	r2, #28
 8000e56:	601a      	str	r2, [r3, #0]

      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */
      switch (hadc->Init.EOCSelection)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	695b      	ldr	r3, [r3, #20]
 8000e5c:	2b08      	cmp	r3, #8
 8000e5e:	d110      	bne.n	8000e82 <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2104      	movs	r1, #4
 8000e6c:	438a      	bics	r2, r1
 8000e6e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	685a      	ldr	r2, [r3, #4]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2118      	movs	r1, #24
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	605a      	str	r2, [r3, #4]
          break;
 8000e80:	e008      	b.n	8000e94 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	685a      	ldr	r2, [r3, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	211c      	movs	r1, #28
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	605a      	str	r2, [r3, #4]
          break;
 8000e92:	46c0      	nop			; (mov r8, r8)

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	689a      	ldr	r2, [r3, #8]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2104      	movs	r1, #4
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	e003      	b.n	8000eae <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000ea6:	230f      	movs	r3, #15
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	2202      	movs	r2, #2
 8000eac:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8000eae:	230f      	movs	r3, #15
 8000eb0:	18fb      	adds	r3, r7, r3
 8000eb2:	781b      	ldrb	r3, [r3, #0]
}
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b005      	add	sp, #20
 8000eba:	bd90      	pop	{r4, r7, pc}
 8000ebc:	fffff0fe 	.word	0xfffff0fe

08000ec0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000ece:	0018      	movs	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	b002      	add	sp, #8
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2204      	movs	r2, #4
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	d003      	beq.n	8000f00 <HAL_ADC_IRQHandler+0x28>
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	2204      	movs	r2, #4
 8000efc:	4013      	ands	r3, r2
 8000efe:	d107      	bne.n	8000f10 <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	2208      	movs	r2, #8
 8000f04:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000f06:	d04e      	beq.n	8000fa6 <HAL_ADC_IRQHandler+0xce>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	2208      	movs	r2, #8
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	d04a      	beq.n	8000fa6 <HAL_ADC_IRQHandler+0xce>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f14:	2210      	movs	r2, #16
 8000f16:	4013      	ands	r3, r2
 8000f18:	d106      	bne.n	8000f28 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f1e:	2280      	movs	r2, #128	; 0x80
 8000f20:	0092      	lsls	r2, r2, #2
 8000f22:	431a      	orrs	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	68da      	ldr	r2, [r3, #12]
 8000f2e:	23c0      	movs	r3, #192	; 0xc0
 8000f30:	011b      	lsls	r3, r3, #4
 8000f32:	4013      	ands	r3, r2
 8000f34:	d12b      	bne.n	8000f8e <HAL_ADC_IRQHandler+0xb6>
        (hadc->Init.ContinuousConvMode == DISABLE))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2220      	movs	r2, #32
 8000f3a:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d126      	bne.n	8000f8e <HAL_ADC_IRQHandler+0xb6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if ((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2208      	movs	r2, #8
 8000f44:	4013      	ands	r3, r2
 8000f46:	d022      	beq.n	8000f8e <HAL_ADC_IRQHandler+0xb6>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	2204      	movs	r2, #4
 8000f50:	4013      	ands	r3, r2
 8000f52:	d110      	bne.n	8000f76 <HAL_ADC_IRQHandler+0x9e>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	685a      	ldr	r2, [r3, #4]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	210c      	movs	r1, #12
 8000f60:	438a      	bics	r2, r1
 8000f62:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f68:	4a2f      	ldr	r2, [pc, #188]	; (8001028 <HAL_ADC_IRQHandler+0x150>)
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	655a      	str	r2, [r3, #84]	; 0x54
 8000f74:	e00b      	b.n	8000f8e <HAL_ADC_IRQHandler+0xb6>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f7a:	2220      	movs	r2, #32
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f86:	2201      	movs	r2, #1
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	0018      	movs	r0, r3
 8000f92:	f7ff fbe7 	bl	8000764 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d003      	beq.n	8000fa6 <HAL_ADC_IRQHandler+0xce>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2280      	movs	r2, #128	; 0x80
 8000faa:	4013      	ands	r3, r2
 8000fac:	d012      	beq.n	8000fd4 <HAL_ADC_IRQHandler+0xfc>
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	2280      	movs	r2, #128	; 0x80
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	d00e      	beq.n	8000fd4 <HAL_ADC_IRQHandler+0xfc>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fba:	2280      	movs	r2, #128	; 0x80
 8000fbc:	0252      	lsls	r2, r2, #9
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	655a      	str	r2, [r3, #84]	; 0x54

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f000 f830 	bl	800102c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2280      	movs	r2, #128	; 0x80
 8000fd2:	601a      	str	r2, [r3, #0]

  }


  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2210      	movs	r2, #16
 8000fd8:	4013      	ands	r3, r2
 8000fda:	d020      	beq.n	800101e <HAL_ADC_IRQHandler+0x146>
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	2210      	movs	r2, #16
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	d01c      	beq.n	800101e <HAL_ADC_IRQHandler+0x146>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d006      	beq.n	8000ffa <HAL_ADC_IRQHandler+0x122>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d10d      	bne.n	8001016 <HAL_ADC_IRQHandler+0x13e>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffe:	2202      	movs	r2, #2
 8001000:	431a      	orrs	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	659a      	str	r2, [r3, #88]	; 0x58

      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2210      	movs	r2, #16
 800100c:	601a      	str	r2, [r3, #0]

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	0018      	movs	r0, r3
 8001012:	f000 f813 	bl	800103c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2210      	movs	r2, #16
 800101c:	601a      	str	r2, [r3, #0]
  }

}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	46bd      	mov	sp, r7
 8001022:	b004      	add	sp, #16
 8001024:	bd80      	pop	{r7, pc}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	fffffefe 	.word	0xfffffefe

0800102c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001034:	46c0      	nop			; (mov r8, r8)
 8001036:	46bd      	mov	sp, r7
 8001038:	b002      	add	sp, #8
 800103a:	bd80      	pop	{r7, pc}

0800103c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001044:	46c0      	nop			; (mov r8, r8)
 8001046:	46bd      	mov	sp, r7
 8001048:	b002      	add	sp, #8
 800104a:	bd80      	pop	{r7, pc}

0800104c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2250      	movs	r2, #80	; 0x50
 800105a:	5c9b      	ldrb	r3, [r3, r2]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d101      	bne.n	8001064 <HAL_ADC_ConfigChannel+0x18>
 8001060:	2302      	movs	r3, #2
 8001062:	e085      	b.n	8001170 <HAL_ADC_ConfigChannel+0x124>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2250      	movs	r2, #80	; 0x50
 8001068:	2101      	movs	r1, #1
 800106a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	2204      	movs	r2, #4
 8001074:	4013      	ands	r3, r2
 8001076:	d00b      	beq.n	8001090 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800107c:	2220      	movs	r2, #32
 800107e:	431a      	orrs	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2250      	movs	r2, #80	; 0x50
 8001088:	2100      	movs	r1, #0
 800108a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e06f      	b.n	8001170 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	4a38      	ldr	r2, [pc, #224]	; (8001178 <HAL_ADC_ConfigChannel+0x12c>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d035      	beq.n	8001106 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	035b      	lsls	r3, r3, #13
 80010a6:	0b5a      	lsrs	r2, r3, #13
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	430a      	orrs	r2, r1
 80010ae:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	2380      	movs	r3, #128	; 0x80
 80010b6:	02db      	lsls	r3, r3, #11
 80010b8:	4013      	ands	r3, r2
 80010ba:	d009      	beq.n	80010d0 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 80010bc:	4b2f      	ldr	r3, [pc, #188]	; (800117c <HAL_ADC_ConfigChannel+0x130>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b2e      	ldr	r3, [pc, #184]	; (800117c <HAL_ADC_ConfigChannel+0x130>)
 80010c2:	2180      	movs	r1, #128	; 0x80
 80010c4:	0409      	lsls	r1, r1, #16
 80010c6:	430a      	orrs	r2, r1
 80010c8:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80010ca:	200a      	movs	r0, #10
 80010cc:	f000 f8c6 	bl	800125c <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	2380      	movs	r3, #128	; 0x80
 80010d6:	029b      	lsls	r3, r3, #10
 80010d8:	4013      	ands	r3, r2
 80010da:	d006      	beq.n	80010ea <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80010dc:	4b27      	ldr	r3, [pc, #156]	; (800117c <HAL_ADC_ConfigChannel+0x130>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b26      	ldr	r3, [pc, #152]	; (800117c <HAL_ADC_ConfigChannel+0x130>)
 80010e2:	2180      	movs	r1, #128	; 0x80
 80010e4:	03c9      	lsls	r1, r1, #15
 80010e6:	430a      	orrs	r2, r1
 80010e8:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	2380      	movs	r3, #128	; 0x80
 80010f0:	025b      	lsls	r3, r3, #9
 80010f2:	4013      	ands	r3, r2
 80010f4:	d037      	beq.n	8001166 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 80010f6:	4b21      	ldr	r3, [pc, #132]	; (800117c <HAL_ADC_ConfigChannel+0x130>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	4b20      	ldr	r3, [pc, #128]	; (800117c <HAL_ADC_ConfigChannel+0x130>)
 80010fc:	2180      	movs	r1, #128	; 0x80
 80010fe:	0449      	lsls	r1, r1, #17
 8001100:	430a      	orrs	r2, r1
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	e02f      	b.n	8001166 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	035b      	lsls	r3, r3, #13
 8001112:	0b5b      	lsrs	r3, r3, #13
 8001114:	43d9      	mvns	r1, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	400a      	ands	r2, r1
 800111c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	2380      	movs	r3, #128	; 0x80
 8001124:	02db      	lsls	r3, r3, #11
 8001126:	4013      	ands	r3, r2
 8001128:	d005      	beq.n	8001136 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <HAL_ADC_ConfigChannel+0x130>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <HAL_ADC_ConfigChannel+0x130>)
 8001130:	4913      	ldr	r1, [pc, #76]	; (8001180 <HAL_ADC_ConfigChannel+0x134>)
 8001132:	400a      	ands	r2, r1
 8001134:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	2380      	movs	r3, #128	; 0x80
 800113c:	029b      	lsls	r3, r3, #10
 800113e:	4013      	ands	r3, r2
 8001140:	d005      	beq.n	800114e <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <HAL_ADC_ConfigChannel+0x130>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4b0d      	ldr	r3, [pc, #52]	; (800117c <HAL_ADC_ConfigChannel+0x130>)
 8001148:	490e      	ldr	r1, [pc, #56]	; (8001184 <HAL_ADC_ConfigChannel+0x138>)
 800114a:	400a      	ands	r2, r1
 800114c:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	025b      	lsls	r3, r3, #9
 8001156:	4013      	ands	r3, r2
 8001158:	d005      	beq.n	8001166 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <HAL_ADC_ConfigChannel+0x130>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <HAL_ADC_ConfigChannel+0x130>)
 8001160:	4909      	ldr	r1, [pc, #36]	; (8001188 <HAL_ADC_ConfigChannel+0x13c>)
 8001162:	400a      	ands	r2, r1
 8001164:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2250      	movs	r2, #80	; 0x50
 800116a:	2100      	movs	r1, #0
 800116c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800116e:	2300      	movs	r3, #0
}
 8001170:	0018      	movs	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	b002      	add	sp, #8
 8001176:	bd80      	pop	{r7, pc}
 8001178:	00001001 	.word	0x00001001
 800117c:	40012708 	.word	0x40012708
 8001180:	ff7fffff 	.word	0xff7fffff
 8001184:	ffbfffff 	.word	0xffbfffff
 8001188:	feffffff 	.word	0xfeffffff

0800118c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	2203      	movs	r2, #3
 80011a0:	4013      	ands	r3, r2
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d108      	bne.n	80011b8 <ADC_Enable+0x2c>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2201      	movs	r2, #1
 80011ae:	4013      	ands	r3, r2
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d101      	bne.n	80011b8 <ADC_Enable+0x2c>
 80011b4:	2301      	movs	r3, #1
 80011b6:	e000      	b.n	80011ba <ADC_Enable+0x2e>
 80011b8:	2300      	movs	r3, #0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d146      	bne.n	800124c <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	4a24      	ldr	r2, [pc, #144]	; (8001258 <ADC_Enable+0xcc>)
 80011c6:	4013      	ands	r3, r2
 80011c8:	d00d      	beq.n	80011e6 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ce:	2210      	movs	r2, #16
 80011d0:	431a      	orrs	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011da:	2201      	movs	r2, #1
 80011dc:	431a      	orrs	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e033      	b.n	800124e <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2101      	movs	r1, #1
 80011f2:	430a      	orrs	r2, r1
 80011f4:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80011f6:	2001      	movs	r0, #1
 80011f8:	f000 f830 	bl	800125c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80011fc:	f7ff fc70 	bl	8000ae0 <HAL_GetTick>
 8001200:	0003      	movs	r3, r0
 8001202:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001204:	e01b      	b.n	800123e <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001206:	f7ff fc6b 	bl	8000ae0 <HAL_GetTick>
 800120a:	0002      	movs	r2, r0
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b0a      	cmp	r3, #10
 8001212:	d914      	bls.n	800123e <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2201      	movs	r2, #1
 800121c:	4013      	ands	r3, r2
 800121e:	2b01      	cmp	r3, #1
 8001220:	d00d      	beq.n	800123e <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001226:	2210      	movs	r2, #16
 8001228:	431a      	orrs	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001232:	2201      	movs	r2, #1
 8001234:	431a      	orrs	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e007      	b.n	800124e <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2201      	movs	r2, #1
 8001246:	4013      	ands	r3, r2
 8001248:	2b01      	cmp	r3, #1
 800124a:	d1dc      	bne.n	8001206 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	0018      	movs	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	b004      	add	sp, #16
 8001254:	bd80      	pop	{r7, pc}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	80000017 	.word	0x80000017

0800125c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001264:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <ADC_DelayMicroSecond+0x38>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	490b      	ldr	r1, [pc, #44]	; (8001298 <ADC_DelayMicroSecond+0x3c>)
 800126a:	0018      	movs	r0, r3
 800126c:	f7fe ff5e 	bl	800012c <__udivsi3>
 8001270:	0003      	movs	r3, r0
 8001272:	001a      	movs	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4353      	muls	r3, r2
 8001278:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800127a:	e002      	b.n	8001282 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	3b01      	subs	r3, #1
 8001280:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1f9      	bne.n	800127c <ADC_DelayMicroSecond+0x20>
  }
}
 8001288:	46c0      	nop			; (mov r8, r8)
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	46bd      	mov	sp, r7
 800128e:	b004      	add	sp, #16
 8001290:	bd80      	pop	{r7, pc}
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	20000000 	.word	0x20000000
 8001298:	000f4240 	.word	0x000f4240

0800129c <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012a6:	2317      	movs	r3, #23
 80012a8:	18fb      	adds	r3, r7, r3
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2250      	movs	r2, #80	; 0x50
 80012ba:	5c9b      	ldrb	r3, [r3, r2]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d101      	bne.n	80012c4 <HAL_ADCEx_Calibration_Start+0x28>
 80012c0:	2302      	movs	r3, #2
 80012c2:	e083      	b.n	80013cc <HAL_ADCEx_Calibration_Start+0x130>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2250      	movs	r2, #80	; 0x50
 80012c8:	2101      	movs	r1, #1
 80012ca:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	2203      	movs	r2, #3
 80012d4:	4013      	ands	r3, r2
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d108      	bne.n	80012ec <HAL_ADCEx_Calibration_Start+0x50>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2201      	movs	r2, #1
 80012e2:	4013      	ands	r3, r2
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d101      	bne.n	80012ec <HAL_ADCEx_Calibration_Start+0x50>
 80012e8:	2301      	movs	r3, #1
 80012ea:	e000      	b.n	80012ee <HAL_ADCEx_Calibration_Start+0x52>
 80012ec:	2300      	movs	r3, #0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d15b      	bne.n	80013aa <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f6:	4a37      	ldr	r2, [pc, #220]	; (80013d4 <HAL_ADCEx_Calibration_Start+0x138>)
 80012f8:	4013      	ands	r3, r2
 80012fa:	2202      	movs	r2, #2
 80012fc:	431a      	orrs	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	2203      	movs	r2, #3
 800130a:	4013      	ands	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	68da      	ldr	r2, [r3, #12]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2103      	movs	r1, #3
 800131a:	438a      	bics	r2, r1
 800131c:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2180      	movs	r1, #128	; 0x80
 800132a:	0609      	lsls	r1, r1, #24
 800132c:	430a      	orrs	r2, r1
 800132e:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8001330:	f7ff fbd6 	bl	8000ae0 <HAL_GetTick>
 8001334:	0003      	movs	r3, r0
 8001336:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001338:	e01d      	b.n	8001376 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if ((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800133a:	f7ff fbd1 	bl	8000ae0 <HAL_GetTick>
 800133e:	0002      	movs	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b0a      	cmp	r3, #10
 8001346:	d916      	bls.n	8001376 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	0fdb      	lsrs	r3, r3, #31
 8001350:	07da      	lsls	r2, r3, #31
 8001352:	2380      	movs	r3, #128	; 0x80
 8001354:	061b      	lsls	r3, r3, #24
 8001356:	429a      	cmp	r2, r3
 8001358:	d10d      	bne.n	8001376 <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800135e:	2212      	movs	r2, #18
 8001360:	4393      	bics	r3, r2
 8001362:	2210      	movs	r2, #16
 8001364:	431a      	orrs	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	655a      	str	r2, [r3, #84]	; 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2250      	movs	r2, #80	; 0x50
 800136e:	2100      	movs	r1, #0
 8001370:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e02a      	b.n	80013cc <HAL_ADCEx_Calibration_Start+0x130>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	0fdb      	lsrs	r3, r3, #31
 800137e:	07da      	lsls	r2, r3, #31
 8001380:	2380      	movs	r3, #128	; 0x80
 8001382:	061b      	lsls	r3, r3, #24
 8001384:	429a      	cmp	r2, r3
 8001386:	d0d8      	beq.n	800133a <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68d9      	ldr	r1, [r3, #12]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	430a      	orrs	r2, r1
 8001396:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800139c:	2203      	movs	r2, #3
 800139e:	4393      	bics	r3, r2
 80013a0:	2201      	movs	r2, #1
 80013a2:	431a      	orrs	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	655a      	str	r2, [r3, #84]	; 0x54
 80013a8:	e009      	b.n	80013be <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ae:	2220      	movs	r2, #32
 80013b0:	431a      	orrs	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80013b6:	2317      	movs	r3, #23
 80013b8:	18fb      	adds	r3, r7, r3
 80013ba:	2201      	movs	r2, #1
 80013bc:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2250      	movs	r2, #80	; 0x50
 80013c2:	2100      	movs	r1, #0
 80013c4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80013c6:	2317      	movs	r3, #23
 80013c8:	18fb      	adds	r3, r7, r3
 80013ca:	781b      	ldrb	r3, [r3, #0]
}
 80013cc:	0018      	movs	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	b006      	add	sp, #24
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	fffffefd 	.word	0xfffffefd

080013d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	0002      	movs	r2, r0
 80013e0:	1dfb      	adds	r3, r7, #7
 80013e2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013e4:	1dfb      	adds	r3, r7, #7
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b7f      	cmp	r3, #127	; 0x7f
 80013ea:	d809      	bhi.n	8001400 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ec:	1dfb      	adds	r3, r7, #7
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	001a      	movs	r2, r3
 80013f2:	231f      	movs	r3, #31
 80013f4:	401a      	ands	r2, r3
 80013f6:	4b04      	ldr	r3, [pc, #16]	; (8001408 <__NVIC_EnableIRQ+0x30>)
 80013f8:	2101      	movs	r1, #1
 80013fa:	4091      	lsls	r1, r2
 80013fc:	000a      	movs	r2, r1
 80013fe:	601a      	str	r2, [r3, #0]
  }
}
 8001400:	46c0      	nop			; (mov r8, r8)
 8001402:	46bd      	mov	sp, r7
 8001404:	b002      	add	sp, #8
 8001406:	bd80      	pop	{r7, pc}
 8001408:	e000e100 	.word	0xe000e100

0800140c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800140c:	b590      	push	{r4, r7, lr}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	0002      	movs	r2, r0
 8001414:	6039      	str	r1, [r7, #0]
 8001416:	1dfb      	adds	r3, r7, #7
 8001418:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800141a:	1dfb      	adds	r3, r7, #7
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b7f      	cmp	r3, #127	; 0x7f
 8001420:	d828      	bhi.n	8001474 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001422:	4a2f      	ldr	r2, [pc, #188]	; (80014e0 <__NVIC_SetPriority+0xd4>)
 8001424:	1dfb      	adds	r3, r7, #7
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	b25b      	sxtb	r3, r3
 800142a:	089b      	lsrs	r3, r3, #2
 800142c:	33c0      	adds	r3, #192	; 0xc0
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	589b      	ldr	r3, [r3, r2]
 8001432:	1dfa      	adds	r2, r7, #7
 8001434:	7812      	ldrb	r2, [r2, #0]
 8001436:	0011      	movs	r1, r2
 8001438:	2203      	movs	r2, #3
 800143a:	400a      	ands	r2, r1
 800143c:	00d2      	lsls	r2, r2, #3
 800143e:	21ff      	movs	r1, #255	; 0xff
 8001440:	4091      	lsls	r1, r2
 8001442:	000a      	movs	r2, r1
 8001444:	43d2      	mvns	r2, r2
 8001446:	401a      	ands	r2, r3
 8001448:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	019b      	lsls	r3, r3, #6
 800144e:	22ff      	movs	r2, #255	; 0xff
 8001450:	401a      	ands	r2, r3
 8001452:	1dfb      	adds	r3, r7, #7
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	0018      	movs	r0, r3
 8001458:	2303      	movs	r3, #3
 800145a:	4003      	ands	r3, r0
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001460:	481f      	ldr	r0, [pc, #124]	; (80014e0 <__NVIC_SetPriority+0xd4>)
 8001462:	1dfb      	adds	r3, r7, #7
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	b25b      	sxtb	r3, r3
 8001468:	089b      	lsrs	r3, r3, #2
 800146a:	430a      	orrs	r2, r1
 800146c:	33c0      	adds	r3, #192	; 0xc0
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001472:	e031      	b.n	80014d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001474:	4a1b      	ldr	r2, [pc, #108]	; (80014e4 <__NVIC_SetPriority+0xd8>)
 8001476:	1dfb      	adds	r3, r7, #7
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	0019      	movs	r1, r3
 800147c:	230f      	movs	r3, #15
 800147e:	400b      	ands	r3, r1
 8001480:	3b08      	subs	r3, #8
 8001482:	089b      	lsrs	r3, r3, #2
 8001484:	3306      	adds	r3, #6
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	18d3      	adds	r3, r2, r3
 800148a:	3304      	adds	r3, #4
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	1dfa      	adds	r2, r7, #7
 8001490:	7812      	ldrb	r2, [r2, #0]
 8001492:	0011      	movs	r1, r2
 8001494:	2203      	movs	r2, #3
 8001496:	400a      	ands	r2, r1
 8001498:	00d2      	lsls	r2, r2, #3
 800149a:	21ff      	movs	r1, #255	; 0xff
 800149c:	4091      	lsls	r1, r2
 800149e:	000a      	movs	r2, r1
 80014a0:	43d2      	mvns	r2, r2
 80014a2:	401a      	ands	r2, r3
 80014a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	019b      	lsls	r3, r3, #6
 80014aa:	22ff      	movs	r2, #255	; 0xff
 80014ac:	401a      	ands	r2, r3
 80014ae:	1dfb      	adds	r3, r7, #7
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	0018      	movs	r0, r3
 80014b4:	2303      	movs	r3, #3
 80014b6:	4003      	ands	r3, r0
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014bc:	4809      	ldr	r0, [pc, #36]	; (80014e4 <__NVIC_SetPriority+0xd8>)
 80014be:	1dfb      	adds	r3, r7, #7
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	001c      	movs	r4, r3
 80014c4:	230f      	movs	r3, #15
 80014c6:	4023      	ands	r3, r4
 80014c8:	3b08      	subs	r3, #8
 80014ca:	089b      	lsrs	r3, r3, #2
 80014cc:	430a      	orrs	r2, r1
 80014ce:	3306      	adds	r3, #6
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	18c3      	adds	r3, r0, r3
 80014d4:	3304      	adds	r3, #4
 80014d6:	601a      	str	r2, [r3, #0]
}
 80014d8:	46c0      	nop			; (mov r8, r8)
 80014da:	46bd      	mov	sp, r7
 80014dc:	b003      	add	sp, #12
 80014de:	bd90      	pop	{r4, r7, pc}
 80014e0:	e000e100 	.word	0xe000e100
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	1e5a      	subs	r2, r3, #1
 80014f4:	2380      	movs	r3, #128	; 0x80
 80014f6:	045b      	lsls	r3, r3, #17
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d301      	bcc.n	8001500 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fc:	2301      	movs	r3, #1
 80014fe:	e010      	b.n	8001522 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001500:	4b0a      	ldr	r3, [pc, #40]	; (800152c <SysTick_Config+0x44>)
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	3a01      	subs	r2, #1
 8001506:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001508:	2301      	movs	r3, #1
 800150a:	425b      	negs	r3, r3
 800150c:	2103      	movs	r1, #3
 800150e:	0018      	movs	r0, r3
 8001510:	f7ff ff7c 	bl	800140c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <SysTick_Config+0x44>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151a:	4b04      	ldr	r3, [pc, #16]	; (800152c <SysTick_Config+0x44>)
 800151c:	2207      	movs	r2, #7
 800151e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001520:	2300      	movs	r3, #0
}
 8001522:	0018      	movs	r0, r3
 8001524:	46bd      	mov	sp, r7
 8001526:	b002      	add	sp, #8
 8001528:	bd80      	pop	{r7, pc}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	e000e010 	.word	0xe000e010

08001530 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	60b9      	str	r1, [r7, #8]
 8001538:	607a      	str	r2, [r7, #4]
 800153a:	210f      	movs	r1, #15
 800153c:	187b      	adds	r3, r7, r1
 800153e:	1c02      	adds	r2, r0, #0
 8001540:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001542:	68ba      	ldr	r2, [r7, #8]
 8001544:	187b      	adds	r3, r7, r1
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	b25b      	sxtb	r3, r3
 800154a:	0011      	movs	r1, r2
 800154c:	0018      	movs	r0, r3
 800154e:	f7ff ff5d 	bl	800140c <__NVIC_SetPriority>
}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	46bd      	mov	sp, r7
 8001556:	b004      	add	sp, #16
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	0002      	movs	r2, r0
 8001562:	1dfb      	adds	r3, r7, #7
 8001564:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001566:	1dfb      	adds	r3, r7, #7
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	b25b      	sxtb	r3, r3
 800156c:	0018      	movs	r0, r3
 800156e:	f7ff ff33 	bl	80013d8 <__NVIC_EnableIRQ>
}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	46bd      	mov	sp, r7
 8001576:	b002      	add	sp, #8
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	0018      	movs	r0, r3
 8001586:	f7ff ffaf 	bl	80014e8 <SysTick_Config>
 800158a:	0003      	movs	r3, r0
}
 800158c:	0018      	movs	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	b002      	add	sp, #8
 8001592:	bd80      	pop	{r7, pc}

08001594 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80015aa:	e14f      	b.n	800184c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2101      	movs	r1, #1
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	4091      	lsls	r1, r2
 80015b6:	000a      	movs	r2, r1
 80015b8:	4013      	ands	r3, r2
 80015ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d100      	bne.n	80015c4 <HAL_GPIO_Init+0x30>
 80015c2:	e140      	b.n	8001846 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2203      	movs	r2, #3
 80015ca:	4013      	ands	r3, r2
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d005      	beq.n	80015dc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2203      	movs	r2, #3
 80015d6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d130      	bne.n	800163e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	2203      	movs	r2, #3
 80015e8:	409a      	lsls	r2, r3
 80015ea:	0013      	movs	r3, r2
 80015ec:	43da      	mvns	r2, r3
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	68da      	ldr	r2, [r3, #12]
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	409a      	lsls	r2, r3
 80015fe:	0013      	movs	r3, r2
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4313      	orrs	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001612:	2201      	movs	r2, #1
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	409a      	lsls	r2, r3
 8001618:	0013      	movs	r3, r2
 800161a:	43da      	mvns	r2, r3
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	091b      	lsrs	r3, r3, #4
 8001628:	2201      	movs	r2, #1
 800162a:	401a      	ands	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	409a      	lsls	r2, r3
 8001630:	0013      	movs	r3, r2
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4313      	orrs	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2203      	movs	r2, #3
 8001644:	4013      	ands	r3, r2
 8001646:	2b03      	cmp	r3, #3
 8001648:	d017      	beq.n	800167a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	2203      	movs	r2, #3
 8001656:	409a      	lsls	r2, r3
 8001658:	0013      	movs	r3, r2
 800165a:	43da      	mvns	r2, r3
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	4013      	ands	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	409a      	lsls	r2, r3
 800166c:	0013      	movs	r3, r2
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2203      	movs	r2, #3
 8001680:	4013      	ands	r3, r2
 8001682:	2b02      	cmp	r3, #2
 8001684:	d123      	bne.n	80016ce <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	08da      	lsrs	r2, r3, #3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3208      	adds	r2, #8
 800168e:	0092      	lsls	r2, r2, #2
 8001690:	58d3      	ldr	r3, [r2, r3]
 8001692:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	2207      	movs	r2, #7
 8001698:	4013      	ands	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	220f      	movs	r2, #15
 800169e:	409a      	lsls	r2, r3
 80016a0:	0013      	movs	r3, r2
 80016a2:	43da      	mvns	r2, r3
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	4013      	ands	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	691a      	ldr	r2, [r3, #16]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	2107      	movs	r1, #7
 80016b2:	400b      	ands	r3, r1
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	409a      	lsls	r2, r3
 80016b8:	0013      	movs	r3, r2
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	4313      	orrs	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	08da      	lsrs	r2, r3, #3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3208      	adds	r2, #8
 80016c8:	0092      	lsls	r2, r2, #2
 80016ca:	6939      	ldr	r1, [r7, #16]
 80016cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	2203      	movs	r2, #3
 80016da:	409a      	lsls	r2, r3
 80016dc:	0013      	movs	r3, r2
 80016de:	43da      	mvns	r2, r3
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2203      	movs	r2, #3
 80016ec:	401a      	ands	r2, r3
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	409a      	lsls	r2, r3
 80016f4:	0013      	movs	r3, r2
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	23c0      	movs	r3, #192	; 0xc0
 8001708:	029b      	lsls	r3, r3, #10
 800170a:	4013      	ands	r3, r2
 800170c:	d100      	bne.n	8001710 <HAL_GPIO_Init+0x17c>
 800170e:	e09a      	b.n	8001846 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001710:	4b54      	ldr	r3, [pc, #336]	; (8001864 <HAL_GPIO_Init+0x2d0>)
 8001712:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001714:	4b53      	ldr	r3, [pc, #332]	; (8001864 <HAL_GPIO_Init+0x2d0>)
 8001716:	2101      	movs	r1, #1
 8001718:	430a      	orrs	r2, r1
 800171a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800171c:	4a52      	ldr	r2, [pc, #328]	; (8001868 <HAL_GPIO_Init+0x2d4>)
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	089b      	lsrs	r3, r3, #2
 8001722:	3302      	adds	r3, #2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	589b      	ldr	r3, [r3, r2]
 8001728:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	2203      	movs	r2, #3
 800172e:	4013      	ands	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	220f      	movs	r2, #15
 8001734:	409a      	lsls	r2, r3
 8001736:	0013      	movs	r3, r2
 8001738:	43da      	mvns	r2, r3
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	4013      	ands	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	23a0      	movs	r3, #160	; 0xa0
 8001744:	05db      	lsls	r3, r3, #23
 8001746:	429a      	cmp	r2, r3
 8001748:	d019      	beq.n	800177e <HAL_GPIO_Init+0x1ea>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a47      	ldr	r2, [pc, #284]	; (800186c <HAL_GPIO_Init+0x2d8>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d013      	beq.n	800177a <HAL_GPIO_Init+0x1e6>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a46      	ldr	r2, [pc, #280]	; (8001870 <HAL_GPIO_Init+0x2dc>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d00d      	beq.n	8001776 <HAL_GPIO_Init+0x1e2>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a45      	ldr	r2, [pc, #276]	; (8001874 <HAL_GPIO_Init+0x2e0>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d007      	beq.n	8001772 <HAL_GPIO_Init+0x1de>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a44      	ldr	r2, [pc, #272]	; (8001878 <HAL_GPIO_Init+0x2e4>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d101      	bne.n	800176e <HAL_GPIO_Init+0x1da>
 800176a:	2305      	movs	r3, #5
 800176c:	e008      	b.n	8001780 <HAL_GPIO_Init+0x1ec>
 800176e:	2306      	movs	r3, #6
 8001770:	e006      	b.n	8001780 <HAL_GPIO_Init+0x1ec>
 8001772:	2303      	movs	r3, #3
 8001774:	e004      	b.n	8001780 <HAL_GPIO_Init+0x1ec>
 8001776:	2302      	movs	r3, #2
 8001778:	e002      	b.n	8001780 <HAL_GPIO_Init+0x1ec>
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <HAL_GPIO_Init+0x1ec>
 800177e:	2300      	movs	r3, #0
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	2103      	movs	r1, #3
 8001784:	400a      	ands	r2, r1
 8001786:	0092      	lsls	r2, r2, #2
 8001788:	4093      	lsls	r3, r2
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001790:	4935      	ldr	r1, [pc, #212]	; (8001868 <HAL_GPIO_Init+0x2d4>)
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	089b      	lsrs	r3, r3, #2
 8001796:	3302      	adds	r3, #2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800179e:	4b37      	ldr	r3, [pc, #220]	; (800187c <HAL_GPIO_Init+0x2e8>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	43da      	mvns	r2, r3
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	4013      	ands	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	2380      	movs	r3, #128	; 0x80
 80017b4:	035b      	lsls	r3, r3, #13
 80017b6:	4013      	ands	r3, r2
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4313      	orrs	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017c2:	4b2e      	ldr	r3, [pc, #184]	; (800187c <HAL_GPIO_Init+0x2e8>)
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80017c8:	4b2c      	ldr	r3, [pc, #176]	; (800187c <HAL_GPIO_Init+0x2e8>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	43da      	mvns	r2, r3
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	2380      	movs	r3, #128	; 0x80
 80017de:	039b      	lsls	r3, r3, #14
 80017e0:	4013      	ands	r3, r2
 80017e2:	d003      	beq.n	80017ec <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017ec:	4b23      	ldr	r3, [pc, #140]	; (800187c <HAL_GPIO_Init+0x2e8>)
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80017f2:	4b22      	ldr	r3, [pc, #136]	; (800187c <HAL_GPIO_Init+0x2e8>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	43da      	mvns	r2, r3
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	029b      	lsls	r3, r3, #10
 800180a:	4013      	ands	r3, r2
 800180c:	d003      	beq.n	8001816 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4313      	orrs	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001816:	4b19      	ldr	r3, [pc, #100]	; (800187c <HAL_GPIO_Init+0x2e8>)
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800181c:	4b17      	ldr	r3, [pc, #92]	; (800187c <HAL_GPIO_Init+0x2e8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	43da      	mvns	r2, r3
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	025b      	lsls	r3, r3, #9
 8001834:	4013      	ands	r3, r2
 8001836:	d003      	beq.n	8001840 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001840:	4b0e      	ldr	r3, [pc, #56]	; (800187c <HAL_GPIO_Init+0x2e8>)
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	3301      	adds	r3, #1
 800184a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	40da      	lsrs	r2, r3
 8001854:	1e13      	subs	r3, r2, #0
 8001856:	d000      	beq.n	800185a <HAL_GPIO_Init+0x2c6>
 8001858:	e6a8      	b.n	80015ac <HAL_GPIO_Init+0x18>
  }
}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	46c0      	nop			; (mov r8, r8)
 800185e:	46bd      	mov	sp, r7
 8001860:	b006      	add	sp, #24
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40021000 	.word	0x40021000
 8001868:	40010000 	.word	0x40010000
 800186c:	50000400 	.word	0x50000400
 8001870:	50000800 	.word	0x50000800
 8001874:	50000c00 	.word	0x50000c00
 8001878:	50001c00 	.word	0x50001c00
 800187c:	40010400 	.word	0x40010400

08001880 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001880:	b5b0      	push	{r4, r5, r7, lr}
 8001882:	b08a      	sub	sp, #40	; 0x28
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d102      	bne.n	8001894 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	f000 fbaf 	bl	8001ff2 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001894:	4bcf      	ldr	r3, [pc, #828]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	220c      	movs	r2, #12
 800189a:	4013      	ands	r3, r2
 800189c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800189e:	4bcd      	ldr	r3, [pc, #820]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	2380      	movs	r3, #128	; 0x80
 80018a4:	025b      	lsls	r3, r3, #9
 80018a6:	4013      	ands	r3, r2
 80018a8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2201      	movs	r2, #1
 80018b0:	4013      	ands	r3, r2
 80018b2:	d100      	bne.n	80018b6 <HAL_RCC_OscConfig+0x36>
 80018b4:	e07e      	b.n	80019b4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018b6:	6a3b      	ldr	r3, [r7, #32]
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d007      	beq.n	80018cc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018bc:	6a3b      	ldr	r3, [r7, #32]
 80018be:	2b0c      	cmp	r3, #12
 80018c0:	d112      	bne.n	80018e8 <HAL_RCC_OscConfig+0x68>
 80018c2:	69fa      	ldr	r2, [r7, #28]
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	025b      	lsls	r3, r3, #9
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d10d      	bne.n	80018e8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018cc:	4bc1      	ldr	r3, [pc, #772]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	029b      	lsls	r3, r3, #10
 80018d4:	4013      	ands	r3, r2
 80018d6:	d100      	bne.n	80018da <HAL_RCC_OscConfig+0x5a>
 80018d8:	e06b      	b.n	80019b2 <HAL_RCC_OscConfig+0x132>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d167      	bne.n	80019b2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	f000 fb85 	bl	8001ff2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	2380      	movs	r3, #128	; 0x80
 80018ee:	025b      	lsls	r3, r3, #9
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d107      	bne.n	8001904 <HAL_RCC_OscConfig+0x84>
 80018f4:	4bb7      	ldr	r3, [pc, #732]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4bb6      	ldr	r3, [pc, #728]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 80018fa:	2180      	movs	r1, #128	; 0x80
 80018fc:	0249      	lsls	r1, r1, #9
 80018fe:	430a      	orrs	r2, r1
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	e027      	b.n	8001954 <HAL_RCC_OscConfig+0xd4>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	23a0      	movs	r3, #160	; 0xa0
 800190a:	02db      	lsls	r3, r3, #11
 800190c:	429a      	cmp	r2, r3
 800190e:	d10e      	bne.n	800192e <HAL_RCC_OscConfig+0xae>
 8001910:	4bb0      	ldr	r3, [pc, #704]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4baf      	ldr	r3, [pc, #700]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 8001916:	2180      	movs	r1, #128	; 0x80
 8001918:	02c9      	lsls	r1, r1, #11
 800191a:	430a      	orrs	r2, r1
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	4bad      	ldr	r3, [pc, #692]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	4bac      	ldr	r3, [pc, #688]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 8001924:	2180      	movs	r1, #128	; 0x80
 8001926:	0249      	lsls	r1, r1, #9
 8001928:	430a      	orrs	r2, r1
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	e012      	b.n	8001954 <HAL_RCC_OscConfig+0xd4>
 800192e:	4ba9      	ldr	r3, [pc, #676]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	4ba8      	ldr	r3, [pc, #672]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 8001934:	49a8      	ldr	r1, [pc, #672]	; (8001bd8 <HAL_RCC_OscConfig+0x358>)
 8001936:	400a      	ands	r2, r1
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	4ba6      	ldr	r3, [pc, #664]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	025b      	lsls	r3, r3, #9
 8001942:	4013      	ands	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4ba2      	ldr	r3, [pc, #648]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4ba1      	ldr	r3, [pc, #644]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 800194e:	49a3      	ldr	r1, [pc, #652]	; (8001bdc <HAL_RCC_OscConfig+0x35c>)
 8001950:	400a      	ands	r2, r1
 8001952:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d015      	beq.n	8001988 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195c:	f7ff f8c0 	bl	8000ae0 <HAL_GetTick>
 8001960:	0003      	movs	r3, r0
 8001962:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001964:	e009      	b.n	800197a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001966:	f7ff f8bb 	bl	8000ae0 <HAL_GetTick>
 800196a:	0002      	movs	r2, r0
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b64      	cmp	r3, #100	; 0x64
 8001972:	d902      	bls.n	800197a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	f000 fb3c 	bl	8001ff2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800197a:	4b96      	ldr	r3, [pc, #600]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	029b      	lsls	r3, r3, #10
 8001982:	4013      	ands	r3, r2
 8001984:	d0ef      	beq.n	8001966 <HAL_RCC_OscConfig+0xe6>
 8001986:	e015      	b.n	80019b4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001988:	f7ff f8aa 	bl	8000ae0 <HAL_GetTick>
 800198c:	0003      	movs	r3, r0
 800198e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001992:	f7ff f8a5 	bl	8000ae0 <HAL_GetTick>
 8001996:	0002      	movs	r2, r0
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b64      	cmp	r3, #100	; 0x64
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e326      	b.n	8001ff2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019a4:	4b8b      	ldr	r3, [pc, #556]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	029b      	lsls	r3, r3, #10
 80019ac:	4013      	ands	r3, r2
 80019ae:	d1f0      	bne.n	8001992 <HAL_RCC_OscConfig+0x112>
 80019b0:	e000      	b.n	80019b4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2202      	movs	r2, #2
 80019ba:	4013      	ands	r3, r2
 80019bc:	d100      	bne.n	80019c0 <HAL_RCC_OscConfig+0x140>
 80019be:	e08b      	b.n	8001ad8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019c6:	6a3b      	ldr	r3, [r7, #32]
 80019c8:	2b04      	cmp	r3, #4
 80019ca:	d005      	beq.n	80019d8 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019cc:	6a3b      	ldr	r3, [r7, #32]
 80019ce:	2b0c      	cmp	r3, #12
 80019d0:	d13e      	bne.n	8001a50 <HAL_RCC_OscConfig+0x1d0>
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d13b      	bne.n	8001a50 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80019d8:	4b7e      	ldr	r3, [pc, #504]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2204      	movs	r2, #4
 80019de:	4013      	ands	r3, r2
 80019e0:	d004      	beq.n	80019ec <HAL_RCC_OscConfig+0x16c>
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e302      	b.n	8001ff2 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ec:	4b79      	ldr	r3, [pc, #484]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	4a7b      	ldr	r2, [pc, #492]	; (8001be0 <HAL_RCC_OscConfig+0x360>)
 80019f2:	4013      	ands	r3, r2
 80019f4:	0019      	movs	r1, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	021a      	lsls	r2, r3, #8
 80019fc:	4b75      	ldr	r3, [pc, #468]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 80019fe:	430a      	orrs	r2, r1
 8001a00:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001a02:	4b74      	ldr	r3, [pc, #464]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2209      	movs	r2, #9
 8001a08:	4393      	bics	r3, r2
 8001a0a:	0019      	movs	r1, r3
 8001a0c:	4b71      	ldr	r3, [pc, #452]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a14:	f000 fc40 	bl	8002298 <HAL_RCC_GetSysClockFreq>
 8001a18:	0001      	movs	r1, r0
 8001a1a:	4b6e      	ldr	r3, [pc, #440]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	091b      	lsrs	r3, r3, #4
 8001a20:	220f      	movs	r2, #15
 8001a22:	4013      	ands	r3, r2
 8001a24:	4a6f      	ldr	r2, [pc, #444]	; (8001be4 <HAL_RCC_OscConfig+0x364>)
 8001a26:	5cd3      	ldrb	r3, [r2, r3]
 8001a28:	000a      	movs	r2, r1
 8001a2a:	40da      	lsrs	r2, r3
 8001a2c:	4b6e      	ldr	r3, [pc, #440]	; (8001be8 <HAL_RCC_OscConfig+0x368>)
 8001a2e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001a30:	4b6e      	ldr	r3, [pc, #440]	; (8001bec <HAL_RCC_OscConfig+0x36c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2513      	movs	r5, #19
 8001a36:	197c      	adds	r4, r7, r5
 8001a38:	0018      	movs	r0, r3
 8001a3a:	f7ff f80b 	bl	8000a54 <HAL_InitTick>
 8001a3e:	0003      	movs	r3, r0
 8001a40:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001a42:	197b      	adds	r3, r7, r5
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d046      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001a4a:	197b      	adds	r3, r7, r5
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	e2d0      	b.n	8001ff2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d027      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001a56:	4b5f      	ldr	r3, [pc, #380]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2209      	movs	r2, #9
 8001a5c:	4393      	bics	r3, r2
 8001a5e:	0019      	movs	r1, r3
 8001a60:	4b5c      	ldr	r3, [pc, #368]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a68:	f7ff f83a 	bl	8000ae0 <HAL_GetTick>
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a72:	f7ff f835 	bl	8000ae0 <HAL_GetTick>
 8001a76:	0002      	movs	r2, r0
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e2b6      	b.n	8001ff2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a84:	4b53      	ldr	r3, [pc, #332]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2204      	movs	r2, #4
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d0f1      	beq.n	8001a72 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8e:	4b51      	ldr	r3, [pc, #324]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	4a53      	ldr	r2, [pc, #332]	; (8001be0 <HAL_RCC_OscConfig+0x360>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	0019      	movs	r1, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	021a      	lsls	r2, r3, #8
 8001a9e:	4b4d      	ldr	r3, [pc, #308]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	e018      	b.n	8001ad8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aa6:	4b4b      	ldr	r3, [pc, #300]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	4b4a      	ldr	r3, [pc, #296]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 8001aac:	2101      	movs	r1, #1
 8001aae:	438a      	bics	r2, r1
 8001ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab2:	f7ff f815 	bl	8000ae0 <HAL_GetTick>
 8001ab6:	0003      	movs	r3, r0
 8001ab8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001abc:	f7ff f810 	bl	8000ae0 <HAL_GetTick>
 8001ac0:	0002      	movs	r2, r0
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e291      	b.n	8001ff2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ace:	4b41      	ldr	r3, [pc, #260]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2204      	movs	r2, #4
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d1f1      	bne.n	8001abc <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2210      	movs	r2, #16
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d100      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x264>
 8001ae2:	e0a1      	b.n	8001c28 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ae4:	6a3b      	ldr	r3, [r7, #32]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d140      	bne.n	8001b6c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001aea:	4b3a      	ldr	r3, [pc, #232]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	2380      	movs	r3, #128	; 0x80
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4013      	ands	r3, r2
 8001af4:	d005      	beq.n	8001b02 <HAL_RCC_OscConfig+0x282>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e277      	b.n	8001ff2 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b02:	4b34      	ldr	r3, [pc, #208]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	4a3a      	ldr	r2, [pc, #232]	; (8001bf0 <HAL_RCC_OscConfig+0x370>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	0019      	movs	r1, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b10:	4b30      	ldr	r3, [pc, #192]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 8001b12:	430a      	orrs	r2, r1
 8001b14:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b16:	4b2f      	ldr	r3, [pc, #188]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	021b      	lsls	r3, r3, #8
 8001b1c:	0a19      	lsrs	r1, r3, #8
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	061a      	lsls	r2, r3, #24
 8001b24:	4b2b      	ldr	r3, [pc, #172]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 8001b26:	430a      	orrs	r2, r1
 8001b28:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	0b5b      	lsrs	r3, r3, #13
 8001b30:	3301      	adds	r3, #1
 8001b32:	2280      	movs	r2, #128	; 0x80
 8001b34:	0212      	lsls	r2, r2, #8
 8001b36:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001b38:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	091b      	lsrs	r3, r3, #4
 8001b3e:	210f      	movs	r1, #15
 8001b40:	400b      	ands	r3, r1
 8001b42:	4928      	ldr	r1, [pc, #160]	; (8001be4 <HAL_RCC_OscConfig+0x364>)
 8001b44:	5ccb      	ldrb	r3, [r1, r3]
 8001b46:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001b48:	4b27      	ldr	r3, [pc, #156]	; (8001be8 <HAL_RCC_OscConfig+0x368>)
 8001b4a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001b4c:	4b27      	ldr	r3, [pc, #156]	; (8001bec <HAL_RCC_OscConfig+0x36c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2513      	movs	r5, #19
 8001b52:	197c      	adds	r4, r7, r5
 8001b54:	0018      	movs	r0, r3
 8001b56:	f7fe ff7d 	bl	8000a54 <HAL_InitTick>
 8001b5a:	0003      	movs	r3, r0
 8001b5c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001b5e:	197b      	adds	r3, r7, r5
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d060      	beq.n	8001c28 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001b66:	197b      	adds	r3, r7, r5
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	e242      	b.n	8001ff2 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d03f      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b74:	4b17      	ldr	r3, [pc, #92]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 8001b7a:	2180      	movs	r1, #128	; 0x80
 8001b7c:	0049      	lsls	r1, r1, #1
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b82:	f7fe ffad 	bl	8000ae0 <HAL_GetTick>
 8001b86:	0003      	movs	r3, r0
 8001b88:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b8c:	f7fe ffa8 	bl	8000ae0 <HAL_GetTick>
 8001b90:	0002      	movs	r2, r0
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e229      	b.n	8001ff2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b9e:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	2380      	movs	r3, #128	; 0x80
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d0f0      	beq.n	8001b8c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001baa:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	4a10      	ldr	r2, [pc, #64]	; (8001bf0 <HAL_RCC_OscConfig+0x370>)
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	0019      	movs	r1, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bbe:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	021b      	lsls	r3, r3, #8
 8001bc4:	0a19      	lsrs	r1, r3, #8
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	061a      	lsls	r2, r3, #24
 8001bcc:	4b01      	ldr	r3, [pc, #4]	; (8001bd4 <HAL_RCC_OscConfig+0x354>)
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	e029      	b.n	8001c28 <HAL_RCC_OscConfig+0x3a8>
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	fffeffff 	.word	0xfffeffff
 8001bdc:	fffbffff 	.word	0xfffbffff
 8001be0:	ffffe0ff 	.word	0xffffe0ff
 8001be4:	08003c08 	.word	0x08003c08
 8001be8:	20000000 	.word	0x20000000
 8001bec:	20000004 	.word	0x20000004
 8001bf0:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001bf4:	4bbd      	ldr	r3, [pc, #756]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4bbc      	ldr	r3, [pc, #752]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001bfa:	49bd      	ldr	r1, [pc, #756]	; (8001ef0 <HAL_RCC_OscConfig+0x670>)
 8001bfc:	400a      	ands	r2, r1
 8001bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c00:	f7fe ff6e 	bl	8000ae0 <HAL_GetTick>
 8001c04:	0003      	movs	r3, r0
 8001c06:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c0a:	f7fe ff69 	bl	8000ae0 <HAL_GetTick>
 8001c0e:	0002      	movs	r2, r0
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e1ea      	b.n	8001ff2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001c1c:	4bb3      	ldr	r3, [pc, #716]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	2380      	movs	r3, #128	; 0x80
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4013      	ands	r3, r2
 8001c26:	d1f0      	bne.n	8001c0a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2208      	movs	r2, #8
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d036      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d019      	beq.n	8001c6e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c3a:	4bac      	ldr	r3, [pc, #688]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001c3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c3e:	4bab      	ldr	r3, [pc, #684]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001c40:	2101      	movs	r1, #1
 8001c42:	430a      	orrs	r2, r1
 8001c44:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c46:	f7fe ff4b 	bl	8000ae0 <HAL_GetTick>
 8001c4a:	0003      	movs	r3, r0
 8001c4c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c50:	f7fe ff46 	bl	8000ae0 <HAL_GetTick>
 8001c54:	0002      	movs	r2, r0
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e1c7      	b.n	8001ff2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c62:	4ba2      	ldr	r3, [pc, #648]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c66:	2202      	movs	r2, #2
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d0f1      	beq.n	8001c50 <HAL_RCC_OscConfig+0x3d0>
 8001c6c:	e018      	b.n	8001ca0 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c6e:	4b9f      	ldr	r3, [pc, #636]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001c70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c72:	4b9e      	ldr	r3, [pc, #632]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001c74:	2101      	movs	r1, #1
 8001c76:	438a      	bics	r2, r1
 8001c78:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7a:	f7fe ff31 	bl	8000ae0 <HAL_GetTick>
 8001c7e:	0003      	movs	r3, r0
 8001c80:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c84:	f7fe ff2c 	bl	8000ae0 <HAL_GetTick>
 8001c88:	0002      	movs	r2, r0
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e1ad      	b.n	8001ff2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c96:	4b95      	ldr	r3, [pc, #596]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d1f1      	bne.n	8001c84 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2204      	movs	r2, #4
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d100      	bne.n	8001cac <HAL_RCC_OscConfig+0x42c>
 8001caa:	e0ae      	b.n	8001e0a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cac:	2027      	movs	r0, #39	; 0x27
 8001cae:	183b      	adds	r3, r7, r0
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cb4:	4b8d      	ldr	r3, [pc, #564]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001cb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	055b      	lsls	r3, r3, #21
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d109      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc0:	4b8a      	ldr	r3, [pc, #552]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001cc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cc4:	4b89      	ldr	r3, [pc, #548]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001cc6:	2180      	movs	r1, #128	; 0x80
 8001cc8:	0549      	lsls	r1, r1, #21
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001cce:	183b      	adds	r3, r7, r0
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd4:	4b87      	ldr	r3, [pc, #540]	; (8001ef4 <HAL_RCC_OscConfig+0x674>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	2380      	movs	r3, #128	; 0x80
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d11a      	bne.n	8001d16 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ce0:	4b84      	ldr	r3, [pc, #528]	; (8001ef4 <HAL_RCC_OscConfig+0x674>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4b83      	ldr	r3, [pc, #524]	; (8001ef4 <HAL_RCC_OscConfig+0x674>)
 8001ce6:	2180      	movs	r1, #128	; 0x80
 8001ce8:	0049      	lsls	r1, r1, #1
 8001cea:	430a      	orrs	r2, r1
 8001cec:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cee:	f7fe fef7 	bl	8000ae0 <HAL_GetTick>
 8001cf2:	0003      	movs	r3, r0
 8001cf4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf8:	f7fe fef2 	bl	8000ae0 <HAL_GetTick>
 8001cfc:	0002      	movs	r2, r0
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b64      	cmp	r3, #100	; 0x64
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e173      	b.n	8001ff2 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0a:	4b7a      	ldr	r3, [pc, #488]	; (8001ef4 <HAL_RCC_OscConfig+0x674>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	2380      	movs	r3, #128	; 0x80
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4013      	ands	r3, r2
 8001d14:	d0f0      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	2380      	movs	r3, #128	; 0x80
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d107      	bne.n	8001d32 <HAL_RCC_OscConfig+0x4b2>
 8001d22:	4b72      	ldr	r3, [pc, #456]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001d24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d26:	4b71      	ldr	r3, [pc, #452]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001d28:	2180      	movs	r1, #128	; 0x80
 8001d2a:	0049      	lsls	r1, r1, #1
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	651a      	str	r2, [r3, #80]	; 0x50
 8001d30:	e031      	b.n	8001d96 <HAL_RCC_OscConfig+0x516>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10c      	bne.n	8001d54 <HAL_RCC_OscConfig+0x4d4>
 8001d3a:	4b6c      	ldr	r3, [pc, #432]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001d3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d3e:	4b6b      	ldr	r3, [pc, #428]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001d40:	496b      	ldr	r1, [pc, #428]	; (8001ef0 <HAL_RCC_OscConfig+0x670>)
 8001d42:	400a      	ands	r2, r1
 8001d44:	651a      	str	r2, [r3, #80]	; 0x50
 8001d46:	4b69      	ldr	r3, [pc, #420]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001d48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d4a:	4b68      	ldr	r3, [pc, #416]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001d4c:	496a      	ldr	r1, [pc, #424]	; (8001ef8 <HAL_RCC_OscConfig+0x678>)
 8001d4e:	400a      	ands	r2, r1
 8001d50:	651a      	str	r2, [r3, #80]	; 0x50
 8001d52:	e020      	b.n	8001d96 <HAL_RCC_OscConfig+0x516>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	23a0      	movs	r3, #160	; 0xa0
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d10e      	bne.n	8001d7e <HAL_RCC_OscConfig+0x4fe>
 8001d60:	4b62      	ldr	r3, [pc, #392]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001d62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d64:	4b61      	ldr	r3, [pc, #388]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001d66:	2180      	movs	r1, #128	; 0x80
 8001d68:	00c9      	lsls	r1, r1, #3
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	651a      	str	r2, [r3, #80]	; 0x50
 8001d6e:	4b5f      	ldr	r3, [pc, #380]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001d70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d72:	4b5e      	ldr	r3, [pc, #376]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001d74:	2180      	movs	r1, #128	; 0x80
 8001d76:	0049      	lsls	r1, r1, #1
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	651a      	str	r2, [r3, #80]	; 0x50
 8001d7c:	e00b      	b.n	8001d96 <HAL_RCC_OscConfig+0x516>
 8001d7e:	4b5b      	ldr	r3, [pc, #364]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001d80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d82:	4b5a      	ldr	r3, [pc, #360]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001d84:	495a      	ldr	r1, [pc, #360]	; (8001ef0 <HAL_RCC_OscConfig+0x670>)
 8001d86:	400a      	ands	r2, r1
 8001d88:	651a      	str	r2, [r3, #80]	; 0x50
 8001d8a:	4b58      	ldr	r3, [pc, #352]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001d8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d8e:	4b57      	ldr	r3, [pc, #348]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001d90:	4959      	ldr	r1, [pc, #356]	; (8001ef8 <HAL_RCC_OscConfig+0x678>)
 8001d92:	400a      	ands	r2, r1
 8001d94:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d015      	beq.n	8001dca <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d9e:	f7fe fe9f 	bl	8000ae0 <HAL_GetTick>
 8001da2:	0003      	movs	r3, r0
 8001da4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001da6:	e009      	b.n	8001dbc <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001da8:	f7fe fe9a 	bl	8000ae0 <HAL_GetTick>
 8001dac:	0002      	movs	r2, r0
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	4a52      	ldr	r2, [pc, #328]	; (8001efc <HAL_RCC_OscConfig+0x67c>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e11a      	b.n	8001ff2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dbc:	4b4b      	ldr	r3, [pc, #300]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001dbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d0ef      	beq.n	8001da8 <HAL_RCC_OscConfig+0x528>
 8001dc8:	e014      	b.n	8001df4 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dca:	f7fe fe89 	bl	8000ae0 <HAL_GetTick>
 8001dce:	0003      	movs	r3, r0
 8001dd0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001dd2:	e009      	b.n	8001de8 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dd4:	f7fe fe84 	bl	8000ae0 <HAL_GetTick>
 8001dd8:	0002      	movs	r2, r0
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	4a47      	ldr	r2, [pc, #284]	; (8001efc <HAL_RCC_OscConfig+0x67c>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e104      	b.n	8001ff2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001de8:	4b40      	ldr	r3, [pc, #256]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001dea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4013      	ands	r3, r2
 8001df2:	d1ef      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001df4:	2327      	movs	r3, #39	; 0x27
 8001df6:	18fb      	adds	r3, r7, r3
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d105      	bne.n	8001e0a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dfe:	4b3b      	ldr	r3, [pc, #236]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001e00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e02:	4b3a      	ldr	r3, [pc, #232]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001e04:	493e      	ldr	r1, [pc, #248]	; (8001f00 <HAL_RCC_OscConfig+0x680>)
 8001e06:	400a      	ands	r2, r1
 8001e08:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2220      	movs	r2, #32
 8001e10:	4013      	ands	r3, r2
 8001e12:	d049      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d026      	beq.n	8001e6a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001e1c:	4b33      	ldr	r3, [pc, #204]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	4b32      	ldr	r3, [pc, #200]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001e22:	2101      	movs	r1, #1
 8001e24:	430a      	orrs	r2, r1
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	4b30      	ldr	r3, [pc, #192]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001e2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e2c:	4b2f      	ldr	r3, [pc, #188]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001e2e:	2101      	movs	r1, #1
 8001e30:	430a      	orrs	r2, r1
 8001e32:	635a      	str	r2, [r3, #52]	; 0x34
 8001e34:	4b33      	ldr	r3, [pc, #204]	; (8001f04 <HAL_RCC_OscConfig+0x684>)
 8001e36:	6a1a      	ldr	r2, [r3, #32]
 8001e38:	4b32      	ldr	r3, [pc, #200]	; (8001f04 <HAL_RCC_OscConfig+0x684>)
 8001e3a:	2180      	movs	r1, #128	; 0x80
 8001e3c:	0189      	lsls	r1, r1, #6
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e42:	f7fe fe4d 	bl	8000ae0 <HAL_GetTick>
 8001e46:	0003      	movs	r3, r0
 8001e48:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e4c:	f7fe fe48 	bl	8000ae0 <HAL_GetTick>
 8001e50:	0002      	movs	r2, r0
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e0c9      	b.n	8001ff2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e5e:	4b23      	ldr	r3, [pc, #140]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	2202      	movs	r2, #2
 8001e64:	4013      	ands	r3, r2
 8001e66:	d0f1      	beq.n	8001e4c <HAL_RCC_OscConfig+0x5cc>
 8001e68:	e01e      	b.n	8001ea8 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001e6a:	4b20      	ldr	r3, [pc, #128]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	4b1f      	ldr	r3, [pc, #124]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001e70:	2101      	movs	r1, #1
 8001e72:	438a      	bics	r2, r1
 8001e74:	609a      	str	r2, [r3, #8]
 8001e76:	4b23      	ldr	r3, [pc, #140]	; (8001f04 <HAL_RCC_OscConfig+0x684>)
 8001e78:	6a1a      	ldr	r2, [r3, #32]
 8001e7a:	4b22      	ldr	r3, [pc, #136]	; (8001f04 <HAL_RCC_OscConfig+0x684>)
 8001e7c:	4922      	ldr	r1, [pc, #136]	; (8001f08 <HAL_RCC_OscConfig+0x688>)
 8001e7e:	400a      	ands	r2, r1
 8001e80:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e82:	f7fe fe2d 	bl	8000ae0 <HAL_GetTick>
 8001e86:	0003      	movs	r3, r0
 8001e88:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e8c:	f7fe fe28 	bl	8000ae0 <HAL_GetTick>
 8001e90:	0002      	movs	r2, r0
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e0a9      	b.n	8001ff2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e9e:	4b13      	ldr	r3, [pc, #76]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d1f1      	bne.n	8001e8c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d100      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x632>
 8001eb0:	e09e      	b.n	8001ff0 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	2b0c      	cmp	r3, #12
 8001eb6:	d100      	bne.n	8001eba <HAL_RCC_OscConfig+0x63a>
 8001eb8:	e077      	b.n	8001faa <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d158      	bne.n	8001f74 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <HAL_RCC_OscConfig+0x66c>)
 8001ec8:	4910      	ldr	r1, [pc, #64]	; (8001f0c <HAL_RCC_OscConfig+0x68c>)
 8001eca:	400a      	ands	r2, r1
 8001ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ece:	f7fe fe07 	bl	8000ae0 <HAL_GetTick>
 8001ed2:	0003      	movs	r3, r0
 8001ed4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ed6:	e01b      	b.n	8001f10 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ed8:	f7fe fe02 	bl	8000ae0 <HAL_GetTick>
 8001edc:	0002      	movs	r2, r0
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d914      	bls.n	8001f10 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e083      	b.n	8001ff2 <HAL_RCC_OscConfig+0x772>
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	fffffeff 	.word	0xfffffeff
 8001ef4:	40007000 	.word	0x40007000
 8001ef8:	fffffbff 	.word	0xfffffbff
 8001efc:	00001388 	.word	0x00001388
 8001f00:	efffffff 	.word	0xefffffff
 8001f04:	40010000 	.word	0x40010000
 8001f08:	ffffdfff 	.word	0xffffdfff
 8001f0c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f10:	4b3a      	ldr	r3, [pc, #232]	; (8001ffc <HAL_RCC_OscConfig+0x77c>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	2380      	movs	r3, #128	; 0x80
 8001f16:	049b      	lsls	r3, r3, #18
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d1dd      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f1c:	4b37      	ldr	r3, [pc, #220]	; (8001ffc <HAL_RCC_OscConfig+0x77c>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	4a37      	ldr	r2, [pc, #220]	; (8002000 <HAL_RCC_OscConfig+0x780>)
 8001f22:	4013      	ands	r3, r2
 8001f24:	0019      	movs	r1, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f34:	431a      	orrs	r2, r3
 8001f36:	4b31      	ldr	r3, [pc, #196]	; (8001ffc <HAL_RCC_OscConfig+0x77c>)
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f3c:	4b2f      	ldr	r3, [pc, #188]	; (8001ffc <HAL_RCC_OscConfig+0x77c>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4b2e      	ldr	r3, [pc, #184]	; (8001ffc <HAL_RCC_OscConfig+0x77c>)
 8001f42:	2180      	movs	r1, #128	; 0x80
 8001f44:	0449      	lsls	r1, r1, #17
 8001f46:	430a      	orrs	r2, r1
 8001f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4a:	f7fe fdc9 	bl	8000ae0 <HAL_GetTick>
 8001f4e:	0003      	movs	r3, r0
 8001f50:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f54:	f7fe fdc4 	bl	8000ae0 <HAL_GetTick>
 8001f58:	0002      	movs	r2, r0
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e045      	b.n	8001ff2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001f66:	4b25      	ldr	r3, [pc, #148]	; (8001ffc <HAL_RCC_OscConfig+0x77c>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	2380      	movs	r3, #128	; 0x80
 8001f6c:	049b      	lsls	r3, r3, #18
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d0f0      	beq.n	8001f54 <HAL_RCC_OscConfig+0x6d4>
 8001f72:	e03d      	b.n	8001ff0 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f74:	4b21      	ldr	r3, [pc, #132]	; (8001ffc <HAL_RCC_OscConfig+0x77c>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b20      	ldr	r3, [pc, #128]	; (8001ffc <HAL_RCC_OscConfig+0x77c>)
 8001f7a:	4922      	ldr	r1, [pc, #136]	; (8002004 <HAL_RCC_OscConfig+0x784>)
 8001f7c:	400a      	ands	r2, r1
 8001f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7fe fdae 	bl	8000ae0 <HAL_GetTick>
 8001f84:	0003      	movs	r3, r0
 8001f86:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f8a:	f7fe fda9 	bl	8000ae0 <HAL_GetTick>
 8001f8e:	0002      	movs	r2, r0
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e02a      	b.n	8001ff2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f9c:	4b17      	ldr	r3, [pc, #92]	; (8001ffc <HAL_RCC_OscConfig+0x77c>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	049b      	lsls	r3, r3, #18
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d1f0      	bne.n	8001f8a <HAL_RCC_OscConfig+0x70a>
 8001fa8:	e022      	b.n	8001ff0 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d101      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e01d      	b.n	8001ff2 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fb6:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <HAL_RCC_OscConfig+0x77c>)
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fbc:	69fa      	ldr	r2, [r7, #28]
 8001fbe:	2380      	movs	r3, #128	; 0x80
 8001fc0:	025b      	lsls	r3, r3, #9
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d10f      	bne.n	8001fec <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001fcc:	69fa      	ldr	r2, [r7, #28]
 8001fce:	23f0      	movs	r3, #240	; 0xf0
 8001fd0:	039b      	lsls	r3, r3, #14
 8001fd2:	401a      	ands	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d107      	bne.n	8001fec <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001fdc:	69fa      	ldr	r2, [r7, #28]
 8001fde:	23c0      	movs	r3, #192	; 0xc0
 8001fe0:	041b      	lsls	r3, r3, #16
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d001      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	b00a      	add	sp, #40	; 0x28
 8001ff8:	bdb0      	pop	{r4, r5, r7, pc}
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	40021000 	.word	0x40021000
 8002000:	ff02ffff 	.word	0xff02ffff
 8002004:	feffffff 	.word	0xfeffffff

08002008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002008:	b5b0      	push	{r4, r5, r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e128      	b.n	800226e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800201c:	4b96      	ldr	r3, [pc, #600]	; (8002278 <HAL_RCC_ClockConfig+0x270>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2201      	movs	r2, #1
 8002022:	4013      	ands	r3, r2
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	429a      	cmp	r2, r3
 8002028:	d91e      	bls.n	8002068 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202a:	4b93      	ldr	r3, [pc, #588]	; (8002278 <HAL_RCC_ClockConfig+0x270>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2201      	movs	r2, #1
 8002030:	4393      	bics	r3, r2
 8002032:	0019      	movs	r1, r3
 8002034:	4b90      	ldr	r3, [pc, #576]	; (8002278 <HAL_RCC_ClockConfig+0x270>)
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800203c:	f7fe fd50 	bl	8000ae0 <HAL_GetTick>
 8002040:	0003      	movs	r3, r0
 8002042:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002044:	e009      	b.n	800205a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002046:	f7fe fd4b 	bl	8000ae0 <HAL_GetTick>
 800204a:	0002      	movs	r2, r0
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	4a8a      	ldr	r2, [pc, #552]	; (800227c <HAL_RCC_ClockConfig+0x274>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d901      	bls.n	800205a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e109      	b.n	800226e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800205a:	4b87      	ldr	r3, [pc, #540]	; (8002278 <HAL_RCC_ClockConfig+0x270>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2201      	movs	r2, #1
 8002060:	4013      	ands	r3, r2
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	429a      	cmp	r2, r3
 8002066:	d1ee      	bne.n	8002046 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2202      	movs	r2, #2
 800206e:	4013      	ands	r3, r2
 8002070:	d009      	beq.n	8002086 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002072:	4b83      	ldr	r3, [pc, #524]	; (8002280 <HAL_RCC_ClockConfig+0x278>)
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	22f0      	movs	r2, #240	; 0xf0
 8002078:	4393      	bics	r3, r2
 800207a:	0019      	movs	r1, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	4b7f      	ldr	r3, [pc, #508]	; (8002280 <HAL_RCC_ClockConfig+0x278>)
 8002082:	430a      	orrs	r2, r1
 8002084:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2201      	movs	r2, #1
 800208c:	4013      	ands	r3, r2
 800208e:	d100      	bne.n	8002092 <HAL_RCC_ClockConfig+0x8a>
 8002090:	e089      	b.n	80021a6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b02      	cmp	r3, #2
 8002098:	d107      	bne.n	80020aa <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800209a:	4b79      	ldr	r3, [pc, #484]	; (8002280 <HAL_RCC_ClockConfig+0x278>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	2380      	movs	r3, #128	; 0x80
 80020a0:	029b      	lsls	r3, r3, #10
 80020a2:	4013      	ands	r3, r2
 80020a4:	d120      	bne.n	80020e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e0e1      	b.n	800226e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	d107      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020b2:	4b73      	ldr	r3, [pc, #460]	; (8002280 <HAL_RCC_ClockConfig+0x278>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	2380      	movs	r3, #128	; 0x80
 80020b8:	049b      	lsls	r3, r3, #18
 80020ba:	4013      	ands	r3, r2
 80020bc:	d114      	bne.n	80020e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e0d5      	b.n	800226e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d106      	bne.n	80020d8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020ca:	4b6d      	ldr	r3, [pc, #436]	; (8002280 <HAL_RCC_ClockConfig+0x278>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2204      	movs	r2, #4
 80020d0:	4013      	ands	r3, r2
 80020d2:	d109      	bne.n	80020e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e0ca      	b.n	800226e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80020d8:	4b69      	ldr	r3, [pc, #420]	; (8002280 <HAL_RCC_ClockConfig+0x278>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	2380      	movs	r3, #128	; 0x80
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4013      	ands	r3, r2
 80020e2:	d101      	bne.n	80020e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0c2      	b.n	800226e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020e8:	4b65      	ldr	r3, [pc, #404]	; (8002280 <HAL_RCC_ClockConfig+0x278>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	2203      	movs	r2, #3
 80020ee:	4393      	bics	r3, r2
 80020f0:	0019      	movs	r1, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	4b62      	ldr	r3, [pc, #392]	; (8002280 <HAL_RCC_ClockConfig+0x278>)
 80020f8:	430a      	orrs	r2, r1
 80020fa:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020fc:	f7fe fcf0 	bl	8000ae0 <HAL_GetTick>
 8002100:	0003      	movs	r3, r0
 8002102:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2b02      	cmp	r3, #2
 800210a:	d111      	bne.n	8002130 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800210c:	e009      	b.n	8002122 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800210e:	f7fe fce7 	bl	8000ae0 <HAL_GetTick>
 8002112:	0002      	movs	r2, r0
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	4a58      	ldr	r2, [pc, #352]	; (800227c <HAL_RCC_ClockConfig+0x274>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e0a5      	b.n	800226e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002122:	4b57      	ldr	r3, [pc, #348]	; (8002280 <HAL_RCC_ClockConfig+0x278>)
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	220c      	movs	r2, #12
 8002128:	4013      	ands	r3, r2
 800212a:	2b08      	cmp	r3, #8
 800212c:	d1ef      	bne.n	800210e <HAL_RCC_ClockConfig+0x106>
 800212e:	e03a      	b.n	80021a6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b03      	cmp	r3, #3
 8002136:	d111      	bne.n	800215c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002138:	e009      	b.n	800214e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800213a:	f7fe fcd1 	bl	8000ae0 <HAL_GetTick>
 800213e:	0002      	movs	r2, r0
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	4a4d      	ldr	r2, [pc, #308]	; (800227c <HAL_RCC_ClockConfig+0x274>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d901      	bls.n	800214e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e08f      	b.n	800226e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800214e:	4b4c      	ldr	r3, [pc, #304]	; (8002280 <HAL_RCC_ClockConfig+0x278>)
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	220c      	movs	r2, #12
 8002154:	4013      	ands	r3, r2
 8002156:	2b0c      	cmp	r3, #12
 8002158:	d1ef      	bne.n	800213a <HAL_RCC_ClockConfig+0x132>
 800215a:	e024      	b.n	80021a6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d11b      	bne.n	800219c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002164:	e009      	b.n	800217a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002166:	f7fe fcbb 	bl	8000ae0 <HAL_GetTick>
 800216a:	0002      	movs	r2, r0
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	4a42      	ldr	r2, [pc, #264]	; (800227c <HAL_RCC_ClockConfig+0x274>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d901      	bls.n	800217a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e079      	b.n	800226e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800217a:	4b41      	ldr	r3, [pc, #260]	; (8002280 <HAL_RCC_ClockConfig+0x278>)
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	220c      	movs	r2, #12
 8002180:	4013      	ands	r3, r2
 8002182:	2b04      	cmp	r3, #4
 8002184:	d1ef      	bne.n	8002166 <HAL_RCC_ClockConfig+0x15e>
 8002186:	e00e      	b.n	80021a6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002188:	f7fe fcaa 	bl	8000ae0 <HAL_GetTick>
 800218c:	0002      	movs	r2, r0
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	4a3a      	ldr	r2, [pc, #232]	; (800227c <HAL_RCC_ClockConfig+0x274>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d901      	bls.n	800219c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e068      	b.n	800226e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800219c:	4b38      	ldr	r3, [pc, #224]	; (8002280 <HAL_RCC_ClockConfig+0x278>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	220c      	movs	r2, #12
 80021a2:	4013      	ands	r3, r2
 80021a4:	d1f0      	bne.n	8002188 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021a6:	4b34      	ldr	r3, [pc, #208]	; (8002278 <HAL_RCC_ClockConfig+0x270>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2201      	movs	r2, #1
 80021ac:	4013      	ands	r3, r2
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d21e      	bcs.n	80021f2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b4:	4b30      	ldr	r3, [pc, #192]	; (8002278 <HAL_RCC_ClockConfig+0x270>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2201      	movs	r2, #1
 80021ba:	4393      	bics	r3, r2
 80021bc:	0019      	movs	r1, r3
 80021be:	4b2e      	ldr	r3, [pc, #184]	; (8002278 <HAL_RCC_ClockConfig+0x270>)
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80021c6:	f7fe fc8b 	bl	8000ae0 <HAL_GetTick>
 80021ca:	0003      	movs	r3, r0
 80021cc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ce:	e009      	b.n	80021e4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d0:	f7fe fc86 	bl	8000ae0 <HAL_GetTick>
 80021d4:	0002      	movs	r2, r0
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	4a28      	ldr	r2, [pc, #160]	; (800227c <HAL_RCC_ClockConfig+0x274>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e044      	b.n	800226e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e4:	4b24      	ldr	r3, [pc, #144]	; (8002278 <HAL_RCC_ClockConfig+0x270>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2201      	movs	r2, #1
 80021ea:	4013      	ands	r3, r2
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d1ee      	bne.n	80021d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2204      	movs	r2, #4
 80021f8:	4013      	ands	r3, r2
 80021fa:	d009      	beq.n	8002210 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021fc:	4b20      	ldr	r3, [pc, #128]	; (8002280 <HAL_RCC_ClockConfig+0x278>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4a20      	ldr	r2, [pc, #128]	; (8002284 <HAL_RCC_ClockConfig+0x27c>)
 8002202:	4013      	ands	r3, r2
 8002204:	0019      	movs	r1, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <HAL_RCC_ClockConfig+0x278>)
 800220c:	430a      	orrs	r2, r1
 800220e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2208      	movs	r2, #8
 8002216:	4013      	ands	r3, r2
 8002218:	d00a      	beq.n	8002230 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800221a:	4b19      	ldr	r3, [pc, #100]	; (8002280 <HAL_RCC_ClockConfig+0x278>)
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	4a1a      	ldr	r2, [pc, #104]	; (8002288 <HAL_RCC_ClockConfig+0x280>)
 8002220:	4013      	ands	r3, r2
 8002222:	0019      	movs	r1, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	00da      	lsls	r2, r3, #3
 800222a:	4b15      	ldr	r3, [pc, #84]	; (8002280 <HAL_RCC_ClockConfig+0x278>)
 800222c:	430a      	orrs	r2, r1
 800222e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002230:	f000 f832 	bl	8002298 <HAL_RCC_GetSysClockFreq>
 8002234:	0001      	movs	r1, r0
 8002236:	4b12      	ldr	r3, [pc, #72]	; (8002280 <HAL_RCC_ClockConfig+0x278>)
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	091b      	lsrs	r3, r3, #4
 800223c:	220f      	movs	r2, #15
 800223e:	4013      	ands	r3, r2
 8002240:	4a12      	ldr	r2, [pc, #72]	; (800228c <HAL_RCC_ClockConfig+0x284>)
 8002242:	5cd3      	ldrb	r3, [r2, r3]
 8002244:	000a      	movs	r2, r1
 8002246:	40da      	lsrs	r2, r3
 8002248:	4b11      	ldr	r3, [pc, #68]	; (8002290 <HAL_RCC_ClockConfig+0x288>)
 800224a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800224c:	4b11      	ldr	r3, [pc, #68]	; (8002294 <HAL_RCC_ClockConfig+0x28c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	250b      	movs	r5, #11
 8002252:	197c      	adds	r4, r7, r5
 8002254:	0018      	movs	r0, r3
 8002256:	f7fe fbfd 	bl	8000a54 <HAL_InitTick>
 800225a:	0003      	movs	r3, r0
 800225c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800225e:	197b      	adds	r3, r7, r5
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d002      	beq.n	800226c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002266:	197b      	adds	r3, r7, r5
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	e000      	b.n	800226e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	0018      	movs	r0, r3
 8002270:	46bd      	mov	sp, r7
 8002272:	b004      	add	sp, #16
 8002274:	bdb0      	pop	{r4, r5, r7, pc}
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	40022000 	.word	0x40022000
 800227c:	00001388 	.word	0x00001388
 8002280:	40021000 	.word	0x40021000
 8002284:	fffff8ff 	.word	0xfffff8ff
 8002288:	ffffc7ff 	.word	0xffffc7ff
 800228c:	08003c08 	.word	0x08003c08
 8002290:	20000000 	.word	0x20000000
 8002294:	20000004 	.word	0x20000004

08002298 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002298:	b5b0      	push	{r4, r5, r7, lr}
 800229a:	b08e      	sub	sp, #56	; 0x38
 800229c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800229e:	4b4c      	ldr	r3, [pc, #304]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x138>)
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022a6:	230c      	movs	r3, #12
 80022a8:	4013      	ands	r3, r2
 80022aa:	2b0c      	cmp	r3, #12
 80022ac:	d014      	beq.n	80022d8 <HAL_RCC_GetSysClockFreq+0x40>
 80022ae:	d900      	bls.n	80022b2 <HAL_RCC_GetSysClockFreq+0x1a>
 80022b0:	e07b      	b.n	80023aa <HAL_RCC_GetSysClockFreq+0x112>
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d002      	beq.n	80022bc <HAL_RCC_GetSysClockFreq+0x24>
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d00b      	beq.n	80022d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80022ba:	e076      	b.n	80023aa <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80022bc:	4b44      	ldr	r3, [pc, #272]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x138>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2210      	movs	r2, #16
 80022c2:	4013      	ands	r3, r2
 80022c4:	d002      	beq.n	80022cc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80022c6:	4b43      	ldr	r3, [pc, #268]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80022c8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80022ca:	e07c      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80022cc:	4b42      	ldr	r3, [pc, #264]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x140>)
 80022ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022d0:	e079      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022d2:	4b42      	ldr	r3, [pc, #264]	; (80023dc <HAL_RCC_GetSysClockFreq+0x144>)
 80022d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022d6:	e076      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80022d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022da:	0c9a      	lsrs	r2, r3, #18
 80022dc:	230f      	movs	r3, #15
 80022de:	401a      	ands	r2, r3
 80022e0:	4b3f      	ldr	r3, [pc, #252]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x148>)
 80022e2:	5c9b      	ldrb	r3, [r3, r2]
 80022e4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80022e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e8:	0d9a      	lsrs	r2, r3, #22
 80022ea:	2303      	movs	r3, #3
 80022ec:	4013      	ands	r3, r2
 80022ee:	3301      	adds	r3, #1
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022f2:	4b37      	ldr	r3, [pc, #220]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x138>)
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	2380      	movs	r3, #128	; 0x80
 80022f8:	025b      	lsls	r3, r3, #9
 80022fa:	4013      	ands	r3, r2
 80022fc:	d01a      	beq.n	8002334 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80022fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002300:	61bb      	str	r3, [r7, #24]
 8002302:	2300      	movs	r3, #0
 8002304:	61fb      	str	r3, [r7, #28]
 8002306:	4a35      	ldr	r2, [pc, #212]	; (80023dc <HAL_RCC_GetSysClockFreq+0x144>)
 8002308:	2300      	movs	r3, #0
 800230a:	69b8      	ldr	r0, [r7, #24]
 800230c:	69f9      	ldr	r1, [r7, #28]
 800230e:	f7fd ffb9 	bl	8000284 <__aeabi_lmul>
 8002312:	0002      	movs	r2, r0
 8002314:	000b      	movs	r3, r1
 8002316:	0010      	movs	r0, r2
 8002318:	0019      	movs	r1, r3
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	613b      	str	r3, [r7, #16]
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	f7fd ff8d 	bl	8000244 <__aeabi_uldivmod>
 800232a:	0002      	movs	r2, r0
 800232c:	000b      	movs	r3, r1
 800232e:	0013      	movs	r3, r2
 8002330:	637b      	str	r3, [r7, #52]	; 0x34
 8002332:	e037      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002334:	4b26      	ldr	r3, [pc, #152]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2210      	movs	r2, #16
 800233a:	4013      	ands	r3, r2
 800233c:	d01a      	beq.n	8002374 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800233e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	4a23      	ldr	r2, [pc, #140]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002348:	2300      	movs	r3, #0
 800234a:	68b8      	ldr	r0, [r7, #8]
 800234c:	68f9      	ldr	r1, [r7, #12]
 800234e:	f7fd ff99 	bl	8000284 <__aeabi_lmul>
 8002352:	0002      	movs	r2, r0
 8002354:	000b      	movs	r3, r1
 8002356:	0010      	movs	r0, r2
 8002358:	0019      	movs	r1, r3
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	603b      	str	r3, [r7, #0]
 800235e:	2300      	movs	r3, #0
 8002360:	607b      	str	r3, [r7, #4]
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f7fd ff6d 	bl	8000244 <__aeabi_uldivmod>
 800236a:	0002      	movs	r2, r0
 800236c:	000b      	movs	r3, r1
 800236e:	0013      	movs	r3, r2
 8002370:	637b      	str	r3, [r7, #52]	; 0x34
 8002372:	e017      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002376:	0018      	movs	r0, r3
 8002378:	2300      	movs	r3, #0
 800237a:	0019      	movs	r1, r3
 800237c:	4a16      	ldr	r2, [pc, #88]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x140>)
 800237e:	2300      	movs	r3, #0
 8002380:	f7fd ff80 	bl	8000284 <__aeabi_lmul>
 8002384:	0002      	movs	r2, r0
 8002386:	000b      	movs	r3, r1
 8002388:	0010      	movs	r0, r2
 800238a:	0019      	movs	r1, r3
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	001c      	movs	r4, r3
 8002390:	2300      	movs	r3, #0
 8002392:	001d      	movs	r5, r3
 8002394:	0022      	movs	r2, r4
 8002396:	002b      	movs	r3, r5
 8002398:	f7fd ff54 	bl	8000244 <__aeabi_uldivmod>
 800239c:	0002      	movs	r2, r0
 800239e:	000b      	movs	r3, r1
 80023a0:	0013      	movs	r3, r2
 80023a2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80023a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023a8:	e00d      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80023aa:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x138>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	0b5b      	lsrs	r3, r3, #13
 80023b0:	2207      	movs	r2, #7
 80023b2:	4013      	ands	r3, r2
 80023b4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	3301      	adds	r3, #1
 80023ba:	2280      	movs	r2, #128	; 0x80
 80023bc:	0212      	lsls	r2, r2, #8
 80023be:	409a      	lsls	r2, r3
 80023c0:	0013      	movs	r3, r2
 80023c2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023c4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80023c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80023c8:	0018      	movs	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	b00e      	add	sp, #56	; 0x38
 80023ce:	bdb0      	pop	{r4, r5, r7, pc}
 80023d0:	40021000 	.word	0x40021000
 80023d4:	003d0900 	.word	0x003d0900
 80023d8:	00f42400 	.word	0x00f42400
 80023dc:	007a1200 	.word	0x007a1200
 80023e0:	08003c20 	.word	0x08003c20

080023e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023e8:	4b02      	ldr	r3, [pc, #8]	; (80023f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80023ea:	681b      	ldr	r3, [r3, #0]
}
 80023ec:	0018      	movs	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	46c0      	nop			; (mov r8, r8)
 80023f4:	20000000 	.word	0x20000000

080023f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023fc:	f7ff fff2 	bl	80023e4 <HAL_RCC_GetHCLKFreq>
 8002400:	0001      	movs	r1, r0
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	0a1b      	lsrs	r3, r3, #8
 8002408:	2207      	movs	r2, #7
 800240a:	4013      	ands	r3, r2
 800240c:	4a04      	ldr	r2, [pc, #16]	; (8002420 <HAL_RCC_GetPCLK1Freq+0x28>)
 800240e:	5cd3      	ldrb	r3, [r2, r3]
 8002410:	40d9      	lsrs	r1, r3
 8002412:	000b      	movs	r3, r1
}
 8002414:	0018      	movs	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	40021000 	.word	0x40021000
 8002420:	08003c18 	.word	0x08003c18

08002424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002428:	f7ff ffdc 	bl	80023e4 <HAL_RCC_GetHCLKFreq>
 800242c:	0001      	movs	r1, r0
 800242e:	4b06      	ldr	r3, [pc, #24]	; (8002448 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	0adb      	lsrs	r3, r3, #11
 8002434:	2207      	movs	r2, #7
 8002436:	4013      	ands	r3, r2
 8002438:	4a04      	ldr	r2, [pc, #16]	; (800244c <HAL_RCC_GetPCLK2Freq+0x28>)
 800243a:	5cd3      	ldrb	r3, [r2, r3]
 800243c:	40d9      	lsrs	r1, r3
 800243e:	000b      	movs	r3, r1
}
 8002440:	0018      	movs	r0, r3
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	46c0      	nop			; (mov r8, r8)
 8002448:	40021000 	.word	0x40021000
 800244c:	08003c18 	.word	0x08003c18

08002450 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002458:	2317      	movs	r3, #23
 800245a:	18fb      	adds	r3, r7, r3
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2220      	movs	r2, #32
 8002466:	4013      	ands	r3, r2
 8002468:	d106      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	2380      	movs	r3, #128	; 0x80
 8002470:	011b      	lsls	r3, r3, #4
 8002472:	4013      	ands	r3, r2
 8002474:	d100      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002476:	e104      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002478:	4bb1      	ldr	r3, [pc, #708]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800247a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800247c:	2380      	movs	r3, #128	; 0x80
 800247e:	055b      	lsls	r3, r3, #21
 8002480:	4013      	ands	r3, r2
 8002482:	d10a      	bne.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002484:	4bae      	ldr	r3, [pc, #696]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002486:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002488:	4bad      	ldr	r3, [pc, #692]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800248a:	2180      	movs	r1, #128	; 0x80
 800248c:	0549      	lsls	r1, r1, #21
 800248e:	430a      	orrs	r2, r1
 8002490:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002492:	2317      	movs	r3, #23
 8002494:	18fb      	adds	r3, r7, r3
 8002496:	2201      	movs	r2, #1
 8002498:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249a:	4baa      	ldr	r3, [pc, #680]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	2380      	movs	r3, #128	; 0x80
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	4013      	ands	r3, r2
 80024a4:	d11a      	bne.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024a6:	4ba7      	ldr	r3, [pc, #668]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	4ba6      	ldr	r3, [pc, #664]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024ac:	2180      	movs	r1, #128	; 0x80
 80024ae:	0049      	lsls	r1, r1, #1
 80024b0:	430a      	orrs	r2, r1
 80024b2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024b4:	f7fe fb14 	bl	8000ae0 <HAL_GetTick>
 80024b8:	0003      	movs	r3, r0
 80024ba:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024bc:	e008      	b.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024be:	f7fe fb0f 	bl	8000ae0 <HAL_GetTick>
 80024c2:	0002      	movs	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b64      	cmp	r3, #100	; 0x64
 80024ca:	d901      	bls.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e133      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d0:	4b9c      	ldr	r3, [pc, #624]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	2380      	movs	r3, #128	; 0x80
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	4013      	ands	r3, r2
 80024da:	d0f0      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80024dc:	4b98      	ldr	r3, [pc, #608]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	23c0      	movs	r3, #192	; 0xc0
 80024e2:	039b      	lsls	r3, r3, #14
 80024e4:	4013      	ands	r3, r2
 80024e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	23c0      	movs	r3, #192	; 0xc0
 80024ee:	039b      	lsls	r3, r3, #14
 80024f0:	4013      	ands	r3, r2
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d107      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	23c0      	movs	r3, #192	; 0xc0
 80024fe:	039b      	lsls	r3, r3, #14
 8002500:	4013      	ands	r3, r2
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	429a      	cmp	r2, r3
 8002506:	d013      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	23c0      	movs	r3, #192	; 0xc0
 800250e:	029b      	lsls	r3, r3, #10
 8002510:	401a      	ands	r2, r3
 8002512:	23c0      	movs	r3, #192	; 0xc0
 8002514:	029b      	lsls	r3, r3, #10
 8002516:	429a      	cmp	r2, r3
 8002518:	d10a      	bne.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800251a:	4b89      	ldr	r3, [pc, #548]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	2380      	movs	r3, #128	; 0x80
 8002520:	029b      	lsls	r3, r3, #10
 8002522:	401a      	ands	r2, r3
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	029b      	lsls	r3, r3, #10
 8002528:	429a      	cmp	r2, r3
 800252a:	d101      	bne.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e103      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002530:	4b83      	ldr	r3, [pc, #524]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002532:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002534:	23c0      	movs	r3, #192	; 0xc0
 8002536:	029b      	lsls	r3, r3, #10
 8002538:	4013      	ands	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d049      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	23c0      	movs	r3, #192	; 0xc0
 8002548:	029b      	lsls	r3, r3, #10
 800254a:	4013      	ands	r3, r2
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	429a      	cmp	r2, r3
 8002550:	d004      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2220      	movs	r2, #32
 8002558:	4013      	ands	r3, r2
 800255a:	d10d      	bne.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	23c0      	movs	r3, #192	; 0xc0
 8002562:	029b      	lsls	r3, r3, #10
 8002564:	4013      	ands	r3, r2
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	429a      	cmp	r2, r3
 800256a:	d034      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	2380      	movs	r3, #128	; 0x80
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	4013      	ands	r3, r2
 8002576:	d02e      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002578:	4b71      	ldr	r3, [pc, #452]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800257a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800257c:	4a72      	ldr	r2, [pc, #456]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800257e:	4013      	ands	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002582:	4b6f      	ldr	r3, [pc, #444]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002584:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002586:	4b6e      	ldr	r3, [pc, #440]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002588:	2180      	movs	r1, #128	; 0x80
 800258a:	0309      	lsls	r1, r1, #12
 800258c:	430a      	orrs	r2, r1
 800258e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002590:	4b6b      	ldr	r3, [pc, #428]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002592:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002594:	4b6a      	ldr	r3, [pc, #424]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002596:	496d      	ldr	r1, [pc, #436]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002598:	400a      	ands	r2, r1
 800259a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800259c:	4b68      	ldr	r3, [pc, #416]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	2380      	movs	r3, #128	; 0x80
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	4013      	ands	r3, r2
 80025aa:	d014      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ac:	f7fe fa98 	bl	8000ae0 <HAL_GetTick>
 80025b0:	0003      	movs	r3, r0
 80025b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025b4:	e009      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025b6:	f7fe fa93 	bl	8000ae0 <HAL_GetTick>
 80025ba:	0002      	movs	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	4a63      	ldr	r2, [pc, #396]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d901      	bls.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e0b6      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025ca:	4b5d      	ldr	r3, [pc, #372]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025ce:	2380      	movs	r3, #128	; 0x80
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4013      	ands	r3, r2
 80025d4:	d0ef      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	2380      	movs	r3, #128	; 0x80
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	4013      	ands	r3, r2
 80025e0:	d01f      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	23c0      	movs	r3, #192	; 0xc0
 80025e8:	029b      	lsls	r3, r3, #10
 80025ea:	401a      	ands	r2, r3
 80025ec:	23c0      	movs	r3, #192	; 0xc0
 80025ee:	029b      	lsls	r3, r3, #10
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d10c      	bne.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80025f4:	4b52      	ldr	r3, [pc, #328]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a56      	ldr	r2, [pc, #344]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	0019      	movs	r1, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	23c0      	movs	r3, #192	; 0xc0
 8002604:	039b      	lsls	r3, r3, #14
 8002606:	401a      	ands	r2, r3
 8002608:	4b4d      	ldr	r3, [pc, #308]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800260a:	430a      	orrs	r2, r1
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	4b4c      	ldr	r3, [pc, #304]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002610:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	23c0      	movs	r3, #192	; 0xc0
 8002618:	029b      	lsls	r3, r3, #10
 800261a:	401a      	ands	r2, r3
 800261c:	4b48      	ldr	r3, [pc, #288]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800261e:	430a      	orrs	r2, r1
 8002620:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2220      	movs	r2, #32
 8002628:	4013      	ands	r3, r2
 800262a:	d01f      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	23c0      	movs	r3, #192	; 0xc0
 8002632:	029b      	lsls	r3, r3, #10
 8002634:	401a      	ands	r2, r3
 8002636:	23c0      	movs	r3, #192	; 0xc0
 8002638:	029b      	lsls	r3, r3, #10
 800263a:	429a      	cmp	r2, r3
 800263c:	d10c      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800263e:	4b40      	ldr	r3, [pc, #256]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a44      	ldr	r2, [pc, #272]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002644:	4013      	ands	r3, r2
 8002646:	0019      	movs	r1, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	23c0      	movs	r3, #192	; 0xc0
 800264e:	039b      	lsls	r3, r3, #14
 8002650:	401a      	ands	r2, r3
 8002652:	4b3b      	ldr	r3, [pc, #236]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002654:	430a      	orrs	r2, r1
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	4b39      	ldr	r3, [pc, #228]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800265a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	23c0      	movs	r3, #192	; 0xc0
 8002662:	029b      	lsls	r3, r3, #10
 8002664:	401a      	ands	r2, r3
 8002666:	4b36      	ldr	r3, [pc, #216]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002668:	430a      	orrs	r2, r1
 800266a:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800266c:	2317      	movs	r3, #23
 800266e:	18fb      	adds	r3, r7, r3
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d105      	bne.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002676:	4b32      	ldr	r3, [pc, #200]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002678:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800267a:	4b31      	ldr	r3, [pc, #196]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800267c:	4936      	ldr	r1, [pc, #216]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800267e:	400a      	ands	r2, r1
 8002680:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2201      	movs	r2, #1
 8002688:	4013      	ands	r3, r2
 800268a:	d009      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800268c:	4b2c      	ldr	r3, [pc, #176]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800268e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002690:	2203      	movs	r2, #3
 8002692:	4393      	bics	r3, r2
 8002694:	0019      	movs	r1, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	4b29      	ldr	r3, [pc, #164]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800269c:	430a      	orrs	r2, r1
 800269e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2202      	movs	r2, #2
 80026a6:	4013      	ands	r3, r2
 80026a8:	d009      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026aa:	4b25      	ldr	r3, [pc, #148]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ae:	220c      	movs	r2, #12
 80026b0:	4393      	bics	r3, r2
 80026b2:	0019      	movs	r1, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691a      	ldr	r2, [r3, #16]
 80026b8:	4b21      	ldr	r3, [pc, #132]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026ba:	430a      	orrs	r2, r1
 80026bc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2204      	movs	r2, #4
 80026c4:	4013      	ands	r3, r2
 80026c6:	d009      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026c8:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026cc:	4a23      	ldr	r2, [pc, #140]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	0019      	movs	r1, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695a      	ldr	r2, [r3, #20]
 80026d6:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026d8:	430a      	orrs	r2, r1
 80026da:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2208      	movs	r2, #8
 80026e2:	4013      	ands	r3, r2
 80026e4:	d009      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026e6:	4b16      	ldr	r3, [pc, #88]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ea:	4a1d      	ldr	r2, [pc, #116]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026ec:	4013      	ands	r3, r2
 80026ee:	0019      	movs	r1, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	699a      	ldr	r2, [r3, #24]
 80026f4:	4b12      	ldr	r3, [pc, #72]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026f6:	430a      	orrs	r2, r1
 80026f8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2240      	movs	r2, #64	; 0x40
 8002700:	4013      	ands	r3, r2
 8002702:	d009      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002704:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002708:	4a16      	ldr	r2, [pc, #88]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800270a:	4013      	ands	r3, r2
 800270c:	0019      	movs	r1, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1a      	ldr	r2, [r3, #32]
 8002712:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002714:	430a      	orrs	r2, r1
 8002716:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2280      	movs	r2, #128	; 0x80
 800271e:	4013      	ands	r3, r2
 8002720:	d009      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002722:	4b07      	ldr	r3, [pc, #28]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002726:	4a10      	ldr	r2, [pc, #64]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002728:	4013      	ands	r3, r2
 800272a:	0019      	movs	r1, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	69da      	ldr	r2, [r3, #28]
 8002730:	4b03      	ldr	r3, [pc, #12]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002732:	430a      	orrs	r2, r1
 8002734:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	0018      	movs	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	b006      	add	sp, #24
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40021000 	.word	0x40021000
 8002744:	40007000 	.word	0x40007000
 8002748:	fffcffff 	.word	0xfffcffff
 800274c:	fff7ffff 	.word	0xfff7ffff
 8002750:	00001388 	.word	0x00001388
 8002754:	ffcfffff 	.word	0xffcfffff
 8002758:	efffffff 	.word	0xefffffff
 800275c:	fffff3ff 	.word	0xfffff3ff
 8002760:	ffffcfff 	.word	0xffffcfff
 8002764:	fbffffff 	.word	0xfbffffff
 8002768:	fff3ffff 	.word	0xfff3ffff

0800276c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e044      	b.n	8002808 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002782:	2b00      	cmp	r3, #0
 8002784:	d107      	bne.n	8002796 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2278      	movs	r2, #120	; 0x78
 800278a:	2100      	movs	r1, #0
 800278c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	0018      	movs	r0, r3
 8002792:	f7fe f871 	bl	8000878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2224      	movs	r2, #36	; 0x24
 800279a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2101      	movs	r1, #1
 80027a8:	438a      	bics	r2, r1
 80027aa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	0018      	movs	r0, r3
 80027b0:	f000 f8d0 	bl	8002954 <UART_SetConfig>
 80027b4:	0003      	movs	r3, r0
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d101      	bne.n	80027be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e024      	b.n	8002808 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	0018      	movs	r0, r3
 80027ca:	f000 fb47 	bl	8002e5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	490d      	ldr	r1, [pc, #52]	; (8002810 <HAL_UART_Init+0xa4>)
 80027da:	400a      	ands	r2, r1
 80027dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	212a      	movs	r1, #42	; 0x2a
 80027ea:	438a      	bics	r2, r1
 80027ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2101      	movs	r1, #1
 80027fa:	430a      	orrs	r2, r1
 80027fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	0018      	movs	r0, r3
 8002802:	f000 fbdf 	bl	8002fc4 <UART_CheckIdleState>
 8002806:	0003      	movs	r3, r0
}
 8002808:	0018      	movs	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	b002      	add	sp, #8
 800280e:	bd80      	pop	{r7, pc}
 8002810:	ffffb7ff 	.word	0xffffb7ff

08002814 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08a      	sub	sp, #40	; 0x28
 8002818:	af02      	add	r7, sp, #8
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	603b      	str	r3, [r7, #0]
 8002820:	1dbb      	adds	r3, r7, #6
 8002822:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002828:	2b20      	cmp	r3, #32
 800282a:	d000      	beq.n	800282e <HAL_UART_Transmit+0x1a>
 800282c:	e08c      	b.n	8002948 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_UART_Transmit+0x28>
 8002834:	1dbb      	adds	r3, r7, #6
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e084      	b.n	800294a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	2380      	movs	r3, #128	; 0x80
 8002846:	015b      	lsls	r3, r3, #5
 8002848:	429a      	cmp	r2, r3
 800284a:	d109      	bne.n	8002860 <HAL_UART_Transmit+0x4c>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d105      	bne.n	8002860 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2201      	movs	r2, #1
 8002858:	4013      	ands	r3, r2
 800285a:	d001      	beq.n	8002860 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e074      	b.n	800294a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2284      	movs	r2, #132	; 0x84
 8002864:	2100      	movs	r1, #0
 8002866:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2221      	movs	r2, #33	; 0x21
 800286c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800286e:	f7fe f937 	bl	8000ae0 <HAL_GetTick>
 8002872:	0003      	movs	r3, r0
 8002874:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	1dba      	adds	r2, r7, #6
 800287a:	2150      	movs	r1, #80	; 0x50
 800287c:	8812      	ldrh	r2, [r2, #0]
 800287e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	1dba      	adds	r2, r7, #6
 8002884:	2152      	movs	r1, #82	; 0x52
 8002886:	8812      	ldrh	r2, [r2, #0]
 8002888:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	2380      	movs	r3, #128	; 0x80
 8002890:	015b      	lsls	r3, r3, #5
 8002892:	429a      	cmp	r2, r3
 8002894:	d108      	bne.n	80028a8 <HAL_UART_Transmit+0x94>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d104      	bne.n	80028a8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	61bb      	str	r3, [r7, #24]
 80028a6:	e003      	b.n	80028b0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80028b0:	e02f      	b.n	8002912 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	0013      	movs	r3, r2
 80028bc:	2200      	movs	r2, #0
 80028be:	2180      	movs	r1, #128	; 0x80
 80028c0:	f000 fc28 	bl	8003114 <UART_WaitOnFlagUntilTimeout>
 80028c4:	1e03      	subs	r3, r0, #0
 80028c6:	d004      	beq.n	80028d2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2220      	movs	r2, #32
 80028cc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e03b      	b.n	800294a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10b      	bne.n	80028f0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	881b      	ldrh	r3, [r3, #0]
 80028dc:	001a      	movs	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	05d2      	lsls	r2, r2, #23
 80028e4:	0dd2      	lsrs	r2, r2, #23
 80028e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	3302      	adds	r3, #2
 80028ec:	61bb      	str	r3, [r7, #24]
 80028ee:	e007      	b.n	8002900 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	781a      	ldrb	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	3301      	adds	r3, #1
 80028fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2252      	movs	r2, #82	; 0x52
 8002904:	5a9b      	ldrh	r3, [r3, r2]
 8002906:	b29b      	uxth	r3, r3
 8002908:	3b01      	subs	r3, #1
 800290a:	b299      	uxth	r1, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2252      	movs	r2, #82	; 0x52
 8002910:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2252      	movs	r2, #82	; 0x52
 8002916:	5a9b      	ldrh	r3, [r3, r2]
 8002918:	b29b      	uxth	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1c9      	bne.n	80028b2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	0013      	movs	r3, r2
 8002928:	2200      	movs	r2, #0
 800292a:	2140      	movs	r1, #64	; 0x40
 800292c:	f000 fbf2 	bl	8003114 <UART_WaitOnFlagUntilTimeout>
 8002930:	1e03      	subs	r3, r0, #0
 8002932:	d004      	beq.n	800293e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2220      	movs	r2, #32
 8002938:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e005      	b.n	800294a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2220      	movs	r2, #32
 8002942:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	e000      	b.n	800294a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002948:	2302      	movs	r3, #2
  }
}
 800294a:	0018      	movs	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	b008      	add	sp, #32
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002954:	b5b0      	push	{r4, r5, r7, lr}
 8002956:	b08e      	sub	sp, #56	; 0x38
 8002958:	af00      	add	r7, sp, #0
 800295a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800295c:	231a      	movs	r3, #26
 800295e:	2218      	movs	r2, #24
 8002960:	189b      	adds	r3, r3, r2
 8002962:	19db      	adds	r3, r3, r7
 8002964:	2200      	movs	r2, #0
 8002966:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	431a      	orrs	r2, r3
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	431a      	orrs	r2, r3
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	4313      	orrs	r3, r2
 800297e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4ac6      	ldr	r2, [pc, #792]	; (8002ca0 <UART_SetConfig+0x34c>)
 8002988:	4013      	ands	r3, r2
 800298a:	0019      	movs	r1, r3
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002992:	430a      	orrs	r2, r1
 8002994:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	4ac1      	ldr	r2, [pc, #772]	; (8002ca4 <UART_SetConfig+0x350>)
 800299e:	4013      	ands	r3, r2
 80029a0:	0019      	movs	r1, r3
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4abb      	ldr	r2, [pc, #748]	; (8002ca8 <UART_SetConfig+0x354>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d004      	beq.n	80029c8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029c4:	4313      	orrs	r3, r2
 80029c6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	4ab7      	ldr	r2, [pc, #732]	; (8002cac <UART_SetConfig+0x358>)
 80029d0:	4013      	ands	r3, r2
 80029d2:	0019      	movs	r1, r3
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029da:	430a      	orrs	r2, r1
 80029dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4ab3      	ldr	r2, [pc, #716]	; (8002cb0 <UART_SetConfig+0x35c>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d131      	bne.n	8002a4c <UART_SetConfig+0xf8>
 80029e8:	4bb2      	ldr	r3, [pc, #712]	; (8002cb4 <UART_SetConfig+0x360>)
 80029ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ec:	2203      	movs	r2, #3
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d01d      	beq.n	8002a30 <UART_SetConfig+0xdc>
 80029f4:	d823      	bhi.n	8002a3e <UART_SetConfig+0xea>
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d00c      	beq.n	8002a14 <UART_SetConfig+0xc0>
 80029fa:	d820      	bhi.n	8002a3e <UART_SetConfig+0xea>
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d002      	beq.n	8002a06 <UART_SetConfig+0xb2>
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d00e      	beq.n	8002a22 <UART_SetConfig+0xce>
 8002a04:	e01b      	b.n	8002a3e <UART_SetConfig+0xea>
 8002a06:	231b      	movs	r3, #27
 8002a08:	2218      	movs	r2, #24
 8002a0a:	189b      	adds	r3, r3, r2
 8002a0c:	19db      	adds	r3, r3, r7
 8002a0e:	2201      	movs	r2, #1
 8002a10:	701a      	strb	r2, [r3, #0]
 8002a12:	e09c      	b.n	8002b4e <UART_SetConfig+0x1fa>
 8002a14:	231b      	movs	r3, #27
 8002a16:	2218      	movs	r2, #24
 8002a18:	189b      	adds	r3, r3, r2
 8002a1a:	19db      	adds	r3, r3, r7
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	701a      	strb	r2, [r3, #0]
 8002a20:	e095      	b.n	8002b4e <UART_SetConfig+0x1fa>
 8002a22:	231b      	movs	r3, #27
 8002a24:	2218      	movs	r2, #24
 8002a26:	189b      	adds	r3, r3, r2
 8002a28:	19db      	adds	r3, r3, r7
 8002a2a:	2204      	movs	r2, #4
 8002a2c:	701a      	strb	r2, [r3, #0]
 8002a2e:	e08e      	b.n	8002b4e <UART_SetConfig+0x1fa>
 8002a30:	231b      	movs	r3, #27
 8002a32:	2218      	movs	r2, #24
 8002a34:	189b      	adds	r3, r3, r2
 8002a36:	19db      	adds	r3, r3, r7
 8002a38:	2208      	movs	r2, #8
 8002a3a:	701a      	strb	r2, [r3, #0]
 8002a3c:	e087      	b.n	8002b4e <UART_SetConfig+0x1fa>
 8002a3e:	231b      	movs	r3, #27
 8002a40:	2218      	movs	r2, #24
 8002a42:	189b      	adds	r3, r3, r2
 8002a44:	19db      	adds	r3, r3, r7
 8002a46:	2210      	movs	r2, #16
 8002a48:	701a      	strb	r2, [r3, #0]
 8002a4a:	e080      	b.n	8002b4e <UART_SetConfig+0x1fa>
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a99      	ldr	r2, [pc, #612]	; (8002cb8 <UART_SetConfig+0x364>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d131      	bne.n	8002aba <UART_SetConfig+0x166>
 8002a56:	4b97      	ldr	r3, [pc, #604]	; (8002cb4 <UART_SetConfig+0x360>)
 8002a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5a:	220c      	movs	r2, #12
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	2b0c      	cmp	r3, #12
 8002a60:	d01d      	beq.n	8002a9e <UART_SetConfig+0x14a>
 8002a62:	d823      	bhi.n	8002aac <UART_SetConfig+0x158>
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d00c      	beq.n	8002a82 <UART_SetConfig+0x12e>
 8002a68:	d820      	bhi.n	8002aac <UART_SetConfig+0x158>
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d002      	beq.n	8002a74 <UART_SetConfig+0x120>
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d00e      	beq.n	8002a90 <UART_SetConfig+0x13c>
 8002a72:	e01b      	b.n	8002aac <UART_SetConfig+0x158>
 8002a74:	231b      	movs	r3, #27
 8002a76:	2218      	movs	r2, #24
 8002a78:	189b      	adds	r3, r3, r2
 8002a7a:	19db      	adds	r3, r3, r7
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
 8002a80:	e065      	b.n	8002b4e <UART_SetConfig+0x1fa>
 8002a82:	231b      	movs	r3, #27
 8002a84:	2218      	movs	r2, #24
 8002a86:	189b      	adds	r3, r3, r2
 8002a88:	19db      	adds	r3, r3, r7
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	701a      	strb	r2, [r3, #0]
 8002a8e:	e05e      	b.n	8002b4e <UART_SetConfig+0x1fa>
 8002a90:	231b      	movs	r3, #27
 8002a92:	2218      	movs	r2, #24
 8002a94:	189b      	adds	r3, r3, r2
 8002a96:	19db      	adds	r3, r3, r7
 8002a98:	2204      	movs	r2, #4
 8002a9a:	701a      	strb	r2, [r3, #0]
 8002a9c:	e057      	b.n	8002b4e <UART_SetConfig+0x1fa>
 8002a9e:	231b      	movs	r3, #27
 8002aa0:	2218      	movs	r2, #24
 8002aa2:	189b      	adds	r3, r3, r2
 8002aa4:	19db      	adds	r3, r3, r7
 8002aa6:	2208      	movs	r2, #8
 8002aa8:	701a      	strb	r2, [r3, #0]
 8002aaa:	e050      	b.n	8002b4e <UART_SetConfig+0x1fa>
 8002aac:	231b      	movs	r3, #27
 8002aae:	2218      	movs	r2, #24
 8002ab0:	189b      	adds	r3, r3, r2
 8002ab2:	19db      	adds	r3, r3, r7
 8002ab4:	2210      	movs	r2, #16
 8002ab6:	701a      	strb	r2, [r3, #0]
 8002ab8:	e049      	b.n	8002b4e <UART_SetConfig+0x1fa>
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a7a      	ldr	r2, [pc, #488]	; (8002ca8 <UART_SetConfig+0x354>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d13e      	bne.n	8002b42 <UART_SetConfig+0x1ee>
 8002ac4:	4b7b      	ldr	r3, [pc, #492]	; (8002cb4 <UART_SetConfig+0x360>)
 8002ac6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ac8:	23c0      	movs	r3, #192	; 0xc0
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	4013      	ands	r3, r2
 8002ace:	22c0      	movs	r2, #192	; 0xc0
 8002ad0:	0112      	lsls	r2, r2, #4
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d027      	beq.n	8002b26 <UART_SetConfig+0x1d2>
 8002ad6:	22c0      	movs	r2, #192	; 0xc0
 8002ad8:	0112      	lsls	r2, r2, #4
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d82a      	bhi.n	8002b34 <UART_SetConfig+0x1e0>
 8002ade:	2280      	movs	r2, #128	; 0x80
 8002ae0:	0112      	lsls	r2, r2, #4
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d011      	beq.n	8002b0a <UART_SetConfig+0x1b6>
 8002ae6:	2280      	movs	r2, #128	; 0x80
 8002ae8:	0112      	lsls	r2, r2, #4
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d822      	bhi.n	8002b34 <UART_SetConfig+0x1e0>
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d004      	beq.n	8002afc <UART_SetConfig+0x1a8>
 8002af2:	2280      	movs	r2, #128	; 0x80
 8002af4:	00d2      	lsls	r2, r2, #3
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d00e      	beq.n	8002b18 <UART_SetConfig+0x1c4>
 8002afa:	e01b      	b.n	8002b34 <UART_SetConfig+0x1e0>
 8002afc:	231b      	movs	r3, #27
 8002afe:	2218      	movs	r2, #24
 8002b00:	189b      	adds	r3, r3, r2
 8002b02:	19db      	adds	r3, r3, r7
 8002b04:	2200      	movs	r2, #0
 8002b06:	701a      	strb	r2, [r3, #0]
 8002b08:	e021      	b.n	8002b4e <UART_SetConfig+0x1fa>
 8002b0a:	231b      	movs	r3, #27
 8002b0c:	2218      	movs	r2, #24
 8002b0e:	189b      	adds	r3, r3, r2
 8002b10:	19db      	adds	r3, r3, r7
 8002b12:	2202      	movs	r2, #2
 8002b14:	701a      	strb	r2, [r3, #0]
 8002b16:	e01a      	b.n	8002b4e <UART_SetConfig+0x1fa>
 8002b18:	231b      	movs	r3, #27
 8002b1a:	2218      	movs	r2, #24
 8002b1c:	189b      	adds	r3, r3, r2
 8002b1e:	19db      	adds	r3, r3, r7
 8002b20:	2204      	movs	r2, #4
 8002b22:	701a      	strb	r2, [r3, #0]
 8002b24:	e013      	b.n	8002b4e <UART_SetConfig+0x1fa>
 8002b26:	231b      	movs	r3, #27
 8002b28:	2218      	movs	r2, #24
 8002b2a:	189b      	adds	r3, r3, r2
 8002b2c:	19db      	adds	r3, r3, r7
 8002b2e:	2208      	movs	r2, #8
 8002b30:	701a      	strb	r2, [r3, #0]
 8002b32:	e00c      	b.n	8002b4e <UART_SetConfig+0x1fa>
 8002b34:	231b      	movs	r3, #27
 8002b36:	2218      	movs	r2, #24
 8002b38:	189b      	adds	r3, r3, r2
 8002b3a:	19db      	adds	r3, r3, r7
 8002b3c:	2210      	movs	r2, #16
 8002b3e:	701a      	strb	r2, [r3, #0]
 8002b40:	e005      	b.n	8002b4e <UART_SetConfig+0x1fa>
 8002b42:	231b      	movs	r3, #27
 8002b44:	2218      	movs	r2, #24
 8002b46:	189b      	adds	r3, r3, r2
 8002b48:	19db      	adds	r3, r3, r7
 8002b4a:	2210      	movs	r2, #16
 8002b4c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a55      	ldr	r2, [pc, #340]	; (8002ca8 <UART_SetConfig+0x354>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d000      	beq.n	8002b5a <UART_SetConfig+0x206>
 8002b58:	e084      	b.n	8002c64 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b5a:	231b      	movs	r3, #27
 8002b5c:	2218      	movs	r2, #24
 8002b5e:	189b      	adds	r3, r3, r2
 8002b60:	19db      	adds	r3, r3, r7
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d01d      	beq.n	8002ba4 <UART_SetConfig+0x250>
 8002b68:	dc20      	bgt.n	8002bac <UART_SetConfig+0x258>
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d015      	beq.n	8002b9a <UART_SetConfig+0x246>
 8002b6e:	dc1d      	bgt.n	8002bac <UART_SetConfig+0x258>
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d002      	beq.n	8002b7a <UART_SetConfig+0x226>
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d005      	beq.n	8002b84 <UART_SetConfig+0x230>
 8002b78:	e018      	b.n	8002bac <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b7a:	f7ff fc3d 	bl	80023f8 <HAL_RCC_GetPCLK1Freq>
 8002b7e:	0003      	movs	r3, r0
 8002b80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b82:	e01c      	b.n	8002bbe <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b84:	4b4b      	ldr	r3, [pc, #300]	; (8002cb4 <UART_SetConfig+0x360>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2210      	movs	r2, #16
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d002      	beq.n	8002b94 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002b8e:	4b4b      	ldr	r3, [pc, #300]	; (8002cbc <UART_SetConfig+0x368>)
 8002b90:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002b92:	e014      	b.n	8002bbe <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8002b94:	4b4a      	ldr	r3, [pc, #296]	; (8002cc0 <UART_SetConfig+0x36c>)
 8002b96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b98:	e011      	b.n	8002bbe <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b9a:	f7ff fb7d 	bl	8002298 <HAL_RCC_GetSysClockFreq>
 8002b9e:	0003      	movs	r3, r0
 8002ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ba2:	e00c      	b.n	8002bbe <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ba4:	2380      	movs	r3, #128	; 0x80
 8002ba6:	021b      	lsls	r3, r3, #8
 8002ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002baa:	e008      	b.n	8002bbe <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002bb0:	231a      	movs	r3, #26
 8002bb2:	2218      	movs	r2, #24
 8002bb4:	189b      	adds	r3, r3, r2
 8002bb6:	19db      	adds	r3, r3, r7
 8002bb8:	2201      	movs	r2, #1
 8002bba:	701a      	strb	r2, [r3, #0]
        break;
 8002bbc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d100      	bne.n	8002bc6 <UART_SetConfig+0x272>
 8002bc4:	e132      	b.n	8002e2c <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	0013      	movs	r3, r2
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	189b      	adds	r3, r3, r2
 8002bd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d305      	bcc.n	8002be2 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002bdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d906      	bls.n	8002bf0 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8002be2:	231a      	movs	r3, #26
 8002be4:	2218      	movs	r2, #24
 8002be6:	189b      	adds	r3, r3, r2
 8002be8:	19db      	adds	r3, r3, r7
 8002bea:	2201      	movs	r2, #1
 8002bec:	701a      	strb	r2, [r3, #0]
 8002bee:	e11d      	b.n	8002e2c <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf2:	613b      	str	r3, [r7, #16]
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	6939      	ldr	r1, [r7, #16]
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	000b      	movs	r3, r1
 8002bfe:	0e1b      	lsrs	r3, r3, #24
 8002c00:	0010      	movs	r0, r2
 8002c02:	0205      	lsls	r5, r0, #8
 8002c04:	431d      	orrs	r5, r3
 8002c06:	000b      	movs	r3, r1
 8002c08:	021c      	lsls	r4, r3, #8
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	085b      	lsrs	r3, r3, #1
 8002c10:	60bb      	str	r3, [r7, #8]
 8002c12:	2300      	movs	r3, #0
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	68b8      	ldr	r0, [r7, #8]
 8002c18:	68f9      	ldr	r1, [r7, #12]
 8002c1a:	1900      	adds	r0, r0, r4
 8002c1c:	4169      	adcs	r1, r5
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	603b      	str	r3, [r7, #0]
 8002c24:	2300      	movs	r3, #0
 8002c26:	607b      	str	r3, [r7, #4]
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f7fd fb0a 	bl	8000244 <__aeabi_uldivmod>
 8002c30:	0002      	movs	r2, r0
 8002c32:	000b      	movs	r3, r1
 8002c34:	0013      	movs	r3, r2
 8002c36:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c3a:	23c0      	movs	r3, #192	; 0xc0
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d309      	bcc.n	8002c56 <UART_SetConfig+0x302>
 8002c42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c44:	2380      	movs	r3, #128	; 0x80
 8002c46:	035b      	lsls	r3, r3, #13
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d204      	bcs.n	8002c56 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c52:	60da      	str	r2, [r3, #12]
 8002c54:	e0ea      	b.n	8002e2c <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8002c56:	231a      	movs	r3, #26
 8002c58:	2218      	movs	r2, #24
 8002c5a:	189b      	adds	r3, r3, r2
 8002c5c:	19db      	adds	r3, r3, r7
 8002c5e:	2201      	movs	r2, #1
 8002c60:	701a      	strb	r2, [r3, #0]
 8002c62:	e0e3      	b.n	8002e2c <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	69da      	ldr	r2, [r3, #28]
 8002c68:	2380      	movs	r3, #128	; 0x80
 8002c6a:	021b      	lsls	r3, r3, #8
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d000      	beq.n	8002c72 <UART_SetConfig+0x31e>
 8002c70:	e085      	b.n	8002d7e <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8002c72:	231b      	movs	r3, #27
 8002c74:	2218      	movs	r2, #24
 8002c76:	189b      	adds	r3, r3, r2
 8002c78:	19db      	adds	r3, r3, r7
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d837      	bhi.n	8002cf0 <UART_SetConfig+0x39c>
 8002c80:	009a      	lsls	r2, r3, #2
 8002c82:	4b10      	ldr	r3, [pc, #64]	; (8002cc4 <UART_SetConfig+0x370>)
 8002c84:	18d3      	adds	r3, r2, r3
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c8a:	f7ff fbb5 	bl	80023f8 <HAL_RCC_GetPCLK1Freq>
 8002c8e:	0003      	movs	r3, r0
 8002c90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c92:	e036      	b.n	8002d02 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c94:	f7ff fbc6 	bl	8002424 <HAL_RCC_GetPCLK2Freq>
 8002c98:	0003      	movs	r3, r0
 8002c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c9c:	e031      	b.n	8002d02 <UART_SetConfig+0x3ae>
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	efff69f3 	.word	0xefff69f3
 8002ca4:	ffffcfff 	.word	0xffffcfff
 8002ca8:	40004800 	.word	0x40004800
 8002cac:	fffff4ff 	.word	0xfffff4ff
 8002cb0:	40013800 	.word	0x40013800
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	40004400 	.word	0x40004400
 8002cbc:	003d0900 	.word	0x003d0900
 8002cc0:	00f42400 	.word	0x00f42400
 8002cc4:	08003c2c 	.word	0x08003c2c
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002cc8:	4b60      	ldr	r3, [pc, #384]	; (8002e4c <UART_SetConfig+0x4f8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2210      	movs	r2, #16
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d002      	beq.n	8002cd8 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002cd2:	4b5f      	ldr	r3, [pc, #380]	; (8002e50 <UART_SetConfig+0x4fc>)
 8002cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002cd6:	e014      	b.n	8002d02 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8002cd8:	4b5e      	ldr	r3, [pc, #376]	; (8002e54 <UART_SetConfig+0x500>)
 8002cda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cdc:	e011      	b.n	8002d02 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cde:	f7ff fadb 	bl	8002298 <HAL_RCC_GetSysClockFreq>
 8002ce2:	0003      	movs	r3, r0
 8002ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ce6:	e00c      	b.n	8002d02 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ce8:	2380      	movs	r3, #128	; 0x80
 8002cea:	021b      	lsls	r3, r3, #8
 8002cec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cee:	e008      	b.n	8002d02 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002cf4:	231a      	movs	r3, #26
 8002cf6:	2218      	movs	r2, #24
 8002cf8:	189b      	adds	r3, r3, r2
 8002cfa:	19db      	adds	r3, r3, r7
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	701a      	strb	r2, [r3, #0]
        break;
 8002d00:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d100      	bne.n	8002d0a <UART_SetConfig+0x3b6>
 8002d08:	e090      	b.n	8002e2c <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0c:	005a      	lsls	r2, r3, #1
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	085b      	lsrs	r3, r3, #1
 8002d14:	18d2      	adds	r2, r2, r3
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	0019      	movs	r1, r3
 8002d1c:	0010      	movs	r0, r2
 8002d1e:	f7fd fa05 	bl	800012c <__udivsi3>
 8002d22:	0003      	movs	r3, r0
 8002d24:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d28:	2b0f      	cmp	r3, #15
 8002d2a:	d921      	bls.n	8002d70 <UART_SetConfig+0x41c>
 8002d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d2e:	2380      	movs	r3, #128	; 0x80
 8002d30:	025b      	lsls	r3, r3, #9
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d21c      	bcs.n	8002d70 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	200e      	movs	r0, #14
 8002d3c:	2418      	movs	r4, #24
 8002d3e:	1903      	adds	r3, r0, r4
 8002d40:	19db      	adds	r3, r3, r7
 8002d42:	210f      	movs	r1, #15
 8002d44:	438a      	bics	r2, r1
 8002d46:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4a:	085b      	lsrs	r3, r3, #1
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	2207      	movs	r2, #7
 8002d50:	4013      	ands	r3, r2
 8002d52:	b299      	uxth	r1, r3
 8002d54:	1903      	adds	r3, r0, r4
 8002d56:	19db      	adds	r3, r3, r7
 8002d58:	1902      	adds	r2, r0, r4
 8002d5a:	19d2      	adds	r2, r2, r7
 8002d5c:	8812      	ldrh	r2, [r2, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	1902      	adds	r2, r0, r4
 8002d68:	19d2      	adds	r2, r2, r7
 8002d6a:	8812      	ldrh	r2, [r2, #0]
 8002d6c:	60da      	str	r2, [r3, #12]
 8002d6e:	e05d      	b.n	8002e2c <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002d70:	231a      	movs	r3, #26
 8002d72:	2218      	movs	r2, #24
 8002d74:	189b      	adds	r3, r3, r2
 8002d76:	19db      	adds	r3, r3, r7
 8002d78:	2201      	movs	r2, #1
 8002d7a:	701a      	strb	r2, [r3, #0]
 8002d7c:	e056      	b.n	8002e2c <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d7e:	231b      	movs	r3, #27
 8002d80:	2218      	movs	r2, #24
 8002d82:	189b      	adds	r3, r3, r2
 8002d84:	19db      	adds	r3, r3, r7
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d822      	bhi.n	8002dd2 <UART_SetConfig+0x47e>
 8002d8c:	009a      	lsls	r2, r3, #2
 8002d8e:	4b32      	ldr	r3, [pc, #200]	; (8002e58 <UART_SetConfig+0x504>)
 8002d90:	18d3      	adds	r3, r2, r3
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d96:	f7ff fb2f 	bl	80023f8 <HAL_RCC_GetPCLK1Freq>
 8002d9a:	0003      	movs	r3, r0
 8002d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d9e:	e021      	b.n	8002de4 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002da0:	f7ff fb40 	bl	8002424 <HAL_RCC_GetPCLK2Freq>
 8002da4:	0003      	movs	r3, r0
 8002da6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002da8:	e01c      	b.n	8002de4 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002daa:	4b28      	ldr	r3, [pc, #160]	; (8002e4c <UART_SetConfig+0x4f8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2210      	movs	r2, #16
 8002db0:	4013      	ands	r3, r2
 8002db2:	d002      	beq.n	8002dba <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002db4:	4b26      	ldr	r3, [pc, #152]	; (8002e50 <UART_SetConfig+0x4fc>)
 8002db6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002db8:	e014      	b.n	8002de4 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8002dba:	4b26      	ldr	r3, [pc, #152]	; (8002e54 <UART_SetConfig+0x500>)
 8002dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002dbe:	e011      	b.n	8002de4 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dc0:	f7ff fa6a 	bl	8002298 <HAL_RCC_GetSysClockFreq>
 8002dc4:	0003      	movs	r3, r0
 8002dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002dc8:	e00c      	b.n	8002de4 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dca:	2380      	movs	r3, #128	; 0x80
 8002dcc:	021b      	lsls	r3, r3, #8
 8002dce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002dd0:	e008      	b.n	8002de4 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002dd6:	231a      	movs	r3, #26
 8002dd8:	2218      	movs	r2, #24
 8002dda:	189b      	adds	r3, r3, r2
 8002ddc:	19db      	adds	r3, r3, r7
 8002dde:	2201      	movs	r2, #1
 8002de0:	701a      	strb	r2, [r3, #0]
        break;
 8002de2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d020      	beq.n	8002e2c <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	085a      	lsrs	r2, r3, #1
 8002df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df2:	18d2      	adds	r2, r2, r3
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	0019      	movs	r1, r3
 8002dfa:	0010      	movs	r0, r2
 8002dfc:	f7fd f996 	bl	800012c <__udivsi3>
 8002e00:	0003      	movs	r3, r0
 8002e02:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e06:	2b0f      	cmp	r3, #15
 8002e08:	d90a      	bls.n	8002e20 <UART_SetConfig+0x4cc>
 8002e0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e0c:	2380      	movs	r3, #128	; 0x80
 8002e0e:	025b      	lsls	r3, r3, #9
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d205      	bcs.n	8002e20 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	60da      	str	r2, [r3, #12]
 8002e1e:	e005      	b.n	8002e2c <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002e20:	231a      	movs	r3, #26
 8002e22:	2218      	movs	r2, #24
 8002e24:	189b      	adds	r3, r3, r2
 8002e26:	19db      	adds	r3, r3, r7
 8002e28:	2201      	movs	r2, #1
 8002e2a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	2200      	movs	r2, #0
 8002e36:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002e38:	231a      	movs	r3, #26
 8002e3a:	2218      	movs	r2, #24
 8002e3c:	189b      	adds	r3, r3, r2
 8002e3e:	19db      	adds	r3, r3, r7
 8002e40:	781b      	ldrb	r3, [r3, #0]
}
 8002e42:	0018      	movs	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b00e      	add	sp, #56	; 0x38
 8002e48:	bdb0      	pop	{r4, r5, r7, pc}
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	003d0900 	.word	0x003d0900
 8002e54:	00f42400 	.word	0x00f42400
 8002e58:	08003c50 	.word	0x08003c50

08002e5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	2201      	movs	r2, #1
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d00b      	beq.n	8002e86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	4a4a      	ldr	r2, [pc, #296]	; (8002fa0 <UART_AdvFeatureConfig+0x144>)
 8002e76:	4013      	ands	r3, r2
 8002e78:	0019      	movs	r1, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	d00b      	beq.n	8002ea8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	4a43      	ldr	r2, [pc, #268]	; (8002fa4 <UART_AdvFeatureConfig+0x148>)
 8002e98:	4013      	ands	r3, r2
 8002e9a:	0019      	movs	r1, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	2204      	movs	r2, #4
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d00b      	beq.n	8002eca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	4a3b      	ldr	r2, [pc, #236]	; (8002fa8 <UART_AdvFeatureConfig+0x14c>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	0019      	movs	r1, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	2208      	movs	r2, #8
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	d00b      	beq.n	8002eec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	4a34      	ldr	r2, [pc, #208]	; (8002fac <UART_AdvFeatureConfig+0x150>)
 8002edc:	4013      	ands	r3, r2
 8002ede:	0019      	movs	r1, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	2210      	movs	r2, #16
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	d00b      	beq.n	8002f0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	4a2c      	ldr	r2, [pc, #176]	; (8002fb0 <UART_AdvFeatureConfig+0x154>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	0019      	movs	r1, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	2220      	movs	r2, #32
 8002f14:	4013      	ands	r3, r2
 8002f16:	d00b      	beq.n	8002f30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	4a25      	ldr	r2, [pc, #148]	; (8002fb4 <UART_AdvFeatureConfig+0x158>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	0019      	movs	r1, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	2240      	movs	r2, #64	; 0x40
 8002f36:	4013      	ands	r3, r2
 8002f38:	d01d      	beq.n	8002f76 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	4a1d      	ldr	r2, [pc, #116]	; (8002fb8 <UART_AdvFeatureConfig+0x15c>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	0019      	movs	r1, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f56:	2380      	movs	r3, #128	; 0x80
 8002f58:	035b      	lsls	r3, r3, #13
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d10b      	bne.n	8002f76 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	4a15      	ldr	r2, [pc, #84]	; (8002fbc <UART_AdvFeatureConfig+0x160>)
 8002f66:	4013      	ands	r3, r2
 8002f68:	0019      	movs	r1, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7a:	2280      	movs	r2, #128	; 0x80
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d00b      	beq.n	8002f98 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	4a0e      	ldr	r2, [pc, #56]	; (8002fc0 <UART_AdvFeatureConfig+0x164>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	0019      	movs	r1, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	605a      	str	r2, [r3, #4]
  }
}
 8002f98:	46c0      	nop			; (mov r8, r8)
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	b002      	add	sp, #8
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	fffdffff 	.word	0xfffdffff
 8002fa4:	fffeffff 	.word	0xfffeffff
 8002fa8:	fffbffff 	.word	0xfffbffff
 8002fac:	ffff7fff 	.word	0xffff7fff
 8002fb0:	ffffefff 	.word	0xffffefff
 8002fb4:	ffffdfff 	.word	0xffffdfff
 8002fb8:	ffefffff 	.word	0xffefffff
 8002fbc:	ff9fffff 	.word	0xff9fffff
 8002fc0:	fff7ffff 	.word	0xfff7ffff

08002fc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b092      	sub	sp, #72	; 0x48
 8002fc8:	af02      	add	r7, sp, #8
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2284      	movs	r2, #132	; 0x84
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fd4:	f7fd fd84 	bl	8000ae0 <HAL_GetTick>
 8002fd8:	0003      	movs	r3, r0
 8002fda:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2208      	movs	r2, #8
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	d12c      	bne.n	8003044 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fec:	2280      	movs	r2, #128	; 0x80
 8002fee:	0391      	lsls	r1, r2, #14
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	4a46      	ldr	r2, [pc, #280]	; (800310c <UART_CheckIdleState+0x148>)
 8002ff4:	9200      	str	r2, [sp, #0]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f000 f88c 	bl	8003114 <UART_WaitOnFlagUntilTimeout>
 8002ffc:	1e03      	subs	r3, r0, #0
 8002ffe:	d021      	beq.n	8003044 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003000:	f3ef 8310 	mrs	r3, PRIMASK
 8003004:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003008:	63bb      	str	r3, [r7, #56]	; 0x38
 800300a:	2301      	movs	r3, #1
 800300c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800300e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003010:	f383 8810 	msr	PRIMASK, r3
}
 8003014:	46c0      	nop			; (mov r8, r8)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2180      	movs	r1, #128	; 0x80
 8003022:	438a      	bics	r2, r1
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003028:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800302a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302c:	f383 8810 	msr	PRIMASK, r3
}
 8003030:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2220      	movs	r2, #32
 8003036:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2278      	movs	r2, #120	; 0x78
 800303c:	2100      	movs	r1, #0
 800303e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e05f      	b.n	8003104 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2204      	movs	r2, #4
 800304c:	4013      	ands	r3, r2
 800304e:	2b04      	cmp	r3, #4
 8003050:	d146      	bne.n	80030e0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003054:	2280      	movs	r2, #128	; 0x80
 8003056:	03d1      	lsls	r1, r2, #15
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	4a2c      	ldr	r2, [pc, #176]	; (800310c <UART_CheckIdleState+0x148>)
 800305c:	9200      	str	r2, [sp, #0]
 800305e:	2200      	movs	r2, #0
 8003060:	f000 f858 	bl	8003114 <UART_WaitOnFlagUntilTimeout>
 8003064:	1e03      	subs	r3, r0, #0
 8003066:	d03b      	beq.n	80030e0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003068:	f3ef 8310 	mrs	r3, PRIMASK
 800306c:	60fb      	str	r3, [r7, #12]
  return(result);
 800306e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003070:	637b      	str	r3, [r7, #52]	; 0x34
 8003072:	2301      	movs	r3, #1
 8003074:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	f383 8810 	msr	PRIMASK, r3
}
 800307c:	46c0      	nop			; (mov r8, r8)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4921      	ldr	r1, [pc, #132]	; (8003110 <UART_CheckIdleState+0x14c>)
 800308a:	400a      	ands	r2, r1
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003090:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f383 8810 	msr	PRIMASK, r3
}
 8003098:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800309a:	f3ef 8310 	mrs	r3, PRIMASK
 800309e:	61bb      	str	r3, [r7, #24]
  return(result);
 80030a0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a2:	633b      	str	r3, [r7, #48]	; 0x30
 80030a4:	2301      	movs	r3, #1
 80030a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	f383 8810 	msr	PRIMASK, r3
}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2101      	movs	r1, #1
 80030bc:	438a      	bics	r2, r1
 80030be:	609a      	str	r2, [r3, #8]
 80030c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	f383 8810 	msr	PRIMASK, r3
}
 80030ca:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2280      	movs	r2, #128	; 0x80
 80030d0:	2120      	movs	r1, #32
 80030d2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2278      	movs	r2, #120	; 0x78
 80030d8:	2100      	movs	r1, #0
 80030da:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e011      	b.n	8003104 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2220      	movs	r2, #32
 80030e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2280      	movs	r2, #128	; 0x80
 80030ea:	2120      	movs	r1, #32
 80030ec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2278      	movs	r2, #120	; 0x78
 80030fe:	2100      	movs	r1, #0
 8003100:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	0018      	movs	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	b010      	add	sp, #64	; 0x40
 800310a:	bd80      	pop	{r7, pc}
 800310c:	01ffffff 	.word	0x01ffffff
 8003110:	fffffedf 	.word	0xfffffedf

08003114 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	603b      	str	r3, [r7, #0]
 8003120:	1dfb      	adds	r3, r7, #7
 8003122:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003124:	e04b      	b.n	80031be <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	3301      	adds	r3, #1
 800312a:	d048      	beq.n	80031be <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800312c:	f7fd fcd8 	bl	8000ae0 <HAL_GetTick>
 8003130:	0002      	movs	r2, r0
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	429a      	cmp	r2, r3
 800313a:	d302      	bcc.n	8003142 <UART_WaitOnFlagUntilTimeout+0x2e>
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e04b      	b.n	80031de <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2204      	movs	r2, #4
 800314e:	4013      	ands	r3, r2
 8003150:	d035      	beq.n	80031be <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	2208      	movs	r2, #8
 800315a:	4013      	ands	r3, r2
 800315c:	2b08      	cmp	r3, #8
 800315e:	d111      	bne.n	8003184 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2208      	movs	r2, #8
 8003166:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	0018      	movs	r0, r3
 800316c:	f000 f83c 	bl	80031e8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2284      	movs	r2, #132	; 0x84
 8003174:	2108      	movs	r1, #8
 8003176:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2278      	movs	r2, #120	; 0x78
 800317c:	2100      	movs	r1, #0
 800317e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e02c      	b.n	80031de <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	69da      	ldr	r2, [r3, #28]
 800318a:	2380      	movs	r3, #128	; 0x80
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	401a      	ands	r2, r3
 8003190:	2380      	movs	r3, #128	; 0x80
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	429a      	cmp	r2, r3
 8003196:	d112      	bne.n	80031be <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2280      	movs	r2, #128	; 0x80
 800319e:	0112      	lsls	r2, r2, #4
 80031a0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	0018      	movs	r0, r3
 80031a6:	f000 f81f 	bl	80031e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2284      	movs	r2, #132	; 0x84
 80031ae:	2120      	movs	r1, #32
 80031b0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2278      	movs	r2, #120	; 0x78
 80031b6:	2100      	movs	r1, #0
 80031b8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e00f      	b.n	80031de <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69db      	ldr	r3, [r3, #28]
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	4013      	ands	r3, r2
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	425a      	negs	r2, r3
 80031ce:	4153      	adcs	r3, r2
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	001a      	movs	r2, r3
 80031d4:	1dfb      	adds	r3, r7, #7
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d0a4      	beq.n	8003126 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	0018      	movs	r0, r3
 80031e0:	46bd      	mov	sp, r7
 80031e2:	b004      	add	sp, #16
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08e      	sub	sp, #56	; 0x38
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031f0:	f3ef 8310 	mrs	r3, PRIMASK
 80031f4:	617b      	str	r3, [r7, #20]
  return(result);
 80031f6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031f8:	637b      	str	r3, [r7, #52]	; 0x34
 80031fa:	2301      	movs	r3, #1
 80031fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	f383 8810 	msr	PRIMASK, r3
}
 8003204:	46c0      	nop			; (mov r8, r8)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4926      	ldr	r1, [pc, #152]	; (80032ac <UART_EndRxTransfer+0xc4>)
 8003212:	400a      	ands	r2, r1
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003218:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	f383 8810 	msr	PRIMASK, r3
}
 8003220:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003222:	f3ef 8310 	mrs	r3, PRIMASK
 8003226:	623b      	str	r3, [r7, #32]
  return(result);
 8003228:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800322a:	633b      	str	r3, [r7, #48]	; 0x30
 800322c:	2301      	movs	r3, #1
 800322e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	f383 8810 	msr	PRIMASK, r3
}
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689a      	ldr	r2, [r3, #8]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2101      	movs	r1, #1
 8003244:	438a      	bics	r2, r1
 8003246:	609a      	str	r2, [r3, #8]
 8003248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800324c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324e:	f383 8810 	msr	PRIMASK, r3
}
 8003252:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003258:	2b01      	cmp	r3, #1
 800325a:	d118      	bne.n	800328e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800325c:	f3ef 8310 	mrs	r3, PRIMASK
 8003260:	60bb      	str	r3, [r7, #8]
  return(result);
 8003262:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003264:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003266:	2301      	movs	r3, #1
 8003268:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f383 8810 	msr	PRIMASK, r3
}
 8003270:	46c0      	nop			; (mov r8, r8)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2110      	movs	r1, #16
 800327e:	438a      	bics	r2, r1
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003284:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	f383 8810 	msr	PRIMASK, r3
}
 800328c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2280      	movs	r2, #128	; 0x80
 8003292:	2120      	movs	r1, #32
 8003294:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	46bd      	mov	sp, r7
 80032a6:	b00e      	add	sp, #56	; 0x38
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	fffffedf 	.word	0xfffffedf

080032b0 <__errno>:
 80032b0:	4b01      	ldr	r3, [pc, #4]	; (80032b8 <__errno+0x8>)
 80032b2:	6818      	ldr	r0, [r3, #0]
 80032b4:	4770      	bx	lr
 80032b6:	46c0      	nop			; (mov r8, r8)
 80032b8:	2000000c 	.word	0x2000000c

080032bc <__libc_init_array>:
 80032bc:	b570      	push	{r4, r5, r6, lr}
 80032be:	2600      	movs	r6, #0
 80032c0:	4d0c      	ldr	r5, [pc, #48]	; (80032f4 <__libc_init_array+0x38>)
 80032c2:	4c0d      	ldr	r4, [pc, #52]	; (80032f8 <__libc_init_array+0x3c>)
 80032c4:	1b64      	subs	r4, r4, r5
 80032c6:	10a4      	asrs	r4, r4, #2
 80032c8:	42a6      	cmp	r6, r4
 80032ca:	d109      	bne.n	80032e0 <__libc_init_array+0x24>
 80032cc:	2600      	movs	r6, #0
 80032ce:	f000 fc8b 	bl	8003be8 <_init>
 80032d2:	4d0a      	ldr	r5, [pc, #40]	; (80032fc <__libc_init_array+0x40>)
 80032d4:	4c0a      	ldr	r4, [pc, #40]	; (8003300 <__libc_init_array+0x44>)
 80032d6:	1b64      	subs	r4, r4, r5
 80032d8:	10a4      	asrs	r4, r4, #2
 80032da:	42a6      	cmp	r6, r4
 80032dc:	d105      	bne.n	80032ea <__libc_init_array+0x2e>
 80032de:	bd70      	pop	{r4, r5, r6, pc}
 80032e0:	00b3      	lsls	r3, r6, #2
 80032e2:	58eb      	ldr	r3, [r5, r3]
 80032e4:	4798      	blx	r3
 80032e6:	3601      	adds	r6, #1
 80032e8:	e7ee      	b.n	80032c8 <__libc_init_array+0xc>
 80032ea:	00b3      	lsls	r3, r6, #2
 80032ec:	58eb      	ldr	r3, [r5, r3]
 80032ee:	4798      	blx	r3
 80032f0:	3601      	adds	r6, #1
 80032f2:	e7f2      	b.n	80032da <__libc_init_array+0x1e>
 80032f4:	08003cb0 	.word	0x08003cb0
 80032f8:	08003cb0 	.word	0x08003cb0
 80032fc:	08003cb0 	.word	0x08003cb0
 8003300:	08003cb4 	.word	0x08003cb4

08003304 <memset>:
 8003304:	0003      	movs	r3, r0
 8003306:	1882      	adds	r2, r0, r2
 8003308:	4293      	cmp	r3, r2
 800330a:	d100      	bne.n	800330e <memset+0xa>
 800330c:	4770      	bx	lr
 800330e:	7019      	strb	r1, [r3, #0]
 8003310:	3301      	adds	r3, #1
 8003312:	e7f9      	b.n	8003308 <memset+0x4>

08003314 <siprintf>:
 8003314:	b40e      	push	{r1, r2, r3}
 8003316:	b500      	push	{lr}
 8003318:	490b      	ldr	r1, [pc, #44]	; (8003348 <siprintf+0x34>)
 800331a:	b09c      	sub	sp, #112	; 0x70
 800331c:	ab1d      	add	r3, sp, #116	; 0x74
 800331e:	9002      	str	r0, [sp, #8]
 8003320:	9006      	str	r0, [sp, #24]
 8003322:	9107      	str	r1, [sp, #28]
 8003324:	9104      	str	r1, [sp, #16]
 8003326:	4809      	ldr	r0, [pc, #36]	; (800334c <siprintf+0x38>)
 8003328:	4909      	ldr	r1, [pc, #36]	; (8003350 <siprintf+0x3c>)
 800332a:	cb04      	ldmia	r3!, {r2}
 800332c:	9105      	str	r1, [sp, #20]
 800332e:	6800      	ldr	r0, [r0, #0]
 8003330:	a902      	add	r1, sp, #8
 8003332:	9301      	str	r3, [sp, #4]
 8003334:	f000 f870 	bl	8003418 <_svfiprintf_r>
 8003338:	2300      	movs	r3, #0
 800333a:	9a02      	ldr	r2, [sp, #8]
 800333c:	7013      	strb	r3, [r2, #0]
 800333e:	b01c      	add	sp, #112	; 0x70
 8003340:	bc08      	pop	{r3}
 8003342:	b003      	add	sp, #12
 8003344:	4718      	bx	r3
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	7fffffff 	.word	0x7fffffff
 800334c:	2000000c 	.word	0x2000000c
 8003350:	ffff0208 	.word	0xffff0208

08003354 <__ssputs_r>:
 8003354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003356:	688e      	ldr	r6, [r1, #8]
 8003358:	b085      	sub	sp, #20
 800335a:	0007      	movs	r7, r0
 800335c:	000c      	movs	r4, r1
 800335e:	9203      	str	r2, [sp, #12]
 8003360:	9301      	str	r3, [sp, #4]
 8003362:	429e      	cmp	r6, r3
 8003364:	d83c      	bhi.n	80033e0 <__ssputs_r+0x8c>
 8003366:	2390      	movs	r3, #144	; 0x90
 8003368:	898a      	ldrh	r2, [r1, #12]
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	421a      	tst	r2, r3
 800336e:	d034      	beq.n	80033da <__ssputs_r+0x86>
 8003370:	6909      	ldr	r1, [r1, #16]
 8003372:	6823      	ldr	r3, [r4, #0]
 8003374:	6960      	ldr	r0, [r4, #20]
 8003376:	1a5b      	subs	r3, r3, r1
 8003378:	9302      	str	r3, [sp, #8]
 800337a:	2303      	movs	r3, #3
 800337c:	4343      	muls	r3, r0
 800337e:	0fdd      	lsrs	r5, r3, #31
 8003380:	18ed      	adds	r5, r5, r3
 8003382:	9b01      	ldr	r3, [sp, #4]
 8003384:	9802      	ldr	r0, [sp, #8]
 8003386:	3301      	adds	r3, #1
 8003388:	181b      	adds	r3, r3, r0
 800338a:	106d      	asrs	r5, r5, #1
 800338c:	42ab      	cmp	r3, r5
 800338e:	d900      	bls.n	8003392 <__ssputs_r+0x3e>
 8003390:	001d      	movs	r5, r3
 8003392:	0553      	lsls	r3, r2, #21
 8003394:	d532      	bpl.n	80033fc <__ssputs_r+0xa8>
 8003396:	0029      	movs	r1, r5
 8003398:	0038      	movs	r0, r7
 800339a:	f000 fb53 	bl	8003a44 <_malloc_r>
 800339e:	1e06      	subs	r6, r0, #0
 80033a0:	d109      	bne.n	80033b6 <__ssputs_r+0x62>
 80033a2:	230c      	movs	r3, #12
 80033a4:	603b      	str	r3, [r7, #0]
 80033a6:	2340      	movs	r3, #64	; 0x40
 80033a8:	2001      	movs	r0, #1
 80033aa:	89a2      	ldrh	r2, [r4, #12]
 80033ac:	4240      	negs	r0, r0
 80033ae:	4313      	orrs	r3, r2
 80033b0:	81a3      	strh	r3, [r4, #12]
 80033b2:	b005      	add	sp, #20
 80033b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033b6:	9a02      	ldr	r2, [sp, #8]
 80033b8:	6921      	ldr	r1, [r4, #16]
 80033ba:	f000 faba 	bl	8003932 <memcpy>
 80033be:	89a3      	ldrh	r3, [r4, #12]
 80033c0:	4a14      	ldr	r2, [pc, #80]	; (8003414 <__ssputs_r+0xc0>)
 80033c2:	401a      	ands	r2, r3
 80033c4:	2380      	movs	r3, #128	; 0x80
 80033c6:	4313      	orrs	r3, r2
 80033c8:	81a3      	strh	r3, [r4, #12]
 80033ca:	9b02      	ldr	r3, [sp, #8]
 80033cc:	6126      	str	r6, [r4, #16]
 80033ce:	18f6      	adds	r6, r6, r3
 80033d0:	6026      	str	r6, [r4, #0]
 80033d2:	6165      	str	r5, [r4, #20]
 80033d4:	9e01      	ldr	r6, [sp, #4]
 80033d6:	1aed      	subs	r5, r5, r3
 80033d8:	60a5      	str	r5, [r4, #8]
 80033da:	9b01      	ldr	r3, [sp, #4]
 80033dc:	429e      	cmp	r6, r3
 80033de:	d900      	bls.n	80033e2 <__ssputs_r+0x8e>
 80033e0:	9e01      	ldr	r6, [sp, #4]
 80033e2:	0032      	movs	r2, r6
 80033e4:	9903      	ldr	r1, [sp, #12]
 80033e6:	6820      	ldr	r0, [r4, #0]
 80033e8:	f000 faac 	bl	8003944 <memmove>
 80033ec:	68a3      	ldr	r3, [r4, #8]
 80033ee:	2000      	movs	r0, #0
 80033f0:	1b9b      	subs	r3, r3, r6
 80033f2:	60a3      	str	r3, [r4, #8]
 80033f4:	6823      	ldr	r3, [r4, #0]
 80033f6:	199e      	adds	r6, r3, r6
 80033f8:	6026      	str	r6, [r4, #0]
 80033fa:	e7da      	b.n	80033b2 <__ssputs_r+0x5e>
 80033fc:	002a      	movs	r2, r5
 80033fe:	0038      	movs	r0, r7
 8003400:	f000 fb96 	bl	8003b30 <_realloc_r>
 8003404:	1e06      	subs	r6, r0, #0
 8003406:	d1e0      	bne.n	80033ca <__ssputs_r+0x76>
 8003408:	0038      	movs	r0, r7
 800340a:	6921      	ldr	r1, [r4, #16]
 800340c:	f000 faae 	bl	800396c <_free_r>
 8003410:	e7c7      	b.n	80033a2 <__ssputs_r+0x4e>
 8003412:	46c0      	nop			; (mov r8, r8)
 8003414:	fffffb7f 	.word	0xfffffb7f

08003418 <_svfiprintf_r>:
 8003418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800341a:	b0a1      	sub	sp, #132	; 0x84
 800341c:	9003      	str	r0, [sp, #12]
 800341e:	001d      	movs	r5, r3
 8003420:	898b      	ldrh	r3, [r1, #12]
 8003422:	000f      	movs	r7, r1
 8003424:	0016      	movs	r6, r2
 8003426:	061b      	lsls	r3, r3, #24
 8003428:	d511      	bpl.n	800344e <_svfiprintf_r+0x36>
 800342a:	690b      	ldr	r3, [r1, #16]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10e      	bne.n	800344e <_svfiprintf_r+0x36>
 8003430:	2140      	movs	r1, #64	; 0x40
 8003432:	f000 fb07 	bl	8003a44 <_malloc_r>
 8003436:	6038      	str	r0, [r7, #0]
 8003438:	6138      	str	r0, [r7, #16]
 800343a:	2800      	cmp	r0, #0
 800343c:	d105      	bne.n	800344a <_svfiprintf_r+0x32>
 800343e:	230c      	movs	r3, #12
 8003440:	9a03      	ldr	r2, [sp, #12]
 8003442:	3801      	subs	r0, #1
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	b021      	add	sp, #132	; 0x84
 8003448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800344a:	2340      	movs	r3, #64	; 0x40
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	2300      	movs	r3, #0
 8003450:	ac08      	add	r4, sp, #32
 8003452:	6163      	str	r3, [r4, #20]
 8003454:	3320      	adds	r3, #32
 8003456:	7663      	strb	r3, [r4, #25]
 8003458:	3310      	adds	r3, #16
 800345a:	76a3      	strb	r3, [r4, #26]
 800345c:	9507      	str	r5, [sp, #28]
 800345e:	0035      	movs	r5, r6
 8003460:	782b      	ldrb	r3, [r5, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <_svfiprintf_r+0x52>
 8003466:	2b25      	cmp	r3, #37	; 0x25
 8003468:	d147      	bne.n	80034fa <_svfiprintf_r+0xe2>
 800346a:	1bab      	subs	r3, r5, r6
 800346c:	9305      	str	r3, [sp, #20]
 800346e:	42b5      	cmp	r5, r6
 8003470:	d00c      	beq.n	800348c <_svfiprintf_r+0x74>
 8003472:	0032      	movs	r2, r6
 8003474:	0039      	movs	r1, r7
 8003476:	9803      	ldr	r0, [sp, #12]
 8003478:	f7ff ff6c 	bl	8003354 <__ssputs_r>
 800347c:	1c43      	adds	r3, r0, #1
 800347e:	d100      	bne.n	8003482 <_svfiprintf_r+0x6a>
 8003480:	e0ae      	b.n	80035e0 <_svfiprintf_r+0x1c8>
 8003482:	6962      	ldr	r2, [r4, #20]
 8003484:	9b05      	ldr	r3, [sp, #20]
 8003486:	4694      	mov	ip, r2
 8003488:	4463      	add	r3, ip
 800348a:	6163      	str	r3, [r4, #20]
 800348c:	782b      	ldrb	r3, [r5, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d100      	bne.n	8003494 <_svfiprintf_r+0x7c>
 8003492:	e0a5      	b.n	80035e0 <_svfiprintf_r+0x1c8>
 8003494:	2201      	movs	r2, #1
 8003496:	2300      	movs	r3, #0
 8003498:	4252      	negs	r2, r2
 800349a:	6062      	str	r2, [r4, #4]
 800349c:	a904      	add	r1, sp, #16
 800349e:	3254      	adds	r2, #84	; 0x54
 80034a0:	1852      	adds	r2, r2, r1
 80034a2:	1c6e      	adds	r6, r5, #1
 80034a4:	6023      	str	r3, [r4, #0]
 80034a6:	60e3      	str	r3, [r4, #12]
 80034a8:	60a3      	str	r3, [r4, #8]
 80034aa:	7013      	strb	r3, [r2, #0]
 80034ac:	65a3      	str	r3, [r4, #88]	; 0x58
 80034ae:	2205      	movs	r2, #5
 80034b0:	7831      	ldrb	r1, [r6, #0]
 80034b2:	4854      	ldr	r0, [pc, #336]	; (8003604 <_svfiprintf_r+0x1ec>)
 80034b4:	f000 fa32 	bl	800391c <memchr>
 80034b8:	1c75      	adds	r5, r6, #1
 80034ba:	2800      	cmp	r0, #0
 80034bc:	d11f      	bne.n	80034fe <_svfiprintf_r+0xe6>
 80034be:	6822      	ldr	r2, [r4, #0]
 80034c0:	06d3      	lsls	r3, r2, #27
 80034c2:	d504      	bpl.n	80034ce <_svfiprintf_r+0xb6>
 80034c4:	2353      	movs	r3, #83	; 0x53
 80034c6:	a904      	add	r1, sp, #16
 80034c8:	185b      	adds	r3, r3, r1
 80034ca:	2120      	movs	r1, #32
 80034cc:	7019      	strb	r1, [r3, #0]
 80034ce:	0713      	lsls	r3, r2, #28
 80034d0:	d504      	bpl.n	80034dc <_svfiprintf_r+0xc4>
 80034d2:	2353      	movs	r3, #83	; 0x53
 80034d4:	a904      	add	r1, sp, #16
 80034d6:	185b      	adds	r3, r3, r1
 80034d8:	212b      	movs	r1, #43	; 0x2b
 80034da:	7019      	strb	r1, [r3, #0]
 80034dc:	7833      	ldrb	r3, [r6, #0]
 80034de:	2b2a      	cmp	r3, #42	; 0x2a
 80034e0:	d016      	beq.n	8003510 <_svfiprintf_r+0xf8>
 80034e2:	0035      	movs	r5, r6
 80034e4:	2100      	movs	r1, #0
 80034e6:	200a      	movs	r0, #10
 80034e8:	68e3      	ldr	r3, [r4, #12]
 80034ea:	782a      	ldrb	r2, [r5, #0]
 80034ec:	1c6e      	adds	r6, r5, #1
 80034ee:	3a30      	subs	r2, #48	; 0x30
 80034f0:	2a09      	cmp	r2, #9
 80034f2:	d94e      	bls.n	8003592 <_svfiprintf_r+0x17a>
 80034f4:	2900      	cmp	r1, #0
 80034f6:	d111      	bne.n	800351c <_svfiprintf_r+0x104>
 80034f8:	e017      	b.n	800352a <_svfiprintf_r+0x112>
 80034fa:	3501      	adds	r5, #1
 80034fc:	e7b0      	b.n	8003460 <_svfiprintf_r+0x48>
 80034fe:	4b41      	ldr	r3, [pc, #260]	; (8003604 <_svfiprintf_r+0x1ec>)
 8003500:	6822      	ldr	r2, [r4, #0]
 8003502:	1ac0      	subs	r0, r0, r3
 8003504:	2301      	movs	r3, #1
 8003506:	4083      	lsls	r3, r0
 8003508:	4313      	orrs	r3, r2
 800350a:	002e      	movs	r6, r5
 800350c:	6023      	str	r3, [r4, #0]
 800350e:	e7ce      	b.n	80034ae <_svfiprintf_r+0x96>
 8003510:	9b07      	ldr	r3, [sp, #28]
 8003512:	1d19      	adds	r1, r3, #4
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	9107      	str	r1, [sp, #28]
 8003518:	2b00      	cmp	r3, #0
 800351a:	db01      	blt.n	8003520 <_svfiprintf_r+0x108>
 800351c:	930b      	str	r3, [sp, #44]	; 0x2c
 800351e:	e004      	b.n	800352a <_svfiprintf_r+0x112>
 8003520:	425b      	negs	r3, r3
 8003522:	60e3      	str	r3, [r4, #12]
 8003524:	2302      	movs	r3, #2
 8003526:	4313      	orrs	r3, r2
 8003528:	6023      	str	r3, [r4, #0]
 800352a:	782b      	ldrb	r3, [r5, #0]
 800352c:	2b2e      	cmp	r3, #46	; 0x2e
 800352e:	d10a      	bne.n	8003546 <_svfiprintf_r+0x12e>
 8003530:	786b      	ldrb	r3, [r5, #1]
 8003532:	2b2a      	cmp	r3, #42	; 0x2a
 8003534:	d135      	bne.n	80035a2 <_svfiprintf_r+0x18a>
 8003536:	9b07      	ldr	r3, [sp, #28]
 8003538:	3502      	adds	r5, #2
 800353a:	1d1a      	adds	r2, r3, #4
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	9207      	str	r2, [sp, #28]
 8003540:	2b00      	cmp	r3, #0
 8003542:	db2b      	blt.n	800359c <_svfiprintf_r+0x184>
 8003544:	9309      	str	r3, [sp, #36]	; 0x24
 8003546:	4e30      	ldr	r6, [pc, #192]	; (8003608 <_svfiprintf_r+0x1f0>)
 8003548:	2203      	movs	r2, #3
 800354a:	0030      	movs	r0, r6
 800354c:	7829      	ldrb	r1, [r5, #0]
 800354e:	f000 f9e5 	bl	800391c <memchr>
 8003552:	2800      	cmp	r0, #0
 8003554:	d006      	beq.n	8003564 <_svfiprintf_r+0x14c>
 8003556:	2340      	movs	r3, #64	; 0x40
 8003558:	1b80      	subs	r0, r0, r6
 800355a:	4083      	lsls	r3, r0
 800355c:	6822      	ldr	r2, [r4, #0]
 800355e:	3501      	adds	r5, #1
 8003560:	4313      	orrs	r3, r2
 8003562:	6023      	str	r3, [r4, #0]
 8003564:	7829      	ldrb	r1, [r5, #0]
 8003566:	2206      	movs	r2, #6
 8003568:	4828      	ldr	r0, [pc, #160]	; (800360c <_svfiprintf_r+0x1f4>)
 800356a:	1c6e      	adds	r6, r5, #1
 800356c:	7621      	strb	r1, [r4, #24]
 800356e:	f000 f9d5 	bl	800391c <memchr>
 8003572:	2800      	cmp	r0, #0
 8003574:	d03c      	beq.n	80035f0 <_svfiprintf_r+0x1d8>
 8003576:	4b26      	ldr	r3, [pc, #152]	; (8003610 <_svfiprintf_r+0x1f8>)
 8003578:	2b00      	cmp	r3, #0
 800357a:	d125      	bne.n	80035c8 <_svfiprintf_r+0x1b0>
 800357c:	2207      	movs	r2, #7
 800357e:	9b07      	ldr	r3, [sp, #28]
 8003580:	3307      	adds	r3, #7
 8003582:	4393      	bics	r3, r2
 8003584:	3308      	adds	r3, #8
 8003586:	9307      	str	r3, [sp, #28]
 8003588:	6963      	ldr	r3, [r4, #20]
 800358a:	9a04      	ldr	r2, [sp, #16]
 800358c:	189b      	adds	r3, r3, r2
 800358e:	6163      	str	r3, [r4, #20]
 8003590:	e765      	b.n	800345e <_svfiprintf_r+0x46>
 8003592:	4343      	muls	r3, r0
 8003594:	0035      	movs	r5, r6
 8003596:	2101      	movs	r1, #1
 8003598:	189b      	adds	r3, r3, r2
 800359a:	e7a6      	b.n	80034ea <_svfiprintf_r+0xd2>
 800359c:	2301      	movs	r3, #1
 800359e:	425b      	negs	r3, r3
 80035a0:	e7d0      	b.n	8003544 <_svfiprintf_r+0x12c>
 80035a2:	2300      	movs	r3, #0
 80035a4:	200a      	movs	r0, #10
 80035a6:	001a      	movs	r2, r3
 80035a8:	3501      	adds	r5, #1
 80035aa:	6063      	str	r3, [r4, #4]
 80035ac:	7829      	ldrb	r1, [r5, #0]
 80035ae:	1c6e      	adds	r6, r5, #1
 80035b0:	3930      	subs	r1, #48	; 0x30
 80035b2:	2909      	cmp	r1, #9
 80035b4:	d903      	bls.n	80035be <_svfiprintf_r+0x1a6>
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0c5      	beq.n	8003546 <_svfiprintf_r+0x12e>
 80035ba:	9209      	str	r2, [sp, #36]	; 0x24
 80035bc:	e7c3      	b.n	8003546 <_svfiprintf_r+0x12e>
 80035be:	4342      	muls	r2, r0
 80035c0:	0035      	movs	r5, r6
 80035c2:	2301      	movs	r3, #1
 80035c4:	1852      	adds	r2, r2, r1
 80035c6:	e7f1      	b.n	80035ac <_svfiprintf_r+0x194>
 80035c8:	ab07      	add	r3, sp, #28
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	003a      	movs	r2, r7
 80035ce:	0021      	movs	r1, r4
 80035d0:	4b10      	ldr	r3, [pc, #64]	; (8003614 <_svfiprintf_r+0x1fc>)
 80035d2:	9803      	ldr	r0, [sp, #12]
 80035d4:	e000      	b.n	80035d8 <_svfiprintf_r+0x1c0>
 80035d6:	bf00      	nop
 80035d8:	9004      	str	r0, [sp, #16]
 80035da:	9b04      	ldr	r3, [sp, #16]
 80035dc:	3301      	adds	r3, #1
 80035de:	d1d3      	bne.n	8003588 <_svfiprintf_r+0x170>
 80035e0:	89bb      	ldrh	r3, [r7, #12]
 80035e2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80035e4:	065b      	lsls	r3, r3, #25
 80035e6:	d400      	bmi.n	80035ea <_svfiprintf_r+0x1d2>
 80035e8:	e72d      	b.n	8003446 <_svfiprintf_r+0x2e>
 80035ea:	2001      	movs	r0, #1
 80035ec:	4240      	negs	r0, r0
 80035ee:	e72a      	b.n	8003446 <_svfiprintf_r+0x2e>
 80035f0:	ab07      	add	r3, sp, #28
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	003a      	movs	r2, r7
 80035f6:	0021      	movs	r1, r4
 80035f8:	4b06      	ldr	r3, [pc, #24]	; (8003614 <_svfiprintf_r+0x1fc>)
 80035fa:	9803      	ldr	r0, [sp, #12]
 80035fc:	f000 f87c 	bl	80036f8 <_printf_i>
 8003600:	e7ea      	b.n	80035d8 <_svfiprintf_r+0x1c0>
 8003602:	46c0      	nop			; (mov r8, r8)
 8003604:	08003c74 	.word	0x08003c74
 8003608:	08003c7a 	.word	0x08003c7a
 800360c:	08003c7e 	.word	0x08003c7e
 8003610:	00000000 	.word	0x00000000
 8003614:	08003355 	.word	0x08003355

08003618 <_printf_common>:
 8003618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800361a:	0015      	movs	r5, r2
 800361c:	9301      	str	r3, [sp, #4]
 800361e:	688a      	ldr	r2, [r1, #8]
 8003620:	690b      	ldr	r3, [r1, #16]
 8003622:	000c      	movs	r4, r1
 8003624:	9000      	str	r0, [sp, #0]
 8003626:	4293      	cmp	r3, r2
 8003628:	da00      	bge.n	800362c <_printf_common+0x14>
 800362a:	0013      	movs	r3, r2
 800362c:	0022      	movs	r2, r4
 800362e:	602b      	str	r3, [r5, #0]
 8003630:	3243      	adds	r2, #67	; 0x43
 8003632:	7812      	ldrb	r2, [r2, #0]
 8003634:	2a00      	cmp	r2, #0
 8003636:	d001      	beq.n	800363c <_printf_common+0x24>
 8003638:	3301      	adds	r3, #1
 800363a:	602b      	str	r3, [r5, #0]
 800363c:	6823      	ldr	r3, [r4, #0]
 800363e:	069b      	lsls	r3, r3, #26
 8003640:	d502      	bpl.n	8003648 <_printf_common+0x30>
 8003642:	682b      	ldr	r3, [r5, #0]
 8003644:	3302      	adds	r3, #2
 8003646:	602b      	str	r3, [r5, #0]
 8003648:	6822      	ldr	r2, [r4, #0]
 800364a:	2306      	movs	r3, #6
 800364c:	0017      	movs	r7, r2
 800364e:	401f      	ands	r7, r3
 8003650:	421a      	tst	r2, r3
 8003652:	d027      	beq.n	80036a4 <_printf_common+0x8c>
 8003654:	0023      	movs	r3, r4
 8003656:	3343      	adds	r3, #67	; 0x43
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	1e5a      	subs	r2, r3, #1
 800365c:	4193      	sbcs	r3, r2
 800365e:	6822      	ldr	r2, [r4, #0]
 8003660:	0692      	lsls	r2, r2, #26
 8003662:	d430      	bmi.n	80036c6 <_printf_common+0xae>
 8003664:	0022      	movs	r2, r4
 8003666:	9901      	ldr	r1, [sp, #4]
 8003668:	9800      	ldr	r0, [sp, #0]
 800366a:	9e08      	ldr	r6, [sp, #32]
 800366c:	3243      	adds	r2, #67	; 0x43
 800366e:	47b0      	blx	r6
 8003670:	1c43      	adds	r3, r0, #1
 8003672:	d025      	beq.n	80036c0 <_printf_common+0xa8>
 8003674:	2306      	movs	r3, #6
 8003676:	6820      	ldr	r0, [r4, #0]
 8003678:	682a      	ldr	r2, [r5, #0]
 800367a:	68e1      	ldr	r1, [r4, #12]
 800367c:	2500      	movs	r5, #0
 800367e:	4003      	ands	r3, r0
 8003680:	2b04      	cmp	r3, #4
 8003682:	d103      	bne.n	800368c <_printf_common+0x74>
 8003684:	1a8d      	subs	r5, r1, r2
 8003686:	43eb      	mvns	r3, r5
 8003688:	17db      	asrs	r3, r3, #31
 800368a:	401d      	ands	r5, r3
 800368c:	68a3      	ldr	r3, [r4, #8]
 800368e:	6922      	ldr	r2, [r4, #16]
 8003690:	4293      	cmp	r3, r2
 8003692:	dd01      	ble.n	8003698 <_printf_common+0x80>
 8003694:	1a9b      	subs	r3, r3, r2
 8003696:	18ed      	adds	r5, r5, r3
 8003698:	2700      	movs	r7, #0
 800369a:	42bd      	cmp	r5, r7
 800369c:	d120      	bne.n	80036e0 <_printf_common+0xc8>
 800369e:	2000      	movs	r0, #0
 80036a0:	e010      	b.n	80036c4 <_printf_common+0xac>
 80036a2:	3701      	adds	r7, #1
 80036a4:	68e3      	ldr	r3, [r4, #12]
 80036a6:	682a      	ldr	r2, [r5, #0]
 80036a8:	1a9b      	subs	r3, r3, r2
 80036aa:	42bb      	cmp	r3, r7
 80036ac:	ddd2      	ble.n	8003654 <_printf_common+0x3c>
 80036ae:	0022      	movs	r2, r4
 80036b0:	2301      	movs	r3, #1
 80036b2:	9901      	ldr	r1, [sp, #4]
 80036b4:	9800      	ldr	r0, [sp, #0]
 80036b6:	9e08      	ldr	r6, [sp, #32]
 80036b8:	3219      	adds	r2, #25
 80036ba:	47b0      	blx	r6
 80036bc:	1c43      	adds	r3, r0, #1
 80036be:	d1f0      	bne.n	80036a2 <_printf_common+0x8a>
 80036c0:	2001      	movs	r0, #1
 80036c2:	4240      	negs	r0, r0
 80036c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80036c6:	2030      	movs	r0, #48	; 0x30
 80036c8:	18e1      	adds	r1, r4, r3
 80036ca:	3143      	adds	r1, #67	; 0x43
 80036cc:	7008      	strb	r0, [r1, #0]
 80036ce:	0021      	movs	r1, r4
 80036d0:	1c5a      	adds	r2, r3, #1
 80036d2:	3145      	adds	r1, #69	; 0x45
 80036d4:	7809      	ldrb	r1, [r1, #0]
 80036d6:	18a2      	adds	r2, r4, r2
 80036d8:	3243      	adds	r2, #67	; 0x43
 80036da:	3302      	adds	r3, #2
 80036dc:	7011      	strb	r1, [r2, #0]
 80036de:	e7c1      	b.n	8003664 <_printf_common+0x4c>
 80036e0:	0022      	movs	r2, r4
 80036e2:	2301      	movs	r3, #1
 80036e4:	9901      	ldr	r1, [sp, #4]
 80036e6:	9800      	ldr	r0, [sp, #0]
 80036e8:	9e08      	ldr	r6, [sp, #32]
 80036ea:	321a      	adds	r2, #26
 80036ec:	47b0      	blx	r6
 80036ee:	1c43      	adds	r3, r0, #1
 80036f0:	d0e6      	beq.n	80036c0 <_printf_common+0xa8>
 80036f2:	3701      	adds	r7, #1
 80036f4:	e7d1      	b.n	800369a <_printf_common+0x82>
	...

080036f8 <_printf_i>:
 80036f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036fa:	b08b      	sub	sp, #44	; 0x2c
 80036fc:	9206      	str	r2, [sp, #24]
 80036fe:	000a      	movs	r2, r1
 8003700:	3243      	adds	r2, #67	; 0x43
 8003702:	9307      	str	r3, [sp, #28]
 8003704:	9005      	str	r0, [sp, #20]
 8003706:	9204      	str	r2, [sp, #16]
 8003708:	7e0a      	ldrb	r2, [r1, #24]
 800370a:	000c      	movs	r4, r1
 800370c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800370e:	2a78      	cmp	r2, #120	; 0x78
 8003710:	d807      	bhi.n	8003722 <_printf_i+0x2a>
 8003712:	2a62      	cmp	r2, #98	; 0x62
 8003714:	d809      	bhi.n	800372a <_printf_i+0x32>
 8003716:	2a00      	cmp	r2, #0
 8003718:	d100      	bne.n	800371c <_printf_i+0x24>
 800371a:	e0c1      	b.n	80038a0 <_printf_i+0x1a8>
 800371c:	2a58      	cmp	r2, #88	; 0x58
 800371e:	d100      	bne.n	8003722 <_printf_i+0x2a>
 8003720:	e08c      	b.n	800383c <_printf_i+0x144>
 8003722:	0026      	movs	r6, r4
 8003724:	3642      	adds	r6, #66	; 0x42
 8003726:	7032      	strb	r2, [r6, #0]
 8003728:	e022      	b.n	8003770 <_printf_i+0x78>
 800372a:	0010      	movs	r0, r2
 800372c:	3863      	subs	r0, #99	; 0x63
 800372e:	2815      	cmp	r0, #21
 8003730:	d8f7      	bhi.n	8003722 <_printf_i+0x2a>
 8003732:	f7fc fcf1 	bl	8000118 <__gnu_thumb1_case_shi>
 8003736:	0016      	.short	0x0016
 8003738:	fff6001f 	.word	0xfff6001f
 800373c:	fff6fff6 	.word	0xfff6fff6
 8003740:	001ffff6 	.word	0x001ffff6
 8003744:	fff6fff6 	.word	0xfff6fff6
 8003748:	fff6fff6 	.word	0xfff6fff6
 800374c:	003600a8 	.word	0x003600a8
 8003750:	fff6009a 	.word	0xfff6009a
 8003754:	00b9fff6 	.word	0x00b9fff6
 8003758:	0036fff6 	.word	0x0036fff6
 800375c:	fff6fff6 	.word	0xfff6fff6
 8003760:	009e      	.short	0x009e
 8003762:	0026      	movs	r6, r4
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	3642      	adds	r6, #66	; 0x42
 8003768:	1d11      	adds	r1, r2, #4
 800376a:	6019      	str	r1, [r3, #0]
 800376c:	6813      	ldr	r3, [r2, #0]
 800376e:	7033      	strb	r3, [r6, #0]
 8003770:	2301      	movs	r3, #1
 8003772:	e0a7      	b.n	80038c4 <_printf_i+0x1cc>
 8003774:	6808      	ldr	r0, [r1, #0]
 8003776:	6819      	ldr	r1, [r3, #0]
 8003778:	1d0a      	adds	r2, r1, #4
 800377a:	0605      	lsls	r5, r0, #24
 800377c:	d50b      	bpl.n	8003796 <_printf_i+0x9e>
 800377e:	680d      	ldr	r5, [r1, #0]
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	2d00      	cmp	r5, #0
 8003784:	da03      	bge.n	800378e <_printf_i+0x96>
 8003786:	232d      	movs	r3, #45	; 0x2d
 8003788:	9a04      	ldr	r2, [sp, #16]
 800378a:	426d      	negs	r5, r5
 800378c:	7013      	strb	r3, [r2, #0]
 800378e:	4b61      	ldr	r3, [pc, #388]	; (8003914 <_printf_i+0x21c>)
 8003790:	270a      	movs	r7, #10
 8003792:	9303      	str	r3, [sp, #12]
 8003794:	e01b      	b.n	80037ce <_printf_i+0xd6>
 8003796:	680d      	ldr	r5, [r1, #0]
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	0641      	lsls	r1, r0, #25
 800379c:	d5f1      	bpl.n	8003782 <_printf_i+0x8a>
 800379e:	b22d      	sxth	r5, r5
 80037a0:	e7ef      	b.n	8003782 <_printf_i+0x8a>
 80037a2:	680d      	ldr	r5, [r1, #0]
 80037a4:	6819      	ldr	r1, [r3, #0]
 80037a6:	1d08      	adds	r0, r1, #4
 80037a8:	6018      	str	r0, [r3, #0]
 80037aa:	062e      	lsls	r6, r5, #24
 80037ac:	d501      	bpl.n	80037b2 <_printf_i+0xba>
 80037ae:	680d      	ldr	r5, [r1, #0]
 80037b0:	e003      	b.n	80037ba <_printf_i+0xc2>
 80037b2:	066d      	lsls	r5, r5, #25
 80037b4:	d5fb      	bpl.n	80037ae <_printf_i+0xb6>
 80037b6:	680d      	ldr	r5, [r1, #0]
 80037b8:	b2ad      	uxth	r5, r5
 80037ba:	4b56      	ldr	r3, [pc, #344]	; (8003914 <_printf_i+0x21c>)
 80037bc:	2708      	movs	r7, #8
 80037be:	9303      	str	r3, [sp, #12]
 80037c0:	2a6f      	cmp	r2, #111	; 0x6f
 80037c2:	d000      	beq.n	80037c6 <_printf_i+0xce>
 80037c4:	3702      	adds	r7, #2
 80037c6:	0023      	movs	r3, r4
 80037c8:	2200      	movs	r2, #0
 80037ca:	3343      	adds	r3, #67	; 0x43
 80037cc:	701a      	strb	r2, [r3, #0]
 80037ce:	6863      	ldr	r3, [r4, #4]
 80037d0:	60a3      	str	r3, [r4, #8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	db03      	blt.n	80037de <_printf_i+0xe6>
 80037d6:	2204      	movs	r2, #4
 80037d8:	6821      	ldr	r1, [r4, #0]
 80037da:	4391      	bics	r1, r2
 80037dc:	6021      	str	r1, [r4, #0]
 80037de:	2d00      	cmp	r5, #0
 80037e0:	d102      	bne.n	80037e8 <_printf_i+0xf0>
 80037e2:	9e04      	ldr	r6, [sp, #16]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00c      	beq.n	8003802 <_printf_i+0x10a>
 80037e8:	9e04      	ldr	r6, [sp, #16]
 80037ea:	0028      	movs	r0, r5
 80037ec:	0039      	movs	r1, r7
 80037ee:	f7fc fd23 	bl	8000238 <__aeabi_uidivmod>
 80037f2:	9b03      	ldr	r3, [sp, #12]
 80037f4:	3e01      	subs	r6, #1
 80037f6:	5c5b      	ldrb	r3, [r3, r1]
 80037f8:	7033      	strb	r3, [r6, #0]
 80037fa:	002b      	movs	r3, r5
 80037fc:	0005      	movs	r5, r0
 80037fe:	429f      	cmp	r7, r3
 8003800:	d9f3      	bls.n	80037ea <_printf_i+0xf2>
 8003802:	2f08      	cmp	r7, #8
 8003804:	d109      	bne.n	800381a <_printf_i+0x122>
 8003806:	6823      	ldr	r3, [r4, #0]
 8003808:	07db      	lsls	r3, r3, #31
 800380a:	d506      	bpl.n	800381a <_printf_i+0x122>
 800380c:	6863      	ldr	r3, [r4, #4]
 800380e:	6922      	ldr	r2, [r4, #16]
 8003810:	4293      	cmp	r3, r2
 8003812:	dc02      	bgt.n	800381a <_printf_i+0x122>
 8003814:	2330      	movs	r3, #48	; 0x30
 8003816:	3e01      	subs	r6, #1
 8003818:	7033      	strb	r3, [r6, #0]
 800381a:	9b04      	ldr	r3, [sp, #16]
 800381c:	1b9b      	subs	r3, r3, r6
 800381e:	6123      	str	r3, [r4, #16]
 8003820:	9b07      	ldr	r3, [sp, #28]
 8003822:	0021      	movs	r1, r4
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	9805      	ldr	r0, [sp, #20]
 8003828:	9b06      	ldr	r3, [sp, #24]
 800382a:	aa09      	add	r2, sp, #36	; 0x24
 800382c:	f7ff fef4 	bl	8003618 <_printf_common>
 8003830:	1c43      	adds	r3, r0, #1
 8003832:	d14c      	bne.n	80038ce <_printf_i+0x1d6>
 8003834:	2001      	movs	r0, #1
 8003836:	4240      	negs	r0, r0
 8003838:	b00b      	add	sp, #44	; 0x2c
 800383a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800383c:	3145      	adds	r1, #69	; 0x45
 800383e:	700a      	strb	r2, [r1, #0]
 8003840:	4a34      	ldr	r2, [pc, #208]	; (8003914 <_printf_i+0x21c>)
 8003842:	9203      	str	r2, [sp, #12]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	6821      	ldr	r1, [r4, #0]
 8003848:	ca20      	ldmia	r2!, {r5}
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	0608      	lsls	r0, r1, #24
 800384e:	d516      	bpl.n	800387e <_printf_i+0x186>
 8003850:	07cb      	lsls	r3, r1, #31
 8003852:	d502      	bpl.n	800385a <_printf_i+0x162>
 8003854:	2320      	movs	r3, #32
 8003856:	4319      	orrs	r1, r3
 8003858:	6021      	str	r1, [r4, #0]
 800385a:	2710      	movs	r7, #16
 800385c:	2d00      	cmp	r5, #0
 800385e:	d1b2      	bne.n	80037c6 <_printf_i+0xce>
 8003860:	2320      	movs	r3, #32
 8003862:	6822      	ldr	r2, [r4, #0]
 8003864:	439a      	bics	r2, r3
 8003866:	6022      	str	r2, [r4, #0]
 8003868:	e7ad      	b.n	80037c6 <_printf_i+0xce>
 800386a:	2220      	movs	r2, #32
 800386c:	6809      	ldr	r1, [r1, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	6022      	str	r2, [r4, #0]
 8003872:	0022      	movs	r2, r4
 8003874:	2178      	movs	r1, #120	; 0x78
 8003876:	3245      	adds	r2, #69	; 0x45
 8003878:	7011      	strb	r1, [r2, #0]
 800387a:	4a27      	ldr	r2, [pc, #156]	; (8003918 <_printf_i+0x220>)
 800387c:	e7e1      	b.n	8003842 <_printf_i+0x14a>
 800387e:	0648      	lsls	r0, r1, #25
 8003880:	d5e6      	bpl.n	8003850 <_printf_i+0x158>
 8003882:	b2ad      	uxth	r5, r5
 8003884:	e7e4      	b.n	8003850 <_printf_i+0x158>
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	680d      	ldr	r5, [r1, #0]
 800388a:	1d10      	adds	r0, r2, #4
 800388c:	6949      	ldr	r1, [r1, #20]
 800388e:	6018      	str	r0, [r3, #0]
 8003890:	6813      	ldr	r3, [r2, #0]
 8003892:	062e      	lsls	r6, r5, #24
 8003894:	d501      	bpl.n	800389a <_printf_i+0x1a2>
 8003896:	6019      	str	r1, [r3, #0]
 8003898:	e002      	b.n	80038a0 <_printf_i+0x1a8>
 800389a:	066d      	lsls	r5, r5, #25
 800389c:	d5fb      	bpl.n	8003896 <_printf_i+0x19e>
 800389e:	8019      	strh	r1, [r3, #0]
 80038a0:	2300      	movs	r3, #0
 80038a2:	9e04      	ldr	r6, [sp, #16]
 80038a4:	6123      	str	r3, [r4, #16]
 80038a6:	e7bb      	b.n	8003820 <_printf_i+0x128>
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	1d11      	adds	r1, r2, #4
 80038ac:	6019      	str	r1, [r3, #0]
 80038ae:	6816      	ldr	r6, [r2, #0]
 80038b0:	2100      	movs	r1, #0
 80038b2:	0030      	movs	r0, r6
 80038b4:	6862      	ldr	r2, [r4, #4]
 80038b6:	f000 f831 	bl	800391c <memchr>
 80038ba:	2800      	cmp	r0, #0
 80038bc:	d001      	beq.n	80038c2 <_printf_i+0x1ca>
 80038be:	1b80      	subs	r0, r0, r6
 80038c0:	6060      	str	r0, [r4, #4]
 80038c2:	6863      	ldr	r3, [r4, #4]
 80038c4:	6123      	str	r3, [r4, #16]
 80038c6:	2300      	movs	r3, #0
 80038c8:	9a04      	ldr	r2, [sp, #16]
 80038ca:	7013      	strb	r3, [r2, #0]
 80038cc:	e7a8      	b.n	8003820 <_printf_i+0x128>
 80038ce:	6923      	ldr	r3, [r4, #16]
 80038d0:	0032      	movs	r2, r6
 80038d2:	9906      	ldr	r1, [sp, #24]
 80038d4:	9805      	ldr	r0, [sp, #20]
 80038d6:	9d07      	ldr	r5, [sp, #28]
 80038d8:	47a8      	blx	r5
 80038da:	1c43      	adds	r3, r0, #1
 80038dc:	d0aa      	beq.n	8003834 <_printf_i+0x13c>
 80038de:	6823      	ldr	r3, [r4, #0]
 80038e0:	079b      	lsls	r3, r3, #30
 80038e2:	d415      	bmi.n	8003910 <_printf_i+0x218>
 80038e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038e6:	68e0      	ldr	r0, [r4, #12]
 80038e8:	4298      	cmp	r0, r3
 80038ea:	daa5      	bge.n	8003838 <_printf_i+0x140>
 80038ec:	0018      	movs	r0, r3
 80038ee:	e7a3      	b.n	8003838 <_printf_i+0x140>
 80038f0:	0022      	movs	r2, r4
 80038f2:	2301      	movs	r3, #1
 80038f4:	9906      	ldr	r1, [sp, #24]
 80038f6:	9805      	ldr	r0, [sp, #20]
 80038f8:	9e07      	ldr	r6, [sp, #28]
 80038fa:	3219      	adds	r2, #25
 80038fc:	47b0      	blx	r6
 80038fe:	1c43      	adds	r3, r0, #1
 8003900:	d098      	beq.n	8003834 <_printf_i+0x13c>
 8003902:	3501      	adds	r5, #1
 8003904:	68e3      	ldr	r3, [r4, #12]
 8003906:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003908:	1a9b      	subs	r3, r3, r2
 800390a:	42ab      	cmp	r3, r5
 800390c:	dcf0      	bgt.n	80038f0 <_printf_i+0x1f8>
 800390e:	e7e9      	b.n	80038e4 <_printf_i+0x1ec>
 8003910:	2500      	movs	r5, #0
 8003912:	e7f7      	b.n	8003904 <_printf_i+0x20c>
 8003914:	08003c85 	.word	0x08003c85
 8003918:	08003c96 	.word	0x08003c96

0800391c <memchr>:
 800391c:	b2c9      	uxtb	r1, r1
 800391e:	1882      	adds	r2, r0, r2
 8003920:	4290      	cmp	r0, r2
 8003922:	d101      	bne.n	8003928 <memchr+0xc>
 8003924:	2000      	movs	r0, #0
 8003926:	4770      	bx	lr
 8003928:	7803      	ldrb	r3, [r0, #0]
 800392a:	428b      	cmp	r3, r1
 800392c:	d0fb      	beq.n	8003926 <memchr+0xa>
 800392e:	3001      	adds	r0, #1
 8003930:	e7f6      	b.n	8003920 <memchr+0x4>

08003932 <memcpy>:
 8003932:	2300      	movs	r3, #0
 8003934:	b510      	push	{r4, lr}
 8003936:	429a      	cmp	r2, r3
 8003938:	d100      	bne.n	800393c <memcpy+0xa>
 800393a:	bd10      	pop	{r4, pc}
 800393c:	5ccc      	ldrb	r4, [r1, r3]
 800393e:	54c4      	strb	r4, [r0, r3]
 8003940:	3301      	adds	r3, #1
 8003942:	e7f8      	b.n	8003936 <memcpy+0x4>

08003944 <memmove>:
 8003944:	b510      	push	{r4, lr}
 8003946:	4288      	cmp	r0, r1
 8003948:	d902      	bls.n	8003950 <memmove+0xc>
 800394a:	188b      	adds	r3, r1, r2
 800394c:	4298      	cmp	r0, r3
 800394e:	d303      	bcc.n	8003958 <memmove+0x14>
 8003950:	2300      	movs	r3, #0
 8003952:	e007      	b.n	8003964 <memmove+0x20>
 8003954:	5c8b      	ldrb	r3, [r1, r2]
 8003956:	5483      	strb	r3, [r0, r2]
 8003958:	3a01      	subs	r2, #1
 800395a:	d2fb      	bcs.n	8003954 <memmove+0x10>
 800395c:	bd10      	pop	{r4, pc}
 800395e:	5ccc      	ldrb	r4, [r1, r3]
 8003960:	54c4      	strb	r4, [r0, r3]
 8003962:	3301      	adds	r3, #1
 8003964:	429a      	cmp	r2, r3
 8003966:	d1fa      	bne.n	800395e <memmove+0x1a>
 8003968:	e7f8      	b.n	800395c <memmove+0x18>
	...

0800396c <_free_r>:
 800396c:	b570      	push	{r4, r5, r6, lr}
 800396e:	0005      	movs	r5, r0
 8003970:	2900      	cmp	r1, #0
 8003972:	d010      	beq.n	8003996 <_free_r+0x2a>
 8003974:	1f0c      	subs	r4, r1, #4
 8003976:	6823      	ldr	r3, [r4, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	da00      	bge.n	800397e <_free_r+0x12>
 800397c:	18e4      	adds	r4, r4, r3
 800397e:	0028      	movs	r0, r5
 8003980:	f000 f918 	bl	8003bb4 <__malloc_lock>
 8003984:	4a1d      	ldr	r2, [pc, #116]	; (80039fc <_free_r+0x90>)
 8003986:	6813      	ldr	r3, [r2, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d105      	bne.n	8003998 <_free_r+0x2c>
 800398c:	6063      	str	r3, [r4, #4]
 800398e:	6014      	str	r4, [r2, #0]
 8003990:	0028      	movs	r0, r5
 8003992:	f000 f917 	bl	8003bc4 <__malloc_unlock>
 8003996:	bd70      	pop	{r4, r5, r6, pc}
 8003998:	42a3      	cmp	r3, r4
 800399a:	d908      	bls.n	80039ae <_free_r+0x42>
 800399c:	6821      	ldr	r1, [r4, #0]
 800399e:	1860      	adds	r0, r4, r1
 80039a0:	4283      	cmp	r3, r0
 80039a2:	d1f3      	bne.n	800398c <_free_r+0x20>
 80039a4:	6818      	ldr	r0, [r3, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	1841      	adds	r1, r0, r1
 80039aa:	6021      	str	r1, [r4, #0]
 80039ac:	e7ee      	b.n	800398c <_free_r+0x20>
 80039ae:	001a      	movs	r2, r3
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <_free_r+0x4e>
 80039b6:	42a3      	cmp	r3, r4
 80039b8:	d9f9      	bls.n	80039ae <_free_r+0x42>
 80039ba:	6811      	ldr	r1, [r2, #0]
 80039bc:	1850      	adds	r0, r2, r1
 80039be:	42a0      	cmp	r0, r4
 80039c0:	d10b      	bne.n	80039da <_free_r+0x6e>
 80039c2:	6820      	ldr	r0, [r4, #0]
 80039c4:	1809      	adds	r1, r1, r0
 80039c6:	1850      	adds	r0, r2, r1
 80039c8:	6011      	str	r1, [r2, #0]
 80039ca:	4283      	cmp	r3, r0
 80039cc:	d1e0      	bne.n	8003990 <_free_r+0x24>
 80039ce:	6818      	ldr	r0, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	1841      	adds	r1, r0, r1
 80039d4:	6011      	str	r1, [r2, #0]
 80039d6:	6053      	str	r3, [r2, #4]
 80039d8:	e7da      	b.n	8003990 <_free_r+0x24>
 80039da:	42a0      	cmp	r0, r4
 80039dc:	d902      	bls.n	80039e4 <_free_r+0x78>
 80039de:	230c      	movs	r3, #12
 80039e0:	602b      	str	r3, [r5, #0]
 80039e2:	e7d5      	b.n	8003990 <_free_r+0x24>
 80039e4:	6821      	ldr	r1, [r4, #0]
 80039e6:	1860      	adds	r0, r4, r1
 80039e8:	4283      	cmp	r3, r0
 80039ea:	d103      	bne.n	80039f4 <_free_r+0x88>
 80039ec:	6818      	ldr	r0, [r3, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	1841      	adds	r1, r0, r1
 80039f2:	6021      	str	r1, [r4, #0]
 80039f4:	6063      	str	r3, [r4, #4]
 80039f6:	6054      	str	r4, [r2, #4]
 80039f8:	e7ca      	b.n	8003990 <_free_r+0x24>
 80039fa:	46c0      	nop			; (mov r8, r8)
 80039fc:	20000188 	.word	0x20000188

08003a00 <sbrk_aligned>:
 8003a00:	b570      	push	{r4, r5, r6, lr}
 8003a02:	4e0f      	ldr	r6, [pc, #60]	; (8003a40 <sbrk_aligned+0x40>)
 8003a04:	000d      	movs	r5, r1
 8003a06:	6831      	ldr	r1, [r6, #0]
 8003a08:	0004      	movs	r4, r0
 8003a0a:	2900      	cmp	r1, #0
 8003a0c:	d102      	bne.n	8003a14 <sbrk_aligned+0x14>
 8003a0e:	f000 f8bf 	bl	8003b90 <_sbrk_r>
 8003a12:	6030      	str	r0, [r6, #0]
 8003a14:	0029      	movs	r1, r5
 8003a16:	0020      	movs	r0, r4
 8003a18:	f000 f8ba 	bl	8003b90 <_sbrk_r>
 8003a1c:	1c43      	adds	r3, r0, #1
 8003a1e:	d00a      	beq.n	8003a36 <sbrk_aligned+0x36>
 8003a20:	2303      	movs	r3, #3
 8003a22:	1cc5      	adds	r5, r0, #3
 8003a24:	439d      	bics	r5, r3
 8003a26:	42a8      	cmp	r0, r5
 8003a28:	d007      	beq.n	8003a3a <sbrk_aligned+0x3a>
 8003a2a:	1a29      	subs	r1, r5, r0
 8003a2c:	0020      	movs	r0, r4
 8003a2e:	f000 f8af 	bl	8003b90 <_sbrk_r>
 8003a32:	1c43      	adds	r3, r0, #1
 8003a34:	d101      	bne.n	8003a3a <sbrk_aligned+0x3a>
 8003a36:	2501      	movs	r5, #1
 8003a38:	426d      	negs	r5, r5
 8003a3a:	0028      	movs	r0, r5
 8003a3c:	bd70      	pop	{r4, r5, r6, pc}
 8003a3e:	46c0      	nop			; (mov r8, r8)
 8003a40:	2000018c 	.word	0x2000018c

08003a44 <_malloc_r>:
 8003a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a46:	2203      	movs	r2, #3
 8003a48:	1ccb      	adds	r3, r1, #3
 8003a4a:	4393      	bics	r3, r2
 8003a4c:	3308      	adds	r3, #8
 8003a4e:	0006      	movs	r6, r0
 8003a50:	001f      	movs	r7, r3
 8003a52:	2b0c      	cmp	r3, #12
 8003a54:	d232      	bcs.n	8003abc <_malloc_r+0x78>
 8003a56:	270c      	movs	r7, #12
 8003a58:	42b9      	cmp	r1, r7
 8003a5a:	d831      	bhi.n	8003ac0 <_malloc_r+0x7c>
 8003a5c:	0030      	movs	r0, r6
 8003a5e:	f000 f8a9 	bl	8003bb4 <__malloc_lock>
 8003a62:	4d32      	ldr	r5, [pc, #200]	; (8003b2c <_malloc_r+0xe8>)
 8003a64:	682b      	ldr	r3, [r5, #0]
 8003a66:	001c      	movs	r4, r3
 8003a68:	2c00      	cmp	r4, #0
 8003a6a:	d12e      	bne.n	8003aca <_malloc_r+0x86>
 8003a6c:	0039      	movs	r1, r7
 8003a6e:	0030      	movs	r0, r6
 8003a70:	f7ff ffc6 	bl	8003a00 <sbrk_aligned>
 8003a74:	0004      	movs	r4, r0
 8003a76:	1c43      	adds	r3, r0, #1
 8003a78:	d11e      	bne.n	8003ab8 <_malloc_r+0x74>
 8003a7a:	682c      	ldr	r4, [r5, #0]
 8003a7c:	0025      	movs	r5, r4
 8003a7e:	2d00      	cmp	r5, #0
 8003a80:	d14a      	bne.n	8003b18 <_malloc_r+0xd4>
 8003a82:	6823      	ldr	r3, [r4, #0]
 8003a84:	0029      	movs	r1, r5
 8003a86:	18e3      	adds	r3, r4, r3
 8003a88:	0030      	movs	r0, r6
 8003a8a:	9301      	str	r3, [sp, #4]
 8003a8c:	f000 f880 	bl	8003b90 <_sbrk_r>
 8003a90:	9b01      	ldr	r3, [sp, #4]
 8003a92:	4283      	cmp	r3, r0
 8003a94:	d143      	bne.n	8003b1e <_malloc_r+0xda>
 8003a96:	6823      	ldr	r3, [r4, #0]
 8003a98:	3703      	adds	r7, #3
 8003a9a:	1aff      	subs	r7, r7, r3
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	439f      	bics	r7, r3
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	2f0c      	cmp	r7, #12
 8003aa4:	d200      	bcs.n	8003aa8 <_malloc_r+0x64>
 8003aa6:	270c      	movs	r7, #12
 8003aa8:	0039      	movs	r1, r7
 8003aaa:	0030      	movs	r0, r6
 8003aac:	f7ff ffa8 	bl	8003a00 <sbrk_aligned>
 8003ab0:	1c43      	adds	r3, r0, #1
 8003ab2:	d034      	beq.n	8003b1e <_malloc_r+0xda>
 8003ab4:	6823      	ldr	r3, [r4, #0]
 8003ab6:	19df      	adds	r7, r3, r7
 8003ab8:	6027      	str	r7, [r4, #0]
 8003aba:	e013      	b.n	8003ae4 <_malloc_r+0xa0>
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	dacb      	bge.n	8003a58 <_malloc_r+0x14>
 8003ac0:	230c      	movs	r3, #12
 8003ac2:	2500      	movs	r5, #0
 8003ac4:	6033      	str	r3, [r6, #0]
 8003ac6:	0028      	movs	r0, r5
 8003ac8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003aca:	6822      	ldr	r2, [r4, #0]
 8003acc:	1bd1      	subs	r1, r2, r7
 8003ace:	d420      	bmi.n	8003b12 <_malloc_r+0xce>
 8003ad0:	290b      	cmp	r1, #11
 8003ad2:	d917      	bls.n	8003b04 <_malloc_r+0xc0>
 8003ad4:	19e2      	adds	r2, r4, r7
 8003ad6:	6027      	str	r7, [r4, #0]
 8003ad8:	42a3      	cmp	r3, r4
 8003ada:	d111      	bne.n	8003b00 <_malloc_r+0xbc>
 8003adc:	602a      	str	r2, [r5, #0]
 8003ade:	6863      	ldr	r3, [r4, #4]
 8003ae0:	6011      	str	r1, [r2, #0]
 8003ae2:	6053      	str	r3, [r2, #4]
 8003ae4:	0030      	movs	r0, r6
 8003ae6:	0025      	movs	r5, r4
 8003ae8:	f000 f86c 	bl	8003bc4 <__malloc_unlock>
 8003aec:	2207      	movs	r2, #7
 8003aee:	350b      	adds	r5, #11
 8003af0:	1d23      	adds	r3, r4, #4
 8003af2:	4395      	bics	r5, r2
 8003af4:	1aea      	subs	r2, r5, r3
 8003af6:	429d      	cmp	r5, r3
 8003af8:	d0e5      	beq.n	8003ac6 <_malloc_r+0x82>
 8003afa:	1b5b      	subs	r3, r3, r5
 8003afc:	50a3      	str	r3, [r4, r2]
 8003afe:	e7e2      	b.n	8003ac6 <_malloc_r+0x82>
 8003b00:	605a      	str	r2, [r3, #4]
 8003b02:	e7ec      	b.n	8003ade <_malloc_r+0x9a>
 8003b04:	6862      	ldr	r2, [r4, #4]
 8003b06:	42a3      	cmp	r3, r4
 8003b08:	d101      	bne.n	8003b0e <_malloc_r+0xca>
 8003b0a:	602a      	str	r2, [r5, #0]
 8003b0c:	e7ea      	b.n	8003ae4 <_malloc_r+0xa0>
 8003b0e:	605a      	str	r2, [r3, #4]
 8003b10:	e7e8      	b.n	8003ae4 <_malloc_r+0xa0>
 8003b12:	0023      	movs	r3, r4
 8003b14:	6864      	ldr	r4, [r4, #4]
 8003b16:	e7a7      	b.n	8003a68 <_malloc_r+0x24>
 8003b18:	002c      	movs	r4, r5
 8003b1a:	686d      	ldr	r5, [r5, #4]
 8003b1c:	e7af      	b.n	8003a7e <_malloc_r+0x3a>
 8003b1e:	230c      	movs	r3, #12
 8003b20:	0030      	movs	r0, r6
 8003b22:	6033      	str	r3, [r6, #0]
 8003b24:	f000 f84e 	bl	8003bc4 <__malloc_unlock>
 8003b28:	e7cd      	b.n	8003ac6 <_malloc_r+0x82>
 8003b2a:	46c0      	nop			; (mov r8, r8)
 8003b2c:	20000188 	.word	0x20000188

08003b30 <_realloc_r>:
 8003b30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b32:	0007      	movs	r7, r0
 8003b34:	000e      	movs	r6, r1
 8003b36:	0014      	movs	r4, r2
 8003b38:	2900      	cmp	r1, #0
 8003b3a:	d105      	bne.n	8003b48 <_realloc_r+0x18>
 8003b3c:	0011      	movs	r1, r2
 8003b3e:	f7ff ff81 	bl	8003a44 <_malloc_r>
 8003b42:	0005      	movs	r5, r0
 8003b44:	0028      	movs	r0, r5
 8003b46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b48:	2a00      	cmp	r2, #0
 8003b4a:	d103      	bne.n	8003b54 <_realloc_r+0x24>
 8003b4c:	f7ff ff0e 	bl	800396c <_free_r>
 8003b50:	0025      	movs	r5, r4
 8003b52:	e7f7      	b.n	8003b44 <_realloc_r+0x14>
 8003b54:	f000 f83e 	bl	8003bd4 <_malloc_usable_size_r>
 8003b58:	9001      	str	r0, [sp, #4]
 8003b5a:	4284      	cmp	r4, r0
 8003b5c:	d803      	bhi.n	8003b66 <_realloc_r+0x36>
 8003b5e:	0035      	movs	r5, r6
 8003b60:	0843      	lsrs	r3, r0, #1
 8003b62:	42a3      	cmp	r3, r4
 8003b64:	d3ee      	bcc.n	8003b44 <_realloc_r+0x14>
 8003b66:	0021      	movs	r1, r4
 8003b68:	0038      	movs	r0, r7
 8003b6a:	f7ff ff6b 	bl	8003a44 <_malloc_r>
 8003b6e:	1e05      	subs	r5, r0, #0
 8003b70:	d0e8      	beq.n	8003b44 <_realloc_r+0x14>
 8003b72:	9b01      	ldr	r3, [sp, #4]
 8003b74:	0022      	movs	r2, r4
 8003b76:	429c      	cmp	r4, r3
 8003b78:	d900      	bls.n	8003b7c <_realloc_r+0x4c>
 8003b7a:	001a      	movs	r2, r3
 8003b7c:	0031      	movs	r1, r6
 8003b7e:	0028      	movs	r0, r5
 8003b80:	f7ff fed7 	bl	8003932 <memcpy>
 8003b84:	0031      	movs	r1, r6
 8003b86:	0038      	movs	r0, r7
 8003b88:	f7ff fef0 	bl	800396c <_free_r>
 8003b8c:	e7da      	b.n	8003b44 <_realloc_r+0x14>
	...

08003b90 <_sbrk_r>:
 8003b90:	2300      	movs	r3, #0
 8003b92:	b570      	push	{r4, r5, r6, lr}
 8003b94:	4d06      	ldr	r5, [pc, #24]	; (8003bb0 <_sbrk_r+0x20>)
 8003b96:	0004      	movs	r4, r0
 8003b98:	0008      	movs	r0, r1
 8003b9a:	602b      	str	r3, [r5, #0]
 8003b9c:	f7fc fed4 	bl	8000948 <_sbrk>
 8003ba0:	1c43      	adds	r3, r0, #1
 8003ba2:	d103      	bne.n	8003bac <_sbrk_r+0x1c>
 8003ba4:	682b      	ldr	r3, [r5, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d000      	beq.n	8003bac <_sbrk_r+0x1c>
 8003baa:	6023      	str	r3, [r4, #0]
 8003bac:	bd70      	pop	{r4, r5, r6, pc}
 8003bae:	46c0      	nop			; (mov r8, r8)
 8003bb0:	20000190 	.word	0x20000190

08003bb4 <__malloc_lock>:
 8003bb4:	b510      	push	{r4, lr}
 8003bb6:	4802      	ldr	r0, [pc, #8]	; (8003bc0 <__malloc_lock+0xc>)
 8003bb8:	f000 f814 	bl	8003be4 <__retarget_lock_acquire_recursive>
 8003bbc:	bd10      	pop	{r4, pc}
 8003bbe:	46c0      	nop			; (mov r8, r8)
 8003bc0:	20000194 	.word	0x20000194

08003bc4 <__malloc_unlock>:
 8003bc4:	b510      	push	{r4, lr}
 8003bc6:	4802      	ldr	r0, [pc, #8]	; (8003bd0 <__malloc_unlock+0xc>)
 8003bc8:	f000 f80d 	bl	8003be6 <__retarget_lock_release_recursive>
 8003bcc:	bd10      	pop	{r4, pc}
 8003bce:	46c0      	nop			; (mov r8, r8)
 8003bd0:	20000194 	.word	0x20000194

08003bd4 <_malloc_usable_size_r>:
 8003bd4:	1f0b      	subs	r3, r1, #4
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	1f18      	subs	r0, r3, #4
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	da01      	bge.n	8003be2 <_malloc_usable_size_r+0xe>
 8003bde:	580b      	ldr	r3, [r1, r0]
 8003be0:	18c0      	adds	r0, r0, r3
 8003be2:	4770      	bx	lr

08003be4 <__retarget_lock_acquire_recursive>:
 8003be4:	4770      	bx	lr

08003be6 <__retarget_lock_release_recursive>:
 8003be6:	4770      	bx	lr

08003be8 <_init>:
 8003be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bea:	46c0      	nop			; (mov r8, r8)
 8003bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bee:	bc08      	pop	{r3}
 8003bf0:	469e      	mov	lr, r3
 8003bf2:	4770      	bx	lr

08003bf4 <_fini>:
 8003bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bf6:	46c0      	nop			; (mov r8, r8)
 8003bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bfa:	bc08      	pop	{r3}
 8003bfc:	469e      	mov	lr, r3
 8003bfe:	4770      	bx	lr

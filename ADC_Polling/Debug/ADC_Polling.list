
ADC_Polling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ea0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  08007f60  08007f60  00017f60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800842c  0800842c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800842c  0800842c  0001842c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008434  08008434  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008434  08008434  00018434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008438  08008438  00018438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800843c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  200001dc  08008618  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  08008618  00020304  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ede  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018b9  00000000  00000000  0002a0e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  0002b9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007d0  00000000  00000000  0002c218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014be3  00000000  00000000  0002c9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a93a  00000000  00000000  000415cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ce02  00000000  00000000  0004bf05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c8d07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ee8  00000000  00000000  000c8d58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007f48 	.word	0x08007f48

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	08007f48 	.word	0x08007f48

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f827 	bl	8001490 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ff77 	bl	8001340 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f819 	bl	8001490 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f80f 	bl	8001490 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff9f 	bl	80013c4 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff95 	bl	80013c4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f834 	bl	8000544 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4647      	mov	r7, r8
 80004ee:	b580      	push	{r7, lr}
 80004f0:	0007      	movs	r7, r0
 80004f2:	4699      	mov	r9, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	469c      	mov	ip, r3
 80004f8:	0413      	lsls	r3, r2, #16
 80004fa:	0c1b      	lsrs	r3, r3, #16
 80004fc:	001d      	movs	r5, r3
 80004fe:	000e      	movs	r6, r1
 8000500:	4661      	mov	r1, ip
 8000502:	0400      	lsls	r0, r0, #16
 8000504:	0c14      	lsrs	r4, r2, #16
 8000506:	0c00      	lsrs	r0, r0, #16
 8000508:	4345      	muls	r5, r0
 800050a:	434b      	muls	r3, r1
 800050c:	4360      	muls	r0, r4
 800050e:	4361      	muls	r1, r4
 8000510:	18c0      	adds	r0, r0, r3
 8000512:	0c2c      	lsrs	r4, r5, #16
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4372      	muls	r2, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	4463      	add	r3, ip
 800052e:	042d      	lsls	r5, r5, #16
 8000530:	0c2d      	lsrs	r5, r5, #16
 8000532:	18c9      	adds	r1, r1, r3
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	1889      	adds	r1, r1, r2
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__udivmoddi4>:
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	4657      	mov	r7, sl
 8000548:	464e      	mov	r6, r9
 800054a:	4645      	mov	r5, r8
 800054c:	46de      	mov	lr, fp
 800054e:	b5e0      	push	{r5, r6, r7, lr}
 8000550:	0004      	movs	r4, r0
 8000552:	000d      	movs	r5, r1
 8000554:	4692      	mov	sl, r2
 8000556:	4699      	mov	r9, r3
 8000558:	b083      	sub	sp, #12
 800055a:	428b      	cmp	r3, r1
 800055c:	d830      	bhi.n	80005c0 <__udivmoddi4+0x7c>
 800055e:	d02d      	beq.n	80005bc <__udivmoddi4+0x78>
 8000560:	4649      	mov	r1, r9
 8000562:	4650      	mov	r0, sl
 8000564:	f001 febe 	bl	80022e4 <__clzdi2>
 8000568:	0029      	movs	r1, r5
 800056a:	0006      	movs	r6, r0
 800056c:	0020      	movs	r0, r4
 800056e:	f001 feb9 	bl	80022e4 <__clzdi2>
 8000572:	1a33      	subs	r3, r6, r0
 8000574:	4698      	mov	r8, r3
 8000576:	3b20      	subs	r3, #32
 8000578:	469b      	mov	fp, r3
 800057a:	d433      	bmi.n	80005e4 <__udivmoddi4+0xa0>
 800057c:	465a      	mov	r2, fp
 800057e:	4653      	mov	r3, sl
 8000580:	4093      	lsls	r3, r2
 8000582:	4642      	mov	r2, r8
 8000584:	001f      	movs	r7, r3
 8000586:	4653      	mov	r3, sl
 8000588:	4093      	lsls	r3, r2
 800058a:	001e      	movs	r6, r3
 800058c:	42af      	cmp	r7, r5
 800058e:	d83a      	bhi.n	8000606 <__udivmoddi4+0xc2>
 8000590:	42af      	cmp	r7, r5
 8000592:	d100      	bne.n	8000596 <__udivmoddi4+0x52>
 8000594:	e078      	b.n	8000688 <__udivmoddi4+0x144>
 8000596:	465b      	mov	r3, fp
 8000598:	1ba4      	subs	r4, r4, r6
 800059a:	41bd      	sbcs	r5, r7
 800059c:	2b00      	cmp	r3, #0
 800059e:	da00      	bge.n	80005a2 <__udivmoddi4+0x5e>
 80005a0:	e075      	b.n	800068e <__udivmoddi4+0x14a>
 80005a2:	2200      	movs	r2, #0
 80005a4:	2300      	movs	r3, #0
 80005a6:	9200      	str	r2, [sp, #0]
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2301      	movs	r3, #1
 80005ac:	465a      	mov	r2, fp
 80005ae:	4093      	lsls	r3, r2
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2301      	movs	r3, #1
 80005b4:	4642      	mov	r2, r8
 80005b6:	4093      	lsls	r3, r2
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	e028      	b.n	800060e <__udivmoddi4+0xca>
 80005bc:	4282      	cmp	r2, r0
 80005be:	d9cf      	bls.n	8000560 <__udivmoddi4+0x1c>
 80005c0:	2200      	movs	r2, #0
 80005c2:	2300      	movs	r3, #0
 80005c4:	9200      	str	r2, [sp, #0]
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <__udivmoddi4+0x8e>
 80005ce:	601c      	str	r4, [r3, #0]
 80005d0:	605d      	str	r5, [r3, #4]
 80005d2:	9800      	ldr	r0, [sp, #0]
 80005d4:	9901      	ldr	r1, [sp, #4]
 80005d6:	b003      	add	sp, #12
 80005d8:	bcf0      	pop	{r4, r5, r6, r7}
 80005da:	46bb      	mov	fp, r7
 80005dc:	46b2      	mov	sl, r6
 80005de:	46a9      	mov	r9, r5
 80005e0:	46a0      	mov	r8, r4
 80005e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e4:	4642      	mov	r2, r8
 80005e6:	2320      	movs	r3, #32
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	4652      	mov	r2, sl
 80005ec:	40da      	lsrs	r2, r3
 80005ee:	4641      	mov	r1, r8
 80005f0:	0013      	movs	r3, r2
 80005f2:	464a      	mov	r2, r9
 80005f4:	408a      	lsls	r2, r1
 80005f6:	0017      	movs	r7, r2
 80005f8:	4642      	mov	r2, r8
 80005fa:	431f      	orrs	r7, r3
 80005fc:	4653      	mov	r3, sl
 80005fe:	4093      	lsls	r3, r2
 8000600:	001e      	movs	r6, r3
 8000602:	42af      	cmp	r7, r5
 8000604:	d9c4      	bls.n	8000590 <__udivmoddi4+0x4c>
 8000606:	2200      	movs	r2, #0
 8000608:	2300      	movs	r3, #0
 800060a:	9200      	str	r2, [sp, #0]
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	4643      	mov	r3, r8
 8000610:	2b00      	cmp	r3, #0
 8000612:	d0d9      	beq.n	80005c8 <__udivmoddi4+0x84>
 8000614:	07fb      	lsls	r3, r7, #31
 8000616:	0872      	lsrs	r2, r6, #1
 8000618:	431a      	orrs	r2, r3
 800061a:	4646      	mov	r6, r8
 800061c:	087b      	lsrs	r3, r7, #1
 800061e:	e00e      	b.n	800063e <__udivmoddi4+0xfa>
 8000620:	42ab      	cmp	r3, r5
 8000622:	d101      	bne.n	8000628 <__udivmoddi4+0xe4>
 8000624:	42a2      	cmp	r2, r4
 8000626:	d80c      	bhi.n	8000642 <__udivmoddi4+0xfe>
 8000628:	1aa4      	subs	r4, r4, r2
 800062a:	419d      	sbcs	r5, r3
 800062c:	2001      	movs	r0, #1
 800062e:	1924      	adds	r4, r4, r4
 8000630:	416d      	adcs	r5, r5
 8000632:	2100      	movs	r1, #0
 8000634:	3e01      	subs	r6, #1
 8000636:	1824      	adds	r4, r4, r0
 8000638:	414d      	adcs	r5, r1
 800063a:	2e00      	cmp	r6, #0
 800063c:	d006      	beq.n	800064c <__udivmoddi4+0x108>
 800063e:	42ab      	cmp	r3, r5
 8000640:	d9ee      	bls.n	8000620 <__udivmoddi4+0xdc>
 8000642:	3e01      	subs	r6, #1
 8000644:	1924      	adds	r4, r4, r4
 8000646:	416d      	adcs	r5, r5
 8000648:	2e00      	cmp	r6, #0
 800064a:	d1f8      	bne.n	800063e <__udivmoddi4+0xfa>
 800064c:	9800      	ldr	r0, [sp, #0]
 800064e:	9901      	ldr	r1, [sp, #4]
 8000650:	465b      	mov	r3, fp
 8000652:	1900      	adds	r0, r0, r4
 8000654:	4169      	adcs	r1, r5
 8000656:	2b00      	cmp	r3, #0
 8000658:	db24      	blt.n	80006a4 <__udivmoddi4+0x160>
 800065a:	002b      	movs	r3, r5
 800065c:	465a      	mov	r2, fp
 800065e:	4644      	mov	r4, r8
 8000660:	40d3      	lsrs	r3, r2
 8000662:	002a      	movs	r2, r5
 8000664:	40e2      	lsrs	r2, r4
 8000666:	001c      	movs	r4, r3
 8000668:	465b      	mov	r3, fp
 800066a:	0015      	movs	r5, r2
 800066c:	2b00      	cmp	r3, #0
 800066e:	db2a      	blt.n	80006c6 <__udivmoddi4+0x182>
 8000670:	0026      	movs	r6, r4
 8000672:	409e      	lsls	r6, r3
 8000674:	0033      	movs	r3, r6
 8000676:	0026      	movs	r6, r4
 8000678:	4647      	mov	r7, r8
 800067a:	40be      	lsls	r6, r7
 800067c:	0032      	movs	r2, r6
 800067e:	1a80      	subs	r0, r0, r2
 8000680:	4199      	sbcs	r1, r3
 8000682:	9000      	str	r0, [sp, #0]
 8000684:	9101      	str	r1, [sp, #4]
 8000686:	e79f      	b.n	80005c8 <__udivmoddi4+0x84>
 8000688:	42a3      	cmp	r3, r4
 800068a:	d8bc      	bhi.n	8000606 <__udivmoddi4+0xc2>
 800068c:	e783      	b.n	8000596 <__udivmoddi4+0x52>
 800068e:	4642      	mov	r2, r8
 8000690:	2320      	movs	r3, #32
 8000692:	2100      	movs	r1, #0
 8000694:	1a9b      	subs	r3, r3, r2
 8000696:	2200      	movs	r2, #0
 8000698:	9100      	str	r1, [sp, #0]
 800069a:	9201      	str	r2, [sp, #4]
 800069c:	2201      	movs	r2, #1
 800069e:	40da      	lsrs	r2, r3
 80006a0:	9201      	str	r2, [sp, #4]
 80006a2:	e786      	b.n	80005b2 <__udivmoddi4+0x6e>
 80006a4:	4642      	mov	r2, r8
 80006a6:	2320      	movs	r3, #32
 80006a8:	1a9b      	subs	r3, r3, r2
 80006aa:	002a      	movs	r2, r5
 80006ac:	4646      	mov	r6, r8
 80006ae:	409a      	lsls	r2, r3
 80006b0:	0023      	movs	r3, r4
 80006b2:	40f3      	lsrs	r3, r6
 80006b4:	4644      	mov	r4, r8
 80006b6:	4313      	orrs	r3, r2
 80006b8:	002a      	movs	r2, r5
 80006ba:	40e2      	lsrs	r2, r4
 80006bc:	001c      	movs	r4, r3
 80006be:	465b      	mov	r3, fp
 80006c0:	0015      	movs	r5, r2
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	dad4      	bge.n	8000670 <__udivmoddi4+0x12c>
 80006c6:	4642      	mov	r2, r8
 80006c8:	002f      	movs	r7, r5
 80006ca:	2320      	movs	r3, #32
 80006cc:	0026      	movs	r6, r4
 80006ce:	4097      	lsls	r7, r2
 80006d0:	1a9b      	subs	r3, r3, r2
 80006d2:	40de      	lsrs	r6, r3
 80006d4:	003b      	movs	r3, r7
 80006d6:	4333      	orrs	r3, r6
 80006d8:	e7cd      	b.n	8000676 <__udivmoddi4+0x132>
 80006da:	46c0      	nop			; (mov r8, r8)

080006dc <__aeabi_dadd>:
 80006dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006de:	464f      	mov	r7, r9
 80006e0:	4646      	mov	r6, r8
 80006e2:	46d6      	mov	lr, sl
 80006e4:	000d      	movs	r5, r1
 80006e6:	0004      	movs	r4, r0
 80006e8:	b5c0      	push	{r6, r7, lr}
 80006ea:	001f      	movs	r7, r3
 80006ec:	0011      	movs	r1, r2
 80006ee:	0328      	lsls	r0, r5, #12
 80006f0:	0f62      	lsrs	r2, r4, #29
 80006f2:	0a40      	lsrs	r0, r0, #9
 80006f4:	4310      	orrs	r0, r2
 80006f6:	007a      	lsls	r2, r7, #1
 80006f8:	0d52      	lsrs	r2, r2, #21
 80006fa:	00e3      	lsls	r3, r4, #3
 80006fc:	033c      	lsls	r4, r7, #12
 80006fe:	4691      	mov	r9, r2
 8000700:	0a64      	lsrs	r4, r4, #9
 8000702:	0ffa      	lsrs	r2, r7, #31
 8000704:	0f4f      	lsrs	r7, r1, #29
 8000706:	006e      	lsls	r6, r5, #1
 8000708:	4327      	orrs	r7, r4
 800070a:	4692      	mov	sl, r2
 800070c:	46b8      	mov	r8, r7
 800070e:	0d76      	lsrs	r6, r6, #21
 8000710:	0fed      	lsrs	r5, r5, #31
 8000712:	00c9      	lsls	r1, r1, #3
 8000714:	4295      	cmp	r5, r2
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0x3e>
 8000718:	e099      	b.n	800084e <__aeabi_dadd+0x172>
 800071a:	464c      	mov	r4, r9
 800071c:	1b34      	subs	r4, r6, r4
 800071e:	46a4      	mov	ip, r4
 8000720:	2c00      	cmp	r4, #0
 8000722:	dc00      	bgt.n	8000726 <__aeabi_dadd+0x4a>
 8000724:	e07c      	b.n	8000820 <__aeabi_dadd+0x144>
 8000726:	464a      	mov	r2, r9
 8000728:	2a00      	cmp	r2, #0
 800072a:	d100      	bne.n	800072e <__aeabi_dadd+0x52>
 800072c:	e0b8      	b.n	80008a0 <__aeabi_dadd+0x1c4>
 800072e:	4ac5      	ldr	r2, [pc, #788]	; (8000a44 <__aeabi_dadd+0x368>)
 8000730:	4296      	cmp	r6, r2
 8000732:	d100      	bne.n	8000736 <__aeabi_dadd+0x5a>
 8000734:	e11c      	b.n	8000970 <__aeabi_dadd+0x294>
 8000736:	2280      	movs	r2, #128	; 0x80
 8000738:	003c      	movs	r4, r7
 800073a:	0412      	lsls	r2, r2, #16
 800073c:	4314      	orrs	r4, r2
 800073e:	46a0      	mov	r8, r4
 8000740:	4662      	mov	r2, ip
 8000742:	2a38      	cmp	r2, #56	; 0x38
 8000744:	dd00      	ble.n	8000748 <__aeabi_dadd+0x6c>
 8000746:	e161      	b.n	8000a0c <__aeabi_dadd+0x330>
 8000748:	2a1f      	cmp	r2, #31
 800074a:	dd00      	ble.n	800074e <__aeabi_dadd+0x72>
 800074c:	e1cc      	b.n	8000ae8 <__aeabi_dadd+0x40c>
 800074e:	4664      	mov	r4, ip
 8000750:	2220      	movs	r2, #32
 8000752:	1b12      	subs	r2, r2, r4
 8000754:	4644      	mov	r4, r8
 8000756:	4094      	lsls	r4, r2
 8000758:	000f      	movs	r7, r1
 800075a:	46a1      	mov	r9, r4
 800075c:	4664      	mov	r4, ip
 800075e:	4091      	lsls	r1, r2
 8000760:	40e7      	lsrs	r7, r4
 8000762:	464c      	mov	r4, r9
 8000764:	1e4a      	subs	r2, r1, #1
 8000766:	4191      	sbcs	r1, r2
 8000768:	433c      	orrs	r4, r7
 800076a:	4642      	mov	r2, r8
 800076c:	4321      	orrs	r1, r4
 800076e:	4664      	mov	r4, ip
 8000770:	40e2      	lsrs	r2, r4
 8000772:	1a80      	subs	r0, r0, r2
 8000774:	1a5c      	subs	r4, r3, r1
 8000776:	42a3      	cmp	r3, r4
 8000778:	419b      	sbcs	r3, r3
 800077a:	425f      	negs	r7, r3
 800077c:	1bc7      	subs	r7, r0, r7
 800077e:	023b      	lsls	r3, r7, #8
 8000780:	d400      	bmi.n	8000784 <__aeabi_dadd+0xa8>
 8000782:	e0d0      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000784:	027f      	lsls	r7, r7, #9
 8000786:	0a7f      	lsrs	r7, r7, #9
 8000788:	2f00      	cmp	r7, #0
 800078a:	d100      	bne.n	800078e <__aeabi_dadd+0xb2>
 800078c:	e0ff      	b.n	800098e <__aeabi_dadd+0x2b2>
 800078e:	0038      	movs	r0, r7
 8000790:	f001 fd8a 	bl	80022a8 <__clzsi2>
 8000794:	0001      	movs	r1, r0
 8000796:	3908      	subs	r1, #8
 8000798:	2320      	movs	r3, #32
 800079a:	0022      	movs	r2, r4
 800079c:	1a5b      	subs	r3, r3, r1
 800079e:	408f      	lsls	r7, r1
 80007a0:	40da      	lsrs	r2, r3
 80007a2:	408c      	lsls	r4, r1
 80007a4:	4317      	orrs	r7, r2
 80007a6:	42b1      	cmp	r1, r6
 80007a8:	da00      	bge.n	80007ac <__aeabi_dadd+0xd0>
 80007aa:	e0ff      	b.n	80009ac <__aeabi_dadd+0x2d0>
 80007ac:	1b89      	subs	r1, r1, r6
 80007ae:	1c4b      	adds	r3, r1, #1
 80007b0:	2b1f      	cmp	r3, #31
 80007b2:	dd00      	ble.n	80007b6 <__aeabi_dadd+0xda>
 80007b4:	e0a8      	b.n	8000908 <__aeabi_dadd+0x22c>
 80007b6:	2220      	movs	r2, #32
 80007b8:	0039      	movs	r1, r7
 80007ba:	1ad2      	subs	r2, r2, r3
 80007bc:	0020      	movs	r0, r4
 80007be:	4094      	lsls	r4, r2
 80007c0:	4091      	lsls	r1, r2
 80007c2:	40d8      	lsrs	r0, r3
 80007c4:	1e62      	subs	r2, r4, #1
 80007c6:	4194      	sbcs	r4, r2
 80007c8:	40df      	lsrs	r7, r3
 80007ca:	2600      	movs	r6, #0
 80007cc:	4301      	orrs	r1, r0
 80007ce:	430c      	orrs	r4, r1
 80007d0:	0763      	lsls	r3, r4, #29
 80007d2:	d009      	beq.n	80007e8 <__aeabi_dadd+0x10c>
 80007d4:	230f      	movs	r3, #15
 80007d6:	4023      	ands	r3, r4
 80007d8:	2b04      	cmp	r3, #4
 80007da:	d005      	beq.n	80007e8 <__aeabi_dadd+0x10c>
 80007dc:	1d23      	adds	r3, r4, #4
 80007de:	42a3      	cmp	r3, r4
 80007e0:	41a4      	sbcs	r4, r4
 80007e2:	4264      	negs	r4, r4
 80007e4:	193f      	adds	r7, r7, r4
 80007e6:	001c      	movs	r4, r3
 80007e8:	023b      	lsls	r3, r7, #8
 80007ea:	d400      	bmi.n	80007ee <__aeabi_dadd+0x112>
 80007ec:	e09e      	b.n	800092c <__aeabi_dadd+0x250>
 80007ee:	4b95      	ldr	r3, [pc, #596]	; (8000a44 <__aeabi_dadd+0x368>)
 80007f0:	3601      	adds	r6, #1
 80007f2:	429e      	cmp	r6, r3
 80007f4:	d100      	bne.n	80007f8 <__aeabi_dadd+0x11c>
 80007f6:	e0b7      	b.n	8000968 <__aeabi_dadd+0x28c>
 80007f8:	4a93      	ldr	r2, [pc, #588]	; (8000a48 <__aeabi_dadd+0x36c>)
 80007fa:	08e4      	lsrs	r4, r4, #3
 80007fc:	4017      	ands	r7, r2
 80007fe:	077b      	lsls	r3, r7, #29
 8000800:	0571      	lsls	r1, r6, #21
 8000802:	027f      	lsls	r7, r7, #9
 8000804:	4323      	orrs	r3, r4
 8000806:	0b3f      	lsrs	r7, r7, #12
 8000808:	0d4a      	lsrs	r2, r1, #21
 800080a:	0512      	lsls	r2, r2, #20
 800080c:	433a      	orrs	r2, r7
 800080e:	07ed      	lsls	r5, r5, #31
 8000810:	432a      	orrs	r2, r5
 8000812:	0018      	movs	r0, r3
 8000814:	0011      	movs	r1, r2
 8000816:	bce0      	pop	{r5, r6, r7}
 8000818:	46ba      	mov	sl, r7
 800081a:	46b1      	mov	r9, r6
 800081c:	46a8      	mov	r8, r5
 800081e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000820:	2c00      	cmp	r4, #0
 8000822:	d04b      	beq.n	80008bc <__aeabi_dadd+0x1e0>
 8000824:	464c      	mov	r4, r9
 8000826:	1ba4      	subs	r4, r4, r6
 8000828:	46a4      	mov	ip, r4
 800082a:	2e00      	cmp	r6, #0
 800082c:	d000      	beq.n	8000830 <__aeabi_dadd+0x154>
 800082e:	e123      	b.n	8000a78 <__aeabi_dadd+0x39c>
 8000830:	0004      	movs	r4, r0
 8000832:	431c      	orrs	r4, r3
 8000834:	d100      	bne.n	8000838 <__aeabi_dadd+0x15c>
 8000836:	e1af      	b.n	8000b98 <__aeabi_dadd+0x4bc>
 8000838:	4662      	mov	r2, ip
 800083a:	1e54      	subs	r4, r2, #1
 800083c:	2a01      	cmp	r2, #1
 800083e:	d100      	bne.n	8000842 <__aeabi_dadd+0x166>
 8000840:	e215      	b.n	8000c6e <__aeabi_dadd+0x592>
 8000842:	4d80      	ldr	r5, [pc, #512]	; (8000a44 <__aeabi_dadd+0x368>)
 8000844:	45ac      	cmp	ip, r5
 8000846:	d100      	bne.n	800084a <__aeabi_dadd+0x16e>
 8000848:	e1c8      	b.n	8000bdc <__aeabi_dadd+0x500>
 800084a:	46a4      	mov	ip, r4
 800084c:	e11b      	b.n	8000a86 <__aeabi_dadd+0x3aa>
 800084e:	464a      	mov	r2, r9
 8000850:	1ab2      	subs	r2, r6, r2
 8000852:	4694      	mov	ip, r2
 8000854:	2a00      	cmp	r2, #0
 8000856:	dc00      	bgt.n	800085a <__aeabi_dadd+0x17e>
 8000858:	e0ac      	b.n	80009b4 <__aeabi_dadd+0x2d8>
 800085a:	464a      	mov	r2, r9
 800085c:	2a00      	cmp	r2, #0
 800085e:	d043      	beq.n	80008e8 <__aeabi_dadd+0x20c>
 8000860:	4a78      	ldr	r2, [pc, #480]	; (8000a44 <__aeabi_dadd+0x368>)
 8000862:	4296      	cmp	r6, r2
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0x18c>
 8000866:	e1af      	b.n	8000bc8 <__aeabi_dadd+0x4ec>
 8000868:	2280      	movs	r2, #128	; 0x80
 800086a:	003c      	movs	r4, r7
 800086c:	0412      	lsls	r2, r2, #16
 800086e:	4314      	orrs	r4, r2
 8000870:	46a0      	mov	r8, r4
 8000872:	4662      	mov	r2, ip
 8000874:	2a38      	cmp	r2, #56	; 0x38
 8000876:	dc67      	bgt.n	8000948 <__aeabi_dadd+0x26c>
 8000878:	2a1f      	cmp	r2, #31
 800087a:	dc00      	bgt.n	800087e <__aeabi_dadd+0x1a2>
 800087c:	e15f      	b.n	8000b3e <__aeabi_dadd+0x462>
 800087e:	4647      	mov	r7, r8
 8000880:	3a20      	subs	r2, #32
 8000882:	40d7      	lsrs	r7, r2
 8000884:	4662      	mov	r2, ip
 8000886:	2a20      	cmp	r2, #32
 8000888:	d005      	beq.n	8000896 <__aeabi_dadd+0x1ba>
 800088a:	4664      	mov	r4, ip
 800088c:	2240      	movs	r2, #64	; 0x40
 800088e:	1b12      	subs	r2, r2, r4
 8000890:	4644      	mov	r4, r8
 8000892:	4094      	lsls	r4, r2
 8000894:	4321      	orrs	r1, r4
 8000896:	1e4a      	subs	r2, r1, #1
 8000898:	4191      	sbcs	r1, r2
 800089a:	000c      	movs	r4, r1
 800089c:	433c      	orrs	r4, r7
 800089e:	e057      	b.n	8000950 <__aeabi_dadd+0x274>
 80008a0:	003a      	movs	r2, r7
 80008a2:	430a      	orrs	r2, r1
 80008a4:	d100      	bne.n	80008a8 <__aeabi_dadd+0x1cc>
 80008a6:	e105      	b.n	8000ab4 <__aeabi_dadd+0x3d8>
 80008a8:	0022      	movs	r2, r4
 80008aa:	3a01      	subs	r2, #1
 80008ac:	2c01      	cmp	r4, #1
 80008ae:	d100      	bne.n	80008b2 <__aeabi_dadd+0x1d6>
 80008b0:	e182      	b.n	8000bb8 <__aeabi_dadd+0x4dc>
 80008b2:	4c64      	ldr	r4, [pc, #400]	; (8000a44 <__aeabi_dadd+0x368>)
 80008b4:	45a4      	cmp	ip, r4
 80008b6:	d05b      	beq.n	8000970 <__aeabi_dadd+0x294>
 80008b8:	4694      	mov	ip, r2
 80008ba:	e741      	b.n	8000740 <__aeabi_dadd+0x64>
 80008bc:	4c63      	ldr	r4, [pc, #396]	; (8000a4c <__aeabi_dadd+0x370>)
 80008be:	1c77      	adds	r7, r6, #1
 80008c0:	4227      	tst	r7, r4
 80008c2:	d000      	beq.n	80008c6 <__aeabi_dadd+0x1ea>
 80008c4:	e0c4      	b.n	8000a50 <__aeabi_dadd+0x374>
 80008c6:	0004      	movs	r4, r0
 80008c8:	431c      	orrs	r4, r3
 80008ca:	2e00      	cmp	r6, #0
 80008cc:	d000      	beq.n	80008d0 <__aeabi_dadd+0x1f4>
 80008ce:	e169      	b.n	8000ba4 <__aeabi_dadd+0x4c8>
 80008d0:	2c00      	cmp	r4, #0
 80008d2:	d100      	bne.n	80008d6 <__aeabi_dadd+0x1fa>
 80008d4:	e1bf      	b.n	8000c56 <__aeabi_dadd+0x57a>
 80008d6:	4644      	mov	r4, r8
 80008d8:	430c      	orrs	r4, r1
 80008da:	d000      	beq.n	80008de <__aeabi_dadd+0x202>
 80008dc:	e1d0      	b.n	8000c80 <__aeabi_dadd+0x5a4>
 80008de:	0742      	lsls	r2, r0, #29
 80008e0:	08db      	lsrs	r3, r3, #3
 80008e2:	4313      	orrs	r3, r2
 80008e4:	08c0      	lsrs	r0, r0, #3
 80008e6:	e029      	b.n	800093c <__aeabi_dadd+0x260>
 80008e8:	003a      	movs	r2, r7
 80008ea:	430a      	orrs	r2, r1
 80008ec:	d100      	bne.n	80008f0 <__aeabi_dadd+0x214>
 80008ee:	e170      	b.n	8000bd2 <__aeabi_dadd+0x4f6>
 80008f0:	4662      	mov	r2, ip
 80008f2:	4664      	mov	r4, ip
 80008f4:	3a01      	subs	r2, #1
 80008f6:	2c01      	cmp	r4, #1
 80008f8:	d100      	bne.n	80008fc <__aeabi_dadd+0x220>
 80008fa:	e0e0      	b.n	8000abe <__aeabi_dadd+0x3e2>
 80008fc:	4c51      	ldr	r4, [pc, #324]	; (8000a44 <__aeabi_dadd+0x368>)
 80008fe:	45a4      	cmp	ip, r4
 8000900:	d100      	bne.n	8000904 <__aeabi_dadd+0x228>
 8000902:	e161      	b.n	8000bc8 <__aeabi_dadd+0x4ec>
 8000904:	4694      	mov	ip, r2
 8000906:	e7b4      	b.n	8000872 <__aeabi_dadd+0x196>
 8000908:	003a      	movs	r2, r7
 800090a:	391f      	subs	r1, #31
 800090c:	40ca      	lsrs	r2, r1
 800090e:	0011      	movs	r1, r2
 8000910:	2b20      	cmp	r3, #32
 8000912:	d003      	beq.n	800091c <__aeabi_dadd+0x240>
 8000914:	2240      	movs	r2, #64	; 0x40
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	409f      	lsls	r7, r3
 800091a:	433c      	orrs	r4, r7
 800091c:	1e63      	subs	r3, r4, #1
 800091e:	419c      	sbcs	r4, r3
 8000920:	2700      	movs	r7, #0
 8000922:	2600      	movs	r6, #0
 8000924:	430c      	orrs	r4, r1
 8000926:	0763      	lsls	r3, r4, #29
 8000928:	d000      	beq.n	800092c <__aeabi_dadd+0x250>
 800092a:	e753      	b.n	80007d4 <__aeabi_dadd+0xf8>
 800092c:	46b4      	mov	ip, r6
 800092e:	08e4      	lsrs	r4, r4, #3
 8000930:	077b      	lsls	r3, r7, #29
 8000932:	4323      	orrs	r3, r4
 8000934:	08f8      	lsrs	r0, r7, #3
 8000936:	4a43      	ldr	r2, [pc, #268]	; (8000a44 <__aeabi_dadd+0x368>)
 8000938:	4594      	cmp	ip, r2
 800093a:	d01d      	beq.n	8000978 <__aeabi_dadd+0x29c>
 800093c:	4662      	mov	r2, ip
 800093e:	0307      	lsls	r7, r0, #12
 8000940:	0552      	lsls	r2, r2, #21
 8000942:	0b3f      	lsrs	r7, r7, #12
 8000944:	0d52      	lsrs	r2, r2, #21
 8000946:	e760      	b.n	800080a <__aeabi_dadd+0x12e>
 8000948:	4644      	mov	r4, r8
 800094a:	430c      	orrs	r4, r1
 800094c:	1e62      	subs	r2, r4, #1
 800094e:	4194      	sbcs	r4, r2
 8000950:	18e4      	adds	r4, r4, r3
 8000952:	429c      	cmp	r4, r3
 8000954:	419b      	sbcs	r3, r3
 8000956:	425f      	negs	r7, r3
 8000958:	183f      	adds	r7, r7, r0
 800095a:	023b      	lsls	r3, r7, #8
 800095c:	d5e3      	bpl.n	8000926 <__aeabi_dadd+0x24a>
 800095e:	4b39      	ldr	r3, [pc, #228]	; (8000a44 <__aeabi_dadd+0x368>)
 8000960:	3601      	adds	r6, #1
 8000962:	429e      	cmp	r6, r3
 8000964:	d000      	beq.n	8000968 <__aeabi_dadd+0x28c>
 8000966:	e0b5      	b.n	8000ad4 <__aeabi_dadd+0x3f8>
 8000968:	0032      	movs	r2, r6
 800096a:	2700      	movs	r7, #0
 800096c:	2300      	movs	r3, #0
 800096e:	e74c      	b.n	800080a <__aeabi_dadd+0x12e>
 8000970:	0742      	lsls	r2, r0, #29
 8000972:	08db      	lsrs	r3, r3, #3
 8000974:	4313      	orrs	r3, r2
 8000976:	08c0      	lsrs	r0, r0, #3
 8000978:	001a      	movs	r2, r3
 800097a:	4302      	orrs	r2, r0
 800097c:	d100      	bne.n	8000980 <__aeabi_dadd+0x2a4>
 800097e:	e1e1      	b.n	8000d44 <__aeabi_dadd+0x668>
 8000980:	2780      	movs	r7, #128	; 0x80
 8000982:	033f      	lsls	r7, r7, #12
 8000984:	4307      	orrs	r7, r0
 8000986:	033f      	lsls	r7, r7, #12
 8000988:	4a2e      	ldr	r2, [pc, #184]	; (8000a44 <__aeabi_dadd+0x368>)
 800098a:	0b3f      	lsrs	r7, r7, #12
 800098c:	e73d      	b.n	800080a <__aeabi_dadd+0x12e>
 800098e:	0020      	movs	r0, r4
 8000990:	f001 fc8a 	bl	80022a8 <__clzsi2>
 8000994:	0001      	movs	r1, r0
 8000996:	3118      	adds	r1, #24
 8000998:	291f      	cmp	r1, #31
 800099a:	dc00      	bgt.n	800099e <__aeabi_dadd+0x2c2>
 800099c:	e6fc      	b.n	8000798 <__aeabi_dadd+0xbc>
 800099e:	3808      	subs	r0, #8
 80009a0:	4084      	lsls	r4, r0
 80009a2:	0027      	movs	r7, r4
 80009a4:	2400      	movs	r4, #0
 80009a6:	42b1      	cmp	r1, r6
 80009a8:	db00      	blt.n	80009ac <__aeabi_dadd+0x2d0>
 80009aa:	e6ff      	b.n	80007ac <__aeabi_dadd+0xd0>
 80009ac:	4a26      	ldr	r2, [pc, #152]	; (8000a48 <__aeabi_dadd+0x36c>)
 80009ae:	1a76      	subs	r6, r6, r1
 80009b0:	4017      	ands	r7, r2
 80009b2:	e70d      	b.n	80007d0 <__aeabi_dadd+0xf4>
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	d02f      	beq.n	8000a18 <__aeabi_dadd+0x33c>
 80009b8:	464a      	mov	r2, r9
 80009ba:	1b92      	subs	r2, r2, r6
 80009bc:	4694      	mov	ip, r2
 80009be:	2e00      	cmp	r6, #0
 80009c0:	d100      	bne.n	80009c4 <__aeabi_dadd+0x2e8>
 80009c2:	e0ad      	b.n	8000b20 <__aeabi_dadd+0x444>
 80009c4:	4a1f      	ldr	r2, [pc, #124]	; (8000a44 <__aeabi_dadd+0x368>)
 80009c6:	4591      	cmp	r9, r2
 80009c8:	d100      	bne.n	80009cc <__aeabi_dadd+0x2f0>
 80009ca:	e10f      	b.n	8000bec <__aeabi_dadd+0x510>
 80009cc:	2280      	movs	r2, #128	; 0x80
 80009ce:	0412      	lsls	r2, r2, #16
 80009d0:	4310      	orrs	r0, r2
 80009d2:	4662      	mov	r2, ip
 80009d4:	2a38      	cmp	r2, #56	; 0x38
 80009d6:	dd00      	ble.n	80009da <__aeabi_dadd+0x2fe>
 80009d8:	e10f      	b.n	8000bfa <__aeabi_dadd+0x51e>
 80009da:	2a1f      	cmp	r2, #31
 80009dc:	dd00      	ble.n	80009e0 <__aeabi_dadd+0x304>
 80009de:	e180      	b.n	8000ce2 <__aeabi_dadd+0x606>
 80009e0:	4664      	mov	r4, ip
 80009e2:	2220      	movs	r2, #32
 80009e4:	001e      	movs	r6, r3
 80009e6:	1b12      	subs	r2, r2, r4
 80009e8:	4667      	mov	r7, ip
 80009ea:	0004      	movs	r4, r0
 80009ec:	4093      	lsls	r3, r2
 80009ee:	4094      	lsls	r4, r2
 80009f0:	40fe      	lsrs	r6, r7
 80009f2:	1e5a      	subs	r2, r3, #1
 80009f4:	4193      	sbcs	r3, r2
 80009f6:	40f8      	lsrs	r0, r7
 80009f8:	4334      	orrs	r4, r6
 80009fa:	431c      	orrs	r4, r3
 80009fc:	4480      	add	r8, r0
 80009fe:	1864      	adds	r4, r4, r1
 8000a00:	428c      	cmp	r4, r1
 8000a02:	41bf      	sbcs	r7, r7
 8000a04:	427f      	negs	r7, r7
 8000a06:	464e      	mov	r6, r9
 8000a08:	4447      	add	r7, r8
 8000a0a:	e7a6      	b.n	800095a <__aeabi_dadd+0x27e>
 8000a0c:	4642      	mov	r2, r8
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	0011      	movs	r1, r2
 8000a12:	1e4a      	subs	r2, r1, #1
 8000a14:	4191      	sbcs	r1, r2
 8000a16:	e6ad      	b.n	8000774 <__aeabi_dadd+0x98>
 8000a18:	4c0c      	ldr	r4, [pc, #48]	; (8000a4c <__aeabi_dadd+0x370>)
 8000a1a:	1c72      	adds	r2, r6, #1
 8000a1c:	4222      	tst	r2, r4
 8000a1e:	d000      	beq.n	8000a22 <__aeabi_dadd+0x346>
 8000a20:	e0a1      	b.n	8000b66 <__aeabi_dadd+0x48a>
 8000a22:	0002      	movs	r2, r0
 8000a24:	431a      	orrs	r2, r3
 8000a26:	2e00      	cmp	r6, #0
 8000a28:	d000      	beq.n	8000a2c <__aeabi_dadd+0x350>
 8000a2a:	e0fa      	b.n	8000c22 <__aeabi_dadd+0x546>
 8000a2c:	2a00      	cmp	r2, #0
 8000a2e:	d100      	bne.n	8000a32 <__aeabi_dadd+0x356>
 8000a30:	e145      	b.n	8000cbe <__aeabi_dadd+0x5e2>
 8000a32:	003a      	movs	r2, r7
 8000a34:	430a      	orrs	r2, r1
 8000a36:	d000      	beq.n	8000a3a <__aeabi_dadd+0x35e>
 8000a38:	e146      	b.n	8000cc8 <__aeabi_dadd+0x5ec>
 8000a3a:	0742      	lsls	r2, r0, #29
 8000a3c:	08db      	lsrs	r3, r3, #3
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	08c0      	lsrs	r0, r0, #3
 8000a42:	e77b      	b.n	800093c <__aeabi_dadd+0x260>
 8000a44:	000007ff 	.word	0x000007ff
 8000a48:	ff7fffff 	.word	0xff7fffff
 8000a4c:	000007fe 	.word	0x000007fe
 8000a50:	4647      	mov	r7, r8
 8000a52:	1a5c      	subs	r4, r3, r1
 8000a54:	1bc2      	subs	r2, r0, r7
 8000a56:	42a3      	cmp	r3, r4
 8000a58:	41bf      	sbcs	r7, r7
 8000a5a:	427f      	negs	r7, r7
 8000a5c:	46b9      	mov	r9, r7
 8000a5e:	0017      	movs	r7, r2
 8000a60:	464a      	mov	r2, r9
 8000a62:	1abf      	subs	r7, r7, r2
 8000a64:	023a      	lsls	r2, r7, #8
 8000a66:	d500      	bpl.n	8000a6a <__aeabi_dadd+0x38e>
 8000a68:	e08d      	b.n	8000b86 <__aeabi_dadd+0x4aa>
 8000a6a:	0023      	movs	r3, r4
 8000a6c:	433b      	orrs	r3, r7
 8000a6e:	d000      	beq.n	8000a72 <__aeabi_dadd+0x396>
 8000a70:	e68a      	b.n	8000788 <__aeabi_dadd+0xac>
 8000a72:	2000      	movs	r0, #0
 8000a74:	2500      	movs	r5, #0
 8000a76:	e761      	b.n	800093c <__aeabi_dadd+0x260>
 8000a78:	4cb4      	ldr	r4, [pc, #720]	; (8000d4c <__aeabi_dadd+0x670>)
 8000a7a:	45a1      	cmp	r9, r4
 8000a7c:	d100      	bne.n	8000a80 <__aeabi_dadd+0x3a4>
 8000a7e:	e0ad      	b.n	8000bdc <__aeabi_dadd+0x500>
 8000a80:	2480      	movs	r4, #128	; 0x80
 8000a82:	0424      	lsls	r4, r4, #16
 8000a84:	4320      	orrs	r0, r4
 8000a86:	4664      	mov	r4, ip
 8000a88:	2c38      	cmp	r4, #56	; 0x38
 8000a8a:	dc3d      	bgt.n	8000b08 <__aeabi_dadd+0x42c>
 8000a8c:	4662      	mov	r2, ip
 8000a8e:	2c1f      	cmp	r4, #31
 8000a90:	dd00      	ble.n	8000a94 <__aeabi_dadd+0x3b8>
 8000a92:	e0b7      	b.n	8000c04 <__aeabi_dadd+0x528>
 8000a94:	2520      	movs	r5, #32
 8000a96:	001e      	movs	r6, r3
 8000a98:	1b2d      	subs	r5, r5, r4
 8000a9a:	0004      	movs	r4, r0
 8000a9c:	40ab      	lsls	r3, r5
 8000a9e:	40ac      	lsls	r4, r5
 8000aa0:	40d6      	lsrs	r6, r2
 8000aa2:	40d0      	lsrs	r0, r2
 8000aa4:	4642      	mov	r2, r8
 8000aa6:	1e5d      	subs	r5, r3, #1
 8000aa8:	41ab      	sbcs	r3, r5
 8000aaa:	4334      	orrs	r4, r6
 8000aac:	1a12      	subs	r2, r2, r0
 8000aae:	4690      	mov	r8, r2
 8000ab0:	4323      	orrs	r3, r4
 8000ab2:	e02c      	b.n	8000b0e <__aeabi_dadd+0x432>
 8000ab4:	0742      	lsls	r2, r0, #29
 8000ab6:	08db      	lsrs	r3, r3, #3
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	08c0      	lsrs	r0, r0, #3
 8000abc:	e73b      	b.n	8000936 <__aeabi_dadd+0x25a>
 8000abe:	185c      	adds	r4, r3, r1
 8000ac0:	429c      	cmp	r4, r3
 8000ac2:	419b      	sbcs	r3, r3
 8000ac4:	4440      	add	r0, r8
 8000ac6:	425b      	negs	r3, r3
 8000ac8:	18c7      	adds	r7, r0, r3
 8000aca:	2601      	movs	r6, #1
 8000acc:	023b      	lsls	r3, r7, #8
 8000ace:	d400      	bmi.n	8000ad2 <__aeabi_dadd+0x3f6>
 8000ad0:	e729      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000ad2:	2602      	movs	r6, #2
 8000ad4:	4a9e      	ldr	r2, [pc, #632]	; (8000d50 <__aeabi_dadd+0x674>)
 8000ad6:	0863      	lsrs	r3, r4, #1
 8000ad8:	4017      	ands	r7, r2
 8000ada:	2201      	movs	r2, #1
 8000adc:	4014      	ands	r4, r2
 8000ade:	431c      	orrs	r4, r3
 8000ae0:	07fb      	lsls	r3, r7, #31
 8000ae2:	431c      	orrs	r4, r3
 8000ae4:	087f      	lsrs	r7, r7, #1
 8000ae6:	e673      	b.n	80007d0 <__aeabi_dadd+0xf4>
 8000ae8:	4644      	mov	r4, r8
 8000aea:	3a20      	subs	r2, #32
 8000aec:	40d4      	lsrs	r4, r2
 8000aee:	4662      	mov	r2, ip
 8000af0:	2a20      	cmp	r2, #32
 8000af2:	d005      	beq.n	8000b00 <__aeabi_dadd+0x424>
 8000af4:	4667      	mov	r7, ip
 8000af6:	2240      	movs	r2, #64	; 0x40
 8000af8:	1bd2      	subs	r2, r2, r7
 8000afa:	4647      	mov	r7, r8
 8000afc:	4097      	lsls	r7, r2
 8000afe:	4339      	orrs	r1, r7
 8000b00:	1e4a      	subs	r2, r1, #1
 8000b02:	4191      	sbcs	r1, r2
 8000b04:	4321      	orrs	r1, r4
 8000b06:	e635      	b.n	8000774 <__aeabi_dadd+0x98>
 8000b08:	4303      	orrs	r3, r0
 8000b0a:	1e58      	subs	r0, r3, #1
 8000b0c:	4183      	sbcs	r3, r0
 8000b0e:	1acc      	subs	r4, r1, r3
 8000b10:	42a1      	cmp	r1, r4
 8000b12:	41bf      	sbcs	r7, r7
 8000b14:	4643      	mov	r3, r8
 8000b16:	427f      	negs	r7, r7
 8000b18:	4655      	mov	r5, sl
 8000b1a:	464e      	mov	r6, r9
 8000b1c:	1bdf      	subs	r7, r3, r7
 8000b1e:	e62e      	b.n	800077e <__aeabi_dadd+0xa2>
 8000b20:	0002      	movs	r2, r0
 8000b22:	431a      	orrs	r2, r3
 8000b24:	d100      	bne.n	8000b28 <__aeabi_dadd+0x44c>
 8000b26:	e0bd      	b.n	8000ca4 <__aeabi_dadd+0x5c8>
 8000b28:	4662      	mov	r2, ip
 8000b2a:	4664      	mov	r4, ip
 8000b2c:	3a01      	subs	r2, #1
 8000b2e:	2c01      	cmp	r4, #1
 8000b30:	d100      	bne.n	8000b34 <__aeabi_dadd+0x458>
 8000b32:	e0e5      	b.n	8000d00 <__aeabi_dadd+0x624>
 8000b34:	4c85      	ldr	r4, [pc, #532]	; (8000d4c <__aeabi_dadd+0x670>)
 8000b36:	45a4      	cmp	ip, r4
 8000b38:	d058      	beq.n	8000bec <__aeabi_dadd+0x510>
 8000b3a:	4694      	mov	ip, r2
 8000b3c:	e749      	b.n	80009d2 <__aeabi_dadd+0x2f6>
 8000b3e:	4664      	mov	r4, ip
 8000b40:	2220      	movs	r2, #32
 8000b42:	1b12      	subs	r2, r2, r4
 8000b44:	4644      	mov	r4, r8
 8000b46:	4094      	lsls	r4, r2
 8000b48:	000f      	movs	r7, r1
 8000b4a:	46a1      	mov	r9, r4
 8000b4c:	4664      	mov	r4, ip
 8000b4e:	4091      	lsls	r1, r2
 8000b50:	40e7      	lsrs	r7, r4
 8000b52:	464c      	mov	r4, r9
 8000b54:	1e4a      	subs	r2, r1, #1
 8000b56:	4191      	sbcs	r1, r2
 8000b58:	433c      	orrs	r4, r7
 8000b5a:	4642      	mov	r2, r8
 8000b5c:	430c      	orrs	r4, r1
 8000b5e:	4661      	mov	r1, ip
 8000b60:	40ca      	lsrs	r2, r1
 8000b62:	1880      	adds	r0, r0, r2
 8000b64:	e6f4      	b.n	8000950 <__aeabi_dadd+0x274>
 8000b66:	4c79      	ldr	r4, [pc, #484]	; (8000d4c <__aeabi_dadd+0x670>)
 8000b68:	42a2      	cmp	r2, r4
 8000b6a:	d100      	bne.n	8000b6e <__aeabi_dadd+0x492>
 8000b6c:	e6fd      	b.n	800096a <__aeabi_dadd+0x28e>
 8000b6e:	1859      	adds	r1, r3, r1
 8000b70:	4299      	cmp	r1, r3
 8000b72:	419b      	sbcs	r3, r3
 8000b74:	4440      	add	r0, r8
 8000b76:	425f      	negs	r7, r3
 8000b78:	19c7      	adds	r7, r0, r7
 8000b7a:	07fc      	lsls	r4, r7, #31
 8000b7c:	0849      	lsrs	r1, r1, #1
 8000b7e:	0016      	movs	r6, r2
 8000b80:	430c      	orrs	r4, r1
 8000b82:	087f      	lsrs	r7, r7, #1
 8000b84:	e6cf      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000b86:	1acc      	subs	r4, r1, r3
 8000b88:	42a1      	cmp	r1, r4
 8000b8a:	41bf      	sbcs	r7, r7
 8000b8c:	4643      	mov	r3, r8
 8000b8e:	427f      	negs	r7, r7
 8000b90:	1a18      	subs	r0, r3, r0
 8000b92:	4655      	mov	r5, sl
 8000b94:	1bc7      	subs	r7, r0, r7
 8000b96:	e5f7      	b.n	8000788 <__aeabi_dadd+0xac>
 8000b98:	08c9      	lsrs	r1, r1, #3
 8000b9a:	077b      	lsls	r3, r7, #29
 8000b9c:	4655      	mov	r5, sl
 8000b9e:	430b      	orrs	r3, r1
 8000ba0:	08f8      	lsrs	r0, r7, #3
 8000ba2:	e6c8      	b.n	8000936 <__aeabi_dadd+0x25a>
 8000ba4:	2c00      	cmp	r4, #0
 8000ba6:	d000      	beq.n	8000baa <__aeabi_dadd+0x4ce>
 8000ba8:	e081      	b.n	8000cae <__aeabi_dadd+0x5d2>
 8000baa:	4643      	mov	r3, r8
 8000bac:	430b      	orrs	r3, r1
 8000bae:	d115      	bne.n	8000bdc <__aeabi_dadd+0x500>
 8000bb0:	2080      	movs	r0, #128	; 0x80
 8000bb2:	2500      	movs	r5, #0
 8000bb4:	0300      	lsls	r0, r0, #12
 8000bb6:	e6e3      	b.n	8000980 <__aeabi_dadd+0x2a4>
 8000bb8:	1a5c      	subs	r4, r3, r1
 8000bba:	42a3      	cmp	r3, r4
 8000bbc:	419b      	sbcs	r3, r3
 8000bbe:	1bc7      	subs	r7, r0, r7
 8000bc0:	425b      	negs	r3, r3
 8000bc2:	2601      	movs	r6, #1
 8000bc4:	1aff      	subs	r7, r7, r3
 8000bc6:	e5da      	b.n	800077e <__aeabi_dadd+0xa2>
 8000bc8:	0742      	lsls	r2, r0, #29
 8000bca:	08db      	lsrs	r3, r3, #3
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	08c0      	lsrs	r0, r0, #3
 8000bd0:	e6d2      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000bd2:	0742      	lsls	r2, r0, #29
 8000bd4:	08db      	lsrs	r3, r3, #3
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	08c0      	lsrs	r0, r0, #3
 8000bda:	e6ac      	b.n	8000936 <__aeabi_dadd+0x25a>
 8000bdc:	4643      	mov	r3, r8
 8000bde:	4642      	mov	r2, r8
 8000be0:	08c9      	lsrs	r1, r1, #3
 8000be2:	075b      	lsls	r3, r3, #29
 8000be4:	4655      	mov	r5, sl
 8000be6:	430b      	orrs	r3, r1
 8000be8:	08d0      	lsrs	r0, r2, #3
 8000bea:	e6c5      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000bec:	4643      	mov	r3, r8
 8000bee:	4642      	mov	r2, r8
 8000bf0:	075b      	lsls	r3, r3, #29
 8000bf2:	08c9      	lsrs	r1, r1, #3
 8000bf4:	430b      	orrs	r3, r1
 8000bf6:	08d0      	lsrs	r0, r2, #3
 8000bf8:	e6be      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000bfa:	4303      	orrs	r3, r0
 8000bfc:	001c      	movs	r4, r3
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	e6fc      	b.n	80009fe <__aeabi_dadd+0x322>
 8000c04:	0002      	movs	r2, r0
 8000c06:	3c20      	subs	r4, #32
 8000c08:	40e2      	lsrs	r2, r4
 8000c0a:	0014      	movs	r4, r2
 8000c0c:	4662      	mov	r2, ip
 8000c0e:	2a20      	cmp	r2, #32
 8000c10:	d003      	beq.n	8000c1a <__aeabi_dadd+0x53e>
 8000c12:	2540      	movs	r5, #64	; 0x40
 8000c14:	1aad      	subs	r5, r5, r2
 8000c16:	40a8      	lsls	r0, r5
 8000c18:	4303      	orrs	r3, r0
 8000c1a:	1e58      	subs	r0, r3, #1
 8000c1c:	4183      	sbcs	r3, r0
 8000c1e:	4323      	orrs	r3, r4
 8000c20:	e775      	b.n	8000b0e <__aeabi_dadd+0x432>
 8000c22:	2a00      	cmp	r2, #0
 8000c24:	d0e2      	beq.n	8000bec <__aeabi_dadd+0x510>
 8000c26:	003a      	movs	r2, r7
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	d0cd      	beq.n	8000bc8 <__aeabi_dadd+0x4ec>
 8000c2c:	0742      	lsls	r2, r0, #29
 8000c2e:	08db      	lsrs	r3, r3, #3
 8000c30:	4313      	orrs	r3, r2
 8000c32:	2280      	movs	r2, #128	; 0x80
 8000c34:	08c0      	lsrs	r0, r0, #3
 8000c36:	0312      	lsls	r2, r2, #12
 8000c38:	4210      	tst	r0, r2
 8000c3a:	d006      	beq.n	8000c4a <__aeabi_dadd+0x56e>
 8000c3c:	08fc      	lsrs	r4, r7, #3
 8000c3e:	4214      	tst	r4, r2
 8000c40:	d103      	bne.n	8000c4a <__aeabi_dadd+0x56e>
 8000c42:	0020      	movs	r0, r4
 8000c44:	08cb      	lsrs	r3, r1, #3
 8000c46:	077a      	lsls	r2, r7, #29
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	0f5a      	lsrs	r2, r3, #29
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	0752      	lsls	r2, r2, #29
 8000c50:	08db      	lsrs	r3, r3, #3
 8000c52:	4313      	orrs	r3, r2
 8000c54:	e690      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000c56:	4643      	mov	r3, r8
 8000c58:	430b      	orrs	r3, r1
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dadd+0x582>
 8000c5c:	e709      	b.n	8000a72 <__aeabi_dadd+0x396>
 8000c5e:	4643      	mov	r3, r8
 8000c60:	4642      	mov	r2, r8
 8000c62:	08c9      	lsrs	r1, r1, #3
 8000c64:	075b      	lsls	r3, r3, #29
 8000c66:	4655      	mov	r5, sl
 8000c68:	430b      	orrs	r3, r1
 8000c6a:	08d0      	lsrs	r0, r2, #3
 8000c6c:	e666      	b.n	800093c <__aeabi_dadd+0x260>
 8000c6e:	1acc      	subs	r4, r1, r3
 8000c70:	42a1      	cmp	r1, r4
 8000c72:	4189      	sbcs	r1, r1
 8000c74:	1a3f      	subs	r7, r7, r0
 8000c76:	4249      	negs	r1, r1
 8000c78:	4655      	mov	r5, sl
 8000c7a:	2601      	movs	r6, #1
 8000c7c:	1a7f      	subs	r7, r7, r1
 8000c7e:	e57e      	b.n	800077e <__aeabi_dadd+0xa2>
 8000c80:	4642      	mov	r2, r8
 8000c82:	1a5c      	subs	r4, r3, r1
 8000c84:	1a87      	subs	r7, r0, r2
 8000c86:	42a3      	cmp	r3, r4
 8000c88:	4192      	sbcs	r2, r2
 8000c8a:	4252      	negs	r2, r2
 8000c8c:	1abf      	subs	r7, r7, r2
 8000c8e:	023a      	lsls	r2, r7, #8
 8000c90:	d53d      	bpl.n	8000d0e <__aeabi_dadd+0x632>
 8000c92:	1acc      	subs	r4, r1, r3
 8000c94:	42a1      	cmp	r1, r4
 8000c96:	4189      	sbcs	r1, r1
 8000c98:	4643      	mov	r3, r8
 8000c9a:	4249      	negs	r1, r1
 8000c9c:	1a1f      	subs	r7, r3, r0
 8000c9e:	4655      	mov	r5, sl
 8000ca0:	1a7f      	subs	r7, r7, r1
 8000ca2:	e595      	b.n	80007d0 <__aeabi_dadd+0xf4>
 8000ca4:	077b      	lsls	r3, r7, #29
 8000ca6:	08c9      	lsrs	r1, r1, #3
 8000ca8:	430b      	orrs	r3, r1
 8000caa:	08f8      	lsrs	r0, r7, #3
 8000cac:	e643      	b.n	8000936 <__aeabi_dadd+0x25a>
 8000cae:	4644      	mov	r4, r8
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	430c      	orrs	r4, r1
 8000cb4:	d130      	bne.n	8000d18 <__aeabi_dadd+0x63c>
 8000cb6:	0742      	lsls	r2, r0, #29
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	08c0      	lsrs	r0, r0, #3
 8000cbc:	e65c      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000cbe:	077b      	lsls	r3, r7, #29
 8000cc0:	08c9      	lsrs	r1, r1, #3
 8000cc2:	430b      	orrs	r3, r1
 8000cc4:	08f8      	lsrs	r0, r7, #3
 8000cc6:	e639      	b.n	800093c <__aeabi_dadd+0x260>
 8000cc8:	185c      	adds	r4, r3, r1
 8000cca:	429c      	cmp	r4, r3
 8000ccc:	419b      	sbcs	r3, r3
 8000cce:	4440      	add	r0, r8
 8000cd0:	425b      	negs	r3, r3
 8000cd2:	18c7      	adds	r7, r0, r3
 8000cd4:	023b      	lsls	r3, r7, #8
 8000cd6:	d400      	bmi.n	8000cda <__aeabi_dadd+0x5fe>
 8000cd8:	e625      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000cda:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <__aeabi_dadd+0x674>)
 8000cdc:	2601      	movs	r6, #1
 8000cde:	401f      	ands	r7, r3
 8000ce0:	e621      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000ce2:	0004      	movs	r4, r0
 8000ce4:	3a20      	subs	r2, #32
 8000ce6:	40d4      	lsrs	r4, r2
 8000ce8:	4662      	mov	r2, ip
 8000cea:	2a20      	cmp	r2, #32
 8000cec:	d004      	beq.n	8000cf8 <__aeabi_dadd+0x61c>
 8000cee:	2240      	movs	r2, #64	; 0x40
 8000cf0:	4666      	mov	r6, ip
 8000cf2:	1b92      	subs	r2, r2, r6
 8000cf4:	4090      	lsls	r0, r2
 8000cf6:	4303      	orrs	r3, r0
 8000cf8:	1e5a      	subs	r2, r3, #1
 8000cfa:	4193      	sbcs	r3, r2
 8000cfc:	431c      	orrs	r4, r3
 8000cfe:	e67e      	b.n	80009fe <__aeabi_dadd+0x322>
 8000d00:	185c      	adds	r4, r3, r1
 8000d02:	428c      	cmp	r4, r1
 8000d04:	4189      	sbcs	r1, r1
 8000d06:	4440      	add	r0, r8
 8000d08:	4249      	negs	r1, r1
 8000d0a:	1847      	adds	r7, r0, r1
 8000d0c:	e6dd      	b.n	8000aca <__aeabi_dadd+0x3ee>
 8000d0e:	0023      	movs	r3, r4
 8000d10:	433b      	orrs	r3, r7
 8000d12:	d100      	bne.n	8000d16 <__aeabi_dadd+0x63a>
 8000d14:	e6ad      	b.n	8000a72 <__aeabi_dadd+0x396>
 8000d16:	e606      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000d18:	0744      	lsls	r4, r0, #29
 8000d1a:	4323      	orrs	r3, r4
 8000d1c:	2480      	movs	r4, #128	; 0x80
 8000d1e:	08c0      	lsrs	r0, r0, #3
 8000d20:	0324      	lsls	r4, r4, #12
 8000d22:	4220      	tst	r0, r4
 8000d24:	d008      	beq.n	8000d38 <__aeabi_dadd+0x65c>
 8000d26:	4642      	mov	r2, r8
 8000d28:	08d6      	lsrs	r6, r2, #3
 8000d2a:	4226      	tst	r6, r4
 8000d2c:	d104      	bne.n	8000d38 <__aeabi_dadd+0x65c>
 8000d2e:	4655      	mov	r5, sl
 8000d30:	0030      	movs	r0, r6
 8000d32:	08cb      	lsrs	r3, r1, #3
 8000d34:	0751      	lsls	r1, r2, #29
 8000d36:	430b      	orrs	r3, r1
 8000d38:	0f5a      	lsrs	r2, r3, #29
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	08db      	lsrs	r3, r3, #3
 8000d3e:	0752      	lsls	r2, r2, #29
 8000d40:	4313      	orrs	r3, r2
 8000d42:	e619      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000d44:	2300      	movs	r3, #0
 8000d46:	4a01      	ldr	r2, [pc, #4]	; (8000d4c <__aeabi_dadd+0x670>)
 8000d48:	001f      	movs	r7, r3
 8000d4a:	e55e      	b.n	800080a <__aeabi_dadd+0x12e>
 8000d4c:	000007ff 	.word	0x000007ff
 8000d50:	ff7fffff 	.word	0xff7fffff

08000d54 <__aeabi_ddiv>:
 8000d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d56:	4657      	mov	r7, sl
 8000d58:	464e      	mov	r6, r9
 8000d5a:	4645      	mov	r5, r8
 8000d5c:	46de      	mov	lr, fp
 8000d5e:	b5e0      	push	{r5, r6, r7, lr}
 8000d60:	4681      	mov	r9, r0
 8000d62:	0005      	movs	r5, r0
 8000d64:	030c      	lsls	r4, r1, #12
 8000d66:	0048      	lsls	r0, r1, #1
 8000d68:	4692      	mov	sl, r2
 8000d6a:	001f      	movs	r7, r3
 8000d6c:	b085      	sub	sp, #20
 8000d6e:	0b24      	lsrs	r4, r4, #12
 8000d70:	0d40      	lsrs	r0, r0, #21
 8000d72:	0fce      	lsrs	r6, r1, #31
 8000d74:	2800      	cmp	r0, #0
 8000d76:	d100      	bne.n	8000d7a <__aeabi_ddiv+0x26>
 8000d78:	e156      	b.n	8001028 <__aeabi_ddiv+0x2d4>
 8000d7a:	4bd4      	ldr	r3, [pc, #848]	; (80010cc <__aeabi_ddiv+0x378>)
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_ddiv+0x2e>
 8000d80:	e172      	b.n	8001068 <__aeabi_ddiv+0x314>
 8000d82:	0f6b      	lsrs	r3, r5, #29
 8000d84:	00e4      	lsls	r4, r4, #3
 8000d86:	431c      	orrs	r4, r3
 8000d88:	2380      	movs	r3, #128	; 0x80
 8000d8a:	041b      	lsls	r3, r3, #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	4698      	mov	r8, r3
 8000d90:	4bcf      	ldr	r3, [pc, #828]	; (80010d0 <__aeabi_ddiv+0x37c>)
 8000d92:	00ed      	lsls	r5, r5, #3
 8000d94:	469b      	mov	fp, r3
 8000d96:	2300      	movs	r3, #0
 8000d98:	4699      	mov	r9, r3
 8000d9a:	4483      	add	fp, r0
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	033c      	lsls	r4, r7, #12
 8000da0:	007b      	lsls	r3, r7, #1
 8000da2:	4650      	mov	r0, sl
 8000da4:	0b24      	lsrs	r4, r4, #12
 8000da6:	0d5b      	lsrs	r3, r3, #21
 8000da8:	0fff      	lsrs	r7, r7, #31
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d100      	bne.n	8000db0 <__aeabi_ddiv+0x5c>
 8000dae:	e11f      	b.n	8000ff0 <__aeabi_ddiv+0x29c>
 8000db0:	4ac6      	ldr	r2, [pc, #792]	; (80010cc <__aeabi_ddiv+0x378>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d100      	bne.n	8000db8 <__aeabi_ddiv+0x64>
 8000db6:	e162      	b.n	800107e <__aeabi_ddiv+0x32a>
 8000db8:	49c5      	ldr	r1, [pc, #788]	; (80010d0 <__aeabi_ddiv+0x37c>)
 8000dba:	0f42      	lsrs	r2, r0, #29
 8000dbc:	468c      	mov	ip, r1
 8000dbe:	00e4      	lsls	r4, r4, #3
 8000dc0:	4659      	mov	r1, fp
 8000dc2:	4314      	orrs	r4, r2
 8000dc4:	2280      	movs	r2, #128	; 0x80
 8000dc6:	4463      	add	r3, ip
 8000dc8:	0412      	lsls	r2, r2, #16
 8000dca:	1acb      	subs	r3, r1, r3
 8000dcc:	4314      	orrs	r4, r2
 8000dce:	469b      	mov	fp, r3
 8000dd0:	00c2      	lsls	r2, r0, #3
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	0033      	movs	r3, r6
 8000dd6:	407b      	eors	r3, r7
 8000dd8:	469a      	mov	sl, r3
 8000dda:	464b      	mov	r3, r9
 8000ddc:	2b0f      	cmp	r3, #15
 8000dde:	d827      	bhi.n	8000e30 <__aeabi_ddiv+0xdc>
 8000de0:	49bc      	ldr	r1, [pc, #752]	; (80010d4 <__aeabi_ddiv+0x380>)
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	58cb      	ldr	r3, [r1, r3]
 8000de6:	469f      	mov	pc, r3
 8000de8:	46b2      	mov	sl, r6
 8000dea:	9b00      	ldr	r3, [sp, #0]
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d016      	beq.n	8000e1e <__aeabi_ddiv+0xca>
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	d100      	bne.n	8000df6 <__aeabi_ddiv+0xa2>
 8000df4:	e28e      	b.n	8001314 <__aeabi_ddiv+0x5c0>
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d000      	beq.n	8000dfc <__aeabi_ddiv+0xa8>
 8000dfa:	e0d9      	b.n	8000fb0 <__aeabi_ddiv+0x25c>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	2400      	movs	r4, #0
 8000e00:	2500      	movs	r5, #0
 8000e02:	4652      	mov	r2, sl
 8000e04:	051b      	lsls	r3, r3, #20
 8000e06:	4323      	orrs	r3, r4
 8000e08:	07d2      	lsls	r2, r2, #31
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	0028      	movs	r0, r5
 8000e0e:	0019      	movs	r1, r3
 8000e10:	b005      	add	sp, #20
 8000e12:	bcf0      	pop	{r4, r5, r6, r7}
 8000e14:	46bb      	mov	fp, r7
 8000e16:	46b2      	mov	sl, r6
 8000e18:	46a9      	mov	r9, r5
 8000e1a:	46a0      	mov	r8, r4
 8000e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e1e:	2400      	movs	r4, #0
 8000e20:	2500      	movs	r5, #0
 8000e22:	4baa      	ldr	r3, [pc, #680]	; (80010cc <__aeabi_ddiv+0x378>)
 8000e24:	e7ed      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8000e26:	46ba      	mov	sl, r7
 8000e28:	46a0      	mov	r8, r4
 8000e2a:	0015      	movs	r5, r2
 8000e2c:	9000      	str	r0, [sp, #0]
 8000e2e:	e7dc      	b.n	8000dea <__aeabi_ddiv+0x96>
 8000e30:	4544      	cmp	r4, r8
 8000e32:	d200      	bcs.n	8000e36 <__aeabi_ddiv+0xe2>
 8000e34:	e1c7      	b.n	80011c6 <__aeabi_ddiv+0x472>
 8000e36:	d100      	bne.n	8000e3a <__aeabi_ddiv+0xe6>
 8000e38:	e1c2      	b.n	80011c0 <__aeabi_ddiv+0x46c>
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	425b      	negs	r3, r3
 8000e3e:	469c      	mov	ip, r3
 8000e40:	002e      	movs	r6, r5
 8000e42:	4640      	mov	r0, r8
 8000e44:	2500      	movs	r5, #0
 8000e46:	44e3      	add	fp, ip
 8000e48:	0223      	lsls	r3, r4, #8
 8000e4a:	0e14      	lsrs	r4, r2, #24
 8000e4c:	431c      	orrs	r4, r3
 8000e4e:	0c1b      	lsrs	r3, r3, #16
 8000e50:	4699      	mov	r9, r3
 8000e52:	0423      	lsls	r3, r4, #16
 8000e54:	0c1f      	lsrs	r7, r3, #16
 8000e56:	0212      	lsls	r2, r2, #8
 8000e58:	4649      	mov	r1, r9
 8000e5a:	9200      	str	r2, [sp, #0]
 8000e5c:	9701      	str	r7, [sp, #4]
 8000e5e:	f7ff f9f5 	bl	800024c <__aeabi_uidivmod>
 8000e62:	0002      	movs	r2, r0
 8000e64:	437a      	muls	r2, r7
 8000e66:	040b      	lsls	r3, r1, #16
 8000e68:	0c31      	lsrs	r1, r6, #16
 8000e6a:	4680      	mov	r8, r0
 8000e6c:	4319      	orrs	r1, r3
 8000e6e:	428a      	cmp	r2, r1
 8000e70:	d907      	bls.n	8000e82 <__aeabi_ddiv+0x12e>
 8000e72:	2301      	movs	r3, #1
 8000e74:	425b      	negs	r3, r3
 8000e76:	469c      	mov	ip, r3
 8000e78:	1909      	adds	r1, r1, r4
 8000e7a:	44e0      	add	r8, ip
 8000e7c:	428c      	cmp	r4, r1
 8000e7e:	d800      	bhi.n	8000e82 <__aeabi_ddiv+0x12e>
 8000e80:	e207      	b.n	8001292 <__aeabi_ddiv+0x53e>
 8000e82:	1a88      	subs	r0, r1, r2
 8000e84:	4649      	mov	r1, r9
 8000e86:	f7ff f9e1 	bl	800024c <__aeabi_uidivmod>
 8000e8a:	0409      	lsls	r1, r1, #16
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	0431      	lsls	r1, r6, #16
 8000e90:	4666      	mov	r6, ip
 8000e92:	9a01      	ldr	r2, [sp, #4]
 8000e94:	0c09      	lsrs	r1, r1, #16
 8000e96:	4342      	muls	r2, r0
 8000e98:	0003      	movs	r3, r0
 8000e9a:	4331      	orrs	r1, r6
 8000e9c:	428a      	cmp	r2, r1
 8000e9e:	d904      	bls.n	8000eaa <__aeabi_ddiv+0x156>
 8000ea0:	1909      	adds	r1, r1, r4
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	428c      	cmp	r4, r1
 8000ea6:	d800      	bhi.n	8000eaa <__aeabi_ddiv+0x156>
 8000ea8:	e1ed      	b.n	8001286 <__aeabi_ddiv+0x532>
 8000eaa:	1a88      	subs	r0, r1, r2
 8000eac:	4642      	mov	r2, r8
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4641      	mov	r1, r8
 8000eb6:	9b00      	ldr	r3, [sp, #0]
 8000eb8:	040e      	lsls	r6, r1, #16
 8000eba:	0c1b      	lsrs	r3, r3, #16
 8000ebc:	001f      	movs	r7, r3
 8000ebe:	9302      	str	r3, [sp, #8]
 8000ec0:	9b00      	ldr	r3, [sp, #0]
 8000ec2:	0c36      	lsrs	r6, r6, #16
 8000ec4:	041b      	lsls	r3, r3, #16
 8000ec6:	0c19      	lsrs	r1, r3, #16
 8000ec8:	000b      	movs	r3, r1
 8000eca:	4373      	muls	r3, r6
 8000ecc:	0c12      	lsrs	r2, r2, #16
 8000ece:	437e      	muls	r6, r7
 8000ed0:	9103      	str	r1, [sp, #12]
 8000ed2:	4351      	muls	r1, r2
 8000ed4:	437a      	muls	r2, r7
 8000ed6:	0c1f      	lsrs	r7, r3, #16
 8000ed8:	46bc      	mov	ip, r7
 8000eda:	1876      	adds	r6, r6, r1
 8000edc:	4466      	add	r6, ip
 8000ede:	42b1      	cmp	r1, r6
 8000ee0:	d903      	bls.n	8000eea <__aeabi_ddiv+0x196>
 8000ee2:	2180      	movs	r1, #128	; 0x80
 8000ee4:	0249      	lsls	r1, r1, #9
 8000ee6:	468c      	mov	ip, r1
 8000ee8:	4462      	add	r2, ip
 8000eea:	0c31      	lsrs	r1, r6, #16
 8000eec:	188a      	adds	r2, r1, r2
 8000eee:	0431      	lsls	r1, r6, #16
 8000ef0:	041e      	lsls	r6, r3, #16
 8000ef2:	0c36      	lsrs	r6, r6, #16
 8000ef4:	198e      	adds	r6, r1, r6
 8000ef6:	4290      	cmp	r0, r2
 8000ef8:	d302      	bcc.n	8000f00 <__aeabi_ddiv+0x1ac>
 8000efa:	d112      	bne.n	8000f22 <__aeabi_ddiv+0x1ce>
 8000efc:	42b5      	cmp	r5, r6
 8000efe:	d210      	bcs.n	8000f22 <__aeabi_ddiv+0x1ce>
 8000f00:	4643      	mov	r3, r8
 8000f02:	1e59      	subs	r1, r3, #1
 8000f04:	9b00      	ldr	r3, [sp, #0]
 8000f06:	469c      	mov	ip, r3
 8000f08:	4465      	add	r5, ip
 8000f0a:	001f      	movs	r7, r3
 8000f0c:	429d      	cmp	r5, r3
 8000f0e:	419b      	sbcs	r3, r3
 8000f10:	425b      	negs	r3, r3
 8000f12:	191b      	adds	r3, r3, r4
 8000f14:	18c0      	adds	r0, r0, r3
 8000f16:	4284      	cmp	r4, r0
 8000f18:	d200      	bcs.n	8000f1c <__aeabi_ddiv+0x1c8>
 8000f1a:	e1a0      	b.n	800125e <__aeabi_ddiv+0x50a>
 8000f1c:	d100      	bne.n	8000f20 <__aeabi_ddiv+0x1cc>
 8000f1e:	e19b      	b.n	8001258 <__aeabi_ddiv+0x504>
 8000f20:	4688      	mov	r8, r1
 8000f22:	1bae      	subs	r6, r5, r6
 8000f24:	42b5      	cmp	r5, r6
 8000f26:	41ad      	sbcs	r5, r5
 8000f28:	1a80      	subs	r0, r0, r2
 8000f2a:	426d      	negs	r5, r5
 8000f2c:	1b40      	subs	r0, r0, r5
 8000f2e:	4284      	cmp	r4, r0
 8000f30:	d100      	bne.n	8000f34 <__aeabi_ddiv+0x1e0>
 8000f32:	e1d5      	b.n	80012e0 <__aeabi_ddiv+0x58c>
 8000f34:	4649      	mov	r1, r9
 8000f36:	f7ff f989 	bl	800024c <__aeabi_uidivmod>
 8000f3a:	9a01      	ldr	r2, [sp, #4]
 8000f3c:	040b      	lsls	r3, r1, #16
 8000f3e:	4342      	muls	r2, r0
 8000f40:	0c31      	lsrs	r1, r6, #16
 8000f42:	0005      	movs	r5, r0
 8000f44:	4319      	orrs	r1, r3
 8000f46:	428a      	cmp	r2, r1
 8000f48:	d900      	bls.n	8000f4c <__aeabi_ddiv+0x1f8>
 8000f4a:	e16c      	b.n	8001226 <__aeabi_ddiv+0x4d2>
 8000f4c:	1a88      	subs	r0, r1, r2
 8000f4e:	4649      	mov	r1, r9
 8000f50:	f7ff f97c 	bl	800024c <__aeabi_uidivmod>
 8000f54:	9a01      	ldr	r2, [sp, #4]
 8000f56:	0436      	lsls	r6, r6, #16
 8000f58:	4342      	muls	r2, r0
 8000f5a:	0409      	lsls	r1, r1, #16
 8000f5c:	0c36      	lsrs	r6, r6, #16
 8000f5e:	0003      	movs	r3, r0
 8000f60:	430e      	orrs	r6, r1
 8000f62:	42b2      	cmp	r2, r6
 8000f64:	d900      	bls.n	8000f68 <__aeabi_ddiv+0x214>
 8000f66:	e153      	b.n	8001210 <__aeabi_ddiv+0x4bc>
 8000f68:	9803      	ldr	r0, [sp, #12]
 8000f6a:	1ab6      	subs	r6, r6, r2
 8000f6c:	0002      	movs	r2, r0
 8000f6e:	042d      	lsls	r5, r5, #16
 8000f70:	431d      	orrs	r5, r3
 8000f72:	9f02      	ldr	r7, [sp, #8]
 8000f74:	042b      	lsls	r3, r5, #16
 8000f76:	0c1b      	lsrs	r3, r3, #16
 8000f78:	435a      	muls	r2, r3
 8000f7a:	437b      	muls	r3, r7
 8000f7c:	469c      	mov	ip, r3
 8000f7e:	0c29      	lsrs	r1, r5, #16
 8000f80:	4348      	muls	r0, r1
 8000f82:	0c13      	lsrs	r3, r2, #16
 8000f84:	4484      	add	ip, r0
 8000f86:	4463      	add	r3, ip
 8000f88:	4379      	muls	r1, r7
 8000f8a:	4298      	cmp	r0, r3
 8000f8c:	d903      	bls.n	8000f96 <__aeabi_ddiv+0x242>
 8000f8e:	2080      	movs	r0, #128	; 0x80
 8000f90:	0240      	lsls	r0, r0, #9
 8000f92:	4684      	mov	ip, r0
 8000f94:	4461      	add	r1, ip
 8000f96:	0c18      	lsrs	r0, r3, #16
 8000f98:	0412      	lsls	r2, r2, #16
 8000f9a:	041b      	lsls	r3, r3, #16
 8000f9c:	0c12      	lsrs	r2, r2, #16
 8000f9e:	1841      	adds	r1, r0, r1
 8000fa0:	189b      	adds	r3, r3, r2
 8000fa2:	428e      	cmp	r6, r1
 8000fa4:	d200      	bcs.n	8000fa8 <__aeabi_ddiv+0x254>
 8000fa6:	e0ff      	b.n	80011a8 <__aeabi_ddiv+0x454>
 8000fa8:	d100      	bne.n	8000fac <__aeabi_ddiv+0x258>
 8000faa:	e0fa      	b.n	80011a2 <__aeabi_ddiv+0x44e>
 8000fac:	2301      	movs	r3, #1
 8000fae:	431d      	orrs	r5, r3
 8000fb0:	4a49      	ldr	r2, [pc, #292]	; (80010d8 <__aeabi_ddiv+0x384>)
 8000fb2:	445a      	add	r2, fp
 8000fb4:	2a00      	cmp	r2, #0
 8000fb6:	dc00      	bgt.n	8000fba <__aeabi_ddiv+0x266>
 8000fb8:	e0aa      	b.n	8001110 <__aeabi_ddiv+0x3bc>
 8000fba:	076b      	lsls	r3, r5, #29
 8000fbc:	d000      	beq.n	8000fc0 <__aeabi_ddiv+0x26c>
 8000fbe:	e13d      	b.n	800123c <__aeabi_ddiv+0x4e8>
 8000fc0:	08ed      	lsrs	r5, r5, #3
 8000fc2:	4643      	mov	r3, r8
 8000fc4:	01db      	lsls	r3, r3, #7
 8000fc6:	d506      	bpl.n	8000fd6 <__aeabi_ddiv+0x282>
 8000fc8:	4642      	mov	r2, r8
 8000fca:	4b44      	ldr	r3, [pc, #272]	; (80010dc <__aeabi_ddiv+0x388>)
 8000fcc:	401a      	ands	r2, r3
 8000fce:	4690      	mov	r8, r2
 8000fd0:	2280      	movs	r2, #128	; 0x80
 8000fd2:	00d2      	lsls	r2, r2, #3
 8000fd4:	445a      	add	r2, fp
 8000fd6:	4b42      	ldr	r3, [pc, #264]	; (80010e0 <__aeabi_ddiv+0x38c>)
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	dd00      	ble.n	8000fde <__aeabi_ddiv+0x28a>
 8000fdc:	e71f      	b.n	8000e1e <__aeabi_ddiv+0xca>
 8000fde:	4643      	mov	r3, r8
 8000fe0:	075b      	lsls	r3, r3, #29
 8000fe2:	431d      	orrs	r5, r3
 8000fe4:	4643      	mov	r3, r8
 8000fe6:	0552      	lsls	r2, r2, #21
 8000fe8:	025c      	lsls	r4, r3, #9
 8000fea:	0b24      	lsrs	r4, r4, #12
 8000fec:	0d53      	lsrs	r3, r2, #21
 8000fee:	e708      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8000ff0:	4652      	mov	r2, sl
 8000ff2:	4322      	orrs	r2, r4
 8000ff4:	d100      	bne.n	8000ff8 <__aeabi_ddiv+0x2a4>
 8000ff6:	e07b      	b.n	80010f0 <__aeabi_ddiv+0x39c>
 8000ff8:	2c00      	cmp	r4, #0
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_ddiv+0x2aa>
 8000ffc:	e0fa      	b.n	80011f4 <__aeabi_ddiv+0x4a0>
 8000ffe:	0020      	movs	r0, r4
 8001000:	f001 f952 	bl	80022a8 <__clzsi2>
 8001004:	0002      	movs	r2, r0
 8001006:	3a0b      	subs	r2, #11
 8001008:	231d      	movs	r3, #29
 800100a:	0001      	movs	r1, r0
 800100c:	1a9b      	subs	r3, r3, r2
 800100e:	4652      	mov	r2, sl
 8001010:	3908      	subs	r1, #8
 8001012:	40da      	lsrs	r2, r3
 8001014:	408c      	lsls	r4, r1
 8001016:	4314      	orrs	r4, r2
 8001018:	4652      	mov	r2, sl
 800101a:	408a      	lsls	r2, r1
 800101c:	4b31      	ldr	r3, [pc, #196]	; (80010e4 <__aeabi_ddiv+0x390>)
 800101e:	4458      	add	r0, fp
 8001020:	469b      	mov	fp, r3
 8001022:	4483      	add	fp, r0
 8001024:	2000      	movs	r0, #0
 8001026:	e6d5      	b.n	8000dd4 <__aeabi_ddiv+0x80>
 8001028:	464b      	mov	r3, r9
 800102a:	4323      	orrs	r3, r4
 800102c:	4698      	mov	r8, r3
 800102e:	d044      	beq.n	80010ba <__aeabi_ddiv+0x366>
 8001030:	2c00      	cmp	r4, #0
 8001032:	d100      	bne.n	8001036 <__aeabi_ddiv+0x2e2>
 8001034:	e0ce      	b.n	80011d4 <__aeabi_ddiv+0x480>
 8001036:	0020      	movs	r0, r4
 8001038:	f001 f936 	bl	80022a8 <__clzsi2>
 800103c:	0001      	movs	r1, r0
 800103e:	0002      	movs	r2, r0
 8001040:	390b      	subs	r1, #11
 8001042:	231d      	movs	r3, #29
 8001044:	1a5b      	subs	r3, r3, r1
 8001046:	4649      	mov	r1, r9
 8001048:	0010      	movs	r0, r2
 800104a:	40d9      	lsrs	r1, r3
 800104c:	3808      	subs	r0, #8
 800104e:	4084      	lsls	r4, r0
 8001050:	000b      	movs	r3, r1
 8001052:	464d      	mov	r5, r9
 8001054:	4323      	orrs	r3, r4
 8001056:	4698      	mov	r8, r3
 8001058:	4085      	lsls	r5, r0
 800105a:	4823      	ldr	r0, [pc, #140]	; (80010e8 <__aeabi_ddiv+0x394>)
 800105c:	1a83      	subs	r3, r0, r2
 800105e:	469b      	mov	fp, r3
 8001060:	2300      	movs	r3, #0
 8001062:	4699      	mov	r9, r3
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	e69a      	b.n	8000d9e <__aeabi_ddiv+0x4a>
 8001068:	464b      	mov	r3, r9
 800106a:	4323      	orrs	r3, r4
 800106c:	4698      	mov	r8, r3
 800106e:	d11d      	bne.n	80010ac <__aeabi_ddiv+0x358>
 8001070:	2308      	movs	r3, #8
 8001072:	4699      	mov	r9, r3
 8001074:	3b06      	subs	r3, #6
 8001076:	2500      	movs	r5, #0
 8001078:	4683      	mov	fp, r0
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	e68f      	b.n	8000d9e <__aeabi_ddiv+0x4a>
 800107e:	4652      	mov	r2, sl
 8001080:	4322      	orrs	r2, r4
 8001082:	d109      	bne.n	8001098 <__aeabi_ddiv+0x344>
 8001084:	2302      	movs	r3, #2
 8001086:	4649      	mov	r1, r9
 8001088:	4319      	orrs	r1, r3
 800108a:	4b18      	ldr	r3, [pc, #96]	; (80010ec <__aeabi_ddiv+0x398>)
 800108c:	4689      	mov	r9, r1
 800108e:	469c      	mov	ip, r3
 8001090:	2400      	movs	r4, #0
 8001092:	2002      	movs	r0, #2
 8001094:	44e3      	add	fp, ip
 8001096:	e69d      	b.n	8000dd4 <__aeabi_ddiv+0x80>
 8001098:	2303      	movs	r3, #3
 800109a:	464a      	mov	r2, r9
 800109c:	431a      	orrs	r2, r3
 800109e:	4b13      	ldr	r3, [pc, #76]	; (80010ec <__aeabi_ddiv+0x398>)
 80010a0:	4691      	mov	r9, r2
 80010a2:	469c      	mov	ip, r3
 80010a4:	4652      	mov	r2, sl
 80010a6:	2003      	movs	r0, #3
 80010a8:	44e3      	add	fp, ip
 80010aa:	e693      	b.n	8000dd4 <__aeabi_ddiv+0x80>
 80010ac:	230c      	movs	r3, #12
 80010ae:	4699      	mov	r9, r3
 80010b0:	3b09      	subs	r3, #9
 80010b2:	46a0      	mov	r8, r4
 80010b4:	4683      	mov	fp, r0
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	e671      	b.n	8000d9e <__aeabi_ddiv+0x4a>
 80010ba:	2304      	movs	r3, #4
 80010bc:	4699      	mov	r9, r3
 80010be:	2300      	movs	r3, #0
 80010c0:	469b      	mov	fp, r3
 80010c2:	3301      	adds	r3, #1
 80010c4:	2500      	movs	r5, #0
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	e669      	b.n	8000d9e <__aeabi_ddiv+0x4a>
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	000007ff 	.word	0x000007ff
 80010d0:	fffffc01 	.word	0xfffffc01
 80010d4:	08007f68 	.word	0x08007f68
 80010d8:	000003ff 	.word	0x000003ff
 80010dc:	feffffff 	.word	0xfeffffff
 80010e0:	000007fe 	.word	0x000007fe
 80010e4:	000003f3 	.word	0x000003f3
 80010e8:	fffffc0d 	.word	0xfffffc0d
 80010ec:	fffff801 	.word	0xfffff801
 80010f0:	4649      	mov	r1, r9
 80010f2:	2301      	movs	r3, #1
 80010f4:	4319      	orrs	r1, r3
 80010f6:	4689      	mov	r9, r1
 80010f8:	2400      	movs	r4, #0
 80010fa:	2001      	movs	r0, #1
 80010fc:	e66a      	b.n	8000dd4 <__aeabi_ddiv+0x80>
 80010fe:	2300      	movs	r3, #0
 8001100:	2480      	movs	r4, #128	; 0x80
 8001102:	469a      	mov	sl, r3
 8001104:	2500      	movs	r5, #0
 8001106:	4b8a      	ldr	r3, [pc, #552]	; (8001330 <__aeabi_ddiv+0x5dc>)
 8001108:	0324      	lsls	r4, r4, #12
 800110a:	e67a      	b.n	8000e02 <__aeabi_ddiv+0xae>
 800110c:	2501      	movs	r5, #1
 800110e:	426d      	negs	r5, r5
 8001110:	2301      	movs	r3, #1
 8001112:	1a9b      	subs	r3, r3, r2
 8001114:	2b38      	cmp	r3, #56	; 0x38
 8001116:	dd00      	ble.n	800111a <__aeabi_ddiv+0x3c6>
 8001118:	e670      	b.n	8000dfc <__aeabi_ddiv+0xa8>
 800111a:	2b1f      	cmp	r3, #31
 800111c:	dc00      	bgt.n	8001120 <__aeabi_ddiv+0x3cc>
 800111e:	e0bf      	b.n	80012a0 <__aeabi_ddiv+0x54c>
 8001120:	211f      	movs	r1, #31
 8001122:	4249      	negs	r1, r1
 8001124:	1a8a      	subs	r2, r1, r2
 8001126:	4641      	mov	r1, r8
 8001128:	40d1      	lsrs	r1, r2
 800112a:	000a      	movs	r2, r1
 800112c:	2b20      	cmp	r3, #32
 800112e:	d004      	beq.n	800113a <__aeabi_ddiv+0x3e6>
 8001130:	4641      	mov	r1, r8
 8001132:	4b80      	ldr	r3, [pc, #512]	; (8001334 <__aeabi_ddiv+0x5e0>)
 8001134:	445b      	add	r3, fp
 8001136:	4099      	lsls	r1, r3
 8001138:	430d      	orrs	r5, r1
 800113a:	1e6b      	subs	r3, r5, #1
 800113c:	419d      	sbcs	r5, r3
 800113e:	2307      	movs	r3, #7
 8001140:	432a      	orrs	r2, r5
 8001142:	001d      	movs	r5, r3
 8001144:	2400      	movs	r4, #0
 8001146:	4015      	ands	r5, r2
 8001148:	4213      	tst	r3, r2
 800114a:	d100      	bne.n	800114e <__aeabi_ddiv+0x3fa>
 800114c:	e0d4      	b.n	80012f8 <__aeabi_ddiv+0x5a4>
 800114e:	210f      	movs	r1, #15
 8001150:	2300      	movs	r3, #0
 8001152:	4011      	ands	r1, r2
 8001154:	2904      	cmp	r1, #4
 8001156:	d100      	bne.n	800115a <__aeabi_ddiv+0x406>
 8001158:	e0cb      	b.n	80012f2 <__aeabi_ddiv+0x59e>
 800115a:	1d11      	adds	r1, r2, #4
 800115c:	4291      	cmp	r1, r2
 800115e:	4192      	sbcs	r2, r2
 8001160:	4252      	negs	r2, r2
 8001162:	189b      	adds	r3, r3, r2
 8001164:	000a      	movs	r2, r1
 8001166:	0219      	lsls	r1, r3, #8
 8001168:	d400      	bmi.n	800116c <__aeabi_ddiv+0x418>
 800116a:	e0c2      	b.n	80012f2 <__aeabi_ddiv+0x59e>
 800116c:	2301      	movs	r3, #1
 800116e:	2400      	movs	r4, #0
 8001170:	2500      	movs	r5, #0
 8001172:	e646      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8001174:	2380      	movs	r3, #128	; 0x80
 8001176:	4641      	mov	r1, r8
 8001178:	031b      	lsls	r3, r3, #12
 800117a:	4219      	tst	r1, r3
 800117c:	d008      	beq.n	8001190 <__aeabi_ddiv+0x43c>
 800117e:	421c      	tst	r4, r3
 8001180:	d106      	bne.n	8001190 <__aeabi_ddiv+0x43c>
 8001182:	431c      	orrs	r4, r3
 8001184:	0324      	lsls	r4, r4, #12
 8001186:	46ba      	mov	sl, r7
 8001188:	0015      	movs	r5, r2
 800118a:	4b69      	ldr	r3, [pc, #420]	; (8001330 <__aeabi_ddiv+0x5dc>)
 800118c:	0b24      	lsrs	r4, r4, #12
 800118e:	e638      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8001190:	2480      	movs	r4, #128	; 0x80
 8001192:	4643      	mov	r3, r8
 8001194:	0324      	lsls	r4, r4, #12
 8001196:	431c      	orrs	r4, r3
 8001198:	0324      	lsls	r4, r4, #12
 800119a:	46b2      	mov	sl, r6
 800119c:	4b64      	ldr	r3, [pc, #400]	; (8001330 <__aeabi_ddiv+0x5dc>)
 800119e:	0b24      	lsrs	r4, r4, #12
 80011a0:	e62f      	b.n	8000e02 <__aeabi_ddiv+0xae>
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d100      	bne.n	80011a8 <__aeabi_ddiv+0x454>
 80011a6:	e703      	b.n	8000fb0 <__aeabi_ddiv+0x25c>
 80011a8:	19a6      	adds	r6, r4, r6
 80011aa:	1e68      	subs	r0, r5, #1
 80011ac:	42a6      	cmp	r6, r4
 80011ae:	d200      	bcs.n	80011b2 <__aeabi_ddiv+0x45e>
 80011b0:	e08d      	b.n	80012ce <__aeabi_ddiv+0x57a>
 80011b2:	428e      	cmp	r6, r1
 80011b4:	d200      	bcs.n	80011b8 <__aeabi_ddiv+0x464>
 80011b6:	e0a3      	b.n	8001300 <__aeabi_ddiv+0x5ac>
 80011b8:	d100      	bne.n	80011bc <__aeabi_ddiv+0x468>
 80011ba:	e0b3      	b.n	8001324 <__aeabi_ddiv+0x5d0>
 80011bc:	0005      	movs	r5, r0
 80011be:	e6f5      	b.n	8000fac <__aeabi_ddiv+0x258>
 80011c0:	42aa      	cmp	r2, r5
 80011c2:	d900      	bls.n	80011c6 <__aeabi_ddiv+0x472>
 80011c4:	e639      	b.n	8000e3a <__aeabi_ddiv+0xe6>
 80011c6:	4643      	mov	r3, r8
 80011c8:	07de      	lsls	r6, r3, #31
 80011ca:	0858      	lsrs	r0, r3, #1
 80011cc:	086b      	lsrs	r3, r5, #1
 80011ce:	431e      	orrs	r6, r3
 80011d0:	07ed      	lsls	r5, r5, #31
 80011d2:	e639      	b.n	8000e48 <__aeabi_ddiv+0xf4>
 80011d4:	4648      	mov	r0, r9
 80011d6:	f001 f867 	bl	80022a8 <__clzsi2>
 80011da:	0001      	movs	r1, r0
 80011dc:	0002      	movs	r2, r0
 80011de:	3115      	adds	r1, #21
 80011e0:	3220      	adds	r2, #32
 80011e2:	291c      	cmp	r1, #28
 80011e4:	dc00      	bgt.n	80011e8 <__aeabi_ddiv+0x494>
 80011e6:	e72c      	b.n	8001042 <__aeabi_ddiv+0x2ee>
 80011e8:	464b      	mov	r3, r9
 80011ea:	3808      	subs	r0, #8
 80011ec:	4083      	lsls	r3, r0
 80011ee:	2500      	movs	r5, #0
 80011f0:	4698      	mov	r8, r3
 80011f2:	e732      	b.n	800105a <__aeabi_ddiv+0x306>
 80011f4:	f001 f858 	bl	80022a8 <__clzsi2>
 80011f8:	0003      	movs	r3, r0
 80011fa:	001a      	movs	r2, r3
 80011fc:	3215      	adds	r2, #21
 80011fe:	3020      	adds	r0, #32
 8001200:	2a1c      	cmp	r2, #28
 8001202:	dc00      	bgt.n	8001206 <__aeabi_ddiv+0x4b2>
 8001204:	e700      	b.n	8001008 <__aeabi_ddiv+0x2b4>
 8001206:	4654      	mov	r4, sl
 8001208:	3b08      	subs	r3, #8
 800120a:	2200      	movs	r2, #0
 800120c:	409c      	lsls	r4, r3
 800120e:	e705      	b.n	800101c <__aeabi_ddiv+0x2c8>
 8001210:	1936      	adds	r6, r6, r4
 8001212:	3b01      	subs	r3, #1
 8001214:	42b4      	cmp	r4, r6
 8001216:	d900      	bls.n	800121a <__aeabi_ddiv+0x4c6>
 8001218:	e6a6      	b.n	8000f68 <__aeabi_ddiv+0x214>
 800121a:	42b2      	cmp	r2, r6
 800121c:	d800      	bhi.n	8001220 <__aeabi_ddiv+0x4cc>
 800121e:	e6a3      	b.n	8000f68 <__aeabi_ddiv+0x214>
 8001220:	1e83      	subs	r3, r0, #2
 8001222:	1936      	adds	r6, r6, r4
 8001224:	e6a0      	b.n	8000f68 <__aeabi_ddiv+0x214>
 8001226:	1909      	adds	r1, r1, r4
 8001228:	3d01      	subs	r5, #1
 800122a:	428c      	cmp	r4, r1
 800122c:	d900      	bls.n	8001230 <__aeabi_ddiv+0x4dc>
 800122e:	e68d      	b.n	8000f4c <__aeabi_ddiv+0x1f8>
 8001230:	428a      	cmp	r2, r1
 8001232:	d800      	bhi.n	8001236 <__aeabi_ddiv+0x4e2>
 8001234:	e68a      	b.n	8000f4c <__aeabi_ddiv+0x1f8>
 8001236:	1e85      	subs	r5, r0, #2
 8001238:	1909      	adds	r1, r1, r4
 800123a:	e687      	b.n	8000f4c <__aeabi_ddiv+0x1f8>
 800123c:	230f      	movs	r3, #15
 800123e:	402b      	ands	r3, r5
 8001240:	2b04      	cmp	r3, #4
 8001242:	d100      	bne.n	8001246 <__aeabi_ddiv+0x4f2>
 8001244:	e6bc      	b.n	8000fc0 <__aeabi_ddiv+0x26c>
 8001246:	2305      	movs	r3, #5
 8001248:	425b      	negs	r3, r3
 800124a:	42ab      	cmp	r3, r5
 800124c:	419b      	sbcs	r3, r3
 800124e:	3504      	adds	r5, #4
 8001250:	425b      	negs	r3, r3
 8001252:	08ed      	lsrs	r5, r5, #3
 8001254:	4498      	add	r8, r3
 8001256:	e6b4      	b.n	8000fc2 <__aeabi_ddiv+0x26e>
 8001258:	42af      	cmp	r7, r5
 800125a:	d900      	bls.n	800125e <__aeabi_ddiv+0x50a>
 800125c:	e660      	b.n	8000f20 <__aeabi_ddiv+0x1cc>
 800125e:	4282      	cmp	r2, r0
 8001260:	d804      	bhi.n	800126c <__aeabi_ddiv+0x518>
 8001262:	d000      	beq.n	8001266 <__aeabi_ddiv+0x512>
 8001264:	e65c      	b.n	8000f20 <__aeabi_ddiv+0x1cc>
 8001266:	42ae      	cmp	r6, r5
 8001268:	d800      	bhi.n	800126c <__aeabi_ddiv+0x518>
 800126a:	e659      	b.n	8000f20 <__aeabi_ddiv+0x1cc>
 800126c:	2302      	movs	r3, #2
 800126e:	425b      	negs	r3, r3
 8001270:	469c      	mov	ip, r3
 8001272:	9b00      	ldr	r3, [sp, #0]
 8001274:	44e0      	add	r8, ip
 8001276:	469c      	mov	ip, r3
 8001278:	4465      	add	r5, ip
 800127a:	429d      	cmp	r5, r3
 800127c:	419b      	sbcs	r3, r3
 800127e:	425b      	negs	r3, r3
 8001280:	191b      	adds	r3, r3, r4
 8001282:	18c0      	adds	r0, r0, r3
 8001284:	e64d      	b.n	8000f22 <__aeabi_ddiv+0x1ce>
 8001286:	428a      	cmp	r2, r1
 8001288:	d800      	bhi.n	800128c <__aeabi_ddiv+0x538>
 800128a:	e60e      	b.n	8000eaa <__aeabi_ddiv+0x156>
 800128c:	1e83      	subs	r3, r0, #2
 800128e:	1909      	adds	r1, r1, r4
 8001290:	e60b      	b.n	8000eaa <__aeabi_ddiv+0x156>
 8001292:	428a      	cmp	r2, r1
 8001294:	d800      	bhi.n	8001298 <__aeabi_ddiv+0x544>
 8001296:	e5f4      	b.n	8000e82 <__aeabi_ddiv+0x12e>
 8001298:	1e83      	subs	r3, r0, #2
 800129a:	4698      	mov	r8, r3
 800129c:	1909      	adds	r1, r1, r4
 800129e:	e5f0      	b.n	8000e82 <__aeabi_ddiv+0x12e>
 80012a0:	4925      	ldr	r1, [pc, #148]	; (8001338 <__aeabi_ddiv+0x5e4>)
 80012a2:	0028      	movs	r0, r5
 80012a4:	4459      	add	r1, fp
 80012a6:	408d      	lsls	r5, r1
 80012a8:	4642      	mov	r2, r8
 80012aa:	408a      	lsls	r2, r1
 80012ac:	1e69      	subs	r1, r5, #1
 80012ae:	418d      	sbcs	r5, r1
 80012b0:	4641      	mov	r1, r8
 80012b2:	40d8      	lsrs	r0, r3
 80012b4:	40d9      	lsrs	r1, r3
 80012b6:	4302      	orrs	r2, r0
 80012b8:	432a      	orrs	r2, r5
 80012ba:	000b      	movs	r3, r1
 80012bc:	0751      	lsls	r1, r2, #29
 80012be:	d100      	bne.n	80012c2 <__aeabi_ddiv+0x56e>
 80012c0:	e751      	b.n	8001166 <__aeabi_ddiv+0x412>
 80012c2:	210f      	movs	r1, #15
 80012c4:	4011      	ands	r1, r2
 80012c6:	2904      	cmp	r1, #4
 80012c8:	d000      	beq.n	80012cc <__aeabi_ddiv+0x578>
 80012ca:	e746      	b.n	800115a <__aeabi_ddiv+0x406>
 80012cc:	e74b      	b.n	8001166 <__aeabi_ddiv+0x412>
 80012ce:	0005      	movs	r5, r0
 80012d0:	428e      	cmp	r6, r1
 80012d2:	d000      	beq.n	80012d6 <__aeabi_ddiv+0x582>
 80012d4:	e66a      	b.n	8000fac <__aeabi_ddiv+0x258>
 80012d6:	9a00      	ldr	r2, [sp, #0]
 80012d8:	4293      	cmp	r3, r2
 80012da:	d000      	beq.n	80012de <__aeabi_ddiv+0x58a>
 80012dc:	e666      	b.n	8000fac <__aeabi_ddiv+0x258>
 80012de:	e667      	b.n	8000fb0 <__aeabi_ddiv+0x25c>
 80012e0:	4a16      	ldr	r2, [pc, #88]	; (800133c <__aeabi_ddiv+0x5e8>)
 80012e2:	445a      	add	r2, fp
 80012e4:	2a00      	cmp	r2, #0
 80012e6:	dc00      	bgt.n	80012ea <__aeabi_ddiv+0x596>
 80012e8:	e710      	b.n	800110c <__aeabi_ddiv+0x3b8>
 80012ea:	2301      	movs	r3, #1
 80012ec:	2500      	movs	r5, #0
 80012ee:	4498      	add	r8, r3
 80012f0:	e667      	b.n	8000fc2 <__aeabi_ddiv+0x26e>
 80012f2:	075d      	lsls	r5, r3, #29
 80012f4:	025b      	lsls	r3, r3, #9
 80012f6:	0b1c      	lsrs	r4, r3, #12
 80012f8:	08d2      	lsrs	r2, r2, #3
 80012fa:	2300      	movs	r3, #0
 80012fc:	4315      	orrs	r5, r2
 80012fe:	e580      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8001300:	9800      	ldr	r0, [sp, #0]
 8001302:	3d02      	subs	r5, #2
 8001304:	0042      	lsls	r2, r0, #1
 8001306:	4282      	cmp	r2, r0
 8001308:	41bf      	sbcs	r7, r7
 800130a:	427f      	negs	r7, r7
 800130c:	193c      	adds	r4, r7, r4
 800130e:	1936      	adds	r6, r6, r4
 8001310:	9200      	str	r2, [sp, #0]
 8001312:	e7dd      	b.n	80012d0 <__aeabi_ddiv+0x57c>
 8001314:	2480      	movs	r4, #128	; 0x80
 8001316:	4643      	mov	r3, r8
 8001318:	0324      	lsls	r4, r4, #12
 800131a:	431c      	orrs	r4, r3
 800131c:	0324      	lsls	r4, r4, #12
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <__aeabi_ddiv+0x5dc>)
 8001320:	0b24      	lsrs	r4, r4, #12
 8001322:	e56e      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8001324:	9a00      	ldr	r2, [sp, #0]
 8001326:	429a      	cmp	r2, r3
 8001328:	d3ea      	bcc.n	8001300 <__aeabi_ddiv+0x5ac>
 800132a:	0005      	movs	r5, r0
 800132c:	e7d3      	b.n	80012d6 <__aeabi_ddiv+0x582>
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	000007ff 	.word	0x000007ff
 8001334:	0000043e 	.word	0x0000043e
 8001338:	0000041e 	.word	0x0000041e
 800133c:	000003ff 	.word	0x000003ff

08001340 <__eqdf2>:
 8001340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001342:	464e      	mov	r6, r9
 8001344:	4645      	mov	r5, r8
 8001346:	46de      	mov	lr, fp
 8001348:	4657      	mov	r7, sl
 800134a:	4690      	mov	r8, r2
 800134c:	b5e0      	push	{r5, r6, r7, lr}
 800134e:	0017      	movs	r7, r2
 8001350:	031a      	lsls	r2, r3, #12
 8001352:	0b12      	lsrs	r2, r2, #12
 8001354:	0005      	movs	r5, r0
 8001356:	4684      	mov	ip, r0
 8001358:	4819      	ldr	r0, [pc, #100]	; (80013c0 <__eqdf2+0x80>)
 800135a:	030e      	lsls	r6, r1, #12
 800135c:	004c      	lsls	r4, r1, #1
 800135e:	4691      	mov	r9, r2
 8001360:	005a      	lsls	r2, r3, #1
 8001362:	0fdb      	lsrs	r3, r3, #31
 8001364:	469b      	mov	fp, r3
 8001366:	0b36      	lsrs	r6, r6, #12
 8001368:	0d64      	lsrs	r4, r4, #21
 800136a:	0fc9      	lsrs	r1, r1, #31
 800136c:	0d52      	lsrs	r2, r2, #21
 800136e:	4284      	cmp	r4, r0
 8001370:	d019      	beq.n	80013a6 <__eqdf2+0x66>
 8001372:	4282      	cmp	r2, r0
 8001374:	d010      	beq.n	8001398 <__eqdf2+0x58>
 8001376:	2001      	movs	r0, #1
 8001378:	4294      	cmp	r4, r2
 800137a:	d10e      	bne.n	800139a <__eqdf2+0x5a>
 800137c:	454e      	cmp	r6, r9
 800137e:	d10c      	bne.n	800139a <__eqdf2+0x5a>
 8001380:	2001      	movs	r0, #1
 8001382:	45c4      	cmp	ip, r8
 8001384:	d109      	bne.n	800139a <__eqdf2+0x5a>
 8001386:	4559      	cmp	r1, fp
 8001388:	d017      	beq.n	80013ba <__eqdf2+0x7a>
 800138a:	2c00      	cmp	r4, #0
 800138c:	d105      	bne.n	800139a <__eqdf2+0x5a>
 800138e:	0030      	movs	r0, r6
 8001390:	4328      	orrs	r0, r5
 8001392:	1e43      	subs	r3, r0, #1
 8001394:	4198      	sbcs	r0, r3
 8001396:	e000      	b.n	800139a <__eqdf2+0x5a>
 8001398:	2001      	movs	r0, #1
 800139a:	bcf0      	pop	{r4, r5, r6, r7}
 800139c:	46bb      	mov	fp, r7
 800139e:	46b2      	mov	sl, r6
 80013a0:	46a9      	mov	r9, r5
 80013a2:	46a0      	mov	r8, r4
 80013a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a6:	0033      	movs	r3, r6
 80013a8:	2001      	movs	r0, #1
 80013aa:	432b      	orrs	r3, r5
 80013ac:	d1f5      	bne.n	800139a <__eqdf2+0x5a>
 80013ae:	42a2      	cmp	r2, r4
 80013b0:	d1f3      	bne.n	800139a <__eqdf2+0x5a>
 80013b2:	464b      	mov	r3, r9
 80013b4:	433b      	orrs	r3, r7
 80013b6:	d1f0      	bne.n	800139a <__eqdf2+0x5a>
 80013b8:	e7e2      	b.n	8001380 <__eqdf2+0x40>
 80013ba:	2000      	movs	r0, #0
 80013bc:	e7ed      	b.n	800139a <__eqdf2+0x5a>
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	000007ff 	.word	0x000007ff

080013c4 <__gedf2>:
 80013c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c6:	4647      	mov	r7, r8
 80013c8:	46ce      	mov	lr, r9
 80013ca:	0004      	movs	r4, r0
 80013cc:	0018      	movs	r0, r3
 80013ce:	0016      	movs	r6, r2
 80013d0:	031b      	lsls	r3, r3, #12
 80013d2:	0b1b      	lsrs	r3, r3, #12
 80013d4:	4d2d      	ldr	r5, [pc, #180]	; (800148c <__gedf2+0xc8>)
 80013d6:	004a      	lsls	r2, r1, #1
 80013d8:	4699      	mov	r9, r3
 80013da:	b580      	push	{r7, lr}
 80013dc:	0043      	lsls	r3, r0, #1
 80013de:	030f      	lsls	r7, r1, #12
 80013e0:	46a4      	mov	ip, r4
 80013e2:	46b0      	mov	r8, r6
 80013e4:	0b3f      	lsrs	r7, r7, #12
 80013e6:	0d52      	lsrs	r2, r2, #21
 80013e8:	0fc9      	lsrs	r1, r1, #31
 80013ea:	0d5b      	lsrs	r3, r3, #21
 80013ec:	0fc0      	lsrs	r0, r0, #31
 80013ee:	42aa      	cmp	r2, r5
 80013f0:	d021      	beq.n	8001436 <__gedf2+0x72>
 80013f2:	42ab      	cmp	r3, r5
 80013f4:	d013      	beq.n	800141e <__gedf2+0x5a>
 80013f6:	2a00      	cmp	r2, #0
 80013f8:	d122      	bne.n	8001440 <__gedf2+0x7c>
 80013fa:	433c      	orrs	r4, r7
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d102      	bne.n	8001406 <__gedf2+0x42>
 8001400:	464d      	mov	r5, r9
 8001402:	432e      	orrs	r6, r5
 8001404:	d022      	beq.n	800144c <__gedf2+0x88>
 8001406:	2c00      	cmp	r4, #0
 8001408:	d010      	beq.n	800142c <__gedf2+0x68>
 800140a:	4281      	cmp	r1, r0
 800140c:	d022      	beq.n	8001454 <__gedf2+0x90>
 800140e:	2002      	movs	r0, #2
 8001410:	3901      	subs	r1, #1
 8001412:	4008      	ands	r0, r1
 8001414:	3801      	subs	r0, #1
 8001416:	bcc0      	pop	{r6, r7}
 8001418:	46b9      	mov	r9, r7
 800141a:	46b0      	mov	r8, r6
 800141c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800141e:	464d      	mov	r5, r9
 8001420:	432e      	orrs	r6, r5
 8001422:	d129      	bne.n	8001478 <__gedf2+0xb4>
 8001424:	2a00      	cmp	r2, #0
 8001426:	d1f0      	bne.n	800140a <__gedf2+0x46>
 8001428:	433c      	orrs	r4, r7
 800142a:	d1ee      	bne.n	800140a <__gedf2+0x46>
 800142c:	2800      	cmp	r0, #0
 800142e:	d1f2      	bne.n	8001416 <__gedf2+0x52>
 8001430:	2001      	movs	r0, #1
 8001432:	4240      	negs	r0, r0
 8001434:	e7ef      	b.n	8001416 <__gedf2+0x52>
 8001436:	003d      	movs	r5, r7
 8001438:	4325      	orrs	r5, r4
 800143a:	d11d      	bne.n	8001478 <__gedf2+0xb4>
 800143c:	4293      	cmp	r3, r2
 800143e:	d0ee      	beq.n	800141e <__gedf2+0x5a>
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1e2      	bne.n	800140a <__gedf2+0x46>
 8001444:	464c      	mov	r4, r9
 8001446:	4326      	orrs	r6, r4
 8001448:	d1df      	bne.n	800140a <__gedf2+0x46>
 800144a:	e7e0      	b.n	800140e <__gedf2+0x4a>
 800144c:	2000      	movs	r0, #0
 800144e:	2c00      	cmp	r4, #0
 8001450:	d0e1      	beq.n	8001416 <__gedf2+0x52>
 8001452:	e7dc      	b.n	800140e <__gedf2+0x4a>
 8001454:	429a      	cmp	r2, r3
 8001456:	dc0a      	bgt.n	800146e <__gedf2+0xaa>
 8001458:	dbe8      	blt.n	800142c <__gedf2+0x68>
 800145a:	454f      	cmp	r7, r9
 800145c:	d8d7      	bhi.n	800140e <__gedf2+0x4a>
 800145e:	d00e      	beq.n	800147e <__gedf2+0xba>
 8001460:	2000      	movs	r0, #0
 8001462:	454f      	cmp	r7, r9
 8001464:	d2d7      	bcs.n	8001416 <__gedf2+0x52>
 8001466:	2900      	cmp	r1, #0
 8001468:	d0e2      	beq.n	8001430 <__gedf2+0x6c>
 800146a:	0008      	movs	r0, r1
 800146c:	e7d3      	b.n	8001416 <__gedf2+0x52>
 800146e:	4243      	negs	r3, r0
 8001470:	4158      	adcs	r0, r3
 8001472:	0040      	lsls	r0, r0, #1
 8001474:	3801      	subs	r0, #1
 8001476:	e7ce      	b.n	8001416 <__gedf2+0x52>
 8001478:	2002      	movs	r0, #2
 800147a:	4240      	negs	r0, r0
 800147c:	e7cb      	b.n	8001416 <__gedf2+0x52>
 800147e:	45c4      	cmp	ip, r8
 8001480:	d8c5      	bhi.n	800140e <__gedf2+0x4a>
 8001482:	2000      	movs	r0, #0
 8001484:	45c4      	cmp	ip, r8
 8001486:	d2c6      	bcs.n	8001416 <__gedf2+0x52>
 8001488:	e7ed      	b.n	8001466 <__gedf2+0xa2>
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	000007ff 	.word	0x000007ff

08001490 <__ledf2>:
 8001490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001492:	4647      	mov	r7, r8
 8001494:	46ce      	mov	lr, r9
 8001496:	0004      	movs	r4, r0
 8001498:	0018      	movs	r0, r3
 800149a:	0016      	movs	r6, r2
 800149c:	031b      	lsls	r3, r3, #12
 800149e:	0b1b      	lsrs	r3, r3, #12
 80014a0:	4d2c      	ldr	r5, [pc, #176]	; (8001554 <__ledf2+0xc4>)
 80014a2:	004a      	lsls	r2, r1, #1
 80014a4:	4699      	mov	r9, r3
 80014a6:	b580      	push	{r7, lr}
 80014a8:	0043      	lsls	r3, r0, #1
 80014aa:	030f      	lsls	r7, r1, #12
 80014ac:	46a4      	mov	ip, r4
 80014ae:	46b0      	mov	r8, r6
 80014b0:	0b3f      	lsrs	r7, r7, #12
 80014b2:	0d52      	lsrs	r2, r2, #21
 80014b4:	0fc9      	lsrs	r1, r1, #31
 80014b6:	0d5b      	lsrs	r3, r3, #21
 80014b8:	0fc0      	lsrs	r0, r0, #31
 80014ba:	42aa      	cmp	r2, r5
 80014bc:	d00d      	beq.n	80014da <__ledf2+0x4a>
 80014be:	42ab      	cmp	r3, r5
 80014c0:	d010      	beq.n	80014e4 <__ledf2+0x54>
 80014c2:	2a00      	cmp	r2, #0
 80014c4:	d127      	bne.n	8001516 <__ledf2+0x86>
 80014c6:	433c      	orrs	r4, r7
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d111      	bne.n	80014f0 <__ledf2+0x60>
 80014cc:	464d      	mov	r5, r9
 80014ce:	432e      	orrs	r6, r5
 80014d0:	d10e      	bne.n	80014f0 <__ledf2+0x60>
 80014d2:	2000      	movs	r0, #0
 80014d4:	2c00      	cmp	r4, #0
 80014d6:	d015      	beq.n	8001504 <__ledf2+0x74>
 80014d8:	e00e      	b.n	80014f8 <__ledf2+0x68>
 80014da:	003d      	movs	r5, r7
 80014dc:	4325      	orrs	r5, r4
 80014de:	d110      	bne.n	8001502 <__ledf2+0x72>
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d118      	bne.n	8001516 <__ledf2+0x86>
 80014e4:	464d      	mov	r5, r9
 80014e6:	432e      	orrs	r6, r5
 80014e8:	d10b      	bne.n	8001502 <__ledf2+0x72>
 80014ea:	2a00      	cmp	r2, #0
 80014ec:	d102      	bne.n	80014f4 <__ledf2+0x64>
 80014ee:	433c      	orrs	r4, r7
 80014f0:	2c00      	cmp	r4, #0
 80014f2:	d00b      	beq.n	800150c <__ledf2+0x7c>
 80014f4:	4281      	cmp	r1, r0
 80014f6:	d014      	beq.n	8001522 <__ledf2+0x92>
 80014f8:	2002      	movs	r0, #2
 80014fa:	3901      	subs	r1, #1
 80014fc:	4008      	ands	r0, r1
 80014fe:	3801      	subs	r0, #1
 8001500:	e000      	b.n	8001504 <__ledf2+0x74>
 8001502:	2002      	movs	r0, #2
 8001504:	bcc0      	pop	{r6, r7}
 8001506:	46b9      	mov	r9, r7
 8001508:	46b0      	mov	r8, r6
 800150a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800150c:	2800      	cmp	r0, #0
 800150e:	d1f9      	bne.n	8001504 <__ledf2+0x74>
 8001510:	2001      	movs	r0, #1
 8001512:	4240      	negs	r0, r0
 8001514:	e7f6      	b.n	8001504 <__ledf2+0x74>
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1ec      	bne.n	80014f4 <__ledf2+0x64>
 800151a:	464c      	mov	r4, r9
 800151c:	4326      	orrs	r6, r4
 800151e:	d1e9      	bne.n	80014f4 <__ledf2+0x64>
 8001520:	e7ea      	b.n	80014f8 <__ledf2+0x68>
 8001522:	429a      	cmp	r2, r3
 8001524:	dd04      	ble.n	8001530 <__ledf2+0xa0>
 8001526:	4243      	negs	r3, r0
 8001528:	4158      	adcs	r0, r3
 800152a:	0040      	lsls	r0, r0, #1
 800152c:	3801      	subs	r0, #1
 800152e:	e7e9      	b.n	8001504 <__ledf2+0x74>
 8001530:	429a      	cmp	r2, r3
 8001532:	dbeb      	blt.n	800150c <__ledf2+0x7c>
 8001534:	454f      	cmp	r7, r9
 8001536:	d8df      	bhi.n	80014f8 <__ledf2+0x68>
 8001538:	d006      	beq.n	8001548 <__ledf2+0xb8>
 800153a:	2000      	movs	r0, #0
 800153c:	454f      	cmp	r7, r9
 800153e:	d2e1      	bcs.n	8001504 <__ledf2+0x74>
 8001540:	2900      	cmp	r1, #0
 8001542:	d0e5      	beq.n	8001510 <__ledf2+0x80>
 8001544:	0008      	movs	r0, r1
 8001546:	e7dd      	b.n	8001504 <__ledf2+0x74>
 8001548:	45c4      	cmp	ip, r8
 800154a:	d8d5      	bhi.n	80014f8 <__ledf2+0x68>
 800154c:	2000      	movs	r0, #0
 800154e:	45c4      	cmp	ip, r8
 8001550:	d2d8      	bcs.n	8001504 <__ledf2+0x74>
 8001552:	e7f5      	b.n	8001540 <__ledf2+0xb0>
 8001554:	000007ff 	.word	0x000007ff

08001558 <__aeabi_dmul>:
 8001558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155a:	4657      	mov	r7, sl
 800155c:	464e      	mov	r6, r9
 800155e:	4645      	mov	r5, r8
 8001560:	46de      	mov	lr, fp
 8001562:	b5e0      	push	{r5, r6, r7, lr}
 8001564:	4698      	mov	r8, r3
 8001566:	030c      	lsls	r4, r1, #12
 8001568:	004b      	lsls	r3, r1, #1
 800156a:	0006      	movs	r6, r0
 800156c:	4692      	mov	sl, r2
 800156e:	b087      	sub	sp, #28
 8001570:	0b24      	lsrs	r4, r4, #12
 8001572:	0d5b      	lsrs	r3, r3, #21
 8001574:	0fcf      	lsrs	r7, r1, #31
 8001576:	2b00      	cmp	r3, #0
 8001578:	d100      	bne.n	800157c <__aeabi_dmul+0x24>
 800157a:	e15c      	b.n	8001836 <__aeabi_dmul+0x2de>
 800157c:	4ad9      	ldr	r2, [pc, #868]	; (80018e4 <__aeabi_dmul+0x38c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d100      	bne.n	8001584 <__aeabi_dmul+0x2c>
 8001582:	e175      	b.n	8001870 <__aeabi_dmul+0x318>
 8001584:	0f42      	lsrs	r2, r0, #29
 8001586:	00e4      	lsls	r4, r4, #3
 8001588:	4314      	orrs	r4, r2
 800158a:	2280      	movs	r2, #128	; 0x80
 800158c:	0412      	lsls	r2, r2, #16
 800158e:	4314      	orrs	r4, r2
 8001590:	4ad5      	ldr	r2, [pc, #852]	; (80018e8 <__aeabi_dmul+0x390>)
 8001592:	00c5      	lsls	r5, r0, #3
 8001594:	4694      	mov	ip, r2
 8001596:	4463      	add	r3, ip
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2300      	movs	r3, #0
 800159c:	4699      	mov	r9, r3
 800159e:	469b      	mov	fp, r3
 80015a0:	4643      	mov	r3, r8
 80015a2:	4642      	mov	r2, r8
 80015a4:	031e      	lsls	r6, r3, #12
 80015a6:	0fd2      	lsrs	r2, r2, #31
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	4650      	mov	r0, sl
 80015ac:	4690      	mov	r8, r2
 80015ae:	0b36      	lsrs	r6, r6, #12
 80015b0:	0d5b      	lsrs	r3, r3, #21
 80015b2:	d100      	bne.n	80015b6 <__aeabi_dmul+0x5e>
 80015b4:	e120      	b.n	80017f8 <__aeabi_dmul+0x2a0>
 80015b6:	4acb      	ldr	r2, [pc, #812]	; (80018e4 <__aeabi_dmul+0x38c>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d100      	bne.n	80015be <__aeabi_dmul+0x66>
 80015bc:	e162      	b.n	8001884 <__aeabi_dmul+0x32c>
 80015be:	49ca      	ldr	r1, [pc, #808]	; (80018e8 <__aeabi_dmul+0x390>)
 80015c0:	0f42      	lsrs	r2, r0, #29
 80015c2:	468c      	mov	ip, r1
 80015c4:	9900      	ldr	r1, [sp, #0]
 80015c6:	4463      	add	r3, ip
 80015c8:	00f6      	lsls	r6, r6, #3
 80015ca:	468c      	mov	ip, r1
 80015cc:	4316      	orrs	r6, r2
 80015ce:	2280      	movs	r2, #128	; 0x80
 80015d0:	449c      	add	ip, r3
 80015d2:	0412      	lsls	r2, r2, #16
 80015d4:	4663      	mov	r3, ip
 80015d6:	4316      	orrs	r6, r2
 80015d8:	00c2      	lsls	r2, r0, #3
 80015da:	2000      	movs	r0, #0
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	9900      	ldr	r1, [sp, #0]
 80015e0:	4643      	mov	r3, r8
 80015e2:	3101      	adds	r1, #1
 80015e4:	468c      	mov	ip, r1
 80015e6:	4649      	mov	r1, r9
 80015e8:	407b      	eors	r3, r7
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	290f      	cmp	r1, #15
 80015ee:	d826      	bhi.n	800163e <__aeabi_dmul+0xe6>
 80015f0:	4bbe      	ldr	r3, [pc, #760]	; (80018ec <__aeabi_dmul+0x394>)
 80015f2:	0089      	lsls	r1, r1, #2
 80015f4:	5859      	ldr	r1, [r3, r1]
 80015f6:	468f      	mov	pc, r1
 80015f8:	4643      	mov	r3, r8
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	0034      	movs	r4, r6
 80015fe:	0015      	movs	r5, r2
 8001600:	4683      	mov	fp, r0
 8001602:	465b      	mov	r3, fp
 8001604:	2b02      	cmp	r3, #2
 8001606:	d016      	beq.n	8001636 <__aeabi_dmul+0xde>
 8001608:	2b03      	cmp	r3, #3
 800160a:	d100      	bne.n	800160e <__aeabi_dmul+0xb6>
 800160c:	e203      	b.n	8001a16 <__aeabi_dmul+0x4be>
 800160e:	2b01      	cmp	r3, #1
 8001610:	d000      	beq.n	8001614 <__aeabi_dmul+0xbc>
 8001612:	e0cd      	b.n	80017b0 <__aeabi_dmul+0x258>
 8001614:	2200      	movs	r2, #0
 8001616:	2400      	movs	r4, #0
 8001618:	2500      	movs	r5, #0
 800161a:	9b01      	ldr	r3, [sp, #4]
 800161c:	0512      	lsls	r2, r2, #20
 800161e:	4322      	orrs	r2, r4
 8001620:	07db      	lsls	r3, r3, #31
 8001622:	431a      	orrs	r2, r3
 8001624:	0028      	movs	r0, r5
 8001626:	0011      	movs	r1, r2
 8001628:	b007      	add	sp, #28
 800162a:	bcf0      	pop	{r4, r5, r6, r7}
 800162c:	46bb      	mov	fp, r7
 800162e:	46b2      	mov	sl, r6
 8001630:	46a9      	mov	r9, r5
 8001632:	46a0      	mov	r8, r4
 8001634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001636:	2400      	movs	r4, #0
 8001638:	2500      	movs	r5, #0
 800163a:	4aaa      	ldr	r2, [pc, #680]	; (80018e4 <__aeabi_dmul+0x38c>)
 800163c:	e7ed      	b.n	800161a <__aeabi_dmul+0xc2>
 800163e:	0c28      	lsrs	r0, r5, #16
 8001640:	042d      	lsls	r5, r5, #16
 8001642:	0c2d      	lsrs	r5, r5, #16
 8001644:	002b      	movs	r3, r5
 8001646:	0c11      	lsrs	r1, r2, #16
 8001648:	0412      	lsls	r2, r2, #16
 800164a:	0c12      	lsrs	r2, r2, #16
 800164c:	4353      	muls	r3, r2
 800164e:	4698      	mov	r8, r3
 8001650:	0013      	movs	r3, r2
 8001652:	002f      	movs	r7, r5
 8001654:	4343      	muls	r3, r0
 8001656:	4699      	mov	r9, r3
 8001658:	434f      	muls	r7, r1
 800165a:	444f      	add	r7, r9
 800165c:	46bb      	mov	fp, r7
 800165e:	4647      	mov	r7, r8
 8001660:	000b      	movs	r3, r1
 8001662:	0c3f      	lsrs	r7, r7, #16
 8001664:	46ba      	mov	sl, r7
 8001666:	4343      	muls	r3, r0
 8001668:	44da      	add	sl, fp
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	45d1      	cmp	r9, sl
 800166e:	d904      	bls.n	800167a <__aeabi_dmul+0x122>
 8001670:	2780      	movs	r7, #128	; 0x80
 8001672:	027f      	lsls	r7, r7, #9
 8001674:	46b9      	mov	r9, r7
 8001676:	444b      	add	r3, r9
 8001678:	9302      	str	r3, [sp, #8]
 800167a:	4653      	mov	r3, sl
 800167c:	0c1b      	lsrs	r3, r3, #16
 800167e:	469b      	mov	fp, r3
 8001680:	4653      	mov	r3, sl
 8001682:	041f      	lsls	r7, r3, #16
 8001684:	4643      	mov	r3, r8
 8001686:	041b      	lsls	r3, r3, #16
 8001688:	0c1b      	lsrs	r3, r3, #16
 800168a:	4698      	mov	r8, r3
 800168c:	003b      	movs	r3, r7
 800168e:	4443      	add	r3, r8
 8001690:	9304      	str	r3, [sp, #16]
 8001692:	0c33      	lsrs	r3, r6, #16
 8001694:	0436      	lsls	r6, r6, #16
 8001696:	0c36      	lsrs	r6, r6, #16
 8001698:	4698      	mov	r8, r3
 800169a:	0033      	movs	r3, r6
 800169c:	4343      	muls	r3, r0
 800169e:	4699      	mov	r9, r3
 80016a0:	4643      	mov	r3, r8
 80016a2:	4343      	muls	r3, r0
 80016a4:	002f      	movs	r7, r5
 80016a6:	469a      	mov	sl, r3
 80016a8:	4643      	mov	r3, r8
 80016aa:	4377      	muls	r7, r6
 80016ac:	435d      	muls	r5, r3
 80016ae:	0c38      	lsrs	r0, r7, #16
 80016b0:	444d      	add	r5, r9
 80016b2:	1945      	adds	r5, r0, r5
 80016b4:	45a9      	cmp	r9, r5
 80016b6:	d903      	bls.n	80016c0 <__aeabi_dmul+0x168>
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	025b      	lsls	r3, r3, #9
 80016bc:	4699      	mov	r9, r3
 80016be:	44ca      	add	sl, r9
 80016c0:	043f      	lsls	r7, r7, #16
 80016c2:	0c28      	lsrs	r0, r5, #16
 80016c4:	0c3f      	lsrs	r7, r7, #16
 80016c6:	042d      	lsls	r5, r5, #16
 80016c8:	19ed      	adds	r5, r5, r7
 80016ca:	0c27      	lsrs	r7, r4, #16
 80016cc:	0424      	lsls	r4, r4, #16
 80016ce:	0c24      	lsrs	r4, r4, #16
 80016d0:	0003      	movs	r3, r0
 80016d2:	0020      	movs	r0, r4
 80016d4:	4350      	muls	r0, r2
 80016d6:	437a      	muls	r2, r7
 80016d8:	4691      	mov	r9, r2
 80016da:	003a      	movs	r2, r7
 80016dc:	4453      	add	r3, sl
 80016de:	9305      	str	r3, [sp, #20]
 80016e0:	0c03      	lsrs	r3, r0, #16
 80016e2:	469a      	mov	sl, r3
 80016e4:	434a      	muls	r2, r1
 80016e6:	4361      	muls	r1, r4
 80016e8:	4449      	add	r1, r9
 80016ea:	4451      	add	r1, sl
 80016ec:	44ab      	add	fp, r5
 80016ee:	4589      	cmp	r9, r1
 80016f0:	d903      	bls.n	80016fa <__aeabi_dmul+0x1a2>
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	025b      	lsls	r3, r3, #9
 80016f6:	4699      	mov	r9, r3
 80016f8:	444a      	add	r2, r9
 80016fa:	0400      	lsls	r0, r0, #16
 80016fc:	0c0b      	lsrs	r3, r1, #16
 80016fe:	0c00      	lsrs	r0, r0, #16
 8001700:	0409      	lsls	r1, r1, #16
 8001702:	1809      	adds	r1, r1, r0
 8001704:	0020      	movs	r0, r4
 8001706:	4699      	mov	r9, r3
 8001708:	4643      	mov	r3, r8
 800170a:	4370      	muls	r0, r6
 800170c:	435c      	muls	r4, r3
 800170e:	437e      	muls	r6, r7
 8001710:	435f      	muls	r7, r3
 8001712:	0c03      	lsrs	r3, r0, #16
 8001714:	4698      	mov	r8, r3
 8001716:	19a4      	adds	r4, r4, r6
 8001718:	4444      	add	r4, r8
 800171a:	444a      	add	r2, r9
 800171c:	9703      	str	r7, [sp, #12]
 800171e:	42a6      	cmp	r6, r4
 8001720:	d904      	bls.n	800172c <__aeabi_dmul+0x1d4>
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	025b      	lsls	r3, r3, #9
 8001726:	4698      	mov	r8, r3
 8001728:	4447      	add	r7, r8
 800172a:	9703      	str	r7, [sp, #12]
 800172c:	0423      	lsls	r3, r4, #16
 800172e:	9e02      	ldr	r6, [sp, #8]
 8001730:	469a      	mov	sl, r3
 8001732:	9b05      	ldr	r3, [sp, #20]
 8001734:	445e      	add	r6, fp
 8001736:	4698      	mov	r8, r3
 8001738:	42ae      	cmp	r6, r5
 800173a:	41ad      	sbcs	r5, r5
 800173c:	1876      	adds	r6, r6, r1
 800173e:	428e      	cmp	r6, r1
 8001740:	4189      	sbcs	r1, r1
 8001742:	0400      	lsls	r0, r0, #16
 8001744:	0c00      	lsrs	r0, r0, #16
 8001746:	4450      	add	r0, sl
 8001748:	4440      	add	r0, r8
 800174a:	426d      	negs	r5, r5
 800174c:	1947      	adds	r7, r0, r5
 800174e:	46b8      	mov	r8, r7
 8001750:	4693      	mov	fp, r2
 8001752:	4249      	negs	r1, r1
 8001754:	4689      	mov	r9, r1
 8001756:	44c3      	add	fp, r8
 8001758:	44d9      	add	r9, fp
 800175a:	4298      	cmp	r0, r3
 800175c:	4180      	sbcs	r0, r0
 800175e:	45a8      	cmp	r8, r5
 8001760:	41ad      	sbcs	r5, r5
 8001762:	4593      	cmp	fp, r2
 8001764:	4192      	sbcs	r2, r2
 8001766:	4589      	cmp	r9, r1
 8001768:	4189      	sbcs	r1, r1
 800176a:	426d      	negs	r5, r5
 800176c:	4240      	negs	r0, r0
 800176e:	4328      	orrs	r0, r5
 8001770:	0c24      	lsrs	r4, r4, #16
 8001772:	4252      	negs	r2, r2
 8001774:	4249      	negs	r1, r1
 8001776:	430a      	orrs	r2, r1
 8001778:	9b03      	ldr	r3, [sp, #12]
 800177a:	1900      	adds	r0, r0, r4
 800177c:	1880      	adds	r0, r0, r2
 800177e:	18c7      	adds	r7, r0, r3
 8001780:	464b      	mov	r3, r9
 8001782:	0ddc      	lsrs	r4, r3, #23
 8001784:	9b04      	ldr	r3, [sp, #16]
 8001786:	0275      	lsls	r5, r6, #9
 8001788:	431d      	orrs	r5, r3
 800178a:	1e6a      	subs	r2, r5, #1
 800178c:	4195      	sbcs	r5, r2
 800178e:	464b      	mov	r3, r9
 8001790:	0df6      	lsrs	r6, r6, #23
 8001792:	027f      	lsls	r7, r7, #9
 8001794:	4335      	orrs	r5, r6
 8001796:	025a      	lsls	r2, r3, #9
 8001798:	433c      	orrs	r4, r7
 800179a:	4315      	orrs	r5, r2
 800179c:	01fb      	lsls	r3, r7, #7
 800179e:	d400      	bmi.n	80017a2 <__aeabi_dmul+0x24a>
 80017a0:	e11c      	b.n	80019dc <__aeabi_dmul+0x484>
 80017a2:	2101      	movs	r1, #1
 80017a4:	086a      	lsrs	r2, r5, #1
 80017a6:	400d      	ands	r5, r1
 80017a8:	4315      	orrs	r5, r2
 80017aa:	07e2      	lsls	r2, r4, #31
 80017ac:	4315      	orrs	r5, r2
 80017ae:	0864      	lsrs	r4, r4, #1
 80017b0:	494f      	ldr	r1, [pc, #316]	; (80018f0 <__aeabi_dmul+0x398>)
 80017b2:	4461      	add	r1, ip
 80017b4:	2900      	cmp	r1, #0
 80017b6:	dc00      	bgt.n	80017ba <__aeabi_dmul+0x262>
 80017b8:	e0b0      	b.n	800191c <__aeabi_dmul+0x3c4>
 80017ba:	076b      	lsls	r3, r5, #29
 80017bc:	d009      	beq.n	80017d2 <__aeabi_dmul+0x27a>
 80017be:	220f      	movs	r2, #15
 80017c0:	402a      	ands	r2, r5
 80017c2:	2a04      	cmp	r2, #4
 80017c4:	d005      	beq.n	80017d2 <__aeabi_dmul+0x27a>
 80017c6:	1d2a      	adds	r2, r5, #4
 80017c8:	42aa      	cmp	r2, r5
 80017ca:	41ad      	sbcs	r5, r5
 80017cc:	426d      	negs	r5, r5
 80017ce:	1964      	adds	r4, r4, r5
 80017d0:	0015      	movs	r5, r2
 80017d2:	01e3      	lsls	r3, r4, #7
 80017d4:	d504      	bpl.n	80017e0 <__aeabi_dmul+0x288>
 80017d6:	2180      	movs	r1, #128	; 0x80
 80017d8:	4a46      	ldr	r2, [pc, #280]	; (80018f4 <__aeabi_dmul+0x39c>)
 80017da:	00c9      	lsls	r1, r1, #3
 80017dc:	4014      	ands	r4, r2
 80017de:	4461      	add	r1, ip
 80017e0:	4a45      	ldr	r2, [pc, #276]	; (80018f8 <__aeabi_dmul+0x3a0>)
 80017e2:	4291      	cmp	r1, r2
 80017e4:	dd00      	ble.n	80017e8 <__aeabi_dmul+0x290>
 80017e6:	e726      	b.n	8001636 <__aeabi_dmul+0xde>
 80017e8:	0762      	lsls	r2, r4, #29
 80017ea:	08ed      	lsrs	r5, r5, #3
 80017ec:	0264      	lsls	r4, r4, #9
 80017ee:	0549      	lsls	r1, r1, #21
 80017f0:	4315      	orrs	r5, r2
 80017f2:	0b24      	lsrs	r4, r4, #12
 80017f4:	0d4a      	lsrs	r2, r1, #21
 80017f6:	e710      	b.n	800161a <__aeabi_dmul+0xc2>
 80017f8:	4652      	mov	r2, sl
 80017fa:	4332      	orrs	r2, r6
 80017fc:	d100      	bne.n	8001800 <__aeabi_dmul+0x2a8>
 80017fe:	e07f      	b.n	8001900 <__aeabi_dmul+0x3a8>
 8001800:	2e00      	cmp	r6, #0
 8001802:	d100      	bne.n	8001806 <__aeabi_dmul+0x2ae>
 8001804:	e0dc      	b.n	80019c0 <__aeabi_dmul+0x468>
 8001806:	0030      	movs	r0, r6
 8001808:	f000 fd4e 	bl	80022a8 <__clzsi2>
 800180c:	0002      	movs	r2, r0
 800180e:	3a0b      	subs	r2, #11
 8001810:	231d      	movs	r3, #29
 8001812:	0001      	movs	r1, r0
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	4652      	mov	r2, sl
 8001818:	3908      	subs	r1, #8
 800181a:	40da      	lsrs	r2, r3
 800181c:	408e      	lsls	r6, r1
 800181e:	4316      	orrs	r6, r2
 8001820:	4652      	mov	r2, sl
 8001822:	408a      	lsls	r2, r1
 8001824:	9b00      	ldr	r3, [sp, #0]
 8001826:	4935      	ldr	r1, [pc, #212]	; (80018fc <__aeabi_dmul+0x3a4>)
 8001828:	1a18      	subs	r0, r3, r0
 800182a:	0003      	movs	r3, r0
 800182c:	468c      	mov	ip, r1
 800182e:	4463      	add	r3, ip
 8001830:	2000      	movs	r0, #0
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	e6d3      	b.n	80015de <__aeabi_dmul+0x86>
 8001836:	0025      	movs	r5, r4
 8001838:	4305      	orrs	r5, r0
 800183a:	d04a      	beq.n	80018d2 <__aeabi_dmul+0x37a>
 800183c:	2c00      	cmp	r4, #0
 800183e:	d100      	bne.n	8001842 <__aeabi_dmul+0x2ea>
 8001840:	e0b0      	b.n	80019a4 <__aeabi_dmul+0x44c>
 8001842:	0020      	movs	r0, r4
 8001844:	f000 fd30 	bl	80022a8 <__clzsi2>
 8001848:	0001      	movs	r1, r0
 800184a:	0002      	movs	r2, r0
 800184c:	390b      	subs	r1, #11
 800184e:	231d      	movs	r3, #29
 8001850:	0010      	movs	r0, r2
 8001852:	1a5b      	subs	r3, r3, r1
 8001854:	0031      	movs	r1, r6
 8001856:	0035      	movs	r5, r6
 8001858:	3808      	subs	r0, #8
 800185a:	4084      	lsls	r4, r0
 800185c:	40d9      	lsrs	r1, r3
 800185e:	4085      	lsls	r5, r0
 8001860:	430c      	orrs	r4, r1
 8001862:	4826      	ldr	r0, [pc, #152]	; (80018fc <__aeabi_dmul+0x3a4>)
 8001864:	1a83      	subs	r3, r0, r2
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2300      	movs	r3, #0
 800186a:	4699      	mov	r9, r3
 800186c:	469b      	mov	fp, r3
 800186e:	e697      	b.n	80015a0 <__aeabi_dmul+0x48>
 8001870:	0005      	movs	r5, r0
 8001872:	4325      	orrs	r5, r4
 8001874:	d126      	bne.n	80018c4 <__aeabi_dmul+0x36c>
 8001876:	2208      	movs	r2, #8
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2302      	movs	r3, #2
 800187c:	2400      	movs	r4, #0
 800187e:	4691      	mov	r9, r2
 8001880:	469b      	mov	fp, r3
 8001882:	e68d      	b.n	80015a0 <__aeabi_dmul+0x48>
 8001884:	4652      	mov	r2, sl
 8001886:	9b00      	ldr	r3, [sp, #0]
 8001888:	4332      	orrs	r2, r6
 800188a:	d110      	bne.n	80018ae <__aeabi_dmul+0x356>
 800188c:	4915      	ldr	r1, [pc, #84]	; (80018e4 <__aeabi_dmul+0x38c>)
 800188e:	2600      	movs	r6, #0
 8001890:	468c      	mov	ip, r1
 8001892:	4463      	add	r3, ip
 8001894:	4649      	mov	r1, r9
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	2302      	movs	r3, #2
 800189a:	4319      	orrs	r1, r3
 800189c:	4689      	mov	r9, r1
 800189e:	2002      	movs	r0, #2
 80018a0:	e69d      	b.n	80015de <__aeabi_dmul+0x86>
 80018a2:	465b      	mov	r3, fp
 80018a4:	9701      	str	r7, [sp, #4]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d000      	beq.n	80018ac <__aeabi_dmul+0x354>
 80018aa:	e6ad      	b.n	8001608 <__aeabi_dmul+0xb0>
 80018ac:	e6c3      	b.n	8001636 <__aeabi_dmul+0xde>
 80018ae:	4a0d      	ldr	r2, [pc, #52]	; (80018e4 <__aeabi_dmul+0x38c>)
 80018b0:	2003      	movs	r0, #3
 80018b2:	4694      	mov	ip, r2
 80018b4:	4463      	add	r3, ip
 80018b6:	464a      	mov	r2, r9
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	2303      	movs	r3, #3
 80018bc:	431a      	orrs	r2, r3
 80018be:	4691      	mov	r9, r2
 80018c0:	4652      	mov	r2, sl
 80018c2:	e68c      	b.n	80015de <__aeabi_dmul+0x86>
 80018c4:	220c      	movs	r2, #12
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	2303      	movs	r3, #3
 80018ca:	0005      	movs	r5, r0
 80018cc:	4691      	mov	r9, r2
 80018ce:	469b      	mov	fp, r3
 80018d0:	e666      	b.n	80015a0 <__aeabi_dmul+0x48>
 80018d2:	2304      	movs	r3, #4
 80018d4:	4699      	mov	r9, r3
 80018d6:	2300      	movs	r3, #0
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	3301      	adds	r3, #1
 80018dc:	2400      	movs	r4, #0
 80018de:	469b      	mov	fp, r3
 80018e0:	e65e      	b.n	80015a0 <__aeabi_dmul+0x48>
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	000007ff 	.word	0x000007ff
 80018e8:	fffffc01 	.word	0xfffffc01
 80018ec:	08007fa8 	.word	0x08007fa8
 80018f0:	000003ff 	.word	0x000003ff
 80018f4:	feffffff 	.word	0xfeffffff
 80018f8:	000007fe 	.word	0x000007fe
 80018fc:	fffffc0d 	.word	0xfffffc0d
 8001900:	4649      	mov	r1, r9
 8001902:	2301      	movs	r3, #1
 8001904:	4319      	orrs	r1, r3
 8001906:	4689      	mov	r9, r1
 8001908:	2600      	movs	r6, #0
 800190a:	2001      	movs	r0, #1
 800190c:	e667      	b.n	80015de <__aeabi_dmul+0x86>
 800190e:	2300      	movs	r3, #0
 8001910:	2480      	movs	r4, #128	; 0x80
 8001912:	2500      	movs	r5, #0
 8001914:	4a43      	ldr	r2, [pc, #268]	; (8001a24 <__aeabi_dmul+0x4cc>)
 8001916:	9301      	str	r3, [sp, #4]
 8001918:	0324      	lsls	r4, r4, #12
 800191a:	e67e      	b.n	800161a <__aeabi_dmul+0xc2>
 800191c:	2001      	movs	r0, #1
 800191e:	1a40      	subs	r0, r0, r1
 8001920:	2838      	cmp	r0, #56	; 0x38
 8001922:	dd00      	ble.n	8001926 <__aeabi_dmul+0x3ce>
 8001924:	e676      	b.n	8001614 <__aeabi_dmul+0xbc>
 8001926:	281f      	cmp	r0, #31
 8001928:	dd5b      	ble.n	80019e2 <__aeabi_dmul+0x48a>
 800192a:	221f      	movs	r2, #31
 800192c:	0023      	movs	r3, r4
 800192e:	4252      	negs	r2, r2
 8001930:	1a51      	subs	r1, r2, r1
 8001932:	40cb      	lsrs	r3, r1
 8001934:	0019      	movs	r1, r3
 8001936:	2820      	cmp	r0, #32
 8001938:	d003      	beq.n	8001942 <__aeabi_dmul+0x3ea>
 800193a:	4a3b      	ldr	r2, [pc, #236]	; (8001a28 <__aeabi_dmul+0x4d0>)
 800193c:	4462      	add	r2, ip
 800193e:	4094      	lsls	r4, r2
 8001940:	4325      	orrs	r5, r4
 8001942:	1e6a      	subs	r2, r5, #1
 8001944:	4195      	sbcs	r5, r2
 8001946:	002a      	movs	r2, r5
 8001948:	430a      	orrs	r2, r1
 800194a:	2107      	movs	r1, #7
 800194c:	000d      	movs	r5, r1
 800194e:	2400      	movs	r4, #0
 8001950:	4015      	ands	r5, r2
 8001952:	4211      	tst	r1, r2
 8001954:	d05b      	beq.n	8001a0e <__aeabi_dmul+0x4b6>
 8001956:	210f      	movs	r1, #15
 8001958:	2400      	movs	r4, #0
 800195a:	4011      	ands	r1, r2
 800195c:	2904      	cmp	r1, #4
 800195e:	d053      	beq.n	8001a08 <__aeabi_dmul+0x4b0>
 8001960:	1d11      	adds	r1, r2, #4
 8001962:	4291      	cmp	r1, r2
 8001964:	4192      	sbcs	r2, r2
 8001966:	4252      	negs	r2, r2
 8001968:	18a4      	adds	r4, r4, r2
 800196a:	000a      	movs	r2, r1
 800196c:	0223      	lsls	r3, r4, #8
 800196e:	d54b      	bpl.n	8001a08 <__aeabi_dmul+0x4b0>
 8001970:	2201      	movs	r2, #1
 8001972:	2400      	movs	r4, #0
 8001974:	2500      	movs	r5, #0
 8001976:	e650      	b.n	800161a <__aeabi_dmul+0xc2>
 8001978:	2380      	movs	r3, #128	; 0x80
 800197a:	031b      	lsls	r3, r3, #12
 800197c:	421c      	tst	r4, r3
 800197e:	d009      	beq.n	8001994 <__aeabi_dmul+0x43c>
 8001980:	421e      	tst	r6, r3
 8001982:	d107      	bne.n	8001994 <__aeabi_dmul+0x43c>
 8001984:	4333      	orrs	r3, r6
 8001986:	031c      	lsls	r4, r3, #12
 8001988:	4643      	mov	r3, r8
 800198a:	0015      	movs	r5, r2
 800198c:	0b24      	lsrs	r4, r4, #12
 800198e:	4a25      	ldr	r2, [pc, #148]	; (8001a24 <__aeabi_dmul+0x4cc>)
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	e642      	b.n	800161a <__aeabi_dmul+0xc2>
 8001994:	2280      	movs	r2, #128	; 0x80
 8001996:	0312      	lsls	r2, r2, #12
 8001998:	4314      	orrs	r4, r2
 800199a:	0324      	lsls	r4, r4, #12
 800199c:	4a21      	ldr	r2, [pc, #132]	; (8001a24 <__aeabi_dmul+0x4cc>)
 800199e:	0b24      	lsrs	r4, r4, #12
 80019a0:	9701      	str	r7, [sp, #4]
 80019a2:	e63a      	b.n	800161a <__aeabi_dmul+0xc2>
 80019a4:	f000 fc80 	bl	80022a8 <__clzsi2>
 80019a8:	0001      	movs	r1, r0
 80019aa:	0002      	movs	r2, r0
 80019ac:	3115      	adds	r1, #21
 80019ae:	3220      	adds	r2, #32
 80019b0:	291c      	cmp	r1, #28
 80019b2:	dc00      	bgt.n	80019b6 <__aeabi_dmul+0x45e>
 80019b4:	e74b      	b.n	800184e <__aeabi_dmul+0x2f6>
 80019b6:	0034      	movs	r4, r6
 80019b8:	3808      	subs	r0, #8
 80019ba:	2500      	movs	r5, #0
 80019bc:	4084      	lsls	r4, r0
 80019be:	e750      	b.n	8001862 <__aeabi_dmul+0x30a>
 80019c0:	f000 fc72 	bl	80022a8 <__clzsi2>
 80019c4:	0003      	movs	r3, r0
 80019c6:	001a      	movs	r2, r3
 80019c8:	3215      	adds	r2, #21
 80019ca:	3020      	adds	r0, #32
 80019cc:	2a1c      	cmp	r2, #28
 80019ce:	dc00      	bgt.n	80019d2 <__aeabi_dmul+0x47a>
 80019d0:	e71e      	b.n	8001810 <__aeabi_dmul+0x2b8>
 80019d2:	4656      	mov	r6, sl
 80019d4:	3b08      	subs	r3, #8
 80019d6:	2200      	movs	r2, #0
 80019d8:	409e      	lsls	r6, r3
 80019da:	e723      	b.n	8001824 <__aeabi_dmul+0x2cc>
 80019dc:	9b00      	ldr	r3, [sp, #0]
 80019de:	469c      	mov	ip, r3
 80019e0:	e6e6      	b.n	80017b0 <__aeabi_dmul+0x258>
 80019e2:	4912      	ldr	r1, [pc, #72]	; (8001a2c <__aeabi_dmul+0x4d4>)
 80019e4:	0022      	movs	r2, r4
 80019e6:	4461      	add	r1, ip
 80019e8:	002e      	movs	r6, r5
 80019ea:	408d      	lsls	r5, r1
 80019ec:	408a      	lsls	r2, r1
 80019ee:	40c6      	lsrs	r6, r0
 80019f0:	1e69      	subs	r1, r5, #1
 80019f2:	418d      	sbcs	r5, r1
 80019f4:	4332      	orrs	r2, r6
 80019f6:	432a      	orrs	r2, r5
 80019f8:	40c4      	lsrs	r4, r0
 80019fa:	0753      	lsls	r3, r2, #29
 80019fc:	d0b6      	beq.n	800196c <__aeabi_dmul+0x414>
 80019fe:	210f      	movs	r1, #15
 8001a00:	4011      	ands	r1, r2
 8001a02:	2904      	cmp	r1, #4
 8001a04:	d1ac      	bne.n	8001960 <__aeabi_dmul+0x408>
 8001a06:	e7b1      	b.n	800196c <__aeabi_dmul+0x414>
 8001a08:	0765      	lsls	r5, r4, #29
 8001a0a:	0264      	lsls	r4, r4, #9
 8001a0c:	0b24      	lsrs	r4, r4, #12
 8001a0e:	08d2      	lsrs	r2, r2, #3
 8001a10:	4315      	orrs	r5, r2
 8001a12:	2200      	movs	r2, #0
 8001a14:	e601      	b.n	800161a <__aeabi_dmul+0xc2>
 8001a16:	2280      	movs	r2, #128	; 0x80
 8001a18:	0312      	lsls	r2, r2, #12
 8001a1a:	4314      	orrs	r4, r2
 8001a1c:	0324      	lsls	r4, r4, #12
 8001a1e:	4a01      	ldr	r2, [pc, #4]	; (8001a24 <__aeabi_dmul+0x4cc>)
 8001a20:	0b24      	lsrs	r4, r4, #12
 8001a22:	e5fa      	b.n	800161a <__aeabi_dmul+0xc2>
 8001a24:	000007ff 	.word	0x000007ff
 8001a28:	0000043e 	.word	0x0000043e
 8001a2c:	0000041e 	.word	0x0000041e

08001a30 <__aeabi_dsub>:
 8001a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a32:	4657      	mov	r7, sl
 8001a34:	464e      	mov	r6, r9
 8001a36:	4645      	mov	r5, r8
 8001a38:	46de      	mov	lr, fp
 8001a3a:	b5e0      	push	{r5, r6, r7, lr}
 8001a3c:	001e      	movs	r6, r3
 8001a3e:	0017      	movs	r7, r2
 8001a40:	004a      	lsls	r2, r1, #1
 8001a42:	030b      	lsls	r3, r1, #12
 8001a44:	0d52      	lsrs	r2, r2, #21
 8001a46:	0a5b      	lsrs	r3, r3, #9
 8001a48:	4690      	mov	r8, r2
 8001a4a:	0f42      	lsrs	r2, r0, #29
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	0fcd      	lsrs	r5, r1, #31
 8001a50:	4ccd      	ldr	r4, [pc, #820]	; (8001d88 <__aeabi_dsub+0x358>)
 8001a52:	0331      	lsls	r1, r6, #12
 8001a54:	00c3      	lsls	r3, r0, #3
 8001a56:	4694      	mov	ip, r2
 8001a58:	0070      	lsls	r0, r6, #1
 8001a5a:	0f7a      	lsrs	r2, r7, #29
 8001a5c:	0a49      	lsrs	r1, r1, #9
 8001a5e:	00ff      	lsls	r7, r7, #3
 8001a60:	469a      	mov	sl, r3
 8001a62:	46b9      	mov	r9, r7
 8001a64:	0d40      	lsrs	r0, r0, #21
 8001a66:	0ff6      	lsrs	r6, r6, #31
 8001a68:	4311      	orrs	r1, r2
 8001a6a:	42a0      	cmp	r0, r4
 8001a6c:	d100      	bne.n	8001a70 <__aeabi_dsub+0x40>
 8001a6e:	e0b1      	b.n	8001bd4 <__aeabi_dsub+0x1a4>
 8001a70:	2201      	movs	r2, #1
 8001a72:	4056      	eors	r6, r2
 8001a74:	46b3      	mov	fp, r6
 8001a76:	42b5      	cmp	r5, r6
 8001a78:	d100      	bne.n	8001a7c <__aeabi_dsub+0x4c>
 8001a7a:	e088      	b.n	8001b8e <__aeabi_dsub+0x15e>
 8001a7c:	4642      	mov	r2, r8
 8001a7e:	1a12      	subs	r2, r2, r0
 8001a80:	2a00      	cmp	r2, #0
 8001a82:	dc00      	bgt.n	8001a86 <__aeabi_dsub+0x56>
 8001a84:	e0ae      	b.n	8001be4 <__aeabi_dsub+0x1b4>
 8001a86:	2800      	cmp	r0, #0
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dsub+0x5c>
 8001a8a:	e0c1      	b.n	8001c10 <__aeabi_dsub+0x1e0>
 8001a8c:	48be      	ldr	r0, [pc, #760]	; (8001d88 <__aeabi_dsub+0x358>)
 8001a8e:	4580      	cmp	r8, r0
 8001a90:	d100      	bne.n	8001a94 <__aeabi_dsub+0x64>
 8001a92:	e151      	b.n	8001d38 <__aeabi_dsub+0x308>
 8001a94:	2080      	movs	r0, #128	; 0x80
 8001a96:	0400      	lsls	r0, r0, #16
 8001a98:	4301      	orrs	r1, r0
 8001a9a:	2a38      	cmp	r2, #56	; 0x38
 8001a9c:	dd00      	ble.n	8001aa0 <__aeabi_dsub+0x70>
 8001a9e:	e17b      	b.n	8001d98 <__aeabi_dsub+0x368>
 8001aa0:	2a1f      	cmp	r2, #31
 8001aa2:	dd00      	ble.n	8001aa6 <__aeabi_dsub+0x76>
 8001aa4:	e1ee      	b.n	8001e84 <__aeabi_dsub+0x454>
 8001aa6:	2020      	movs	r0, #32
 8001aa8:	003e      	movs	r6, r7
 8001aaa:	1a80      	subs	r0, r0, r2
 8001aac:	000c      	movs	r4, r1
 8001aae:	40d6      	lsrs	r6, r2
 8001ab0:	40d1      	lsrs	r1, r2
 8001ab2:	4087      	lsls	r7, r0
 8001ab4:	4662      	mov	r2, ip
 8001ab6:	4084      	lsls	r4, r0
 8001ab8:	1a52      	subs	r2, r2, r1
 8001aba:	1e78      	subs	r0, r7, #1
 8001abc:	4187      	sbcs	r7, r0
 8001abe:	4694      	mov	ip, r2
 8001ac0:	4334      	orrs	r4, r6
 8001ac2:	4327      	orrs	r7, r4
 8001ac4:	1bdc      	subs	r4, r3, r7
 8001ac6:	42a3      	cmp	r3, r4
 8001ac8:	419b      	sbcs	r3, r3
 8001aca:	4662      	mov	r2, ip
 8001acc:	425b      	negs	r3, r3
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	4699      	mov	r9, r3
 8001ad2:	464b      	mov	r3, r9
 8001ad4:	021b      	lsls	r3, r3, #8
 8001ad6:	d400      	bmi.n	8001ada <__aeabi_dsub+0xaa>
 8001ad8:	e118      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 8001ada:	464b      	mov	r3, r9
 8001adc:	0258      	lsls	r0, r3, #9
 8001ade:	0a43      	lsrs	r3, r0, #9
 8001ae0:	4699      	mov	r9, r3
 8001ae2:	464b      	mov	r3, r9
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d100      	bne.n	8001aea <__aeabi_dsub+0xba>
 8001ae8:	e137      	b.n	8001d5a <__aeabi_dsub+0x32a>
 8001aea:	4648      	mov	r0, r9
 8001aec:	f000 fbdc 	bl	80022a8 <__clzsi2>
 8001af0:	0001      	movs	r1, r0
 8001af2:	3908      	subs	r1, #8
 8001af4:	2320      	movs	r3, #32
 8001af6:	0022      	movs	r2, r4
 8001af8:	4648      	mov	r0, r9
 8001afa:	1a5b      	subs	r3, r3, r1
 8001afc:	40da      	lsrs	r2, r3
 8001afe:	4088      	lsls	r0, r1
 8001b00:	408c      	lsls	r4, r1
 8001b02:	4643      	mov	r3, r8
 8001b04:	4310      	orrs	r0, r2
 8001b06:	4588      	cmp	r8, r1
 8001b08:	dd00      	ble.n	8001b0c <__aeabi_dsub+0xdc>
 8001b0a:	e136      	b.n	8001d7a <__aeabi_dsub+0x34a>
 8001b0c:	1ac9      	subs	r1, r1, r3
 8001b0e:	1c4b      	adds	r3, r1, #1
 8001b10:	2b1f      	cmp	r3, #31
 8001b12:	dd00      	ble.n	8001b16 <__aeabi_dsub+0xe6>
 8001b14:	e0ea      	b.n	8001cec <__aeabi_dsub+0x2bc>
 8001b16:	2220      	movs	r2, #32
 8001b18:	0026      	movs	r6, r4
 8001b1a:	1ad2      	subs	r2, r2, r3
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	4094      	lsls	r4, r2
 8001b20:	40de      	lsrs	r6, r3
 8001b22:	40d8      	lsrs	r0, r3
 8001b24:	2300      	movs	r3, #0
 8001b26:	4091      	lsls	r1, r2
 8001b28:	1e62      	subs	r2, r4, #1
 8001b2a:	4194      	sbcs	r4, r2
 8001b2c:	4681      	mov	r9, r0
 8001b2e:	4698      	mov	r8, r3
 8001b30:	4331      	orrs	r1, r6
 8001b32:	430c      	orrs	r4, r1
 8001b34:	0763      	lsls	r3, r4, #29
 8001b36:	d009      	beq.n	8001b4c <__aeabi_dsub+0x11c>
 8001b38:	230f      	movs	r3, #15
 8001b3a:	4023      	ands	r3, r4
 8001b3c:	2b04      	cmp	r3, #4
 8001b3e:	d005      	beq.n	8001b4c <__aeabi_dsub+0x11c>
 8001b40:	1d23      	adds	r3, r4, #4
 8001b42:	42a3      	cmp	r3, r4
 8001b44:	41a4      	sbcs	r4, r4
 8001b46:	4264      	negs	r4, r4
 8001b48:	44a1      	add	r9, r4
 8001b4a:	001c      	movs	r4, r3
 8001b4c:	464b      	mov	r3, r9
 8001b4e:	021b      	lsls	r3, r3, #8
 8001b50:	d400      	bmi.n	8001b54 <__aeabi_dsub+0x124>
 8001b52:	e0de      	b.n	8001d12 <__aeabi_dsub+0x2e2>
 8001b54:	4641      	mov	r1, r8
 8001b56:	4b8c      	ldr	r3, [pc, #560]	; (8001d88 <__aeabi_dsub+0x358>)
 8001b58:	3101      	adds	r1, #1
 8001b5a:	4299      	cmp	r1, r3
 8001b5c:	d100      	bne.n	8001b60 <__aeabi_dsub+0x130>
 8001b5e:	e0e7      	b.n	8001d30 <__aeabi_dsub+0x300>
 8001b60:	464b      	mov	r3, r9
 8001b62:	488a      	ldr	r0, [pc, #552]	; (8001d8c <__aeabi_dsub+0x35c>)
 8001b64:	08e4      	lsrs	r4, r4, #3
 8001b66:	4003      	ands	r3, r0
 8001b68:	0018      	movs	r0, r3
 8001b6a:	0549      	lsls	r1, r1, #21
 8001b6c:	075b      	lsls	r3, r3, #29
 8001b6e:	0240      	lsls	r0, r0, #9
 8001b70:	4323      	orrs	r3, r4
 8001b72:	0d4a      	lsrs	r2, r1, #21
 8001b74:	0b04      	lsrs	r4, r0, #12
 8001b76:	0512      	lsls	r2, r2, #20
 8001b78:	07ed      	lsls	r5, r5, #31
 8001b7a:	4322      	orrs	r2, r4
 8001b7c:	432a      	orrs	r2, r5
 8001b7e:	0018      	movs	r0, r3
 8001b80:	0011      	movs	r1, r2
 8001b82:	bcf0      	pop	{r4, r5, r6, r7}
 8001b84:	46bb      	mov	fp, r7
 8001b86:	46b2      	mov	sl, r6
 8001b88:	46a9      	mov	r9, r5
 8001b8a:	46a0      	mov	r8, r4
 8001b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b8e:	4642      	mov	r2, r8
 8001b90:	1a12      	subs	r2, r2, r0
 8001b92:	2a00      	cmp	r2, #0
 8001b94:	dd52      	ble.n	8001c3c <__aeabi_dsub+0x20c>
 8001b96:	2800      	cmp	r0, #0
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x16c>
 8001b9a:	e09c      	b.n	8001cd6 <__aeabi_dsub+0x2a6>
 8001b9c:	45a0      	cmp	r8, r4
 8001b9e:	d100      	bne.n	8001ba2 <__aeabi_dsub+0x172>
 8001ba0:	e0ca      	b.n	8001d38 <__aeabi_dsub+0x308>
 8001ba2:	2080      	movs	r0, #128	; 0x80
 8001ba4:	0400      	lsls	r0, r0, #16
 8001ba6:	4301      	orrs	r1, r0
 8001ba8:	2a38      	cmp	r2, #56	; 0x38
 8001baa:	dd00      	ble.n	8001bae <__aeabi_dsub+0x17e>
 8001bac:	e149      	b.n	8001e42 <__aeabi_dsub+0x412>
 8001bae:	2a1f      	cmp	r2, #31
 8001bb0:	dc00      	bgt.n	8001bb4 <__aeabi_dsub+0x184>
 8001bb2:	e197      	b.n	8001ee4 <__aeabi_dsub+0x4b4>
 8001bb4:	0010      	movs	r0, r2
 8001bb6:	000e      	movs	r6, r1
 8001bb8:	3820      	subs	r0, #32
 8001bba:	40c6      	lsrs	r6, r0
 8001bbc:	2a20      	cmp	r2, #32
 8001bbe:	d004      	beq.n	8001bca <__aeabi_dsub+0x19a>
 8001bc0:	2040      	movs	r0, #64	; 0x40
 8001bc2:	1a82      	subs	r2, r0, r2
 8001bc4:	4091      	lsls	r1, r2
 8001bc6:	430f      	orrs	r7, r1
 8001bc8:	46b9      	mov	r9, r7
 8001bca:	464c      	mov	r4, r9
 8001bcc:	1e62      	subs	r2, r4, #1
 8001bce:	4194      	sbcs	r4, r2
 8001bd0:	4334      	orrs	r4, r6
 8001bd2:	e13a      	b.n	8001e4a <__aeabi_dsub+0x41a>
 8001bd4:	000a      	movs	r2, r1
 8001bd6:	433a      	orrs	r2, r7
 8001bd8:	d028      	beq.n	8001c2c <__aeabi_dsub+0x1fc>
 8001bda:	46b3      	mov	fp, r6
 8001bdc:	42b5      	cmp	r5, r6
 8001bde:	d02b      	beq.n	8001c38 <__aeabi_dsub+0x208>
 8001be0:	4a6b      	ldr	r2, [pc, #428]	; (8001d90 <__aeabi_dsub+0x360>)
 8001be2:	4442      	add	r2, r8
 8001be4:	2a00      	cmp	r2, #0
 8001be6:	d05d      	beq.n	8001ca4 <__aeabi_dsub+0x274>
 8001be8:	4642      	mov	r2, r8
 8001bea:	4644      	mov	r4, r8
 8001bec:	1a82      	subs	r2, r0, r2
 8001bee:	2c00      	cmp	r4, #0
 8001bf0:	d000      	beq.n	8001bf4 <__aeabi_dsub+0x1c4>
 8001bf2:	e0f5      	b.n	8001de0 <__aeabi_dsub+0x3b0>
 8001bf4:	4665      	mov	r5, ip
 8001bf6:	431d      	orrs	r5, r3
 8001bf8:	d100      	bne.n	8001bfc <__aeabi_dsub+0x1cc>
 8001bfa:	e19c      	b.n	8001f36 <__aeabi_dsub+0x506>
 8001bfc:	1e55      	subs	r5, r2, #1
 8001bfe:	2a01      	cmp	r2, #1
 8001c00:	d100      	bne.n	8001c04 <__aeabi_dsub+0x1d4>
 8001c02:	e1fb      	b.n	8001ffc <__aeabi_dsub+0x5cc>
 8001c04:	4c60      	ldr	r4, [pc, #384]	; (8001d88 <__aeabi_dsub+0x358>)
 8001c06:	42a2      	cmp	r2, r4
 8001c08:	d100      	bne.n	8001c0c <__aeabi_dsub+0x1dc>
 8001c0a:	e1bd      	b.n	8001f88 <__aeabi_dsub+0x558>
 8001c0c:	002a      	movs	r2, r5
 8001c0e:	e0f0      	b.n	8001df2 <__aeabi_dsub+0x3c2>
 8001c10:	0008      	movs	r0, r1
 8001c12:	4338      	orrs	r0, r7
 8001c14:	d100      	bne.n	8001c18 <__aeabi_dsub+0x1e8>
 8001c16:	e0c3      	b.n	8001da0 <__aeabi_dsub+0x370>
 8001c18:	1e50      	subs	r0, r2, #1
 8001c1a:	2a01      	cmp	r2, #1
 8001c1c:	d100      	bne.n	8001c20 <__aeabi_dsub+0x1f0>
 8001c1e:	e1a8      	b.n	8001f72 <__aeabi_dsub+0x542>
 8001c20:	4c59      	ldr	r4, [pc, #356]	; (8001d88 <__aeabi_dsub+0x358>)
 8001c22:	42a2      	cmp	r2, r4
 8001c24:	d100      	bne.n	8001c28 <__aeabi_dsub+0x1f8>
 8001c26:	e087      	b.n	8001d38 <__aeabi_dsub+0x308>
 8001c28:	0002      	movs	r2, r0
 8001c2a:	e736      	b.n	8001a9a <__aeabi_dsub+0x6a>
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	4056      	eors	r6, r2
 8001c30:	46b3      	mov	fp, r6
 8001c32:	42b5      	cmp	r5, r6
 8001c34:	d000      	beq.n	8001c38 <__aeabi_dsub+0x208>
 8001c36:	e721      	b.n	8001a7c <__aeabi_dsub+0x4c>
 8001c38:	4a55      	ldr	r2, [pc, #340]	; (8001d90 <__aeabi_dsub+0x360>)
 8001c3a:	4442      	add	r2, r8
 8001c3c:	2a00      	cmp	r2, #0
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x212>
 8001c40:	e0b5      	b.n	8001dae <__aeabi_dsub+0x37e>
 8001c42:	4642      	mov	r2, r8
 8001c44:	4644      	mov	r4, r8
 8001c46:	1a82      	subs	r2, r0, r2
 8001c48:	2c00      	cmp	r4, #0
 8001c4a:	d100      	bne.n	8001c4e <__aeabi_dsub+0x21e>
 8001c4c:	e138      	b.n	8001ec0 <__aeabi_dsub+0x490>
 8001c4e:	4e4e      	ldr	r6, [pc, #312]	; (8001d88 <__aeabi_dsub+0x358>)
 8001c50:	42b0      	cmp	r0, r6
 8001c52:	d100      	bne.n	8001c56 <__aeabi_dsub+0x226>
 8001c54:	e1de      	b.n	8002014 <__aeabi_dsub+0x5e4>
 8001c56:	2680      	movs	r6, #128	; 0x80
 8001c58:	4664      	mov	r4, ip
 8001c5a:	0436      	lsls	r6, r6, #16
 8001c5c:	4334      	orrs	r4, r6
 8001c5e:	46a4      	mov	ip, r4
 8001c60:	2a38      	cmp	r2, #56	; 0x38
 8001c62:	dd00      	ble.n	8001c66 <__aeabi_dsub+0x236>
 8001c64:	e196      	b.n	8001f94 <__aeabi_dsub+0x564>
 8001c66:	2a1f      	cmp	r2, #31
 8001c68:	dd00      	ble.n	8001c6c <__aeabi_dsub+0x23c>
 8001c6a:	e224      	b.n	80020b6 <__aeabi_dsub+0x686>
 8001c6c:	2620      	movs	r6, #32
 8001c6e:	1ab4      	subs	r4, r6, r2
 8001c70:	46a2      	mov	sl, r4
 8001c72:	4664      	mov	r4, ip
 8001c74:	4656      	mov	r6, sl
 8001c76:	40b4      	lsls	r4, r6
 8001c78:	46a1      	mov	r9, r4
 8001c7a:	001c      	movs	r4, r3
 8001c7c:	464e      	mov	r6, r9
 8001c7e:	40d4      	lsrs	r4, r2
 8001c80:	4326      	orrs	r6, r4
 8001c82:	0034      	movs	r4, r6
 8001c84:	4656      	mov	r6, sl
 8001c86:	40b3      	lsls	r3, r6
 8001c88:	1e5e      	subs	r6, r3, #1
 8001c8a:	41b3      	sbcs	r3, r6
 8001c8c:	431c      	orrs	r4, r3
 8001c8e:	4663      	mov	r3, ip
 8001c90:	40d3      	lsrs	r3, r2
 8001c92:	18c9      	adds	r1, r1, r3
 8001c94:	19e4      	adds	r4, r4, r7
 8001c96:	42bc      	cmp	r4, r7
 8001c98:	41bf      	sbcs	r7, r7
 8001c9a:	427f      	negs	r7, r7
 8001c9c:	46b9      	mov	r9, r7
 8001c9e:	4680      	mov	r8, r0
 8001ca0:	4489      	add	r9, r1
 8001ca2:	e0d8      	b.n	8001e56 <__aeabi_dsub+0x426>
 8001ca4:	4640      	mov	r0, r8
 8001ca6:	4c3b      	ldr	r4, [pc, #236]	; (8001d94 <__aeabi_dsub+0x364>)
 8001ca8:	3001      	adds	r0, #1
 8001caa:	4220      	tst	r0, r4
 8001cac:	d000      	beq.n	8001cb0 <__aeabi_dsub+0x280>
 8001cae:	e0b4      	b.n	8001e1a <__aeabi_dsub+0x3ea>
 8001cb0:	4640      	mov	r0, r8
 8001cb2:	2800      	cmp	r0, #0
 8001cb4:	d000      	beq.n	8001cb8 <__aeabi_dsub+0x288>
 8001cb6:	e144      	b.n	8001f42 <__aeabi_dsub+0x512>
 8001cb8:	4660      	mov	r0, ip
 8001cba:	4318      	orrs	r0, r3
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x290>
 8001cbe:	e190      	b.n	8001fe2 <__aeabi_dsub+0x5b2>
 8001cc0:	0008      	movs	r0, r1
 8001cc2:	4338      	orrs	r0, r7
 8001cc4:	d000      	beq.n	8001cc8 <__aeabi_dsub+0x298>
 8001cc6:	e1aa      	b.n	800201e <__aeabi_dsub+0x5ee>
 8001cc8:	4661      	mov	r1, ip
 8001cca:	08db      	lsrs	r3, r3, #3
 8001ccc:	0749      	lsls	r1, r1, #29
 8001cce:	430b      	orrs	r3, r1
 8001cd0:	4661      	mov	r1, ip
 8001cd2:	08cc      	lsrs	r4, r1, #3
 8001cd4:	e027      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8001cd6:	0008      	movs	r0, r1
 8001cd8:	4338      	orrs	r0, r7
 8001cda:	d061      	beq.n	8001da0 <__aeabi_dsub+0x370>
 8001cdc:	1e50      	subs	r0, r2, #1
 8001cde:	2a01      	cmp	r2, #1
 8001ce0:	d100      	bne.n	8001ce4 <__aeabi_dsub+0x2b4>
 8001ce2:	e139      	b.n	8001f58 <__aeabi_dsub+0x528>
 8001ce4:	42a2      	cmp	r2, r4
 8001ce6:	d027      	beq.n	8001d38 <__aeabi_dsub+0x308>
 8001ce8:	0002      	movs	r2, r0
 8001cea:	e75d      	b.n	8001ba8 <__aeabi_dsub+0x178>
 8001cec:	0002      	movs	r2, r0
 8001cee:	391f      	subs	r1, #31
 8001cf0:	40ca      	lsrs	r2, r1
 8001cf2:	0011      	movs	r1, r2
 8001cf4:	2b20      	cmp	r3, #32
 8001cf6:	d003      	beq.n	8001d00 <__aeabi_dsub+0x2d0>
 8001cf8:	2240      	movs	r2, #64	; 0x40
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	4098      	lsls	r0, r3
 8001cfe:	4304      	orrs	r4, r0
 8001d00:	1e63      	subs	r3, r4, #1
 8001d02:	419c      	sbcs	r4, r3
 8001d04:	2300      	movs	r3, #0
 8001d06:	4699      	mov	r9, r3
 8001d08:	4698      	mov	r8, r3
 8001d0a:	430c      	orrs	r4, r1
 8001d0c:	0763      	lsls	r3, r4, #29
 8001d0e:	d000      	beq.n	8001d12 <__aeabi_dsub+0x2e2>
 8001d10:	e712      	b.n	8001b38 <__aeabi_dsub+0x108>
 8001d12:	464b      	mov	r3, r9
 8001d14:	464a      	mov	r2, r9
 8001d16:	08e4      	lsrs	r4, r4, #3
 8001d18:	075b      	lsls	r3, r3, #29
 8001d1a:	4323      	orrs	r3, r4
 8001d1c:	08d4      	lsrs	r4, r2, #3
 8001d1e:	4642      	mov	r2, r8
 8001d20:	4919      	ldr	r1, [pc, #100]	; (8001d88 <__aeabi_dsub+0x358>)
 8001d22:	428a      	cmp	r2, r1
 8001d24:	d00e      	beq.n	8001d44 <__aeabi_dsub+0x314>
 8001d26:	0324      	lsls	r4, r4, #12
 8001d28:	0552      	lsls	r2, r2, #21
 8001d2a:	0b24      	lsrs	r4, r4, #12
 8001d2c:	0d52      	lsrs	r2, r2, #21
 8001d2e:	e722      	b.n	8001b76 <__aeabi_dsub+0x146>
 8001d30:	000a      	movs	r2, r1
 8001d32:	2400      	movs	r4, #0
 8001d34:	2300      	movs	r3, #0
 8001d36:	e71e      	b.n	8001b76 <__aeabi_dsub+0x146>
 8001d38:	08db      	lsrs	r3, r3, #3
 8001d3a:	4662      	mov	r2, ip
 8001d3c:	0752      	lsls	r2, r2, #29
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	4662      	mov	r2, ip
 8001d42:	08d4      	lsrs	r4, r2, #3
 8001d44:	001a      	movs	r2, r3
 8001d46:	4322      	orrs	r2, r4
 8001d48:	d100      	bne.n	8001d4c <__aeabi_dsub+0x31c>
 8001d4a:	e1fc      	b.n	8002146 <__aeabi_dsub+0x716>
 8001d4c:	2280      	movs	r2, #128	; 0x80
 8001d4e:	0312      	lsls	r2, r2, #12
 8001d50:	4314      	orrs	r4, r2
 8001d52:	0324      	lsls	r4, r4, #12
 8001d54:	4a0c      	ldr	r2, [pc, #48]	; (8001d88 <__aeabi_dsub+0x358>)
 8001d56:	0b24      	lsrs	r4, r4, #12
 8001d58:	e70d      	b.n	8001b76 <__aeabi_dsub+0x146>
 8001d5a:	0020      	movs	r0, r4
 8001d5c:	f000 faa4 	bl	80022a8 <__clzsi2>
 8001d60:	0001      	movs	r1, r0
 8001d62:	3118      	adds	r1, #24
 8001d64:	291f      	cmp	r1, #31
 8001d66:	dc00      	bgt.n	8001d6a <__aeabi_dsub+0x33a>
 8001d68:	e6c4      	b.n	8001af4 <__aeabi_dsub+0xc4>
 8001d6a:	3808      	subs	r0, #8
 8001d6c:	4084      	lsls	r4, r0
 8001d6e:	4643      	mov	r3, r8
 8001d70:	0020      	movs	r0, r4
 8001d72:	2400      	movs	r4, #0
 8001d74:	4588      	cmp	r8, r1
 8001d76:	dc00      	bgt.n	8001d7a <__aeabi_dsub+0x34a>
 8001d78:	e6c8      	b.n	8001b0c <__aeabi_dsub+0xdc>
 8001d7a:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <__aeabi_dsub+0x35c>)
 8001d7c:	1a5b      	subs	r3, r3, r1
 8001d7e:	4010      	ands	r0, r2
 8001d80:	4698      	mov	r8, r3
 8001d82:	4681      	mov	r9, r0
 8001d84:	e6d6      	b.n	8001b34 <__aeabi_dsub+0x104>
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	000007ff 	.word	0x000007ff
 8001d8c:	ff7fffff 	.word	0xff7fffff
 8001d90:	fffff801 	.word	0xfffff801
 8001d94:	000007fe 	.word	0x000007fe
 8001d98:	430f      	orrs	r7, r1
 8001d9a:	1e7a      	subs	r2, r7, #1
 8001d9c:	4197      	sbcs	r7, r2
 8001d9e:	e691      	b.n	8001ac4 <__aeabi_dsub+0x94>
 8001da0:	4661      	mov	r1, ip
 8001da2:	08db      	lsrs	r3, r3, #3
 8001da4:	0749      	lsls	r1, r1, #29
 8001da6:	430b      	orrs	r3, r1
 8001da8:	4661      	mov	r1, ip
 8001daa:	08cc      	lsrs	r4, r1, #3
 8001dac:	e7b8      	b.n	8001d20 <__aeabi_dsub+0x2f0>
 8001dae:	4640      	mov	r0, r8
 8001db0:	4cd3      	ldr	r4, [pc, #844]	; (8002100 <__aeabi_dsub+0x6d0>)
 8001db2:	3001      	adds	r0, #1
 8001db4:	4220      	tst	r0, r4
 8001db6:	d000      	beq.n	8001dba <__aeabi_dsub+0x38a>
 8001db8:	e0a2      	b.n	8001f00 <__aeabi_dsub+0x4d0>
 8001dba:	4640      	mov	r0, r8
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	d000      	beq.n	8001dc2 <__aeabi_dsub+0x392>
 8001dc0:	e101      	b.n	8001fc6 <__aeabi_dsub+0x596>
 8001dc2:	4660      	mov	r0, ip
 8001dc4:	4318      	orrs	r0, r3
 8001dc6:	d100      	bne.n	8001dca <__aeabi_dsub+0x39a>
 8001dc8:	e15e      	b.n	8002088 <__aeabi_dsub+0x658>
 8001dca:	0008      	movs	r0, r1
 8001dcc:	4338      	orrs	r0, r7
 8001dce:	d000      	beq.n	8001dd2 <__aeabi_dsub+0x3a2>
 8001dd0:	e15f      	b.n	8002092 <__aeabi_dsub+0x662>
 8001dd2:	4661      	mov	r1, ip
 8001dd4:	08db      	lsrs	r3, r3, #3
 8001dd6:	0749      	lsls	r1, r1, #29
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	4661      	mov	r1, ip
 8001ddc:	08cc      	lsrs	r4, r1, #3
 8001dde:	e7a2      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8001de0:	4dc8      	ldr	r5, [pc, #800]	; (8002104 <__aeabi_dsub+0x6d4>)
 8001de2:	42a8      	cmp	r0, r5
 8001de4:	d100      	bne.n	8001de8 <__aeabi_dsub+0x3b8>
 8001de6:	e0cf      	b.n	8001f88 <__aeabi_dsub+0x558>
 8001de8:	2580      	movs	r5, #128	; 0x80
 8001dea:	4664      	mov	r4, ip
 8001dec:	042d      	lsls	r5, r5, #16
 8001dee:	432c      	orrs	r4, r5
 8001df0:	46a4      	mov	ip, r4
 8001df2:	2a38      	cmp	r2, #56	; 0x38
 8001df4:	dc56      	bgt.n	8001ea4 <__aeabi_dsub+0x474>
 8001df6:	2a1f      	cmp	r2, #31
 8001df8:	dd00      	ble.n	8001dfc <__aeabi_dsub+0x3cc>
 8001dfa:	e0d1      	b.n	8001fa0 <__aeabi_dsub+0x570>
 8001dfc:	2520      	movs	r5, #32
 8001dfe:	001e      	movs	r6, r3
 8001e00:	1aad      	subs	r5, r5, r2
 8001e02:	4664      	mov	r4, ip
 8001e04:	40ab      	lsls	r3, r5
 8001e06:	40ac      	lsls	r4, r5
 8001e08:	40d6      	lsrs	r6, r2
 8001e0a:	1e5d      	subs	r5, r3, #1
 8001e0c:	41ab      	sbcs	r3, r5
 8001e0e:	4334      	orrs	r4, r6
 8001e10:	4323      	orrs	r3, r4
 8001e12:	4664      	mov	r4, ip
 8001e14:	40d4      	lsrs	r4, r2
 8001e16:	1b09      	subs	r1, r1, r4
 8001e18:	e049      	b.n	8001eae <__aeabi_dsub+0x47e>
 8001e1a:	4660      	mov	r0, ip
 8001e1c:	1bdc      	subs	r4, r3, r7
 8001e1e:	1a46      	subs	r6, r0, r1
 8001e20:	42a3      	cmp	r3, r4
 8001e22:	4180      	sbcs	r0, r0
 8001e24:	4240      	negs	r0, r0
 8001e26:	4681      	mov	r9, r0
 8001e28:	0030      	movs	r0, r6
 8001e2a:	464e      	mov	r6, r9
 8001e2c:	1b80      	subs	r0, r0, r6
 8001e2e:	4681      	mov	r9, r0
 8001e30:	0200      	lsls	r0, r0, #8
 8001e32:	d476      	bmi.n	8001f22 <__aeabi_dsub+0x4f2>
 8001e34:	464b      	mov	r3, r9
 8001e36:	4323      	orrs	r3, r4
 8001e38:	d000      	beq.n	8001e3c <__aeabi_dsub+0x40c>
 8001e3a:	e652      	b.n	8001ae2 <__aeabi_dsub+0xb2>
 8001e3c:	2400      	movs	r4, #0
 8001e3e:	2500      	movs	r5, #0
 8001e40:	e771      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8001e42:	4339      	orrs	r1, r7
 8001e44:	000c      	movs	r4, r1
 8001e46:	1e62      	subs	r2, r4, #1
 8001e48:	4194      	sbcs	r4, r2
 8001e4a:	18e4      	adds	r4, r4, r3
 8001e4c:	429c      	cmp	r4, r3
 8001e4e:	419b      	sbcs	r3, r3
 8001e50:	425b      	negs	r3, r3
 8001e52:	4463      	add	r3, ip
 8001e54:	4699      	mov	r9, r3
 8001e56:	464b      	mov	r3, r9
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	d400      	bmi.n	8001e5e <__aeabi_dsub+0x42e>
 8001e5c:	e756      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	469c      	mov	ip, r3
 8001e62:	4ba8      	ldr	r3, [pc, #672]	; (8002104 <__aeabi_dsub+0x6d4>)
 8001e64:	44e0      	add	r8, ip
 8001e66:	4598      	cmp	r8, r3
 8001e68:	d038      	beq.n	8001edc <__aeabi_dsub+0x4ac>
 8001e6a:	464b      	mov	r3, r9
 8001e6c:	48a6      	ldr	r0, [pc, #664]	; (8002108 <__aeabi_dsub+0x6d8>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	4003      	ands	r3, r0
 8001e72:	0018      	movs	r0, r3
 8001e74:	0863      	lsrs	r3, r4, #1
 8001e76:	4014      	ands	r4, r2
 8001e78:	431c      	orrs	r4, r3
 8001e7a:	07c3      	lsls	r3, r0, #31
 8001e7c:	431c      	orrs	r4, r3
 8001e7e:	0843      	lsrs	r3, r0, #1
 8001e80:	4699      	mov	r9, r3
 8001e82:	e657      	b.n	8001b34 <__aeabi_dsub+0x104>
 8001e84:	0010      	movs	r0, r2
 8001e86:	000e      	movs	r6, r1
 8001e88:	3820      	subs	r0, #32
 8001e8a:	40c6      	lsrs	r6, r0
 8001e8c:	2a20      	cmp	r2, #32
 8001e8e:	d004      	beq.n	8001e9a <__aeabi_dsub+0x46a>
 8001e90:	2040      	movs	r0, #64	; 0x40
 8001e92:	1a82      	subs	r2, r0, r2
 8001e94:	4091      	lsls	r1, r2
 8001e96:	430f      	orrs	r7, r1
 8001e98:	46b9      	mov	r9, r7
 8001e9a:	464f      	mov	r7, r9
 8001e9c:	1e7a      	subs	r2, r7, #1
 8001e9e:	4197      	sbcs	r7, r2
 8001ea0:	4337      	orrs	r7, r6
 8001ea2:	e60f      	b.n	8001ac4 <__aeabi_dsub+0x94>
 8001ea4:	4662      	mov	r2, ip
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	0013      	movs	r3, r2
 8001eaa:	1e5a      	subs	r2, r3, #1
 8001eac:	4193      	sbcs	r3, r2
 8001eae:	1afc      	subs	r4, r7, r3
 8001eb0:	42a7      	cmp	r7, r4
 8001eb2:	41bf      	sbcs	r7, r7
 8001eb4:	427f      	negs	r7, r7
 8001eb6:	1bcb      	subs	r3, r1, r7
 8001eb8:	4699      	mov	r9, r3
 8001eba:	465d      	mov	r5, fp
 8001ebc:	4680      	mov	r8, r0
 8001ebe:	e608      	b.n	8001ad2 <__aeabi_dsub+0xa2>
 8001ec0:	4666      	mov	r6, ip
 8001ec2:	431e      	orrs	r6, r3
 8001ec4:	d100      	bne.n	8001ec8 <__aeabi_dsub+0x498>
 8001ec6:	e0be      	b.n	8002046 <__aeabi_dsub+0x616>
 8001ec8:	1e56      	subs	r6, r2, #1
 8001eca:	2a01      	cmp	r2, #1
 8001ecc:	d100      	bne.n	8001ed0 <__aeabi_dsub+0x4a0>
 8001ece:	e109      	b.n	80020e4 <__aeabi_dsub+0x6b4>
 8001ed0:	4c8c      	ldr	r4, [pc, #560]	; (8002104 <__aeabi_dsub+0x6d4>)
 8001ed2:	42a2      	cmp	r2, r4
 8001ed4:	d100      	bne.n	8001ed8 <__aeabi_dsub+0x4a8>
 8001ed6:	e119      	b.n	800210c <__aeabi_dsub+0x6dc>
 8001ed8:	0032      	movs	r2, r6
 8001eda:	e6c1      	b.n	8001c60 <__aeabi_dsub+0x230>
 8001edc:	4642      	mov	r2, r8
 8001ede:	2400      	movs	r4, #0
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	e648      	b.n	8001b76 <__aeabi_dsub+0x146>
 8001ee4:	2020      	movs	r0, #32
 8001ee6:	000c      	movs	r4, r1
 8001ee8:	1a80      	subs	r0, r0, r2
 8001eea:	003e      	movs	r6, r7
 8001eec:	4087      	lsls	r7, r0
 8001eee:	4084      	lsls	r4, r0
 8001ef0:	40d6      	lsrs	r6, r2
 8001ef2:	1e78      	subs	r0, r7, #1
 8001ef4:	4187      	sbcs	r7, r0
 8001ef6:	40d1      	lsrs	r1, r2
 8001ef8:	4334      	orrs	r4, r6
 8001efa:	433c      	orrs	r4, r7
 8001efc:	448c      	add	ip, r1
 8001efe:	e7a4      	b.n	8001e4a <__aeabi_dsub+0x41a>
 8001f00:	4a80      	ldr	r2, [pc, #512]	; (8002104 <__aeabi_dsub+0x6d4>)
 8001f02:	4290      	cmp	r0, r2
 8001f04:	d100      	bne.n	8001f08 <__aeabi_dsub+0x4d8>
 8001f06:	e0e9      	b.n	80020dc <__aeabi_dsub+0x6ac>
 8001f08:	19df      	adds	r7, r3, r7
 8001f0a:	429f      	cmp	r7, r3
 8001f0c:	419b      	sbcs	r3, r3
 8001f0e:	4461      	add	r1, ip
 8001f10:	425b      	negs	r3, r3
 8001f12:	18c9      	adds	r1, r1, r3
 8001f14:	07cc      	lsls	r4, r1, #31
 8001f16:	087f      	lsrs	r7, r7, #1
 8001f18:	084b      	lsrs	r3, r1, #1
 8001f1a:	4699      	mov	r9, r3
 8001f1c:	4680      	mov	r8, r0
 8001f1e:	433c      	orrs	r4, r7
 8001f20:	e6f4      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 8001f22:	1afc      	subs	r4, r7, r3
 8001f24:	42a7      	cmp	r7, r4
 8001f26:	41bf      	sbcs	r7, r7
 8001f28:	4663      	mov	r3, ip
 8001f2a:	427f      	negs	r7, r7
 8001f2c:	1ac9      	subs	r1, r1, r3
 8001f2e:	1bcb      	subs	r3, r1, r7
 8001f30:	4699      	mov	r9, r3
 8001f32:	465d      	mov	r5, fp
 8001f34:	e5d5      	b.n	8001ae2 <__aeabi_dsub+0xb2>
 8001f36:	08ff      	lsrs	r7, r7, #3
 8001f38:	074b      	lsls	r3, r1, #29
 8001f3a:	465d      	mov	r5, fp
 8001f3c:	433b      	orrs	r3, r7
 8001f3e:	08cc      	lsrs	r4, r1, #3
 8001f40:	e6ee      	b.n	8001d20 <__aeabi_dsub+0x2f0>
 8001f42:	4662      	mov	r2, ip
 8001f44:	431a      	orrs	r2, r3
 8001f46:	d000      	beq.n	8001f4a <__aeabi_dsub+0x51a>
 8001f48:	e082      	b.n	8002050 <__aeabi_dsub+0x620>
 8001f4a:	000b      	movs	r3, r1
 8001f4c:	433b      	orrs	r3, r7
 8001f4e:	d11b      	bne.n	8001f88 <__aeabi_dsub+0x558>
 8001f50:	2480      	movs	r4, #128	; 0x80
 8001f52:	2500      	movs	r5, #0
 8001f54:	0324      	lsls	r4, r4, #12
 8001f56:	e6f9      	b.n	8001d4c <__aeabi_dsub+0x31c>
 8001f58:	19dc      	adds	r4, r3, r7
 8001f5a:	429c      	cmp	r4, r3
 8001f5c:	419b      	sbcs	r3, r3
 8001f5e:	4461      	add	r1, ip
 8001f60:	4689      	mov	r9, r1
 8001f62:	425b      	negs	r3, r3
 8001f64:	4499      	add	r9, r3
 8001f66:	464b      	mov	r3, r9
 8001f68:	021b      	lsls	r3, r3, #8
 8001f6a:	d444      	bmi.n	8001ff6 <__aeabi_dsub+0x5c6>
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	4698      	mov	r8, r3
 8001f70:	e6cc      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 8001f72:	1bdc      	subs	r4, r3, r7
 8001f74:	4662      	mov	r2, ip
 8001f76:	42a3      	cmp	r3, r4
 8001f78:	419b      	sbcs	r3, r3
 8001f7a:	1a51      	subs	r1, r2, r1
 8001f7c:	425b      	negs	r3, r3
 8001f7e:	1acb      	subs	r3, r1, r3
 8001f80:	4699      	mov	r9, r3
 8001f82:	2301      	movs	r3, #1
 8001f84:	4698      	mov	r8, r3
 8001f86:	e5a4      	b.n	8001ad2 <__aeabi_dsub+0xa2>
 8001f88:	08ff      	lsrs	r7, r7, #3
 8001f8a:	074b      	lsls	r3, r1, #29
 8001f8c:	465d      	mov	r5, fp
 8001f8e:	433b      	orrs	r3, r7
 8001f90:	08cc      	lsrs	r4, r1, #3
 8001f92:	e6d7      	b.n	8001d44 <__aeabi_dsub+0x314>
 8001f94:	4662      	mov	r2, ip
 8001f96:	431a      	orrs	r2, r3
 8001f98:	0014      	movs	r4, r2
 8001f9a:	1e63      	subs	r3, r4, #1
 8001f9c:	419c      	sbcs	r4, r3
 8001f9e:	e679      	b.n	8001c94 <__aeabi_dsub+0x264>
 8001fa0:	0015      	movs	r5, r2
 8001fa2:	4664      	mov	r4, ip
 8001fa4:	3d20      	subs	r5, #32
 8001fa6:	40ec      	lsrs	r4, r5
 8001fa8:	46a0      	mov	r8, r4
 8001faa:	2a20      	cmp	r2, #32
 8001fac:	d005      	beq.n	8001fba <__aeabi_dsub+0x58a>
 8001fae:	2540      	movs	r5, #64	; 0x40
 8001fb0:	4664      	mov	r4, ip
 8001fb2:	1aaa      	subs	r2, r5, r2
 8001fb4:	4094      	lsls	r4, r2
 8001fb6:	4323      	orrs	r3, r4
 8001fb8:	469a      	mov	sl, r3
 8001fba:	4654      	mov	r4, sl
 8001fbc:	1e63      	subs	r3, r4, #1
 8001fbe:	419c      	sbcs	r4, r3
 8001fc0:	4643      	mov	r3, r8
 8001fc2:	4323      	orrs	r3, r4
 8001fc4:	e773      	b.n	8001eae <__aeabi_dsub+0x47e>
 8001fc6:	4662      	mov	r2, ip
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	d023      	beq.n	8002014 <__aeabi_dsub+0x5e4>
 8001fcc:	000a      	movs	r2, r1
 8001fce:	433a      	orrs	r2, r7
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x5a4>
 8001fd2:	e0a0      	b.n	8002116 <__aeabi_dsub+0x6e6>
 8001fd4:	4662      	mov	r2, ip
 8001fd6:	08db      	lsrs	r3, r3, #3
 8001fd8:	0752      	lsls	r2, r2, #29
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	4662      	mov	r2, ip
 8001fde:	08d4      	lsrs	r4, r2, #3
 8001fe0:	e6b0      	b.n	8001d44 <__aeabi_dsub+0x314>
 8001fe2:	000b      	movs	r3, r1
 8001fe4:	433b      	orrs	r3, r7
 8001fe6:	d100      	bne.n	8001fea <__aeabi_dsub+0x5ba>
 8001fe8:	e728      	b.n	8001e3c <__aeabi_dsub+0x40c>
 8001fea:	08ff      	lsrs	r7, r7, #3
 8001fec:	074b      	lsls	r3, r1, #29
 8001fee:	465d      	mov	r5, fp
 8001ff0:	433b      	orrs	r3, r7
 8001ff2:	08cc      	lsrs	r4, r1, #3
 8001ff4:	e697      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	4698      	mov	r8, r3
 8001ffa:	e736      	b.n	8001e6a <__aeabi_dsub+0x43a>
 8001ffc:	1afc      	subs	r4, r7, r3
 8001ffe:	42a7      	cmp	r7, r4
 8002000:	41bf      	sbcs	r7, r7
 8002002:	4663      	mov	r3, ip
 8002004:	427f      	negs	r7, r7
 8002006:	1ac9      	subs	r1, r1, r3
 8002008:	1bcb      	subs	r3, r1, r7
 800200a:	4699      	mov	r9, r3
 800200c:	2301      	movs	r3, #1
 800200e:	465d      	mov	r5, fp
 8002010:	4698      	mov	r8, r3
 8002012:	e55e      	b.n	8001ad2 <__aeabi_dsub+0xa2>
 8002014:	074b      	lsls	r3, r1, #29
 8002016:	08ff      	lsrs	r7, r7, #3
 8002018:	433b      	orrs	r3, r7
 800201a:	08cc      	lsrs	r4, r1, #3
 800201c:	e692      	b.n	8001d44 <__aeabi_dsub+0x314>
 800201e:	1bdc      	subs	r4, r3, r7
 8002020:	4660      	mov	r0, ip
 8002022:	42a3      	cmp	r3, r4
 8002024:	41b6      	sbcs	r6, r6
 8002026:	1a40      	subs	r0, r0, r1
 8002028:	4276      	negs	r6, r6
 800202a:	1b80      	subs	r0, r0, r6
 800202c:	4681      	mov	r9, r0
 800202e:	0200      	lsls	r0, r0, #8
 8002030:	d560      	bpl.n	80020f4 <__aeabi_dsub+0x6c4>
 8002032:	1afc      	subs	r4, r7, r3
 8002034:	42a7      	cmp	r7, r4
 8002036:	41bf      	sbcs	r7, r7
 8002038:	4663      	mov	r3, ip
 800203a:	427f      	negs	r7, r7
 800203c:	1ac9      	subs	r1, r1, r3
 800203e:	1bcb      	subs	r3, r1, r7
 8002040:	4699      	mov	r9, r3
 8002042:	465d      	mov	r5, fp
 8002044:	e576      	b.n	8001b34 <__aeabi_dsub+0x104>
 8002046:	08ff      	lsrs	r7, r7, #3
 8002048:	074b      	lsls	r3, r1, #29
 800204a:	433b      	orrs	r3, r7
 800204c:	08cc      	lsrs	r4, r1, #3
 800204e:	e667      	b.n	8001d20 <__aeabi_dsub+0x2f0>
 8002050:	000a      	movs	r2, r1
 8002052:	08db      	lsrs	r3, r3, #3
 8002054:	433a      	orrs	r2, r7
 8002056:	d100      	bne.n	800205a <__aeabi_dsub+0x62a>
 8002058:	e66f      	b.n	8001d3a <__aeabi_dsub+0x30a>
 800205a:	4662      	mov	r2, ip
 800205c:	0752      	lsls	r2, r2, #29
 800205e:	4313      	orrs	r3, r2
 8002060:	4662      	mov	r2, ip
 8002062:	08d4      	lsrs	r4, r2, #3
 8002064:	2280      	movs	r2, #128	; 0x80
 8002066:	0312      	lsls	r2, r2, #12
 8002068:	4214      	tst	r4, r2
 800206a:	d007      	beq.n	800207c <__aeabi_dsub+0x64c>
 800206c:	08c8      	lsrs	r0, r1, #3
 800206e:	4210      	tst	r0, r2
 8002070:	d104      	bne.n	800207c <__aeabi_dsub+0x64c>
 8002072:	465d      	mov	r5, fp
 8002074:	0004      	movs	r4, r0
 8002076:	08fb      	lsrs	r3, r7, #3
 8002078:	0749      	lsls	r1, r1, #29
 800207a:	430b      	orrs	r3, r1
 800207c:	0f5a      	lsrs	r2, r3, #29
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	08db      	lsrs	r3, r3, #3
 8002082:	0752      	lsls	r2, r2, #29
 8002084:	4313      	orrs	r3, r2
 8002086:	e65d      	b.n	8001d44 <__aeabi_dsub+0x314>
 8002088:	074b      	lsls	r3, r1, #29
 800208a:	08ff      	lsrs	r7, r7, #3
 800208c:	433b      	orrs	r3, r7
 800208e:	08cc      	lsrs	r4, r1, #3
 8002090:	e649      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8002092:	19dc      	adds	r4, r3, r7
 8002094:	429c      	cmp	r4, r3
 8002096:	419b      	sbcs	r3, r3
 8002098:	4461      	add	r1, ip
 800209a:	4689      	mov	r9, r1
 800209c:	425b      	negs	r3, r3
 800209e:	4499      	add	r9, r3
 80020a0:	464b      	mov	r3, r9
 80020a2:	021b      	lsls	r3, r3, #8
 80020a4:	d400      	bmi.n	80020a8 <__aeabi_dsub+0x678>
 80020a6:	e631      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 80020a8:	464a      	mov	r2, r9
 80020aa:	4b17      	ldr	r3, [pc, #92]	; (8002108 <__aeabi_dsub+0x6d8>)
 80020ac:	401a      	ands	r2, r3
 80020ae:	2301      	movs	r3, #1
 80020b0:	4691      	mov	r9, r2
 80020b2:	4698      	mov	r8, r3
 80020b4:	e62a      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 80020b6:	0016      	movs	r6, r2
 80020b8:	4664      	mov	r4, ip
 80020ba:	3e20      	subs	r6, #32
 80020bc:	40f4      	lsrs	r4, r6
 80020be:	46a0      	mov	r8, r4
 80020c0:	2a20      	cmp	r2, #32
 80020c2:	d005      	beq.n	80020d0 <__aeabi_dsub+0x6a0>
 80020c4:	2640      	movs	r6, #64	; 0x40
 80020c6:	4664      	mov	r4, ip
 80020c8:	1ab2      	subs	r2, r6, r2
 80020ca:	4094      	lsls	r4, r2
 80020cc:	4323      	orrs	r3, r4
 80020ce:	469a      	mov	sl, r3
 80020d0:	4654      	mov	r4, sl
 80020d2:	1e63      	subs	r3, r4, #1
 80020d4:	419c      	sbcs	r4, r3
 80020d6:	4643      	mov	r3, r8
 80020d8:	431c      	orrs	r4, r3
 80020da:	e5db      	b.n	8001c94 <__aeabi_dsub+0x264>
 80020dc:	0002      	movs	r2, r0
 80020de:	2400      	movs	r4, #0
 80020e0:	2300      	movs	r3, #0
 80020e2:	e548      	b.n	8001b76 <__aeabi_dsub+0x146>
 80020e4:	19dc      	adds	r4, r3, r7
 80020e6:	42bc      	cmp	r4, r7
 80020e8:	41bf      	sbcs	r7, r7
 80020ea:	4461      	add	r1, ip
 80020ec:	4689      	mov	r9, r1
 80020ee:	427f      	negs	r7, r7
 80020f0:	44b9      	add	r9, r7
 80020f2:	e738      	b.n	8001f66 <__aeabi_dsub+0x536>
 80020f4:	464b      	mov	r3, r9
 80020f6:	4323      	orrs	r3, r4
 80020f8:	d100      	bne.n	80020fc <__aeabi_dsub+0x6cc>
 80020fa:	e69f      	b.n	8001e3c <__aeabi_dsub+0x40c>
 80020fc:	e606      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	000007fe 	.word	0x000007fe
 8002104:	000007ff 	.word	0x000007ff
 8002108:	ff7fffff 	.word	0xff7fffff
 800210c:	08ff      	lsrs	r7, r7, #3
 800210e:	074b      	lsls	r3, r1, #29
 8002110:	433b      	orrs	r3, r7
 8002112:	08cc      	lsrs	r4, r1, #3
 8002114:	e616      	b.n	8001d44 <__aeabi_dsub+0x314>
 8002116:	4662      	mov	r2, ip
 8002118:	08db      	lsrs	r3, r3, #3
 800211a:	0752      	lsls	r2, r2, #29
 800211c:	4313      	orrs	r3, r2
 800211e:	4662      	mov	r2, ip
 8002120:	08d4      	lsrs	r4, r2, #3
 8002122:	2280      	movs	r2, #128	; 0x80
 8002124:	0312      	lsls	r2, r2, #12
 8002126:	4214      	tst	r4, r2
 8002128:	d007      	beq.n	800213a <__aeabi_dsub+0x70a>
 800212a:	08c8      	lsrs	r0, r1, #3
 800212c:	4210      	tst	r0, r2
 800212e:	d104      	bne.n	800213a <__aeabi_dsub+0x70a>
 8002130:	465d      	mov	r5, fp
 8002132:	0004      	movs	r4, r0
 8002134:	08fb      	lsrs	r3, r7, #3
 8002136:	0749      	lsls	r1, r1, #29
 8002138:	430b      	orrs	r3, r1
 800213a:	0f5a      	lsrs	r2, r3, #29
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	0752      	lsls	r2, r2, #29
 8002140:	08db      	lsrs	r3, r3, #3
 8002142:	4313      	orrs	r3, r2
 8002144:	e5fe      	b.n	8001d44 <__aeabi_dsub+0x314>
 8002146:	2300      	movs	r3, #0
 8002148:	4a01      	ldr	r2, [pc, #4]	; (8002150 <__aeabi_dsub+0x720>)
 800214a:	001c      	movs	r4, r3
 800214c:	e513      	b.n	8001b76 <__aeabi_dsub+0x146>
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	000007ff 	.word	0x000007ff

08002154 <__aeabi_dcmpun>:
 8002154:	b570      	push	{r4, r5, r6, lr}
 8002156:	0005      	movs	r5, r0
 8002158:	480c      	ldr	r0, [pc, #48]	; (800218c <__aeabi_dcmpun+0x38>)
 800215a:	031c      	lsls	r4, r3, #12
 800215c:	0016      	movs	r6, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	030a      	lsls	r2, r1, #12
 8002162:	0049      	lsls	r1, r1, #1
 8002164:	0b12      	lsrs	r2, r2, #12
 8002166:	0d49      	lsrs	r1, r1, #21
 8002168:	0b24      	lsrs	r4, r4, #12
 800216a:	0d5b      	lsrs	r3, r3, #21
 800216c:	4281      	cmp	r1, r0
 800216e:	d008      	beq.n	8002182 <__aeabi_dcmpun+0x2e>
 8002170:	4a06      	ldr	r2, [pc, #24]	; (800218c <__aeabi_dcmpun+0x38>)
 8002172:	2000      	movs	r0, #0
 8002174:	4293      	cmp	r3, r2
 8002176:	d103      	bne.n	8002180 <__aeabi_dcmpun+0x2c>
 8002178:	0020      	movs	r0, r4
 800217a:	4330      	orrs	r0, r6
 800217c:	1e43      	subs	r3, r0, #1
 800217e:	4198      	sbcs	r0, r3
 8002180:	bd70      	pop	{r4, r5, r6, pc}
 8002182:	2001      	movs	r0, #1
 8002184:	432a      	orrs	r2, r5
 8002186:	d1fb      	bne.n	8002180 <__aeabi_dcmpun+0x2c>
 8002188:	e7f2      	b.n	8002170 <__aeabi_dcmpun+0x1c>
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	000007ff 	.word	0x000007ff

08002190 <__aeabi_d2iz>:
 8002190:	000a      	movs	r2, r1
 8002192:	b530      	push	{r4, r5, lr}
 8002194:	4c13      	ldr	r4, [pc, #76]	; (80021e4 <__aeabi_d2iz+0x54>)
 8002196:	0053      	lsls	r3, r2, #1
 8002198:	0309      	lsls	r1, r1, #12
 800219a:	0005      	movs	r5, r0
 800219c:	0b09      	lsrs	r1, r1, #12
 800219e:	2000      	movs	r0, #0
 80021a0:	0d5b      	lsrs	r3, r3, #21
 80021a2:	0fd2      	lsrs	r2, r2, #31
 80021a4:	42a3      	cmp	r3, r4
 80021a6:	dd04      	ble.n	80021b2 <__aeabi_d2iz+0x22>
 80021a8:	480f      	ldr	r0, [pc, #60]	; (80021e8 <__aeabi_d2iz+0x58>)
 80021aa:	4283      	cmp	r3, r0
 80021ac:	dd02      	ble.n	80021b4 <__aeabi_d2iz+0x24>
 80021ae:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <__aeabi_d2iz+0x5c>)
 80021b0:	18d0      	adds	r0, r2, r3
 80021b2:	bd30      	pop	{r4, r5, pc}
 80021b4:	2080      	movs	r0, #128	; 0x80
 80021b6:	0340      	lsls	r0, r0, #13
 80021b8:	4301      	orrs	r1, r0
 80021ba:	480d      	ldr	r0, [pc, #52]	; (80021f0 <__aeabi_d2iz+0x60>)
 80021bc:	1ac0      	subs	r0, r0, r3
 80021be:	281f      	cmp	r0, #31
 80021c0:	dd08      	ble.n	80021d4 <__aeabi_d2iz+0x44>
 80021c2:	480c      	ldr	r0, [pc, #48]	; (80021f4 <__aeabi_d2iz+0x64>)
 80021c4:	1ac3      	subs	r3, r0, r3
 80021c6:	40d9      	lsrs	r1, r3
 80021c8:	000b      	movs	r3, r1
 80021ca:	4258      	negs	r0, r3
 80021cc:	2a00      	cmp	r2, #0
 80021ce:	d1f0      	bne.n	80021b2 <__aeabi_d2iz+0x22>
 80021d0:	0018      	movs	r0, r3
 80021d2:	e7ee      	b.n	80021b2 <__aeabi_d2iz+0x22>
 80021d4:	4c08      	ldr	r4, [pc, #32]	; (80021f8 <__aeabi_d2iz+0x68>)
 80021d6:	40c5      	lsrs	r5, r0
 80021d8:	46a4      	mov	ip, r4
 80021da:	4463      	add	r3, ip
 80021dc:	4099      	lsls	r1, r3
 80021de:	000b      	movs	r3, r1
 80021e0:	432b      	orrs	r3, r5
 80021e2:	e7f2      	b.n	80021ca <__aeabi_d2iz+0x3a>
 80021e4:	000003fe 	.word	0x000003fe
 80021e8:	0000041d 	.word	0x0000041d
 80021ec:	7fffffff 	.word	0x7fffffff
 80021f0:	00000433 	.word	0x00000433
 80021f4:	00000413 	.word	0x00000413
 80021f8:	fffffbed 	.word	0xfffffbed

080021fc <__aeabi_i2d>:
 80021fc:	b570      	push	{r4, r5, r6, lr}
 80021fe:	2800      	cmp	r0, #0
 8002200:	d016      	beq.n	8002230 <__aeabi_i2d+0x34>
 8002202:	17c3      	asrs	r3, r0, #31
 8002204:	18c5      	adds	r5, r0, r3
 8002206:	405d      	eors	r5, r3
 8002208:	0fc4      	lsrs	r4, r0, #31
 800220a:	0028      	movs	r0, r5
 800220c:	f000 f84c 	bl	80022a8 <__clzsi2>
 8002210:	4a11      	ldr	r2, [pc, #68]	; (8002258 <__aeabi_i2d+0x5c>)
 8002212:	1a12      	subs	r2, r2, r0
 8002214:	280a      	cmp	r0, #10
 8002216:	dc16      	bgt.n	8002246 <__aeabi_i2d+0x4a>
 8002218:	0003      	movs	r3, r0
 800221a:	002e      	movs	r6, r5
 800221c:	3315      	adds	r3, #21
 800221e:	409e      	lsls	r6, r3
 8002220:	230b      	movs	r3, #11
 8002222:	1a18      	subs	r0, r3, r0
 8002224:	40c5      	lsrs	r5, r0
 8002226:	0552      	lsls	r2, r2, #21
 8002228:	032d      	lsls	r5, r5, #12
 800222a:	0b2d      	lsrs	r5, r5, #12
 800222c:	0d53      	lsrs	r3, r2, #21
 800222e:	e003      	b.n	8002238 <__aeabi_i2d+0x3c>
 8002230:	2400      	movs	r4, #0
 8002232:	2300      	movs	r3, #0
 8002234:	2500      	movs	r5, #0
 8002236:	2600      	movs	r6, #0
 8002238:	051b      	lsls	r3, r3, #20
 800223a:	432b      	orrs	r3, r5
 800223c:	07e4      	lsls	r4, r4, #31
 800223e:	4323      	orrs	r3, r4
 8002240:	0030      	movs	r0, r6
 8002242:	0019      	movs	r1, r3
 8002244:	bd70      	pop	{r4, r5, r6, pc}
 8002246:	380b      	subs	r0, #11
 8002248:	4085      	lsls	r5, r0
 800224a:	0552      	lsls	r2, r2, #21
 800224c:	032d      	lsls	r5, r5, #12
 800224e:	2600      	movs	r6, #0
 8002250:	0b2d      	lsrs	r5, r5, #12
 8002252:	0d53      	lsrs	r3, r2, #21
 8002254:	e7f0      	b.n	8002238 <__aeabi_i2d+0x3c>
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	0000041e 	.word	0x0000041e

0800225c <__aeabi_ui2d>:
 800225c:	b510      	push	{r4, lr}
 800225e:	1e04      	subs	r4, r0, #0
 8002260:	d010      	beq.n	8002284 <__aeabi_ui2d+0x28>
 8002262:	f000 f821 	bl	80022a8 <__clzsi2>
 8002266:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <__aeabi_ui2d+0x48>)
 8002268:	1a1b      	subs	r3, r3, r0
 800226a:	280a      	cmp	r0, #10
 800226c:	dc11      	bgt.n	8002292 <__aeabi_ui2d+0x36>
 800226e:	220b      	movs	r2, #11
 8002270:	0021      	movs	r1, r4
 8002272:	1a12      	subs	r2, r2, r0
 8002274:	40d1      	lsrs	r1, r2
 8002276:	3015      	adds	r0, #21
 8002278:	030a      	lsls	r2, r1, #12
 800227a:	055b      	lsls	r3, r3, #21
 800227c:	4084      	lsls	r4, r0
 800227e:	0b12      	lsrs	r2, r2, #12
 8002280:	0d5b      	lsrs	r3, r3, #21
 8002282:	e001      	b.n	8002288 <__aeabi_ui2d+0x2c>
 8002284:	2300      	movs	r3, #0
 8002286:	2200      	movs	r2, #0
 8002288:	051b      	lsls	r3, r3, #20
 800228a:	4313      	orrs	r3, r2
 800228c:	0020      	movs	r0, r4
 800228e:	0019      	movs	r1, r3
 8002290:	bd10      	pop	{r4, pc}
 8002292:	0022      	movs	r2, r4
 8002294:	380b      	subs	r0, #11
 8002296:	4082      	lsls	r2, r0
 8002298:	055b      	lsls	r3, r3, #21
 800229a:	0312      	lsls	r2, r2, #12
 800229c:	2400      	movs	r4, #0
 800229e:	0b12      	lsrs	r2, r2, #12
 80022a0:	0d5b      	lsrs	r3, r3, #21
 80022a2:	e7f1      	b.n	8002288 <__aeabi_ui2d+0x2c>
 80022a4:	0000041e 	.word	0x0000041e

080022a8 <__clzsi2>:
 80022a8:	211c      	movs	r1, #28
 80022aa:	2301      	movs	r3, #1
 80022ac:	041b      	lsls	r3, r3, #16
 80022ae:	4298      	cmp	r0, r3
 80022b0:	d301      	bcc.n	80022b6 <__clzsi2+0xe>
 80022b2:	0c00      	lsrs	r0, r0, #16
 80022b4:	3910      	subs	r1, #16
 80022b6:	0a1b      	lsrs	r3, r3, #8
 80022b8:	4298      	cmp	r0, r3
 80022ba:	d301      	bcc.n	80022c0 <__clzsi2+0x18>
 80022bc:	0a00      	lsrs	r0, r0, #8
 80022be:	3908      	subs	r1, #8
 80022c0:	091b      	lsrs	r3, r3, #4
 80022c2:	4298      	cmp	r0, r3
 80022c4:	d301      	bcc.n	80022ca <__clzsi2+0x22>
 80022c6:	0900      	lsrs	r0, r0, #4
 80022c8:	3904      	subs	r1, #4
 80022ca:	a202      	add	r2, pc, #8	; (adr r2, 80022d4 <__clzsi2+0x2c>)
 80022cc:	5c10      	ldrb	r0, [r2, r0]
 80022ce:	1840      	adds	r0, r0, r1
 80022d0:	4770      	bx	lr
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	02020304 	.word	0x02020304
 80022d8:	01010101 	.word	0x01010101
	...

080022e4 <__clzdi2>:
 80022e4:	b510      	push	{r4, lr}
 80022e6:	2900      	cmp	r1, #0
 80022e8:	d103      	bne.n	80022f2 <__clzdi2+0xe>
 80022ea:	f7ff ffdd 	bl	80022a8 <__clzsi2>
 80022ee:	3020      	adds	r0, #32
 80022f0:	e002      	b.n	80022f8 <__clzdi2+0x14>
 80022f2:	0008      	movs	r0, r1
 80022f4:	f7ff ffd8 	bl	80022a8 <__clzsi2>
 80022f8:	bd10      	pop	{r4, pc}
 80022fa:	46c0      	nop			; (mov r8, r8)

080022fc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002300:	f000 fb0c 	bl	800291c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002304:	f000 f838 	bl	8002378 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002308:	f000 f93c 	bl	8002584 <MX_GPIO_Init>
	MX_ADC_Init();
 800230c:	f000 f8a6 	bl	800245c <MX_ADC_Init>
	MX_USART1_UART_Init();
 8002310:	f000 f908 	bl	8002524 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADC_Start(&hadc);
 8002314:	4b13      	ldr	r3, [pc, #76]	; (8002364 <main+0x68>)
 8002316:	0018      	movs	r0, r3
 8002318:	f000 fce4 	bl	8002ce4 <HAL_ADC_Start>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_ADC_PollForConversion(&hadc, 4000);
 800231c:	23fa      	movs	r3, #250	; 0xfa
 800231e:	011a      	lsls	r2, r3, #4
 8002320:	4b10      	ldr	r3, [pc, #64]	; (8002364 <main+0x68>)
 8002322:	0011      	movs	r1, r2
 8002324:	0018      	movs	r0, r3
 8002326:	f000 fd31 	bl	8002d8c <HAL_ADC_PollForConversion>
		adc_val = HAL_ADC_GetValue(&hadc);
 800232a:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <main+0x68>)
 800232c:	0018      	movs	r0, r3
 800232e:	f000 fdc9 	bl	8002ec4 <HAL_ADC_GetValue>
 8002332:	0003      	movs	r3, r0
 8002334:	b29a      	uxth	r2, r3
 8002336:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <main+0x6c>)
 8002338:	801a      	strh	r2, [r3, #0]
		// Convert to string and print
		sprintf(msg, "%hu\r\n", adc_val);
 800233a:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <main+0x6c>)
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	001a      	movs	r2, r3
 8002340:	490a      	ldr	r1, [pc, #40]	; (800236c <main+0x70>)
 8002342:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <main+0x74>)
 8002344:	0018      	movs	r0, r3
 8002346:	f003 fad3 	bl	80058f0 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800234a:	4b09      	ldr	r3, [pc, #36]	; (8002370 <main+0x74>)
 800234c:	0018      	movs	r0, r3
 800234e:	f7fd fedb 	bl	8000108 <strlen>
 8002352:	0003      	movs	r3, r0
 8002354:	b29a      	uxth	r2, r3
 8002356:	2301      	movs	r3, #1
 8002358:	425b      	negs	r3, r3
 800235a:	4905      	ldr	r1, [pc, #20]	; (8002370 <main+0x74>)
 800235c:	4805      	ldr	r0, [pc, #20]	; (8002374 <main+0x78>)
 800235e:	f002 f8d9 	bl	8004514 <HAL_UART_Transmit>
		HAL_ADC_PollForConversion(&hadc, 4000);
 8002362:	e7db      	b.n	800231c <main+0x20>
 8002364:	200001f8 	.word	0x200001f8
 8002368:	200002dc 	.word	0x200002dc
 800236c:	08007f60 	.word	0x08007f60
 8002370:	200002e0 	.word	0x200002e0
 8002374:	20000254 	.word	0x20000254

08002378 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002378:	b590      	push	{r4, r7, lr}
 800237a:	b09d      	sub	sp, #116	; 0x74
 800237c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800237e:	2438      	movs	r4, #56	; 0x38
 8002380:	193b      	adds	r3, r7, r4
 8002382:	0018      	movs	r0, r3
 8002384:	2338      	movs	r3, #56	; 0x38
 8002386:	001a      	movs	r2, r3
 8002388:	2100      	movs	r1, #0
 800238a:	f002 fe3b 	bl	8005004 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800238e:	2324      	movs	r3, #36	; 0x24
 8002390:	18fb      	adds	r3, r7, r3
 8002392:	0018      	movs	r0, r3
 8002394:	2314      	movs	r3, #20
 8002396:	001a      	movs	r2, r3
 8002398:	2100      	movs	r1, #0
 800239a:	f002 fe33 	bl	8005004 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800239e:	003b      	movs	r3, r7
 80023a0:	0018      	movs	r0, r3
 80023a2:	2324      	movs	r3, #36	; 0x24
 80023a4:	001a      	movs	r2, r3
 80023a6:	2100      	movs	r1, #0
 80023a8:	f002 fe2c 	bl	8005004 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023ac:	4b29      	ldr	r3, [pc, #164]	; (8002454 <SystemClock_Config+0xdc>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a29      	ldr	r2, [pc, #164]	; (8002458 <SystemClock_Config+0xe0>)
 80023b2:	401a      	ands	r2, r3
 80023b4:	4b27      	ldr	r3, [pc, #156]	; (8002454 <SystemClock_Config+0xdc>)
 80023b6:	2180      	movs	r1, #128	; 0x80
 80023b8:	0109      	lsls	r1, r1, #4
 80023ba:	430a      	orrs	r2, r1
 80023bc:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023be:	0021      	movs	r1, r4
 80023c0:	187b      	adds	r3, r7, r1
 80023c2:	2202      	movs	r2, #2
 80023c4:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023c6:	187b      	adds	r3, r7, r1
 80023c8:	2201      	movs	r2, #1
 80023ca:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023cc:	187b      	adds	r3, r7, r1
 80023ce:	2210      	movs	r2, #16
 80023d0:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023d2:	187b      	adds	r3, r7, r1
 80023d4:	2202      	movs	r2, #2
 80023d6:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023d8:	187b      	adds	r3, r7, r1
 80023da:	2200      	movs	r2, #0
 80023dc:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 80023de:	187b      	adds	r3, r7, r1
 80023e0:	2200      	movs	r2, #0
 80023e2:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80023e4:	187b      	adds	r3, r7, r1
 80023e6:	2280      	movs	r2, #128	; 0x80
 80023e8:	0412      	lsls	r2, r2, #16
 80023ea:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80023ec:	187b      	adds	r3, r7, r1
 80023ee:	0018      	movs	r0, r3
 80023f0:	f001 f8c6 	bl	8003580 <HAL_RCC_OscConfig>
 80023f4:	1e03      	subs	r3, r0, #0
 80023f6:	d001      	beq.n	80023fc <SystemClock_Config+0x84>
		Error_Handler();
 80023f8:	f000 f8f2 	bl	80025e0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80023fc:	2124      	movs	r1, #36	; 0x24
 80023fe:	187b      	adds	r3, r7, r1
 8002400:	220f      	movs	r2, #15
 8002402:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002404:	187b      	adds	r3, r7, r1
 8002406:	2203      	movs	r2, #3
 8002408:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800240a:	187b      	adds	r3, r7, r1
 800240c:	2200      	movs	r2, #0
 800240e:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002410:	187b      	adds	r3, r7, r1
 8002412:	2200      	movs	r2, #0
 8002414:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002416:	187b      	adds	r3, r7, r1
 8002418:	2200      	movs	r2, #0
 800241a:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800241c:	187b      	adds	r3, r7, r1
 800241e:	2100      	movs	r1, #0
 8002420:	0018      	movs	r0, r3
 8002422:	f001 fc71 	bl	8003d08 <HAL_RCC_ClockConfig>
 8002426:	1e03      	subs	r3, r0, #0
 8002428:	d001      	beq.n	800242e <SystemClock_Config+0xb6>
		Error_Handler();
 800242a:	f000 f8d9 	bl	80025e0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800242e:	003b      	movs	r3, r7
 8002430:	2201      	movs	r2, #1
 8002432:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002434:	003b      	movs	r3, r7
 8002436:	2200      	movs	r2, #0
 8002438:	60da      	str	r2, [r3, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800243a:	003b      	movs	r3, r7
 800243c:	0018      	movs	r0, r3
 800243e:	f001 fe87 	bl	8004150 <HAL_RCCEx_PeriphCLKConfig>
 8002442:	1e03      	subs	r3, r0, #0
 8002444:	d001      	beq.n	800244a <SystemClock_Config+0xd2>
		Error_Handler();
 8002446:	f000 f8cb 	bl	80025e0 <Error_Handler>
	}
}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	46bd      	mov	sp, r7
 800244e:	b01d      	add	sp, #116	; 0x74
 8002450:	bd90      	pop	{r4, r7, pc}
 8002452:	46c0      	nop			; (mov r8, r8)
 8002454:	40007000 	.word	0x40007000
 8002458:	ffffe7ff 	.word	0xffffe7ff

0800245c <MX_ADC_Init>:
/**
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void) {
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002462:	003b      	movs	r3, r7
 8002464:	0018      	movs	r0, r3
 8002466:	2308      	movs	r3, #8
 8002468:	001a      	movs	r2, r3
 800246a:	2100      	movs	r1, #0
 800246c:	f002 fdca 	bl	8005004 <memset>

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 8002470:	4b2a      	ldr	r3, [pc, #168]	; (800251c <MX_ADC_Init+0xc0>)
 8002472:	4a2b      	ldr	r2, [pc, #172]	; (8002520 <MX_ADC_Init+0xc4>)
 8002474:	601a      	str	r2, [r3, #0]
	hadc.Init.OversamplingMode = DISABLE;
 8002476:	4b29      	ldr	r3, [pc, #164]	; (800251c <MX_ADC_Init+0xc0>)
 8002478:	2200      	movs	r2, #0
 800247a:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800247c:	4b27      	ldr	r3, [pc, #156]	; (800251c <MX_ADC_Init+0xc0>)
 800247e:	22c0      	movs	r2, #192	; 0xc0
 8002480:	0612      	lsls	r2, r2, #24
 8002482:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_8B;
 8002484:	4b25      	ldr	r3, [pc, #148]	; (800251c <MX_ADC_Init+0xc0>)
 8002486:	2210      	movs	r2, #16
 8002488:	609a      	str	r2, [r3, #8]
	hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800248a:	4b24      	ldr	r3, [pc, #144]	; (800251c <MX_ADC_Init+0xc0>)
 800248c:	2200      	movs	r2, #0
 800248e:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002490:	4b22      	ldr	r3, [pc, #136]	; (800251c <MX_ADC_Init+0xc0>)
 8002492:	2201      	movs	r2, #1
 8002494:	611a      	str	r2, [r3, #16]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002496:	4b21      	ldr	r3, [pc, #132]	; (800251c <MX_ADC_Init+0xc0>)
 8002498:	2200      	movs	r2, #0
 800249a:	60da      	str	r2, [r3, #12]
	hadc.Init.ContinuousConvMode = ENABLE;
 800249c:	4b1f      	ldr	r3, [pc, #124]	; (800251c <MX_ADC_Init+0xc0>)
 800249e:	2220      	movs	r2, #32
 80024a0:	2101      	movs	r1, #1
 80024a2:	5499      	strb	r1, [r3, r2]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 80024a4:	4b1d      	ldr	r3, [pc, #116]	; (800251c <MX_ADC_Init+0xc0>)
 80024a6:	2221      	movs	r2, #33	; 0x21
 80024a8:	2100      	movs	r1, #0
 80024aa:	5499      	strb	r1, [r3, r2]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80024ac:	4b1b      	ldr	r3, [pc, #108]	; (800251c <MX_ADC_Init+0xc0>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024b2:	4b1a      	ldr	r3, [pc, #104]	; (800251c <MX_ADC_Init+0xc0>)
 80024b4:	22c2      	movs	r2, #194	; 0xc2
 80024b6:	32ff      	adds	r2, #255	; 0xff
 80024b8:	625a      	str	r2, [r3, #36]	; 0x24
	hadc.Init.DMAContinuousRequests = DISABLE;
 80024ba:	4b18      	ldr	r3, [pc, #96]	; (800251c <MX_ADC_Init+0xc0>)
 80024bc:	222c      	movs	r2, #44	; 0x2c
 80024be:	2100      	movs	r1, #0
 80024c0:	5499      	strb	r1, [r3, r2]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80024c2:	4b16      	ldr	r3, [pc, #88]	; (800251c <MX_ADC_Init+0xc0>)
 80024c4:	2204      	movs	r2, #4
 80024c6:	615a      	str	r2, [r3, #20]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80024c8:	4b14      	ldr	r3, [pc, #80]	; (800251c <MX_ADC_Init+0xc0>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	631a      	str	r2, [r3, #48]	; 0x30
	hadc.Init.LowPowerAutoWait = DISABLE;
 80024ce:	4b13      	ldr	r3, [pc, #76]	; (800251c <MX_ADC_Init+0xc0>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	619a      	str	r2, [r3, #24]
	hadc.Init.LowPowerFrequencyMode = DISABLE;
 80024d4:	4b11      	ldr	r3, [pc, #68]	; (800251c <MX_ADC_Init+0xc0>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80024da:	4b10      	ldr	r3, [pc, #64]	; (800251c <MX_ADC_Init+0xc0>)
 80024dc:	2200      	movs	r2, #0
 80024de:	61da      	str	r2, [r3, #28]
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 80024e0:	4b0e      	ldr	r3, [pc, #56]	; (800251c <MX_ADC_Init+0xc0>)
 80024e2:	0018      	movs	r0, r3
 80024e4:	f000 fa8a 	bl	80029fc <HAL_ADC_Init>
 80024e8:	1e03      	subs	r3, r0, #0
 80024ea:	d001      	beq.n	80024f0 <MX_ADC_Init+0x94>
		Error_Handler();
 80024ec:	f000 f878 	bl	80025e0 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80024f0:	003b      	movs	r3, r7
 80024f2:	2201      	movs	r2, #1
 80024f4:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80024f6:	003b      	movs	r3, r7
 80024f8:	2280      	movs	r2, #128	; 0x80
 80024fa:	0152      	lsls	r2, r2, #5
 80024fc:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80024fe:	003a      	movs	r2, r7
 8002500:	4b06      	ldr	r3, [pc, #24]	; (800251c <MX_ADC_Init+0xc0>)
 8002502:	0011      	movs	r1, r2
 8002504:	0018      	movs	r0, r3
 8002506:	f000 fce9 	bl	8002edc <HAL_ADC_ConfigChannel>
 800250a:	1e03      	subs	r3, r0, #0
 800250c:	d001      	beq.n	8002512 <MX_ADC_Init+0xb6>
		Error_Handler();
 800250e:	f000 f867 	bl	80025e0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	46bd      	mov	sp, r7
 8002516:	b002      	add	sp, #8
 8002518:	bd80      	pop	{r7, pc}
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	200001f8 	.word	0x200001f8
 8002520:	40012400 	.word	0x40012400

08002524 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002528:	4b14      	ldr	r3, [pc, #80]	; (800257c <MX_USART1_UART_Init+0x58>)
 800252a:	4a15      	ldr	r2, [pc, #84]	; (8002580 <MX_USART1_UART_Init+0x5c>)
 800252c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800252e:	4b13      	ldr	r3, [pc, #76]	; (800257c <MX_USART1_UART_Init+0x58>)
 8002530:	22e1      	movs	r2, #225	; 0xe1
 8002532:	0252      	lsls	r2, r2, #9
 8002534:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002536:	4b11      	ldr	r3, [pc, #68]	; (800257c <MX_USART1_UART_Init+0x58>)
 8002538:	2200      	movs	r2, #0
 800253a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800253c:	4b0f      	ldr	r3, [pc, #60]	; (800257c <MX_USART1_UART_Init+0x58>)
 800253e:	2200      	movs	r2, #0
 8002540:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002542:	4b0e      	ldr	r3, [pc, #56]	; (800257c <MX_USART1_UART_Init+0x58>)
 8002544:	2200      	movs	r2, #0
 8002546:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <MX_USART1_UART_Init+0x58>)
 800254a:	220c      	movs	r2, #12
 800254c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800254e:	4b0b      	ldr	r3, [pc, #44]	; (800257c <MX_USART1_UART_Init+0x58>)
 8002550:	2200      	movs	r2, #0
 8002552:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002554:	4b09      	ldr	r3, [pc, #36]	; (800257c <MX_USART1_UART_Init+0x58>)
 8002556:	2200      	movs	r2, #0
 8002558:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <MX_USART1_UART_Init+0x58>)
 800255c:	2200      	movs	r2, #0
 800255e:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <MX_USART1_UART_Init+0x58>)
 8002562:	2200      	movs	r2, #0
 8002564:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002566:	4b05      	ldr	r3, [pc, #20]	; (800257c <MX_USART1_UART_Init+0x58>)
 8002568:	0018      	movs	r0, r3
 800256a:	f001 ff7f 	bl	800446c <HAL_UART_Init>
 800256e:	1e03      	subs	r3, r0, #0
 8002570:	d001      	beq.n	8002576 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8002572:	f000 f835 	bl	80025e0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002576:	46c0      	nop			; (mov r8, r8)
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	20000254 	.word	0x20000254
 8002580:	40013800 	.word	0x40013800

08002584 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800258a:	4b14      	ldr	r3, [pc, #80]	; (80025dc <MX_GPIO_Init+0x58>)
 800258c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800258e:	4b13      	ldr	r3, [pc, #76]	; (80025dc <MX_GPIO_Init+0x58>)
 8002590:	2104      	movs	r1, #4
 8002592:	430a      	orrs	r2, r1
 8002594:	62da      	str	r2, [r3, #44]	; 0x2c
 8002596:	4b11      	ldr	r3, [pc, #68]	; (80025dc <MX_GPIO_Init+0x58>)
 8002598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259a:	2204      	movs	r2, #4
 800259c:	4013      	ands	r3, r2
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80025a2:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <MX_GPIO_Init+0x58>)
 80025a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025a6:	4b0d      	ldr	r3, [pc, #52]	; (80025dc <MX_GPIO_Init+0x58>)
 80025a8:	2180      	movs	r1, #128	; 0x80
 80025aa:	430a      	orrs	r2, r1
 80025ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80025ae:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <MX_GPIO_Init+0x58>)
 80025b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b2:	2280      	movs	r2, #128	; 0x80
 80025b4:	4013      	ands	r3, r2
 80025b6:	60bb      	str	r3, [r7, #8]
 80025b8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80025ba:	4b08      	ldr	r3, [pc, #32]	; (80025dc <MX_GPIO_Init+0x58>)
 80025bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025be:	4b07      	ldr	r3, [pc, #28]	; (80025dc <MX_GPIO_Init+0x58>)
 80025c0:	2101      	movs	r1, #1
 80025c2:	430a      	orrs	r2, r1
 80025c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80025c6:	4b05      	ldr	r3, [pc, #20]	; (80025dc <MX_GPIO_Init+0x58>)
 80025c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ca:	2201      	movs	r2, #1
 80025cc:	4013      	ands	r3, r2
 80025ce:	607b      	str	r3, [r7, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]

}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	46bd      	mov	sp, r7
 80025d6:	b004      	add	sp, #16
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	40021000 	.word	0x40021000

080025e0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025e4:	b672      	cpsid	i
}
 80025e6:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80025e8:	e7fe      	b.n	80025e8 <Error_Handler+0x8>
	...

080025ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f0:	4b07      	ldr	r3, [pc, #28]	; (8002610 <HAL_MspInit+0x24>)
 80025f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025f4:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_MspInit+0x24>)
 80025f6:	2101      	movs	r1, #1
 80025f8:	430a      	orrs	r2, r1
 80025fa:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80025fc:	4b04      	ldr	r3, [pc, #16]	; (8002610 <HAL_MspInit+0x24>)
 80025fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002600:	4b03      	ldr	r3, [pc, #12]	; (8002610 <HAL_MspInit+0x24>)
 8002602:	2180      	movs	r1, #128	; 0x80
 8002604:	0549      	lsls	r1, r1, #21
 8002606:	430a      	orrs	r2, r1
 8002608:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40021000 	.word	0x40021000

08002614 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002614:	b590      	push	{r4, r7, lr}
 8002616:	b089      	sub	sp, #36	; 0x24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800261c:	240c      	movs	r4, #12
 800261e:	193b      	adds	r3, r7, r4
 8002620:	0018      	movs	r0, r3
 8002622:	2314      	movs	r3, #20
 8002624:	001a      	movs	r2, r3
 8002626:	2100      	movs	r1, #0
 8002628:	f002 fcec 	bl	8005004 <memset>
  if(hadc->Instance==ADC1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a14      	ldr	r2, [pc, #80]	; (8002684 <HAL_ADC_MspInit+0x70>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d122      	bne.n	800267c <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002636:	4b14      	ldr	r3, [pc, #80]	; (8002688 <HAL_ADC_MspInit+0x74>)
 8002638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800263a:	4b13      	ldr	r3, [pc, #76]	; (8002688 <HAL_ADC_MspInit+0x74>)
 800263c:	2180      	movs	r1, #128	; 0x80
 800263e:	0089      	lsls	r1, r1, #2
 8002640:	430a      	orrs	r2, r1
 8002642:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002644:	4b10      	ldr	r3, [pc, #64]	; (8002688 <HAL_ADC_MspInit+0x74>)
 8002646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002648:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <HAL_ADC_MspInit+0x74>)
 800264a:	2101      	movs	r1, #1
 800264c:	430a      	orrs	r2, r1
 800264e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002650:	4b0d      	ldr	r3, [pc, #52]	; (8002688 <HAL_ADC_MspInit+0x74>)
 8002652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002654:	2201      	movs	r2, #1
 8002656:	4013      	ands	r3, r2
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800265c:	193b      	adds	r3, r7, r4
 800265e:	2201      	movs	r2, #1
 8002660:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002662:	193b      	adds	r3, r7, r4
 8002664:	2203      	movs	r2, #3
 8002666:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	193b      	adds	r3, r7, r4
 800266a:	2200      	movs	r2, #0
 800266c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266e:	193a      	adds	r2, r7, r4
 8002670:	23a0      	movs	r3, #160	; 0xa0
 8002672:	05db      	lsls	r3, r3, #23
 8002674:	0011      	movs	r1, r2
 8002676:	0018      	movs	r0, r3
 8002678:	f000 fe0c 	bl	8003294 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800267c:	46c0      	nop			; (mov r8, r8)
 800267e:	46bd      	mov	sp, r7
 8002680:	b009      	add	sp, #36	; 0x24
 8002682:	bd90      	pop	{r4, r7, pc}
 8002684:	40012400 	.word	0x40012400
 8002688:	40021000 	.word	0x40021000

0800268c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800268c:	b590      	push	{r4, r7, lr}
 800268e:	b089      	sub	sp, #36	; 0x24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002694:	240c      	movs	r4, #12
 8002696:	193b      	adds	r3, r7, r4
 8002698:	0018      	movs	r0, r3
 800269a:	2314      	movs	r3, #20
 800269c:	001a      	movs	r2, r3
 800269e:	2100      	movs	r1, #0
 80026a0:	f002 fcb0 	bl	8005004 <memset>
  if(huart->Instance==USART1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a18      	ldr	r2, [pc, #96]	; (800270c <HAL_UART_MspInit+0x80>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d12a      	bne.n	8002704 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026ae:	4b18      	ldr	r3, [pc, #96]	; (8002710 <HAL_UART_MspInit+0x84>)
 80026b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026b2:	4b17      	ldr	r3, [pc, #92]	; (8002710 <HAL_UART_MspInit+0x84>)
 80026b4:	2180      	movs	r1, #128	; 0x80
 80026b6:	01c9      	lsls	r1, r1, #7
 80026b8:	430a      	orrs	r2, r1
 80026ba:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026bc:	4b14      	ldr	r3, [pc, #80]	; (8002710 <HAL_UART_MspInit+0x84>)
 80026be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c0:	4b13      	ldr	r3, [pc, #76]	; (8002710 <HAL_UART_MspInit+0x84>)
 80026c2:	2101      	movs	r1, #1
 80026c4:	430a      	orrs	r2, r1
 80026c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80026c8:	4b11      	ldr	r3, [pc, #68]	; (8002710 <HAL_UART_MspInit+0x84>)
 80026ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026cc:	2201      	movs	r2, #1
 80026ce:	4013      	ands	r3, r2
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80026d4:	193b      	adds	r3, r7, r4
 80026d6:	22c0      	movs	r2, #192	; 0xc0
 80026d8:	00d2      	lsls	r2, r2, #3
 80026da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026dc:	0021      	movs	r1, r4
 80026de:	187b      	adds	r3, r7, r1
 80026e0:	2202      	movs	r2, #2
 80026e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e4:	187b      	adds	r3, r7, r1
 80026e6:	2200      	movs	r2, #0
 80026e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ea:	187b      	adds	r3, r7, r1
 80026ec:	2203      	movs	r2, #3
 80026ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80026f0:	187b      	adds	r3, r7, r1
 80026f2:	2204      	movs	r2, #4
 80026f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f6:	187a      	adds	r2, r7, r1
 80026f8:	23a0      	movs	r3, #160	; 0xa0
 80026fa:	05db      	lsls	r3, r3, #23
 80026fc:	0011      	movs	r1, r2
 80026fe:	0018      	movs	r0, r3
 8002700:	f000 fdc8 	bl	8003294 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002704:	46c0      	nop			; (mov r8, r8)
 8002706:	46bd      	mov	sp, r7
 8002708:	b009      	add	sp, #36	; 0x24
 800270a:	bd90      	pop	{r4, r7, pc}
 800270c:	40013800 	.word	0x40013800
 8002710:	40021000 	.word	0x40021000

08002714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002718:	e7fe      	b.n	8002718 <NMI_Handler+0x4>

0800271a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800271e:	e7fe      	b.n	800271e <HardFault_Handler+0x4>

08002720 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002724:	46c0      	nop			; (mov r8, r8)
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002738:	f000 f944 	bl	80029c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800273c:	46c0      	nop			; (mov r8, r8)
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	af00      	add	r7, sp, #0
	return 1;
 8002746:	2301      	movs	r3, #1
}
 8002748:	0018      	movs	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <_kill>:

int _kill(int pid, int sig)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
 8002756:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002758:	f002 fc2a 	bl	8004fb0 <__errno>
 800275c:	0003      	movs	r3, r0
 800275e:	2216      	movs	r2, #22
 8002760:	601a      	str	r2, [r3, #0]
	return -1;
 8002762:	2301      	movs	r3, #1
 8002764:	425b      	negs	r3, r3
}
 8002766:	0018      	movs	r0, r3
 8002768:	46bd      	mov	sp, r7
 800276a:	b002      	add	sp, #8
 800276c:	bd80      	pop	{r7, pc}

0800276e <_exit>:

void _exit (int status)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002776:	2301      	movs	r3, #1
 8002778:	425a      	negs	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	0011      	movs	r1, r2
 800277e:	0018      	movs	r0, r3
 8002780:	f7ff ffe5 	bl	800274e <_kill>
	while (1) {}		/* Make sure we hang here */
 8002784:	e7fe      	b.n	8002784 <_exit+0x16>

08002786 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b086      	sub	sp, #24
 800278a:	af00      	add	r7, sp, #0
 800278c:	60f8      	str	r0, [r7, #12]
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]
 8002796:	e00a      	b.n	80027ae <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002798:	e000      	b.n	800279c <_read+0x16>
 800279a:	bf00      	nop
 800279c:	0001      	movs	r1, r0
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	1c5a      	adds	r2, r3, #1
 80027a2:	60ba      	str	r2, [r7, #8]
 80027a4:	b2ca      	uxtb	r2, r1
 80027a6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	3301      	adds	r3, #1
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	dbf0      	blt.n	8002798 <_read+0x12>
	}

return len;
 80027b6:	687b      	ldr	r3, [r7, #4]
}
 80027b8:	0018      	movs	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	b006      	add	sp, #24
 80027be:	bd80      	pop	{r7, pc}

080027c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027cc:	2300      	movs	r3, #0
 80027ce:	617b      	str	r3, [r7, #20]
 80027d0:	e009      	b.n	80027e6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	60ba      	str	r2, [r7, #8]
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	0018      	movs	r0, r3
 80027dc:	e000      	b.n	80027e0 <_write+0x20>
 80027de:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	3301      	adds	r3, #1
 80027e4:	617b      	str	r3, [r7, #20]
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	dbf1      	blt.n	80027d2 <_write+0x12>
	}
	return len;
 80027ee:	687b      	ldr	r3, [r7, #4]
}
 80027f0:	0018      	movs	r0, r3
 80027f2:	46bd      	mov	sp, r7
 80027f4:	b006      	add	sp, #24
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <_close>:

int _close(int file)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
	return -1;
 8002800:	2301      	movs	r3, #1
 8002802:	425b      	negs	r3, r3
}
 8002804:	0018      	movs	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	b002      	add	sp, #8
 800280a:	bd80      	pop	{r7, pc}

0800280c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2280      	movs	r2, #128	; 0x80
 800281a:	0192      	lsls	r2, r2, #6
 800281c:	605a      	str	r2, [r3, #4]
	return 0;
 800281e:	2300      	movs	r3, #0
}
 8002820:	0018      	movs	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	b002      	add	sp, #8
 8002826:	bd80      	pop	{r7, pc}

08002828 <_isatty>:

int _isatty(int file)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
	return 1;
 8002830:	2301      	movs	r3, #1
}
 8002832:	0018      	movs	r0, r3
 8002834:	46bd      	mov	sp, r7
 8002836:	b002      	add	sp, #8
 8002838:	bd80      	pop	{r7, pc}

0800283a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b084      	sub	sp, #16
 800283e:	af00      	add	r7, sp, #0
 8002840:	60f8      	str	r0, [r7, #12]
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	607a      	str	r2, [r7, #4]
	return 0;
 8002846:	2300      	movs	r3, #0
}
 8002848:	0018      	movs	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	b004      	add	sp, #16
 800284e:	bd80      	pop	{r7, pc}

08002850 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002858:	4a14      	ldr	r2, [pc, #80]	; (80028ac <_sbrk+0x5c>)
 800285a:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <_sbrk+0x60>)
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002864:	4b13      	ldr	r3, [pc, #76]	; (80028b4 <_sbrk+0x64>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d102      	bne.n	8002872 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800286c:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <_sbrk+0x64>)
 800286e:	4a12      	ldr	r2, [pc, #72]	; (80028b8 <_sbrk+0x68>)
 8002870:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002872:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <_sbrk+0x64>)
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	18d3      	adds	r3, r2, r3
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	429a      	cmp	r2, r3
 800287e:	d207      	bcs.n	8002890 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002880:	f002 fb96 	bl	8004fb0 <__errno>
 8002884:	0003      	movs	r3, r0
 8002886:	220c      	movs	r2, #12
 8002888:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800288a:	2301      	movs	r3, #1
 800288c:	425b      	negs	r3, r3
 800288e:	e009      	b.n	80028a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002890:	4b08      	ldr	r3, [pc, #32]	; (80028b4 <_sbrk+0x64>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002896:	4b07      	ldr	r3, [pc, #28]	; (80028b4 <_sbrk+0x64>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	18d2      	adds	r2, r2, r3
 800289e:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <_sbrk+0x64>)
 80028a0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80028a2:	68fb      	ldr	r3, [r7, #12]
}
 80028a4:	0018      	movs	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	b006      	add	sp, #24
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	20002000 	.word	0x20002000
 80028b0:	00000400 	.word	0x00000400
 80028b4:	200002ec 	.word	0x200002ec
 80028b8:	20000308 	.word	0x20000308

080028bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028c0:	46c0      	nop			; (mov r8, r8)
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80028c8:	480d      	ldr	r0, [pc, #52]	; (8002900 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80028ca:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80028cc:	f7ff fff6 	bl	80028bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028d0:	480c      	ldr	r0, [pc, #48]	; (8002904 <LoopForever+0x6>)
  ldr r1, =_edata
 80028d2:	490d      	ldr	r1, [pc, #52]	; (8002908 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028d4:	4a0d      	ldr	r2, [pc, #52]	; (800290c <LoopForever+0xe>)
  movs r3, #0
 80028d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028d8:	e002      	b.n	80028e0 <LoopCopyDataInit>

080028da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028de:	3304      	adds	r3, #4

080028e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028e4:	d3f9      	bcc.n	80028da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028e6:	4a0a      	ldr	r2, [pc, #40]	; (8002910 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028e8:	4c0a      	ldr	r4, [pc, #40]	; (8002914 <LoopForever+0x16>)
  movs r3, #0
 80028ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028ec:	e001      	b.n	80028f2 <LoopFillZerobss>

080028ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028f0:	3204      	adds	r2, #4

080028f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028f4:	d3fb      	bcc.n	80028ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028f6:	f002 fb61 	bl	8004fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028fa:	f7ff fcff 	bl	80022fc <main>

080028fe <LoopForever>:

LoopForever:
    b LoopForever
 80028fe:	e7fe      	b.n	80028fe <LoopForever>
  ldr   r0, =_estack
 8002900:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002908:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800290c:	0800843c 	.word	0x0800843c
  ldr r2, =_sbss
 8002910:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002914:	20000304 	.word	0x20000304

08002918 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002918:	e7fe      	b.n	8002918 <ADC1_COMP_IRQHandler>
	...

0800291c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002922:	1dfb      	adds	r3, r7, #7
 8002924:	2200      	movs	r2, #0
 8002926:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <HAL_Init+0x3c>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <HAL_Init+0x3c>)
 800292e:	2140      	movs	r1, #64	; 0x40
 8002930:	430a      	orrs	r2, r1
 8002932:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002934:	2000      	movs	r0, #0
 8002936:	f000 f811 	bl	800295c <HAL_InitTick>
 800293a:	1e03      	subs	r3, r0, #0
 800293c:	d003      	beq.n	8002946 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800293e:	1dfb      	adds	r3, r7, #7
 8002940:	2201      	movs	r2, #1
 8002942:	701a      	strb	r2, [r3, #0]
 8002944:	e001      	b.n	800294a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002946:	f7ff fe51 	bl	80025ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800294a:	1dfb      	adds	r3, r7, #7
 800294c:	781b      	ldrb	r3, [r3, #0]
}
 800294e:	0018      	movs	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	b002      	add	sp, #8
 8002954:	bd80      	pop	{r7, pc}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	40022000 	.word	0x40022000

0800295c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800295c:	b590      	push	{r4, r7, lr}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002964:	4b14      	ldr	r3, [pc, #80]	; (80029b8 <HAL_InitTick+0x5c>)
 8002966:	681c      	ldr	r4, [r3, #0]
 8002968:	4b14      	ldr	r3, [pc, #80]	; (80029bc <HAL_InitTick+0x60>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	0019      	movs	r1, r3
 800296e:	23fa      	movs	r3, #250	; 0xfa
 8002970:	0098      	lsls	r0, r3, #2
 8002972:	f7fd fbe5 	bl	8000140 <__udivsi3>
 8002976:	0003      	movs	r3, r0
 8002978:	0019      	movs	r1, r3
 800297a:	0020      	movs	r0, r4
 800297c:	f7fd fbe0 	bl	8000140 <__udivsi3>
 8002980:	0003      	movs	r3, r0
 8002982:	0018      	movs	r0, r3
 8002984:	f000 fc79 	bl	800327a <HAL_SYSTICK_Config>
 8002988:	1e03      	subs	r3, r0, #0
 800298a:	d001      	beq.n	8002990 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e00f      	b.n	80029b0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b03      	cmp	r3, #3
 8002994:	d80b      	bhi.n	80029ae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	2301      	movs	r3, #1
 800299a:	425b      	negs	r3, r3
 800299c:	2200      	movs	r2, #0
 800299e:	0018      	movs	r0, r3
 80029a0:	f000 fc56 	bl	8003250 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029a4:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <HAL_InitTick+0x64>)
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	e000      	b.n	80029b0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
}
 80029b0:	0018      	movs	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	b003      	add	sp, #12
 80029b6:	bd90      	pop	{r4, r7, pc}
 80029b8:	20000000 	.word	0x20000000
 80029bc:	20000008 	.word	0x20000008
 80029c0:	20000004 	.word	0x20000004

080029c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029c8:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_IncTick+0x1c>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	001a      	movs	r2, r3
 80029ce:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <HAL_IncTick+0x20>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	18d2      	adds	r2, r2, r3
 80029d4:	4b03      	ldr	r3, [pc, #12]	; (80029e4 <HAL_IncTick+0x20>)
 80029d6:	601a      	str	r2, [r3, #0]
}
 80029d8:	46c0      	nop			; (mov r8, r8)
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	20000008 	.word	0x20000008
 80029e4:	200002f0 	.word	0x200002f0

080029e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  return uwTick;
 80029ec:	4b02      	ldr	r3, [pc, #8]	; (80029f8 <HAL_GetTick+0x10>)
 80029ee:	681b      	ldr	r3, [r3, #0]
}
 80029f0:	0018      	movs	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	200002f0 	.word	0x200002f0

080029fc <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e159      	b.n	8002cc2 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10a      	bne.n	8002a2c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2250      	movs	r2, #80	; 0x50
 8002a20:	2100      	movs	r1, #0
 8002a22:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	0018      	movs	r0, r3
 8002a28:	f7ff fdf4 	bl	8002614 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a30:	2210      	movs	r2, #16
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b10      	cmp	r3, #16
 8002a36:	d005      	beq.n	8002a44 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	2204      	movs	r2, #4
 8002a40:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002a42:	d00b      	beq.n	8002a5c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a48:	2210      	movs	r2, #16
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2250      	movs	r2, #80	; 0x50
 8002a54:	2100      	movs	r1, #0
 8002a56:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e132      	b.n	8002cc2 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a60:	4a9a      	ldr	r2, [pc, #616]	; (8002ccc <HAL_ADC_Init+0x2d0>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	2202      	movs	r2, #2
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	2203      	movs	r2, #3
 8002a74:	4013      	ands	r3, r2
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d108      	bne.n	8002a8c <HAL_ADC_Init+0x90>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2201      	movs	r2, #1
 8002a82:	4013      	ands	r3, r2
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d101      	bne.n	8002a8c <HAL_ADC_Init+0x90>
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e000      	b.n	8002a8e <HAL_ADC_Init+0x92>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d149      	bne.n	8002b26 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	23c0      	movs	r3, #192	; 0xc0
 8002a98:	061b      	lsls	r3, r3, #24
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d00b      	beq.n	8002ab6 <HAL_ADC_Init+0xba>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	2380      	movs	r3, #128	; 0x80
 8002aa4:	05db      	lsls	r3, r3, #23
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d005      	beq.n	8002ab6 <HAL_ADC_Init+0xba>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	2380      	movs	r3, #128	; 0x80
 8002ab0:	061b      	lsls	r3, r3, #24
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d111      	bne.n	8002ada <HAL_ADC_Init+0xde>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	691a      	ldr	r2, [r3, #16]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	0092      	lsls	r2, r2, #2
 8002ac2:	0892      	lsrs	r2, r2, #2
 8002ac4:	611a      	str	r2, [r3, #16]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6919      	ldr	r1, [r3, #16]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	611a      	str	r2, [r3, #16]
 8002ad8:	e014      	b.n	8002b04 <HAL_ADC_Init+0x108>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	691a      	ldr	r2, [r3, #16]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	0092      	lsls	r2, r2, #2
 8002ae6:	0892      	lsrs	r2, r2, #2
 8002ae8:	611a      	str	r2, [r3, #16]
 8002aea:	4b79      	ldr	r3, [pc, #484]	; (8002cd0 <HAL_ADC_Init+0x2d4>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	4b78      	ldr	r3, [pc, #480]	; (8002cd0 <HAL_ADC_Init+0x2d4>)
 8002af0:	4978      	ldr	r1, [pc, #480]	; (8002cd4 <HAL_ADC_Init+0x2d8>)
 8002af2:	400a      	ands	r2, r1
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	4b76      	ldr	r3, [pc, #472]	; (8002cd0 <HAL_ADC_Init+0x2d4>)
 8002af8:	6819      	ldr	r1, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	4b74      	ldr	r3, [pc, #464]	; (8002cd0 <HAL_ADC_Init+0x2d4>)
 8002b00:	430a      	orrs	r2, r1
 8002b02:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2118      	movs	r1, #24
 8002b10:	438a      	bics	r2, r1
 8002b12:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68d9      	ldr	r1, [r3, #12]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8002b26:	4b6a      	ldr	r3, [pc, #424]	; (8002cd0 <HAL_ADC_Init+0x2d4>)
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	4b69      	ldr	r3, [pc, #420]	; (8002cd0 <HAL_ADC_Init+0x2d4>)
 8002b2c:	496a      	ldr	r1, [pc, #424]	; (8002cd8 <HAL_ADC_Init+0x2dc>)
 8002b2e:	400a      	ands	r2, r1
 8002b30:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8002b32:	4b67      	ldr	r3, [pc, #412]	; (8002cd0 <HAL_ADC_Init+0x2d4>)
 8002b34:	6819      	ldr	r1, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3a:	065a      	lsls	r2, r3, #25
 8002b3c:	4b64      	ldr	r3, [pc, #400]	; (8002cd0 <HAL_ADC_Init+0x2d4>)
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	2380      	movs	r3, #128	; 0x80
 8002b4a:	055b      	lsls	r3, r3, #21
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	d108      	bne.n	8002b62 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2180      	movs	r1, #128	; 0x80
 8002b5c:	0549      	lsls	r1, r1, #21
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68da      	ldr	r2, [r3, #12]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	495b      	ldr	r1, [pc, #364]	; (8002cdc <HAL_ADC_Init+0x2e0>)
 8002b6e:	400a      	ands	r2, r1
 8002b70:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68d9      	ldr	r1, [r3, #12]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d101      	bne.n	8002b88 <HAL_ADC_Init+0x18c>
 8002b84:	2304      	movs	r3, #4
 8002b86:	e000      	b.n	8002b8a <HAL_ADC_Init+0x18e>
 8002b88:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002b8a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2020      	movs	r0, #32
 8002b90:	5c1b      	ldrb	r3, [r3, r0]
 8002b92:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002b94:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	202c      	movs	r0, #44	; 0x2c
 8002b9a:	5c1b      	ldrb	r3, [r3, r0]
 8002b9c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002b9e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002ba4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8002bac:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002bb4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bc2:	23c2      	movs	r3, #194	; 0xc2
 8002bc4:	33ff      	adds	r3, #255	; 0xff
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d00b      	beq.n	8002be2 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68d9      	ldr	r1, [r3, #12]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2221      	movs	r2, #33	; 0x21
 8002be6:	5c9b      	ldrb	r3, [r3, r2]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d11a      	bne.n	8002c22 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	5c9b      	ldrb	r3, [r3, r2]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d109      	bne.n	8002c0a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2180      	movs	r1, #128	; 0x80
 8002c02:	0249      	lsls	r1, r1, #9
 8002c04:	430a      	orrs	r2, r1
 8002c06:	60da      	str	r2, [r3, #12]
 8002c08:	e00b      	b.n	8002c22 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0e:	2220      	movs	r2, #32
 8002c10:	431a      	orrs	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d11f      	bne.n	8002c6a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	691a      	ldr	r2, [r3, #16]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	492a      	ldr	r1, [pc, #168]	; (8002ce0 <HAL_ADC_Init+0x2e4>)
 8002c36:	400a      	ands	r2, r1
 8002c38:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6919      	ldr	r1, [r3, #16]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8002c48:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8002c4e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	691a      	ldr	r2, [r3, #16]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2101      	movs	r1, #1
 8002c64:	430a      	orrs	r2, r1
 8002c66:	611a      	str	r2, [r3, #16]
 8002c68:	e00e      	b.n	8002c88 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	2201      	movs	r2, #1
 8002c72:	4013      	ands	r3, r2
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d107      	bne.n	8002c88 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691a      	ldr	r2, [r3, #16]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2101      	movs	r1, #1
 8002c84:	438a      	bics	r2, r1
 8002c86:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	695a      	ldr	r2, [r3, #20]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2107      	movs	r1, #7
 8002c94:	438a      	bics	r2, r1
 8002c96:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6959      	ldr	r1, [r3, #20]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb4:	2203      	movs	r2, #3
 8002cb6:	4393      	bics	r3, r2
 8002cb8:	2201      	movs	r2, #1
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	b002      	add	sp, #8
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	fffffefd 	.word	0xfffffefd
 8002cd0:	40012708 	.word	0x40012708
 8002cd4:	ffc3ffff 	.word	0xffc3ffff
 8002cd8:	fdffffff 	.word	0xfdffffff
 8002cdc:	fffe0219 	.word	0xfffe0219
 8002ce0:	fffffc03 	.word	0xfffffc03

08002ce4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002ce4:	b590      	push	{r4, r7, lr}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cec:	230f      	movs	r3, #15
 8002cee:	18fb      	adds	r3, r7, r3
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	2204      	movs	r2, #4
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	d138      	bne.n	8002d72 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2250      	movs	r2, #80	; 0x50
 8002d04:	5c9b      	ldrb	r3, [r3, r2]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d101      	bne.n	8002d0e <HAL_ADC_Start+0x2a>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	e038      	b.n	8002d80 <HAL_ADC_Start+0x9c>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2250      	movs	r2, #80	; 0x50
 8002d12:	2101      	movs	r1, #1
 8002d14:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d007      	beq.n	8002d2e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002d1e:	230f      	movs	r3, #15
 8002d20:	18fc      	adds	r4, r7, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	0018      	movs	r0, r3
 8002d26:	f000 f979 	bl	800301c <ADC_Enable>
 8002d2a:	0003      	movs	r3, r0
 8002d2c:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002d2e:	230f      	movs	r3, #15
 8002d30:	18fb      	adds	r3, r7, r3
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d120      	bne.n	8002d7a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3c:	4a12      	ldr	r2, [pc, #72]	; (8002d88 <HAL_ADC_Start+0xa4>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	2280      	movs	r2, #128	; 0x80
 8002d42:	0052      	lsls	r2, r2, #1
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2250      	movs	r2, #80	; 0x50
 8002d54:	2100      	movs	r1, #0
 8002d56:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	221c      	movs	r2, #28
 8002d5e:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2104      	movs	r1, #4
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	609a      	str	r2, [r3, #8]
 8002d70:	e003      	b.n	8002d7a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d72:	230f      	movs	r3, #15
 8002d74:	18fb      	adds	r3, r7, r3
 8002d76:	2202      	movs	r2, #2
 8002d78:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d7a:	230f      	movs	r3, #15
 8002d7c:	18fb      	adds	r3, r7, r3
 8002d7e:	781b      	ldrb	r3, [r3, #0]
}
 8002d80:	0018      	movs	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	b005      	add	sp, #20
 8002d86:	bd90      	pop	{r4, r7, pc}
 8002d88:	fffff0fe 	.word	0xfffff0fe

08002d8c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002d96:	2300      	movs	r3, #0
 8002d98:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d102      	bne.n	8002dac <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002da6:	2308      	movs	r3, #8
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	e014      	b.n	8002dd6 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	2201      	movs	r2, #1
 8002db4:	4013      	ands	r3, r2
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d10b      	bne.n	8002dd2 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2250      	movs	r2, #80	; 0x50
 8002dca:	2100      	movs	r1, #0
 8002dcc:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e072      	b.n	8002eb8 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002dd2:	230c      	movs	r3, #12
 8002dd4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002dd6:	f7ff fe07 	bl	80029e8 <HAL_GetTick>
 8002dda:	0003      	movs	r3, r0
 8002ddc:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002dde:	e01f      	b.n	8002e20 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	3301      	adds	r3, #1
 8002de4:	d01c      	beq.n	8002e20 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d007      	beq.n	8002dfc <HAL_ADC_PollForConversion+0x70>
 8002dec:	f7ff fdfc 	bl	80029e8 <HAL_GetTick>
 8002df0:	0002      	movs	r2, r0
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d211      	bcs.n	8002e20 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	4013      	ands	r3, r2
 8002e06:	d10b      	bne.n	8002e20 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0c:	2204      	movs	r2, #4
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2250      	movs	r2, #80	; 0x50
 8002e18:	2100      	movs	r1, #0
 8002e1a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e04b      	b.n	8002eb8 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	d0d9      	beq.n	8002de0 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e30:	2280      	movs	r2, #128	; 0x80
 8002e32:	0092      	lsls	r2, r2, #2
 8002e34:	431a      	orrs	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	23c0      	movs	r3, #192	; 0xc0
 8002e42:	011b      	lsls	r3, r3, #4
 8002e44:	4013      	ands	r3, r2
 8002e46:	d12e      	bne.n	8002ea6 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d129      	bne.n	8002ea6 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2208      	movs	r2, #8
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d122      	bne.n	8002ea6 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2204      	movs	r2, #4
 8002e68:	4013      	ands	r3, r2
 8002e6a:	d110      	bne.n	8002e8e <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	210c      	movs	r1, #12
 8002e78:	438a      	bics	r2, r1
 8002e7a:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e80:	4a0f      	ldr	r2, [pc, #60]	; (8002ec0 <HAL_ADC_PollForConversion+0x134>)
 8002e82:	4013      	ands	r3, r2
 8002e84:	2201      	movs	r2, #1
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	655a      	str	r2, [r3, #84]	; 0x54
 8002e8c:	e00b      	b.n	8002ea6 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e92:	2220      	movs	r2, #32
 8002e94:	431a      	orrs	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d103      	bne.n	8002eb6 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	220c      	movs	r2, #12
 8002eb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	0018      	movs	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	b004      	add	sp, #16
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	fffffefe 	.word	0xfffffefe

08002ec4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	b002      	add	sp, #8
 8002ed8:	bd80      	pop	{r7, pc}
	...

08002edc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2250      	movs	r2, #80	; 0x50
 8002eea:	5c9b      	ldrb	r3, [r3, r2]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d101      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x18>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	e085      	b.n	8003000 <HAL_ADC_ConfigChannel+0x124>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2250      	movs	r2, #80	; 0x50
 8002ef8:	2101      	movs	r1, #1
 8002efa:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2204      	movs	r2, #4
 8002f04:	4013      	ands	r3, r2
 8002f06:	d00b      	beq.n	8002f20 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2250      	movs	r2, #80	; 0x50
 8002f18:	2100      	movs	r1, #0
 8002f1a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e06f      	b.n	8003000 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	4a38      	ldr	r2, [pc, #224]	; (8003008 <HAL_ADC_ConfigChannel+0x12c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d035      	beq.n	8002f96 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	035b      	lsls	r3, r3, #13
 8002f36:	0b5a      	lsrs	r2, r3, #13
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	2380      	movs	r3, #128	; 0x80
 8002f46:	02db      	lsls	r3, r3, #11
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d009      	beq.n	8002f60 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8002f4c:	4b2f      	ldr	r3, [pc, #188]	; (800300c <HAL_ADC_ConfigChannel+0x130>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	4b2e      	ldr	r3, [pc, #184]	; (800300c <HAL_ADC_ConfigChannel+0x130>)
 8002f52:	2180      	movs	r1, #128	; 0x80
 8002f54:	0409      	lsls	r1, r1, #16
 8002f56:	430a      	orrs	r2, r1
 8002f58:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8002f5a:	200a      	movs	r0, #10
 8002f5c:	f000 f8c6 	bl	80030ec <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	2380      	movs	r3, #128	; 0x80
 8002f66:	029b      	lsls	r3, r3, #10
 8002f68:	4013      	ands	r3, r2
 8002f6a:	d006      	beq.n	8002f7a <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8002f6c:	4b27      	ldr	r3, [pc, #156]	; (800300c <HAL_ADC_ConfigChannel+0x130>)
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	4b26      	ldr	r3, [pc, #152]	; (800300c <HAL_ADC_ConfigChannel+0x130>)
 8002f72:	2180      	movs	r1, #128	; 0x80
 8002f74:	03c9      	lsls	r1, r1, #15
 8002f76:	430a      	orrs	r2, r1
 8002f78:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	2380      	movs	r3, #128	; 0x80
 8002f80:	025b      	lsls	r3, r3, #9
 8002f82:	4013      	ands	r3, r2
 8002f84:	d037      	beq.n	8002ff6 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 8002f86:	4b21      	ldr	r3, [pc, #132]	; (800300c <HAL_ADC_ConfigChannel+0x130>)
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	4b20      	ldr	r3, [pc, #128]	; (800300c <HAL_ADC_ConfigChannel+0x130>)
 8002f8c:	2180      	movs	r1, #128	; 0x80
 8002f8e:	0449      	lsls	r1, r1, #17
 8002f90:	430a      	orrs	r2, r1
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	e02f      	b.n	8002ff6 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	035b      	lsls	r3, r3, #13
 8002fa2:	0b5b      	lsrs	r3, r3, #13
 8002fa4:	43d9      	mvns	r1, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	400a      	ands	r2, r1
 8002fac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	2380      	movs	r3, #128	; 0x80
 8002fb4:	02db      	lsls	r3, r3, #11
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d005      	beq.n	8002fc6 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8002fba:	4b14      	ldr	r3, [pc, #80]	; (800300c <HAL_ADC_ConfigChannel+0x130>)
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	4b13      	ldr	r3, [pc, #76]	; (800300c <HAL_ADC_ConfigChannel+0x130>)
 8002fc0:	4913      	ldr	r1, [pc, #76]	; (8003010 <HAL_ADC_ConfigChannel+0x134>)
 8002fc2:	400a      	ands	r2, r1
 8002fc4:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	2380      	movs	r3, #128	; 0x80
 8002fcc:	029b      	lsls	r3, r3, #10
 8002fce:	4013      	ands	r3, r2
 8002fd0:	d005      	beq.n	8002fde <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8002fd2:	4b0e      	ldr	r3, [pc, #56]	; (800300c <HAL_ADC_ConfigChannel+0x130>)
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	4b0d      	ldr	r3, [pc, #52]	; (800300c <HAL_ADC_ConfigChannel+0x130>)
 8002fd8:	490e      	ldr	r1, [pc, #56]	; (8003014 <HAL_ADC_ConfigChannel+0x138>)
 8002fda:	400a      	ands	r2, r1
 8002fdc:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	2380      	movs	r3, #128	; 0x80
 8002fe4:	025b      	lsls	r3, r3, #9
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	d005      	beq.n	8002ff6 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 8002fea:	4b08      	ldr	r3, [pc, #32]	; (800300c <HAL_ADC_ConfigChannel+0x130>)
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	4b07      	ldr	r3, [pc, #28]	; (800300c <HAL_ADC_ConfigChannel+0x130>)
 8002ff0:	4909      	ldr	r1, [pc, #36]	; (8003018 <HAL_ADC_ConfigChannel+0x13c>)
 8002ff2:	400a      	ands	r2, r1
 8002ff4:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2250      	movs	r2, #80	; 0x50
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	0018      	movs	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	b002      	add	sp, #8
 8003006:	bd80      	pop	{r7, pc}
 8003008:	00001001 	.word	0x00001001
 800300c:	40012708 	.word	0x40012708
 8003010:	ff7fffff 	.word	0xff7fffff
 8003014:	ffbfffff 	.word	0xffbfffff
 8003018:	feffffff 	.word	0xfeffffff

0800301c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003024:	2300      	movs	r3, #0
 8003026:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	2203      	movs	r2, #3
 8003030:	4013      	ands	r3, r2
 8003032:	2b01      	cmp	r3, #1
 8003034:	d108      	bne.n	8003048 <ADC_Enable+0x2c>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2201      	movs	r2, #1
 800303e:	4013      	ands	r3, r2
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <ADC_Enable+0x2c>
 8003044:	2301      	movs	r3, #1
 8003046:	e000      	b.n	800304a <ADC_Enable+0x2e>
 8003048:	2300      	movs	r3, #0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d146      	bne.n	80030dc <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	4a24      	ldr	r2, [pc, #144]	; (80030e8 <ADC_Enable+0xcc>)
 8003056:	4013      	ands	r3, r2
 8003058:	d00d      	beq.n	8003076 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305e:	2210      	movs	r2, #16
 8003060:	431a      	orrs	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306a:	2201      	movs	r2, #1
 800306c:	431a      	orrs	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e033      	b.n	80030de <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2101      	movs	r1, #1
 8003082:	430a      	orrs	r2, r1
 8003084:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8003086:	2001      	movs	r0, #1
 8003088:	f000 f830 	bl	80030ec <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800308c:	f7ff fcac 	bl	80029e8 <HAL_GetTick>
 8003090:	0003      	movs	r3, r0
 8003092:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003094:	e01b      	b.n	80030ce <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003096:	f7ff fca7 	bl	80029e8 <HAL_GetTick>
 800309a:	0002      	movs	r2, r0
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b0a      	cmp	r3, #10
 80030a2:	d914      	bls.n	80030ce <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2201      	movs	r2, #1
 80030ac:	4013      	ands	r3, r2
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d00d      	beq.n	80030ce <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b6:	2210      	movs	r2, #16
 80030b8:	431a      	orrs	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c2:	2201      	movs	r2, #1
 80030c4:	431a      	orrs	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e007      	b.n	80030de <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2201      	movs	r2, #1
 80030d6:	4013      	ands	r3, r2
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d1dc      	bne.n	8003096 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	0018      	movs	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	b004      	add	sp, #16
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	80000017 	.word	0x80000017

080030ec <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <ADC_DelayMicroSecond+0x38>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	490b      	ldr	r1, [pc, #44]	; (8003128 <ADC_DelayMicroSecond+0x3c>)
 80030fa:	0018      	movs	r0, r3
 80030fc:	f7fd f820 	bl	8000140 <__udivsi3>
 8003100:	0003      	movs	r3, r0
 8003102:	001a      	movs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4353      	muls	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800310a:	e002      	b.n	8003112 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	3b01      	subs	r3, #1
 8003110:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1f9      	bne.n	800310c <ADC_DelayMicroSecond+0x20>
  }
}
 8003118:	46c0      	nop			; (mov r8, r8)
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	46bd      	mov	sp, r7
 800311e:	b004      	add	sp, #16
 8003120:	bd80      	pop	{r7, pc}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	20000000 	.word	0x20000000
 8003128:	000f4240 	.word	0x000f4240

0800312c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800312c:	b590      	push	{r4, r7, lr}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	0002      	movs	r2, r0
 8003134:	6039      	str	r1, [r7, #0]
 8003136:	1dfb      	adds	r3, r7, #7
 8003138:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800313a:	1dfb      	adds	r3, r7, #7
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b7f      	cmp	r3, #127	; 0x7f
 8003140:	d828      	bhi.n	8003194 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003142:	4a2f      	ldr	r2, [pc, #188]	; (8003200 <__NVIC_SetPriority+0xd4>)
 8003144:	1dfb      	adds	r3, r7, #7
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	b25b      	sxtb	r3, r3
 800314a:	089b      	lsrs	r3, r3, #2
 800314c:	33c0      	adds	r3, #192	; 0xc0
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	589b      	ldr	r3, [r3, r2]
 8003152:	1dfa      	adds	r2, r7, #7
 8003154:	7812      	ldrb	r2, [r2, #0]
 8003156:	0011      	movs	r1, r2
 8003158:	2203      	movs	r2, #3
 800315a:	400a      	ands	r2, r1
 800315c:	00d2      	lsls	r2, r2, #3
 800315e:	21ff      	movs	r1, #255	; 0xff
 8003160:	4091      	lsls	r1, r2
 8003162:	000a      	movs	r2, r1
 8003164:	43d2      	mvns	r2, r2
 8003166:	401a      	ands	r2, r3
 8003168:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	019b      	lsls	r3, r3, #6
 800316e:	22ff      	movs	r2, #255	; 0xff
 8003170:	401a      	ands	r2, r3
 8003172:	1dfb      	adds	r3, r7, #7
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	0018      	movs	r0, r3
 8003178:	2303      	movs	r3, #3
 800317a:	4003      	ands	r3, r0
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003180:	481f      	ldr	r0, [pc, #124]	; (8003200 <__NVIC_SetPriority+0xd4>)
 8003182:	1dfb      	adds	r3, r7, #7
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	b25b      	sxtb	r3, r3
 8003188:	089b      	lsrs	r3, r3, #2
 800318a:	430a      	orrs	r2, r1
 800318c:	33c0      	adds	r3, #192	; 0xc0
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003192:	e031      	b.n	80031f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003194:	4a1b      	ldr	r2, [pc, #108]	; (8003204 <__NVIC_SetPriority+0xd8>)
 8003196:	1dfb      	adds	r3, r7, #7
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	0019      	movs	r1, r3
 800319c:	230f      	movs	r3, #15
 800319e:	400b      	ands	r3, r1
 80031a0:	3b08      	subs	r3, #8
 80031a2:	089b      	lsrs	r3, r3, #2
 80031a4:	3306      	adds	r3, #6
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	18d3      	adds	r3, r2, r3
 80031aa:	3304      	adds	r3, #4
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	1dfa      	adds	r2, r7, #7
 80031b0:	7812      	ldrb	r2, [r2, #0]
 80031b2:	0011      	movs	r1, r2
 80031b4:	2203      	movs	r2, #3
 80031b6:	400a      	ands	r2, r1
 80031b8:	00d2      	lsls	r2, r2, #3
 80031ba:	21ff      	movs	r1, #255	; 0xff
 80031bc:	4091      	lsls	r1, r2
 80031be:	000a      	movs	r2, r1
 80031c0:	43d2      	mvns	r2, r2
 80031c2:	401a      	ands	r2, r3
 80031c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	019b      	lsls	r3, r3, #6
 80031ca:	22ff      	movs	r2, #255	; 0xff
 80031cc:	401a      	ands	r2, r3
 80031ce:	1dfb      	adds	r3, r7, #7
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	0018      	movs	r0, r3
 80031d4:	2303      	movs	r3, #3
 80031d6:	4003      	ands	r3, r0
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031dc:	4809      	ldr	r0, [pc, #36]	; (8003204 <__NVIC_SetPriority+0xd8>)
 80031de:	1dfb      	adds	r3, r7, #7
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	001c      	movs	r4, r3
 80031e4:	230f      	movs	r3, #15
 80031e6:	4023      	ands	r3, r4
 80031e8:	3b08      	subs	r3, #8
 80031ea:	089b      	lsrs	r3, r3, #2
 80031ec:	430a      	orrs	r2, r1
 80031ee:	3306      	adds	r3, #6
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	18c3      	adds	r3, r0, r3
 80031f4:	3304      	adds	r3, #4
 80031f6:	601a      	str	r2, [r3, #0]
}
 80031f8:	46c0      	nop			; (mov r8, r8)
 80031fa:	46bd      	mov	sp, r7
 80031fc:	b003      	add	sp, #12
 80031fe:	bd90      	pop	{r4, r7, pc}
 8003200:	e000e100 	.word	0xe000e100
 8003204:	e000ed00 	.word	0xe000ed00

08003208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	1e5a      	subs	r2, r3, #1
 8003214:	2380      	movs	r3, #128	; 0x80
 8003216:	045b      	lsls	r3, r3, #17
 8003218:	429a      	cmp	r2, r3
 800321a:	d301      	bcc.n	8003220 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800321c:	2301      	movs	r3, #1
 800321e:	e010      	b.n	8003242 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003220:	4b0a      	ldr	r3, [pc, #40]	; (800324c <SysTick_Config+0x44>)
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	3a01      	subs	r2, #1
 8003226:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003228:	2301      	movs	r3, #1
 800322a:	425b      	negs	r3, r3
 800322c:	2103      	movs	r1, #3
 800322e:	0018      	movs	r0, r3
 8003230:	f7ff ff7c 	bl	800312c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003234:	4b05      	ldr	r3, [pc, #20]	; (800324c <SysTick_Config+0x44>)
 8003236:	2200      	movs	r2, #0
 8003238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800323a:	4b04      	ldr	r3, [pc, #16]	; (800324c <SysTick_Config+0x44>)
 800323c:	2207      	movs	r2, #7
 800323e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003240:	2300      	movs	r3, #0
}
 8003242:	0018      	movs	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	b002      	add	sp, #8
 8003248:	bd80      	pop	{r7, pc}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	e000e010 	.word	0xe000e010

08003250 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	60b9      	str	r1, [r7, #8]
 8003258:	607a      	str	r2, [r7, #4]
 800325a:	210f      	movs	r1, #15
 800325c:	187b      	adds	r3, r7, r1
 800325e:	1c02      	adds	r2, r0, #0
 8003260:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	187b      	adds	r3, r7, r1
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	b25b      	sxtb	r3, r3
 800326a:	0011      	movs	r1, r2
 800326c:	0018      	movs	r0, r3
 800326e:	f7ff ff5d 	bl	800312c <__NVIC_SetPriority>
}
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	46bd      	mov	sp, r7
 8003276:	b004      	add	sp, #16
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	0018      	movs	r0, r3
 8003286:	f7ff ffbf 	bl	8003208 <SysTick_Config>
 800328a:	0003      	movs	r3, r0
}
 800328c:	0018      	movs	r0, r3
 800328e:	46bd      	mov	sp, r7
 8003290:	b002      	add	sp, #8
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800329e:	2300      	movs	r3, #0
 80032a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80032aa:	e14f      	b.n	800354c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2101      	movs	r1, #1
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	4091      	lsls	r1, r2
 80032b6:	000a      	movs	r2, r1
 80032b8:	4013      	ands	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d100      	bne.n	80032c4 <HAL_GPIO_Init+0x30>
 80032c2:	e140      	b.n	8003546 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2203      	movs	r2, #3
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d005      	beq.n	80032dc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2203      	movs	r2, #3
 80032d6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d130      	bne.n	800333e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	2203      	movs	r2, #3
 80032e8:	409a      	lsls	r2, r3
 80032ea:	0013      	movs	r3, r2
 80032ec:	43da      	mvns	r2, r3
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	4013      	ands	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	409a      	lsls	r2, r3
 80032fe:	0013      	movs	r3, r2
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4313      	orrs	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003312:	2201      	movs	r2, #1
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	409a      	lsls	r2, r3
 8003318:	0013      	movs	r3, r2
 800331a:	43da      	mvns	r2, r3
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	4013      	ands	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	091b      	lsrs	r3, r3, #4
 8003328:	2201      	movs	r2, #1
 800332a:	401a      	ands	r2, r3
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	409a      	lsls	r2, r3
 8003330:	0013      	movs	r3, r2
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	4313      	orrs	r3, r2
 8003336:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2203      	movs	r2, #3
 8003344:	4013      	ands	r3, r2
 8003346:	2b03      	cmp	r3, #3
 8003348:	d017      	beq.n	800337a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	2203      	movs	r2, #3
 8003356:	409a      	lsls	r2, r3
 8003358:	0013      	movs	r3, r2
 800335a:	43da      	mvns	r2, r3
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	4013      	ands	r3, r2
 8003360:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	409a      	lsls	r2, r3
 800336c:	0013      	movs	r3, r2
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2203      	movs	r2, #3
 8003380:	4013      	ands	r3, r2
 8003382:	2b02      	cmp	r3, #2
 8003384:	d123      	bne.n	80033ce <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	08da      	lsrs	r2, r3, #3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3208      	adds	r2, #8
 800338e:	0092      	lsls	r2, r2, #2
 8003390:	58d3      	ldr	r3, [r2, r3]
 8003392:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	2207      	movs	r2, #7
 8003398:	4013      	ands	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	220f      	movs	r2, #15
 800339e:	409a      	lsls	r2, r3
 80033a0:	0013      	movs	r3, r2
 80033a2:	43da      	mvns	r2, r3
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	4013      	ands	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	691a      	ldr	r2, [r3, #16]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	2107      	movs	r1, #7
 80033b2:	400b      	ands	r3, r1
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	409a      	lsls	r2, r3
 80033b8:	0013      	movs	r3, r2
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	4313      	orrs	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	08da      	lsrs	r2, r3, #3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3208      	adds	r2, #8
 80033c8:	0092      	lsls	r2, r2, #2
 80033ca:	6939      	ldr	r1, [r7, #16]
 80033cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	2203      	movs	r2, #3
 80033da:	409a      	lsls	r2, r3
 80033dc:	0013      	movs	r3, r2
 80033de:	43da      	mvns	r2, r3
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4013      	ands	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2203      	movs	r2, #3
 80033ec:	401a      	ands	r2, r3
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	409a      	lsls	r2, r3
 80033f4:	0013      	movs	r3, r2
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	23c0      	movs	r3, #192	; 0xc0
 8003408:	029b      	lsls	r3, r3, #10
 800340a:	4013      	ands	r3, r2
 800340c:	d100      	bne.n	8003410 <HAL_GPIO_Init+0x17c>
 800340e:	e09a      	b.n	8003546 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003410:	4b54      	ldr	r3, [pc, #336]	; (8003564 <HAL_GPIO_Init+0x2d0>)
 8003412:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003414:	4b53      	ldr	r3, [pc, #332]	; (8003564 <HAL_GPIO_Init+0x2d0>)
 8003416:	2101      	movs	r1, #1
 8003418:	430a      	orrs	r2, r1
 800341a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800341c:	4a52      	ldr	r2, [pc, #328]	; (8003568 <HAL_GPIO_Init+0x2d4>)
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	089b      	lsrs	r3, r3, #2
 8003422:	3302      	adds	r3, #2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	589b      	ldr	r3, [r3, r2]
 8003428:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	2203      	movs	r2, #3
 800342e:	4013      	ands	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	220f      	movs	r2, #15
 8003434:	409a      	lsls	r2, r3
 8003436:	0013      	movs	r3, r2
 8003438:	43da      	mvns	r2, r3
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	4013      	ands	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	23a0      	movs	r3, #160	; 0xa0
 8003444:	05db      	lsls	r3, r3, #23
 8003446:	429a      	cmp	r2, r3
 8003448:	d019      	beq.n	800347e <HAL_GPIO_Init+0x1ea>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a47      	ldr	r2, [pc, #284]	; (800356c <HAL_GPIO_Init+0x2d8>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d013      	beq.n	800347a <HAL_GPIO_Init+0x1e6>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a46      	ldr	r2, [pc, #280]	; (8003570 <HAL_GPIO_Init+0x2dc>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d00d      	beq.n	8003476 <HAL_GPIO_Init+0x1e2>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a45      	ldr	r2, [pc, #276]	; (8003574 <HAL_GPIO_Init+0x2e0>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d007      	beq.n	8003472 <HAL_GPIO_Init+0x1de>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a44      	ldr	r2, [pc, #272]	; (8003578 <HAL_GPIO_Init+0x2e4>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d101      	bne.n	800346e <HAL_GPIO_Init+0x1da>
 800346a:	2305      	movs	r3, #5
 800346c:	e008      	b.n	8003480 <HAL_GPIO_Init+0x1ec>
 800346e:	2306      	movs	r3, #6
 8003470:	e006      	b.n	8003480 <HAL_GPIO_Init+0x1ec>
 8003472:	2303      	movs	r3, #3
 8003474:	e004      	b.n	8003480 <HAL_GPIO_Init+0x1ec>
 8003476:	2302      	movs	r3, #2
 8003478:	e002      	b.n	8003480 <HAL_GPIO_Init+0x1ec>
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <HAL_GPIO_Init+0x1ec>
 800347e:	2300      	movs	r3, #0
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	2103      	movs	r1, #3
 8003484:	400a      	ands	r2, r1
 8003486:	0092      	lsls	r2, r2, #2
 8003488:	4093      	lsls	r3, r2
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	4313      	orrs	r3, r2
 800348e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003490:	4935      	ldr	r1, [pc, #212]	; (8003568 <HAL_GPIO_Init+0x2d4>)
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	089b      	lsrs	r3, r3, #2
 8003496:	3302      	adds	r3, #2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800349e:	4b37      	ldr	r3, [pc, #220]	; (800357c <HAL_GPIO_Init+0x2e8>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	43da      	mvns	r2, r3
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	4013      	ands	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	2380      	movs	r3, #128	; 0x80
 80034b4:	035b      	lsls	r3, r3, #13
 80034b6:	4013      	ands	r3, r2
 80034b8:	d003      	beq.n	80034c2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4313      	orrs	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80034c2:	4b2e      	ldr	r3, [pc, #184]	; (800357c <HAL_GPIO_Init+0x2e8>)
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80034c8:	4b2c      	ldr	r3, [pc, #176]	; (800357c <HAL_GPIO_Init+0x2e8>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	43da      	mvns	r2, r3
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	4013      	ands	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	2380      	movs	r3, #128	; 0x80
 80034de:	039b      	lsls	r3, r3, #14
 80034e0:	4013      	ands	r3, r2
 80034e2:	d003      	beq.n	80034ec <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80034ec:	4b23      	ldr	r3, [pc, #140]	; (800357c <HAL_GPIO_Init+0x2e8>)
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80034f2:	4b22      	ldr	r3, [pc, #136]	; (800357c <HAL_GPIO_Init+0x2e8>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	43da      	mvns	r2, r3
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	4013      	ands	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	2380      	movs	r3, #128	; 0x80
 8003508:	029b      	lsls	r3, r3, #10
 800350a:	4013      	ands	r3, r2
 800350c:	d003      	beq.n	8003516 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4313      	orrs	r3, r2
 8003514:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003516:	4b19      	ldr	r3, [pc, #100]	; (800357c <HAL_GPIO_Init+0x2e8>)
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800351c:	4b17      	ldr	r3, [pc, #92]	; (800357c <HAL_GPIO_Init+0x2e8>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	43da      	mvns	r2, r3
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	4013      	ands	r3, r2
 800352a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	2380      	movs	r3, #128	; 0x80
 8003532:	025b      	lsls	r3, r3, #9
 8003534:	4013      	ands	r3, r2
 8003536:	d003      	beq.n	8003540 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	4313      	orrs	r3, r2
 800353e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003540:	4b0e      	ldr	r3, [pc, #56]	; (800357c <HAL_GPIO_Init+0x2e8>)
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	3301      	adds	r3, #1
 800354a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	40da      	lsrs	r2, r3
 8003554:	1e13      	subs	r3, r2, #0
 8003556:	d000      	beq.n	800355a <HAL_GPIO_Init+0x2c6>
 8003558:	e6a8      	b.n	80032ac <HAL_GPIO_Init+0x18>
  }
}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	46c0      	nop			; (mov r8, r8)
 800355e:	46bd      	mov	sp, r7
 8003560:	b006      	add	sp, #24
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40021000 	.word	0x40021000
 8003568:	40010000 	.word	0x40010000
 800356c:	50000400 	.word	0x50000400
 8003570:	50000800 	.word	0x50000800
 8003574:	50000c00 	.word	0x50000c00
 8003578:	50001c00 	.word	0x50001c00
 800357c:	40010400 	.word	0x40010400

08003580 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003580:	b5b0      	push	{r4, r5, r7, lr}
 8003582:	b08a      	sub	sp, #40	; 0x28
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d102      	bne.n	8003594 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	f000 fbaf 	bl	8003cf2 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003594:	4bcf      	ldr	r3, [pc, #828]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	220c      	movs	r2, #12
 800359a:	4013      	ands	r3, r2
 800359c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800359e:	4bcd      	ldr	r3, [pc, #820]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	2380      	movs	r3, #128	; 0x80
 80035a4:	025b      	lsls	r3, r3, #9
 80035a6:	4013      	ands	r3, r2
 80035a8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2201      	movs	r2, #1
 80035b0:	4013      	ands	r3, r2
 80035b2:	d100      	bne.n	80035b6 <HAL_RCC_OscConfig+0x36>
 80035b4:	e07e      	b.n	80036b4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d007      	beq.n	80035cc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	2b0c      	cmp	r3, #12
 80035c0:	d112      	bne.n	80035e8 <HAL_RCC_OscConfig+0x68>
 80035c2:	69fa      	ldr	r2, [r7, #28]
 80035c4:	2380      	movs	r3, #128	; 0x80
 80035c6:	025b      	lsls	r3, r3, #9
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d10d      	bne.n	80035e8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035cc:	4bc1      	ldr	r3, [pc, #772]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	2380      	movs	r3, #128	; 0x80
 80035d2:	029b      	lsls	r3, r3, #10
 80035d4:	4013      	ands	r3, r2
 80035d6:	d100      	bne.n	80035da <HAL_RCC_OscConfig+0x5a>
 80035d8:	e06b      	b.n	80036b2 <HAL_RCC_OscConfig+0x132>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d167      	bne.n	80036b2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	f000 fb85 	bl	8003cf2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	2380      	movs	r3, #128	; 0x80
 80035ee:	025b      	lsls	r3, r3, #9
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d107      	bne.n	8003604 <HAL_RCC_OscConfig+0x84>
 80035f4:	4bb7      	ldr	r3, [pc, #732]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	4bb6      	ldr	r3, [pc, #728]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 80035fa:	2180      	movs	r1, #128	; 0x80
 80035fc:	0249      	lsls	r1, r1, #9
 80035fe:	430a      	orrs	r2, r1
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	e027      	b.n	8003654 <HAL_RCC_OscConfig+0xd4>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	23a0      	movs	r3, #160	; 0xa0
 800360a:	02db      	lsls	r3, r3, #11
 800360c:	429a      	cmp	r2, r3
 800360e:	d10e      	bne.n	800362e <HAL_RCC_OscConfig+0xae>
 8003610:	4bb0      	ldr	r3, [pc, #704]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	4baf      	ldr	r3, [pc, #700]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 8003616:	2180      	movs	r1, #128	; 0x80
 8003618:	02c9      	lsls	r1, r1, #11
 800361a:	430a      	orrs	r2, r1
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	4bad      	ldr	r3, [pc, #692]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	4bac      	ldr	r3, [pc, #688]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 8003624:	2180      	movs	r1, #128	; 0x80
 8003626:	0249      	lsls	r1, r1, #9
 8003628:	430a      	orrs	r2, r1
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	e012      	b.n	8003654 <HAL_RCC_OscConfig+0xd4>
 800362e:	4ba9      	ldr	r3, [pc, #676]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	4ba8      	ldr	r3, [pc, #672]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 8003634:	49a8      	ldr	r1, [pc, #672]	; (80038d8 <HAL_RCC_OscConfig+0x358>)
 8003636:	400a      	ands	r2, r1
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	4ba6      	ldr	r3, [pc, #664]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	2380      	movs	r3, #128	; 0x80
 8003640:	025b      	lsls	r3, r3, #9
 8003642:	4013      	ands	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4ba2      	ldr	r3, [pc, #648]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	4ba1      	ldr	r3, [pc, #644]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 800364e:	49a3      	ldr	r1, [pc, #652]	; (80038dc <HAL_RCC_OscConfig+0x35c>)
 8003650:	400a      	ands	r2, r1
 8003652:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d015      	beq.n	8003688 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365c:	f7ff f9c4 	bl	80029e8 <HAL_GetTick>
 8003660:	0003      	movs	r3, r0
 8003662:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003664:	e009      	b.n	800367a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003666:	f7ff f9bf 	bl	80029e8 <HAL_GetTick>
 800366a:	0002      	movs	r2, r0
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b64      	cmp	r3, #100	; 0x64
 8003672:	d902      	bls.n	800367a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	f000 fb3c 	bl	8003cf2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800367a:	4b96      	ldr	r3, [pc, #600]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	2380      	movs	r3, #128	; 0x80
 8003680:	029b      	lsls	r3, r3, #10
 8003682:	4013      	ands	r3, r2
 8003684:	d0ef      	beq.n	8003666 <HAL_RCC_OscConfig+0xe6>
 8003686:	e015      	b.n	80036b4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003688:	f7ff f9ae 	bl	80029e8 <HAL_GetTick>
 800368c:	0003      	movs	r3, r0
 800368e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003690:	e008      	b.n	80036a4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003692:	f7ff f9a9 	bl	80029e8 <HAL_GetTick>
 8003696:	0002      	movs	r2, r0
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b64      	cmp	r3, #100	; 0x64
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e326      	b.n	8003cf2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80036a4:	4b8b      	ldr	r3, [pc, #556]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	2380      	movs	r3, #128	; 0x80
 80036aa:	029b      	lsls	r3, r3, #10
 80036ac:	4013      	ands	r3, r2
 80036ae:	d1f0      	bne.n	8003692 <HAL_RCC_OscConfig+0x112>
 80036b0:	e000      	b.n	80036b4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2202      	movs	r2, #2
 80036ba:	4013      	ands	r3, r2
 80036bc:	d100      	bne.n	80036c0 <HAL_RCC_OscConfig+0x140>
 80036be:	e08b      	b.n	80037d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d005      	beq.n	80036d8 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	2b0c      	cmp	r3, #12
 80036d0:	d13e      	bne.n	8003750 <HAL_RCC_OscConfig+0x1d0>
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d13b      	bne.n	8003750 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80036d8:	4b7e      	ldr	r3, [pc, #504]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2204      	movs	r2, #4
 80036de:	4013      	ands	r3, r2
 80036e0:	d004      	beq.n	80036ec <HAL_RCC_OscConfig+0x16c>
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e302      	b.n	8003cf2 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ec:	4b79      	ldr	r3, [pc, #484]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	4a7b      	ldr	r2, [pc, #492]	; (80038e0 <HAL_RCC_OscConfig+0x360>)
 80036f2:	4013      	ands	r3, r2
 80036f4:	0019      	movs	r1, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	021a      	lsls	r2, r3, #8
 80036fc:	4b75      	ldr	r3, [pc, #468]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 80036fe:	430a      	orrs	r2, r1
 8003700:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003702:	4b74      	ldr	r3, [pc, #464]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2209      	movs	r2, #9
 8003708:	4393      	bics	r3, r2
 800370a:	0019      	movs	r1, r3
 800370c:	4b71      	ldr	r3, [pc, #452]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	430a      	orrs	r2, r1
 8003712:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003714:	f000 fc40 	bl	8003f98 <HAL_RCC_GetSysClockFreq>
 8003718:	0001      	movs	r1, r0
 800371a:	4b6e      	ldr	r3, [pc, #440]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	091b      	lsrs	r3, r3, #4
 8003720:	220f      	movs	r2, #15
 8003722:	4013      	ands	r3, r2
 8003724:	4a6f      	ldr	r2, [pc, #444]	; (80038e4 <HAL_RCC_OscConfig+0x364>)
 8003726:	5cd3      	ldrb	r3, [r2, r3]
 8003728:	000a      	movs	r2, r1
 800372a:	40da      	lsrs	r2, r3
 800372c:	4b6e      	ldr	r3, [pc, #440]	; (80038e8 <HAL_RCC_OscConfig+0x368>)
 800372e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003730:	4b6e      	ldr	r3, [pc, #440]	; (80038ec <HAL_RCC_OscConfig+0x36c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2513      	movs	r5, #19
 8003736:	197c      	adds	r4, r7, r5
 8003738:	0018      	movs	r0, r3
 800373a:	f7ff f90f 	bl	800295c <HAL_InitTick>
 800373e:	0003      	movs	r3, r0
 8003740:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003742:	197b      	adds	r3, r7, r5
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d046      	beq.n	80037d8 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800374a:	197b      	adds	r3, r7, r5
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	e2d0      	b.n	8003cf2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d027      	beq.n	80037a6 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003756:	4b5f      	ldr	r3, [pc, #380]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2209      	movs	r2, #9
 800375c:	4393      	bics	r3, r2
 800375e:	0019      	movs	r1, r3
 8003760:	4b5c      	ldr	r3, [pc, #368]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	430a      	orrs	r2, r1
 8003766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003768:	f7ff f93e 	bl	80029e8 <HAL_GetTick>
 800376c:	0003      	movs	r3, r0
 800376e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003770:	e008      	b.n	8003784 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003772:	f7ff f939 	bl	80029e8 <HAL_GetTick>
 8003776:	0002      	movs	r2, r0
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e2b6      	b.n	8003cf2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003784:	4b53      	ldr	r3, [pc, #332]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2204      	movs	r2, #4
 800378a:	4013      	ands	r3, r2
 800378c:	d0f1      	beq.n	8003772 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800378e:	4b51      	ldr	r3, [pc, #324]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	4a53      	ldr	r2, [pc, #332]	; (80038e0 <HAL_RCC_OscConfig+0x360>)
 8003794:	4013      	ands	r3, r2
 8003796:	0019      	movs	r1, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	021a      	lsls	r2, r3, #8
 800379e:	4b4d      	ldr	r3, [pc, #308]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 80037a0:	430a      	orrs	r2, r1
 80037a2:	605a      	str	r2, [r3, #4]
 80037a4:	e018      	b.n	80037d8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037a6:	4b4b      	ldr	r3, [pc, #300]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	4b4a      	ldr	r3, [pc, #296]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 80037ac:	2101      	movs	r1, #1
 80037ae:	438a      	bics	r2, r1
 80037b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b2:	f7ff f919 	bl	80029e8 <HAL_GetTick>
 80037b6:	0003      	movs	r3, r0
 80037b8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037bc:	f7ff f914 	bl	80029e8 <HAL_GetTick>
 80037c0:	0002      	movs	r2, r0
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e291      	b.n	8003cf2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037ce:	4b41      	ldr	r3, [pc, #260]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2204      	movs	r2, #4
 80037d4:	4013      	ands	r3, r2
 80037d6:	d1f1      	bne.n	80037bc <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2210      	movs	r2, #16
 80037de:	4013      	ands	r3, r2
 80037e0:	d100      	bne.n	80037e4 <HAL_RCC_OscConfig+0x264>
 80037e2:	e0a1      	b.n	8003928 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d140      	bne.n	800386c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037ea:	4b3a      	ldr	r3, [pc, #232]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	2380      	movs	r3, #128	; 0x80
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4013      	ands	r3, r2
 80037f4:	d005      	beq.n	8003802 <HAL_RCC_OscConfig+0x282>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e277      	b.n	8003cf2 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003802:	4b34      	ldr	r3, [pc, #208]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	4a3a      	ldr	r2, [pc, #232]	; (80038f0 <HAL_RCC_OscConfig+0x370>)
 8003808:	4013      	ands	r3, r2
 800380a:	0019      	movs	r1, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003810:	4b30      	ldr	r3, [pc, #192]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 8003812:	430a      	orrs	r2, r1
 8003814:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003816:	4b2f      	ldr	r3, [pc, #188]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	021b      	lsls	r3, r3, #8
 800381c:	0a19      	lsrs	r1, r3, #8
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	061a      	lsls	r2, r3, #24
 8003824:	4b2b      	ldr	r3, [pc, #172]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 8003826:	430a      	orrs	r2, r1
 8003828:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	0b5b      	lsrs	r3, r3, #13
 8003830:	3301      	adds	r3, #1
 8003832:	2280      	movs	r2, #128	; 0x80
 8003834:	0212      	lsls	r2, r2, #8
 8003836:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003838:	4b26      	ldr	r3, [pc, #152]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	091b      	lsrs	r3, r3, #4
 800383e:	210f      	movs	r1, #15
 8003840:	400b      	ands	r3, r1
 8003842:	4928      	ldr	r1, [pc, #160]	; (80038e4 <HAL_RCC_OscConfig+0x364>)
 8003844:	5ccb      	ldrb	r3, [r1, r3]
 8003846:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003848:	4b27      	ldr	r3, [pc, #156]	; (80038e8 <HAL_RCC_OscConfig+0x368>)
 800384a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800384c:	4b27      	ldr	r3, [pc, #156]	; (80038ec <HAL_RCC_OscConfig+0x36c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2513      	movs	r5, #19
 8003852:	197c      	adds	r4, r7, r5
 8003854:	0018      	movs	r0, r3
 8003856:	f7ff f881 	bl	800295c <HAL_InitTick>
 800385a:	0003      	movs	r3, r0
 800385c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800385e:	197b      	adds	r3, r7, r5
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d060      	beq.n	8003928 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8003866:	197b      	adds	r3, r7, r5
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	e242      	b.n	8003cf2 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d03f      	beq.n	80038f4 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003874:	4b17      	ldr	r3, [pc, #92]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	4b16      	ldr	r3, [pc, #88]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 800387a:	2180      	movs	r1, #128	; 0x80
 800387c:	0049      	lsls	r1, r1, #1
 800387e:	430a      	orrs	r2, r1
 8003880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003882:	f7ff f8b1 	bl	80029e8 <HAL_GetTick>
 8003886:	0003      	movs	r3, r0
 8003888:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800388c:	f7ff f8ac 	bl	80029e8 <HAL_GetTick>
 8003890:	0002      	movs	r2, r0
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e229      	b.n	8003cf2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800389e:	4b0d      	ldr	r3, [pc, #52]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	2380      	movs	r3, #128	; 0x80
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4013      	ands	r3, r2
 80038a8:	d0f0      	beq.n	800388c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038aa:	4b0a      	ldr	r3, [pc, #40]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	4a10      	ldr	r2, [pc, #64]	; (80038f0 <HAL_RCC_OscConfig+0x370>)
 80038b0:	4013      	ands	r3, r2
 80038b2:	0019      	movs	r1, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038b8:	4b06      	ldr	r3, [pc, #24]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 80038ba:	430a      	orrs	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038be:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	021b      	lsls	r3, r3, #8
 80038c4:	0a19      	lsrs	r1, r3, #8
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	061a      	lsls	r2, r3, #24
 80038cc:	4b01      	ldr	r3, [pc, #4]	; (80038d4 <HAL_RCC_OscConfig+0x354>)
 80038ce:	430a      	orrs	r2, r1
 80038d0:	605a      	str	r2, [r3, #4]
 80038d2:	e029      	b.n	8003928 <HAL_RCC_OscConfig+0x3a8>
 80038d4:	40021000 	.word	0x40021000
 80038d8:	fffeffff 	.word	0xfffeffff
 80038dc:	fffbffff 	.word	0xfffbffff
 80038e0:	ffffe0ff 	.word	0xffffe0ff
 80038e4:	08007fe8 	.word	0x08007fe8
 80038e8:	20000000 	.word	0x20000000
 80038ec:	20000004 	.word	0x20000004
 80038f0:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038f4:	4bbd      	ldr	r3, [pc, #756]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	4bbc      	ldr	r3, [pc, #752]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 80038fa:	49bd      	ldr	r1, [pc, #756]	; (8003bf0 <HAL_RCC_OscConfig+0x670>)
 80038fc:	400a      	ands	r2, r1
 80038fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003900:	f7ff f872 	bl	80029e8 <HAL_GetTick>
 8003904:	0003      	movs	r3, r0
 8003906:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800390a:	f7ff f86d 	bl	80029e8 <HAL_GetTick>
 800390e:	0002      	movs	r2, r0
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e1ea      	b.n	8003cf2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800391c:	4bb3      	ldr	r3, [pc, #716]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	2380      	movs	r3, #128	; 0x80
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4013      	ands	r3, r2
 8003926:	d1f0      	bne.n	800390a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2208      	movs	r2, #8
 800392e:	4013      	ands	r3, r2
 8003930:	d036      	beq.n	80039a0 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d019      	beq.n	800396e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800393a:	4bac      	ldr	r3, [pc, #688]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 800393c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800393e:	4bab      	ldr	r3, [pc, #684]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 8003940:	2101      	movs	r1, #1
 8003942:	430a      	orrs	r2, r1
 8003944:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003946:	f7ff f84f 	bl	80029e8 <HAL_GetTick>
 800394a:	0003      	movs	r3, r0
 800394c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003950:	f7ff f84a 	bl	80029e8 <HAL_GetTick>
 8003954:	0002      	movs	r2, r0
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e1c7      	b.n	8003cf2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003962:	4ba2      	ldr	r3, [pc, #648]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 8003964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003966:	2202      	movs	r2, #2
 8003968:	4013      	ands	r3, r2
 800396a:	d0f1      	beq.n	8003950 <HAL_RCC_OscConfig+0x3d0>
 800396c:	e018      	b.n	80039a0 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800396e:	4b9f      	ldr	r3, [pc, #636]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 8003970:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003972:	4b9e      	ldr	r3, [pc, #632]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 8003974:	2101      	movs	r1, #1
 8003976:	438a      	bics	r2, r1
 8003978:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800397a:	f7ff f835 	bl	80029e8 <HAL_GetTick>
 800397e:	0003      	movs	r3, r0
 8003980:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003984:	f7ff f830 	bl	80029e8 <HAL_GetTick>
 8003988:	0002      	movs	r2, r0
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e1ad      	b.n	8003cf2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003996:	4b95      	ldr	r3, [pc, #596]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 8003998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800399a:	2202      	movs	r2, #2
 800399c:	4013      	ands	r3, r2
 800399e:	d1f1      	bne.n	8003984 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2204      	movs	r2, #4
 80039a6:	4013      	ands	r3, r2
 80039a8:	d100      	bne.n	80039ac <HAL_RCC_OscConfig+0x42c>
 80039aa:	e0ae      	b.n	8003b0a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ac:	2027      	movs	r0, #39	; 0x27
 80039ae:	183b      	adds	r3, r7, r0
 80039b0:	2200      	movs	r2, #0
 80039b2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039b4:	4b8d      	ldr	r3, [pc, #564]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 80039b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039b8:	2380      	movs	r3, #128	; 0x80
 80039ba:	055b      	lsls	r3, r3, #21
 80039bc:	4013      	ands	r3, r2
 80039be:	d109      	bne.n	80039d4 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039c0:	4b8a      	ldr	r3, [pc, #552]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 80039c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039c4:	4b89      	ldr	r3, [pc, #548]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 80039c6:	2180      	movs	r1, #128	; 0x80
 80039c8:	0549      	lsls	r1, r1, #21
 80039ca:	430a      	orrs	r2, r1
 80039cc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80039ce:	183b      	adds	r3, r7, r0
 80039d0:	2201      	movs	r2, #1
 80039d2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d4:	4b87      	ldr	r3, [pc, #540]	; (8003bf4 <HAL_RCC_OscConfig+0x674>)
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	2380      	movs	r3, #128	; 0x80
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	4013      	ands	r3, r2
 80039de:	d11a      	bne.n	8003a16 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039e0:	4b84      	ldr	r3, [pc, #528]	; (8003bf4 <HAL_RCC_OscConfig+0x674>)
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	4b83      	ldr	r3, [pc, #524]	; (8003bf4 <HAL_RCC_OscConfig+0x674>)
 80039e6:	2180      	movs	r1, #128	; 0x80
 80039e8:	0049      	lsls	r1, r1, #1
 80039ea:	430a      	orrs	r2, r1
 80039ec:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ee:	f7fe fffb 	bl	80029e8 <HAL_GetTick>
 80039f2:	0003      	movs	r3, r0
 80039f4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f8:	f7fe fff6 	bl	80029e8 <HAL_GetTick>
 80039fc:	0002      	movs	r2, r0
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b64      	cmp	r3, #100	; 0x64
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e173      	b.n	8003cf2 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0a:	4b7a      	ldr	r3, [pc, #488]	; (8003bf4 <HAL_RCC_OscConfig+0x674>)
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	2380      	movs	r3, #128	; 0x80
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	4013      	ands	r3, r2
 8003a14:	d0f0      	beq.n	80039f8 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689a      	ldr	r2, [r3, #8]
 8003a1a:	2380      	movs	r3, #128	; 0x80
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d107      	bne.n	8003a32 <HAL_RCC_OscConfig+0x4b2>
 8003a22:	4b72      	ldr	r3, [pc, #456]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 8003a24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a26:	4b71      	ldr	r3, [pc, #452]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 8003a28:	2180      	movs	r1, #128	; 0x80
 8003a2a:	0049      	lsls	r1, r1, #1
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	651a      	str	r2, [r3, #80]	; 0x50
 8003a30:	e031      	b.n	8003a96 <HAL_RCC_OscConfig+0x516>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10c      	bne.n	8003a54 <HAL_RCC_OscConfig+0x4d4>
 8003a3a:	4b6c      	ldr	r3, [pc, #432]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 8003a3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a3e:	4b6b      	ldr	r3, [pc, #428]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 8003a40:	496b      	ldr	r1, [pc, #428]	; (8003bf0 <HAL_RCC_OscConfig+0x670>)
 8003a42:	400a      	ands	r2, r1
 8003a44:	651a      	str	r2, [r3, #80]	; 0x50
 8003a46:	4b69      	ldr	r3, [pc, #420]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 8003a48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a4a:	4b68      	ldr	r3, [pc, #416]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 8003a4c:	496a      	ldr	r1, [pc, #424]	; (8003bf8 <HAL_RCC_OscConfig+0x678>)
 8003a4e:	400a      	ands	r2, r1
 8003a50:	651a      	str	r2, [r3, #80]	; 0x50
 8003a52:	e020      	b.n	8003a96 <HAL_RCC_OscConfig+0x516>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	23a0      	movs	r3, #160	; 0xa0
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d10e      	bne.n	8003a7e <HAL_RCC_OscConfig+0x4fe>
 8003a60:	4b62      	ldr	r3, [pc, #392]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 8003a62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a64:	4b61      	ldr	r3, [pc, #388]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 8003a66:	2180      	movs	r1, #128	; 0x80
 8003a68:	00c9      	lsls	r1, r1, #3
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	651a      	str	r2, [r3, #80]	; 0x50
 8003a6e:	4b5f      	ldr	r3, [pc, #380]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 8003a70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a72:	4b5e      	ldr	r3, [pc, #376]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 8003a74:	2180      	movs	r1, #128	; 0x80
 8003a76:	0049      	lsls	r1, r1, #1
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	651a      	str	r2, [r3, #80]	; 0x50
 8003a7c:	e00b      	b.n	8003a96 <HAL_RCC_OscConfig+0x516>
 8003a7e:	4b5b      	ldr	r3, [pc, #364]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 8003a80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a82:	4b5a      	ldr	r3, [pc, #360]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 8003a84:	495a      	ldr	r1, [pc, #360]	; (8003bf0 <HAL_RCC_OscConfig+0x670>)
 8003a86:	400a      	ands	r2, r1
 8003a88:	651a      	str	r2, [r3, #80]	; 0x50
 8003a8a:	4b58      	ldr	r3, [pc, #352]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 8003a8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a8e:	4b57      	ldr	r3, [pc, #348]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 8003a90:	4959      	ldr	r1, [pc, #356]	; (8003bf8 <HAL_RCC_OscConfig+0x678>)
 8003a92:	400a      	ands	r2, r1
 8003a94:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d015      	beq.n	8003aca <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a9e:	f7fe ffa3 	bl	80029e8 <HAL_GetTick>
 8003aa2:	0003      	movs	r3, r0
 8003aa4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003aa6:	e009      	b.n	8003abc <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aa8:	f7fe ff9e 	bl	80029e8 <HAL_GetTick>
 8003aac:	0002      	movs	r2, r0
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	4a52      	ldr	r2, [pc, #328]	; (8003bfc <HAL_RCC_OscConfig+0x67c>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e11a      	b.n	8003cf2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003abc:	4b4b      	ldr	r3, [pc, #300]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 8003abe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ac0:	2380      	movs	r3, #128	; 0x80
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	d0ef      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x528>
 8003ac8:	e014      	b.n	8003af4 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aca:	f7fe ff8d 	bl	80029e8 <HAL_GetTick>
 8003ace:	0003      	movs	r3, r0
 8003ad0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ad2:	e009      	b.n	8003ae8 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ad4:	f7fe ff88 	bl	80029e8 <HAL_GetTick>
 8003ad8:	0002      	movs	r2, r0
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	4a47      	ldr	r2, [pc, #284]	; (8003bfc <HAL_RCC_OscConfig+0x67c>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e104      	b.n	8003cf2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ae8:	4b40      	ldr	r3, [pc, #256]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 8003aea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003aec:	2380      	movs	r3, #128	; 0x80
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4013      	ands	r3, r2
 8003af2:	d1ef      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003af4:	2327      	movs	r3, #39	; 0x27
 8003af6:	18fb      	adds	r3, r7, r3
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d105      	bne.n	8003b0a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003afe:	4b3b      	ldr	r3, [pc, #236]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 8003b00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b02:	4b3a      	ldr	r3, [pc, #232]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 8003b04:	493e      	ldr	r1, [pc, #248]	; (8003c00 <HAL_RCC_OscConfig+0x680>)
 8003b06:	400a      	ands	r2, r1
 8003b08:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	4013      	ands	r3, r2
 8003b12:	d049      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d026      	beq.n	8003b6a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003b1c:	4b33      	ldr	r3, [pc, #204]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	4b32      	ldr	r3, [pc, #200]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 8003b22:	2101      	movs	r1, #1
 8003b24:	430a      	orrs	r2, r1
 8003b26:	609a      	str	r2, [r3, #8]
 8003b28:	4b30      	ldr	r3, [pc, #192]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 8003b2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b2c:	4b2f      	ldr	r3, [pc, #188]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 8003b2e:	2101      	movs	r1, #1
 8003b30:	430a      	orrs	r2, r1
 8003b32:	635a      	str	r2, [r3, #52]	; 0x34
 8003b34:	4b33      	ldr	r3, [pc, #204]	; (8003c04 <HAL_RCC_OscConfig+0x684>)
 8003b36:	6a1a      	ldr	r2, [r3, #32]
 8003b38:	4b32      	ldr	r3, [pc, #200]	; (8003c04 <HAL_RCC_OscConfig+0x684>)
 8003b3a:	2180      	movs	r1, #128	; 0x80
 8003b3c:	0189      	lsls	r1, r1, #6
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b42:	f7fe ff51 	bl	80029e8 <HAL_GetTick>
 8003b46:	0003      	movs	r3, r0
 8003b48:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b4c:	f7fe ff4c 	bl	80029e8 <HAL_GetTick>
 8003b50:	0002      	movs	r2, r0
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e0c9      	b.n	8003cf2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b5e:	4b23      	ldr	r3, [pc, #140]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	2202      	movs	r2, #2
 8003b64:	4013      	ands	r3, r2
 8003b66:	d0f1      	beq.n	8003b4c <HAL_RCC_OscConfig+0x5cc>
 8003b68:	e01e      	b.n	8003ba8 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003b6a:	4b20      	ldr	r3, [pc, #128]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	4b1f      	ldr	r3, [pc, #124]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 8003b70:	2101      	movs	r1, #1
 8003b72:	438a      	bics	r2, r1
 8003b74:	609a      	str	r2, [r3, #8]
 8003b76:	4b23      	ldr	r3, [pc, #140]	; (8003c04 <HAL_RCC_OscConfig+0x684>)
 8003b78:	6a1a      	ldr	r2, [r3, #32]
 8003b7a:	4b22      	ldr	r3, [pc, #136]	; (8003c04 <HAL_RCC_OscConfig+0x684>)
 8003b7c:	4922      	ldr	r1, [pc, #136]	; (8003c08 <HAL_RCC_OscConfig+0x688>)
 8003b7e:	400a      	ands	r2, r1
 8003b80:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b82:	f7fe ff31 	bl	80029e8 <HAL_GetTick>
 8003b86:	0003      	movs	r3, r0
 8003b88:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b8c:	f7fe ff2c 	bl	80029e8 <HAL_GetTick>
 8003b90:	0002      	movs	r2, r0
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e0a9      	b.n	8003cf2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b9e:	4b13      	ldr	r3, [pc, #76]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	d1f1      	bne.n	8003b8c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d100      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x632>
 8003bb0:	e09e      	b.n	8003cf0 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bb2:	6a3b      	ldr	r3, [r7, #32]
 8003bb4:	2b0c      	cmp	r3, #12
 8003bb6:	d100      	bne.n	8003bba <HAL_RCC_OscConfig+0x63a>
 8003bb8:	e077      	b.n	8003caa <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d158      	bne.n	8003c74 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc2:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	4b09      	ldr	r3, [pc, #36]	; (8003bec <HAL_RCC_OscConfig+0x66c>)
 8003bc8:	4910      	ldr	r1, [pc, #64]	; (8003c0c <HAL_RCC_OscConfig+0x68c>)
 8003bca:	400a      	ands	r2, r1
 8003bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bce:	f7fe ff0b 	bl	80029e8 <HAL_GetTick>
 8003bd2:	0003      	movs	r3, r0
 8003bd4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003bd6:	e01b      	b.n	8003c10 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bd8:	f7fe ff06 	bl	80029e8 <HAL_GetTick>
 8003bdc:	0002      	movs	r2, r0
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d914      	bls.n	8003c10 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e083      	b.n	8003cf2 <HAL_RCC_OscConfig+0x772>
 8003bea:	46c0      	nop			; (mov r8, r8)
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	fffffeff 	.word	0xfffffeff
 8003bf4:	40007000 	.word	0x40007000
 8003bf8:	fffffbff 	.word	0xfffffbff
 8003bfc:	00001388 	.word	0x00001388
 8003c00:	efffffff 	.word	0xefffffff
 8003c04:	40010000 	.word	0x40010000
 8003c08:	ffffdfff 	.word	0xffffdfff
 8003c0c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003c10:	4b3a      	ldr	r3, [pc, #232]	; (8003cfc <HAL_RCC_OscConfig+0x77c>)
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	2380      	movs	r3, #128	; 0x80
 8003c16:	049b      	lsls	r3, r3, #18
 8003c18:	4013      	ands	r3, r2
 8003c1a:	d1dd      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c1c:	4b37      	ldr	r3, [pc, #220]	; (8003cfc <HAL_RCC_OscConfig+0x77c>)
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	4a37      	ldr	r2, [pc, #220]	; (8003d00 <HAL_RCC_OscConfig+0x780>)
 8003c22:	4013      	ands	r3, r2
 8003c24:	0019      	movs	r1, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c34:	431a      	orrs	r2, r3
 8003c36:	4b31      	ldr	r3, [pc, #196]	; (8003cfc <HAL_RCC_OscConfig+0x77c>)
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c3c:	4b2f      	ldr	r3, [pc, #188]	; (8003cfc <HAL_RCC_OscConfig+0x77c>)
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	4b2e      	ldr	r3, [pc, #184]	; (8003cfc <HAL_RCC_OscConfig+0x77c>)
 8003c42:	2180      	movs	r1, #128	; 0x80
 8003c44:	0449      	lsls	r1, r1, #17
 8003c46:	430a      	orrs	r2, r1
 8003c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4a:	f7fe fecd 	bl	80029e8 <HAL_GetTick>
 8003c4e:	0003      	movs	r3, r0
 8003c50:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c54:	f7fe fec8 	bl	80029e8 <HAL_GetTick>
 8003c58:	0002      	movs	r2, r0
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e045      	b.n	8003cf2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003c66:	4b25      	ldr	r3, [pc, #148]	; (8003cfc <HAL_RCC_OscConfig+0x77c>)
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	2380      	movs	r3, #128	; 0x80
 8003c6c:	049b      	lsls	r3, r3, #18
 8003c6e:	4013      	ands	r3, r2
 8003c70:	d0f0      	beq.n	8003c54 <HAL_RCC_OscConfig+0x6d4>
 8003c72:	e03d      	b.n	8003cf0 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c74:	4b21      	ldr	r3, [pc, #132]	; (8003cfc <HAL_RCC_OscConfig+0x77c>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	4b20      	ldr	r3, [pc, #128]	; (8003cfc <HAL_RCC_OscConfig+0x77c>)
 8003c7a:	4922      	ldr	r1, [pc, #136]	; (8003d04 <HAL_RCC_OscConfig+0x784>)
 8003c7c:	400a      	ands	r2, r1
 8003c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c80:	f7fe feb2 	bl	80029e8 <HAL_GetTick>
 8003c84:	0003      	movs	r3, r0
 8003c86:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003c88:	e008      	b.n	8003c9c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c8a:	f7fe fead 	bl	80029e8 <HAL_GetTick>
 8003c8e:	0002      	movs	r2, r0
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e02a      	b.n	8003cf2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003c9c:	4b17      	ldr	r3, [pc, #92]	; (8003cfc <HAL_RCC_OscConfig+0x77c>)
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	2380      	movs	r3, #128	; 0x80
 8003ca2:	049b      	lsls	r3, r3, #18
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	d1f0      	bne.n	8003c8a <HAL_RCC_OscConfig+0x70a>
 8003ca8:	e022      	b.n	8003cf0 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d101      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e01d      	b.n	8003cf2 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cb6:	4b11      	ldr	r3, [pc, #68]	; (8003cfc <HAL_RCC_OscConfig+0x77c>)
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cbc:	69fa      	ldr	r2, [r7, #28]
 8003cbe:	2380      	movs	r3, #128	; 0x80
 8003cc0:	025b      	lsls	r3, r3, #9
 8003cc2:	401a      	ands	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d10f      	bne.n	8003cec <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003ccc:	69fa      	ldr	r2, [r7, #28]
 8003cce:	23f0      	movs	r3, #240	; 0xf0
 8003cd0:	039b      	lsls	r3, r3, #14
 8003cd2:	401a      	ands	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d107      	bne.n	8003cec <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003cdc:	69fa      	ldr	r2, [r7, #28]
 8003cde:	23c0      	movs	r3, #192	; 0xc0
 8003ce0:	041b      	lsls	r3, r3, #16
 8003ce2:	401a      	ands	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d001      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e000      	b.n	8003cf2 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	b00a      	add	sp, #40	; 0x28
 8003cf8:	bdb0      	pop	{r4, r5, r7, pc}
 8003cfa:	46c0      	nop			; (mov r8, r8)
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	ff02ffff 	.word	0xff02ffff
 8003d04:	feffffff 	.word	0xfeffffff

08003d08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d08:	b5b0      	push	{r4, r5, r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d101      	bne.n	8003d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e128      	b.n	8003f6e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d1c:	4b96      	ldr	r3, [pc, #600]	; (8003f78 <HAL_RCC_ClockConfig+0x270>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2201      	movs	r2, #1
 8003d22:	4013      	ands	r3, r2
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d91e      	bls.n	8003d68 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d2a:	4b93      	ldr	r3, [pc, #588]	; (8003f78 <HAL_RCC_ClockConfig+0x270>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	4393      	bics	r3, r2
 8003d32:	0019      	movs	r1, r3
 8003d34:	4b90      	ldr	r3, [pc, #576]	; (8003f78 <HAL_RCC_ClockConfig+0x270>)
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d3c:	f7fe fe54 	bl	80029e8 <HAL_GetTick>
 8003d40:	0003      	movs	r3, r0
 8003d42:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d44:	e009      	b.n	8003d5a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d46:	f7fe fe4f 	bl	80029e8 <HAL_GetTick>
 8003d4a:	0002      	movs	r2, r0
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	4a8a      	ldr	r2, [pc, #552]	; (8003f7c <HAL_RCC_ClockConfig+0x274>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e109      	b.n	8003f6e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5a:	4b87      	ldr	r3, [pc, #540]	; (8003f78 <HAL_RCC_ClockConfig+0x270>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	4013      	ands	r3, r2
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d1ee      	bne.n	8003d46 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	4013      	ands	r3, r2
 8003d70:	d009      	beq.n	8003d86 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d72:	4b83      	ldr	r3, [pc, #524]	; (8003f80 <HAL_RCC_ClockConfig+0x278>)
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	22f0      	movs	r2, #240	; 0xf0
 8003d78:	4393      	bics	r3, r2
 8003d7a:	0019      	movs	r1, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	4b7f      	ldr	r3, [pc, #508]	; (8003f80 <HAL_RCC_ClockConfig+0x278>)
 8003d82:	430a      	orrs	r2, r1
 8003d84:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	d100      	bne.n	8003d92 <HAL_RCC_ClockConfig+0x8a>
 8003d90:	e089      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d107      	bne.n	8003daa <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d9a:	4b79      	ldr	r3, [pc, #484]	; (8003f80 <HAL_RCC_ClockConfig+0x278>)
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	2380      	movs	r3, #128	; 0x80
 8003da0:	029b      	lsls	r3, r3, #10
 8003da2:	4013      	ands	r3, r2
 8003da4:	d120      	bne.n	8003de8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e0e1      	b.n	8003f6e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2b03      	cmp	r3, #3
 8003db0:	d107      	bne.n	8003dc2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003db2:	4b73      	ldr	r3, [pc, #460]	; (8003f80 <HAL_RCC_ClockConfig+0x278>)
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	2380      	movs	r3, #128	; 0x80
 8003db8:	049b      	lsls	r3, r3, #18
 8003dba:	4013      	ands	r3, r2
 8003dbc:	d114      	bne.n	8003de8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e0d5      	b.n	8003f6e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d106      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003dca:	4b6d      	ldr	r3, [pc, #436]	; (8003f80 <HAL_RCC_ClockConfig+0x278>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2204      	movs	r2, #4
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	d109      	bne.n	8003de8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e0ca      	b.n	8003f6e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003dd8:	4b69      	ldr	r3, [pc, #420]	; (8003f80 <HAL_RCC_ClockConfig+0x278>)
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	2380      	movs	r3, #128	; 0x80
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4013      	ands	r3, r2
 8003de2:	d101      	bne.n	8003de8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e0c2      	b.n	8003f6e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003de8:	4b65      	ldr	r3, [pc, #404]	; (8003f80 <HAL_RCC_ClockConfig+0x278>)
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	2203      	movs	r2, #3
 8003dee:	4393      	bics	r3, r2
 8003df0:	0019      	movs	r1, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	4b62      	ldr	r3, [pc, #392]	; (8003f80 <HAL_RCC_ClockConfig+0x278>)
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dfc:	f7fe fdf4 	bl	80029e8 <HAL_GetTick>
 8003e00:	0003      	movs	r3, r0
 8003e02:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d111      	bne.n	8003e30 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e0c:	e009      	b.n	8003e22 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e0e:	f7fe fdeb 	bl	80029e8 <HAL_GetTick>
 8003e12:	0002      	movs	r2, r0
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	4a58      	ldr	r2, [pc, #352]	; (8003f7c <HAL_RCC_ClockConfig+0x274>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e0a5      	b.n	8003f6e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e22:	4b57      	ldr	r3, [pc, #348]	; (8003f80 <HAL_RCC_ClockConfig+0x278>)
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	220c      	movs	r2, #12
 8003e28:	4013      	ands	r3, r2
 8003e2a:	2b08      	cmp	r3, #8
 8003e2c:	d1ef      	bne.n	8003e0e <HAL_RCC_ClockConfig+0x106>
 8003e2e:	e03a      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	2b03      	cmp	r3, #3
 8003e36:	d111      	bne.n	8003e5c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e38:	e009      	b.n	8003e4e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e3a:	f7fe fdd5 	bl	80029e8 <HAL_GetTick>
 8003e3e:	0002      	movs	r2, r0
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	4a4d      	ldr	r2, [pc, #308]	; (8003f7c <HAL_RCC_ClockConfig+0x274>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e08f      	b.n	8003f6e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e4e:	4b4c      	ldr	r3, [pc, #304]	; (8003f80 <HAL_RCC_ClockConfig+0x278>)
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	220c      	movs	r2, #12
 8003e54:	4013      	ands	r3, r2
 8003e56:	2b0c      	cmp	r3, #12
 8003e58:	d1ef      	bne.n	8003e3a <HAL_RCC_ClockConfig+0x132>
 8003e5a:	e024      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d11b      	bne.n	8003e9c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e64:	e009      	b.n	8003e7a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e66:	f7fe fdbf 	bl	80029e8 <HAL_GetTick>
 8003e6a:	0002      	movs	r2, r0
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	4a42      	ldr	r2, [pc, #264]	; (8003f7c <HAL_RCC_ClockConfig+0x274>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e079      	b.n	8003f6e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e7a:	4b41      	ldr	r3, [pc, #260]	; (8003f80 <HAL_RCC_ClockConfig+0x278>)
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	220c      	movs	r2, #12
 8003e80:	4013      	ands	r3, r2
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	d1ef      	bne.n	8003e66 <HAL_RCC_ClockConfig+0x15e>
 8003e86:	e00e      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e88:	f7fe fdae 	bl	80029e8 <HAL_GetTick>
 8003e8c:	0002      	movs	r2, r0
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	4a3a      	ldr	r2, [pc, #232]	; (8003f7c <HAL_RCC_ClockConfig+0x274>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e068      	b.n	8003f6e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003e9c:	4b38      	ldr	r3, [pc, #224]	; (8003f80 <HAL_RCC_ClockConfig+0x278>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	220c      	movs	r2, #12
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	d1f0      	bne.n	8003e88 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ea6:	4b34      	ldr	r3, [pc, #208]	; (8003f78 <HAL_RCC_ClockConfig+0x270>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	4013      	ands	r3, r2
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d21e      	bcs.n	8003ef2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb4:	4b30      	ldr	r3, [pc, #192]	; (8003f78 <HAL_RCC_ClockConfig+0x270>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	4393      	bics	r3, r2
 8003ebc:	0019      	movs	r1, r3
 8003ebe:	4b2e      	ldr	r3, [pc, #184]	; (8003f78 <HAL_RCC_ClockConfig+0x270>)
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ec6:	f7fe fd8f 	bl	80029e8 <HAL_GetTick>
 8003eca:	0003      	movs	r3, r0
 8003ecc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ece:	e009      	b.n	8003ee4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ed0:	f7fe fd8a 	bl	80029e8 <HAL_GetTick>
 8003ed4:	0002      	movs	r2, r0
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	4a28      	ldr	r2, [pc, #160]	; (8003f7c <HAL_RCC_ClockConfig+0x274>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e044      	b.n	8003f6e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee4:	4b24      	ldr	r3, [pc, #144]	; (8003f78 <HAL_RCC_ClockConfig+0x270>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	4013      	ands	r3, r2
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d1ee      	bne.n	8003ed0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2204      	movs	r2, #4
 8003ef8:	4013      	ands	r3, r2
 8003efa:	d009      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003efc:	4b20      	ldr	r3, [pc, #128]	; (8003f80 <HAL_RCC_ClockConfig+0x278>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	4a20      	ldr	r2, [pc, #128]	; (8003f84 <HAL_RCC_ClockConfig+0x27c>)
 8003f02:	4013      	ands	r3, r2
 8003f04:	0019      	movs	r1, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68da      	ldr	r2, [r3, #12]
 8003f0a:	4b1d      	ldr	r3, [pc, #116]	; (8003f80 <HAL_RCC_ClockConfig+0x278>)
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2208      	movs	r2, #8
 8003f16:	4013      	ands	r3, r2
 8003f18:	d00a      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f1a:	4b19      	ldr	r3, [pc, #100]	; (8003f80 <HAL_RCC_ClockConfig+0x278>)
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	4a1a      	ldr	r2, [pc, #104]	; (8003f88 <HAL_RCC_ClockConfig+0x280>)
 8003f20:	4013      	ands	r3, r2
 8003f22:	0019      	movs	r1, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	00da      	lsls	r2, r3, #3
 8003f2a:	4b15      	ldr	r3, [pc, #84]	; (8003f80 <HAL_RCC_ClockConfig+0x278>)
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f30:	f000 f832 	bl	8003f98 <HAL_RCC_GetSysClockFreq>
 8003f34:	0001      	movs	r1, r0
 8003f36:	4b12      	ldr	r3, [pc, #72]	; (8003f80 <HAL_RCC_ClockConfig+0x278>)
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	091b      	lsrs	r3, r3, #4
 8003f3c:	220f      	movs	r2, #15
 8003f3e:	4013      	ands	r3, r2
 8003f40:	4a12      	ldr	r2, [pc, #72]	; (8003f8c <HAL_RCC_ClockConfig+0x284>)
 8003f42:	5cd3      	ldrb	r3, [r2, r3]
 8003f44:	000a      	movs	r2, r1
 8003f46:	40da      	lsrs	r2, r3
 8003f48:	4b11      	ldr	r3, [pc, #68]	; (8003f90 <HAL_RCC_ClockConfig+0x288>)
 8003f4a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f4c:	4b11      	ldr	r3, [pc, #68]	; (8003f94 <HAL_RCC_ClockConfig+0x28c>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	250b      	movs	r5, #11
 8003f52:	197c      	adds	r4, r7, r5
 8003f54:	0018      	movs	r0, r3
 8003f56:	f7fe fd01 	bl	800295c <HAL_InitTick>
 8003f5a:	0003      	movs	r3, r0
 8003f5c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003f5e:	197b      	adds	r3, r7, r5
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003f66:	197b      	adds	r3, r7, r5
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	e000      	b.n	8003f6e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	0018      	movs	r0, r3
 8003f70:	46bd      	mov	sp, r7
 8003f72:	b004      	add	sp, #16
 8003f74:	bdb0      	pop	{r4, r5, r7, pc}
 8003f76:	46c0      	nop			; (mov r8, r8)
 8003f78:	40022000 	.word	0x40022000
 8003f7c:	00001388 	.word	0x00001388
 8003f80:	40021000 	.word	0x40021000
 8003f84:	fffff8ff 	.word	0xfffff8ff
 8003f88:	ffffc7ff 	.word	0xffffc7ff
 8003f8c:	08007fe8 	.word	0x08007fe8
 8003f90:	20000000 	.word	0x20000000
 8003f94:	20000004 	.word	0x20000004

08003f98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f98:	b5b0      	push	{r4, r5, r7, lr}
 8003f9a:	b08e      	sub	sp, #56	; 0x38
 8003f9c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003f9e:	4b4c      	ldr	r3, [pc, #304]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fa6:	230c      	movs	r3, #12
 8003fa8:	4013      	ands	r3, r2
 8003faa:	2b0c      	cmp	r3, #12
 8003fac:	d014      	beq.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x40>
 8003fae:	d900      	bls.n	8003fb2 <HAL_RCC_GetSysClockFreq+0x1a>
 8003fb0:	e07b      	b.n	80040aa <HAL_RCC_GetSysClockFreq+0x112>
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	d002      	beq.n	8003fbc <HAL_RCC_GetSysClockFreq+0x24>
 8003fb6:	2b08      	cmp	r3, #8
 8003fb8:	d00b      	beq.n	8003fd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003fba:	e076      	b.n	80040aa <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003fbc:	4b44      	ldr	r3, [pc, #272]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2210      	movs	r2, #16
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	d002      	beq.n	8003fcc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003fc6:	4b43      	ldr	r3, [pc, #268]	; (80040d4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003fc8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003fca:	e07c      	b.n	80040c6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003fcc:	4b42      	ldr	r3, [pc, #264]	; (80040d8 <HAL_RCC_GetSysClockFreq+0x140>)
 8003fce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003fd0:	e079      	b.n	80040c6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fd2:	4b42      	ldr	r3, [pc, #264]	; (80040dc <HAL_RCC_GetSysClockFreq+0x144>)
 8003fd4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003fd6:	e076      	b.n	80040c6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fda:	0c9a      	lsrs	r2, r3, #18
 8003fdc:	230f      	movs	r3, #15
 8003fde:	401a      	ands	r2, r3
 8003fe0:	4b3f      	ldr	r3, [pc, #252]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x148>)
 8003fe2:	5c9b      	ldrb	r3, [r3, r2]
 8003fe4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe8:	0d9a      	lsrs	r2, r3, #22
 8003fea:	2303      	movs	r3, #3
 8003fec:	4013      	ands	r3, r2
 8003fee:	3301      	adds	r3, #1
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ff2:	4b37      	ldr	r3, [pc, #220]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	2380      	movs	r3, #128	; 0x80
 8003ff8:	025b      	lsls	r3, r3, #9
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	d01a      	beq.n	8004034 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004000:	61bb      	str	r3, [r7, #24]
 8004002:	2300      	movs	r3, #0
 8004004:	61fb      	str	r3, [r7, #28]
 8004006:	4a35      	ldr	r2, [pc, #212]	; (80040dc <HAL_RCC_GetSysClockFreq+0x144>)
 8004008:	2300      	movs	r3, #0
 800400a:	69b8      	ldr	r0, [r7, #24]
 800400c:	69f9      	ldr	r1, [r7, #28]
 800400e:	f7fc fa6b 	bl	80004e8 <__aeabi_lmul>
 8004012:	0002      	movs	r2, r0
 8004014:	000b      	movs	r3, r1
 8004016:	0010      	movs	r0, r2
 8004018:	0019      	movs	r1, r3
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	613b      	str	r3, [r7, #16]
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f7fc fa3f 	bl	80004a8 <__aeabi_uldivmod>
 800402a:	0002      	movs	r2, r0
 800402c:	000b      	movs	r3, r1
 800402e:	0013      	movs	r3, r2
 8004030:	637b      	str	r3, [r7, #52]	; 0x34
 8004032:	e037      	b.n	80040a4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004034:	4b26      	ldr	r3, [pc, #152]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x138>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2210      	movs	r2, #16
 800403a:	4013      	ands	r3, r2
 800403c:	d01a      	beq.n	8004074 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800403e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004040:	60bb      	str	r3, [r7, #8]
 8004042:	2300      	movs	r3, #0
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	4a23      	ldr	r2, [pc, #140]	; (80040d4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004048:	2300      	movs	r3, #0
 800404a:	68b8      	ldr	r0, [r7, #8]
 800404c:	68f9      	ldr	r1, [r7, #12]
 800404e:	f7fc fa4b 	bl	80004e8 <__aeabi_lmul>
 8004052:	0002      	movs	r2, r0
 8004054:	000b      	movs	r3, r1
 8004056:	0010      	movs	r0, r2
 8004058:	0019      	movs	r1, r3
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	603b      	str	r3, [r7, #0]
 800405e:	2300      	movs	r3, #0
 8004060:	607b      	str	r3, [r7, #4]
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f7fc fa1f 	bl	80004a8 <__aeabi_uldivmod>
 800406a:	0002      	movs	r2, r0
 800406c:	000b      	movs	r3, r1
 800406e:	0013      	movs	r3, r2
 8004070:	637b      	str	r3, [r7, #52]	; 0x34
 8004072:	e017      	b.n	80040a4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004076:	0018      	movs	r0, r3
 8004078:	2300      	movs	r3, #0
 800407a:	0019      	movs	r1, r3
 800407c:	4a16      	ldr	r2, [pc, #88]	; (80040d8 <HAL_RCC_GetSysClockFreq+0x140>)
 800407e:	2300      	movs	r3, #0
 8004080:	f7fc fa32 	bl	80004e8 <__aeabi_lmul>
 8004084:	0002      	movs	r2, r0
 8004086:	000b      	movs	r3, r1
 8004088:	0010      	movs	r0, r2
 800408a:	0019      	movs	r1, r3
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	001c      	movs	r4, r3
 8004090:	2300      	movs	r3, #0
 8004092:	001d      	movs	r5, r3
 8004094:	0022      	movs	r2, r4
 8004096:	002b      	movs	r3, r5
 8004098:	f7fc fa06 	bl	80004a8 <__aeabi_uldivmod>
 800409c:	0002      	movs	r2, r0
 800409e:	000b      	movs	r3, r1
 80040a0:	0013      	movs	r3, r2
 80040a2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80040a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040a6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80040a8:	e00d      	b.n	80040c6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80040aa:	4b09      	ldr	r3, [pc, #36]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x138>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	0b5b      	lsrs	r3, r3, #13
 80040b0:	2207      	movs	r2, #7
 80040b2:	4013      	ands	r3, r2
 80040b4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80040b6:	6a3b      	ldr	r3, [r7, #32]
 80040b8:	3301      	adds	r3, #1
 80040ba:	2280      	movs	r2, #128	; 0x80
 80040bc:	0212      	lsls	r2, r2, #8
 80040be:	409a      	lsls	r2, r3
 80040c0:	0013      	movs	r3, r2
 80040c2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80040c4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80040c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80040c8:	0018      	movs	r0, r3
 80040ca:	46bd      	mov	sp, r7
 80040cc:	b00e      	add	sp, #56	; 0x38
 80040ce:	bdb0      	pop	{r4, r5, r7, pc}
 80040d0:	40021000 	.word	0x40021000
 80040d4:	003d0900 	.word	0x003d0900
 80040d8:	00f42400 	.word	0x00f42400
 80040dc:	007a1200 	.word	0x007a1200
 80040e0:	08008000 	.word	0x08008000

080040e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040e8:	4b02      	ldr	r3, [pc, #8]	; (80040f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80040ea:	681b      	ldr	r3, [r3, #0]
}
 80040ec:	0018      	movs	r0, r3
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	46c0      	nop			; (mov r8, r8)
 80040f4:	20000000 	.word	0x20000000

080040f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040fc:	f7ff fff2 	bl	80040e4 <HAL_RCC_GetHCLKFreq>
 8004100:	0001      	movs	r1, r0
 8004102:	4b06      	ldr	r3, [pc, #24]	; (800411c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	0a1b      	lsrs	r3, r3, #8
 8004108:	2207      	movs	r2, #7
 800410a:	4013      	ands	r3, r2
 800410c:	4a04      	ldr	r2, [pc, #16]	; (8004120 <HAL_RCC_GetPCLK1Freq+0x28>)
 800410e:	5cd3      	ldrb	r3, [r2, r3]
 8004110:	40d9      	lsrs	r1, r3
 8004112:	000b      	movs	r3, r1
}
 8004114:	0018      	movs	r0, r3
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	46c0      	nop			; (mov r8, r8)
 800411c:	40021000 	.word	0x40021000
 8004120:	08007ff8 	.word	0x08007ff8

08004124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004128:	f7ff ffdc 	bl	80040e4 <HAL_RCC_GetHCLKFreq>
 800412c:	0001      	movs	r1, r0
 800412e:	4b06      	ldr	r3, [pc, #24]	; (8004148 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	0adb      	lsrs	r3, r3, #11
 8004134:	2207      	movs	r2, #7
 8004136:	4013      	ands	r3, r2
 8004138:	4a04      	ldr	r2, [pc, #16]	; (800414c <HAL_RCC_GetPCLK2Freq+0x28>)
 800413a:	5cd3      	ldrb	r3, [r2, r3]
 800413c:	40d9      	lsrs	r1, r3
 800413e:	000b      	movs	r3, r1
}
 8004140:	0018      	movs	r0, r3
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	46c0      	nop			; (mov r8, r8)
 8004148:	40021000 	.word	0x40021000
 800414c:	08007ff8 	.word	0x08007ff8

08004150 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004158:	2317      	movs	r3, #23
 800415a:	18fb      	adds	r3, r7, r3
 800415c:	2200      	movs	r2, #0
 800415e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2220      	movs	r2, #32
 8004166:	4013      	ands	r3, r2
 8004168:	d106      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	2380      	movs	r3, #128	; 0x80
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	4013      	ands	r3, r2
 8004174:	d100      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8004176:	e104      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004178:	4bb1      	ldr	r3, [pc, #708]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800417a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800417c:	2380      	movs	r3, #128	; 0x80
 800417e:	055b      	lsls	r3, r3, #21
 8004180:	4013      	ands	r3, r2
 8004182:	d10a      	bne.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004184:	4bae      	ldr	r3, [pc, #696]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004186:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004188:	4bad      	ldr	r3, [pc, #692]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800418a:	2180      	movs	r1, #128	; 0x80
 800418c:	0549      	lsls	r1, r1, #21
 800418e:	430a      	orrs	r2, r1
 8004190:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004192:	2317      	movs	r3, #23
 8004194:	18fb      	adds	r3, r7, r3
 8004196:	2201      	movs	r2, #1
 8004198:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419a:	4baa      	ldr	r3, [pc, #680]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	2380      	movs	r3, #128	; 0x80
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	4013      	ands	r3, r2
 80041a4:	d11a      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041a6:	4ba7      	ldr	r3, [pc, #668]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	4ba6      	ldr	r3, [pc, #664]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041ac:	2180      	movs	r1, #128	; 0x80
 80041ae:	0049      	lsls	r1, r1, #1
 80041b0:	430a      	orrs	r2, r1
 80041b2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041b4:	f7fe fc18 	bl	80029e8 <HAL_GetTick>
 80041b8:	0003      	movs	r3, r0
 80041ba:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041bc:	e008      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041be:	f7fe fc13 	bl	80029e8 <HAL_GetTick>
 80041c2:	0002      	movs	r2, r0
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b64      	cmp	r3, #100	; 0x64
 80041ca:	d901      	bls.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e133      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d0:	4b9c      	ldr	r3, [pc, #624]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	2380      	movs	r3, #128	; 0x80
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	4013      	ands	r3, r2
 80041da:	d0f0      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80041dc:	4b98      	ldr	r3, [pc, #608]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	23c0      	movs	r3, #192	; 0xc0
 80041e2:	039b      	lsls	r3, r3, #14
 80041e4:	4013      	ands	r3, r2
 80041e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	23c0      	movs	r3, #192	; 0xc0
 80041ee:	039b      	lsls	r3, r3, #14
 80041f0:	4013      	ands	r3, r2
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d107      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	23c0      	movs	r3, #192	; 0xc0
 80041fe:	039b      	lsls	r3, r3, #14
 8004200:	4013      	ands	r3, r2
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	429a      	cmp	r2, r3
 8004206:	d013      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	23c0      	movs	r3, #192	; 0xc0
 800420e:	029b      	lsls	r3, r3, #10
 8004210:	401a      	ands	r2, r3
 8004212:	23c0      	movs	r3, #192	; 0xc0
 8004214:	029b      	lsls	r3, r3, #10
 8004216:	429a      	cmp	r2, r3
 8004218:	d10a      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800421a:	4b89      	ldr	r3, [pc, #548]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	2380      	movs	r3, #128	; 0x80
 8004220:	029b      	lsls	r3, r3, #10
 8004222:	401a      	ands	r2, r3
 8004224:	2380      	movs	r3, #128	; 0x80
 8004226:	029b      	lsls	r3, r3, #10
 8004228:	429a      	cmp	r2, r3
 800422a:	d101      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e103      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004230:	4b83      	ldr	r3, [pc, #524]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004232:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004234:	23c0      	movs	r3, #192	; 0xc0
 8004236:	029b      	lsls	r3, r3, #10
 8004238:	4013      	ands	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d049      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	23c0      	movs	r3, #192	; 0xc0
 8004248:	029b      	lsls	r3, r3, #10
 800424a:	4013      	ands	r3, r2
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	429a      	cmp	r2, r3
 8004250:	d004      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2220      	movs	r2, #32
 8004258:	4013      	ands	r3, r2
 800425a:	d10d      	bne.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689a      	ldr	r2, [r3, #8]
 8004260:	23c0      	movs	r3, #192	; 0xc0
 8004262:	029b      	lsls	r3, r3, #10
 8004264:	4013      	ands	r3, r2
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	429a      	cmp	r2, r3
 800426a:	d034      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	2380      	movs	r3, #128	; 0x80
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	4013      	ands	r3, r2
 8004276:	d02e      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004278:	4b71      	ldr	r3, [pc, #452]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800427a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800427c:	4a72      	ldr	r2, [pc, #456]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800427e:	4013      	ands	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004282:	4b6f      	ldr	r3, [pc, #444]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004284:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004286:	4b6e      	ldr	r3, [pc, #440]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004288:	2180      	movs	r1, #128	; 0x80
 800428a:	0309      	lsls	r1, r1, #12
 800428c:	430a      	orrs	r2, r1
 800428e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004290:	4b6b      	ldr	r3, [pc, #428]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004292:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004294:	4b6a      	ldr	r3, [pc, #424]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004296:	496d      	ldr	r1, [pc, #436]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004298:	400a      	ands	r2, r1
 800429a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800429c:	4b68      	ldr	r3, [pc, #416]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	2380      	movs	r3, #128	; 0x80
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	4013      	ands	r3, r2
 80042aa:	d014      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ac:	f7fe fb9c 	bl	80029e8 <HAL_GetTick>
 80042b0:	0003      	movs	r3, r0
 80042b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042b4:	e009      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042b6:	f7fe fb97 	bl	80029e8 <HAL_GetTick>
 80042ba:	0002      	movs	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	4a63      	ldr	r2, [pc, #396]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d901      	bls.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e0b6      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042ca:	4b5d      	ldr	r3, [pc, #372]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80042cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042ce:	2380      	movs	r3, #128	; 0x80
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4013      	ands	r3, r2
 80042d4:	d0ef      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	2380      	movs	r3, #128	; 0x80
 80042dc:	011b      	lsls	r3, r3, #4
 80042de:	4013      	ands	r3, r2
 80042e0:	d01f      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689a      	ldr	r2, [r3, #8]
 80042e6:	23c0      	movs	r3, #192	; 0xc0
 80042e8:	029b      	lsls	r3, r3, #10
 80042ea:	401a      	ands	r2, r3
 80042ec:	23c0      	movs	r3, #192	; 0xc0
 80042ee:	029b      	lsls	r3, r3, #10
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d10c      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80042f4:	4b52      	ldr	r3, [pc, #328]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a56      	ldr	r2, [pc, #344]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80042fa:	4013      	ands	r3, r2
 80042fc:	0019      	movs	r1, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	23c0      	movs	r3, #192	; 0xc0
 8004304:	039b      	lsls	r3, r3, #14
 8004306:	401a      	ands	r2, r3
 8004308:	4b4d      	ldr	r3, [pc, #308]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800430a:	430a      	orrs	r2, r1
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	4b4c      	ldr	r3, [pc, #304]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004310:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	689a      	ldr	r2, [r3, #8]
 8004316:	23c0      	movs	r3, #192	; 0xc0
 8004318:	029b      	lsls	r3, r3, #10
 800431a:	401a      	ands	r2, r3
 800431c:	4b48      	ldr	r3, [pc, #288]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800431e:	430a      	orrs	r2, r1
 8004320:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2220      	movs	r2, #32
 8004328:	4013      	ands	r3, r2
 800432a:	d01f      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	23c0      	movs	r3, #192	; 0xc0
 8004332:	029b      	lsls	r3, r3, #10
 8004334:	401a      	ands	r2, r3
 8004336:	23c0      	movs	r3, #192	; 0xc0
 8004338:	029b      	lsls	r3, r3, #10
 800433a:	429a      	cmp	r2, r3
 800433c:	d10c      	bne.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800433e:	4b40      	ldr	r3, [pc, #256]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a44      	ldr	r2, [pc, #272]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004344:	4013      	ands	r3, r2
 8004346:	0019      	movs	r1, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	23c0      	movs	r3, #192	; 0xc0
 800434e:	039b      	lsls	r3, r3, #14
 8004350:	401a      	ands	r2, r3
 8004352:	4b3b      	ldr	r3, [pc, #236]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004354:	430a      	orrs	r2, r1
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	4b39      	ldr	r3, [pc, #228]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800435a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	23c0      	movs	r3, #192	; 0xc0
 8004362:	029b      	lsls	r3, r3, #10
 8004364:	401a      	ands	r2, r3
 8004366:	4b36      	ldr	r3, [pc, #216]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004368:	430a      	orrs	r2, r1
 800436a:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800436c:	2317      	movs	r3, #23
 800436e:	18fb      	adds	r3, r7, r3
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d105      	bne.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004376:	4b32      	ldr	r3, [pc, #200]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004378:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800437a:	4b31      	ldr	r3, [pc, #196]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800437c:	4936      	ldr	r1, [pc, #216]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800437e:	400a      	ands	r2, r1
 8004380:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2201      	movs	r2, #1
 8004388:	4013      	ands	r3, r2
 800438a:	d009      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800438c:	4b2c      	ldr	r3, [pc, #176]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800438e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004390:	2203      	movs	r2, #3
 8004392:	4393      	bics	r3, r2
 8004394:	0019      	movs	r1, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	4b29      	ldr	r3, [pc, #164]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800439c:	430a      	orrs	r2, r1
 800439e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2202      	movs	r2, #2
 80043a6:	4013      	ands	r3, r2
 80043a8:	d009      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043aa:	4b25      	ldr	r3, [pc, #148]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80043ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ae:	220c      	movs	r2, #12
 80043b0:	4393      	bics	r3, r2
 80043b2:	0019      	movs	r1, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691a      	ldr	r2, [r3, #16]
 80043b8:	4b21      	ldr	r3, [pc, #132]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80043ba:	430a      	orrs	r2, r1
 80043bc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2204      	movs	r2, #4
 80043c4:	4013      	ands	r3, r2
 80043c6:	d009      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043c8:	4b1d      	ldr	r3, [pc, #116]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80043ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043cc:	4a23      	ldr	r2, [pc, #140]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80043ce:	4013      	ands	r3, r2
 80043d0:	0019      	movs	r1, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	695a      	ldr	r2, [r3, #20]
 80043d6:	4b1a      	ldr	r3, [pc, #104]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80043d8:	430a      	orrs	r2, r1
 80043da:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2208      	movs	r2, #8
 80043e2:	4013      	ands	r3, r2
 80043e4:	d009      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043e6:	4b16      	ldr	r3, [pc, #88]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80043e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ea:	4a1d      	ldr	r2, [pc, #116]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80043ec:	4013      	ands	r3, r2
 80043ee:	0019      	movs	r1, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	699a      	ldr	r2, [r3, #24]
 80043f4:	4b12      	ldr	r3, [pc, #72]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80043f6:	430a      	orrs	r2, r1
 80043f8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2240      	movs	r2, #64	; 0x40
 8004400:	4013      	ands	r3, r2
 8004402:	d009      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004404:	4b0e      	ldr	r3, [pc, #56]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004408:	4a16      	ldr	r2, [pc, #88]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800440a:	4013      	ands	r3, r2
 800440c:	0019      	movs	r1, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1a      	ldr	r2, [r3, #32]
 8004412:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004414:	430a      	orrs	r2, r1
 8004416:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2280      	movs	r2, #128	; 0x80
 800441e:	4013      	ands	r3, r2
 8004420:	d009      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004422:	4b07      	ldr	r3, [pc, #28]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004426:	4a10      	ldr	r2, [pc, #64]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004428:	4013      	ands	r3, r2
 800442a:	0019      	movs	r1, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	69da      	ldr	r2, [r3, #28]
 8004430:	4b03      	ldr	r3, [pc, #12]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004432:	430a      	orrs	r2, r1
 8004434:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	0018      	movs	r0, r3
 800443a:	46bd      	mov	sp, r7
 800443c:	b006      	add	sp, #24
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40021000 	.word	0x40021000
 8004444:	40007000 	.word	0x40007000
 8004448:	fffcffff 	.word	0xfffcffff
 800444c:	fff7ffff 	.word	0xfff7ffff
 8004450:	00001388 	.word	0x00001388
 8004454:	ffcfffff 	.word	0xffcfffff
 8004458:	efffffff 	.word	0xefffffff
 800445c:	fffff3ff 	.word	0xfffff3ff
 8004460:	ffffcfff 	.word	0xffffcfff
 8004464:	fbffffff 	.word	0xfbffffff
 8004468:	fff3ffff 	.word	0xfff3ffff

0800446c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e044      	b.n	8004508 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004482:	2b00      	cmp	r3, #0
 8004484:	d107      	bne.n	8004496 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2278      	movs	r2, #120	; 0x78
 800448a:	2100      	movs	r1, #0
 800448c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	0018      	movs	r0, r3
 8004492:	f7fe f8fb 	bl	800268c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2224      	movs	r2, #36	; 0x24
 800449a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2101      	movs	r1, #1
 80044a8:	438a      	bics	r2, r1
 80044aa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	0018      	movs	r0, r3
 80044b0:	f000 f8d0 	bl	8004654 <UART_SetConfig>
 80044b4:	0003      	movs	r3, r0
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d101      	bne.n	80044be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e024      	b.n	8004508 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	0018      	movs	r0, r3
 80044ca:	f000 fb47 	bl	8004b5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	490d      	ldr	r1, [pc, #52]	; (8004510 <HAL_UART_Init+0xa4>)
 80044da:	400a      	ands	r2, r1
 80044dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	212a      	movs	r1, #42	; 0x2a
 80044ea:	438a      	bics	r2, r1
 80044ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2101      	movs	r1, #1
 80044fa:	430a      	orrs	r2, r1
 80044fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	0018      	movs	r0, r3
 8004502:	f000 fbdf 	bl	8004cc4 <UART_CheckIdleState>
 8004506:	0003      	movs	r3, r0
}
 8004508:	0018      	movs	r0, r3
 800450a:	46bd      	mov	sp, r7
 800450c:	b002      	add	sp, #8
 800450e:	bd80      	pop	{r7, pc}
 8004510:	ffffb7ff 	.word	0xffffb7ff

08004514 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b08a      	sub	sp, #40	; 0x28
 8004518:	af02      	add	r7, sp, #8
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	603b      	str	r3, [r7, #0]
 8004520:	1dbb      	adds	r3, r7, #6
 8004522:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004528:	2b20      	cmp	r3, #32
 800452a:	d000      	beq.n	800452e <HAL_UART_Transmit+0x1a>
 800452c:	e08c      	b.n	8004648 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <HAL_UART_Transmit+0x28>
 8004534:	1dbb      	adds	r3, r7, #6
 8004536:	881b      	ldrh	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e084      	b.n	800464a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	2380      	movs	r3, #128	; 0x80
 8004546:	015b      	lsls	r3, r3, #5
 8004548:	429a      	cmp	r2, r3
 800454a:	d109      	bne.n	8004560 <HAL_UART_Transmit+0x4c>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d105      	bne.n	8004560 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2201      	movs	r2, #1
 8004558:	4013      	ands	r3, r2
 800455a:	d001      	beq.n	8004560 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e074      	b.n	800464a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2284      	movs	r2, #132	; 0x84
 8004564:	2100      	movs	r1, #0
 8004566:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2221      	movs	r2, #33	; 0x21
 800456c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800456e:	f7fe fa3b 	bl	80029e8 <HAL_GetTick>
 8004572:	0003      	movs	r3, r0
 8004574:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	1dba      	adds	r2, r7, #6
 800457a:	2150      	movs	r1, #80	; 0x50
 800457c:	8812      	ldrh	r2, [r2, #0]
 800457e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	1dba      	adds	r2, r7, #6
 8004584:	2152      	movs	r1, #82	; 0x52
 8004586:	8812      	ldrh	r2, [r2, #0]
 8004588:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	689a      	ldr	r2, [r3, #8]
 800458e:	2380      	movs	r3, #128	; 0x80
 8004590:	015b      	lsls	r3, r3, #5
 8004592:	429a      	cmp	r2, r3
 8004594:	d108      	bne.n	80045a8 <HAL_UART_Transmit+0x94>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d104      	bne.n	80045a8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800459e:	2300      	movs	r3, #0
 80045a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	61bb      	str	r3, [r7, #24]
 80045a6:	e003      	b.n	80045b0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045ac:	2300      	movs	r3, #0
 80045ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045b0:	e02f      	b.n	8004612 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	0013      	movs	r3, r2
 80045bc:	2200      	movs	r2, #0
 80045be:	2180      	movs	r1, #128	; 0x80
 80045c0:	f000 fc28 	bl	8004e14 <UART_WaitOnFlagUntilTimeout>
 80045c4:	1e03      	subs	r3, r0, #0
 80045c6:	d004      	beq.n	80045d2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2220      	movs	r2, #32
 80045cc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e03b      	b.n	800464a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10b      	bne.n	80045f0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	001a      	movs	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	05d2      	lsls	r2, r2, #23
 80045e4:	0dd2      	lsrs	r2, r2, #23
 80045e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	3302      	adds	r3, #2
 80045ec:	61bb      	str	r3, [r7, #24]
 80045ee:	e007      	b.n	8004600 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	781a      	ldrb	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	3301      	adds	r3, #1
 80045fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2252      	movs	r2, #82	; 0x52
 8004604:	5a9b      	ldrh	r3, [r3, r2]
 8004606:	b29b      	uxth	r3, r3
 8004608:	3b01      	subs	r3, #1
 800460a:	b299      	uxth	r1, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2252      	movs	r2, #82	; 0x52
 8004610:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2252      	movs	r2, #82	; 0x52
 8004616:	5a9b      	ldrh	r3, [r3, r2]
 8004618:	b29b      	uxth	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1c9      	bne.n	80045b2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	0013      	movs	r3, r2
 8004628:	2200      	movs	r2, #0
 800462a:	2140      	movs	r1, #64	; 0x40
 800462c:	f000 fbf2 	bl	8004e14 <UART_WaitOnFlagUntilTimeout>
 8004630:	1e03      	subs	r3, r0, #0
 8004632:	d004      	beq.n	800463e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2220      	movs	r2, #32
 8004638:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e005      	b.n	800464a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2220      	movs	r2, #32
 8004642:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004644:	2300      	movs	r3, #0
 8004646:	e000      	b.n	800464a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004648:	2302      	movs	r3, #2
  }
}
 800464a:	0018      	movs	r0, r3
 800464c:	46bd      	mov	sp, r7
 800464e:	b008      	add	sp, #32
 8004650:	bd80      	pop	{r7, pc}
	...

08004654 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004654:	b5b0      	push	{r4, r5, r7, lr}
 8004656:	b08e      	sub	sp, #56	; 0x38
 8004658:	af00      	add	r7, sp, #0
 800465a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800465c:	231a      	movs	r3, #26
 800465e:	2218      	movs	r2, #24
 8004660:	189b      	adds	r3, r3, r2
 8004662:	19db      	adds	r3, r3, r7
 8004664:	2200      	movs	r2, #0
 8004666:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	689a      	ldr	r2, [r3, #8]
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	431a      	orrs	r2, r3
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	431a      	orrs	r2, r3
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	69db      	ldr	r3, [r3, #28]
 800467c:	4313      	orrs	r3, r2
 800467e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4ac6      	ldr	r2, [pc, #792]	; (80049a0 <UART_SetConfig+0x34c>)
 8004688:	4013      	ands	r3, r2
 800468a:	0019      	movs	r1, r3
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004692:	430a      	orrs	r2, r1
 8004694:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	4ac1      	ldr	r2, [pc, #772]	; (80049a4 <UART_SetConfig+0x350>)
 800469e:	4013      	ands	r3, r2
 80046a0:	0019      	movs	r1, r3
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4abb      	ldr	r2, [pc, #748]	; (80049a8 <UART_SetConfig+0x354>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d004      	beq.n	80046c8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046c4:	4313      	orrs	r3, r2
 80046c6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	4ab7      	ldr	r2, [pc, #732]	; (80049ac <UART_SetConfig+0x358>)
 80046d0:	4013      	ands	r3, r2
 80046d2:	0019      	movs	r1, r3
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046da:	430a      	orrs	r2, r1
 80046dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4ab3      	ldr	r2, [pc, #716]	; (80049b0 <UART_SetConfig+0x35c>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d131      	bne.n	800474c <UART_SetConfig+0xf8>
 80046e8:	4bb2      	ldr	r3, [pc, #712]	; (80049b4 <UART_SetConfig+0x360>)
 80046ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ec:	2203      	movs	r2, #3
 80046ee:	4013      	ands	r3, r2
 80046f0:	2b03      	cmp	r3, #3
 80046f2:	d01d      	beq.n	8004730 <UART_SetConfig+0xdc>
 80046f4:	d823      	bhi.n	800473e <UART_SetConfig+0xea>
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d00c      	beq.n	8004714 <UART_SetConfig+0xc0>
 80046fa:	d820      	bhi.n	800473e <UART_SetConfig+0xea>
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d002      	beq.n	8004706 <UART_SetConfig+0xb2>
 8004700:	2b01      	cmp	r3, #1
 8004702:	d00e      	beq.n	8004722 <UART_SetConfig+0xce>
 8004704:	e01b      	b.n	800473e <UART_SetConfig+0xea>
 8004706:	231b      	movs	r3, #27
 8004708:	2218      	movs	r2, #24
 800470a:	189b      	adds	r3, r3, r2
 800470c:	19db      	adds	r3, r3, r7
 800470e:	2201      	movs	r2, #1
 8004710:	701a      	strb	r2, [r3, #0]
 8004712:	e09c      	b.n	800484e <UART_SetConfig+0x1fa>
 8004714:	231b      	movs	r3, #27
 8004716:	2218      	movs	r2, #24
 8004718:	189b      	adds	r3, r3, r2
 800471a:	19db      	adds	r3, r3, r7
 800471c:	2202      	movs	r2, #2
 800471e:	701a      	strb	r2, [r3, #0]
 8004720:	e095      	b.n	800484e <UART_SetConfig+0x1fa>
 8004722:	231b      	movs	r3, #27
 8004724:	2218      	movs	r2, #24
 8004726:	189b      	adds	r3, r3, r2
 8004728:	19db      	adds	r3, r3, r7
 800472a:	2204      	movs	r2, #4
 800472c:	701a      	strb	r2, [r3, #0]
 800472e:	e08e      	b.n	800484e <UART_SetConfig+0x1fa>
 8004730:	231b      	movs	r3, #27
 8004732:	2218      	movs	r2, #24
 8004734:	189b      	adds	r3, r3, r2
 8004736:	19db      	adds	r3, r3, r7
 8004738:	2208      	movs	r2, #8
 800473a:	701a      	strb	r2, [r3, #0]
 800473c:	e087      	b.n	800484e <UART_SetConfig+0x1fa>
 800473e:	231b      	movs	r3, #27
 8004740:	2218      	movs	r2, #24
 8004742:	189b      	adds	r3, r3, r2
 8004744:	19db      	adds	r3, r3, r7
 8004746:	2210      	movs	r2, #16
 8004748:	701a      	strb	r2, [r3, #0]
 800474a:	e080      	b.n	800484e <UART_SetConfig+0x1fa>
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a99      	ldr	r2, [pc, #612]	; (80049b8 <UART_SetConfig+0x364>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d131      	bne.n	80047ba <UART_SetConfig+0x166>
 8004756:	4b97      	ldr	r3, [pc, #604]	; (80049b4 <UART_SetConfig+0x360>)
 8004758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800475a:	220c      	movs	r2, #12
 800475c:	4013      	ands	r3, r2
 800475e:	2b0c      	cmp	r3, #12
 8004760:	d01d      	beq.n	800479e <UART_SetConfig+0x14a>
 8004762:	d823      	bhi.n	80047ac <UART_SetConfig+0x158>
 8004764:	2b08      	cmp	r3, #8
 8004766:	d00c      	beq.n	8004782 <UART_SetConfig+0x12e>
 8004768:	d820      	bhi.n	80047ac <UART_SetConfig+0x158>
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <UART_SetConfig+0x120>
 800476e:	2b04      	cmp	r3, #4
 8004770:	d00e      	beq.n	8004790 <UART_SetConfig+0x13c>
 8004772:	e01b      	b.n	80047ac <UART_SetConfig+0x158>
 8004774:	231b      	movs	r3, #27
 8004776:	2218      	movs	r2, #24
 8004778:	189b      	adds	r3, r3, r2
 800477a:	19db      	adds	r3, r3, r7
 800477c:	2200      	movs	r2, #0
 800477e:	701a      	strb	r2, [r3, #0]
 8004780:	e065      	b.n	800484e <UART_SetConfig+0x1fa>
 8004782:	231b      	movs	r3, #27
 8004784:	2218      	movs	r2, #24
 8004786:	189b      	adds	r3, r3, r2
 8004788:	19db      	adds	r3, r3, r7
 800478a:	2202      	movs	r2, #2
 800478c:	701a      	strb	r2, [r3, #0]
 800478e:	e05e      	b.n	800484e <UART_SetConfig+0x1fa>
 8004790:	231b      	movs	r3, #27
 8004792:	2218      	movs	r2, #24
 8004794:	189b      	adds	r3, r3, r2
 8004796:	19db      	adds	r3, r3, r7
 8004798:	2204      	movs	r2, #4
 800479a:	701a      	strb	r2, [r3, #0]
 800479c:	e057      	b.n	800484e <UART_SetConfig+0x1fa>
 800479e:	231b      	movs	r3, #27
 80047a0:	2218      	movs	r2, #24
 80047a2:	189b      	adds	r3, r3, r2
 80047a4:	19db      	adds	r3, r3, r7
 80047a6:	2208      	movs	r2, #8
 80047a8:	701a      	strb	r2, [r3, #0]
 80047aa:	e050      	b.n	800484e <UART_SetConfig+0x1fa>
 80047ac:	231b      	movs	r3, #27
 80047ae:	2218      	movs	r2, #24
 80047b0:	189b      	adds	r3, r3, r2
 80047b2:	19db      	adds	r3, r3, r7
 80047b4:	2210      	movs	r2, #16
 80047b6:	701a      	strb	r2, [r3, #0]
 80047b8:	e049      	b.n	800484e <UART_SetConfig+0x1fa>
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a7a      	ldr	r2, [pc, #488]	; (80049a8 <UART_SetConfig+0x354>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d13e      	bne.n	8004842 <UART_SetConfig+0x1ee>
 80047c4:	4b7b      	ldr	r3, [pc, #492]	; (80049b4 <UART_SetConfig+0x360>)
 80047c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047c8:	23c0      	movs	r3, #192	; 0xc0
 80047ca:	011b      	lsls	r3, r3, #4
 80047cc:	4013      	ands	r3, r2
 80047ce:	22c0      	movs	r2, #192	; 0xc0
 80047d0:	0112      	lsls	r2, r2, #4
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d027      	beq.n	8004826 <UART_SetConfig+0x1d2>
 80047d6:	22c0      	movs	r2, #192	; 0xc0
 80047d8:	0112      	lsls	r2, r2, #4
 80047da:	4293      	cmp	r3, r2
 80047dc:	d82a      	bhi.n	8004834 <UART_SetConfig+0x1e0>
 80047de:	2280      	movs	r2, #128	; 0x80
 80047e0:	0112      	lsls	r2, r2, #4
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d011      	beq.n	800480a <UART_SetConfig+0x1b6>
 80047e6:	2280      	movs	r2, #128	; 0x80
 80047e8:	0112      	lsls	r2, r2, #4
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d822      	bhi.n	8004834 <UART_SetConfig+0x1e0>
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d004      	beq.n	80047fc <UART_SetConfig+0x1a8>
 80047f2:	2280      	movs	r2, #128	; 0x80
 80047f4:	00d2      	lsls	r2, r2, #3
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d00e      	beq.n	8004818 <UART_SetConfig+0x1c4>
 80047fa:	e01b      	b.n	8004834 <UART_SetConfig+0x1e0>
 80047fc:	231b      	movs	r3, #27
 80047fe:	2218      	movs	r2, #24
 8004800:	189b      	adds	r3, r3, r2
 8004802:	19db      	adds	r3, r3, r7
 8004804:	2200      	movs	r2, #0
 8004806:	701a      	strb	r2, [r3, #0]
 8004808:	e021      	b.n	800484e <UART_SetConfig+0x1fa>
 800480a:	231b      	movs	r3, #27
 800480c:	2218      	movs	r2, #24
 800480e:	189b      	adds	r3, r3, r2
 8004810:	19db      	adds	r3, r3, r7
 8004812:	2202      	movs	r2, #2
 8004814:	701a      	strb	r2, [r3, #0]
 8004816:	e01a      	b.n	800484e <UART_SetConfig+0x1fa>
 8004818:	231b      	movs	r3, #27
 800481a:	2218      	movs	r2, #24
 800481c:	189b      	adds	r3, r3, r2
 800481e:	19db      	adds	r3, r3, r7
 8004820:	2204      	movs	r2, #4
 8004822:	701a      	strb	r2, [r3, #0]
 8004824:	e013      	b.n	800484e <UART_SetConfig+0x1fa>
 8004826:	231b      	movs	r3, #27
 8004828:	2218      	movs	r2, #24
 800482a:	189b      	adds	r3, r3, r2
 800482c:	19db      	adds	r3, r3, r7
 800482e:	2208      	movs	r2, #8
 8004830:	701a      	strb	r2, [r3, #0]
 8004832:	e00c      	b.n	800484e <UART_SetConfig+0x1fa>
 8004834:	231b      	movs	r3, #27
 8004836:	2218      	movs	r2, #24
 8004838:	189b      	adds	r3, r3, r2
 800483a:	19db      	adds	r3, r3, r7
 800483c:	2210      	movs	r2, #16
 800483e:	701a      	strb	r2, [r3, #0]
 8004840:	e005      	b.n	800484e <UART_SetConfig+0x1fa>
 8004842:	231b      	movs	r3, #27
 8004844:	2218      	movs	r2, #24
 8004846:	189b      	adds	r3, r3, r2
 8004848:	19db      	adds	r3, r3, r7
 800484a:	2210      	movs	r2, #16
 800484c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a55      	ldr	r2, [pc, #340]	; (80049a8 <UART_SetConfig+0x354>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d000      	beq.n	800485a <UART_SetConfig+0x206>
 8004858:	e084      	b.n	8004964 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800485a:	231b      	movs	r3, #27
 800485c:	2218      	movs	r2, #24
 800485e:	189b      	adds	r3, r3, r2
 8004860:	19db      	adds	r3, r3, r7
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	2b08      	cmp	r3, #8
 8004866:	d01d      	beq.n	80048a4 <UART_SetConfig+0x250>
 8004868:	dc20      	bgt.n	80048ac <UART_SetConfig+0x258>
 800486a:	2b04      	cmp	r3, #4
 800486c:	d015      	beq.n	800489a <UART_SetConfig+0x246>
 800486e:	dc1d      	bgt.n	80048ac <UART_SetConfig+0x258>
 8004870:	2b00      	cmp	r3, #0
 8004872:	d002      	beq.n	800487a <UART_SetConfig+0x226>
 8004874:	2b02      	cmp	r3, #2
 8004876:	d005      	beq.n	8004884 <UART_SetConfig+0x230>
 8004878:	e018      	b.n	80048ac <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800487a:	f7ff fc3d 	bl	80040f8 <HAL_RCC_GetPCLK1Freq>
 800487e:	0003      	movs	r3, r0
 8004880:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004882:	e01c      	b.n	80048be <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004884:	4b4b      	ldr	r3, [pc, #300]	; (80049b4 <UART_SetConfig+0x360>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2210      	movs	r2, #16
 800488a:	4013      	ands	r3, r2
 800488c:	d002      	beq.n	8004894 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800488e:	4b4b      	ldr	r3, [pc, #300]	; (80049bc <UART_SetConfig+0x368>)
 8004890:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004892:	e014      	b.n	80048be <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8004894:	4b4a      	ldr	r3, [pc, #296]	; (80049c0 <UART_SetConfig+0x36c>)
 8004896:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004898:	e011      	b.n	80048be <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800489a:	f7ff fb7d 	bl	8003f98 <HAL_RCC_GetSysClockFreq>
 800489e:	0003      	movs	r3, r0
 80048a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048a2:	e00c      	b.n	80048be <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048a4:	2380      	movs	r3, #128	; 0x80
 80048a6:	021b      	lsls	r3, r3, #8
 80048a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048aa:	e008      	b.n	80048be <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80048b0:	231a      	movs	r3, #26
 80048b2:	2218      	movs	r2, #24
 80048b4:	189b      	adds	r3, r3, r2
 80048b6:	19db      	adds	r3, r3, r7
 80048b8:	2201      	movs	r2, #1
 80048ba:	701a      	strb	r2, [r3, #0]
        break;
 80048bc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d100      	bne.n	80048c6 <UART_SetConfig+0x272>
 80048c4:	e132      	b.n	8004b2c <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	0013      	movs	r3, r2
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	189b      	adds	r3, r3, r2
 80048d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d305      	bcc.n	80048e2 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048de:	429a      	cmp	r2, r3
 80048e0:	d906      	bls.n	80048f0 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 80048e2:	231a      	movs	r3, #26
 80048e4:	2218      	movs	r2, #24
 80048e6:	189b      	adds	r3, r3, r2
 80048e8:	19db      	adds	r3, r3, r7
 80048ea:	2201      	movs	r2, #1
 80048ec:	701a      	strb	r2, [r3, #0]
 80048ee:	e11d      	b.n	8004b2c <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80048f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f2:	613b      	str	r3, [r7, #16]
 80048f4:	2300      	movs	r3, #0
 80048f6:	617b      	str	r3, [r7, #20]
 80048f8:	6939      	ldr	r1, [r7, #16]
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	000b      	movs	r3, r1
 80048fe:	0e1b      	lsrs	r3, r3, #24
 8004900:	0010      	movs	r0, r2
 8004902:	0205      	lsls	r5, r0, #8
 8004904:	431d      	orrs	r5, r3
 8004906:	000b      	movs	r3, r1
 8004908:	021c      	lsls	r4, r3, #8
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	085b      	lsrs	r3, r3, #1
 8004910:	60bb      	str	r3, [r7, #8]
 8004912:	2300      	movs	r3, #0
 8004914:	60fb      	str	r3, [r7, #12]
 8004916:	68b8      	ldr	r0, [r7, #8]
 8004918:	68f9      	ldr	r1, [r7, #12]
 800491a:	1900      	adds	r0, r0, r4
 800491c:	4169      	adcs	r1, r5
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	603b      	str	r3, [r7, #0]
 8004924:	2300      	movs	r3, #0
 8004926:	607b      	str	r3, [r7, #4]
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f7fb fdbc 	bl	80004a8 <__aeabi_uldivmod>
 8004930:	0002      	movs	r2, r0
 8004932:	000b      	movs	r3, r1
 8004934:	0013      	movs	r3, r2
 8004936:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004938:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800493a:	23c0      	movs	r3, #192	; 0xc0
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	429a      	cmp	r2, r3
 8004940:	d309      	bcc.n	8004956 <UART_SetConfig+0x302>
 8004942:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004944:	2380      	movs	r3, #128	; 0x80
 8004946:	035b      	lsls	r3, r3, #13
 8004948:	429a      	cmp	r2, r3
 800494a:	d204      	bcs.n	8004956 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004952:	60da      	str	r2, [r3, #12]
 8004954:	e0ea      	b.n	8004b2c <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8004956:	231a      	movs	r3, #26
 8004958:	2218      	movs	r2, #24
 800495a:	189b      	adds	r3, r3, r2
 800495c:	19db      	adds	r3, r3, r7
 800495e:	2201      	movs	r2, #1
 8004960:	701a      	strb	r2, [r3, #0]
 8004962:	e0e3      	b.n	8004b2c <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	69da      	ldr	r2, [r3, #28]
 8004968:	2380      	movs	r3, #128	; 0x80
 800496a:	021b      	lsls	r3, r3, #8
 800496c:	429a      	cmp	r2, r3
 800496e:	d000      	beq.n	8004972 <UART_SetConfig+0x31e>
 8004970:	e085      	b.n	8004a7e <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8004972:	231b      	movs	r3, #27
 8004974:	2218      	movs	r2, #24
 8004976:	189b      	adds	r3, r3, r2
 8004978:	19db      	adds	r3, r3, r7
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	2b08      	cmp	r3, #8
 800497e:	d837      	bhi.n	80049f0 <UART_SetConfig+0x39c>
 8004980:	009a      	lsls	r2, r3, #2
 8004982:	4b10      	ldr	r3, [pc, #64]	; (80049c4 <UART_SetConfig+0x370>)
 8004984:	18d3      	adds	r3, r2, r3
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800498a:	f7ff fbb5 	bl	80040f8 <HAL_RCC_GetPCLK1Freq>
 800498e:	0003      	movs	r3, r0
 8004990:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004992:	e036      	b.n	8004a02 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004994:	f7ff fbc6 	bl	8004124 <HAL_RCC_GetPCLK2Freq>
 8004998:	0003      	movs	r3, r0
 800499a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800499c:	e031      	b.n	8004a02 <UART_SetConfig+0x3ae>
 800499e:	46c0      	nop			; (mov r8, r8)
 80049a0:	efff69f3 	.word	0xefff69f3
 80049a4:	ffffcfff 	.word	0xffffcfff
 80049a8:	40004800 	.word	0x40004800
 80049ac:	fffff4ff 	.word	0xfffff4ff
 80049b0:	40013800 	.word	0x40013800
 80049b4:	40021000 	.word	0x40021000
 80049b8:	40004400 	.word	0x40004400
 80049bc:	003d0900 	.word	0x003d0900
 80049c0:	00f42400 	.word	0x00f42400
 80049c4:	0800800c 	.word	0x0800800c
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049c8:	4b60      	ldr	r3, [pc, #384]	; (8004b4c <UART_SetConfig+0x4f8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2210      	movs	r2, #16
 80049ce:	4013      	ands	r3, r2
 80049d0:	d002      	beq.n	80049d8 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80049d2:	4b5f      	ldr	r3, [pc, #380]	; (8004b50 <UART_SetConfig+0x4fc>)
 80049d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80049d6:	e014      	b.n	8004a02 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 80049d8:	4b5e      	ldr	r3, [pc, #376]	; (8004b54 <UART_SetConfig+0x500>)
 80049da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049dc:	e011      	b.n	8004a02 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049de:	f7ff fadb 	bl	8003f98 <HAL_RCC_GetSysClockFreq>
 80049e2:	0003      	movs	r3, r0
 80049e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049e6:	e00c      	b.n	8004a02 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049e8:	2380      	movs	r3, #128	; 0x80
 80049ea:	021b      	lsls	r3, r3, #8
 80049ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049ee:	e008      	b.n	8004a02 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 80049f0:	2300      	movs	r3, #0
 80049f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80049f4:	231a      	movs	r3, #26
 80049f6:	2218      	movs	r2, #24
 80049f8:	189b      	adds	r3, r3, r2
 80049fa:	19db      	adds	r3, r3, r7
 80049fc:	2201      	movs	r2, #1
 80049fe:	701a      	strb	r2, [r3, #0]
        break;
 8004a00:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d100      	bne.n	8004a0a <UART_SetConfig+0x3b6>
 8004a08:	e090      	b.n	8004b2c <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0c:	005a      	lsls	r2, r3, #1
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	085b      	lsrs	r3, r3, #1
 8004a14:	18d2      	adds	r2, r2, r3
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	0019      	movs	r1, r3
 8004a1c:	0010      	movs	r0, r2
 8004a1e:	f7fb fb8f 	bl	8000140 <__udivsi3>
 8004a22:	0003      	movs	r3, r0
 8004a24:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a28:	2b0f      	cmp	r3, #15
 8004a2a:	d921      	bls.n	8004a70 <UART_SetConfig+0x41c>
 8004a2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a2e:	2380      	movs	r3, #128	; 0x80
 8004a30:	025b      	lsls	r3, r3, #9
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d21c      	bcs.n	8004a70 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	200e      	movs	r0, #14
 8004a3c:	2418      	movs	r4, #24
 8004a3e:	1903      	adds	r3, r0, r4
 8004a40:	19db      	adds	r3, r3, r7
 8004a42:	210f      	movs	r1, #15
 8004a44:	438a      	bics	r2, r1
 8004a46:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4a:	085b      	lsrs	r3, r3, #1
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	2207      	movs	r2, #7
 8004a50:	4013      	ands	r3, r2
 8004a52:	b299      	uxth	r1, r3
 8004a54:	1903      	adds	r3, r0, r4
 8004a56:	19db      	adds	r3, r3, r7
 8004a58:	1902      	adds	r2, r0, r4
 8004a5a:	19d2      	adds	r2, r2, r7
 8004a5c:	8812      	ldrh	r2, [r2, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	1902      	adds	r2, r0, r4
 8004a68:	19d2      	adds	r2, r2, r7
 8004a6a:	8812      	ldrh	r2, [r2, #0]
 8004a6c:	60da      	str	r2, [r3, #12]
 8004a6e:	e05d      	b.n	8004b2c <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8004a70:	231a      	movs	r3, #26
 8004a72:	2218      	movs	r2, #24
 8004a74:	189b      	adds	r3, r3, r2
 8004a76:	19db      	adds	r3, r3, r7
 8004a78:	2201      	movs	r2, #1
 8004a7a:	701a      	strb	r2, [r3, #0]
 8004a7c:	e056      	b.n	8004b2c <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a7e:	231b      	movs	r3, #27
 8004a80:	2218      	movs	r2, #24
 8004a82:	189b      	adds	r3, r3, r2
 8004a84:	19db      	adds	r3, r3, r7
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	d822      	bhi.n	8004ad2 <UART_SetConfig+0x47e>
 8004a8c:	009a      	lsls	r2, r3, #2
 8004a8e:	4b32      	ldr	r3, [pc, #200]	; (8004b58 <UART_SetConfig+0x504>)
 8004a90:	18d3      	adds	r3, r2, r3
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a96:	f7ff fb2f 	bl	80040f8 <HAL_RCC_GetPCLK1Freq>
 8004a9a:	0003      	movs	r3, r0
 8004a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a9e:	e021      	b.n	8004ae4 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004aa0:	f7ff fb40 	bl	8004124 <HAL_RCC_GetPCLK2Freq>
 8004aa4:	0003      	movs	r3, r0
 8004aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004aa8:	e01c      	b.n	8004ae4 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004aaa:	4b28      	ldr	r3, [pc, #160]	; (8004b4c <UART_SetConfig+0x4f8>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2210      	movs	r2, #16
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	d002      	beq.n	8004aba <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004ab4:	4b26      	ldr	r3, [pc, #152]	; (8004b50 <UART_SetConfig+0x4fc>)
 8004ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004ab8:	e014      	b.n	8004ae4 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8004aba:	4b26      	ldr	r3, [pc, #152]	; (8004b54 <UART_SetConfig+0x500>)
 8004abc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004abe:	e011      	b.n	8004ae4 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ac0:	f7ff fa6a 	bl	8003f98 <HAL_RCC_GetSysClockFreq>
 8004ac4:	0003      	movs	r3, r0
 8004ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ac8:	e00c      	b.n	8004ae4 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aca:	2380      	movs	r3, #128	; 0x80
 8004acc:	021b      	lsls	r3, r3, #8
 8004ace:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ad0:	e008      	b.n	8004ae4 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004ad6:	231a      	movs	r3, #26
 8004ad8:	2218      	movs	r2, #24
 8004ada:	189b      	adds	r3, r3, r2
 8004adc:	19db      	adds	r3, r3, r7
 8004ade:	2201      	movs	r2, #1
 8004ae0:	701a      	strb	r2, [r3, #0]
        break;
 8004ae2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d020      	beq.n	8004b2c <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	085a      	lsrs	r2, r3, #1
 8004af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af2:	18d2      	adds	r2, r2, r3
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	0019      	movs	r1, r3
 8004afa:	0010      	movs	r0, r2
 8004afc:	f7fb fb20 	bl	8000140 <__udivsi3>
 8004b00:	0003      	movs	r3, r0
 8004b02:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b06:	2b0f      	cmp	r3, #15
 8004b08:	d90a      	bls.n	8004b20 <UART_SetConfig+0x4cc>
 8004b0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b0c:	2380      	movs	r3, #128	; 0x80
 8004b0e:	025b      	lsls	r3, r3, #9
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d205      	bcs.n	8004b20 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	60da      	str	r2, [r3, #12]
 8004b1e:	e005      	b.n	8004b2c <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8004b20:	231a      	movs	r3, #26
 8004b22:	2218      	movs	r2, #24
 8004b24:	189b      	adds	r3, r3, r2
 8004b26:	19db      	adds	r3, r3, r7
 8004b28:	2201      	movs	r2, #1
 8004b2a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	2200      	movs	r2, #0
 8004b36:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004b38:	231a      	movs	r3, #26
 8004b3a:	2218      	movs	r2, #24
 8004b3c:	189b      	adds	r3, r3, r2
 8004b3e:	19db      	adds	r3, r3, r7
 8004b40:	781b      	ldrb	r3, [r3, #0]
}
 8004b42:	0018      	movs	r0, r3
 8004b44:	46bd      	mov	sp, r7
 8004b46:	b00e      	add	sp, #56	; 0x38
 8004b48:	bdb0      	pop	{r4, r5, r7, pc}
 8004b4a:	46c0      	nop			; (mov r8, r8)
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	003d0900 	.word	0x003d0900
 8004b54:	00f42400 	.word	0x00f42400
 8004b58:	08008030 	.word	0x08008030

08004b5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	2201      	movs	r2, #1
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	d00b      	beq.n	8004b86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	4a4a      	ldr	r2, [pc, #296]	; (8004ca0 <UART_AdvFeatureConfig+0x144>)
 8004b76:	4013      	ands	r3, r2
 8004b78:	0019      	movs	r1, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	d00b      	beq.n	8004ba8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	4a43      	ldr	r2, [pc, #268]	; (8004ca4 <UART_AdvFeatureConfig+0x148>)
 8004b98:	4013      	ands	r3, r2
 8004b9a:	0019      	movs	r1, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	2204      	movs	r2, #4
 8004bae:	4013      	ands	r3, r2
 8004bb0:	d00b      	beq.n	8004bca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	4a3b      	ldr	r2, [pc, #236]	; (8004ca8 <UART_AdvFeatureConfig+0x14c>)
 8004bba:	4013      	ands	r3, r2
 8004bbc:	0019      	movs	r1, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	2208      	movs	r2, #8
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	d00b      	beq.n	8004bec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	4a34      	ldr	r2, [pc, #208]	; (8004cac <UART_AdvFeatureConfig+0x150>)
 8004bdc:	4013      	ands	r3, r2
 8004bde:	0019      	movs	r1, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf0:	2210      	movs	r2, #16
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	d00b      	beq.n	8004c0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	4a2c      	ldr	r2, [pc, #176]	; (8004cb0 <UART_AdvFeatureConfig+0x154>)
 8004bfe:	4013      	ands	r3, r2
 8004c00:	0019      	movs	r1, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	2220      	movs	r2, #32
 8004c14:	4013      	ands	r3, r2
 8004c16:	d00b      	beq.n	8004c30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	4a25      	ldr	r2, [pc, #148]	; (8004cb4 <UART_AdvFeatureConfig+0x158>)
 8004c20:	4013      	ands	r3, r2
 8004c22:	0019      	movs	r1, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c34:	2240      	movs	r2, #64	; 0x40
 8004c36:	4013      	ands	r3, r2
 8004c38:	d01d      	beq.n	8004c76 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	4a1d      	ldr	r2, [pc, #116]	; (8004cb8 <UART_AdvFeatureConfig+0x15c>)
 8004c42:	4013      	ands	r3, r2
 8004c44:	0019      	movs	r1, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c56:	2380      	movs	r3, #128	; 0x80
 8004c58:	035b      	lsls	r3, r3, #13
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d10b      	bne.n	8004c76 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	4a15      	ldr	r2, [pc, #84]	; (8004cbc <UART_AdvFeatureConfig+0x160>)
 8004c66:	4013      	ands	r3, r2
 8004c68:	0019      	movs	r1, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	2280      	movs	r2, #128	; 0x80
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	d00b      	beq.n	8004c98 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	4a0e      	ldr	r2, [pc, #56]	; (8004cc0 <UART_AdvFeatureConfig+0x164>)
 8004c88:	4013      	ands	r3, r2
 8004c8a:	0019      	movs	r1, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	605a      	str	r2, [r3, #4]
  }
}
 8004c98:	46c0      	nop			; (mov r8, r8)
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	b002      	add	sp, #8
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	fffdffff 	.word	0xfffdffff
 8004ca4:	fffeffff 	.word	0xfffeffff
 8004ca8:	fffbffff 	.word	0xfffbffff
 8004cac:	ffff7fff 	.word	0xffff7fff
 8004cb0:	ffffefff 	.word	0xffffefff
 8004cb4:	ffffdfff 	.word	0xffffdfff
 8004cb8:	ffefffff 	.word	0xffefffff
 8004cbc:	ff9fffff 	.word	0xff9fffff
 8004cc0:	fff7ffff 	.word	0xfff7ffff

08004cc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b092      	sub	sp, #72	; 0x48
 8004cc8:	af02      	add	r7, sp, #8
 8004cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2284      	movs	r2, #132	; 0x84
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cd4:	f7fd fe88 	bl	80029e8 <HAL_GetTick>
 8004cd8:	0003      	movs	r3, r0
 8004cda:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2208      	movs	r2, #8
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	2b08      	cmp	r3, #8
 8004ce8:	d12c      	bne.n	8004d44 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cec:	2280      	movs	r2, #128	; 0x80
 8004cee:	0391      	lsls	r1, r2, #14
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	4a46      	ldr	r2, [pc, #280]	; (8004e0c <UART_CheckIdleState+0x148>)
 8004cf4:	9200      	str	r2, [sp, #0]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f000 f88c 	bl	8004e14 <UART_WaitOnFlagUntilTimeout>
 8004cfc:	1e03      	subs	r3, r0, #0
 8004cfe:	d021      	beq.n	8004d44 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d00:	f3ef 8310 	mrs	r3, PRIMASK
 8004d04:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d08:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d10:	f383 8810 	msr	PRIMASK, r3
}
 8004d14:	46c0      	nop			; (mov r8, r8)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2180      	movs	r1, #128	; 0x80
 8004d22:	438a      	bics	r2, r1
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2c:	f383 8810 	msr	PRIMASK, r3
}
 8004d30:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2220      	movs	r2, #32
 8004d36:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2278      	movs	r2, #120	; 0x78
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e05f      	b.n	8004e04 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2204      	movs	r2, #4
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	2b04      	cmp	r3, #4
 8004d50:	d146      	bne.n	8004de0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d54:	2280      	movs	r2, #128	; 0x80
 8004d56:	03d1      	lsls	r1, r2, #15
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	4a2c      	ldr	r2, [pc, #176]	; (8004e0c <UART_CheckIdleState+0x148>)
 8004d5c:	9200      	str	r2, [sp, #0]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f000 f858 	bl	8004e14 <UART_WaitOnFlagUntilTimeout>
 8004d64:	1e03      	subs	r3, r0, #0
 8004d66:	d03b      	beq.n	8004de0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d68:	f3ef 8310 	mrs	r3, PRIMASK
 8004d6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d70:	637b      	str	r3, [r7, #52]	; 0x34
 8004d72:	2301      	movs	r3, #1
 8004d74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	f383 8810 	msr	PRIMASK, r3
}
 8004d7c:	46c0      	nop			; (mov r8, r8)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4921      	ldr	r1, [pc, #132]	; (8004e10 <UART_CheckIdleState+0x14c>)
 8004d8a:	400a      	ands	r2, r1
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f383 8810 	msr	PRIMASK, r3
}
 8004d98:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d9a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d9e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004da0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da2:	633b      	str	r3, [r7, #48]	; 0x30
 8004da4:	2301      	movs	r3, #1
 8004da6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	f383 8810 	msr	PRIMASK, r3
}
 8004dae:	46c0      	nop			; (mov r8, r8)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689a      	ldr	r2, [r3, #8]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2101      	movs	r1, #1
 8004dbc:	438a      	bics	r2, r1
 8004dbe:	609a      	str	r2, [r3, #8]
 8004dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	f383 8810 	msr	PRIMASK, r3
}
 8004dca:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2280      	movs	r2, #128	; 0x80
 8004dd0:	2120      	movs	r1, #32
 8004dd2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2278      	movs	r2, #120	; 0x78
 8004dd8:	2100      	movs	r1, #0
 8004dda:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e011      	b.n	8004e04 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2220      	movs	r2, #32
 8004de4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2280      	movs	r2, #128	; 0x80
 8004dea:	2120      	movs	r1, #32
 8004dec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2278      	movs	r2, #120	; 0x78
 8004dfe:	2100      	movs	r1, #0
 8004e00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	0018      	movs	r0, r3
 8004e06:	46bd      	mov	sp, r7
 8004e08:	b010      	add	sp, #64	; 0x40
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	01ffffff 	.word	0x01ffffff
 8004e10:	fffffedf 	.word	0xfffffedf

08004e14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	603b      	str	r3, [r7, #0]
 8004e20:	1dfb      	adds	r3, r7, #7
 8004e22:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e24:	e04b      	b.n	8004ebe <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	d048      	beq.n	8004ebe <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e2c:	f7fd fddc 	bl	80029e8 <HAL_GetTick>
 8004e30:	0002      	movs	r2, r0
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d302      	bcc.n	8004e42 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d101      	bne.n	8004e46 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e04b      	b.n	8004ede <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2204      	movs	r2, #4
 8004e4e:	4013      	ands	r3, r2
 8004e50:	d035      	beq.n	8004ebe <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	2208      	movs	r2, #8
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	2b08      	cmp	r3, #8
 8004e5e:	d111      	bne.n	8004e84 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2208      	movs	r2, #8
 8004e66:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	0018      	movs	r0, r3
 8004e6c:	f000 f83c 	bl	8004ee8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2284      	movs	r2, #132	; 0x84
 8004e74:	2108      	movs	r1, #8
 8004e76:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2278      	movs	r2, #120	; 0x78
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e02c      	b.n	8004ede <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	69da      	ldr	r2, [r3, #28]
 8004e8a:	2380      	movs	r3, #128	; 0x80
 8004e8c:	011b      	lsls	r3, r3, #4
 8004e8e:	401a      	ands	r2, r3
 8004e90:	2380      	movs	r3, #128	; 0x80
 8004e92:	011b      	lsls	r3, r3, #4
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d112      	bne.n	8004ebe <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2280      	movs	r2, #128	; 0x80
 8004e9e:	0112      	lsls	r2, r2, #4
 8004ea0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	f000 f81f 	bl	8004ee8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2284      	movs	r2, #132	; 0x84
 8004eae:	2120      	movs	r1, #32
 8004eb0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2278      	movs	r2, #120	; 0x78
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e00f      	b.n	8004ede <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	69db      	ldr	r3, [r3, #28]
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	425a      	negs	r2, r3
 8004ece:	4153      	adcs	r3, r2
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	001a      	movs	r2, r3
 8004ed4:	1dfb      	adds	r3, r7, #7
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d0a4      	beq.n	8004e26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	0018      	movs	r0, r3
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	b004      	add	sp, #16
 8004ee4:	bd80      	pop	{r7, pc}
	...

08004ee8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b08e      	sub	sp, #56	; 0x38
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ef0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ef4:	617b      	str	r3, [r7, #20]
  return(result);
 8004ef6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ef8:	637b      	str	r3, [r7, #52]	; 0x34
 8004efa:	2301      	movs	r3, #1
 8004efc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	f383 8810 	msr	PRIMASK, r3
}
 8004f04:	46c0      	nop			; (mov r8, r8)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4926      	ldr	r1, [pc, #152]	; (8004fac <UART_EndRxTransfer+0xc4>)
 8004f12:	400a      	ands	r2, r1
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	f383 8810 	msr	PRIMASK, r3
}
 8004f20:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f22:	f3ef 8310 	mrs	r3, PRIMASK
 8004f26:	623b      	str	r3, [r7, #32]
  return(result);
 8004f28:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f2a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	f383 8810 	msr	PRIMASK, r3
}
 8004f36:	46c0      	nop			; (mov r8, r8)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689a      	ldr	r2, [r3, #8]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2101      	movs	r1, #1
 8004f44:	438a      	bics	r2, r1
 8004f46:	609a      	str	r2, [r3, #8]
 8004f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4e:	f383 8810 	msr	PRIMASK, r3
}
 8004f52:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d118      	bne.n	8004f8e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f5c:	f3ef 8310 	mrs	r3, PRIMASK
 8004f60:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f62:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f66:	2301      	movs	r3, #1
 8004f68:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f383 8810 	msr	PRIMASK, r3
}
 8004f70:	46c0      	nop			; (mov r8, r8)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2110      	movs	r1, #16
 8004f7e:	438a      	bics	r2, r1
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f383 8810 	msr	PRIMASK, r3
}
 8004f8c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2280      	movs	r2, #128	; 0x80
 8004f92:	2120      	movs	r1, #32
 8004f94:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004fa2:	46c0      	nop			; (mov r8, r8)
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	b00e      	add	sp, #56	; 0x38
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	46c0      	nop			; (mov r8, r8)
 8004fac:	fffffedf 	.word	0xfffffedf

08004fb0 <__errno>:
 8004fb0:	4b01      	ldr	r3, [pc, #4]	; (8004fb8 <__errno+0x8>)
 8004fb2:	6818      	ldr	r0, [r3, #0]
 8004fb4:	4770      	bx	lr
 8004fb6:	46c0      	nop			; (mov r8, r8)
 8004fb8:	2000000c 	.word	0x2000000c

08004fbc <__libc_init_array>:
 8004fbc:	b570      	push	{r4, r5, r6, lr}
 8004fbe:	2600      	movs	r6, #0
 8004fc0:	4d0c      	ldr	r5, [pc, #48]	; (8004ff4 <__libc_init_array+0x38>)
 8004fc2:	4c0d      	ldr	r4, [pc, #52]	; (8004ff8 <__libc_init_array+0x3c>)
 8004fc4:	1b64      	subs	r4, r4, r5
 8004fc6:	10a4      	asrs	r4, r4, #2
 8004fc8:	42a6      	cmp	r6, r4
 8004fca:	d109      	bne.n	8004fe0 <__libc_init_array+0x24>
 8004fcc:	2600      	movs	r6, #0
 8004fce:	f002 ffbb 	bl	8007f48 <_init>
 8004fd2:	4d0a      	ldr	r5, [pc, #40]	; (8004ffc <__libc_init_array+0x40>)
 8004fd4:	4c0a      	ldr	r4, [pc, #40]	; (8005000 <__libc_init_array+0x44>)
 8004fd6:	1b64      	subs	r4, r4, r5
 8004fd8:	10a4      	asrs	r4, r4, #2
 8004fda:	42a6      	cmp	r6, r4
 8004fdc:	d105      	bne.n	8004fea <__libc_init_array+0x2e>
 8004fde:	bd70      	pop	{r4, r5, r6, pc}
 8004fe0:	00b3      	lsls	r3, r6, #2
 8004fe2:	58eb      	ldr	r3, [r5, r3]
 8004fe4:	4798      	blx	r3
 8004fe6:	3601      	adds	r6, #1
 8004fe8:	e7ee      	b.n	8004fc8 <__libc_init_array+0xc>
 8004fea:	00b3      	lsls	r3, r6, #2
 8004fec:	58eb      	ldr	r3, [r5, r3]
 8004fee:	4798      	blx	r3
 8004ff0:	3601      	adds	r6, #1
 8004ff2:	e7f2      	b.n	8004fda <__libc_init_array+0x1e>
 8004ff4:	08008434 	.word	0x08008434
 8004ff8:	08008434 	.word	0x08008434
 8004ffc:	08008434 	.word	0x08008434
 8005000:	08008438 	.word	0x08008438

08005004 <memset>:
 8005004:	0003      	movs	r3, r0
 8005006:	1882      	adds	r2, r0, r2
 8005008:	4293      	cmp	r3, r2
 800500a:	d100      	bne.n	800500e <memset+0xa>
 800500c:	4770      	bx	lr
 800500e:	7019      	strb	r1, [r3, #0]
 8005010:	3301      	adds	r3, #1
 8005012:	e7f9      	b.n	8005008 <memset+0x4>

08005014 <__cvt>:
 8005014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005016:	001e      	movs	r6, r3
 8005018:	2300      	movs	r3, #0
 800501a:	0014      	movs	r4, r2
 800501c:	b08b      	sub	sp, #44	; 0x2c
 800501e:	429e      	cmp	r6, r3
 8005020:	da04      	bge.n	800502c <__cvt+0x18>
 8005022:	2180      	movs	r1, #128	; 0x80
 8005024:	0609      	lsls	r1, r1, #24
 8005026:	1873      	adds	r3, r6, r1
 8005028:	001e      	movs	r6, r3
 800502a:	232d      	movs	r3, #45	; 0x2d
 800502c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800502e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005030:	7013      	strb	r3, [r2, #0]
 8005032:	2320      	movs	r3, #32
 8005034:	2203      	movs	r2, #3
 8005036:	439f      	bics	r7, r3
 8005038:	2f46      	cmp	r7, #70	; 0x46
 800503a:	d007      	beq.n	800504c <__cvt+0x38>
 800503c:	003b      	movs	r3, r7
 800503e:	3b45      	subs	r3, #69	; 0x45
 8005040:	4259      	negs	r1, r3
 8005042:	414b      	adcs	r3, r1
 8005044:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005046:	3a01      	subs	r2, #1
 8005048:	18cb      	adds	r3, r1, r3
 800504a:	9310      	str	r3, [sp, #64]	; 0x40
 800504c:	ab09      	add	r3, sp, #36	; 0x24
 800504e:	9304      	str	r3, [sp, #16]
 8005050:	ab08      	add	r3, sp, #32
 8005052:	9303      	str	r3, [sp, #12]
 8005054:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005056:	9200      	str	r2, [sp, #0]
 8005058:	9302      	str	r3, [sp, #8]
 800505a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800505c:	0022      	movs	r2, r4
 800505e:	9301      	str	r3, [sp, #4]
 8005060:	0033      	movs	r3, r6
 8005062:	f000 fcf1 	bl	8005a48 <_dtoa_r>
 8005066:	0005      	movs	r5, r0
 8005068:	2f47      	cmp	r7, #71	; 0x47
 800506a:	d102      	bne.n	8005072 <__cvt+0x5e>
 800506c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800506e:	07db      	lsls	r3, r3, #31
 8005070:	d528      	bpl.n	80050c4 <__cvt+0xb0>
 8005072:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005074:	18eb      	adds	r3, r5, r3
 8005076:	9307      	str	r3, [sp, #28]
 8005078:	2f46      	cmp	r7, #70	; 0x46
 800507a:	d114      	bne.n	80050a6 <__cvt+0x92>
 800507c:	782b      	ldrb	r3, [r5, #0]
 800507e:	2b30      	cmp	r3, #48	; 0x30
 8005080:	d10c      	bne.n	800509c <__cvt+0x88>
 8005082:	2200      	movs	r2, #0
 8005084:	2300      	movs	r3, #0
 8005086:	0020      	movs	r0, r4
 8005088:	0031      	movs	r1, r6
 800508a:	f7fb f9df 	bl	800044c <__aeabi_dcmpeq>
 800508e:	2800      	cmp	r0, #0
 8005090:	d104      	bne.n	800509c <__cvt+0x88>
 8005092:	2301      	movs	r3, #1
 8005094:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005096:	1a9b      	subs	r3, r3, r2
 8005098:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800509a:	6013      	str	r3, [r2, #0]
 800509c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800509e:	9a07      	ldr	r2, [sp, #28]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	18d3      	adds	r3, r2, r3
 80050a4:	9307      	str	r3, [sp, #28]
 80050a6:	2200      	movs	r2, #0
 80050a8:	2300      	movs	r3, #0
 80050aa:	0020      	movs	r0, r4
 80050ac:	0031      	movs	r1, r6
 80050ae:	f7fb f9cd 	bl	800044c <__aeabi_dcmpeq>
 80050b2:	2800      	cmp	r0, #0
 80050b4:	d001      	beq.n	80050ba <__cvt+0xa6>
 80050b6:	9b07      	ldr	r3, [sp, #28]
 80050b8:	9309      	str	r3, [sp, #36]	; 0x24
 80050ba:	2230      	movs	r2, #48	; 0x30
 80050bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050be:	9907      	ldr	r1, [sp, #28]
 80050c0:	428b      	cmp	r3, r1
 80050c2:	d306      	bcc.n	80050d2 <__cvt+0xbe>
 80050c4:	0028      	movs	r0, r5
 80050c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80050ca:	1b5b      	subs	r3, r3, r5
 80050cc:	6013      	str	r3, [r2, #0]
 80050ce:	b00b      	add	sp, #44	; 0x2c
 80050d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050d2:	1c59      	adds	r1, r3, #1
 80050d4:	9109      	str	r1, [sp, #36]	; 0x24
 80050d6:	701a      	strb	r2, [r3, #0]
 80050d8:	e7f0      	b.n	80050bc <__cvt+0xa8>

080050da <__exponent>:
 80050da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050dc:	1c83      	adds	r3, r0, #2
 80050de:	b087      	sub	sp, #28
 80050e0:	9303      	str	r3, [sp, #12]
 80050e2:	0005      	movs	r5, r0
 80050e4:	000c      	movs	r4, r1
 80050e6:	232b      	movs	r3, #43	; 0x2b
 80050e8:	7002      	strb	r2, [r0, #0]
 80050ea:	2900      	cmp	r1, #0
 80050ec:	da01      	bge.n	80050f2 <__exponent+0x18>
 80050ee:	424c      	negs	r4, r1
 80050f0:	3302      	adds	r3, #2
 80050f2:	706b      	strb	r3, [r5, #1]
 80050f4:	2c09      	cmp	r4, #9
 80050f6:	dd31      	ble.n	800515c <__exponent+0x82>
 80050f8:	270a      	movs	r7, #10
 80050fa:	ab04      	add	r3, sp, #16
 80050fc:	1dde      	adds	r6, r3, #7
 80050fe:	0020      	movs	r0, r4
 8005100:	0039      	movs	r1, r7
 8005102:	9601      	str	r6, [sp, #4]
 8005104:	f7fb f98c 	bl	8000420 <__aeabi_idivmod>
 8005108:	3e01      	subs	r6, #1
 800510a:	3130      	adds	r1, #48	; 0x30
 800510c:	0020      	movs	r0, r4
 800510e:	7031      	strb	r1, [r6, #0]
 8005110:	0039      	movs	r1, r7
 8005112:	9402      	str	r4, [sp, #8]
 8005114:	f7fb f89e 	bl	8000254 <__divsi3>
 8005118:	9b02      	ldr	r3, [sp, #8]
 800511a:	0004      	movs	r4, r0
 800511c:	2b63      	cmp	r3, #99	; 0x63
 800511e:	dcee      	bgt.n	80050fe <__exponent+0x24>
 8005120:	9b01      	ldr	r3, [sp, #4]
 8005122:	3430      	adds	r4, #48	; 0x30
 8005124:	1e9a      	subs	r2, r3, #2
 8005126:	0013      	movs	r3, r2
 8005128:	9903      	ldr	r1, [sp, #12]
 800512a:	7014      	strb	r4, [r2, #0]
 800512c:	a804      	add	r0, sp, #16
 800512e:	3007      	adds	r0, #7
 8005130:	4298      	cmp	r0, r3
 8005132:	d80e      	bhi.n	8005152 <__exponent+0x78>
 8005134:	ab04      	add	r3, sp, #16
 8005136:	3307      	adds	r3, #7
 8005138:	2000      	movs	r0, #0
 800513a:	429a      	cmp	r2, r3
 800513c:	d804      	bhi.n	8005148 <__exponent+0x6e>
 800513e:	ab04      	add	r3, sp, #16
 8005140:	3009      	adds	r0, #9
 8005142:	18c0      	adds	r0, r0, r3
 8005144:	9b01      	ldr	r3, [sp, #4]
 8005146:	1ac0      	subs	r0, r0, r3
 8005148:	9b03      	ldr	r3, [sp, #12]
 800514a:	1818      	adds	r0, r3, r0
 800514c:	1b40      	subs	r0, r0, r5
 800514e:	b007      	add	sp, #28
 8005150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005152:	7818      	ldrb	r0, [r3, #0]
 8005154:	3301      	adds	r3, #1
 8005156:	7008      	strb	r0, [r1, #0]
 8005158:	3101      	adds	r1, #1
 800515a:	e7e7      	b.n	800512c <__exponent+0x52>
 800515c:	2330      	movs	r3, #48	; 0x30
 800515e:	18e4      	adds	r4, r4, r3
 8005160:	70ab      	strb	r3, [r5, #2]
 8005162:	1d28      	adds	r0, r5, #4
 8005164:	70ec      	strb	r4, [r5, #3]
 8005166:	e7f1      	b.n	800514c <__exponent+0x72>

08005168 <_printf_float>:
 8005168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800516a:	b095      	sub	sp, #84	; 0x54
 800516c:	000c      	movs	r4, r1
 800516e:	9209      	str	r2, [sp, #36]	; 0x24
 8005170:	001e      	movs	r6, r3
 8005172:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8005174:	0007      	movs	r7, r0
 8005176:	f001 fa81 	bl	800667c <_localeconv_r>
 800517a:	6803      	ldr	r3, [r0, #0]
 800517c:	0018      	movs	r0, r3
 800517e:	930c      	str	r3, [sp, #48]	; 0x30
 8005180:	f7fa ffc2 	bl	8000108 <strlen>
 8005184:	2300      	movs	r3, #0
 8005186:	9312      	str	r3, [sp, #72]	; 0x48
 8005188:	7e23      	ldrb	r3, [r4, #24]
 800518a:	2207      	movs	r2, #7
 800518c:	930a      	str	r3, [sp, #40]	; 0x28
 800518e:	6823      	ldr	r3, [r4, #0]
 8005190:	900e      	str	r0, [sp, #56]	; 0x38
 8005192:	930d      	str	r3, [sp, #52]	; 0x34
 8005194:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005196:	682b      	ldr	r3, [r5, #0]
 8005198:	05c9      	lsls	r1, r1, #23
 800519a:	d547      	bpl.n	800522c <_printf_float+0xc4>
 800519c:	189b      	adds	r3, r3, r2
 800519e:	4393      	bics	r3, r2
 80051a0:	001a      	movs	r2, r3
 80051a2:	3208      	adds	r2, #8
 80051a4:	602a      	str	r2, [r5, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	64a2      	str	r2, [r4, #72]	; 0x48
 80051ac:	64e3      	str	r3, [r4, #76]	; 0x4c
 80051ae:	2201      	movs	r2, #1
 80051b0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80051b2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80051b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80051b6:	006b      	lsls	r3, r5, #1
 80051b8:	085b      	lsrs	r3, r3, #1
 80051ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80051bc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80051be:	4ba7      	ldr	r3, [pc, #668]	; (800545c <_printf_float+0x2f4>)
 80051c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80051c2:	4252      	negs	r2, r2
 80051c4:	f7fc ffc6 	bl	8002154 <__aeabi_dcmpun>
 80051c8:	2800      	cmp	r0, #0
 80051ca:	d131      	bne.n	8005230 <_printf_float+0xc8>
 80051cc:	2201      	movs	r2, #1
 80051ce:	4ba3      	ldr	r3, [pc, #652]	; (800545c <_printf_float+0x2f4>)
 80051d0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80051d2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80051d4:	4252      	negs	r2, r2
 80051d6:	f7fb f949 	bl	800046c <__aeabi_dcmple>
 80051da:	2800      	cmp	r0, #0
 80051dc:	d128      	bne.n	8005230 <_printf_float+0xc8>
 80051de:	2200      	movs	r2, #0
 80051e0:	2300      	movs	r3, #0
 80051e2:	0029      	movs	r1, r5
 80051e4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80051e6:	f7fb f937 	bl	8000458 <__aeabi_dcmplt>
 80051ea:	2800      	cmp	r0, #0
 80051ec:	d003      	beq.n	80051f6 <_printf_float+0x8e>
 80051ee:	0023      	movs	r3, r4
 80051f0:	222d      	movs	r2, #45	; 0x2d
 80051f2:	3343      	adds	r3, #67	; 0x43
 80051f4:	701a      	strb	r2, [r3, #0]
 80051f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051f8:	4d99      	ldr	r5, [pc, #612]	; (8005460 <_printf_float+0x2f8>)
 80051fa:	2b47      	cmp	r3, #71	; 0x47
 80051fc:	d900      	bls.n	8005200 <_printf_float+0x98>
 80051fe:	4d99      	ldr	r5, [pc, #612]	; (8005464 <_printf_float+0x2fc>)
 8005200:	2303      	movs	r3, #3
 8005202:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005204:	6123      	str	r3, [r4, #16]
 8005206:	3301      	adds	r3, #1
 8005208:	439a      	bics	r2, r3
 800520a:	2300      	movs	r3, #0
 800520c:	6022      	str	r2, [r4, #0]
 800520e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005212:	0021      	movs	r1, r4
 8005214:	0038      	movs	r0, r7
 8005216:	9600      	str	r6, [sp, #0]
 8005218:	aa13      	add	r2, sp, #76	; 0x4c
 800521a:	f000 f9e7 	bl	80055ec <_printf_common>
 800521e:	1c43      	adds	r3, r0, #1
 8005220:	d000      	beq.n	8005224 <_printf_float+0xbc>
 8005222:	e0a2      	b.n	800536a <_printf_float+0x202>
 8005224:	2001      	movs	r0, #1
 8005226:	4240      	negs	r0, r0
 8005228:	b015      	add	sp, #84	; 0x54
 800522a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800522c:	3307      	adds	r3, #7
 800522e:	e7b6      	b.n	800519e <_printf_float+0x36>
 8005230:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005232:	002b      	movs	r3, r5
 8005234:	0010      	movs	r0, r2
 8005236:	0029      	movs	r1, r5
 8005238:	f7fc ff8c 	bl	8002154 <__aeabi_dcmpun>
 800523c:	2800      	cmp	r0, #0
 800523e:	d00b      	beq.n	8005258 <_printf_float+0xf0>
 8005240:	2d00      	cmp	r5, #0
 8005242:	da03      	bge.n	800524c <_printf_float+0xe4>
 8005244:	0023      	movs	r3, r4
 8005246:	222d      	movs	r2, #45	; 0x2d
 8005248:	3343      	adds	r3, #67	; 0x43
 800524a:	701a      	strb	r2, [r3, #0]
 800524c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800524e:	4d86      	ldr	r5, [pc, #536]	; (8005468 <_printf_float+0x300>)
 8005250:	2b47      	cmp	r3, #71	; 0x47
 8005252:	d9d5      	bls.n	8005200 <_printf_float+0x98>
 8005254:	4d85      	ldr	r5, [pc, #532]	; (800546c <_printf_float+0x304>)
 8005256:	e7d3      	b.n	8005200 <_printf_float+0x98>
 8005258:	2220      	movs	r2, #32
 800525a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800525c:	6863      	ldr	r3, [r4, #4]
 800525e:	4391      	bics	r1, r2
 8005260:	910f      	str	r1, [sp, #60]	; 0x3c
 8005262:	1c5a      	adds	r2, r3, #1
 8005264:	d149      	bne.n	80052fa <_printf_float+0x192>
 8005266:	3307      	adds	r3, #7
 8005268:	6063      	str	r3, [r4, #4]
 800526a:	2380      	movs	r3, #128	; 0x80
 800526c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	4313      	orrs	r3, r2
 8005272:	2200      	movs	r2, #0
 8005274:	9206      	str	r2, [sp, #24]
 8005276:	aa12      	add	r2, sp, #72	; 0x48
 8005278:	9205      	str	r2, [sp, #20]
 800527a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800527c:	a908      	add	r1, sp, #32
 800527e:	9204      	str	r2, [sp, #16]
 8005280:	aa11      	add	r2, sp, #68	; 0x44
 8005282:	9203      	str	r2, [sp, #12]
 8005284:	2223      	movs	r2, #35	; 0x23
 8005286:	6023      	str	r3, [r4, #0]
 8005288:	9301      	str	r3, [sp, #4]
 800528a:	6863      	ldr	r3, [r4, #4]
 800528c:	1852      	adds	r2, r2, r1
 800528e:	9202      	str	r2, [sp, #8]
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	0038      	movs	r0, r7
 8005294:	002b      	movs	r3, r5
 8005296:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005298:	f7ff febc 	bl	8005014 <__cvt>
 800529c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800529e:	0005      	movs	r5, r0
 80052a0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80052a2:	2b47      	cmp	r3, #71	; 0x47
 80052a4:	d108      	bne.n	80052b8 <_printf_float+0x150>
 80052a6:	1ccb      	adds	r3, r1, #3
 80052a8:	db02      	blt.n	80052b0 <_printf_float+0x148>
 80052aa:	6863      	ldr	r3, [r4, #4]
 80052ac:	4299      	cmp	r1, r3
 80052ae:	dd48      	ble.n	8005342 <_printf_float+0x1da>
 80052b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052b2:	3b02      	subs	r3, #2
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	930a      	str	r3, [sp, #40]	; 0x28
 80052b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052ba:	2b65      	cmp	r3, #101	; 0x65
 80052bc:	d824      	bhi.n	8005308 <_printf_float+0x1a0>
 80052be:	0020      	movs	r0, r4
 80052c0:	001a      	movs	r2, r3
 80052c2:	3901      	subs	r1, #1
 80052c4:	3050      	adds	r0, #80	; 0x50
 80052c6:	9111      	str	r1, [sp, #68]	; 0x44
 80052c8:	f7ff ff07 	bl	80050da <__exponent>
 80052cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80052ce:	900b      	str	r0, [sp, #44]	; 0x2c
 80052d0:	1813      	adds	r3, r2, r0
 80052d2:	6123      	str	r3, [r4, #16]
 80052d4:	2a01      	cmp	r2, #1
 80052d6:	dc02      	bgt.n	80052de <_printf_float+0x176>
 80052d8:	6822      	ldr	r2, [r4, #0]
 80052da:	07d2      	lsls	r2, r2, #31
 80052dc:	d501      	bpl.n	80052e2 <_printf_float+0x17a>
 80052de:	3301      	adds	r3, #1
 80052e0:	6123      	str	r3, [r4, #16]
 80052e2:	2323      	movs	r3, #35	; 0x23
 80052e4:	aa08      	add	r2, sp, #32
 80052e6:	189b      	adds	r3, r3, r2
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d100      	bne.n	80052f0 <_printf_float+0x188>
 80052ee:	e78f      	b.n	8005210 <_printf_float+0xa8>
 80052f0:	0023      	movs	r3, r4
 80052f2:	222d      	movs	r2, #45	; 0x2d
 80052f4:	3343      	adds	r3, #67	; 0x43
 80052f6:	701a      	strb	r2, [r3, #0]
 80052f8:	e78a      	b.n	8005210 <_printf_float+0xa8>
 80052fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80052fc:	2a47      	cmp	r2, #71	; 0x47
 80052fe:	d1b4      	bne.n	800526a <_printf_float+0x102>
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1b2      	bne.n	800526a <_printf_float+0x102>
 8005304:	3301      	adds	r3, #1
 8005306:	e7af      	b.n	8005268 <_printf_float+0x100>
 8005308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800530a:	2b66      	cmp	r3, #102	; 0x66
 800530c:	d11b      	bne.n	8005346 <_printf_float+0x1de>
 800530e:	6863      	ldr	r3, [r4, #4]
 8005310:	2900      	cmp	r1, #0
 8005312:	dd0d      	ble.n	8005330 <_printf_float+0x1c8>
 8005314:	6121      	str	r1, [r4, #16]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d102      	bne.n	8005320 <_printf_float+0x1b8>
 800531a:	6822      	ldr	r2, [r4, #0]
 800531c:	07d2      	lsls	r2, r2, #31
 800531e:	d502      	bpl.n	8005326 <_printf_float+0x1be>
 8005320:	3301      	adds	r3, #1
 8005322:	1859      	adds	r1, r3, r1
 8005324:	6121      	str	r1, [r4, #16]
 8005326:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005328:	65a3      	str	r3, [r4, #88]	; 0x58
 800532a:	2300      	movs	r3, #0
 800532c:	930b      	str	r3, [sp, #44]	; 0x2c
 800532e:	e7d8      	b.n	80052e2 <_printf_float+0x17a>
 8005330:	2b00      	cmp	r3, #0
 8005332:	d103      	bne.n	800533c <_printf_float+0x1d4>
 8005334:	2201      	movs	r2, #1
 8005336:	6821      	ldr	r1, [r4, #0]
 8005338:	4211      	tst	r1, r2
 800533a:	d000      	beq.n	800533e <_printf_float+0x1d6>
 800533c:	1c9a      	adds	r2, r3, #2
 800533e:	6122      	str	r2, [r4, #16]
 8005340:	e7f1      	b.n	8005326 <_printf_float+0x1be>
 8005342:	2367      	movs	r3, #103	; 0x67
 8005344:	930a      	str	r3, [sp, #40]	; 0x28
 8005346:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005348:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800534a:	4293      	cmp	r3, r2
 800534c:	db06      	blt.n	800535c <_printf_float+0x1f4>
 800534e:	6822      	ldr	r2, [r4, #0]
 8005350:	6123      	str	r3, [r4, #16]
 8005352:	07d2      	lsls	r2, r2, #31
 8005354:	d5e7      	bpl.n	8005326 <_printf_float+0x1be>
 8005356:	3301      	adds	r3, #1
 8005358:	6123      	str	r3, [r4, #16]
 800535a:	e7e4      	b.n	8005326 <_printf_float+0x1be>
 800535c:	2101      	movs	r1, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	dc01      	bgt.n	8005366 <_printf_float+0x1fe>
 8005362:	1849      	adds	r1, r1, r1
 8005364:	1ac9      	subs	r1, r1, r3
 8005366:	1852      	adds	r2, r2, r1
 8005368:	e7e9      	b.n	800533e <_printf_float+0x1d6>
 800536a:	6822      	ldr	r2, [r4, #0]
 800536c:	0553      	lsls	r3, r2, #21
 800536e:	d407      	bmi.n	8005380 <_printf_float+0x218>
 8005370:	6923      	ldr	r3, [r4, #16]
 8005372:	002a      	movs	r2, r5
 8005374:	0038      	movs	r0, r7
 8005376:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005378:	47b0      	blx	r6
 800537a:	1c43      	adds	r3, r0, #1
 800537c:	d128      	bne.n	80053d0 <_printf_float+0x268>
 800537e:	e751      	b.n	8005224 <_printf_float+0xbc>
 8005380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005382:	2b65      	cmp	r3, #101	; 0x65
 8005384:	d800      	bhi.n	8005388 <_printf_float+0x220>
 8005386:	e0e1      	b.n	800554c <_printf_float+0x3e4>
 8005388:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800538a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800538c:	2200      	movs	r2, #0
 800538e:	2300      	movs	r3, #0
 8005390:	f7fb f85c 	bl	800044c <__aeabi_dcmpeq>
 8005394:	2800      	cmp	r0, #0
 8005396:	d031      	beq.n	80053fc <_printf_float+0x294>
 8005398:	2301      	movs	r3, #1
 800539a:	0038      	movs	r0, r7
 800539c:	4a34      	ldr	r2, [pc, #208]	; (8005470 <_printf_float+0x308>)
 800539e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053a0:	47b0      	blx	r6
 80053a2:	1c43      	adds	r3, r0, #1
 80053a4:	d100      	bne.n	80053a8 <_printf_float+0x240>
 80053a6:	e73d      	b.n	8005224 <_printf_float+0xbc>
 80053a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80053aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80053ac:	4293      	cmp	r3, r2
 80053ae:	db02      	blt.n	80053b6 <_printf_float+0x24e>
 80053b0:	6823      	ldr	r3, [r4, #0]
 80053b2:	07db      	lsls	r3, r3, #31
 80053b4:	d50c      	bpl.n	80053d0 <_printf_float+0x268>
 80053b6:	0038      	movs	r0, r7
 80053b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80053bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053be:	47b0      	blx	r6
 80053c0:	2500      	movs	r5, #0
 80053c2:	1c43      	adds	r3, r0, #1
 80053c4:	d100      	bne.n	80053c8 <_printf_float+0x260>
 80053c6:	e72d      	b.n	8005224 <_printf_float+0xbc>
 80053c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80053ca:	3b01      	subs	r3, #1
 80053cc:	42ab      	cmp	r3, r5
 80053ce:	dc0a      	bgt.n	80053e6 <_printf_float+0x27e>
 80053d0:	6823      	ldr	r3, [r4, #0]
 80053d2:	079b      	lsls	r3, r3, #30
 80053d4:	d500      	bpl.n	80053d8 <_printf_float+0x270>
 80053d6:	e106      	b.n	80055e6 <_printf_float+0x47e>
 80053d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80053da:	68e0      	ldr	r0, [r4, #12]
 80053dc:	4298      	cmp	r0, r3
 80053de:	db00      	blt.n	80053e2 <_printf_float+0x27a>
 80053e0:	e722      	b.n	8005228 <_printf_float+0xc0>
 80053e2:	0018      	movs	r0, r3
 80053e4:	e720      	b.n	8005228 <_printf_float+0xc0>
 80053e6:	0022      	movs	r2, r4
 80053e8:	2301      	movs	r3, #1
 80053ea:	0038      	movs	r0, r7
 80053ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053ee:	321a      	adds	r2, #26
 80053f0:	47b0      	blx	r6
 80053f2:	1c43      	adds	r3, r0, #1
 80053f4:	d100      	bne.n	80053f8 <_printf_float+0x290>
 80053f6:	e715      	b.n	8005224 <_printf_float+0xbc>
 80053f8:	3501      	adds	r5, #1
 80053fa:	e7e5      	b.n	80053c8 <_printf_float+0x260>
 80053fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80053fe:	2b00      	cmp	r3, #0
 8005400:	dc38      	bgt.n	8005474 <_printf_float+0x30c>
 8005402:	2301      	movs	r3, #1
 8005404:	0038      	movs	r0, r7
 8005406:	4a1a      	ldr	r2, [pc, #104]	; (8005470 <_printf_float+0x308>)
 8005408:	9909      	ldr	r1, [sp, #36]	; 0x24
 800540a:	47b0      	blx	r6
 800540c:	1c43      	adds	r3, r0, #1
 800540e:	d100      	bne.n	8005412 <_printf_float+0x2aa>
 8005410:	e708      	b.n	8005224 <_printf_float+0xbc>
 8005412:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005414:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005416:	4313      	orrs	r3, r2
 8005418:	d102      	bne.n	8005420 <_printf_float+0x2b8>
 800541a:	6823      	ldr	r3, [r4, #0]
 800541c:	07db      	lsls	r3, r3, #31
 800541e:	d5d7      	bpl.n	80053d0 <_printf_float+0x268>
 8005420:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005422:	0038      	movs	r0, r7
 8005424:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005426:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005428:	47b0      	blx	r6
 800542a:	1c43      	adds	r3, r0, #1
 800542c:	d100      	bne.n	8005430 <_printf_float+0x2c8>
 800542e:	e6f9      	b.n	8005224 <_printf_float+0xbc>
 8005430:	2300      	movs	r3, #0
 8005432:	930a      	str	r3, [sp, #40]	; 0x28
 8005434:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005436:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005438:	425b      	negs	r3, r3
 800543a:	4293      	cmp	r3, r2
 800543c:	dc01      	bgt.n	8005442 <_printf_float+0x2da>
 800543e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005440:	e797      	b.n	8005372 <_printf_float+0x20a>
 8005442:	0022      	movs	r2, r4
 8005444:	2301      	movs	r3, #1
 8005446:	0038      	movs	r0, r7
 8005448:	9909      	ldr	r1, [sp, #36]	; 0x24
 800544a:	321a      	adds	r2, #26
 800544c:	47b0      	blx	r6
 800544e:	1c43      	adds	r3, r0, #1
 8005450:	d100      	bne.n	8005454 <_printf_float+0x2ec>
 8005452:	e6e7      	b.n	8005224 <_printf_float+0xbc>
 8005454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005456:	3301      	adds	r3, #1
 8005458:	e7eb      	b.n	8005432 <_printf_float+0x2ca>
 800545a:	46c0      	nop			; (mov r8, r8)
 800545c:	7fefffff 	.word	0x7fefffff
 8005460:	08008058 	.word	0x08008058
 8005464:	0800805c 	.word	0x0800805c
 8005468:	08008060 	.word	0x08008060
 800546c:	08008064 	.word	0x08008064
 8005470:	08008068 	.word	0x08008068
 8005474:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005476:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005478:	920a      	str	r2, [sp, #40]	; 0x28
 800547a:	429a      	cmp	r2, r3
 800547c:	dd00      	ble.n	8005480 <_printf_float+0x318>
 800547e:	930a      	str	r3, [sp, #40]	; 0x28
 8005480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005482:	2b00      	cmp	r3, #0
 8005484:	dc3c      	bgt.n	8005500 <_printf_float+0x398>
 8005486:	2300      	movs	r3, #0
 8005488:	930d      	str	r3, [sp, #52]	; 0x34
 800548a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800548c:	43db      	mvns	r3, r3
 800548e:	17db      	asrs	r3, r3, #31
 8005490:	930f      	str	r3, [sp, #60]	; 0x3c
 8005492:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005494:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005496:	930b      	str	r3, [sp, #44]	; 0x2c
 8005498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800549a:	4013      	ands	r3, r2
 800549c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80054a2:	4293      	cmp	r3, r2
 80054a4:	dc34      	bgt.n	8005510 <_printf_float+0x3a8>
 80054a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80054a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80054aa:	4293      	cmp	r3, r2
 80054ac:	db3d      	blt.n	800552a <_printf_float+0x3c2>
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	07db      	lsls	r3, r3, #31
 80054b2:	d43a      	bmi.n	800552a <_printf_float+0x3c2>
 80054b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80054b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054b8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	1a52      	subs	r2, r2, r1
 80054be:	920a      	str	r2, [sp, #40]	; 0x28
 80054c0:	429a      	cmp	r2, r3
 80054c2:	dd00      	ble.n	80054c6 <_printf_float+0x35e>
 80054c4:	930a      	str	r3, [sp, #40]	; 0x28
 80054c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	dc36      	bgt.n	800553a <_printf_float+0x3d2>
 80054cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054ce:	2500      	movs	r5, #0
 80054d0:	43db      	mvns	r3, r3
 80054d2:	17db      	asrs	r3, r3, #31
 80054d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80054d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80054d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80054da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054dc:	1a9b      	subs	r3, r3, r2
 80054de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054e0:	400a      	ands	r2, r1
 80054e2:	1a9b      	subs	r3, r3, r2
 80054e4:	42ab      	cmp	r3, r5
 80054e6:	dc00      	bgt.n	80054ea <_printf_float+0x382>
 80054e8:	e772      	b.n	80053d0 <_printf_float+0x268>
 80054ea:	0022      	movs	r2, r4
 80054ec:	2301      	movs	r3, #1
 80054ee:	0038      	movs	r0, r7
 80054f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80054f2:	321a      	adds	r2, #26
 80054f4:	47b0      	blx	r6
 80054f6:	1c43      	adds	r3, r0, #1
 80054f8:	d100      	bne.n	80054fc <_printf_float+0x394>
 80054fa:	e693      	b.n	8005224 <_printf_float+0xbc>
 80054fc:	3501      	adds	r5, #1
 80054fe:	e7ea      	b.n	80054d6 <_printf_float+0x36e>
 8005500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005502:	002a      	movs	r2, r5
 8005504:	0038      	movs	r0, r7
 8005506:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005508:	47b0      	blx	r6
 800550a:	1c43      	adds	r3, r0, #1
 800550c:	d1bb      	bne.n	8005486 <_printf_float+0x31e>
 800550e:	e689      	b.n	8005224 <_printf_float+0xbc>
 8005510:	0022      	movs	r2, r4
 8005512:	2301      	movs	r3, #1
 8005514:	0038      	movs	r0, r7
 8005516:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005518:	321a      	adds	r2, #26
 800551a:	47b0      	blx	r6
 800551c:	1c43      	adds	r3, r0, #1
 800551e:	d100      	bne.n	8005522 <_printf_float+0x3ba>
 8005520:	e680      	b.n	8005224 <_printf_float+0xbc>
 8005522:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005524:	3301      	adds	r3, #1
 8005526:	930d      	str	r3, [sp, #52]	; 0x34
 8005528:	e7b3      	b.n	8005492 <_printf_float+0x32a>
 800552a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800552c:	0038      	movs	r0, r7
 800552e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005530:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005532:	47b0      	blx	r6
 8005534:	1c43      	adds	r3, r0, #1
 8005536:	d1bd      	bne.n	80054b4 <_printf_float+0x34c>
 8005538:	e674      	b.n	8005224 <_printf_float+0xbc>
 800553a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800553c:	0038      	movs	r0, r7
 800553e:	18ea      	adds	r2, r5, r3
 8005540:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005544:	47b0      	blx	r6
 8005546:	1c43      	adds	r3, r0, #1
 8005548:	d1c0      	bne.n	80054cc <_printf_float+0x364>
 800554a:	e66b      	b.n	8005224 <_printf_float+0xbc>
 800554c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800554e:	2b01      	cmp	r3, #1
 8005550:	dc02      	bgt.n	8005558 <_printf_float+0x3f0>
 8005552:	2301      	movs	r3, #1
 8005554:	421a      	tst	r2, r3
 8005556:	d034      	beq.n	80055c2 <_printf_float+0x45a>
 8005558:	2301      	movs	r3, #1
 800555a:	002a      	movs	r2, r5
 800555c:	0038      	movs	r0, r7
 800555e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005560:	47b0      	blx	r6
 8005562:	1c43      	adds	r3, r0, #1
 8005564:	d100      	bne.n	8005568 <_printf_float+0x400>
 8005566:	e65d      	b.n	8005224 <_printf_float+0xbc>
 8005568:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800556a:	0038      	movs	r0, r7
 800556c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800556e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005570:	47b0      	blx	r6
 8005572:	1c43      	adds	r3, r0, #1
 8005574:	d100      	bne.n	8005578 <_printf_float+0x410>
 8005576:	e655      	b.n	8005224 <_printf_float+0xbc>
 8005578:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800557a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800557c:	2200      	movs	r2, #0
 800557e:	2300      	movs	r3, #0
 8005580:	f7fa ff64 	bl	800044c <__aeabi_dcmpeq>
 8005584:	2800      	cmp	r0, #0
 8005586:	d11a      	bne.n	80055be <_printf_float+0x456>
 8005588:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800558a:	1c6a      	adds	r2, r5, #1
 800558c:	3b01      	subs	r3, #1
 800558e:	0038      	movs	r0, r7
 8005590:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005592:	47b0      	blx	r6
 8005594:	1c43      	adds	r3, r0, #1
 8005596:	d10e      	bne.n	80055b6 <_printf_float+0x44e>
 8005598:	e644      	b.n	8005224 <_printf_float+0xbc>
 800559a:	0022      	movs	r2, r4
 800559c:	2301      	movs	r3, #1
 800559e:	0038      	movs	r0, r7
 80055a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055a2:	321a      	adds	r2, #26
 80055a4:	47b0      	blx	r6
 80055a6:	1c43      	adds	r3, r0, #1
 80055a8:	d100      	bne.n	80055ac <_printf_float+0x444>
 80055aa:	e63b      	b.n	8005224 <_printf_float+0xbc>
 80055ac:	3501      	adds	r5, #1
 80055ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80055b0:	3b01      	subs	r3, #1
 80055b2:	42ab      	cmp	r3, r5
 80055b4:	dcf1      	bgt.n	800559a <_printf_float+0x432>
 80055b6:	0022      	movs	r2, r4
 80055b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055ba:	3250      	adds	r2, #80	; 0x50
 80055bc:	e6da      	b.n	8005374 <_printf_float+0x20c>
 80055be:	2500      	movs	r5, #0
 80055c0:	e7f5      	b.n	80055ae <_printf_float+0x446>
 80055c2:	002a      	movs	r2, r5
 80055c4:	e7e3      	b.n	800558e <_printf_float+0x426>
 80055c6:	0022      	movs	r2, r4
 80055c8:	2301      	movs	r3, #1
 80055ca:	0038      	movs	r0, r7
 80055cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055ce:	3219      	adds	r2, #25
 80055d0:	47b0      	blx	r6
 80055d2:	1c43      	adds	r3, r0, #1
 80055d4:	d100      	bne.n	80055d8 <_printf_float+0x470>
 80055d6:	e625      	b.n	8005224 <_printf_float+0xbc>
 80055d8:	3501      	adds	r5, #1
 80055da:	68e3      	ldr	r3, [r4, #12]
 80055dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80055de:	1a9b      	subs	r3, r3, r2
 80055e0:	42ab      	cmp	r3, r5
 80055e2:	dcf0      	bgt.n	80055c6 <_printf_float+0x45e>
 80055e4:	e6f8      	b.n	80053d8 <_printf_float+0x270>
 80055e6:	2500      	movs	r5, #0
 80055e8:	e7f7      	b.n	80055da <_printf_float+0x472>
 80055ea:	46c0      	nop			; (mov r8, r8)

080055ec <_printf_common>:
 80055ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055ee:	0015      	movs	r5, r2
 80055f0:	9301      	str	r3, [sp, #4]
 80055f2:	688a      	ldr	r2, [r1, #8]
 80055f4:	690b      	ldr	r3, [r1, #16]
 80055f6:	000c      	movs	r4, r1
 80055f8:	9000      	str	r0, [sp, #0]
 80055fa:	4293      	cmp	r3, r2
 80055fc:	da00      	bge.n	8005600 <_printf_common+0x14>
 80055fe:	0013      	movs	r3, r2
 8005600:	0022      	movs	r2, r4
 8005602:	602b      	str	r3, [r5, #0]
 8005604:	3243      	adds	r2, #67	; 0x43
 8005606:	7812      	ldrb	r2, [r2, #0]
 8005608:	2a00      	cmp	r2, #0
 800560a:	d001      	beq.n	8005610 <_printf_common+0x24>
 800560c:	3301      	adds	r3, #1
 800560e:	602b      	str	r3, [r5, #0]
 8005610:	6823      	ldr	r3, [r4, #0]
 8005612:	069b      	lsls	r3, r3, #26
 8005614:	d502      	bpl.n	800561c <_printf_common+0x30>
 8005616:	682b      	ldr	r3, [r5, #0]
 8005618:	3302      	adds	r3, #2
 800561a:	602b      	str	r3, [r5, #0]
 800561c:	6822      	ldr	r2, [r4, #0]
 800561e:	2306      	movs	r3, #6
 8005620:	0017      	movs	r7, r2
 8005622:	401f      	ands	r7, r3
 8005624:	421a      	tst	r2, r3
 8005626:	d027      	beq.n	8005678 <_printf_common+0x8c>
 8005628:	0023      	movs	r3, r4
 800562a:	3343      	adds	r3, #67	; 0x43
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	1e5a      	subs	r2, r3, #1
 8005630:	4193      	sbcs	r3, r2
 8005632:	6822      	ldr	r2, [r4, #0]
 8005634:	0692      	lsls	r2, r2, #26
 8005636:	d430      	bmi.n	800569a <_printf_common+0xae>
 8005638:	0022      	movs	r2, r4
 800563a:	9901      	ldr	r1, [sp, #4]
 800563c:	9800      	ldr	r0, [sp, #0]
 800563e:	9e08      	ldr	r6, [sp, #32]
 8005640:	3243      	adds	r2, #67	; 0x43
 8005642:	47b0      	blx	r6
 8005644:	1c43      	adds	r3, r0, #1
 8005646:	d025      	beq.n	8005694 <_printf_common+0xa8>
 8005648:	2306      	movs	r3, #6
 800564a:	6820      	ldr	r0, [r4, #0]
 800564c:	682a      	ldr	r2, [r5, #0]
 800564e:	68e1      	ldr	r1, [r4, #12]
 8005650:	2500      	movs	r5, #0
 8005652:	4003      	ands	r3, r0
 8005654:	2b04      	cmp	r3, #4
 8005656:	d103      	bne.n	8005660 <_printf_common+0x74>
 8005658:	1a8d      	subs	r5, r1, r2
 800565a:	43eb      	mvns	r3, r5
 800565c:	17db      	asrs	r3, r3, #31
 800565e:	401d      	ands	r5, r3
 8005660:	68a3      	ldr	r3, [r4, #8]
 8005662:	6922      	ldr	r2, [r4, #16]
 8005664:	4293      	cmp	r3, r2
 8005666:	dd01      	ble.n	800566c <_printf_common+0x80>
 8005668:	1a9b      	subs	r3, r3, r2
 800566a:	18ed      	adds	r5, r5, r3
 800566c:	2700      	movs	r7, #0
 800566e:	42bd      	cmp	r5, r7
 8005670:	d120      	bne.n	80056b4 <_printf_common+0xc8>
 8005672:	2000      	movs	r0, #0
 8005674:	e010      	b.n	8005698 <_printf_common+0xac>
 8005676:	3701      	adds	r7, #1
 8005678:	68e3      	ldr	r3, [r4, #12]
 800567a:	682a      	ldr	r2, [r5, #0]
 800567c:	1a9b      	subs	r3, r3, r2
 800567e:	42bb      	cmp	r3, r7
 8005680:	ddd2      	ble.n	8005628 <_printf_common+0x3c>
 8005682:	0022      	movs	r2, r4
 8005684:	2301      	movs	r3, #1
 8005686:	9901      	ldr	r1, [sp, #4]
 8005688:	9800      	ldr	r0, [sp, #0]
 800568a:	9e08      	ldr	r6, [sp, #32]
 800568c:	3219      	adds	r2, #25
 800568e:	47b0      	blx	r6
 8005690:	1c43      	adds	r3, r0, #1
 8005692:	d1f0      	bne.n	8005676 <_printf_common+0x8a>
 8005694:	2001      	movs	r0, #1
 8005696:	4240      	negs	r0, r0
 8005698:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800569a:	2030      	movs	r0, #48	; 0x30
 800569c:	18e1      	adds	r1, r4, r3
 800569e:	3143      	adds	r1, #67	; 0x43
 80056a0:	7008      	strb	r0, [r1, #0]
 80056a2:	0021      	movs	r1, r4
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	3145      	adds	r1, #69	; 0x45
 80056a8:	7809      	ldrb	r1, [r1, #0]
 80056aa:	18a2      	adds	r2, r4, r2
 80056ac:	3243      	adds	r2, #67	; 0x43
 80056ae:	3302      	adds	r3, #2
 80056b0:	7011      	strb	r1, [r2, #0]
 80056b2:	e7c1      	b.n	8005638 <_printf_common+0x4c>
 80056b4:	0022      	movs	r2, r4
 80056b6:	2301      	movs	r3, #1
 80056b8:	9901      	ldr	r1, [sp, #4]
 80056ba:	9800      	ldr	r0, [sp, #0]
 80056bc:	9e08      	ldr	r6, [sp, #32]
 80056be:	321a      	adds	r2, #26
 80056c0:	47b0      	blx	r6
 80056c2:	1c43      	adds	r3, r0, #1
 80056c4:	d0e6      	beq.n	8005694 <_printf_common+0xa8>
 80056c6:	3701      	adds	r7, #1
 80056c8:	e7d1      	b.n	800566e <_printf_common+0x82>
	...

080056cc <_printf_i>:
 80056cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056ce:	b08b      	sub	sp, #44	; 0x2c
 80056d0:	9206      	str	r2, [sp, #24]
 80056d2:	000a      	movs	r2, r1
 80056d4:	3243      	adds	r2, #67	; 0x43
 80056d6:	9307      	str	r3, [sp, #28]
 80056d8:	9005      	str	r0, [sp, #20]
 80056da:	9204      	str	r2, [sp, #16]
 80056dc:	7e0a      	ldrb	r2, [r1, #24]
 80056de:	000c      	movs	r4, r1
 80056e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80056e2:	2a78      	cmp	r2, #120	; 0x78
 80056e4:	d807      	bhi.n	80056f6 <_printf_i+0x2a>
 80056e6:	2a62      	cmp	r2, #98	; 0x62
 80056e8:	d809      	bhi.n	80056fe <_printf_i+0x32>
 80056ea:	2a00      	cmp	r2, #0
 80056ec:	d100      	bne.n	80056f0 <_printf_i+0x24>
 80056ee:	e0c1      	b.n	8005874 <_printf_i+0x1a8>
 80056f0:	2a58      	cmp	r2, #88	; 0x58
 80056f2:	d100      	bne.n	80056f6 <_printf_i+0x2a>
 80056f4:	e08c      	b.n	8005810 <_printf_i+0x144>
 80056f6:	0026      	movs	r6, r4
 80056f8:	3642      	adds	r6, #66	; 0x42
 80056fa:	7032      	strb	r2, [r6, #0]
 80056fc:	e022      	b.n	8005744 <_printf_i+0x78>
 80056fe:	0010      	movs	r0, r2
 8005700:	3863      	subs	r0, #99	; 0x63
 8005702:	2815      	cmp	r0, #21
 8005704:	d8f7      	bhi.n	80056f6 <_printf_i+0x2a>
 8005706:	f7fa fd11 	bl	800012c <__gnu_thumb1_case_shi>
 800570a:	0016      	.short	0x0016
 800570c:	fff6001f 	.word	0xfff6001f
 8005710:	fff6fff6 	.word	0xfff6fff6
 8005714:	001ffff6 	.word	0x001ffff6
 8005718:	fff6fff6 	.word	0xfff6fff6
 800571c:	fff6fff6 	.word	0xfff6fff6
 8005720:	003600a8 	.word	0x003600a8
 8005724:	fff6009a 	.word	0xfff6009a
 8005728:	00b9fff6 	.word	0x00b9fff6
 800572c:	0036fff6 	.word	0x0036fff6
 8005730:	fff6fff6 	.word	0xfff6fff6
 8005734:	009e      	.short	0x009e
 8005736:	0026      	movs	r6, r4
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	3642      	adds	r6, #66	; 0x42
 800573c:	1d11      	adds	r1, r2, #4
 800573e:	6019      	str	r1, [r3, #0]
 8005740:	6813      	ldr	r3, [r2, #0]
 8005742:	7033      	strb	r3, [r6, #0]
 8005744:	2301      	movs	r3, #1
 8005746:	e0a7      	b.n	8005898 <_printf_i+0x1cc>
 8005748:	6808      	ldr	r0, [r1, #0]
 800574a:	6819      	ldr	r1, [r3, #0]
 800574c:	1d0a      	adds	r2, r1, #4
 800574e:	0605      	lsls	r5, r0, #24
 8005750:	d50b      	bpl.n	800576a <_printf_i+0x9e>
 8005752:	680d      	ldr	r5, [r1, #0]
 8005754:	601a      	str	r2, [r3, #0]
 8005756:	2d00      	cmp	r5, #0
 8005758:	da03      	bge.n	8005762 <_printf_i+0x96>
 800575a:	232d      	movs	r3, #45	; 0x2d
 800575c:	9a04      	ldr	r2, [sp, #16]
 800575e:	426d      	negs	r5, r5
 8005760:	7013      	strb	r3, [r2, #0]
 8005762:	4b61      	ldr	r3, [pc, #388]	; (80058e8 <_printf_i+0x21c>)
 8005764:	270a      	movs	r7, #10
 8005766:	9303      	str	r3, [sp, #12]
 8005768:	e01b      	b.n	80057a2 <_printf_i+0xd6>
 800576a:	680d      	ldr	r5, [r1, #0]
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	0641      	lsls	r1, r0, #25
 8005770:	d5f1      	bpl.n	8005756 <_printf_i+0x8a>
 8005772:	b22d      	sxth	r5, r5
 8005774:	e7ef      	b.n	8005756 <_printf_i+0x8a>
 8005776:	680d      	ldr	r5, [r1, #0]
 8005778:	6819      	ldr	r1, [r3, #0]
 800577a:	1d08      	adds	r0, r1, #4
 800577c:	6018      	str	r0, [r3, #0]
 800577e:	062e      	lsls	r6, r5, #24
 8005780:	d501      	bpl.n	8005786 <_printf_i+0xba>
 8005782:	680d      	ldr	r5, [r1, #0]
 8005784:	e003      	b.n	800578e <_printf_i+0xc2>
 8005786:	066d      	lsls	r5, r5, #25
 8005788:	d5fb      	bpl.n	8005782 <_printf_i+0xb6>
 800578a:	680d      	ldr	r5, [r1, #0]
 800578c:	b2ad      	uxth	r5, r5
 800578e:	4b56      	ldr	r3, [pc, #344]	; (80058e8 <_printf_i+0x21c>)
 8005790:	2708      	movs	r7, #8
 8005792:	9303      	str	r3, [sp, #12]
 8005794:	2a6f      	cmp	r2, #111	; 0x6f
 8005796:	d000      	beq.n	800579a <_printf_i+0xce>
 8005798:	3702      	adds	r7, #2
 800579a:	0023      	movs	r3, r4
 800579c:	2200      	movs	r2, #0
 800579e:	3343      	adds	r3, #67	; 0x43
 80057a0:	701a      	strb	r2, [r3, #0]
 80057a2:	6863      	ldr	r3, [r4, #4]
 80057a4:	60a3      	str	r3, [r4, #8]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	db03      	blt.n	80057b2 <_printf_i+0xe6>
 80057aa:	2204      	movs	r2, #4
 80057ac:	6821      	ldr	r1, [r4, #0]
 80057ae:	4391      	bics	r1, r2
 80057b0:	6021      	str	r1, [r4, #0]
 80057b2:	2d00      	cmp	r5, #0
 80057b4:	d102      	bne.n	80057bc <_printf_i+0xf0>
 80057b6:	9e04      	ldr	r6, [sp, #16]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00c      	beq.n	80057d6 <_printf_i+0x10a>
 80057bc:	9e04      	ldr	r6, [sp, #16]
 80057be:	0028      	movs	r0, r5
 80057c0:	0039      	movs	r1, r7
 80057c2:	f7fa fd43 	bl	800024c <__aeabi_uidivmod>
 80057c6:	9b03      	ldr	r3, [sp, #12]
 80057c8:	3e01      	subs	r6, #1
 80057ca:	5c5b      	ldrb	r3, [r3, r1]
 80057cc:	7033      	strb	r3, [r6, #0]
 80057ce:	002b      	movs	r3, r5
 80057d0:	0005      	movs	r5, r0
 80057d2:	429f      	cmp	r7, r3
 80057d4:	d9f3      	bls.n	80057be <_printf_i+0xf2>
 80057d6:	2f08      	cmp	r7, #8
 80057d8:	d109      	bne.n	80057ee <_printf_i+0x122>
 80057da:	6823      	ldr	r3, [r4, #0]
 80057dc:	07db      	lsls	r3, r3, #31
 80057de:	d506      	bpl.n	80057ee <_printf_i+0x122>
 80057e0:	6863      	ldr	r3, [r4, #4]
 80057e2:	6922      	ldr	r2, [r4, #16]
 80057e4:	4293      	cmp	r3, r2
 80057e6:	dc02      	bgt.n	80057ee <_printf_i+0x122>
 80057e8:	2330      	movs	r3, #48	; 0x30
 80057ea:	3e01      	subs	r6, #1
 80057ec:	7033      	strb	r3, [r6, #0]
 80057ee:	9b04      	ldr	r3, [sp, #16]
 80057f0:	1b9b      	subs	r3, r3, r6
 80057f2:	6123      	str	r3, [r4, #16]
 80057f4:	9b07      	ldr	r3, [sp, #28]
 80057f6:	0021      	movs	r1, r4
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	9805      	ldr	r0, [sp, #20]
 80057fc:	9b06      	ldr	r3, [sp, #24]
 80057fe:	aa09      	add	r2, sp, #36	; 0x24
 8005800:	f7ff fef4 	bl	80055ec <_printf_common>
 8005804:	1c43      	adds	r3, r0, #1
 8005806:	d14c      	bne.n	80058a2 <_printf_i+0x1d6>
 8005808:	2001      	movs	r0, #1
 800580a:	4240      	negs	r0, r0
 800580c:	b00b      	add	sp, #44	; 0x2c
 800580e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005810:	3145      	adds	r1, #69	; 0x45
 8005812:	700a      	strb	r2, [r1, #0]
 8005814:	4a34      	ldr	r2, [pc, #208]	; (80058e8 <_printf_i+0x21c>)
 8005816:	9203      	str	r2, [sp, #12]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	6821      	ldr	r1, [r4, #0]
 800581c:	ca20      	ldmia	r2!, {r5}
 800581e:	601a      	str	r2, [r3, #0]
 8005820:	0608      	lsls	r0, r1, #24
 8005822:	d516      	bpl.n	8005852 <_printf_i+0x186>
 8005824:	07cb      	lsls	r3, r1, #31
 8005826:	d502      	bpl.n	800582e <_printf_i+0x162>
 8005828:	2320      	movs	r3, #32
 800582a:	4319      	orrs	r1, r3
 800582c:	6021      	str	r1, [r4, #0]
 800582e:	2710      	movs	r7, #16
 8005830:	2d00      	cmp	r5, #0
 8005832:	d1b2      	bne.n	800579a <_printf_i+0xce>
 8005834:	2320      	movs	r3, #32
 8005836:	6822      	ldr	r2, [r4, #0]
 8005838:	439a      	bics	r2, r3
 800583a:	6022      	str	r2, [r4, #0]
 800583c:	e7ad      	b.n	800579a <_printf_i+0xce>
 800583e:	2220      	movs	r2, #32
 8005840:	6809      	ldr	r1, [r1, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	6022      	str	r2, [r4, #0]
 8005846:	0022      	movs	r2, r4
 8005848:	2178      	movs	r1, #120	; 0x78
 800584a:	3245      	adds	r2, #69	; 0x45
 800584c:	7011      	strb	r1, [r2, #0]
 800584e:	4a27      	ldr	r2, [pc, #156]	; (80058ec <_printf_i+0x220>)
 8005850:	e7e1      	b.n	8005816 <_printf_i+0x14a>
 8005852:	0648      	lsls	r0, r1, #25
 8005854:	d5e6      	bpl.n	8005824 <_printf_i+0x158>
 8005856:	b2ad      	uxth	r5, r5
 8005858:	e7e4      	b.n	8005824 <_printf_i+0x158>
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	680d      	ldr	r5, [r1, #0]
 800585e:	1d10      	adds	r0, r2, #4
 8005860:	6949      	ldr	r1, [r1, #20]
 8005862:	6018      	str	r0, [r3, #0]
 8005864:	6813      	ldr	r3, [r2, #0]
 8005866:	062e      	lsls	r6, r5, #24
 8005868:	d501      	bpl.n	800586e <_printf_i+0x1a2>
 800586a:	6019      	str	r1, [r3, #0]
 800586c:	e002      	b.n	8005874 <_printf_i+0x1a8>
 800586e:	066d      	lsls	r5, r5, #25
 8005870:	d5fb      	bpl.n	800586a <_printf_i+0x19e>
 8005872:	8019      	strh	r1, [r3, #0]
 8005874:	2300      	movs	r3, #0
 8005876:	9e04      	ldr	r6, [sp, #16]
 8005878:	6123      	str	r3, [r4, #16]
 800587a:	e7bb      	b.n	80057f4 <_printf_i+0x128>
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	1d11      	adds	r1, r2, #4
 8005880:	6019      	str	r1, [r3, #0]
 8005882:	6816      	ldr	r6, [r2, #0]
 8005884:	2100      	movs	r1, #0
 8005886:	0030      	movs	r0, r6
 8005888:	6862      	ldr	r2, [r4, #4]
 800588a:	f000 ff05 	bl	8006698 <memchr>
 800588e:	2800      	cmp	r0, #0
 8005890:	d001      	beq.n	8005896 <_printf_i+0x1ca>
 8005892:	1b80      	subs	r0, r0, r6
 8005894:	6060      	str	r0, [r4, #4]
 8005896:	6863      	ldr	r3, [r4, #4]
 8005898:	6123      	str	r3, [r4, #16]
 800589a:	2300      	movs	r3, #0
 800589c:	9a04      	ldr	r2, [sp, #16]
 800589e:	7013      	strb	r3, [r2, #0]
 80058a0:	e7a8      	b.n	80057f4 <_printf_i+0x128>
 80058a2:	6923      	ldr	r3, [r4, #16]
 80058a4:	0032      	movs	r2, r6
 80058a6:	9906      	ldr	r1, [sp, #24]
 80058a8:	9805      	ldr	r0, [sp, #20]
 80058aa:	9d07      	ldr	r5, [sp, #28]
 80058ac:	47a8      	blx	r5
 80058ae:	1c43      	adds	r3, r0, #1
 80058b0:	d0aa      	beq.n	8005808 <_printf_i+0x13c>
 80058b2:	6823      	ldr	r3, [r4, #0]
 80058b4:	079b      	lsls	r3, r3, #30
 80058b6:	d415      	bmi.n	80058e4 <_printf_i+0x218>
 80058b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058ba:	68e0      	ldr	r0, [r4, #12]
 80058bc:	4298      	cmp	r0, r3
 80058be:	daa5      	bge.n	800580c <_printf_i+0x140>
 80058c0:	0018      	movs	r0, r3
 80058c2:	e7a3      	b.n	800580c <_printf_i+0x140>
 80058c4:	0022      	movs	r2, r4
 80058c6:	2301      	movs	r3, #1
 80058c8:	9906      	ldr	r1, [sp, #24]
 80058ca:	9805      	ldr	r0, [sp, #20]
 80058cc:	9e07      	ldr	r6, [sp, #28]
 80058ce:	3219      	adds	r2, #25
 80058d0:	47b0      	blx	r6
 80058d2:	1c43      	adds	r3, r0, #1
 80058d4:	d098      	beq.n	8005808 <_printf_i+0x13c>
 80058d6:	3501      	adds	r5, #1
 80058d8:	68e3      	ldr	r3, [r4, #12]
 80058da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058dc:	1a9b      	subs	r3, r3, r2
 80058de:	42ab      	cmp	r3, r5
 80058e0:	dcf0      	bgt.n	80058c4 <_printf_i+0x1f8>
 80058e2:	e7e9      	b.n	80058b8 <_printf_i+0x1ec>
 80058e4:	2500      	movs	r5, #0
 80058e6:	e7f7      	b.n	80058d8 <_printf_i+0x20c>
 80058e8:	0800806a 	.word	0x0800806a
 80058ec:	0800807b 	.word	0x0800807b

080058f0 <siprintf>:
 80058f0:	b40e      	push	{r1, r2, r3}
 80058f2:	b500      	push	{lr}
 80058f4:	490b      	ldr	r1, [pc, #44]	; (8005924 <siprintf+0x34>)
 80058f6:	b09c      	sub	sp, #112	; 0x70
 80058f8:	ab1d      	add	r3, sp, #116	; 0x74
 80058fa:	9002      	str	r0, [sp, #8]
 80058fc:	9006      	str	r0, [sp, #24]
 80058fe:	9107      	str	r1, [sp, #28]
 8005900:	9104      	str	r1, [sp, #16]
 8005902:	4809      	ldr	r0, [pc, #36]	; (8005928 <siprintf+0x38>)
 8005904:	4909      	ldr	r1, [pc, #36]	; (800592c <siprintf+0x3c>)
 8005906:	cb04      	ldmia	r3!, {r2}
 8005908:	9105      	str	r1, [sp, #20]
 800590a:	6800      	ldr	r0, [r0, #0]
 800590c:	a902      	add	r1, sp, #8
 800590e:	9301      	str	r3, [sp, #4]
 8005910:	f001 fbe2 	bl	80070d8 <_svfiprintf_r>
 8005914:	2300      	movs	r3, #0
 8005916:	9a02      	ldr	r2, [sp, #8]
 8005918:	7013      	strb	r3, [r2, #0]
 800591a:	b01c      	add	sp, #112	; 0x70
 800591c:	bc08      	pop	{r3}
 800591e:	b003      	add	sp, #12
 8005920:	4718      	bx	r3
 8005922:	46c0      	nop			; (mov r8, r8)
 8005924:	7fffffff 	.word	0x7fffffff
 8005928:	2000000c 	.word	0x2000000c
 800592c:	ffff0208 	.word	0xffff0208

08005930 <quorem>:
 8005930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005932:	0006      	movs	r6, r0
 8005934:	690b      	ldr	r3, [r1, #16]
 8005936:	6932      	ldr	r2, [r6, #16]
 8005938:	b087      	sub	sp, #28
 800593a:	2000      	movs	r0, #0
 800593c:	9103      	str	r1, [sp, #12]
 800593e:	429a      	cmp	r2, r3
 8005940:	db65      	blt.n	8005a0e <quorem+0xde>
 8005942:	3b01      	subs	r3, #1
 8005944:	009c      	lsls	r4, r3, #2
 8005946:	9300      	str	r3, [sp, #0]
 8005948:	000b      	movs	r3, r1
 800594a:	3314      	adds	r3, #20
 800594c:	9305      	str	r3, [sp, #20]
 800594e:	191b      	adds	r3, r3, r4
 8005950:	9304      	str	r3, [sp, #16]
 8005952:	0033      	movs	r3, r6
 8005954:	3314      	adds	r3, #20
 8005956:	9302      	str	r3, [sp, #8]
 8005958:	191c      	adds	r4, r3, r4
 800595a:	9b04      	ldr	r3, [sp, #16]
 800595c:	6827      	ldr	r7, [r4, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	0038      	movs	r0, r7
 8005962:	1c5d      	adds	r5, r3, #1
 8005964:	0029      	movs	r1, r5
 8005966:	9301      	str	r3, [sp, #4]
 8005968:	f7fa fbea 	bl	8000140 <__udivsi3>
 800596c:	9001      	str	r0, [sp, #4]
 800596e:	42af      	cmp	r7, r5
 8005970:	d324      	bcc.n	80059bc <quorem+0x8c>
 8005972:	2500      	movs	r5, #0
 8005974:	46ac      	mov	ip, r5
 8005976:	9802      	ldr	r0, [sp, #8]
 8005978:	9f05      	ldr	r7, [sp, #20]
 800597a:	cf08      	ldmia	r7!, {r3}
 800597c:	9a01      	ldr	r2, [sp, #4]
 800597e:	b299      	uxth	r1, r3
 8005980:	4351      	muls	r1, r2
 8005982:	0c1b      	lsrs	r3, r3, #16
 8005984:	4353      	muls	r3, r2
 8005986:	1949      	adds	r1, r1, r5
 8005988:	0c0a      	lsrs	r2, r1, #16
 800598a:	189b      	adds	r3, r3, r2
 800598c:	6802      	ldr	r2, [r0, #0]
 800598e:	b289      	uxth	r1, r1
 8005990:	b292      	uxth	r2, r2
 8005992:	4462      	add	r2, ip
 8005994:	1a52      	subs	r2, r2, r1
 8005996:	6801      	ldr	r1, [r0, #0]
 8005998:	0c1d      	lsrs	r5, r3, #16
 800599a:	0c09      	lsrs	r1, r1, #16
 800599c:	b29b      	uxth	r3, r3
 800599e:	1acb      	subs	r3, r1, r3
 80059a0:	1411      	asrs	r1, r2, #16
 80059a2:	185b      	adds	r3, r3, r1
 80059a4:	1419      	asrs	r1, r3, #16
 80059a6:	b292      	uxth	r2, r2
 80059a8:	041b      	lsls	r3, r3, #16
 80059aa:	431a      	orrs	r2, r3
 80059ac:	9b04      	ldr	r3, [sp, #16]
 80059ae:	468c      	mov	ip, r1
 80059b0:	c004      	stmia	r0!, {r2}
 80059b2:	42bb      	cmp	r3, r7
 80059b4:	d2e1      	bcs.n	800597a <quorem+0x4a>
 80059b6:	6823      	ldr	r3, [r4, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d030      	beq.n	8005a1e <quorem+0xee>
 80059bc:	0030      	movs	r0, r6
 80059be:	9903      	ldr	r1, [sp, #12]
 80059c0:	f001 f902 	bl	8006bc8 <__mcmp>
 80059c4:	2800      	cmp	r0, #0
 80059c6:	db21      	blt.n	8005a0c <quorem+0xdc>
 80059c8:	0030      	movs	r0, r6
 80059ca:	2400      	movs	r4, #0
 80059cc:	9b01      	ldr	r3, [sp, #4]
 80059ce:	9903      	ldr	r1, [sp, #12]
 80059d0:	3301      	adds	r3, #1
 80059d2:	9301      	str	r3, [sp, #4]
 80059d4:	3014      	adds	r0, #20
 80059d6:	3114      	adds	r1, #20
 80059d8:	6803      	ldr	r3, [r0, #0]
 80059da:	c920      	ldmia	r1!, {r5}
 80059dc:	b29a      	uxth	r2, r3
 80059de:	1914      	adds	r4, r2, r4
 80059e0:	b2aa      	uxth	r2, r5
 80059e2:	1aa2      	subs	r2, r4, r2
 80059e4:	0c1b      	lsrs	r3, r3, #16
 80059e6:	0c2d      	lsrs	r5, r5, #16
 80059e8:	1414      	asrs	r4, r2, #16
 80059ea:	1b5b      	subs	r3, r3, r5
 80059ec:	191b      	adds	r3, r3, r4
 80059ee:	141c      	asrs	r4, r3, #16
 80059f0:	b292      	uxth	r2, r2
 80059f2:	041b      	lsls	r3, r3, #16
 80059f4:	4313      	orrs	r3, r2
 80059f6:	c008      	stmia	r0!, {r3}
 80059f8:	9b04      	ldr	r3, [sp, #16]
 80059fa:	428b      	cmp	r3, r1
 80059fc:	d2ec      	bcs.n	80059d8 <quorem+0xa8>
 80059fe:	9b00      	ldr	r3, [sp, #0]
 8005a00:	9a02      	ldr	r2, [sp, #8]
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	18d3      	adds	r3, r2, r3
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	2a00      	cmp	r2, #0
 8005a0a:	d015      	beq.n	8005a38 <quorem+0x108>
 8005a0c:	9801      	ldr	r0, [sp, #4]
 8005a0e:	b007      	add	sp, #28
 8005a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a12:	6823      	ldr	r3, [r4, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d106      	bne.n	8005a26 <quorem+0xf6>
 8005a18:	9b00      	ldr	r3, [sp, #0]
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	9b02      	ldr	r3, [sp, #8]
 8005a20:	3c04      	subs	r4, #4
 8005a22:	42a3      	cmp	r3, r4
 8005a24:	d3f5      	bcc.n	8005a12 <quorem+0xe2>
 8005a26:	9b00      	ldr	r3, [sp, #0]
 8005a28:	6133      	str	r3, [r6, #16]
 8005a2a:	e7c7      	b.n	80059bc <quorem+0x8c>
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	2a00      	cmp	r2, #0
 8005a30:	d106      	bne.n	8005a40 <quorem+0x110>
 8005a32:	9a00      	ldr	r2, [sp, #0]
 8005a34:	3a01      	subs	r2, #1
 8005a36:	9200      	str	r2, [sp, #0]
 8005a38:	9a02      	ldr	r2, [sp, #8]
 8005a3a:	3b04      	subs	r3, #4
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d3f5      	bcc.n	8005a2c <quorem+0xfc>
 8005a40:	9b00      	ldr	r3, [sp, #0]
 8005a42:	6133      	str	r3, [r6, #16]
 8005a44:	e7e2      	b.n	8005a0c <quorem+0xdc>
	...

08005a48 <_dtoa_r>:
 8005a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a4a:	b09d      	sub	sp, #116	; 0x74
 8005a4c:	9202      	str	r2, [sp, #8]
 8005a4e:	9303      	str	r3, [sp, #12]
 8005a50:	9b02      	ldr	r3, [sp, #8]
 8005a52:	9c03      	ldr	r4, [sp, #12]
 8005a54:	9308      	str	r3, [sp, #32]
 8005a56:	9409      	str	r4, [sp, #36]	; 0x24
 8005a58:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005a5a:	0007      	movs	r7, r0
 8005a5c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8005a5e:	2c00      	cmp	r4, #0
 8005a60:	d10e      	bne.n	8005a80 <_dtoa_r+0x38>
 8005a62:	2010      	movs	r0, #16
 8005a64:	f000 fe0e 	bl	8006684 <malloc>
 8005a68:	1e02      	subs	r2, r0, #0
 8005a6a:	6278      	str	r0, [r7, #36]	; 0x24
 8005a6c:	d104      	bne.n	8005a78 <_dtoa_r+0x30>
 8005a6e:	21ea      	movs	r1, #234	; 0xea
 8005a70:	4bc7      	ldr	r3, [pc, #796]	; (8005d90 <_dtoa_r+0x348>)
 8005a72:	48c8      	ldr	r0, [pc, #800]	; (8005d94 <_dtoa_r+0x34c>)
 8005a74:	f001 fc42 	bl	80072fc <__assert_func>
 8005a78:	6044      	str	r4, [r0, #4]
 8005a7a:	6084      	str	r4, [r0, #8]
 8005a7c:	6004      	str	r4, [r0, #0]
 8005a7e:	60c4      	str	r4, [r0, #12]
 8005a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a82:	6819      	ldr	r1, [r3, #0]
 8005a84:	2900      	cmp	r1, #0
 8005a86:	d00a      	beq.n	8005a9e <_dtoa_r+0x56>
 8005a88:	685a      	ldr	r2, [r3, #4]
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	4093      	lsls	r3, r2
 8005a8e:	604a      	str	r2, [r1, #4]
 8005a90:	608b      	str	r3, [r1, #8]
 8005a92:	0038      	movs	r0, r7
 8005a94:	f000 fe58 	bl	8006748 <_Bfree>
 8005a98:	2200      	movs	r2, #0
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	601a      	str	r2, [r3, #0]
 8005a9e:	9b03      	ldr	r3, [sp, #12]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	da20      	bge.n	8005ae6 <_dtoa_r+0x9e>
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	602b      	str	r3, [r5, #0]
 8005aa8:	9b03      	ldr	r3, [sp, #12]
 8005aaa:	005b      	lsls	r3, r3, #1
 8005aac:	085b      	lsrs	r3, r3, #1
 8005aae:	9309      	str	r3, [sp, #36]	; 0x24
 8005ab0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005ab2:	4bb9      	ldr	r3, [pc, #740]	; (8005d98 <_dtoa_r+0x350>)
 8005ab4:	4ab8      	ldr	r2, [pc, #736]	; (8005d98 <_dtoa_r+0x350>)
 8005ab6:	402b      	ands	r3, r5
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d117      	bne.n	8005aec <_dtoa_r+0xa4>
 8005abc:	4bb7      	ldr	r3, [pc, #732]	; (8005d9c <_dtoa_r+0x354>)
 8005abe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005ac0:	0328      	lsls	r0, r5, #12
 8005ac2:	6013      	str	r3, [r2, #0]
 8005ac4:	9b02      	ldr	r3, [sp, #8]
 8005ac6:	0b00      	lsrs	r0, r0, #12
 8005ac8:	4318      	orrs	r0, r3
 8005aca:	d101      	bne.n	8005ad0 <_dtoa_r+0x88>
 8005acc:	f000 fdbf 	bl	800664e <_dtoa_r+0xc06>
 8005ad0:	48b3      	ldr	r0, [pc, #716]	; (8005da0 <_dtoa_r+0x358>)
 8005ad2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005ad4:	9006      	str	r0, [sp, #24]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d002      	beq.n	8005ae0 <_dtoa_r+0x98>
 8005ada:	4bb2      	ldr	r3, [pc, #712]	; (8005da4 <_dtoa_r+0x35c>)
 8005adc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005ade:	6013      	str	r3, [r2, #0]
 8005ae0:	9806      	ldr	r0, [sp, #24]
 8005ae2:	b01d      	add	sp, #116	; 0x74
 8005ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	602b      	str	r3, [r5, #0]
 8005aea:	e7e1      	b.n	8005ab0 <_dtoa_r+0x68>
 8005aec:	9b08      	ldr	r3, [sp, #32]
 8005aee:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005af0:	9312      	str	r3, [sp, #72]	; 0x48
 8005af2:	9413      	str	r4, [sp, #76]	; 0x4c
 8005af4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005af6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005af8:	2200      	movs	r2, #0
 8005afa:	2300      	movs	r3, #0
 8005afc:	f7fa fca6 	bl	800044c <__aeabi_dcmpeq>
 8005b00:	1e04      	subs	r4, r0, #0
 8005b02:	d009      	beq.n	8005b18 <_dtoa_r+0xd0>
 8005b04:	2301      	movs	r3, #1
 8005b06:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005b08:	6013      	str	r3, [r2, #0]
 8005b0a:	4ba7      	ldr	r3, [pc, #668]	; (8005da8 <_dtoa_r+0x360>)
 8005b0c:	9306      	str	r3, [sp, #24]
 8005b0e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d0e5      	beq.n	8005ae0 <_dtoa_r+0x98>
 8005b14:	4ba5      	ldr	r3, [pc, #660]	; (8005dac <_dtoa_r+0x364>)
 8005b16:	e7e1      	b.n	8005adc <_dtoa_r+0x94>
 8005b18:	ab1a      	add	r3, sp, #104	; 0x68
 8005b1a:	9301      	str	r3, [sp, #4]
 8005b1c:	ab1b      	add	r3, sp, #108	; 0x6c
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	0038      	movs	r0, r7
 8005b22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005b24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005b26:	f001 f903 	bl	8006d30 <__d2b>
 8005b2a:	006e      	lsls	r6, r5, #1
 8005b2c:	9005      	str	r0, [sp, #20]
 8005b2e:	0d76      	lsrs	r6, r6, #21
 8005b30:	d100      	bne.n	8005b34 <_dtoa_r+0xec>
 8005b32:	e07c      	b.n	8005c2e <_dtoa_r+0x1e6>
 8005b34:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005b36:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005b38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005b3a:	4a9d      	ldr	r2, [pc, #628]	; (8005db0 <_dtoa_r+0x368>)
 8005b3c:	031b      	lsls	r3, r3, #12
 8005b3e:	0b1b      	lsrs	r3, r3, #12
 8005b40:	431a      	orrs	r2, r3
 8005b42:	0011      	movs	r1, r2
 8005b44:	4b9b      	ldr	r3, [pc, #620]	; (8005db4 <_dtoa_r+0x36c>)
 8005b46:	9418      	str	r4, [sp, #96]	; 0x60
 8005b48:	18f6      	adds	r6, r6, r3
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	4b9a      	ldr	r3, [pc, #616]	; (8005db8 <_dtoa_r+0x370>)
 8005b4e:	f7fb ff6f 	bl	8001a30 <__aeabi_dsub>
 8005b52:	4a9a      	ldr	r2, [pc, #616]	; (8005dbc <_dtoa_r+0x374>)
 8005b54:	4b9a      	ldr	r3, [pc, #616]	; (8005dc0 <_dtoa_r+0x378>)
 8005b56:	f7fb fcff 	bl	8001558 <__aeabi_dmul>
 8005b5a:	4a9a      	ldr	r2, [pc, #616]	; (8005dc4 <_dtoa_r+0x37c>)
 8005b5c:	4b9a      	ldr	r3, [pc, #616]	; (8005dc8 <_dtoa_r+0x380>)
 8005b5e:	f7fa fdbd 	bl	80006dc <__aeabi_dadd>
 8005b62:	0004      	movs	r4, r0
 8005b64:	0030      	movs	r0, r6
 8005b66:	000d      	movs	r5, r1
 8005b68:	f7fc fb48 	bl	80021fc <__aeabi_i2d>
 8005b6c:	4a97      	ldr	r2, [pc, #604]	; (8005dcc <_dtoa_r+0x384>)
 8005b6e:	4b98      	ldr	r3, [pc, #608]	; (8005dd0 <_dtoa_r+0x388>)
 8005b70:	f7fb fcf2 	bl	8001558 <__aeabi_dmul>
 8005b74:	0002      	movs	r2, r0
 8005b76:	000b      	movs	r3, r1
 8005b78:	0020      	movs	r0, r4
 8005b7a:	0029      	movs	r1, r5
 8005b7c:	f7fa fdae 	bl	80006dc <__aeabi_dadd>
 8005b80:	0004      	movs	r4, r0
 8005b82:	000d      	movs	r5, r1
 8005b84:	f7fc fb04 	bl	8002190 <__aeabi_d2iz>
 8005b88:	2200      	movs	r2, #0
 8005b8a:	9002      	str	r0, [sp, #8]
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	0020      	movs	r0, r4
 8005b90:	0029      	movs	r1, r5
 8005b92:	f7fa fc61 	bl	8000458 <__aeabi_dcmplt>
 8005b96:	2800      	cmp	r0, #0
 8005b98:	d00b      	beq.n	8005bb2 <_dtoa_r+0x16a>
 8005b9a:	9802      	ldr	r0, [sp, #8]
 8005b9c:	f7fc fb2e 	bl	80021fc <__aeabi_i2d>
 8005ba0:	002b      	movs	r3, r5
 8005ba2:	0022      	movs	r2, r4
 8005ba4:	f7fa fc52 	bl	800044c <__aeabi_dcmpeq>
 8005ba8:	4243      	negs	r3, r0
 8005baa:	4158      	adcs	r0, r3
 8005bac:	9b02      	ldr	r3, [sp, #8]
 8005bae:	1a1b      	subs	r3, r3, r0
 8005bb0:	9302      	str	r3, [sp, #8]
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	9316      	str	r3, [sp, #88]	; 0x58
 8005bb6:	9b02      	ldr	r3, [sp, #8]
 8005bb8:	2b16      	cmp	r3, #22
 8005bba:	d80f      	bhi.n	8005bdc <_dtoa_r+0x194>
 8005bbc:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005bbe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005bc0:	00da      	lsls	r2, r3, #3
 8005bc2:	4b84      	ldr	r3, [pc, #528]	; (8005dd4 <_dtoa_r+0x38c>)
 8005bc4:	189b      	adds	r3, r3, r2
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f7fa fc45 	bl	8000458 <__aeabi_dcmplt>
 8005bce:	2800      	cmp	r0, #0
 8005bd0:	d049      	beq.n	8005c66 <_dtoa_r+0x21e>
 8005bd2:	9b02      	ldr	r3, [sp, #8]
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	9302      	str	r3, [sp, #8]
 8005bd8:	2300      	movs	r3, #0
 8005bda:	9316      	str	r3, [sp, #88]	; 0x58
 8005bdc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005bde:	1b9e      	subs	r6, r3, r6
 8005be0:	2300      	movs	r3, #0
 8005be2:	930a      	str	r3, [sp, #40]	; 0x28
 8005be4:	0033      	movs	r3, r6
 8005be6:	3b01      	subs	r3, #1
 8005be8:	930d      	str	r3, [sp, #52]	; 0x34
 8005bea:	d504      	bpl.n	8005bf6 <_dtoa_r+0x1ae>
 8005bec:	2301      	movs	r3, #1
 8005bee:	1b9b      	subs	r3, r3, r6
 8005bf0:	930a      	str	r3, [sp, #40]	; 0x28
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	930d      	str	r3, [sp, #52]	; 0x34
 8005bf6:	9b02      	ldr	r3, [sp, #8]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	db36      	blt.n	8005c6a <_dtoa_r+0x222>
 8005bfc:	9a02      	ldr	r2, [sp, #8]
 8005bfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c00:	4694      	mov	ip, r2
 8005c02:	4463      	add	r3, ip
 8005c04:	930d      	str	r3, [sp, #52]	; 0x34
 8005c06:	2300      	movs	r3, #0
 8005c08:	9215      	str	r2, [sp, #84]	; 0x54
 8005c0a:	930e      	str	r3, [sp, #56]	; 0x38
 8005c0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c0e:	2401      	movs	r4, #1
 8005c10:	2b09      	cmp	r3, #9
 8005c12:	d864      	bhi.n	8005cde <_dtoa_r+0x296>
 8005c14:	2b05      	cmp	r3, #5
 8005c16:	dd02      	ble.n	8005c1e <_dtoa_r+0x1d6>
 8005c18:	2400      	movs	r4, #0
 8005c1a:	3b04      	subs	r3, #4
 8005c1c:	9322      	str	r3, [sp, #136]	; 0x88
 8005c1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c20:	1e98      	subs	r0, r3, #2
 8005c22:	2803      	cmp	r0, #3
 8005c24:	d864      	bhi.n	8005cf0 <_dtoa_r+0x2a8>
 8005c26:	f7fa fa77 	bl	8000118 <__gnu_thumb1_case_uqi>
 8005c2a:	3829      	.short	0x3829
 8005c2c:	5836      	.short	0x5836
 8005c2e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005c30:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005c32:	189e      	adds	r6, r3, r2
 8005c34:	4b68      	ldr	r3, [pc, #416]	; (8005dd8 <_dtoa_r+0x390>)
 8005c36:	18f2      	adds	r2, r6, r3
 8005c38:	2a20      	cmp	r2, #32
 8005c3a:	dd0f      	ble.n	8005c5c <_dtoa_r+0x214>
 8005c3c:	2340      	movs	r3, #64	; 0x40
 8005c3e:	1a9b      	subs	r3, r3, r2
 8005c40:	409d      	lsls	r5, r3
 8005c42:	4b66      	ldr	r3, [pc, #408]	; (8005ddc <_dtoa_r+0x394>)
 8005c44:	9802      	ldr	r0, [sp, #8]
 8005c46:	18f3      	adds	r3, r6, r3
 8005c48:	40d8      	lsrs	r0, r3
 8005c4a:	4328      	orrs	r0, r5
 8005c4c:	f7fc fb06 	bl	800225c <__aeabi_ui2d>
 8005c50:	2301      	movs	r3, #1
 8005c52:	4c63      	ldr	r4, [pc, #396]	; (8005de0 <_dtoa_r+0x398>)
 8005c54:	3e01      	subs	r6, #1
 8005c56:	1909      	adds	r1, r1, r4
 8005c58:	9318      	str	r3, [sp, #96]	; 0x60
 8005c5a:	e776      	b.n	8005b4a <_dtoa_r+0x102>
 8005c5c:	2320      	movs	r3, #32
 8005c5e:	9802      	ldr	r0, [sp, #8]
 8005c60:	1a9b      	subs	r3, r3, r2
 8005c62:	4098      	lsls	r0, r3
 8005c64:	e7f2      	b.n	8005c4c <_dtoa_r+0x204>
 8005c66:	9016      	str	r0, [sp, #88]	; 0x58
 8005c68:	e7b8      	b.n	8005bdc <_dtoa_r+0x194>
 8005c6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c6c:	9a02      	ldr	r2, [sp, #8]
 8005c6e:	1a9b      	subs	r3, r3, r2
 8005c70:	930a      	str	r3, [sp, #40]	; 0x28
 8005c72:	4253      	negs	r3, r2
 8005c74:	930e      	str	r3, [sp, #56]	; 0x38
 8005c76:	2300      	movs	r3, #0
 8005c78:	9315      	str	r3, [sp, #84]	; 0x54
 8005c7a:	e7c7      	b.n	8005c0c <_dtoa_r+0x1c4>
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c82:	930c      	str	r3, [sp, #48]	; 0x30
 8005c84:	9307      	str	r3, [sp, #28]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	dc13      	bgt.n	8005cb2 <_dtoa_r+0x26a>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	001a      	movs	r2, r3
 8005c8e:	930c      	str	r3, [sp, #48]	; 0x30
 8005c90:	9307      	str	r3, [sp, #28]
 8005c92:	9223      	str	r2, [sp, #140]	; 0x8c
 8005c94:	e00d      	b.n	8005cb2 <_dtoa_r+0x26a>
 8005c96:	2301      	movs	r3, #1
 8005c98:	e7f1      	b.n	8005c7e <_dtoa_r+0x236>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8005c9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ca0:	4694      	mov	ip, r2
 8005ca2:	9b02      	ldr	r3, [sp, #8]
 8005ca4:	4463      	add	r3, ip
 8005ca6:	930c      	str	r3, [sp, #48]	; 0x30
 8005ca8:	3301      	adds	r3, #1
 8005caa:	9307      	str	r3, [sp, #28]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	dc00      	bgt.n	8005cb2 <_dtoa_r+0x26a>
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005cb6:	6042      	str	r2, [r0, #4]
 8005cb8:	3204      	adds	r2, #4
 8005cba:	0015      	movs	r5, r2
 8005cbc:	3514      	adds	r5, #20
 8005cbe:	6841      	ldr	r1, [r0, #4]
 8005cc0:	429d      	cmp	r5, r3
 8005cc2:	d919      	bls.n	8005cf8 <_dtoa_r+0x2b0>
 8005cc4:	0038      	movs	r0, r7
 8005cc6:	f000 fcfb 	bl	80066c0 <_Balloc>
 8005cca:	9006      	str	r0, [sp, #24]
 8005ccc:	2800      	cmp	r0, #0
 8005cce:	d117      	bne.n	8005d00 <_dtoa_r+0x2b8>
 8005cd0:	21d5      	movs	r1, #213	; 0xd5
 8005cd2:	0002      	movs	r2, r0
 8005cd4:	4b43      	ldr	r3, [pc, #268]	; (8005de4 <_dtoa_r+0x39c>)
 8005cd6:	0049      	lsls	r1, r1, #1
 8005cd8:	e6cb      	b.n	8005a72 <_dtoa_r+0x2a>
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e7de      	b.n	8005c9c <_dtoa_r+0x254>
 8005cde:	2300      	movs	r3, #0
 8005ce0:	940f      	str	r4, [sp, #60]	; 0x3c
 8005ce2:	9322      	str	r3, [sp, #136]	; 0x88
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	930c      	str	r3, [sp, #48]	; 0x30
 8005ce8:	9307      	str	r3, [sp, #28]
 8005cea:	2200      	movs	r2, #0
 8005cec:	3313      	adds	r3, #19
 8005cee:	e7d0      	b.n	8005c92 <_dtoa_r+0x24a>
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	930f      	str	r3, [sp, #60]	; 0x3c
 8005cf4:	3b02      	subs	r3, #2
 8005cf6:	e7f6      	b.n	8005ce6 <_dtoa_r+0x29e>
 8005cf8:	3101      	adds	r1, #1
 8005cfa:	6041      	str	r1, [r0, #4]
 8005cfc:	0052      	lsls	r2, r2, #1
 8005cfe:	e7dc      	b.n	8005cba <_dtoa_r+0x272>
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	9a06      	ldr	r2, [sp, #24]
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	9b07      	ldr	r3, [sp, #28]
 8005d08:	2b0e      	cmp	r3, #14
 8005d0a:	d900      	bls.n	8005d0e <_dtoa_r+0x2c6>
 8005d0c:	e0eb      	b.n	8005ee6 <_dtoa_r+0x49e>
 8005d0e:	2c00      	cmp	r4, #0
 8005d10:	d100      	bne.n	8005d14 <_dtoa_r+0x2cc>
 8005d12:	e0e8      	b.n	8005ee6 <_dtoa_r+0x49e>
 8005d14:	9b02      	ldr	r3, [sp, #8]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	dd68      	ble.n	8005dec <_dtoa_r+0x3a4>
 8005d1a:	001a      	movs	r2, r3
 8005d1c:	210f      	movs	r1, #15
 8005d1e:	4b2d      	ldr	r3, [pc, #180]	; (8005dd4 <_dtoa_r+0x38c>)
 8005d20:	400a      	ands	r2, r1
 8005d22:	00d2      	lsls	r2, r2, #3
 8005d24:	189b      	adds	r3, r3, r2
 8005d26:	681d      	ldr	r5, [r3, #0]
 8005d28:	685e      	ldr	r6, [r3, #4]
 8005d2a:	9b02      	ldr	r3, [sp, #8]
 8005d2c:	111c      	asrs	r4, r3, #4
 8005d2e:	2302      	movs	r3, #2
 8005d30:	9310      	str	r3, [sp, #64]	; 0x40
 8005d32:	9b02      	ldr	r3, [sp, #8]
 8005d34:	05db      	lsls	r3, r3, #23
 8005d36:	d50b      	bpl.n	8005d50 <_dtoa_r+0x308>
 8005d38:	4b2b      	ldr	r3, [pc, #172]	; (8005de8 <_dtoa_r+0x3a0>)
 8005d3a:	400c      	ands	r4, r1
 8005d3c:	6a1a      	ldr	r2, [r3, #32]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005d42:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005d44:	f7fb f806 	bl	8000d54 <__aeabi_ddiv>
 8005d48:	2303      	movs	r3, #3
 8005d4a:	9008      	str	r0, [sp, #32]
 8005d4c:	9109      	str	r1, [sp, #36]	; 0x24
 8005d4e:	9310      	str	r3, [sp, #64]	; 0x40
 8005d50:	4b25      	ldr	r3, [pc, #148]	; (8005de8 <_dtoa_r+0x3a0>)
 8005d52:	9314      	str	r3, [sp, #80]	; 0x50
 8005d54:	2c00      	cmp	r4, #0
 8005d56:	d108      	bne.n	8005d6a <_dtoa_r+0x322>
 8005d58:	9808      	ldr	r0, [sp, #32]
 8005d5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d5c:	002a      	movs	r2, r5
 8005d5e:	0033      	movs	r3, r6
 8005d60:	f7fa fff8 	bl	8000d54 <__aeabi_ddiv>
 8005d64:	9008      	str	r0, [sp, #32]
 8005d66:	9109      	str	r1, [sp, #36]	; 0x24
 8005d68:	e05c      	b.n	8005e24 <_dtoa_r+0x3dc>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	421c      	tst	r4, r3
 8005d6e:	d00b      	beq.n	8005d88 <_dtoa_r+0x340>
 8005d70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d72:	0028      	movs	r0, r5
 8005d74:	3301      	adds	r3, #1
 8005d76:	9310      	str	r3, [sp, #64]	; 0x40
 8005d78:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d7a:	0031      	movs	r1, r6
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f7fb fbea 	bl	8001558 <__aeabi_dmul>
 8005d84:	0005      	movs	r5, r0
 8005d86:	000e      	movs	r6, r1
 8005d88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d8a:	1064      	asrs	r4, r4, #1
 8005d8c:	3308      	adds	r3, #8
 8005d8e:	e7e0      	b.n	8005d52 <_dtoa_r+0x30a>
 8005d90:	08008099 	.word	0x08008099
 8005d94:	080080b0 	.word	0x080080b0
 8005d98:	7ff00000 	.word	0x7ff00000
 8005d9c:	0000270f 	.word	0x0000270f
 8005da0:	08008095 	.word	0x08008095
 8005da4:	08008098 	.word	0x08008098
 8005da8:	08008068 	.word	0x08008068
 8005dac:	08008069 	.word	0x08008069
 8005db0:	3ff00000 	.word	0x3ff00000
 8005db4:	fffffc01 	.word	0xfffffc01
 8005db8:	3ff80000 	.word	0x3ff80000
 8005dbc:	636f4361 	.word	0x636f4361
 8005dc0:	3fd287a7 	.word	0x3fd287a7
 8005dc4:	8b60c8b3 	.word	0x8b60c8b3
 8005dc8:	3fc68a28 	.word	0x3fc68a28
 8005dcc:	509f79fb 	.word	0x509f79fb
 8005dd0:	3fd34413 	.word	0x3fd34413
 8005dd4:	080081a0 	.word	0x080081a0
 8005dd8:	00000432 	.word	0x00000432
 8005ddc:	00000412 	.word	0x00000412
 8005de0:	fe100000 	.word	0xfe100000
 8005de4:	0800810b 	.word	0x0800810b
 8005de8:	08008178 	.word	0x08008178
 8005dec:	2302      	movs	r3, #2
 8005dee:	9310      	str	r3, [sp, #64]	; 0x40
 8005df0:	9b02      	ldr	r3, [sp, #8]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d016      	beq.n	8005e24 <_dtoa_r+0x3dc>
 8005df6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005df8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005dfa:	425c      	negs	r4, r3
 8005dfc:	230f      	movs	r3, #15
 8005dfe:	4ab6      	ldr	r2, [pc, #728]	; (80060d8 <_dtoa_r+0x690>)
 8005e00:	4023      	ands	r3, r4
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	18d3      	adds	r3, r2, r3
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f7fb fba5 	bl	8001558 <__aeabi_dmul>
 8005e0e:	2601      	movs	r6, #1
 8005e10:	2300      	movs	r3, #0
 8005e12:	9008      	str	r0, [sp, #32]
 8005e14:	9109      	str	r1, [sp, #36]	; 0x24
 8005e16:	4db1      	ldr	r5, [pc, #708]	; (80060dc <_dtoa_r+0x694>)
 8005e18:	1124      	asrs	r4, r4, #4
 8005e1a:	2c00      	cmp	r4, #0
 8005e1c:	d000      	beq.n	8005e20 <_dtoa_r+0x3d8>
 8005e1e:	e094      	b.n	8005f4a <_dtoa_r+0x502>
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d19f      	bne.n	8005d64 <_dtoa_r+0x31c>
 8005e24:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d100      	bne.n	8005e2c <_dtoa_r+0x3e4>
 8005e2a:	e09b      	b.n	8005f64 <_dtoa_r+0x51c>
 8005e2c:	9c08      	ldr	r4, [sp, #32]
 8005e2e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005e30:	2200      	movs	r2, #0
 8005e32:	0020      	movs	r0, r4
 8005e34:	0029      	movs	r1, r5
 8005e36:	4baa      	ldr	r3, [pc, #680]	; (80060e0 <_dtoa_r+0x698>)
 8005e38:	f7fa fb0e 	bl	8000458 <__aeabi_dcmplt>
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	d100      	bne.n	8005e42 <_dtoa_r+0x3fa>
 8005e40:	e090      	b.n	8005f64 <_dtoa_r+0x51c>
 8005e42:	9b07      	ldr	r3, [sp, #28]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d100      	bne.n	8005e4a <_dtoa_r+0x402>
 8005e48:	e08c      	b.n	8005f64 <_dtoa_r+0x51c>
 8005e4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	dd46      	ble.n	8005ede <_dtoa_r+0x496>
 8005e50:	9b02      	ldr	r3, [sp, #8]
 8005e52:	2200      	movs	r2, #0
 8005e54:	0020      	movs	r0, r4
 8005e56:	0029      	movs	r1, r5
 8005e58:	1e5e      	subs	r6, r3, #1
 8005e5a:	4ba2      	ldr	r3, [pc, #648]	; (80060e4 <_dtoa_r+0x69c>)
 8005e5c:	f7fb fb7c 	bl	8001558 <__aeabi_dmul>
 8005e60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e62:	9008      	str	r0, [sp, #32]
 8005e64:	9109      	str	r1, [sp, #36]	; 0x24
 8005e66:	3301      	adds	r3, #1
 8005e68:	9310      	str	r3, [sp, #64]	; 0x40
 8005e6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e6c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005e6e:	9c08      	ldr	r4, [sp, #32]
 8005e70:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005e72:	9314      	str	r3, [sp, #80]	; 0x50
 8005e74:	f7fc f9c2 	bl	80021fc <__aeabi_i2d>
 8005e78:	0022      	movs	r2, r4
 8005e7a:	002b      	movs	r3, r5
 8005e7c:	f7fb fb6c 	bl	8001558 <__aeabi_dmul>
 8005e80:	2200      	movs	r2, #0
 8005e82:	4b99      	ldr	r3, [pc, #612]	; (80060e8 <_dtoa_r+0x6a0>)
 8005e84:	f7fa fc2a 	bl	80006dc <__aeabi_dadd>
 8005e88:	9010      	str	r0, [sp, #64]	; 0x40
 8005e8a:	9111      	str	r1, [sp, #68]	; 0x44
 8005e8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e90:	9208      	str	r2, [sp, #32]
 8005e92:	9309      	str	r3, [sp, #36]	; 0x24
 8005e94:	4a95      	ldr	r2, [pc, #596]	; (80060ec <_dtoa_r+0x6a4>)
 8005e96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e98:	4694      	mov	ip, r2
 8005e9a:	4463      	add	r3, ip
 8005e9c:	9317      	str	r3, [sp, #92]	; 0x5c
 8005e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8005ea0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d161      	bne.n	8005f6a <_dtoa_r+0x522>
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	0020      	movs	r0, r4
 8005eaa:	0029      	movs	r1, r5
 8005eac:	4b90      	ldr	r3, [pc, #576]	; (80060f0 <_dtoa_r+0x6a8>)
 8005eae:	f7fb fdbf 	bl	8001a30 <__aeabi_dsub>
 8005eb2:	9a08      	ldr	r2, [sp, #32]
 8005eb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005eb6:	0004      	movs	r4, r0
 8005eb8:	000d      	movs	r5, r1
 8005eba:	f7fa fae1 	bl	8000480 <__aeabi_dcmpgt>
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	d000      	beq.n	8005ec4 <_dtoa_r+0x47c>
 8005ec2:	e2af      	b.n	8006424 <_dtoa_r+0x9dc>
 8005ec4:	488b      	ldr	r0, [pc, #556]	; (80060f4 <_dtoa_r+0x6ac>)
 8005ec6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005ec8:	4684      	mov	ip, r0
 8005eca:	4461      	add	r1, ip
 8005ecc:	000b      	movs	r3, r1
 8005ece:	0020      	movs	r0, r4
 8005ed0:	0029      	movs	r1, r5
 8005ed2:	9a08      	ldr	r2, [sp, #32]
 8005ed4:	f7fa fac0 	bl	8000458 <__aeabi_dcmplt>
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	d000      	beq.n	8005ede <_dtoa_r+0x496>
 8005edc:	e29f      	b.n	800641e <_dtoa_r+0x9d6>
 8005ede:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ee0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8005ee2:	9308      	str	r3, [sp, #32]
 8005ee4:	9409      	str	r4, [sp, #36]	; 0x24
 8005ee6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	da00      	bge.n	8005eee <_dtoa_r+0x4a6>
 8005eec:	e172      	b.n	80061d4 <_dtoa_r+0x78c>
 8005eee:	9a02      	ldr	r2, [sp, #8]
 8005ef0:	2a0e      	cmp	r2, #14
 8005ef2:	dd00      	ble.n	8005ef6 <_dtoa_r+0x4ae>
 8005ef4:	e16e      	b.n	80061d4 <_dtoa_r+0x78c>
 8005ef6:	4b78      	ldr	r3, [pc, #480]	; (80060d8 <_dtoa_r+0x690>)
 8005ef8:	00d2      	lsls	r2, r2, #3
 8005efa:	189b      	adds	r3, r3, r2
 8005efc:	685c      	ldr	r4, [r3, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	930a      	str	r3, [sp, #40]	; 0x28
 8005f02:	940b      	str	r4, [sp, #44]	; 0x2c
 8005f04:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	db00      	blt.n	8005f0c <_dtoa_r+0x4c4>
 8005f0a:	e0f7      	b.n	80060fc <_dtoa_r+0x6b4>
 8005f0c:	9b07      	ldr	r3, [sp, #28]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	dd00      	ble.n	8005f14 <_dtoa_r+0x4cc>
 8005f12:	e0f3      	b.n	80060fc <_dtoa_r+0x6b4>
 8005f14:	d000      	beq.n	8005f18 <_dtoa_r+0x4d0>
 8005f16:	e282      	b.n	800641e <_dtoa_r+0x9d6>
 8005f18:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005f1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	4b74      	ldr	r3, [pc, #464]	; (80060f0 <_dtoa_r+0x6a8>)
 8005f20:	f7fb fb1a 	bl	8001558 <__aeabi_dmul>
 8005f24:	9a08      	ldr	r2, [sp, #32]
 8005f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f28:	f7fa fab4 	bl	8000494 <__aeabi_dcmpge>
 8005f2c:	9e07      	ldr	r6, [sp, #28]
 8005f2e:	0035      	movs	r5, r6
 8005f30:	2800      	cmp	r0, #0
 8005f32:	d000      	beq.n	8005f36 <_dtoa_r+0x4ee>
 8005f34:	e259      	b.n	80063ea <_dtoa_r+0x9a2>
 8005f36:	9b06      	ldr	r3, [sp, #24]
 8005f38:	9a06      	ldr	r2, [sp, #24]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	9308      	str	r3, [sp, #32]
 8005f3e:	2331      	movs	r3, #49	; 0x31
 8005f40:	7013      	strb	r3, [r2, #0]
 8005f42:	9b02      	ldr	r3, [sp, #8]
 8005f44:	3301      	adds	r3, #1
 8005f46:	9302      	str	r3, [sp, #8]
 8005f48:	e254      	b.n	80063f4 <_dtoa_r+0x9ac>
 8005f4a:	4234      	tst	r4, r6
 8005f4c:	d007      	beq.n	8005f5e <_dtoa_r+0x516>
 8005f4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f50:	3301      	adds	r3, #1
 8005f52:	9310      	str	r3, [sp, #64]	; 0x40
 8005f54:	682a      	ldr	r2, [r5, #0]
 8005f56:	686b      	ldr	r3, [r5, #4]
 8005f58:	f7fb fafe 	bl	8001558 <__aeabi_dmul>
 8005f5c:	0033      	movs	r3, r6
 8005f5e:	1064      	asrs	r4, r4, #1
 8005f60:	3508      	adds	r5, #8
 8005f62:	e75a      	b.n	8005e1a <_dtoa_r+0x3d2>
 8005f64:	9e02      	ldr	r6, [sp, #8]
 8005f66:	9b07      	ldr	r3, [sp, #28]
 8005f68:	e780      	b.n	8005e6c <_dtoa_r+0x424>
 8005f6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f6c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005f6e:	1e5a      	subs	r2, r3, #1
 8005f70:	4b59      	ldr	r3, [pc, #356]	; (80060d8 <_dtoa_r+0x690>)
 8005f72:	00d2      	lsls	r2, r2, #3
 8005f74:	189b      	adds	r3, r3, r2
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	2900      	cmp	r1, #0
 8005f7c:	d051      	beq.n	8006022 <_dtoa_r+0x5da>
 8005f7e:	2000      	movs	r0, #0
 8005f80:	495d      	ldr	r1, [pc, #372]	; (80060f8 <_dtoa_r+0x6b0>)
 8005f82:	f7fa fee7 	bl	8000d54 <__aeabi_ddiv>
 8005f86:	9a08      	ldr	r2, [sp, #32]
 8005f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f8a:	f7fb fd51 	bl	8001a30 <__aeabi_dsub>
 8005f8e:	9a06      	ldr	r2, [sp, #24]
 8005f90:	9b06      	ldr	r3, [sp, #24]
 8005f92:	4694      	mov	ip, r2
 8005f94:	9317      	str	r3, [sp, #92]	; 0x5c
 8005f96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f98:	9010      	str	r0, [sp, #64]	; 0x40
 8005f9a:	9111      	str	r1, [sp, #68]	; 0x44
 8005f9c:	4463      	add	r3, ip
 8005f9e:	9319      	str	r3, [sp, #100]	; 0x64
 8005fa0:	0029      	movs	r1, r5
 8005fa2:	0020      	movs	r0, r4
 8005fa4:	f7fc f8f4 	bl	8002190 <__aeabi_d2iz>
 8005fa8:	9014      	str	r0, [sp, #80]	; 0x50
 8005faa:	f7fc f927 	bl	80021fc <__aeabi_i2d>
 8005fae:	0002      	movs	r2, r0
 8005fb0:	000b      	movs	r3, r1
 8005fb2:	0020      	movs	r0, r4
 8005fb4:	0029      	movs	r1, r5
 8005fb6:	f7fb fd3b 	bl	8001a30 <__aeabi_dsub>
 8005fba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005fbc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	9308      	str	r3, [sp, #32]
 8005fc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005fc4:	0004      	movs	r4, r0
 8005fc6:	3330      	adds	r3, #48	; 0x30
 8005fc8:	7013      	strb	r3, [r2, #0]
 8005fca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005fcc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005fce:	000d      	movs	r5, r1
 8005fd0:	f7fa fa42 	bl	8000458 <__aeabi_dcmplt>
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	d175      	bne.n	80060c4 <_dtoa_r+0x67c>
 8005fd8:	0022      	movs	r2, r4
 8005fda:	002b      	movs	r3, r5
 8005fdc:	2000      	movs	r0, #0
 8005fde:	4940      	ldr	r1, [pc, #256]	; (80060e0 <_dtoa_r+0x698>)
 8005fe0:	f7fb fd26 	bl	8001a30 <__aeabi_dsub>
 8005fe4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005fe6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005fe8:	f7fa fa36 	bl	8000458 <__aeabi_dcmplt>
 8005fec:	2800      	cmp	r0, #0
 8005fee:	d000      	beq.n	8005ff2 <_dtoa_r+0x5aa>
 8005ff0:	e0d2      	b.n	8006198 <_dtoa_r+0x750>
 8005ff2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005ff4:	9a08      	ldr	r2, [sp, #32]
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d100      	bne.n	8005ffc <_dtoa_r+0x5b4>
 8005ffa:	e770      	b.n	8005ede <_dtoa_r+0x496>
 8005ffc:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005ffe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006000:	2200      	movs	r2, #0
 8006002:	4b38      	ldr	r3, [pc, #224]	; (80060e4 <_dtoa_r+0x69c>)
 8006004:	f7fb faa8 	bl	8001558 <__aeabi_dmul>
 8006008:	4b36      	ldr	r3, [pc, #216]	; (80060e4 <_dtoa_r+0x69c>)
 800600a:	9010      	str	r0, [sp, #64]	; 0x40
 800600c:	9111      	str	r1, [sp, #68]	; 0x44
 800600e:	2200      	movs	r2, #0
 8006010:	0020      	movs	r0, r4
 8006012:	0029      	movs	r1, r5
 8006014:	f7fb faa0 	bl	8001558 <__aeabi_dmul>
 8006018:	9b08      	ldr	r3, [sp, #32]
 800601a:	0004      	movs	r4, r0
 800601c:	000d      	movs	r5, r1
 800601e:	9317      	str	r3, [sp, #92]	; 0x5c
 8006020:	e7be      	b.n	8005fa0 <_dtoa_r+0x558>
 8006022:	9808      	ldr	r0, [sp, #32]
 8006024:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006026:	f7fb fa97 	bl	8001558 <__aeabi_dmul>
 800602a:	9a06      	ldr	r2, [sp, #24]
 800602c:	9b06      	ldr	r3, [sp, #24]
 800602e:	4694      	mov	ip, r2
 8006030:	9308      	str	r3, [sp, #32]
 8006032:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006034:	9010      	str	r0, [sp, #64]	; 0x40
 8006036:	9111      	str	r1, [sp, #68]	; 0x44
 8006038:	4463      	add	r3, ip
 800603a:	9319      	str	r3, [sp, #100]	; 0x64
 800603c:	0029      	movs	r1, r5
 800603e:	0020      	movs	r0, r4
 8006040:	f7fc f8a6 	bl	8002190 <__aeabi_d2iz>
 8006044:	9017      	str	r0, [sp, #92]	; 0x5c
 8006046:	f7fc f8d9 	bl	80021fc <__aeabi_i2d>
 800604a:	0002      	movs	r2, r0
 800604c:	000b      	movs	r3, r1
 800604e:	0020      	movs	r0, r4
 8006050:	0029      	movs	r1, r5
 8006052:	f7fb fced 	bl	8001a30 <__aeabi_dsub>
 8006056:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006058:	9a08      	ldr	r2, [sp, #32]
 800605a:	3330      	adds	r3, #48	; 0x30
 800605c:	7013      	strb	r3, [r2, #0]
 800605e:	0013      	movs	r3, r2
 8006060:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006062:	3301      	adds	r3, #1
 8006064:	0004      	movs	r4, r0
 8006066:	000d      	movs	r5, r1
 8006068:	9308      	str	r3, [sp, #32]
 800606a:	4293      	cmp	r3, r2
 800606c:	d12c      	bne.n	80060c8 <_dtoa_r+0x680>
 800606e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006070:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006072:	9a06      	ldr	r2, [sp, #24]
 8006074:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006076:	4694      	mov	ip, r2
 8006078:	4463      	add	r3, ip
 800607a:	2200      	movs	r2, #0
 800607c:	9308      	str	r3, [sp, #32]
 800607e:	4b1e      	ldr	r3, [pc, #120]	; (80060f8 <_dtoa_r+0x6b0>)
 8006080:	f7fa fb2c 	bl	80006dc <__aeabi_dadd>
 8006084:	0002      	movs	r2, r0
 8006086:	000b      	movs	r3, r1
 8006088:	0020      	movs	r0, r4
 800608a:	0029      	movs	r1, r5
 800608c:	f7fa f9f8 	bl	8000480 <__aeabi_dcmpgt>
 8006090:	2800      	cmp	r0, #0
 8006092:	d000      	beq.n	8006096 <_dtoa_r+0x64e>
 8006094:	e080      	b.n	8006198 <_dtoa_r+0x750>
 8006096:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006098:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800609a:	2000      	movs	r0, #0
 800609c:	4916      	ldr	r1, [pc, #88]	; (80060f8 <_dtoa_r+0x6b0>)
 800609e:	f7fb fcc7 	bl	8001a30 <__aeabi_dsub>
 80060a2:	0002      	movs	r2, r0
 80060a4:	000b      	movs	r3, r1
 80060a6:	0020      	movs	r0, r4
 80060a8:	0029      	movs	r1, r5
 80060aa:	f7fa f9d5 	bl	8000458 <__aeabi_dcmplt>
 80060ae:	2800      	cmp	r0, #0
 80060b0:	d100      	bne.n	80060b4 <_dtoa_r+0x66c>
 80060b2:	e714      	b.n	8005ede <_dtoa_r+0x496>
 80060b4:	9b08      	ldr	r3, [sp, #32]
 80060b6:	001a      	movs	r2, r3
 80060b8:	3a01      	subs	r2, #1
 80060ba:	9208      	str	r2, [sp, #32]
 80060bc:	7812      	ldrb	r2, [r2, #0]
 80060be:	2a30      	cmp	r2, #48	; 0x30
 80060c0:	d0f8      	beq.n	80060b4 <_dtoa_r+0x66c>
 80060c2:	9308      	str	r3, [sp, #32]
 80060c4:	9602      	str	r6, [sp, #8]
 80060c6:	e055      	b.n	8006174 <_dtoa_r+0x72c>
 80060c8:	2200      	movs	r2, #0
 80060ca:	4b06      	ldr	r3, [pc, #24]	; (80060e4 <_dtoa_r+0x69c>)
 80060cc:	f7fb fa44 	bl	8001558 <__aeabi_dmul>
 80060d0:	0004      	movs	r4, r0
 80060d2:	000d      	movs	r5, r1
 80060d4:	e7b2      	b.n	800603c <_dtoa_r+0x5f4>
 80060d6:	46c0      	nop			; (mov r8, r8)
 80060d8:	080081a0 	.word	0x080081a0
 80060dc:	08008178 	.word	0x08008178
 80060e0:	3ff00000 	.word	0x3ff00000
 80060e4:	40240000 	.word	0x40240000
 80060e8:	401c0000 	.word	0x401c0000
 80060ec:	fcc00000 	.word	0xfcc00000
 80060f0:	40140000 	.word	0x40140000
 80060f4:	7cc00000 	.word	0x7cc00000
 80060f8:	3fe00000 	.word	0x3fe00000
 80060fc:	9b07      	ldr	r3, [sp, #28]
 80060fe:	9e06      	ldr	r6, [sp, #24]
 8006100:	3b01      	subs	r3, #1
 8006102:	199b      	adds	r3, r3, r6
 8006104:	930c      	str	r3, [sp, #48]	; 0x30
 8006106:	9c08      	ldr	r4, [sp, #32]
 8006108:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800610a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800610c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800610e:	0020      	movs	r0, r4
 8006110:	0029      	movs	r1, r5
 8006112:	f7fa fe1f 	bl	8000d54 <__aeabi_ddiv>
 8006116:	f7fc f83b 	bl	8002190 <__aeabi_d2iz>
 800611a:	9007      	str	r0, [sp, #28]
 800611c:	f7fc f86e 	bl	80021fc <__aeabi_i2d>
 8006120:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006124:	f7fb fa18 	bl	8001558 <__aeabi_dmul>
 8006128:	0002      	movs	r2, r0
 800612a:	000b      	movs	r3, r1
 800612c:	0020      	movs	r0, r4
 800612e:	0029      	movs	r1, r5
 8006130:	f7fb fc7e 	bl	8001a30 <__aeabi_dsub>
 8006134:	0033      	movs	r3, r6
 8006136:	9a07      	ldr	r2, [sp, #28]
 8006138:	3601      	adds	r6, #1
 800613a:	3230      	adds	r2, #48	; 0x30
 800613c:	701a      	strb	r2, [r3, #0]
 800613e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006140:	9608      	str	r6, [sp, #32]
 8006142:	429a      	cmp	r2, r3
 8006144:	d139      	bne.n	80061ba <_dtoa_r+0x772>
 8006146:	0002      	movs	r2, r0
 8006148:	000b      	movs	r3, r1
 800614a:	f7fa fac7 	bl	80006dc <__aeabi_dadd>
 800614e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006150:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006152:	0004      	movs	r4, r0
 8006154:	000d      	movs	r5, r1
 8006156:	f7fa f993 	bl	8000480 <__aeabi_dcmpgt>
 800615a:	2800      	cmp	r0, #0
 800615c:	d11b      	bne.n	8006196 <_dtoa_r+0x74e>
 800615e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006160:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006162:	0020      	movs	r0, r4
 8006164:	0029      	movs	r1, r5
 8006166:	f7fa f971 	bl	800044c <__aeabi_dcmpeq>
 800616a:	2800      	cmp	r0, #0
 800616c:	d002      	beq.n	8006174 <_dtoa_r+0x72c>
 800616e:	9b07      	ldr	r3, [sp, #28]
 8006170:	07db      	lsls	r3, r3, #31
 8006172:	d410      	bmi.n	8006196 <_dtoa_r+0x74e>
 8006174:	0038      	movs	r0, r7
 8006176:	9905      	ldr	r1, [sp, #20]
 8006178:	f000 fae6 	bl	8006748 <_Bfree>
 800617c:	2300      	movs	r3, #0
 800617e:	9a08      	ldr	r2, [sp, #32]
 8006180:	9802      	ldr	r0, [sp, #8]
 8006182:	7013      	strb	r3, [r2, #0]
 8006184:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006186:	3001      	adds	r0, #1
 8006188:	6018      	str	r0, [r3, #0]
 800618a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800618c:	2b00      	cmp	r3, #0
 800618e:	d100      	bne.n	8006192 <_dtoa_r+0x74a>
 8006190:	e4a6      	b.n	8005ae0 <_dtoa_r+0x98>
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	e4a4      	b.n	8005ae0 <_dtoa_r+0x98>
 8006196:	9e02      	ldr	r6, [sp, #8]
 8006198:	9b08      	ldr	r3, [sp, #32]
 800619a:	9308      	str	r3, [sp, #32]
 800619c:	3b01      	subs	r3, #1
 800619e:	781a      	ldrb	r2, [r3, #0]
 80061a0:	2a39      	cmp	r2, #57	; 0x39
 80061a2:	d106      	bne.n	80061b2 <_dtoa_r+0x76a>
 80061a4:	9a06      	ldr	r2, [sp, #24]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d1f7      	bne.n	800619a <_dtoa_r+0x752>
 80061aa:	2230      	movs	r2, #48	; 0x30
 80061ac:	9906      	ldr	r1, [sp, #24]
 80061ae:	3601      	adds	r6, #1
 80061b0:	700a      	strb	r2, [r1, #0]
 80061b2:	781a      	ldrb	r2, [r3, #0]
 80061b4:	3201      	adds	r2, #1
 80061b6:	701a      	strb	r2, [r3, #0]
 80061b8:	e784      	b.n	80060c4 <_dtoa_r+0x67c>
 80061ba:	2200      	movs	r2, #0
 80061bc:	4baa      	ldr	r3, [pc, #680]	; (8006468 <_dtoa_r+0xa20>)
 80061be:	f7fb f9cb 	bl	8001558 <__aeabi_dmul>
 80061c2:	2200      	movs	r2, #0
 80061c4:	2300      	movs	r3, #0
 80061c6:	0004      	movs	r4, r0
 80061c8:	000d      	movs	r5, r1
 80061ca:	f7fa f93f 	bl	800044c <__aeabi_dcmpeq>
 80061ce:	2800      	cmp	r0, #0
 80061d0:	d09b      	beq.n	800610a <_dtoa_r+0x6c2>
 80061d2:	e7cf      	b.n	8006174 <_dtoa_r+0x72c>
 80061d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80061d6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80061d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80061da:	2d00      	cmp	r5, #0
 80061dc:	d012      	beq.n	8006204 <_dtoa_r+0x7bc>
 80061de:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80061e0:	2a01      	cmp	r2, #1
 80061e2:	dc66      	bgt.n	80062b2 <_dtoa_r+0x86a>
 80061e4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80061e6:	2a00      	cmp	r2, #0
 80061e8:	d05d      	beq.n	80062a6 <_dtoa_r+0x85e>
 80061ea:	4aa0      	ldr	r2, [pc, #640]	; (800646c <_dtoa_r+0xa24>)
 80061ec:	189b      	adds	r3, r3, r2
 80061ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061f0:	2101      	movs	r1, #1
 80061f2:	18d2      	adds	r2, r2, r3
 80061f4:	920a      	str	r2, [sp, #40]	; 0x28
 80061f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80061f8:	0038      	movs	r0, r7
 80061fa:	18d3      	adds	r3, r2, r3
 80061fc:	930d      	str	r3, [sp, #52]	; 0x34
 80061fe:	f000 fb53 	bl	80068a8 <__i2b>
 8006202:	0005      	movs	r5, r0
 8006204:	2c00      	cmp	r4, #0
 8006206:	dd0e      	ble.n	8006226 <_dtoa_r+0x7de>
 8006208:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800620a:	2b00      	cmp	r3, #0
 800620c:	dd0b      	ble.n	8006226 <_dtoa_r+0x7de>
 800620e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006210:	0023      	movs	r3, r4
 8006212:	4294      	cmp	r4, r2
 8006214:	dd00      	ble.n	8006218 <_dtoa_r+0x7d0>
 8006216:	0013      	movs	r3, r2
 8006218:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800621a:	1ae4      	subs	r4, r4, r3
 800621c:	1ad2      	subs	r2, r2, r3
 800621e:	920a      	str	r2, [sp, #40]	; 0x28
 8006220:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	930d      	str	r3, [sp, #52]	; 0x34
 8006226:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006228:	2b00      	cmp	r3, #0
 800622a:	d01f      	beq.n	800626c <_dtoa_r+0x824>
 800622c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800622e:	2b00      	cmp	r3, #0
 8006230:	d054      	beq.n	80062dc <_dtoa_r+0x894>
 8006232:	2e00      	cmp	r6, #0
 8006234:	dd11      	ble.n	800625a <_dtoa_r+0x812>
 8006236:	0029      	movs	r1, r5
 8006238:	0032      	movs	r2, r6
 800623a:	0038      	movs	r0, r7
 800623c:	f000 fbfa 	bl	8006a34 <__pow5mult>
 8006240:	9a05      	ldr	r2, [sp, #20]
 8006242:	0001      	movs	r1, r0
 8006244:	0005      	movs	r5, r0
 8006246:	0038      	movs	r0, r7
 8006248:	f000 fb44 	bl	80068d4 <__multiply>
 800624c:	9905      	ldr	r1, [sp, #20]
 800624e:	9014      	str	r0, [sp, #80]	; 0x50
 8006250:	0038      	movs	r0, r7
 8006252:	f000 fa79 	bl	8006748 <_Bfree>
 8006256:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006258:	9305      	str	r3, [sp, #20]
 800625a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800625c:	1b9a      	subs	r2, r3, r6
 800625e:	42b3      	cmp	r3, r6
 8006260:	d004      	beq.n	800626c <_dtoa_r+0x824>
 8006262:	0038      	movs	r0, r7
 8006264:	9905      	ldr	r1, [sp, #20]
 8006266:	f000 fbe5 	bl	8006a34 <__pow5mult>
 800626a:	9005      	str	r0, [sp, #20]
 800626c:	2101      	movs	r1, #1
 800626e:	0038      	movs	r0, r7
 8006270:	f000 fb1a 	bl	80068a8 <__i2b>
 8006274:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006276:	0006      	movs	r6, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	dd31      	ble.n	80062e0 <_dtoa_r+0x898>
 800627c:	001a      	movs	r2, r3
 800627e:	0001      	movs	r1, r0
 8006280:	0038      	movs	r0, r7
 8006282:	f000 fbd7 	bl	8006a34 <__pow5mult>
 8006286:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006288:	0006      	movs	r6, r0
 800628a:	2b01      	cmp	r3, #1
 800628c:	dd2d      	ble.n	80062ea <_dtoa_r+0x8a2>
 800628e:	2300      	movs	r3, #0
 8006290:	930e      	str	r3, [sp, #56]	; 0x38
 8006292:	6933      	ldr	r3, [r6, #16]
 8006294:	3303      	adds	r3, #3
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	18f3      	adds	r3, r6, r3
 800629a:	6858      	ldr	r0, [r3, #4]
 800629c:	f000 fabc 	bl	8006818 <__hi0bits>
 80062a0:	2320      	movs	r3, #32
 80062a2:	1a18      	subs	r0, r3, r0
 80062a4:	e039      	b.n	800631a <_dtoa_r+0x8d2>
 80062a6:	2336      	movs	r3, #54	; 0x36
 80062a8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80062aa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80062ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80062ae:	1a9b      	subs	r3, r3, r2
 80062b0:	e79d      	b.n	80061ee <_dtoa_r+0x7a6>
 80062b2:	9b07      	ldr	r3, [sp, #28]
 80062b4:	1e5e      	subs	r6, r3, #1
 80062b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062b8:	42b3      	cmp	r3, r6
 80062ba:	db07      	blt.n	80062cc <_dtoa_r+0x884>
 80062bc:	1b9e      	subs	r6, r3, r6
 80062be:	9b07      	ldr	r3, [sp, #28]
 80062c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	da93      	bge.n	80061ee <_dtoa_r+0x7a6>
 80062c6:	1ae4      	subs	r4, r4, r3
 80062c8:	2300      	movs	r3, #0
 80062ca:	e790      	b.n	80061ee <_dtoa_r+0x7a6>
 80062cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80062d0:	1af3      	subs	r3, r6, r3
 80062d2:	18d3      	adds	r3, r2, r3
 80062d4:	960e      	str	r6, [sp, #56]	; 0x38
 80062d6:	9315      	str	r3, [sp, #84]	; 0x54
 80062d8:	2600      	movs	r6, #0
 80062da:	e7f0      	b.n	80062be <_dtoa_r+0x876>
 80062dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062de:	e7c0      	b.n	8006262 <_dtoa_r+0x81a>
 80062e0:	2300      	movs	r3, #0
 80062e2:	930e      	str	r3, [sp, #56]	; 0x38
 80062e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	dc13      	bgt.n	8006312 <_dtoa_r+0x8ca>
 80062ea:	2300      	movs	r3, #0
 80062ec:	930e      	str	r3, [sp, #56]	; 0x38
 80062ee:	9b08      	ldr	r3, [sp, #32]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d10e      	bne.n	8006312 <_dtoa_r+0x8ca>
 80062f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062f6:	031b      	lsls	r3, r3, #12
 80062f8:	d10b      	bne.n	8006312 <_dtoa_r+0x8ca>
 80062fa:	4b5d      	ldr	r3, [pc, #372]	; (8006470 <_dtoa_r+0xa28>)
 80062fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062fe:	4213      	tst	r3, r2
 8006300:	d007      	beq.n	8006312 <_dtoa_r+0x8ca>
 8006302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006304:	3301      	adds	r3, #1
 8006306:	930a      	str	r3, [sp, #40]	; 0x28
 8006308:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800630a:	3301      	adds	r3, #1
 800630c:	930d      	str	r3, [sp, #52]	; 0x34
 800630e:	2301      	movs	r3, #1
 8006310:	930e      	str	r3, [sp, #56]	; 0x38
 8006312:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006314:	2001      	movs	r0, #1
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1bb      	bne.n	8006292 <_dtoa_r+0x84a>
 800631a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800631c:	221f      	movs	r2, #31
 800631e:	1818      	adds	r0, r3, r0
 8006320:	0003      	movs	r3, r0
 8006322:	4013      	ands	r3, r2
 8006324:	4210      	tst	r0, r2
 8006326:	d046      	beq.n	80063b6 <_dtoa_r+0x96e>
 8006328:	3201      	adds	r2, #1
 800632a:	1ad2      	subs	r2, r2, r3
 800632c:	2a04      	cmp	r2, #4
 800632e:	dd3f      	ble.n	80063b0 <_dtoa_r+0x968>
 8006330:	221c      	movs	r2, #28
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006336:	18e4      	adds	r4, r4, r3
 8006338:	18d2      	adds	r2, r2, r3
 800633a:	920a      	str	r2, [sp, #40]	; 0x28
 800633c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800633e:	18d3      	adds	r3, r2, r3
 8006340:	930d      	str	r3, [sp, #52]	; 0x34
 8006342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006344:	2b00      	cmp	r3, #0
 8006346:	dd05      	ble.n	8006354 <_dtoa_r+0x90c>
 8006348:	001a      	movs	r2, r3
 800634a:	0038      	movs	r0, r7
 800634c:	9905      	ldr	r1, [sp, #20]
 800634e:	f000 fbcd 	bl	8006aec <__lshift>
 8006352:	9005      	str	r0, [sp, #20]
 8006354:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006356:	2b00      	cmp	r3, #0
 8006358:	dd05      	ble.n	8006366 <_dtoa_r+0x91e>
 800635a:	0031      	movs	r1, r6
 800635c:	001a      	movs	r2, r3
 800635e:	0038      	movs	r0, r7
 8006360:	f000 fbc4 	bl	8006aec <__lshift>
 8006364:	0006      	movs	r6, r0
 8006366:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006368:	2b00      	cmp	r3, #0
 800636a:	d026      	beq.n	80063ba <_dtoa_r+0x972>
 800636c:	0031      	movs	r1, r6
 800636e:	9805      	ldr	r0, [sp, #20]
 8006370:	f000 fc2a 	bl	8006bc8 <__mcmp>
 8006374:	2800      	cmp	r0, #0
 8006376:	da20      	bge.n	80063ba <_dtoa_r+0x972>
 8006378:	9b02      	ldr	r3, [sp, #8]
 800637a:	220a      	movs	r2, #10
 800637c:	3b01      	subs	r3, #1
 800637e:	9302      	str	r3, [sp, #8]
 8006380:	0038      	movs	r0, r7
 8006382:	2300      	movs	r3, #0
 8006384:	9905      	ldr	r1, [sp, #20]
 8006386:	f000 fa03 	bl	8006790 <__multadd>
 800638a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800638c:	9005      	str	r0, [sp, #20]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d100      	bne.n	8006394 <_dtoa_r+0x94c>
 8006392:	e166      	b.n	8006662 <_dtoa_r+0xc1a>
 8006394:	2300      	movs	r3, #0
 8006396:	0029      	movs	r1, r5
 8006398:	220a      	movs	r2, #10
 800639a:	0038      	movs	r0, r7
 800639c:	f000 f9f8 	bl	8006790 <__multadd>
 80063a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063a2:	0005      	movs	r5, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	dc47      	bgt.n	8006438 <_dtoa_r+0x9f0>
 80063a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	dc0d      	bgt.n	80063ca <_dtoa_r+0x982>
 80063ae:	e043      	b.n	8006438 <_dtoa_r+0x9f0>
 80063b0:	2a04      	cmp	r2, #4
 80063b2:	d0c6      	beq.n	8006342 <_dtoa_r+0x8fa>
 80063b4:	0013      	movs	r3, r2
 80063b6:	331c      	adds	r3, #28
 80063b8:	e7bc      	b.n	8006334 <_dtoa_r+0x8ec>
 80063ba:	9b07      	ldr	r3, [sp, #28]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	dc35      	bgt.n	800642c <_dtoa_r+0x9e4>
 80063c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	dd32      	ble.n	800642c <_dtoa_r+0x9e4>
 80063c6:	9b07      	ldr	r3, [sp, #28]
 80063c8:	930c      	str	r3, [sp, #48]	; 0x30
 80063ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10c      	bne.n	80063ea <_dtoa_r+0x9a2>
 80063d0:	0031      	movs	r1, r6
 80063d2:	2205      	movs	r2, #5
 80063d4:	0038      	movs	r0, r7
 80063d6:	f000 f9db 	bl	8006790 <__multadd>
 80063da:	0006      	movs	r6, r0
 80063dc:	0001      	movs	r1, r0
 80063de:	9805      	ldr	r0, [sp, #20]
 80063e0:	f000 fbf2 	bl	8006bc8 <__mcmp>
 80063e4:	2800      	cmp	r0, #0
 80063e6:	dd00      	ble.n	80063ea <_dtoa_r+0x9a2>
 80063e8:	e5a5      	b.n	8005f36 <_dtoa_r+0x4ee>
 80063ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80063ec:	43db      	mvns	r3, r3
 80063ee:	9302      	str	r3, [sp, #8]
 80063f0:	9b06      	ldr	r3, [sp, #24]
 80063f2:	9308      	str	r3, [sp, #32]
 80063f4:	2400      	movs	r4, #0
 80063f6:	0031      	movs	r1, r6
 80063f8:	0038      	movs	r0, r7
 80063fa:	f000 f9a5 	bl	8006748 <_Bfree>
 80063fe:	2d00      	cmp	r5, #0
 8006400:	d100      	bne.n	8006404 <_dtoa_r+0x9bc>
 8006402:	e6b7      	b.n	8006174 <_dtoa_r+0x72c>
 8006404:	2c00      	cmp	r4, #0
 8006406:	d005      	beq.n	8006414 <_dtoa_r+0x9cc>
 8006408:	42ac      	cmp	r4, r5
 800640a:	d003      	beq.n	8006414 <_dtoa_r+0x9cc>
 800640c:	0021      	movs	r1, r4
 800640e:	0038      	movs	r0, r7
 8006410:	f000 f99a 	bl	8006748 <_Bfree>
 8006414:	0029      	movs	r1, r5
 8006416:	0038      	movs	r0, r7
 8006418:	f000 f996 	bl	8006748 <_Bfree>
 800641c:	e6aa      	b.n	8006174 <_dtoa_r+0x72c>
 800641e:	2600      	movs	r6, #0
 8006420:	0035      	movs	r5, r6
 8006422:	e7e2      	b.n	80063ea <_dtoa_r+0x9a2>
 8006424:	9602      	str	r6, [sp, #8]
 8006426:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8006428:	0035      	movs	r5, r6
 800642a:	e584      	b.n	8005f36 <_dtoa_r+0x4ee>
 800642c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800642e:	2b00      	cmp	r3, #0
 8006430:	d100      	bne.n	8006434 <_dtoa_r+0x9ec>
 8006432:	e0ce      	b.n	80065d2 <_dtoa_r+0xb8a>
 8006434:	9b07      	ldr	r3, [sp, #28]
 8006436:	930c      	str	r3, [sp, #48]	; 0x30
 8006438:	2c00      	cmp	r4, #0
 800643a:	dd05      	ble.n	8006448 <_dtoa_r+0xa00>
 800643c:	0029      	movs	r1, r5
 800643e:	0022      	movs	r2, r4
 8006440:	0038      	movs	r0, r7
 8006442:	f000 fb53 	bl	8006aec <__lshift>
 8006446:	0005      	movs	r5, r0
 8006448:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800644a:	0028      	movs	r0, r5
 800644c:	2b00      	cmp	r3, #0
 800644e:	d022      	beq.n	8006496 <_dtoa_r+0xa4e>
 8006450:	0038      	movs	r0, r7
 8006452:	6869      	ldr	r1, [r5, #4]
 8006454:	f000 f934 	bl	80066c0 <_Balloc>
 8006458:	1e04      	subs	r4, r0, #0
 800645a:	d10f      	bne.n	800647c <_dtoa_r+0xa34>
 800645c:	0002      	movs	r2, r0
 800645e:	4b05      	ldr	r3, [pc, #20]	; (8006474 <_dtoa_r+0xa2c>)
 8006460:	4905      	ldr	r1, [pc, #20]	; (8006478 <_dtoa_r+0xa30>)
 8006462:	f7ff fb06 	bl	8005a72 <_dtoa_r+0x2a>
 8006466:	46c0      	nop			; (mov r8, r8)
 8006468:	40240000 	.word	0x40240000
 800646c:	00000433 	.word	0x00000433
 8006470:	7ff00000 	.word	0x7ff00000
 8006474:	0800810b 	.word	0x0800810b
 8006478:	000002ea 	.word	0x000002ea
 800647c:	0029      	movs	r1, r5
 800647e:	692b      	ldr	r3, [r5, #16]
 8006480:	310c      	adds	r1, #12
 8006482:	1c9a      	adds	r2, r3, #2
 8006484:	0092      	lsls	r2, r2, #2
 8006486:	300c      	adds	r0, #12
 8006488:	f000 f911 	bl	80066ae <memcpy>
 800648c:	2201      	movs	r2, #1
 800648e:	0021      	movs	r1, r4
 8006490:	0038      	movs	r0, r7
 8006492:	f000 fb2b 	bl	8006aec <__lshift>
 8006496:	9b06      	ldr	r3, [sp, #24]
 8006498:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800649a:	930a      	str	r3, [sp, #40]	; 0x28
 800649c:	3b01      	subs	r3, #1
 800649e:	189b      	adds	r3, r3, r2
 80064a0:	2201      	movs	r2, #1
 80064a2:	002c      	movs	r4, r5
 80064a4:	0005      	movs	r5, r0
 80064a6:	9314      	str	r3, [sp, #80]	; 0x50
 80064a8:	9b08      	ldr	r3, [sp, #32]
 80064aa:	4013      	ands	r3, r2
 80064ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80064ae:	0031      	movs	r1, r6
 80064b0:	9805      	ldr	r0, [sp, #20]
 80064b2:	f7ff fa3d 	bl	8005930 <quorem>
 80064b6:	0003      	movs	r3, r0
 80064b8:	0021      	movs	r1, r4
 80064ba:	3330      	adds	r3, #48	; 0x30
 80064bc:	900d      	str	r0, [sp, #52]	; 0x34
 80064be:	9805      	ldr	r0, [sp, #20]
 80064c0:	9307      	str	r3, [sp, #28]
 80064c2:	f000 fb81 	bl	8006bc8 <__mcmp>
 80064c6:	002a      	movs	r2, r5
 80064c8:	900e      	str	r0, [sp, #56]	; 0x38
 80064ca:	0031      	movs	r1, r6
 80064cc:	0038      	movs	r0, r7
 80064ce:	f000 fb97 	bl	8006c00 <__mdiff>
 80064d2:	68c3      	ldr	r3, [r0, #12]
 80064d4:	9008      	str	r0, [sp, #32]
 80064d6:	9310      	str	r3, [sp, #64]	; 0x40
 80064d8:	2301      	movs	r3, #1
 80064da:	930c      	str	r3, [sp, #48]	; 0x30
 80064dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d104      	bne.n	80064ec <_dtoa_r+0xaa4>
 80064e2:	0001      	movs	r1, r0
 80064e4:	9805      	ldr	r0, [sp, #20]
 80064e6:	f000 fb6f 	bl	8006bc8 <__mcmp>
 80064ea:	900c      	str	r0, [sp, #48]	; 0x30
 80064ec:	0038      	movs	r0, r7
 80064ee:	9908      	ldr	r1, [sp, #32]
 80064f0:	f000 f92a 	bl	8006748 <_Bfree>
 80064f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064f8:	3301      	adds	r3, #1
 80064fa:	9308      	str	r3, [sp, #32]
 80064fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064fe:	4313      	orrs	r3, r2
 8006500:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006502:	4313      	orrs	r3, r2
 8006504:	d10c      	bne.n	8006520 <_dtoa_r+0xad8>
 8006506:	9b07      	ldr	r3, [sp, #28]
 8006508:	2b39      	cmp	r3, #57	; 0x39
 800650a:	d026      	beq.n	800655a <_dtoa_r+0xb12>
 800650c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800650e:	2b00      	cmp	r3, #0
 8006510:	dd02      	ble.n	8006518 <_dtoa_r+0xad0>
 8006512:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006514:	3331      	adds	r3, #49	; 0x31
 8006516:	9307      	str	r3, [sp, #28]
 8006518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800651a:	9a07      	ldr	r2, [sp, #28]
 800651c:	701a      	strb	r2, [r3, #0]
 800651e:	e76a      	b.n	80063f6 <_dtoa_r+0x9ae>
 8006520:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006522:	2b00      	cmp	r3, #0
 8006524:	db04      	blt.n	8006530 <_dtoa_r+0xae8>
 8006526:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006528:	4313      	orrs	r3, r2
 800652a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800652c:	4313      	orrs	r3, r2
 800652e:	d11f      	bne.n	8006570 <_dtoa_r+0xb28>
 8006530:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006532:	2b00      	cmp	r3, #0
 8006534:	ddf0      	ble.n	8006518 <_dtoa_r+0xad0>
 8006536:	9905      	ldr	r1, [sp, #20]
 8006538:	2201      	movs	r2, #1
 800653a:	0038      	movs	r0, r7
 800653c:	f000 fad6 	bl	8006aec <__lshift>
 8006540:	0031      	movs	r1, r6
 8006542:	9005      	str	r0, [sp, #20]
 8006544:	f000 fb40 	bl	8006bc8 <__mcmp>
 8006548:	2800      	cmp	r0, #0
 800654a:	dc03      	bgt.n	8006554 <_dtoa_r+0xb0c>
 800654c:	d1e4      	bne.n	8006518 <_dtoa_r+0xad0>
 800654e:	9b07      	ldr	r3, [sp, #28]
 8006550:	07db      	lsls	r3, r3, #31
 8006552:	d5e1      	bpl.n	8006518 <_dtoa_r+0xad0>
 8006554:	9b07      	ldr	r3, [sp, #28]
 8006556:	2b39      	cmp	r3, #57	; 0x39
 8006558:	d1db      	bne.n	8006512 <_dtoa_r+0xaca>
 800655a:	2339      	movs	r3, #57	; 0x39
 800655c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800655e:	7013      	strb	r3, [r2, #0]
 8006560:	9b08      	ldr	r3, [sp, #32]
 8006562:	9308      	str	r3, [sp, #32]
 8006564:	3b01      	subs	r3, #1
 8006566:	781a      	ldrb	r2, [r3, #0]
 8006568:	2a39      	cmp	r2, #57	; 0x39
 800656a:	d068      	beq.n	800663e <_dtoa_r+0xbf6>
 800656c:	3201      	adds	r2, #1
 800656e:	e7d5      	b.n	800651c <_dtoa_r+0xad4>
 8006570:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006572:	2b00      	cmp	r3, #0
 8006574:	dd07      	ble.n	8006586 <_dtoa_r+0xb3e>
 8006576:	9b07      	ldr	r3, [sp, #28]
 8006578:	2b39      	cmp	r3, #57	; 0x39
 800657a:	d0ee      	beq.n	800655a <_dtoa_r+0xb12>
 800657c:	9b07      	ldr	r3, [sp, #28]
 800657e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006580:	3301      	adds	r3, #1
 8006582:	7013      	strb	r3, [r2, #0]
 8006584:	e737      	b.n	80063f6 <_dtoa_r+0x9ae>
 8006586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006588:	9a07      	ldr	r2, [sp, #28]
 800658a:	701a      	strb	r2, [r3, #0]
 800658c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800658e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006590:	4293      	cmp	r3, r2
 8006592:	d03e      	beq.n	8006612 <_dtoa_r+0xbca>
 8006594:	2300      	movs	r3, #0
 8006596:	220a      	movs	r2, #10
 8006598:	9905      	ldr	r1, [sp, #20]
 800659a:	0038      	movs	r0, r7
 800659c:	f000 f8f8 	bl	8006790 <__multadd>
 80065a0:	2300      	movs	r3, #0
 80065a2:	9005      	str	r0, [sp, #20]
 80065a4:	220a      	movs	r2, #10
 80065a6:	0021      	movs	r1, r4
 80065a8:	0038      	movs	r0, r7
 80065aa:	42ac      	cmp	r4, r5
 80065ac:	d106      	bne.n	80065bc <_dtoa_r+0xb74>
 80065ae:	f000 f8ef 	bl	8006790 <__multadd>
 80065b2:	0004      	movs	r4, r0
 80065b4:	0005      	movs	r5, r0
 80065b6:	9b08      	ldr	r3, [sp, #32]
 80065b8:	930a      	str	r3, [sp, #40]	; 0x28
 80065ba:	e778      	b.n	80064ae <_dtoa_r+0xa66>
 80065bc:	f000 f8e8 	bl	8006790 <__multadd>
 80065c0:	0029      	movs	r1, r5
 80065c2:	0004      	movs	r4, r0
 80065c4:	2300      	movs	r3, #0
 80065c6:	220a      	movs	r2, #10
 80065c8:	0038      	movs	r0, r7
 80065ca:	f000 f8e1 	bl	8006790 <__multadd>
 80065ce:	0005      	movs	r5, r0
 80065d0:	e7f1      	b.n	80065b6 <_dtoa_r+0xb6e>
 80065d2:	9b07      	ldr	r3, [sp, #28]
 80065d4:	930c      	str	r3, [sp, #48]	; 0x30
 80065d6:	2400      	movs	r4, #0
 80065d8:	0031      	movs	r1, r6
 80065da:	9805      	ldr	r0, [sp, #20]
 80065dc:	f7ff f9a8 	bl	8005930 <quorem>
 80065e0:	9b06      	ldr	r3, [sp, #24]
 80065e2:	3030      	adds	r0, #48	; 0x30
 80065e4:	5518      	strb	r0, [r3, r4]
 80065e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065e8:	3401      	adds	r4, #1
 80065ea:	9007      	str	r0, [sp, #28]
 80065ec:	42a3      	cmp	r3, r4
 80065ee:	dd07      	ble.n	8006600 <_dtoa_r+0xbb8>
 80065f0:	2300      	movs	r3, #0
 80065f2:	220a      	movs	r2, #10
 80065f4:	0038      	movs	r0, r7
 80065f6:	9905      	ldr	r1, [sp, #20]
 80065f8:	f000 f8ca 	bl	8006790 <__multadd>
 80065fc:	9005      	str	r0, [sp, #20]
 80065fe:	e7eb      	b.n	80065d8 <_dtoa_r+0xb90>
 8006600:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006602:	2001      	movs	r0, #1
 8006604:	2b00      	cmp	r3, #0
 8006606:	dd00      	ble.n	800660a <_dtoa_r+0xbc2>
 8006608:	0018      	movs	r0, r3
 800660a:	2400      	movs	r4, #0
 800660c:	9b06      	ldr	r3, [sp, #24]
 800660e:	181b      	adds	r3, r3, r0
 8006610:	9308      	str	r3, [sp, #32]
 8006612:	9905      	ldr	r1, [sp, #20]
 8006614:	2201      	movs	r2, #1
 8006616:	0038      	movs	r0, r7
 8006618:	f000 fa68 	bl	8006aec <__lshift>
 800661c:	0031      	movs	r1, r6
 800661e:	9005      	str	r0, [sp, #20]
 8006620:	f000 fad2 	bl	8006bc8 <__mcmp>
 8006624:	2800      	cmp	r0, #0
 8006626:	dc9b      	bgt.n	8006560 <_dtoa_r+0xb18>
 8006628:	d102      	bne.n	8006630 <_dtoa_r+0xbe8>
 800662a:	9b07      	ldr	r3, [sp, #28]
 800662c:	07db      	lsls	r3, r3, #31
 800662e:	d497      	bmi.n	8006560 <_dtoa_r+0xb18>
 8006630:	9b08      	ldr	r3, [sp, #32]
 8006632:	9308      	str	r3, [sp, #32]
 8006634:	3b01      	subs	r3, #1
 8006636:	781a      	ldrb	r2, [r3, #0]
 8006638:	2a30      	cmp	r2, #48	; 0x30
 800663a:	d0fa      	beq.n	8006632 <_dtoa_r+0xbea>
 800663c:	e6db      	b.n	80063f6 <_dtoa_r+0x9ae>
 800663e:	9a06      	ldr	r2, [sp, #24]
 8006640:	429a      	cmp	r2, r3
 8006642:	d18e      	bne.n	8006562 <_dtoa_r+0xb1a>
 8006644:	9b02      	ldr	r3, [sp, #8]
 8006646:	3301      	adds	r3, #1
 8006648:	9302      	str	r3, [sp, #8]
 800664a:	2331      	movs	r3, #49	; 0x31
 800664c:	e799      	b.n	8006582 <_dtoa_r+0xb3a>
 800664e:	4b09      	ldr	r3, [pc, #36]	; (8006674 <_dtoa_r+0xc2c>)
 8006650:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006652:	9306      	str	r3, [sp, #24]
 8006654:	4b08      	ldr	r3, [pc, #32]	; (8006678 <_dtoa_r+0xc30>)
 8006656:	2a00      	cmp	r2, #0
 8006658:	d001      	beq.n	800665e <_dtoa_r+0xc16>
 800665a:	f7ff fa3f 	bl	8005adc <_dtoa_r+0x94>
 800665e:	f7ff fa3f 	bl	8005ae0 <_dtoa_r+0x98>
 8006662:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006664:	2b00      	cmp	r3, #0
 8006666:	dcb6      	bgt.n	80065d6 <_dtoa_r+0xb8e>
 8006668:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800666a:	2b02      	cmp	r3, #2
 800666c:	dd00      	ble.n	8006670 <_dtoa_r+0xc28>
 800666e:	e6ac      	b.n	80063ca <_dtoa_r+0x982>
 8006670:	e7b1      	b.n	80065d6 <_dtoa_r+0xb8e>
 8006672:	46c0      	nop			; (mov r8, r8)
 8006674:	0800808c 	.word	0x0800808c
 8006678:	08008094 	.word	0x08008094

0800667c <_localeconv_r>:
 800667c:	4800      	ldr	r0, [pc, #0]	; (8006680 <_localeconv_r+0x4>)
 800667e:	4770      	bx	lr
 8006680:	20000160 	.word	0x20000160

08006684 <malloc>:
 8006684:	b510      	push	{r4, lr}
 8006686:	4b03      	ldr	r3, [pc, #12]	; (8006694 <malloc+0x10>)
 8006688:	0001      	movs	r1, r0
 800668a:	6818      	ldr	r0, [r3, #0]
 800668c:	f000 fc4c 	bl	8006f28 <_malloc_r>
 8006690:	bd10      	pop	{r4, pc}
 8006692:	46c0      	nop			; (mov r8, r8)
 8006694:	2000000c 	.word	0x2000000c

08006698 <memchr>:
 8006698:	b2c9      	uxtb	r1, r1
 800669a:	1882      	adds	r2, r0, r2
 800669c:	4290      	cmp	r0, r2
 800669e:	d101      	bne.n	80066a4 <memchr+0xc>
 80066a0:	2000      	movs	r0, #0
 80066a2:	4770      	bx	lr
 80066a4:	7803      	ldrb	r3, [r0, #0]
 80066a6:	428b      	cmp	r3, r1
 80066a8:	d0fb      	beq.n	80066a2 <memchr+0xa>
 80066aa:	3001      	adds	r0, #1
 80066ac:	e7f6      	b.n	800669c <memchr+0x4>

080066ae <memcpy>:
 80066ae:	2300      	movs	r3, #0
 80066b0:	b510      	push	{r4, lr}
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d100      	bne.n	80066b8 <memcpy+0xa>
 80066b6:	bd10      	pop	{r4, pc}
 80066b8:	5ccc      	ldrb	r4, [r1, r3]
 80066ba:	54c4      	strb	r4, [r0, r3]
 80066bc:	3301      	adds	r3, #1
 80066be:	e7f8      	b.n	80066b2 <memcpy+0x4>

080066c0 <_Balloc>:
 80066c0:	b570      	push	{r4, r5, r6, lr}
 80066c2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80066c4:	0006      	movs	r6, r0
 80066c6:	000c      	movs	r4, r1
 80066c8:	2d00      	cmp	r5, #0
 80066ca:	d10e      	bne.n	80066ea <_Balloc+0x2a>
 80066cc:	2010      	movs	r0, #16
 80066ce:	f7ff ffd9 	bl	8006684 <malloc>
 80066d2:	1e02      	subs	r2, r0, #0
 80066d4:	6270      	str	r0, [r6, #36]	; 0x24
 80066d6:	d104      	bne.n	80066e2 <_Balloc+0x22>
 80066d8:	2166      	movs	r1, #102	; 0x66
 80066da:	4b19      	ldr	r3, [pc, #100]	; (8006740 <_Balloc+0x80>)
 80066dc:	4819      	ldr	r0, [pc, #100]	; (8006744 <_Balloc+0x84>)
 80066de:	f000 fe0d 	bl	80072fc <__assert_func>
 80066e2:	6045      	str	r5, [r0, #4]
 80066e4:	6085      	str	r5, [r0, #8]
 80066e6:	6005      	str	r5, [r0, #0]
 80066e8:	60c5      	str	r5, [r0, #12]
 80066ea:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80066ec:	68eb      	ldr	r3, [r5, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d013      	beq.n	800671a <_Balloc+0x5a>
 80066f2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80066f4:	00a2      	lsls	r2, r4, #2
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	189b      	adds	r3, r3, r2
 80066fa:	6818      	ldr	r0, [r3, #0]
 80066fc:	2800      	cmp	r0, #0
 80066fe:	d118      	bne.n	8006732 <_Balloc+0x72>
 8006700:	2101      	movs	r1, #1
 8006702:	000d      	movs	r5, r1
 8006704:	40a5      	lsls	r5, r4
 8006706:	1d6a      	adds	r2, r5, #5
 8006708:	0030      	movs	r0, r6
 800670a:	0092      	lsls	r2, r2, #2
 800670c:	f000 fb74 	bl	8006df8 <_calloc_r>
 8006710:	2800      	cmp	r0, #0
 8006712:	d00c      	beq.n	800672e <_Balloc+0x6e>
 8006714:	6044      	str	r4, [r0, #4]
 8006716:	6085      	str	r5, [r0, #8]
 8006718:	e00d      	b.n	8006736 <_Balloc+0x76>
 800671a:	2221      	movs	r2, #33	; 0x21
 800671c:	2104      	movs	r1, #4
 800671e:	0030      	movs	r0, r6
 8006720:	f000 fb6a 	bl	8006df8 <_calloc_r>
 8006724:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006726:	60e8      	str	r0, [r5, #12]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1e1      	bne.n	80066f2 <_Balloc+0x32>
 800672e:	2000      	movs	r0, #0
 8006730:	bd70      	pop	{r4, r5, r6, pc}
 8006732:	6802      	ldr	r2, [r0, #0]
 8006734:	601a      	str	r2, [r3, #0]
 8006736:	2300      	movs	r3, #0
 8006738:	6103      	str	r3, [r0, #16]
 800673a:	60c3      	str	r3, [r0, #12]
 800673c:	e7f8      	b.n	8006730 <_Balloc+0x70>
 800673e:	46c0      	nop			; (mov r8, r8)
 8006740:	08008099 	.word	0x08008099
 8006744:	0800811c 	.word	0x0800811c

08006748 <_Bfree>:
 8006748:	b570      	push	{r4, r5, r6, lr}
 800674a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800674c:	0005      	movs	r5, r0
 800674e:	000c      	movs	r4, r1
 8006750:	2e00      	cmp	r6, #0
 8006752:	d10e      	bne.n	8006772 <_Bfree+0x2a>
 8006754:	2010      	movs	r0, #16
 8006756:	f7ff ff95 	bl	8006684 <malloc>
 800675a:	1e02      	subs	r2, r0, #0
 800675c:	6268      	str	r0, [r5, #36]	; 0x24
 800675e:	d104      	bne.n	800676a <_Bfree+0x22>
 8006760:	218a      	movs	r1, #138	; 0x8a
 8006762:	4b09      	ldr	r3, [pc, #36]	; (8006788 <_Bfree+0x40>)
 8006764:	4809      	ldr	r0, [pc, #36]	; (800678c <_Bfree+0x44>)
 8006766:	f000 fdc9 	bl	80072fc <__assert_func>
 800676a:	6046      	str	r6, [r0, #4]
 800676c:	6086      	str	r6, [r0, #8]
 800676e:	6006      	str	r6, [r0, #0]
 8006770:	60c6      	str	r6, [r0, #12]
 8006772:	2c00      	cmp	r4, #0
 8006774:	d007      	beq.n	8006786 <_Bfree+0x3e>
 8006776:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006778:	6862      	ldr	r2, [r4, #4]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	0092      	lsls	r2, r2, #2
 800677e:	189b      	adds	r3, r3, r2
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	6022      	str	r2, [r4, #0]
 8006784:	601c      	str	r4, [r3, #0]
 8006786:	bd70      	pop	{r4, r5, r6, pc}
 8006788:	08008099 	.word	0x08008099
 800678c:	0800811c 	.word	0x0800811c

08006790 <__multadd>:
 8006790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006792:	000e      	movs	r6, r1
 8006794:	9001      	str	r0, [sp, #4]
 8006796:	000c      	movs	r4, r1
 8006798:	001d      	movs	r5, r3
 800679a:	2000      	movs	r0, #0
 800679c:	690f      	ldr	r7, [r1, #16]
 800679e:	3614      	adds	r6, #20
 80067a0:	6833      	ldr	r3, [r6, #0]
 80067a2:	3001      	adds	r0, #1
 80067a4:	b299      	uxth	r1, r3
 80067a6:	4351      	muls	r1, r2
 80067a8:	0c1b      	lsrs	r3, r3, #16
 80067aa:	4353      	muls	r3, r2
 80067ac:	1949      	adds	r1, r1, r5
 80067ae:	0c0d      	lsrs	r5, r1, #16
 80067b0:	195b      	adds	r3, r3, r5
 80067b2:	0c1d      	lsrs	r5, r3, #16
 80067b4:	b289      	uxth	r1, r1
 80067b6:	041b      	lsls	r3, r3, #16
 80067b8:	185b      	adds	r3, r3, r1
 80067ba:	c608      	stmia	r6!, {r3}
 80067bc:	4287      	cmp	r7, r0
 80067be:	dcef      	bgt.n	80067a0 <__multadd+0x10>
 80067c0:	2d00      	cmp	r5, #0
 80067c2:	d022      	beq.n	800680a <__multadd+0x7a>
 80067c4:	68a3      	ldr	r3, [r4, #8]
 80067c6:	42bb      	cmp	r3, r7
 80067c8:	dc19      	bgt.n	80067fe <__multadd+0x6e>
 80067ca:	6863      	ldr	r3, [r4, #4]
 80067cc:	9801      	ldr	r0, [sp, #4]
 80067ce:	1c59      	adds	r1, r3, #1
 80067d0:	f7ff ff76 	bl	80066c0 <_Balloc>
 80067d4:	1e06      	subs	r6, r0, #0
 80067d6:	d105      	bne.n	80067e4 <__multadd+0x54>
 80067d8:	0002      	movs	r2, r0
 80067da:	21b5      	movs	r1, #181	; 0xb5
 80067dc:	4b0c      	ldr	r3, [pc, #48]	; (8006810 <__multadd+0x80>)
 80067de:	480d      	ldr	r0, [pc, #52]	; (8006814 <__multadd+0x84>)
 80067e0:	f000 fd8c 	bl	80072fc <__assert_func>
 80067e4:	0021      	movs	r1, r4
 80067e6:	6923      	ldr	r3, [r4, #16]
 80067e8:	310c      	adds	r1, #12
 80067ea:	1c9a      	adds	r2, r3, #2
 80067ec:	0092      	lsls	r2, r2, #2
 80067ee:	300c      	adds	r0, #12
 80067f0:	f7ff ff5d 	bl	80066ae <memcpy>
 80067f4:	0021      	movs	r1, r4
 80067f6:	9801      	ldr	r0, [sp, #4]
 80067f8:	f7ff ffa6 	bl	8006748 <_Bfree>
 80067fc:	0034      	movs	r4, r6
 80067fe:	1d3b      	adds	r3, r7, #4
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	18e3      	adds	r3, r4, r3
 8006804:	605d      	str	r5, [r3, #4]
 8006806:	1c7b      	adds	r3, r7, #1
 8006808:	6123      	str	r3, [r4, #16]
 800680a:	0020      	movs	r0, r4
 800680c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800680e:	46c0      	nop			; (mov r8, r8)
 8006810:	0800810b 	.word	0x0800810b
 8006814:	0800811c 	.word	0x0800811c

08006818 <__hi0bits>:
 8006818:	0003      	movs	r3, r0
 800681a:	0c02      	lsrs	r2, r0, #16
 800681c:	2000      	movs	r0, #0
 800681e:	4282      	cmp	r2, r0
 8006820:	d101      	bne.n	8006826 <__hi0bits+0xe>
 8006822:	041b      	lsls	r3, r3, #16
 8006824:	3010      	adds	r0, #16
 8006826:	0e1a      	lsrs	r2, r3, #24
 8006828:	d101      	bne.n	800682e <__hi0bits+0x16>
 800682a:	3008      	adds	r0, #8
 800682c:	021b      	lsls	r3, r3, #8
 800682e:	0f1a      	lsrs	r2, r3, #28
 8006830:	d101      	bne.n	8006836 <__hi0bits+0x1e>
 8006832:	3004      	adds	r0, #4
 8006834:	011b      	lsls	r3, r3, #4
 8006836:	0f9a      	lsrs	r2, r3, #30
 8006838:	d101      	bne.n	800683e <__hi0bits+0x26>
 800683a:	3002      	adds	r0, #2
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	2b00      	cmp	r3, #0
 8006840:	db03      	blt.n	800684a <__hi0bits+0x32>
 8006842:	3001      	adds	r0, #1
 8006844:	005b      	lsls	r3, r3, #1
 8006846:	d400      	bmi.n	800684a <__hi0bits+0x32>
 8006848:	2020      	movs	r0, #32
 800684a:	4770      	bx	lr

0800684c <__lo0bits>:
 800684c:	6803      	ldr	r3, [r0, #0]
 800684e:	0002      	movs	r2, r0
 8006850:	2107      	movs	r1, #7
 8006852:	0018      	movs	r0, r3
 8006854:	4008      	ands	r0, r1
 8006856:	420b      	tst	r3, r1
 8006858:	d00d      	beq.n	8006876 <__lo0bits+0x2a>
 800685a:	3906      	subs	r1, #6
 800685c:	2000      	movs	r0, #0
 800685e:	420b      	tst	r3, r1
 8006860:	d105      	bne.n	800686e <__lo0bits+0x22>
 8006862:	3002      	adds	r0, #2
 8006864:	4203      	tst	r3, r0
 8006866:	d003      	beq.n	8006870 <__lo0bits+0x24>
 8006868:	40cb      	lsrs	r3, r1
 800686a:	0008      	movs	r0, r1
 800686c:	6013      	str	r3, [r2, #0]
 800686e:	4770      	bx	lr
 8006870:	089b      	lsrs	r3, r3, #2
 8006872:	6013      	str	r3, [r2, #0]
 8006874:	e7fb      	b.n	800686e <__lo0bits+0x22>
 8006876:	b299      	uxth	r1, r3
 8006878:	2900      	cmp	r1, #0
 800687a:	d101      	bne.n	8006880 <__lo0bits+0x34>
 800687c:	2010      	movs	r0, #16
 800687e:	0c1b      	lsrs	r3, r3, #16
 8006880:	b2d9      	uxtb	r1, r3
 8006882:	2900      	cmp	r1, #0
 8006884:	d101      	bne.n	800688a <__lo0bits+0x3e>
 8006886:	3008      	adds	r0, #8
 8006888:	0a1b      	lsrs	r3, r3, #8
 800688a:	0719      	lsls	r1, r3, #28
 800688c:	d101      	bne.n	8006892 <__lo0bits+0x46>
 800688e:	3004      	adds	r0, #4
 8006890:	091b      	lsrs	r3, r3, #4
 8006892:	0799      	lsls	r1, r3, #30
 8006894:	d101      	bne.n	800689a <__lo0bits+0x4e>
 8006896:	3002      	adds	r0, #2
 8006898:	089b      	lsrs	r3, r3, #2
 800689a:	07d9      	lsls	r1, r3, #31
 800689c:	d4e9      	bmi.n	8006872 <__lo0bits+0x26>
 800689e:	3001      	adds	r0, #1
 80068a0:	085b      	lsrs	r3, r3, #1
 80068a2:	d1e6      	bne.n	8006872 <__lo0bits+0x26>
 80068a4:	2020      	movs	r0, #32
 80068a6:	e7e2      	b.n	800686e <__lo0bits+0x22>

080068a8 <__i2b>:
 80068a8:	b510      	push	{r4, lr}
 80068aa:	000c      	movs	r4, r1
 80068ac:	2101      	movs	r1, #1
 80068ae:	f7ff ff07 	bl	80066c0 <_Balloc>
 80068b2:	2800      	cmp	r0, #0
 80068b4:	d106      	bne.n	80068c4 <__i2b+0x1c>
 80068b6:	21a0      	movs	r1, #160	; 0xa0
 80068b8:	0002      	movs	r2, r0
 80068ba:	4b04      	ldr	r3, [pc, #16]	; (80068cc <__i2b+0x24>)
 80068bc:	4804      	ldr	r0, [pc, #16]	; (80068d0 <__i2b+0x28>)
 80068be:	0049      	lsls	r1, r1, #1
 80068c0:	f000 fd1c 	bl	80072fc <__assert_func>
 80068c4:	2301      	movs	r3, #1
 80068c6:	6144      	str	r4, [r0, #20]
 80068c8:	6103      	str	r3, [r0, #16]
 80068ca:	bd10      	pop	{r4, pc}
 80068cc:	0800810b 	.word	0x0800810b
 80068d0:	0800811c 	.word	0x0800811c

080068d4 <__multiply>:
 80068d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068d6:	690b      	ldr	r3, [r1, #16]
 80068d8:	0014      	movs	r4, r2
 80068da:	6912      	ldr	r2, [r2, #16]
 80068dc:	000d      	movs	r5, r1
 80068de:	b089      	sub	sp, #36	; 0x24
 80068e0:	4293      	cmp	r3, r2
 80068e2:	da01      	bge.n	80068e8 <__multiply+0x14>
 80068e4:	0025      	movs	r5, r4
 80068e6:	000c      	movs	r4, r1
 80068e8:	692f      	ldr	r7, [r5, #16]
 80068ea:	6926      	ldr	r6, [r4, #16]
 80068ec:	6869      	ldr	r1, [r5, #4]
 80068ee:	19bb      	adds	r3, r7, r6
 80068f0:	9302      	str	r3, [sp, #8]
 80068f2:	68ab      	ldr	r3, [r5, #8]
 80068f4:	19ba      	adds	r2, r7, r6
 80068f6:	4293      	cmp	r3, r2
 80068f8:	da00      	bge.n	80068fc <__multiply+0x28>
 80068fa:	3101      	adds	r1, #1
 80068fc:	f7ff fee0 	bl	80066c0 <_Balloc>
 8006900:	9001      	str	r0, [sp, #4]
 8006902:	2800      	cmp	r0, #0
 8006904:	d106      	bne.n	8006914 <__multiply+0x40>
 8006906:	215e      	movs	r1, #94	; 0x5e
 8006908:	0002      	movs	r2, r0
 800690a:	4b48      	ldr	r3, [pc, #288]	; (8006a2c <__multiply+0x158>)
 800690c:	4848      	ldr	r0, [pc, #288]	; (8006a30 <__multiply+0x15c>)
 800690e:	31ff      	adds	r1, #255	; 0xff
 8006910:	f000 fcf4 	bl	80072fc <__assert_func>
 8006914:	9b01      	ldr	r3, [sp, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	3314      	adds	r3, #20
 800691a:	469c      	mov	ip, r3
 800691c:	19bb      	adds	r3, r7, r6
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4463      	add	r3, ip
 8006922:	9303      	str	r3, [sp, #12]
 8006924:	4663      	mov	r3, ip
 8006926:	9903      	ldr	r1, [sp, #12]
 8006928:	428b      	cmp	r3, r1
 800692a:	d32c      	bcc.n	8006986 <__multiply+0xb2>
 800692c:	002b      	movs	r3, r5
 800692e:	0022      	movs	r2, r4
 8006930:	3314      	adds	r3, #20
 8006932:	00bf      	lsls	r7, r7, #2
 8006934:	3214      	adds	r2, #20
 8006936:	9306      	str	r3, [sp, #24]
 8006938:	00b6      	lsls	r6, r6, #2
 800693a:	19db      	adds	r3, r3, r7
 800693c:	9304      	str	r3, [sp, #16]
 800693e:	1993      	adds	r3, r2, r6
 8006940:	9307      	str	r3, [sp, #28]
 8006942:	2304      	movs	r3, #4
 8006944:	9305      	str	r3, [sp, #20]
 8006946:	002b      	movs	r3, r5
 8006948:	9904      	ldr	r1, [sp, #16]
 800694a:	3315      	adds	r3, #21
 800694c:	9200      	str	r2, [sp, #0]
 800694e:	4299      	cmp	r1, r3
 8006950:	d305      	bcc.n	800695e <__multiply+0x8a>
 8006952:	1b4b      	subs	r3, r1, r5
 8006954:	3b15      	subs	r3, #21
 8006956:	089b      	lsrs	r3, r3, #2
 8006958:	3301      	adds	r3, #1
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	9305      	str	r3, [sp, #20]
 800695e:	9b07      	ldr	r3, [sp, #28]
 8006960:	9a00      	ldr	r2, [sp, #0]
 8006962:	429a      	cmp	r2, r3
 8006964:	d311      	bcc.n	800698a <__multiply+0xb6>
 8006966:	9b02      	ldr	r3, [sp, #8]
 8006968:	2b00      	cmp	r3, #0
 800696a:	dd06      	ble.n	800697a <__multiply+0xa6>
 800696c:	9b03      	ldr	r3, [sp, #12]
 800696e:	3b04      	subs	r3, #4
 8006970:	9303      	str	r3, [sp, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	9300      	str	r3, [sp, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d053      	beq.n	8006a22 <__multiply+0x14e>
 800697a:	9b01      	ldr	r3, [sp, #4]
 800697c:	9a02      	ldr	r2, [sp, #8]
 800697e:	0018      	movs	r0, r3
 8006980:	611a      	str	r2, [r3, #16]
 8006982:	b009      	add	sp, #36	; 0x24
 8006984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006986:	c304      	stmia	r3!, {r2}
 8006988:	e7cd      	b.n	8006926 <__multiply+0x52>
 800698a:	9b00      	ldr	r3, [sp, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	b298      	uxth	r0, r3
 8006990:	2800      	cmp	r0, #0
 8006992:	d01b      	beq.n	80069cc <__multiply+0xf8>
 8006994:	4667      	mov	r7, ip
 8006996:	2400      	movs	r4, #0
 8006998:	9e06      	ldr	r6, [sp, #24]
 800699a:	ce02      	ldmia	r6!, {r1}
 800699c:	683a      	ldr	r2, [r7, #0]
 800699e:	b28b      	uxth	r3, r1
 80069a0:	4343      	muls	r3, r0
 80069a2:	b292      	uxth	r2, r2
 80069a4:	189b      	adds	r3, r3, r2
 80069a6:	191b      	adds	r3, r3, r4
 80069a8:	0c0c      	lsrs	r4, r1, #16
 80069aa:	4344      	muls	r4, r0
 80069ac:	683a      	ldr	r2, [r7, #0]
 80069ae:	0c11      	lsrs	r1, r2, #16
 80069b0:	1861      	adds	r1, r4, r1
 80069b2:	0c1c      	lsrs	r4, r3, #16
 80069b4:	1909      	adds	r1, r1, r4
 80069b6:	0c0c      	lsrs	r4, r1, #16
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	0409      	lsls	r1, r1, #16
 80069bc:	430b      	orrs	r3, r1
 80069be:	c708      	stmia	r7!, {r3}
 80069c0:	9b04      	ldr	r3, [sp, #16]
 80069c2:	42b3      	cmp	r3, r6
 80069c4:	d8e9      	bhi.n	800699a <__multiply+0xc6>
 80069c6:	4663      	mov	r3, ip
 80069c8:	9a05      	ldr	r2, [sp, #20]
 80069ca:	509c      	str	r4, [r3, r2]
 80069cc:	9b00      	ldr	r3, [sp, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	0c1e      	lsrs	r6, r3, #16
 80069d2:	d020      	beq.n	8006a16 <__multiply+0x142>
 80069d4:	4663      	mov	r3, ip
 80069d6:	002c      	movs	r4, r5
 80069d8:	4660      	mov	r0, ip
 80069da:	2700      	movs	r7, #0
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	3414      	adds	r4, #20
 80069e0:	6822      	ldr	r2, [r4, #0]
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	b291      	uxth	r1, r2
 80069e6:	4371      	muls	r1, r6
 80069e8:	6802      	ldr	r2, [r0, #0]
 80069ea:	0c12      	lsrs	r2, r2, #16
 80069ec:	1889      	adds	r1, r1, r2
 80069ee:	19cf      	adds	r7, r1, r7
 80069f0:	0439      	lsls	r1, r7, #16
 80069f2:	430b      	orrs	r3, r1
 80069f4:	6003      	str	r3, [r0, #0]
 80069f6:	cc02      	ldmia	r4!, {r1}
 80069f8:	6843      	ldr	r3, [r0, #4]
 80069fa:	0c09      	lsrs	r1, r1, #16
 80069fc:	4371      	muls	r1, r6
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	0c3f      	lsrs	r7, r7, #16
 8006a02:	18cb      	adds	r3, r1, r3
 8006a04:	9a04      	ldr	r2, [sp, #16]
 8006a06:	19db      	adds	r3, r3, r7
 8006a08:	0c1f      	lsrs	r7, r3, #16
 8006a0a:	3004      	adds	r0, #4
 8006a0c:	42a2      	cmp	r2, r4
 8006a0e:	d8e7      	bhi.n	80069e0 <__multiply+0x10c>
 8006a10:	4662      	mov	r2, ip
 8006a12:	9905      	ldr	r1, [sp, #20]
 8006a14:	5053      	str	r3, [r2, r1]
 8006a16:	9b00      	ldr	r3, [sp, #0]
 8006a18:	3304      	adds	r3, #4
 8006a1a:	9300      	str	r3, [sp, #0]
 8006a1c:	2304      	movs	r3, #4
 8006a1e:	449c      	add	ip, r3
 8006a20:	e79d      	b.n	800695e <__multiply+0x8a>
 8006a22:	9b02      	ldr	r3, [sp, #8]
 8006a24:	3b01      	subs	r3, #1
 8006a26:	9302      	str	r3, [sp, #8]
 8006a28:	e79d      	b.n	8006966 <__multiply+0x92>
 8006a2a:	46c0      	nop			; (mov r8, r8)
 8006a2c:	0800810b 	.word	0x0800810b
 8006a30:	0800811c 	.word	0x0800811c

08006a34 <__pow5mult>:
 8006a34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a36:	2303      	movs	r3, #3
 8006a38:	0015      	movs	r5, r2
 8006a3a:	0007      	movs	r7, r0
 8006a3c:	000e      	movs	r6, r1
 8006a3e:	401a      	ands	r2, r3
 8006a40:	421d      	tst	r5, r3
 8006a42:	d008      	beq.n	8006a56 <__pow5mult+0x22>
 8006a44:	4925      	ldr	r1, [pc, #148]	; (8006adc <__pow5mult+0xa8>)
 8006a46:	3a01      	subs	r2, #1
 8006a48:	0092      	lsls	r2, r2, #2
 8006a4a:	5852      	ldr	r2, [r2, r1]
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	0031      	movs	r1, r6
 8006a50:	f7ff fe9e 	bl	8006790 <__multadd>
 8006a54:	0006      	movs	r6, r0
 8006a56:	10ad      	asrs	r5, r5, #2
 8006a58:	d03d      	beq.n	8006ad6 <__pow5mult+0xa2>
 8006a5a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8006a5c:	2c00      	cmp	r4, #0
 8006a5e:	d10f      	bne.n	8006a80 <__pow5mult+0x4c>
 8006a60:	2010      	movs	r0, #16
 8006a62:	f7ff fe0f 	bl	8006684 <malloc>
 8006a66:	1e02      	subs	r2, r0, #0
 8006a68:	6278      	str	r0, [r7, #36]	; 0x24
 8006a6a:	d105      	bne.n	8006a78 <__pow5mult+0x44>
 8006a6c:	21d7      	movs	r1, #215	; 0xd7
 8006a6e:	4b1c      	ldr	r3, [pc, #112]	; (8006ae0 <__pow5mult+0xac>)
 8006a70:	481c      	ldr	r0, [pc, #112]	; (8006ae4 <__pow5mult+0xb0>)
 8006a72:	0049      	lsls	r1, r1, #1
 8006a74:	f000 fc42 	bl	80072fc <__assert_func>
 8006a78:	6044      	str	r4, [r0, #4]
 8006a7a:	6084      	str	r4, [r0, #8]
 8006a7c:	6004      	str	r4, [r0, #0]
 8006a7e:	60c4      	str	r4, [r0, #12]
 8006a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a82:	689c      	ldr	r4, [r3, #8]
 8006a84:	9301      	str	r3, [sp, #4]
 8006a86:	2c00      	cmp	r4, #0
 8006a88:	d108      	bne.n	8006a9c <__pow5mult+0x68>
 8006a8a:	0038      	movs	r0, r7
 8006a8c:	4916      	ldr	r1, [pc, #88]	; (8006ae8 <__pow5mult+0xb4>)
 8006a8e:	f7ff ff0b 	bl	80068a8 <__i2b>
 8006a92:	9b01      	ldr	r3, [sp, #4]
 8006a94:	0004      	movs	r4, r0
 8006a96:	6098      	str	r0, [r3, #8]
 8006a98:	2300      	movs	r3, #0
 8006a9a:	6003      	str	r3, [r0, #0]
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	421d      	tst	r5, r3
 8006aa0:	d00a      	beq.n	8006ab8 <__pow5mult+0x84>
 8006aa2:	0031      	movs	r1, r6
 8006aa4:	0022      	movs	r2, r4
 8006aa6:	0038      	movs	r0, r7
 8006aa8:	f7ff ff14 	bl	80068d4 <__multiply>
 8006aac:	0031      	movs	r1, r6
 8006aae:	9001      	str	r0, [sp, #4]
 8006ab0:	0038      	movs	r0, r7
 8006ab2:	f7ff fe49 	bl	8006748 <_Bfree>
 8006ab6:	9e01      	ldr	r6, [sp, #4]
 8006ab8:	106d      	asrs	r5, r5, #1
 8006aba:	d00c      	beq.n	8006ad6 <__pow5mult+0xa2>
 8006abc:	6820      	ldr	r0, [r4, #0]
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	d107      	bne.n	8006ad2 <__pow5mult+0x9e>
 8006ac2:	0022      	movs	r2, r4
 8006ac4:	0021      	movs	r1, r4
 8006ac6:	0038      	movs	r0, r7
 8006ac8:	f7ff ff04 	bl	80068d4 <__multiply>
 8006acc:	2300      	movs	r3, #0
 8006ace:	6020      	str	r0, [r4, #0]
 8006ad0:	6003      	str	r3, [r0, #0]
 8006ad2:	0004      	movs	r4, r0
 8006ad4:	e7e2      	b.n	8006a9c <__pow5mult+0x68>
 8006ad6:	0030      	movs	r0, r6
 8006ad8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006ada:	46c0      	nop			; (mov r8, r8)
 8006adc:	08008268 	.word	0x08008268
 8006ae0:	08008099 	.word	0x08008099
 8006ae4:	0800811c 	.word	0x0800811c
 8006ae8:	00000271 	.word	0x00000271

08006aec <__lshift>:
 8006aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006aee:	000c      	movs	r4, r1
 8006af0:	0017      	movs	r7, r2
 8006af2:	6923      	ldr	r3, [r4, #16]
 8006af4:	1155      	asrs	r5, r2, #5
 8006af6:	b087      	sub	sp, #28
 8006af8:	18eb      	adds	r3, r5, r3
 8006afa:	9302      	str	r3, [sp, #8]
 8006afc:	3301      	adds	r3, #1
 8006afe:	9301      	str	r3, [sp, #4]
 8006b00:	6849      	ldr	r1, [r1, #4]
 8006b02:	68a3      	ldr	r3, [r4, #8]
 8006b04:	9004      	str	r0, [sp, #16]
 8006b06:	9a01      	ldr	r2, [sp, #4]
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	db10      	blt.n	8006b2e <__lshift+0x42>
 8006b0c:	9804      	ldr	r0, [sp, #16]
 8006b0e:	f7ff fdd7 	bl	80066c0 <_Balloc>
 8006b12:	2300      	movs	r3, #0
 8006b14:	0002      	movs	r2, r0
 8006b16:	0006      	movs	r6, r0
 8006b18:	0019      	movs	r1, r3
 8006b1a:	3214      	adds	r2, #20
 8006b1c:	4298      	cmp	r0, r3
 8006b1e:	d10c      	bne.n	8006b3a <__lshift+0x4e>
 8006b20:	21da      	movs	r1, #218	; 0xda
 8006b22:	0002      	movs	r2, r0
 8006b24:	4b26      	ldr	r3, [pc, #152]	; (8006bc0 <__lshift+0xd4>)
 8006b26:	4827      	ldr	r0, [pc, #156]	; (8006bc4 <__lshift+0xd8>)
 8006b28:	31ff      	adds	r1, #255	; 0xff
 8006b2a:	f000 fbe7 	bl	80072fc <__assert_func>
 8006b2e:	3101      	adds	r1, #1
 8006b30:	005b      	lsls	r3, r3, #1
 8006b32:	e7e8      	b.n	8006b06 <__lshift+0x1a>
 8006b34:	0098      	lsls	r0, r3, #2
 8006b36:	5011      	str	r1, [r2, r0]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	42ab      	cmp	r3, r5
 8006b3c:	dbfa      	blt.n	8006b34 <__lshift+0x48>
 8006b3e:	43eb      	mvns	r3, r5
 8006b40:	17db      	asrs	r3, r3, #31
 8006b42:	401d      	ands	r5, r3
 8006b44:	211f      	movs	r1, #31
 8006b46:	0023      	movs	r3, r4
 8006b48:	0038      	movs	r0, r7
 8006b4a:	00ad      	lsls	r5, r5, #2
 8006b4c:	1955      	adds	r5, r2, r5
 8006b4e:	6922      	ldr	r2, [r4, #16]
 8006b50:	3314      	adds	r3, #20
 8006b52:	0092      	lsls	r2, r2, #2
 8006b54:	4008      	ands	r0, r1
 8006b56:	4684      	mov	ip, r0
 8006b58:	189a      	adds	r2, r3, r2
 8006b5a:	420f      	tst	r7, r1
 8006b5c:	d02a      	beq.n	8006bb4 <__lshift+0xc8>
 8006b5e:	3101      	adds	r1, #1
 8006b60:	1a09      	subs	r1, r1, r0
 8006b62:	9105      	str	r1, [sp, #20]
 8006b64:	2100      	movs	r1, #0
 8006b66:	9503      	str	r5, [sp, #12]
 8006b68:	4667      	mov	r7, ip
 8006b6a:	6818      	ldr	r0, [r3, #0]
 8006b6c:	40b8      	lsls	r0, r7
 8006b6e:	4301      	orrs	r1, r0
 8006b70:	9803      	ldr	r0, [sp, #12]
 8006b72:	c002      	stmia	r0!, {r1}
 8006b74:	cb02      	ldmia	r3!, {r1}
 8006b76:	9003      	str	r0, [sp, #12]
 8006b78:	9805      	ldr	r0, [sp, #20]
 8006b7a:	40c1      	lsrs	r1, r0
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d8f3      	bhi.n	8006b68 <__lshift+0x7c>
 8006b80:	0020      	movs	r0, r4
 8006b82:	3015      	adds	r0, #21
 8006b84:	2304      	movs	r3, #4
 8006b86:	4282      	cmp	r2, r0
 8006b88:	d304      	bcc.n	8006b94 <__lshift+0xa8>
 8006b8a:	1b13      	subs	r3, r2, r4
 8006b8c:	3b15      	subs	r3, #21
 8006b8e:	089b      	lsrs	r3, r3, #2
 8006b90:	3301      	adds	r3, #1
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	50e9      	str	r1, [r5, r3]
 8006b96:	2900      	cmp	r1, #0
 8006b98:	d002      	beq.n	8006ba0 <__lshift+0xb4>
 8006b9a:	9b02      	ldr	r3, [sp, #8]
 8006b9c:	3302      	adds	r3, #2
 8006b9e:	9301      	str	r3, [sp, #4]
 8006ba0:	9b01      	ldr	r3, [sp, #4]
 8006ba2:	9804      	ldr	r0, [sp, #16]
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	0021      	movs	r1, r4
 8006ba8:	6133      	str	r3, [r6, #16]
 8006baa:	f7ff fdcd 	bl	8006748 <_Bfree>
 8006bae:	0030      	movs	r0, r6
 8006bb0:	b007      	add	sp, #28
 8006bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bb4:	cb02      	ldmia	r3!, {r1}
 8006bb6:	c502      	stmia	r5!, {r1}
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d8fb      	bhi.n	8006bb4 <__lshift+0xc8>
 8006bbc:	e7f0      	b.n	8006ba0 <__lshift+0xb4>
 8006bbe:	46c0      	nop			; (mov r8, r8)
 8006bc0:	0800810b 	.word	0x0800810b
 8006bc4:	0800811c 	.word	0x0800811c

08006bc8 <__mcmp>:
 8006bc8:	6902      	ldr	r2, [r0, #16]
 8006bca:	690b      	ldr	r3, [r1, #16]
 8006bcc:	b530      	push	{r4, r5, lr}
 8006bce:	0004      	movs	r4, r0
 8006bd0:	1ad0      	subs	r0, r2, r3
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d10d      	bne.n	8006bf2 <__mcmp+0x2a>
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	3414      	adds	r4, #20
 8006bda:	3114      	adds	r1, #20
 8006bdc:	18e2      	adds	r2, r4, r3
 8006bde:	18c9      	adds	r1, r1, r3
 8006be0:	3a04      	subs	r2, #4
 8006be2:	3904      	subs	r1, #4
 8006be4:	6815      	ldr	r5, [r2, #0]
 8006be6:	680b      	ldr	r3, [r1, #0]
 8006be8:	429d      	cmp	r5, r3
 8006bea:	d003      	beq.n	8006bf4 <__mcmp+0x2c>
 8006bec:	2001      	movs	r0, #1
 8006bee:	429d      	cmp	r5, r3
 8006bf0:	d303      	bcc.n	8006bfa <__mcmp+0x32>
 8006bf2:	bd30      	pop	{r4, r5, pc}
 8006bf4:	4294      	cmp	r4, r2
 8006bf6:	d3f3      	bcc.n	8006be0 <__mcmp+0x18>
 8006bf8:	e7fb      	b.n	8006bf2 <__mcmp+0x2a>
 8006bfa:	4240      	negs	r0, r0
 8006bfc:	e7f9      	b.n	8006bf2 <__mcmp+0x2a>
	...

08006c00 <__mdiff>:
 8006c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c02:	000e      	movs	r6, r1
 8006c04:	0007      	movs	r7, r0
 8006c06:	0011      	movs	r1, r2
 8006c08:	0030      	movs	r0, r6
 8006c0a:	b087      	sub	sp, #28
 8006c0c:	0014      	movs	r4, r2
 8006c0e:	f7ff ffdb 	bl	8006bc8 <__mcmp>
 8006c12:	1e05      	subs	r5, r0, #0
 8006c14:	d110      	bne.n	8006c38 <__mdiff+0x38>
 8006c16:	0001      	movs	r1, r0
 8006c18:	0038      	movs	r0, r7
 8006c1a:	f7ff fd51 	bl	80066c0 <_Balloc>
 8006c1e:	1e02      	subs	r2, r0, #0
 8006c20:	d104      	bne.n	8006c2c <__mdiff+0x2c>
 8006c22:	4b40      	ldr	r3, [pc, #256]	; (8006d24 <__mdiff+0x124>)
 8006c24:	4940      	ldr	r1, [pc, #256]	; (8006d28 <__mdiff+0x128>)
 8006c26:	4841      	ldr	r0, [pc, #260]	; (8006d2c <__mdiff+0x12c>)
 8006c28:	f000 fb68 	bl	80072fc <__assert_func>
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	6145      	str	r5, [r0, #20]
 8006c30:	6103      	str	r3, [r0, #16]
 8006c32:	0010      	movs	r0, r2
 8006c34:	b007      	add	sp, #28
 8006c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c38:	2301      	movs	r3, #1
 8006c3a:	9301      	str	r3, [sp, #4]
 8006c3c:	2800      	cmp	r0, #0
 8006c3e:	db04      	blt.n	8006c4a <__mdiff+0x4a>
 8006c40:	0023      	movs	r3, r4
 8006c42:	0034      	movs	r4, r6
 8006c44:	001e      	movs	r6, r3
 8006c46:	2300      	movs	r3, #0
 8006c48:	9301      	str	r3, [sp, #4]
 8006c4a:	0038      	movs	r0, r7
 8006c4c:	6861      	ldr	r1, [r4, #4]
 8006c4e:	f7ff fd37 	bl	80066c0 <_Balloc>
 8006c52:	1e02      	subs	r2, r0, #0
 8006c54:	d103      	bne.n	8006c5e <__mdiff+0x5e>
 8006c56:	2190      	movs	r1, #144	; 0x90
 8006c58:	4b32      	ldr	r3, [pc, #200]	; (8006d24 <__mdiff+0x124>)
 8006c5a:	0089      	lsls	r1, r1, #2
 8006c5c:	e7e3      	b.n	8006c26 <__mdiff+0x26>
 8006c5e:	9b01      	ldr	r3, [sp, #4]
 8006c60:	2700      	movs	r7, #0
 8006c62:	60c3      	str	r3, [r0, #12]
 8006c64:	6920      	ldr	r0, [r4, #16]
 8006c66:	3414      	adds	r4, #20
 8006c68:	9401      	str	r4, [sp, #4]
 8006c6a:	9b01      	ldr	r3, [sp, #4]
 8006c6c:	0084      	lsls	r4, r0, #2
 8006c6e:	191b      	adds	r3, r3, r4
 8006c70:	0034      	movs	r4, r6
 8006c72:	9302      	str	r3, [sp, #8]
 8006c74:	6933      	ldr	r3, [r6, #16]
 8006c76:	3414      	adds	r4, #20
 8006c78:	0099      	lsls	r1, r3, #2
 8006c7a:	1863      	adds	r3, r4, r1
 8006c7c:	9303      	str	r3, [sp, #12]
 8006c7e:	0013      	movs	r3, r2
 8006c80:	3314      	adds	r3, #20
 8006c82:	469c      	mov	ip, r3
 8006c84:	9305      	str	r3, [sp, #20]
 8006c86:	9b01      	ldr	r3, [sp, #4]
 8006c88:	9304      	str	r3, [sp, #16]
 8006c8a:	9b04      	ldr	r3, [sp, #16]
 8006c8c:	cc02      	ldmia	r4!, {r1}
 8006c8e:	cb20      	ldmia	r3!, {r5}
 8006c90:	9304      	str	r3, [sp, #16]
 8006c92:	b2ab      	uxth	r3, r5
 8006c94:	19df      	adds	r7, r3, r7
 8006c96:	b28b      	uxth	r3, r1
 8006c98:	1afb      	subs	r3, r7, r3
 8006c9a:	0c09      	lsrs	r1, r1, #16
 8006c9c:	0c2d      	lsrs	r5, r5, #16
 8006c9e:	1a6d      	subs	r5, r5, r1
 8006ca0:	1419      	asrs	r1, r3, #16
 8006ca2:	186d      	adds	r5, r5, r1
 8006ca4:	4661      	mov	r1, ip
 8006ca6:	142f      	asrs	r7, r5, #16
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	042d      	lsls	r5, r5, #16
 8006cac:	432b      	orrs	r3, r5
 8006cae:	c108      	stmia	r1!, {r3}
 8006cb0:	9b03      	ldr	r3, [sp, #12]
 8006cb2:	468c      	mov	ip, r1
 8006cb4:	42a3      	cmp	r3, r4
 8006cb6:	d8e8      	bhi.n	8006c8a <__mdiff+0x8a>
 8006cb8:	0031      	movs	r1, r6
 8006cba:	9c03      	ldr	r4, [sp, #12]
 8006cbc:	3115      	adds	r1, #21
 8006cbe:	2304      	movs	r3, #4
 8006cc0:	428c      	cmp	r4, r1
 8006cc2:	d304      	bcc.n	8006cce <__mdiff+0xce>
 8006cc4:	1ba3      	subs	r3, r4, r6
 8006cc6:	3b15      	subs	r3, #21
 8006cc8:	089b      	lsrs	r3, r3, #2
 8006cca:	3301      	adds	r3, #1
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	9901      	ldr	r1, [sp, #4]
 8006cd0:	18cc      	adds	r4, r1, r3
 8006cd2:	9905      	ldr	r1, [sp, #20]
 8006cd4:	0026      	movs	r6, r4
 8006cd6:	18cb      	adds	r3, r1, r3
 8006cd8:	469c      	mov	ip, r3
 8006cda:	9902      	ldr	r1, [sp, #8]
 8006cdc:	428e      	cmp	r6, r1
 8006cde:	d310      	bcc.n	8006d02 <__mdiff+0x102>
 8006ce0:	9e02      	ldr	r6, [sp, #8]
 8006ce2:	1ee1      	subs	r1, r4, #3
 8006ce4:	2500      	movs	r5, #0
 8006ce6:	428e      	cmp	r6, r1
 8006ce8:	d304      	bcc.n	8006cf4 <__mdiff+0xf4>
 8006cea:	0031      	movs	r1, r6
 8006cec:	3103      	adds	r1, #3
 8006cee:	1b0c      	subs	r4, r1, r4
 8006cf0:	08a4      	lsrs	r4, r4, #2
 8006cf2:	00a5      	lsls	r5, r4, #2
 8006cf4:	195b      	adds	r3, r3, r5
 8006cf6:	3b04      	subs	r3, #4
 8006cf8:	6819      	ldr	r1, [r3, #0]
 8006cfa:	2900      	cmp	r1, #0
 8006cfc:	d00f      	beq.n	8006d1e <__mdiff+0x11e>
 8006cfe:	6110      	str	r0, [r2, #16]
 8006d00:	e797      	b.n	8006c32 <__mdiff+0x32>
 8006d02:	ce02      	ldmia	r6!, {r1}
 8006d04:	b28d      	uxth	r5, r1
 8006d06:	19ed      	adds	r5, r5, r7
 8006d08:	0c0f      	lsrs	r7, r1, #16
 8006d0a:	1429      	asrs	r1, r5, #16
 8006d0c:	1879      	adds	r1, r7, r1
 8006d0e:	140f      	asrs	r7, r1, #16
 8006d10:	b2ad      	uxth	r5, r5
 8006d12:	0409      	lsls	r1, r1, #16
 8006d14:	430d      	orrs	r5, r1
 8006d16:	4661      	mov	r1, ip
 8006d18:	c120      	stmia	r1!, {r5}
 8006d1a:	468c      	mov	ip, r1
 8006d1c:	e7dd      	b.n	8006cda <__mdiff+0xda>
 8006d1e:	3801      	subs	r0, #1
 8006d20:	e7e9      	b.n	8006cf6 <__mdiff+0xf6>
 8006d22:	46c0      	nop			; (mov r8, r8)
 8006d24:	0800810b 	.word	0x0800810b
 8006d28:	00000232 	.word	0x00000232
 8006d2c:	0800811c 	.word	0x0800811c

08006d30 <__d2b>:
 8006d30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d32:	2101      	movs	r1, #1
 8006d34:	0014      	movs	r4, r2
 8006d36:	001e      	movs	r6, r3
 8006d38:	9f08      	ldr	r7, [sp, #32]
 8006d3a:	f7ff fcc1 	bl	80066c0 <_Balloc>
 8006d3e:	1e05      	subs	r5, r0, #0
 8006d40:	d105      	bne.n	8006d4e <__d2b+0x1e>
 8006d42:	0002      	movs	r2, r0
 8006d44:	4b26      	ldr	r3, [pc, #152]	; (8006de0 <__d2b+0xb0>)
 8006d46:	4927      	ldr	r1, [pc, #156]	; (8006de4 <__d2b+0xb4>)
 8006d48:	4827      	ldr	r0, [pc, #156]	; (8006de8 <__d2b+0xb8>)
 8006d4a:	f000 fad7 	bl	80072fc <__assert_func>
 8006d4e:	0333      	lsls	r3, r6, #12
 8006d50:	0076      	lsls	r6, r6, #1
 8006d52:	0b1b      	lsrs	r3, r3, #12
 8006d54:	0d76      	lsrs	r6, r6, #21
 8006d56:	d124      	bne.n	8006da2 <__d2b+0x72>
 8006d58:	9301      	str	r3, [sp, #4]
 8006d5a:	2c00      	cmp	r4, #0
 8006d5c:	d027      	beq.n	8006dae <__d2b+0x7e>
 8006d5e:	4668      	mov	r0, sp
 8006d60:	9400      	str	r4, [sp, #0]
 8006d62:	f7ff fd73 	bl	800684c <__lo0bits>
 8006d66:	9c00      	ldr	r4, [sp, #0]
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	d01e      	beq.n	8006daa <__d2b+0x7a>
 8006d6c:	9b01      	ldr	r3, [sp, #4]
 8006d6e:	2120      	movs	r1, #32
 8006d70:	001a      	movs	r2, r3
 8006d72:	1a09      	subs	r1, r1, r0
 8006d74:	408a      	lsls	r2, r1
 8006d76:	40c3      	lsrs	r3, r0
 8006d78:	4322      	orrs	r2, r4
 8006d7a:	616a      	str	r2, [r5, #20]
 8006d7c:	9301      	str	r3, [sp, #4]
 8006d7e:	9c01      	ldr	r4, [sp, #4]
 8006d80:	61ac      	str	r4, [r5, #24]
 8006d82:	1e63      	subs	r3, r4, #1
 8006d84:	419c      	sbcs	r4, r3
 8006d86:	3401      	adds	r4, #1
 8006d88:	612c      	str	r4, [r5, #16]
 8006d8a:	2e00      	cmp	r6, #0
 8006d8c:	d018      	beq.n	8006dc0 <__d2b+0x90>
 8006d8e:	4b17      	ldr	r3, [pc, #92]	; (8006dec <__d2b+0xbc>)
 8006d90:	18f6      	adds	r6, r6, r3
 8006d92:	2335      	movs	r3, #53	; 0x35
 8006d94:	1836      	adds	r6, r6, r0
 8006d96:	1a18      	subs	r0, r3, r0
 8006d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d9a:	603e      	str	r6, [r7, #0]
 8006d9c:	6018      	str	r0, [r3, #0]
 8006d9e:	0028      	movs	r0, r5
 8006da0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006da2:	2280      	movs	r2, #128	; 0x80
 8006da4:	0352      	lsls	r2, r2, #13
 8006da6:	4313      	orrs	r3, r2
 8006da8:	e7d6      	b.n	8006d58 <__d2b+0x28>
 8006daa:	616c      	str	r4, [r5, #20]
 8006dac:	e7e7      	b.n	8006d7e <__d2b+0x4e>
 8006dae:	a801      	add	r0, sp, #4
 8006db0:	f7ff fd4c 	bl	800684c <__lo0bits>
 8006db4:	2401      	movs	r4, #1
 8006db6:	9b01      	ldr	r3, [sp, #4]
 8006db8:	612c      	str	r4, [r5, #16]
 8006dba:	616b      	str	r3, [r5, #20]
 8006dbc:	3020      	adds	r0, #32
 8006dbe:	e7e4      	b.n	8006d8a <__d2b+0x5a>
 8006dc0:	4b0b      	ldr	r3, [pc, #44]	; (8006df0 <__d2b+0xc0>)
 8006dc2:	18c0      	adds	r0, r0, r3
 8006dc4:	4b0b      	ldr	r3, [pc, #44]	; (8006df4 <__d2b+0xc4>)
 8006dc6:	6038      	str	r0, [r7, #0]
 8006dc8:	18e3      	adds	r3, r4, r3
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	18eb      	adds	r3, r5, r3
 8006dce:	6958      	ldr	r0, [r3, #20]
 8006dd0:	f7ff fd22 	bl	8006818 <__hi0bits>
 8006dd4:	0164      	lsls	r4, r4, #5
 8006dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dd8:	1a24      	subs	r4, r4, r0
 8006dda:	601c      	str	r4, [r3, #0]
 8006ddc:	e7df      	b.n	8006d9e <__d2b+0x6e>
 8006dde:	46c0      	nop			; (mov r8, r8)
 8006de0:	0800810b 	.word	0x0800810b
 8006de4:	0000030a 	.word	0x0000030a
 8006de8:	0800811c 	.word	0x0800811c
 8006dec:	fffffbcd 	.word	0xfffffbcd
 8006df0:	fffffbce 	.word	0xfffffbce
 8006df4:	3fffffff 	.word	0x3fffffff

08006df8 <_calloc_r>:
 8006df8:	b570      	push	{r4, r5, r6, lr}
 8006dfa:	0c13      	lsrs	r3, r2, #16
 8006dfc:	0c0d      	lsrs	r5, r1, #16
 8006dfe:	d11e      	bne.n	8006e3e <_calloc_r+0x46>
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d10c      	bne.n	8006e1e <_calloc_r+0x26>
 8006e04:	b289      	uxth	r1, r1
 8006e06:	b294      	uxth	r4, r2
 8006e08:	434c      	muls	r4, r1
 8006e0a:	0021      	movs	r1, r4
 8006e0c:	f000 f88c 	bl	8006f28 <_malloc_r>
 8006e10:	1e05      	subs	r5, r0, #0
 8006e12:	d01b      	beq.n	8006e4c <_calloc_r+0x54>
 8006e14:	0022      	movs	r2, r4
 8006e16:	2100      	movs	r1, #0
 8006e18:	f7fe f8f4 	bl	8005004 <memset>
 8006e1c:	e016      	b.n	8006e4c <_calloc_r+0x54>
 8006e1e:	1c1d      	adds	r5, r3, #0
 8006e20:	1c0b      	adds	r3, r1, #0
 8006e22:	b292      	uxth	r2, r2
 8006e24:	b289      	uxth	r1, r1
 8006e26:	b29c      	uxth	r4, r3
 8006e28:	4351      	muls	r1, r2
 8006e2a:	b2ab      	uxth	r3, r5
 8006e2c:	4363      	muls	r3, r4
 8006e2e:	0c0c      	lsrs	r4, r1, #16
 8006e30:	191c      	adds	r4, r3, r4
 8006e32:	0c22      	lsrs	r2, r4, #16
 8006e34:	d107      	bne.n	8006e46 <_calloc_r+0x4e>
 8006e36:	0424      	lsls	r4, r4, #16
 8006e38:	b289      	uxth	r1, r1
 8006e3a:	430c      	orrs	r4, r1
 8006e3c:	e7e5      	b.n	8006e0a <_calloc_r+0x12>
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d101      	bne.n	8006e46 <_calloc_r+0x4e>
 8006e42:	1c13      	adds	r3, r2, #0
 8006e44:	e7ed      	b.n	8006e22 <_calloc_r+0x2a>
 8006e46:	230c      	movs	r3, #12
 8006e48:	2500      	movs	r5, #0
 8006e4a:	6003      	str	r3, [r0, #0]
 8006e4c:	0028      	movs	r0, r5
 8006e4e:	bd70      	pop	{r4, r5, r6, pc}

08006e50 <_free_r>:
 8006e50:	b570      	push	{r4, r5, r6, lr}
 8006e52:	0005      	movs	r5, r0
 8006e54:	2900      	cmp	r1, #0
 8006e56:	d010      	beq.n	8006e7a <_free_r+0x2a>
 8006e58:	1f0c      	subs	r4, r1, #4
 8006e5a:	6823      	ldr	r3, [r4, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	da00      	bge.n	8006e62 <_free_r+0x12>
 8006e60:	18e4      	adds	r4, r4, r3
 8006e62:	0028      	movs	r0, r5
 8006e64:	f000 fa9e 	bl	80073a4 <__malloc_lock>
 8006e68:	4a1d      	ldr	r2, [pc, #116]	; (8006ee0 <_free_r+0x90>)
 8006e6a:	6813      	ldr	r3, [r2, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d105      	bne.n	8006e7c <_free_r+0x2c>
 8006e70:	6063      	str	r3, [r4, #4]
 8006e72:	6014      	str	r4, [r2, #0]
 8006e74:	0028      	movs	r0, r5
 8006e76:	f000 fa9d 	bl	80073b4 <__malloc_unlock>
 8006e7a:	bd70      	pop	{r4, r5, r6, pc}
 8006e7c:	42a3      	cmp	r3, r4
 8006e7e:	d908      	bls.n	8006e92 <_free_r+0x42>
 8006e80:	6821      	ldr	r1, [r4, #0]
 8006e82:	1860      	adds	r0, r4, r1
 8006e84:	4283      	cmp	r3, r0
 8006e86:	d1f3      	bne.n	8006e70 <_free_r+0x20>
 8006e88:	6818      	ldr	r0, [r3, #0]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	1841      	adds	r1, r0, r1
 8006e8e:	6021      	str	r1, [r4, #0]
 8006e90:	e7ee      	b.n	8006e70 <_free_r+0x20>
 8006e92:	001a      	movs	r2, r3
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d001      	beq.n	8006e9e <_free_r+0x4e>
 8006e9a:	42a3      	cmp	r3, r4
 8006e9c:	d9f9      	bls.n	8006e92 <_free_r+0x42>
 8006e9e:	6811      	ldr	r1, [r2, #0]
 8006ea0:	1850      	adds	r0, r2, r1
 8006ea2:	42a0      	cmp	r0, r4
 8006ea4:	d10b      	bne.n	8006ebe <_free_r+0x6e>
 8006ea6:	6820      	ldr	r0, [r4, #0]
 8006ea8:	1809      	adds	r1, r1, r0
 8006eaa:	1850      	adds	r0, r2, r1
 8006eac:	6011      	str	r1, [r2, #0]
 8006eae:	4283      	cmp	r3, r0
 8006eb0:	d1e0      	bne.n	8006e74 <_free_r+0x24>
 8006eb2:	6818      	ldr	r0, [r3, #0]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	1841      	adds	r1, r0, r1
 8006eb8:	6011      	str	r1, [r2, #0]
 8006eba:	6053      	str	r3, [r2, #4]
 8006ebc:	e7da      	b.n	8006e74 <_free_r+0x24>
 8006ebe:	42a0      	cmp	r0, r4
 8006ec0:	d902      	bls.n	8006ec8 <_free_r+0x78>
 8006ec2:	230c      	movs	r3, #12
 8006ec4:	602b      	str	r3, [r5, #0]
 8006ec6:	e7d5      	b.n	8006e74 <_free_r+0x24>
 8006ec8:	6821      	ldr	r1, [r4, #0]
 8006eca:	1860      	adds	r0, r4, r1
 8006ecc:	4283      	cmp	r3, r0
 8006ece:	d103      	bne.n	8006ed8 <_free_r+0x88>
 8006ed0:	6818      	ldr	r0, [r3, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	1841      	adds	r1, r0, r1
 8006ed6:	6021      	str	r1, [r4, #0]
 8006ed8:	6063      	str	r3, [r4, #4]
 8006eda:	6054      	str	r4, [r2, #4]
 8006edc:	e7ca      	b.n	8006e74 <_free_r+0x24>
 8006ede:	46c0      	nop			; (mov r8, r8)
 8006ee0:	200002f4 	.word	0x200002f4

08006ee4 <sbrk_aligned>:
 8006ee4:	b570      	push	{r4, r5, r6, lr}
 8006ee6:	4e0f      	ldr	r6, [pc, #60]	; (8006f24 <sbrk_aligned+0x40>)
 8006ee8:	000d      	movs	r5, r1
 8006eea:	6831      	ldr	r1, [r6, #0]
 8006eec:	0004      	movs	r4, r0
 8006eee:	2900      	cmp	r1, #0
 8006ef0:	d102      	bne.n	8006ef8 <sbrk_aligned+0x14>
 8006ef2:	f000 f9f1 	bl	80072d8 <_sbrk_r>
 8006ef6:	6030      	str	r0, [r6, #0]
 8006ef8:	0029      	movs	r1, r5
 8006efa:	0020      	movs	r0, r4
 8006efc:	f000 f9ec 	bl	80072d8 <_sbrk_r>
 8006f00:	1c43      	adds	r3, r0, #1
 8006f02:	d00a      	beq.n	8006f1a <sbrk_aligned+0x36>
 8006f04:	2303      	movs	r3, #3
 8006f06:	1cc5      	adds	r5, r0, #3
 8006f08:	439d      	bics	r5, r3
 8006f0a:	42a8      	cmp	r0, r5
 8006f0c:	d007      	beq.n	8006f1e <sbrk_aligned+0x3a>
 8006f0e:	1a29      	subs	r1, r5, r0
 8006f10:	0020      	movs	r0, r4
 8006f12:	f000 f9e1 	bl	80072d8 <_sbrk_r>
 8006f16:	1c43      	adds	r3, r0, #1
 8006f18:	d101      	bne.n	8006f1e <sbrk_aligned+0x3a>
 8006f1a:	2501      	movs	r5, #1
 8006f1c:	426d      	negs	r5, r5
 8006f1e:	0028      	movs	r0, r5
 8006f20:	bd70      	pop	{r4, r5, r6, pc}
 8006f22:	46c0      	nop			; (mov r8, r8)
 8006f24:	200002f8 	.word	0x200002f8

08006f28 <_malloc_r>:
 8006f28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f2a:	2203      	movs	r2, #3
 8006f2c:	1ccb      	adds	r3, r1, #3
 8006f2e:	4393      	bics	r3, r2
 8006f30:	3308      	adds	r3, #8
 8006f32:	0006      	movs	r6, r0
 8006f34:	001f      	movs	r7, r3
 8006f36:	2b0c      	cmp	r3, #12
 8006f38:	d232      	bcs.n	8006fa0 <_malloc_r+0x78>
 8006f3a:	270c      	movs	r7, #12
 8006f3c:	42b9      	cmp	r1, r7
 8006f3e:	d831      	bhi.n	8006fa4 <_malloc_r+0x7c>
 8006f40:	0030      	movs	r0, r6
 8006f42:	f000 fa2f 	bl	80073a4 <__malloc_lock>
 8006f46:	4d32      	ldr	r5, [pc, #200]	; (8007010 <_malloc_r+0xe8>)
 8006f48:	682b      	ldr	r3, [r5, #0]
 8006f4a:	001c      	movs	r4, r3
 8006f4c:	2c00      	cmp	r4, #0
 8006f4e:	d12e      	bne.n	8006fae <_malloc_r+0x86>
 8006f50:	0039      	movs	r1, r7
 8006f52:	0030      	movs	r0, r6
 8006f54:	f7ff ffc6 	bl	8006ee4 <sbrk_aligned>
 8006f58:	0004      	movs	r4, r0
 8006f5a:	1c43      	adds	r3, r0, #1
 8006f5c:	d11e      	bne.n	8006f9c <_malloc_r+0x74>
 8006f5e:	682c      	ldr	r4, [r5, #0]
 8006f60:	0025      	movs	r5, r4
 8006f62:	2d00      	cmp	r5, #0
 8006f64:	d14a      	bne.n	8006ffc <_malloc_r+0xd4>
 8006f66:	6823      	ldr	r3, [r4, #0]
 8006f68:	0029      	movs	r1, r5
 8006f6a:	18e3      	adds	r3, r4, r3
 8006f6c:	0030      	movs	r0, r6
 8006f6e:	9301      	str	r3, [sp, #4]
 8006f70:	f000 f9b2 	bl	80072d8 <_sbrk_r>
 8006f74:	9b01      	ldr	r3, [sp, #4]
 8006f76:	4283      	cmp	r3, r0
 8006f78:	d143      	bne.n	8007002 <_malloc_r+0xda>
 8006f7a:	6823      	ldr	r3, [r4, #0]
 8006f7c:	3703      	adds	r7, #3
 8006f7e:	1aff      	subs	r7, r7, r3
 8006f80:	2303      	movs	r3, #3
 8006f82:	439f      	bics	r7, r3
 8006f84:	3708      	adds	r7, #8
 8006f86:	2f0c      	cmp	r7, #12
 8006f88:	d200      	bcs.n	8006f8c <_malloc_r+0x64>
 8006f8a:	270c      	movs	r7, #12
 8006f8c:	0039      	movs	r1, r7
 8006f8e:	0030      	movs	r0, r6
 8006f90:	f7ff ffa8 	bl	8006ee4 <sbrk_aligned>
 8006f94:	1c43      	adds	r3, r0, #1
 8006f96:	d034      	beq.n	8007002 <_malloc_r+0xda>
 8006f98:	6823      	ldr	r3, [r4, #0]
 8006f9a:	19df      	adds	r7, r3, r7
 8006f9c:	6027      	str	r7, [r4, #0]
 8006f9e:	e013      	b.n	8006fc8 <_malloc_r+0xa0>
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	dacb      	bge.n	8006f3c <_malloc_r+0x14>
 8006fa4:	230c      	movs	r3, #12
 8006fa6:	2500      	movs	r5, #0
 8006fa8:	6033      	str	r3, [r6, #0]
 8006faa:	0028      	movs	r0, r5
 8006fac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006fae:	6822      	ldr	r2, [r4, #0]
 8006fb0:	1bd1      	subs	r1, r2, r7
 8006fb2:	d420      	bmi.n	8006ff6 <_malloc_r+0xce>
 8006fb4:	290b      	cmp	r1, #11
 8006fb6:	d917      	bls.n	8006fe8 <_malloc_r+0xc0>
 8006fb8:	19e2      	adds	r2, r4, r7
 8006fba:	6027      	str	r7, [r4, #0]
 8006fbc:	42a3      	cmp	r3, r4
 8006fbe:	d111      	bne.n	8006fe4 <_malloc_r+0xbc>
 8006fc0:	602a      	str	r2, [r5, #0]
 8006fc2:	6863      	ldr	r3, [r4, #4]
 8006fc4:	6011      	str	r1, [r2, #0]
 8006fc6:	6053      	str	r3, [r2, #4]
 8006fc8:	0030      	movs	r0, r6
 8006fca:	0025      	movs	r5, r4
 8006fcc:	f000 f9f2 	bl	80073b4 <__malloc_unlock>
 8006fd0:	2207      	movs	r2, #7
 8006fd2:	350b      	adds	r5, #11
 8006fd4:	1d23      	adds	r3, r4, #4
 8006fd6:	4395      	bics	r5, r2
 8006fd8:	1aea      	subs	r2, r5, r3
 8006fda:	429d      	cmp	r5, r3
 8006fdc:	d0e5      	beq.n	8006faa <_malloc_r+0x82>
 8006fde:	1b5b      	subs	r3, r3, r5
 8006fe0:	50a3      	str	r3, [r4, r2]
 8006fe2:	e7e2      	b.n	8006faa <_malloc_r+0x82>
 8006fe4:	605a      	str	r2, [r3, #4]
 8006fe6:	e7ec      	b.n	8006fc2 <_malloc_r+0x9a>
 8006fe8:	6862      	ldr	r2, [r4, #4]
 8006fea:	42a3      	cmp	r3, r4
 8006fec:	d101      	bne.n	8006ff2 <_malloc_r+0xca>
 8006fee:	602a      	str	r2, [r5, #0]
 8006ff0:	e7ea      	b.n	8006fc8 <_malloc_r+0xa0>
 8006ff2:	605a      	str	r2, [r3, #4]
 8006ff4:	e7e8      	b.n	8006fc8 <_malloc_r+0xa0>
 8006ff6:	0023      	movs	r3, r4
 8006ff8:	6864      	ldr	r4, [r4, #4]
 8006ffa:	e7a7      	b.n	8006f4c <_malloc_r+0x24>
 8006ffc:	002c      	movs	r4, r5
 8006ffe:	686d      	ldr	r5, [r5, #4]
 8007000:	e7af      	b.n	8006f62 <_malloc_r+0x3a>
 8007002:	230c      	movs	r3, #12
 8007004:	0030      	movs	r0, r6
 8007006:	6033      	str	r3, [r6, #0]
 8007008:	f000 f9d4 	bl	80073b4 <__malloc_unlock>
 800700c:	e7cd      	b.n	8006faa <_malloc_r+0x82>
 800700e:	46c0      	nop			; (mov r8, r8)
 8007010:	200002f4 	.word	0x200002f4

08007014 <__ssputs_r>:
 8007014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007016:	688e      	ldr	r6, [r1, #8]
 8007018:	b085      	sub	sp, #20
 800701a:	0007      	movs	r7, r0
 800701c:	000c      	movs	r4, r1
 800701e:	9203      	str	r2, [sp, #12]
 8007020:	9301      	str	r3, [sp, #4]
 8007022:	429e      	cmp	r6, r3
 8007024:	d83c      	bhi.n	80070a0 <__ssputs_r+0x8c>
 8007026:	2390      	movs	r3, #144	; 0x90
 8007028:	898a      	ldrh	r2, [r1, #12]
 800702a:	00db      	lsls	r3, r3, #3
 800702c:	421a      	tst	r2, r3
 800702e:	d034      	beq.n	800709a <__ssputs_r+0x86>
 8007030:	6909      	ldr	r1, [r1, #16]
 8007032:	6823      	ldr	r3, [r4, #0]
 8007034:	6960      	ldr	r0, [r4, #20]
 8007036:	1a5b      	subs	r3, r3, r1
 8007038:	9302      	str	r3, [sp, #8]
 800703a:	2303      	movs	r3, #3
 800703c:	4343      	muls	r3, r0
 800703e:	0fdd      	lsrs	r5, r3, #31
 8007040:	18ed      	adds	r5, r5, r3
 8007042:	9b01      	ldr	r3, [sp, #4]
 8007044:	9802      	ldr	r0, [sp, #8]
 8007046:	3301      	adds	r3, #1
 8007048:	181b      	adds	r3, r3, r0
 800704a:	106d      	asrs	r5, r5, #1
 800704c:	42ab      	cmp	r3, r5
 800704e:	d900      	bls.n	8007052 <__ssputs_r+0x3e>
 8007050:	001d      	movs	r5, r3
 8007052:	0553      	lsls	r3, r2, #21
 8007054:	d532      	bpl.n	80070bc <__ssputs_r+0xa8>
 8007056:	0029      	movs	r1, r5
 8007058:	0038      	movs	r0, r7
 800705a:	f7ff ff65 	bl	8006f28 <_malloc_r>
 800705e:	1e06      	subs	r6, r0, #0
 8007060:	d109      	bne.n	8007076 <__ssputs_r+0x62>
 8007062:	230c      	movs	r3, #12
 8007064:	603b      	str	r3, [r7, #0]
 8007066:	2340      	movs	r3, #64	; 0x40
 8007068:	2001      	movs	r0, #1
 800706a:	89a2      	ldrh	r2, [r4, #12]
 800706c:	4240      	negs	r0, r0
 800706e:	4313      	orrs	r3, r2
 8007070:	81a3      	strh	r3, [r4, #12]
 8007072:	b005      	add	sp, #20
 8007074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007076:	9a02      	ldr	r2, [sp, #8]
 8007078:	6921      	ldr	r1, [r4, #16]
 800707a:	f7ff fb18 	bl	80066ae <memcpy>
 800707e:	89a3      	ldrh	r3, [r4, #12]
 8007080:	4a14      	ldr	r2, [pc, #80]	; (80070d4 <__ssputs_r+0xc0>)
 8007082:	401a      	ands	r2, r3
 8007084:	2380      	movs	r3, #128	; 0x80
 8007086:	4313      	orrs	r3, r2
 8007088:	81a3      	strh	r3, [r4, #12]
 800708a:	9b02      	ldr	r3, [sp, #8]
 800708c:	6126      	str	r6, [r4, #16]
 800708e:	18f6      	adds	r6, r6, r3
 8007090:	6026      	str	r6, [r4, #0]
 8007092:	6165      	str	r5, [r4, #20]
 8007094:	9e01      	ldr	r6, [sp, #4]
 8007096:	1aed      	subs	r5, r5, r3
 8007098:	60a5      	str	r5, [r4, #8]
 800709a:	9b01      	ldr	r3, [sp, #4]
 800709c:	429e      	cmp	r6, r3
 800709e:	d900      	bls.n	80070a2 <__ssputs_r+0x8e>
 80070a0:	9e01      	ldr	r6, [sp, #4]
 80070a2:	0032      	movs	r2, r6
 80070a4:	9903      	ldr	r1, [sp, #12]
 80070a6:	6820      	ldr	r0, [r4, #0]
 80070a8:	f000 f968 	bl	800737c <memmove>
 80070ac:	68a3      	ldr	r3, [r4, #8]
 80070ae:	2000      	movs	r0, #0
 80070b0:	1b9b      	subs	r3, r3, r6
 80070b2:	60a3      	str	r3, [r4, #8]
 80070b4:	6823      	ldr	r3, [r4, #0]
 80070b6:	199e      	adds	r6, r3, r6
 80070b8:	6026      	str	r6, [r4, #0]
 80070ba:	e7da      	b.n	8007072 <__ssputs_r+0x5e>
 80070bc:	002a      	movs	r2, r5
 80070be:	0038      	movs	r0, r7
 80070c0:	f000 f980 	bl	80073c4 <_realloc_r>
 80070c4:	1e06      	subs	r6, r0, #0
 80070c6:	d1e0      	bne.n	800708a <__ssputs_r+0x76>
 80070c8:	0038      	movs	r0, r7
 80070ca:	6921      	ldr	r1, [r4, #16]
 80070cc:	f7ff fec0 	bl	8006e50 <_free_r>
 80070d0:	e7c7      	b.n	8007062 <__ssputs_r+0x4e>
 80070d2:	46c0      	nop			; (mov r8, r8)
 80070d4:	fffffb7f 	.word	0xfffffb7f

080070d8 <_svfiprintf_r>:
 80070d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070da:	b0a1      	sub	sp, #132	; 0x84
 80070dc:	9003      	str	r0, [sp, #12]
 80070de:	001d      	movs	r5, r3
 80070e0:	898b      	ldrh	r3, [r1, #12]
 80070e2:	000f      	movs	r7, r1
 80070e4:	0016      	movs	r6, r2
 80070e6:	061b      	lsls	r3, r3, #24
 80070e8:	d511      	bpl.n	800710e <_svfiprintf_r+0x36>
 80070ea:	690b      	ldr	r3, [r1, #16]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10e      	bne.n	800710e <_svfiprintf_r+0x36>
 80070f0:	2140      	movs	r1, #64	; 0x40
 80070f2:	f7ff ff19 	bl	8006f28 <_malloc_r>
 80070f6:	6038      	str	r0, [r7, #0]
 80070f8:	6138      	str	r0, [r7, #16]
 80070fa:	2800      	cmp	r0, #0
 80070fc:	d105      	bne.n	800710a <_svfiprintf_r+0x32>
 80070fe:	230c      	movs	r3, #12
 8007100:	9a03      	ldr	r2, [sp, #12]
 8007102:	3801      	subs	r0, #1
 8007104:	6013      	str	r3, [r2, #0]
 8007106:	b021      	add	sp, #132	; 0x84
 8007108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800710a:	2340      	movs	r3, #64	; 0x40
 800710c:	617b      	str	r3, [r7, #20]
 800710e:	2300      	movs	r3, #0
 8007110:	ac08      	add	r4, sp, #32
 8007112:	6163      	str	r3, [r4, #20]
 8007114:	3320      	adds	r3, #32
 8007116:	7663      	strb	r3, [r4, #25]
 8007118:	3310      	adds	r3, #16
 800711a:	76a3      	strb	r3, [r4, #26]
 800711c:	9507      	str	r5, [sp, #28]
 800711e:	0035      	movs	r5, r6
 8007120:	782b      	ldrb	r3, [r5, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d001      	beq.n	800712a <_svfiprintf_r+0x52>
 8007126:	2b25      	cmp	r3, #37	; 0x25
 8007128:	d147      	bne.n	80071ba <_svfiprintf_r+0xe2>
 800712a:	1bab      	subs	r3, r5, r6
 800712c:	9305      	str	r3, [sp, #20]
 800712e:	42b5      	cmp	r5, r6
 8007130:	d00c      	beq.n	800714c <_svfiprintf_r+0x74>
 8007132:	0032      	movs	r2, r6
 8007134:	0039      	movs	r1, r7
 8007136:	9803      	ldr	r0, [sp, #12]
 8007138:	f7ff ff6c 	bl	8007014 <__ssputs_r>
 800713c:	1c43      	adds	r3, r0, #1
 800713e:	d100      	bne.n	8007142 <_svfiprintf_r+0x6a>
 8007140:	e0ae      	b.n	80072a0 <_svfiprintf_r+0x1c8>
 8007142:	6962      	ldr	r2, [r4, #20]
 8007144:	9b05      	ldr	r3, [sp, #20]
 8007146:	4694      	mov	ip, r2
 8007148:	4463      	add	r3, ip
 800714a:	6163      	str	r3, [r4, #20]
 800714c:	782b      	ldrb	r3, [r5, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d100      	bne.n	8007154 <_svfiprintf_r+0x7c>
 8007152:	e0a5      	b.n	80072a0 <_svfiprintf_r+0x1c8>
 8007154:	2201      	movs	r2, #1
 8007156:	2300      	movs	r3, #0
 8007158:	4252      	negs	r2, r2
 800715a:	6062      	str	r2, [r4, #4]
 800715c:	a904      	add	r1, sp, #16
 800715e:	3254      	adds	r2, #84	; 0x54
 8007160:	1852      	adds	r2, r2, r1
 8007162:	1c6e      	adds	r6, r5, #1
 8007164:	6023      	str	r3, [r4, #0]
 8007166:	60e3      	str	r3, [r4, #12]
 8007168:	60a3      	str	r3, [r4, #8]
 800716a:	7013      	strb	r3, [r2, #0]
 800716c:	65a3      	str	r3, [r4, #88]	; 0x58
 800716e:	2205      	movs	r2, #5
 8007170:	7831      	ldrb	r1, [r6, #0]
 8007172:	4854      	ldr	r0, [pc, #336]	; (80072c4 <_svfiprintf_r+0x1ec>)
 8007174:	f7ff fa90 	bl	8006698 <memchr>
 8007178:	1c75      	adds	r5, r6, #1
 800717a:	2800      	cmp	r0, #0
 800717c:	d11f      	bne.n	80071be <_svfiprintf_r+0xe6>
 800717e:	6822      	ldr	r2, [r4, #0]
 8007180:	06d3      	lsls	r3, r2, #27
 8007182:	d504      	bpl.n	800718e <_svfiprintf_r+0xb6>
 8007184:	2353      	movs	r3, #83	; 0x53
 8007186:	a904      	add	r1, sp, #16
 8007188:	185b      	adds	r3, r3, r1
 800718a:	2120      	movs	r1, #32
 800718c:	7019      	strb	r1, [r3, #0]
 800718e:	0713      	lsls	r3, r2, #28
 8007190:	d504      	bpl.n	800719c <_svfiprintf_r+0xc4>
 8007192:	2353      	movs	r3, #83	; 0x53
 8007194:	a904      	add	r1, sp, #16
 8007196:	185b      	adds	r3, r3, r1
 8007198:	212b      	movs	r1, #43	; 0x2b
 800719a:	7019      	strb	r1, [r3, #0]
 800719c:	7833      	ldrb	r3, [r6, #0]
 800719e:	2b2a      	cmp	r3, #42	; 0x2a
 80071a0:	d016      	beq.n	80071d0 <_svfiprintf_r+0xf8>
 80071a2:	0035      	movs	r5, r6
 80071a4:	2100      	movs	r1, #0
 80071a6:	200a      	movs	r0, #10
 80071a8:	68e3      	ldr	r3, [r4, #12]
 80071aa:	782a      	ldrb	r2, [r5, #0]
 80071ac:	1c6e      	adds	r6, r5, #1
 80071ae:	3a30      	subs	r2, #48	; 0x30
 80071b0:	2a09      	cmp	r2, #9
 80071b2:	d94e      	bls.n	8007252 <_svfiprintf_r+0x17a>
 80071b4:	2900      	cmp	r1, #0
 80071b6:	d111      	bne.n	80071dc <_svfiprintf_r+0x104>
 80071b8:	e017      	b.n	80071ea <_svfiprintf_r+0x112>
 80071ba:	3501      	adds	r5, #1
 80071bc:	e7b0      	b.n	8007120 <_svfiprintf_r+0x48>
 80071be:	4b41      	ldr	r3, [pc, #260]	; (80072c4 <_svfiprintf_r+0x1ec>)
 80071c0:	6822      	ldr	r2, [r4, #0]
 80071c2:	1ac0      	subs	r0, r0, r3
 80071c4:	2301      	movs	r3, #1
 80071c6:	4083      	lsls	r3, r0
 80071c8:	4313      	orrs	r3, r2
 80071ca:	002e      	movs	r6, r5
 80071cc:	6023      	str	r3, [r4, #0]
 80071ce:	e7ce      	b.n	800716e <_svfiprintf_r+0x96>
 80071d0:	9b07      	ldr	r3, [sp, #28]
 80071d2:	1d19      	adds	r1, r3, #4
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	9107      	str	r1, [sp, #28]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	db01      	blt.n	80071e0 <_svfiprintf_r+0x108>
 80071dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80071de:	e004      	b.n	80071ea <_svfiprintf_r+0x112>
 80071e0:	425b      	negs	r3, r3
 80071e2:	60e3      	str	r3, [r4, #12]
 80071e4:	2302      	movs	r3, #2
 80071e6:	4313      	orrs	r3, r2
 80071e8:	6023      	str	r3, [r4, #0]
 80071ea:	782b      	ldrb	r3, [r5, #0]
 80071ec:	2b2e      	cmp	r3, #46	; 0x2e
 80071ee:	d10a      	bne.n	8007206 <_svfiprintf_r+0x12e>
 80071f0:	786b      	ldrb	r3, [r5, #1]
 80071f2:	2b2a      	cmp	r3, #42	; 0x2a
 80071f4:	d135      	bne.n	8007262 <_svfiprintf_r+0x18a>
 80071f6:	9b07      	ldr	r3, [sp, #28]
 80071f8:	3502      	adds	r5, #2
 80071fa:	1d1a      	adds	r2, r3, #4
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	9207      	str	r2, [sp, #28]
 8007200:	2b00      	cmp	r3, #0
 8007202:	db2b      	blt.n	800725c <_svfiprintf_r+0x184>
 8007204:	9309      	str	r3, [sp, #36]	; 0x24
 8007206:	4e30      	ldr	r6, [pc, #192]	; (80072c8 <_svfiprintf_r+0x1f0>)
 8007208:	2203      	movs	r2, #3
 800720a:	0030      	movs	r0, r6
 800720c:	7829      	ldrb	r1, [r5, #0]
 800720e:	f7ff fa43 	bl	8006698 <memchr>
 8007212:	2800      	cmp	r0, #0
 8007214:	d006      	beq.n	8007224 <_svfiprintf_r+0x14c>
 8007216:	2340      	movs	r3, #64	; 0x40
 8007218:	1b80      	subs	r0, r0, r6
 800721a:	4083      	lsls	r3, r0
 800721c:	6822      	ldr	r2, [r4, #0]
 800721e:	3501      	adds	r5, #1
 8007220:	4313      	orrs	r3, r2
 8007222:	6023      	str	r3, [r4, #0]
 8007224:	7829      	ldrb	r1, [r5, #0]
 8007226:	2206      	movs	r2, #6
 8007228:	4828      	ldr	r0, [pc, #160]	; (80072cc <_svfiprintf_r+0x1f4>)
 800722a:	1c6e      	adds	r6, r5, #1
 800722c:	7621      	strb	r1, [r4, #24]
 800722e:	f7ff fa33 	bl	8006698 <memchr>
 8007232:	2800      	cmp	r0, #0
 8007234:	d03c      	beq.n	80072b0 <_svfiprintf_r+0x1d8>
 8007236:	4b26      	ldr	r3, [pc, #152]	; (80072d0 <_svfiprintf_r+0x1f8>)
 8007238:	2b00      	cmp	r3, #0
 800723a:	d125      	bne.n	8007288 <_svfiprintf_r+0x1b0>
 800723c:	2207      	movs	r2, #7
 800723e:	9b07      	ldr	r3, [sp, #28]
 8007240:	3307      	adds	r3, #7
 8007242:	4393      	bics	r3, r2
 8007244:	3308      	adds	r3, #8
 8007246:	9307      	str	r3, [sp, #28]
 8007248:	6963      	ldr	r3, [r4, #20]
 800724a:	9a04      	ldr	r2, [sp, #16]
 800724c:	189b      	adds	r3, r3, r2
 800724e:	6163      	str	r3, [r4, #20]
 8007250:	e765      	b.n	800711e <_svfiprintf_r+0x46>
 8007252:	4343      	muls	r3, r0
 8007254:	0035      	movs	r5, r6
 8007256:	2101      	movs	r1, #1
 8007258:	189b      	adds	r3, r3, r2
 800725a:	e7a6      	b.n	80071aa <_svfiprintf_r+0xd2>
 800725c:	2301      	movs	r3, #1
 800725e:	425b      	negs	r3, r3
 8007260:	e7d0      	b.n	8007204 <_svfiprintf_r+0x12c>
 8007262:	2300      	movs	r3, #0
 8007264:	200a      	movs	r0, #10
 8007266:	001a      	movs	r2, r3
 8007268:	3501      	adds	r5, #1
 800726a:	6063      	str	r3, [r4, #4]
 800726c:	7829      	ldrb	r1, [r5, #0]
 800726e:	1c6e      	adds	r6, r5, #1
 8007270:	3930      	subs	r1, #48	; 0x30
 8007272:	2909      	cmp	r1, #9
 8007274:	d903      	bls.n	800727e <_svfiprintf_r+0x1a6>
 8007276:	2b00      	cmp	r3, #0
 8007278:	d0c5      	beq.n	8007206 <_svfiprintf_r+0x12e>
 800727a:	9209      	str	r2, [sp, #36]	; 0x24
 800727c:	e7c3      	b.n	8007206 <_svfiprintf_r+0x12e>
 800727e:	4342      	muls	r2, r0
 8007280:	0035      	movs	r5, r6
 8007282:	2301      	movs	r3, #1
 8007284:	1852      	adds	r2, r2, r1
 8007286:	e7f1      	b.n	800726c <_svfiprintf_r+0x194>
 8007288:	ab07      	add	r3, sp, #28
 800728a:	9300      	str	r3, [sp, #0]
 800728c:	003a      	movs	r2, r7
 800728e:	0021      	movs	r1, r4
 8007290:	4b10      	ldr	r3, [pc, #64]	; (80072d4 <_svfiprintf_r+0x1fc>)
 8007292:	9803      	ldr	r0, [sp, #12]
 8007294:	f7fd ff68 	bl	8005168 <_printf_float>
 8007298:	9004      	str	r0, [sp, #16]
 800729a:	9b04      	ldr	r3, [sp, #16]
 800729c:	3301      	adds	r3, #1
 800729e:	d1d3      	bne.n	8007248 <_svfiprintf_r+0x170>
 80072a0:	89bb      	ldrh	r3, [r7, #12]
 80072a2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80072a4:	065b      	lsls	r3, r3, #25
 80072a6:	d400      	bmi.n	80072aa <_svfiprintf_r+0x1d2>
 80072a8:	e72d      	b.n	8007106 <_svfiprintf_r+0x2e>
 80072aa:	2001      	movs	r0, #1
 80072ac:	4240      	negs	r0, r0
 80072ae:	e72a      	b.n	8007106 <_svfiprintf_r+0x2e>
 80072b0:	ab07      	add	r3, sp, #28
 80072b2:	9300      	str	r3, [sp, #0]
 80072b4:	003a      	movs	r2, r7
 80072b6:	0021      	movs	r1, r4
 80072b8:	4b06      	ldr	r3, [pc, #24]	; (80072d4 <_svfiprintf_r+0x1fc>)
 80072ba:	9803      	ldr	r0, [sp, #12]
 80072bc:	f7fe fa06 	bl	80056cc <_printf_i>
 80072c0:	e7ea      	b.n	8007298 <_svfiprintf_r+0x1c0>
 80072c2:	46c0      	nop			; (mov r8, r8)
 80072c4:	08008274 	.word	0x08008274
 80072c8:	0800827a 	.word	0x0800827a
 80072cc:	0800827e 	.word	0x0800827e
 80072d0:	08005169 	.word	0x08005169
 80072d4:	08007015 	.word	0x08007015

080072d8 <_sbrk_r>:
 80072d8:	2300      	movs	r3, #0
 80072da:	b570      	push	{r4, r5, r6, lr}
 80072dc:	4d06      	ldr	r5, [pc, #24]	; (80072f8 <_sbrk_r+0x20>)
 80072de:	0004      	movs	r4, r0
 80072e0:	0008      	movs	r0, r1
 80072e2:	602b      	str	r3, [r5, #0]
 80072e4:	f7fb fab4 	bl	8002850 <_sbrk>
 80072e8:	1c43      	adds	r3, r0, #1
 80072ea:	d103      	bne.n	80072f4 <_sbrk_r+0x1c>
 80072ec:	682b      	ldr	r3, [r5, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d000      	beq.n	80072f4 <_sbrk_r+0x1c>
 80072f2:	6023      	str	r3, [r4, #0]
 80072f4:	bd70      	pop	{r4, r5, r6, pc}
 80072f6:	46c0      	nop			; (mov r8, r8)
 80072f8:	200002fc 	.word	0x200002fc

080072fc <__assert_func>:
 80072fc:	b530      	push	{r4, r5, lr}
 80072fe:	0014      	movs	r4, r2
 8007300:	001a      	movs	r2, r3
 8007302:	4b09      	ldr	r3, [pc, #36]	; (8007328 <__assert_func+0x2c>)
 8007304:	0005      	movs	r5, r0
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	b085      	sub	sp, #20
 800730a:	68d8      	ldr	r0, [r3, #12]
 800730c:	4b07      	ldr	r3, [pc, #28]	; (800732c <__assert_func+0x30>)
 800730e:	2c00      	cmp	r4, #0
 8007310:	d101      	bne.n	8007316 <__assert_func+0x1a>
 8007312:	4b07      	ldr	r3, [pc, #28]	; (8007330 <__assert_func+0x34>)
 8007314:	001c      	movs	r4, r3
 8007316:	9301      	str	r3, [sp, #4]
 8007318:	9100      	str	r1, [sp, #0]
 800731a:	002b      	movs	r3, r5
 800731c:	4905      	ldr	r1, [pc, #20]	; (8007334 <__assert_func+0x38>)
 800731e:	9402      	str	r4, [sp, #8]
 8007320:	f000 f80a 	bl	8007338 <fiprintf>
 8007324:	f000 faba 	bl	800789c <abort>
 8007328:	2000000c 	.word	0x2000000c
 800732c:	08008285 	.word	0x08008285
 8007330:	080082c0 	.word	0x080082c0
 8007334:	08008292 	.word	0x08008292

08007338 <fiprintf>:
 8007338:	b40e      	push	{r1, r2, r3}
 800733a:	b503      	push	{r0, r1, lr}
 800733c:	0001      	movs	r1, r0
 800733e:	ab03      	add	r3, sp, #12
 8007340:	4804      	ldr	r0, [pc, #16]	; (8007354 <fiprintf+0x1c>)
 8007342:	cb04      	ldmia	r3!, {r2}
 8007344:	6800      	ldr	r0, [r0, #0]
 8007346:	9301      	str	r3, [sp, #4]
 8007348:	f000 f892 	bl	8007470 <_vfiprintf_r>
 800734c:	b002      	add	sp, #8
 800734e:	bc08      	pop	{r3}
 8007350:	b003      	add	sp, #12
 8007352:	4718      	bx	r3
 8007354:	2000000c 	.word	0x2000000c

08007358 <__ascii_mbtowc>:
 8007358:	b082      	sub	sp, #8
 800735a:	2900      	cmp	r1, #0
 800735c:	d100      	bne.n	8007360 <__ascii_mbtowc+0x8>
 800735e:	a901      	add	r1, sp, #4
 8007360:	1e10      	subs	r0, r2, #0
 8007362:	d006      	beq.n	8007372 <__ascii_mbtowc+0x1a>
 8007364:	2b00      	cmp	r3, #0
 8007366:	d006      	beq.n	8007376 <__ascii_mbtowc+0x1e>
 8007368:	7813      	ldrb	r3, [r2, #0]
 800736a:	600b      	str	r3, [r1, #0]
 800736c:	7810      	ldrb	r0, [r2, #0]
 800736e:	1e43      	subs	r3, r0, #1
 8007370:	4198      	sbcs	r0, r3
 8007372:	b002      	add	sp, #8
 8007374:	4770      	bx	lr
 8007376:	2002      	movs	r0, #2
 8007378:	4240      	negs	r0, r0
 800737a:	e7fa      	b.n	8007372 <__ascii_mbtowc+0x1a>

0800737c <memmove>:
 800737c:	b510      	push	{r4, lr}
 800737e:	4288      	cmp	r0, r1
 8007380:	d902      	bls.n	8007388 <memmove+0xc>
 8007382:	188b      	adds	r3, r1, r2
 8007384:	4298      	cmp	r0, r3
 8007386:	d303      	bcc.n	8007390 <memmove+0x14>
 8007388:	2300      	movs	r3, #0
 800738a:	e007      	b.n	800739c <memmove+0x20>
 800738c:	5c8b      	ldrb	r3, [r1, r2]
 800738e:	5483      	strb	r3, [r0, r2]
 8007390:	3a01      	subs	r2, #1
 8007392:	d2fb      	bcs.n	800738c <memmove+0x10>
 8007394:	bd10      	pop	{r4, pc}
 8007396:	5ccc      	ldrb	r4, [r1, r3]
 8007398:	54c4      	strb	r4, [r0, r3]
 800739a:	3301      	adds	r3, #1
 800739c:	429a      	cmp	r2, r3
 800739e:	d1fa      	bne.n	8007396 <memmove+0x1a>
 80073a0:	e7f8      	b.n	8007394 <memmove+0x18>
	...

080073a4 <__malloc_lock>:
 80073a4:	b510      	push	{r4, lr}
 80073a6:	4802      	ldr	r0, [pc, #8]	; (80073b0 <__malloc_lock+0xc>)
 80073a8:	f000 fc4f 	bl	8007c4a <__retarget_lock_acquire_recursive>
 80073ac:	bd10      	pop	{r4, pc}
 80073ae:	46c0      	nop			; (mov r8, r8)
 80073b0:	20000300 	.word	0x20000300

080073b4 <__malloc_unlock>:
 80073b4:	b510      	push	{r4, lr}
 80073b6:	4802      	ldr	r0, [pc, #8]	; (80073c0 <__malloc_unlock+0xc>)
 80073b8:	f000 fc48 	bl	8007c4c <__retarget_lock_release_recursive>
 80073bc:	bd10      	pop	{r4, pc}
 80073be:	46c0      	nop			; (mov r8, r8)
 80073c0:	20000300 	.word	0x20000300

080073c4 <_realloc_r>:
 80073c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073c6:	0007      	movs	r7, r0
 80073c8:	000e      	movs	r6, r1
 80073ca:	0014      	movs	r4, r2
 80073cc:	2900      	cmp	r1, #0
 80073ce:	d105      	bne.n	80073dc <_realloc_r+0x18>
 80073d0:	0011      	movs	r1, r2
 80073d2:	f7ff fda9 	bl	8006f28 <_malloc_r>
 80073d6:	0005      	movs	r5, r0
 80073d8:	0028      	movs	r0, r5
 80073da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80073dc:	2a00      	cmp	r2, #0
 80073de:	d103      	bne.n	80073e8 <_realloc_r+0x24>
 80073e0:	f7ff fd36 	bl	8006e50 <_free_r>
 80073e4:	0025      	movs	r5, r4
 80073e6:	e7f7      	b.n	80073d8 <_realloc_r+0x14>
 80073e8:	f000 fc9e 	bl	8007d28 <_malloc_usable_size_r>
 80073ec:	9001      	str	r0, [sp, #4]
 80073ee:	4284      	cmp	r4, r0
 80073f0:	d803      	bhi.n	80073fa <_realloc_r+0x36>
 80073f2:	0035      	movs	r5, r6
 80073f4:	0843      	lsrs	r3, r0, #1
 80073f6:	42a3      	cmp	r3, r4
 80073f8:	d3ee      	bcc.n	80073d8 <_realloc_r+0x14>
 80073fa:	0021      	movs	r1, r4
 80073fc:	0038      	movs	r0, r7
 80073fe:	f7ff fd93 	bl	8006f28 <_malloc_r>
 8007402:	1e05      	subs	r5, r0, #0
 8007404:	d0e8      	beq.n	80073d8 <_realloc_r+0x14>
 8007406:	9b01      	ldr	r3, [sp, #4]
 8007408:	0022      	movs	r2, r4
 800740a:	429c      	cmp	r4, r3
 800740c:	d900      	bls.n	8007410 <_realloc_r+0x4c>
 800740e:	001a      	movs	r2, r3
 8007410:	0031      	movs	r1, r6
 8007412:	0028      	movs	r0, r5
 8007414:	f7ff f94b 	bl	80066ae <memcpy>
 8007418:	0031      	movs	r1, r6
 800741a:	0038      	movs	r0, r7
 800741c:	f7ff fd18 	bl	8006e50 <_free_r>
 8007420:	e7da      	b.n	80073d8 <_realloc_r+0x14>

08007422 <__sfputc_r>:
 8007422:	6893      	ldr	r3, [r2, #8]
 8007424:	b510      	push	{r4, lr}
 8007426:	3b01      	subs	r3, #1
 8007428:	6093      	str	r3, [r2, #8]
 800742a:	2b00      	cmp	r3, #0
 800742c:	da04      	bge.n	8007438 <__sfputc_r+0x16>
 800742e:	6994      	ldr	r4, [r2, #24]
 8007430:	42a3      	cmp	r3, r4
 8007432:	db07      	blt.n	8007444 <__sfputc_r+0x22>
 8007434:	290a      	cmp	r1, #10
 8007436:	d005      	beq.n	8007444 <__sfputc_r+0x22>
 8007438:	6813      	ldr	r3, [r2, #0]
 800743a:	1c58      	adds	r0, r3, #1
 800743c:	6010      	str	r0, [r2, #0]
 800743e:	7019      	strb	r1, [r3, #0]
 8007440:	0008      	movs	r0, r1
 8007442:	bd10      	pop	{r4, pc}
 8007444:	f000 f94e 	bl	80076e4 <__swbuf_r>
 8007448:	0001      	movs	r1, r0
 800744a:	e7f9      	b.n	8007440 <__sfputc_r+0x1e>

0800744c <__sfputs_r>:
 800744c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800744e:	0006      	movs	r6, r0
 8007450:	000f      	movs	r7, r1
 8007452:	0014      	movs	r4, r2
 8007454:	18d5      	adds	r5, r2, r3
 8007456:	42ac      	cmp	r4, r5
 8007458:	d101      	bne.n	800745e <__sfputs_r+0x12>
 800745a:	2000      	movs	r0, #0
 800745c:	e007      	b.n	800746e <__sfputs_r+0x22>
 800745e:	7821      	ldrb	r1, [r4, #0]
 8007460:	003a      	movs	r2, r7
 8007462:	0030      	movs	r0, r6
 8007464:	f7ff ffdd 	bl	8007422 <__sfputc_r>
 8007468:	3401      	adds	r4, #1
 800746a:	1c43      	adds	r3, r0, #1
 800746c:	d1f3      	bne.n	8007456 <__sfputs_r+0xa>
 800746e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007470 <_vfiprintf_r>:
 8007470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007472:	b0a1      	sub	sp, #132	; 0x84
 8007474:	0006      	movs	r6, r0
 8007476:	000c      	movs	r4, r1
 8007478:	001f      	movs	r7, r3
 800747a:	9203      	str	r2, [sp, #12]
 800747c:	2800      	cmp	r0, #0
 800747e:	d004      	beq.n	800748a <_vfiprintf_r+0x1a>
 8007480:	6983      	ldr	r3, [r0, #24]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d101      	bne.n	800748a <_vfiprintf_r+0x1a>
 8007486:	f000 fb3f 	bl	8007b08 <__sinit>
 800748a:	4b8e      	ldr	r3, [pc, #568]	; (80076c4 <_vfiprintf_r+0x254>)
 800748c:	429c      	cmp	r4, r3
 800748e:	d11c      	bne.n	80074ca <_vfiprintf_r+0x5a>
 8007490:	6874      	ldr	r4, [r6, #4]
 8007492:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007494:	07db      	lsls	r3, r3, #31
 8007496:	d405      	bmi.n	80074a4 <_vfiprintf_r+0x34>
 8007498:	89a3      	ldrh	r3, [r4, #12]
 800749a:	059b      	lsls	r3, r3, #22
 800749c:	d402      	bmi.n	80074a4 <_vfiprintf_r+0x34>
 800749e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074a0:	f000 fbd3 	bl	8007c4a <__retarget_lock_acquire_recursive>
 80074a4:	89a3      	ldrh	r3, [r4, #12]
 80074a6:	071b      	lsls	r3, r3, #28
 80074a8:	d502      	bpl.n	80074b0 <_vfiprintf_r+0x40>
 80074aa:	6923      	ldr	r3, [r4, #16]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d11d      	bne.n	80074ec <_vfiprintf_r+0x7c>
 80074b0:	0021      	movs	r1, r4
 80074b2:	0030      	movs	r0, r6
 80074b4:	f000 f97a 	bl	80077ac <__swsetup_r>
 80074b8:	2800      	cmp	r0, #0
 80074ba:	d017      	beq.n	80074ec <_vfiprintf_r+0x7c>
 80074bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074be:	07db      	lsls	r3, r3, #31
 80074c0:	d50d      	bpl.n	80074de <_vfiprintf_r+0x6e>
 80074c2:	2001      	movs	r0, #1
 80074c4:	4240      	negs	r0, r0
 80074c6:	b021      	add	sp, #132	; 0x84
 80074c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074ca:	4b7f      	ldr	r3, [pc, #508]	; (80076c8 <_vfiprintf_r+0x258>)
 80074cc:	429c      	cmp	r4, r3
 80074ce:	d101      	bne.n	80074d4 <_vfiprintf_r+0x64>
 80074d0:	68b4      	ldr	r4, [r6, #8]
 80074d2:	e7de      	b.n	8007492 <_vfiprintf_r+0x22>
 80074d4:	4b7d      	ldr	r3, [pc, #500]	; (80076cc <_vfiprintf_r+0x25c>)
 80074d6:	429c      	cmp	r4, r3
 80074d8:	d1db      	bne.n	8007492 <_vfiprintf_r+0x22>
 80074da:	68f4      	ldr	r4, [r6, #12]
 80074dc:	e7d9      	b.n	8007492 <_vfiprintf_r+0x22>
 80074de:	89a3      	ldrh	r3, [r4, #12]
 80074e0:	059b      	lsls	r3, r3, #22
 80074e2:	d4ee      	bmi.n	80074c2 <_vfiprintf_r+0x52>
 80074e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074e6:	f000 fbb1 	bl	8007c4c <__retarget_lock_release_recursive>
 80074ea:	e7ea      	b.n	80074c2 <_vfiprintf_r+0x52>
 80074ec:	2300      	movs	r3, #0
 80074ee:	ad08      	add	r5, sp, #32
 80074f0:	616b      	str	r3, [r5, #20]
 80074f2:	3320      	adds	r3, #32
 80074f4:	766b      	strb	r3, [r5, #25]
 80074f6:	3310      	adds	r3, #16
 80074f8:	76ab      	strb	r3, [r5, #26]
 80074fa:	9707      	str	r7, [sp, #28]
 80074fc:	9f03      	ldr	r7, [sp, #12]
 80074fe:	783b      	ldrb	r3, [r7, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d001      	beq.n	8007508 <_vfiprintf_r+0x98>
 8007504:	2b25      	cmp	r3, #37	; 0x25
 8007506:	d14e      	bne.n	80075a6 <_vfiprintf_r+0x136>
 8007508:	9b03      	ldr	r3, [sp, #12]
 800750a:	1afb      	subs	r3, r7, r3
 800750c:	9305      	str	r3, [sp, #20]
 800750e:	9b03      	ldr	r3, [sp, #12]
 8007510:	429f      	cmp	r7, r3
 8007512:	d00d      	beq.n	8007530 <_vfiprintf_r+0xc0>
 8007514:	9b05      	ldr	r3, [sp, #20]
 8007516:	0021      	movs	r1, r4
 8007518:	0030      	movs	r0, r6
 800751a:	9a03      	ldr	r2, [sp, #12]
 800751c:	f7ff ff96 	bl	800744c <__sfputs_r>
 8007520:	1c43      	adds	r3, r0, #1
 8007522:	d100      	bne.n	8007526 <_vfiprintf_r+0xb6>
 8007524:	e0b5      	b.n	8007692 <_vfiprintf_r+0x222>
 8007526:	696a      	ldr	r2, [r5, #20]
 8007528:	9b05      	ldr	r3, [sp, #20]
 800752a:	4694      	mov	ip, r2
 800752c:	4463      	add	r3, ip
 800752e:	616b      	str	r3, [r5, #20]
 8007530:	783b      	ldrb	r3, [r7, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d100      	bne.n	8007538 <_vfiprintf_r+0xc8>
 8007536:	e0ac      	b.n	8007692 <_vfiprintf_r+0x222>
 8007538:	2201      	movs	r2, #1
 800753a:	1c7b      	adds	r3, r7, #1
 800753c:	9303      	str	r3, [sp, #12]
 800753e:	2300      	movs	r3, #0
 8007540:	4252      	negs	r2, r2
 8007542:	606a      	str	r2, [r5, #4]
 8007544:	a904      	add	r1, sp, #16
 8007546:	3254      	adds	r2, #84	; 0x54
 8007548:	1852      	adds	r2, r2, r1
 800754a:	602b      	str	r3, [r5, #0]
 800754c:	60eb      	str	r3, [r5, #12]
 800754e:	60ab      	str	r3, [r5, #8]
 8007550:	7013      	strb	r3, [r2, #0]
 8007552:	65ab      	str	r3, [r5, #88]	; 0x58
 8007554:	9b03      	ldr	r3, [sp, #12]
 8007556:	2205      	movs	r2, #5
 8007558:	7819      	ldrb	r1, [r3, #0]
 800755a:	485d      	ldr	r0, [pc, #372]	; (80076d0 <_vfiprintf_r+0x260>)
 800755c:	f7ff f89c 	bl	8006698 <memchr>
 8007560:	9b03      	ldr	r3, [sp, #12]
 8007562:	1c5f      	adds	r7, r3, #1
 8007564:	2800      	cmp	r0, #0
 8007566:	d120      	bne.n	80075aa <_vfiprintf_r+0x13a>
 8007568:	682a      	ldr	r2, [r5, #0]
 800756a:	06d3      	lsls	r3, r2, #27
 800756c:	d504      	bpl.n	8007578 <_vfiprintf_r+0x108>
 800756e:	2353      	movs	r3, #83	; 0x53
 8007570:	a904      	add	r1, sp, #16
 8007572:	185b      	adds	r3, r3, r1
 8007574:	2120      	movs	r1, #32
 8007576:	7019      	strb	r1, [r3, #0]
 8007578:	0713      	lsls	r3, r2, #28
 800757a:	d504      	bpl.n	8007586 <_vfiprintf_r+0x116>
 800757c:	2353      	movs	r3, #83	; 0x53
 800757e:	a904      	add	r1, sp, #16
 8007580:	185b      	adds	r3, r3, r1
 8007582:	212b      	movs	r1, #43	; 0x2b
 8007584:	7019      	strb	r1, [r3, #0]
 8007586:	9b03      	ldr	r3, [sp, #12]
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	2b2a      	cmp	r3, #42	; 0x2a
 800758c:	d016      	beq.n	80075bc <_vfiprintf_r+0x14c>
 800758e:	2100      	movs	r1, #0
 8007590:	68eb      	ldr	r3, [r5, #12]
 8007592:	9f03      	ldr	r7, [sp, #12]
 8007594:	783a      	ldrb	r2, [r7, #0]
 8007596:	1c78      	adds	r0, r7, #1
 8007598:	3a30      	subs	r2, #48	; 0x30
 800759a:	4684      	mov	ip, r0
 800759c:	2a09      	cmp	r2, #9
 800759e:	d94f      	bls.n	8007640 <_vfiprintf_r+0x1d0>
 80075a0:	2900      	cmp	r1, #0
 80075a2:	d111      	bne.n	80075c8 <_vfiprintf_r+0x158>
 80075a4:	e017      	b.n	80075d6 <_vfiprintf_r+0x166>
 80075a6:	3701      	adds	r7, #1
 80075a8:	e7a9      	b.n	80074fe <_vfiprintf_r+0x8e>
 80075aa:	4b49      	ldr	r3, [pc, #292]	; (80076d0 <_vfiprintf_r+0x260>)
 80075ac:	682a      	ldr	r2, [r5, #0]
 80075ae:	1ac0      	subs	r0, r0, r3
 80075b0:	2301      	movs	r3, #1
 80075b2:	4083      	lsls	r3, r0
 80075b4:	4313      	orrs	r3, r2
 80075b6:	602b      	str	r3, [r5, #0]
 80075b8:	9703      	str	r7, [sp, #12]
 80075ba:	e7cb      	b.n	8007554 <_vfiprintf_r+0xe4>
 80075bc:	9b07      	ldr	r3, [sp, #28]
 80075be:	1d19      	adds	r1, r3, #4
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	9107      	str	r1, [sp, #28]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	db01      	blt.n	80075cc <_vfiprintf_r+0x15c>
 80075c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80075ca:	e004      	b.n	80075d6 <_vfiprintf_r+0x166>
 80075cc:	425b      	negs	r3, r3
 80075ce:	60eb      	str	r3, [r5, #12]
 80075d0:	2302      	movs	r3, #2
 80075d2:	4313      	orrs	r3, r2
 80075d4:	602b      	str	r3, [r5, #0]
 80075d6:	783b      	ldrb	r3, [r7, #0]
 80075d8:	2b2e      	cmp	r3, #46	; 0x2e
 80075da:	d10a      	bne.n	80075f2 <_vfiprintf_r+0x182>
 80075dc:	787b      	ldrb	r3, [r7, #1]
 80075de:	2b2a      	cmp	r3, #42	; 0x2a
 80075e0:	d137      	bne.n	8007652 <_vfiprintf_r+0x1e2>
 80075e2:	9b07      	ldr	r3, [sp, #28]
 80075e4:	3702      	adds	r7, #2
 80075e6:	1d1a      	adds	r2, r3, #4
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	9207      	str	r2, [sp, #28]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	db2d      	blt.n	800764c <_vfiprintf_r+0x1dc>
 80075f0:	9309      	str	r3, [sp, #36]	; 0x24
 80075f2:	2203      	movs	r2, #3
 80075f4:	7839      	ldrb	r1, [r7, #0]
 80075f6:	4837      	ldr	r0, [pc, #220]	; (80076d4 <_vfiprintf_r+0x264>)
 80075f8:	f7ff f84e 	bl	8006698 <memchr>
 80075fc:	2800      	cmp	r0, #0
 80075fe:	d007      	beq.n	8007610 <_vfiprintf_r+0x1a0>
 8007600:	4b34      	ldr	r3, [pc, #208]	; (80076d4 <_vfiprintf_r+0x264>)
 8007602:	682a      	ldr	r2, [r5, #0]
 8007604:	1ac0      	subs	r0, r0, r3
 8007606:	2340      	movs	r3, #64	; 0x40
 8007608:	4083      	lsls	r3, r0
 800760a:	4313      	orrs	r3, r2
 800760c:	3701      	adds	r7, #1
 800760e:	602b      	str	r3, [r5, #0]
 8007610:	7839      	ldrb	r1, [r7, #0]
 8007612:	1c7b      	adds	r3, r7, #1
 8007614:	2206      	movs	r2, #6
 8007616:	4830      	ldr	r0, [pc, #192]	; (80076d8 <_vfiprintf_r+0x268>)
 8007618:	9303      	str	r3, [sp, #12]
 800761a:	7629      	strb	r1, [r5, #24]
 800761c:	f7ff f83c 	bl	8006698 <memchr>
 8007620:	2800      	cmp	r0, #0
 8007622:	d045      	beq.n	80076b0 <_vfiprintf_r+0x240>
 8007624:	4b2d      	ldr	r3, [pc, #180]	; (80076dc <_vfiprintf_r+0x26c>)
 8007626:	2b00      	cmp	r3, #0
 8007628:	d127      	bne.n	800767a <_vfiprintf_r+0x20a>
 800762a:	2207      	movs	r2, #7
 800762c:	9b07      	ldr	r3, [sp, #28]
 800762e:	3307      	adds	r3, #7
 8007630:	4393      	bics	r3, r2
 8007632:	3308      	adds	r3, #8
 8007634:	9307      	str	r3, [sp, #28]
 8007636:	696b      	ldr	r3, [r5, #20]
 8007638:	9a04      	ldr	r2, [sp, #16]
 800763a:	189b      	adds	r3, r3, r2
 800763c:	616b      	str	r3, [r5, #20]
 800763e:	e75d      	b.n	80074fc <_vfiprintf_r+0x8c>
 8007640:	210a      	movs	r1, #10
 8007642:	434b      	muls	r3, r1
 8007644:	4667      	mov	r7, ip
 8007646:	189b      	adds	r3, r3, r2
 8007648:	3909      	subs	r1, #9
 800764a:	e7a3      	b.n	8007594 <_vfiprintf_r+0x124>
 800764c:	2301      	movs	r3, #1
 800764e:	425b      	negs	r3, r3
 8007650:	e7ce      	b.n	80075f0 <_vfiprintf_r+0x180>
 8007652:	2300      	movs	r3, #0
 8007654:	001a      	movs	r2, r3
 8007656:	3701      	adds	r7, #1
 8007658:	606b      	str	r3, [r5, #4]
 800765a:	7839      	ldrb	r1, [r7, #0]
 800765c:	1c78      	adds	r0, r7, #1
 800765e:	3930      	subs	r1, #48	; 0x30
 8007660:	4684      	mov	ip, r0
 8007662:	2909      	cmp	r1, #9
 8007664:	d903      	bls.n	800766e <_vfiprintf_r+0x1fe>
 8007666:	2b00      	cmp	r3, #0
 8007668:	d0c3      	beq.n	80075f2 <_vfiprintf_r+0x182>
 800766a:	9209      	str	r2, [sp, #36]	; 0x24
 800766c:	e7c1      	b.n	80075f2 <_vfiprintf_r+0x182>
 800766e:	230a      	movs	r3, #10
 8007670:	435a      	muls	r2, r3
 8007672:	4667      	mov	r7, ip
 8007674:	1852      	adds	r2, r2, r1
 8007676:	3b09      	subs	r3, #9
 8007678:	e7ef      	b.n	800765a <_vfiprintf_r+0x1ea>
 800767a:	ab07      	add	r3, sp, #28
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	0022      	movs	r2, r4
 8007680:	0029      	movs	r1, r5
 8007682:	0030      	movs	r0, r6
 8007684:	4b16      	ldr	r3, [pc, #88]	; (80076e0 <_vfiprintf_r+0x270>)
 8007686:	f7fd fd6f 	bl	8005168 <_printf_float>
 800768a:	9004      	str	r0, [sp, #16]
 800768c:	9b04      	ldr	r3, [sp, #16]
 800768e:	3301      	adds	r3, #1
 8007690:	d1d1      	bne.n	8007636 <_vfiprintf_r+0x1c6>
 8007692:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007694:	07db      	lsls	r3, r3, #31
 8007696:	d405      	bmi.n	80076a4 <_vfiprintf_r+0x234>
 8007698:	89a3      	ldrh	r3, [r4, #12]
 800769a:	059b      	lsls	r3, r3, #22
 800769c:	d402      	bmi.n	80076a4 <_vfiprintf_r+0x234>
 800769e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076a0:	f000 fad4 	bl	8007c4c <__retarget_lock_release_recursive>
 80076a4:	89a3      	ldrh	r3, [r4, #12]
 80076a6:	065b      	lsls	r3, r3, #25
 80076a8:	d500      	bpl.n	80076ac <_vfiprintf_r+0x23c>
 80076aa:	e70a      	b.n	80074c2 <_vfiprintf_r+0x52>
 80076ac:	980d      	ldr	r0, [sp, #52]	; 0x34
 80076ae:	e70a      	b.n	80074c6 <_vfiprintf_r+0x56>
 80076b0:	ab07      	add	r3, sp, #28
 80076b2:	9300      	str	r3, [sp, #0]
 80076b4:	0022      	movs	r2, r4
 80076b6:	0029      	movs	r1, r5
 80076b8:	0030      	movs	r0, r6
 80076ba:	4b09      	ldr	r3, [pc, #36]	; (80076e0 <_vfiprintf_r+0x270>)
 80076bc:	f7fe f806 	bl	80056cc <_printf_i>
 80076c0:	e7e3      	b.n	800768a <_vfiprintf_r+0x21a>
 80076c2:	46c0      	nop			; (mov r8, r8)
 80076c4:	080083ec 	.word	0x080083ec
 80076c8:	0800840c 	.word	0x0800840c
 80076cc:	080083cc 	.word	0x080083cc
 80076d0:	08008274 	.word	0x08008274
 80076d4:	0800827a 	.word	0x0800827a
 80076d8:	0800827e 	.word	0x0800827e
 80076dc:	08005169 	.word	0x08005169
 80076e0:	0800744d 	.word	0x0800744d

080076e4 <__swbuf_r>:
 80076e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e6:	0005      	movs	r5, r0
 80076e8:	000e      	movs	r6, r1
 80076ea:	0014      	movs	r4, r2
 80076ec:	2800      	cmp	r0, #0
 80076ee:	d004      	beq.n	80076fa <__swbuf_r+0x16>
 80076f0:	6983      	ldr	r3, [r0, #24]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d101      	bne.n	80076fa <__swbuf_r+0x16>
 80076f6:	f000 fa07 	bl	8007b08 <__sinit>
 80076fa:	4b22      	ldr	r3, [pc, #136]	; (8007784 <__swbuf_r+0xa0>)
 80076fc:	429c      	cmp	r4, r3
 80076fe:	d12e      	bne.n	800775e <__swbuf_r+0x7a>
 8007700:	686c      	ldr	r4, [r5, #4]
 8007702:	69a3      	ldr	r3, [r4, #24]
 8007704:	60a3      	str	r3, [r4, #8]
 8007706:	89a3      	ldrh	r3, [r4, #12]
 8007708:	071b      	lsls	r3, r3, #28
 800770a:	d532      	bpl.n	8007772 <__swbuf_r+0x8e>
 800770c:	6923      	ldr	r3, [r4, #16]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d02f      	beq.n	8007772 <__swbuf_r+0x8e>
 8007712:	6823      	ldr	r3, [r4, #0]
 8007714:	6922      	ldr	r2, [r4, #16]
 8007716:	b2f7      	uxtb	r7, r6
 8007718:	1a98      	subs	r0, r3, r2
 800771a:	6963      	ldr	r3, [r4, #20]
 800771c:	b2f6      	uxtb	r6, r6
 800771e:	4283      	cmp	r3, r0
 8007720:	dc05      	bgt.n	800772e <__swbuf_r+0x4a>
 8007722:	0021      	movs	r1, r4
 8007724:	0028      	movs	r0, r5
 8007726:	f000 f94d 	bl	80079c4 <_fflush_r>
 800772a:	2800      	cmp	r0, #0
 800772c:	d127      	bne.n	800777e <__swbuf_r+0x9a>
 800772e:	68a3      	ldr	r3, [r4, #8]
 8007730:	3001      	adds	r0, #1
 8007732:	3b01      	subs	r3, #1
 8007734:	60a3      	str	r3, [r4, #8]
 8007736:	6823      	ldr	r3, [r4, #0]
 8007738:	1c5a      	adds	r2, r3, #1
 800773a:	6022      	str	r2, [r4, #0]
 800773c:	701f      	strb	r7, [r3, #0]
 800773e:	6963      	ldr	r3, [r4, #20]
 8007740:	4283      	cmp	r3, r0
 8007742:	d004      	beq.n	800774e <__swbuf_r+0x6a>
 8007744:	89a3      	ldrh	r3, [r4, #12]
 8007746:	07db      	lsls	r3, r3, #31
 8007748:	d507      	bpl.n	800775a <__swbuf_r+0x76>
 800774a:	2e0a      	cmp	r6, #10
 800774c:	d105      	bne.n	800775a <__swbuf_r+0x76>
 800774e:	0021      	movs	r1, r4
 8007750:	0028      	movs	r0, r5
 8007752:	f000 f937 	bl	80079c4 <_fflush_r>
 8007756:	2800      	cmp	r0, #0
 8007758:	d111      	bne.n	800777e <__swbuf_r+0x9a>
 800775a:	0030      	movs	r0, r6
 800775c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800775e:	4b0a      	ldr	r3, [pc, #40]	; (8007788 <__swbuf_r+0xa4>)
 8007760:	429c      	cmp	r4, r3
 8007762:	d101      	bne.n	8007768 <__swbuf_r+0x84>
 8007764:	68ac      	ldr	r4, [r5, #8]
 8007766:	e7cc      	b.n	8007702 <__swbuf_r+0x1e>
 8007768:	4b08      	ldr	r3, [pc, #32]	; (800778c <__swbuf_r+0xa8>)
 800776a:	429c      	cmp	r4, r3
 800776c:	d1c9      	bne.n	8007702 <__swbuf_r+0x1e>
 800776e:	68ec      	ldr	r4, [r5, #12]
 8007770:	e7c7      	b.n	8007702 <__swbuf_r+0x1e>
 8007772:	0021      	movs	r1, r4
 8007774:	0028      	movs	r0, r5
 8007776:	f000 f819 	bl	80077ac <__swsetup_r>
 800777a:	2800      	cmp	r0, #0
 800777c:	d0c9      	beq.n	8007712 <__swbuf_r+0x2e>
 800777e:	2601      	movs	r6, #1
 8007780:	4276      	negs	r6, r6
 8007782:	e7ea      	b.n	800775a <__swbuf_r+0x76>
 8007784:	080083ec 	.word	0x080083ec
 8007788:	0800840c 	.word	0x0800840c
 800778c:	080083cc 	.word	0x080083cc

08007790 <__ascii_wctomb>:
 8007790:	0003      	movs	r3, r0
 8007792:	1e08      	subs	r0, r1, #0
 8007794:	d005      	beq.n	80077a2 <__ascii_wctomb+0x12>
 8007796:	2aff      	cmp	r2, #255	; 0xff
 8007798:	d904      	bls.n	80077a4 <__ascii_wctomb+0x14>
 800779a:	228a      	movs	r2, #138	; 0x8a
 800779c:	2001      	movs	r0, #1
 800779e:	601a      	str	r2, [r3, #0]
 80077a0:	4240      	negs	r0, r0
 80077a2:	4770      	bx	lr
 80077a4:	2001      	movs	r0, #1
 80077a6:	700a      	strb	r2, [r1, #0]
 80077a8:	e7fb      	b.n	80077a2 <__ascii_wctomb+0x12>
	...

080077ac <__swsetup_r>:
 80077ac:	4b37      	ldr	r3, [pc, #220]	; (800788c <__swsetup_r+0xe0>)
 80077ae:	b570      	push	{r4, r5, r6, lr}
 80077b0:	681d      	ldr	r5, [r3, #0]
 80077b2:	0006      	movs	r6, r0
 80077b4:	000c      	movs	r4, r1
 80077b6:	2d00      	cmp	r5, #0
 80077b8:	d005      	beq.n	80077c6 <__swsetup_r+0x1a>
 80077ba:	69ab      	ldr	r3, [r5, #24]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d102      	bne.n	80077c6 <__swsetup_r+0x1a>
 80077c0:	0028      	movs	r0, r5
 80077c2:	f000 f9a1 	bl	8007b08 <__sinit>
 80077c6:	4b32      	ldr	r3, [pc, #200]	; (8007890 <__swsetup_r+0xe4>)
 80077c8:	429c      	cmp	r4, r3
 80077ca:	d10f      	bne.n	80077ec <__swsetup_r+0x40>
 80077cc:	686c      	ldr	r4, [r5, #4]
 80077ce:	230c      	movs	r3, #12
 80077d0:	5ee2      	ldrsh	r2, [r4, r3]
 80077d2:	b293      	uxth	r3, r2
 80077d4:	0711      	lsls	r1, r2, #28
 80077d6:	d42d      	bmi.n	8007834 <__swsetup_r+0x88>
 80077d8:	06d9      	lsls	r1, r3, #27
 80077da:	d411      	bmi.n	8007800 <__swsetup_r+0x54>
 80077dc:	2309      	movs	r3, #9
 80077de:	2001      	movs	r0, #1
 80077e0:	6033      	str	r3, [r6, #0]
 80077e2:	3337      	adds	r3, #55	; 0x37
 80077e4:	4313      	orrs	r3, r2
 80077e6:	81a3      	strh	r3, [r4, #12]
 80077e8:	4240      	negs	r0, r0
 80077ea:	bd70      	pop	{r4, r5, r6, pc}
 80077ec:	4b29      	ldr	r3, [pc, #164]	; (8007894 <__swsetup_r+0xe8>)
 80077ee:	429c      	cmp	r4, r3
 80077f0:	d101      	bne.n	80077f6 <__swsetup_r+0x4a>
 80077f2:	68ac      	ldr	r4, [r5, #8]
 80077f4:	e7eb      	b.n	80077ce <__swsetup_r+0x22>
 80077f6:	4b28      	ldr	r3, [pc, #160]	; (8007898 <__swsetup_r+0xec>)
 80077f8:	429c      	cmp	r4, r3
 80077fa:	d1e8      	bne.n	80077ce <__swsetup_r+0x22>
 80077fc:	68ec      	ldr	r4, [r5, #12]
 80077fe:	e7e6      	b.n	80077ce <__swsetup_r+0x22>
 8007800:	075b      	lsls	r3, r3, #29
 8007802:	d513      	bpl.n	800782c <__swsetup_r+0x80>
 8007804:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007806:	2900      	cmp	r1, #0
 8007808:	d008      	beq.n	800781c <__swsetup_r+0x70>
 800780a:	0023      	movs	r3, r4
 800780c:	3344      	adds	r3, #68	; 0x44
 800780e:	4299      	cmp	r1, r3
 8007810:	d002      	beq.n	8007818 <__swsetup_r+0x6c>
 8007812:	0030      	movs	r0, r6
 8007814:	f7ff fb1c 	bl	8006e50 <_free_r>
 8007818:	2300      	movs	r3, #0
 800781a:	6363      	str	r3, [r4, #52]	; 0x34
 800781c:	2224      	movs	r2, #36	; 0x24
 800781e:	89a3      	ldrh	r3, [r4, #12]
 8007820:	4393      	bics	r3, r2
 8007822:	81a3      	strh	r3, [r4, #12]
 8007824:	2300      	movs	r3, #0
 8007826:	6063      	str	r3, [r4, #4]
 8007828:	6923      	ldr	r3, [r4, #16]
 800782a:	6023      	str	r3, [r4, #0]
 800782c:	2308      	movs	r3, #8
 800782e:	89a2      	ldrh	r2, [r4, #12]
 8007830:	4313      	orrs	r3, r2
 8007832:	81a3      	strh	r3, [r4, #12]
 8007834:	6923      	ldr	r3, [r4, #16]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d10b      	bne.n	8007852 <__swsetup_r+0xa6>
 800783a:	21a0      	movs	r1, #160	; 0xa0
 800783c:	2280      	movs	r2, #128	; 0x80
 800783e:	89a3      	ldrh	r3, [r4, #12]
 8007840:	0089      	lsls	r1, r1, #2
 8007842:	0092      	lsls	r2, r2, #2
 8007844:	400b      	ands	r3, r1
 8007846:	4293      	cmp	r3, r2
 8007848:	d003      	beq.n	8007852 <__swsetup_r+0xa6>
 800784a:	0021      	movs	r1, r4
 800784c:	0030      	movs	r0, r6
 800784e:	f000 fa27 	bl	8007ca0 <__smakebuf_r>
 8007852:	220c      	movs	r2, #12
 8007854:	5ea3      	ldrsh	r3, [r4, r2]
 8007856:	2001      	movs	r0, #1
 8007858:	001a      	movs	r2, r3
 800785a:	b299      	uxth	r1, r3
 800785c:	4002      	ands	r2, r0
 800785e:	4203      	tst	r3, r0
 8007860:	d00f      	beq.n	8007882 <__swsetup_r+0xd6>
 8007862:	2200      	movs	r2, #0
 8007864:	60a2      	str	r2, [r4, #8]
 8007866:	6962      	ldr	r2, [r4, #20]
 8007868:	4252      	negs	r2, r2
 800786a:	61a2      	str	r2, [r4, #24]
 800786c:	2000      	movs	r0, #0
 800786e:	6922      	ldr	r2, [r4, #16]
 8007870:	4282      	cmp	r2, r0
 8007872:	d1ba      	bne.n	80077ea <__swsetup_r+0x3e>
 8007874:	060a      	lsls	r2, r1, #24
 8007876:	d5b8      	bpl.n	80077ea <__swsetup_r+0x3e>
 8007878:	2240      	movs	r2, #64	; 0x40
 800787a:	4313      	orrs	r3, r2
 800787c:	81a3      	strh	r3, [r4, #12]
 800787e:	3801      	subs	r0, #1
 8007880:	e7b3      	b.n	80077ea <__swsetup_r+0x3e>
 8007882:	0788      	lsls	r0, r1, #30
 8007884:	d400      	bmi.n	8007888 <__swsetup_r+0xdc>
 8007886:	6962      	ldr	r2, [r4, #20]
 8007888:	60a2      	str	r2, [r4, #8]
 800788a:	e7ef      	b.n	800786c <__swsetup_r+0xc0>
 800788c:	2000000c 	.word	0x2000000c
 8007890:	080083ec 	.word	0x080083ec
 8007894:	0800840c 	.word	0x0800840c
 8007898:	080083cc 	.word	0x080083cc

0800789c <abort>:
 800789c:	2006      	movs	r0, #6
 800789e:	b510      	push	{r4, lr}
 80078a0:	f000 fa74 	bl	8007d8c <raise>
 80078a4:	2001      	movs	r0, #1
 80078a6:	f7fa ff62 	bl	800276e <_exit>
	...

080078ac <__sflush_r>:
 80078ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078ae:	898b      	ldrh	r3, [r1, #12]
 80078b0:	0005      	movs	r5, r0
 80078b2:	000c      	movs	r4, r1
 80078b4:	071a      	lsls	r2, r3, #28
 80078b6:	d45f      	bmi.n	8007978 <__sflush_r+0xcc>
 80078b8:	684a      	ldr	r2, [r1, #4]
 80078ba:	2a00      	cmp	r2, #0
 80078bc:	dc04      	bgt.n	80078c8 <__sflush_r+0x1c>
 80078be:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80078c0:	2a00      	cmp	r2, #0
 80078c2:	dc01      	bgt.n	80078c8 <__sflush_r+0x1c>
 80078c4:	2000      	movs	r0, #0
 80078c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80078c8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80078ca:	2f00      	cmp	r7, #0
 80078cc:	d0fa      	beq.n	80078c4 <__sflush_r+0x18>
 80078ce:	2200      	movs	r2, #0
 80078d0:	2180      	movs	r1, #128	; 0x80
 80078d2:	682e      	ldr	r6, [r5, #0]
 80078d4:	602a      	str	r2, [r5, #0]
 80078d6:	001a      	movs	r2, r3
 80078d8:	0149      	lsls	r1, r1, #5
 80078da:	400a      	ands	r2, r1
 80078dc:	420b      	tst	r3, r1
 80078de:	d034      	beq.n	800794a <__sflush_r+0x9e>
 80078e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80078e2:	89a3      	ldrh	r3, [r4, #12]
 80078e4:	075b      	lsls	r3, r3, #29
 80078e6:	d506      	bpl.n	80078f6 <__sflush_r+0x4a>
 80078e8:	6863      	ldr	r3, [r4, #4]
 80078ea:	1ac0      	subs	r0, r0, r3
 80078ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d001      	beq.n	80078f6 <__sflush_r+0x4a>
 80078f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80078f4:	1ac0      	subs	r0, r0, r3
 80078f6:	0002      	movs	r2, r0
 80078f8:	6a21      	ldr	r1, [r4, #32]
 80078fa:	2300      	movs	r3, #0
 80078fc:	0028      	movs	r0, r5
 80078fe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007900:	47b8      	blx	r7
 8007902:	89a1      	ldrh	r1, [r4, #12]
 8007904:	1c43      	adds	r3, r0, #1
 8007906:	d106      	bne.n	8007916 <__sflush_r+0x6a>
 8007908:	682b      	ldr	r3, [r5, #0]
 800790a:	2b1d      	cmp	r3, #29
 800790c:	d831      	bhi.n	8007972 <__sflush_r+0xc6>
 800790e:	4a2c      	ldr	r2, [pc, #176]	; (80079c0 <__sflush_r+0x114>)
 8007910:	40da      	lsrs	r2, r3
 8007912:	07d3      	lsls	r3, r2, #31
 8007914:	d52d      	bpl.n	8007972 <__sflush_r+0xc6>
 8007916:	2300      	movs	r3, #0
 8007918:	6063      	str	r3, [r4, #4]
 800791a:	6923      	ldr	r3, [r4, #16]
 800791c:	6023      	str	r3, [r4, #0]
 800791e:	04cb      	lsls	r3, r1, #19
 8007920:	d505      	bpl.n	800792e <__sflush_r+0x82>
 8007922:	1c43      	adds	r3, r0, #1
 8007924:	d102      	bne.n	800792c <__sflush_r+0x80>
 8007926:	682b      	ldr	r3, [r5, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d100      	bne.n	800792e <__sflush_r+0x82>
 800792c:	6560      	str	r0, [r4, #84]	; 0x54
 800792e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007930:	602e      	str	r6, [r5, #0]
 8007932:	2900      	cmp	r1, #0
 8007934:	d0c6      	beq.n	80078c4 <__sflush_r+0x18>
 8007936:	0023      	movs	r3, r4
 8007938:	3344      	adds	r3, #68	; 0x44
 800793a:	4299      	cmp	r1, r3
 800793c:	d002      	beq.n	8007944 <__sflush_r+0x98>
 800793e:	0028      	movs	r0, r5
 8007940:	f7ff fa86 	bl	8006e50 <_free_r>
 8007944:	2000      	movs	r0, #0
 8007946:	6360      	str	r0, [r4, #52]	; 0x34
 8007948:	e7bd      	b.n	80078c6 <__sflush_r+0x1a>
 800794a:	2301      	movs	r3, #1
 800794c:	0028      	movs	r0, r5
 800794e:	6a21      	ldr	r1, [r4, #32]
 8007950:	47b8      	blx	r7
 8007952:	1c43      	adds	r3, r0, #1
 8007954:	d1c5      	bne.n	80078e2 <__sflush_r+0x36>
 8007956:	682b      	ldr	r3, [r5, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d0c2      	beq.n	80078e2 <__sflush_r+0x36>
 800795c:	2b1d      	cmp	r3, #29
 800795e:	d001      	beq.n	8007964 <__sflush_r+0xb8>
 8007960:	2b16      	cmp	r3, #22
 8007962:	d101      	bne.n	8007968 <__sflush_r+0xbc>
 8007964:	602e      	str	r6, [r5, #0]
 8007966:	e7ad      	b.n	80078c4 <__sflush_r+0x18>
 8007968:	2340      	movs	r3, #64	; 0x40
 800796a:	89a2      	ldrh	r2, [r4, #12]
 800796c:	4313      	orrs	r3, r2
 800796e:	81a3      	strh	r3, [r4, #12]
 8007970:	e7a9      	b.n	80078c6 <__sflush_r+0x1a>
 8007972:	2340      	movs	r3, #64	; 0x40
 8007974:	430b      	orrs	r3, r1
 8007976:	e7fa      	b.n	800796e <__sflush_r+0xc2>
 8007978:	690f      	ldr	r7, [r1, #16]
 800797a:	2f00      	cmp	r7, #0
 800797c:	d0a2      	beq.n	80078c4 <__sflush_r+0x18>
 800797e:	680a      	ldr	r2, [r1, #0]
 8007980:	600f      	str	r7, [r1, #0]
 8007982:	1bd2      	subs	r2, r2, r7
 8007984:	9201      	str	r2, [sp, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	079b      	lsls	r3, r3, #30
 800798a:	d100      	bne.n	800798e <__sflush_r+0xe2>
 800798c:	694a      	ldr	r2, [r1, #20]
 800798e:	60a2      	str	r2, [r4, #8]
 8007990:	9b01      	ldr	r3, [sp, #4]
 8007992:	2b00      	cmp	r3, #0
 8007994:	dc00      	bgt.n	8007998 <__sflush_r+0xec>
 8007996:	e795      	b.n	80078c4 <__sflush_r+0x18>
 8007998:	003a      	movs	r2, r7
 800799a:	0028      	movs	r0, r5
 800799c:	9b01      	ldr	r3, [sp, #4]
 800799e:	6a21      	ldr	r1, [r4, #32]
 80079a0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80079a2:	47b0      	blx	r6
 80079a4:	2800      	cmp	r0, #0
 80079a6:	dc06      	bgt.n	80079b6 <__sflush_r+0x10a>
 80079a8:	2340      	movs	r3, #64	; 0x40
 80079aa:	2001      	movs	r0, #1
 80079ac:	89a2      	ldrh	r2, [r4, #12]
 80079ae:	4240      	negs	r0, r0
 80079b0:	4313      	orrs	r3, r2
 80079b2:	81a3      	strh	r3, [r4, #12]
 80079b4:	e787      	b.n	80078c6 <__sflush_r+0x1a>
 80079b6:	9b01      	ldr	r3, [sp, #4]
 80079b8:	183f      	adds	r7, r7, r0
 80079ba:	1a1b      	subs	r3, r3, r0
 80079bc:	9301      	str	r3, [sp, #4]
 80079be:	e7e7      	b.n	8007990 <__sflush_r+0xe4>
 80079c0:	20400001 	.word	0x20400001

080079c4 <_fflush_r>:
 80079c4:	690b      	ldr	r3, [r1, #16]
 80079c6:	b570      	push	{r4, r5, r6, lr}
 80079c8:	0005      	movs	r5, r0
 80079ca:	000c      	movs	r4, r1
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d102      	bne.n	80079d6 <_fflush_r+0x12>
 80079d0:	2500      	movs	r5, #0
 80079d2:	0028      	movs	r0, r5
 80079d4:	bd70      	pop	{r4, r5, r6, pc}
 80079d6:	2800      	cmp	r0, #0
 80079d8:	d004      	beq.n	80079e4 <_fflush_r+0x20>
 80079da:	6983      	ldr	r3, [r0, #24]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d101      	bne.n	80079e4 <_fflush_r+0x20>
 80079e0:	f000 f892 	bl	8007b08 <__sinit>
 80079e4:	4b14      	ldr	r3, [pc, #80]	; (8007a38 <_fflush_r+0x74>)
 80079e6:	429c      	cmp	r4, r3
 80079e8:	d11b      	bne.n	8007a22 <_fflush_r+0x5e>
 80079ea:	686c      	ldr	r4, [r5, #4]
 80079ec:	220c      	movs	r2, #12
 80079ee:	5ea3      	ldrsh	r3, [r4, r2]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d0ed      	beq.n	80079d0 <_fflush_r+0xc>
 80079f4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80079f6:	07d2      	lsls	r2, r2, #31
 80079f8:	d404      	bmi.n	8007a04 <_fflush_r+0x40>
 80079fa:	059b      	lsls	r3, r3, #22
 80079fc:	d402      	bmi.n	8007a04 <_fflush_r+0x40>
 80079fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a00:	f000 f923 	bl	8007c4a <__retarget_lock_acquire_recursive>
 8007a04:	0028      	movs	r0, r5
 8007a06:	0021      	movs	r1, r4
 8007a08:	f7ff ff50 	bl	80078ac <__sflush_r>
 8007a0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a0e:	0005      	movs	r5, r0
 8007a10:	07db      	lsls	r3, r3, #31
 8007a12:	d4de      	bmi.n	80079d2 <_fflush_r+0xe>
 8007a14:	89a3      	ldrh	r3, [r4, #12]
 8007a16:	059b      	lsls	r3, r3, #22
 8007a18:	d4db      	bmi.n	80079d2 <_fflush_r+0xe>
 8007a1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a1c:	f000 f916 	bl	8007c4c <__retarget_lock_release_recursive>
 8007a20:	e7d7      	b.n	80079d2 <_fflush_r+0xe>
 8007a22:	4b06      	ldr	r3, [pc, #24]	; (8007a3c <_fflush_r+0x78>)
 8007a24:	429c      	cmp	r4, r3
 8007a26:	d101      	bne.n	8007a2c <_fflush_r+0x68>
 8007a28:	68ac      	ldr	r4, [r5, #8]
 8007a2a:	e7df      	b.n	80079ec <_fflush_r+0x28>
 8007a2c:	4b04      	ldr	r3, [pc, #16]	; (8007a40 <_fflush_r+0x7c>)
 8007a2e:	429c      	cmp	r4, r3
 8007a30:	d1dc      	bne.n	80079ec <_fflush_r+0x28>
 8007a32:	68ec      	ldr	r4, [r5, #12]
 8007a34:	e7da      	b.n	80079ec <_fflush_r+0x28>
 8007a36:	46c0      	nop			; (mov r8, r8)
 8007a38:	080083ec 	.word	0x080083ec
 8007a3c:	0800840c 	.word	0x0800840c
 8007a40:	080083cc 	.word	0x080083cc

08007a44 <std>:
 8007a44:	2300      	movs	r3, #0
 8007a46:	b510      	push	{r4, lr}
 8007a48:	0004      	movs	r4, r0
 8007a4a:	6003      	str	r3, [r0, #0]
 8007a4c:	6043      	str	r3, [r0, #4]
 8007a4e:	6083      	str	r3, [r0, #8]
 8007a50:	8181      	strh	r1, [r0, #12]
 8007a52:	6643      	str	r3, [r0, #100]	; 0x64
 8007a54:	0019      	movs	r1, r3
 8007a56:	81c2      	strh	r2, [r0, #14]
 8007a58:	6103      	str	r3, [r0, #16]
 8007a5a:	6143      	str	r3, [r0, #20]
 8007a5c:	6183      	str	r3, [r0, #24]
 8007a5e:	2208      	movs	r2, #8
 8007a60:	305c      	adds	r0, #92	; 0x5c
 8007a62:	f7fd facf 	bl	8005004 <memset>
 8007a66:	4b05      	ldr	r3, [pc, #20]	; (8007a7c <std+0x38>)
 8007a68:	6224      	str	r4, [r4, #32]
 8007a6a:	6263      	str	r3, [r4, #36]	; 0x24
 8007a6c:	4b04      	ldr	r3, [pc, #16]	; (8007a80 <std+0x3c>)
 8007a6e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a70:	4b04      	ldr	r3, [pc, #16]	; (8007a84 <std+0x40>)
 8007a72:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a74:	4b04      	ldr	r3, [pc, #16]	; (8007a88 <std+0x44>)
 8007a76:	6323      	str	r3, [r4, #48]	; 0x30
 8007a78:	bd10      	pop	{r4, pc}
 8007a7a:	46c0      	nop			; (mov r8, r8)
 8007a7c:	08007dcd 	.word	0x08007dcd
 8007a80:	08007df5 	.word	0x08007df5
 8007a84:	08007e2d 	.word	0x08007e2d
 8007a88:	08007e59 	.word	0x08007e59

08007a8c <_cleanup_r>:
 8007a8c:	b510      	push	{r4, lr}
 8007a8e:	4902      	ldr	r1, [pc, #8]	; (8007a98 <_cleanup_r+0xc>)
 8007a90:	f000 f8ba 	bl	8007c08 <_fwalk_reent>
 8007a94:	bd10      	pop	{r4, pc}
 8007a96:	46c0      	nop			; (mov r8, r8)
 8007a98:	080079c5 	.word	0x080079c5

08007a9c <__sfmoreglue>:
 8007a9c:	b570      	push	{r4, r5, r6, lr}
 8007a9e:	2568      	movs	r5, #104	; 0x68
 8007aa0:	1e4a      	subs	r2, r1, #1
 8007aa2:	4355      	muls	r5, r2
 8007aa4:	000e      	movs	r6, r1
 8007aa6:	0029      	movs	r1, r5
 8007aa8:	3174      	adds	r1, #116	; 0x74
 8007aaa:	f7ff fa3d 	bl	8006f28 <_malloc_r>
 8007aae:	1e04      	subs	r4, r0, #0
 8007ab0:	d008      	beq.n	8007ac4 <__sfmoreglue+0x28>
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	002a      	movs	r2, r5
 8007ab6:	6001      	str	r1, [r0, #0]
 8007ab8:	6046      	str	r6, [r0, #4]
 8007aba:	300c      	adds	r0, #12
 8007abc:	60a0      	str	r0, [r4, #8]
 8007abe:	3268      	adds	r2, #104	; 0x68
 8007ac0:	f7fd faa0 	bl	8005004 <memset>
 8007ac4:	0020      	movs	r0, r4
 8007ac6:	bd70      	pop	{r4, r5, r6, pc}

08007ac8 <__sfp_lock_acquire>:
 8007ac8:	b510      	push	{r4, lr}
 8007aca:	4802      	ldr	r0, [pc, #8]	; (8007ad4 <__sfp_lock_acquire+0xc>)
 8007acc:	f000 f8bd 	bl	8007c4a <__retarget_lock_acquire_recursive>
 8007ad0:	bd10      	pop	{r4, pc}
 8007ad2:	46c0      	nop			; (mov r8, r8)
 8007ad4:	20000301 	.word	0x20000301

08007ad8 <__sfp_lock_release>:
 8007ad8:	b510      	push	{r4, lr}
 8007ada:	4802      	ldr	r0, [pc, #8]	; (8007ae4 <__sfp_lock_release+0xc>)
 8007adc:	f000 f8b6 	bl	8007c4c <__retarget_lock_release_recursive>
 8007ae0:	bd10      	pop	{r4, pc}
 8007ae2:	46c0      	nop			; (mov r8, r8)
 8007ae4:	20000301 	.word	0x20000301

08007ae8 <__sinit_lock_acquire>:
 8007ae8:	b510      	push	{r4, lr}
 8007aea:	4802      	ldr	r0, [pc, #8]	; (8007af4 <__sinit_lock_acquire+0xc>)
 8007aec:	f000 f8ad 	bl	8007c4a <__retarget_lock_acquire_recursive>
 8007af0:	bd10      	pop	{r4, pc}
 8007af2:	46c0      	nop			; (mov r8, r8)
 8007af4:	20000302 	.word	0x20000302

08007af8 <__sinit_lock_release>:
 8007af8:	b510      	push	{r4, lr}
 8007afa:	4802      	ldr	r0, [pc, #8]	; (8007b04 <__sinit_lock_release+0xc>)
 8007afc:	f000 f8a6 	bl	8007c4c <__retarget_lock_release_recursive>
 8007b00:	bd10      	pop	{r4, pc}
 8007b02:	46c0      	nop			; (mov r8, r8)
 8007b04:	20000302 	.word	0x20000302

08007b08 <__sinit>:
 8007b08:	b513      	push	{r0, r1, r4, lr}
 8007b0a:	0004      	movs	r4, r0
 8007b0c:	f7ff ffec 	bl	8007ae8 <__sinit_lock_acquire>
 8007b10:	69a3      	ldr	r3, [r4, #24]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d002      	beq.n	8007b1c <__sinit+0x14>
 8007b16:	f7ff ffef 	bl	8007af8 <__sinit_lock_release>
 8007b1a:	bd13      	pop	{r0, r1, r4, pc}
 8007b1c:	64a3      	str	r3, [r4, #72]	; 0x48
 8007b1e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007b20:	6523      	str	r3, [r4, #80]	; 0x50
 8007b22:	4b13      	ldr	r3, [pc, #76]	; (8007b70 <__sinit+0x68>)
 8007b24:	4a13      	ldr	r2, [pc, #76]	; (8007b74 <__sinit+0x6c>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	62a2      	str	r2, [r4, #40]	; 0x28
 8007b2a:	9301      	str	r3, [sp, #4]
 8007b2c:	42a3      	cmp	r3, r4
 8007b2e:	d101      	bne.n	8007b34 <__sinit+0x2c>
 8007b30:	2301      	movs	r3, #1
 8007b32:	61a3      	str	r3, [r4, #24]
 8007b34:	0020      	movs	r0, r4
 8007b36:	f000 f81f 	bl	8007b78 <__sfp>
 8007b3a:	6060      	str	r0, [r4, #4]
 8007b3c:	0020      	movs	r0, r4
 8007b3e:	f000 f81b 	bl	8007b78 <__sfp>
 8007b42:	60a0      	str	r0, [r4, #8]
 8007b44:	0020      	movs	r0, r4
 8007b46:	f000 f817 	bl	8007b78 <__sfp>
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	2104      	movs	r1, #4
 8007b4e:	60e0      	str	r0, [r4, #12]
 8007b50:	6860      	ldr	r0, [r4, #4]
 8007b52:	f7ff ff77 	bl	8007a44 <std>
 8007b56:	2201      	movs	r2, #1
 8007b58:	2109      	movs	r1, #9
 8007b5a:	68a0      	ldr	r0, [r4, #8]
 8007b5c:	f7ff ff72 	bl	8007a44 <std>
 8007b60:	2202      	movs	r2, #2
 8007b62:	2112      	movs	r1, #18
 8007b64:	68e0      	ldr	r0, [r4, #12]
 8007b66:	f7ff ff6d 	bl	8007a44 <std>
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	61a3      	str	r3, [r4, #24]
 8007b6e:	e7d2      	b.n	8007b16 <__sinit+0xe>
 8007b70:	08008054 	.word	0x08008054
 8007b74:	08007a8d 	.word	0x08007a8d

08007b78 <__sfp>:
 8007b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b7a:	0007      	movs	r7, r0
 8007b7c:	f7ff ffa4 	bl	8007ac8 <__sfp_lock_acquire>
 8007b80:	4b1f      	ldr	r3, [pc, #124]	; (8007c00 <__sfp+0x88>)
 8007b82:	681e      	ldr	r6, [r3, #0]
 8007b84:	69b3      	ldr	r3, [r6, #24]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d102      	bne.n	8007b90 <__sfp+0x18>
 8007b8a:	0030      	movs	r0, r6
 8007b8c:	f7ff ffbc 	bl	8007b08 <__sinit>
 8007b90:	3648      	adds	r6, #72	; 0x48
 8007b92:	68b4      	ldr	r4, [r6, #8]
 8007b94:	6873      	ldr	r3, [r6, #4]
 8007b96:	3b01      	subs	r3, #1
 8007b98:	d504      	bpl.n	8007ba4 <__sfp+0x2c>
 8007b9a:	6833      	ldr	r3, [r6, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d022      	beq.n	8007be6 <__sfp+0x6e>
 8007ba0:	6836      	ldr	r6, [r6, #0]
 8007ba2:	e7f6      	b.n	8007b92 <__sfp+0x1a>
 8007ba4:	220c      	movs	r2, #12
 8007ba6:	5ea5      	ldrsh	r5, [r4, r2]
 8007ba8:	2d00      	cmp	r5, #0
 8007baa:	d11a      	bne.n	8007be2 <__sfp+0x6a>
 8007bac:	0020      	movs	r0, r4
 8007bae:	4b15      	ldr	r3, [pc, #84]	; (8007c04 <__sfp+0x8c>)
 8007bb0:	3058      	adds	r0, #88	; 0x58
 8007bb2:	60e3      	str	r3, [r4, #12]
 8007bb4:	6665      	str	r5, [r4, #100]	; 0x64
 8007bb6:	f000 f847 	bl	8007c48 <__retarget_lock_init_recursive>
 8007bba:	f7ff ff8d 	bl	8007ad8 <__sfp_lock_release>
 8007bbe:	0020      	movs	r0, r4
 8007bc0:	2208      	movs	r2, #8
 8007bc2:	0029      	movs	r1, r5
 8007bc4:	6025      	str	r5, [r4, #0]
 8007bc6:	60a5      	str	r5, [r4, #8]
 8007bc8:	6065      	str	r5, [r4, #4]
 8007bca:	6125      	str	r5, [r4, #16]
 8007bcc:	6165      	str	r5, [r4, #20]
 8007bce:	61a5      	str	r5, [r4, #24]
 8007bd0:	305c      	adds	r0, #92	; 0x5c
 8007bd2:	f7fd fa17 	bl	8005004 <memset>
 8007bd6:	6365      	str	r5, [r4, #52]	; 0x34
 8007bd8:	63a5      	str	r5, [r4, #56]	; 0x38
 8007bda:	64a5      	str	r5, [r4, #72]	; 0x48
 8007bdc:	64e5      	str	r5, [r4, #76]	; 0x4c
 8007bde:	0020      	movs	r0, r4
 8007be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007be2:	3468      	adds	r4, #104	; 0x68
 8007be4:	e7d7      	b.n	8007b96 <__sfp+0x1e>
 8007be6:	2104      	movs	r1, #4
 8007be8:	0038      	movs	r0, r7
 8007bea:	f7ff ff57 	bl	8007a9c <__sfmoreglue>
 8007bee:	1e04      	subs	r4, r0, #0
 8007bf0:	6030      	str	r0, [r6, #0]
 8007bf2:	d1d5      	bne.n	8007ba0 <__sfp+0x28>
 8007bf4:	f7ff ff70 	bl	8007ad8 <__sfp_lock_release>
 8007bf8:	230c      	movs	r3, #12
 8007bfa:	603b      	str	r3, [r7, #0]
 8007bfc:	e7ef      	b.n	8007bde <__sfp+0x66>
 8007bfe:	46c0      	nop			; (mov r8, r8)
 8007c00:	08008054 	.word	0x08008054
 8007c04:	ffff0001 	.word	0xffff0001

08007c08 <_fwalk_reent>:
 8007c08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c0a:	0004      	movs	r4, r0
 8007c0c:	0006      	movs	r6, r0
 8007c0e:	2700      	movs	r7, #0
 8007c10:	9101      	str	r1, [sp, #4]
 8007c12:	3448      	adds	r4, #72	; 0x48
 8007c14:	6863      	ldr	r3, [r4, #4]
 8007c16:	68a5      	ldr	r5, [r4, #8]
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	9b00      	ldr	r3, [sp, #0]
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	9300      	str	r3, [sp, #0]
 8007c20:	d504      	bpl.n	8007c2c <_fwalk_reent+0x24>
 8007c22:	6824      	ldr	r4, [r4, #0]
 8007c24:	2c00      	cmp	r4, #0
 8007c26:	d1f5      	bne.n	8007c14 <_fwalk_reent+0xc>
 8007c28:	0038      	movs	r0, r7
 8007c2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c2c:	89ab      	ldrh	r3, [r5, #12]
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d908      	bls.n	8007c44 <_fwalk_reent+0x3c>
 8007c32:	220e      	movs	r2, #14
 8007c34:	5eab      	ldrsh	r3, [r5, r2]
 8007c36:	3301      	adds	r3, #1
 8007c38:	d004      	beq.n	8007c44 <_fwalk_reent+0x3c>
 8007c3a:	0029      	movs	r1, r5
 8007c3c:	0030      	movs	r0, r6
 8007c3e:	9b01      	ldr	r3, [sp, #4]
 8007c40:	4798      	blx	r3
 8007c42:	4307      	orrs	r7, r0
 8007c44:	3568      	adds	r5, #104	; 0x68
 8007c46:	e7e8      	b.n	8007c1a <_fwalk_reent+0x12>

08007c48 <__retarget_lock_init_recursive>:
 8007c48:	4770      	bx	lr

08007c4a <__retarget_lock_acquire_recursive>:
 8007c4a:	4770      	bx	lr

08007c4c <__retarget_lock_release_recursive>:
 8007c4c:	4770      	bx	lr
	...

08007c50 <__swhatbuf_r>:
 8007c50:	b570      	push	{r4, r5, r6, lr}
 8007c52:	000e      	movs	r6, r1
 8007c54:	001d      	movs	r5, r3
 8007c56:	230e      	movs	r3, #14
 8007c58:	5ec9      	ldrsh	r1, [r1, r3]
 8007c5a:	0014      	movs	r4, r2
 8007c5c:	b096      	sub	sp, #88	; 0x58
 8007c5e:	2900      	cmp	r1, #0
 8007c60:	da08      	bge.n	8007c74 <__swhatbuf_r+0x24>
 8007c62:	220c      	movs	r2, #12
 8007c64:	5eb3      	ldrsh	r3, [r6, r2]
 8007c66:	2200      	movs	r2, #0
 8007c68:	602a      	str	r2, [r5, #0]
 8007c6a:	061b      	lsls	r3, r3, #24
 8007c6c:	d411      	bmi.n	8007c92 <__swhatbuf_r+0x42>
 8007c6e:	2380      	movs	r3, #128	; 0x80
 8007c70:	00db      	lsls	r3, r3, #3
 8007c72:	e00f      	b.n	8007c94 <__swhatbuf_r+0x44>
 8007c74:	466a      	mov	r2, sp
 8007c76:	f000 f91b 	bl	8007eb0 <_fstat_r>
 8007c7a:	2800      	cmp	r0, #0
 8007c7c:	dbf1      	blt.n	8007c62 <__swhatbuf_r+0x12>
 8007c7e:	23f0      	movs	r3, #240	; 0xf0
 8007c80:	9901      	ldr	r1, [sp, #4]
 8007c82:	021b      	lsls	r3, r3, #8
 8007c84:	4019      	ands	r1, r3
 8007c86:	4b05      	ldr	r3, [pc, #20]	; (8007c9c <__swhatbuf_r+0x4c>)
 8007c88:	18c9      	adds	r1, r1, r3
 8007c8a:	424b      	negs	r3, r1
 8007c8c:	4159      	adcs	r1, r3
 8007c8e:	6029      	str	r1, [r5, #0]
 8007c90:	e7ed      	b.n	8007c6e <__swhatbuf_r+0x1e>
 8007c92:	2340      	movs	r3, #64	; 0x40
 8007c94:	2000      	movs	r0, #0
 8007c96:	6023      	str	r3, [r4, #0]
 8007c98:	b016      	add	sp, #88	; 0x58
 8007c9a:	bd70      	pop	{r4, r5, r6, pc}
 8007c9c:	ffffe000 	.word	0xffffe000

08007ca0 <__smakebuf_r>:
 8007ca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ca2:	2602      	movs	r6, #2
 8007ca4:	898b      	ldrh	r3, [r1, #12]
 8007ca6:	0005      	movs	r5, r0
 8007ca8:	000c      	movs	r4, r1
 8007caa:	4233      	tst	r3, r6
 8007cac:	d006      	beq.n	8007cbc <__smakebuf_r+0x1c>
 8007cae:	0023      	movs	r3, r4
 8007cb0:	3347      	adds	r3, #71	; 0x47
 8007cb2:	6023      	str	r3, [r4, #0]
 8007cb4:	6123      	str	r3, [r4, #16]
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	6163      	str	r3, [r4, #20]
 8007cba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007cbc:	466a      	mov	r2, sp
 8007cbe:	ab01      	add	r3, sp, #4
 8007cc0:	f7ff ffc6 	bl	8007c50 <__swhatbuf_r>
 8007cc4:	9900      	ldr	r1, [sp, #0]
 8007cc6:	0007      	movs	r7, r0
 8007cc8:	0028      	movs	r0, r5
 8007cca:	f7ff f92d 	bl	8006f28 <_malloc_r>
 8007cce:	2800      	cmp	r0, #0
 8007cd0:	d108      	bne.n	8007ce4 <__smakebuf_r+0x44>
 8007cd2:	220c      	movs	r2, #12
 8007cd4:	5ea3      	ldrsh	r3, [r4, r2]
 8007cd6:	059a      	lsls	r2, r3, #22
 8007cd8:	d4ef      	bmi.n	8007cba <__smakebuf_r+0x1a>
 8007cda:	2203      	movs	r2, #3
 8007cdc:	4393      	bics	r3, r2
 8007cde:	431e      	orrs	r6, r3
 8007ce0:	81a6      	strh	r6, [r4, #12]
 8007ce2:	e7e4      	b.n	8007cae <__smakebuf_r+0xe>
 8007ce4:	4b0f      	ldr	r3, [pc, #60]	; (8007d24 <__smakebuf_r+0x84>)
 8007ce6:	62ab      	str	r3, [r5, #40]	; 0x28
 8007ce8:	2380      	movs	r3, #128	; 0x80
 8007cea:	89a2      	ldrh	r2, [r4, #12]
 8007cec:	6020      	str	r0, [r4, #0]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	81a3      	strh	r3, [r4, #12]
 8007cf2:	9b00      	ldr	r3, [sp, #0]
 8007cf4:	6120      	str	r0, [r4, #16]
 8007cf6:	6163      	str	r3, [r4, #20]
 8007cf8:	9b01      	ldr	r3, [sp, #4]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00d      	beq.n	8007d1a <__smakebuf_r+0x7a>
 8007cfe:	0028      	movs	r0, r5
 8007d00:	230e      	movs	r3, #14
 8007d02:	5ee1      	ldrsh	r1, [r4, r3]
 8007d04:	f000 f8e6 	bl	8007ed4 <_isatty_r>
 8007d08:	2800      	cmp	r0, #0
 8007d0a:	d006      	beq.n	8007d1a <__smakebuf_r+0x7a>
 8007d0c:	2203      	movs	r2, #3
 8007d0e:	89a3      	ldrh	r3, [r4, #12]
 8007d10:	4393      	bics	r3, r2
 8007d12:	001a      	movs	r2, r3
 8007d14:	2301      	movs	r3, #1
 8007d16:	4313      	orrs	r3, r2
 8007d18:	81a3      	strh	r3, [r4, #12]
 8007d1a:	89a0      	ldrh	r0, [r4, #12]
 8007d1c:	4307      	orrs	r7, r0
 8007d1e:	81a7      	strh	r7, [r4, #12]
 8007d20:	e7cb      	b.n	8007cba <__smakebuf_r+0x1a>
 8007d22:	46c0      	nop			; (mov r8, r8)
 8007d24:	08007a8d 	.word	0x08007a8d

08007d28 <_malloc_usable_size_r>:
 8007d28:	1f0b      	subs	r3, r1, #4
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	1f18      	subs	r0, r3, #4
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	da01      	bge.n	8007d36 <_malloc_usable_size_r+0xe>
 8007d32:	580b      	ldr	r3, [r1, r0]
 8007d34:	18c0      	adds	r0, r0, r3
 8007d36:	4770      	bx	lr

08007d38 <_raise_r>:
 8007d38:	b570      	push	{r4, r5, r6, lr}
 8007d3a:	0004      	movs	r4, r0
 8007d3c:	000d      	movs	r5, r1
 8007d3e:	291f      	cmp	r1, #31
 8007d40:	d904      	bls.n	8007d4c <_raise_r+0x14>
 8007d42:	2316      	movs	r3, #22
 8007d44:	6003      	str	r3, [r0, #0]
 8007d46:	2001      	movs	r0, #1
 8007d48:	4240      	negs	r0, r0
 8007d4a:	bd70      	pop	{r4, r5, r6, pc}
 8007d4c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d004      	beq.n	8007d5c <_raise_r+0x24>
 8007d52:	008a      	lsls	r2, r1, #2
 8007d54:	189b      	adds	r3, r3, r2
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	2a00      	cmp	r2, #0
 8007d5a:	d108      	bne.n	8007d6e <_raise_r+0x36>
 8007d5c:	0020      	movs	r0, r4
 8007d5e:	f000 f831 	bl	8007dc4 <_getpid_r>
 8007d62:	002a      	movs	r2, r5
 8007d64:	0001      	movs	r1, r0
 8007d66:	0020      	movs	r0, r4
 8007d68:	f000 f81a 	bl	8007da0 <_kill_r>
 8007d6c:	e7ed      	b.n	8007d4a <_raise_r+0x12>
 8007d6e:	2000      	movs	r0, #0
 8007d70:	2a01      	cmp	r2, #1
 8007d72:	d0ea      	beq.n	8007d4a <_raise_r+0x12>
 8007d74:	1c51      	adds	r1, r2, #1
 8007d76:	d103      	bne.n	8007d80 <_raise_r+0x48>
 8007d78:	2316      	movs	r3, #22
 8007d7a:	3001      	adds	r0, #1
 8007d7c:	6023      	str	r3, [r4, #0]
 8007d7e:	e7e4      	b.n	8007d4a <_raise_r+0x12>
 8007d80:	2400      	movs	r4, #0
 8007d82:	0028      	movs	r0, r5
 8007d84:	601c      	str	r4, [r3, #0]
 8007d86:	4790      	blx	r2
 8007d88:	0020      	movs	r0, r4
 8007d8a:	e7de      	b.n	8007d4a <_raise_r+0x12>

08007d8c <raise>:
 8007d8c:	b510      	push	{r4, lr}
 8007d8e:	4b03      	ldr	r3, [pc, #12]	; (8007d9c <raise+0x10>)
 8007d90:	0001      	movs	r1, r0
 8007d92:	6818      	ldr	r0, [r3, #0]
 8007d94:	f7ff ffd0 	bl	8007d38 <_raise_r>
 8007d98:	bd10      	pop	{r4, pc}
 8007d9a:	46c0      	nop			; (mov r8, r8)
 8007d9c:	2000000c 	.word	0x2000000c

08007da0 <_kill_r>:
 8007da0:	2300      	movs	r3, #0
 8007da2:	b570      	push	{r4, r5, r6, lr}
 8007da4:	4d06      	ldr	r5, [pc, #24]	; (8007dc0 <_kill_r+0x20>)
 8007da6:	0004      	movs	r4, r0
 8007da8:	0008      	movs	r0, r1
 8007daa:	0011      	movs	r1, r2
 8007dac:	602b      	str	r3, [r5, #0]
 8007dae:	f7fa fcce 	bl	800274e <_kill>
 8007db2:	1c43      	adds	r3, r0, #1
 8007db4:	d103      	bne.n	8007dbe <_kill_r+0x1e>
 8007db6:	682b      	ldr	r3, [r5, #0]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d000      	beq.n	8007dbe <_kill_r+0x1e>
 8007dbc:	6023      	str	r3, [r4, #0]
 8007dbe:	bd70      	pop	{r4, r5, r6, pc}
 8007dc0:	200002fc 	.word	0x200002fc

08007dc4 <_getpid_r>:
 8007dc4:	b510      	push	{r4, lr}
 8007dc6:	f7fa fcbc 	bl	8002742 <_getpid>
 8007dca:	bd10      	pop	{r4, pc}

08007dcc <__sread>:
 8007dcc:	b570      	push	{r4, r5, r6, lr}
 8007dce:	000c      	movs	r4, r1
 8007dd0:	250e      	movs	r5, #14
 8007dd2:	5f49      	ldrsh	r1, [r1, r5]
 8007dd4:	f000 f8a4 	bl	8007f20 <_read_r>
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	db03      	blt.n	8007de4 <__sread+0x18>
 8007ddc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007dde:	181b      	adds	r3, r3, r0
 8007de0:	6563      	str	r3, [r4, #84]	; 0x54
 8007de2:	bd70      	pop	{r4, r5, r6, pc}
 8007de4:	89a3      	ldrh	r3, [r4, #12]
 8007de6:	4a02      	ldr	r2, [pc, #8]	; (8007df0 <__sread+0x24>)
 8007de8:	4013      	ands	r3, r2
 8007dea:	81a3      	strh	r3, [r4, #12]
 8007dec:	e7f9      	b.n	8007de2 <__sread+0x16>
 8007dee:	46c0      	nop			; (mov r8, r8)
 8007df0:	ffffefff 	.word	0xffffefff

08007df4 <__swrite>:
 8007df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007df6:	001f      	movs	r7, r3
 8007df8:	898b      	ldrh	r3, [r1, #12]
 8007dfa:	0005      	movs	r5, r0
 8007dfc:	000c      	movs	r4, r1
 8007dfe:	0016      	movs	r6, r2
 8007e00:	05db      	lsls	r3, r3, #23
 8007e02:	d505      	bpl.n	8007e10 <__swrite+0x1c>
 8007e04:	230e      	movs	r3, #14
 8007e06:	5ec9      	ldrsh	r1, [r1, r3]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	2302      	movs	r3, #2
 8007e0c:	f000 f874 	bl	8007ef8 <_lseek_r>
 8007e10:	89a3      	ldrh	r3, [r4, #12]
 8007e12:	4a05      	ldr	r2, [pc, #20]	; (8007e28 <__swrite+0x34>)
 8007e14:	0028      	movs	r0, r5
 8007e16:	4013      	ands	r3, r2
 8007e18:	81a3      	strh	r3, [r4, #12]
 8007e1a:	0032      	movs	r2, r6
 8007e1c:	230e      	movs	r3, #14
 8007e1e:	5ee1      	ldrsh	r1, [r4, r3]
 8007e20:	003b      	movs	r3, r7
 8007e22:	f000 f81f 	bl	8007e64 <_write_r>
 8007e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e28:	ffffefff 	.word	0xffffefff

08007e2c <__sseek>:
 8007e2c:	b570      	push	{r4, r5, r6, lr}
 8007e2e:	000c      	movs	r4, r1
 8007e30:	250e      	movs	r5, #14
 8007e32:	5f49      	ldrsh	r1, [r1, r5]
 8007e34:	f000 f860 	bl	8007ef8 <_lseek_r>
 8007e38:	89a3      	ldrh	r3, [r4, #12]
 8007e3a:	1c42      	adds	r2, r0, #1
 8007e3c:	d103      	bne.n	8007e46 <__sseek+0x1a>
 8007e3e:	4a05      	ldr	r2, [pc, #20]	; (8007e54 <__sseek+0x28>)
 8007e40:	4013      	ands	r3, r2
 8007e42:	81a3      	strh	r3, [r4, #12]
 8007e44:	bd70      	pop	{r4, r5, r6, pc}
 8007e46:	2280      	movs	r2, #128	; 0x80
 8007e48:	0152      	lsls	r2, r2, #5
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	81a3      	strh	r3, [r4, #12]
 8007e4e:	6560      	str	r0, [r4, #84]	; 0x54
 8007e50:	e7f8      	b.n	8007e44 <__sseek+0x18>
 8007e52:	46c0      	nop			; (mov r8, r8)
 8007e54:	ffffefff 	.word	0xffffefff

08007e58 <__sclose>:
 8007e58:	b510      	push	{r4, lr}
 8007e5a:	230e      	movs	r3, #14
 8007e5c:	5ec9      	ldrsh	r1, [r1, r3]
 8007e5e:	f000 f815 	bl	8007e8c <_close_r>
 8007e62:	bd10      	pop	{r4, pc}

08007e64 <_write_r>:
 8007e64:	b570      	push	{r4, r5, r6, lr}
 8007e66:	0004      	movs	r4, r0
 8007e68:	0008      	movs	r0, r1
 8007e6a:	0011      	movs	r1, r2
 8007e6c:	001a      	movs	r2, r3
 8007e6e:	2300      	movs	r3, #0
 8007e70:	4d05      	ldr	r5, [pc, #20]	; (8007e88 <_write_r+0x24>)
 8007e72:	602b      	str	r3, [r5, #0]
 8007e74:	f7fa fca4 	bl	80027c0 <_write>
 8007e78:	1c43      	adds	r3, r0, #1
 8007e7a:	d103      	bne.n	8007e84 <_write_r+0x20>
 8007e7c:	682b      	ldr	r3, [r5, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d000      	beq.n	8007e84 <_write_r+0x20>
 8007e82:	6023      	str	r3, [r4, #0]
 8007e84:	bd70      	pop	{r4, r5, r6, pc}
 8007e86:	46c0      	nop			; (mov r8, r8)
 8007e88:	200002fc 	.word	0x200002fc

08007e8c <_close_r>:
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	b570      	push	{r4, r5, r6, lr}
 8007e90:	4d06      	ldr	r5, [pc, #24]	; (8007eac <_close_r+0x20>)
 8007e92:	0004      	movs	r4, r0
 8007e94:	0008      	movs	r0, r1
 8007e96:	602b      	str	r3, [r5, #0]
 8007e98:	f7fa fcae 	bl	80027f8 <_close>
 8007e9c:	1c43      	adds	r3, r0, #1
 8007e9e:	d103      	bne.n	8007ea8 <_close_r+0x1c>
 8007ea0:	682b      	ldr	r3, [r5, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d000      	beq.n	8007ea8 <_close_r+0x1c>
 8007ea6:	6023      	str	r3, [r4, #0]
 8007ea8:	bd70      	pop	{r4, r5, r6, pc}
 8007eaa:	46c0      	nop			; (mov r8, r8)
 8007eac:	200002fc 	.word	0x200002fc

08007eb0 <_fstat_r>:
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	b570      	push	{r4, r5, r6, lr}
 8007eb4:	4d06      	ldr	r5, [pc, #24]	; (8007ed0 <_fstat_r+0x20>)
 8007eb6:	0004      	movs	r4, r0
 8007eb8:	0008      	movs	r0, r1
 8007eba:	0011      	movs	r1, r2
 8007ebc:	602b      	str	r3, [r5, #0]
 8007ebe:	f7fa fca5 	bl	800280c <_fstat>
 8007ec2:	1c43      	adds	r3, r0, #1
 8007ec4:	d103      	bne.n	8007ece <_fstat_r+0x1e>
 8007ec6:	682b      	ldr	r3, [r5, #0]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d000      	beq.n	8007ece <_fstat_r+0x1e>
 8007ecc:	6023      	str	r3, [r4, #0]
 8007ece:	bd70      	pop	{r4, r5, r6, pc}
 8007ed0:	200002fc 	.word	0x200002fc

08007ed4 <_isatty_r>:
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	b570      	push	{r4, r5, r6, lr}
 8007ed8:	4d06      	ldr	r5, [pc, #24]	; (8007ef4 <_isatty_r+0x20>)
 8007eda:	0004      	movs	r4, r0
 8007edc:	0008      	movs	r0, r1
 8007ede:	602b      	str	r3, [r5, #0]
 8007ee0:	f7fa fca2 	bl	8002828 <_isatty>
 8007ee4:	1c43      	adds	r3, r0, #1
 8007ee6:	d103      	bne.n	8007ef0 <_isatty_r+0x1c>
 8007ee8:	682b      	ldr	r3, [r5, #0]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d000      	beq.n	8007ef0 <_isatty_r+0x1c>
 8007eee:	6023      	str	r3, [r4, #0]
 8007ef0:	bd70      	pop	{r4, r5, r6, pc}
 8007ef2:	46c0      	nop			; (mov r8, r8)
 8007ef4:	200002fc 	.word	0x200002fc

08007ef8 <_lseek_r>:
 8007ef8:	b570      	push	{r4, r5, r6, lr}
 8007efa:	0004      	movs	r4, r0
 8007efc:	0008      	movs	r0, r1
 8007efe:	0011      	movs	r1, r2
 8007f00:	001a      	movs	r2, r3
 8007f02:	2300      	movs	r3, #0
 8007f04:	4d05      	ldr	r5, [pc, #20]	; (8007f1c <_lseek_r+0x24>)
 8007f06:	602b      	str	r3, [r5, #0]
 8007f08:	f7fa fc97 	bl	800283a <_lseek>
 8007f0c:	1c43      	adds	r3, r0, #1
 8007f0e:	d103      	bne.n	8007f18 <_lseek_r+0x20>
 8007f10:	682b      	ldr	r3, [r5, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d000      	beq.n	8007f18 <_lseek_r+0x20>
 8007f16:	6023      	str	r3, [r4, #0]
 8007f18:	bd70      	pop	{r4, r5, r6, pc}
 8007f1a:	46c0      	nop			; (mov r8, r8)
 8007f1c:	200002fc 	.word	0x200002fc

08007f20 <_read_r>:
 8007f20:	b570      	push	{r4, r5, r6, lr}
 8007f22:	0004      	movs	r4, r0
 8007f24:	0008      	movs	r0, r1
 8007f26:	0011      	movs	r1, r2
 8007f28:	001a      	movs	r2, r3
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	4d05      	ldr	r5, [pc, #20]	; (8007f44 <_read_r+0x24>)
 8007f2e:	602b      	str	r3, [r5, #0]
 8007f30:	f7fa fc29 	bl	8002786 <_read>
 8007f34:	1c43      	adds	r3, r0, #1
 8007f36:	d103      	bne.n	8007f40 <_read_r+0x20>
 8007f38:	682b      	ldr	r3, [r5, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d000      	beq.n	8007f40 <_read_r+0x20>
 8007f3e:	6023      	str	r3, [r4, #0]
 8007f40:	bd70      	pop	{r4, r5, r6, pc}
 8007f42:	46c0      	nop			; (mov r8, r8)
 8007f44:	200002fc 	.word	0x200002fc

08007f48 <_init>:
 8007f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4a:	46c0      	nop			; (mov r8, r8)
 8007f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f4e:	bc08      	pop	{r3}
 8007f50:	469e      	mov	lr, r3
 8007f52:	4770      	bx	lr

08007f54 <_fini>:
 8007f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f56:	46c0      	nop			; (mov r8, r8)
 8007f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f5a:	bc08      	pop	{r3}
 8007f5c:	469e      	mov	lr, r3
 8007f5e:	4770      	bx	lr


ADC_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e50  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08003f10  08003f10  00013f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fb8  08003fb8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003fb8  08003fb8  00013fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fc0  08003fc0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fc0  08003fc0  00013fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fc4  08003fc4  00013fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003fc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000070  08004038  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08004038  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000abd1  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c15  00000000  00000000  0002ac69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b8  00000000  00000000  0002c880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000800  00000000  00000000  0002d138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014575  00000000  00000000  0002d938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b6a2  00000000  00000000  00041ead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007bfd7  00000000  00000000  0004d54f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c9526  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021cc  00000000  00000000  000c9578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003ef8 	.word	0x08003ef8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003ef8 	.word	0x08003ef8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f834 	bl	80002e0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4647      	mov	r7, r8
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	4699      	mov	r9, r3
 8000290:	0c3b      	lsrs	r3, r7, #16
 8000292:	469c      	mov	ip, r3
 8000294:	0413      	lsls	r3, r2, #16
 8000296:	0c1b      	lsrs	r3, r3, #16
 8000298:	001d      	movs	r5, r3
 800029a:	000e      	movs	r6, r1
 800029c:	4661      	mov	r1, ip
 800029e:	0400      	lsls	r0, r0, #16
 80002a0:	0c14      	lsrs	r4, r2, #16
 80002a2:	0c00      	lsrs	r0, r0, #16
 80002a4:	4345      	muls	r5, r0
 80002a6:	434b      	muls	r3, r1
 80002a8:	4360      	muls	r0, r4
 80002aa:	4361      	muls	r1, r4
 80002ac:	18c0      	adds	r0, r0, r3
 80002ae:	0c2c      	lsrs	r4, r5, #16
 80002b0:	1820      	adds	r0, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	4283      	cmp	r3, r0
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4372      	muls	r2, r6
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	4463      	add	r3, ip
 80002ca:	042d      	lsls	r5, r5, #16
 80002cc:	0c2d      	lsrs	r5, r5, #16
 80002ce:	18c9      	adds	r1, r1, r3
 80002d0:	0400      	lsls	r0, r0, #16
 80002d2:	1940      	adds	r0, r0, r5
 80002d4:	1889      	adds	r1, r1, r2
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__udivmoddi4>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	4657      	mov	r7, sl
 80002e4:	464e      	mov	r6, r9
 80002e6:	4645      	mov	r5, r8
 80002e8:	46de      	mov	lr, fp
 80002ea:	b5e0      	push	{r5, r6, r7, lr}
 80002ec:	0004      	movs	r4, r0
 80002ee:	000d      	movs	r5, r1
 80002f0:	4692      	mov	sl, r2
 80002f2:	4699      	mov	r9, r3
 80002f4:	b083      	sub	sp, #12
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d830      	bhi.n	800035c <__udivmoddi4+0x7c>
 80002fa:	d02d      	beq.n	8000358 <__udivmoddi4+0x78>
 80002fc:	4649      	mov	r1, r9
 80002fe:	4650      	mov	r0, sl
 8000300:	f000 f8ba 	bl	8000478 <__clzdi2>
 8000304:	0029      	movs	r1, r5
 8000306:	0006      	movs	r6, r0
 8000308:	0020      	movs	r0, r4
 800030a:	f000 f8b5 	bl	8000478 <__clzdi2>
 800030e:	1a33      	subs	r3, r6, r0
 8000310:	4698      	mov	r8, r3
 8000312:	3b20      	subs	r3, #32
 8000314:	469b      	mov	fp, r3
 8000316:	d433      	bmi.n	8000380 <__udivmoddi4+0xa0>
 8000318:	465a      	mov	r2, fp
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	4642      	mov	r2, r8
 8000320:	001f      	movs	r7, r3
 8000322:	4653      	mov	r3, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001e      	movs	r6, r3
 8000328:	42af      	cmp	r7, r5
 800032a:	d83a      	bhi.n	80003a2 <__udivmoddi4+0xc2>
 800032c:	42af      	cmp	r7, r5
 800032e:	d100      	bne.n	8000332 <__udivmoddi4+0x52>
 8000330:	e078      	b.n	8000424 <__udivmoddi4+0x144>
 8000332:	465b      	mov	r3, fp
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	41bd      	sbcs	r5, r7
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <__udivmoddi4+0x5e>
 800033c:	e075      	b.n	800042a <__udivmoddi4+0x14a>
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	465a      	mov	r2, fp
 800034a:	4093      	lsls	r3, r2
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	4093      	lsls	r3, r2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	e028      	b.n	80003aa <__udivmoddi4+0xca>
 8000358:	4282      	cmp	r2, r0
 800035a:	d9cf      	bls.n	80002fc <__udivmoddi4+0x1c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <__udivmoddi4+0x8e>
 800036a:	601c      	str	r4, [r3, #0]
 800036c:	605d      	str	r5, [r3, #4]
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	b003      	add	sp, #12
 8000374:	bcf0      	pop	{r4, r5, r6, r7}
 8000376:	46bb      	mov	fp, r7
 8000378:	46b2      	mov	sl, r6
 800037a:	46a9      	mov	r9, r5
 800037c:	46a0      	mov	r8, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4642      	mov	r2, r8
 8000382:	2320      	movs	r3, #32
 8000384:	1a9b      	subs	r3, r3, r2
 8000386:	4652      	mov	r2, sl
 8000388:	40da      	lsrs	r2, r3
 800038a:	4641      	mov	r1, r8
 800038c:	0013      	movs	r3, r2
 800038e:	464a      	mov	r2, r9
 8000390:	408a      	lsls	r2, r1
 8000392:	0017      	movs	r7, r2
 8000394:	4642      	mov	r2, r8
 8000396:	431f      	orrs	r7, r3
 8000398:	4653      	mov	r3, sl
 800039a:	4093      	lsls	r3, r2
 800039c:	001e      	movs	r6, r3
 800039e:	42af      	cmp	r7, r5
 80003a0:	d9c4      	bls.n	800032c <__udivmoddi4+0x4c>
 80003a2:	2200      	movs	r2, #0
 80003a4:	2300      	movs	r3, #0
 80003a6:	9200      	str	r2, [sp, #0]
 80003a8:	9301      	str	r3, [sp, #4]
 80003aa:	4643      	mov	r3, r8
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d0d9      	beq.n	8000364 <__udivmoddi4+0x84>
 80003b0:	07fb      	lsls	r3, r7, #31
 80003b2:	0872      	lsrs	r2, r6, #1
 80003b4:	431a      	orrs	r2, r3
 80003b6:	4646      	mov	r6, r8
 80003b8:	087b      	lsrs	r3, r7, #1
 80003ba:	e00e      	b.n	80003da <__udivmoddi4+0xfa>
 80003bc:	42ab      	cmp	r3, r5
 80003be:	d101      	bne.n	80003c4 <__udivmoddi4+0xe4>
 80003c0:	42a2      	cmp	r2, r4
 80003c2:	d80c      	bhi.n	80003de <__udivmoddi4+0xfe>
 80003c4:	1aa4      	subs	r4, r4, r2
 80003c6:	419d      	sbcs	r5, r3
 80003c8:	2001      	movs	r0, #1
 80003ca:	1924      	adds	r4, r4, r4
 80003cc:	416d      	adcs	r5, r5
 80003ce:	2100      	movs	r1, #0
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1824      	adds	r4, r4, r0
 80003d4:	414d      	adcs	r5, r1
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d006      	beq.n	80003e8 <__udivmoddi4+0x108>
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d9ee      	bls.n	80003bc <__udivmoddi4+0xdc>
 80003de:	3e01      	subs	r6, #1
 80003e0:	1924      	adds	r4, r4, r4
 80003e2:	416d      	adcs	r5, r5
 80003e4:	2e00      	cmp	r6, #0
 80003e6:	d1f8      	bne.n	80003da <__udivmoddi4+0xfa>
 80003e8:	9800      	ldr	r0, [sp, #0]
 80003ea:	9901      	ldr	r1, [sp, #4]
 80003ec:	465b      	mov	r3, fp
 80003ee:	1900      	adds	r0, r0, r4
 80003f0:	4169      	adcs	r1, r5
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	db24      	blt.n	8000440 <__udivmoddi4+0x160>
 80003f6:	002b      	movs	r3, r5
 80003f8:	465a      	mov	r2, fp
 80003fa:	4644      	mov	r4, r8
 80003fc:	40d3      	lsrs	r3, r2
 80003fe:	002a      	movs	r2, r5
 8000400:	40e2      	lsrs	r2, r4
 8000402:	001c      	movs	r4, r3
 8000404:	465b      	mov	r3, fp
 8000406:	0015      	movs	r5, r2
 8000408:	2b00      	cmp	r3, #0
 800040a:	db2a      	blt.n	8000462 <__udivmoddi4+0x182>
 800040c:	0026      	movs	r6, r4
 800040e:	409e      	lsls	r6, r3
 8000410:	0033      	movs	r3, r6
 8000412:	0026      	movs	r6, r4
 8000414:	4647      	mov	r7, r8
 8000416:	40be      	lsls	r6, r7
 8000418:	0032      	movs	r2, r6
 800041a:	1a80      	subs	r0, r0, r2
 800041c:	4199      	sbcs	r1, r3
 800041e:	9000      	str	r0, [sp, #0]
 8000420:	9101      	str	r1, [sp, #4]
 8000422:	e79f      	b.n	8000364 <__udivmoddi4+0x84>
 8000424:	42a3      	cmp	r3, r4
 8000426:	d8bc      	bhi.n	80003a2 <__udivmoddi4+0xc2>
 8000428:	e783      	b.n	8000332 <__udivmoddi4+0x52>
 800042a:	4642      	mov	r2, r8
 800042c:	2320      	movs	r3, #32
 800042e:	2100      	movs	r1, #0
 8000430:	1a9b      	subs	r3, r3, r2
 8000432:	2200      	movs	r2, #0
 8000434:	9100      	str	r1, [sp, #0]
 8000436:	9201      	str	r2, [sp, #4]
 8000438:	2201      	movs	r2, #1
 800043a:	40da      	lsrs	r2, r3
 800043c:	9201      	str	r2, [sp, #4]
 800043e:	e786      	b.n	800034e <__udivmoddi4+0x6e>
 8000440:	4642      	mov	r2, r8
 8000442:	2320      	movs	r3, #32
 8000444:	1a9b      	subs	r3, r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	4646      	mov	r6, r8
 800044a:	409a      	lsls	r2, r3
 800044c:	0023      	movs	r3, r4
 800044e:	40f3      	lsrs	r3, r6
 8000450:	4644      	mov	r4, r8
 8000452:	4313      	orrs	r3, r2
 8000454:	002a      	movs	r2, r5
 8000456:	40e2      	lsrs	r2, r4
 8000458:	001c      	movs	r4, r3
 800045a:	465b      	mov	r3, fp
 800045c:	0015      	movs	r5, r2
 800045e:	2b00      	cmp	r3, #0
 8000460:	dad4      	bge.n	800040c <__udivmoddi4+0x12c>
 8000462:	4642      	mov	r2, r8
 8000464:	002f      	movs	r7, r5
 8000466:	2320      	movs	r3, #32
 8000468:	0026      	movs	r6, r4
 800046a:	4097      	lsls	r7, r2
 800046c:	1a9b      	subs	r3, r3, r2
 800046e:	40de      	lsrs	r6, r3
 8000470:	003b      	movs	r3, r7
 8000472:	4333      	orrs	r3, r6
 8000474:	e7cd      	b.n	8000412 <__udivmoddi4+0x132>
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__clzdi2>:
 8000478:	b510      	push	{r4, lr}
 800047a:	2900      	cmp	r1, #0
 800047c:	d103      	bne.n	8000486 <__clzdi2+0xe>
 800047e:	f000 f807 	bl	8000490 <__clzsi2>
 8000482:	3020      	adds	r0, #32
 8000484:	e002      	b.n	800048c <__clzdi2+0x14>
 8000486:	0008      	movs	r0, r1
 8000488:	f000 f802 	bl	8000490 <__clzsi2>
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__clzsi2>:
 8000490:	211c      	movs	r1, #28
 8000492:	2301      	movs	r3, #1
 8000494:	041b      	lsls	r3, r3, #16
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0xe>
 800049a:	0c00      	lsrs	r0, r0, #16
 800049c:	3910      	subs	r1, #16
 800049e:	0a1b      	lsrs	r3, r3, #8
 80004a0:	4298      	cmp	r0, r3
 80004a2:	d301      	bcc.n	80004a8 <__clzsi2+0x18>
 80004a4:	0a00      	lsrs	r0, r0, #8
 80004a6:	3908      	subs	r1, #8
 80004a8:	091b      	lsrs	r3, r3, #4
 80004aa:	4298      	cmp	r0, r3
 80004ac:	d301      	bcc.n	80004b2 <__clzsi2+0x22>
 80004ae:	0900      	lsrs	r0, r0, #4
 80004b0:	3904      	subs	r1, #4
 80004b2:	a202      	add	r2, pc, #8	; (adr r2, 80004bc <__clzsi2+0x2c>)
 80004b4:	5c10      	ldrb	r0, [r2, r0]
 80004b6:	1840      	adds	r0, r0, r1
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	02020304 	.word	0x02020304
 80004c0:	01010101 	.word	0x01010101
	...

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 faee 	bl	8000ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f81c 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f93e 	bl	8000758 <MX_GPIO_Init>
  MX_DMA_Init();
 80004dc:	f000 f91e 	bl	800071c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80004e0:	f000 f8ec 	bl	80006bc <MX_USART1_UART_Init>
  MX_ADC_Init();
 80004e4:	f000 f886 	bl	80005f4 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
HAL_ADCEx_Calibration_GetValue(&hadc, ADC_SINGLE_ENDED);
 80004e8:	4b07      	ldr	r3, [pc, #28]	; (8000508 <main+0x3c>)
 80004ea:	2100      	movs	r1, #0
 80004ec:	0018      	movs	r0, r3
 80004ee:	f000 ff31 	bl	8001354 <HAL_ADCEx_Calibration_GetValue>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start_DMA(&hadc,  &adc_val, 1);
 80004f2:	4906      	ldr	r1, [pc, #24]	; (800050c <main+0x40>)
 80004f4:	4b04      	ldr	r3, [pc, #16]	; (8000508 <main+0x3c>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	0018      	movs	r0, r3
 80004fa:	f000 fce1 	bl	8000ec0 <HAL_ADC_Start_DMA>
	  HAL_Delay(1);
 80004fe:	2001      	movs	r0, #1
 8000500:	f000 fb46 	bl	8000b90 <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc,  &adc_val, 1);
 8000504:	e7f5      	b.n	80004f2 <main+0x26>
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	2000008c 	.word	0x2000008c
 800050c:	200001b8 	.word	0x200001b8

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b590      	push	{r4, r7, lr}
 8000512:	b09d      	sub	sp, #116	; 0x74
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	2438      	movs	r4, #56	; 0x38
 8000518:	193b      	adds	r3, r7, r4
 800051a:	0018      	movs	r0, r3
 800051c:	2338      	movs	r3, #56	; 0x38
 800051e:	001a      	movs	r2, r3
 8000520:	2100      	movs	r1, #0
 8000522:	f003 f877 	bl	8003614 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000526:	2324      	movs	r3, #36	; 0x24
 8000528:	18fb      	adds	r3, r7, r3
 800052a:	0018      	movs	r0, r3
 800052c:	2314      	movs	r3, #20
 800052e:	001a      	movs	r2, r3
 8000530:	2100      	movs	r1, #0
 8000532:	f003 f86f 	bl	8003614 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000536:	003b      	movs	r3, r7
 8000538:	0018      	movs	r0, r3
 800053a:	2324      	movs	r3, #36	; 0x24
 800053c:	001a      	movs	r2, r3
 800053e:	2100      	movs	r1, #0
 8000540:	f003 f868 	bl	8003614 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000544:	4b29      	ldr	r3, [pc, #164]	; (80005ec <SystemClock_Config+0xdc>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a29      	ldr	r2, [pc, #164]	; (80005f0 <SystemClock_Config+0xe0>)
 800054a:	401a      	ands	r2, r3
 800054c:	4b27      	ldr	r3, [pc, #156]	; (80005ec <SystemClock_Config+0xdc>)
 800054e:	2180      	movs	r1, #128	; 0x80
 8000550:	0109      	lsls	r1, r1, #4
 8000552:	430a      	orrs	r2, r1
 8000554:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000556:	0021      	movs	r1, r4
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2202      	movs	r2, #2
 800055c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2201      	movs	r2, #1
 8000562:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2210      	movs	r2, #16
 8000568:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2202      	movs	r2, #2
 800056e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000570:	187b      	adds	r3, r7, r1
 8000572:	2200      	movs	r2, #0
 8000574:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2200      	movs	r2, #0
 800057a:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2280      	movs	r2, #128	; 0x80
 8000580:	0412      	lsls	r2, r2, #16
 8000582:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000584:	187b      	adds	r3, r7, r1
 8000586:	0018      	movs	r0, r3
 8000588:	f001 fb02 	bl	8001b90 <HAL_RCC_OscConfig>
 800058c:	1e03      	subs	r3, r0, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000590:	f000 f93a 	bl	8000808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000594:	2124      	movs	r1, #36	; 0x24
 8000596:	187b      	adds	r3, r7, r1
 8000598:	220f      	movs	r2, #15
 800059a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2203      	movs	r2, #3
 80005a0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	2200      	movs	r2, #0
 80005ac:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	2200      	movs	r2, #0
 80005b2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	2100      	movs	r1, #0
 80005b8:	0018      	movs	r0, r3
 80005ba:	f001 fead 	bl	8002318 <HAL_RCC_ClockConfig>
 80005be:	1e03      	subs	r3, r0, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005c2:	f000 f921 	bl	8000808 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80005c6:	003b      	movs	r3, r7
 80005c8:	2201      	movs	r2, #1
 80005ca:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005cc:	003b      	movs	r3, r7
 80005ce:	2200      	movs	r2, #0
 80005d0:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005d2:	003b      	movs	r3, r7
 80005d4:	0018      	movs	r0, r3
 80005d6:	f002 f8c3 	bl	8002760 <HAL_RCCEx_PeriphCLKConfig>
 80005da:	1e03      	subs	r3, r0, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005de:	f000 f913 	bl	8000808 <Error_Handler>
  }
}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	46bd      	mov	sp, r7
 80005e6:	b01d      	add	sp, #116	; 0x74
 80005e8:	bd90      	pop	{r4, r7, pc}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	40007000 	.word	0x40007000
 80005f0:	ffffe7ff 	.word	0xffffe7ff

080005f4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005fa:	003b      	movs	r3, r7
 80005fc:	0018      	movs	r0, r3
 80005fe:	2308      	movs	r3, #8
 8000600:	001a      	movs	r2, r3
 8000602:	2100      	movs	r1, #0
 8000604:	f003 f806 	bl	8003614 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000608:	4b2a      	ldr	r3, [pc, #168]	; (80006b4 <MX_ADC_Init+0xc0>)
 800060a:	4a2b      	ldr	r2, [pc, #172]	; (80006b8 <MX_ADC_Init+0xc4>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800060e:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <MX_ADC_Init+0xc0>)
 8000610:	2200      	movs	r2, #0
 8000612:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000614:	4b27      	ldr	r3, [pc, #156]	; (80006b4 <MX_ADC_Init+0xc0>)
 8000616:	22c0      	movs	r2, #192	; 0xc0
 8000618:	0612      	lsls	r2, r2, #24
 800061a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_10B;
 800061c:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <MX_ADC_Init+0xc0>)
 800061e:	2208      	movs	r2, #8
 8000620:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000622:	4b24      	ldr	r3, [pc, #144]	; (80006b4 <MX_ADC_Init+0xc0>)
 8000624:	2200      	movs	r2, #0
 8000626:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000628:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <MX_ADC_Init+0xc0>)
 800062a:	2201      	movs	r2, #1
 800062c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800062e:	4b21      	ldr	r3, [pc, #132]	; (80006b4 <MX_ADC_Init+0xc0>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000634:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <MX_ADC_Init+0xc0>)
 8000636:	2220      	movs	r2, #32
 8000638:	2101      	movs	r1, #1
 800063a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800063c:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <MX_ADC_Init+0xc0>)
 800063e:	2221      	movs	r2, #33	; 0x21
 8000640:	2100      	movs	r1, #0
 8000642:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <MX_ADC_Init+0xc0>)
 8000646:	2200      	movs	r2, #0
 8000648:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800064a:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <MX_ADC_Init+0xc0>)
 800064c:	22c2      	movs	r2, #194	; 0xc2
 800064e:	32ff      	adds	r2, #255	; 0xff
 8000650:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000652:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <MX_ADC_Init+0xc0>)
 8000654:	222c      	movs	r2, #44	; 0x2c
 8000656:	2100      	movs	r1, #0
 8000658:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800065a:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <MX_ADC_Init+0xc0>)
 800065c:	2204      	movs	r2, #4
 800065e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000660:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <MX_ADC_Init+0xc0>)
 8000662:	2200      	movs	r2, #0
 8000664:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000666:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <MX_ADC_Init+0xc0>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_ADC_Init+0xc0>)
 800066e:	2200      	movs	r2, #0
 8000670:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <MX_ADC_Init+0xc0>)
 8000674:	2200      	movs	r2, #0
 8000676:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000678:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_ADC_Init+0xc0>)
 800067a:	0018      	movs	r0, r3
 800067c:	f000 faac 	bl	8000bd8 <HAL_ADC_Init>
 8000680:	1e03      	subs	r3, r0, #0
 8000682:	d001      	beq.n	8000688 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000684:	f000 f8c0 	bl	8000808 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000688:	003b      	movs	r3, r7
 800068a:	2201      	movs	r2, #1
 800068c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800068e:	003b      	movs	r3, r7
 8000690:	2280      	movs	r2, #128	; 0x80
 8000692:	0152      	lsls	r2, r2, #5
 8000694:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000696:	003a      	movs	r2, r7
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_ADC_Init+0xc0>)
 800069a:	0011      	movs	r1, r2
 800069c:	0018      	movs	r0, r3
 800069e:	f000 fcad 	bl	8000ffc <HAL_ADC_ConfigChannel>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d001      	beq.n	80006aa <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80006a6:	f000 f8af 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	b002      	add	sp, #8
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	2000008c 	.word	0x2000008c
 80006b8:	40012400 	.word	0x40012400

080006bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006c0:	4b14      	ldr	r3, [pc, #80]	; (8000714 <MX_USART1_UART_Init+0x58>)
 80006c2:	4a15      	ldr	r2, [pc, #84]	; (8000718 <MX_USART1_UART_Init+0x5c>)
 80006c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006c6:	4b13      	ldr	r3, [pc, #76]	; (8000714 <MX_USART1_UART_Init+0x58>)
 80006c8:	22e1      	movs	r2, #225	; 0xe1
 80006ca:	0252      	lsls	r2, r2, #9
 80006cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_USART1_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_USART1_UART_Init+0x58>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_USART1_UART_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_USART1_UART_Init+0x58>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <MX_USART1_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_USART1_UART_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <MX_USART1_UART_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_USART1_UART_Init+0x58>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006fe:	4b05      	ldr	r3, [pc, #20]	; (8000714 <MX_USART1_UART_Init+0x58>)
 8000700:	0018      	movs	r0, r3
 8000702:	f002 f9bb 	bl	8002a7c <HAL_UART_Init>
 8000706:	1e03      	subs	r3, r0, #0
 8000708:	d001      	beq.n	800070e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800070a:	f000 f87d 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000130 	.word	0x20000130
 8000718:	40013800 	.word	0x40013800

0800071c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_DMA_Init+0x38>)
 8000724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_DMA_Init+0x38>)
 8000728:	2101      	movs	r1, #1
 800072a:	430a      	orrs	r2, r1
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_DMA_Init+0x38>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	2201      	movs	r2, #1
 8000734:	4013      	ands	r3, r2
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800073a:	2200      	movs	r2, #0
 800073c:	2100      	movs	r1, #0
 800073e:	2009      	movs	r0, #9
 8000740:	f000 fec4 	bl	80014cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000744:	2009      	movs	r0, #9
 8000746:	f000 fed6 	bl	80014f6 <HAL_NVIC_EnableIRQ>

}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	46bd      	mov	sp, r7
 800074e:	b002      	add	sp, #8
 8000750:	bd80      	pop	{r7, pc}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	40021000 	.word	0x40021000

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_GPIO_Init+0x58>)
 8000760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_GPIO_Init+0x58>)
 8000764:	2104      	movs	r1, #4
 8000766:	430a      	orrs	r2, r1
 8000768:	62da      	str	r2, [r3, #44]	; 0x2c
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_GPIO_Init+0x58>)
 800076c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800076e:	2204      	movs	r2, #4
 8000770:	4013      	ands	r3, r2
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_GPIO_Init+0x58>)
 8000778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800077a:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <MX_GPIO_Init+0x58>)
 800077c:	2180      	movs	r1, #128	; 0x80
 800077e:	430a      	orrs	r2, r1
 8000780:	62da      	str	r2, [r3, #44]	; 0x2c
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_GPIO_Init+0x58>)
 8000784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000786:	2280      	movs	r2, #128	; 0x80
 8000788:	4013      	ands	r3, r2
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_GPIO_Init+0x58>)
 8000790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000792:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <MX_GPIO_Init+0x58>)
 8000794:	2101      	movs	r1, #1
 8000796:	430a      	orrs	r2, r1
 8000798:	62da      	str	r2, [r3, #44]	; 0x2c
 800079a:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <MX_GPIO_Init+0x58>)
 800079c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800079e:	2201      	movs	r2, #1
 80007a0:	4013      	ands	r3, r2
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	46bd      	mov	sp, r7
 80007aa:	b004      	add	sp, #16
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	40021000 	.word	0x40021000

080007b4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	adc_val = HAL_ADC_GetValue(hadc);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	0018      	movs	r0, r3
 80007c0:	f000 fc00 	bl	8000fc4 <HAL_ADC_GetValue>
 80007c4:	0002      	movs	r2, r0
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <HAL_ADC_ConvCpltCallback+0x44>)
 80007c8:	601a      	str	r2, [r3, #0]
	// Convert to string and print
	sprintf(msg, "%lu\r\n", adc_val);
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <HAL_ADC_ConvCpltCallback+0x44>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	490b      	ldr	r1, [pc, #44]	; (80007fc <HAL_ADC_ConvCpltCallback+0x48>)
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <HAL_ADC_ConvCpltCallback+0x4c>)
 80007d2:	0018      	movs	r0, r3
 80007d4:	f002 ff26 	bl	8003624 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen(msg), 1000);
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <HAL_ADC_ConvCpltCallback+0x4c>)
 80007da:	0018      	movs	r0, r3
 80007dc:	f7ff fc94 	bl	8000108 <strlen>
 80007e0:	0003      	movs	r3, r0
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	23fa      	movs	r3, #250	; 0xfa
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	4905      	ldr	r1, [pc, #20]	; (8000800 <HAL_ADC_ConvCpltCallback+0x4c>)
 80007ea:	4806      	ldr	r0, [pc, #24]	; (8000804 <HAL_ADC_ConvCpltCallback+0x50>)
 80007ec:	f002 f99a 	bl	8002b24 <HAL_UART_Transmit>
}
 80007f0:	46c0      	nop			; (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b002      	add	sp, #8
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200001b8 	.word	0x200001b8
 80007fc:	08003f10 	.word	0x08003f10
 8000800:	200001bc 	.word	0x200001bc
 8000804:	20000130 	.word	0x20000130

08000808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800080c:	b672      	cpsid	i
}
 800080e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000810:	e7fe      	b.n	8000810 <Error_Handler+0x8>
	...

08000814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000818:	4b07      	ldr	r3, [pc, #28]	; (8000838 <HAL_MspInit+0x24>)
 800081a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <HAL_MspInit+0x24>)
 800081e:	2101      	movs	r1, #1
 8000820:	430a      	orrs	r2, r1
 8000822:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000824:	4b04      	ldr	r3, [pc, #16]	; (8000838 <HAL_MspInit+0x24>)
 8000826:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000828:	4b03      	ldr	r3, [pc, #12]	; (8000838 <HAL_MspInit+0x24>)
 800082a:	2180      	movs	r1, #128	; 0x80
 800082c:	0549      	lsls	r1, r1, #21
 800082e:	430a      	orrs	r2, r1
 8000830:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40021000 	.word	0x40021000

0800083c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b089      	sub	sp, #36	; 0x24
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	240c      	movs	r4, #12
 8000846:	193b      	adds	r3, r7, r4
 8000848:	0018      	movs	r0, r3
 800084a:	2314      	movs	r3, #20
 800084c:	001a      	movs	r2, r3
 800084e:	2100      	movs	r1, #0
 8000850:	f002 fee0 	bl	8003614 <memset>
  if(hadc->Instance==ADC1)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a2a      	ldr	r2, [pc, #168]	; (8000904 <HAL_ADC_MspInit+0xc8>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d14d      	bne.n	80008fa <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800085e:	4b2a      	ldr	r3, [pc, #168]	; (8000908 <HAL_ADC_MspInit+0xcc>)
 8000860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000862:	4b29      	ldr	r3, [pc, #164]	; (8000908 <HAL_ADC_MspInit+0xcc>)
 8000864:	2180      	movs	r1, #128	; 0x80
 8000866:	0089      	lsls	r1, r1, #2
 8000868:	430a      	orrs	r2, r1
 800086a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086c:	4b26      	ldr	r3, [pc, #152]	; (8000908 <HAL_ADC_MspInit+0xcc>)
 800086e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000870:	4b25      	ldr	r3, [pc, #148]	; (8000908 <HAL_ADC_MspInit+0xcc>)
 8000872:	2101      	movs	r1, #1
 8000874:	430a      	orrs	r2, r1
 8000876:	62da      	str	r2, [r3, #44]	; 0x2c
 8000878:	4b23      	ldr	r3, [pc, #140]	; (8000908 <HAL_ADC_MspInit+0xcc>)
 800087a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800087c:	2201      	movs	r2, #1
 800087e:	4013      	ands	r3, r2
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = BSP_ADC_Pin;
 8000884:	193b      	adds	r3, r7, r4
 8000886:	2201      	movs	r2, #1
 8000888:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088a:	193b      	adds	r3, r7, r4
 800088c:	2203      	movs	r2, #3
 800088e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	193b      	adds	r3, r7, r4
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(BSP_ADC_GPIO_Port, &GPIO_InitStruct);
 8000896:	193a      	adds	r2, r7, r4
 8000898:	23a0      	movs	r3, #160	; 0xa0
 800089a:	05db      	lsls	r3, r3, #23
 800089c:	0011      	movs	r1, r2
 800089e:	0018      	movs	r0, r3
 80008a0:	f001 f800 	bl	80018a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80008a4:	4b19      	ldr	r3, [pc, #100]	; (800090c <HAL_ADC_MspInit+0xd0>)
 80008a6:	4a1a      	ldr	r2, [pc, #104]	; (8000910 <HAL_ADC_MspInit+0xd4>)
 80008a8:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 80008aa:	4b18      	ldr	r3, [pc, #96]	; (800090c <HAL_ADC_MspInit+0xd0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008b0:	4b16      	ldr	r3, [pc, #88]	; (800090c <HAL_ADC_MspInit+0xd0>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80008b6:	4b15      	ldr	r3, [pc, #84]	; (800090c <HAL_ADC_MspInit+0xd0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80008bc:	4b13      	ldr	r3, [pc, #76]	; (800090c <HAL_ADC_MspInit+0xd0>)
 80008be:	2280      	movs	r2, #128	; 0x80
 80008c0:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008c2:	4b12      	ldr	r3, [pc, #72]	; (800090c <HAL_ADC_MspInit+0xd0>)
 80008c4:	2280      	movs	r2, #128	; 0x80
 80008c6:	0052      	lsls	r2, r2, #1
 80008c8:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <HAL_ADC_MspInit+0xd0>)
 80008cc:	2280      	movs	r2, #128	; 0x80
 80008ce:	00d2      	lsls	r2, r2, #3
 80008d0:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_NORMAL;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <HAL_ADC_MspInit+0xd0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <HAL_ADC_MspInit+0xd0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <HAL_ADC_MspInit+0xd0>)
 80008e0:	0018      	movs	r0, r3
 80008e2:	f000 fe25 	bl	8001530 <HAL_DMA_Init>
 80008e6:	1e03      	subs	r3, r0, #0
 80008e8:	d001      	beq.n	80008ee <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 80008ea:	f7ff ff8d 	bl	8000808 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4a06      	ldr	r2, [pc, #24]	; (800090c <HAL_ADC_MspInit+0xd0>)
 80008f2:	64da      	str	r2, [r3, #76]	; 0x4c
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <HAL_ADC_MspInit+0xd0>)
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	b009      	add	sp, #36	; 0x24
 8000900:	bd90      	pop	{r4, r7, pc}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	40012400 	.word	0x40012400
 8000908:	40021000 	.word	0x40021000
 800090c:	200000e8 	.word	0x200000e8
 8000910:	40020008 	.word	0x40020008

08000914 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000914:	b590      	push	{r4, r7, lr}
 8000916:	b089      	sub	sp, #36	; 0x24
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	240c      	movs	r4, #12
 800091e:	193b      	adds	r3, r7, r4
 8000920:	0018      	movs	r0, r3
 8000922:	2314      	movs	r3, #20
 8000924:	001a      	movs	r2, r3
 8000926:	2100      	movs	r1, #0
 8000928:	f002 fe74 	bl	8003614 <memset>
  if(huart->Instance==USART1)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a18      	ldr	r2, [pc, #96]	; (8000994 <HAL_UART_MspInit+0x80>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d12a      	bne.n	800098c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000936:	4b18      	ldr	r3, [pc, #96]	; (8000998 <HAL_UART_MspInit+0x84>)
 8000938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <HAL_UART_MspInit+0x84>)
 800093c:	2180      	movs	r1, #128	; 0x80
 800093e:	01c9      	lsls	r1, r1, #7
 8000940:	430a      	orrs	r2, r1
 8000942:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <HAL_UART_MspInit+0x84>)
 8000946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <HAL_UART_MspInit+0x84>)
 800094a:	2101      	movs	r1, #1
 800094c:	430a      	orrs	r2, r1
 800094e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <HAL_UART_MspInit+0x84>)
 8000952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000954:	2201      	movs	r2, #1
 8000956:	4013      	ands	r3, r2
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BSP_UART_TX_Pin|BSP_UART_RX_Pin;
 800095c:	193b      	adds	r3, r7, r4
 800095e:	22c0      	movs	r2, #192	; 0xc0
 8000960:	00d2      	lsls	r2, r2, #3
 8000962:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	0021      	movs	r1, r4
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2202      	movs	r2, #2
 800096a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	187b      	adds	r3, r7, r1
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000972:	187b      	adds	r3, r7, r1
 8000974:	2203      	movs	r2, #3
 8000976:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000978:	187b      	adds	r3, r7, r1
 800097a:	2204      	movs	r2, #4
 800097c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097e:	187a      	adds	r2, r7, r1
 8000980:	23a0      	movs	r3, #160	; 0xa0
 8000982:	05db      	lsls	r3, r3, #23
 8000984:	0011      	movs	r1, r2
 8000986:	0018      	movs	r0, r3
 8000988:	f000 ff8c 	bl	80018a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	b009      	add	sp, #36	; 0x24
 8000992:	bd90      	pop	{r4, r7, pc}
 8000994:	40013800 	.word	0x40013800
 8000998:	40021000 	.word	0x40021000

0800099c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <NMI_Handler+0x4>

080009a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <HardFault_Handler+0x4>

080009a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009ac:	46c0      	nop			; (mov r8, r8)
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c0:	f000 f8ca 	bl	8000b58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c4:	46c0      	nop			; (mov r8, r8)
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80009d0:	4b03      	ldr	r3, [pc, #12]	; (80009e0 <DMA1_Channel1_IRQHandler+0x14>)
 80009d2:	0018      	movs	r0, r3
 80009d4:	f000 fe8a 	bl	80016ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009d8:	46c0      	nop			; (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	200000e8 	.word	0x200000e8

080009e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009ec:	4a14      	ldr	r2, [pc, #80]	; (8000a40 <_sbrk+0x5c>)
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <_sbrk+0x60>)
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009f8:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <_sbrk+0x64>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d102      	bne.n	8000a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <_sbrk+0x64>)
 8000a02:	4a12      	ldr	r2, [pc, #72]	; (8000a4c <_sbrk+0x68>)
 8000a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a06:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <_sbrk+0x64>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	18d3      	adds	r3, r2, r3
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d207      	bcs.n	8000a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a14:	f002 fdd4 	bl	80035c0 <__errno>
 8000a18:	0003      	movs	r3, r0
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	425b      	negs	r3, r3
 8000a22:	e009      	b.n	8000a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a24:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <_sbrk+0x64>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a2a:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <_sbrk+0x64>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	18d2      	adds	r2, r2, r3
 8000a32:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <_sbrk+0x64>)
 8000a34:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000a36:	68fb      	ldr	r3, [r7, #12]
}
 8000a38:	0018      	movs	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	b006      	add	sp, #24
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20002000 	.word	0x20002000
 8000a44:	00000400 	.word	0x00000400
 8000a48:	200001c8 	.word	0x200001c8
 8000a4c:	200001e0 	.word	0x200001e0

08000a50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000a5c:	480d      	ldr	r0, [pc, #52]	; (8000a94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a5e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a60:	f7ff fff6 	bl	8000a50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a64:	480c      	ldr	r0, [pc, #48]	; (8000a98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a66:	490d      	ldr	r1, [pc, #52]	; (8000a9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a68:	4a0d      	ldr	r2, [pc, #52]	; (8000aa0 <LoopForever+0xe>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a6c:	e002      	b.n	8000a74 <LoopCopyDataInit>

08000a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a72:	3304      	adds	r3, #4

08000a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a78:	d3f9      	bcc.n	8000a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a7c:	4c0a      	ldr	r4, [pc, #40]	; (8000aa8 <LoopForever+0x16>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a80:	e001      	b.n	8000a86 <LoopFillZerobss>

08000a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a84:	3204      	adds	r2, #4

08000a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a88:	d3fb      	bcc.n	8000a82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a8a:	f002 fd9f 	bl	80035cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a8e:	f7ff fd1d 	bl	80004cc <main>

08000a92 <LoopForever>:

LoopForever:
    b LoopForever
 8000a92:	e7fe      	b.n	8000a92 <LoopForever>
  ldr   r0, =_estack
 8000a94:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a9c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000aa0:	08003fc8 	.word	0x08003fc8
  ldr r2, =_sbss
 8000aa4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000aa8:	200001e0 	.word	0x200001e0

08000aac <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aac:	e7fe      	b.n	8000aac <ADC1_COMP_IRQHandler>
	...

08000ab0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ab6:	1dfb      	adds	r3, r7, #7
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000abc:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <HAL_Init+0x3c>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <HAL_Init+0x3c>)
 8000ac2:	2140      	movs	r1, #64	; 0x40
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f000 f811 	bl	8000af0 <HAL_InitTick>
 8000ace:	1e03      	subs	r3, r0, #0
 8000ad0:	d003      	beq.n	8000ada <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	701a      	strb	r2, [r3, #0]
 8000ad8:	e001      	b.n	8000ade <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ada:	f7ff fe9b 	bl	8000814 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ade:	1dfb      	adds	r3, r7, #7
 8000ae0:	781b      	ldrb	r3, [r3, #0]
}
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	b002      	add	sp, #8
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	40022000 	.word	0x40022000

08000af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af0:	b590      	push	{r4, r7, lr}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af8:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <HAL_InitTick+0x5c>)
 8000afa:	681c      	ldr	r4, [r3, #0]
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <HAL_InitTick+0x60>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	0019      	movs	r1, r3
 8000b02:	23fa      	movs	r3, #250	; 0xfa
 8000b04:	0098      	lsls	r0, r3, #2
 8000b06:	f7ff fb11 	bl	800012c <__udivsi3>
 8000b0a:	0003      	movs	r3, r0
 8000b0c:	0019      	movs	r1, r3
 8000b0e:	0020      	movs	r0, r4
 8000b10:	f7ff fb0c 	bl	800012c <__udivsi3>
 8000b14:	0003      	movs	r3, r0
 8000b16:	0018      	movs	r0, r3
 8000b18:	f000 fcfd 	bl	8001516 <HAL_SYSTICK_Config>
 8000b1c:	1e03      	subs	r3, r0, #0
 8000b1e:	d001      	beq.n	8000b24 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b20:	2301      	movs	r3, #1
 8000b22:	e00f      	b.n	8000b44 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2b03      	cmp	r3, #3
 8000b28:	d80b      	bhi.n	8000b42 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b2a:	6879      	ldr	r1, [r7, #4]
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	425b      	negs	r3, r3
 8000b30:	2200      	movs	r2, #0
 8000b32:	0018      	movs	r0, r3
 8000b34:	f000 fcca 	bl	80014cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_InitTick+0x64>)
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	e000      	b.n	8000b44 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
}
 8000b44:	0018      	movs	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	b003      	add	sp, #12
 8000b4a:	bd90      	pop	{r4, r7, pc}
 8000b4c:	20000000 	.word	0x20000000
 8000b50:	20000008 	.word	0x20000008
 8000b54:	20000004 	.word	0x20000004

08000b58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <HAL_IncTick+0x1c>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	001a      	movs	r2, r3
 8000b62:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <HAL_IncTick+0x20>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	18d2      	adds	r2, r2, r3
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <HAL_IncTick+0x20>)
 8000b6a:	601a      	str	r2, [r3, #0]
}
 8000b6c:	46c0      	nop			; (mov r8, r8)
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	20000008 	.word	0x20000008
 8000b78:	200001cc 	.word	0x200001cc

08000b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b80:	4b02      	ldr	r3, [pc, #8]	; (8000b8c <HAL_GetTick+0x10>)
 8000b82:	681b      	ldr	r3, [r3, #0]
}
 8000b84:	0018      	movs	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	200001cc 	.word	0x200001cc

08000b90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b98:	f7ff fff0 	bl	8000b7c <HAL_GetTick>
 8000b9c:	0003      	movs	r3, r0
 8000b9e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	d005      	beq.n	8000bb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000baa:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <HAL_Delay+0x44>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	001a      	movs	r2, r3
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	189b      	adds	r3, r3, r2
 8000bb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	f7ff ffe0 	bl	8000b7c <HAL_GetTick>
 8000bbc:	0002      	movs	r2, r0
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d8f7      	bhi.n	8000bb8 <HAL_Delay+0x28>
  {
  }
}
 8000bc8:	46c0      	nop			; (mov r8, r8)
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	b004      	add	sp, #16
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	20000008 	.word	0x20000008

08000bd8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d101      	bne.n	8000bea <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e159      	b.n	8000e9e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d10a      	bne.n	8000c08 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2250      	movs	r2, #80	; 0x50
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	0018      	movs	r0, r3
 8000c04:	f7ff fe1a 	bl	800083c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c0c:	2210      	movs	r2, #16
 8000c0e:	4013      	ands	r3, r2
 8000c10:	2b10      	cmp	r3, #16
 8000c12:	d005      	beq.n	8000c20 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	2204      	movs	r2, #4
 8000c1c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000c1e:	d00b      	beq.n	8000c38 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c24:	2210      	movs	r2, #16
 8000c26:	431a      	orrs	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2250      	movs	r2, #80	; 0x50
 8000c30:	2100      	movs	r1, #0
 8000c32:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	e132      	b.n	8000e9e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c3c:	4a9a      	ldr	r2, [pc, #616]	; (8000ea8 <HAL_ADC_Init+0x2d0>)
 8000c3e:	4013      	ands	r3, r2
 8000c40:	2202      	movs	r2, #2
 8000c42:	431a      	orrs	r2, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	2203      	movs	r2, #3
 8000c50:	4013      	ands	r3, r2
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d108      	bne.n	8000c68 <HAL_ADC_Init+0x90>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	4013      	ands	r3, r2
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d101      	bne.n	8000c68 <HAL_ADC_Init+0x90>
 8000c64:	2301      	movs	r3, #1
 8000c66:	e000      	b.n	8000c6a <HAL_ADC_Init+0x92>
 8000c68:	2300      	movs	r3, #0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d149      	bne.n	8000d02 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	685a      	ldr	r2, [r3, #4]
 8000c72:	23c0      	movs	r3, #192	; 0xc0
 8000c74:	061b      	lsls	r3, r3, #24
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d00b      	beq.n	8000c92 <HAL_ADC_Init+0xba>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	685a      	ldr	r2, [r3, #4]
 8000c7e:	2380      	movs	r3, #128	; 0x80
 8000c80:	05db      	lsls	r3, r3, #23
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d005      	beq.n	8000c92 <HAL_ADC_Init+0xba>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	685a      	ldr	r2, [r3, #4]
 8000c8a:	2380      	movs	r3, #128	; 0x80
 8000c8c:	061b      	lsls	r3, r3, #24
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d111      	bne.n	8000cb6 <HAL_ADC_Init+0xde>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	691a      	ldr	r2, [r3, #16]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	0092      	lsls	r2, r2, #2
 8000c9e:	0892      	lsrs	r2, r2, #2
 8000ca0:	611a      	str	r2, [r3, #16]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	6919      	ldr	r1, [r3, #16]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	685a      	ldr	r2, [r3, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	611a      	str	r2, [r3, #16]
 8000cb4:	e014      	b.n	8000ce0 <HAL_ADC_Init+0x108>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	691a      	ldr	r2, [r3, #16]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	0092      	lsls	r2, r2, #2
 8000cc2:	0892      	lsrs	r2, r2, #2
 8000cc4:	611a      	str	r2, [r3, #16]
 8000cc6:	4b79      	ldr	r3, [pc, #484]	; (8000eac <HAL_ADC_Init+0x2d4>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	4b78      	ldr	r3, [pc, #480]	; (8000eac <HAL_ADC_Init+0x2d4>)
 8000ccc:	4978      	ldr	r1, [pc, #480]	; (8000eb0 <HAL_ADC_Init+0x2d8>)
 8000cce:	400a      	ands	r2, r1
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	4b76      	ldr	r3, [pc, #472]	; (8000eac <HAL_ADC_Init+0x2d4>)
 8000cd4:	6819      	ldr	r1, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	685a      	ldr	r2, [r3, #4]
 8000cda:	4b74      	ldr	r3, [pc, #464]	; (8000eac <HAL_ADC_Init+0x2d4>)
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	68da      	ldr	r2, [r3, #12]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2118      	movs	r1, #24
 8000cec:	438a      	bics	r2, r1
 8000cee:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	68d9      	ldr	r1, [r3, #12]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	689a      	ldr	r2, [r3, #8]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000d02:	4b6a      	ldr	r3, [pc, #424]	; (8000eac <HAL_ADC_Init+0x2d4>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	4b69      	ldr	r3, [pc, #420]	; (8000eac <HAL_ADC_Init+0x2d4>)
 8000d08:	496a      	ldr	r1, [pc, #424]	; (8000eb4 <HAL_ADC_Init+0x2dc>)
 8000d0a:	400a      	ands	r2, r1
 8000d0c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8000d0e:	4b67      	ldr	r3, [pc, #412]	; (8000eac <HAL_ADC_Init+0x2d4>)
 8000d10:	6819      	ldr	r1, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d16:	065a      	lsls	r2, r3, #25
 8000d18:	4b64      	ldr	r3, [pc, #400]	; (8000eac <HAL_ADC_Init+0x2d4>)
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	689a      	ldr	r2, [r3, #8]
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	055b      	lsls	r3, r3, #21
 8000d28:	4013      	ands	r3, r2
 8000d2a:	d108      	bne.n	8000d3e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	689a      	ldr	r2, [r3, #8]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2180      	movs	r1, #128	; 0x80
 8000d38:	0549      	lsls	r1, r1, #21
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	68da      	ldr	r2, [r3, #12]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	495b      	ldr	r1, [pc, #364]	; (8000eb8 <HAL_ADC_Init+0x2e0>)
 8000d4a:	400a      	ands	r2, r1
 8000d4c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	68d9      	ldr	r1, [r3, #12]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	691b      	ldr	r3, [r3, #16]
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d101      	bne.n	8000d64 <HAL_ADC_Init+0x18c>
 8000d60:	2304      	movs	r3, #4
 8000d62:	e000      	b.n	8000d66 <HAL_ADC_Init+0x18e>
 8000d64:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000d66:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2020      	movs	r0, #32
 8000d6c:	5c1b      	ldrb	r3, [r3, r0]
 8000d6e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000d70:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	202c      	movs	r0, #44	; 0x2c
 8000d76:	5c1b      	ldrb	r3, [r3, r0]
 8000d78:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d7a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000d80:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000d88:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000d90:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	430a      	orrs	r2, r1
 8000d98:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d9e:	23c2      	movs	r3, #194	; 0xc2
 8000da0:	33ff      	adds	r3, #255	; 0xff
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d00b      	beq.n	8000dbe <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	68d9      	ldr	r1, [r3, #12]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000db4:	431a      	orrs	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2221      	movs	r2, #33	; 0x21
 8000dc2:	5c9b      	ldrb	r3, [r3, r2]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d11a      	bne.n	8000dfe <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2220      	movs	r2, #32
 8000dcc:	5c9b      	ldrb	r3, [r3, r2]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d109      	bne.n	8000de6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	68da      	ldr	r2, [r3, #12]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2180      	movs	r1, #128	; 0x80
 8000dde:	0249      	lsls	r1, r1, #9
 8000de0:	430a      	orrs	r2, r1
 8000de2:	60da      	str	r2, [r3, #12]
 8000de4:	e00b      	b.n	8000dfe <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dea:	2220      	movs	r2, #32
 8000dec:	431a      	orrs	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df6:	2201      	movs	r2, #1
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d11f      	bne.n	8000e46 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	691a      	ldr	r2, [r3, #16]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	492a      	ldr	r1, [pc, #168]	; (8000ebc <HAL_ADC_Init+0x2e4>)
 8000e12:	400a      	ands	r2, r1
 8000e14:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	6919      	ldr	r1, [r3, #16]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000e24:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8000e2a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	430a      	orrs	r2, r1
 8000e32:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	691a      	ldr	r2, [r3, #16]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2101      	movs	r1, #1
 8000e40:	430a      	orrs	r2, r1
 8000e42:	611a      	str	r2, [r3, #16]
 8000e44:	e00e      	b.n	8000e64 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	691b      	ldr	r3, [r3, #16]
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	4013      	ands	r3, r2
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d107      	bne.n	8000e64 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	691a      	ldr	r2, [r3, #16]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2101      	movs	r1, #1
 8000e60:	438a      	bics	r2, r1
 8000e62:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	695a      	ldr	r2, [r3, #20]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2107      	movs	r1, #7
 8000e70:	438a      	bics	r2, r1
 8000e72:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	6959      	ldr	r1, [r3, #20]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	430a      	orrs	r2, r1
 8000e84:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e90:	2203      	movs	r2, #3
 8000e92:	4393      	bics	r3, r2
 8000e94:	2201      	movs	r2, #1
 8000e96:	431a      	orrs	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b002      	add	sp, #8
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	fffffefd 	.word	0xfffffefd
 8000eac:	40012708 	.word	0x40012708
 8000eb0:	ffc3ffff 	.word	0xffc3ffff
 8000eb4:	fdffffff 	.word	0xfdffffff
 8000eb8:	fffe0219 	.word	0xfffe0219
 8000ebc:	fffffc03 	.word	0xfffffc03

08000ec0 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000ec0:	b590      	push	{r4, r7, lr}
 8000ec2:	b087      	sub	sp, #28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ecc:	2317      	movs	r3, #23
 8000ece:	18fb      	adds	r3, r7, r3
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	2204      	movs	r2, #4
 8000edc:	4013      	ands	r3, r2
 8000ede:	d15e      	bne.n	8000f9e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2250      	movs	r2, #80	; 0x50
 8000ee4:	5c9b      	ldrb	r3, [r3, r2]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d101      	bne.n	8000eee <HAL_ADC_Start_DMA+0x2e>
 8000eea:	2302      	movs	r3, #2
 8000eec:	e05e      	b.n	8000fac <HAL_ADC_Start_DMA+0xec>
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2250      	movs	r2, #80	; 0x50
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	5499      	strb	r1, [r3, r2]

    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	68da      	ldr	r2, [r3, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2101      	movs	r1, #1
 8000f02:	430a      	orrs	r2, r1
 8000f04:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d007      	beq.n	8000f1e <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000f0e:	2317      	movs	r3, #23
 8000f10:	18fc      	adds	r4, r7, r3
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	0018      	movs	r0, r3
 8000f16:	f000 f911 	bl	800113c <ADC_Enable>
 8000f1a:	0003      	movs	r3, r0
 8000f1c:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000f1e:	2317      	movs	r3, #23
 8000f20:	18fb      	adds	r3, r7, r3
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d13e      	bne.n	8000fa6 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f2c:	4a21      	ldr	r2, [pc, #132]	; (8000fb4 <HAL_ADC_Start_DMA+0xf4>)
 8000f2e:	4013      	ands	r3, r2
 8000f30:	2280      	movs	r2, #128	; 0x80
 8000f32:	0052      	lsls	r2, r2, #1
 8000f34:	431a      	orrs	r2, r3
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2250      	movs	r2, #80	; 0x50
 8000f44:	2100      	movs	r1, #0
 8000f46:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4c:	4a1a      	ldr	r2, [pc, #104]	; (8000fb8 <HAL_ADC_Start_DMA+0xf8>)
 8000f4e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f54:	4a19      	ldr	r2, [pc, #100]	; (8000fbc <HAL_ADC_Start_DMA+0xfc>)
 8000f56:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5c:	4a18      	ldr	r2, [pc, #96]	; (8000fc0 <HAL_ADC_Start_DMA+0x100>)
 8000f5e:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	221c      	movs	r2, #28
 8000f66:	601a      	str	r2, [r3, #0]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	685a      	ldr	r2, [r3, #4]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2110      	movs	r1, #16
 8000f74:	430a      	orrs	r2, r1
 8000f76:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	3340      	adds	r3, #64	; 0x40
 8000f82:	0019      	movs	r1, r3
 8000f84:	68ba      	ldr	r2, [r7, #8]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f000 fb4a 	bl	8001620 <HAL_DMA_Start_IT>

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	689a      	ldr	r2, [r3, #8]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2104      	movs	r1, #4
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	e003      	b.n	8000fa6 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f9e:	2317      	movs	r3, #23
 8000fa0:	18fb      	adds	r3, r7, r3
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8000fa6:	2317      	movs	r3, #23
 8000fa8:	18fb      	adds	r3, r7, r3
 8000faa:	781b      	ldrb	r3, [r3, #0]
}
 8000fac:	0018      	movs	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b007      	add	sp, #28
 8000fb2:	bd90      	pop	{r4, r7, pc}
 8000fb4:	fffff0fe 	.word	0xfffff0fe
 8000fb8:	0800120d 	.word	0x0800120d
 8000fbc:	080012c1 	.word	0x080012c1
 8000fc0:	080012df 	.word	0x080012df

08000fc4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	b002      	add	sp, #8
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b002      	add	sp, #8
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	b002      	add	sp, #8
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2250      	movs	r2, #80	; 0x50
 800100a:	5c9b      	ldrb	r3, [r3, r2]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d101      	bne.n	8001014 <HAL_ADC_ConfigChannel+0x18>
 8001010:	2302      	movs	r3, #2
 8001012:	e085      	b.n	8001120 <HAL_ADC_ConfigChannel+0x124>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2250      	movs	r2, #80	; 0x50
 8001018:	2101      	movs	r1, #1
 800101a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	2204      	movs	r2, #4
 8001024:	4013      	ands	r3, r2
 8001026:	d00b      	beq.n	8001040 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800102c:	2220      	movs	r2, #32
 800102e:	431a      	orrs	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2250      	movs	r2, #80	; 0x50
 8001038:	2100      	movs	r1, #0
 800103a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e06f      	b.n	8001120 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	4a38      	ldr	r2, [pc, #224]	; (8001128 <HAL_ADC_ConfigChannel+0x12c>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d035      	beq.n	80010b6 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	035b      	lsls	r3, r3, #13
 8001056:	0b5a      	lsrs	r2, r3, #13
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	430a      	orrs	r2, r1
 800105e:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	2380      	movs	r3, #128	; 0x80
 8001066:	02db      	lsls	r3, r3, #11
 8001068:	4013      	ands	r3, r2
 800106a:	d009      	beq.n	8001080 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800106c:	4b2f      	ldr	r3, [pc, #188]	; (800112c <HAL_ADC_ConfigChannel+0x130>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b2e      	ldr	r3, [pc, #184]	; (800112c <HAL_ADC_ConfigChannel+0x130>)
 8001072:	2180      	movs	r1, #128	; 0x80
 8001074:	0409      	lsls	r1, r1, #16
 8001076:	430a      	orrs	r2, r1
 8001078:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800107a:	200a      	movs	r0, #10
 800107c:	f000 f94a 	bl	8001314 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	2380      	movs	r3, #128	; 0x80
 8001086:	029b      	lsls	r3, r3, #10
 8001088:	4013      	ands	r3, r2
 800108a:	d006      	beq.n	800109a <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800108c:	4b27      	ldr	r3, [pc, #156]	; (800112c <HAL_ADC_ConfigChannel+0x130>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b26      	ldr	r3, [pc, #152]	; (800112c <HAL_ADC_ConfigChannel+0x130>)
 8001092:	2180      	movs	r1, #128	; 0x80
 8001094:	03c9      	lsls	r1, r1, #15
 8001096:	430a      	orrs	r2, r1
 8001098:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	2380      	movs	r3, #128	; 0x80
 80010a0:	025b      	lsls	r3, r3, #9
 80010a2:	4013      	ands	r3, r2
 80010a4:	d037      	beq.n	8001116 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 80010a6:	4b21      	ldr	r3, [pc, #132]	; (800112c <HAL_ADC_ConfigChannel+0x130>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	4b20      	ldr	r3, [pc, #128]	; (800112c <HAL_ADC_ConfigChannel+0x130>)
 80010ac:	2180      	movs	r1, #128	; 0x80
 80010ae:	0449      	lsls	r1, r1, #17
 80010b0:	430a      	orrs	r2, r1
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	e02f      	b.n	8001116 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	035b      	lsls	r3, r3, #13
 80010c2:	0b5b      	lsrs	r3, r3, #13
 80010c4:	43d9      	mvns	r1, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	400a      	ands	r2, r1
 80010cc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	2380      	movs	r3, #128	; 0x80
 80010d4:	02db      	lsls	r3, r3, #11
 80010d6:	4013      	ands	r3, r2
 80010d8:	d005      	beq.n	80010e6 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80010da:	4b14      	ldr	r3, [pc, #80]	; (800112c <HAL_ADC_ConfigChannel+0x130>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	4b13      	ldr	r3, [pc, #76]	; (800112c <HAL_ADC_ConfigChannel+0x130>)
 80010e0:	4913      	ldr	r1, [pc, #76]	; (8001130 <HAL_ADC_ConfigChannel+0x134>)
 80010e2:	400a      	ands	r2, r1
 80010e4:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	029b      	lsls	r3, r3, #10
 80010ee:	4013      	ands	r3, r2
 80010f0:	d005      	beq.n	80010fe <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <HAL_ADC_ConfigChannel+0x130>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	4b0d      	ldr	r3, [pc, #52]	; (800112c <HAL_ADC_ConfigChannel+0x130>)
 80010f8:	490e      	ldr	r1, [pc, #56]	; (8001134 <HAL_ADC_ConfigChannel+0x138>)
 80010fa:	400a      	ands	r2, r1
 80010fc:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	2380      	movs	r3, #128	; 0x80
 8001104:	025b      	lsls	r3, r3, #9
 8001106:	4013      	ands	r3, r2
 8001108:	d005      	beq.n	8001116 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 800110a:	4b08      	ldr	r3, [pc, #32]	; (800112c <HAL_ADC_ConfigChannel+0x130>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4b07      	ldr	r3, [pc, #28]	; (800112c <HAL_ADC_ConfigChannel+0x130>)
 8001110:	4909      	ldr	r1, [pc, #36]	; (8001138 <HAL_ADC_ConfigChannel+0x13c>)
 8001112:	400a      	ands	r2, r1
 8001114:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2250      	movs	r2, #80	; 0x50
 800111a:	2100      	movs	r1, #0
 800111c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800111e:	2300      	movs	r3, #0
}
 8001120:	0018      	movs	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	b002      	add	sp, #8
 8001126:	bd80      	pop	{r7, pc}
 8001128:	00001001 	.word	0x00001001
 800112c:	40012708 	.word	0x40012708
 8001130:	ff7fffff 	.word	0xff7fffff
 8001134:	ffbfffff 	.word	0xffbfffff
 8001138:	feffffff 	.word	0xfeffffff

0800113c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	2203      	movs	r2, #3
 8001150:	4013      	ands	r3, r2
 8001152:	2b01      	cmp	r3, #1
 8001154:	d108      	bne.n	8001168 <ADC_Enable+0x2c>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2201      	movs	r2, #1
 800115e:	4013      	ands	r3, r2
 8001160:	2b01      	cmp	r3, #1
 8001162:	d101      	bne.n	8001168 <ADC_Enable+0x2c>
 8001164:	2301      	movs	r3, #1
 8001166:	e000      	b.n	800116a <ADC_Enable+0x2e>
 8001168:	2300      	movs	r3, #0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d146      	bne.n	80011fc <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	4a24      	ldr	r2, [pc, #144]	; (8001208 <ADC_Enable+0xcc>)
 8001176:	4013      	ands	r3, r2
 8001178:	d00d      	beq.n	8001196 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800117e:	2210      	movs	r2, #16
 8001180:	431a      	orrs	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118a:	2201      	movs	r2, #1
 800118c:	431a      	orrs	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e033      	b.n	80011fe <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2101      	movs	r1, #1
 80011a2:	430a      	orrs	r2, r1
 80011a4:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80011a6:	2001      	movs	r0, #1
 80011a8:	f000 f8b4 	bl	8001314 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80011ac:	f7ff fce6 	bl	8000b7c <HAL_GetTick>
 80011b0:	0003      	movs	r3, r0
 80011b2:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80011b4:	e01b      	b.n	80011ee <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80011b6:	f7ff fce1 	bl	8000b7c <HAL_GetTick>
 80011ba:	0002      	movs	r2, r0
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b0a      	cmp	r3, #10
 80011c2:	d914      	bls.n	80011ee <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2201      	movs	r2, #1
 80011cc:	4013      	ands	r3, r2
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d00d      	beq.n	80011ee <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d6:	2210      	movs	r2, #16
 80011d8:	431a      	orrs	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e2:	2201      	movs	r2, #1
 80011e4:	431a      	orrs	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e007      	b.n	80011fe <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2201      	movs	r2, #1
 80011f6:	4013      	ands	r3, r2
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d1dc      	bne.n	80011b6 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	0018      	movs	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	b004      	add	sp, #16
 8001204:	bd80      	pop	{r7, pc}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	80000017 	.word	0x80000017

0800120c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001218:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800121e:	2250      	movs	r2, #80	; 0x50
 8001220:	4013      	ands	r3, r2
 8001222:	d141      	bne.n	80012a8 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001228:	2280      	movs	r2, #128	; 0x80
 800122a:	0092      	lsls	r2, r2, #2
 800122c:	431a      	orrs	r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	68da      	ldr	r2, [r3, #12]
 8001238:	23c0      	movs	r3, #192	; 0xc0
 800123a:	011b      	lsls	r3, r3, #4
 800123c:	4013      	ands	r3, r2
 800123e:	d12e      	bne.n	800129e <ADC_DMAConvCplt+0x92>
        (hadc->Init.ContinuousConvMode == DISABLE))
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2220      	movs	r2, #32
 8001244:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001246:	2b00      	cmp	r3, #0
 8001248:	d129      	bne.n	800129e <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2208      	movs	r2, #8
 8001252:	4013      	ands	r3, r2
 8001254:	2b08      	cmp	r3, #8
 8001256:	d122      	bne.n	800129e <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	2204      	movs	r2, #4
 8001260:	4013      	ands	r3, r2
 8001262:	d110      	bne.n	8001286 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	210c      	movs	r1, #12
 8001270:	438a      	bics	r2, r1
 8001272:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001278:	4a10      	ldr	r2, [pc, #64]	; (80012bc <ADC_DMAConvCplt+0xb0>)
 800127a:	4013      	ands	r3, r2
 800127c:	2201      	movs	r2, #1
 800127e:	431a      	orrs	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	655a      	str	r2, [r3, #84]	; 0x54
 8001284:	e00b      	b.n	800129e <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800128a:	2220      	movs	r2, #32
 800128c:	431a      	orrs	r2, r3
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001296:	2201      	movs	r2, #1
 8001298:	431a      	orrs	r2, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	0018      	movs	r0, r3
 80012a2:	f7ff fa87 	bl	80007b4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80012a6:	e005      	b.n	80012b4 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	0010      	movs	r0, r2
 80012b2:	4798      	blx	r3
}
 80012b4:	46c0      	nop			; (mov r8, r8)
 80012b6:	46bd      	mov	sp, r7
 80012b8:	b004      	add	sp, #16
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	fffffefe 	.word	0xfffffefe

080012c0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012cc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	0018      	movs	r0, r3
 80012d2:	f7ff fe82 	bl	8000fda <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	46bd      	mov	sp, r7
 80012da:	b004      	add	sp, #16
 80012dc:	bd80      	pop	{r7, pc}

080012de <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b084      	sub	sp, #16
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ea:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f0:	2240      	movs	r2, #64	; 0x40
 80012f2:	431a      	orrs	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fc:	2204      	movs	r2, #4
 80012fe:	431a      	orrs	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	0018      	movs	r0, r3
 8001308:	f7ff fe6f 	bl	8000fea <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800130c:	46c0      	nop			; (mov r8, r8)
 800130e:	46bd      	mov	sp, r7
 8001310:	b004      	add	sp, #16
 8001312:	bd80      	pop	{r7, pc}

08001314 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800131c:	4b0b      	ldr	r3, [pc, #44]	; (800134c <ADC_DelayMicroSecond+0x38>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	490b      	ldr	r1, [pc, #44]	; (8001350 <ADC_DelayMicroSecond+0x3c>)
 8001322:	0018      	movs	r0, r3
 8001324:	f7fe ff02 	bl	800012c <__udivsi3>
 8001328:	0003      	movs	r3, r0
 800132a:	001a      	movs	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4353      	muls	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8001332:	e002      	b.n	800133a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	3b01      	subs	r3, #1
 8001338:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1f9      	bne.n	8001334 <ADC_DelayMicroSecond+0x20>
  }
}
 8001340:	46c0      	nop			; (mov r8, r8)
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	46bd      	mov	sp, r7
 8001346:	b004      	add	sp, #16
 8001348:	bd80      	pop	{r7, pc}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	20000000 	.word	0x20000000
 8001350:	000f4240 	.word	0x000f4240

08001354 <HAL_ADCEx_Calibration_GetValue>:
  * @param  SingleDiff This parameter can be only:
  *           @arg ADC_SINGLE_ENDED: Channel in mode input single ended.
  * @retval Calibration value.
  */
uint32_t HAL_ADCEx_Calibration_GetValue(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Return the ADC calibration value */
  return ((hadc->Instance->CALFACT) & 0x0000007FU);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	22b4      	movs	r2, #180	; 0xb4
 8001364:	589b      	ldr	r3, [r3, r2]
 8001366:	227f      	movs	r2, #127	; 0x7f
 8001368:	4013      	ands	r3, r2
}
 800136a:	0018      	movs	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	b002      	add	sp, #8
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	0002      	movs	r2, r0
 800137c:	1dfb      	adds	r3, r7, #7
 800137e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001380:	1dfb      	adds	r3, r7, #7
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b7f      	cmp	r3, #127	; 0x7f
 8001386:	d809      	bhi.n	800139c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001388:	1dfb      	adds	r3, r7, #7
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	001a      	movs	r2, r3
 800138e:	231f      	movs	r3, #31
 8001390:	401a      	ands	r2, r3
 8001392:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <__NVIC_EnableIRQ+0x30>)
 8001394:	2101      	movs	r1, #1
 8001396:	4091      	lsls	r1, r2
 8001398:	000a      	movs	r2, r1
 800139a:	601a      	str	r2, [r3, #0]
  }
}
 800139c:	46c0      	nop			; (mov r8, r8)
 800139e:	46bd      	mov	sp, r7
 80013a0:	b002      	add	sp, #8
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	e000e100 	.word	0xe000e100

080013a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	0002      	movs	r2, r0
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	1dfb      	adds	r3, r7, #7
 80013b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013b6:	1dfb      	adds	r3, r7, #7
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b7f      	cmp	r3, #127	; 0x7f
 80013bc:	d828      	bhi.n	8001410 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013be:	4a2f      	ldr	r2, [pc, #188]	; (800147c <__NVIC_SetPriority+0xd4>)
 80013c0:	1dfb      	adds	r3, r7, #7
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	b25b      	sxtb	r3, r3
 80013c6:	089b      	lsrs	r3, r3, #2
 80013c8:	33c0      	adds	r3, #192	; 0xc0
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	589b      	ldr	r3, [r3, r2]
 80013ce:	1dfa      	adds	r2, r7, #7
 80013d0:	7812      	ldrb	r2, [r2, #0]
 80013d2:	0011      	movs	r1, r2
 80013d4:	2203      	movs	r2, #3
 80013d6:	400a      	ands	r2, r1
 80013d8:	00d2      	lsls	r2, r2, #3
 80013da:	21ff      	movs	r1, #255	; 0xff
 80013dc:	4091      	lsls	r1, r2
 80013de:	000a      	movs	r2, r1
 80013e0:	43d2      	mvns	r2, r2
 80013e2:	401a      	ands	r2, r3
 80013e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	019b      	lsls	r3, r3, #6
 80013ea:	22ff      	movs	r2, #255	; 0xff
 80013ec:	401a      	ands	r2, r3
 80013ee:	1dfb      	adds	r3, r7, #7
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	0018      	movs	r0, r3
 80013f4:	2303      	movs	r3, #3
 80013f6:	4003      	ands	r3, r0
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013fc:	481f      	ldr	r0, [pc, #124]	; (800147c <__NVIC_SetPriority+0xd4>)
 80013fe:	1dfb      	adds	r3, r7, #7
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	b25b      	sxtb	r3, r3
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	430a      	orrs	r2, r1
 8001408:	33c0      	adds	r3, #192	; 0xc0
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800140e:	e031      	b.n	8001474 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001410:	4a1b      	ldr	r2, [pc, #108]	; (8001480 <__NVIC_SetPriority+0xd8>)
 8001412:	1dfb      	adds	r3, r7, #7
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	0019      	movs	r1, r3
 8001418:	230f      	movs	r3, #15
 800141a:	400b      	ands	r3, r1
 800141c:	3b08      	subs	r3, #8
 800141e:	089b      	lsrs	r3, r3, #2
 8001420:	3306      	adds	r3, #6
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	18d3      	adds	r3, r2, r3
 8001426:	3304      	adds	r3, #4
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	1dfa      	adds	r2, r7, #7
 800142c:	7812      	ldrb	r2, [r2, #0]
 800142e:	0011      	movs	r1, r2
 8001430:	2203      	movs	r2, #3
 8001432:	400a      	ands	r2, r1
 8001434:	00d2      	lsls	r2, r2, #3
 8001436:	21ff      	movs	r1, #255	; 0xff
 8001438:	4091      	lsls	r1, r2
 800143a:	000a      	movs	r2, r1
 800143c:	43d2      	mvns	r2, r2
 800143e:	401a      	ands	r2, r3
 8001440:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	019b      	lsls	r3, r3, #6
 8001446:	22ff      	movs	r2, #255	; 0xff
 8001448:	401a      	ands	r2, r3
 800144a:	1dfb      	adds	r3, r7, #7
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	0018      	movs	r0, r3
 8001450:	2303      	movs	r3, #3
 8001452:	4003      	ands	r3, r0
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001458:	4809      	ldr	r0, [pc, #36]	; (8001480 <__NVIC_SetPriority+0xd8>)
 800145a:	1dfb      	adds	r3, r7, #7
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	001c      	movs	r4, r3
 8001460:	230f      	movs	r3, #15
 8001462:	4023      	ands	r3, r4
 8001464:	3b08      	subs	r3, #8
 8001466:	089b      	lsrs	r3, r3, #2
 8001468:	430a      	orrs	r2, r1
 800146a:	3306      	adds	r3, #6
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	18c3      	adds	r3, r0, r3
 8001470:	3304      	adds	r3, #4
 8001472:	601a      	str	r2, [r3, #0]
}
 8001474:	46c0      	nop			; (mov r8, r8)
 8001476:	46bd      	mov	sp, r7
 8001478:	b003      	add	sp, #12
 800147a:	bd90      	pop	{r4, r7, pc}
 800147c:	e000e100 	.word	0xe000e100
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	1e5a      	subs	r2, r3, #1
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	045b      	lsls	r3, r3, #17
 8001494:	429a      	cmp	r2, r3
 8001496:	d301      	bcc.n	800149c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001498:	2301      	movs	r3, #1
 800149a:	e010      	b.n	80014be <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <SysTick_Config+0x44>)
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	3a01      	subs	r2, #1
 80014a2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014a4:	2301      	movs	r3, #1
 80014a6:	425b      	negs	r3, r3
 80014a8:	2103      	movs	r1, #3
 80014aa:	0018      	movs	r0, r3
 80014ac:	f7ff ff7c 	bl	80013a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <SysTick_Config+0x44>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b6:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <SysTick_Config+0x44>)
 80014b8:	2207      	movs	r2, #7
 80014ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014bc:	2300      	movs	r3, #0
}
 80014be:	0018      	movs	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	b002      	add	sp, #8
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	e000e010 	.word	0xe000e010

080014cc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
 80014d6:	210f      	movs	r1, #15
 80014d8:	187b      	adds	r3, r7, r1
 80014da:	1c02      	adds	r2, r0, #0
 80014dc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	187b      	adds	r3, r7, r1
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	b25b      	sxtb	r3, r3
 80014e6:	0011      	movs	r1, r2
 80014e8:	0018      	movs	r0, r3
 80014ea:	f7ff ff5d 	bl	80013a8 <__NVIC_SetPriority>
}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b004      	add	sp, #16
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	0002      	movs	r2, r0
 80014fe:	1dfb      	adds	r3, r7, #7
 8001500:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001502:	1dfb      	adds	r3, r7, #7
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	b25b      	sxtb	r3, r3
 8001508:	0018      	movs	r0, r3
 800150a:	f7ff ff33 	bl	8001374 <__NVIC_EnableIRQ>
}
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	46bd      	mov	sp, r7
 8001512:	b002      	add	sp, #8
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	0018      	movs	r0, r3
 8001522:	f7ff ffaf 	bl	8001484 <SysTick_Config>
 8001526:	0003      	movs	r3, r0
}
 8001528:	0018      	movs	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	b002      	add	sp, #8
 800152e:	bd80      	pop	{r7, pc}

08001530 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e061      	b.n	8001606 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a32      	ldr	r2, [pc, #200]	; (8001610 <HAL_DMA_Init+0xe0>)
 8001548:	4694      	mov	ip, r2
 800154a:	4463      	add	r3, ip
 800154c:	2114      	movs	r1, #20
 800154e:	0018      	movs	r0, r3
 8001550:	f7fe fdec 	bl	800012c <__udivsi3>
 8001554:	0003      	movs	r3, r0
 8001556:	009a      	lsls	r2, r3, #2
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a2d      	ldr	r2, [pc, #180]	; (8001614 <HAL_DMA_Init+0xe4>)
 8001560:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2225      	movs	r2, #37	; 0x25
 8001566:	2102      	movs	r1, #2
 8001568:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4a28      	ldr	r2, [pc, #160]	; (8001618 <HAL_DMA_Init+0xe8>)
 8001576:	4013      	ands	r3, r2
 8001578:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001582:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800158e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800159a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	2380      	movs	r3, #128	; 0x80
 80015b6:	01db      	lsls	r3, r3, #7
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d018      	beq.n	80015ee <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80015bc:	4b17      	ldr	r3, [pc, #92]	; (800161c <HAL_DMA_Init+0xec>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c4:	211c      	movs	r1, #28
 80015c6:	400b      	ands	r3, r1
 80015c8:	210f      	movs	r1, #15
 80015ca:	4099      	lsls	r1, r3
 80015cc:	000b      	movs	r3, r1
 80015ce:	43d9      	mvns	r1, r3
 80015d0:	4b12      	ldr	r3, [pc, #72]	; (800161c <HAL_DMA_Init+0xec>)
 80015d2:	400a      	ands	r2, r1
 80015d4:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <HAL_DMA_Init+0xec>)
 80015d8:	6819      	ldr	r1, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685a      	ldr	r2, [r3, #4]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	201c      	movs	r0, #28
 80015e4:	4003      	ands	r3, r0
 80015e6:	409a      	lsls	r2, r3
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <HAL_DMA_Init+0xec>)
 80015ea:	430a      	orrs	r2, r1
 80015ec:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2225      	movs	r2, #37	; 0x25
 80015f8:	2101      	movs	r1, #1
 80015fa:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2224      	movs	r2, #36	; 0x24
 8001600:	2100      	movs	r1, #0
 8001602:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	0018      	movs	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	b004      	add	sp, #16
 800160c:	bd80      	pop	{r7, pc}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	bffdfff8 	.word	0xbffdfff8
 8001614:	40020000 	.word	0x40020000
 8001618:	ffff800f 	.word	0xffff800f
 800161c:	400200a8 	.word	0x400200a8

08001620 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
 800162c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800162e:	2317      	movs	r3, #23
 8001630:	18fb      	adds	r3, r7, r3
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2224      	movs	r2, #36	; 0x24
 800163a:	5c9b      	ldrb	r3, [r3, r2]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d101      	bne.n	8001644 <HAL_DMA_Start_IT+0x24>
 8001640:	2302      	movs	r3, #2
 8001642:	e04f      	b.n	80016e4 <HAL_DMA_Start_IT+0xc4>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2224      	movs	r2, #36	; 0x24
 8001648:	2101      	movs	r1, #1
 800164a:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2225      	movs	r2, #37	; 0x25
 8001650:	5c9b      	ldrb	r3, [r3, r2]
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b01      	cmp	r3, #1
 8001656:	d13a      	bne.n	80016ce <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2225      	movs	r2, #37	; 0x25
 800165c:	2102      	movs	r1, #2
 800165e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2200      	movs	r2, #0
 8001664:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2101      	movs	r1, #1
 8001672:	438a      	bics	r2, r1
 8001674:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	68b9      	ldr	r1, [r7, #8]
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f000 f8e3 	bl	8001848 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	2b00      	cmp	r3, #0
 8001688:	d008      	beq.n	800169c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	210e      	movs	r1, #14
 8001696:	430a      	orrs	r2, r1
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	e00f      	b.n	80016bc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2104      	movs	r1, #4
 80016a8:	438a      	bics	r2, r1
 80016aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	210a      	movs	r1, #10
 80016b8:	430a      	orrs	r2, r1
 80016ba:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2101      	movs	r1, #1
 80016c8:	430a      	orrs	r2, r1
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	e007      	b.n	80016de <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2224      	movs	r2, #36	; 0x24
 80016d2:	2100      	movs	r1, #0
 80016d4:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80016d6:	2317      	movs	r3, #23
 80016d8:	18fb      	adds	r3, r7, r3
 80016da:	2202      	movs	r2, #2
 80016dc:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80016de:	2317      	movs	r3, #23
 80016e0:	18fb      	adds	r3, r7, r3
 80016e2:	781b      	ldrb	r3, [r3, #0]
}
 80016e4:	0018      	movs	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	b006      	add	sp, #24
 80016ea:	bd80      	pop	{r7, pc}

080016ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001708:	221c      	movs	r2, #28
 800170a:	4013      	ands	r3, r2
 800170c:	2204      	movs	r2, #4
 800170e:	409a      	lsls	r2, r3
 8001710:	0013      	movs	r3, r2
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	4013      	ands	r3, r2
 8001716:	d026      	beq.n	8001766 <HAL_DMA_IRQHandler+0x7a>
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	2204      	movs	r2, #4
 800171c:	4013      	ands	r3, r2
 800171e:	d022      	beq.n	8001766 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2220      	movs	r2, #32
 8001728:	4013      	ands	r3, r2
 800172a:	d107      	bne.n	800173c <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2104      	movs	r1, #4
 8001738:	438a      	bics	r2, r1
 800173a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001740:	221c      	movs	r2, #28
 8001742:	401a      	ands	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	2104      	movs	r1, #4
 800174a:	4091      	lsls	r1, r2
 800174c:	000a      	movs	r2, r1
 800174e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001754:	2b00      	cmp	r3, #0
 8001756:	d100      	bne.n	800175a <HAL_DMA_IRQHandler+0x6e>
 8001758:	e071      	b.n	800183e <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	0010      	movs	r0, r2
 8001762:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001764:	e06b      	b.n	800183e <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	221c      	movs	r2, #28
 800176c:	4013      	ands	r3, r2
 800176e:	2202      	movs	r2, #2
 8001770:	409a      	lsls	r2, r3
 8001772:	0013      	movs	r3, r2
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	4013      	ands	r3, r2
 8001778:	d02d      	beq.n	80017d6 <HAL_DMA_IRQHandler+0xea>
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	2202      	movs	r2, #2
 800177e:	4013      	ands	r3, r2
 8001780:	d029      	beq.n	80017d6 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2220      	movs	r2, #32
 800178a:	4013      	ands	r3, r2
 800178c:	d10b      	bne.n	80017a6 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	210a      	movs	r1, #10
 800179a:	438a      	bics	r2, r1
 800179c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2225      	movs	r2, #37	; 0x25
 80017a2:	2101      	movs	r1, #1
 80017a4:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	221c      	movs	r2, #28
 80017ac:	401a      	ands	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	2102      	movs	r1, #2
 80017b4:	4091      	lsls	r1, r2
 80017b6:	000a      	movs	r2, r1
 80017b8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2224      	movs	r2, #36	; 0x24
 80017be:	2100      	movs	r1, #0
 80017c0:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d039      	beq.n	800183e <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	0010      	movs	r0, r2
 80017d2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80017d4:	e033      	b.n	800183e <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	221c      	movs	r2, #28
 80017dc:	4013      	ands	r3, r2
 80017de:	2208      	movs	r2, #8
 80017e0:	409a      	lsls	r2, r3
 80017e2:	0013      	movs	r3, r2
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	4013      	ands	r3, r2
 80017e8:	d02a      	beq.n	8001840 <HAL_DMA_IRQHandler+0x154>
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	2208      	movs	r2, #8
 80017ee:	4013      	ands	r3, r2
 80017f0:	d026      	beq.n	8001840 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	210e      	movs	r1, #14
 80017fe:	438a      	bics	r2, r1
 8001800:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	221c      	movs	r2, #28
 8001808:	401a      	ands	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	2101      	movs	r1, #1
 8001810:	4091      	lsls	r1, r2
 8001812:	000a      	movs	r2, r1
 8001814:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2201      	movs	r2, #1
 800181a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2225      	movs	r2, #37	; 0x25
 8001820:	2101      	movs	r1, #1
 8001822:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2224      	movs	r2, #36	; 0x24
 8001828:	2100      	movs	r1, #0
 800182a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001830:	2b00      	cmp	r3, #0
 8001832:	d005      	beq.n	8001840 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	0010      	movs	r0, r2
 800183c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	46c0      	nop			; (mov r8, r8)
}
 8001842:	46bd      	mov	sp, r7
 8001844:	b004      	add	sp, #16
 8001846:	bd80      	pop	{r7, pc}

08001848 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	221c      	movs	r2, #28
 800185c:	401a      	ands	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	2101      	movs	r1, #1
 8001864:	4091      	lsls	r1, r2
 8001866:	000a      	movs	r2, r1
 8001868:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2b10      	cmp	r3, #16
 8001878:	d108      	bne.n	800188c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800188a:	e007      	b.n	800189c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	68ba      	ldr	r2, [r7, #8]
 8001892:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	60da      	str	r2, [r3, #12]
}
 800189c:	46c0      	nop			; (mov r8, r8)
 800189e:	46bd      	mov	sp, r7
 80018a0:	b004      	add	sp, #16
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80018ba:	e14f      	b.n	8001b5c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2101      	movs	r1, #1
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	4091      	lsls	r1, r2
 80018c6:	000a      	movs	r2, r1
 80018c8:	4013      	ands	r3, r2
 80018ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d100      	bne.n	80018d4 <HAL_GPIO_Init+0x30>
 80018d2:	e140      	b.n	8001b56 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2203      	movs	r2, #3
 80018da:	4013      	ands	r3, r2
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d005      	beq.n	80018ec <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2203      	movs	r2, #3
 80018e6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d130      	bne.n	800194e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	2203      	movs	r2, #3
 80018f8:	409a      	lsls	r2, r3
 80018fa:	0013      	movs	r3, r2
 80018fc:	43da      	mvns	r2, r3
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	4013      	ands	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	68da      	ldr	r2, [r3, #12]
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	409a      	lsls	r2, r3
 800190e:	0013      	movs	r3, r2
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	4313      	orrs	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001922:	2201      	movs	r2, #1
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	409a      	lsls	r2, r3
 8001928:	0013      	movs	r3, r2
 800192a:	43da      	mvns	r2, r3
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	091b      	lsrs	r3, r3, #4
 8001938:	2201      	movs	r2, #1
 800193a:	401a      	ands	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	409a      	lsls	r2, r3
 8001940:	0013      	movs	r3, r2
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4313      	orrs	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2203      	movs	r2, #3
 8001954:	4013      	ands	r3, r2
 8001956:	2b03      	cmp	r3, #3
 8001958:	d017      	beq.n	800198a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	2203      	movs	r2, #3
 8001966:	409a      	lsls	r2, r3
 8001968:	0013      	movs	r3, r2
 800196a:	43da      	mvns	r2, r3
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	4013      	ands	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	689a      	ldr	r2, [r3, #8]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	409a      	lsls	r2, r3
 800197c:	0013      	movs	r3, r2
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2203      	movs	r2, #3
 8001990:	4013      	ands	r3, r2
 8001992:	2b02      	cmp	r3, #2
 8001994:	d123      	bne.n	80019de <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	08da      	lsrs	r2, r3, #3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3208      	adds	r2, #8
 800199e:	0092      	lsls	r2, r2, #2
 80019a0:	58d3      	ldr	r3, [r2, r3]
 80019a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	2207      	movs	r2, #7
 80019a8:	4013      	ands	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	220f      	movs	r2, #15
 80019ae:	409a      	lsls	r2, r3
 80019b0:	0013      	movs	r3, r2
 80019b2:	43da      	mvns	r2, r3
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	4013      	ands	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	691a      	ldr	r2, [r3, #16]
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	2107      	movs	r1, #7
 80019c2:	400b      	ands	r3, r1
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	409a      	lsls	r2, r3
 80019c8:	0013      	movs	r3, r2
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	08da      	lsrs	r2, r3, #3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3208      	adds	r2, #8
 80019d8:	0092      	lsls	r2, r2, #2
 80019da:	6939      	ldr	r1, [r7, #16]
 80019dc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	2203      	movs	r2, #3
 80019ea:	409a      	lsls	r2, r3
 80019ec:	0013      	movs	r3, r2
 80019ee:	43da      	mvns	r2, r3
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	4013      	ands	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2203      	movs	r2, #3
 80019fc:	401a      	ands	r2, r3
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	409a      	lsls	r2, r3
 8001a04:	0013      	movs	r3, r2
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	23c0      	movs	r3, #192	; 0xc0
 8001a18:	029b      	lsls	r3, r3, #10
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d100      	bne.n	8001a20 <HAL_GPIO_Init+0x17c>
 8001a1e:	e09a      	b.n	8001b56 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a20:	4b54      	ldr	r3, [pc, #336]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001a22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a24:	4b53      	ldr	r3, [pc, #332]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001a26:	2101      	movs	r1, #1
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a2c:	4a52      	ldr	r2, [pc, #328]	; (8001b78 <HAL_GPIO_Init+0x2d4>)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	089b      	lsrs	r3, r3, #2
 8001a32:	3302      	adds	r3, #2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	589b      	ldr	r3, [r3, r2]
 8001a38:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	4013      	ands	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	220f      	movs	r2, #15
 8001a44:	409a      	lsls	r2, r3
 8001a46:	0013      	movs	r3, r2
 8001a48:	43da      	mvns	r2, r3
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	23a0      	movs	r3, #160	; 0xa0
 8001a54:	05db      	lsls	r3, r3, #23
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d019      	beq.n	8001a8e <HAL_GPIO_Init+0x1ea>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a47      	ldr	r2, [pc, #284]	; (8001b7c <HAL_GPIO_Init+0x2d8>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d013      	beq.n	8001a8a <HAL_GPIO_Init+0x1e6>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a46      	ldr	r2, [pc, #280]	; (8001b80 <HAL_GPIO_Init+0x2dc>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d00d      	beq.n	8001a86 <HAL_GPIO_Init+0x1e2>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a45      	ldr	r2, [pc, #276]	; (8001b84 <HAL_GPIO_Init+0x2e0>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d007      	beq.n	8001a82 <HAL_GPIO_Init+0x1de>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a44      	ldr	r2, [pc, #272]	; (8001b88 <HAL_GPIO_Init+0x2e4>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d101      	bne.n	8001a7e <HAL_GPIO_Init+0x1da>
 8001a7a:	2305      	movs	r3, #5
 8001a7c:	e008      	b.n	8001a90 <HAL_GPIO_Init+0x1ec>
 8001a7e:	2306      	movs	r3, #6
 8001a80:	e006      	b.n	8001a90 <HAL_GPIO_Init+0x1ec>
 8001a82:	2303      	movs	r3, #3
 8001a84:	e004      	b.n	8001a90 <HAL_GPIO_Init+0x1ec>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e002      	b.n	8001a90 <HAL_GPIO_Init+0x1ec>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <HAL_GPIO_Init+0x1ec>
 8001a8e:	2300      	movs	r3, #0
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	2103      	movs	r1, #3
 8001a94:	400a      	ands	r2, r1
 8001a96:	0092      	lsls	r2, r2, #2
 8001a98:	4093      	lsls	r3, r2
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aa0:	4935      	ldr	r1, [pc, #212]	; (8001b78 <HAL_GPIO_Init+0x2d4>)
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	089b      	lsrs	r3, r3, #2
 8001aa6:	3302      	adds	r3, #2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aae:	4b37      	ldr	r3, [pc, #220]	; (8001b8c <HAL_GPIO_Init+0x2e8>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	4013      	ands	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	2380      	movs	r3, #128	; 0x80
 8001ac4:	035b      	lsls	r3, r3, #13
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ad2:	4b2e      	ldr	r3, [pc, #184]	; (8001b8c <HAL_GPIO_Init+0x2e8>)
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001ad8:	4b2c      	ldr	r3, [pc, #176]	; (8001b8c <HAL_GPIO_Init+0x2e8>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	43da      	mvns	r2, r3
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	2380      	movs	r3, #128	; 0x80
 8001aee:	039b      	lsls	r3, r3, #14
 8001af0:	4013      	ands	r3, r2
 8001af2:	d003      	beq.n	8001afc <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001afc:	4b23      	ldr	r3, [pc, #140]	; (8001b8c <HAL_GPIO_Init+0x2e8>)
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001b02:	4b22      	ldr	r3, [pc, #136]	; (8001b8c <HAL_GPIO_Init+0x2e8>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	43da      	mvns	r2, r3
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	029b      	lsls	r3, r3, #10
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b26:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <HAL_GPIO_Init+0x2e8>)
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b2c:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <HAL_GPIO_Init+0x2e8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	43da      	mvns	r2, r3
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	2380      	movs	r3, #128	; 0x80
 8001b42:	025b      	lsls	r3, r3, #9
 8001b44:	4013      	ands	r3, r2
 8001b46:	d003      	beq.n	8001b50 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b50:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <HAL_GPIO_Init+0x2e8>)
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	40da      	lsrs	r2, r3
 8001b64:	1e13      	subs	r3, r2, #0
 8001b66:	d000      	beq.n	8001b6a <HAL_GPIO_Init+0x2c6>
 8001b68:	e6a8      	b.n	80018bc <HAL_GPIO_Init+0x18>
  }
}
 8001b6a:	46c0      	nop			; (mov r8, r8)
 8001b6c:	46c0      	nop			; (mov r8, r8)
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	b006      	add	sp, #24
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40010000 	.word	0x40010000
 8001b7c:	50000400 	.word	0x50000400
 8001b80:	50000800 	.word	0x50000800
 8001b84:	50000c00 	.word	0x50000c00
 8001b88:	50001c00 	.word	0x50001c00
 8001b8c:	40010400 	.word	0x40010400

08001b90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b90:	b5b0      	push	{r4, r5, r7, lr}
 8001b92:	b08a      	sub	sp, #40	; 0x28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d102      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	f000 fbaf 	bl	8002302 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ba4:	4bcf      	ldr	r3, [pc, #828]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	220c      	movs	r2, #12
 8001baa:	4013      	ands	r3, r2
 8001bac:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bae:	4bcd      	ldr	r3, [pc, #820]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	2380      	movs	r3, #128	; 0x80
 8001bb4:	025b      	lsls	r3, r3, #9
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d100      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x36>
 8001bc4:	e07e      	b.n	8001cc4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bc6:	6a3b      	ldr	r3, [r7, #32]
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d007      	beq.n	8001bdc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bcc:	6a3b      	ldr	r3, [r7, #32]
 8001bce:	2b0c      	cmp	r3, #12
 8001bd0:	d112      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x68>
 8001bd2:	69fa      	ldr	r2, [r7, #28]
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	025b      	lsls	r3, r3, #9
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d10d      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bdc:	4bc1      	ldr	r3, [pc, #772]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	2380      	movs	r3, #128	; 0x80
 8001be2:	029b      	lsls	r3, r3, #10
 8001be4:	4013      	ands	r3, r2
 8001be6:	d100      	bne.n	8001bea <HAL_RCC_OscConfig+0x5a>
 8001be8:	e06b      	b.n	8001cc2 <HAL_RCC_OscConfig+0x132>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d167      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	f000 fb85 	bl	8002302 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	2380      	movs	r3, #128	; 0x80
 8001bfe:	025b      	lsls	r3, r3, #9
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d107      	bne.n	8001c14 <HAL_RCC_OscConfig+0x84>
 8001c04:	4bb7      	ldr	r3, [pc, #732]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4bb6      	ldr	r3, [pc, #728]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001c0a:	2180      	movs	r1, #128	; 0x80
 8001c0c:	0249      	lsls	r1, r1, #9
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	e027      	b.n	8001c64 <HAL_RCC_OscConfig+0xd4>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	23a0      	movs	r3, #160	; 0xa0
 8001c1a:	02db      	lsls	r3, r3, #11
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d10e      	bne.n	8001c3e <HAL_RCC_OscConfig+0xae>
 8001c20:	4bb0      	ldr	r3, [pc, #704]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	4baf      	ldr	r3, [pc, #700]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001c26:	2180      	movs	r1, #128	; 0x80
 8001c28:	02c9      	lsls	r1, r1, #11
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	4bad      	ldr	r3, [pc, #692]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	4bac      	ldr	r3, [pc, #688]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001c34:	2180      	movs	r1, #128	; 0x80
 8001c36:	0249      	lsls	r1, r1, #9
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	e012      	b.n	8001c64 <HAL_RCC_OscConfig+0xd4>
 8001c3e:	4ba9      	ldr	r3, [pc, #676]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	4ba8      	ldr	r3, [pc, #672]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001c44:	49a8      	ldr	r1, [pc, #672]	; (8001ee8 <HAL_RCC_OscConfig+0x358>)
 8001c46:	400a      	ands	r2, r1
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	4ba6      	ldr	r3, [pc, #664]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	2380      	movs	r3, #128	; 0x80
 8001c50:	025b      	lsls	r3, r3, #9
 8001c52:	4013      	ands	r3, r2
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	4ba2      	ldr	r3, [pc, #648]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4ba1      	ldr	r3, [pc, #644]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001c5e:	49a3      	ldr	r1, [pc, #652]	; (8001eec <HAL_RCC_OscConfig+0x35c>)
 8001c60:	400a      	ands	r2, r1
 8001c62:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d015      	beq.n	8001c98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6c:	f7fe ff86 	bl	8000b7c <HAL_GetTick>
 8001c70:	0003      	movs	r3, r0
 8001c72:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c74:	e009      	b.n	8001c8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c76:	f7fe ff81 	bl	8000b7c <HAL_GetTick>
 8001c7a:	0002      	movs	r2, r0
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b64      	cmp	r3, #100	; 0x64
 8001c82:	d902      	bls.n	8001c8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	f000 fb3c 	bl	8002302 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c8a:	4b96      	ldr	r3, [pc, #600]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	2380      	movs	r3, #128	; 0x80
 8001c90:	029b      	lsls	r3, r3, #10
 8001c92:	4013      	ands	r3, r2
 8001c94:	d0ef      	beq.n	8001c76 <HAL_RCC_OscConfig+0xe6>
 8001c96:	e015      	b.n	8001cc4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c98:	f7fe ff70 	bl	8000b7c <HAL_GetTick>
 8001c9c:	0003      	movs	r3, r0
 8001c9e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ca2:	f7fe ff6b 	bl	8000b7c <HAL_GetTick>
 8001ca6:	0002      	movs	r2, r0
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b64      	cmp	r3, #100	; 0x64
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e326      	b.n	8002302 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cb4:	4b8b      	ldr	r3, [pc, #556]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	029b      	lsls	r3, r3, #10
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d1f0      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x112>
 8001cc0:	e000      	b.n	8001cc4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2202      	movs	r2, #2
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d100      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x140>
 8001cce:	e08b      	b.n	8001de8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	d005      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cdc:	6a3b      	ldr	r3, [r7, #32]
 8001cde:	2b0c      	cmp	r3, #12
 8001ce0:	d13e      	bne.n	8001d60 <HAL_RCC_OscConfig+0x1d0>
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d13b      	bne.n	8001d60 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001ce8:	4b7e      	ldr	r3, [pc, #504]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2204      	movs	r2, #4
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d004      	beq.n	8001cfc <HAL_RCC_OscConfig+0x16c>
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e302      	b.n	8002302 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfc:	4b79      	ldr	r3, [pc, #484]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	4a7b      	ldr	r2, [pc, #492]	; (8001ef0 <HAL_RCC_OscConfig+0x360>)
 8001d02:	4013      	ands	r3, r2
 8001d04:	0019      	movs	r1, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	021a      	lsls	r2, r3, #8
 8001d0c:	4b75      	ldr	r3, [pc, #468]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001d12:	4b74      	ldr	r3, [pc, #464]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2209      	movs	r2, #9
 8001d18:	4393      	bics	r3, r2
 8001d1a:	0019      	movs	r1, r3
 8001d1c:	4b71      	ldr	r3, [pc, #452]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d24:	f000 fc40 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 8001d28:	0001      	movs	r1, r0
 8001d2a:	4b6e      	ldr	r3, [pc, #440]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	091b      	lsrs	r3, r3, #4
 8001d30:	220f      	movs	r2, #15
 8001d32:	4013      	ands	r3, r2
 8001d34:	4a6f      	ldr	r2, [pc, #444]	; (8001ef4 <HAL_RCC_OscConfig+0x364>)
 8001d36:	5cd3      	ldrb	r3, [r2, r3]
 8001d38:	000a      	movs	r2, r1
 8001d3a:	40da      	lsrs	r2, r3
 8001d3c:	4b6e      	ldr	r3, [pc, #440]	; (8001ef8 <HAL_RCC_OscConfig+0x368>)
 8001d3e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001d40:	4b6e      	ldr	r3, [pc, #440]	; (8001efc <HAL_RCC_OscConfig+0x36c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2513      	movs	r5, #19
 8001d46:	197c      	adds	r4, r7, r5
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f7fe fed1 	bl	8000af0 <HAL_InitTick>
 8001d4e:	0003      	movs	r3, r0
 8001d50:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001d52:	197b      	adds	r3, r7, r5
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d046      	beq.n	8001de8 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001d5a:	197b      	adds	r3, r7, r5
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	e2d0      	b.n	8002302 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d027      	beq.n	8001db6 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001d66:	4b5f      	ldr	r3, [pc, #380]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2209      	movs	r2, #9
 8001d6c:	4393      	bics	r3, r2
 8001d6e:	0019      	movs	r1, r3
 8001d70:	4b5c      	ldr	r3, [pc, #368]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d78:	f7fe ff00 	bl	8000b7c <HAL_GetTick>
 8001d7c:	0003      	movs	r3, r0
 8001d7e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d82:	f7fe fefb 	bl	8000b7c <HAL_GetTick>
 8001d86:	0002      	movs	r2, r0
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e2b6      	b.n	8002302 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d94:	4b53      	ldr	r3, [pc, #332]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2204      	movs	r2, #4
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d0f1      	beq.n	8001d82 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9e:	4b51      	ldr	r3, [pc, #324]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	4a53      	ldr	r2, [pc, #332]	; (8001ef0 <HAL_RCC_OscConfig+0x360>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	0019      	movs	r1, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	021a      	lsls	r2, r3, #8
 8001dae:	4b4d      	ldr	r3, [pc, #308]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001db0:	430a      	orrs	r2, r1
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	e018      	b.n	8001de8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001db6:	4b4b      	ldr	r3, [pc, #300]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	4b4a      	ldr	r3, [pc, #296]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	438a      	bics	r2, r1
 8001dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc2:	f7fe fedb 	bl	8000b7c <HAL_GetTick>
 8001dc6:	0003      	movs	r3, r0
 8001dc8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dcc:	f7fe fed6 	bl	8000b7c <HAL_GetTick>
 8001dd0:	0002      	movs	r2, r0
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e291      	b.n	8002302 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001dde:	4b41      	ldr	r3, [pc, #260]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2204      	movs	r2, #4
 8001de4:	4013      	ands	r3, r2
 8001de6:	d1f1      	bne.n	8001dcc <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2210      	movs	r2, #16
 8001dee:	4013      	ands	r3, r2
 8001df0:	d100      	bne.n	8001df4 <HAL_RCC_OscConfig+0x264>
 8001df2:	e0a1      	b.n	8001f38 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001df4:	6a3b      	ldr	r3, [r7, #32]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d140      	bne.n	8001e7c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dfa:	4b3a      	ldr	r3, [pc, #232]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	2380      	movs	r3, #128	; 0x80
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4013      	ands	r3, r2
 8001e04:	d005      	beq.n	8001e12 <HAL_RCC_OscConfig+0x282>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e277      	b.n	8002302 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e12:	4b34      	ldr	r3, [pc, #208]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	4a3a      	ldr	r2, [pc, #232]	; (8001f00 <HAL_RCC_OscConfig+0x370>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	0019      	movs	r1, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e20:	4b30      	ldr	r3, [pc, #192]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001e22:	430a      	orrs	r2, r1
 8001e24:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e26:	4b2f      	ldr	r3, [pc, #188]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	021b      	lsls	r3, r3, #8
 8001e2c:	0a19      	lsrs	r1, r3, #8
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	061a      	lsls	r2, r3, #24
 8001e34:	4b2b      	ldr	r3, [pc, #172]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001e36:	430a      	orrs	r2, r1
 8001e38:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	0b5b      	lsrs	r3, r3, #13
 8001e40:	3301      	adds	r3, #1
 8001e42:	2280      	movs	r2, #128	; 0x80
 8001e44:	0212      	lsls	r2, r2, #8
 8001e46:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001e48:	4b26      	ldr	r3, [pc, #152]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	091b      	lsrs	r3, r3, #4
 8001e4e:	210f      	movs	r1, #15
 8001e50:	400b      	ands	r3, r1
 8001e52:	4928      	ldr	r1, [pc, #160]	; (8001ef4 <HAL_RCC_OscConfig+0x364>)
 8001e54:	5ccb      	ldrb	r3, [r1, r3]
 8001e56:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001e58:	4b27      	ldr	r3, [pc, #156]	; (8001ef8 <HAL_RCC_OscConfig+0x368>)
 8001e5a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001e5c:	4b27      	ldr	r3, [pc, #156]	; (8001efc <HAL_RCC_OscConfig+0x36c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2513      	movs	r5, #19
 8001e62:	197c      	adds	r4, r7, r5
 8001e64:	0018      	movs	r0, r3
 8001e66:	f7fe fe43 	bl	8000af0 <HAL_InitTick>
 8001e6a:	0003      	movs	r3, r0
 8001e6c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001e6e:	197b      	adds	r3, r7, r5
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d060      	beq.n	8001f38 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001e76:	197b      	adds	r3, r7, r5
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	e242      	b.n	8002302 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d03f      	beq.n	8001f04 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e84:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001e8a:	2180      	movs	r1, #128	; 0x80
 8001e8c:	0049      	lsls	r1, r1, #1
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e92:	f7fe fe73 	bl	8000b7c <HAL_GetTick>
 8001e96:	0003      	movs	r3, r0
 8001e98:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e9c:	f7fe fe6e 	bl	8000b7c <HAL_GetTick>
 8001ea0:	0002      	movs	r2, r0
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e229      	b.n	8002302 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001eae:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	2380      	movs	r3, #128	; 0x80
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eba:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	4a10      	ldr	r2, [pc, #64]	; (8001f00 <HAL_RCC_OscConfig+0x370>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	0019      	movs	r1, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ece:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	021b      	lsls	r3, r3, #8
 8001ed4:	0a19      	lsrs	r1, r3, #8
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	061a      	lsls	r2, r3, #24
 8001edc:	4b01      	ldr	r3, [pc, #4]	; (8001ee4 <HAL_RCC_OscConfig+0x354>)
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	e029      	b.n	8001f38 <HAL_RCC_OscConfig+0x3a8>
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	fffeffff 	.word	0xfffeffff
 8001eec:	fffbffff 	.word	0xfffbffff
 8001ef0:	ffffe0ff 	.word	0xffffe0ff
 8001ef4:	08003f18 	.word	0x08003f18
 8001ef8:	20000000 	.word	0x20000000
 8001efc:	20000004 	.word	0x20000004
 8001f00:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f04:	4bbd      	ldr	r3, [pc, #756]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4bbc      	ldr	r3, [pc, #752]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 8001f0a:	49bd      	ldr	r1, [pc, #756]	; (8002200 <HAL_RCC_OscConfig+0x670>)
 8001f0c:	400a      	ands	r2, r1
 8001f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f10:	f7fe fe34 	bl	8000b7c <HAL_GetTick>
 8001f14:	0003      	movs	r3, r0
 8001f16:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f1a:	f7fe fe2f 	bl	8000b7c <HAL_GetTick>
 8001f1e:	0002      	movs	r2, r0
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e1ea      	b.n	8002302 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001f2c:	4bb3      	ldr	r3, [pc, #716]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	2380      	movs	r3, #128	; 0x80
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4013      	ands	r3, r2
 8001f36:	d1f0      	bne.n	8001f1a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2208      	movs	r2, #8
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d036      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d019      	beq.n	8001f7e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f4a:	4bac      	ldr	r3, [pc, #688]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 8001f4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f4e:	4bab      	ldr	r3, [pc, #684]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 8001f50:	2101      	movs	r1, #1
 8001f52:	430a      	orrs	r2, r1
 8001f54:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f56:	f7fe fe11 	bl	8000b7c <HAL_GetTick>
 8001f5a:	0003      	movs	r3, r0
 8001f5c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f60:	f7fe fe0c 	bl	8000b7c <HAL_GetTick>
 8001f64:	0002      	movs	r2, r0
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e1c7      	b.n	8002302 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f72:	4ba2      	ldr	r3, [pc, #648]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 8001f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f76:	2202      	movs	r2, #2
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d0f1      	beq.n	8001f60 <HAL_RCC_OscConfig+0x3d0>
 8001f7c:	e018      	b.n	8001fb0 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f7e:	4b9f      	ldr	r3, [pc, #636]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 8001f80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f82:	4b9e      	ldr	r3, [pc, #632]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 8001f84:	2101      	movs	r1, #1
 8001f86:	438a      	bics	r2, r1
 8001f88:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8a:	f7fe fdf7 	bl	8000b7c <HAL_GetTick>
 8001f8e:	0003      	movs	r3, r0
 8001f90:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f94:	f7fe fdf2 	bl	8000b7c <HAL_GetTick>
 8001f98:	0002      	movs	r2, r0
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e1ad      	b.n	8002302 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001fa6:	4b95      	ldr	r3, [pc, #596]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 8001fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001faa:	2202      	movs	r2, #2
 8001fac:	4013      	ands	r3, r2
 8001fae:	d1f1      	bne.n	8001f94 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2204      	movs	r2, #4
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d100      	bne.n	8001fbc <HAL_RCC_OscConfig+0x42c>
 8001fba:	e0ae      	b.n	800211a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fbc:	2027      	movs	r0, #39	; 0x27
 8001fbe:	183b      	adds	r3, r7, r0
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fc4:	4b8d      	ldr	r3, [pc, #564]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 8001fc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fc8:	2380      	movs	r3, #128	; 0x80
 8001fca:	055b      	lsls	r3, r3, #21
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d109      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd0:	4b8a      	ldr	r3, [pc, #552]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 8001fd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fd4:	4b89      	ldr	r3, [pc, #548]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 8001fd6:	2180      	movs	r1, #128	; 0x80
 8001fd8:	0549      	lsls	r1, r1, #21
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001fde:	183b      	adds	r3, r7, r0
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe4:	4b87      	ldr	r3, [pc, #540]	; (8002204 <HAL_RCC_OscConfig+0x674>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	2380      	movs	r3, #128	; 0x80
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	4013      	ands	r3, r2
 8001fee:	d11a      	bne.n	8002026 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ff0:	4b84      	ldr	r3, [pc, #528]	; (8002204 <HAL_RCC_OscConfig+0x674>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4b83      	ldr	r3, [pc, #524]	; (8002204 <HAL_RCC_OscConfig+0x674>)
 8001ff6:	2180      	movs	r1, #128	; 0x80
 8001ff8:	0049      	lsls	r1, r1, #1
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ffe:	f7fe fdbd 	bl	8000b7c <HAL_GetTick>
 8002002:	0003      	movs	r3, r0
 8002004:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002008:	f7fe fdb8 	bl	8000b7c <HAL_GetTick>
 800200c:	0002      	movs	r2, r0
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b64      	cmp	r3, #100	; 0x64
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e173      	b.n	8002302 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201a:	4b7a      	ldr	r3, [pc, #488]	; (8002204 <HAL_RCC_OscConfig+0x674>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	2380      	movs	r3, #128	; 0x80
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	4013      	ands	r3, r2
 8002024:	d0f0      	beq.n	8002008 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	429a      	cmp	r2, r3
 8002030:	d107      	bne.n	8002042 <HAL_RCC_OscConfig+0x4b2>
 8002032:	4b72      	ldr	r3, [pc, #456]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 8002034:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002036:	4b71      	ldr	r3, [pc, #452]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 8002038:	2180      	movs	r1, #128	; 0x80
 800203a:	0049      	lsls	r1, r1, #1
 800203c:	430a      	orrs	r2, r1
 800203e:	651a      	str	r2, [r3, #80]	; 0x50
 8002040:	e031      	b.n	80020a6 <HAL_RCC_OscConfig+0x516>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10c      	bne.n	8002064 <HAL_RCC_OscConfig+0x4d4>
 800204a:	4b6c      	ldr	r3, [pc, #432]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 800204c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800204e:	4b6b      	ldr	r3, [pc, #428]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 8002050:	496b      	ldr	r1, [pc, #428]	; (8002200 <HAL_RCC_OscConfig+0x670>)
 8002052:	400a      	ands	r2, r1
 8002054:	651a      	str	r2, [r3, #80]	; 0x50
 8002056:	4b69      	ldr	r3, [pc, #420]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 8002058:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800205a:	4b68      	ldr	r3, [pc, #416]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 800205c:	496a      	ldr	r1, [pc, #424]	; (8002208 <HAL_RCC_OscConfig+0x678>)
 800205e:	400a      	ands	r2, r1
 8002060:	651a      	str	r2, [r3, #80]	; 0x50
 8002062:	e020      	b.n	80020a6 <HAL_RCC_OscConfig+0x516>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	23a0      	movs	r3, #160	; 0xa0
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	429a      	cmp	r2, r3
 800206e:	d10e      	bne.n	800208e <HAL_RCC_OscConfig+0x4fe>
 8002070:	4b62      	ldr	r3, [pc, #392]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 8002072:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002074:	4b61      	ldr	r3, [pc, #388]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 8002076:	2180      	movs	r1, #128	; 0x80
 8002078:	00c9      	lsls	r1, r1, #3
 800207a:	430a      	orrs	r2, r1
 800207c:	651a      	str	r2, [r3, #80]	; 0x50
 800207e:	4b5f      	ldr	r3, [pc, #380]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 8002080:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002082:	4b5e      	ldr	r3, [pc, #376]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 8002084:	2180      	movs	r1, #128	; 0x80
 8002086:	0049      	lsls	r1, r1, #1
 8002088:	430a      	orrs	r2, r1
 800208a:	651a      	str	r2, [r3, #80]	; 0x50
 800208c:	e00b      	b.n	80020a6 <HAL_RCC_OscConfig+0x516>
 800208e:	4b5b      	ldr	r3, [pc, #364]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 8002090:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002092:	4b5a      	ldr	r3, [pc, #360]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 8002094:	495a      	ldr	r1, [pc, #360]	; (8002200 <HAL_RCC_OscConfig+0x670>)
 8002096:	400a      	ands	r2, r1
 8002098:	651a      	str	r2, [r3, #80]	; 0x50
 800209a:	4b58      	ldr	r3, [pc, #352]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 800209c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800209e:	4b57      	ldr	r3, [pc, #348]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 80020a0:	4959      	ldr	r1, [pc, #356]	; (8002208 <HAL_RCC_OscConfig+0x678>)
 80020a2:	400a      	ands	r2, r1
 80020a4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d015      	beq.n	80020da <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ae:	f7fe fd65 	bl	8000b7c <HAL_GetTick>
 80020b2:	0003      	movs	r3, r0
 80020b4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020b6:	e009      	b.n	80020cc <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020b8:	f7fe fd60 	bl	8000b7c <HAL_GetTick>
 80020bc:	0002      	movs	r2, r0
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	4a52      	ldr	r2, [pc, #328]	; (800220c <HAL_RCC_OscConfig+0x67c>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e11a      	b.n	8002302 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020cc:	4b4b      	ldr	r3, [pc, #300]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 80020ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4013      	ands	r3, r2
 80020d6:	d0ef      	beq.n	80020b8 <HAL_RCC_OscConfig+0x528>
 80020d8:	e014      	b.n	8002104 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020da:	f7fe fd4f 	bl	8000b7c <HAL_GetTick>
 80020de:	0003      	movs	r3, r0
 80020e0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020e2:	e009      	b.n	80020f8 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020e4:	f7fe fd4a 	bl	8000b7c <HAL_GetTick>
 80020e8:	0002      	movs	r2, r0
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	4a47      	ldr	r2, [pc, #284]	; (800220c <HAL_RCC_OscConfig+0x67c>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e104      	b.n	8002302 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020f8:	4b40      	ldr	r3, [pc, #256]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 80020fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020fc:	2380      	movs	r3, #128	; 0x80
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4013      	ands	r3, r2
 8002102:	d1ef      	bne.n	80020e4 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002104:	2327      	movs	r3, #39	; 0x27
 8002106:	18fb      	adds	r3, r7, r3
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d105      	bne.n	800211a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800210e:	4b3b      	ldr	r3, [pc, #236]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 8002110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002112:	4b3a      	ldr	r3, [pc, #232]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 8002114:	493e      	ldr	r1, [pc, #248]	; (8002210 <HAL_RCC_OscConfig+0x680>)
 8002116:	400a      	ands	r2, r1
 8002118:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2220      	movs	r2, #32
 8002120:	4013      	ands	r3, r2
 8002122:	d049      	beq.n	80021b8 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d026      	beq.n	800217a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800212c:	4b33      	ldr	r3, [pc, #204]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	4b32      	ldr	r3, [pc, #200]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 8002132:	2101      	movs	r1, #1
 8002134:	430a      	orrs	r2, r1
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	4b30      	ldr	r3, [pc, #192]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 800213a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800213c:	4b2f      	ldr	r3, [pc, #188]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 800213e:	2101      	movs	r1, #1
 8002140:	430a      	orrs	r2, r1
 8002142:	635a      	str	r2, [r3, #52]	; 0x34
 8002144:	4b33      	ldr	r3, [pc, #204]	; (8002214 <HAL_RCC_OscConfig+0x684>)
 8002146:	6a1a      	ldr	r2, [r3, #32]
 8002148:	4b32      	ldr	r3, [pc, #200]	; (8002214 <HAL_RCC_OscConfig+0x684>)
 800214a:	2180      	movs	r1, #128	; 0x80
 800214c:	0189      	lsls	r1, r1, #6
 800214e:	430a      	orrs	r2, r1
 8002150:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002152:	f7fe fd13 	bl	8000b7c <HAL_GetTick>
 8002156:	0003      	movs	r3, r0
 8002158:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800215c:	f7fe fd0e 	bl	8000b7c <HAL_GetTick>
 8002160:	0002      	movs	r2, r0
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e0c9      	b.n	8002302 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800216e:	4b23      	ldr	r3, [pc, #140]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2202      	movs	r2, #2
 8002174:	4013      	ands	r3, r2
 8002176:	d0f1      	beq.n	800215c <HAL_RCC_OscConfig+0x5cc>
 8002178:	e01e      	b.n	80021b8 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800217a:	4b20      	ldr	r3, [pc, #128]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	4b1f      	ldr	r3, [pc, #124]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 8002180:	2101      	movs	r1, #1
 8002182:	438a      	bics	r2, r1
 8002184:	609a      	str	r2, [r3, #8]
 8002186:	4b23      	ldr	r3, [pc, #140]	; (8002214 <HAL_RCC_OscConfig+0x684>)
 8002188:	6a1a      	ldr	r2, [r3, #32]
 800218a:	4b22      	ldr	r3, [pc, #136]	; (8002214 <HAL_RCC_OscConfig+0x684>)
 800218c:	4922      	ldr	r1, [pc, #136]	; (8002218 <HAL_RCC_OscConfig+0x688>)
 800218e:	400a      	ands	r2, r1
 8002190:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002192:	f7fe fcf3 	bl	8000b7c <HAL_GetTick>
 8002196:	0003      	movs	r3, r0
 8002198:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800219c:	f7fe fcee 	bl	8000b7c <HAL_GetTick>
 80021a0:	0002      	movs	r2, r0
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e0a9      	b.n	8002302 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021ae:	4b13      	ldr	r3, [pc, #76]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	2202      	movs	r2, #2
 80021b4:	4013      	ands	r3, r2
 80021b6:	d1f1      	bne.n	800219c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d100      	bne.n	80021c2 <HAL_RCC_OscConfig+0x632>
 80021c0:	e09e      	b.n	8002300 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	2b0c      	cmp	r3, #12
 80021c6:	d100      	bne.n	80021ca <HAL_RCC_OscConfig+0x63a>
 80021c8:	e077      	b.n	80022ba <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d158      	bne.n	8002284 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d2:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	4b09      	ldr	r3, [pc, #36]	; (80021fc <HAL_RCC_OscConfig+0x66c>)
 80021d8:	4910      	ldr	r1, [pc, #64]	; (800221c <HAL_RCC_OscConfig+0x68c>)
 80021da:	400a      	ands	r2, r1
 80021dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021de:	f7fe fccd 	bl	8000b7c <HAL_GetTick>
 80021e2:	0003      	movs	r3, r0
 80021e4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021e6:	e01b      	b.n	8002220 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e8:	f7fe fcc8 	bl	8000b7c <HAL_GetTick>
 80021ec:	0002      	movs	r2, r0
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d914      	bls.n	8002220 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e083      	b.n	8002302 <HAL_RCC_OscConfig+0x772>
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	40021000 	.word	0x40021000
 8002200:	fffffeff 	.word	0xfffffeff
 8002204:	40007000 	.word	0x40007000
 8002208:	fffffbff 	.word	0xfffffbff
 800220c:	00001388 	.word	0x00001388
 8002210:	efffffff 	.word	0xefffffff
 8002214:	40010000 	.word	0x40010000
 8002218:	ffffdfff 	.word	0xffffdfff
 800221c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002220:	4b3a      	ldr	r3, [pc, #232]	; (800230c <HAL_RCC_OscConfig+0x77c>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	2380      	movs	r3, #128	; 0x80
 8002226:	049b      	lsls	r3, r3, #18
 8002228:	4013      	ands	r3, r2
 800222a:	d1dd      	bne.n	80021e8 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800222c:	4b37      	ldr	r3, [pc, #220]	; (800230c <HAL_RCC_OscConfig+0x77c>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	4a37      	ldr	r2, [pc, #220]	; (8002310 <HAL_RCC_OscConfig+0x780>)
 8002232:	4013      	ands	r3, r2
 8002234:	0019      	movs	r1, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002244:	431a      	orrs	r2, r3
 8002246:	4b31      	ldr	r3, [pc, #196]	; (800230c <HAL_RCC_OscConfig+0x77c>)
 8002248:	430a      	orrs	r2, r1
 800224a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800224c:	4b2f      	ldr	r3, [pc, #188]	; (800230c <HAL_RCC_OscConfig+0x77c>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b2e      	ldr	r3, [pc, #184]	; (800230c <HAL_RCC_OscConfig+0x77c>)
 8002252:	2180      	movs	r1, #128	; 0x80
 8002254:	0449      	lsls	r1, r1, #17
 8002256:	430a      	orrs	r2, r1
 8002258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7fe fc8f 	bl	8000b7c <HAL_GetTick>
 800225e:	0003      	movs	r3, r0
 8002260:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002264:	f7fe fc8a 	bl	8000b7c <HAL_GetTick>
 8002268:	0002      	movs	r2, r0
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e045      	b.n	8002302 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002276:	4b25      	ldr	r3, [pc, #148]	; (800230c <HAL_RCC_OscConfig+0x77c>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	2380      	movs	r3, #128	; 0x80
 800227c:	049b      	lsls	r3, r3, #18
 800227e:	4013      	ands	r3, r2
 8002280:	d0f0      	beq.n	8002264 <HAL_RCC_OscConfig+0x6d4>
 8002282:	e03d      	b.n	8002300 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002284:	4b21      	ldr	r3, [pc, #132]	; (800230c <HAL_RCC_OscConfig+0x77c>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b20      	ldr	r3, [pc, #128]	; (800230c <HAL_RCC_OscConfig+0x77c>)
 800228a:	4922      	ldr	r1, [pc, #136]	; (8002314 <HAL_RCC_OscConfig+0x784>)
 800228c:	400a      	ands	r2, r1
 800228e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002290:	f7fe fc74 	bl	8000b7c <HAL_GetTick>
 8002294:	0003      	movs	r3, r0
 8002296:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800229a:	f7fe fc6f 	bl	8000b7c <HAL_GetTick>
 800229e:	0002      	movs	r2, r0
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e02a      	b.n	8002302 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80022ac:	4b17      	ldr	r3, [pc, #92]	; (800230c <HAL_RCC_OscConfig+0x77c>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	2380      	movs	r3, #128	; 0x80
 80022b2:	049b      	lsls	r3, r3, #18
 80022b4:	4013      	ands	r3, r2
 80022b6:	d1f0      	bne.n	800229a <HAL_RCC_OscConfig+0x70a>
 80022b8:	e022      	b.n	8002300 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d101      	bne.n	80022c6 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e01d      	b.n	8002302 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022c6:	4b11      	ldr	r3, [pc, #68]	; (800230c <HAL_RCC_OscConfig+0x77c>)
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022cc:	69fa      	ldr	r2, [r7, #28]
 80022ce:	2380      	movs	r3, #128	; 0x80
 80022d0:	025b      	lsls	r3, r3, #9
 80022d2:	401a      	ands	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d8:	429a      	cmp	r2, r3
 80022da:	d10f      	bne.n	80022fc <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80022dc:	69fa      	ldr	r2, [r7, #28]
 80022de:	23f0      	movs	r3, #240	; 0xf0
 80022e0:	039b      	lsls	r3, r3, #14
 80022e2:	401a      	ands	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d107      	bne.n	80022fc <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80022ec:	69fa      	ldr	r2, [r7, #28]
 80022ee:	23c0      	movs	r3, #192	; 0xc0
 80022f0:	041b      	lsls	r3, r3, #16
 80022f2:	401a      	ands	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d001      	beq.n	8002300 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e000      	b.n	8002302 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	0018      	movs	r0, r3
 8002304:	46bd      	mov	sp, r7
 8002306:	b00a      	add	sp, #40	; 0x28
 8002308:	bdb0      	pop	{r4, r5, r7, pc}
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	40021000 	.word	0x40021000
 8002310:	ff02ffff 	.word	0xff02ffff
 8002314:	feffffff 	.word	0xfeffffff

08002318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002318:	b5b0      	push	{r4, r5, r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e128      	b.n	800257e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800232c:	4b96      	ldr	r3, [pc, #600]	; (8002588 <HAL_RCC_ClockConfig+0x270>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2201      	movs	r2, #1
 8002332:	4013      	ands	r3, r2
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d91e      	bls.n	8002378 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233a:	4b93      	ldr	r3, [pc, #588]	; (8002588 <HAL_RCC_ClockConfig+0x270>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2201      	movs	r2, #1
 8002340:	4393      	bics	r3, r2
 8002342:	0019      	movs	r1, r3
 8002344:	4b90      	ldr	r3, [pc, #576]	; (8002588 <HAL_RCC_ClockConfig+0x270>)
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800234c:	f7fe fc16 	bl	8000b7c <HAL_GetTick>
 8002350:	0003      	movs	r3, r0
 8002352:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002354:	e009      	b.n	800236a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002356:	f7fe fc11 	bl	8000b7c <HAL_GetTick>
 800235a:	0002      	movs	r2, r0
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	4a8a      	ldr	r2, [pc, #552]	; (800258c <HAL_RCC_ClockConfig+0x274>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d901      	bls.n	800236a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e109      	b.n	800257e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800236a:	4b87      	ldr	r3, [pc, #540]	; (8002588 <HAL_RCC_ClockConfig+0x270>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2201      	movs	r2, #1
 8002370:	4013      	ands	r3, r2
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d1ee      	bne.n	8002356 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2202      	movs	r2, #2
 800237e:	4013      	ands	r3, r2
 8002380:	d009      	beq.n	8002396 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002382:	4b83      	ldr	r3, [pc, #524]	; (8002590 <HAL_RCC_ClockConfig+0x278>)
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	22f0      	movs	r2, #240	; 0xf0
 8002388:	4393      	bics	r3, r2
 800238a:	0019      	movs	r1, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	4b7f      	ldr	r3, [pc, #508]	; (8002590 <HAL_RCC_ClockConfig+0x278>)
 8002392:	430a      	orrs	r2, r1
 8002394:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2201      	movs	r2, #1
 800239c:	4013      	ands	r3, r2
 800239e:	d100      	bne.n	80023a2 <HAL_RCC_ClockConfig+0x8a>
 80023a0:	e089      	b.n	80024b6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d107      	bne.n	80023ba <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023aa:	4b79      	ldr	r3, [pc, #484]	; (8002590 <HAL_RCC_ClockConfig+0x278>)
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	2380      	movs	r3, #128	; 0x80
 80023b0:	029b      	lsls	r3, r3, #10
 80023b2:	4013      	ands	r3, r2
 80023b4:	d120      	bne.n	80023f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e0e1      	b.n	800257e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b03      	cmp	r3, #3
 80023c0:	d107      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023c2:	4b73      	ldr	r3, [pc, #460]	; (8002590 <HAL_RCC_ClockConfig+0x278>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	2380      	movs	r3, #128	; 0x80
 80023c8:	049b      	lsls	r3, r3, #18
 80023ca:	4013      	ands	r3, r2
 80023cc:	d114      	bne.n	80023f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e0d5      	b.n	800257e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d106      	bne.n	80023e8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023da:	4b6d      	ldr	r3, [pc, #436]	; (8002590 <HAL_RCC_ClockConfig+0x278>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2204      	movs	r2, #4
 80023e0:	4013      	ands	r3, r2
 80023e2:	d109      	bne.n	80023f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0ca      	b.n	800257e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80023e8:	4b69      	ldr	r3, [pc, #420]	; (8002590 <HAL_RCC_ClockConfig+0x278>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	2380      	movs	r3, #128	; 0x80
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4013      	ands	r3, r2
 80023f2:	d101      	bne.n	80023f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0c2      	b.n	800257e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023f8:	4b65      	ldr	r3, [pc, #404]	; (8002590 <HAL_RCC_ClockConfig+0x278>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	2203      	movs	r2, #3
 80023fe:	4393      	bics	r3, r2
 8002400:	0019      	movs	r1, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	4b62      	ldr	r3, [pc, #392]	; (8002590 <HAL_RCC_ClockConfig+0x278>)
 8002408:	430a      	orrs	r2, r1
 800240a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800240c:	f7fe fbb6 	bl	8000b7c <HAL_GetTick>
 8002410:	0003      	movs	r3, r0
 8002412:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b02      	cmp	r3, #2
 800241a:	d111      	bne.n	8002440 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800241c:	e009      	b.n	8002432 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800241e:	f7fe fbad 	bl	8000b7c <HAL_GetTick>
 8002422:	0002      	movs	r2, r0
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	4a58      	ldr	r2, [pc, #352]	; (800258c <HAL_RCC_ClockConfig+0x274>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e0a5      	b.n	800257e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002432:	4b57      	ldr	r3, [pc, #348]	; (8002590 <HAL_RCC_ClockConfig+0x278>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	220c      	movs	r2, #12
 8002438:	4013      	ands	r3, r2
 800243a:	2b08      	cmp	r3, #8
 800243c:	d1ef      	bne.n	800241e <HAL_RCC_ClockConfig+0x106>
 800243e:	e03a      	b.n	80024b6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b03      	cmp	r3, #3
 8002446:	d111      	bne.n	800246c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002448:	e009      	b.n	800245e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800244a:	f7fe fb97 	bl	8000b7c <HAL_GetTick>
 800244e:	0002      	movs	r2, r0
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	4a4d      	ldr	r2, [pc, #308]	; (800258c <HAL_RCC_ClockConfig+0x274>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d901      	bls.n	800245e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e08f      	b.n	800257e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800245e:	4b4c      	ldr	r3, [pc, #304]	; (8002590 <HAL_RCC_ClockConfig+0x278>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	220c      	movs	r2, #12
 8002464:	4013      	ands	r3, r2
 8002466:	2b0c      	cmp	r3, #12
 8002468:	d1ef      	bne.n	800244a <HAL_RCC_ClockConfig+0x132>
 800246a:	e024      	b.n	80024b6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d11b      	bne.n	80024ac <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002474:	e009      	b.n	800248a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002476:	f7fe fb81 	bl	8000b7c <HAL_GetTick>
 800247a:	0002      	movs	r2, r0
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	4a42      	ldr	r2, [pc, #264]	; (800258c <HAL_RCC_ClockConfig+0x274>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d901      	bls.n	800248a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e079      	b.n	800257e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800248a:	4b41      	ldr	r3, [pc, #260]	; (8002590 <HAL_RCC_ClockConfig+0x278>)
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	220c      	movs	r2, #12
 8002490:	4013      	ands	r3, r2
 8002492:	2b04      	cmp	r3, #4
 8002494:	d1ef      	bne.n	8002476 <HAL_RCC_ClockConfig+0x15e>
 8002496:	e00e      	b.n	80024b6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002498:	f7fe fb70 	bl	8000b7c <HAL_GetTick>
 800249c:	0002      	movs	r2, r0
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	4a3a      	ldr	r2, [pc, #232]	; (800258c <HAL_RCC_ClockConfig+0x274>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e068      	b.n	800257e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80024ac:	4b38      	ldr	r3, [pc, #224]	; (8002590 <HAL_RCC_ClockConfig+0x278>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	220c      	movs	r2, #12
 80024b2:	4013      	ands	r3, r2
 80024b4:	d1f0      	bne.n	8002498 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024b6:	4b34      	ldr	r3, [pc, #208]	; (8002588 <HAL_RCC_ClockConfig+0x270>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2201      	movs	r2, #1
 80024bc:	4013      	ands	r3, r2
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d21e      	bcs.n	8002502 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c4:	4b30      	ldr	r3, [pc, #192]	; (8002588 <HAL_RCC_ClockConfig+0x270>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2201      	movs	r2, #1
 80024ca:	4393      	bics	r3, r2
 80024cc:	0019      	movs	r1, r3
 80024ce:	4b2e      	ldr	r3, [pc, #184]	; (8002588 <HAL_RCC_ClockConfig+0x270>)
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024d6:	f7fe fb51 	bl	8000b7c <HAL_GetTick>
 80024da:	0003      	movs	r3, r0
 80024dc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024de:	e009      	b.n	80024f4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e0:	f7fe fb4c 	bl	8000b7c <HAL_GetTick>
 80024e4:	0002      	movs	r2, r0
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	4a28      	ldr	r2, [pc, #160]	; (800258c <HAL_RCC_ClockConfig+0x274>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e044      	b.n	800257e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f4:	4b24      	ldr	r3, [pc, #144]	; (8002588 <HAL_RCC_ClockConfig+0x270>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2201      	movs	r2, #1
 80024fa:	4013      	ands	r3, r2
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d1ee      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2204      	movs	r2, #4
 8002508:	4013      	ands	r3, r2
 800250a:	d009      	beq.n	8002520 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800250c:	4b20      	ldr	r3, [pc, #128]	; (8002590 <HAL_RCC_ClockConfig+0x278>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	4a20      	ldr	r2, [pc, #128]	; (8002594 <HAL_RCC_ClockConfig+0x27c>)
 8002512:	4013      	ands	r3, r2
 8002514:	0019      	movs	r1, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	4b1d      	ldr	r3, [pc, #116]	; (8002590 <HAL_RCC_ClockConfig+0x278>)
 800251c:	430a      	orrs	r2, r1
 800251e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2208      	movs	r2, #8
 8002526:	4013      	ands	r3, r2
 8002528:	d00a      	beq.n	8002540 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800252a:	4b19      	ldr	r3, [pc, #100]	; (8002590 <HAL_RCC_ClockConfig+0x278>)
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	4a1a      	ldr	r2, [pc, #104]	; (8002598 <HAL_RCC_ClockConfig+0x280>)
 8002530:	4013      	ands	r3, r2
 8002532:	0019      	movs	r1, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	00da      	lsls	r2, r3, #3
 800253a:	4b15      	ldr	r3, [pc, #84]	; (8002590 <HAL_RCC_ClockConfig+0x278>)
 800253c:	430a      	orrs	r2, r1
 800253e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002540:	f000 f832 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 8002544:	0001      	movs	r1, r0
 8002546:	4b12      	ldr	r3, [pc, #72]	; (8002590 <HAL_RCC_ClockConfig+0x278>)
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	091b      	lsrs	r3, r3, #4
 800254c:	220f      	movs	r2, #15
 800254e:	4013      	ands	r3, r2
 8002550:	4a12      	ldr	r2, [pc, #72]	; (800259c <HAL_RCC_ClockConfig+0x284>)
 8002552:	5cd3      	ldrb	r3, [r2, r3]
 8002554:	000a      	movs	r2, r1
 8002556:	40da      	lsrs	r2, r3
 8002558:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <HAL_RCC_ClockConfig+0x288>)
 800255a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <HAL_RCC_ClockConfig+0x28c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	250b      	movs	r5, #11
 8002562:	197c      	adds	r4, r7, r5
 8002564:	0018      	movs	r0, r3
 8002566:	f7fe fac3 	bl	8000af0 <HAL_InitTick>
 800256a:	0003      	movs	r3, r0
 800256c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800256e:	197b      	adds	r3, r7, r5
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d002      	beq.n	800257c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002576:	197b      	adds	r3, r7, r5
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	e000      	b.n	800257e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	0018      	movs	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	b004      	add	sp, #16
 8002584:	bdb0      	pop	{r4, r5, r7, pc}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	40022000 	.word	0x40022000
 800258c:	00001388 	.word	0x00001388
 8002590:	40021000 	.word	0x40021000
 8002594:	fffff8ff 	.word	0xfffff8ff
 8002598:	ffffc7ff 	.word	0xffffc7ff
 800259c:	08003f18 	.word	0x08003f18
 80025a0:	20000000 	.word	0x20000000
 80025a4:	20000004 	.word	0x20000004

080025a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a8:	b5b0      	push	{r4, r5, r7, lr}
 80025aa:	b08e      	sub	sp, #56	; 0x38
 80025ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80025ae:	4b4c      	ldr	r3, [pc, #304]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x138>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025b6:	230c      	movs	r3, #12
 80025b8:	4013      	ands	r3, r2
 80025ba:	2b0c      	cmp	r3, #12
 80025bc:	d014      	beq.n	80025e8 <HAL_RCC_GetSysClockFreq+0x40>
 80025be:	d900      	bls.n	80025c2 <HAL_RCC_GetSysClockFreq+0x1a>
 80025c0:	e07b      	b.n	80026ba <HAL_RCC_GetSysClockFreq+0x112>
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d002      	beq.n	80025cc <HAL_RCC_GetSysClockFreq+0x24>
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d00b      	beq.n	80025e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80025ca:	e076      	b.n	80026ba <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80025cc:	4b44      	ldr	r3, [pc, #272]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x138>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2210      	movs	r2, #16
 80025d2:	4013      	ands	r3, r2
 80025d4:	d002      	beq.n	80025dc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80025d6:	4b43      	ldr	r3, [pc, #268]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80025d8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80025da:	e07c      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80025dc:	4b42      	ldr	r3, [pc, #264]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x140>)
 80025de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025e0:	e079      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025e2:	4b42      	ldr	r3, [pc, #264]	; (80026ec <HAL_RCC_GetSysClockFreq+0x144>)
 80025e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025e6:	e076      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80025e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ea:	0c9a      	lsrs	r2, r3, #18
 80025ec:	230f      	movs	r3, #15
 80025ee:	401a      	ands	r2, r3
 80025f0:	4b3f      	ldr	r3, [pc, #252]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x148>)
 80025f2:	5c9b      	ldrb	r3, [r3, r2]
 80025f4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80025f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f8:	0d9a      	lsrs	r2, r3, #22
 80025fa:	2303      	movs	r3, #3
 80025fc:	4013      	ands	r3, r2
 80025fe:	3301      	adds	r3, #1
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002602:	4b37      	ldr	r3, [pc, #220]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002604:	68da      	ldr	r2, [r3, #12]
 8002606:	2380      	movs	r3, #128	; 0x80
 8002608:	025b      	lsls	r3, r3, #9
 800260a:	4013      	ands	r3, r2
 800260c:	d01a      	beq.n	8002644 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800260e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002610:	61bb      	str	r3, [r7, #24]
 8002612:	2300      	movs	r3, #0
 8002614:	61fb      	str	r3, [r7, #28]
 8002616:	4a35      	ldr	r2, [pc, #212]	; (80026ec <HAL_RCC_GetSysClockFreq+0x144>)
 8002618:	2300      	movs	r3, #0
 800261a:	69b8      	ldr	r0, [r7, #24]
 800261c:	69f9      	ldr	r1, [r7, #28]
 800261e:	f7fd fe31 	bl	8000284 <__aeabi_lmul>
 8002622:	0002      	movs	r2, r0
 8002624:	000b      	movs	r3, r1
 8002626:	0010      	movs	r0, r2
 8002628:	0019      	movs	r1, r3
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	613b      	str	r3, [r7, #16]
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f7fd fe05 	bl	8000244 <__aeabi_uldivmod>
 800263a:	0002      	movs	r2, r0
 800263c:	000b      	movs	r3, r1
 800263e:	0013      	movs	r3, r2
 8002640:	637b      	str	r3, [r7, #52]	; 0x34
 8002642:	e037      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002644:	4b26      	ldr	r3, [pc, #152]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2210      	movs	r2, #16
 800264a:	4013      	ands	r3, r2
 800264c:	d01a      	beq.n	8002684 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800264e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	4a23      	ldr	r2, [pc, #140]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002658:	2300      	movs	r3, #0
 800265a:	68b8      	ldr	r0, [r7, #8]
 800265c:	68f9      	ldr	r1, [r7, #12]
 800265e:	f7fd fe11 	bl	8000284 <__aeabi_lmul>
 8002662:	0002      	movs	r2, r0
 8002664:	000b      	movs	r3, r1
 8002666:	0010      	movs	r0, r2
 8002668:	0019      	movs	r1, r3
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	603b      	str	r3, [r7, #0]
 800266e:	2300      	movs	r3, #0
 8002670:	607b      	str	r3, [r7, #4]
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f7fd fde5 	bl	8000244 <__aeabi_uldivmod>
 800267a:	0002      	movs	r2, r0
 800267c:	000b      	movs	r3, r1
 800267e:	0013      	movs	r3, r2
 8002680:	637b      	str	r3, [r7, #52]	; 0x34
 8002682:	e017      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002686:	0018      	movs	r0, r3
 8002688:	2300      	movs	r3, #0
 800268a:	0019      	movs	r1, r3
 800268c:	4a16      	ldr	r2, [pc, #88]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x140>)
 800268e:	2300      	movs	r3, #0
 8002690:	f7fd fdf8 	bl	8000284 <__aeabi_lmul>
 8002694:	0002      	movs	r2, r0
 8002696:	000b      	movs	r3, r1
 8002698:	0010      	movs	r0, r2
 800269a:	0019      	movs	r1, r3
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	001c      	movs	r4, r3
 80026a0:	2300      	movs	r3, #0
 80026a2:	001d      	movs	r5, r3
 80026a4:	0022      	movs	r2, r4
 80026a6:	002b      	movs	r3, r5
 80026a8:	f7fd fdcc 	bl	8000244 <__aeabi_uldivmod>
 80026ac:	0002      	movs	r2, r0
 80026ae:	000b      	movs	r3, r1
 80026b0:	0013      	movs	r3, r2
 80026b2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80026b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80026b8:	e00d      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80026ba:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x138>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	0b5b      	lsrs	r3, r3, #13
 80026c0:	2207      	movs	r2, #7
 80026c2:	4013      	ands	r3, r2
 80026c4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	3301      	adds	r3, #1
 80026ca:	2280      	movs	r2, #128	; 0x80
 80026cc:	0212      	lsls	r2, r2, #8
 80026ce:	409a      	lsls	r2, r3
 80026d0:	0013      	movs	r3, r2
 80026d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80026d4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80026d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80026d8:	0018      	movs	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	b00e      	add	sp, #56	; 0x38
 80026de:	bdb0      	pop	{r4, r5, r7, pc}
 80026e0:	40021000 	.word	0x40021000
 80026e4:	003d0900 	.word	0x003d0900
 80026e8:	00f42400 	.word	0x00f42400
 80026ec:	007a1200 	.word	0x007a1200
 80026f0:	08003f30 	.word	0x08003f30

080026f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026f8:	4b02      	ldr	r3, [pc, #8]	; (8002704 <HAL_RCC_GetHCLKFreq+0x10>)
 80026fa:	681b      	ldr	r3, [r3, #0]
}
 80026fc:	0018      	movs	r0, r3
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	46c0      	nop			; (mov r8, r8)
 8002704:	20000000 	.word	0x20000000

08002708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800270c:	f7ff fff2 	bl	80026f4 <HAL_RCC_GetHCLKFreq>
 8002710:	0001      	movs	r1, r0
 8002712:	4b06      	ldr	r3, [pc, #24]	; (800272c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	0a1b      	lsrs	r3, r3, #8
 8002718:	2207      	movs	r2, #7
 800271a:	4013      	ands	r3, r2
 800271c:	4a04      	ldr	r2, [pc, #16]	; (8002730 <HAL_RCC_GetPCLK1Freq+0x28>)
 800271e:	5cd3      	ldrb	r3, [r2, r3]
 8002720:	40d9      	lsrs	r1, r3
 8002722:	000b      	movs	r3, r1
}
 8002724:	0018      	movs	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	40021000 	.word	0x40021000
 8002730:	08003f28 	.word	0x08003f28

08002734 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002738:	f7ff ffdc 	bl	80026f4 <HAL_RCC_GetHCLKFreq>
 800273c:	0001      	movs	r1, r0
 800273e:	4b06      	ldr	r3, [pc, #24]	; (8002758 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	0adb      	lsrs	r3, r3, #11
 8002744:	2207      	movs	r2, #7
 8002746:	4013      	ands	r3, r2
 8002748:	4a04      	ldr	r2, [pc, #16]	; (800275c <HAL_RCC_GetPCLK2Freq+0x28>)
 800274a:	5cd3      	ldrb	r3, [r2, r3]
 800274c:	40d9      	lsrs	r1, r3
 800274e:	000b      	movs	r3, r1
}
 8002750:	0018      	movs	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	46c0      	nop			; (mov r8, r8)
 8002758:	40021000 	.word	0x40021000
 800275c:	08003f28 	.word	0x08003f28

08002760 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002768:	2317      	movs	r3, #23
 800276a:	18fb      	adds	r3, r7, r3
 800276c:	2200      	movs	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2220      	movs	r2, #32
 8002776:	4013      	ands	r3, r2
 8002778:	d106      	bne.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	2380      	movs	r3, #128	; 0x80
 8002780:	011b      	lsls	r3, r3, #4
 8002782:	4013      	ands	r3, r2
 8002784:	d100      	bne.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002786:	e104      	b.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002788:	4bb1      	ldr	r3, [pc, #708]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800278a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800278c:	2380      	movs	r3, #128	; 0x80
 800278e:	055b      	lsls	r3, r3, #21
 8002790:	4013      	ands	r3, r2
 8002792:	d10a      	bne.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002794:	4bae      	ldr	r3, [pc, #696]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002796:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002798:	4bad      	ldr	r3, [pc, #692]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800279a:	2180      	movs	r1, #128	; 0x80
 800279c:	0549      	lsls	r1, r1, #21
 800279e:	430a      	orrs	r2, r1
 80027a0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80027a2:	2317      	movs	r3, #23
 80027a4:	18fb      	adds	r3, r7, r3
 80027a6:	2201      	movs	r2, #1
 80027a8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027aa:	4baa      	ldr	r3, [pc, #680]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	2380      	movs	r3, #128	; 0x80
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	4013      	ands	r3, r2
 80027b4:	d11a      	bne.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027b6:	4ba7      	ldr	r3, [pc, #668]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	4ba6      	ldr	r3, [pc, #664]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027bc:	2180      	movs	r1, #128	; 0x80
 80027be:	0049      	lsls	r1, r1, #1
 80027c0:	430a      	orrs	r2, r1
 80027c2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027c4:	f7fe f9da 	bl	8000b7c <HAL_GetTick>
 80027c8:	0003      	movs	r3, r0
 80027ca:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027cc:	e008      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ce:	f7fe f9d5 	bl	8000b7c <HAL_GetTick>
 80027d2:	0002      	movs	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b64      	cmp	r3, #100	; 0x64
 80027da:	d901      	bls.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e133      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e0:	4b9c      	ldr	r3, [pc, #624]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	2380      	movs	r3, #128	; 0x80
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	4013      	ands	r3, r2
 80027ea:	d0f0      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80027ec:	4b98      	ldr	r3, [pc, #608]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	23c0      	movs	r3, #192	; 0xc0
 80027f2:	039b      	lsls	r3, r3, #14
 80027f4:	4013      	ands	r3, r2
 80027f6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	23c0      	movs	r3, #192	; 0xc0
 80027fe:	039b      	lsls	r3, r3, #14
 8002800:	4013      	ands	r3, r2
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	429a      	cmp	r2, r3
 8002806:	d107      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	23c0      	movs	r3, #192	; 0xc0
 800280e:	039b      	lsls	r3, r3, #14
 8002810:	4013      	ands	r3, r2
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	429a      	cmp	r2, r3
 8002816:	d013      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	23c0      	movs	r3, #192	; 0xc0
 800281e:	029b      	lsls	r3, r3, #10
 8002820:	401a      	ands	r2, r3
 8002822:	23c0      	movs	r3, #192	; 0xc0
 8002824:	029b      	lsls	r3, r3, #10
 8002826:	429a      	cmp	r2, r3
 8002828:	d10a      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800282a:	4b89      	ldr	r3, [pc, #548]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	2380      	movs	r3, #128	; 0x80
 8002830:	029b      	lsls	r3, r3, #10
 8002832:	401a      	ands	r2, r3
 8002834:	2380      	movs	r3, #128	; 0x80
 8002836:	029b      	lsls	r3, r3, #10
 8002838:	429a      	cmp	r2, r3
 800283a:	d101      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e103      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002840:	4b83      	ldr	r3, [pc, #524]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002842:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002844:	23c0      	movs	r3, #192	; 0xc0
 8002846:	029b      	lsls	r3, r3, #10
 8002848:	4013      	ands	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d049      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	23c0      	movs	r3, #192	; 0xc0
 8002858:	029b      	lsls	r3, r3, #10
 800285a:	4013      	ands	r3, r2
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	429a      	cmp	r2, r3
 8002860:	d004      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2220      	movs	r2, #32
 8002868:	4013      	ands	r3, r2
 800286a:	d10d      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	23c0      	movs	r3, #192	; 0xc0
 8002872:	029b      	lsls	r3, r3, #10
 8002874:	4013      	ands	r3, r2
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	429a      	cmp	r2, r3
 800287a:	d034      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	2380      	movs	r3, #128	; 0x80
 8002882:	011b      	lsls	r3, r3, #4
 8002884:	4013      	ands	r3, r2
 8002886:	d02e      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002888:	4b71      	ldr	r3, [pc, #452]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800288a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800288c:	4a72      	ldr	r2, [pc, #456]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800288e:	4013      	ands	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002892:	4b6f      	ldr	r3, [pc, #444]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002894:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002896:	4b6e      	ldr	r3, [pc, #440]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002898:	2180      	movs	r1, #128	; 0x80
 800289a:	0309      	lsls	r1, r1, #12
 800289c:	430a      	orrs	r2, r1
 800289e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028a0:	4b6b      	ldr	r3, [pc, #428]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80028a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028a4:	4b6a      	ldr	r3, [pc, #424]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80028a6:	496d      	ldr	r1, [pc, #436]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80028a8:	400a      	ands	r2, r1
 80028aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80028ac:	4b68      	ldr	r3, [pc, #416]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	2380      	movs	r3, #128	; 0x80
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	4013      	ands	r3, r2
 80028ba:	d014      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7fe f95e 	bl	8000b7c <HAL_GetTick>
 80028c0:	0003      	movs	r3, r0
 80028c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028c4:	e009      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c6:	f7fe f959 	bl	8000b7c <HAL_GetTick>
 80028ca:	0002      	movs	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	4a63      	ldr	r2, [pc, #396]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d901      	bls.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e0b6      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028da:	4b5d      	ldr	r3, [pc, #372]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80028dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028de:	2380      	movs	r3, #128	; 0x80
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4013      	ands	r3, r2
 80028e4:	d0ef      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	2380      	movs	r3, #128	; 0x80
 80028ec:	011b      	lsls	r3, r3, #4
 80028ee:	4013      	ands	r3, r2
 80028f0:	d01f      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	23c0      	movs	r3, #192	; 0xc0
 80028f8:	029b      	lsls	r3, r3, #10
 80028fa:	401a      	ands	r2, r3
 80028fc:	23c0      	movs	r3, #192	; 0xc0
 80028fe:	029b      	lsls	r3, r3, #10
 8002900:	429a      	cmp	r2, r3
 8002902:	d10c      	bne.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002904:	4b52      	ldr	r3, [pc, #328]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a56      	ldr	r2, [pc, #344]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800290a:	4013      	ands	r3, r2
 800290c:	0019      	movs	r1, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	23c0      	movs	r3, #192	; 0xc0
 8002914:	039b      	lsls	r3, r3, #14
 8002916:	401a      	ands	r2, r3
 8002918:	4b4d      	ldr	r3, [pc, #308]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800291a:	430a      	orrs	r2, r1
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	4b4c      	ldr	r3, [pc, #304]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002920:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	23c0      	movs	r3, #192	; 0xc0
 8002928:	029b      	lsls	r3, r3, #10
 800292a:	401a      	ands	r2, r3
 800292c:	4b48      	ldr	r3, [pc, #288]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800292e:	430a      	orrs	r2, r1
 8002930:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2220      	movs	r2, #32
 8002938:	4013      	ands	r3, r2
 800293a:	d01f      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	23c0      	movs	r3, #192	; 0xc0
 8002942:	029b      	lsls	r3, r3, #10
 8002944:	401a      	ands	r2, r3
 8002946:	23c0      	movs	r3, #192	; 0xc0
 8002948:	029b      	lsls	r3, r3, #10
 800294a:	429a      	cmp	r2, r3
 800294c:	d10c      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800294e:	4b40      	ldr	r3, [pc, #256]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a44      	ldr	r2, [pc, #272]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002954:	4013      	ands	r3, r2
 8002956:	0019      	movs	r1, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	23c0      	movs	r3, #192	; 0xc0
 800295e:	039b      	lsls	r3, r3, #14
 8002960:	401a      	ands	r2, r3
 8002962:	4b3b      	ldr	r3, [pc, #236]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002964:	430a      	orrs	r2, r1
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	4b39      	ldr	r3, [pc, #228]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800296a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	23c0      	movs	r3, #192	; 0xc0
 8002972:	029b      	lsls	r3, r3, #10
 8002974:	401a      	ands	r2, r3
 8002976:	4b36      	ldr	r3, [pc, #216]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002978:	430a      	orrs	r2, r1
 800297a:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800297c:	2317      	movs	r3, #23
 800297e:	18fb      	adds	r3, r7, r3
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d105      	bne.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002986:	4b32      	ldr	r3, [pc, #200]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800298a:	4b31      	ldr	r3, [pc, #196]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800298c:	4936      	ldr	r1, [pc, #216]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800298e:	400a      	ands	r2, r1
 8002990:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2201      	movs	r2, #1
 8002998:	4013      	ands	r3, r2
 800299a:	d009      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800299c:	4b2c      	ldr	r3, [pc, #176]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800299e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a0:	2203      	movs	r2, #3
 80029a2:	4393      	bics	r3, r2
 80029a4:	0019      	movs	r1, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	4b29      	ldr	r3, [pc, #164]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80029ac:	430a      	orrs	r2, r1
 80029ae:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2202      	movs	r2, #2
 80029b6:	4013      	ands	r3, r2
 80029b8:	d009      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029ba:	4b25      	ldr	r3, [pc, #148]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80029bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029be:	220c      	movs	r2, #12
 80029c0:	4393      	bics	r3, r2
 80029c2:	0019      	movs	r1, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	4b21      	ldr	r3, [pc, #132]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80029ca:	430a      	orrs	r2, r1
 80029cc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2204      	movs	r2, #4
 80029d4:	4013      	ands	r3, r2
 80029d6:	d009      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029d8:	4b1d      	ldr	r3, [pc, #116]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80029da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029dc:	4a23      	ldr	r2, [pc, #140]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80029de:	4013      	ands	r3, r2
 80029e0:	0019      	movs	r1, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695a      	ldr	r2, [r3, #20]
 80029e6:	4b1a      	ldr	r3, [pc, #104]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80029e8:	430a      	orrs	r2, r1
 80029ea:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2208      	movs	r2, #8
 80029f2:	4013      	ands	r3, r2
 80029f4:	d009      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029f6:	4b16      	ldr	r3, [pc, #88]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80029f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fa:	4a1d      	ldr	r2, [pc, #116]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	0019      	movs	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	699a      	ldr	r2, [r3, #24]
 8002a04:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a06:	430a      	orrs	r2, r1
 8002a08:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2240      	movs	r2, #64	; 0x40
 8002a10:	4013      	ands	r3, r2
 8002a12:	d009      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a14:	4b0e      	ldr	r3, [pc, #56]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a18:	4a16      	ldr	r2, [pc, #88]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1a      	ldr	r2, [r3, #32]
 8002a22:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a24:	430a      	orrs	r2, r1
 8002a26:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2280      	movs	r2, #128	; 0x80
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d009      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002a32:	4b07      	ldr	r3, [pc, #28]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a36:	4a10      	ldr	r2, [pc, #64]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002a38:	4013      	ands	r3, r2
 8002a3a:	0019      	movs	r1, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69da      	ldr	r2, [r3, #28]
 8002a40:	4b03      	ldr	r3, [pc, #12]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a42:	430a      	orrs	r2, r1
 8002a44:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	0018      	movs	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	b006      	add	sp, #24
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40007000 	.word	0x40007000
 8002a58:	fffcffff 	.word	0xfffcffff
 8002a5c:	fff7ffff 	.word	0xfff7ffff
 8002a60:	00001388 	.word	0x00001388
 8002a64:	ffcfffff 	.word	0xffcfffff
 8002a68:	efffffff 	.word	0xefffffff
 8002a6c:	fffff3ff 	.word	0xfffff3ff
 8002a70:	ffffcfff 	.word	0xffffcfff
 8002a74:	fbffffff 	.word	0xfbffffff
 8002a78:	fff3ffff 	.word	0xfff3ffff

08002a7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e044      	b.n	8002b18 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d107      	bne.n	8002aa6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2278      	movs	r2, #120	; 0x78
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f7fd ff37 	bl	8000914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2224      	movs	r2, #36	; 0x24
 8002aaa:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	438a      	bics	r2, r1
 8002aba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f000 f8d0 	bl	8002c64 <UART_SetConfig>
 8002ac4:	0003      	movs	r3, r0
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d101      	bne.n	8002ace <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e024      	b.n	8002b18 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f000 fb47 	bl	800316c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	490d      	ldr	r1, [pc, #52]	; (8002b20 <HAL_UART_Init+0xa4>)
 8002aea:	400a      	ands	r2, r1
 8002aec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	212a      	movs	r1, #42	; 0x2a
 8002afa:	438a      	bics	r2, r1
 8002afc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2101      	movs	r1, #1
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	0018      	movs	r0, r3
 8002b12:	f000 fbdf 	bl	80032d4 <UART_CheckIdleState>
 8002b16:	0003      	movs	r3, r0
}
 8002b18:	0018      	movs	r0, r3
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	b002      	add	sp, #8
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	ffffb7ff 	.word	0xffffb7ff

08002b24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08a      	sub	sp, #40	; 0x28
 8002b28:	af02      	add	r7, sp, #8
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	603b      	str	r3, [r7, #0]
 8002b30:	1dbb      	adds	r3, r7, #6
 8002b32:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b38:	2b20      	cmp	r3, #32
 8002b3a:	d000      	beq.n	8002b3e <HAL_UART_Transmit+0x1a>
 8002b3c:	e08c      	b.n	8002c58 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <HAL_UART_Transmit+0x28>
 8002b44:	1dbb      	adds	r3, r7, #6
 8002b46:	881b      	ldrh	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e084      	b.n	8002c5a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	2380      	movs	r3, #128	; 0x80
 8002b56:	015b      	lsls	r3, r3, #5
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d109      	bne.n	8002b70 <HAL_UART_Transmit+0x4c>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d105      	bne.n	8002b70 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	2201      	movs	r2, #1
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d001      	beq.n	8002b70 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e074      	b.n	8002c5a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2284      	movs	r2, #132	; 0x84
 8002b74:	2100      	movs	r1, #0
 8002b76:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2221      	movs	r2, #33	; 0x21
 8002b7c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b7e:	f7fd fffd 	bl	8000b7c <HAL_GetTick>
 8002b82:	0003      	movs	r3, r0
 8002b84:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	1dba      	adds	r2, r7, #6
 8002b8a:	2150      	movs	r1, #80	; 0x50
 8002b8c:	8812      	ldrh	r2, [r2, #0]
 8002b8e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	1dba      	adds	r2, r7, #6
 8002b94:	2152      	movs	r1, #82	; 0x52
 8002b96:	8812      	ldrh	r2, [r2, #0]
 8002b98:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	2380      	movs	r3, #128	; 0x80
 8002ba0:	015b      	lsls	r3, r3, #5
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d108      	bne.n	8002bb8 <HAL_UART_Transmit+0x94>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d104      	bne.n	8002bb8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	61bb      	str	r3, [r7, #24]
 8002bb6:	e003      	b.n	8002bc0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002bc0:	e02f      	b.n	8002c22 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	0013      	movs	r3, r2
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2180      	movs	r1, #128	; 0x80
 8002bd0:	f000 fc28 	bl	8003424 <UART_WaitOnFlagUntilTimeout>
 8002bd4:	1e03      	subs	r3, r0, #0
 8002bd6:	d004      	beq.n	8002be2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e03b      	b.n	8002c5a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10b      	bne.n	8002c00 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	001a      	movs	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	05d2      	lsls	r2, r2, #23
 8002bf4:	0dd2      	lsrs	r2, r2, #23
 8002bf6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	3302      	adds	r3, #2
 8002bfc:	61bb      	str	r3, [r7, #24]
 8002bfe:	e007      	b.n	8002c10 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	781a      	ldrb	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2252      	movs	r2, #82	; 0x52
 8002c14:	5a9b      	ldrh	r3, [r3, r2]
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b299      	uxth	r1, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2252      	movs	r2, #82	; 0x52
 8002c20:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2252      	movs	r2, #82	; 0x52
 8002c26:	5a9b      	ldrh	r3, [r3, r2]
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1c9      	bne.n	8002bc2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	0013      	movs	r3, r2
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2140      	movs	r1, #64	; 0x40
 8002c3c:	f000 fbf2 	bl	8003424 <UART_WaitOnFlagUntilTimeout>
 8002c40:	1e03      	subs	r3, r0, #0
 8002c42:	d004      	beq.n	8002c4e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2220      	movs	r2, #32
 8002c48:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e005      	b.n	8002c5a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2220      	movs	r2, #32
 8002c52:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	e000      	b.n	8002c5a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002c58:	2302      	movs	r3, #2
  }
}
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b008      	add	sp, #32
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c64:	b5b0      	push	{r4, r5, r7, lr}
 8002c66:	b08e      	sub	sp, #56	; 0x38
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c6c:	231a      	movs	r3, #26
 8002c6e:	2218      	movs	r2, #24
 8002c70:	189b      	adds	r3, r3, r2
 8002c72:	19db      	adds	r3, r3, r7
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	431a      	orrs	r2, r3
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	431a      	orrs	r2, r3
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	69db      	ldr	r3, [r3, #28]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4ac6      	ldr	r2, [pc, #792]	; (8002fb0 <UART_SetConfig+0x34c>)
 8002c98:	4013      	ands	r3, r2
 8002c9a:	0019      	movs	r1, r3
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	4ac1      	ldr	r2, [pc, #772]	; (8002fb4 <UART_SetConfig+0x350>)
 8002cae:	4013      	ands	r3, r2
 8002cb0:	0019      	movs	r1, r3
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4abb      	ldr	r2, [pc, #748]	; (8002fb8 <UART_SetConfig+0x354>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d004      	beq.n	8002cd8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	4ab7      	ldr	r2, [pc, #732]	; (8002fbc <UART_SetConfig+0x358>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cea:	430a      	orrs	r2, r1
 8002cec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4ab3      	ldr	r2, [pc, #716]	; (8002fc0 <UART_SetConfig+0x35c>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d131      	bne.n	8002d5c <UART_SetConfig+0xf8>
 8002cf8:	4bb2      	ldr	r3, [pc, #712]	; (8002fc4 <UART_SetConfig+0x360>)
 8002cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cfc:	2203      	movs	r2, #3
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b03      	cmp	r3, #3
 8002d02:	d01d      	beq.n	8002d40 <UART_SetConfig+0xdc>
 8002d04:	d823      	bhi.n	8002d4e <UART_SetConfig+0xea>
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d00c      	beq.n	8002d24 <UART_SetConfig+0xc0>
 8002d0a:	d820      	bhi.n	8002d4e <UART_SetConfig+0xea>
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d002      	beq.n	8002d16 <UART_SetConfig+0xb2>
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d00e      	beq.n	8002d32 <UART_SetConfig+0xce>
 8002d14:	e01b      	b.n	8002d4e <UART_SetConfig+0xea>
 8002d16:	231b      	movs	r3, #27
 8002d18:	2218      	movs	r2, #24
 8002d1a:	189b      	adds	r3, r3, r2
 8002d1c:	19db      	adds	r3, r3, r7
 8002d1e:	2201      	movs	r2, #1
 8002d20:	701a      	strb	r2, [r3, #0]
 8002d22:	e09c      	b.n	8002e5e <UART_SetConfig+0x1fa>
 8002d24:	231b      	movs	r3, #27
 8002d26:	2218      	movs	r2, #24
 8002d28:	189b      	adds	r3, r3, r2
 8002d2a:	19db      	adds	r3, r3, r7
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	701a      	strb	r2, [r3, #0]
 8002d30:	e095      	b.n	8002e5e <UART_SetConfig+0x1fa>
 8002d32:	231b      	movs	r3, #27
 8002d34:	2218      	movs	r2, #24
 8002d36:	189b      	adds	r3, r3, r2
 8002d38:	19db      	adds	r3, r3, r7
 8002d3a:	2204      	movs	r2, #4
 8002d3c:	701a      	strb	r2, [r3, #0]
 8002d3e:	e08e      	b.n	8002e5e <UART_SetConfig+0x1fa>
 8002d40:	231b      	movs	r3, #27
 8002d42:	2218      	movs	r2, #24
 8002d44:	189b      	adds	r3, r3, r2
 8002d46:	19db      	adds	r3, r3, r7
 8002d48:	2208      	movs	r2, #8
 8002d4a:	701a      	strb	r2, [r3, #0]
 8002d4c:	e087      	b.n	8002e5e <UART_SetConfig+0x1fa>
 8002d4e:	231b      	movs	r3, #27
 8002d50:	2218      	movs	r2, #24
 8002d52:	189b      	adds	r3, r3, r2
 8002d54:	19db      	adds	r3, r3, r7
 8002d56:	2210      	movs	r2, #16
 8002d58:	701a      	strb	r2, [r3, #0]
 8002d5a:	e080      	b.n	8002e5e <UART_SetConfig+0x1fa>
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a99      	ldr	r2, [pc, #612]	; (8002fc8 <UART_SetConfig+0x364>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d131      	bne.n	8002dca <UART_SetConfig+0x166>
 8002d66:	4b97      	ldr	r3, [pc, #604]	; (8002fc4 <UART_SetConfig+0x360>)
 8002d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d6a:	220c      	movs	r2, #12
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	2b0c      	cmp	r3, #12
 8002d70:	d01d      	beq.n	8002dae <UART_SetConfig+0x14a>
 8002d72:	d823      	bhi.n	8002dbc <UART_SetConfig+0x158>
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d00c      	beq.n	8002d92 <UART_SetConfig+0x12e>
 8002d78:	d820      	bhi.n	8002dbc <UART_SetConfig+0x158>
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d002      	beq.n	8002d84 <UART_SetConfig+0x120>
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d00e      	beq.n	8002da0 <UART_SetConfig+0x13c>
 8002d82:	e01b      	b.n	8002dbc <UART_SetConfig+0x158>
 8002d84:	231b      	movs	r3, #27
 8002d86:	2218      	movs	r2, #24
 8002d88:	189b      	adds	r3, r3, r2
 8002d8a:	19db      	adds	r3, r3, r7
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	701a      	strb	r2, [r3, #0]
 8002d90:	e065      	b.n	8002e5e <UART_SetConfig+0x1fa>
 8002d92:	231b      	movs	r3, #27
 8002d94:	2218      	movs	r2, #24
 8002d96:	189b      	adds	r3, r3, r2
 8002d98:	19db      	adds	r3, r3, r7
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	701a      	strb	r2, [r3, #0]
 8002d9e:	e05e      	b.n	8002e5e <UART_SetConfig+0x1fa>
 8002da0:	231b      	movs	r3, #27
 8002da2:	2218      	movs	r2, #24
 8002da4:	189b      	adds	r3, r3, r2
 8002da6:	19db      	adds	r3, r3, r7
 8002da8:	2204      	movs	r2, #4
 8002daa:	701a      	strb	r2, [r3, #0]
 8002dac:	e057      	b.n	8002e5e <UART_SetConfig+0x1fa>
 8002dae:	231b      	movs	r3, #27
 8002db0:	2218      	movs	r2, #24
 8002db2:	189b      	adds	r3, r3, r2
 8002db4:	19db      	adds	r3, r3, r7
 8002db6:	2208      	movs	r2, #8
 8002db8:	701a      	strb	r2, [r3, #0]
 8002dba:	e050      	b.n	8002e5e <UART_SetConfig+0x1fa>
 8002dbc:	231b      	movs	r3, #27
 8002dbe:	2218      	movs	r2, #24
 8002dc0:	189b      	adds	r3, r3, r2
 8002dc2:	19db      	adds	r3, r3, r7
 8002dc4:	2210      	movs	r2, #16
 8002dc6:	701a      	strb	r2, [r3, #0]
 8002dc8:	e049      	b.n	8002e5e <UART_SetConfig+0x1fa>
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a7a      	ldr	r2, [pc, #488]	; (8002fb8 <UART_SetConfig+0x354>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d13e      	bne.n	8002e52 <UART_SetConfig+0x1ee>
 8002dd4:	4b7b      	ldr	r3, [pc, #492]	; (8002fc4 <UART_SetConfig+0x360>)
 8002dd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002dd8:	23c0      	movs	r3, #192	; 0xc0
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	4013      	ands	r3, r2
 8002dde:	22c0      	movs	r2, #192	; 0xc0
 8002de0:	0112      	lsls	r2, r2, #4
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d027      	beq.n	8002e36 <UART_SetConfig+0x1d2>
 8002de6:	22c0      	movs	r2, #192	; 0xc0
 8002de8:	0112      	lsls	r2, r2, #4
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d82a      	bhi.n	8002e44 <UART_SetConfig+0x1e0>
 8002dee:	2280      	movs	r2, #128	; 0x80
 8002df0:	0112      	lsls	r2, r2, #4
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d011      	beq.n	8002e1a <UART_SetConfig+0x1b6>
 8002df6:	2280      	movs	r2, #128	; 0x80
 8002df8:	0112      	lsls	r2, r2, #4
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d822      	bhi.n	8002e44 <UART_SetConfig+0x1e0>
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d004      	beq.n	8002e0c <UART_SetConfig+0x1a8>
 8002e02:	2280      	movs	r2, #128	; 0x80
 8002e04:	00d2      	lsls	r2, r2, #3
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d00e      	beq.n	8002e28 <UART_SetConfig+0x1c4>
 8002e0a:	e01b      	b.n	8002e44 <UART_SetConfig+0x1e0>
 8002e0c:	231b      	movs	r3, #27
 8002e0e:	2218      	movs	r2, #24
 8002e10:	189b      	adds	r3, r3, r2
 8002e12:	19db      	adds	r3, r3, r7
 8002e14:	2200      	movs	r2, #0
 8002e16:	701a      	strb	r2, [r3, #0]
 8002e18:	e021      	b.n	8002e5e <UART_SetConfig+0x1fa>
 8002e1a:	231b      	movs	r3, #27
 8002e1c:	2218      	movs	r2, #24
 8002e1e:	189b      	adds	r3, r3, r2
 8002e20:	19db      	adds	r3, r3, r7
 8002e22:	2202      	movs	r2, #2
 8002e24:	701a      	strb	r2, [r3, #0]
 8002e26:	e01a      	b.n	8002e5e <UART_SetConfig+0x1fa>
 8002e28:	231b      	movs	r3, #27
 8002e2a:	2218      	movs	r2, #24
 8002e2c:	189b      	adds	r3, r3, r2
 8002e2e:	19db      	adds	r3, r3, r7
 8002e30:	2204      	movs	r2, #4
 8002e32:	701a      	strb	r2, [r3, #0]
 8002e34:	e013      	b.n	8002e5e <UART_SetConfig+0x1fa>
 8002e36:	231b      	movs	r3, #27
 8002e38:	2218      	movs	r2, #24
 8002e3a:	189b      	adds	r3, r3, r2
 8002e3c:	19db      	adds	r3, r3, r7
 8002e3e:	2208      	movs	r2, #8
 8002e40:	701a      	strb	r2, [r3, #0]
 8002e42:	e00c      	b.n	8002e5e <UART_SetConfig+0x1fa>
 8002e44:	231b      	movs	r3, #27
 8002e46:	2218      	movs	r2, #24
 8002e48:	189b      	adds	r3, r3, r2
 8002e4a:	19db      	adds	r3, r3, r7
 8002e4c:	2210      	movs	r2, #16
 8002e4e:	701a      	strb	r2, [r3, #0]
 8002e50:	e005      	b.n	8002e5e <UART_SetConfig+0x1fa>
 8002e52:	231b      	movs	r3, #27
 8002e54:	2218      	movs	r2, #24
 8002e56:	189b      	adds	r3, r3, r2
 8002e58:	19db      	adds	r3, r3, r7
 8002e5a:	2210      	movs	r2, #16
 8002e5c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a55      	ldr	r2, [pc, #340]	; (8002fb8 <UART_SetConfig+0x354>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d000      	beq.n	8002e6a <UART_SetConfig+0x206>
 8002e68:	e084      	b.n	8002f74 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e6a:	231b      	movs	r3, #27
 8002e6c:	2218      	movs	r2, #24
 8002e6e:	189b      	adds	r3, r3, r2
 8002e70:	19db      	adds	r3, r3, r7
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d01d      	beq.n	8002eb4 <UART_SetConfig+0x250>
 8002e78:	dc20      	bgt.n	8002ebc <UART_SetConfig+0x258>
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d015      	beq.n	8002eaa <UART_SetConfig+0x246>
 8002e7e:	dc1d      	bgt.n	8002ebc <UART_SetConfig+0x258>
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <UART_SetConfig+0x226>
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d005      	beq.n	8002e94 <UART_SetConfig+0x230>
 8002e88:	e018      	b.n	8002ebc <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e8a:	f7ff fc3d 	bl	8002708 <HAL_RCC_GetPCLK1Freq>
 8002e8e:	0003      	movs	r3, r0
 8002e90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e92:	e01c      	b.n	8002ece <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e94:	4b4b      	ldr	r3, [pc, #300]	; (8002fc4 <UART_SetConfig+0x360>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2210      	movs	r2, #16
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d002      	beq.n	8002ea4 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002e9e:	4b4b      	ldr	r3, [pc, #300]	; (8002fcc <UART_SetConfig+0x368>)
 8002ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002ea2:	e014      	b.n	8002ece <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8002ea4:	4b4a      	ldr	r3, [pc, #296]	; (8002fd0 <UART_SetConfig+0x36c>)
 8002ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ea8:	e011      	b.n	8002ece <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eaa:	f7ff fb7d 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 8002eae:	0003      	movs	r3, r0
 8002eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002eb2:	e00c      	b.n	8002ece <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002eb4:	2380      	movs	r3, #128	; 0x80
 8002eb6:	021b      	lsls	r3, r3, #8
 8002eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002eba:	e008      	b.n	8002ece <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002ec0:	231a      	movs	r3, #26
 8002ec2:	2218      	movs	r2, #24
 8002ec4:	189b      	adds	r3, r3, r2
 8002ec6:	19db      	adds	r3, r3, r7
 8002ec8:	2201      	movs	r2, #1
 8002eca:	701a      	strb	r2, [r3, #0]
        break;
 8002ecc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d100      	bne.n	8002ed6 <UART_SetConfig+0x272>
 8002ed4:	e132      	b.n	800313c <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	0013      	movs	r3, r2
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	189b      	adds	r3, r3, r2
 8002ee0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d305      	bcc.n	8002ef2 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002eec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d906      	bls.n	8002f00 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8002ef2:	231a      	movs	r3, #26
 8002ef4:	2218      	movs	r2, #24
 8002ef6:	189b      	adds	r3, r3, r2
 8002ef8:	19db      	adds	r3, r3, r7
 8002efa:	2201      	movs	r2, #1
 8002efc:	701a      	strb	r2, [r3, #0]
 8002efe:	e11d      	b.n	800313c <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f02:	613b      	str	r3, [r7, #16]
 8002f04:	2300      	movs	r3, #0
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	6939      	ldr	r1, [r7, #16]
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	000b      	movs	r3, r1
 8002f0e:	0e1b      	lsrs	r3, r3, #24
 8002f10:	0010      	movs	r0, r2
 8002f12:	0205      	lsls	r5, r0, #8
 8002f14:	431d      	orrs	r5, r3
 8002f16:	000b      	movs	r3, r1
 8002f18:	021c      	lsls	r4, r3, #8
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	085b      	lsrs	r3, r3, #1
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	68b8      	ldr	r0, [r7, #8]
 8002f28:	68f9      	ldr	r1, [r7, #12]
 8002f2a:	1900      	adds	r0, r0, r4
 8002f2c:	4169      	adcs	r1, r5
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	603b      	str	r3, [r7, #0]
 8002f34:	2300      	movs	r3, #0
 8002f36:	607b      	str	r3, [r7, #4]
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f7fd f982 	bl	8000244 <__aeabi_uldivmod>
 8002f40:	0002      	movs	r2, r0
 8002f42:	000b      	movs	r3, r1
 8002f44:	0013      	movs	r3, r2
 8002f46:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f4a:	23c0      	movs	r3, #192	; 0xc0
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d309      	bcc.n	8002f66 <UART_SetConfig+0x302>
 8002f52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f54:	2380      	movs	r3, #128	; 0x80
 8002f56:	035b      	lsls	r3, r3, #13
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d204      	bcs.n	8002f66 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f62:	60da      	str	r2, [r3, #12]
 8002f64:	e0ea      	b.n	800313c <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8002f66:	231a      	movs	r3, #26
 8002f68:	2218      	movs	r2, #24
 8002f6a:	189b      	adds	r3, r3, r2
 8002f6c:	19db      	adds	r3, r3, r7
 8002f6e:	2201      	movs	r2, #1
 8002f70:	701a      	strb	r2, [r3, #0]
 8002f72:	e0e3      	b.n	800313c <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	69da      	ldr	r2, [r3, #28]
 8002f78:	2380      	movs	r3, #128	; 0x80
 8002f7a:	021b      	lsls	r3, r3, #8
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d000      	beq.n	8002f82 <UART_SetConfig+0x31e>
 8002f80:	e085      	b.n	800308e <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8002f82:	231b      	movs	r3, #27
 8002f84:	2218      	movs	r2, #24
 8002f86:	189b      	adds	r3, r3, r2
 8002f88:	19db      	adds	r3, r3, r7
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d837      	bhi.n	8003000 <UART_SetConfig+0x39c>
 8002f90:	009a      	lsls	r2, r3, #2
 8002f92:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <UART_SetConfig+0x370>)
 8002f94:	18d3      	adds	r3, r2, r3
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f9a:	f7ff fbb5 	bl	8002708 <HAL_RCC_GetPCLK1Freq>
 8002f9e:	0003      	movs	r3, r0
 8002fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fa2:	e036      	b.n	8003012 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fa4:	f7ff fbc6 	bl	8002734 <HAL_RCC_GetPCLK2Freq>
 8002fa8:	0003      	movs	r3, r0
 8002faa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fac:	e031      	b.n	8003012 <UART_SetConfig+0x3ae>
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	efff69f3 	.word	0xefff69f3
 8002fb4:	ffffcfff 	.word	0xffffcfff
 8002fb8:	40004800 	.word	0x40004800
 8002fbc:	fffff4ff 	.word	0xfffff4ff
 8002fc0:	40013800 	.word	0x40013800
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40004400 	.word	0x40004400
 8002fcc:	003d0900 	.word	0x003d0900
 8002fd0:	00f42400 	.word	0x00f42400
 8002fd4:	08003f3c 	.word	0x08003f3c
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fd8:	4b60      	ldr	r3, [pc, #384]	; (800315c <UART_SetConfig+0x4f8>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2210      	movs	r2, #16
 8002fde:	4013      	ands	r3, r2
 8002fe0:	d002      	beq.n	8002fe8 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002fe2:	4b5f      	ldr	r3, [pc, #380]	; (8003160 <UART_SetConfig+0x4fc>)
 8002fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002fe6:	e014      	b.n	8003012 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8002fe8:	4b5e      	ldr	r3, [pc, #376]	; (8003164 <UART_SetConfig+0x500>)
 8002fea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fec:	e011      	b.n	8003012 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fee:	f7ff fadb 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 8002ff2:	0003      	movs	r3, r0
 8002ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ff6:	e00c      	b.n	8003012 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ff8:	2380      	movs	r3, #128	; 0x80
 8002ffa:	021b      	lsls	r3, r3, #8
 8002ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ffe:	e008      	b.n	8003012 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003004:	231a      	movs	r3, #26
 8003006:	2218      	movs	r2, #24
 8003008:	189b      	adds	r3, r3, r2
 800300a:	19db      	adds	r3, r3, r7
 800300c:	2201      	movs	r2, #1
 800300e:	701a      	strb	r2, [r3, #0]
        break;
 8003010:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003014:	2b00      	cmp	r3, #0
 8003016:	d100      	bne.n	800301a <UART_SetConfig+0x3b6>
 8003018:	e090      	b.n	800313c <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800301a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301c:	005a      	lsls	r2, r3, #1
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	085b      	lsrs	r3, r3, #1
 8003024:	18d2      	adds	r2, r2, r3
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	0019      	movs	r1, r3
 800302c:	0010      	movs	r0, r2
 800302e:	f7fd f87d 	bl	800012c <__udivsi3>
 8003032:	0003      	movs	r3, r0
 8003034:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003038:	2b0f      	cmp	r3, #15
 800303a:	d921      	bls.n	8003080 <UART_SetConfig+0x41c>
 800303c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800303e:	2380      	movs	r3, #128	; 0x80
 8003040:	025b      	lsls	r3, r3, #9
 8003042:	429a      	cmp	r2, r3
 8003044:	d21c      	bcs.n	8003080 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003048:	b29a      	uxth	r2, r3
 800304a:	200e      	movs	r0, #14
 800304c:	2418      	movs	r4, #24
 800304e:	1903      	adds	r3, r0, r4
 8003050:	19db      	adds	r3, r3, r7
 8003052:	210f      	movs	r1, #15
 8003054:	438a      	bics	r2, r1
 8003056:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305a:	085b      	lsrs	r3, r3, #1
 800305c:	b29b      	uxth	r3, r3
 800305e:	2207      	movs	r2, #7
 8003060:	4013      	ands	r3, r2
 8003062:	b299      	uxth	r1, r3
 8003064:	1903      	adds	r3, r0, r4
 8003066:	19db      	adds	r3, r3, r7
 8003068:	1902      	adds	r2, r0, r4
 800306a:	19d2      	adds	r2, r2, r7
 800306c:	8812      	ldrh	r2, [r2, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	1902      	adds	r2, r0, r4
 8003078:	19d2      	adds	r2, r2, r7
 800307a:	8812      	ldrh	r2, [r2, #0]
 800307c:	60da      	str	r2, [r3, #12]
 800307e:	e05d      	b.n	800313c <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8003080:	231a      	movs	r3, #26
 8003082:	2218      	movs	r2, #24
 8003084:	189b      	adds	r3, r3, r2
 8003086:	19db      	adds	r3, r3, r7
 8003088:	2201      	movs	r2, #1
 800308a:	701a      	strb	r2, [r3, #0]
 800308c:	e056      	b.n	800313c <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800308e:	231b      	movs	r3, #27
 8003090:	2218      	movs	r2, #24
 8003092:	189b      	adds	r3, r3, r2
 8003094:	19db      	adds	r3, r3, r7
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b08      	cmp	r3, #8
 800309a:	d822      	bhi.n	80030e2 <UART_SetConfig+0x47e>
 800309c:	009a      	lsls	r2, r3, #2
 800309e:	4b32      	ldr	r3, [pc, #200]	; (8003168 <UART_SetConfig+0x504>)
 80030a0:	18d3      	adds	r3, r2, r3
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030a6:	f7ff fb2f 	bl	8002708 <HAL_RCC_GetPCLK1Freq>
 80030aa:	0003      	movs	r3, r0
 80030ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030ae:	e021      	b.n	80030f4 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030b0:	f7ff fb40 	bl	8002734 <HAL_RCC_GetPCLK2Freq>
 80030b4:	0003      	movs	r3, r0
 80030b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030b8:	e01c      	b.n	80030f4 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030ba:	4b28      	ldr	r3, [pc, #160]	; (800315c <UART_SetConfig+0x4f8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2210      	movs	r2, #16
 80030c0:	4013      	ands	r3, r2
 80030c2:	d002      	beq.n	80030ca <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80030c4:	4b26      	ldr	r3, [pc, #152]	; (8003160 <UART_SetConfig+0x4fc>)
 80030c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80030c8:	e014      	b.n	80030f4 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 80030ca:	4b26      	ldr	r3, [pc, #152]	; (8003164 <UART_SetConfig+0x500>)
 80030cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030ce:	e011      	b.n	80030f4 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030d0:	f7ff fa6a 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 80030d4:	0003      	movs	r3, r0
 80030d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030d8:	e00c      	b.n	80030f4 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030da:	2380      	movs	r3, #128	; 0x80
 80030dc:	021b      	lsls	r3, r3, #8
 80030de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030e0:	e008      	b.n	80030f4 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80030e6:	231a      	movs	r3, #26
 80030e8:	2218      	movs	r2, #24
 80030ea:	189b      	adds	r3, r3, r2
 80030ec:	19db      	adds	r3, r3, r7
 80030ee:	2201      	movs	r2, #1
 80030f0:	701a      	strb	r2, [r3, #0]
        break;
 80030f2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80030f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d020      	beq.n	800313c <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	085a      	lsrs	r2, r3, #1
 8003100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003102:	18d2      	adds	r2, r2, r3
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	0019      	movs	r1, r3
 800310a:	0010      	movs	r0, r2
 800310c:	f7fd f80e 	bl	800012c <__udivsi3>
 8003110:	0003      	movs	r3, r0
 8003112:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003116:	2b0f      	cmp	r3, #15
 8003118:	d90a      	bls.n	8003130 <UART_SetConfig+0x4cc>
 800311a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800311c:	2380      	movs	r3, #128	; 0x80
 800311e:	025b      	lsls	r3, r3, #9
 8003120:	429a      	cmp	r2, r3
 8003122:	d205      	bcs.n	8003130 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003126:	b29a      	uxth	r2, r3
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	60da      	str	r2, [r3, #12]
 800312e:	e005      	b.n	800313c <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8003130:	231a      	movs	r3, #26
 8003132:	2218      	movs	r2, #24
 8003134:	189b      	adds	r3, r3, r2
 8003136:	19db      	adds	r3, r3, r7
 8003138:	2201      	movs	r2, #1
 800313a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	2200      	movs	r2, #0
 8003140:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	2200      	movs	r2, #0
 8003146:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003148:	231a      	movs	r3, #26
 800314a:	2218      	movs	r2, #24
 800314c:	189b      	adds	r3, r3, r2
 800314e:	19db      	adds	r3, r3, r7
 8003150:	781b      	ldrb	r3, [r3, #0]
}
 8003152:	0018      	movs	r0, r3
 8003154:	46bd      	mov	sp, r7
 8003156:	b00e      	add	sp, #56	; 0x38
 8003158:	bdb0      	pop	{r4, r5, r7, pc}
 800315a:	46c0      	nop			; (mov r8, r8)
 800315c:	40021000 	.word	0x40021000
 8003160:	003d0900 	.word	0x003d0900
 8003164:	00f42400 	.word	0x00f42400
 8003168:	08003f60 	.word	0x08003f60

0800316c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	2201      	movs	r2, #1
 800317a:	4013      	ands	r3, r2
 800317c:	d00b      	beq.n	8003196 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	4a4a      	ldr	r2, [pc, #296]	; (80032b0 <UART_AdvFeatureConfig+0x144>)
 8003186:	4013      	ands	r3, r2
 8003188:	0019      	movs	r1, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	2202      	movs	r2, #2
 800319c:	4013      	ands	r3, r2
 800319e:	d00b      	beq.n	80031b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	4a43      	ldr	r2, [pc, #268]	; (80032b4 <UART_AdvFeatureConfig+0x148>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	0019      	movs	r1, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	2204      	movs	r2, #4
 80031be:	4013      	ands	r3, r2
 80031c0:	d00b      	beq.n	80031da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	4a3b      	ldr	r2, [pc, #236]	; (80032b8 <UART_AdvFeatureConfig+0x14c>)
 80031ca:	4013      	ands	r3, r2
 80031cc:	0019      	movs	r1, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	2208      	movs	r2, #8
 80031e0:	4013      	ands	r3, r2
 80031e2:	d00b      	beq.n	80031fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	4a34      	ldr	r2, [pc, #208]	; (80032bc <UART_AdvFeatureConfig+0x150>)
 80031ec:	4013      	ands	r3, r2
 80031ee:	0019      	movs	r1, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	2210      	movs	r2, #16
 8003202:	4013      	ands	r3, r2
 8003204:	d00b      	beq.n	800321e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	4a2c      	ldr	r2, [pc, #176]	; (80032c0 <UART_AdvFeatureConfig+0x154>)
 800320e:	4013      	ands	r3, r2
 8003210:	0019      	movs	r1, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	2220      	movs	r2, #32
 8003224:	4013      	ands	r3, r2
 8003226:	d00b      	beq.n	8003240 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	4a25      	ldr	r2, [pc, #148]	; (80032c4 <UART_AdvFeatureConfig+0x158>)
 8003230:	4013      	ands	r3, r2
 8003232:	0019      	movs	r1, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	2240      	movs	r2, #64	; 0x40
 8003246:	4013      	ands	r3, r2
 8003248:	d01d      	beq.n	8003286 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	4a1d      	ldr	r2, [pc, #116]	; (80032c8 <UART_AdvFeatureConfig+0x15c>)
 8003252:	4013      	ands	r3, r2
 8003254:	0019      	movs	r1, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003266:	2380      	movs	r3, #128	; 0x80
 8003268:	035b      	lsls	r3, r3, #13
 800326a:	429a      	cmp	r2, r3
 800326c:	d10b      	bne.n	8003286 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	4a15      	ldr	r2, [pc, #84]	; (80032cc <UART_AdvFeatureConfig+0x160>)
 8003276:	4013      	ands	r3, r2
 8003278:	0019      	movs	r1, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	2280      	movs	r2, #128	; 0x80
 800328c:	4013      	ands	r3, r2
 800328e:	d00b      	beq.n	80032a8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	4a0e      	ldr	r2, [pc, #56]	; (80032d0 <UART_AdvFeatureConfig+0x164>)
 8003298:	4013      	ands	r3, r2
 800329a:	0019      	movs	r1, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	605a      	str	r2, [r3, #4]
  }
}
 80032a8:	46c0      	nop			; (mov r8, r8)
 80032aa:	46bd      	mov	sp, r7
 80032ac:	b002      	add	sp, #8
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	fffdffff 	.word	0xfffdffff
 80032b4:	fffeffff 	.word	0xfffeffff
 80032b8:	fffbffff 	.word	0xfffbffff
 80032bc:	ffff7fff 	.word	0xffff7fff
 80032c0:	ffffefff 	.word	0xffffefff
 80032c4:	ffffdfff 	.word	0xffffdfff
 80032c8:	ffefffff 	.word	0xffefffff
 80032cc:	ff9fffff 	.word	0xff9fffff
 80032d0:	fff7ffff 	.word	0xfff7ffff

080032d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b092      	sub	sp, #72	; 0x48
 80032d8:	af02      	add	r7, sp, #8
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2284      	movs	r2, #132	; 0x84
 80032e0:	2100      	movs	r1, #0
 80032e2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032e4:	f7fd fc4a 	bl	8000b7c <HAL_GetTick>
 80032e8:	0003      	movs	r3, r0
 80032ea:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2208      	movs	r2, #8
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d12c      	bne.n	8003354 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032fc:	2280      	movs	r2, #128	; 0x80
 80032fe:	0391      	lsls	r1, r2, #14
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	4a46      	ldr	r2, [pc, #280]	; (800341c <UART_CheckIdleState+0x148>)
 8003304:	9200      	str	r2, [sp, #0]
 8003306:	2200      	movs	r2, #0
 8003308:	f000 f88c 	bl	8003424 <UART_WaitOnFlagUntilTimeout>
 800330c:	1e03      	subs	r3, r0, #0
 800330e:	d021      	beq.n	8003354 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003310:	f3ef 8310 	mrs	r3, PRIMASK
 8003314:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003318:	63bb      	str	r3, [r7, #56]	; 0x38
 800331a:	2301      	movs	r3, #1
 800331c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800331e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003320:	f383 8810 	msr	PRIMASK, r3
}
 8003324:	46c0      	nop			; (mov r8, r8)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2180      	movs	r1, #128	; 0x80
 8003332:	438a      	bics	r2, r1
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003338:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800333a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333c:	f383 8810 	msr	PRIMASK, r3
}
 8003340:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2220      	movs	r2, #32
 8003346:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2278      	movs	r2, #120	; 0x78
 800334c:	2100      	movs	r1, #0
 800334e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e05f      	b.n	8003414 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2204      	movs	r2, #4
 800335c:	4013      	ands	r3, r2
 800335e:	2b04      	cmp	r3, #4
 8003360:	d146      	bne.n	80033f0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003364:	2280      	movs	r2, #128	; 0x80
 8003366:	03d1      	lsls	r1, r2, #15
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	4a2c      	ldr	r2, [pc, #176]	; (800341c <UART_CheckIdleState+0x148>)
 800336c:	9200      	str	r2, [sp, #0]
 800336e:	2200      	movs	r2, #0
 8003370:	f000 f858 	bl	8003424 <UART_WaitOnFlagUntilTimeout>
 8003374:	1e03      	subs	r3, r0, #0
 8003376:	d03b      	beq.n	80033f0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003378:	f3ef 8310 	mrs	r3, PRIMASK
 800337c:	60fb      	str	r3, [r7, #12]
  return(result);
 800337e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003380:	637b      	str	r3, [r7, #52]	; 0x34
 8003382:	2301      	movs	r3, #1
 8003384:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f383 8810 	msr	PRIMASK, r3
}
 800338c:	46c0      	nop			; (mov r8, r8)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4921      	ldr	r1, [pc, #132]	; (8003420 <UART_CheckIdleState+0x14c>)
 800339a:	400a      	ands	r2, r1
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f383 8810 	msr	PRIMASK, r3
}
 80033a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033aa:	f3ef 8310 	mrs	r3, PRIMASK
 80033ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80033b0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b2:	633b      	str	r3, [r7, #48]	; 0x30
 80033b4:	2301      	movs	r3, #1
 80033b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	f383 8810 	msr	PRIMASK, r3
}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2101      	movs	r1, #1
 80033cc:	438a      	bics	r2, r1
 80033ce:	609a      	str	r2, [r3, #8]
 80033d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	f383 8810 	msr	PRIMASK, r3
}
 80033da:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2280      	movs	r2, #128	; 0x80
 80033e0:	2120      	movs	r1, #32
 80033e2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2278      	movs	r2, #120	; 0x78
 80033e8:	2100      	movs	r1, #0
 80033ea:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e011      	b.n	8003414 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2280      	movs	r2, #128	; 0x80
 80033fa:	2120      	movs	r1, #32
 80033fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2278      	movs	r2, #120	; 0x78
 800340e:	2100      	movs	r1, #0
 8003410:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	0018      	movs	r0, r3
 8003416:	46bd      	mov	sp, r7
 8003418:	b010      	add	sp, #64	; 0x40
 800341a:	bd80      	pop	{r7, pc}
 800341c:	01ffffff 	.word	0x01ffffff
 8003420:	fffffedf 	.word	0xfffffedf

08003424 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	603b      	str	r3, [r7, #0]
 8003430:	1dfb      	adds	r3, r7, #7
 8003432:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003434:	e04b      	b.n	80034ce <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	3301      	adds	r3, #1
 800343a:	d048      	beq.n	80034ce <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800343c:	f7fd fb9e 	bl	8000b7c <HAL_GetTick>
 8003440:	0002      	movs	r2, r0
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	429a      	cmp	r2, r3
 800344a:	d302      	bcc.n	8003452 <UART_WaitOnFlagUntilTimeout+0x2e>
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e04b      	b.n	80034ee <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2204      	movs	r2, #4
 800345e:	4013      	ands	r3, r2
 8003460:	d035      	beq.n	80034ce <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	2208      	movs	r2, #8
 800346a:	4013      	ands	r3, r2
 800346c:	2b08      	cmp	r3, #8
 800346e:	d111      	bne.n	8003494 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2208      	movs	r2, #8
 8003476:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	0018      	movs	r0, r3
 800347c:	f000 f83c 	bl	80034f8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2284      	movs	r2, #132	; 0x84
 8003484:	2108      	movs	r1, #8
 8003486:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2278      	movs	r2, #120	; 0x78
 800348c:	2100      	movs	r1, #0
 800348e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e02c      	b.n	80034ee <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	69da      	ldr	r2, [r3, #28]
 800349a:	2380      	movs	r3, #128	; 0x80
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	401a      	ands	r2, r3
 80034a0:	2380      	movs	r3, #128	; 0x80
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d112      	bne.n	80034ce <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2280      	movs	r2, #128	; 0x80
 80034ae:	0112      	lsls	r2, r2, #4
 80034b0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	0018      	movs	r0, r3
 80034b6:	f000 f81f 	bl	80034f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2284      	movs	r2, #132	; 0x84
 80034be:	2120      	movs	r1, #32
 80034c0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2278      	movs	r2, #120	; 0x78
 80034c6:	2100      	movs	r1, #0
 80034c8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e00f      	b.n	80034ee <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	4013      	ands	r3, r2
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	425a      	negs	r2, r3
 80034de:	4153      	adcs	r3, r2
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	001a      	movs	r2, r3
 80034e4:	1dfb      	adds	r3, r7, #7
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d0a4      	beq.n	8003436 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	0018      	movs	r0, r3
 80034f0:	46bd      	mov	sp, r7
 80034f2:	b004      	add	sp, #16
 80034f4:	bd80      	pop	{r7, pc}
	...

080034f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b08e      	sub	sp, #56	; 0x38
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003500:	f3ef 8310 	mrs	r3, PRIMASK
 8003504:	617b      	str	r3, [r7, #20]
  return(result);
 8003506:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003508:	637b      	str	r3, [r7, #52]	; 0x34
 800350a:	2301      	movs	r3, #1
 800350c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	f383 8810 	msr	PRIMASK, r3
}
 8003514:	46c0      	nop			; (mov r8, r8)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4926      	ldr	r1, [pc, #152]	; (80035bc <UART_EndRxTransfer+0xc4>)
 8003522:	400a      	ands	r2, r1
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003528:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	f383 8810 	msr	PRIMASK, r3
}
 8003530:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003532:	f3ef 8310 	mrs	r3, PRIMASK
 8003536:	623b      	str	r3, [r7, #32]
  return(result);
 8003538:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800353a:	633b      	str	r3, [r7, #48]	; 0x30
 800353c:	2301      	movs	r3, #1
 800353e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	f383 8810 	msr	PRIMASK, r3
}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2101      	movs	r1, #1
 8003554:	438a      	bics	r2, r1
 8003556:	609a      	str	r2, [r3, #8]
 8003558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800355c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355e:	f383 8810 	msr	PRIMASK, r3
}
 8003562:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003568:	2b01      	cmp	r3, #1
 800356a:	d118      	bne.n	800359e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800356c:	f3ef 8310 	mrs	r3, PRIMASK
 8003570:	60bb      	str	r3, [r7, #8]
  return(result);
 8003572:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003574:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003576:	2301      	movs	r3, #1
 8003578:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f383 8810 	msr	PRIMASK, r3
}
 8003580:	46c0      	nop			; (mov r8, r8)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2110      	movs	r1, #16
 800358e:	438a      	bics	r2, r1
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003594:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f383 8810 	msr	PRIMASK, r3
}
 800359c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2280      	movs	r2, #128	; 0x80
 80035a2:	2120      	movs	r1, #32
 80035a4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	46bd      	mov	sp, r7
 80035b6:	b00e      	add	sp, #56	; 0x38
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	fffffedf 	.word	0xfffffedf

080035c0 <__errno>:
 80035c0:	4b01      	ldr	r3, [pc, #4]	; (80035c8 <__errno+0x8>)
 80035c2:	6818      	ldr	r0, [r3, #0]
 80035c4:	4770      	bx	lr
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	2000000c 	.word	0x2000000c

080035cc <__libc_init_array>:
 80035cc:	b570      	push	{r4, r5, r6, lr}
 80035ce:	2600      	movs	r6, #0
 80035d0:	4d0c      	ldr	r5, [pc, #48]	; (8003604 <__libc_init_array+0x38>)
 80035d2:	4c0d      	ldr	r4, [pc, #52]	; (8003608 <__libc_init_array+0x3c>)
 80035d4:	1b64      	subs	r4, r4, r5
 80035d6:	10a4      	asrs	r4, r4, #2
 80035d8:	42a6      	cmp	r6, r4
 80035da:	d109      	bne.n	80035f0 <__libc_init_array+0x24>
 80035dc:	2600      	movs	r6, #0
 80035de:	f000 fc8b 	bl	8003ef8 <_init>
 80035e2:	4d0a      	ldr	r5, [pc, #40]	; (800360c <__libc_init_array+0x40>)
 80035e4:	4c0a      	ldr	r4, [pc, #40]	; (8003610 <__libc_init_array+0x44>)
 80035e6:	1b64      	subs	r4, r4, r5
 80035e8:	10a4      	asrs	r4, r4, #2
 80035ea:	42a6      	cmp	r6, r4
 80035ec:	d105      	bne.n	80035fa <__libc_init_array+0x2e>
 80035ee:	bd70      	pop	{r4, r5, r6, pc}
 80035f0:	00b3      	lsls	r3, r6, #2
 80035f2:	58eb      	ldr	r3, [r5, r3]
 80035f4:	4798      	blx	r3
 80035f6:	3601      	adds	r6, #1
 80035f8:	e7ee      	b.n	80035d8 <__libc_init_array+0xc>
 80035fa:	00b3      	lsls	r3, r6, #2
 80035fc:	58eb      	ldr	r3, [r5, r3]
 80035fe:	4798      	blx	r3
 8003600:	3601      	adds	r6, #1
 8003602:	e7f2      	b.n	80035ea <__libc_init_array+0x1e>
 8003604:	08003fc0 	.word	0x08003fc0
 8003608:	08003fc0 	.word	0x08003fc0
 800360c:	08003fc0 	.word	0x08003fc0
 8003610:	08003fc4 	.word	0x08003fc4

08003614 <memset>:
 8003614:	0003      	movs	r3, r0
 8003616:	1882      	adds	r2, r0, r2
 8003618:	4293      	cmp	r3, r2
 800361a:	d100      	bne.n	800361e <memset+0xa>
 800361c:	4770      	bx	lr
 800361e:	7019      	strb	r1, [r3, #0]
 8003620:	3301      	adds	r3, #1
 8003622:	e7f9      	b.n	8003618 <memset+0x4>

08003624 <siprintf>:
 8003624:	b40e      	push	{r1, r2, r3}
 8003626:	b500      	push	{lr}
 8003628:	490b      	ldr	r1, [pc, #44]	; (8003658 <siprintf+0x34>)
 800362a:	b09c      	sub	sp, #112	; 0x70
 800362c:	ab1d      	add	r3, sp, #116	; 0x74
 800362e:	9002      	str	r0, [sp, #8]
 8003630:	9006      	str	r0, [sp, #24]
 8003632:	9107      	str	r1, [sp, #28]
 8003634:	9104      	str	r1, [sp, #16]
 8003636:	4809      	ldr	r0, [pc, #36]	; (800365c <siprintf+0x38>)
 8003638:	4909      	ldr	r1, [pc, #36]	; (8003660 <siprintf+0x3c>)
 800363a:	cb04      	ldmia	r3!, {r2}
 800363c:	9105      	str	r1, [sp, #20]
 800363e:	6800      	ldr	r0, [r0, #0]
 8003640:	a902      	add	r1, sp, #8
 8003642:	9301      	str	r3, [sp, #4]
 8003644:	f000 f870 	bl	8003728 <_svfiprintf_r>
 8003648:	2300      	movs	r3, #0
 800364a:	9a02      	ldr	r2, [sp, #8]
 800364c:	7013      	strb	r3, [r2, #0]
 800364e:	b01c      	add	sp, #112	; 0x70
 8003650:	bc08      	pop	{r3}
 8003652:	b003      	add	sp, #12
 8003654:	4718      	bx	r3
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	7fffffff 	.word	0x7fffffff
 800365c:	2000000c 	.word	0x2000000c
 8003660:	ffff0208 	.word	0xffff0208

08003664 <__ssputs_r>:
 8003664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003666:	688e      	ldr	r6, [r1, #8]
 8003668:	b085      	sub	sp, #20
 800366a:	0007      	movs	r7, r0
 800366c:	000c      	movs	r4, r1
 800366e:	9203      	str	r2, [sp, #12]
 8003670:	9301      	str	r3, [sp, #4]
 8003672:	429e      	cmp	r6, r3
 8003674:	d83c      	bhi.n	80036f0 <__ssputs_r+0x8c>
 8003676:	2390      	movs	r3, #144	; 0x90
 8003678:	898a      	ldrh	r2, [r1, #12]
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	421a      	tst	r2, r3
 800367e:	d034      	beq.n	80036ea <__ssputs_r+0x86>
 8003680:	6909      	ldr	r1, [r1, #16]
 8003682:	6823      	ldr	r3, [r4, #0]
 8003684:	6960      	ldr	r0, [r4, #20]
 8003686:	1a5b      	subs	r3, r3, r1
 8003688:	9302      	str	r3, [sp, #8]
 800368a:	2303      	movs	r3, #3
 800368c:	4343      	muls	r3, r0
 800368e:	0fdd      	lsrs	r5, r3, #31
 8003690:	18ed      	adds	r5, r5, r3
 8003692:	9b01      	ldr	r3, [sp, #4]
 8003694:	9802      	ldr	r0, [sp, #8]
 8003696:	3301      	adds	r3, #1
 8003698:	181b      	adds	r3, r3, r0
 800369a:	106d      	asrs	r5, r5, #1
 800369c:	42ab      	cmp	r3, r5
 800369e:	d900      	bls.n	80036a2 <__ssputs_r+0x3e>
 80036a0:	001d      	movs	r5, r3
 80036a2:	0553      	lsls	r3, r2, #21
 80036a4:	d532      	bpl.n	800370c <__ssputs_r+0xa8>
 80036a6:	0029      	movs	r1, r5
 80036a8:	0038      	movs	r0, r7
 80036aa:	f000 fb53 	bl	8003d54 <_malloc_r>
 80036ae:	1e06      	subs	r6, r0, #0
 80036b0:	d109      	bne.n	80036c6 <__ssputs_r+0x62>
 80036b2:	230c      	movs	r3, #12
 80036b4:	603b      	str	r3, [r7, #0]
 80036b6:	2340      	movs	r3, #64	; 0x40
 80036b8:	2001      	movs	r0, #1
 80036ba:	89a2      	ldrh	r2, [r4, #12]
 80036bc:	4240      	negs	r0, r0
 80036be:	4313      	orrs	r3, r2
 80036c0:	81a3      	strh	r3, [r4, #12]
 80036c2:	b005      	add	sp, #20
 80036c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036c6:	9a02      	ldr	r2, [sp, #8]
 80036c8:	6921      	ldr	r1, [r4, #16]
 80036ca:	f000 faba 	bl	8003c42 <memcpy>
 80036ce:	89a3      	ldrh	r3, [r4, #12]
 80036d0:	4a14      	ldr	r2, [pc, #80]	; (8003724 <__ssputs_r+0xc0>)
 80036d2:	401a      	ands	r2, r3
 80036d4:	2380      	movs	r3, #128	; 0x80
 80036d6:	4313      	orrs	r3, r2
 80036d8:	81a3      	strh	r3, [r4, #12]
 80036da:	9b02      	ldr	r3, [sp, #8]
 80036dc:	6126      	str	r6, [r4, #16]
 80036de:	18f6      	adds	r6, r6, r3
 80036e0:	6026      	str	r6, [r4, #0]
 80036e2:	6165      	str	r5, [r4, #20]
 80036e4:	9e01      	ldr	r6, [sp, #4]
 80036e6:	1aed      	subs	r5, r5, r3
 80036e8:	60a5      	str	r5, [r4, #8]
 80036ea:	9b01      	ldr	r3, [sp, #4]
 80036ec:	429e      	cmp	r6, r3
 80036ee:	d900      	bls.n	80036f2 <__ssputs_r+0x8e>
 80036f0:	9e01      	ldr	r6, [sp, #4]
 80036f2:	0032      	movs	r2, r6
 80036f4:	9903      	ldr	r1, [sp, #12]
 80036f6:	6820      	ldr	r0, [r4, #0]
 80036f8:	f000 faac 	bl	8003c54 <memmove>
 80036fc:	68a3      	ldr	r3, [r4, #8]
 80036fe:	2000      	movs	r0, #0
 8003700:	1b9b      	subs	r3, r3, r6
 8003702:	60a3      	str	r3, [r4, #8]
 8003704:	6823      	ldr	r3, [r4, #0]
 8003706:	199e      	adds	r6, r3, r6
 8003708:	6026      	str	r6, [r4, #0]
 800370a:	e7da      	b.n	80036c2 <__ssputs_r+0x5e>
 800370c:	002a      	movs	r2, r5
 800370e:	0038      	movs	r0, r7
 8003710:	f000 fb96 	bl	8003e40 <_realloc_r>
 8003714:	1e06      	subs	r6, r0, #0
 8003716:	d1e0      	bne.n	80036da <__ssputs_r+0x76>
 8003718:	0038      	movs	r0, r7
 800371a:	6921      	ldr	r1, [r4, #16]
 800371c:	f000 faae 	bl	8003c7c <_free_r>
 8003720:	e7c7      	b.n	80036b2 <__ssputs_r+0x4e>
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	fffffb7f 	.word	0xfffffb7f

08003728 <_svfiprintf_r>:
 8003728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800372a:	b0a1      	sub	sp, #132	; 0x84
 800372c:	9003      	str	r0, [sp, #12]
 800372e:	001d      	movs	r5, r3
 8003730:	898b      	ldrh	r3, [r1, #12]
 8003732:	000f      	movs	r7, r1
 8003734:	0016      	movs	r6, r2
 8003736:	061b      	lsls	r3, r3, #24
 8003738:	d511      	bpl.n	800375e <_svfiprintf_r+0x36>
 800373a:	690b      	ldr	r3, [r1, #16]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10e      	bne.n	800375e <_svfiprintf_r+0x36>
 8003740:	2140      	movs	r1, #64	; 0x40
 8003742:	f000 fb07 	bl	8003d54 <_malloc_r>
 8003746:	6038      	str	r0, [r7, #0]
 8003748:	6138      	str	r0, [r7, #16]
 800374a:	2800      	cmp	r0, #0
 800374c:	d105      	bne.n	800375a <_svfiprintf_r+0x32>
 800374e:	230c      	movs	r3, #12
 8003750:	9a03      	ldr	r2, [sp, #12]
 8003752:	3801      	subs	r0, #1
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	b021      	add	sp, #132	; 0x84
 8003758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800375a:	2340      	movs	r3, #64	; 0x40
 800375c:	617b      	str	r3, [r7, #20]
 800375e:	2300      	movs	r3, #0
 8003760:	ac08      	add	r4, sp, #32
 8003762:	6163      	str	r3, [r4, #20]
 8003764:	3320      	adds	r3, #32
 8003766:	7663      	strb	r3, [r4, #25]
 8003768:	3310      	adds	r3, #16
 800376a:	76a3      	strb	r3, [r4, #26]
 800376c:	9507      	str	r5, [sp, #28]
 800376e:	0035      	movs	r5, r6
 8003770:	782b      	ldrb	r3, [r5, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <_svfiprintf_r+0x52>
 8003776:	2b25      	cmp	r3, #37	; 0x25
 8003778:	d147      	bne.n	800380a <_svfiprintf_r+0xe2>
 800377a:	1bab      	subs	r3, r5, r6
 800377c:	9305      	str	r3, [sp, #20]
 800377e:	42b5      	cmp	r5, r6
 8003780:	d00c      	beq.n	800379c <_svfiprintf_r+0x74>
 8003782:	0032      	movs	r2, r6
 8003784:	0039      	movs	r1, r7
 8003786:	9803      	ldr	r0, [sp, #12]
 8003788:	f7ff ff6c 	bl	8003664 <__ssputs_r>
 800378c:	1c43      	adds	r3, r0, #1
 800378e:	d100      	bne.n	8003792 <_svfiprintf_r+0x6a>
 8003790:	e0ae      	b.n	80038f0 <_svfiprintf_r+0x1c8>
 8003792:	6962      	ldr	r2, [r4, #20]
 8003794:	9b05      	ldr	r3, [sp, #20]
 8003796:	4694      	mov	ip, r2
 8003798:	4463      	add	r3, ip
 800379a:	6163      	str	r3, [r4, #20]
 800379c:	782b      	ldrb	r3, [r5, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d100      	bne.n	80037a4 <_svfiprintf_r+0x7c>
 80037a2:	e0a5      	b.n	80038f0 <_svfiprintf_r+0x1c8>
 80037a4:	2201      	movs	r2, #1
 80037a6:	2300      	movs	r3, #0
 80037a8:	4252      	negs	r2, r2
 80037aa:	6062      	str	r2, [r4, #4]
 80037ac:	a904      	add	r1, sp, #16
 80037ae:	3254      	adds	r2, #84	; 0x54
 80037b0:	1852      	adds	r2, r2, r1
 80037b2:	1c6e      	adds	r6, r5, #1
 80037b4:	6023      	str	r3, [r4, #0]
 80037b6:	60e3      	str	r3, [r4, #12]
 80037b8:	60a3      	str	r3, [r4, #8]
 80037ba:	7013      	strb	r3, [r2, #0]
 80037bc:	65a3      	str	r3, [r4, #88]	; 0x58
 80037be:	2205      	movs	r2, #5
 80037c0:	7831      	ldrb	r1, [r6, #0]
 80037c2:	4854      	ldr	r0, [pc, #336]	; (8003914 <_svfiprintf_r+0x1ec>)
 80037c4:	f000 fa32 	bl	8003c2c <memchr>
 80037c8:	1c75      	adds	r5, r6, #1
 80037ca:	2800      	cmp	r0, #0
 80037cc:	d11f      	bne.n	800380e <_svfiprintf_r+0xe6>
 80037ce:	6822      	ldr	r2, [r4, #0]
 80037d0:	06d3      	lsls	r3, r2, #27
 80037d2:	d504      	bpl.n	80037de <_svfiprintf_r+0xb6>
 80037d4:	2353      	movs	r3, #83	; 0x53
 80037d6:	a904      	add	r1, sp, #16
 80037d8:	185b      	adds	r3, r3, r1
 80037da:	2120      	movs	r1, #32
 80037dc:	7019      	strb	r1, [r3, #0]
 80037de:	0713      	lsls	r3, r2, #28
 80037e0:	d504      	bpl.n	80037ec <_svfiprintf_r+0xc4>
 80037e2:	2353      	movs	r3, #83	; 0x53
 80037e4:	a904      	add	r1, sp, #16
 80037e6:	185b      	adds	r3, r3, r1
 80037e8:	212b      	movs	r1, #43	; 0x2b
 80037ea:	7019      	strb	r1, [r3, #0]
 80037ec:	7833      	ldrb	r3, [r6, #0]
 80037ee:	2b2a      	cmp	r3, #42	; 0x2a
 80037f0:	d016      	beq.n	8003820 <_svfiprintf_r+0xf8>
 80037f2:	0035      	movs	r5, r6
 80037f4:	2100      	movs	r1, #0
 80037f6:	200a      	movs	r0, #10
 80037f8:	68e3      	ldr	r3, [r4, #12]
 80037fa:	782a      	ldrb	r2, [r5, #0]
 80037fc:	1c6e      	adds	r6, r5, #1
 80037fe:	3a30      	subs	r2, #48	; 0x30
 8003800:	2a09      	cmp	r2, #9
 8003802:	d94e      	bls.n	80038a2 <_svfiprintf_r+0x17a>
 8003804:	2900      	cmp	r1, #0
 8003806:	d111      	bne.n	800382c <_svfiprintf_r+0x104>
 8003808:	e017      	b.n	800383a <_svfiprintf_r+0x112>
 800380a:	3501      	adds	r5, #1
 800380c:	e7b0      	b.n	8003770 <_svfiprintf_r+0x48>
 800380e:	4b41      	ldr	r3, [pc, #260]	; (8003914 <_svfiprintf_r+0x1ec>)
 8003810:	6822      	ldr	r2, [r4, #0]
 8003812:	1ac0      	subs	r0, r0, r3
 8003814:	2301      	movs	r3, #1
 8003816:	4083      	lsls	r3, r0
 8003818:	4313      	orrs	r3, r2
 800381a:	002e      	movs	r6, r5
 800381c:	6023      	str	r3, [r4, #0]
 800381e:	e7ce      	b.n	80037be <_svfiprintf_r+0x96>
 8003820:	9b07      	ldr	r3, [sp, #28]
 8003822:	1d19      	adds	r1, r3, #4
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	9107      	str	r1, [sp, #28]
 8003828:	2b00      	cmp	r3, #0
 800382a:	db01      	blt.n	8003830 <_svfiprintf_r+0x108>
 800382c:	930b      	str	r3, [sp, #44]	; 0x2c
 800382e:	e004      	b.n	800383a <_svfiprintf_r+0x112>
 8003830:	425b      	negs	r3, r3
 8003832:	60e3      	str	r3, [r4, #12]
 8003834:	2302      	movs	r3, #2
 8003836:	4313      	orrs	r3, r2
 8003838:	6023      	str	r3, [r4, #0]
 800383a:	782b      	ldrb	r3, [r5, #0]
 800383c:	2b2e      	cmp	r3, #46	; 0x2e
 800383e:	d10a      	bne.n	8003856 <_svfiprintf_r+0x12e>
 8003840:	786b      	ldrb	r3, [r5, #1]
 8003842:	2b2a      	cmp	r3, #42	; 0x2a
 8003844:	d135      	bne.n	80038b2 <_svfiprintf_r+0x18a>
 8003846:	9b07      	ldr	r3, [sp, #28]
 8003848:	3502      	adds	r5, #2
 800384a:	1d1a      	adds	r2, r3, #4
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	9207      	str	r2, [sp, #28]
 8003850:	2b00      	cmp	r3, #0
 8003852:	db2b      	blt.n	80038ac <_svfiprintf_r+0x184>
 8003854:	9309      	str	r3, [sp, #36]	; 0x24
 8003856:	4e30      	ldr	r6, [pc, #192]	; (8003918 <_svfiprintf_r+0x1f0>)
 8003858:	2203      	movs	r2, #3
 800385a:	0030      	movs	r0, r6
 800385c:	7829      	ldrb	r1, [r5, #0]
 800385e:	f000 f9e5 	bl	8003c2c <memchr>
 8003862:	2800      	cmp	r0, #0
 8003864:	d006      	beq.n	8003874 <_svfiprintf_r+0x14c>
 8003866:	2340      	movs	r3, #64	; 0x40
 8003868:	1b80      	subs	r0, r0, r6
 800386a:	4083      	lsls	r3, r0
 800386c:	6822      	ldr	r2, [r4, #0]
 800386e:	3501      	adds	r5, #1
 8003870:	4313      	orrs	r3, r2
 8003872:	6023      	str	r3, [r4, #0]
 8003874:	7829      	ldrb	r1, [r5, #0]
 8003876:	2206      	movs	r2, #6
 8003878:	4828      	ldr	r0, [pc, #160]	; (800391c <_svfiprintf_r+0x1f4>)
 800387a:	1c6e      	adds	r6, r5, #1
 800387c:	7621      	strb	r1, [r4, #24]
 800387e:	f000 f9d5 	bl	8003c2c <memchr>
 8003882:	2800      	cmp	r0, #0
 8003884:	d03c      	beq.n	8003900 <_svfiprintf_r+0x1d8>
 8003886:	4b26      	ldr	r3, [pc, #152]	; (8003920 <_svfiprintf_r+0x1f8>)
 8003888:	2b00      	cmp	r3, #0
 800388a:	d125      	bne.n	80038d8 <_svfiprintf_r+0x1b0>
 800388c:	2207      	movs	r2, #7
 800388e:	9b07      	ldr	r3, [sp, #28]
 8003890:	3307      	adds	r3, #7
 8003892:	4393      	bics	r3, r2
 8003894:	3308      	adds	r3, #8
 8003896:	9307      	str	r3, [sp, #28]
 8003898:	6963      	ldr	r3, [r4, #20]
 800389a:	9a04      	ldr	r2, [sp, #16]
 800389c:	189b      	adds	r3, r3, r2
 800389e:	6163      	str	r3, [r4, #20]
 80038a0:	e765      	b.n	800376e <_svfiprintf_r+0x46>
 80038a2:	4343      	muls	r3, r0
 80038a4:	0035      	movs	r5, r6
 80038a6:	2101      	movs	r1, #1
 80038a8:	189b      	adds	r3, r3, r2
 80038aa:	e7a6      	b.n	80037fa <_svfiprintf_r+0xd2>
 80038ac:	2301      	movs	r3, #1
 80038ae:	425b      	negs	r3, r3
 80038b0:	e7d0      	b.n	8003854 <_svfiprintf_r+0x12c>
 80038b2:	2300      	movs	r3, #0
 80038b4:	200a      	movs	r0, #10
 80038b6:	001a      	movs	r2, r3
 80038b8:	3501      	adds	r5, #1
 80038ba:	6063      	str	r3, [r4, #4]
 80038bc:	7829      	ldrb	r1, [r5, #0]
 80038be:	1c6e      	adds	r6, r5, #1
 80038c0:	3930      	subs	r1, #48	; 0x30
 80038c2:	2909      	cmp	r1, #9
 80038c4:	d903      	bls.n	80038ce <_svfiprintf_r+0x1a6>
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0c5      	beq.n	8003856 <_svfiprintf_r+0x12e>
 80038ca:	9209      	str	r2, [sp, #36]	; 0x24
 80038cc:	e7c3      	b.n	8003856 <_svfiprintf_r+0x12e>
 80038ce:	4342      	muls	r2, r0
 80038d0:	0035      	movs	r5, r6
 80038d2:	2301      	movs	r3, #1
 80038d4:	1852      	adds	r2, r2, r1
 80038d6:	e7f1      	b.n	80038bc <_svfiprintf_r+0x194>
 80038d8:	ab07      	add	r3, sp, #28
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	003a      	movs	r2, r7
 80038de:	0021      	movs	r1, r4
 80038e0:	4b10      	ldr	r3, [pc, #64]	; (8003924 <_svfiprintf_r+0x1fc>)
 80038e2:	9803      	ldr	r0, [sp, #12]
 80038e4:	e000      	b.n	80038e8 <_svfiprintf_r+0x1c0>
 80038e6:	bf00      	nop
 80038e8:	9004      	str	r0, [sp, #16]
 80038ea:	9b04      	ldr	r3, [sp, #16]
 80038ec:	3301      	adds	r3, #1
 80038ee:	d1d3      	bne.n	8003898 <_svfiprintf_r+0x170>
 80038f0:	89bb      	ldrh	r3, [r7, #12]
 80038f2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80038f4:	065b      	lsls	r3, r3, #25
 80038f6:	d400      	bmi.n	80038fa <_svfiprintf_r+0x1d2>
 80038f8:	e72d      	b.n	8003756 <_svfiprintf_r+0x2e>
 80038fa:	2001      	movs	r0, #1
 80038fc:	4240      	negs	r0, r0
 80038fe:	e72a      	b.n	8003756 <_svfiprintf_r+0x2e>
 8003900:	ab07      	add	r3, sp, #28
 8003902:	9300      	str	r3, [sp, #0]
 8003904:	003a      	movs	r2, r7
 8003906:	0021      	movs	r1, r4
 8003908:	4b06      	ldr	r3, [pc, #24]	; (8003924 <_svfiprintf_r+0x1fc>)
 800390a:	9803      	ldr	r0, [sp, #12]
 800390c:	f000 f87c 	bl	8003a08 <_printf_i>
 8003910:	e7ea      	b.n	80038e8 <_svfiprintf_r+0x1c0>
 8003912:	46c0      	nop			; (mov r8, r8)
 8003914:	08003f84 	.word	0x08003f84
 8003918:	08003f8a 	.word	0x08003f8a
 800391c:	08003f8e 	.word	0x08003f8e
 8003920:	00000000 	.word	0x00000000
 8003924:	08003665 	.word	0x08003665

08003928 <_printf_common>:
 8003928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800392a:	0015      	movs	r5, r2
 800392c:	9301      	str	r3, [sp, #4]
 800392e:	688a      	ldr	r2, [r1, #8]
 8003930:	690b      	ldr	r3, [r1, #16]
 8003932:	000c      	movs	r4, r1
 8003934:	9000      	str	r0, [sp, #0]
 8003936:	4293      	cmp	r3, r2
 8003938:	da00      	bge.n	800393c <_printf_common+0x14>
 800393a:	0013      	movs	r3, r2
 800393c:	0022      	movs	r2, r4
 800393e:	602b      	str	r3, [r5, #0]
 8003940:	3243      	adds	r2, #67	; 0x43
 8003942:	7812      	ldrb	r2, [r2, #0]
 8003944:	2a00      	cmp	r2, #0
 8003946:	d001      	beq.n	800394c <_printf_common+0x24>
 8003948:	3301      	adds	r3, #1
 800394a:	602b      	str	r3, [r5, #0]
 800394c:	6823      	ldr	r3, [r4, #0]
 800394e:	069b      	lsls	r3, r3, #26
 8003950:	d502      	bpl.n	8003958 <_printf_common+0x30>
 8003952:	682b      	ldr	r3, [r5, #0]
 8003954:	3302      	adds	r3, #2
 8003956:	602b      	str	r3, [r5, #0]
 8003958:	6822      	ldr	r2, [r4, #0]
 800395a:	2306      	movs	r3, #6
 800395c:	0017      	movs	r7, r2
 800395e:	401f      	ands	r7, r3
 8003960:	421a      	tst	r2, r3
 8003962:	d027      	beq.n	80039b4 <_printf_common+0x8c>
 8003964:	0023      	movs	r3, r4
 8003966:	3343      	adds	r3, #67	; 0x43
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	1e5a      	subs	r2, r3, #1
 800396c:	4193      	sbcs	r3, r2
 800396e:	6822      	ldr	r2, [r4, #0]
 8003970:	0692      	lsls	r2, r2, #26
 8003972:	d430      	bmi.n	80039d6 <_printf_common+0xae>
 8003974:	0022      	movs	r2, r4
 8003976:	9901      	ldr	r1, [sp, #4]
 8003978:	9800      	ldr	r0, [sp, #0]
 800397a:	9e08      	ldr	r6, [sp, #32]
 800397c:	3243      	adds	r2, #67	; 0x43
 800397e:	47b0      	blx	r6
 8003980:	1c43      	adds	r3, r0, #1
 8003982:	d025      	beq.n	80039d0 <_printf_common+0xa8>
 8003984:	2306      	movs	r3, #6
 8003986:	6820      	ldr	r0, [r4, #0]
 8003988:	682a      	ldr	r2, [r5, #0]
 800398a:	68e1      	ldr	r1, [r4, #12]
 800398c:	2500      	movs	r5, #0
 800398e:	4003      	ands	r3, r0
 8003990:	2b04      	cmp	r3, #4
 8003992:	d103      	bne.n	800399c <_printf_common+0x74>
 8003994:	1a8d      	subs	r5, r1, r2
 8003996:	43eb      	mvns	r3, r5
 8003998:	17db      	asrs	r3, r3, #31
 800399a:	401d      	ands	r5, r3
 800399c:	68a3      	ldr	r3, [r4, #8]
 800399e:	6922      	ldr	r2, [r4, #16]
 80039a0:	4293      	cmp	r3, r2
 80039a2:	dd01      	ble.n	80039a8 <_printf_common+0x80>
 80039a4:	1a9b      	subs	r3, r3, r2
 80039a6:	18ed      	adds	r5, r5, r3
 80039a8:	2700      	movs	r7, #0
 80039aa:	42bd      	cmp	r5, r7
 80039ac:	d120      	bne.n	80039f0 <_printf_common+0xc8>
 80039ae:	2000      	movs	r0, #0
 80039b0:	e010      	b.n	80039d4 <_printf_common+0xac>
 80039b2:	3701      	adds	r7, #1
 80039b4:	68e3      	ldr	r3, [r4, #12]
 80039b6:	682a      	ldr	r2, [r5, #0]
 80039b8:	1a9b      	subs	r3, r3, r2
 80039ba:	42bb      	cmp	r3, r7
 80039bc:	ddd2      	ble.n	8003964 <_printf_common+0x3c>
 80039be:	0022      	movs	r2, r4
 80039c0:	2301      	movs	r3, #1
 80039c2:	9901      	ldr	r1, [sp, #4]
 80039c4:	9800      	ldr	r0, [sp, #0]
 80039c6:	9e08      	ldr	r6, [sp, #32]
 80039c8:	3219      	adds	r2, #25
 80039ca:	47b0      	blx	r6
 80039cc:	1c43      	adds	r3, r0, #1
 80039ce:	d1f0      	bne.n	80039b2 <_printf_common+0x8a>
 80039d0:	2001      	movs	r0, #1
 80039d2:	4240      	negs	r0, r0
 80039d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80039d6:	2030      	movs	r0, #48	; 0x30
 80039d8:	18e1      	adds	r1, r4, r3
 80039da:	3143      	adds	r1, #67	; 0x43
 80039dc:	7008      	strb	r0, [r1, #0]
 80039de:	0021      	movs	r1, r4
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	3145      	adds	r1, #69	; 0x45
 80039e4:	7809      	ldrb	r1, [r1, #0]
 80039e6:	18a2      	adds	r2, r4, r2
 80039e8:	3243      	adds	r2, #67	; 0x43
 80039ea:	3302      	adds	r3, #2
 80039ec:	7011      	strb	r1, [r2, #0]
 80039ee:	e7c1      	b.n	8003974 <_printf_common+0x4c>
 80039f0:	0022      	movs	r2, r4
 80039f2:	2301      	movs	r3, #1
 80039f4:	9901      	ldr	r1, [sp, #4]
 80039f6:	9800      	ldr	r0, [sp, #0]
 80039f8:	9e08      	ldr	r6, [sp, #32]
 80039fa:	321a      	adds	r2, #26
 80039fc:	47b0      	blx	r6
 80039fe:	1c43      	adds	r3, r0, #1
 8003a00:	d0e6      	beq.n	80039d0 <_printf_common+0xa8>
 8003a02:	3701      	adds	r7, #1
 8003a04:	e7d1      	b.n	80039aa <_printf_common+0x82>
	...

08003a08 <_printf_i>:
 8003a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a0a:	b08b      	sub	sp, #44	; 0x2c
 8003a0c:	9206      	str	r2, [sp, #24]
 8003a0e:	000a      	movs	r2, r1
 8003a10:	3243      	adds	r2, #67	; 0x43
 8003a12:	9307      	str	r3, [sp, #28]
 8003a14:	9005      	str	r0, [sp, #20]
 8003a16:	9204      	str	r2, [sp, #16]
 8003a18:	7e0a      	ldrb	r2, [r1, #24]
 8003a1a:	000c      	movs	r4, r1
 8003a1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003a1e:	2a78      	cmp	r2, #120	; 0x78
 8003a20:	d807      	bhi.n	8003a32 <_printf_i+0x2a>
 8003a22:	2a62      	cmp	r2, #98	; 0x62
 8003a24:	d809      	bhi.n	8003a3a <_printf_i+0x32>
 8003a26:	2a00      	cmp	r2, #0
 8003a28:	d100      	bne.n	8003a2c <_printf_i+0x24>
 8003a2a:	e0c1      	b.n	8003bb0 <_printf_i+0x1a8>
 8003a2c:	2a58      	cmp	r2, #88	; 0x58
 8003a2e:	d100      	bne.n	8003a32 <_printf_i+0x2a>
 8003a30:	e08c      	b.n	8003b4c <_printf_i+0x144>
 8003a32:	0026      	movs	r6, r4
 8003a34:	3642      	adds	r6, #66	; 0x42
 8003a36:	7032      	strb	r2, [r6, #0]
 8003a38:	e022      	b.n	8003a80 <_printf_i+0x78>
 8003a3a:	0010      	movs	r0, r2
 8003a3c:	3863      	subs	r0, #99	; 0x63
 8003a3e:	2815      	cmp	r0, #21
 8003a40:	d8f7      	bhi.n	8003a32 <_printf_i+0x2a>
 8003a42:	f7fc fb69 	bl	8000118 <__gnu_thumb1_case_shi>
 8003a46:	0016      	.short	0x0016
 8003a48:	fff6001f 	.word	0xfff6001f
 8003a4c:	fff6fff6 	.word	0xfff6fff6
 8003a50:	001ffff6 	.word	0x001ffff6
 8003a54:	fff6fff6 	.word	0xfff6fff6
 8003a58:	fff6fff6 	.word	0xfff6fff6
 8003a5c:	003600a8 	.word	0x003600a8
 8003a60:	fff6009a 	.word	0xfff6009a
 8003a64:	00b9fff6 	.word	0x00b9fff6
 8003a68:	0036fff6 	.word	0x0036fff6
 8003a6c:	fff6fff6 	.word	0xfff6fff6
 8003a70:	009e      	.short	0x009e
 8003a72:	0026      	movs	r6, r4
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	3642      	adds	r6, #66	; 0x42
 8003a78:	1d11      	adds	r1, r2, #4
 8003a7a:	6019      	str	r1, [r3, #0]
 8003a7c:	6813      	ldr	r3, [r2, #0]
 8003a7e:	7033      	strb	r3, [r6, #0]
 8003a80:	2301      	movs	r3, #1
 8003a82:	e0a7      	b.n	8003bd4 <_printf_i+0x1cc>
 8003a84:	6808      	ldr	r0, [r1, #0]
 8003a86:	6819      	ldr	r1, [r3, #0]
 8003a88:	1d0a      	adds	r2, r1, #4
 8003a8a:	0605      	lsls	r5, r0, #24
 8003a8c:	d50b      	bpl.n	8003aa6 <_printf_i+0x9e>
 8003a8e:	680d      	ldr	r5, [r1, #0]
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	2d00      	cmp	r5, #0
 8003a94:	da03      	bge.n	8003a9e <_printf_i+0x96>
 8003a96:	232d      	movs	r3, #45	; 0x2d
 8003a98:	9a04      	ldr	r2, [sp, #16]
 8003a9a:	426d      	negs	r5, r5
 8003a9c:	7013      	strb	r3, [r2, #0]
 8003a9e:	4b61      	ldr	r3, [pc, #388]	; (8003c24 <_printf_i+0x21c>)
 8003aa0:	270a      	movs	r7, #10
 8003aa2:	9303      	str	r3, [sp, #12]
 8003aa4:	e01b      	b.n	8003ade <_printf_i+0xd6>
 8003aa6:	680d      	ldr	r5, [r1, #0]
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	0641      	lsls	r1, r0, #25
 8003aac:	d5f1      	bpl.n	8003a92 <_printf_i+0x8a>
 8003aae:	b22d      	sxth	r5, r5
 8003ab0:	e7ef      	b.n	8003a92 <_printf_i+0x8a>
 8003ab2:	680d      	ldr	r5, [r1, #0]
 8003ab4:	6819      	ldr	r1, [r3, #0]
 8003ab6:	1d08      	adds	r0, r1, #4
 8003ab8:	6018      	str	r0, [r3, #0]
 8003aba:	062e      	lsls	r6, r5, #24
 8003abc:	d501      	bpl.n	8003ac2 <_printf_i+0xba>
 8003abe:	680d      	ldr	r5, [r1, #0]
 8003ac0:	e003      	b.n	8003aca <_printf_i+0xc2>
 8003ac2:	066d      	lsls	r5, r5, #25
 8003ac4:	d5fb      	bpl.n	8003abe <_printf_i+0xb6>
 8003ac6:	680d      	ldr	r5, [r1, #0]
 8003ac8:	b2ad      	uxth	r5, r5
 8003aca:	4b56      	ldr	r3, [pc, #344]	; (8003c24 <_printf_i+0x21c>)
 8003acc:	2708      	movs	r7, #8
 8003ace:	9303      	str	r3, [sp, #12]
 8003ad0:	2a6f      	cmp	r2, #111	; 0x6f
 8003ad2:	d000      	beq.n	8003ad6 <_printf_i+0xce>
 8003ad4:	3702      	adds	r7, #2
 8003ad6:	0023      	movs	r3, r4
 8003ad8:	2200      	movs	r2, #0
 8003ada:	3343      	adds	r3, #67	; 0x43
 8003adc:	701a      	strb	r2, [r3, #0]
 8003ade:	6863      	ldr	r3, [r4, #4]
 8003ae0:	60a3      	str	r3, [r4, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	db03      	blt.n	8003aee <_printf_i+0xe6>
 8003ae6:	2204      	movs	r2, #4
 8003ae8:	6821      	ldr	r1, [r4, #0]
 8003aea:	4391      	bics	r1, r2
 8003aec:	6021      	str	r1, [r4, #0]
 8003aee:	2d00      	cmp	r5, #0
 8003af0:	d102      	bne.n	8003af8 <_printf_i+0xf0>
 8003af2:	9e04      	ldr	r6, [sp, #16]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00c      	beq.n	8003b12 <_printf_i+0x10a>
 8003af8:	9e04      	ldr	r6, [sp, #16]
 8003afa:	0028      	movs	r0, r5
 8003afc:	0039      	movs	r1, r7
 8003afe:	f7fc fb9b 	bl	8000238 <__aeabi_uidivmod>
 8003b02:	9b03      	ldr	r3, [sp, #12]
 8003b04:	3e01      	subs	r6, #1
 8003b06:	5c5b      	ldrb	r3, [r3, r1]
 8003b08:	7033      	strb	r3, [r6, #0]
 8003b0a:	002b      	movs	r3, r5
 8003b0c:	0005      	movs	r5, r0
 8003b0e:	429f      	cmp	r7, r3
 8003b10:	d9f3      	bls.n	8003afa <_printf_i+0xf2>
 8003b12:	2f08      	cmp	r7, #8
 8003b14:	d109      	bne.n	8003b2a <_printf_i+0x122>
 8003b16:	6823      	ldr	r3, [r4, #0]
 8003b18:	07db      	lsls	r3, r3, #31
 8003b1a:	d506      	bpl.n	8003b2a <_printf_i+0x122>
 8003b1c:	6863      	ldr	r3, [r4, #4]
 8003b1e:	6922      	ldr	r2, [r4, #16]
 8003b20:	4293      	cmp	r3, r2
 8003b22:	dc02      	bgt.n	8003b2a <_printf_i+0x122>
 8003b24:	2330      	movs	r3, #48	; 0x30
 8003b26:	3e01      	subs	r6, #1
 8003b28:	7033      	strb	r3, [r6, #0]
 8003b2a:	9b04      	ldr	r3, [sp, #16]
 8003b2c:	1b9b      	subs	r3, r3, r6
 8003b2e:	6123      	str	r3, [r4, #16]
 8003b30:	9b07      	ldr	r3, [sp, #28]
 8003b32:	0021      	movs	r1, r4
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	9805      	ldr	r0, [sp, #20]
 8003b38:	9b06      	ldr	r3, [sp, #24]
 8003b3a:	aa09      	add	r2, sp, #36	; 0x24
 8003b3c:	f7ff fef4 	bl	8003928 <_printf_common>
 8003b40:	1c43      	adds	r3, r0, #1
 8003b42:	d14c      	bne.n	8003bde <_printf_i+0x1d6>
 8003b44:	2001      	movs	r0, #1
 8003b46:	4240      	negs	r0, r0
 8003b48:	b00b      	add	sp, #44	; 0x2c
 8003b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b4c:	3145      	adds	r1, #69	; 0x45
 8003b4e:	700a      	strb	r2, [r1, #0]
 8003b50:	4a34      	ldr	r2, [pc, #208]	; (8003c24 <_printf_i+0x21c>)
 8003b52:	9203      	str	r2, [sp, #12]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	6821      	ldr	r1, [r4, #0]
 8003b58:	ca20      	ldmia	r2!, {r5}
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	0608      	lsls	r0, r1, #24
 8003b5e:	d516      	bpl.n	8003b8e <_printf_i+0x186>
 8003b60:	07cb      	lsls	r3, r1, #31
 8003b62:	d502      	bpl.n	8003b6a <_printf_i+0x162>
 8003b64:	2320      	movs	r3, #32
 8003b66:	4319      	orrs	r1, r3
 8003b68:	6021      	str	r1, [r4, #0]
 8003b6a:	2710      	movs	r7, #16
 8003b6c:	2d00      	cmp	r5, #0
 8003b6e:	d1b2      	bne.n	8003ad6 <_printf_i+0xce>
 8003b70:	2320      	movs	r3, #32
 8003b72:	6822      	ldr	r2, [r4, #0]
 8003b74:	439a      	bics	r2, r3
 8003b76:	6022      	str	r2, [r4, #0]
 8003b78:	e7ad      	b.n	8003ad6 <_printf_i+0xce>
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	6809      	ldr	r1, [r1, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	6022      	str	r2, [r4, #0]
 8003b82:	0022      	movs	r2, r4
 8003b84:	2178      	movs	r1, #120	; 0x78
 8003b86:	3245      	adds	r2, #69	; 0x45
 8003b88:	7011      	strb	r1, [r2, #0]
 8003b8a:	4a27      	ldr	r2, [pc, #156]	; (8003c28 <_printf_i+0x220>)
 8003b8c:	e7e1      	b.n	8003b52 <_printf_i+0x14a>
 8003b8e:	0648      	lsls	r0, r1, #25
 8003b90:	d5e6      	bpl.n	8003b60 <_printf_i+0x158>
 8003b92:	b2ad      	uxth	r5, r5
 8003b94:	e7e4      	b.n	8003b60 <_printf_i+0x158>
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	680d      	ldr	r5, [r1, #0]
 8003b9a:	1d10      	adds	r0, r2, #4
 8003b9c:	6949      	ldr	r1, [r1, #20]
 8003b9e:	6018      	str	r0, [r3, #0]
 8003ba0:	6813      	ldr	r3, [r2, #0]
 8003ba2:	062e      	lsls	r6, r5, #24
 8003ba4:	d501      	bpl.n	8003baa <_printf_i+0x1a2>
 8003ba6:	6019      	str	r1, [r3, #0]
 8003ba8:	e002      	b.n	8003bb0 <_printf_i+0x1a8>
 8003baa:	066d      	lsls	r5, r5, #25
 8003bac:	d5fb      	bpl.n	8003ba6 <_printf_i+0x19e>
 8003bae:	8019      	strh	r1, [r3, #0]
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	9e04      	ldr	r6, [sp, #16]
 8003bb4:	6123      	str	r3, [r4, #16]
 8003bb6:	e7bb      	b.n	8003b30 <_printf_i+0x128>
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	1d11      	adds	r1, r2, #4
 8003bbc:	6019      	str	r1, [r3, #0]
 8003bbe:	6816      	ldr	r6, [r2, #0]
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	0030      	movs	r0, r6
 8003bc4:	6862      	ldr	r2, [r4, #4]
 8003bc6:	f000 f831 	bl	8003c2c <memchr>
 8003bca:	2800      	cmp	r0, #0
 8003bcc:	d001      	beq.n	8003bd2 <_printf_i+0x1ca>
 8003bce:	1b80      	subs	r0, r0, r6
 8003bd0:	6060      	str	r0, [r4, #4]
 8003bd2:	6863      	ldr	r3, [r4, #4]
 8003bd4:	6123      	str	r3, [r4, #16]
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	9a04      	ldr	r2, [sp, #16]
 8003bda:	7013      	strb	r3, [r2, #0]
 8003bdc:	e7a8      	b.n	8003b30 <_printf_i+0x128>
 8003bde:	6923      	ldr	r3, [r4, #16]
 8003be0:	0032      	movs	r2, r6
 8003be2:	9906      	ldr	r1, [sp, #24]
 8003be4:	9805      	ldr	r0, [sp, #20]
 8003be6:	9d07      	ldr	r5, [sp, #28]
 8003be8:	47a8      	blx	r5
 8003bea:	1c43      	adds	r3, r0, #1
 8003bec:	d0aa      	beq.n	8003b44 <_printf_i+0x13c>
 8003bee:	6823      	ldr	r3, [r4, #0]
 8003bf0:	079b      	lsls	r3, r3, #30
 8003bf2:	d415      	bmi.n	8003c20 <_printf_i+0x218>
 8003bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bf6:	68e0      	ldr	r0, [r4, #12]
 8003bf8:	4298      	cmp	r0, r3
 8003bfa:	daa5      	bge.n	8003b48 <_printf_i+0x140>
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	e7a3      	b.n	8003b48 <_printf_i+0x140>
 8003c00:	0022      	movs	r2, r4
 8003c02:	2301      	movs	r3, #1
 8003c04:	9906      	ldr	r1, [sp, #24]
 8003c06:	9805      	ldr	r0, [sp, #20]
 8003c08:	9e07      	ldr	r6, [sp, #28]
 8003c0a:	3219      	adds	r2, #25
 8003c0c:	47b0      	blx	r6
 8003c0e:	1c43      	adds	r3, r0, #1
 8003c10:	d098      	beq.n	8003b44 <_printf_i+0x13c>
 8003c12:	3501      	adds	r5, #1
 8003c14:	68e3      	ldr	r3, [r4, #12]
 8003c16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c18:	1a9b      	subs	r3, r3, r2
 8003c1a:	42ab      	cmp	r3, r5
 8003c1c:	dcf0      	bgt.n	8003c00 <_printf_i+0x1f8>
 8003c1e:	e7e9      	b.n	8003bf4 <_printf_i+0x1ec>
 8003c20:	2500      	movs	r5, #0
 8003c22:	e7f7      	b.n	8003c14 <_printf_i+0x20c>
 8003c24:	08003f95 	.word	0x08003f95
 8003c28:	08003fa6 	.word	0x08003fa6

08003c2c <memchr>:
 8003c2c:	b2c9      	uxtb	r1, r1
 8003c2e:	1882      	adds	r2, r0, r2
 8003c30:	4290      	cmp	r0, r2
 8003c32:	d101      	bne.n	8003c38 <memchr+0xc>
 8003c34:	2000      	movs	r0, #0
 8003c36:	4770      	bx	lr
 8003c38:	7803      	ldrb	r3, [r0, #0]
 8003c3a:	428b      	cmp	r3, r1
 8003c3c:	d0fb      	beq.n	8003c36 <memchr+0xa>
 8003c3e:	3001      	adds	r0, #1
 8003c40:	e7f6      	b.n	8003c30 <memchr+0x4>

08003c42 <memcpy>:
 8003c42:	2300      	movs	r3, #0
 8003c44:	b510      	push	{r4, lr}
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d100      	bne.n	8003c4c <memcpy+0xa>
 8003c4a:	bd10      	pop	{r4, pc}
 8003c4c:	5ccc      	ldrb	r4, [r1, r3]
 8003c4e:	54c4      	strb	r4, [r0, r3]
 8003c50:	3301      	adds	r3, #1
 8003c52:	e7f8      	b.n	8003c46 <memcpy+0x4>

08003c54 <memmove>:
 8003c54:	b510      	push	{r4, lr}
 8003c56:	4288      	cmp	r0, r1
 8003c58:	d902      	bls.n	8003c60 <memmove+0xc>
 8003c5a:	188b      	adds	r3, r1, r2
 8003c5c:	4298      	cmp	r0, r3
 8003c5e:	d303      	bcc.n	8003c68 <memmove+0x14>
 8003c60:	2300      	movs	r3, #0
 8003c62:	e007      	b.n	8003c74 <memmove+0x20>
 8003c64:	5c8b      	ldrb	r3, [r1, r2]
 8003c66:	5483      	strb	r3, [r0, r2]
 8003c68:	3a01      	subs	r2, #1
 8003c6a:	d2fb      	bcs.n	8003c64 <memmove+0x10>
 8003c6c:	bd10      	pop	{r4, pc}
 8003c6e:	5ccc      	ldrb	r4, [r1, r3]
 8003c70:	54c4      	strb	r4, [r0, r3]
 8003c72:	3301      	adds	r3, #1
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d1fa      	bne.n	8003c6e <memmove+0x1a>
 8003c78:	e7f8      	b.n	8003c6c <memmove+0x18>
	...

08003c7c <_free_r>:
 8003c7c:	b570      	push	{r4, r5, r6, lr}
 8003c7e:	0005      	movs	r5, r0
 8003c80:	2900      	cmp	r1, #0
 8003c82:	d010      	beq.n	8003ca6 <_free_r+0x2a>
 8003c84:	1f0c      	subs	r4, r1, #4
 8003c86:	6823      	ldr	r3, [r4, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	da00      	bge.n	8003c8e <_free_r+0x12>
 8003c8c:	18e4      	adds	r4, r4, r3
 8003c8e:	0028      	movs	r0, r5
 8003c90:	f000 f918 	bl	8003ec4 <__malloc_lock>
 8003c94:	4a1d      	ldr	r2, [pc, #116]	; (8003d0c <_free_r+0x90>)
 8003c96:	6813      	ldr	r3, [r2, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d105      	bne.n	8003ca8 <_free_r+0x2c>
 8003c9c:	6063      	str	r3, [r4, #4]
 8003c9e:	6014      	str	r4, [r2, #0]
 8003ca0:	0028      	movs	r0, r5
 8003ca2:	f000 f917 	bl	8003ed4 <__malloc_unlock>
 8003ca6:	bd70      	pop	{r4, r5, r6, pc}
 8003ca8:	42a3      	cmp	r3, r4
 8003caa:	d908      	bls.n	8003cbe <_free_r+0x42>
 8003cac:	6821      	ldr	r1, [r4, #0]
 8003cae:	1860      	adds	r0, r4, r1
 8003cb0:	4283      	cmp	r3, r0
 8003cb2:	d1f3      	bne.n	8003c9c <_free_r+0x20>
 8003cb4:	6818      	ldr	r0, [r3, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	1841      	adds	r1, r0, r1
 8003cba:	6021      	str	r1, [r4, #0]
 8003cbc:	e7ee      	b.n	8003c9c <_free_r+0x20>
 8003cbe:	001a      	movs	r2, r3
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <_free_r+0x4e>
 8003cc6:	42a3      	cmp	r3, r4
 8003cc8:	d9f9      	bls.n	8003cbe <_free_r+0x42>
 8003cca:	6811      	ldr	r1, [r2, #0]
 8003ccc:	1850      	adds	r0, r2, r1
 8003cce:	42a0      	cmp	r0, r4
 8003cd0:	d10b      	bne.n	8003cea <_free_r+0x6e>
 8003cd2:	6820      	ldr	r0, [r4, #0]
 8003cd4:	1809      	adds	r1, r1, r0
 8003cd6:	1850      	adds	r0, r2, r1
 8003cd8:	6011      	str	r1, [r2, #0]
 8003cda:	4283      	cmp	r3, r0
 8003cdc:	d1e0      	bne.n	8003ca0 <_free_r+0x24>
 8003cde:	6818      	ldr	r0, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	1841      	adds	r1, r0, r1
 8003ce4:	6011      	str	r1, [r2, #0]
 8003ce6:	6053      	str	r3, [r2, #4]
 8003ce8:	e7da      	b.n	8003ca0 <_free_r+0x24>
 8003cea:	42a0      	cmp	r0, r4
 8003cec:	d902      	bls.n	8003cf4 <_free_r+0x78>
 8003cee:	230c      	movs	r3, #12
 8003cf0:	602b      	str	r3, [r5, #0]
 8003cf2:	e7d5      	b.n	8003ca0 <_free_r+0x24>
 8003cf4:	6821      	ldr	r1, [r4, #0]
 8003cf6:	1860      	adds	r0, r4, r1
 8003cf8:	4283      	cmp	r3, r0
 8003cfa:	d103      	bne.n	8003d04 <_free_r+0x88>
 8003cfc:	6818      	ldr	r0, [r3, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	1841      	adds	r1, r0, r1
 8003d02:	6021      	str	r1, [r4, #0]
 8003d04:	6063      	str	r3, [r4, #4]
 8003d06:	6054      	str	r4, [r2, #4]
 8003d08:	e7ca      	b.n	8003ca0 <_free_r+0x24>
 8003d0a:	46c0      	nop			; (mov r8, r8)
 8003d0c:	200001d0 	.word	0x200001d0

08003d10 <sbrk_aligned>:
 8003d10:	b570      	push	{r4, r5, r6, lr}
 8003d12:	4e0f      	ldr	r6, [pc, #60]	; (8003d50 <sbrk_aligned+0x40>)
 8003d14:	000d      	movs	r5, r1
 8003d16:	6831      	ldr	r1, [r6, #0]
 8003d18:	0004      	movs	r4, r0
 8003d1a:	2900      	cmp	r1, #0
 8003d1c:	d102      	bne.n	8003d24 <sbrk_aligned+0x14>
 8003d1e:	f000 f8bf 	bl	8003ea0 <_sbrk_r>
 8003d22:	6030      	str	r0, [r6, #0]
 8003d24:	0029      	movs	r1, r5
 8003d26:	0020      	movs	r0, r4
 8003d28:	f000 f8ba 	bl	8003ea0 <_sbrk_r>
 8003d2c:	1c43      	adds	r3, r0, #1
 8003d2e:	d00a      	beq.n	8003d46 <sbrk_aligned+0x36>
 8003d30:	2303      	movs	r3, #3
 8003d32:	1cc5      	adds	r5, r0, #3
 8003d34:	439d      	bics	r5, r3
 8003d36:	42a8      	cmp	r0, r5
 8003d38:	d007      	beq.n	8003d4a <sbrk_aligned+0x3a>
 8003d3a:	1a29      	subs	r1, r5, r0
 8003d3c:	0020      	movs	r0, r4
 8003d3e:	f000 f8af 	bl	8003ea0 <_sbrk_r>
 8003d42:	1c43      	adds	r3, r0, #1
 8003d44:	d101      	bne.n	8003d4a <sbrk_aligned+0x3a>
 8003d46:	2501      	movs	r5, #1
 8003d48:	426d      	negs	r5, r5
 8003d4a:	0028      	movs	r0, r5
 8003d4c:	bd70      	pop	{r4, r5, r6, pc}
 8003d4e:	46c0      	nop			; (mov r8, r8)
 8003d50:	200001d4 	.word	0x200001d4

08003d54 <_malloc_r>:
 8003d54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d56:	2203      	movs	r2, #3
 8003d58:	1ccb      	adds	r3, r1, #3
 8003d5a:	4393      	bics	r3, r2
 8003d5c:	3308      	adds	r3, #8
 8003d5e:	0006      	movs	r6, r0
 8003d60:	001f      	movs	r7, r3
 8003d62:	2b0c      	cmp	r3, #12
 8003d64:	d232      	bcs.n	8003dcc <_malloc_r+0x78>
 8003d66:	270c      	movs	r7, #12
 8003d68:	42b9      	cmp	r1, r7
 8003d6a:	d831      	bhi.n	8003dd0 <_malloc_r+0x7c>
 8003d6c:	0030      	movs	r0, r6
 8003d6e:	f000 f8a9 	bl	8003ec4 <__malloc_lock>
 8003d72:	4d32      	ldr	r5, [pc, #200]	; (8003e3c <_malloc_r+0xe8>)
 8003d74:	682b      	ldr	r3, [r5, #0]
 8003d76:	001c      	movs	r4, r3
 8003d78:	2c00      	cmp	r4, #0
 8003d7a:	d12e      	bne.n	8003dda <_malloc_r+0x86>
 8003d7c:	0039      	movs	r1, r7
 8003d7e:	0030      	movs	r0, r6
 8003d80:	f7ff ffc6 	bl	8003d10 <sbrk_aligned>
 8003d84:	0004      	movs	r4, r0
 8003d86:	1c43      	adds	r3, r0, #1
 8003d88:	d11e      	bne.n	8003dc8 <_malloc_r+0x74>
 8003d8a:	682c      	ldr	r4, [r5, #0]
 8003d8c:	0025      	movs	r5, r4
 8003d8e:	2d00      	cmp	r5, #0
 8003d90:	d14a      	bne.n	8003e28 <_malloc_r+0xd4>
 8003d92:	6823      	ldr	r3, [r4, #0]
 8003d94:	0029      	movs	r1, r5
 8003d96:	18e3      	adds	r3, r4, r3
 8003d98:	0030      	movs	r0, r6
 8003d9a:	9301      	str	r3, [sp, #4]
 8003d9c:	f000 f880 	bl	8003ea0 <_sbrk_r>
 8003da0:	9b01      	ldr	r3, [sp, #4]
 8003da2:	4283      	cmp	r3, r0
 8003da4:	d143      	bne.n	8003e2e <_malloc_r+0xda>
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	3703      	adds	r7, #3
 8003daa:	1aff      	subs	r7, r7, r3
 8003dac:	2303      	movs	r3, #3
 8003dae:	439f      	bics	r7, r3
 8003db0:	3708      	adds	r7, #8
 8003db2:	2f0c      	cmp	r7, #12
 8003db4:	d200      	bcs.n	8003db8 <_malloc_r+0x64>
 8003db6:	270c      	movs	r7, #12
 8003db8:	0039      	movs	r1, r7
 8003dba:	0030      	movs	r0, r6
 8003dbc:	f7ff ffa8 	bl	8003d10 <sbrk_aligned>
 8003dc0:	1c43      	adds	r3, r0, #1
 8003dc2:	d034      	beq.n	8003e2e <_malloc_r+0xda>
 8003dc4:	6823      	ldr	r3, [r4, #0]
 8003dc6:	19df      	adds	r7, r3, r7
 8003dc8:	6027      	str	r7, [r4, #0]
 8003dca:	e013      	b.n	8003df4 <_malloc_r+0xa0>
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	dacb      	bge.n	8003d68 <_malloc_r+0x14>
 8003dd0:	230c      	movs	r3, #12
 8003dd2:	2500      	movs	r5, #0
 8003dd4:	6033      	str	r3, [r6, #0]
 8003dd6:	0028      	movs	r0, r5
 8003dd8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003dda:	6822      	ldr	r2, [r4, #0]
 8003ddc:	1bd1      	subs	r1, r2, r7
 8003dde:	d420      	bmi.n	8003e22 <_malloc_r+0xce>
 8003de0:	290b      	cmp	r1, #11
 8003de2:	d917      	bls.n	8003e14 <_malloc_r+0xc0>
 8003de4:	19e2      	adds	r2, r4, r7
 8003de6:	6027      	str	r7, [r4, #0]
 8003de8:	42a3      	cmp	r3, r4
 8003dea:	d111      	bne.n	8003e10 <_malloc_r+0xbc>
 8003dec:	602a      	str	r2, [r5, #0]
 8003dee:	6863      	ldr	r3, [r4, #4]
 8003df0:	6011      	str	r1, [r2, #0]
 8003df2:	6053      	str	r3, [r2, #4]
 8003df4:	0030      	movs	r0, r6
 8003df6:	0025      	movs	r5, r4
 8003df8:	f000 f86c 	bl	8003ed4 <__malloc_unlock>
 8003dfc:	2207      	movs	r2, #7
 8003dfe:	350b      	adds	r5, #11
 8003e00:	1d23      	adds	r3, r4, #4
 8003e02:	4395      	bics	r5, r2
 8003e04:	1aea      	subs	r2, r5, r3
 8003e06:	429d      	cmp	r5, r3
 8003e08:	d0e5      	beq.n	8003dd6 <_malloc_r+0x82>
 8003e0a:	1b5b      	subs	r3, r3, r5
 8003e0c:	50a3      	str	r3, [r4, r2]
 8003e0e:	e7e2      	b.n	8003dd6 <_malloc_r+0x82>
 8003e10:	605a      	str	r2, [r3, #4]
 8003e12:	e7ec      	b.n	8003dee <_malloc_r+0x9a>
 8003e14:	6862      	ldr	r2, [r4, #4]
 8003e16:	42a3      	cmp	r3, r4
 8003e18:	d101      	bne.n	8003e1e <_malloc_r+0xca>
 8003e1a:	602a      	str	r2, [r5, #0]
 8003e1c:	e7ea      	b.n	8003df4 <_malloc_r+0xa0>
 8003e1e:	605a      	str	r2, [r3, #4]
 8003e20:	e7e8      	b.n	8003df4 <_malloc_r+0xa0>
 8003e22:	0023      	movs	r3, r4
 8003e24:	6864      	ldr	r4, [r4, #4]
 8003e26:	e7a7      	b.n	8003d78 <_malloc_r+0x24>
 8003e28:	002c      	movs	r4, r5
 8003e2a:	686d      	ldr	r5, [r5, #4]
 8003e2c:	e7af      	b.n	8003d8e <_malloc_r+0x3a>
 8003e2e:	230c      	movs	r3, #12
 8003e30:	0030      	movs	r0, r6
 8003e32:	6033      	str	r3, [r6, #0]
 8003e34:	f000 f84e 	bl	8003ed4 <__malloc_unlock>
 8003e38:	e7cd      	b.n	8003dd6 <_malloc_r+0x82>
 8003e3a:	46c0      	nop			; (mov r8, r8)
 8003e3c:	200001d0 	.word	0x200001d0

08003e40 <_realloc_r>:
 8003e40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e42:	0007      	movs	r7, r0
 8003e44:	000e      	movs	r6, r1
 8003e46:	0014      	movs	r4, r2
 8003e48:	2900      	cmp	r1, #0
 8003e4a:	d105      	bne.n	8003e58 <_realloc_r+0x18>
 8003e4c:	0011      	movs	r1, r2
 8003e4e:	f7ff ff81 	bl	8003d54 <_malloc_r>
 8003e52:	0005      	movs	r5, r0
 8003e54:	0028      	movs	r0, r5
 8003e56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e58:	2a00      	cmp	r2, #0
 8003e5a:	d103      	bne.n	8003e64 <_realloc_r+0x24>
 8003e5c:	f7ff ff0e 	bl	8003c7c <_free_r>
 8003e60:	0025      	movs	r5, r4
 8003e62:	e7f7      	b.n	8003e54 <_realloc_r+0x14>
 8003e64:	f000 f83e 	bl	8003ee4 <_malloc_usable_size_r>
 8003e68:	9001      	str	r0, [sp, #4]
 8003e6a:	4284      	cmp	r4, r0
 8003e6c:	d803      	bhi.n	8003e76 <_realloc_r+0x36>
 8003e6e:	0035      	movs	r5, r6
 8003e70:	0843      	lsrs	r3, r0, #1
 8003e72:	42a3      	cmp	r3, r4
 8003e74:	d3ee      	bcc.n	8003e54 <_realloc_r+0x14>
 8003e76:	0021      	movs	r1, r4
 8003e78:	0038      	movs	r0, r7
 8003e7a:	f7ff ff6b 	bl	8003d54 <_malloc_r>
 8003e7e:	1e05      	subs	r5, r0, #0
 8003e80:	d0e8      	beq.n	8003e54 <_realloc_r+0x14>
 8003e82:	9b01      	ldr	r3, [sp, #4]
 8003e84:	0022      	movs	r2, r4
 8003e86:	429c      	cmp	r4, r3
 8003e88:	d900      	bls.n	8003e8c <_realloc_r+0x4c>
 8003e8a:	001a      	movs	r2, r3
 8003e8c:	0031      	movs	r1, r6
 8003e8e:	0028      	movs	r0, r5
 8003e90:	f7ff fed7 	bl	8003c42 <memcpy>
 8003e94:	0031      	movs	r1, r6
 8003e96:	0038      	movs	r0, r7
 8003e98:	f7ff fef0 	bl	8003c7c <_free_r>
 8003e9c:	e7da      	b.n	8003e54 <_realloc_r+0x14>
	...

08003ea0 <_sbrk_r>:
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	b570      	push	{r4, r5, r6, lr}
 8003ea4:	4d06      	ldr	r5, [pc, #24]	; (8003ec0 <_sbrk_r+0x20>)
 8003ea6:	0004      	movs	r4, r0
 8003ea8:	0008      	movs	r0, r1
 8003eaa:	602b      	str	r3, [r5, #0]
 8003eac:	f7fc fd9a 	bl	80009e4 <_sbrk>
 8003eb0:	1c43      	adds	r3, r0, #1
 8003eb2:	d103      	bne.n	8003ebc <_sbrk_r+0x1c>
 8003eb4:	682b      	ldr	r3, [r5, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d000      	beq.n	8003ebc <_sbrk_r+0x1c>
 8003eba:	6023      	str	r3, [r4, #0]
 8003ebc:	bd70      	pop	{r4, r5, r6, pc}
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	200001d8 	.word	0x200001d8

08003ec4 <__malloc_lock>:
 8003ec4:	b510      	push	{r4, lr}
 8003ec6:	4802      	ldr	r0, [pc, #8]	; (8003ed0 <__malloc_lock+0xc>)
 8003ec8:	f000 f814 	bl	8003ef4 <__retarget_lock_acquire_recursive>
 8003ecc:	bd10      	pop	{r4, pc}
 8003ece:	46c0      	nop			; (mov r8, r8)
 8003ed0:	200001dc 	.word	0x200001dc

08003ed4 <__malloc_unlock>:
 8003ed4:	b510      	push	{r4, lr}
 8003ed6:	4802      	ldr	r0, [pc, #8]	; (8003ee0 <__malloc_unlock+0xc>)
 8003ed8:	f000 f80d 	bl	8003ef6 <__retarget_lock_release_recursive>
 8003edc:	bd10      	pop	{r4, pc}
 8003ede:	46c0      	nop			; (mov r8, r8)
 8003ee0:	200001dc 	.word	0x200001dc

08003ee4 <_malloc_usable_size_r>:
 8003ee4:	1f0b      	subs	r3, r1, #4
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	1f18      	subs	r0, r3, #4
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	da01      	bge.n	8003ef2 <_malloc_usable_size_r+0xe>
 8003eee:	580b      	ldr	r3, [r1, r0]
 8003ef0:	18c0      	adds	r0, r0, r3
 8003ef2:	4770      	bx	lr

08003ef4 <__retarget_lock_acquire_recursive>:
 8003ef4:	4770      	bx	lr

08003ef6 <__retarget_lock_release_recursive>:
 8003ef6:	4770      	bx	lr

08003ef8 <_init>:
 8003ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efa:	46c0      	nop			; (mov r8, r8)
 8003efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003efe:	bc08      	pop	{r3}
 8003f00:	469e      	mov	lr, r3
 8003f02:	4770      	bx	lr

08003f04 <_fini>:
 8003f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f0a:	bc08      	pop	{r3}
 8003f0c:	469e      	mov	lr, r3
 8003f0e:	4770      	bx	lr

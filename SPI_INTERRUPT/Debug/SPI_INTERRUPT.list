
SPI_INTERRUPT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031fc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080032bc  080032bc  000132bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003328  08003328  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08003328  08003328  00013328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003330  08003330  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003330  08003330  00013330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003334  08003334  00013334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000014  0800334c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  0800334c  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac78  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018fa  00000000  00000000  0002acb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000910  00000000  00000000  0002c5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000878  00000000  00000000  0002cec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013061  00000000  00000000  0002d738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b04b  00000000  00000000  00040799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007588d  00000000  00000000  0004b7e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c1071  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fec  00000000  00000000  000c10c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080032a4 	.word	0x080032a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	080032a4 	.word	0x080032a4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 fa3a 	bl	8000924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f814 	bl	80004dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f8ec 	bl	8000690 <MX_GPIO_Init>
  MX_SPI2_Init();
 80004b8:	f000 f882 	bl	80005c0 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80004bc:	f000 f8b8 	bl	8000630 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_SPI_TransmitReceive_IT(&hspi2, buffer_tx, buffer_rx, 7);
 80004c0:	4a03      	ldr	r2, [pc, #12]	; (80004d0 <main+0x28>)
 80004c2:	4904      	ldr	r1, [pc, #16]	; (80004d4 <main+0x2c>)
 80004c4:	4804      	ldr	r0, [pc, #16]	; (80004d8 <main+0x30>)
 80004c6:	2307      	movs	r3, #7
 80004c8:	f001 fd42 	bl	8001f50 <HAL_SPI_TransmitReceive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004cc:	e7fe      	b.n	80004cc <main+0x24>
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	20000110 	.word	0x20000110
 80004d4:	20000000 	.word	0x20000000
 80004d8:	20000030 	.word	0x20000030

080004dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004dc:	b590      	push	{r4, r7, lr}
 80004de:	b09d      	sub	sp, #116	; 0x74
 80004e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e2:	2438      	movs	r4, #56	; 0x38
 80004e4:	193b      	adds	r3, r7, r4
 80004e6:	0018      	movs	r0, r3
 80004e8:	2338      	movs	r3, #56	; 0x38
 80004ea:	001a      	movs	r2, r3
 80004ec:	2100      	movs	r1, #0
 80004ee:	f002 fed1 	bl	8003294 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f2:	2324      	movs	r3, #36	; 0x24
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	0018      	movs	r0, r3
 80004f8:	2314      	movs	r3, #20
 80004fa:	001a      	movs	r2, r3
 80004fc:	2100      	movs	r1, #0
 80004fe:	f002 fec9 	bl	8003294 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000502:	003b      	movs	r3, r7
 8000504:	0018      	movs	r0, r3
 8000506:	2324      	movs	r3, #36	; 0x24
 8000508:	001a      	movs	r2, r3
 800050a:	2100      	movs	r1, #0
 800050c:	f002 fec2 	bl	8003294 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000510:	4b29      	ldr	r3, [pc, #164]	; (80005b8 <SystemClock_Config+0xdc>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a29      	ldr	r2, [pc, #164]	; (80005bc <SystemClock_Config+0xe0>)
 8000516:	401a      	ands	r2, r3
 8000518:	4b27      	ldr	r3, [pc, #156]	; (80005b8 <SystemClock_Config+0xdc>)
 800051a:	2180      	movs	r1, #128	; 0x80
 800051c:	0109      	lsls	r1, r1, #4
 800051e:	430a      	orrs	r2, r1
 8000520:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000522:	0021      	movs	r1, r4
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2202      	movs	r2, #2
 8000528:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2201      	movs	r2, #1
 800052e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2210      	movs	r2, #16
 8000534:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2202      	movs	r2, #2
 800053a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2200      	movs	r2, #0
 8000540:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2200      	movs	r2, #0
 8000546:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2280      	movs	r2, #128	; 0x80
 800054c:	0412      	lsls	r2, r2, #16
 800054e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000550:	187b      	adds	r3, r7, r1
 8000552:	0018      	movs	r0, r3
 8000554:	f000 fcf2 	bl	8000f3c <HAL_RCC_OscConfig>
 8000558:	1e03      	subs	r3, r0, #0
 800055a:	d001      	beq.n	8000560 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800055c:	f000 f8cc 	bl	80006f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000560:	2124      	movs	r1, #36	; 0x24
 8000562:	187b      	adds	r3, r7, r1
 8000564:	220f      	movs	r2, #15
 8000566:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2203      	movs	r2, #3
 800056c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056e:	187b      	adds	r3, r7, r1
 8000570:	2200      	movs	r2, #0
 8000572:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000574:	187b      	adds	r3, r7, r1
 8000576:	2200      	movs	r2, #0
 8000578:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2200      	movs	r2, #0
 800057e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2100      	movs	r1, #0
 8000584:	0018      	movs	r0, r3
 8000586:	f001 f89d 	bl	80016c4 <HAL_RCC_ClockConfig>
 800058a:	1e03      	subs	r3, r0, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800058e:	f000 f8b3 	bl	80006f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000592:	003b      	movs	r3, r7
 8000594:	2201      	movs	r2, #1
 8000596:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000598:	003b      	movs	r3, r7
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800059e:	003b      	movs	r3, r7
 80005a0:	0018      	movs	r0, r3
 80005a2:	f001 fab3 	bl	8001b0c <HAL_RCCEx_PeriphCLKConfig>
 80005a6:	1e03      	subs	r3, r0, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005aa:	f000 f8a5 	bl	80006f8 <Error_Handler>
  }
}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b01d      	add	sp, #116	; 0x74
 80005b4:	bd90      	pop	{r4, r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	40007000 	.word	0x40007000
 80005bc:	ffffe7ff 	.word	0xffffe7ff

080005c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80005c4:	4b18      	ldr	r3, [pc, #96]	; (8000628 <MX_SPI2_Init+0x68>)
 80005c6:	4a19      	ldr	r2, [pc, #100]	; (800062c <MX_SPI2_Init+0x6c>)
 80005c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80005ca:	4b17      	ldr	r3, [pc, #92]	; (8000628 <MX_SPI2_Init+0x68>)
 80005cc:	2282      	movs	r2, #130	; 0x82
 80005ce:	0052      	lsls	r2, r2, #1
 80005d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005d2:	4b15      	ldr	r3, [pc, #84]	; (8000628 <MX_SPI2_Init+0x68>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80005d8:	4b13      	ldr	r3, [pc, #76]	; (8000628 <MX_SPI2_Init+0x68>)
 80005da:	2200      	movs	r2, #0
 80005dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <MX_SPI2_Init+0x68>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005e4:	4b10      	ldr	r3, [pc, #64]	; (8000628 <MX_SPI2_Init+0x68>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_SPI2_Init+0x68>)
 80005ec:	2280      	movs	r2, #128	; 0x80
 80005ee:	0092      	lsls	r2, r2, #2
 80005f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80005f2:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <MX_SPI2_Init+0x68>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005f8:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <MX_SPI2_Init+0x68>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80005fe:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <MX_SPI2_Init+0x68>)
 8000600:	2200      	movs	r2, #0
 8000602:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <MX_SPI2_Init+0x68>)
 8000606:	2200      	movs	r2, #0
 8000608:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800060a:	4b07      	ldr	r3, [pc, #28]	; (8000628 <MX_SPI2_Init+0x68>)
 800060c:	2207      	movs	r2, #7
 800060e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000610:	4b05      	ldr	r3, [pc, #20]	; (8000628 <MX_SPI2_Init+0x68>)
 8000612:	0018      	movs	r0, r3
 8000614:	f001 fc08 	bl	8001e28 <HAL_SPI_Init>
 8000618:	1e03      	subs	r3, r0, #0
 800061a:	d001      	beq.n	8000620 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800061c:	f000 f86c 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000620:	46c0      	nop			; (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	20000030 	.word	0x20000030
 800062c:	40003800 	.word	0x40003800

08000630 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000634:	4b14      	ldr	r3, [pc, #80]	; (8000688 <MX_USART1_UART_Init+0x58>)
 8000636:	4a15      	ldr	r2, [pc, #84]	; (800068c <MX_USART1_UART_Init+0x5c>)
 8000638:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800063a:	4b13      	ldr	r3, [pc, #76]	; (8000688 <MX_USART1_UART_Init+0x58>)
 800063c:	22e1      	movs	r2, #225	; 0xe1
 800063e:	0252      	lsls	r2, r2, #9
 8000640:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_USART1_UART_Init+0x58>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_USART1_UART_Init+0x58>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_USART1_UART_Init+0x58>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_USART1_UART_Init+0x58>)
 8000656:	220c      	movs	r2, #12
 8000658:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065a:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <MX_USART1_UART_Init+0x58>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_USART1_UART_Init+0x58>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000666:	4b08      	ldr	r3, [pc, #32]	; (8000688 <MX_USART1_UART_Init+0x58>)
 8000668:	2200      	movs	r2, #0
 800066a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_USART1_UART_Init+0x58>)
 800066e:	2200      	movs	r2, #0
 8000670:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000672:	4b05      	ldr	r3, [pc, #20]	; (8000688 <MX_USART1_UART_Init+0x58>)
 8000674:	0018      	movs	r0, r3
 8000676:	f002 f847 	bl	8002708 <HAL_UART_Init>
 800067a:	1e03      	subs	r3, r0, #0
 800067c:	d001      	beq.n	8000682 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800067e:	f000 f83b 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000088 	.word	0x20000088
 800068c:	40013800 	.word	0x40013800

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_GPIO_Init+0x40>)
 8000698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800069a:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <MX_GPIO_Init+0x40>)
 800069c:	2102      	movs	r1, #2
 800069e:	430a      	orrs	r2, r1
 80006a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <MX_GPIO_Init+0x40>)
 80006a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006a6:	2202      	movs	r2, #2
 80006a8:	4013      	ands	r3, r2
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <MX_GPIO_Init+0x40>)
 80006b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006b2:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <MX_GPIO_Init+0x40>)
 80006b4:	2101      	movs	r1, #1
 80006b6:	430a      	orrs	r2, r1
 80006b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <MX_GPIO_Init+0x40>)
 80006bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006be:	2201      	movs	r2, #1
 80006c0:	4013      	ands	r3, r2
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]

}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b002      	add	sp, #8
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	40021000 	.word	0x40021000

080006d4 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, buffer_rx, 7, 100);
 80006dc:	4904      	ldr	r1, [pc, #16]	; (80006f0 <HAL_SPI_TxRxCpltCallback+0x1c>)
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <HAL_SPI_TxRxCpltCallback+0x20>)
 80006e0:	2364      	movs	r3, #100	; 0x64
 80006e2:	2207      	movs	r2, #7
 80006e4:	f002 f864 	bl	80027b0 <HAL_UART_Transmit>
}
 80006e8:	46c0      	nop			; (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	b002      	add	sp, #8
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000110 	.word	0x20000110
 80006f4:	20000088 	.word	0x20000088

080006f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006fc:	b672      	cpsid	i
}
 80006fe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000700:	e7fe      	b.n	8000700 <Error_Handler+0x8>
	...

08000704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <HAL_MspInit+0x24>)
 800070a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_MspInit+0x24>)
 800070e:	2101      	movs	r1, #1
 8000710:	430a      	orrs	r2, r1
 8000712:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000714:	4b04      	ldr	r3, [pc, #16]	; (8000728 <HAL_MspInit+0x24>)
 8000716:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000718:	4b03      	ldr	r3, [pc, #12]	; (8000728 <HAL_MspInit+0x24>)
 800071a:	2180      	movs	r1, #128	; 0x80
 800071c:	0549      	lsls	r1, r1, #21
 800071e:	430a      	orrs	r2, r1
 8000720:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40021000 	.word	0x40021000

0800072c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b089      	sub	sp, #36	; 0x24
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	240c      	movs	r4, #12
 8000736:	193b      	adds	r3, r7, r4
 8000738:	0018      	movs	r0, r3
 800073a:	2314      	movs	r3, #20
 800073c:	001a      	movs	r2, r3
 800073e:	2100      	movs	r1, #0
 8000740:	f002 fda8 	bl	8003294 <memset>
  if(hspi->Instance==SPI2)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a27      	ldr	r2, [pc, #156]	; (80007e8 <HAL_SPI_MspInit+0xbc>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d147      	bne.n	80007de <HAL_SPI_MspInit+0xb2>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800074e:	4b27      	ldr	r3, [pc, #156]	; (80007ec <HAL_SPI_MspInit+0xc0>)
 8000750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000752:	4b26      	ldr	r3, [pc, #152]	; (80007ec <HAL_SPI_MspInit+0xc0>)
 8000754:	2180      	movs	r1, #128	; 0x80
 8000756:	01c9      	lsls	r1, r1, #7
 8000758:	430a      	orrs	r2, r1
 800075a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800075c:	4b23      	ldr	r3, [pc, #140]	; (80007ec <HAL_SPI_MspInit+0xc0>)
 800075e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000760:	4b22      	ldr	r3, [pc, #136]	; (80007ec <HAL_SPI_MspInit+0xc0>)
 8000762:	2102      	movs	r1, #2
 8000764:	430a      	orrs	r2, r1
 8000766:	62da      	str	r2, [r3, #44]	; 0x2c
 8000768:	4b20      	ldr	r3, [pc, #128]	; (80007ec <HAL_SPI_MspInit+0xc0>)
 800076a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800076c:	2202      	movs	r2, #2
 800076e:	4013      	ands	r3, r2
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = BSP_SPI_CSK_Pin;
 8000774:	193b      	adds	r3, r7, r4
 8000776:	2280      	movs	r2, #128	; 0x80
 8000778:	00d2      	lsls	r2, r2, #3
 800077a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077c:	193b      	adds	r3, r7, r4
 800077e:	2202      	movs	r2, #2
 8000780:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	193b      	adds	r3, r7, r4
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000788:	193b      	adds	r3, r7, r4
 800078a:	2203      	movs	r2, #3
 800078c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800078e:	193b      	adds	r3, r7, r4
 8000790:	2205      	movs	r2, #5
 8000792:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BSP_SPI_CSK_GPIO_Port, &GPIO_InitStruct);
 8000794:	193b      	adds	r3, r7, r4
 8000796:	4a16      	ldr	r2, [pc, #88]	; (80007f0 <HAL_SPI_MspInit+0xc4>)
 8000798:	0019      	movs	r1, r3
 800079a:	0010      	movs	r0, r2
 800079c:	f000 fa58 	bl	8000c50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BSP_SPI_MISO_Pin|BSP_SPI_MOSI_Pin;
 80007a0:	0021      	movs	r1, r4
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	22c0      	movs	r2, #192	; 0xc0
 80007a6:	0212      	lsls	r2, r2, #8
 80007a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	2202      	movs	r2, #2
 80007ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	2203      	movs	r2, #3
 80007ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	4a0a      	ldr	r2, [pc, #40]	; (80007f0 <HAL_SPI_MspInit+0xc4>)
 80007c6:	0019      	movs	r1, r3
 80007c8:	0010      	movs	r0, r2
 80007ca:	f000 fa41 	bl	8000c50 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	201a      	movs	r0, #26
 80007d4:	f000 f9c2 	bl	8000b5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80007d8:	201a      	movs	r0, #26
 80007da:	f000 f9d4 	bl	8000b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	b009      	add	sp, #36	; 0x24
 80007e4:	bd90      	pop	{r4, r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	40003800 	.word	0x40003800
 80007ec:	40021000 	.word	0x40021000
 80007f0:	50000400 	.word	0x50000400

080007f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f4:	b590      	push	{r4, r7, lr}
 80007f6:	b089      	sub	sp, #36	; 0x24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fc:	240c      	movs	r4, #12
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	0018      	movs	r0, r3
 8000802:	2314      	movs	r3, #20
 8000804:	001a      	movs	r2, r3
 8000806:	2100      	movs	r1, #0
 8000808:	f002 fd44 	bl	8003294 <memset>
  if(huart->Instance==USART1)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a18      	ldr	r2, [pc, #96]	; (8000874 <HAL_UART_MspInit+0x80>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d12a      	bne.n	800086c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000816:	4b18      	ldr	r3, [pc, #96]	; (8000878 <HAL_UART_MspInit+0x84>)
 8000818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800081a:	4b17      	ldr	r3, [pc, #92]	; (8000878 <HAL_UART_MspInit+0x84>)
 800081c:	2180      	movs	r1, #128	; 0x80
 800081e:	01c9      	lsls	r1, r1, #7
 8000820:	430a      	orrs	r2, r1
 8000822:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <HAL_UART_MspInit+0x84>)
 8000826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000828:	4b13      	ldr	r3, [pc, #76]	; (8000878 <HAL_UART_MspInit+0x84>)
 800082a:	2101      	movs	r1, #1
 800082c:	430a      	orrs	r2, r1
 800082e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <HAL_UART_MspInit+0x84>)
 8000832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000834:	2201      	movs	r2, #1
 8000836:	4013      	ands	r3, r2
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BSP_UART_TX_Pin|BSP_UART_RX_Pin;
 800083c:	193b      	adds	r3, r7, r4
 800083e:	22c0      	movs	r2, #192	; 0xc0
 8000840:	00d2      	lsls	r2, r2, #3
 8000842:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	0021      	movs	r1, r4
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2202      	movs	r2, #2
 800084a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2203      	movs	r2, #3
 8000856:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2204      	movs	r2, #4
 800085c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085e:	187a      	adds	r2, r7, r1
 8000860:	23a0      	movs	r3, #160	; 0xa0
 8000862:	05db      	lsls	r3, r3, #23
 8000864:	0011      	movs	r1, r2
 8000866:	0018      	movs	r0, r3
 8000868:	f000 f9f2 	bl	8000c50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	b009      	add	sp, #36	; 0x24
 8000872:	bd90      	pop	{r4, r7, pc}
 8000874:	40013800 	.word	0x40013800
 8000878:	40021000 	.word	0x40021000

0800087c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <NMI_Handler+0x4>

08000882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <HardFault_Handler+0x4>

08000888 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a0:	f000 f894 	bl	80009cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a4:	46c0      	nop			; (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80008b0:	4b03      	ldr	r3, [pc, #12]	; (80008c0 <SPI2_IRQHandler+0x14>)
 80008b2:	0018      	movs	r0, r3
 80008b4:	f001 fbf4 	bl	80020a0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80008b8:	46c0      	nop			; (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	20000030 	.word	0x20000030

080008c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80008d0:	480d      	ldr	r0, [pc, #52]	; (8000908 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008d2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008d4:	f7ff fff6 	bl	80008c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d8:	480c      	ldr	r0, [pc, #48]	; (800090c <LoopForever+0x6>)
  ldr r1, =_edata
 80008da:	490d      	ldr	r1, [pc, #52]	; (8000910 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008dc:	4a0d      	ldr	r2, [pc, #52]	; (8000914 <LoopForever+0xe>)
  movs r3, #0
 80008de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e0:	e002      	b.n	80008e8 <LoopCopyDataInit>

080008e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008e6:	3304      	adds	r3, #4

080008e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ec:	d3f9      	bcc.n	80008e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ee:	4a0a      	ldr	r2, [pc, #40]	; (8000918 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008f0:	4c0a      	ldr	r4, [pc, #40]	; (800091c <LoopForever+0x16>)
  movs r3, #0
 80008f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f4:	e001      	b.n	80008fa <LoopFillZerobss>

080008f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f8:	3204      	adds	r2, #4

080008fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008fc:	d3fb      	bcc.n	80008f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008fe:	f002 fca5 	bl	800324c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000902:	f7ff fdd1 	bl	80004a8 <main>

08000906 <LoopForever>:

LoopForever:
    b LoopForever
 8000906:	e7fe      	b.n	8000906 <LoopForever>
  ldr   r0, =_estack
 8000908:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800090c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000910:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000914:	08003338 	.word	0x08003338
  ldr r2, =_sbss
 8000918:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800091c:	2000011c 	.word	0x2000011c

08000920 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000920:	e7fe      	b.n	8000920 <ADC1_COMP_IRQHandler>
	...

08000924 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800092a:	1dfb      	adds	r3, r7, #7
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000930:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <HAL_Init+0x3c>)
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <HAL_Init+0x3c>)
 8000936:	2140      	movs	r1, #64	; 0x40
 8000938:	430a      	orrs	r2, r1
 800093a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800093c:	2000      	movs	r0, #0
 800093e:	f000 f811 	bl	8000964 <HAL_InitTick>
 8000942:	1e03      	subs	r3, r0, #0
 8000944:	d003      	beq.n	800094e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000946:	1dfb      	adds	r3, r7, #7
 8000948:	2201      	movs	r2, #1
 800094a:	701a      	strb	r2, [r3, #0]
 800094c:	e001      	b.n	8000952 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800094e:	f7ff fed9 	bl	8000704 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000952:	1dfb      	adds	r3, r7, #7
 8000954:	781b      	ldrb	r3, [r3, #0]
}
 8000956:	0018      	movs	r0, r3
 8000958:	46bd      	mov	sp, r7
 800095a:	b002      	add	sp, #8
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	40022000 	.word	0x40022000

08000964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000964:	b590      	push	{r4, r7, lr}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800096c:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <HAL_InitTick+0x5c>)
 800096e:	681c      	ldr	r4, [r3, #0]
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <HAL_InitTick+0x60>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	0019      	movs	r1, r3
 8000976:	23fa      	movs	r3, #250	; 0xfa
 8000978:	0098      	lsls	r0, r3, #2
 800097a:	f7ff fbc5 	bl	8000108 <__udivsi3>
 800097e:	0003      	movs	r3, r0
 8000980:	0019      	movs	r1, r3
 8000982:	0020      	movs	r0, r4
 8000984:	f7ff fbc0 	bl	8000108 <__udivsi3>
 8000988:	0003      	movs	r3, r0
 800098a:	0018      	movs	r0, r3
 800098c:	f000 f90b 	bl	8000ba6 <HAL_SYSTICK_Config>
 8000990:	1e03      	subs	r3, r0, #0
 8000992:	d001      	beq.n	8000998 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000994:	2301      	movs	r3, #1
 8000996:	e00f      	b.n	80009b8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2b03      	cmp	r3, #3
 800099c:	d80b      	bhi.n	80009b6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800099e:	6879      	ldr	r1, [r7, #4]
 80009a0:	2301      	movs	r3, #1
 80009a2:	425b      	negs	r3, r3
 80009a4:	2200      	movs	r2, #0
 80009a6:	0018      	movs	r0, r3
 80009a8:	f000 f8d8 	bl	8000b5c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <HAL_InitTick+0x64>)
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009b2:	2300      	movs	r3, #0
 80009b4:	e000      	b.n	80009b8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
}
 80009b8:	0018      	movs	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b003      	add	sp, #12
 80009be:	bd90      	pop	{r4, r7, pc}
 80009c0:	20000008 	.word	0x20000008
 80009c4:	20000010 	.word	0x20000010
 80009c8:	2000000c 	.word	0x2000000c

080009cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <HAL_IncTick+0x1c>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	001a      	movs	r2, r3
 80009d6:	4b05      	ldr	r3, [pc, #20]	; (80009ec <HAL_IncTick+0x20>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	18d2      	adds	r2, r2, r3
 80009dc:	4b03      	ldr	r3, [pc, #12]	; (80009ec <HAL_IncTick+0x20>)
 80009de:	601a      	str	r2, [r3, #0]
}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	20000010 	.word	0x20000010
 80009ec:	20000118 	.word	0x20000118

080009f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  return uwTick;
 80009f4:	4b02      	ldr	r3, [pc, #8]	; (8000a00 <HAL_GetTick+0x10>)
 80009f6:	681b      	ldr	r3, [r3, #0]
}
 80009f8:	0018      	movs	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	20000118 	.word	0x20000118

08000a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	0002      	movs	r2, r0
 8000a0c:	1dfb      	adds	r3, r7, #7
 8000a0e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a10:	1dfb      	adds	r3, r7, #7
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b7f      	cmp	r3, #127	; 0x7f
 8000a16:	d809      	bhi.n	8000a2c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a18:	1dfb      	adds	r3, r7, #7
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	001a      	movs	r2, r3
 8000a1e:	231f      	movs	r3, #31
 8000a20:	401a      	ands	r2, r3
 8000a22:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <__NVIC_EnableIRQ+0x30>)
 8000a24:	2101      	movs	r1, #1
 8000a26:	4091      	lsls	r1, r2
 8000a28:	000a      	movs	r2, r1
 8000a2a:	601a      	str	r2, [r3, #0]
  }
}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	b002      	add	sp, #8
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	e000e100 	.word	0xe000e100

08000a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a38:	b590      	push	{r4, r7, lr}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	0002      	movs	r2, r0
 8000a40:	6039      	str	r1, [r7, #0]
 8000a42:	1dfb      	adds	r3, r7, #7
 8000a44:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a46:	1dfb      	adds	r3, r7, #7
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b7f      	cmp	r3, #127	; 0x7f
 8000a4c:	d828      	bhi.n	8000aa0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a4e:	4a2f      	ldr	r2, [pc, #188]	; (8000b0c <__NVIC_SetPriority+0xd4>)
 8000a50:	1dfb      	adds	r3, r7, #7
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	b25b      	sxtb	r3, r3
 8000a56:	089b      	lsrs	r3, r3, #2
 8000a58:	33c0      	adds	r3, #192	; 0xc0
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	589b      	ldr	r3, [r3, r2]
 8000a5e:	1dfa      	adds	r2, r7, #7
 8000a60:	7812      	ldrb	r2, [r2, #0]
 8000a62:	0011      	movs	r1, r2
 8000a64:	2203      	movs	r2, #3
 8000a66:	400a      	ands	r2, r1
 8000a68:	00d2      	lsls	r2, r2, #3
 8000a6a:	21ff      	movs	r1, #255	; 0xff
 8000a6c:	4091      	lsls	r1, r2
 8000a6e:	000a      	movs	r2, r1
 8000a70:	43d2      	mvns	r2, r2
 8000a72:	401a      	ands	r2, r3
 8000a74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	019b      	lsls	r3, r3, #6
 8000a7a:	22ff      	movs	r2, #255	; 0xff
 8000a7c:	401a      	ands	r2, r3
 8000a7e:	1dfb      	adds	r3, r7, #7
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	0018      	movs	r0, r3
 8000a84:	2303      	movs	r3, #3
 8000a86:	4003      	ands	r3, r0
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a8c:	481f      	ldr	r0, [pc, #124]	; (8000b0c <__NVIC_SetPriority+0xd4>)
 8000a8e:	1dfb      	adds	r3, r7, #7
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	b25b      	sxtb	r3, r3
 8000a94:	089b      	lsrs	r3, r3, #2
 8000a96:	430a      	orrs	r2, r1
 8000a98:	33c0      	adds	r3, #192	; 0xc0
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a9e:	e031      	b.n	8000b04 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aa0:	4a1b      	ldr	r2, [pc, #108]	; (8000b10 <__NVIC_SetPriority+0xd8>)
 8000aa2:	1dfb      	adds	r3, r7, #7
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	0019      	movs	r1, r3
 8000aa8:	230f      	movs	r3, #15
 8000aaa:	400b      	ands	r3, r1
 8000aac:	3b08      	subs	r3, #8
 8000aae:	089b      	lsrs	r3, r3, #2
 8000ab0:	3306      	adds	r3, #6
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	18d3      	adds	r3, r2, r3
 8000ab6:	3304      	adds	r3, #4
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	1dfa      	adds	r2, r7, #7
 8000abc:	7812      	ldrb	r2, [r2, #0]
 8000abe:	0011      	movs	r1, r2
 8000ac0:	2203      	movs	r2, #3
 8000ac2:	400a      	ands	r2, r1
 8000ac4:	00d2      	lsls	r2, r2, #3
 8000ac6:	21ff      	movs	r1, #255	; 0xff
 8000ac8:	4091      	lsls	r1, r2
 8000aca:	000a      	movs	r2, r1
 8000acc:	43d2      	mvns	r2, r2
 8000ace:	401a      	ands	r2, r3
 8000ad0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	019b      	lsls	r3, r3, #6
 8000ad6:	22ff      	movs	r2, #255	; 0xff
 8000ad8:	401a      	ands	r2, r3
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	0018      	movs	r0, r3
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	4003      	ands	r3, r0
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ae8:	4809      	ldr	r0, [pc, #36]	; (8000b10 <__NVIC_SetPriority+0xd8>)
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	001c      	movs	r4, r3
 8000af0:	230f      	movs	r3, #15
 8000af2:	4023      	ands	r3, r4
 8000af4:	3b08      	subs	r3, #8
 8000af6:	089b      	lsrs	r3, r3, #2
 8000af8:	430a      	orrs	r2, r1
 8000afa:	3306      	adds	r3, #6
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	18c3      	adds	r3, r0, r3
 8000b00:	3304      	adds	r3, #4
 8000b02:	601a      	str	r2, [r3, #0]
}
 8000b04:	46c0      	nop			; (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b003      	add	sp, #12
 8000b0a:	bd90      	pop	{r4, r7, pc}
 8000b0c:	e000e100 	.word	0xe000e100
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	1e5a      	subs	r2, r3, #1
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	045b      	lsls	r3, r3, #17
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d301      	bcc.n	8000b2c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b28:	2301      	movs	r3, #1
 8000b2a:	e010      	b.n	8000b4e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <SysTick_Config+0x44>)
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	3a01      	subs	r2, #1
 8000b32:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b34:	2301      	movs	r3, #1
 8000b36:	425b      	negs	r3, r3
 8000b38:	2103      	movs	r1, #3
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f7ff ff7c 	bl	8000a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <SysTick_Config+0x44>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b46:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <SysTick_Config+0x44>)
 8000b48:	2207      	movs	r2, #7
 8000b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	0018      	movs	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b002      	add	sp, #8
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	e000e010 	.word	0xe000e010

08000b5c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60b9      	str	r1, [r7, #8]
 8000b64:	607a      	str	r2, [r7, #4]
 8000b66:	210f      	movs	r1, #15
 8000b68:	187b      	adds	r3, r7, r1
 8000b6a:	1c02      	adds	r2, r0, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	b25b      	sxtb	r3, r3
 8000b76:	0011      	movs	r1, r2
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f7ff ff5d 	bl	8000a38 <__NVIC_SetPriority>
}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	b004      	add	sp, #16
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	0002      	movs	r2, r0
 8000b8e:	1dfb      	adds	r3, r7, #7
 8000b90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	b25b      	sxtb	r3, r3
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f7ff ff33 	bl	8000a04 <__NVIC_EnableIRQ>
}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b002      	add	sp, #8
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f7ff ffaf 	bl	8000b14 <SysTick_Config>
 8000bb6:	0003      	movs	r3, r0
}
 8000bb8:	0018      	movs	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b002      	add	sp, #8
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bc8:	210f      	movs	r1, #15
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	2200      	movs	r2, #0
 8000bce:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2225      	movs	r2, #37	; 0x25
 8000bd4:	5c9b      	ldrb	r3, [r3, r2]
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d006      	beq.n	8000bea <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2204      	movs	r2, #4
 8000be0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	2201      	movs	r2, #1
 8000be6:	701a      	strb	r2, [r3, #0]
 8000be8:	e02a      	b.n	8000c40 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	210e      	movs	r1, #14
 8000bf6:	438a      	bics	r2, r1
 8000bf8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2101      	movs	r1, #1
 8000c06:	438a      	bics	r2, r1
 8000c08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	221c      	movs	r2, #28
 8000c10:	401a      	ands	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	2101      	movs	r1, #1
 8000c18:	4091      	lsls	r1, r2
 8000c1a:	000a      	movs	r2, r1
 8000c1c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2225      	movs	r2, #37	; 0x25
 8000c22:	2101      	movs	r1, #1
 8000c24:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2224      	movs	r2, #36	; 0x24
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d004      	beq.n	8000c40 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	0010      	movs	r0, r2
 8000c3e:	4798      	blx	r3
    }
  }
  return status;
 8000c40:	230f      	movs	r3, #15
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	781b      	ldrb	r3, [r3, #0]
}
 8000c46:	0018      	movs	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b004      	add	sp, #16
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c66:	e14f      	b.n	8000f08 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	697a      	ldr	r2, [r7, #20]
 8000c70:	4091      	lsls	r1, r2
 8000c72:	000a      	movs	r2, r1
 8000c74:	4013      	ands	r3, r2
 8000c76:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d100      	bne.n	8000c80 <HAL_GPIO_Init+0x30>
 8000c7e:	e140      	b.n	8000f02 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2203      	movs	r2, #3
 8000c86:	4013      	ands	r3, r2
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d005      	beq.n	8000c98 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	2203      	movs	r2, #3
 8000c92:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d130      	bne.n	8000cfa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	2203      	movs	r2, #3
 8000ca4:	409a      	lsls	r2, r3
 8000ca6:	0013      	movs	r3, r2
 8000ca8:	43da      	mvns	r2, r3
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	68da      	ldr	r2, [r3, #12]
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	409a      	lsls	r2, r3
 8000cba:	0013      	movs	r3, r2
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cce:	2201      	movs	r2, #1
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	409a      	lsls	r2, r3
 8000cd4:	0013      	movs	r3, r2
 8000cd6:	43da      	mvns	r2, r3
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	091b      	lsrs	r3, r3, #4
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	409a      	lsls	r2, r3
 8000cec:	0013      	movs	r3, r2
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	2203      	movs	r2, #3
 8000d00:	4013      	ands	r3, r2
 8000d02:	2b03      	cmp	r3, #3
 8000d04:	d017      	beq.n	8000d36 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	2203      	movs	r2, #3
 8000d12:	409a      	lsls	r2, r3
 8000d14:	0013      	movs	r3, r2
 8000d16:	43da      	mvns	r2, r3
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	689a      	ldr	r2, [r3, #8]
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	409a      	lsls	r2, r3
 8000d28:	0013      	movs	r3, r2
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d123      	bne.n	8000d8a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	08da      	lsrs	r2, r3, #3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	3208      	adds	r2, #8
 8000d4a:	0092      	lsls	r2, r2, #2
 8000d4c:	58d3      	ldr	r3, [r2, r3]
 8000d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	2207      	movs	r2, #7
 8000d54:	4013      	ands	r3, r2
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	220f      	movs	r2, #15
 8000d5a:	409a      	lsls	r2, r3
 8000d5c:	0013      	movs	r3, r2
 8000d5e:	43da      	mvns	r2, r3
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	4013      	ands	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	691a      	ldr	r2, [r3, #16]
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	2107      	movs	r1, #7
 8000d6e:	400b      	ands	r3, r1
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	409a      	lsls	r2, r3
 8000d74:	0013      	movs	r3, r2
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	08da      	lsrs	r2, r3, #3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3208      	adds	r2, #8
 8000d84:	0092      	lsls	r2, r2, #2
 8000d86:	6939      	ldr	r1, [r7, #16]
 8000d88:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	2203      	movs	r2, #3
 8000d96:	409a      	lsls	r2, r3
 8000d98:	0013      	movs	r3, r2
 8000d9a:	43da      	mvns	r2, r3
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	2203      	movs	r2, #3
 8000da8:	401a      	ands	r2, r3
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	409a      	lsls	r2, r3
 8000db0:	0013      	movs	r3, r2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685a      	ldr	r2, [r3, #4]
 8000dc2:	23c0      	movs	r3, #192	; 0xc0
 8000dc4:	029b      	lsls	r3, r3, #10
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	d100      	bne.n	8000dcc <HAL_GPIO_Init+0x17c>
 8000dca:	e09a      	b.n	8000f02 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dcc:	4b54      	ldr	r3, [pc, #336]	; (8000f20 <HAL_GPIO_Init+0x2d0>)
 8000dce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dd0:	4b53      	ldr	r3, [pc, #332]	; (8000f20 <HAL_GPIO_Init+0x2d0>)
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dd8:	4a52      	ldr	r2, [pc, #328]	; (8000f24 <HAL_GPIO_Init+0x2d4>)
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	089b      	lsrs	r3, r3, #2
 8000dde:	3302      	adds	r3, #2
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	589b      	ldr	r3, [r3, r2]
 8000de4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	2203      	movs	r2, #3
 8000dea:	4013      	ands	r3, r2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	220f      	movs	r2, #15
 8000df0:	409a      	lsls	r2, r3
 8000df2:	0013      	movs	r3, r2
 8000df4:	43da      	mvns	r2, r3
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	23a0      	movs	r3, #160	; 0xa0
 8000e00:	05db      	lsls	r3, r3, #23
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d019      	beq.n	8000e3a <HAL_GPIO_Init+0x1ea>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a47      	ldr	r2, [pc, #284]	; (8000f28 <HAL_GPIO_Init+0x2d8>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d013      	beq.n	8000e36 <HAL_GPIO_Init+0x1e6>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a46      	ldr	r2, [pc, #280]	; (8000f2c <HAL_GPIO_Init+0x2dc>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d00d      	beq.n	8000e32 <HAL_GPIO_Init+0x1e2>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a45      	ldr	r2, [pc, #276]	; (8000f30 <HAL_GPIO_Init+0x2e0>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d007      	beq.n	8000e2e <HAL_GPIO_Init+0x1de>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a44      	ldr	r2, [pc, #272]	; (8000f34 <HAL_GPIO_Init+0x2e4>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d101      	bne.n	8000e2a <HAL_GPIO_Init+0x1da>
 8000e26:	2305      	movs	r3, #5
 8000e28:	e008      	b.n	8000e3c <HAL_GPIO_Init+0x1ec>
 8000e2a:	2306      	movs	r3, #6
 8000e2c:	e006      	b.n	8000e3c <HAL_GPIO_Init+0x1ec>
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e004      	b.n	8000e3c <HAL_GPIO_Init+0x1ec>
 8000e32:	2302      	movs	r3, #2
 8000e34:	e002      	b.n	8000e3c <HAL_GPIO_Init+0x1ec>
 8000e36:	2301      	movs	r3, #1
 8000e38:	e000      	b.n	8000e3c <HAL_GPIO_Init+0x1ec>
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	697a      	ldr	r2, [r7, #20]
 8000e3e:	2103      	movs	r1, #3
 8000e40:	400a      	ands	r2, r1
 8000e42:	0092      	lsls	r2, r2, #2
 8000e44:	4093      	lsls	r3, r2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e4c:	4935      	ldr	r1, [pc, #212]	; (8000f24 <HAL_GPIO_Init+0x2d4>)
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	089b      	lsrs	r3, r3, #2
 8000e52:	3302      	adds	r3, #2
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e5a:	4b37      	ldr	r3, [pc, #220]	; (8000f38 <HAL_GPIO_Init+0x2e8>)
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	43da      	mvns	r2, r3
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685a      	ldr	r2, [r3, #4]
 8000e6e:	2380      	movs	r3, #128	; 0x80
 8000e70:	035b      	lsls	r3, r3, #13
 8000e72:	4013      	ands	r3, r2
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e7e:	4b2e      	ldr	r3, [pc, #184]	; (8000f38 <HAL_GPIO_Init+0x2e8>)
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e84:	4b2c      	ldr	r3, [pc, #176]	; (8000f38 <HAL_GPIO_Init+0x2e8>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	43da      	mvns	r2, r3
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685a      	ldr	r2, [r3, #4]
 8000e98:	2380      	movs	r3, #128	; 0x80
 8000e9a:	039b      	lsls	r3, r3, #14
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	d003      	beq.n	8000ea8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ea8:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <HAL_GPIO_Init+0x2e8>)
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000eae:	4b22      	ldr	r3, [pc, #136]	; (8000f38 <HAL_GPIO_Init+0x2e8>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	43da      	mvns	r2, r3
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685a      	ldr	r2, [r3, #4]
 8000ec2:	2380      	movs	r3, #128	; 0x80
 8000ec4:	029b      	lsls	r3, r3, #10
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	d003      	beq.n	8000ed2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ed2:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <HAL_GPIO_Init+0x2e8>)
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ed8:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <HAL_GPIO_Init+0x2e8>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	43da      	mvns	r2, r3
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685a      	ldr	r2, [r3, #4]
 8000eec:	2380      	movs	r3, #128	; 0x80
 8000eee:	025b      	lsls	r3, r3, #9
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	d003      	beq.n	8000efc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <HAL_GPIO_Init+0x2e8>)
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	3301      	adds	r3, #1
 8000f06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	40da      	lsrs	r2, r3
 8000f10:	1e13      	subs	r3, r2, #0
 8000f12:	d000      	beq.n	8000f16 <HAL_GPIO_Init+0x2c6>
 8000f14:	e6a8      	b.n	8000c68 <HAL_GPIO_Init+0x18>
  }
}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	46c0      	nop			; (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b006      	add	sp, #24
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40010000 	.word	0x40010000
 8000f28:	50000400 	.word	0x50000400
 8000f2c:	50000800 	.word	0x50000800
 8000f30:	50000c00 	.word	0x50000c00
 8000f34:	50001c00 	.word	0x50001c00
 8000f38:	40010400 	.word	0x40010400

08000f3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f3c:	b5b0      	push	{r4, r5, r7, lr}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d102      	bne.n	8000f50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	f000 fbaf 	bl	80016ae <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f50:	4bcf      	ldr	r3, [pc, #828]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	220c      	movs	r2, #12
 8000f56:	4013      	ands	r3, r2
 8000f58:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f5a:	4bcd      	ldr	r3, [pc, #820]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 8000f5c:	68da      	ldr	r2, [r3, #12]
 8000f5e:	2380      	movs	r3, #128	; 0x80
 8000f60:	025b      	lsls	r3, r3, #9
 8000f62:	4013      	ands	r3, r2
 8000f64:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	d100      	bne.n	8000f72 <HAL_RCC_OscConfig+0x36>
 8000f70:	e07e      	b.n	8001070 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f72:	6a3b      	ldr	r3, [r7, #32]
 8000f74:	2b08      	cmp	r3, #8
 8000f76:	d007      	beq.n	8000f88 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f78:	6a3b      	ldr	r3, [r7, #32]
 8000f7a:	2b0c      	cmp	r3, #12
 8000f7c:	d112      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x68>
 8000f7e:	69fa      	ldr	r2, [r7, #28]
 8000f80:	2380      	movs	r3, #128	; 0x80
 8000f82:	025b      	lsls	r3, r3, #9
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d10d      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f88:	4bc1      	ldr	r3, [pc, #772]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	2380      	movs	r3, #128	; 0x80
 8000f8e:	029b      	lsls	r3, r3, #10
 8000f90:	4013      	ands	r3, r2
 8000f92:	d100      	bne.n	8000f96 <HAL_RCC_OscConfig+0x5a>
 8000f94:	e06b      	b.n	800106e <HAL_RCC_OscConfig+0x132>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d167      	bne.n	800106e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	f000 fb85 	bl	80016ae <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685a      	ldr	r2, [r3, #4]
 8000fa8:	2380      	movs	r3, #128	; 0x80
 8000faa:	025b      	lsls	r3, r3, #9
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d107      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x84>
 8000fb0:	4bb7      	ldr	r3, [pc, #732]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4bb6      	ldr	r3, [pc, #728]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 8000fb6:	2180      	movs	r1, #128	; 0x80
 8000fb8:	0249      	lsls	r1, r1, #9
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	e027      	b.n	8001010 <HAL_RCC_OscConfig+0xd4>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685a      	ldr	r2, [r3, #4]
 8000fc4:	23a0      	movs	r3, #160	; 0xa0
 8000fc6:	02db      	lsls	r3, r3, #11
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d10e      	bne.n	8000fea <HAL_RCC_OscConfig+0xae>
 8000fcc:	4bb0      	ldr	r3, [pc, #704]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4baf      	ldr	r3, [pc, #700]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 8000fd2:	2180      	movs	r1, #128	; 0x80
 8000fd4:	02c9      	lsls	r1, r1, #11
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	4bad      	ldr	r3, [pc, #692]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	4bac      	ldr	r3, [pc, #688]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 8000fe0:	2180      	movs	r1, #128	; 0x80
 8000fe2:	0249      	lsls	r1, r1, #9
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	e012      	b.n	8001010 <HAL_RCC_OscConfig+0xd4>
 8000fea:	4ba9      	ldr	r3, [pc, #676]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	4ba8      	ldr	r3, [pc, #672]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 8000ff0:	49a8      	ldr	r1, [pc, #672]	; (8001294 <HAL_RCC_OscConfig+0x358>)
 8000ff2:	400a      	ands	r2, r1
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	4ba6      	ldr	r3, [pc, #664]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	2380      	movs	r3, #128	; 0x80
 8000ffc:	025b      	lsls	r3, r3, #9
 8000ffe:	4013      	ands	r3, r2
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	4ba2      	ldr	r3, [pc, #648]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4ba1      	ldr	r3, [pc, #644]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 800100a:	49a3      	ldr	r1, [pc, #652]	; (8001298 <HAL_RCC_OscConfig+0x35c>)
 800100c:	400a      	ands	r2, r1
 800100e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d015      	beq.n	8001044 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001018:	f7ff fcea 	bl	80009f0 <HAL_GetTick>
 800101c:	0003      	movs	r3, r0
 800101e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001020:	e009      	b.n	8001036 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001022:	f7ff fce5 	bl	80009f0 <HAL_GetTick>
 8001026:	0002      	movs	r2, r0
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	2b64      	cmp	r3, #100	; 0x64
 800102e:	d902      	bls.n	8001036 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	f000 fb3c 	bl	80016ae <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001036:	4b96      	ldr	r3, [pc, #600]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	2380      	movs	r3, #128	; 0x80
 800103c:	029b      	lsls	r3, r3, #10
 800103e:	4013      	ands	r3, r2
 8001040:	d0ef      	beq.n	8001022 <HAL_RCC_OscConfig+0xe6>
 8001042:	e015      	b.n	8001070 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001044:	f7ff fcd4 	bl	80009f0 <HAL_GetTick>
 8001048:	0003      	movs	r3, r0
 800104a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800104c:	e008      	b.n	8001060 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800104e:	f7ff fccf 	bl	80009f0 <HAL_GetTick>
 8001052:	0002      	movs	r2, r0
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b64      	cmp	r3, #100	; 0x64
 800105a:	d901      	bls.n	8001060 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e326      	b.n	80016ae <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001060:	4b8b      	ldr	r3, [pc, #556]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	2380      	movs	r3, #128	; 0x80
 8001066:	029b      	lsls	r3, r3, #10
 8001068:	4013      	ands	r3, r2
 800106a:	d1f0      	bne.n	800104e <HAL_RCC_OscConfig+0x112>
 800106c:	e000      	b.n	8001070 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800106e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2202      	movs	r2, #2
 8001076:	4013      	ands	r3, r2
 8001078:	d100      	bne.n	800107c <HAL_RCC_OscConfig+0x140>
 800107a:	e08b      	b.n	8001194 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001082:	6a3b      	ldr	r3, [r7, #32]
 8001084:	2b04      	cmp	r3, #4
 8001086:	d005      	beq.n	8001094 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001088:	6a3b      	ldr	r3, [r7, #32]
 800108a:	2b0c      	cmp	r3, #12
 800108c:	d13e      	bne.n	800110c <HAL_RCC_OscConfig+0x1d0>
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d13b      	bne.n	800110c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001094:	4b7e      	ldr	r3, [pc, #504]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2204      	movs	r2, #4
 800109a:	4013      	ands	r3, r2
 800109c:	d004      	beq.n	80010a8 <HAL_RCC_OscConfig+0x16c>
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d101      	bne.n	80010a8 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e302      	b.n	80016ae <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a8:	4b79      	ldr	r3, [pc, #484]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	4a7b      	ldr	r2, [pc, #492]	; (800129c <HAL_RCC_OscConfig+0x360>)
 80010ae:	4013      	ands	r3, r2
 80010b0:	0019      	movs	r1, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	691b      	ldr	r3, [r3, #16]
 80010b6:	021a      	lsls	r2, r3, #8
 80010b8:	4b75      	ldr	r3, [pc, #468]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 80010ba:	430a      	orrs	r2, r1
 80010bc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80010be:	4b74      	ldr	r3, [pc, #464]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2209      	movs	r2, #9
 80010c4:	4393      	bics	r3, r2
 80010c6:	0019      	movs	r1, r3
 80010c8:	4b71      	ldr	r3, [pc, #452]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	430a      	orrs	r2, r1
 80010ce:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010d0:	f000 fc40 	bl	8001954 <HAL_RCC_GetSysClockFreq>
 80010d4:	0001      	movs	r1, r0
 80010d6:	4b6e      	ldr	r3, [pc, #440]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	091b      	lsrs	r3, r3, #4
 80010dc:	220f      	movs	r2, #15
 80010de:	4013      	ands	r3, r2
 80010e0:	4a6f      	ldr	r2, [pc, #444]	; (80012a0 <HAL_RCC_OscConfig+0x364>)
 80010e2:	5cd3      	ldrb	r3, [r2, r3]
 80010e4:	000a      	movs	r2, r1
 80010e6:	40da      	lsrs	r2, r3
 80010e8:	4b6e      	ldr	r3, [pc, #440]	; (80012a4 <HAL_RCC_OscConfig+0x368>)
 80010ea:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80010ec:	4b6e      	ldr	r3, [pc, #440]	; (80012a8 <HAL_RCC_OscConfig+0x36c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2513      	movs	r5, #19
 80010f2:	197c      	adds	r4, r7, r5
 80010f4:	0018      	movs	r0, r3
 80010f6:	f7ff fc35 	bl	8000964 <HAL_InitTick>
 80010fa:	0003      	movs	r3, r0
 80010fc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80010fe:	197b      	adds	r3, r7, r5
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d046      	beq.n	8001194 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001106:	197b      	adds	r3, r7, r5
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	e2d0      	b.n	80016ae <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d027      	beq.n	8001162 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001112:	4b5f      	ldr	r3, [pc, #380]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2209      	movs	r2, #9
 8001118:	4393      	bics	r3, r2
 800111a:	0019      	movs	r1, r3
 800111c:	4b5c      	ldr	r3, [pc, #368]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	430a      	orrs	r2, r1
 8001122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001124:	f7ff fc64 	bl	80009f0 <HAL_GetTick>
 8001128:	0003      	movs	r3, r0
 800112a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800112c:	e008      	b.n	8001140 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800112e:	f7ff fc5f 	bl	80009f0 <HAL_GetTick>
 8001132:	0002      	movs	r2, r0
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e2b6      	b.n	80016ae <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001140:	4b53      	ldr	r3, [pc, #332]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2204      	movs	r2, #4
 8001146:	4013      	ands	r3, r2
 8001148:	d0f1      	beq.n	800112e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800114a:	4b51      	ldr	r3, [pc, #324]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	4a53      	ldr	r2, [pc, #332]	; (800129c <HAL_RCC_OscConfig+0x360>)
 8001150:	4013      	ands	r3, r2
 8001152:	0019      	movs	r1, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	021a      	lsls	r2, r3, #8
 800115a:	4b4d      	ldr	r3, [pc, #308]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 800115c:	430a      	orrs	r2, r1
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	e018      	b.n	8001194 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001162:	4b4b      	ldr	r3, [pc, #300]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	4b4a      	ldr	r3, [pc, #296]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 8001168:	2101      	movs	r1, #1
 800116a:	438a      	bics	r2, r1
 800116c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116e:	f7ff fc3f 	bl	80009f0 <HAL_GetTick>
 8001172:	0003      	movs	r3, r0
 8001174:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001176:	e008      	b.n	800118a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001178:	f7ff fc3a 	bl	80009f0 <HAL_GetTick>
 800117c:	0002      	movs	r2, r0
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b02      	cmp	r3, #2
 8001184:	d901      	bls.n	800118a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e291      	b.n	80016ae <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800118a:	4b41      	ldr	r3, [pc, #260]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2204      	movs	r2, #4
 8001190:	4013      	ands	r3, r2
 8001192:	d1f1      	bne.n	8001178 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2210      	movs	r2, #16
 800119a:	4013      	ands	r3, r2
 800119c:	d100      	bne.n	80011a0 <HAL_RCC_OscConfig+0x264>
 800119e:	e0a1      	b.n	80012e4 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011a0:	6a3b      	ldr	r3, [r7, #32]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d140      	bne.n	8001228 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011a6:	4b3a      	ldr	r3, [pc, #232]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	2380      	movs	r3, #128	; 0x80
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4013      	ands	r3, r2
 80011b0:	d005      	beq.n	80011be <HAL_RCC_OscConfig+0x282>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e277      	b.n	80016ae <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011be:	4b34      	ldr	r3, [pc, #208]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	4a3a      	ldr	r2, [pc, #232]	; (80012ac <HAL_RCC_OscConfig+0x370>)
 80011c4:	4013      	ands	r3, r2
 80011c6:	0019      	movs	r1, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011cc:	4b30      	ldr	r3, [pc, #192]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 80011ce:	430a      	orrs	r2, r1
 80011d0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011d2:	4b2f      	ldr	r3, [pc, #188]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	021b      	lsls	r3, r3, #8
 80011d8:	0a19      	lsrs	r1, r3, #8
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a1b      	ldr	r3, [r3, #32]
 80011de:	061a      	lsls	r2, r3, #24
 80011e0:	4b2b      	ldr	r3, [pc, #172]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 80011e2:	430a      	orrs	r2, r1
 80011e4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ea:	0b5b      	lsrs	r3, r3, #13
 80011ec:	3301      	adds	r3, #1
 80011ee:	2280      	movs	r2, #128	; 0x80
 80011f0:	0212      	lsls	r2, r2, #8
 80011f2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80011f4:	4b26      	ldr	r3, [pc, #152]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	091b      	lsrs	r3, r3, #4
 80011fa:	210f      	movs	r1, #15
 80011fc:	400b      	ands	r3, r1
 80011fe:	4928      	ldr	r1, [pc, #160]	; (80012a0 <HAL_RCC_OscConfig+0x364>)
 8001200:	5ccb      	ldrb	r3, [r1, r3]
 8001202:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001204:	4b27      	ldr	r3, [pc, #156]	; (80012a4 <HAL_RCC_OscConfig+0x368>)
 8001206:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001208:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <HAL_RCC_OscConfig+0x36c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2513      	movs	r5, #19
 800120e:	197c      	adds	r4, r7, r5
 8001210:	0018      	movs	r0, r3
 8001212:	f7ff fba7 	bl	8000964 <HAL_InitTick>
 8001216:	0003      	movs	r3, r0
 8001218:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800121a:	197b      	adds	r3, r7, r5
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d060      	beq.n	80012e4 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001222:	197b      	adds	r3, r7, r5
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	e242      	b.n	80016ae <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	69db      	ldr	r3, [r3, #28]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d03f      	beq.n	80012b0 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001230:	4b17      	ldr	r3, [pc, #92]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b16      	ldr	r3, [pc, #88]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 8001236:	2180      	movs	r1, #128	; 0x80
 8001238:	0049      	lsls	r1, r1, #1
 800123a:	430a      	orrs	r2, r1
 800123c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123e:	f7ff fbd7 	bl	80009f0 <HAL_GetTick>
 8001242:	0003      	movs	r3, r0
 8001244:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001248:	f7ff fbd2 	bl	80009f0 <HAL_GetTick>
 800124c:	0002      	movs	r2, r0
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e229      	b.n	80016ae <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800125a:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	2380      	movs	r3, #128	; 0x80
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4013      	ands	r3, r2
 8001264:	d0f0      	beq.n	8001248 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001266:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	4a10      	ldr	r2, [pc, #64]	; (80012ac <HAL_RCC_OscConfig+0x370>)
 800126c:	4013      	ands	r3, r2
 800126e:	0019      	movs	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 8001276:	430a      	orrs	r2, r1
 8001278:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800127a:	4b05      	ldr	r3, [pc, #20]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	021b      	lsls	r3, r3, #8
 8001280:	0a19      	lsrs	r1, r3, #8
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a1b      	ldr	r3, [r3, #32]
 8001286:	061a      	lsls	r2, r3, #24
 8001288:	4b01      	ldr	r3, [pc, #4]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 800128a:	430a      	orrs	r2, r1
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	e029      	b.n	80012e4 <HAL_RCC_OscConfig+0x3a8>
 8001290:	40021000 	.word	0x40021000
 8001294:	fffeffff 	.word	0xfffeffff
 8001298:	fffbffff 	.word	0xfffbffff
 800129c:	ffffe0ff 	.word	0xffffe0ff
 80012a0:	080032bc 	.word	0x080032bc
 80012a4:	20000008 	.word	0x20000008
 80012a8:	2000000c 	.word	0x2000000c
 80012ac:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012b0:	4bbd      	ldr	r3, [pc, #756]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4bbc      	ldr	r3, [pc, #752]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 80012b6:	49bd      	ldr	r1, [pc, #756]	; (80015ac <HAL_RCC_OscConfig+0x670>)
 80012b8:	400a      	ands	r2, r1
 80012ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012bc:	f7ff fb98 	bl	80009f0 <HAL_GetTick>
 80012c0:	0003      	movs	r3, r0
 80012c2:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012c4:	e008      	b.n	80012d8 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012c6:	f7ff fb93 	bl	80009f0 <HAL_GetTick>
 80012ca:	0002      	movs	r2, r0
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d901      	bls.n	80012d8 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e1ea      	b.n	80016ae <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012d8:	4bb3      	ldr	r3, [pc, #716]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	2380      	movs	r3, #128	; 0x80
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4013      	ands	r3, r2
 80012e2:	d1f0      	bne.n	80012c6 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2208      	movs	r2, #8
 80012ea:	4013      	ands	r3, r2
 80012ec:	d036      	beq.n	800135c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d019      	beq.n	800132a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012f6:	4bac      	ldr	r3, [pc, #688]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 80012f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012fa:	4bab      	ldr	r3, [pc, #684]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 80012fc:	2101      	movs	r1, #1
 80012fe:	430a      	orrs	r2, r1
 8001300:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001302:	f7ff fb75 	bl	80009f0 <HAL_GetTick>
 8001306:	0003      	movs	r3, r0
 8001308:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800130c:	f7ff fb70 	bl	80009f0 <HAL_GetTick>
 8001310:	0002      	movs	r2, r0
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e1c7      	b.n	80016ae <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800131e:	4ba2      	ldr	r3, [pc, #648]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 8001320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001322:	2202      	movs	r2, #2
 8001324:	4013      	ands	r3, r2
 8001326:	d0f1      	beq.n	800130c <HAL_RCC_OscConfig+0x3d0>
 8001328:	e018      	b.n	800135c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800132a:	4b9f      	ldr	r3, [pc, #636]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 800132c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800132e:	4b9e      	ldr	r3, [pc, #632]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 8001330:	2101      	movs	r1, #1
 8001332:	438a      	bics	r2, r1
 8001334:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001336:	f7ff fb5b 	bl	80009f0 <HAL_GetTick>
 800133a:	0003      	movs	r3, r0
 800133c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001340:	f7ff fb56 	bl	80009f0 <HAL_GetTick>
 8001344:	0002      	movs	r2, r0
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e1ad      	b.n	80016ae <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001352:	4b95      	ldr	r3, [pc, #596]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 8001354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001356:	2202      	movs	r2, #2
 8001358:	4013      	ands	r3, r2
 800135a:	d1f1      	bne.n	8001340 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2204      	movs	r2, #4
 8001362:	4013      	ands	r3, r2
 8001364:	d100      	bne.n	8001368 <HAL_RCC_OscConfig+0x42c>
 8001366:	e0ae      	b.n	80014c6 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001368:	2027      	movs	r0, #39	; 0x27
 800136a:	183b      	adds	r3, r7, r0
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001370:	4b8d      	ldr	r3, [pc, #564]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 8001372:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001374:	2380      	movs	r3, #128	; 0x80
 8001376:	055b      	lsls	r3, r3, #21
 8001378:	4013      	ands	r3, r2
 800137a:	d109      	bne.n	8001390 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800137c:	4b8a      	ldr	r3, [pc, #552]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 800137e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001380:	4b89      	ldr	r3, [pc, #548]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 8001382:	2180      	movs	r1, #128	; 0x80
 8001384:	0549      	lsls	r1, r1, #21
 8001386:	430a      	orrs	r2, r1
 8001388:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800138a:	183b      	adds	r3, r7, r0
 800138c:	2201      	movs	r2, #1
 800138e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001390:	4b87      	ldr	r3, [pc, #540]	; (80015b0 <HAL_RCC_OscConfig+0x674>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	2380      	movs	r3, #128	; 0x80
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	4013      	ands	r3, r2
 800139a:	d11a      	bne.n	80013d2 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800139c:	4b84      	ldr	r3, [pc, #528]	; (80015b0 <HAL_RCC_OscConfig+0x674>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b83      	ldr	r3, [pc, #524]	; (80015b0 <HAL_RCC_OscConfig+0x674>)
 80013a2:	2180      	movs	r1, #128	; 0x80
 80013a4:	0049      	lsls	r1, r1, #1
 80013a6:	430a      	orrs	r2, r1
 80013a8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013aa:	f7ff fb21 	bl	80009f0 <HAL_GetTick>
 80013ae:	0003      	movs	r3, r0
 80013b0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013b4:	f7ff fb1c 	bl	80009f0 <HAL_GetTick>
 80013b8:	0002      	movs	r2, r0
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b64      	cmp	r3, #100	; 0x64
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e173      	b.n	80016ae <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c6:	4b7a      	ldr	r3, [pc, #488]	; (80015b0 <HAL_RCC_OscConfig+0x674>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	2380      	movs	r3, #128	; 0x80
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	4013      	ands	r3, r2
 80013d0:	d0f0      	beq.n	80013b4 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	2380      	movs	r3, #128	; 0x80
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	429a      	cmp	r2, r3
 80013dc:	d107      	bne.n	80013ee <HAL_RCC_OscConfig+0x4b2>
 80013de:	4b72      	ldr	r3, [pc, #456]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 80013e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013e2:	4b71      	ldr	r3, [pc, #452]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 80013e4:	2180      	movs	r1, #128	; 0x80
 80013e6:	0049      	lsls	r1, r1, #1
 80013e8:	430a      	orrs	r2, r1
 80013ea:	651a      	str	r2, [r3, #80]	; 0x50
 80013ec:	e031      	b.n	8001452 <HAL_RCC_OscConfig+0x516>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d10c      	bne.n	8001410 <HAL_RCC_OscConfig+0x4d4>
 80013f6:	4b6c      	ldr	r3, [pc, #432]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 80013f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013fa:	4b6b      	ldr	r3, [pc, #428]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 80013fc:	496b      	ldr	r1, [pc, #428]	; (80015ac <HAL_RCC_OscConfig+0x670>)
 80013fe:	400a      	ands	r2, r1
 8001400:	651a      	str	r2, [r3, #80]	; 0x50
 8001402:	4b69      	ldr	r3, [pc, #420]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 8001404:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001406:	4b68      	ldr	r3, [pc, #416]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 8001408:	496a      	ldr	r1, [pc, #424]	; (80015b4 <HAL_RCC_OscConfig+0x678>)
 800140a:	400a      	ands	r2, r1
 800140c:	651a      	str	r2, [r3, #80]	; 0x50
 800140e:	e020      	b.n	8001452 <HAL_RCC_OscConfig+0x516>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	23a0      	movs	r3, #160	; 0xa0
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	429a      	cmp	r2, r3
 800141a:	d10e      	bne.n	800143a <HAL_RCC_OscConfig+0x4fe>
 800141c:	4b62      	ldr	r3, [pc, #392]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 800141e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001420:	4b61      	ldr	r3, [pc, #388]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 8001422:	2180      	movs	r1, #128	; 0x80
 8001424:	00c9      	lsls	r1, r1, #3
 8001426:	430a      	orrs	r2, r1
 8001428:	651a      	str	r2, [r3, #80]	; 0x50
 800142a:	4b5f      	ldr	r3, [pc, #380]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 800142c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800142e:	4b5e      	ldr	r3, [pc, #376]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 8001430:	2180      	movs	r1, #128	; 0x80
 8001432:	0049      	lsls	r1, r1, #1
 8001434:	430a      	orrs	r2, r1
 8001436:	651a      	str	r2, [r3, #80]	; 0x50
 8001438:	e00b      	b.n	8001452 <HAL_RCC_OscConfig+0x516>
 800143a:	4b5b      	ldr	r3, [pc, #364]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 800143c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800143e:	4b5a      	ldr	r3, [pc, #360]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 8001440:	495a      	ldr	r1, [pc, #360]	; (80015ac <HAL_RCC_OscConfig+0x670>)
 8001442:	400a      	ands	r2, r1
 8001444:	651a      	str	r2, [r3, #80]	; 0x50
 8001446:	4b58      	ldr	r3, [pc, #352]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 8001448:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800144a:	4b57      	ldr	r3, [pc, #348]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 800144c:	4959      	ldr	r1, [pc, #356]	; (80015b4 <HAL_RCC_OscConfig+0x678>)
 800144e:	400a      	ands	r2, r1
 8001450:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d015      	beq.n	8001486 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145a:	f7ff fac9 	bl	80009f0 <HAL_GetTick>
 800145e:	0003      	movs	r3, r0
 8001460:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001462:	e009      	b.n	8001478 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001464:	f7ff fac4 	bl	80009f0 <HAL_GetTick>
 8001468:	0002      	movs	r2, r0
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	4a52      	ldr	r2, [pc, #328]	; (80015b8 <HAL_RCC_OscConfig+0x67c>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e11a      	b.n	80016ae <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001478:	4b4b      	ldr	r3, [pc, #300]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 800147a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4013      	ands	r3, r2
 8001482:	d0ef      	beq.n	8001464 <HAL_RCC_OscConfig+0x528>
 8001484:	e014      	b.n	80014b0 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001486:	f7ff fab3 	bl	80009f0 <HAL_GetTick>
 800148a:	0003      	movs	r3, r0
 800148c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800148e:	e009      	b.n	80014a4 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001490:	f7ff faae 	bl	80009f0 <HAL_GetTick>
 8001494:	0002      	movs	r2, r0
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	4a47      	ldr	r2, [pc, #284]	; (80015b8 <HAL_RCC_OscConfig+0x67c>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e104      	b.n	80016ae <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014a4:	4b40      	ldr	r3, [pc, #256]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 80014a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014a8:	2380      	movs	r3, #128	; 0x80
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4013      	ands	r3, r2
 80014ae:	d1ef      	bne.n	8001490 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014b0:	2327      	movs	r3, #39	; 0x27
 80014b2:	18fb      	adds	r3, r7, r3
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d105      	bne.n	80014c6 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ba:	4b3b      	ldr	r3, [pc, #236]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 80014bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014be:	4b3a      	ldr	r3, [pc, #232]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 80014c0:	493e      	ldr	r1, [pc, #248]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 80014c2:	400a      	ands	r2, r1
 80014c4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2220      	movs	r2, #32
 80014cc:	4013      	ands	r3, r2
 80014ce:	d049      	beq.n	8001564 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d026      	beq.n	8001526 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80014d8:	4b33      	ldr	r3, [pc, #204]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	4b32      	ldr	r3, [pc, #200]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 80014de:	2101      	movs	r1, #1
 80014e0:	430a      	orrs	r2, r1
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	4b30      	ldr	r3, [pc, #192]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 80014e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014e8:	4b2f      	ldr	r3, [pc, #188]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 80014ea:	2101      	movs	r1, #1
 80014ec:	430a      	orrs	r2, r1
 80014ee:	635a      	str	r2, [r3, #52]	; 0x34
 80014f0:	4b33      	ldr	r3, [pc, #204]	; (80015c0 <HAL_RCC_OscConfig+0x684>)
 80014f2:	6a1a      	ldr	r2, [r3, #32]
 80014f4:	4b32      	ldr	r3, [pc, #200]	; (80015c0 <HAL_RCC_OscConfig+0x684>)
 80014f6:	2180      	movs	r1, #128	; 0x80
 80014f8:	0189      	lsls	r1, r1, #6
 80014fa:	430a      	orrs	r2, r1
 80014fc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fe:	f7ff fa77 	bl	80009f0 <HAL_GetTick>
 8001502:	0003      	movs	r3, r0
 8001504:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001508:	f7ff fa72 	bl	80009f0 <HAL_GetTick>
 800150c:	0002      	movs	r2, r0
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e0c9      	b.n	80016ae <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800151a:	4b23      	ldr	r3, [pc, #140]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	2202      	movs	r2, #2
 8001520:	4013      	ands	r3, r2
 8001522:	d0f1      	beq.n	8001508 <HAL_RCC_OscConfig+0x5cc>
 8001524:	e01e      	b.n	8001564 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001526:	4b20      	ldr	r3, [pc, #128]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	4b1f      	ldr	r3, [pc, #124]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 800152c:	2101      	movs	r1, #1
 800152e:	438a      	bics	r2, r1
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	4b23      	ldr	r3, [pc, #140]	; (80015c0 <HAL_RCC_OscConfig+0x684>)
 8001534:	6a1a      	ldr	r2, [r3, #32]
 8001536:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <HAL_RCC_OscConfig+0x684>)
 8001538:	4922      	ldr	r1, [pc, #136]	; (80015c4 <HAL_RCC_OscConfig+0x688>)
 800153a:	400a      	ands	r2, r1
 800153c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153e:	f7ff fa57 	bl	80009f0 <HAL_GetTick>
 8001542:	0003      	movs	r3, r0
 8001544:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001548:	f7ff fa52 	bl	80009f0 <HAL_GetTick>
 800154c:	0002      	movs	r2, r0
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e0a9      	b.n	80016ae <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800155a:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	2202      	movs	r2, #2
 8001560:	4013      	ands	r3, r2
 8001562:	d1f1      	bne.n	8001548 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001568:	2b00      	cmp	r3, #0
 800156a:	d100      	bne.n	800156e <HAL_RCC_OscConfig+0x632>
 800156c:	e09e      	b.n	80016ac <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800156e:	6a3b      	ldr	r3, [r7, #32]
 8001570:	2b0c      	cmp	r3, #12
 8001572:	d100      	bne.n	8001576 <HAL_RCC_OscConfig+0x63a>
 8001574:	e077      	b.n	8001666 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157a:	2b02      	cmp	r3, #2
 800157c:	d158      	bne.n	8001630 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800157e:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <HAL_RCC_OscConfig+0x66c>)
 8001584:	4910      	ldr	r1, [pc, #64]	; (80015c8 <HAL_RCC_OscConfig+0x68c>)
 8001586:	400a      	ands	r2, r1
 8001588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158a:	f7ff fa31 	bl	80009f0 <HAL_GetTick>
 800158e:	0003      	movs	r3, r0
 8001590:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001592:	e01b      	b.n	80015cc <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001594:	f7ff fa2c 	bl	80009f0 <HAL_GetTick>
 8001598:	0002      	movs	r2, r0
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d914      	bls.n	80015cc <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e083      	b.n	80016ae <HAL_RCC_OscConfig+0x772>
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	40021000 	.word	0x40021000
 80015ac:	fffffeff 	.word	0xfffffeff
 80015b0:	40007000 	.word	0x40007000
 80015b4:	fffffbff 	.word	0xfffffbff
 80015b8:	00001388 	.word	0x00001388
 80015bc:	efffffff 	.word	0xefffffff
 80015c0:	40010000 	.word	0x40010000
 80015c4:	ffffdfff 	.word	0xffffdfff
 80015c8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015cc:	4b3a      	ldr	r3, [pc, #232]	; (80016b8 <HAL_RCC_OscConfig+0x77c>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	2380      	movs	r3, #128	; 0x80
 80015d2:	049b      	lsls	r3, r3, #18
 80015d4:	4013      	ands	r3, r2
 80015d6:	d1dd      	bne.n	8001594 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015d8:	4b37      	ldr	r3, [pc, #220]	; (80016b8 <HAL_RCC_OscConfig+0x77c>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	4a37      	ldr	r2, [pc, #220]	; (80016bc <HAL_RCC_OscConfig+0x780>)
 80015de:	4013      	ands	r3, r2
 80015e0:	0019      	movs	r1, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	431a      	orrs	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f0:	431a      	orrs	r2, r3
 80015f2:	4b31      	ldr	r3, [pc, #196]	; (80016b8 <HAL_RCC_OscConfig+0x77c>)
 80015f4:	430a      	orrs	r2, r1
 80015f6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015f8:	4b2f      	ldr	r3, [pc, #188]	; (80016b8 <HAL_RCC_OscConfig+0x77c>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b2e      	ldr	r3, [pc, #184]	; (80016b8 <HAL_RCC_OscConfig+0x77c>)
 80015fe:	2180      	movs	r1, #128	; 0x80
 8001600:	0449      	lsls	r1, r1, #17
 8001602:	430a      	orrs	r2, r1
 8001604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001606:	f7ff f9f3 	bl	80009f0 <HAL_GetTick>
 800160a:	0003      	movs	r3, r0
 800160c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001610:	f7ff f9ee 	bl	80009f0 <HAL_GetTick>
 8001614:	0002      	movs	r2, r0
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e045      	b.n	80016ae <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001622:	4b25      	ldr	r3, [pc, #148]	; (80016b8 <HAL_RCC_OscConfig+0x77c>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	2380      	movs	r3, #128	; 0x80
 8001628:	049b      	lsls	r3, r3, #18
 800162a:	4013      	ands	r3, r2
 800162c:	d0f0      	beq.n	8001610 <HAL_RCC_OscConfig+0x6d4>
 800162e:	e03d      	b.n	80016ac <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001630:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <HAL_RCC_OscConfig+0x77c>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <HAL_RCC_OscConfig+0x77c>)
 8001636:	4922      	ldr	r1, [pc, #136]	; (80016c0 <HAL_RCC_OscConfig+0x784>)
 8001638:	400a      	ands	r2, r1
 800163a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7ff f9d8 	bl	80009f0 <HAL_GetTick>
 8001640:	0003      	movs	r3, r0
 8001642:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001646:	f7ff f9d3 	bl	80009f0 <HAL_GetTick>
 800164a:	0002      	movs	r2, r0
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e02a      	b.n	80016ae <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001658:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <HAL_RCC_OscConfig+0x77c>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	2380      	movs	r3, #128	; 0x80
 800165e:	049b      	lsls	r3, r3, #18
 8001660:	4013      	ands	r3, r2
 8001662:	d1f0      	bne.n	8001646 <HAL_RCC_OscConfig+0x70a>
 8001664:	e022      	b.n	80016ac <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166a:	2b01      	cmp	r3, #1
 800166c:	d101      	bne.n	8001672 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e01d      	b.n	80016ae <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <HAL_RCC_OscConfig+0x77c>)
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001678:	69fa      	ldr	r2, [r7, #28]
 800167a:	2380      	movs	r3, #128	; 0x80
 800167c:	025b      	lsls	r3, r3, #9
 800167e:	401a      	ands	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001684:	429a      	cmp	r2, r3
 8001686:	d10f      	bne.n	80016a8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001688:	69fa      	ldr	r2, [r7, #28]
 800168a:	23f0      	movs	r3, #240	; 0xf0
 800168c:	039b      	lsls	r3, r3, #14
 800168e:	401a      	ands	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001694:	429a      	cmp	r2, r3
 8001696:	d107      	bne.n	80016a8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001698:	69fa      	ldr	r2, [r7, #28]
 800169a:	23c0      	movs	r3, #192	; 0xc0
 800169c:	041b      	lsls	r3, r3, #16
 800169e:	401a      	ands	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d001      	beq.n	80016ac <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e000      	b.n	80016ae <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	0018      	movs	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	b00a      	add	sp, #40	; 0x28
 80016b4:	bdb0      	pop	{r4, r5, r7, pc}
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	40021000 	.word	0x40021000
 80016bc:	ff02ffff 	.word	0xff02ffff
 80016c0:	feffffff 	.word	0xfeffffff

080016c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c4:	b5b0      	push	{r4, r5, r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e128      	b.n	800192a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016d8:	4b96      	ldr	r3, [pc, #600]	; (8001934 <HAL_RCC_ClockConfig+0x270>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2201      	movs	r2, #1
 80016de:	4013      	ands	r3, r2
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d91e      	bls.n	8001724 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e6:	4b93      	ldr	r3, [pc, #588]	; (8001934 <HAL_RCC_ClockConfig+0x270>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2201      	movs	r2, #1
 80016ec:	4393      	bics	r3, r2
 80016ee:	0019      	movs	r1, r3
 80016f0:	4b90      	ldr	r3, [pc, #576]	; (8001934 <HAL_RCC_ClockConfig+0x270>)
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016f8:	f7ff f97a 	bl	80009f0 <HAL_GetTick>
 80016fc:	0003      	movs	r3, r0
 80016fe:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001700:	e009      	b.n	8001716 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001702:	f7ff f975 	bl	80009f0 <HAL_GetTick>
 8001706:	0002      	movs	r2, r0
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	4a8a      	ldr	r2, [pc, #552]	; (8001938 <HAL_RCC_ClockConfig+0x274>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e109      	b.n	800192a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001716:	4b87      	ldr	r3, [pc, #540]	; (8001934 <HAL_RCC_ClockConfig+0x270>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2201      	movs	r2, #1
 800171c:	4013      	ands	r3, r2
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	d1ee      	bne.n	8001702 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2202      	movs	r2, #2
 800172a:	4013      	ands	r3, r2
 800172c:	d009      	beq.n	8001742 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800172e:	4b83      	ldr	r3, [pc, #524]	; (800193c <HAL_RCC_ClockConfig+0x278>)
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	22f0      	movs	r2, #240	; 0xf0
 8001734:	4393      	bics	r3, r2
 8001736:	0019      	movs	r1, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	4b7f      	ldr	r3, [pc, #508]	; (800193c <HAL_RCC_ClockConfig+0x278>)
 800173e:	430a      	orrs	r2, r1
 8001740:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2201      	movs	r2, #1
 8001748:	4013      	ands	r3, r2
 800174a:	d100      	bne.n	800174e <HAL_RCC_ClockConfig+0x8a>
 800174c:	e089      	b.n	8001862 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d107      	bne.n	8001766 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001756:	4b79      	ldr	r3, [pc, #484]	; (800193c <HAL_RCC_ClockConfig+0x278>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	2380      	movs	r3, #128	; 0x80
 800175c:	029b      	lsls	r3, r3, #10
 800175e:	4013      	ands	r3, r2
 8001760:	d120      	bne.n	80017a4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e0e1      	b.n	800192a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b03      	cmp	r3, #3
 800176c:	d107      	bne.n	800177e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800176e:	4b73      	ldr	r3, [pc, #460]	; (800193c <HAL_RCC_ClockConfig+0x278>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	2380      	movs	r3, #128	; 0x80
 8001774:	049b      	lsls	r3, r3, #18
 8001776:	4013      	ands	r3, r2
 8001778:	d114      	bne.n	80017a4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e0d5      	b.n	800192a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d106      	bne.n	8001794 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001786:	4b6d      	ldr	r3, [pc, #436]	; (800193c <HAL_RCC_ClockConfig+0x278>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2204      	movs	r2, #4
 800178c:	4013      	ands	r3, r2
 800178e:	d109      	bne.n	80017a4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e0ca      	b.n	800192a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001794:	4b69      	ldr	r3, [pc, #420]	; (800193c <HAL_RCC_ClockConfig+0x278>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4013      	ands	r3, r2
 800179e:	d101      	bne.n	80017a4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e0c2      	b.n	800192a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017a4:	4b65      	ldr	r3, [pc, #404]	; (800193c <HAL_RCC_ClockConfig+0x278>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	2203      	movs	r2, #3
 80017aa:	4393      	bics	r3, r2
 80017ac:	0019      	movs	r1, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	4b62      	ldr	r3, [pc, #392]	; (800193c <HAL_RCC_ClockConfig+0x278>)
 80017b4:	430a      	orrs	r2, r1
 80017b6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017b8:	f7ff f91a 	bl	80009f0 <HAL_GetTick>
 80017bc:	0003      	movs	r3, r0
 80017be:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d111      	bne.n	80017ec <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017c8:	e009      	b.n	80017de <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ca:	f7ff f911 	bl	80009f0 <HAL_GetTick>
 80017ce:	0002      	movs	r2, r0
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	4a58      	ldr	r2, [pc, #352]	; (8001938 <HAL_RCC_ClockConfig+0x274>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e0a5      	b.n	800192a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017de:	4b57      	ldr	r3, [pc, #348]	; (800193c <HAL_RCC_ClockConfig+0x278>)
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	220c      	movs	r2, #12
 80017e4:	4013      	ands	r3, r2
 80017e6:	2b08      	cmp	r3, #8
 80017e8:	d1ef      	bne.n	80017ca <HAL_RCC_ClockConfig+0x106>
 80017ea:	e03a      	b.n	8001862 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b03      	cmp	r3, #3
 80017f2:	d111      	bne.n	8001818 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017f4:	e009      	b.n	800180a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f6:	f7ff f8fb 	bl	80009f0 <HAL_GetTick>
 80017fa:	0002      	movs	r2, r0
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	4a4d      	ldr	r2, [pc, #308]	; (8001938 <HAL_RCC_ClockConfig+0x274>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d901      	bls.n	800180a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e08f      	b.n	800192a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800180a:	4b4c      	ldr	r3, [pc, #304]	; (800193c <HAL_RCC_ClockConfig+0x278>)
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	220c      	movs	r2, #12
 8001810:	4013      	ands	r3, r2
 8001812:	2b0c      	cmp	r3, #12
 8001814:	d1ef      	bne.n	80017f6 <HAL_RCC_ClockConfig+0x132>
 8001816:	e024      	b.n	8001862 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d11b      	bne.n	8001858 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001820:	e009      	b.n	8001836 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001822:	f7ff f8e5 	bl	80009f0 <HAL_GetTick>
 8001826:	0002      	movs	r2, r0
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	4a42      	ldr	r2, [pc, #264]	; (8001938 <HAL_RCC_ClockConfig+0x274>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e079      	b.n	800192a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001836:	4b41      	ldr	r3, [pc, #260]	; (800193c <HAL_RCC_ClockConfig+0x278>)
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	220c      	movs	r2, #12
 800183c:	4013      	ands	r3, r2
 800183e:	2b04      	cmp	r3, #4
 8001840:	d1ef      	bne.n	8001822 <HAL_RCC_ClockConfig+0x15e>
 8001842:	e00e      	b.n	8001862 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001844:	f7ff f8d4 	bl	80009f0 <HAL_GetTick>
 8001848:	0002      	movs	r2, r0
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	4a3a      	ldr	r2, [pc, #232]	; (8001938 <HAL_RCC_ClockConfig+0x274>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e068      	b.n	800192a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001858:	4b38      	ldr	r3, [pc, #224]	; (800193c <HAL_RCC_ClockConfig+0x278>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	220c      	movs	r2, #12
 800185e:	4013      	ands	r3, r2
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001862:	4b34      	ldr	r3, [pc, #208]	; (8001934 <HAL_RCC_ClockConfig+0x270>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2201      	movs	r2, #1
 8001868:	4013      	ands	r3, r2
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	d21e      	bcs.n	80018ae <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001870:	4b30      	ldr	r3, [pc, #192]	; (8001934 <HAL_RCC_ClockConfig+0x270>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2201      	movs	r2, #1
 8001876:	4393      	bics	r3, r2
 8001878:	0019      	movs	r1, r3
 800187a:	4b2e      	ldr	r3, [pc, #184]	; (8001934 <HAL_RCC_ClockConfig+0x270>)
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	430a      	orrs	r2, r1
 8001880:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001882:	f7ff f8b5 	bl	80009f0 <HAL_GetTick>
 8001886:	0003      	movs	r3, r0
 8001888:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800188a:	e009      	b.n	80018a0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800188c:	f7ff f8b0 	bl	80009f0 <HAL_GetTick>
 8001890:	0002      	movs	r2, r0
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	4a28      	ldr	r2, [pc, #160]	; (8001938 <HAL_RCC_ClockConfig+0x274>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e044      	b.n	800192a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a0:	4b24      	ldr	r3, [pc, #144]	; (8001934 <HAL_RCC_ClockConfig+0x270>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2201      	movs	r2, #1
 80018a6:	4013      	ands	r3, r2
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d1ee      	bne.n	800188c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2204      	movs	r2, #4
 80018b4:	4013      	ands	r3, r2
 80018b6:	d009      	beq.n	80018cc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018b8:	4b20      	ldr	r3, [pc, #128]	; (800193c <HAL_RCC_ClockConfig+0x278>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	4a20      	ldr	r2, [pc, #128]	; (8001940 <HAL_RCC_ClockConfig+0x27c>)
 80018be:	4013      	ands	r3, r2
 80018c0:	0019      	movs	r1, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68da      	ldr	r2, [r3, #12]
 80018c6:	4b1d      	ldr	r3, [pc, #116]	; (800193c <HAL_RCC_ClockConfig+0x278>)
 80018c8:	430a      	orrs	r2, r1
 80018ca:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2208      	movs	r2, #8
 80018d2:	4013      	ands	r3, r2
 80018d4:	d00a      	beq.n	80018ec <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018d6:	4b19      	ldr	r3, [pc, #100]	; (800193c <HAL_RCC_ClockConfig+0x278>)
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	4a1a      	ldr	r2, [pc, #104]	; (8001944 <HAL_RCC_ClockConfig+0x280>)
 80018dc:	4013      	ands	r3, r2
 80018de:	0019      	movs	r1, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	00da      	lsls	r2, r3, #3
 80018e6:	4b15      	ldr	r3, [pc, #84]	; (800193c <HAL_RCC_ClockConfig+0x278>)
 80018e8:	430a      	orrs	r2, r1
 80018ea:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ec:	f000 f832 	bl	8001954 <HAL_RCC_GetSysClockFreq>
 80018f0:	0001      	movs	r1, r0
 80018f2:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_RCC_ClockConfig+0x278>)
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	091b      	lsrs	r3, r3, #4
 80018f8:	220f      	movs	r2, #15
 80018fa:	4013      	ands	r3, r2
 80018fc:	4a12      	ldr	r2, [pc, #72]	; (8001948 <HAL_RCC_ClockConfig+0x284>)
 80018fe:	5cd3      	ldrb	r3, [r2, r3]
 8001900:	000a      	movs	r2, r1
 8001902:	40da      	lsrs	r2, r3
 8001904:	4b11      	ldr	r3, [pc, #68]	; (800194c <HAL_RCC_ClockConfig+0x288>)
 8001906:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <HAL_RCC_ClockConfig+0x28c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	250b      	movs	r5, #11
 800190e:	197c      	adds	r4, r7, r5
 8001910:	0018      	movs	r0, r3
 8001912:	f7ff f827 	bl	8000964 <HAL_InitTick>
 8001916:	0003      	movs	r3, r0
 8001918:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800191a:	197b      	adds	r3, r7, r5
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d002      	beq.n	8001928 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001922:	197b      	adds	r3, r7, r5
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	e000      	b.n	800192a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	0018      	movs	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	b004      	add	sp, #16
 8001930:	bdb0      	pop	{r4, r5, r7, pc}
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	40022000 	.word	0x40022000
 8001938:	00001388 	.word	0x00001388
 800193c:	40021000 	.word	0x40021000
 8001940:	fffff8ff 	.word	0xfffff8ff
 8001944:	ffffc7ff 	.word	0xffffc7ff
 8001948:	080032bc 	.word	0x080032bc
 800194c:	20000008 	.word	0x20000008
 8001950:	2000000c 	.word	0x2000000c

08001954 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001954:	b5b0      	push	{r4, r5, r7, lr}
 8001956:	b08e      	sub	sp, #56	; 0x38
 8001958:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800195a:	4b4c      	ldr	r3, [pc, #304]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x138>)
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001962:	230c      	movs	r3, #12
 8001964:	4013      	ands	r3, r2
 8001966:	2b0c      	cmp	r3, #12
 8001968:	d014      	beq.n	8001994 <HAL_RCC_GetSysClockFreq+0x40>
 800196a:	d900      	bls.n	800196e <HAL_RCC_GetSysClockFreq+0x1a>
 800196c:	e07b      	b.n	8001a66 <HAL_RCC_GetSysClockFreq+0x112>
 800196e:	2b04      	cmp	r3, #4
 8001970:	d002      	beq.n	8001978 <HAL_RCC_GetSysClockFreq+0x24>
 8001972:	2b08      	cmp	r3, #8
 8001974:	d00b      	beq.n	800198e <HAL_RCC_GetSysClockFreq+0x3a>
 8001976:	e076      	b.n	8001a66 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001978:	4b44      	ldr	r3, [pc, #272]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x138>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2210      	movs	r2, #16
 800197e:	4013      	ands	r3, r2
 8001980:	d002      	beq.n	8001988 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001982:	4b43      	ldr	r3, [pc, #268]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001984:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001986:	e07c      	b.n	8001a82 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001988:	4b42      	ldr	r3, [pc, #264]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x140>)
 800198a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800198c:	e079      	b.n	8001a82 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800198e:	4b42      	ldr	r3, [pc, #264]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x144>)
 8001990:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001992:	e076      	b.n	8001a82 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001996:	0c9a      	lsrs	r2, r3, #18
 8001998:	230f      	movs	r3, #15
 800199a:	401a      	ands	r2, r3
 800199c:	4b3f      	ldr	r3, [pc, #252]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x148>)
 800199e:	5c9b      	ldrb	r3, [r3, r2]
 80019a0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80019a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a4:	0d9a      	lsrs	r2, r3, #22
 80019a6:	2303      	movs	r3, #3
 80019a8:	4013      	ands	r3, r2
 80019aa:	3301      	adds	r3, #1
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ae:	4b37      	ldr	r3, [pc, #220]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x138>)
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	2380      	movs	r3, #128	; 0x80
 80019b4:	025b      	lsls	r3, r3, #9
 80019b6:	4013      	ands	r3, r2
 80019b8:	d01a      	beq.n	80019f0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80019ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019bc:	61bb      	str	r3, [r7, #24]
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
 80019c2:	4a35      	ldr	r2, [pc, #212]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x144>)
 80019c4:	2300      	movs	r3, #0
 80019c6:	69b8      	ldr	r0, [r7, #24]
 80019c8:	69f9      	ldr	r1, [r7, #28]
 80019ca:	f7fe fc49 	bl	8000260 <__aeabi_lmul>
 80019ce:	0002      	movs	r2, r0
 80019d0:	000b      	movs	r3, r1
 80019d2:	0010      	movs	r0, r2
 80019d4:	0019      	movs	r1, r3
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	f7fe fc1d 	bl	8000220 <__aeabi_uldivmod>
 80019e6:	0002      	movs	r2, r0
 80019e8:	000b      	movs	r3, r1
 80019ea:	0013      	movs	r3, r2
 80019ec:	637b      	str	r3, [r7, #52]	; 0x34
 80019ee:	e037      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80019f0:	4b26      	ldr	r3, [pc, #152]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x138>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2210      	movs	r2, #16
 80019f6:	4013      	ands	r3, r2
 80019f8:	d01a      	beq.n	8001a30 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80019fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	4a23      	ldr	r2, [pc, #140]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001a04:	2300      	movs	r3, #0
 8001a06:	68b8      	ldr	r0, [r7, #8]
 8001a08:	68f9      	ldr	r1, [r7, #12]
 8001a0a:	f7fe fc29 	bl	8000260 <__aeabi_lmul>
 8001a0e:	0002      	movs	r2, r0
 8001a10:	000b      	movs	r3, r1
 8001a12:	0010      	movs	r0, r2
 8001a14:	0019      	movs	r1, r3
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	603b      	str	r3, [r7, #0]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	607b      	str	r3, [r7, #4]
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f7fe fbfd 	bl	8000220 <__aeabi_uldivmod>
 8001a26:	0002      	movs	r2, r0
 8001a28:	000b      	movs	r3, r1
 8001a2a:	0013      	movs	r3, r2
 8001a2c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a2e:	e017      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a32:	0018      	movs	r0, r3
 8001a34:	2300      	movs	r3, #0
 8001a36:	0019      	movs	r1, r3
 8001a38:	4a16      	ldr	r2, [pc, #88]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x140>)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f7fe fc10 	bl	8000260 <__aeabi_lmul>
 8001a40:	0002      	movs	r2, r0
 8001a42:	000b      	movs	r3, r1
 8001a44:	0010      	movs	r0, r2
 8001a46:	0019      	movs	r1, r3
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	001c      	movs	r4, r3
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	001d      	movs	r5, r3
 8001a50:	0022      	movs	r2, r4
 8001a52:	002b      	movs	r3, r5
 8001a54:	f7fe fbe4 	bl	8000220 <__aeabi_uldivmod>
 8001a58:	0002      	movs	r2, r0
 8001a5a:	000b      	movs	r3, r1
 8001a5c:	0013      	movs	r3, r2
 8001a5e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a62:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a64:	e00d      	b.n	8001a82 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x138>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	0b5b      	lsrs	r3, r3, #13
 8001a6c:	2207      	movs	r2, #7
 8001a6e:	4013      	ands	r3, r2
 8001a70:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001a72:	6a3b      	ldr	r3, [r7, #32]
 8001a74:	3301      	adds	r3, #1
 8001a76:	2280      	movs	r2, #128	; 0x80
 8001a78:	0212      	lsls	r2, r2, #8
 8001a7a:	409a      	lsls	r2, r3
 8001a7c:	0013      	movs	r3, r2
 8001a7e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a80:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001a84:	0018      	movs	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	b00e      	add	sp, #56	; 0x38
 8001a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	003d0900 	.word	0x003d0900
 8001a94:	00f42400 	.word	0x00f42400
 8001a98:	007a1200 	.word	0x007a1200
 8001a9c:	080032d4 	.word	0x080032d4

08001aa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001aa4:	4b02      	ldr	r3, [pc, #8]	; (8001ab0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
}
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	46c0      	nop			; (mov r8, r8)
 8001ab0:	20000008 	.word	0x20000008

08001ab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ab8:	f7ff fff2 	bl	8001aa0 <HAL_RCC_GetHCLKFreq>
 8001abc:	0001      	movs	r1, r0
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	0a1b      	lsrs	r3, r3, #8
 8001ac4:	2207      	movs	r2, #7
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	4a04      	ldr	r2, [pc, #16]	; (8001adc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001aca:	5cd3      	ldrb	r3, [r2, r3]
 8001acc:	40d9      	lsrs	r1, r3
 8001ace:	000b      	movs	r3, r1
}
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	080032cc 	.word	0x080032cc

08001ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ae4:	f7ff ffdc 	bl	8001aa0 <HAL_RCC_GetHCLKFreq>
 8001ae8:	0001      	movs	r1, r0
 8001aea:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	0adb      	lsrs	r3, r3, #11
 8001af0:	2207      	movs	r2, #7
 8001af2:	4013      	ands	r3, r2
 8001af4:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001af6:	5cd3      	ldrb	r3, [r2, r3]
 8001af8:	40d9      	lsrs	r1, r3
 8001afa:	000b      	movs	r3, r1
}
 8001afc:	0018      	movs	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	40021000 	.word	0x40021000
 8001b08:	080032cc 	.word	0x080032cc

08001b0c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001b14:	2317      	movs	r3, #23
 8001b16:	18fb      	adds	r3, r7, r3
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2220      	movs	r2, #32
 8001b22:	4013      	ands	r3, r2
 8001b24:	d106      	bne.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	011b      	lsls	r3, r3, #4
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d100      	bne.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001b32:	e104      	b.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b34:	4bb1      	ldr	r3, [pc, #708]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	055b      	lsls	r3, r3, #21
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d10a      	bne.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b40:	4bae      	ldr	r3, [pc, #696]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b44:	4bad      	ldr	r3, [pc, #692]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b46:	2180      	movs	r1, #128	; 0x80
 8001b48:	0549      	lsls	r1, r1, #21
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001b4e:	2317      	movs	r3, #23
 8001b50:	18fb      	adds	r3, r7, r3
 8001b52:	2201      	movs	r2, #1
 8001b54:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b56:	4baa      	ldr	r3, [pc, #680]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	2380      	movs	r3, #128	; 0x80
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d11a      	bne.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b62:	4ba7      	ldr	r3, [pc, #668]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	4ba6      	ldr	r3, [pc, #664]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001b68:	2180      	movs	r1, #128	; 0x80
 8001b6a:	0049      	lsls	r1, r1, #1
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b70:	f7fe ff3e 	bl	80009f0 <HAL_GetTick>
 8001b74:	0003      	movs	r3, r0
 8001b76:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b78:	e008      	b.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b7a:	f7fe ff39 	bl	80009f0 <HAL_GetTick>
 8001b7e:	0002      	movs	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b64      	cmp	r3, #100	; 0x64
 8001b86:	d901      	bls.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e133      	b.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8c:	4b9c      	ldr	r3, [pc, #624]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	2380      	movs	r3, #128	; 0x80
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	4013      	ands	r3, r2
 8001b96:	d0f0      	beq.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001b98:	4b98      	ldr	r3, [pc, #608]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	23c0      	movs	r3, #192	; 0xc0
 8001b9e:	039b      	lsls	r3, r3, #14
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	23c0      	movs	r3, #192	; 0xc0
 8001baa:	039b      	lsls	r3, r3, #14
 8001bac:	4013      	ands	r3, r2
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d107      	bne.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	23c0      	movs	r3, #192	; 0xc0
 8001bba:	039b      	lsls	r3, r3, #14
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d013      	beq.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	23c0      	movs	r3, #192	; 0xc0
 8001bca:	029b      	lsls	r3, r3, #10
 8001bcc:	401a      	ands	r2, r3
 8001bce:	23c0      	movs	r3, #192	; 0xc0
 8001bd0:	029b      	lsls	r3, r3, #10
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d10a      	bne.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001bd6:	4b89      	ldr	r3, [pc, #548]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	2380      	movs	r3, #128	; 0x80
 8001bdc:	029b      	lsls	r3, r3, #10
 8001bde:	401a      	ands	r2, r3
 8001be0:	2380      	movs	r3, #128	; 0x80
 8001be2:	029b      	lsls	r3, r3, #10
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d101      	bne.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e103      	b.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001bec:	4b83      	ldr	r3, [pc, #524]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bf0:	23c0      	movs	r3, #192	; 0xc0
 8001bf2:	029b      	lsls	r3, r3, #10
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d049      	beq.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	23c0      	movs	r3, #192	; 0xc0
 8001c04:	029b      	lsls	r3, r3, #10
 8001c06:	4013      	ands	r3, r2
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d004      	beq.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2220      	movs	r2, #32
 8001c14:	4013      	ands	r3, r2
 8001c16:	d10d      	bne.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	23c0      	movs	r3, #192	; 0xc0
 8001c1e:	029b      	lsls	r3, r3, #10
 8001c20:	4013      	ands	r3, r2
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d034      	beq.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	2380      	movs	r3, #128	; 0x80
 8001c2e:	011b      	lsls	r3, r3, #4
 8001c30:	4013      	ands	r3, r2
 8001c32:	d02e      	beq.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001c34:	4b71      	ldr	r3, [pc, #452]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c38:	4a72      	ldr	r2, [pc, #456]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c3e:	4b6f      	ldr	r3, [pc, #444]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c42:	4b6e      	ldr	r3, [pc, #440]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c44:	2180      	movs	r1, #128	; 0x80
 8001c46:	0309      	lsls	r1, r1, #12
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c4c:	4b6b      	ldr	r3, [pc, #428]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c50:	4b6a      	ldr	r3, [pc, #424]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c52:	496d      	ldr	r1, [pc, #436]	; (8001e08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001c54:	400a      	ands	r2, r1
 8001c56:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001c58:	4b68      	ldr	r3, [pc, #416]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	4013      	ands	r3, r2
 8001c66:	d014      	beq.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c68:	f7fe fec2 	bl	80009f0 <HAL_GetTick>
 8001c6c:	0003      	movs	r3, r0
 8001c6e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c70:	e009      	b.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c72:	f7fe febd 	bl	80009f0 <HAL_GetTick>
 8001c76:	0002      	movs	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	4a63      	ldr	r2, [pc, #396]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e0b6      	b.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c86:	4b5d      	ldr	r3, [pc, #372]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c8a:	2380      	movs	r3, #128	; 0x80
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4013      	ands	r3, r2
 8001c90:	d0ef      	beq.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	2380      	movs	r3, #128	; 0x80
 8001c98:	011b      	lsls	r3, r3, #4
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d01f      	beq.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689a      	ldr	r2, [r3, #8]
 8001ca2:	23c0      	movs	r3, #192	; 0xc0
 8001ca4:	029b      	lsls	r3, r3, #10
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	23c0      	movs	r3, #192	; 0xc0
 8001caa:	029b      	lsls	r3, r3, #10
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d10c      	bne.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8001cb0:	4b52      	ldr	r3, [pc, #328]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a56      	ldr	r2, [pc, #344]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	0019      	movs	r1, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	23c0      	movs	r3, #192	; 0xc0
 8001cc0:	039b      	lsls	r3, r3, #14
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	4b4d      	ldr	r3, [pc, #308]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	4b4c      	ldr	r3, [pc, #304]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ccc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689a      	ldr	r2, [r3, #8]
 8001cd2:	23c0      	movs	r3, #192	; 0xc0
 8001cd4:	029b      	lsls	r3, r3, #10
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	4b48      	ldr	r3, [pc, #288]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d01f      	beq.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	23c0      	movs	r3, #192	; 0xc0
 8001cee:	029b      	lsls	r3, r3, #10
 8001cf0:	401a      	ands	r2, r3
 8001cf2:	23c0      	movs	r3, #192	; 0xc0
 8001cf4:	029b      	lsls	r3, r3, #10
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d10c      	bne.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001cfa:	4b40      	ldr	r3, [pc, #256]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a44      	ldr	r2, [pc, #272]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	0019      	movs	r1, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	23c0      	movs	r3, #192	; 0xc0
 8001d0a:	039b      	lsls	r3, r3, #14
 8001d0c:	401a      	ands	r2, r3
 8001d0e:	4b3b      	ldr	r3, [pc, #236]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d10:	430a      	orrs	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	4b39      	ldr	r3, [pc, #228]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d16:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	23c0      	movs	r3, #192	; 0xc0
 8001d1e:	029b      	lsls	r3, r3, #10
 8001d20:	401a      	ands	r2, r3
 8001d22:	4b36      	ldr	r3, [pc, #216]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d24:	430a      	orrs	r2, r1
 8001d26:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d28:	2317      	movs	r3, #23
 8001d2a:	18fb      	adds	r3, r7, r3
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d105      	bne.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d32:	4b32      	ldr	r3, [pc, #200]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d36:	4b31      	ldr	r3, [pc, #196]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d38:	4936      	ldr	r1, [pc, #216]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001d3a:	400a      	ands	r2, r1
 8001d3c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2201      	movs	r2, #1
 8001d44:	4013      	ands	r3, r2
 8001d46:	d009      	beq.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d48:	4b2c      	ldr	r3, [pc, #176]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	4393      	bics	r3, r2
 8001d50:	0019      	movs	r1, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	4b29      	ldr	r3, [pc, #164]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2202      	movs	r2, #2
 8001d62:	4013      	ands	r3, r2
 8001d64:	d009      	beq.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d66:	4b25      	ldr	r3, [pc, #148]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6a:	220c      	movs	r2, #12
 8001d6c:	4393      	bics	r3, r2
 8001d6e:	0019      	movs	r1, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691a      	ldr	r2, [r3, #16]
 8001d74:	4b21      	ldr	r3, [pc, #132]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d76:	430a      	orrs	r2, r1
 8001d78:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2204      	movs	r2, #4
 8001d80:	4013      	ands	r3, r2
 8001d82:	d009      	beq.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001d84:	4b1d      	ldr	r3, [pc, #116]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d88:	4a23      	ldr	r2, [pc, #140]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	0019      	movs	r1, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	695a      	ldr	r2, [r3, #20]
 8001d92:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d94:	430a      	orrs	r2, r1
 8001d96:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2208      	movs	r2, #8
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d009      	beq.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001da2:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da6:	4a1d      	ldr	r2, [pc, #116]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001da8:	4013      	ands	r3, r2
 8001daa:	0019      	movs	r1, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	699a      	ldr	r2, [r3, #24]
 8001db0:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001db2:	430a      	orrs	r2, r1
 8001db4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2240      	movs	r2, #64	; 0x40
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d009      	beq.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001dc0:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc4:	4a16      	ldr	r2, [pc, #88]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	0019      	movs	r1, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a1a      	ldr	r2, [r3, #32]
 8001dce:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2280      	movs	r2, #128	; 0x80
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d009      	beq.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001dde:	4b07      	ldr	r3, [pc, #28]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de2:	4a10      	ldr	r2, [pc, #64]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	0019      	movs	r1, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	69da      	ldr	r2, [r3, #28]
 8001dec:	4b03      	ldr	r3, [pc, #12]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dee:	430a      	orrs	r2, r1
 8001df0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	0018      	movs	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	b006      	add	sp, #24
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40007000 	.word	0x40007000
 8001e04:	fffcffff 	.word	0xfffcffff
 8001e08:	fff7ffff 	.word	0xfff7ffff
 8001e0c:	00001388 	.word	0x00001388
 8001e10:	ffcfffff 	.word	0xffcfffff
 8001e14:	efffffff 	.word	0xefffffff
 8001e18:	fffff3ff 	.word	0xfffff3ff
 8001e1c:	ffffcfff 	.word	0xffffcfff
 8001e20:	fbffffff 	.word	0xfbffffff
 8001e24:	fff3ffff 	.word	0xfff3ffff

08001e28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e083      	b.n	8001f42 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d109      	bne.n	8001e56 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	2382      	movs	r3, #130	; 0x82
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d009      	beq.n	8001e62 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	61da      	str	r2, [r3, #28]
 8001e54:	e005      	b.n	8001e62 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2251      	movs	r2, #81	; 0x51
 8001e6c:	5c9b      	ldrb	r3, [r3, r2]
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d107      	bne.n	8001e84 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2250      	movs	r2, #80	; 0x50
 8001e78:	2100      	movs	r1, #0
 8001e7a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	0018      	movs	r0, r3
 8001e80:	f7fe fc54 	bl	800072c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2251      	movs	r2, #81	; 0x51
 8001e88:	2102      	movs	r1, #2
 8001e8a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2140      	movs	r1, #64	; 0x40
 8001e98:	438a      	bics	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	2382      	movs	r3, #130	; 0x82
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	401a      	ands	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6899      	ldr	r1, [r3, #8]
 8001eaa:	2384      	movs	r3, #132	; 0x84
 8001eac:	021b      	lsls	r3, r3, #8
 8001eae:	400b      	ands	r3, r1
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68d9      	ldr	r1, [r3, #12]
 8001eb6:	2380      	movs	r3, #128	; 0x80
 8001eb8:	011b      	lsls	r3, r3, #4
 8001eba:	400b      	ands	r3, r1
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	2102      	movs	r1, #2
 8001ec4:	400b      	ands	r3, r1
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	2101      	movs	r1, #1
 8001ece:	400b      	ands	r3, r1
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6999      	ldr	r1, [r3, #24]
 8001ed6:	2380      	movs	r3, #128	; 0x80
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	400b      	ands	r3, r1
 8001edc:	431a      	orrs	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	2138      	movs	r1, #56	; 0x38
 8001ee4:	400b      	ands	r3, r1
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	2180      	movs	r1, #128	; 0x80
 8001eee:	400b      	ands	r3, r1
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	0011      	movs	r1, r2
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ef8:	2380      	movs	r3, #128	; 0x80
 8001efa:	019b      	lsls	r3, r3, #6
 8001efc:	401a      	ands	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	0c1b      	lsrs	r3, r3, #16
 8001f0c:	2204      	movs	r2, #4
 8001f0e:	4013      	ands	r3, r2
 8001f10:	0019      	movs	r1, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	2210      	movs	r2, #16
 8001f18:	401a      	ands	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	69da      	ldr	r2, [r3, #28]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4907      	ldr	r1, [pc, #28]	; (8001f4c <HAL_SPI_Init+0x124>)
 8001f2e:	400a      	ands	r2, r1
 8001f30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2251      	movs	r2, #81	; 0x51
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	0018      	movs	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	b002      	add	sp, #8
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	fffff7ff 	.word	0xfffff7ff

08001f50 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
 8001f5c:	001a      	movs	r2, r3
 8001f5e:	1cbb      	adds	r3, r7, #2
 8001f60:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001f62:	2317      	movs	r3, #23
 8001f64:	18fb      	adds	r3, r7, r3
 8001f66:	2200      	movs	r2, #0
 8001f68:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2250      	movs	r2, #80	; 0x50
 8001f6e:	5c9b      	ldrb	r3, [r3, r2]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d101      	bne.n	8001f78 <HAL_SPI_TransmitReceive_IT+0x28>
 8001f74:	2302      	movs	r3, #2
 8001f76:	e086      	b.n	8002086 <HAL_SPI_TransmitReceive_IT+0x136>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2250      	movs	r2, #80	; 0x50
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001f80:	2016      	movs	r0, #22
 8001f82:	183b      	adds	r3, r7, r0
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	2151      	movs	r1, #81	; 0x51
 8001f88:	5c52      	ldrb	r2, [r2, r1]
 8001f8a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001f92:	0001      	movs	r1, r0
 8001f94:	187b      	adds	r3, r7, r1
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d011      	beq.n	8001fc0 <HAL_SPI_TransmitReceive_IT+0x70>
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	2382      	movs	r3, #130	; 0x82
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d107      	bne.n	8001fb6 <HAL_SPI_TransmitReceive_IT+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d103      	bne.n	8001fb6 <HAL_SPI_TransmitReceive_IT+0x66>
 8001fae:	187b      	adds	r3, r7, r1
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	d004      	beq.n	8001fc0 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_BUSY;
 8001fb6:	2317      	movs	r3, #23
 8001fb8:	18fb      	adds	r3, r7, r3
 8001fba:	2202      	movs	r2, #2
 8001fbc:	701a      	strb	r2, [r3, #0]
    goto error;
 8001fbe:	e05b      	b.n	8002078 <HAL_SPI_TransmitReceive_IT+0x128>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d006      	beq.n	8001fd4 <HAL_SPI_TransmitReceive_IT+0x84>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_SPI_TransmitReceive_IT+0x84>
 8001fcc:	1cbb      	adds	r3, r7, #2
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d104      	bne.n	8001fde <HAL_SPI_TransmitReceive_IT+0x8e>
  {
    errorcode = HAL_ERROR;
 8001fd4:	2317      	movs	r3, #23
 8001fd6:	18fb      	adds	r3, r7, r3
 8001fd8:	2201      	movs	r2, #1
 8001fda:	701a      	strb	r2, [r3, #0]
    goto error;
 8001fdc:	e04c      	b.n	8002078 <HAL_SPI_TransmitReceive_IT+0x128>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2251      	movs	r2, #81	; 0x51
 8001fe2:	5c9b      	ldrb	r3, [r3, r2]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d003      	beq.n	8001ff2 <HAL_SPI_TransmitReceive_IT+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2251      	movs	r2, #81	; 0x51
 8001fee:	2105      	movs	r1, #5
 8001ff0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	1cba      	adds	r2, r7, #2
 8002002:	8812      	ldrh	r2, [r2, #0]
 8002004:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	1cba      	adds	r2, r7, #2
 800200a:	8812      	ldrh	r2, [r2, #0]
 800200c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	1cba      	adds	r2, r7, #2
 8002018:	8812      	ldrh	r2, [r2, #0]
 800201a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	1cba      	adds	r2, r7, #2
 8002020:	8812      	ldrh	r2, [r2, #0]
 8002022:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d006      	beq.n	800203a <HAL_SPI_TransmitReceive_IT+0xea>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4a18      	ldr	r2, [pc, #96]	; (8002090 <HAL_SPI_TransmitReceive_IT+0x140>)
 8002030:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	4a17      	ldr	r2, [pc, #92]	; (8002094 <HAL_SPI_TransmitReceive_IT+0x144>)
 8002036:	645a      	str	r2, [r3, #68]	; 0x44
 8002038:	e005      	b.n	8002046 <HAL_SPI_TransmitReceive_IT+0xf6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4a16      	ldr	r2, [pc, #88]	; (8002098 <HAL_SPI_TransmitReceive_IT+0x148>)
 800203e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4a16      	ldr	r2, [pc, #88]	; (800209c <HAL_SPI_TransmitReceive_IT+0x14c>)
 8002044:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	21e0      	movs	r1, #224	; 0xe0
 8002052:	430a      	orrs	r2, r1
 8002054:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2240      	movs	r2, #64	; 0x40
 800205e:	4013      	ands	r3, r2
 8002060:	2b40      	cmp	r3, #64	; 0x40
 8002062:	d008      	beq.n	8002076 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2140      	movs	r1, #64	; 0x40
 8002070:	430a      	orrs	r2, r1
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	e000      	b.n	8002078 <HAL_SPI_TransmitReceive_IT+0x128>
  }

error :
 8002076:	46c0      	nop			; (mov r8, r8)
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2250      	movs	r2, #80	; 0x50
 800207c:	2100      	movs	r1, #0
 800207e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002080:	2317      	movs	r3, #23
 8002082:	18fb      	adds	r3, r7, r3
 8002084:	781b      	ldrb	r3, [r3, #0]
}
 8002086:	0018      	movs	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	b006      	add	sp, #24
 800208c:	bd80      	pop	{r7, pc}
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	080023af 	.word	0x080023af
 8002094:	08002411 	.word	0x08002411
 8002098:	080022e7 	.word	0x080022e7
 800209c:	0800234d 	.word	0x0800234d

080020a0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	099b      	lsrs	r3, r3, #6
 80020bc:	001a      	movs	r2, r3
 80020be:	2301      	movs	r3, #1
 80020c0:	4013      	ands	r3, r2
 80020c2:	d10f      	bne.n	80020e4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	2201      	movs	r2, #1
 80020c8:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80020ca:	d00b      	beq.n	80020e4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	099b      	lsrs	r3, r3, #6
 80020d0:	001a      	movs	r2, r3
 80020d2:	2301      	movs	r3, #1
 80020d4:	4013      	ands	r3, r2
 80020d6:	d005      	beq.n	80020e4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	0010      	movs	r0, r2
 80020e0:	4798      	blx	r3
    return;
 80020e2:	e0d5      	b.n	8002290 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	085b      	lsrs	r3, r3, #1
 80020e8:	001a      	movs	r2, r3
 80020ea:	2301      	movs	r3, #1
 80020ec:	4013      	ands	r3, r2
 80020ee:	d00b      	beq.n	8002108 <HAL_SPI_IRQHandler+0x68>
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	09db      	lsrs	r3, r3, #7
 80020f4:	001a      	movs	r2, r3
 80020f6:	2301      	movs	r3, #1
 80020f8:	4013      	ands	r3, r2
 80020fa:	d005      	beq.n	8002108 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	0010      	movs	r0, r2
 8002104:	4798      	blx	r3
    return;
 8002106:	e0c3      	b.n	8002290 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	001a      	movs	r2, r3
 800210e:	2301      	movs	r3, #1
 8002110:	4013      	ands	r3, r2
 8002112:	d10c      	bne.n	800212e <HAL_SPI_IRQHandler+0x8e>
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	099b      	lsrs	r3, r3, #6
 8002118:	001a      	movs	r2, r3
 800211a:	2301      	movs	r3, #1
 800211c:	4013      	ands	r3, r2
 800211e:	d106      	bne.n	800212e <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	0a1b      	lsrs	r3, r3, #8
 8002124:	001a      	movs	r2, r3
 8002126:	2301      	movs	r3, #1
 8002128:	4013      	ands	r3, r2
 800212a:	d100      	bne.n	800212e <HAL_SPI_IRQHandler+0x8e>
 800212c:	e0b0      	b.n	8002290 <HAL_SPI_IRQHandler+0x1f0>
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	095b      	lsrs	r3, r3, #5
 8002132:	001a      	movs	r2, r3
 8002134:	2301      	movs	r3, #1
 8002136:	4013      	ands	r3, r2
 8002138:	d100      	bne.n	800213c <HAL_SPI_IRQHandler+0x9c>
 800213a:	e0a9      	b.n	8002290 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	099b      	lsrs	r3, r3, #6
 8002140:	001a      	movs	r2, r3
 8002142:	2301      	movs	r3, #1
 8002144:	4013      	ands	r3, r2
 8002146:	d023      	beq.n	8002190 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2251      	movs	r2, #81	; 0x51
 800214c:	5c9b      	ldrb	r3, [r3, r2]
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b03      	cmp	r3, #3
 8002152:	d011      	beq.n	8002178 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002158:	2204      	movs	r2, #4
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	e00b      	b.n	8002190 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002178:	2300      	movs	r3, #0
 800217a:	613b      	str	r3, [r7, #16]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	693b      	ldr	r3, [r7, #16]
        return;
 800218e:	e07f      	b.n	8002290 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	095b      	lsrs	r3, r3, #5
 8002194:	001a      	movs	r2, r3
 8002196:	2301      	movs	r3, #1
 8002198:	4013      	ands	r3, r2
 800219a:	d014      	beq.n	80021c6 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a0:	2201      	movs	r2, #1
 80021a2:	431a      	orrs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80021a8:	2300      	movs	r3, #0
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2140      	movs	r1, #64	; 0x40
 80021c0:	438a      	bics	r2, r1
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	0a1b      	lsrs	r3, r3, #8
 80021ca:	001a      	movs	r2, r3
 80021cc:	2301      	movs	r3, #1
 80021ce:	4013      	ands	r3, r2
 80021d0:	d00c      	beq.n	80021ec <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d6:	2208      	movs	r2, #8
 80021d8:	431a      	orrs	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80021de:	2300      	movs	r3, #0
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d04c      	beq.n	800228e <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	21e0      	movs	r1, #224	; 0xe0
 8002200:	438a      	bics	r2, r1
 8002202:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2251      	movs	r2, #81	; 0x51
 8002208:	2101      	movs	r1, #1
 800220a:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	2202      	movs	r2, #2
 8002210:	4013      	ands	r3, r2
 8002212:	d103      	bne.n	800221c <HAL_SPI_IRQHandler+0x17c>
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	2201      	movs	r2, #1
 8002218:	4013      	ands	r3, r2
 800221a:	d032      	beq.n	8002282 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2103      	movs	r1, #3
 8002228:	438a      	bics	r2, r1
 800222a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002230:	2b00      	cmp	r3, #0
 8002232:	d010      	beq.n	8002256 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002238:	4a17      	ldr	r2, [pc, #92]	; (8002298 <HAL_SPI_IRQHandler+0x1f8>)
 800223a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002240:	0018      	movs	r0, r3
 8002242:	f7fe fcbd 	bl	8000bc0 <HAL_DMA_Abort_IT>
 8002246:	1e03      	subs	r3, r0, #0
 8002248:	d005      	beq.n	8002256 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224e:	2240      	movs	r2, #64	; 0x40
 8002250:	431a      	orrs	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800225a:	2b00      	cmp	r3, #0
 800225c:	d016      	beq.n	800228c <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002262:	4a0d      	ldr	r2, [pc, #52]	; (8002298 <HAL_SPI_IRQHandler+0x1f8>)
 8002264:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800226a:	0018      	movs	r0, r3
 800226c:	f7fe fca8 	bl	8000bc0 <HAL_DMA_Abort_IT>
 8002270:	1e03      	subs	r3, r0, #0
 8002272:	d00b      	beq.n	800228c <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002278:	2240      	movs	r2, #64	; 0x40
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002280:	e004      	b.n	800228c <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	0018      	movs	r0, r3
 8002286:	f000 f811 	bl	80022ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800228a:	e000      	b.n	800228e <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 800228c:	46c0      	nop			; (mov r8, r8)
    return;
 800228e:	46c0      	nop			; (mov r8, r8)
  }
}
 8002290:	46bd      	mov	sp, r7
 8002292:	b008      	add	sp, #32
 8002294:	bd80      	pop	{r7, pc}
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	080022bd 	.word	0x080022bd

0800229c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80022a4:	46c0      	nop			; (mov r8, r8)
 80022a6:	46bd      	mov	sp, r7
 80022a8:	b002      	add	sp, #8
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80022b4:	46c0      	nop			; (mov r8, r8)
 80022b6:	46bd      	mov	sp, r7
 80022b8:	b002      	add	sp, #8
 80022ba:	bd80      	pop	{r7, pc}

080022bc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	0018      	movs	r0, r3
 80022da:	f7ff ffe7 	bl	80022ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	46bd      	mov	sp, r7
 80022e2:	b004      	add	sp, #16
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	330c      	adds	r3, #12
 80022f4:	001a      	movs	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fa:	7812      	ldrb	r2, [r2, #0]
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800230e:	b29b      	uxth	r3, r3
 8002310:	3b01      	subs	r3, #1
 8002312:	b29a      	uxth	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800231c:	b29b      	uxth	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d110      	bne.n	8002344 <SPI_2linesRxISR_8BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2160      	movs	r1, #96	; 0x60
 800232e:	438a      	bics	r2, r1
 8002330:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002336:	b29b      	uxth	r3, r3
 8002338:	2b00      	cmp	r3, #0
 800233a:	d103      	bne.n	8002344 <SPI_2linesRxISR_8BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	0018      	movs	r0, r3
 8002340:	f000 f96a 	bl	8002618 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002344:	46c0      	nop			; (mov r8, r8)
 8002346:	46bd      	mov	sp, r7
 8002348:	b002      	add	sp, #8
 800234a:	bd80      	pop	{r7, pc}

0800234c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	330c      	adds	r3, #12
 800235e:	7812      	ldrb	r2, [r2, #0]
 8002360:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	1c5a      	adds	r2, r3, #1
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002370:	b29b      	uxth	r3, r3
 8002372:	3b01      	subs	r3, #1
 8002374:	b29a      	uxth	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800237e:	b29b      	uxth	r3, r3
 8002380:	2b00      	cmp	r3, #0
 8002382:	d110      	bne.n	80023a6 <SPI_2linesTxISR_8BIT+0x5a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2180      	movs	r1, #128	; 0x80
 8002390:	438a      	bics	r2, r1
 8002392:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002398:	b29b      	uxth	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d103      	bne.n	80023a6 <SPI_2linesTxISR_8BIT+0x5a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	0018      	movs	r0, r3
 80023a2:	f000 f939 	bl	8002618 <SPI_CloseRxTx_ISR>
    }
  }
}
 80023a6:	46c0      	nop			; (mov r8, r8)
 80023a8:	46bd      	mov	sp, r7
 80023aa:	b002      	add	sp, #8
 80023ac:	bd80      	pop	{r7, pc}

080023ae <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c0:	b292      	uxth	r2, r2
 80023c2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c8:	1c9a      	adds	r2, r3, #2
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d110      	bne.n	8002408 <SPI_2linesRxISR_16BIT+0x5a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2140      	movs	r1, #64	; 0x40
 80023f2:	438a      	bics	r2, r1
 80023f4:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d103      	bne.n	8002408 <SPI_2linesRxISR_16BIT+0x5a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	0018      	movs	r0, r3
 8002404:	f000 f908 	bl	8002618 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002408:	46c0      	nop			; (mov r8, r8)
 800240a:	46bd      	mov	sp, r7
 800240c:	b002      	add	sp, #8
 800240e:	bd80      	pop	{r7, pc}

08002410 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241c:	881a      	ldrh	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002428:	1c9a      	adds	r2, r3, #2
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002432:	b29b      	uxth	r3, r3
 8002434:	3b01      	subs	r3, #1
 8002436:	b29a      	uxth	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002440:	b29b      	uxth	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d110      	bne.n	8002468 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2180      	movs	r1, #128	; 0x80
 8002452:	438a      	bics	r2, r1
 8002454:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800245a:	b29b      	uxth	r3, r3
 800245c:	2b00      	cmp	r3, #0
 800245e:	d103      	bne.n	8002468 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	0018      	movs	r0, r3
 8002464:	f000 f8d8 	bl	8002618 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002468:	46c0      	nop			; (mov r8, r8)
 800246a:	46bd      	mov	sp, r7
 800246c:	b002      	add	sp, #8
 800246e:	bd80      	pop	{r7, pc}

08002470 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b088      	sub	sp, #32
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	603b      	str	r3, [r7, #0]
 800247c:	1dfb      	adds	r3, r7, #7
 800247e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002480:	f7fe fab6 	bl	80009f0 <HAL_GetTick>
 8002484:	0002      	movs	r2, r0
 8002486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002488:	1a9b      	subs	r3, r3, r2
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	18d3      	adds	r3, r2, r3
 800248e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002490:	f7fe faae 	bl	80009f0 <HAL_GetTick>
 8002494:	0003      	movs	r3, r0
 8002496:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002498:	4b3a      	ldr	r3, [pc, #232]	; (8002584 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	015b      	lsls	r3, r3, #5
 800249e:	0d1b      	lsrs	r3, r3, #20
 80024a0:	69fa      	ldr	r2, [r7, #28]
 80024a2:	4353      	muls	r3, r2
 80024a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024a6:	e058      	b.n	800255a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	3301      	adds	r3, #1
 80024ac:	d055      	beq.n	800255a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80024ae:	f7fe fa9f 	bl	80009f0 <HAL_GetTick>
 80024b2:	0002      	movs	r2, r0
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	69fa      	ldr	r2, [r7, #28]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d902      	bls.n	80024c4 <SPI_WaitFlagStateUntilTimeout+0x54>
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d142      	bne.n	800254a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	21e0      	movs	r1, #224	; 0xe0
 80024d0:	438a      	bics	r2, r1
 80024d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	2382      	movs	r3, #130	; 0x82
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	429a      	cmp	r2, r3
 80024de:	d113      	bne.n	8002508 <SPI_WaitFlagStateUntilTimeout+0x98>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	021b      	lsls	r3, r3, #8
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d005      	beq.n	80024f8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d107      	bne.n	8002508 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2140      	movs	r1, #64	; 0x40
 8002504:	438a      	bics	r2, r1
 8002506:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800250c:	2380      	movs	r3, #128	; 0x80
 800250e:	019b      	lsls	r3, r3, #6
 8002510:	429a      	cmp	r2, r3
 8002512:	d110      	bne.n	8002536 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	491a      	ldr	r1, [pc, #104]	; (8002588 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002520:	400a      	ands	r2, r1
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2180      	movs	r1, #128	; 0x80
 8002530:	0189      	lsls	r1, r1, #6
 8002532:	430a      	orrs	r2, r1
 8002534:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2251      	movs	r2, #81	; 0x51
 800253a:	2101      	movs	r1, #1
 800253c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2250      	movs	r2, #80	; 0x50
 8002542:	2100      	movs	r1, #0
 8002544:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e017      	b.n	800257a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	3b01      	subs	r3, #1
 8002558:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	4013      	ands	r3, r2
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	425a      	negs	r2, r3
 800256a:	4153      	adcs	r3, r2
 800256c:	b2db      	uxtb	r3, r3
 800256e:	001a      	movs	r2, r3
 8002570:	1dfb      	adds	r3, r7, #7
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d197      	bne.n	80024a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	0018      	movs	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	b008      	add	sp, #32
 8002580:	bd80      	pop	{r7, pc}
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	20000008 	.word	0x20000008
 8002588:	ffffdfff 	.word	0xffffdfff

0800258c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b088      	sub	sp, #32
 8002590:	af02      	add	r7, sp, #8
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002598:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <SPI_EndRxTxTransaction+0x84>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	491d      	ldr	r1, [pc, #116]	; (8002614 <SPI_EndRxTxTransaction+0x88>)
 800259e:	0018      	movs	r0, r3
 80025a0:	f7fd fdb2 	bl	8000108 <__udivsi3>
 80025a4:	0003      	movs	r3, r0
 80025a6:	001a      	movs	r2, r3
 80025a8:	0013      	movs	r3, r2
 80025aa:	015b      	lsls	r3, r3, #5
 80025ac:	1a9b      	subs	r3, r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	189b      	adds	r3, r3, r2
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	2382      	movs	r3, #130	; 0x82
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	429a      	cmp	r2, r3
 80025c0:	d112      	bne.n	80025e8 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	0013      	movs	r3, r2
 80025cc:	2200      	movs	r2, #0
 80025ce:	2180      	movs	r1, #128	; 0x80
 80025d0:	f7ff ff4e 	bl	8002470 <SPI_WaitFlagStateUntilTimeout>
 80025d4:	1e03      	subs	r3, r0, #0
 80025d6:	d016      	beq.n	8002606 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025dc:	2220      	movs	r2, #32
 80025de:	431a      	orrs	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e00f      	b.n	8002608 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00a      	beq.n	8002604 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	3b01      	subs	r3, #1
 80025f2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2280      	movs	r2, #128	; 0x80
 80025fc:	4013      	ands	r3, r2
 80025fe:	2b80      	cmp	r3, #128	; 0x80
 8002600:	d0f2      	beq.n	80025e8 <SPI_EndRxTxTransaction+0x5c>
 8002602:	e000      	b.n	8002606 <SPI_EndRxTxTransaction+0x7a>
        break;
 8002604:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	0018      	movs	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	b006      	add	sp, #24
 800260e:	bd80      	pop	{r7, pc}
 8002610:	20000008 	.word	0x20000008
 8002614:	016e3600 	.word	0x016e3600

08002618 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002620:	4b37      	ldr	r3, [pc, #220]	; (8002700 <SPI_CloseRxTx_ISR+0xe8>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4937      	ldr	r1, [pc, #220]	; (8002704 <SPI_CloseRxTx_ISR+0xec>)
 8002626:	0018      	movs	r0, r3
 8002628:	f7fd fd6e 	bl	8000108 <__udivsi3>
 800262c:	0003      	movs	r3, r0
 800262e:	001a      	movs	r2, r3
 8002630:	2364      	movs	r3, #100	; 0x64
 8002632:	4353      	muls	r3, r2
 8002634:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002636:	f7fe f9db 	bl	80009f0 <HAL_GetTick>
 800263a:	0003      	movs	r3, r0
 800263c:	617b      	str	r3, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2120      	movs	r1, #32
 800264a:	438a      	bics	r2, r1
 800264c:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d106      	bne.n	8002662 <SPI_CloseRxTx_ISR+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002658:	2220      	movs	r2, #32
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002660:	e008      	b.n	8002674 <SPI_CloseRxTx_ISR+0x5c>
    }
    count--;
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	3b01      	subs	r3, #1
 8002666:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2202      	movs	r2, #2
 8002670:	4013      	ands	r3, r2
 8002672:	d0ec      	beq.n	800264e <SPI_CloseRxTx_ISR+0x36>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2164      	movs	r1, #100	; 0x64
 800267a:	0018      	movs	r0, r3
 800267c:	f7ff ff86 	bl	800258c <SPI_EndRxTxTransaction>
 8002680:	1e03      	subs	r3, r0, #0
 8002682:	d005      	beq.n	8002690 <SPI_CloseRxTx_ISR+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002688:	2220      	movs	r2, #32
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10a      	bne.n	80026ae <SPI_CloseRxTx_ISR+0x96>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002698:	2300      	movs	r3, #0
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d117      	bne.n	80026e6 <SPI_CloseRxTx_ISR+0xce>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2251      	movs	r2, #81	; 0x51
 80026ba:	5c9b      	ldrb	r3, [r3, r2]
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d108      	bne.n	80026d4 <SPI_CloseRxTx_ISR+0xbc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2251      	movs	r2, #81	; 0x51
 80026c6:	2101      	movs	r1, #1
 80026c8:	5499      	strb	r1, [r3, r2]
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	0018      	movs	r0, r3
 80026ce:	f7ff fde5 	bl	800229c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80026d2:	e010      	b.n	80026f6 <SPI_CloseRxTx_ISR+0xde>
        hspi->State = HAL_SPI_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2251      	movs	r2, #81	; 0x51
 80026d8:	2101      	movs	r1, #1
 80026da:	5499      	strb	r1, [r3, r2]
        HAL_SPI_TxRxCpltCallback(hspi);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	0018      	movs	r0, r3
 80026e0:	f7fd fff8 	bl	80006d4 <HAL_SPI_TxRxCpltCallback>
}
 80026e4:	e007      	b.n	80026f6 <SPI_CloseRxTx_ISR+0xde>
      hspi->State = HAL_SPI_STATE_READY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2251      	movs	r2, #81	; 0x51
 80026ea:	2101      	movs	r1, #1
 80026ec:	5499      	strb	r1, [r3, r2]
      HAL_SPI_ErrorCallback(hspi);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	0018      	movs	r0, r3
 80026f2:	f7ff fddb 	bl	80022ac <HAL_SPI_ErrorCallback>
}
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	46bd      	mov	sp, r7
 80026fa:	b006      	add	sp, #24
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	20000008 	.word	0x20000008
 8002704:	00005dc0 	.word	0x00005dc0

08002708 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e044      	b.n	80027a4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800271e:	2b00      	cmp	r3, #0
 8002720:	d107      	bne.n	8002732 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2278      	movs	r2, #120	; 0x78
 8002726:	2100      	movs	r1, #0
 8002728:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	0018      	movs	r0, r3
 800272e:	f7fe f861 	bl	80007f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2224      	movs	r2, #36	; 0x24
 8002736:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2101      	movs	r1, #1
 8002744:	438a      	bics	r2, r1
 8002746:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	0018      	movs	r0, r3
 800274c:	f000 f8d0 	bl	80028f0 <UART_SetConfig>
 8002750:	0003      	movs	r3, r0
 8002752:	2b01      	cmp	r3, #1
 8002754:	d101      	bne.n	800275a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e024      	b.n	80027a4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	0018      	movs	r0, r3
 8002766:	f000 fb47 	bl	8002df8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	490d      	ldr	r1, [pc, #52]	; (80027ac <HAL_UART_Init+0xa4>)
 8002776:	400a      	ands	r2, r1
 8002778:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	212a      	movs	r1, #42	; 0x2a
 8002786:	438a      	bics	r2, r1
 8002788:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2101      	movs	r1, #1
 8002796:	430a      	orrs	r2, r1
 8002798:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	0018      	movs	r0, r3
 800279e:	f000 fbdf 	bl	8002f60 <UART_CheckIdleState>
 80027a2:	0003      	movs	r3, r0
}
 80027a4:	0018      	movs	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b002      	add	sp, #8
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	ffffb7ff 	.word	0xffffb7ff

080027b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08a      	sub	sp, #40	; 0x28
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	603b      	str	r3, [r7, #0]
 80027bc:	1dbb      	adds	r3, r7, #6
 80027be:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027c4:	2b20      	cmp	r3, #32
 80027c6:	d000      	beq.n	80027ca <HAL_UART_Transmit+0x1a>
 80027c8:	e08c      	b.n	80028e4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <HAL_UART_Transmit+0x28>
 80027d0:	1dbb      	adds	r3, r7, #6
 80027d2:	881b      	ldrh	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e084      	b.n	80028e6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	2380      	movs	r3, #128	; 0x80
 80027e2:	015b      	lsls	r3, r3, #5
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d109      	bne.n	80027fc <HAL_UART_Transmit+0x4c>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d105      	bne.n	80027fc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2201      	movs	r2, #1
 80027f4:	4013      	ands	r3, r2
 80027f6:	d001      	beq.n	80027fc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e074      	b.n	80028e6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2284      	movs	r2, #132	; 0x84
 8002800:	2100      	movs	r1, #0
 8002802:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2221      	movs	r2, #33	; 0x21
 8002808:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800280a:	f7fe f8f1 	bl	80009f0 <HAL_GetTick>
 800280e:	0003      	movs	r3, r0
 8002810:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1dba      	adds	r2, r7, #6
 8002816:	2150      	movs	r1, #80	; 0x50
 8002818:	8812      	ldrh	r2, [r2, #0]
 800281a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1dba      	adds	r2, r7, #6
 8002820:	2152      	movs	r1, #82	; 0x52
 8002822:	8812      	ldrh	r2, [r2, #0]
 8002824:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	2380      	movs	r3, #128	; 0x80
 800282c:	015b      	lsls	r3, r3, #5
 800282e:	429a      	cmp	r2, r3
 8002830:	d108      	bne.n	8002844 <HAL_UART_Transmit+0x94>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d104      	bne.n	8002844 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800283a:	2300      	movs	r3, #0
 800283c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	61bb      	str	r3, [r7, #24]
 8002842:	e003      	b.n	800284c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002848:	2300      	movs	r3, #0
 800284a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800284c:	e02f      	b.n	80028ae <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	0013      	movs	r3, r2
 8002858:	2200      	movs	r2, #0
 800285a:	2180      	movs	r1, #128	; 0x80
 800285c:	f000 fc28 	bl	80030b0 <UART_WaitOnFlagUntilTimeout>
 8002860:	1e03      	subs	r3, r0, #0
 8002862:	d004      	beq.n	800286e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2220      	movs	r2, #32
 8002868:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e03b      	b.n	80028e6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10b      	bne.n	800288c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	001a      	movs	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	05d2      	lsls	r2, r2, #23
 8002880:	0dd2      	lsrs	r2, r2, #23
 8002882:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	3302      	adds	r3, #2
 8002888:	61bb      	str	r3, [r7, #24]
 800288a:	e007      	b.n	800289c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	781a      	ldrb	r2, [r3, #0]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	3301      	adds	r3, #1
 800289a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2252      	movs	r2, #82	; 0x52
 80028a0:	5a9b      	ldrh	r3, [r3, r2]
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b299      	uxth	r1, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2252      	movs	r2, #82	; 0x52
 80028ac:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2252      	movs	r2, #82	; 0x52
 80028b2:	5a9b      	ldrh	r3, [r3, r2]
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1c9      	bne.n	800284e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	0013      	movs	r3, r2
 80028c4:	2200      	movs	r2, #0
 80028c6:	2140      	movs	r1, #64	; 0x40
 80028c8:	f000 fbf2 	bl	80030b0 <UART_WaitOnFlagUntilTimeout>
 80028cc:	1e03      	subs	r3, r0, #0
 80028ce:	d004      	beq.n	80028da <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2220      	movs	r2, #32
 80028d4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e005      	b.n	80028e6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2220      	movs	r2, #32
 80028de:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	e000      	b.n	80028e6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80028e4:	2302      	movs	r3, #2
  }
}
 80028e6:	0018      	movs	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	b008      	add	sp, #32
 80028ec:	bd80      	pop	{r7, pc}
	...

080028f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028f0:	b5b0      	push	{r4, r5, r7, lr}
 80028f2:	b08e      	sub	sp, #56	; 0x38
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028f8:	231a      	movs	r3, #26
 80028fa:	2218      	movs	r2, #24
 80028fc:	189b      	adds	r3, r3, r2
 80028fe:	19db      	adds	r3, r3, r7
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	431a      	orrs	r2, r3
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	431a      	orrs	r2, r3
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	69db      	ldr	r3, [r3, #28]
 8002918:	4313      	orrs	r3, r2
 800291a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4ac6      	ldr	r2, [pc, #792]	; (8002c3c <UART_SetConfig+0x34c>)
 8002924:	4013      	ands	r3, r2
 8002926:	0019      	movs	r1, r3
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800292e:	430a      	orrs	r2, r1
 8002930:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	4ac1      	ldr	r2, [pc, #772]	; (8002c40 <UART_SetConfig+0x350>)
 800293a:	4013      	ands	r3, r2
 800293c:	0019      	movs	r1, r3
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4abb      	ldr	r2, [pc, #748]	; (8002c44 <UART_SetConfig+0x354>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d004      	beq.n	8002964 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002960:	4313      	orrs	r3, r2
 8002962:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	4ab7      	ldr	r2, [pc, #732]	; (8002c48 <UART_SetConfig+0x358>)
 800296c:	4013      	ands	r3, r2
 800296e:	0019      	movs	r1, r3
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002976:	430a      	orrs	r2, r1
 8002978:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4ab3      	ldr	r2, [pc, #716]	; (8002c4c <UART_SetConfig+0x35c>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d131      	bne.n	80029e8 <UART_SetConfig+0xf8>
 8002984:	4bb2      	ldr	r3, [pc, #712]	; (8002c50 <UART_SetConfig+0x360>)
 8002986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002988:	2203      	movs	r2, #3
 800298a:	4013      	ands	r3, r2
 800298c:	2b03      	cmp	r3, #3
 800298e:	d01d      	beq.n	80029cc <UART_SetConfig+0xdc>
 8002990:	d823      	bhi.n	80029da <UART_SetConfig+0xea>
 8002992:	2b02      	cmp	r3, #2
 8002994:	d00c      	beq.n	80029b0 <UART_SetConfig+0xc0>
 8002996:	d820      	bhi.n	80029da <UART_SetConfig+0xea>
 8002998:	2b00      	cmp	r3, #0
 800299a:	d002      	beq.n	80029a2 <UART_SetConfig+0xb2>
 800299c:	2b01      	cmp	r3, #1
 800299e:	d00e      	beq.n	80029be <UART_SetConfig+0xce>
 80029a0:	e01b      	b.n	80029da <UART_SetConfig+0xea>
 80029a2:	231b      	movs	r3, #27
 80029a4:	2218      	movs	r2, #24
 80029a6:	189b      	adds	r3, r3, r2
 80029a8:	19db      	adds	r3, r3, r7
 80029aa:	2201      	movs	r2, #1
 80029ac:	701a      	strb	r2, [r3, #0]
 80029ae:	e09c      	b.n	8002aea <UART_SetConfig+0x1fa>
 80029b0:	231b      	movs	r3, #27
 80029b2:	2218      	movs	r2, #24
 80029b4:	189b      	adds	r3, r3, r2
 80029b6:	19db      	adds	r3, r3, r7
 80029b8:	2202      	movs	r2, #2
 80029ba:	701a      	strb	r2, [r3, #0]
 80029bc:	e095      	b.n	8002aea <UART_SetConfig+0x1fa>
 80029be:	231b      	movs	r3, #27
 80029c0:	2218      	movs	r2, #24
 80029c2:	189b      	adds	r3, r3, r2
 80029c4:	19db      	adds	r3, r3, r7
 80029c6:	2204      	movs	r2, #4
 80029c8:	701a      	strb	r2, [r3, #0]
 80029ca:	e08e      	b.n	8002aea <UART_SetConfig+0x1fa>
 80029cc:	231b      	movs	r3, #27
 80029ce:	2218      	movs	r2, #24
 80029d0:	189b      	adds	r3, r3, r2
 80029d2:	19db      	adds	r3, r3, r7
 80029d4:	2208      	movs	r2, #8
 80029d6:	701a      	strb	r2, [r3, #0]
 80029d8:	e087      	b.n	8002aea <UART_SetConfig+0x1fa>
 80029da:	231b      	movs	r3, #27
 80029dc:	2218      	movs	r2, #24
 80029de:	189b      	adds	r3, r3, r2
 80029e0:	19db      	adds	r3, r3, r7
 80029e2:	2210      	movs	r2, #16
 80029e4:	701a      	strb	r2, [r3, #0]
 80029e6:	e080      	b.n	8002aea <UART_SetConfig+0x1fa>
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a99      	ldr	r2, [pc, #612]	; (8002c54 <UART_SetConfig+0x364>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d131      	bne.n	8002a56 <UART_SetConfig+0x166>
 80029f2:	4b97      	ldr	r3, [pc, #604]	; (8002c50 <UART_SetConfig+0x360>)
 80029f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f6:	220c      	movs	r2, #12
 80029f8:	4013      	ands	r3, r2
 80029fa:	2b0c      	cmp	r3, #12
 80029fc:	d01d      	beq.n	8002a3a <UART_SetConfig+0x14a>
 80029fe:	d823      	bhi.n	8002a48 <UART_SetConfig+0x158>
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d00c      	beq.n	8002a1e <UART_SetConfig+0x12e>
 8002a04:	d820      	bhi.n	8002a48 <UART_SetConfig+0x158>
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d002      	beq.n	8002a10 <UART_SetConfig+0x120>
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d00e      	beq.n	8002a2c <UART_SetConfig+0x13c>
 8002a0e:	e01b      	b.n	8002a48 <UART_SetConfig+0x158>
 8002a10:	231b      	movs	r3, #27
 8002a12:	2218      	movs	r2, #24
 8002a14:	189b      	adds	r3, r3, r2
 8002a16:	19db      	adds	r3, r3, r7
 8002a18:	2200      	movs	r2, #0
 8002a1a:	701a      	strb	r2, [r3, #0]
 8002a1c:	e065      	b.n	8002aea <UART_SetConfig+0x1fa>
 8002a1e:	231b      	movs	r3, #27
 8002a20:	2218      	movs	r2, #24
 8002a22:	189b      	adds	r3, r3, r2
 8002a24:	19db      	adds	r3, r3, r7
 8002a26:	2202      	movs	r2, #2
 8002a28:	701a      	strb	r2, [r3, #0]
 8002a2a:	e05e      	b.n	8002aea <UART_SetConfig+0x1fa>
 8002a2c:	231b      	movs	r3, #27
 8002a2e:	2218      	movs	r2, #24
 8002a30:	189b      	adds	r3, r3, r2
 8002a32:	19db      	adds	r3, r3, r7
 8002a34:	2204      	movs	r2, #4
 8002a36:	701a      	strb	r2, [r3, #0]
 8002a38:	e057      	b.n	8002aea <UART_SetConfig+0x1fa>
 8002a3a:	231b      	movs	r3, #27
 8002a3c:	2218      	movs	r2, #24
 8002a3e:	189b      	adds	r3, r3, r2
 8002a40:	19db      	adds	r3, r3, r7
 8002a42:	2208      	movs	r2, #8
 8002a44:	701a      	strb	r2, [r3, #0]
 8002a46:	e050      	b.n	8002aea <UART_SetConfig+0x1fa>
 8002a48:	231b      	movs	r3, #27
 8002a4a:	2218      	movs	r2, #24
 8002a4c:	189b      	adds	r3, r3, r2
 8002a4e:	19db      	adds	r3, r3, r7
 8002a50:	2210      	movs	r2, #16
 8002a52:	701a      	strb	r2, [r3, #0]
 8002a54:	e049      	b.n	8002aea <UART_SetConfig+0x1fa>
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a7a      	ldr	r2, [pc, #488]	; (8002c44 <UART_SetConfig+0x354>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d13e      	bne.n	8002ade <UART_SetConfig+0x1ee>
 8002a60:	4b7b      	ldr	r3, [pc, #492]	; (8002c50 <UART_SetConfig+0x360>)
 8002a62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a64:	23c0      	movs	r3, #192	; 0xc0
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	4013      	ands	r3, r2
 8002a6a:	22c0      	movs	r2, #192	; 0xc0
 8002a6c:	0112      	lsls	r2, r2, #4
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d027      	beq.n	8002ac2 <UART_SetConfig+0x1d2>
 8002a72:	22c0      	movs	r2, #192	; 0xc0
 8002a74:	0112      	lsls	r2, r2, #4
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d82a      	bhi.n	8002ad0 <UART_SetConfig+0x1e0>
 8002a7a:	2280      	movs	r2, #128	; 0x80
 8002a7c:	0112      	lsls	r2, r2, #4
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d011      	beq.n	8002aa6 <UART_SetConfig+0x1b6>
 8002a82:	2280      	movs	r2, #128	; 0x80
 8002a84:	0112      	lsls	r2, r2, #4
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d822      	bhi.n	8002ad0 <UART_SetConfig+0x1e0>
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d004      	beq.n	8002a98 <UART_SetConfig+0x1a8>
 8002a8e:	2280      	movs	r2, #128	; 0x80
 8002a90:	00d2      	lsls	r2, r2, #3
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d00e      	beq.n	8002ab4 <UART_SetConfig+0x1c4>
 8002a96:	e01b      	b.n	8002ad0 <UART_SetConfig+0x1e0>
 8002a98:	231b      	movs	r3, #27
 8002a9a:	2218      	movs	r2, #24
 8002a9c:	189b      	adds	r3, r3, r2
 8002a9e:	19db      	adds	r3, r3, r7
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]
 8002aa4:	e021      	b.n	8002aea <UART_SetConfig+0x1fa>
 8002aa6:	231b      	movs	r3, #27
 8002aa8:	2218      	movs	r2, #24
 8002aaa:	189b      	adds	r3, r3, r2
 8002aac:	19db      	adds	r3, r3, r7
 8002aae:	2202      	movs	r2, #2
 8002ab0:	701a      	strb	r2, [r3, #0]
 8002ab2:	e01a      	b.n	8002aea <UART_SetConfig+0x1fa>
 8002ab4:	231b      	movs	r3, #27
 8002ab6:	2218      	movs	r2, #24
 8002ab8:	189b      	adds	r3, r3, r2
 8002aba:	19db      	adds	r3, r3, r7
 8002abc:	2204      	movs	r2, #4
 8002abe:	701a      	strb	r2, [r3, #0]
 8002ac0:	e013      	b.n	8002aea <UART_SetConfig+0x1fa>
 8002ac2:	231b      	movs	r3, #27
 8002ac4:	2218      	movs	r2, #24
 8002ac6:	189b      	adds	r3, r3, r2
 8002ac8:	19db      	adds	r3, r3, r7
 8002aca:	2208      	movs	r2, #8
 8002acc:	701a      	strb	r2, [r3, #0]
 8002ace:	e00c      	b.n	8002aea <UART_SetConfig+0x1fa>
 8002ad0:	231b      	movs	r3, #27
 8002ad2:	2218      	movs	r2, #24
 8002ad4:	189b      	adds	r3, r3, r2
 8002ad6:	19db      	adds	r3, r3, r7
 8002ad8:	2210      	movs	r2, #16
 8002ada:	701a      	strb	r2, [r3, #0]
 8002adc:	e005      	b.n	8002aea <UART_SetConfig+0x1fa>
 8002ade:	231b      	movs	r3, #27
 8002ae0:	2218      	movs	r2, #24
 8002ae2:	189b      	adds	r3, r3, r2
 8002ae4:	19db      	adds	r3, r3, r7
 8002ae6:	2210      	movs	r2, #16
 8002ae8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a55      	ldr	r2, [pc, #340]	; (8002c44 <UART_SetConfig+0x354>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d000      	beq.n	8002af6 <UART_SetConfig+0x206>
 8002af4:	e084      	b.n	8002c00 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002af6:	231b      	movs	r3, #27
 8002af8:	2218      	movs	r2, #24
 8002afa:	189b      	adds	r3, r3, r2
 8002afc:	19db      	adds	r3, r3, r7
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d01d      	beq.n	8002b40 <UART_SetConfig+0x250>
 8002b04:	dc20      	bgt.n	8002b48 <UART_SetConfig+0x258>
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d015      	beq.n	8002b36 <UART_SetConfig+0x246>
 8002b0a:	dc1d      	bgt.n	8002b48 <UART_SetConfig+0x258>
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d002      	beq.n	8002b16 <UART_SetConfig+0x226>
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d005      	beq.n	8002b20 <UART_SetConfig+0x230>
 8002b14:	e018      	b.n	8002b48 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b16:	f7fe ffcd 	bl	8001ab4 <HAL_RCC_GetPCLK1Freq>
 8002b1a:	0003      	movs	r3, r0
 8002b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b1e:	e01c      	b.n	8002b5a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b20:	4b4b      	ldr	r3, [pc, #300]	; (8002c50 <UART_SetConfig+0x360>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2210      	movs	r2, #16
 8002b26:	4013      	ands	r3, r2
 8002b28:	d002      	beq.n	8002b30 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002b2a:	4b4b      	ldr	r3, [pc, #300]	; (8002c58 <UART_SetConfig+0x368>)
 8002b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002b2e:	e014      	b.n	8002b5a <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8002b30:	4b4a      	ldr	r3, [pc, #296]	; (8002c5c <UART_SetConfig+0x36c>)
 8002b32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b34:	e011      	b.n	8002b5a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b36:	f7fe ff0d 	bl	8001954 <HAL_RCC_GetSysClockFreq>
 8002b3a:	0003      	movs	r3, r0
 8002b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b3e:	e00c      	b.n	8002b5a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b40:	2380      	movs	r3, #128	; 0x80
 8002b42:	021b      	lsls	r3, r3, #8
 8002b44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b46:	e008      	b.n	8002b5a <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002b4c:	231a      	movs	r3, #26
 8002b4e:	2218      	movs	r2, #24
 8002b50:	189b      	adds	r3, r3, r2
 8002b52:	19db      	adds	r3, r3, r7
 8002b54:	2201      	movs	r2, #1
 8002b56:	701a      	strb	r2, [r3, #0]
        break;
 8002b58:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d100      	bne.n	8002b62 <UART_SetConfig+0x272>
 8002b60:	e132      	b.n	8002dc8 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	0013      	movs	r3, r2
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	189b      	adds	r3, r3, r2
 8002b6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d305      	bcc.n	8002b7e <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d906      	bls.n	8002b8c <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8002b7e:	231a      	movs	r3, #26
 8002b80:	2218      	movs	r2, #24
 8002b82:	189b      	adds	r3, r3, r2
 8002b84:	19db      	adds	r3, r3, r7
 8002b86:	2201      	movs	r2, #1
 8002b88:	701a      	strb	r2, [r3, #0]
 8002b8a:	e11d      	b.n	8002dc8 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8e:	613b      	str	r3, [r7, #16]
 8002b90:	2300      	movs	r3, #0
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	6939      	ldr	r1, [r7, #16]
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	000b      	movs	r3, r1
 8002b9a:	0e1b      	lsrs	r3, r3, #24
 8002b9c:	0010      	movs	r0, r2
 8002b9e:	0205      	lsls	r5, r0, #8
 8002ba0:	431d      	orrs	r5, r3
 8002ba2:	000b      	movs	r3, r1
 8002ba4:	021c      	lsls	r4, r3, #8
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	085b      	lsrs	r3, r3, #1
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	68b8      	ldr	r0, [r7, #8]
 8002bb4:	68f9      	ldr	r1, [r7, #12]
 8002bb6:	1900      	adds	r0, r0, r4
 8002bb8:	4169      	adcs	r1, r5
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	603b      	str	r3, [r7, #0]
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	607b      	str	r3, [r7, #4]
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f7fd fb2a 	bl	8000220 <__aeabi_uldivmod>
 8002bcc:	0002      	movs	r2, r0
 8002bce:	000b      	movs	r3, r1
 8002bd0:	0013      	movs	r3, r2
 8002bd2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002bd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bd6:	23c0      	movs	r3, #192	; 0xc0
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d309      	bcc.n	8002bf2 <UART_SetConfig+0x302>
 8002bde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002be0:	2380      	movs	r3, #128	; 0x80
 8002be2:	035b      	lsls	r3, r3, #13
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d204      	bcs.n	8002bf2 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bee:	60da      	str	r2, [r3, #12]
 8002bf0:	e0ea      	b.n	8002dc8 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8002bf2:	231a      	movs	r3, #26
 8002bf4:	2218      	movs	r2, #24
 8002bf6:	189b      	adds	r3, r3, r2
 8002bf8:	19db      	adds	r3, r3, r7
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	701a      	strb	r2, [r3, #0]
 8002bfe:	e0e3      	b.n	8002dc8 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	69da      	ldr	r2, [r3, #28]
 8002c04:	2380      	movs	r3, #128	; 0x80
 8002c06:	021b      	lsls	r3, r3, #8
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d000      	beq.n	8002c0e <UART_SetConfig+0x31e>
 8002c0c:	e085      	b.n	8002d1a <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8002c0e:	231b      	movs	r3, #27
 8002c10:	2218      	movs	r2, #24
 8002c12:	189b      	adds	r3, r3, r2
 8002c14:	19db      	adds	r3, r3, r7
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d837      	bhi.n	8002c8c <UART_SetConfig+0x39c>
 8002c1c:	009a      	lsls	r2, r3, #2
 8002c1e:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <UART_SetConfig+0x370>)
 8002c20:	18d3      	adds	r3, r2, r3
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c26:	f7fe ff45 	bl	8001ab4 <HAL_RCC_GetPCLK1Freq>
 8002c2a:	0003      	movs	r3, r0
 8002c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c2e:	e036      	b.n	8002c9e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c30:	f7fe ff56 	bl	8001ae0 <HAL_RCC_GetPCLK2Freq>
 8002c34:	0003      	movs	r3, r0
 8002c36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c38:	e031      	b.n	8002c9e <UART_SetConfig+0x3ae>
 8002c3a:	46c0      	nop			; (mov r8, r8)
 8002c3c:	efff69f3 	.word	0xefff69f3
 8002c40:	ffffcfff 	.word	0xffffcfff
 8002c44:	40004800 	.word	0x40004800
 8002c48:	fffff4ff 	.word	0xfffff4ff
 8002c4c:	40013800 	.word	0x40013800
 8002c50:	40021000 	.word	0x40021000
 8002c54:	40004400 	.word	0x40004400
 8002c58:	003d0900 	.word	0x003d0900
 8002c5c:	00f42400 	.word	0x00f42400
 8002c60:	080032e0 	.word	0x080032e0
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c64:	4b60      	ldr	r3, [pc, #384]	; (8002de8 <UART_SetConfig+0x4f8>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2210      	movs	r2, #16
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d002      	beq.n	8002c74 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002c6e:	4b5f      	ldr	r3, [pc, #380]	; (8002dec <UART_SetConfig+0x4fc>)
 8002c70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002c72:	e014      	b.n	8002c9e <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8002c74:	4b5e      	ldr	r3, [pc, #376]	; (8002df0 <UART_SetConfig+0x500>)
 8002c76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c78:	e011      	b.n	8002c9e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c7a:	f7fe fe6b 	bl	8001954 <HAL_RCC_GetSysClockFreq>
 8002c7e:	0003      	movs	r3, r0
 8002c80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c82:	e00c      	b.n	8002c9e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c84:	2380      	movs	r3, #128	; 0x80
 8002c86:	021b      	lsls	r3, r3, #8
 8002c88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c8a:	e008      	b.n	8002c9e <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002c90:	231a      	movs	r3, #26
 8002c92:	2218      	movs	r2, #24
 8002c94:	189b      	adds	r3, r3, r2
 8002c96:	19db      	adds	r3, r3, r7
 8002c98:	2201      	movs	r2, #1
 8002c9a:	701a      	strb	r2, [r3, #0]
        break;
 8002c9c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d100      	bne.n	8002ca6 <UART_SetConfig+0x3b6>
 8002ca4:	e090      	b.n	8002dc8 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca8:	005a      	lsls	r2, r3, #1
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	085b      	lsrs	r3, r3, #1
 8002cb0:	18d2      	adds	r2, r2, r3
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	0019      	movs	r1, r3
 8002cb8:	0010      	movs	r0, r2
 8002cba:	f7fd fa25 	bl	8000108 <__udivsi3>
 8002cbe:	0003      	movs	r3, r0
 8002cc0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc4:	2b0f      	cmp	r3, #15
 8002cc6:	d921      	bls.n	8002d0c <UART_SetConfig+0x41c>
 8002cc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cca:	2380      	movs	r3, #128	; 0x80
 8002ccc:	025b      	lsls	r3, r3, #9
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d21c      	bcs.n	8002d0c <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	200e      	movs	r0, #14
 8002cd8:	2418      	movs	r4, #24
 8002cda:	1903      	adds	r3, r0, r4
 8002cdc:	19db      	adds	r3, r3, r7
 8002cde:	210f      	movs	r1, #15
 8002ce0:	438a      	bics	r2, r1
 8002ce2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce6:	085b      	lsrs	r3, r3, #1
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	2207      	movs	r2, #7
 8002cec:	4013      	ands	r3, r2
 8002cee:	b299      	uxth	r1, r3
 8002cf0:	1903      	adds	r3, r0, r4
 8002cf2:	19db      	adds	r3, r3, r7
 8002cf4:	1902      	adds	r2, r0, r4
 8002cf6:	19d2      	adds	r2, r2, r7
 8002cf8:	8812      	ldrh	r2, [r2, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	1902      	adds	r2, r0, r4
 8002d04:	19d2      	adds	r2, r2, r7
 8002d06:	8812      	ldrh	r2, [r2, #0]
 8002d08:	60da      	str	r2, [r3, #12]
 8002d0a:	e05d      	b.n	8002dc8 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002d0c:	231a      	movs	r3, #26
 8002d0e:	2218      	movs	r2, #24
 8002d10:	189b      	adds	r3, r3, r2
 8002d12:	19db      	adds	r3, r3, r7
 8002d14:	2201      	movs	r2, #1
 8002d16:	701a      	strb	r2, [r3, #0]
 8002d18:	e056      	b.n	8002dc8 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d1a:	231b      	movs	r3, #27
 8002d1c:	2218      	movs	r2, #24
 8002d1e:	189b      	adds	r3, r3, r2
 8002d20:	19db      	adds	r3, r3, r7
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d822      	bhi.n	8002d6e <UART_SetConfig+0x47e>
 8002d28:	009a      	lsls	r2, r3, #2
 8002d2a:	4b32      	ldr	r3, [pc, #200]	; (8002df4 <UART_SetConfig+0x504>)
 8002d2c:	18d3      	adds	r3, r2, r3
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d32:	f7fe febf 	bl	8001ab4 <HAL_RCC_GetPCLK1Freq>
 8002d36:	0003      	movs	r3, r0
 8002d38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d3a:	e021      	b.n	8002d80 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d3c:	f7fe fed0 	bl	8001ae0 <HAL_RCC_GetPCLK2Freq>
 8002d40:	0003      	movs	r3, r0
 8002d42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d44:	e01c      	b.n	8002d80 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d46:	4b28      	ldr	r3, [pc, #160]	; (8002de8 <UART_SetConfig+0x4f8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2210      	movs	r2, #16
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d002      	beq.n	8002d56 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002d50:	4b26      	ldr	r3, [pc, #152]	; (8002dec <UART_SetConfig+0x4fc>)
 8002d52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002d54:	e014      	b.n	8002d80 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8002d56:	4b26      	ldr	r3, [pc, #152]	; (8002df0 <UART_SetConfig+0x500>)
 8002d58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d5a:	e011      	b.n	8002d80 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d5c:	f7fe fdfa 	bl	8001954 <HAL_RCC_GetSysClockFreq>
 8002d60:	0003      	movs	r3, r0
 8002d62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d64:	e00c      	b.n	8002d80 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	021b      	lsls	r3, r3, #8
 8002d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d6c:	e008      	b.n	8002d80 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002d72:	231a      	movs	r3, #26
 8002d74:	2218      	movs	r2, #24
 8002d76:	189b      	adds	r3, r3, r2
 8002d78:	19db      	adds	r3, r3, r7
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	701a      	strb	r2, [r3, #0]
        break;
 8002d7e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d020      	beq.n	8002dc8 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	085a      	lsrs	r2, r3, #1
 8002d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8e:	18d2      	adds	r2, r2, r3
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	0019      	movs	r1, r3
 8002d96:	0010      	movs	r0, r2
 8002d98:	f7fd f9b6 	bl	8000108 <__udivsi3>
 8002d9c:	0003      	movs	r3, r0
 8002d9e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da2:	2b0f      	cmp	r3, #15
 8002da4:	d90a      	bls.n	8002dbc <UART_SetConfig+0x4cc>
 8002da6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002da8:	2380      	movs	r3, #128	; 0x80
 8002daa:	025b      	lsls	r3, r3, #9
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d205      	bcs.n	8002dbc <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	60da      	str	r2, [r3, #12]
 8002dba:	e005      	b.n	8002dc8 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002dbc:	231a      	movs	r3, #26
 8002dbe:	2218      	movs	r2, #24
 8002dc0:	189b      	adds	r3, r3, r2
 8002dc2:	19db      	adds	r3, r3, r7
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002dd4:	231a      	movs	r3, #26
 8002dd6:	2218      	movs	r2, #24
 8002dd8:	189b      	adds	r3, r3, r2
 8002dda:	19db      	adds	r3, r3, r7
 8002ddc:	781b      	ldrb	r3, [r3, #0]
}
 8002dde:	0018      	movs	r0, r3
 8002de0:	46bd      	mov	sp, r7
 8002de2:	b00e      	add	sp, #56	; 0x38
 8002de4:	bdb0      	pop	{r4, r5, r7, pc}
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	40021000 	.word	0x40021000
 8002dec:	003d0900 	.word	0x003d0900
 8002df0:	00f42400 	.word	0x00f42400
 8002df4:	08003304 	.word	0x08003304

08002df8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	2201      	movs	r2, #1
 8002e06:	4013      	ands	r3, r2
 8002e08:	d00b      	beq.n	8002e22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	4a4a      	ldr	r2, [pc, #296]	; (8002f3c <UART_AdvFeatureConfig+0x144>)
 8002e12:	4013      	ands	r3, r2
 8002e14:	0019      	movs	r1, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	2202      	movs	r2, #2
 8002e28:	4013      	ands	r3, r2
 8002e2a:	d00b      	beq.n	8002e44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	4a43      	ldr	r2, [pc, #268]	; (8002f40 <UART_AdvFeatureConfig+0x148>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	0019      	movs	r1, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	2204      	movs	r2, #4
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d00b      	beq.n	8002e66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	4a3b      	ldr	r2, [pc, #236]	; (8002f44 <UART_AdvFeatureConfig+0x14c>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	0019      	movs	r1, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	2208      	movs	r2, #8
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	d00b      	beq.n	8002e88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	4a34      	ldr	r2, [pc, #208]	; (8002f48 <UART_AdvFeatureConfig+0x150>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	0019      	movs	r1, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	2210      	movs	r2, #16
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d00b      	beq.n	8002eaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	4a2c      	ldr	r2, [pc, #176]	; (8002f4c <UART_AdvFeatureConfig+0x154>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	0019      	movs	r1, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	2220      	movs	r2, #32
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	d00b      	beq.n	8002ecc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	4a25      	ldr	r2, [pc, #148]	; (8002f50 <UART_AdvFeatureConfig+0x158>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	0019      	movs	r1, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	2240      	movs	r2, #64	; 0x40
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	d01d      	beq.n	8002f12 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	4a1d      	ldr	r2, [pc, #116]	; (8002f54 <UART_AdvFeatureConfig+0x15c>)
 8002ede:	4013      	ands	r3, r2
 8002ee0:	0019      	movs	r1, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ef2:	2380      	movs	r3, #128	; 0x80
 8002ef4:	035b      	lsls	r3, r3, #13
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d10b      	bne.n	8002f12 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	4a15      	ldr	r2, [pc, #84]	; (8002f58 <UART_AdvFeatureConfig+0x160>)
 8002f02:	4013      	ands	r3, r2
 8002f04:	0019      	movs	r1, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	2280      	movs	r2, #128	; 0x80
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d00b      	beq.n	8002f34 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	4a0e      	ldr	r2, [pc, #56]	; (8002f5c <UART_AdvFeatureConfig+0x164>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	0019      	movs	r1, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	605a      	str	r2, [r3, #4]
  }
}
 8002f34:	46c0      	nop			; (mov r8, r8)
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b002      	add	sp, #8
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	fffdffff 	.word	0xfffdffff
 8002f40:	fffeffff 	.word	0xfffeffff
 8002f44:	fffbffff 	.word	0xfffbffff
 8002f48:	ffff7fff 	.word	0xffff7fff
 8002f4c:	ffffefff 	.word	0xffffefff
 8002f50:	ffffdfff 	.word	0xffffdfff
 8002f54:	ffefffff 	.word	0xffefffff
 8002f58:	ff9fffff 	.word	0xff9fffff
 8002f5c:	fff7ffff 	.word	0xfff7ffff

08002f60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b092      	sub	sp, #72	; 0x48
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2284      	movs	r2, #132	; 0x84
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f70:	f7fd fd3e 	bl	80009f0 <HAL_GetTick>
 8002f74:	0003      	movs	r3, r0
 8002f76:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2208      	movs	r2, #8
 8002f80:	4013      	ands	r3, r2
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d12c      	bne.n	8002fe0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f88:	2280      	movs	r2, #128	; 0x80
 8002f8a:	0391      	lsls	r1, r2, #14
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	4a46      	ldr	r2, [pc, #280]	; (80030a8 <UART_CheckIdleState+0x148>)
 8002f90:	9200      	str	r2, [sp, #0]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f000 f88c 	bl	80030b0 <UART_WaitOnFlagUntilTimeout>
 8002f98:	1e03      	subs	r3, r0, #0
 8002f9a:	d021      	beq.n	8002fe0 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f9c:	f3ef 8310 	mrs	r3, PRIMASK
 8002fa0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002fa4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fac:	f383 8810 	msr	PRIMASK, r3
}
 8002fb0:	46c0      	nop			; (mov r8, r8)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2180      	movs	r1, #128	; 0x80
 8002fbe:	438a      	bics	r2, r1
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc8:	f383 8810 	msr	PRIMASK, r3
}
 8002fcc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2278      	movs	r2, #120	; 0x78
 8002fd8:	2100      	movs	r1, #0
 8002fda:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e05f      	b.n	80030a0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2204      	movs	r2, #4
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d146      	bne.n	800307c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ff0:	2280      	movs	r2, #128	; 0x80
 8002ff2:	03d1      	lsls	r1, r2, #15
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	4a2c      	ldr	r2, [pc, #176]	; (80030a8 <UART_CheckIdleState+0x148>)
 8002ff8:	9200      	str	r2, [sp, #0]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f000 f858 	bl	80030b0 <UART_WaitOnFlagUntilTimeout>
 8003000:	1e03      	subs	r3, r0, #0
 8003002:	d03b      	beq.n	800307c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003004:	f3ef 8310 	mrs	r3, PRIMASK
 8003008:	60fb      	str	r3, [r7, #12]
  return(result);
 800300a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800300c:	637b      	str	r3, [r7, #52]	; 0x34
 800300e:	2301      	movs	r3, #1
 8003010:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	f383 8810 	msr	PRIMASK, r3
}
 8003018:	46c0      	nop			; (mov r8, r8)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4921      	ldr	r1, [pc, #132]	; (80030ac <UART_CheckIdleState+0x14c>)
 8003026:	400a      	ands	r2, r1
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800302c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f383 8810 	msr	PRIMASK, r3
}
 8003034:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003036:	f3ef 8310 	mrs	r3, PRIMASK
 800303a:	61bb      	str	r3, [r7, #24]
  return(result);
 800303c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800303e:	633b      	str	r3, [r7, #48]	; 0x30
 8003040:	2301      	movs	r3, #1
 8003042:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	f383 8810 	msr	PRIMASK, r3
}
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2101      	movs	r1, #1
 8003058:	438a      	bics	r2, r1
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	f383 8810 	msr	PRIMASK, r3
}
 8003066:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2280      	movs	r2, #128	; 0x80
 800306c:	2120      	movs	r1, #32
 800306e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2278      	movs	r2, #120	; 0x78
 8003074:	2100      	movs	r1, #0
 8003076:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e011      	b.n	80030a0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2220      	movs	r2, #32
 8003080:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2280      	movs	r2, #128	; 0x80
 8003086:	2120      	movs	r1, #32
 8003088:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2278      	movs	r2, #120	; 0x78
 800309a:	2100      	movs	r1, #0
 800309c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	0018      	movs	r0, r3
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b010      	add	sp, #64	; 0x40
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	01ffffff 	.word	0x01ffffff
 80030ac:	fffffedf 	.word	0xfffffedf

080030b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	603b      	str	r3, [r7, #0]
 80030bc:	1dfb      	adds	r3, r7, #7
 80030be:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030c0:	e04b      	b.n	800315a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	3301      	adds	r3, #1
 80030c6:	d048      	beq.n	800315a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c8:	f7fd fc92 	bl	80009f0 <HAL_GetTick>
 80030cc:	0002      	movs	r2, r0
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d302      	bcc.n	80030de <UART_WaitOnFlagUntilTimeout+0x2e>
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e04b      	b.n	800317a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2204      	movs	r2, #4
 80030ea:	4013      	ands	r3, r2
 80030ec:	d035      	beq.n	800315a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	2208      	movs	r2, #8
 80030f6:	4013      	ands	r3, r2
 80030f8:	2b08      	cmp	r3, #8
 80030fa:	d111      	bne.n	8003120 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2208      	movs	r2, #8
 8003102:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	0018      	movs	r0, r3
 8003108:	f000 f83c 	bl	8003184 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2284      	movs	r2, #132	; 0x84
 8003110:	2108      	movs	r1, #8
 8003112:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2278      	movs	r2, #120	; 0x78
 8003118:	2100      	movs	r1, #0
 800311a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e02c      	b.n	800317a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	69da      	ldr	r2, [r3, #28]
 8003126:	2380      	movs	r3, #128	; 0x80
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	401a      	ands	r2, r3
 800312c:	2380      	movs	r3, #128	; 0x80
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	429a      	cmp	r2, r3
 8003132:	d112      	bne.n	800315a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2280      	movs	r2, #128	; 0x80
 800313a:	0112      	lsls	r2, r2, #4
 800313c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	0018      	movs	r0, r3
 8003142:	f000 f81f 	bl	8003184 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2284      	movs	r2, #132	; 0x84
 800314a:	2120      	movs	r1, #32
 800314c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2278      	movs	r2, #120	; 0x78
 8003152:	2100      	movs	r1, #0
 8003154:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e00f      	b.n	800317a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	4013      	ands	r3, r2
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	425a      	negs	r2, r3
 800316a:	4153      	adcs	r3, r2
 800316c:	b2db      	uxtb	r3, r3
 800316e:	001a      	movs	r2, r3
 8003170:	1dfb      	adds	r3, r7, #7
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	429a      	cmp	r2, r3
 8003176:	d0a4      	beq.n	80030c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	0018      	movs	r0, r3
 800317c:	46bd      	mov	sp, r7
 800317e:	b004      	add	sp, #16
 8003180:	bd80      	pop	{r7, pc}
	...

08003184 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b08e      	sub	sp, #56	; 0x38
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800318c:	f3ef 8310 	mrs	r3, PRIMASK
 8003190:	617b      	str	r3, [r7, #20]
  return(result);
 8003192:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003194:	637b      	str	r3, [r7, #52]	; 0x34
 8003196:	2301      	movs	r3, #1
 8003198:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	f383 8810 	msr	PRIMASK, r3
}
 80031a0:	46c0      	nop			; (mov r8, r8)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4926      	ldr	r1, [pc, #152]	; (8003248 <UART_EndRxTransfer+0xc4>)
 80031ae:	400a      	ands	r2, r1
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	f383 8810 	msr	PRIMASK, r3
}
 80031bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031be:	f3ef 8310 	mrs	r3, PRIMASK
 80031c2:	623b      	str	r3, [r7, #32]
  return(result);
 80031c4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c6:	633b      	str	r3, [r7, #48]	; 0x30
 80031c8:	2301      	movs	r3, #1
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	f383 8810 	msr	PRIMASK, r3
}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2101      	movs	r1, #1
 80031e0:	438a      	bics	r2, r1
 80031e2:	609a      	str	r2, [r3, #8]
 80031e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ea:	f383 8810 	msr	PRIMASK, r3
}
 80031ee:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d118      	bne.n	800322a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031f8:	f3ef 8310 	mrs	r3, PRIMASK
 80031fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80031fe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003200:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003202:	2301      	movs	r3, #1
 8003204:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f383 8810 	msr	PRIMASK, r3
}
 800320c:	46c0      	nop			; (mov r8, r8)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2110      	movs	r1, #16
 800321a:	438a      	bics	r2, r1
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003220:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	f383 8810 	msr	PRIMASK, r3
}
 8003228:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2280      	movs	r2, #128	; 0x80
 800322e:	2120      	movs	r1, #32
 8003230:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	46bd      	mov	sp, r7
 8003242:	b00e      	add	sp, #56	; 0x38
 8003244:	bd80      	pop	{r7, pc}
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	fffffedf 	.word	0xfffffedf

0800324c <__libc_init_array>:
 800324c:	b570      	push	{r4, r5, r6, lr}
 800324e:	2600      	movs	r6, #0
 8003250:	4d0c      	ldr	r5, [pc, #48]	; (8003284 <__libc_init_array+0x38>)
 8003252:	4c0d      	ldr	r4, [pc, #52]	; (8003288 <__libc_init_array+0x3c>)
 8003254:	1b64      	subs	r4, r4, r5
 8003256:	10a4      	asrs	r4, r4, #2
 8003258:	42a6      	cmp	r6, r4
 800325a:	d109      	bne.n	8003270 <__libc_init_array+0x24>
 800325c:	2600      	movs	r6, #0
 800325e:	f000 f821 	bl	80032a4 <_init>
 8003262:	4d0a      	ldr	r5, [pc, #40]	; (800328c <__libc_init_array+0x40>)
 8003264:	4c0a      	ldr	r4, [pc, #40]	; (8003290 <__libc_init_array+0x44>)
 8003266:	1b64      	subs	r4, r4, r5
 8003268:	10a4      	asrs	r4, r4, #2
 800326a:	42a6      	cmp	r6, r4
 800326c:	d105      	bne.n	800327a <__libc_init_array+0x2e>
 800326e:	bd70      	pop	{r4, r5, r6, pc}
 8003270:	00b3      	lsls	r3, r6, #2
 8003272:	58eb      	ldr	r3, [r5, r3]
 8003274:	4798      	blx	r3
 8003276:	3601      	adds	r6, #1
 8003278:	e7ee      	b.n	8003258 <__libc_init_array+0xc>
 800327a:	00b3      	lsls	r3, r6, #2
 800327c:	58eb      	ldr	r3, [r5, r3]
 800327e:	4798      	blx	r3
 8003280:	3601      	adds	r6, #1
 8003282:	e7f2      	b.n	800326a <__libc_init_array+0x1e>
 8003284:	08003330 	.word	0x08003330
 8003288:	08003330 	.word	0x08003330
 800328c:	08003330 	.word	0x08003330
 8003290:	08003334 	.word	0x08003334

08003294 <memset>:
 8003294:	0003      	movs	r3, r0
 8003296:	1882      	adds	r2, r0, r2
 8003298:	4293      	cmp	r3, r2
 800329a:	d100      	bne.n	800329e <memset+0xa>
 800329c:	4770      	bx	lr
 800329e:	7019      	strb	r1, [r3, #0]
 80032a0:	3301      	adds	r3, #1
 80032a2:	e7f9      	b.n	8003298 <memset+0x4>

080032a4 <_init>:
 80032a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032a6:	46c0      	nop			; (mov r8, r8)
 80032a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032aa:	bc08      	pop	{r3}
 80032ac:	469e      	mov	lr, r3
 80032ae:	4770      	bx	lr

080032b0 <_fini>:
 80032b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032b6:	bc08      	pop	{r3}
 80032b8:	469e      	mov	lr, r3
 80032ba:	4770      	bx	lr
